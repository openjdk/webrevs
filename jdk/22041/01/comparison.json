{"files":[{"patch":"@@ -125,40 +125,0 @@\n-\n-POLICY_SRC := $(TOPDIR)\/src\/java.base\/share\/conf\/security\/java.policy\n-POLICY_DST := $(CONF_DST_DIR)\/security\/java.policy\n-\n-POLICY_SRC_LIST := $(POLICY_SRC)\n-\n-$(POLICY_DST): $(POLICY_SRC_LIST)\n-\t$(call MakeTargetDir)\n-\t$(RM) $@ $@.tmp\n-\t$(foreach f, $(POLICY_SRC_LIST), $(CAT) $(f) >> $@.tmp;)\n-\t$(MV) $@.tmp $@\n-\n-TARGETS += $(POLICY_DST)\n-\n-################################################################################\n-\n-DEF_POLICY_SRC := $(TOPDIR)\/src\/java.base\/share\/lib\/security\/default.policy\n-DEF_POLICY_DST := $(LIB_DST_DIR)\/security\/default.policy\n-\n-DEF_POLICY_SRC_LIST := $(DEF_POLICY_SRC)\n-DEF_POLICY_SRC_LIST += $(CUSTOM_POLICY_SRC_LIST)\n-\n-ifeq ($(call isTargetOs, windows), true)\n-  DEF_POLICY_SRC_LIST += $(TOPDIR)\/src\/java.base\/$(OPENJDK_TARGET_OS)\/lib\/security\/default.policy\n-endif\n-\n-# Allow imported modules to modify the java.policy\n-ifneq ($(IMPORT_MODULES_CONF), )\n-  DEF_POLICY_SRC_LIST += $(wildcard $(IMPORT_MODULES_CONF)\/java.base\/security\/java.policy.extra)\n-endif\n-\n-$(DEF_POLICY_DST): $(DEF_POLICY_SRC_LIST)\n-\t$(call MakeTargetDir)\n-\t$(RM) $@ $@.tmp\n-\t$(foreach f, $(DEF_POLICY_SRC_LIST), $(CAT) $(f) >> $@.tmp;)\n-\t$(MV) $@.tmp $@\n-\n-TARGETS += $(DEF_POLICY_DST)\n-\n-################################################################################\n","filename":"make\/modules\/java.base\/Copy.gmk","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-    JAVA_ARGS := -Djava.security.manager=allow, \\\n","filename":"make\/modules\/java.rmi\/Launcher.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -350,62 +350,0 @@\n-\n-  if (!java_lang_System::allow_security_manager()) {\n-    \/\/ No need for any further checking. Package access always allowed.\n-    return;\n-  }\n-\n-  if (is_in_package_access_cache(THREAD, klass->name(), protection_domain)) {\n-    \/\/ No need to check again.\n-    return;\n-  }\n-\n-  \/\/ We only have to call checkPackageAccess if there's a security manager installed.\n-  if (java_lang_System::has_security_manager()) {\n-\n-    \/\/ This handle and the class_loader handle passed in keeps this class from\n-    \/\/ being unloaded through several GC points.\n-    \/\/ The class_loader handle passed in is the initiating loader.\n-    Handle mirror(THREAD, klass->java_mirror());\n-\n-    \/\/ Now we have to call back to java to check if the initating class has access\n-    InstanceKlass* system_loader = vmClasses::ClassLoader_klass();\n-    JavaValue result(T_VOID);\n-    JavaCalls::call_special(&result,\n-                           class_loader,\n-                           system_loader,\n-                           vmSymbols::checkPackageAccess_name(),\n-                           vmSymbols::class_protectiondomain_signature(),\n-                           mirror,\n-                           protection_domain,\n-                           THREAD);\n-\n-    LogTarget(Debug, protectiondomain) lt;\n-    if (lt.is_enabled()) {\n-      ResourceMark rm(THREAD);\n-      \/\/ Print out trace information\n-      LogStream ls(lt);\n-      ls.print_cr(\"Checking package access\");\n-      ls.print(\"class loader: \");\n-      class_loader()->print_value_on(&ls);\n-      ls.print(\" protection domain: \");\n-      protection_domain()->print_value_on(&ls);\n-      ls.print(\" loading: \"); klass->print_value_on(&ls);\n-      if (HAS_PENDING_EXCEPTION) {\n-        ls.print_cr(\" DENIED !!!!!!!!!!!!!!!!!!!!!\");\n-      } else {\n-        ls.print_cr(\" granted\");\n-      }\n-    }\n-\n-    if (HAS_PENDING_EXCEPTION) return;\n-  }\n-\n-  \/\/ If no exception has been thrown, we have checked that the protection_domain can access\n-  \/\/ this klass. Always add it to the cache (even if no SecurityManager is installed yet).\n-  \/\/\n-  \/\/ This ensures that subsequent calls to Dictionary::find(THREAD, klass->name(), protection_domain)\n-  \/\/ will always succeed. I.e., a new SecurityManager installed in the future cannot retroactively\n-  \/\/ revoke the granted access.\n-  {\n-    MutexLocker mu(THREAD, SystemDictionary_lock);\n-    add_to_package_access_cache(THREAD, klass, protection_domain);\n-  }\n","filename":"src\/hotspot\/share\/classfile\/dictionary.cpp","additions":0,"deletions":62,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1602,1 +1602,0 @@\n-int java_lang_Thread::_inheritedAccessControlContext_offset;\n@@ -1619,1 +1618,0 @@\n-  macro(_inheritedAccessControlContext_offset, k, vmSymbols::inheritedAccessControlContext_name(), accesscontrolcontext_signature, false); \\\n@@ -1796,4 +1794,0 @@\n-oop java_lang_Thread::inherited_access_control_context(oop java_thread) {\n-  return java_thread->obj_field(_inheritedAccessControlContext_offset);\n-}\n-\n@@ -4785,3 +4779,0 @@\n-int java_lang_System::_static_security_offset;\n-int java_lang_System::_static_allow_security_offset;\n-int java_lang_System::_static_never_offset;\n@@ -4792,4 +4783,1 @@\n-  macro(_static_err_offset, k, \"err\", print_stream_signature, true); \\\n-  macro(_static_security_offset, k, \"security\", security_manager_signature, true); \\\n-  macro(_static_allow_security_offset, k, \"allowSecurityManager\", int_signature, true); \\\n-  macro(_static_never_offset, k, \"NEVER\", int_signature, true)\n+  macro(_static_err_offset, k, \"err\", print_stream_signature, true);\n@@ -4805,9 +4793,1 @@\n-  static int initialized = false;\n-  static bool allowed = true; \/\/ default\n-  if (!initialized) {\n-    oop base = vmClasses::System_klass()->static_field_base_raw();\n-    int never = base->int_field(_static_never_offset);\n-    allowed = (base->int_field(_static_allow_security_offset) != never);\n-    initialized = true;\n-  }\n-  return allowed;\n+  return false;\n@@ -4818,2 +4798,1 @@\n-  oop base = vmClasses::System_klass()->static_field_base_raw();\n-  return base->obj_field(_static_security_offset) != nullptr;\n+  return false;\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":3,"deletions":24,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -361,1 +361,0 @@\n-  static int _inheritedAccessControlContext_offset;\n@@ -408,2 +407,0 @@\n-  \/\/ Control context\n-  static oop inherited_access_control_context(oop java_thread);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -442,1 +442,0 @@\n-  template(inheritedAccessControlContext_name,        \"inheritedAccessControlContext\")            \\\n@@ -445,1 +444,0 @@\n-  template(checkPackageAccess_name,                   \"checkPackageAccess\")                       \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -726,7 +726,0 @@\n-\/*\n- * java.security.*\n- *\/\n-\n-JNIEXPORT jobject JNICALL\n-JVM_GetInheritedAccessControlContext(JNIEnv *env, jclass cls);\n-\n@@ -744,3 +737,0 @@\n-JNIEXPORT jobject JNICALL\n-JVM_GetStackAccessControlContext(JNIEnv *env, jclass cls);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1272,81 +1272,0 @@\n-\/\/ Returns the inherited_access_control_context field of the running thread.\n-JVM_ENTRY(jobject, JVM_GetInheritedAccessControlContext(JNIEnv *env, jclass cls))\n-  oop result = java_lang_Thread::inherited_access_control_context(thread->threadObj());\n-  return JNIHandles::make_local(THREAD, result);\n-JVM_END\n-\n-JVM_ENTRY(jobject, JVM_GetStackAccessControlContext(JNIEnv *env, jclass cls))\n-  if (!UsePrivilegedStack) return nullptr;\n-\n-  ResourceMark rm(THREAD);\n-  GrowableArray<Handle>* local_array = new GrowableArray<Handle>(12);\n-  JvmtiVMObjectAllocEventCollector oam;\n-\n-  \/\/ count the protection domains on the execution stack. We collapse\n-  \/\/ duplicate consecutive protection domains into a single one, as\n-  \/\/ well as stopping when we hit a privileged frame.\n-\n-  oop previous_protection_domain = nullptr;\n-  Handle privileged_context(thread, nullptr);\n-  bool is_privileged = false;\n-  oop protection_domain = nullptr;\n-\n-  \/\/ Iterate through Java frames\n-  vframeStream vfst(thread);\n-  for(; !vfst.at_end(); vfst.next()) {\n-    \/\/ get method of frame\n-    Method* method = vfst.method();\n-\n-    \/\/ stop at the first privileged frame\n-    if (method->method_holder() == vmClasses::AccessController_klass() &&\n-      method->name() == vmSymbols::executePrivileged_name())\n-    {\n-      \/\/ this frame is privileged\n-      is_privileged = true;\n-\n-      javaVFrame *priv = vfst.asJavaVFrame();       \/\/ executePrivileged\n-\n-      StackValueCollection* locals = priv->locals();\n-      StackValue* ctx_sv = locals->at(1); \/\/ AccessControlContext context\n-      StackValue* clr_sv = locals->at(2); \/\/ Class<?> caller\n-      assert(!ctx_sv->obj_is_scalar_replaced(), \"found scalar-replaced object\");\n-      assert(!clr_sv->obj_is_scalar_replaced(), \"found scalar-replaced object\");\n-      privileged_context    = ctx_sv->get_obj();\n-      Handle caller         = clr_sv->get_obj();\n-\n-      Klass *caller_klass = java_lang_Class::as_Klass(caller());\n-      protection_domain  = caller_klass->protection_domain();\n-    } else {\n-      protection_domain = method->method_holder()->protection_domain();\n-    }\n-\n-    if ((previous_protection_domain != protection_domain) && (protection_domain != nullptr)) {\n-      local_array->push(Handle(thread, protection_domain));\n-      previous_protection_domain = protection_domain;\n-    }\n-\n-    if (is_privileged) break;\n-  }\n-\n-\n-  \/\/ either all the domains on the stack were system domains, or\n-  \/\/ we had a privileged system domain\n-  if (local_array->is_empty()) {\n-    if (is_privileged && privileged_context.is_null()) return nullptr;\n-\n-    oop result = java_security_AccessControlContext::create(objArrayHandle(), is_privileged, privileged_context, CHECK_NULL);\n-    return JNIHandles::make_local(THREAD, result);\n-  }\n-\n-  objArrayOop context = oopFactory::new_objArray(vmClasses::ProtectionDomain_klass(),\n-                                                 local_array->length(), CHECK_NULL);\n-  objArrayHandle h_context(thread, context);\n-  for (int index = 0; index < local_array->length(); index++) {\n-    h_context->obj_at_put(index, local_array->at(index)());\n-  }\n-\n-  oop result = java_security_AccessControlContext::create(h_context, is_privileged, privileged_context, CHECK_NULL);\n-\n-  return JNIHandles::make_local(THREAD, result);\n-JVM_END\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":81,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -680,3 +680,0 @@\n-  develop(bool, UsePrivilegedStack, true,                                   \\\n-          \"Enable the security JVM functions\")                              \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -559,3 +559,0 @@\n-     * @throws  SecurityException\n-     *          If a required system property value cannot be accessed.\n-     *\n@@ -575,3 +572,0 @@\n-     * @throws  SecurityException\n-     *          If a required system property value cannot be accessed.\n-     *\n@@ -617,6 +611,0 @@\n-     * @throws  SecurityException\n-     *          If a required system property value cannot be accessed, or\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkRead} method denies\n-     *          read access to the file\n-     *\n@@ -645,6 +633,0 @@\n-     * @throws  SecurityException\n-     *          If a required system property value cannot be accessed, or\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkRead} method denies\n-     *          read access to the file\n-     *\n@@ -739,2 +721,0 @@\n-     * @throws SecurityException If a required system property value cannot\n-     * be accessed.\n@@ -772,5 +752,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkRead(java.lang.String)}\n-     *          method denies read access to the file\n@@ -801,5 +776,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to the file\n@@ -825,5 +795,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkRead(java.lang.String)}\n-     *          method denies read access to the file or directory\n@@ -856,5 +821,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkRead(java.lang.String)}\n-     *          method denies read access to the file\n@@ -889,5 +849,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkRead(java.lang.String)}\n-     *          method denies read access to the file\n@@ -926,5 +881,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkRead(java.lang.String)}\n-     *          method denies read access to the file\n-     *\n@@ -971,5 +921,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkRead(java.lang.String)}\n-     *          method denies read access to the file\n@@ -1003,5 +948,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkRead(java.lang.String)}\n-     *          method denies read access to the file\n@@ -1043,5 +983,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to the file\n-     *\n@@ -1073,5 +1008,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkDelete} method denies\n-     *          delete access to the file\n@@ -1111,5 +1041,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkDelete} method denies\n-     *          delete access to the file\n-     *\n@@ -1158,5 +1083,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          SecurityManager#checkRead(String)} method denies read access to\n-     *          the directory\n@@ -1178,5 +1098,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          SecurityManager#checkRead(String)} method denies read access to\n-     *          the directory\n@@ -1226,5 +1141,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          SecurityManager#checkRead(String)} method denies read access to\n-     *          the directory\n-     *\n@@ -1278,5 +1188,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          SecurityManager#checkRead(String)} method denies read access to\n-     *          the directory\n-     *\n@@ -1318,5 +1223,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          SecurityManager#checkRead(String)} method denies read access to\n-     *          the directory\n-     *\n@@ -1356,5 +1256,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          SecurityManager#checkRead(String)} method denies read access to\n-     *          the directory\n-     *\n@@ -1381,5 +1276,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method does not permit the named directory to be created\n@@ -1408,10 +1298,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkRead(java.lang.String)}\n-     *          method does not permit verification of the existence of the\n-     *          named directory and all necessary parent directories; or if\n-     *          the {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method does not permit the named directory and all necessary\n-     *          parent directories to be created\n@@ -1461,5 +1341,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to either the old or new pathnames\n-     *\n@@ -1504,5 +1379,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to the named file\n-     *\n@@ -1536,5 +1406,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to the named file\n-     *\n@@ -1580,5 +1445,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to the named file\n-     *\n@@ -1620,5 +1480,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to the file\n-     *\n@@ -1662,5 +1517,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to the file\n-     *\n@@ -1708,5 +1558,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to the file\n-     *\n@@ -1750,5 +1595,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to the file\n-     *\n@@ -1796,5 +1636,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method denies write access to the file\n-     *\n@@ -1817,5 +1652,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkExec(java.lang.String)}\n-     *          method denies execute access to the file\n-     *\n@@ -1853,6 +1683,0 @@\n-     * <p> Unlike most methods in this class, this method does not throw\n-     * security exceptions.  If a security manager exists and its {@link\n-     * SecurityManager#checkRead(String)} method denies read access to a\n-     * particular root directory, then that directory will not appear in the\n-     * result.\n-     *\n@@ -1901,6 +1725,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"getFileSystemAttributes\")}\n-     *          or its {@link SecurityManager#checkRead(String)} method denies\n-     *          read access to the file named by this abstract pathname\n-     *\n@@ -1945,6 +1763,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"getFileSystemAttributes\")}\n-     *          or its {@link SecurityManager#checkRead(String)} method denies\n-     *          read access to the file named by this abstract pathname\n-     *\n@@ -1992,6 +1804,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"getFileSystemAttributes\")}\n-     *          or its {@link SecurityManager#checkRead(String)} method denies\n-     *          read access to the file named by this abstract pathname\n-     *\n@@ -2179,5 +1985,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method does not allow a file to be created\n-     *\n@@ -2253,5 +2054,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *          method does not allow a file to be created\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":0,"deletions":204,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -98,5 +98,0 @@\n-     * First, if there is a security\n-     * manager, its {@code checkRead} method\n-     * is called with the {@code name} argument\n-     * as its argument.\n-     * <p>\n@@ -112,4 +107,0 @@\n-     * @throws     SecurityException      if a security manager exists and its\n-     *             {@code checkRead} method denies read access\n-     *             to the file.\n-     * @see        java.lang.SecurityManager#checkRead(java.lang.String)\n@@ -129,5 +120,0 @@\n-     * First, if there is a security manager,\n-     * its {@code checkRead} method  is called\n-     * with the path represented by the {@code file}\n-     * argument as its argument.\n-     * <p>\n@@ -143,2 +129,0 @@\n-     * @throws     SecurityException      if a security manager exists and its\n-     *             {@code checkRead} method denies read access to the file.\n@@ -146,1 +130,0 @@\n-     * @see        java.lang.SecurityManager#checkRead(java.lang.String)\n@@ -174,5 +157,0 @@\n-     * If there is a security manager, its {@code checkRead} method is\n-     * called with the file descriptor {@code fdObj} as its argument to\n-     * see if it's ok to read the file descriptor. If read access is denied\n-     * to the file descriptor a {@code SecurityException} is thrown.\n-     * <p>\n@@ -188,4 +166,0 @@\n-     * @throws     SecurityException      if a security manager exists and its\n-     *             {@code checkRead} method denies read access to the\n-     *             file descriptor.\n-     * @see        SecurityManager#checkRead(java.io.FileDescriptor)\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -106,3 +106,0 @@\n-     * First, if there is a security manager, its {@code checkWrite}\n-     * method is called with {@code name} as its argument.\n-     * <p>\n@@ -121,4 +118,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *               {@code checkWrite} method denies write access\n-     *               to the file.\n-     * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n@@ -140,3 +133,0 @@\n-     * First, if there is a security manager, its {@code checkWrite}\n-     * method is called with {@code name} as its argument.\n-     * <p>\n@@ -153,4 +143,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *               {@code checkWrite} method denies write access\n-     *               to the file.\n-     * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n@@ -174,4 +160,0 @@\n-     * First, if there is a security manager, its {@code checkWrite}\n-     * method is called with the path represented by the {@code file}\n-     * argument as its argument.\n-     * <p>\n@@ -186,3 +168,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *               {@code checkWrite} method denies write access\n-     *               to the file.\n@@ -190,2 +169,0 @@\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n@@ -208,4 +185,0 @@\n-     * First, if there is a security manager, its {@code checkWrite}\n-     * method is called with the path represented by the {@code file}\n-     * argument as its argument.\n-     * <p>\n@@ -222,3 +195,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *               {@code checkWrite} method denies write access\n-     *               to the file.\n@@ -226,2 +196,0 @@\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n@@ -259,4 +227,0 @@\n-     * First, if there is a security manager, its {@code checkWrite}\n-     * method is called with the file descriptor {@code fdObj}\n-     * argument as its argument.\n-     * <p>\n@@ -272,4 +236,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *               {@code checkWrite} method denies\n-     *               write access to the file descriptor\n-     * @see        java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n- * The actions to be granted are passed to the constructor in a string containing\n+ * The actions are passed to the constructor in a string containing\n@@ -66,18 +66,1 @@\n- * \"read\", \"write\", \"execute\", \"delete\", and \"readlink\". Their meaning is\n- * defined as follows:\n- *\n- * <DL>\n- *    <DT> read <DD> read permission\n- *    <DT> write <DD> write permission\n- *    <DT> execute\n- *    <DD> execute permission. Allows {@code Runtime.exec} to\n- *         be called. Corresponds to {@code SecurityManager.checkExec}.\n- *    <DT> delete\n- *    <DD> delete permission. Allows {@code File.delete} to\n- *         be called. Corresponds to {@code SecurityManager.checkDelete}.\n- *    <DT> readlink\n- *    <DD> read link permission. Allows the target of a\n- *         <a href=\"..\/nio\/file\/package-summary.html#links\">symbolic link<\/a>\n- *         to be read by invoking the {@link java.nio.file.Files#readSymbolicLink\n- *         readSymbolicLink } method.\n- * <\/DL>\n+ * \"read\", \"write\", \"execute\", \"delete\", and \"readlink\".\n@@ -86,11 +69,4 @@\n- * <P>\n- * Be careful when granting FilePermissions. Think about the implications\n- * of granting read and especially write access to various files and\n- * directories. The {@literal \"<<ALL FILES>>\"} permission with write action is\n- * especially dangerous. This grants permission to write to the entire\n- * file system. One thing this effectively allows is replacement of the\n- * system binary, including the JVM runtime environment.\n- * <P>\n- * Please note: Code can always read a file from the same\n- * directory it's in (or a subdirectory of that directory); it does not\n- * need explicit permission to do so.\n+ *\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.base\/share\/classes\/java\/io\/FilePermission.java","additions":7,"deletions":31,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -633,1 +631,0 @@\n-            @SuppressWarnings(\"removal\")\n@@ -636,2 +633,1 @@\n-                    : AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                        Security.getProperty(SERIAL_FILTER_FACTORY_PROPNAME));\n+                    : Security.getProperty(SERIAL_FILTER_FACTORY_PROPNAME);\n@@ -639,1 +635,0 @@\n-            @SuppressWarnings(\"removal\")\n@@ -642,2 +637,1 @@\n-                    : AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                        Security.getProperty(SERIAL_FILTER_PROPNAME));\n+                    : Security.getProperty(SERIAL_FILTER_PROPNAME);\n@@ -731,2 +725,0 @@\n-         * @throws SecurityException if there is security manager and the\n-         *       {@code SerializablePermission(\"serialFilter\")} is not granted\n@@ -832,2 +824,0 @@\n-         * @throws SecurityException if there is security manager and the\n-         *       {@code SerializablePermission(\"serialFilter\")} is not granted\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,5 +37,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -43,1 +38,0 @@\n-import java.util.Map;\n@@ -52,2 +46,0 @@\n-import sun.security.action.GetBooleanAction;\n-import sun.security.action.GetIntegerAction;\n@@ -281,2 +273,1 @@\n-        static final boolean SET_FILTER_AFTER_READ = GetBooleanAction\n-                .privilegedGetProperty(\"jdk.serialSetFilterAfterRead\");\n+        static final boolean SET_FILTER_AFTER_READ = Boolean.getBoolean(\"jdk.serialSetFilterAfterRead\");\n@@ -290,2 +281,1 @@\n-        private static final boolean GETFIELD_CNFE_RETURNS_NULL = GetBooleanAction\n-                .privilegedGetProperty(\"jdk.serialGetFieldCnfeReturnsNull\");\n+        private static final boolean GETFIELD_CNFE_RETURNS_NULL = Boolean.getBoolean(\"jdk.serialGetFieldCnfeReturnsNull\");\n@@ -299,2 +289,2 @@\n-        static final int PROXY_INTERFACE_LIMIT = Math.clamp(GetIntegerAction\n-                .privilegedGetProperty(\"jdk.serialProxyInterfaceLimit\", 65535), 0, 65535);\n+        static final int PROXY_INTERFACE_LIMIT =\n+                Math.clamp(Integer.getInteger(\"jdk.serialProxyInterfaceLimit\", 65535), 0, 65535);\n@@ -377,6 +367,0 @@\n-     * <p>If a security manager is installed, this constructor will check for\n-     * the \"enableSubclassImplementation\" SerializablePermission when invoked\n-     * directly or indirectly by the constructor of a subclass which overrides\n-     * the ObjectInputStream.readFields or ObjectInputStream.readUnshared\n-     * methods.\n-     *\n@@ -386,2 +370,0 @@\n-     * @throws  SecurityException if untrusted subclass illegally overrides\n-     *          security-sensitive methods\n@@ -397,1 +379,0 @@\n-        verifySubclass();\n@@ -422,8 +403,0 @@\n-     * <p>If there is a security manager installed, this method first calls the\n-     * security manager's {@code checkPermission} method with the\n-     * {@code SerializablePermission(\"enableSubclassImplementation\")}\n-     * permission to ensure it's ok to enable subclassing.\n-     *\n-     * @throws  SecurityException if a security manager exists and its\n-     *          {@code checkPermission} method denies enabling\n-     *          subclassing.\n@@ -433,2 +406,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see java.io.SerializablePermission\n@@ -436,6 +407,1 @@\n-    protected ObjectInputStream() throws IOException, SecurityException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n-        }\n+    protected ObjectInputStream() throws IOException {\n@@ -602,6 +568,0 @@\n-     * <p>ObjectInputStream subclasses which override this method can only be\n-     * constructed in security contexts possessing the\n-     * \"enableSubclassImplementation\" SerializablePermission; any attempt to\n-     * instantiate such a subclass without this permission will cause a\n-     * SecurityException to be thrown.\n-     *\n@@ -926,8 +886,0 @@\n-     * <p>If object replacement is currently not enabled, and\n-     * {@code enable} is true, and there is a security manager installed,\n-     * this method first calls the security manager's\n-     * {@code checkPermission} method with the\n-     * {@code SerializablePermission(\"enableSubstitution\")} permission to\n-     * ensure that the caller is permitted to enable the stream to do replacement\n-     * of objects read from the stream.\n-     *\n@@ -937,9 +889,2 @@\n-     * @throws  SecurityException if a security manager exists and its\n-     *          {@code checkPermission} method denies enabling the stream\n-     *          to do replacement of objects read from the stream.\n-     * @see SecurityManager#checkPermission\n-     * @see java.io.SerializablePermission\n-     *\/\n-    protected boolean enableResolveObject(boolean enable)\n-        throws SecurityException\n-    {\n+     *\/\n+    protected boolean enableResolveObject(boolean enable) {\n@@ -949,7 +894,0 @@\n-        if (enable) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(SUBSTITUTION_PERMISSION);\n-            }\n-        }\n@@ -1344,2 +1282,0 @@\n-     * @throws SecurityException if there is security manager and the\n-     *       {@code SerializablePermission(\"serialFilter\")} is not granted\n@@ -1353,5 +1289,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(ObjectStreamConstants.SERIAL_FILTER_PERMISSION);\n-        }\n@@ -1615,22 +1546,0 @@\n-    \/**\n-     * Verifies that this (possibly subclass) instance can be constructed\n-     * without violating security constraints: the subclass must not override\n-     * security-sensitive non-final methods, or else the\n-     * \"enableSubclassImplementation\" SerializablePermission is checked.\n-     *\/\n-    private void verifySubclass() {\n-        Class<?> cl = getClass();\n-        if (cl == ObjectInputStream.class) {\n-            return;\n-        }\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            return;\n-        }\n-        boolean result = Caches.subclassAudits.get(cl);\n-        if (!result) {\n-            sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n-        }\n-    }\n-\n@@ -1644,21 +1553,14 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<Boolean>() {\n-                public Boolean run() {\n-                    for (Class<?> cl = subcl;\n-                         cl != ObjectInputStream.class;\n-                         cl = cl.getSuperclass())\n-                    {\n-                        try {\n-                            cl.getDeclaredMethod(\n-                                \"readUnshared\", (Class[]) null);\n-                            return Boolean.FALSE;\n-                        } catch (NoSuchMethodException ex) {\n-                        }\n-                        try {\n-                            cl.getDeclaredMethod(\"readFields\", (Class[]) null);\n-                            return Boolean.FALSE;\n-                        } catch (NoSuchMethodException ex) {\n-                        }\n-                    }\n-                    return Boolean.TRUE;\n-                }\n+        for (Class<?> cl = subcl;\n+             cl != ObjectInputStream.class;\n+             cl = cl.getSuperclass())\n+        {\n+            try {\n+                cl.getDeclaredMethod(\n+                    \"readUnshared\", (Class[]) null);\n+                return Boolean.FALSE;\n+            } catch (NoSuchMethodException ex) {\n+            }\n+            try {\n+                cl.getDeclaredMethod(\"readFields\", (Class[]) null);\n+                return Boolean.FALSE;\n+            } catch (NoSuchMethodException ex) {\n@@ -1666,1 +1568,2 @@\n-        );\n+        }\n+        return Boolean.TRUE;\n@@ -2746,2 +2649,0 @@\n-            @SuppressWarnings(\"removal\")\n-            final AccessControlContext acc;\n@@ -2749,2 +2650,1 @@\n-            Callback(ObjectInputValidation obj, int priority, Callback next,\n-                @SuppressWarnings(\"removal\") AccessControlContext acc)\n+            Callback(ObjectInputValidation obj, int priority, Callback next)\n@@ -2755,1 +2655,0 @@\n-                this.acc = acc;\n@@ -2784,2 +2683,0 @@\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext acc = AccessController.getContext();\n@@ -2787,1 +2684,1 @@\n-                prev.next = new Callback(obj, priority, cur, acc);\n+                prev.next = new Callback(obj, priority, cur);\n@@ -2789,1 +2686,1 @@\n-                list = new Callback(obj, priority, list, acc);\n+                list = new Callback(obj, priority, list);\n@@ -2804,8 +2701,1 @@\n-                    AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Void>()\n-                    {\n-                        public Void run() throws InvalidObjectException {\n-                            list.obj.validateObject();\n-                            return null;\n-                        }\n-                    }, list.acc);\n+                    list.obj.validateObject();\n@@ -2814,1 +2704,1 @@\n-            } catch (PrivilegedActionException ex) {\n+            } catch (InvalidObjectException ex) {\n@@ -2816,1 +2706,1 @@\n-                throw (InvalidObjectException) ex.getException();\n+                throw ex;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":29,"deletions":139,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -227,5 +225,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean extendedDebugInfo =\n-        java.security.AccessController.doPrivileged(\n-            new sun.security.action.GetBooleanAction(\n-                \"sun.io.serialization.extendedDebugInfo\")).booleanValue();\n+    private static final boolean extendedDebugInfo = Boolean.getBoolean(\"sun.io.serialization.extendedDebugInfo\");\n@@ -240,6 +234,0 @@\n-     * <p>If a security manager is installed, this constructor will check for\n-     * the \"enableSubclassImplementation\" SerializablePermission when invoked\n-     * directly or indirectly by the constructor of a subclass which overrides\n-     * the ObjectOutputStream.putFields or ObjectOutputStream.writeUnshared\n-     * methods.\n-     *\n@@ -248,2 +236,0 @@\n-     * @throws  SecurityException if untrusted subclass illegally overrides\n-     *          security-sensitive methods\n@@ -258,1 +244,0 @@\n-        verifySubclass();\n@@ -277,8 +262,0 @@\n-     * <p>If there is a security manager installed, this method first calls the\n-     * security manager's {@code checkPermission} method with a\n-     * {@code SerializablePermission(\"enableSubclassImplementation\")}\n-     * permission to ensure it's ok to enable subclassing.\n-     *\n-     * @throws  SecurityException if a security manager exists and its\n-     *          {@code checkPermission} method denies enabling\n-     *          subclassing.\n@@ -286,2 +263,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see java.io.SerializablePermission\n@@ -289,6 +264,1 @@\n-    protected ObjectOutputStream() throws IOException, SecurityException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n-        }\n+    protected ObjectOutputStream() throws IOException {\n@@ -417,6 +387,0 @@\n-     * <p>ObjectOutputStream subclasses which override this method can only be\n-     * constructed in security contexts possessing the\n-     * \"enableSubclassImplementation\" SerializablePermission; any attempt to\n-     * instantiate such a subclass without this permission will cause a\n-     * SecurityException to be thrown.\n-     *\n@@ -614,8 +578,0 @@\n-     * <p>If object replacement is currently not enabled, and\n-     * {@code enable} is true, and there is a security manager installed,\n-     * this method first calls the security manager's\n-     * {@code checkPermission} method with the\n-     * {@code SerializablePermission(\"enableSubstitution\")} permission to\n-     * ensure that the caller is permitted to enable the stream to do replacement\n-     * of objects written to the stream.\n-     *\n@@ -625,5 +581,0 @@\n-     * @throws  SecurityException if a security manager exists and its\n-     *          {@code checkPermission} method denies enabling the stream\n-     *          to do replacement of objects written to the stream.\n-     * @see SecurityManager#checkPermission\n-     * @see java.io.SerializablePermission\n@@ -631,3 +582,1 @@\n-    protected boolean enableReplaceObject(boolean enable)\n-        throws SecurityException\n-    {\n+    protected boolean enableReplaceObject(boolean enable) {\n@@ -637,7 +586,0 @@\n-        if (enable) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(SUBSTITUTION_PERMISSION);\n-            }\n-        }\n@@ -1064,22 +1006,0 @@\n-    \/**\n-     * Verifies that this (possibly subclass) instance can be constructed\n-     * without violating security constraints: the subclass must not override\n-     * security-sensitive non-final methods, or else the\n-     * \"enableSubclassImplementation\" SerializablePermission is checked.\n-     *\/\n-    private void verifySubclass() {\n-        Class<?> cl = getClass();\n-        if (cl == ObjectOutputStream.class) {\n-            return;\n-        }\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            return;\n-        }\n-        boolean result = Caches.subclassAudits.get(cl);\n-        if (!result) {\n-            sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n-        }\n-    }\n-\n@@ -1091,1 +1011,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1093,21 +1012,9 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public Boolean run() {\n-                    for (Class<?> cl = subcl;\n-                         cl != ObjectOutputStream.class;\n-                         cl = cl.getSuperclass())\n-                    {\n-                        try {\n-                            cl.getDeclaredMethod(\n-                                \"writeUnshared\", new Class<?>[] { Object.class });\n-                            return Boolean.FALSE;\n-                        } catch (NoSuchMethodException ex) {\n-                        }\n-                        try {\n-                            cl.getDeclaredMethod(\"putFields\", (Class<?>[]) null);\n-                            return Boolean.FALSE;\n-                        } catch (NoSuchMethodException ex) {\n-                        }\n-                    }\n-                    return Boolean.TRUE;\n-                }\n+        for (Class<?> cl = subcl;\n+             cl != ObjectOutputStream.class;\n+             cl = cl.getSuperclass())\n+        {\n+            try {\n+                cl.getDeclaredMethod(\n+                    \"writeUnshared\", new Class<?>[] { Object.class });\n+                return Boolean.FALSE;\n+            } catch (NoSuchMethodException ex) {\n@@ -1115,1 +1022,7 @@\n-        );\n+            try {\n+                cl.getDeclaredMethod(\"putFields\", (Class<?>[]) null);\n+                return Boolean.FALSE;\n+            } catch (NoSuchMethodException ex) {\n+            }\n+        }\n+        return Boolean.TRUE;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectOutputStream.java","additions":19,"deletions":106,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.lang.reflect.UndeclaredThrowableException;\n@@ -40,2 +39,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -44,6 +41,0 @@\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.ProtectionDomain;\n@@ -62,1 +53,0 @@\n-import jdk.internal.reflect.Reflection;\n@@ -64,2 +54,0 @@\n-import jdk.internal.access.SharedSecrets;\n-import jdk.internal.access.JavaSecurityAccess;\n@@ -67,1 +55,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -101,6 +88,0 @@\n-    \/** reflection factory for obtaining serialization constructors *\/\n-    @SuppressWarnings(\"removal\")\n-    private static final ReflectionFactory reflFactory =\n-        AccessController.doPrivileged(\n-            new ReflectionFactory.GetReflectionFactoryAction());\n-\n@@ -209,2 +190,0 @@\n-    \/** protection domains that need to be checked when calling the constructor *\/\n-    private ProtectionDomain[] domains;\n@@ -283,1 +262,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -290,7 +268,1 @@\n-            suid = AccessController.doPrivileged(\n-                new PrivilegedAction<Long>() {\n-                    public Long run() {\n-                        return computeDefaultSUID(cl);\n-                    }\n-                }\n-            );\n+            suid = computeDefaultSUID(cl);\n@@ -307,1 +279,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -314,6 +285,0 @@\n-        if (System.getSecurityManager() != null) {\n-            Class<?> caller = Reflection.getCallerClass();\n-            if (ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(), cl.getClassLoader())) {\n-                ReflectUtil.checkPackageAccess(cl);\n-            }\n-        }\n@@ -387,18 +352,12 @@\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                public Void run() {\n-                    if (isEnum) {\n-                        suid = 0L;\n-                        fields = NO_FIELDS;\n-                        return null;\n-                    }\n-                    if (cl.isArray()) {\n-                        fields = NO_FIELDS;\n-                        return null;\n-                    }\n-\n-                    suid = getDeclaredSUID(cl);\n-                    try {\n-                        fields = getSerialFields(cl);\n-                        computeFieldOffsets();\n-                    } catch (InvalidClassException e) {\n-                        serializeEx = deserializeEx =\n+            if (isEnum) {\n+                suid = 0L;\n+                fields = NO_FIELDS;\n+            } else if (cl.isArray()) {\n+                fields = NO_FIELDS;\n+            } else {\n+                suid = getDeclaredSUID(cl);\n+                try {\n+                    fields = getSerialFields(cl);\n+                    computeFieldOffsets();\n+                } catch (InvalidClassException e) {\n+                    serializeEx = deserializeEx =\n@@ -406,2 +365,2 @@\n-                        fields = NO_FIELDS;\n-                    }\n+                    fields = NO_FIELDS;\n+                }\n@@ -409,9 +368,9 @@\n-                    if (isRecord) {\n-                        canonicalCtr = canonicalRecordCtr(cl);\n-                        deserializationCtrs = new DeserializationConstructorsCache();\n-                    } else if (externalizable) {\n-                        cons = getExternalizableConstructor(cl);\n-                    } else {\n-                        cons = getSerializableConstructor(cl);\n-                        writeObjectMethod = getPrivateMethod(cl, \"writeObject\",\n-                            new Class<?>[] { ObjectOutputStream.class },\n+                if (isRecord) {\n+                    canonicalCtr = canonicalRecordCtr(cl);\n+                    deserializationCtrs = new DeserializationConstructorsCache();\n+                } else if (externalizable) {\n+                    cons = getExternalizableConstructor(cl);\n+                } else {\n+                    cons = getSerializableConstructor(cl);\n+                    writeObjectMethod = getPrivateMethod(cl, \"writeObject\",\n+                            new Class<?>[]{ObjectOutputStream.class},\n@@ -419,2 +378,2 @@\n-                        readObjectMethod = getPrivateMethod(cl, \"readObject\",\n-                            new Class<?>[] { ObjectInputStream.class },\n+                    readObjectMethod = getPrivateMethod(cl, \"readObject\",\n+                            new Class<?>[]{ObjectInputStream.class},\n@@ -422,1 +381,1 @@\n-                        readObjectNoDataMethod = getPrivateMethod(\n+                    readObjectNoDataMethod = getPrivateMethod(\n@@ -424,4 +383,3 @@\n-                        hasWriteObjectData = (writeObjectMethod != null);\n-                    }\n-                    domains = getProtectionDomains(cons, cl);\n-                    writeReplaceMethod = getInheritableMethod(\n+                    hasWriteObjectData = (writeObjectMethod != null);\n+                }\n+                writeReplaceMethod = getInheritableMethod(\n@@ -429,1 +387,1 @@\n-                    readResolveMethod = getInheritableMethod(\n+                readResolveMethod = getInheritableMethod(\n@@ -431,3 +389,1 @@\n-                    return null;\n-                }\n-            });\n+            }\n@@ -477,60 +433,0 @@\n-    \/**\n-     * Creates a PermissionDomain that grants no permission.\n-     *\/\n-    private ProtectionDomain noPermissionsDomain() {\n-        PermissionCollection perms = new Permissions();\n-        perms.setReadOnly();\n-        return new ProtectionDomain(null, perms);\n-    }\n-\n-    \/**\n-     * Aggregate the ProtectionDomains of all the classes that separate\n-     * a concrete class {@code cl} from its ancestor's class declaring\n-     * a constructor {@code cons}.\n-     *\n-     * If {@code cl} is defined by the boot loader, or the constructor\n-     * {@code cons} is declared by {@code cl}, or if there is no security\n-     * manager, then this method does nothing and {@code null} is returned.\n-     *\n-     * @param cons A constructor declared by {@code cl} or one of its\n-     *             ancestors.\n-     * @param cl A concrete class, which is either the class declaring\n-     *           the constructor {@code cons}, or a serializable subclass\n-     *           of that class.\n-     * @return An array of ProtectionDomain representing the set of\n-     *         ProtectionDomain that separate the concrete class {@code cl}\n-     *         from its ancestor's declaring {@code cons}, or {@code null}.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private ProtectionDomain[] getProtectionDomains(Constructor<?> cons,\n-                                                    Class<?> cl) {\n-        ProtectionDomain[] domains = null;\n-        if (cons != null && cl.getClassLoader() != null\n-                && System.getSecurityManager() != null) {\n-            Class<?> cls = cl;\n-            Class<?> fnscl = cons.getDeclaringClass();\n-            Set<ProtectionDomain> pds = null;\n-            while (cls != fnscl) {\n-                ProtectionDomain pd = cls.getProtectionDomain();\n-                if (pd != null) {\n-                    if (pds == null) pds = new HashSet<>();\n-                    pds.add(pd);\n-                }\n-                cls = cls.getSuperclass();\n-                if (cls == null) {\n-                    \/\/ that's not supposed to happen\n-                    \/\/ make a ProtectionDomain with no permission.\n-                    \/\/ should we throw instead?\n-                    if (pds == null) pds = new HashSet<>();\n-                    else pds.clear();\n-                    pds.add(noPermissionsDomain());\n-                    break;\n-                }\n-            }\n-            if (pds != null) {\n-                domains = pds.toArray(new ProtectionDomain[0]);\n-            }\n-        }\n-        return domains;\n-    }\n-\n@@ -567,1 +463,0 @@\n-            domains = localDesc.domains;\n@@ -659,1 +554,0 @@\n-            domains = localDesc.domains;\n@@ -1024,29 +918,1 @@\n-                if (domains == null || domains.length == 0) {\n-                    return cons.newInstance();\n-                } else {\n-                    JavaSecurityAccess jsa = SharedSecrets.getJavaSecurityAccess();\n-                    PrivilegedAction<?> pea = () -> {\n-                        try {\n-                            return cons.newInstance();\n-                        } catch (InstantiationException\n-                                 | InvocationTargetException\n-                                 | IllegalAccessException x) {\n-                            throw new UndeclaredThrowableException(x);\n-                        }\n-                    }; \/\/ Can't use PrivilegedExceptionAction with jsa\n-                    try {\n-                        return jsa.doIntersectionPrivilege(pea,\n-                                   AccessController.getContext(),\n-                                   new AccessControlContext(domains));\n-                    } catch (UndeclaredThrowableException x) {\n-                        Throwable cause = x.getCause();\n-                        if (cause instanceof InstantiationException ie)\n-                            throw ie;\n-                        if (cause instanceof InvocationTargetException ite)\n-                            throw ite;\n-                        if (cause instanceof IllegalAccessException iae)\n-                            throw iae;\n-                        \/\/ not supposed to happen\n-                        throw x;\n-                    }\n-                }\n+                return cons.newInstance();\n@@ -1457,1 +1323,1 @@\n-        return reflFactory.newConstructorForSerialization(cl);\n+        return ReflectionFactory.getReflectionFactory().newConstructorForSerialization(cl);\n@@ -1468,13 +1334,10 @@\n-        PrivilegedAction<MethodHandle> pa = () -> {\n-            Class<?>[] paramTypes = Arrays.stream(cls.getRecordComponents())\n-                                          .map(RecordComponent::getType)\n-                                          .toArray(Class<?>[]::new);\n-            try {\n-                Constructor<?> ctr = cls.getDeclaredConstructor(paramTypes);\n-                ctr.setAccessible(true);\n-                return MethodHandles.lookup().unreflectConstructor(ctr);\n-            } catch (IllegalAccessException | NoSuchMethodException e) {\n-                return null;\n-            }\n-        };\n-        return AccessController.doPrivileged(pa);\n+        Class<?>[] paramTypes = Arrays.stream(cls.getRecordComponents())\n+                                      .map(RecordComponent::getType)\n+                                      .toArray(Class<?>[]::new);\n+        try {\n+            Constructor<?> ctr = cls.getDeclaredConstructor(paramTypes);\n+            ctr.setAccessible(true);\n+            return MethodHandles.lookup().unreflectConstructor(ctr);\n+        } catch (IllegalAccessException | NoSuchMethodException e) {\n+            return null;\n+        }\n@@ -2370,8 +2233,1 @@\n-            RecordComponent[] recordComponents;\n-            try {\n-                Class<?> cls = desc.forClass();\n-                PrivilegedExceptionAction<RecordComponent[]> pa = cls::getRecordComponents;\n-                recordComponents = AccessController.doPrivileged(pa);\n-            } catch (PrivilegedActionException e) {\n-                throw new InternalError(e.getCause());\n-            }\n+            RecordComponent[] recordComponents = desc.forClass().getRecordComponents();\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":46,"deletions":190,"binary":false,"changes":236,"status":"modified"},{"patch":"@@ -252,4 +252,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n-     *          access to the file\n@@ -287,5 +283,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n-     *          access to the file\n-     *\n@@ -323,5 +314,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n-     *          access to the file\n-     *\n@@ -354,4 +340,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(file.getPath())}\n-     *          denies write access to the file\n@@ -389,5 +371,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(file.getPath())}\n-     *          denies write access to the file\n-     *\n@@ -426,5 +403,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(file.getPath())}\n-     *          denies write access to the file\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/io\/PrintStream.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -198,4 +198,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n-     *          access to the file\n@@ -250,5 +246,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n-     *          access to the file\n-     *\n@@ -285,5 +276,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n-     *          access to the file\n-     *\n@@ -316,4 +302,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(file.getPath())}\n-     *          denies write access to the file\n@@ -351,5 +333,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(file.getPath())}\n-     *          denies write access to the file\n-     *\n@@ -386,5 +363,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(file.getPath())}\n-     *          denies write access to the file\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/io\/PrintWriter.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -117,9 +117,0 @@\n-     * <p>\n-     * If there is a security manager, its {@code checkRead} method\n-     * is called with the {@code pathname} argument\n-     * as its argument to see if read access to the file is allowed.\n-     * If the mode allows writing, the security manager's\n-     * {@code checkWrite} method\n-     * is also called with the {@code pathname} argument\n-     * as its argument to see if write access to the file is allowed.\n-     *\n@@ -138,7 +129,0 @@\n-     * @throws     SecurityException   if a security manager exists and its\n-     *             {@code checkRead} method denies read access to the file\n-     *             or the mode is {@code \"rw\"} and the security manager's\n-     *             {@code checkWrite} method denies write access to the file\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.SecurityManager#checkRead(java.lang.String)\n-     * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n@@ -208,7 +192,0 @@\n-     * <p>If there is a security manager, its {@code checkRead} method is\n-     * called with the pathname of the {@code file} argument as its\n-     * argument to see if read access to the file is allowed.  If the mode\n-     * allows writing, the security manager's {@code checkWrite} method is\n-     * also called with the pathname of the {@code file} argument to see if\n-     * write access to the file is allowed.\n-     *\n@@ -228,6 +205,0 @@\n-     * @throws      SecurityException  if a security manager exists and its\n-     *             {@code checkRead} method denies read access to the file\n-     *             or the mode is {@code \"rw\"} and the security manager's\n-     *             {@code checkWrite} method denies write access to the file\n-     * @see        java.lang.SecurityManager#checkRead(java.lang.String)\n-     * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,49 +39,3 @@\n- * <P>\n- * The target name is the name of the Serializable permission (see below).\n- *\n- * <P>\n- * The following table lists the standard {@code SerializablePermission} target names,\n- * and for each provides a description of what the permission allows\n- * and a discussion of the risks of granting code the permission.\n- *\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">Permission target name, what the permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- * <tbody>\n- *\n- * <tr>\n- *   <th scope=\"row\">enableSubclassImplementation<\/th>\n- *   <td>Subclass implementation of ObjectOutputStream or ObjectInputStream\n- * to override the default serialization or deserialization, respectively,\n- * of objects<\/td>\n- *   <td>Code can use this to serialize or\n- * deserialize classes in a purposefully malfeasant manner. For example,\n- * during serialization, malicious code can use this to\n- * purposefully store confidential private field data in a way easily accessible\n- * to attackers. Or, during deserialization it could, for example, deserialize\n- * a class with all its private fields zeroed out.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">enableSubstitution<\/th>\n- *   <td>Substitution of one object for another during\n- * serialization or deserialization<\/td>\n- *   <td>This is dangerous because malicious code\n- * can replace the actual object with one which has incorrect or\n- * malignant data.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">serialFilter<\/th>\n- *   <td>Setting a filter for ObjectInputStreams.<\/td>\n- *   <td>Code could remove a configured filter and remove protections\n- *       already established.<\/td>\n- * <\/tr>\n- * <\/tbody>\n- * <\/table>\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n@@ -95,1 +49,0 @@\n- *\n","filename":"src\/java.base\/share\/classes\/java\/io\/SerializablePermission.java","additions":4,"deletions":51,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -78,1 +76,1 @@\n-        Field f = privilegedDeclaredField(cl, SUID_NAME);\n+        Field f = declaredField(cl, SUID_NAME);\n@@ -104,1 +102,1 @@\n-        Field f = privilegedDeclaredField(cl, SERIAL_PERSISTENT_FIELDS_NAME);\n+        Field f = declaredField(cl, SERIAL_PERSISTENT_FIELDS_NAME);\n@@ -145,1 +143,1 @@\n-        for (Method m : privilegedDeclaredMethods(cl)) {\n+        for (Method m : cl.getDeclaredMethods()) {\n@@ -176,1 +174,1 @@\n-            for (Method m : privilegedDeclaredMethods(superCl)) {\n+            for (Method m : superCl.getDeclaredMethods()) {\n@@ -239,8 +237,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static Field privilegedDeclaredField(Class<?> cl, String name) {\n-        if (System.getSecurityManager() == null) {\n-            return declaredField(cl, name);\n-        }\n-        return AccessController.doPrivileged((PrivilegedAction<Field>) () ->\n-                declaredField(cl, name));\n-    }\n@@ -256,8 +246,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static Method[] privilegedDeclaredMethods(Class<?> cl) {\n-        if (System.getSecurityManager() == null) {\n-            return cl.getDeclaredMethods();\n-        }\n-        return AccessController.doPrivileged(\n-                (PrivilegedAction<Method[]>) cl::getDeclaredMethods);\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/io\/SerializationMisdeclarationChecker.java","additions":4,"deletions":22,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -274,2 +274,0 @@\n-     * @throws  SecurityException for the same reasons as\n-     *          {@link System#getProperty(String) System.getProperty}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Boolean.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -533,5 +533,0 @@\n-     * @throws    SecurityException\n-     *            if a security manager is present, and the {@code loader} is\n-     *            {@code null}, and the caller's class loader is not\n-     *            {@code null}, and the caller does not have the\n-     *            {@link RuntimePermission}{@code (\"getClassLoader\")}\n@@ -613,2 +608,0 @@\n-     * The security check is a stack-based permission check if the caller\n-     * loads a class in another module.\n@@ -626,10 +619,0 @@\n-     * @throws SecurityException\n-     *         <ul>\n-     *         <li> if the caller is not the specified module and\n-     *         {@code RuntimePermission(\"getClassLoader\")} permission is denied; or<\/li>\n-     *         <li> access to the module content is denied. For example,\n-     *         permission check will be performed when a class loader calls\n-     *         {@link ModuleReader#open(String)} to read the bytes of a class file\n-     *         in a module.<\/li>\n-     *         <\/ul>\n-     *\n@@ -759,7 +742,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager, <i>s<\/i>, is present and\n-     *          the caller's class loader is not the same as or an\n-     *          ancestor of the class loader for the current class and\n-     *          invocation of {@link SecurityManager#checkPackageAccess\n-     *          s.checkPackageAccess()} denies access to the package\n-     *          of this class.\n@@ -1060,6 +1036,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is present, and the caller's class loader\n-     *          is not {@code null} and is not the same as or an ancestor of the\n-     *          class loader for the class whose class loader is requested,\n-     *          and the caller does not have the\n-     *          {@link RuntimePermission}{@code (\"getClassLoader\")}\n@@ -1067,2 +1037,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see java.lang.RuntimePermission\n@@ -1544,20 +1512,0 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and any of the\n-     *         following conditions is met:\n-     *\n-     *         <ul>\n-     *\n-     *         <li> the caller's class loader is not the same as the\n-     *         class loader of the enclosing class and invocation of\n-     *         {@link SecurityManager#checkPermission\n-     *         s.checkPermission} method with\n-     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *         denies access to the methods within the enclosing class\n-     *\n-     *         <li> the caller's class loader is not the same as or an\n-     *         ancestor of the class loader for the enclosing class and\n-     *         invocation of {@link SecurityManager#checkPackageAccess\n-     *         s.checkPackageAccess()} denies access to the package\n-     *         of the enclosing class\n-     *\n-     *         <\/ul>\n@@ -1567,1 +1515,1 @@\n-    public Method getEnclosingMethod() throws SecurityException {\n+    public Method getEnclosingMethod() {\n@@ -1700,20 +1648,1 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and any of the\n-     *         following conditions is met:\n-     *\n-     *         <ul>\n-     *\n-     *         <li> the caller's class loader is not the same as the\n-     *         class loader of the enclosing class and invocation of\n-     *         {@link SecurityManager#checkPermission\n-     *         s.checkPermission} method with\n-     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *         denies access to the constructors within the enclosing class\n-     *\n-     *         <li> the caller's class loader is not the same as or an\n-     *         ancestor of the class loader for the enclosing class and\n-     *         invocation of {@link SecurityManager#checkPackageAccess\n-     *         s.checkPackageAccess()} denies access to the package\n-     *         of the enclosing class\n-     *\n-     *         <\/ul>\n+     *\n@@ -1723,1 +1652,1 @@\n-    public Constructor<?> getEnclosingConstructor() throws SecurityException {\n+    public Constructor<?> getEnclosingConstructor() {\n@@ -1780,6 +1709,0 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and the caller's\n-     *         class loader is not the same as or an ancestor of the class\n-     *         loader for the declaring class and invocation of {@link\n-     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n-     *         denies access to the package of the declaring class\n@@ -1789,1 +1712,1 @@\n-    public Class<?> getDeclaringClass() throws SecurityException {\n+    public Class<?> getDeclaringClass() {\n@@ -1811,6 +1734,0 @@\n-     * @throws     SecurityException\n-     *             If a security manager, <i>s<\/i>, is present and the caller's\n-     *             class loader is not the same as or an ancestor of the class\n-     *             loader for the enclosing class and invocation of {@link\n-     *             SecurityManager#checkPackageAccess s.checkPackageAccess()}\n-     *             denies access to the package of the enclosing class\n@@ -1820,1 +1737,1 @@\n-    public Class<?> getEnclosingClass() throws SecurityException {\n+    public Class<?> getEnclosingClass() {\n@@ -2075,8 +1992,0 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and\n-     *         the caller's class loader is not the same as or an\n-     *         ancestor of the class loader for the current class and\n-     *         invocation of {@link SecurityManager#checkPackageAccess\n-     *         s.checkPackageAccess()} denies access to the package\n-     *         of this class.\n-     *\n@@ -2143,7 +2052,0 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and\n-     *         the caller's class loader is not the same as or an\n-     *         ancestor of the class loader for the current class and\n-     *         invocation of {@link SecurityManager#checkPackageAccess\n-     *         s.checkPackageAccess()} denies access to the package\n-     *         of this class.\n@@ -2156,1 +2058,1 @@\n-    public Field[] getFields() throws SecurityException {\n+    public Field[] getFields() {\n@@ -2234,7 +2136,0 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and\n-     *         the caller's class loader is not the same as or an\n-     *         ancestor of the class loader for the current class and\n-     *         invocation of {@link SecurityManager#checkPackageAccess\n-     *         s.checkPackageAccess()} denies access to the package\n-     *         of this class.\n@@ -2247,1 +2142,1 @@\n-    public Method[] getMethods() throws SecurityException {\n+    public Method[] getMethods() {\n@@ -2277,7 +2172,0 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and\n-     *         the caller's class loader is not the same as or an\n-     *         ancestor of the class loader for the current class and\n-     *         invocation of {@link SecurityManager#checkPackageAccess\n-     *         s.checkPackageAccess()} denies access to the package\n-     *         of this class.\n@@ -2289,1 +2177,1 @@\n-    public Constructor<?>[] getConstructors() throws SecurityException {\n+    public Constructor<?>[] getConstructors() {\n@@ -2329,7 +2217,0 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and\n-     *         the caller's class loader is not the same as or an\n-     *         ancestor of the class loader for the current class and\n-     *         invocation of {@link SecurityManager#checkPackageAccess\n-     *         s.checkPackageAccess()} denies access to the package\n-     *         of this class.\n@@ -2342,2 +2223,1 @@\n-    public Field getField(String name)\n-        throws NoSuchFieldException, SecurityException {\n+    public Field getField(String name) throws NoSuchFieldException {\n@@ -2440,7 +2320,0 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and\n-     *         the caller's class loader is not the same as or an\n-     *         ancestor of the class loader for the current class and\n-     *         invocation of {@link SecurityManager#checkPackageAccess\n-     *         s.checkPackageAccess()} denies access to the package\n-     *         of this class.\n@@ -2454,1 +2327,1 @@\n-        throws NoSuchMethodException, SecurityException {\n+            throws NoSuchMethodException {\n@@ -2489,9 +2362,2 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and\n-     *         the caller's class loader is not the same as or an\n-     *         ancestor of the class loader for the current class and\n-     *         invocation of {@link SecurityManager#checkPackageAccess\n-     *         s.checkPackageAccess()} denies access to the package\n-     *         of this class.\n-     *\n-     * @see #getDeclaredConstructor(Class<?>[])\n+     *\n+     * @see #getDeclaredConstructor(Class[])\n@@ -2502,2 +2368,1 @@\n-        throws NoSuchMethodException, SecurityException\n-    {\n+            throws NoSuchMethodException {\n@@ -2526,20 +2391,0 @@\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and any of the\n-     *         following conditions is met:\n-     *\n-     *         <ul>\n-     *\n-     *         <li> the caller's class loader is not the same as the\n-     *         class loader of this class and invocation of\n-     *         {@link SecurityManager#checkPermission\n-     *         s.checkPermission} method with\n-     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *         denies access to the declared classes within this class\n-     *\n-     *         <li> the caller's class loader is not the same as or an\n-     *         ancestor of the class loader for the current class and\n-     *         invocation of {@link SecurityManager#checkPackageAccess\n-     *         s.checkPackageAccess()} denies access to the package\n-     *         of this class\n-     *\n-     *         <\/ul>\n@@ -2551,1 +2396,1 @@\n-    public Class<?>[] getDeclaredClasses() throws SecurityException {\n+    public Class<?>[] getDeclaredClasses() {\n@@ -2578,20 +2423,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager, <i>s<\/i>, is present and any of the\n-     *          following conditions is met:\n-     *\n-     *          <ul>\n-     *\n-     *          <li> the caller's class loader is not the same as the\n-     *          class loader of this class and invocation of\n-     *          {@link SecurityManager#checkPermission\n-     *          s.checkPermission} method with\n-     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *          denies access to the declared fields within this class\n-     *\n-     *          <li> the caller's class loader is not the same as or an\n-     *          ancestor of the class loader for the current class and\n-     *          invocation of {@link SecurityManager#checkPackageAccess\n-     *          s.checkPackageAccess()} denies access to the package\n-     *          of this class\n-     *\n-     *          <\/ul>\n@@ -2604,1 +2429,1 @@\n-    public Field[] getDeclaredFields() throws SecurityException {\n+    public Field[] getDeclaredFields() {\n@@ -2641,20 +2466,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager, <i>s<\/i>, is present and any of the\n-     *          following conditions is met:\n-     *\n-     *          <ul>\n-     *\n-     *          <li> the caller's class loader is not the same as the\n-     *          class loader of this class and invocation of\n-     *          {@link SecurityManager#checkPermission\n-     *          s.checkPermission} method with\n-     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *          denies access to the declared methods within this class\n-     *\n-     *          <li> the caller's class loader is not the same as or an\n-     *          ancestor of the class loader for the current class and\n-     *          invocation of {@link SecurityManager#checkPackageAccess\n-     *          s.checkPackageAccess()} denies access to the package\n-     *          of this class\n-     *\n-     *          <\/ul>\n@@ -2709,20 +2514,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager, <i>s<\/i>, is present and any of the\n-     *          following conditions is met:\n-     *\n-     *          <ul>\n-     *\n-     *          <li> the caller's class loader is not the same as the\n-     *          class loader of this class and invocation of\n-     *          {@link SecurityManager#checkPermission\n-     *          s.checkPermission} method with\n-     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *          denies access to the declared methods within this class\n-     *\n-     *          <li> the caller's class loader is not the same as or an\n-     *          ancestor of the class loader for the current class and\n-     *          invocation of {@link SecurityManager#checkPackageAccess\n-     *          s.checkPackageAccess()} denies access to the package\n-     *          of this class\n-     *\n-     *          <\/ul>\n@@ -2738,1 +2523,1 @@\n-    public Method[] getDeclaredMethods() throws SecurityException {\n+    public Method[] getDeclaredMethods() {\n@@ -2763,20 +2548,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager, <i>s<\/i>, is present and any of the\n-     *          following conditions is met:\n-     *\n-     *          <ul>\n-     *\n-     *          <li> the caller's class loader is not the same as the\n-     *          class loader of this class and invocation of\n-     *          {@link SecurityManager#checkPermission\n-     *          s.checkPermission} method with\n-     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *          denies access to the declared constructors within this class\n-     *\n-     *          <li> the caller's class loader is not the same as or an\n-     *          ancestor of the class loader for the current class and\n-     *          invocation of {@link SecurityManager#checkPackageAccess\n-     *          s.checkPackageAccess()} denies access to the package\n-     *          of this class\n-     *\n-     *          <\/ul>\n@@ -2789,1 +2554,1 @@\n-    public Constructor<?>[] getDeclaredConstructors() throws SecurityException {\n+    public Constructor<?>[] getDeclaredConstructors() {\n@@ -2814,20 +2579,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager, <i>s<\/i>, is present and any of the\n-     *          following conditions is met:\n-     *\n-     *          <ul>\n-     *\n-     *          <li> the caller's class loader is not the same as the\n-     *          class loader of this class and invocation of\n-     *          {@link SecurityManager#checkPermission\n-     *          s.checkPermission} method with\n-     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *          denies access to the declared field\n-     *\n-     *          <li> the caller's class loader is not the same as or an\n-     *          ancestor of the class loader for the current class and\n-     *          invocation of {@link SecurityManager#checkPackageAccess\n-     *          s.checkPackageAccess()} denies access to the package\n-     *          of this class\n-     *\n-     *          <\/ul>\n@@ -2840,2 +2585,1 @@\n-    public Field getDeclaredField(String name)\n-        throws NoSuchFieldException, SecurityException {\n+    public Field getDeclaredField(String name) throws NoSuchFieldException {\n@@ -2880,20 +2624,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager, <i>s<\/i>, is present and any of the\n-     *          following conditions is met:\n-     *\n-     *          <ul>\n-     *\n-     *          <li> the caller's class loader is not the same as the\n-     *          class loader of this class and invocation of\n-     *          {@link SecurityManager#checkPermission\n-     *          s.checkPermission} method with\n-     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *          denies access to the declared method\n-     *\n-     *          <li> the caller's class loader is not the same as or an\n-     *          ancestor of the class loader for the current class and\n-     *          invocation of {@link SecurityManager#checkPackageAccess\n-     *          s.checkPackageAccess()} denies access to the package\n-     *          of this class\n-     *\n-     *          <\/ul>\n@@ -2907,1 +2631,1 @@\n-        throws NoSuchMethodException, SecurityException {\n+            throws NoSuchMethodException {\n@@ -2978,18 +2702,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager, <i>s<\/i>, is present and any of the\n-     *          following conditions is met:\n-     *\n-     *          <ul>\n-     *\n-     *          <li> the caller's class loader is not the same as the\n-     *          class loader of this class and invocation of\n-     *          {@link SecurityManager#checkPermission\n-     *          s.checkPermission} method with\n-     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n-     *          denies access to the declared constructor\n-     *\n-     *          <li> the caller's class loader is not the same as or an\n-     *          ancestor of the class loader for the current class and\n-     *          invocation of {@link SecurityManager#checkPackageAccess\n-     *          s.checkPackageAccess()} denies access to the package\n-     *          of this class\n@@ -2997,3 +2703,1 @@\n-     *          <\/ul>\n-     *\n-     * @see #getConstructor(Class<?>[])\n+     * @see #getConstructor(Class[])\n@@ -3004,2 +2708,1 @@\n-        throws NoSuchMethodException, SecurityException\n-    {\n+            throws NoSuchMethodException {\n@@ -3061,1 +2764,1 @@\n-     *          resource with this name is found, the resource is in a package\n+     *          resource with this name is found, or the resource is in a package\n@@ -3063,2 +2766,1 @@\n-     *          least the caller module, or access to the resource is denied\n-     *          by the security manager.\n+     *          least the caller module.\n@@ -3157,1 +2859,1 @@\n-     *         this name is found, the resource cannot be located by a URL, the\n+     *         this name is found, the resource cannot be located by a URL, or the\n@@ -3160,2 +2862,1 @@\n-     *         module, or access to the resource is denied by the security\n-     *         manager.\n+     *         module.\n@@ -3227,6 +2928,1 @@\n-     * Returns the {@code ProtectionDomain} of this class.  If there is a\n-     * security manager installed, this method first calls the security\n-     * manager's {@code checkPermission} method with a\n-     * {@code RuntimePermission(\"getProtectionDomain\")} permission to\n-     * ensure it's ok to get the\n-     * {@code ProtectionDomain}.\n+     * Returns the {@code ProtectionDomain} of this class.\n@@ -3236,5 +2932,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        getting the ProtectionDomain.\n-     *\n@@ -3242,2 +2933,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see java.lang.RuntimePermission\n@@ -4469,7 +4158,0 @@\n-     * @throws SecurityException\n-     *         If the returned class is not the current class, and\n-     *         if a security manager, <i>s<\/i>, is present and the caller's\n-     *         class loader is not the same as or an ancestor of the class\n-     *         loader for the returned class and invocation of {@link\n-     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n-     *         denies access to the package of the returned class\n@@ -4560,8 +4242,0 @@\n-     * @throws SecurityException\n-     * If any returned class is not the current class, and\n-     * if a security manager, <i>s<\/i>, is present and the caller's\n-     * class loader is not the same as or an ancestor of the class\n-     * loader for that returned class and invocation of {@link\n-     * SecurityManager#checkPackageAccess s.checkPackageAccess()}\n-     * denies access to the package of that returned class\n-     *\n@@ -4754,9 +4428,2 @@\n-     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface,\n-     *         or {@code null} if this class or interface is not sealed.\n-     *\n-     * @throws SecurityException\n-     *         If a security manager, <i>s<\/i>, is present and the caller's\n-     *         class loader is not the same as or an ancestor of the class\n-     *         loader for that returned class and invocation of {@link\n-     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n-     *         denies access to the package of any class in the returned array.\n+     * @return an array of {@code Class} objects of the permitted subclasses of this class\n+     *         or interface, or {@code null} if this class or interface is not sealed.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":28,"deletions":361,"binary":false,"changes":389,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n@@ -39,1 +37,0 @@\n-import java.security.PrivilegedAction;\n@@ -70,1 +67,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -96,3 +92,0 @@\n- * <p> Class loaders may typically be used by security managers to indicate\n- * security domains.\n- *\n@@ -427,5 +420,0 @@\n-     * @throws SecurityException\n-     *         If a security manager exists and its\n-     *         {@link SecurityManager#checkCreateClassLoader()}\n-     *         method doesn't allow creation of a new class loader.\n-     *\n@@ -443,4 +431,0 @@\n-     * <p> If there is a security manager, its {@link\n-     * SecurityManager#checkCreateClassLoader() checkCreateClassLoader} method\n-     * is invoked.  This may result in a security exception.  <\/p>\n-     *\n@@ -454,5 +438,0 @@\n-     * @throws SecurityException\n-     *         If a security manager exists and its\n-     *         {@code checkCreateClassLoader} method doesn't allow creation\n-     *         of a new class loader.\n-     *\n@@ -470,10 +449,0 @@\n-     *\n-     * <p> If there is a security manager, its {@link\n-     * SecurityManager#checkCreateClassLoader()\n-     * checkCreateClassLoader} method is invoked.  This may result in\n-     * a security exception.  <\/p>\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager exists and its\n-     *          {@code checkCreateClassLoader} method doesn't allow creation\n-     *          of a new class loader.\n@@ -691,24 +660,0 @@\n-    \/\/ Invoked by the VM after loading class with this loader.\n-    @SuppressWarnings(\"removal\")\n-    private void checkPackageAccess(Class<?> cls, ProtectionDomain pd) {\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            if (ReflectUtil.isNonPublicProxyClass(cls)) {\n-                for (Class<?> intf: cls.getInterfaces()) {\n-                    checkPackageAccess(intf, pd);\n-                }\n-                return;\n-            }\n-\n-            final String packageName = cls.getPackageName();\n-            if (!packageName.isEmpty()) {\n-                AccessController.doPrivileged(new PrivilegedAction<>() {\n-                    public Void run() {\n-                        sm.checkPackageAccess(packageName);\n-                        return null;\n-                    }\n-                }, new AccessControlContext(new ProtectionDomain[] {pd}));\n-            }\n-        }\n-    }\n-\n@@ -826,6 +771,4 @@\n-     * ProtectionDomain} to the newly defined class.  The\n-     * {@code ProtectionDomain} is effectively granted the same set of\n-     * permissions returned when {@link\n-     * java.security.Policy#getPermissions(java.security.CodeSource)\n-     * Policy.getPolicy().getPermissions(new CodeSource(null, null))}\n-     * is invoked.  The default protection domain is created on the first invocation\n+     * ProtectionDomain} to the newly defined class. The\n+     * {@code getPermissions} method of the {@code ProtectionDomain} always\n+     * returns {@code null}.\n+     * The default protection domain is created on the first invocation\n@@ -1345,2 +1288,1 @@\n-     *         found, a URL could not be constructed to locate the resource,\n-     *         access to the resource is denied by the security manager, or\n+     *         found, a URL could not be constructed to locate the resource, or\n@@ -1398,3 +1340,2 @@\n-     *          constructed to locate the resource, the resource is in a package\n-     *          that is not opened unconditionally, or access to the resource is\n-     *          denied by the security manager.\n+     *          constructed to locate the resource, or the resource is in a package\n+     *          that is not opened unconditionally.\n@@ -1460,3 +1401,2 @@\n-     *          constructed, are in a package that is not opened\n-     *          unconditionally, or access to the resource is denied by the\n-     *          security manager, are not returned in the enumeration.\n+     *          constructed, or are in a package that is not opened\n+     *          unconditionally, are not returned in the enumeration.\n@@ -1521,3 +1461,2 @@\n-     *          for which a {@code URL} cannot be constructed, are in a package\n-     *          that is not opened unconditionally, or access to the resource\n-     *          is denied by the security manager, will not be in the stream.\n+     *          for which a {@code URL} cannot be constructed, or are in a package\n+     *          that is not opened unconditionally, will not be in the stream.\n@@ -1561,3 +1500,2 @@\n-     *          constructed to locate the resource, the resource is in a package\n-     *          that is not opened unconditionally, or access to the resource is\n-     *          denied by the security manager.\n+     *          constructed to locate the resource, or the resource is in a package\n+     *          that is not opened unconditionally.\n@@ -1592,2 +1530,1 @@\n-     *          constructed, are in a package that is not opened unconditionally,\n-     *          or access to the resource is denied by the security manager,\n+     *          constructed, or are in a package that is not opened unconditionally,\n@@ -1679,3 +1616,2 @@\n-     *          constructed to locate the resource, the resource is in a package\n-     *          that is not opened unconditionally or access to the resource is\n-     *          denied by the security manager.\n+     *          constructed to locate the resource, or the resource is in a package\n+     *          that is not opened unconditionally.\n@@ -1711,2 +1647,1 @@\n-     *          constructed, are in a package that is not opened unconditionally,\n-     *          or access to the resource is denied by the security manager,\n+     *          constructed, or are in a package that is not opened unconditionally,\n@@ -1743,3 +1678,2 @@\n-     *          resource could not be found, the resource is in a package that\n-     *          is not opened unconditionally, or access to the resource is\n-     *          denied by the security manager.\n+     *          resource could not be found, or the resource is in a package that\n+     *          is not opened unconditionally.\n@@ -1777,3 +1711,2 @@\n-     *          resource could not be found, the resource is in a package that\n-     *          is not opened unconditionally, or access to the resource is\n-     *          denied by the security manager.\n+     *          resource could not be found, or the resource is in a package that\n+     *          is not opened unconditionally.\n@@ -1803,6 +1736,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present, and the caller's class loader\n-     *          is not {@code null} and is not an ancestor of this class loader,\n-     *          and the caller does not have the\n-     *          {@link RuntimePermission}{@code (\"getClassLoader\")}\n-     *\n@@ -1848,7 +1775,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present, and the caller's class loader is\n-     *          not {@code null}, and the caller's class loader is not the same\n-     *          as or an ancestor of the platform class loader,\n-     *          and the caller does not have the\n-     *          {@link RuntimePermission}{@code (\"getClassLoader\")}\n-     *\n@@ -1923,6 +1843,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present, and the caller's class loader\n-     *          is not {@code null} and is not the same as or an ancestor of the\n-     *          system class loader, and the caller does not have the\n-     *          {@link RuntimePermission}{@code (\"getClassLoader\")}\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":21,"deletions":107,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -1190,2 +1190,0 @@\n-     * @throws  SecurityException for the same reasons as\n-     *          {@link System#getProperty(String) System.getProperty}\n@@ -1236,2 +1234,0 @@\n-     * @throws  SecurityException for the same reasons as\n-     *          {@link System#getProperty(String) System.getProperty}\n@@ -1278,2 +1274,0 @@\n-     * @throws  SecurityException for the same reasons as\n-     *          {@link System#getProperty(String) System.getProperty}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1279,2 +1279,0 @@\n-     * @throws  SecurityException for the same reasons as\n-     *          {@link System#getProperty(String) System.getProperty}\n@@ -1324,2 +1322,0 @@\n-     * @throws  SecurityException for the same reasons as\n-     *          {@link System#getProperty(String) System.getProperty}\n@@ -1373,2 +1369,0 @@\n-     * @throws  SecurityException for the same reasons as\n-     *          {@link System#getProperty(String) System.getProperty}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -198,5 +198,0 @@\n-     * <p> If there is a security manager then its {@code checkPermission}\n-     * method if first called with a {@code RuntimePermission(\"getClassLoader\")}\n-     * permission to check that the caller is allowed to get access to the\n-     * class loader. <\/p>\n-     *\n@@ -204,3 +199,0 @@\n-     *\n-     * @throws SecurityException\n-     *         If denied by the security manager\n@@ -1692,3 +1684,2 @@\n-     * <p> This method returns {@code null} if the resource is not in this\n-     * module, the resource is encapsulated and cannot be located by the caller,\n-     * or access to the resource is denied by the security manager. <\/p>\n+     * <p> This method returns {@code null} if the resource is not in this module\n+     * or the resource is encapsulated and cannot be located by the caller. <\/p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -362,4 +362,0 @@\n-     * @throws SecurityException\n-     *         If {@code RuntimePermission(\"createClassLoader\")} or\n-     *         {@code RuntimePermission(\"getClassLoader\")} is denied by\n-     *         the security manager\n@@ -404,4 +400,0 @@\n-     * @throws SecurityException\n-     *         If {@code RuntimePermission(\"createClassLoader\")} or\n-     *         {@code RuntimePermission(\"getClassLoader\")} is denied by\n-     *         the security manager\n@@ -443,3 +435,0 @@\n-     * @throws SecurityException\n-     *         If {@code RuntimePermission(\"getClassLoader\")} is denied by\n-     *         the security manager\n@@ -493,4 +482,0 @@\n-     * <p> If there is a security manager then the class loader created by\n-     * this method will load classes and resources with privileges that are\n-     * restricted by the calling context of this method. <\/p>\n-     *\n@@ -513,4 +498,0 @@\n-     * @throws SecurityException\n-     *         If {@code RuntimePermission(\"createClassLoader\")} or\n-     *         {@code RuntimePermission(\"getClassLoader\")} is denied by\n-     *         the security manager\n@@ -566,4 +547,0 @@\n-     * <p> If there is a security manager then the class loaders created by\n-     * this method will load classes and resources with privileges that are\n-     * restricted by the calling context of this method. <\/p>\n-     *\n@@ -589,5 +566,0 @@\n-     * @throws SecurityException\n-     *         If {@code RuntimePermission(\"createClassLoader\")} or\n-     *         {@code RuntimePermission(\"getClassLoader\")} is denied by\n-     *         the security manager\n-     *\n@@ -676,3 +648,0 @@\n-     * @throws SecurityException\n-     *         If {@code RuntimePermission(\"getClassLoader\")} is denied by\n-     *         the security manager\n@@ -909,5 +878,0 @@\n-     * <p> If there is a security manager then its {@code checkPermission}\n-     * method is called with a {@code RuntimePermission(\"getClassLoader\")}\n-     * permission to check that the caller is allowed to get access to the\n-     * class loader. <\/p>\n-     *\n@@ -924,2 +888,0 @@\n-     *\n-     * @throws SecurityException if denied by the security manager\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ModuleLayer.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -756,2 +756,1 @@\n-     * {@link ProcessHandle#of(long) ProcessHandle.of(pid)} including the\n-     * check for a SecurityManager and {@code RuntimePermission(\"manageProcess\")}.\n+     * {@link ProcessHandle#of(long) ProcessHandle.of(pid)}.\n@@ -769,2 +768,0 @@\n-     * @throws SecurityException if a security manager has been installed and\n-     *         it denies RuntimePermission(\"manageProcess\")\n@@ -814,2 +811,0 @@\n-     * @throws SecurityException if a security manager has been installed and\n-     *         it denies RuntimePermission(\"manageProcess\")\n@@ -840,2 +835,0 @@\n-     * @throws SecurityException if a security manager has been installed and\n-     *         it denies RuntimePermission(\"manageProcess\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -332,6 +332,0 @@\n-     * <p>If a security manager exists, its\n-     * {@link SecurityManager#checkPermission checkPermission} method\n-     * is called with a\n-     * {@link RuntimePermission}{@code (\"getenv.*\")} permission.\n-     * This may result in a {@link SecurityException} being thrown.\n-     *\n@@ -344,5 +338,0 @@\n-     * @throws SecurityException\n-     *         if a security manager exists and its\n-     *         {@link SecurityManager#checkPermission checkPermission}\n-     *         method doesn't allow access to the process environment\n-     *\n@@ -1012,6 +1001,0 @@\n-     * <p>If there is a security manager, its\n-     * {@link SecurityManager#checkExec checkExec}\n-     * method is called with the first component of this object's\n-     * {@code command} array as its argument. This may result in\n-     * a {@link SecurityException} being thrown.\n-     *\n@@ -1045,23 +1028,0 @@\n-     * @throws SecurityException\n-     *         if a security manager exists and\n-     *         <ul>\n-     *\n-     *         <li>its\n-     *         {@link SecurityManager#checkExec checkExec}\n-     *         method doesn't allow creation of the subprocess, or\n-     *\n-     *         <li>the standard input to the subprocess was\n-     *         {@linkplain #redirectInput redirected from a file}\n-     *         and the security manager's\n-     *         {@link SecurityManager#checkRead(String) checkRead} method\n-     *         denies read access to the file, or\n-     *\n-     *         <li>the standard output or standard error of the\n-     *         subprocess was\n-     *         {@linkplain #redirectOutput redirected to a file}\n-     *         and the security manager's\n-     *         {@link SecurityManager#checkWrite(String) checkWrite} method\n-     *         denies write access to the file\n-     *\n-     *         <\/ul>\n-     *\n@@ -1219,6 +1179,0 @@\n-     * If there is a security manager, its\n-     * {@link SecurityManager#checkExec checkExec}\n-     * method is called with the first component of each process builder's\n-     * {@code command} array as its argument. This may result in\n-     * a {@link SecurityException} being thrown.\n-     * <p>\n@@ -1275,18 +1229,0 @@\n-     * @throws SecurityException\n-     *         if a security manager exists and\n-     *         <ul>\n-     *         <li>its\n-     *         {@link SecurityManager#checkExec checkExec}\n-     *         method doesn't allow creation of the subprocess, or\n-     *         <li>the standard input to the subprocess was\n-     *         {@linkplain #redirectInput redirected from a file}\n-     *         and the security manager's\n-     *         {@link SecurityManager#checkRead(String) checkRead} method\n-     *         denies read access to the file, or\n-     *         <li>the standard output or standard error of the\n-     *         subprocess was\n-     *         {@linkplain #redirectOutput redirected to a file}\n-     *         and the security manager's\n-     *         {@link SecurityManager#checkWrite(String) checkWrite} method\n-     *         denies write access to the file\n-     *         <\/ul>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":1,"deletions":65,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,3 +69,1 @@\n- * The factory methods limit access to ProcessHandles using the\n- * SecurityManager checking the {@link RuntimePermission RuntimePermission(\"manageProcess\")}.\n- * The ability to control processes is also restricted by the native system,\n+ * The ability to control processes may be restricted by the native system,\n@@ -116,2 +114,0 @@\n-     * @throws SecurityException if a security manager has been installed and\n-     *         it denies RuntimePermission(\"manageProcess\")\n@@ -130,2 +126,0 @@\n-     * @throws SecurityException if a security manager has been installed and\n-     *         it denies RuntimePermission(\"manageProcess\")\n@@ -146,2 +140,0 @@\n-     * @throws SecurityException if a security manager has been installed and\n-     *         it denies RuntimePermission(\"manageProcess\")\n@@ -162,2 +154,0 @@\n-     * @throws SecurityException if a security manager has been installed and\n-     *         it denies RuntimePermission(\"manageProcess\")\n@@ -179,2 +169,0 @@\n-     * @throws SecurityException if a security manager has been installed and\n-     *         it denies RuntimePermission(\"manageProcess\")\n@@ -193,2 +181,0 @@\n-     * @throws SecurityException if a security manager has been installed and\n-     *         it denies RuntimePermission(\"manageProcess\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessHandle.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -145,3 +145,3 @@\n-     * Unless the security manager denies exiting, this method initiates the shutdown sequence\n-     * (if it is not already initiated) and then blocks indefinitely. This method neither returns\n-     * nor throws an exception; that is, it does not complete either normally or abruptly.\n+     * This method initiates the shutdown sequence (if it is not already initiated) and\n+     * then blocks indefinitely. This method neither returns nor throws an exception; that\n+     * is, it does not complete either normally or abruptly.\n@@ -172,7 +172,0 @@\n-     * @throws SecurityException\n-     *         If a security manager is present and its\n-     *         {@link SecurityManager#checkExit checkExit} method does not permit\n-     *         exiting with the specified status\n-     *\n-     * @see java.lang.SecurityException\n-     * @see java.lang.SecurityManager#checkExit(int)\n@@ -236,4 +229,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and it denies\n-     *          {@link RuntimePermission}{@code (\"shutdownHooks\")}\n-     *\n@@ -268,4 +257,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and it denies\n-     *          {@link RuntimePermission}{@code (\"shutdownHooks\")}\n-     *\n@@ -287,2 +272,1 @@\n-     * If the security manager denies exiting, throws {@link SecurityException}.\n-     * Otherwise, termination of the Java Virtual Machine is unconditional and immediate.\n+     * Termination of the Java Virtual Machine is unconditional and immediate.\n@@ -306,5 +290,0 @@\n-     * @throws SecurityException\n-     *         If a security manager is present and its\n-     *         {@link SecurityManager#checkExit checkExit} method\n-     *         does not permit an exit with the specified status\n-     *\n@@ -344,5 +323,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its\n-     *          {@link SecurityManager#checkExec checkExec}\n-     *          method doesn't allow creation of the subprocess\n-     *\n@@ -395,5 +369,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its\n-     *          {@link SecurityManager#checkExec checkExec}\n-     *          method doesn't allow creation of the subprocess\n-     *\n@@ -460,5 +429,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its\n-     *          {@link SecurityManager#checkExec checkExec}\n-     *          method doesn't allow creation of the subprocess\n-     *\n@@ -508,5 +472,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its\n-     *          {@link SecurityManager#checkExec checkExec}\n-     *          method doesn't allow creation of the subprocess\n-     *\n@@ -554,5 +513,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its\n-     *          {@link SecurityManager#checkExec checkExec}\n-     *          method doesn't allow creation of the subprocess\n-     *\n@@ -613,6 +567,0 @@\n-     * <p>If a security manager exists, its\n-     * {@link SecurityManager#checkExec checkExec}\n-     * method is invoked with the first component of the array\n-     * {@code cmdarray} as its argument. This may result in a\n-     * {@link SecurityException} being thrown.\n-     *\n@@ -650,5 +598,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager exists and its\n-     *          {@link SecurityManager#checkExec checkExec}\n-     *          method doesn't allow creation of the subprocess\n-     *\n@@ -811,4 +754,0 @@\n-     * First, if there is a security manager, its {@code checkLink}\n-     * method is called with the {@code filename} as its argument.\n-     * This may result in a security exception.\n-     * <p>\n@@ -823,3 +762,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkLink} method doesn't allow\n-     *             loading of the specified dynamic library\n@@ -836,2 +772,0 @@\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.SecurityManager#checkLink(java.lang.String)\n@@ -874,4 +808,0 @@\n-     * First, if there is a security manager, its {@code checkLink}\n-     * method is called with the {@code libname} as its argument.\n-     * This may result in a security exception.\n-     * <p>\n@@ -894,3 +824,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkLink} method doesn't allow\n-     *             loading of the specified dynamic library\n@@ -906,2 +833,0 @@\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.SecurityManager#checkLink(java.lang.String)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":4,"deletions":79,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.lang.module.ModuleFinder;\n@@ -36,3 +35,4 @@\n- * The target name is the name of the runtime permission (see below). The\n- * naming convention follows the  hierarchical property naming convention.\n- * Also, an asterisk may appear at the end of the name, following a \".\",\n+ * The target name is the name of the runtime permission. The naming convention\n+ * follows the hierarchical property naming convention, typically the reverse\n+ * domain name notation, to avoid name clashes.\n+ * An asterisk may appear at the end of the name, following a \".\",\n@@ -41,343 +41,3 @@\n- * <p>\n- * The following table lists the standard {@code RuntimePermission}\n- * target names, and for each provides a description of what the permission\n- * allows and a discussion of the risks of granting code the permission.\n- *\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">permission target name,\n- *  what the target allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- * <tbody>\n- *\n- * <tr>\n- *   <th scope=\"row\">createClassLoader<\/th>\n- *   <td>Creation of a class loader<\/td>\n- *   <td>This is an extremely dangerous permission to grant.\n- * Malicious applications that can instantiate their own class\n- * loaders could then load their own rogue classes into the system.\n- * These newly loaded classes could be placed into any protection\n- * domain by the class loader, thereby automatically granting the\n- * classes the permissions for that domain.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getClassLoader<\/th>\n- *   <td>Retrieval of a class loader (e.g., the class loader for the calling\n- * class)<\/td>\n- *   <td>This would grant an attacker permission to get the\n- * class loader for a particular class. This is dangerous because\n- * having access to a class's class loader allows the attacker to\n- * load other classes available to that class loader. The attacker\n- * would typically otherwise not have access to those classes.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setContextClassLoader<\/th>\n- *   <td>Setting of the context class loader used by a thread<\/td>\n- *   <td>The context class loader is used by system code and extensions\n- * when they need to lookup resources that might not exist in the system\n- * class loader. Granting setContextClassLoader permission would allow\n- * code to change which context class loader is used\n- * for a particular thread, including system threads.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">enableContextClassLoaderOverride<\/th>\n- *   <td>Subclass implementation of the thread context class loader methods<\/td>\n- *   <td>The context class loader is used by system code and extensions\n- * when they need to lookup resources that might not exist in the system\n- * class loader. Granting enableContextClassLoaderOverride permission would allow\n- * a subclass of Thread to override the methods that are used\n- * to get or set the context class loader for a particular thread.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">closeClassLoader<\/th>\n- *   <td>Closing of a ClassLoader<\/td>\n- *   <td>Granting this permission allows code to close any URLClassLoader\n- * that it has a reference to.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setSecurityManager<\/th>\n- *   <td>Setting of the security manager (possibly replacing an existing one)\n- * <\/td>\n- *   <td>The security manager is a class that allows\n- * applications to implement a security policy. Granting the setSecurityManager\n- * permission would allow code to change which security manager is used by\n- * installing a different, possibly less restrictive security manager,\n- * thereby bypassing checks that would have been enforced by the original\n- * security manager.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">createSecurityManager<\/th>\n- *   <td>Creation of a new security manager<\/td>\n- *   <td>This gives code access to protected, sensitive methods that may\n- * disclose information about other classes or the execution stack.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getenv.{variable name}<\/th>\n- *   <td>Reading of the value of the specified environment variable<\/td>\n- *   <td>This would allow code to read the value, or determine the\n- *       existence, of a particular environment variable.  This is\n- *       dangerous if the variable contains confidential data.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">exitVM.{exit status}<\/th>\n- *   <td>Halting of the Java Virtual Machine with the specified exit status<\/td>\n- *   <td>This allows an attacker to mount a denial-of-service attack\n- * by automatically forcing the virtual machine to halt.\n- * Note: The \"exitVM.*\" permission is automatically granted to all code\n- * loaded from the application class path, thus enabling applications\n- * to terminate themselves. Also, the \"exitVM\" permission is equivalent to\n- * \"exitVM.*\".<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">shutdownHooks<\/th>\n- *   <td>Registration and cancellation of virtual-machine shutdown hooks<\/td>\n- *   <td>This allows an attacker to register a malicious shutdown\n- * hook that interferes with the clean shutdown of the virtual machine.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setFactory<\/th>\n- *   <td>Setting of the socket factory used by ServerSocket or Socket,\n- * or of the stream handler factory used by URL<\/td>\n- *   <td>This allows code to set the actual implementation\n- * for the socket, server socket, stream handler, or RMI socket factory.\n- * An attacker may set a faulty implementation which mangles the data\n- * stream.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setIO<\/th>\n- *   <td>Setting of System.out, System.in, and System.err<\/td>\n- *   <td>This allows changing the value of the standard system streams.\n- * An attacker may change System.in to monitor and\n- * steal user input, or may set System.err to a \"null\" OutputStream,\n- * which would hide any error messages sent to System.err. <\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">modifyThread<\/th>\n- *   <td>Modification of threads, e.g., via calls to Thread\n- * {@code interrupt, setDaemon, setPriority, setName} and\n- * {@code setUncaughtExceptionHandler} methods<\/td>\n- * <td>This allows an attacker to modify the behaviour of\n- * any thread in the system.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">modifyThreadGroup<\/th>\n- *   <td>modification of thread groups, e.g., via calls to ThreadGroup\n- * {@code getParent}, {@code setDaemon}, and {@code setMaxPriority} methods<\/td>\n- *   <td>This allows an attacker to create thread groups and\n- * set their run priority.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getProtectionDomain<\/th>\n- *   <td>Retrieval of the ProtectionDomain for a class<\/td>\n- *   <td>This allows code to obtain policy information\n- * for a particular code source. While obtaining policy information\n- * does not compromise the security of the system, it does give\n- * attackers additional information, such as local file names for\n- * example, to better aim an attack.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getFileSystemAttributes<\/th>\n- *   <td>Retrieval of file system attributes<\/td>\n- *   <td>This allows code to obtain file system information such as disk usage\n- *       or disk space available to the caller.  This is potentially dangerous\n- *       because it discloses information about the system hardware\n- *       configuration and some information about the caller's privilege to\n- *       write files.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">readFileDescriptor<\/th>\n- *   <td>Reading of file descriptors<\/td>\n- *   <td>This would allow code to read the particular file associated\n- *       with the file descriptor read. This is dangerous if the file\n- *       contains confidential data.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">writeFileDescriptor<\/th>\n- *   <td>Writing to file descriptors<\/td>\n- *   <td>This allows code to write to a particular file associated\n- *       with the descriptor. This is dangerous because it may allow\n- *       malicious code to plant viruses or at the very least, fill up\n- *       your entire disk.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">loadLibrary.{library name}<\/th>\n- *   <td>Dynamic linking of the specified library<\/td>\n- *   <td>It is dangerous to allow an applet permission to load native code\n- * libraries, because the Java security architecture is not designed to and\n- * does not prevent malicious behavior at the level of native code.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">accessClassInPackage.{package name}<\/th>\n- *   <td>Access to the specified package via a class loader's\n- * {@code loadClass} method when that class loader calls\n- * the SecurityManager {@code checkPackageAccess} method<\/td>\n- *   <td>This gives code access to classes in packages\n- * to which it normally does not have access. Malicious code\n- * may use these classes to help in its attempt to compromise\n- * security in the system.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">defineClassInPackage.{package name}<\/th>\n- *   <td>Definition of classes in the specified package, via a class\n- * loader's {@code defineClass} method when that class loader calls\n- * the SecurityManager {@code checkPackageDefinition} method.<\/td>\n- *   <td>This grants code permission to define a class\n- * in a particular package. This is dangerous because malicious\n- * code with this permission may define rogue classes in\n- * trusted packages like {@code java.security} or {@code java.lang},\n- * for example.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">defineClass<\/th>\n- *   <td>Define a class with\n- * {@link java.lang.invoke.MethodHandles.Lookup#defineClass(byte[])\n- * Lookup.defineClass}.<\/td>\n- *   <td>This grants code with a suitably privileged {@code Lookup} object\n- * permission to define classes in the same package as the {@code Lookup}'s\n- * lookup class. <\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">accessDeclaredMembers<\/th>\n- *   <td>Access to the declared members of a class<\/td>\n- *   <td>This grants code permission to query a class for its public,\n- * protected, default (package) access, and private fields and\/or\n- * methods. Although the code would have\n- * access to the private and protected field and method names, it would not\n- * have access to the private\/protected field data and would not be able\n- * to invoke any private methods. Nevertheless, malicious code\n- * may use this information to better aim an attack.\n- * Additionally, it may invoke any public methods and\/or access public fields\n- * in the class.  This could be dangerous if\n- * the code would normally not be able to invoke those methods and\/or\n- * access the fields  because\n- * it can't cast the object to the class\/interface with those methods\n- * and fields.<\/td>\n- * <\/tr>\n- * <tr>\n- *   <th scope=\"row\">queuePrintJob<\/th>\n- *   <td>Initiation of a print job request<\/td>\n- *   <td>This could print sensitive information to a printer,\n- * or simply waste paper.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getStackTrace<\/th>\n- *   <td>Retrieval of the stack trace information of another thread.<\/td>\n- *   <td>This allows retrieval of the stack trace information of\n- * another thread.  This might allow malicious code to monitor the\n- * execution of threads and discover vulnerabilities in applications.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getStackWalkerWithClassReference<\/th>\n- *   <td>Get a stack walker that can retrieve stack frames with class reference.<\/td>\n- *   <td>This allows retrieval of Class objects from stack walking.\n- *   This might allow malicious code to access Class objects on the stack\n- *   outside its own context.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setDefaultUncaughtExceptionHandler<\/th>\n- *   <td>Setting the default handler to be used when a thread\n- *   terminates abruptly due to an uncaught exception<\/td>\n- *   <td>This allows an attacker to register a malicious\n- *   uncaught exception handler that could interfere with termination\n- *   of a thread<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">preferences<\/th>\n- *   <td>Represents the permission required to get access to the\n- *   java.util.prefs.Preferences implementations user or system root\n- *   which in turn allows retrieval or update operations within the\n- *   Preferences persistent backing store.) <\/td>\n- *   <td>This permission allows the user to read from or write to the\n- *   preferences backing store if the user running the code has\n- *   sufficient OS privileges to read\/write to that backing store.\n- *   The actual backing store may reside within a traditional filesystem\n- *   directory or within a registry depending on the platform OS<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">manageProcess<\/th>\n- *   <td>Native process termination and information about processes\n- *       {@link ProcessHandle}.<\/td>\n- *   <td>Allows code to identify and terminate processes that it did not create.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">localeServiceProvider<\/th>\n- *   <td>This {@code RuntimePermission} is required to be granted to\n- *   classes which subclass and implement\n- *   {@code java.util.spi.LocaleServiceProvider}. The permission is\n- *   checked during invocation of the abstract base class constructor.\n- *   This permission ensures trust in classes which implement this\n- *   security-sensitive provider mechanism. <\/td>\n- *   <td>See <a href= \"..\/util\/spi\/LocaleServiceProvider.html\">\n- *   {@code java.util.spi.LocaleServiceProvider}<\/a> for more\n- *   information.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">loggerFinder<\/th>\n- *   <td>This {@code RuntimePermission} is required to be granted to\n- *   classes which subclass or call methods on\n- *   {@code java.lang.System.LoggerFinder}. The permission is\n- *   checked during invocation of the abstract base class constructor, as\n- *   well as on the invocation of its public methods.\n- *   This permission ensures trust in classes which provide loggers\n- *   to system classes.<\/td>\n- *   <td>See {@link java.lang.System.LoggerFinder java.lang.System.LoggerFinder}\n- *   for more information.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">accessSystemModules<\/th>\n- *   <td>Access system modules in the runtime image.<\/td>\n- *   <td>This grants the permission to access resources in the\n- *   {@linkplain ModuleFinder#ofSystem system modules} in the runtime image.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">inetAddressResolverProvider<\/th>\n- *   <td>This {@code RuntimePermission} is required to be granted to\n- *   classes which subclass and implement {@code java.net.spi.InetAddressResolverProvider}.\n- *   The permission is checked during invocation of the abstract base class constructor.\n- *   This permission ensures trust in classes which provide resolvers used by\n- *   {@link java.net.InetAddress} hostname and address resolution methods.<\/td>\n- *   <td>See {@link java.net.spi.InetAddressResolverProvider} for more information.<\/td>\n- * <\/tr>\n- *\n- * <\/tbody>\n- * <\/table>\n- *\n- * @implNote\n- * Implementations may define additional target names, but should use naming\n- * conventions such as reverse domain name notation to avoid name clashes.\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n@@ -391,1 +51,0 @@\n- *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/RuntimePermission.java","additions":8,"deletions":349,"binary":false,"changes":357,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n- * Thrown by the security manager to indicate a security violation.\n+ * Thrown to indicate a security violation.\n+ *\n+ * <p> This exception was originally specified for use with a SecurityManager when\n+ * an operation was denied. This feature no longer exists. This exception may be\n+ * deprecated in a future release.\n@@ -30,1 +34,0 @@\n- * @see     java.lang.SecurityManager\n","filename":"src\/java.base\/share\/classes\/java\/lang\/SecurityException.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.lang.module.ModuleDescriptor;\n-import java.lang.module.ModuleDescriptor.Exports;\n-import java.lang.module.ModuleDescriptor.Opens;\n@@ -32,2 +29,0 @@\n-import java.io.File;\n-import java.io.FilePermission;\n@@ -35,2 +30,0 @@\n-import java.net.SocketPermission;\n-import java.security.AccessControlContext;\n@@ -39,7 +32,0 @@\n-import java.security.PrivilegedAction;\n-import java.security.Security;\n-import java.security.SecurityPermission;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.PropertyPermission;\n@@ -47,4 +33,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n-\n-import jdk.internal.module.ModuleLoaderMap;\n-import sun.security.util.SecurityConstants;\n@@ -53,256 +35,5 @@\n- * The security manager is a class that allows\n- * applications to implement a security policy. It allows an\n- * application to determine, before performing a possibly unsafe or\n- * sensitive operation, what the operation is and whether\n- * it is being attempted in a security context that allows the\n- * operation to be performed. The\n- * application can allow or disallow the operation.\n- * <p>\n- * The {@code SecurityManager} class contains many methods with\n- * names that begin with the word {@code check}. These methods\n- * are called by various methods in the Java libraries before those\n- * methods perform certain potentially sensitive operations. The\n- * invocation of such a {@code check} method typically looks like this:\n- * <blockquote><pre>\n- *     SecurityManager security = System.getSecurityManager();\n- *     if (security != null) {\n- *         security.check<i>XXX<\/i>(argument, &nbsp;.&nbsp;.&nbsp;.&nbsp;);\n- *     }\n- * <\/pre><\/blockquote>\n- * <p>\n- * The security manager is thereby given an opportunity to prevent\n- * completion of the operation by throwing an exception. A security\n- * manager routine simply returns if the operation is permitted, but\n- * throws a {@code SecurityException} if the operation is not\n- * permitted.\n- * <h2><a id=\"set-security-manager\">Setting a Security Manager<\/a><\/h2>\n- * Environments using a security manager will typically set the security\n- * manager at startup. In the JDK implementation, this is done by setting the\n- * system property {@systemProperty java.security.manager} on the command line\n- * to the class name of the security manager. It can also be set to the empty\n- * String (\"\") or the special token \"{@code default}\" to use the\n- * default {@code java.lang.SecurityManager}. If a class name is specified,\n- * it must be {@code java.lang.SecurityManager} or a public subclass and have\n- * a public no-arg constructor. The class is loaded by the\n- * {@linkplain ClassLoader#getSystemClassLoader() built-in system class loader}\n- * if it is not {@code java.lang.SecurityManager}. If the\n- * {@code java.security.manager} system property is not set, the default value\n- * is {@code null}, which means a security manager will not be set at startup.\n- * <p>\n- * The Java run-time may also allow, but is not required to allow, the security\n- * manager to be set dynamically by invoking the\n- * {@link System#setSecurityManager(SecurityManager) setSecurityManager} method.\n- * In the JDK implementation, if the Java virtual machine is started with\n- * the {@code java.security.manager} system property set to the special token\n- * \"{@code allow}\", then a security manager will not be set at startup but can\n- * be set dynamically. If the Java virtual machine is started with the\n- * {@code java.security.manager} system property not set or set to the special\n- * token \"{@code disallow}\", then a security manager will not be set at startup\n- * and cannot be set dynamically (the\n- * {@link System#setSecurityManager(SecurityManager) setSecurityManager}\n- * method will throw an {@code UnsupportedOperationException}). Finally, if the\n- * {@code java.security.manager} system property is set to the class name of\n- * the security manager, or to the empty String (\"\") or the special token\n- * \"{@code default}\", then a security manager is set at startup (as described\n- * previously) and can also be subsequently replaced (or disabled) dynamically\n- * (subject to the policy of the currently installed security manager). The\n- * following table illustrates the behavior of the JDK implementation for the\n- * different settings of the {@code java.security.manager} system property:\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">property value,\n- *  the SecurityManager set at startup,\n- *  can dynamically set a SecurityManager\n- * <\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Property Value<\/th>\n- * <th scope=\"col\">The SecurityManager set at startup<\/th>\n- * <th scope=\"col\">System.setSecurityManager run-time behavior<\/th>\n- * <\/tr>\n- * <\/thead>\n- * <tbody>\n- *\n- * <tr>\n- *   <th scope=\"row\">null<\/th>\n- *   <td>None<\/td>\n- *   <td>Throws {@code UnsupportedOperationException}<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">empty String (\"\")<\/th>\n- *   <td>{@code java.lang.SecurityManager}<\/td>\n- *   <td>Success or throws {@code SecurityException} if not permitted by\n- * the currently installed security manager<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">\"default\"<\/th>\n- *   <td>{@code java.lang.SecurityManager}<\/td>\n- *   <td>Success or throws {@code SecurityException} if not permitted by\n- * the currently installed security manager<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">\"disallow\"<\/th>\n- *   <td>None<\/td>\n- *   <td>Throws {@code UnsupportedOperationException}<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">\"allow\"<\/th>\n- *   <td>None<\/td>\n- *   <td>Success or throws {@code SecurityException} if not permitted by\n- * the currently installed security manager<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">a class name<\/th>\n- *   <td>the named class<\/td>\n- *   <td>Success or throws {@code SecurityException} if not permitted by\n- * the currently installed security manager<\/td>\n- * <\/tr>\n- *\n- * <\/tbody>\n- * <\/table>\n- * <p>\n- * The current security manager is returned by the\n- * {@link System#getSecurityManager() getSecurityManager} method.\n- * <h2><a id=\"check-permission\">Checking Permissions<\/a><\/h2>\n- * The special method\n- * {@link SecurityManager#checkPermission(java.security.Permission)}\n- * determines whether an access request indicated by a specified\n- * permission should be granted or denied. The\n- * default implementation calls\n- *\n- * <pre>\n- *   AccessController.checkPermission(perm);\n- * <\/pre>\n- *\n- * <p>\n- * If a requested access is allowed,\n- * {@code checkPermission} returns quietly. If denied, a\n- * {@code SecurityException} is thrown.\n- * <p>\n- * The default implementation of each of the other\n- * {@code check} methods in {@code SecurityManager} is to\n- * call the {@code SecurityManager checkPermission} method\n- * to determine if the calling thread has permission to perform the requested\n- * operation.\n- * <p>\n- * Note that the {@code checkPermission} method with\n- * just a single permission argument always performs security checks\n- * within the context of the currently executing thread.\n- * Sometimes a security check that should be made within a given context\n- * will actually need to be done from within a\n- * <i>different<\/i> context (for example, from within a worker thread).\n- * The {@link SecurityManager#getSecurityContext getSecurityContext} method\n- * and the {@link SecurityManager#checkPermission(java.security.Permission,\n- * java.lang.Object) checkPermission}\n- * method that includes a context argument are provided\n- * for this situation. The\n- * {@code getSecurityContext} method returns a \"snapshot\"\n- * of the current calling context. (The default implementation\n- * returns an AccessControlContext object.) A sample call is\n- * the following:\n- *\n- * <pre>\n- *   Object context = null;\n- *   SecurityManager sm = System.getSecurityManager();\n- *   if (sm != null) context = sm.getSecurityContext();\n- * <\/pre>\n- *\n- * <p>\n- * The {@code checkPermission} method\n- * that takes a context object in addition to a permission\n- * makes access decisions based on that context,\n- * rather than on that of the current execution thread.\n- * Code within a different context can thus call that method,\n- * passing the permission and the\n- * previously-saved context object. A sample call, using the\n- * SecurityManager {@code sm} obtained as in the previous example,\n- * is the following:\n- *\n- * <pre>\n- *   if (sm != null) sm.checkPermission(permission, context);\n- * <\/pre>\n- *\n- * <p>Permissions fall into these categories: File, Socket, Net,\n- * Security, Runtime, Property, AWT, Reflect, and Serializable.\n- * The classes managing these various\n- * permission categories are {@code java.io.FilePermission},\n- * {@code java.net.SocketPermission},\n- * {@code java.net.NetPermission},\n- * {@code java.security.SecurityPermission},\n- * {@code java.lang.RuntimePermission},\n- * {@code java.util.PropertyPermission},\n- * {@code java.awt.AWTPermission},\n- * {@code java.lang.reflect.ReflectPermission}, and\n- * {@code java.io.SerializablePermission}.\n- *\n- * <p>All but the first two (FilePermission and SocketPermission) are\n- * subclasses of {@code java.security.BasicPermission}, which itself\n- * is an abstract subclass of the\n- * top-level class for permissions, which is\n- * {@code java.security.Permission}. BasicPermission defines the\n- * functionality needed for all permissions that contain a name\n- * that follows the hierarchical property naming convention\n- * (for example, \"exitVM\", \"setFactory\", \"queuePrintJob\", etc).\n- * An asterisk\n- * may appear at the end of the name, following a \".\", or by itself, to\n- * signify a wildcard match. For example: \"a.*\" or \"*\" is valid,\n- * \"*a\" or \"a*b\" is not valid.\n- *\n- * <p>FilePermission and SocketPermission are subclasses of the\n- * top-level class for permissions\n- * ({@code java.security.Permission}). Classes like these\n- * that have a more complicated name syntax than that used by\n- * BasicPermission subclass directly from Permission rather than from\n- * BasicPermission. For example,\n- * for a {@code java.io.FilePermission} object, the permission name is\n- * the path name of a file (or directory).\n- *\n- * <p>Some of the permission classes have an \"actions\" list that tells\n- * the actions that are permitted for the object.  For example,\n- * for a {@code java.io.FilePermission} object, the actions list\n- * (such as \"read, write\") specifies which actions are granted for the\n- * specified file (or for files in the specified directory).\n- *\n- * <p>Other permission classes are for \"named\" permissions -\n- * ones that contain a name but no actions list; you either have the\n- * named permission or you don't.\n- *\n- * <p>Note: There is also a {@code java.security.AllPermission}\n- * permission that implies all permissions. It exists to simplify the work\n- * of system administrators who might need to perform multiple\n- * tasks that require all (or numerous) permissions.\n- * <p>\n- * See {@extLink security_guide_permissions\n- * Permissions in the Java Development Kit (JDK)}\n- * for permission-related information.\n- * This document includes a table listing the various SecurityManager\n- * {@code check} methods and the permission(s) the default\n- * implementation of each such method requires.\n- * It also contains a table of the methods\n- * that require permissions, and for each such method tells\n- * which permission it requires.\n- *\n- * @author  Arthur van Hoff\n- * @author  Roland Schemers\n- *\n- * @see     java.lang.ClassLoader\n- * @see     java.lang.SecurityException\n- * @see     java.lang.System#getSecurityManager() getSecurityManager\n- * @see     java.lang.System#setSecurityManager(java.lang.SecurityManager)\n- *  setSecurityManager\n- * @see     java.security.AccessController AccessController\n- * @see     java.security.AccessControlContext AccessControlContext\n- * @see     java.security.AccessControlException AccessControlException\n- * @see     java.security.Permission\n- * @see     java.security.BasicPermission\n- * @see     java.io.FilePermission\n- * @see     java.net.SocketPermission\n- * @see     java.util.PropertyPermission\n- * @see     java.lang.RuntimePermission\n- * @see     java.security.Policy Policy\n- * @see     java.security.SecurityPermission SecurityPermission\n- * @see     java.security.ProtectionDomain\n+ * SecurityManager was originally specified to allow an application implement\n+ * a security policy. It allowed an application to determine, before performing\n+ * a possibly unsafe or security sensitive operation, whether the operation was\n+ * being attempted in a security context that allowed the operation.\n+ * This feature no longer exists.\n@@ -311,4 +42,1 @@\n- * @deprecated The Security Manager is deprecated and subject to removal in a\n- *       future release. There is no replacement for the Security Manager.\n- *       See <a href=\"https:\/\/openjdk.org\/jeps\/411\">JEP 411<\/a> for\n- *       discussion and alternatives.\n+ * @deprecated There is no replacement for this class.\n@@ -319,5 +47,0 @@\n-    \/*\n-     * Have we been initialized. Effective against finalizer attacks.\n-     *\/\n-    private boolean initialized = false;\n-\n@@ -325,15 +48,2 @@\n-     * Constructs a new {@code SecurityManager}.\n-     *\n-     * <p> If there is a security manager already installed, this method first\n-     * calls the security manager's {@code checkPermission} method\n-     * with the {@code RuntimePermission(\"createSecurityManager\")}\n-     * permission to ensure the calling thread has permission to create a new\n-     * security manager.\n-     * This may result in throwing a {@code SecurityException}.\n-     *\n-     * @throws     java.lang.SecurityException if a security manager already\n-     *             exists and its {@code checkPermission} method\n-     *             doesn't allow creation of a new security manager.\n-     * @see        java.lang.System#getSecurityManager()\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n-     * @see java.lang.RuntimePermission\n+     * Constructs a new {@code SecurityManager}. Setting a security manager with\n+     * {@link System#setSecurityManager(SecurityManager)} is not supported.\n@@ -341,13 +51,1 @@\n-    public SecurityManager() {\n-        synchronized(SecurityManager.class) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                \/\/ ask the currently installed security manager if we\n-                \/\/ can create a new one.\n-                sm.checkPermission(new RuntimePermission\n-                                   (\"createSecurityManager\"));\n-            }\n-            initialized = true;\n-        }\n-    }\n+    public SecurityManager() { }\n@@ -363,0 +61,3 @@\n+     * @apiNote The {@code StackWalker} class can be used as a replacement\n+     * for this method.\n+     *\n@@ -365,1 +66,13 @@\n-    protected native Class<?>[] getClassContext();\n+    protected Class<?>[] getClassContext() {\n+        return StackWalkerHolder.STACK_WALKER\n+                .walk(s -> s.map(StackWalker.StackFrame::getDeclaringClass)\n+                        .skip(1L)\n+                        .toArray(Class[]::new));\n+    }\n+\n+    private static class StackWalkerHolder {\n+        static final StackWalker STACK_WALKER =\n+            StackWalker.getInstance(\n+                Set.of(StackWalker.Option.RETAIN_CLASS_REFERENCE,\n+                       StackWalker.Option.DROP_METHOD_INFO));\n+    }\n@@ -368,11 +81,3 @@\n-     * Creates an object that encapsulates the current execution\n-     * environment. The result of this method is used, for example, by the\n-     * three-argument {@code checkConnect} method and by the\n-     * two-argument {@code checkRead} method.\n-     * These methods are needed because a trusted method may be called\n-     * on to read a file or open a socket on behalf of another method.\n-     * The trusted method needs to determine if the other (possibly\n-     * untrusted) method would be allowed to perform the operation on its\n-     * own.\n-     * <p> The default implementation of this method is to return\n-     * an {@code AccessControlContext} object.\n+     * Returns an {@code AccessControlContext} where the {@code checkPermission}\n+     * method always throws an {@code AccessControlException} and the\n+     * {@code getDomainCombiner} method always returns {@code null}.\n@@ -380,7 +85,1 @@\n-     * @return  an implementation-dependent object that encapsulates\n-     *          sufficient information about the current execution environment\n-     *          to perform some security checks later.\n-     * @see     java.lang.SecurityManager#checkConnect(java.lang.String, int,\n-     *   java.lang.Object) checkConnect\n-     * @see     java.lang.SecurityManager#checkRead(java.lang.String,\n-     *   java.lang.Object) checkRead\n+     * @return  an {@code AccessControlContext} as specified above\n@@ -388,0 +87,8 @@\n+     * @apiNote This method originally returned a snapshot of the current\n+     *       calling context, which included the current thread's access\n+     *       control context and any limited privilege scope. This method has\n+     *       been changed to always return an innocuous\n+     *       {@code AccessControlContext} that fails all permission checks.\n+     *       {@linkplain SecurityManager The Security Manager} is no longer\n+     *       supported. There is no replacement for the Security Manager or\n+     *       this method.\n@@ -395,6 +102,1 @@\n-     * Throws a {@code SecurityException} if the requested\n-     * access, specified by the given permission, is not permitted based\n-     * on the security policy currently in effect.\n-     * <p>\n-     * This method calls {@code AccessController.checkPermission}\n-     * with the given permission.\n+     * Throws {@code SecurityException}.\n@@ -402,5 +104,2 @@\n-     * @param     perm   the requested permission.\n-     * @throws    SecurityException if access is not permitted based on\n-     *            the current security policy.\n-     * @throws    NullPointerException if the permission argument is\n-     *            {@code null}.\n+     * @param     perm   ignored\n+     * @throws    SecurityException always\n@@ -409,1 +108,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -411,1 +109,1 @@\n-        java.security.AccessController.checkPermission(perm);\n+        throw new SecurityException();\n@@ -415,17 +113,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * specified security context is denied access to the resource\n-     * specified by the given permission.\n-     * The context must be a security\n-     * context returned by a previous call to\n-     * {@code getSecurityContext} and the access control\n-     * decision is based upon the configured security policy for\n-     * that security context.\n-     * <p>\n-     * If {@code context} is an instance of\n-     * {@code AccessControlContext} then the\n-     * {@code AccessControlContext.checkPermission} method is\n-     * invoked with the specified permission.\n-     * <p>\n-     * If {@code context} is not an instance of\n-     * {@code AccessControlContext} then a\n-     * {@code SecurityException} is thrown.\n+     * Throws {@code SecurityException}.\n@@ -433,10 +115,3 @@\n-     * @param      perm      the specified permission\n-     * @param      context   a system-dependent security context.\n-     * @throws     SecurityException  if the specified security context\n-     *             is not an instance of {@code AccessControlContext}\n-     *             (e.g., is {@code null}), or is denied access to the\n-     *             resource specified by the given permission.\n-     * @throws     NullPointerException if the permission argument is\n-     *             {@code null}.\n-     * @see        java.lang.SecurityManager#getSecurityContext()\n-     * @see java.security.AccessControlContext#checkPermission(java.security.Permission)\n+     * @param      perm      ignored\n+     * @param      context   ignored\n+     * @throws     SecurityException always\n@@ -445,1 +120,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -447,5 +121,1 @@\n-        if (context instanceof AccessControlContext) {\n-            ((AccessControlContext)context).checkPermission(perm);\n-        } else {\n-            throw new SecurityException();\n-        }\n+        throw new SecurityException();\n@@ -455,11 +125,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to create a new class loader.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code RuntimePermission(\"createClassLoader\")}\n-     * permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkCreateClassLoader}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -467,5 +127,1 @@\n-     * @throws    SecurityException if the calling thread does not\n-     *             have permission\n-     *             to create a new class loader.\n-     * @see        java.lang.ClassLoader#ClassLoader()\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @throws    SecurityException always\n@@ -474,16 +130,1 @@\n-        checkPermission(SecurityConstants.CREATE_CLASSLOADER_PERMISSION);\n-    }\n-\n-    \/**\n-     * reference to the root thread group, used for the checkAccess\n-     * methods.\n-     *\/\n-\n-    private static ThreadGroup rootGroup = getRootGroup();\n-\n-    private static ThreadGroup getRootGroup() {\n-        ThreadGroup root =  Thread.currentThread().getThreadGroup();\n-        while (root.getParent() != null) {\n-            root = root.getParent();\n-        }\n-        return root;\n+        throw new SecurityException();\n@@ -493,26 +134,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to modify the thread argument.\n-     * <p>\n-     * This method is invoked for the current security manager by the\n-     * {@code setPriority}, {@code setName}, and\n-     * {@code setDaemon} methods of class {@code Thread}.\n-     * <p>\n-     * If the thread argument is a system thread (belongs to\n-     * the thread group with a {@code null} parent) then\n-     * this method calls {@code checkPermission} with the\n-     * {@code RuntimePermission(\"modifyThread\")} permission.\n-     * If the thread argument is <i>not<\/i> a system thread,\n-     * this method just returns silently.\n-     * <p>\n-     * Applications that want a stricter policy should override this\n-     * method. If this method is overridden, the method that overrides\n-     * it should additionally check to see if the calling thread has the\n-     * {@code RuntimePermission(\"modifyThread\")} permission, and\n-     * if so, return silently. This is to ensure that code granted\n-     * that permission (such as the JDK itself) is allowed to\n-     * manipulate any thread.\n-     * <p>\n-     * If this method is overridden, then\n-     * {@code super.checkAccess} should\n-     * be called by the first statement in the overridden method, or the\n-     * equivalent security check should be placed in the overridden method.\n+     * Throws {@code SecurityException}.\n@@ -520,9 +136,2 @@\n-     * @param      t   the thread to be checked.\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to modify the thread.\n-     * @throws     NullPointerException if the thread argument is\n-     *             {@code null}.\n-     * @see        java.lang.Thread#setDaemon(boolean) setDaemon\n-     * @see        java.lang.Thread#setName(java.lang.String) setName\n-     * @see        java.lang.Thread#setPriority(int) setPriority\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      t   ignored\n+     * @throws     SecurityException always\n@@ -531,8 +140,1 @@\n-        if (t == null) {\n-            throw new NullPointerException(\"thread can't be null\");\n-        }\n-        if (t.getThreadGroup() == rootGroup) {\n-            checkPermission(SecurityConstants.MODIFY_THREAD_PERMISSION);\n-        } else {\n-            \/\/ just return\n-        }\n+        throw new SecurityException();\n@@ -540,0 +142,1 @@\n+\n@@ -541,27 +144,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to modify the thread group argument.\n-     * <p>\n-     * This method is invoked for the current security manager when a\n-     * new child thread or child thread group is created, and by the\n-     * {@code setDaemon} and {@code setMaxPriority} methods of class\n-     * {@code ThreadGroup}.\n-     * <p>\n-     * If the thread group argument is the system thread group (\n-     * has a {@code null} parent) then\n-     * this method calls {@code checkPermission} with the\n-     * {@code RuntimePermission(\"modifyThreadGroup\")} permission.\n-     * If the thread group argument is <i>not<\/i> the system thread group,\n-     * this method just returns silently.\n-     * <p>\n-     * Applications that want a stricter policy should override this\n-     * method. If this method is overridden, the method that overrides\n-     * it should additionally check to see if the calling thread has the\n-     * {@code RuntimePermission(\"modifyThreadGroup\")} permission, and\n-     * if so, return silently. This is to ensure that code granted\n-     * that permission (such as the JDK itself) is allowed to\n-     * manipulate any thread.\n-     * <p>\n-     * If this method is overridden, then\n-     * {@code super.checkAccess} should\n-     * be called by the first statement in the overridden method, or the\n-     * equivalent security check should be placed in the overridden method.\n+     * Throws {@code SecurityException}.\n@@ -569,8 +146,2 @@\n-     * @param      g   the thread group to be checked.\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to modify the thread group.\n-     * @throws     NullPointerException if the thread group argument is\n-     *             {@code null}.\n-     * @see        java.lang.ThreadGroup#setDaemon(boolean) setDaemon\n-     * @see        java.lang.ThreadGroup#setMaxPriority(int) setMaxPriority\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      g   ignored\n+     * @throws     SecurityException always\n@@ -579,8 +150,1 @@\n-        if (g == null) {\n-            throw new NullPointerException(\"thread group can't be null\");\n-        }\n-        if (g == rootGroup) {\n-            checkPermission(SecurityConstants.MODIFY_THREADGROUP_PERMISSION);\n-        } else {\n-            \/\/ just return\n-        }\n+        throw new SecurityException();\n@@ -590,16 +154,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to cause the Java Virtual Machine to\n-     * halt with the specified status code.\n-     * <p>\n-     * This method is invoked for the current security manager by the\n-     * {@code exit} method of class {@code Runtime}. A status\n-     * of {@code 0} indicates success; other values indicate various\n-     * errors.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code RuntimePermission(\"exitVM.\"+status)} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkExit}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -607,6 +156,2 @@\n-     * @param      status   the exit status.\n-     * @throws    SecurityException if the calling thread does not have\n-     *              permission to halt the Java Virtual Machine with\n-     *              the specified status.\n-     * @see        java.lang.Runtime#exit(int) exit\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      status   ignored\n+     * @throws    SecurityException always\n@@ -615,1 +160,1 @@\n-        checkPermission(new RuntimePermission(\"exitVM.\"+status));\n+        throw new SecurityException();\n@@ -619,16 +164,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to create a subprocess.\n-     * <p>\n-     * This method is invoked for the current security manager by the\n-     * {@code exec} methods of class {@code Runtime}.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code FilePermission(cmd,\"execute\")} permission\n-     * if cmd is an absolute path, otherwise it calls\n-     * {@code checkPermission} with\n-     * <code>FilePermission(\"&lt;&lt;ALL FILES&gt;&gt;\",\"execute\")<\/code>.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkExec}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -636,10 +166,2 @@\n-     * @param      cmd   the specified system command.\n-     * @throws     SecurityException if the calling thread does not have\n-     *             permission to create a subprocess.\n-     * @throws     NullPointerException if the {@code cmd} argument is\n-     *             {@code null}.\n-     * @see     java.lang.Runtime#exec(java.lang.String)\n-     * @see     java.lang.Runtime#exec(java.lang.String, java.lang.String[])\n-     * @see     java.lang.Runtime#exec(java.lang.String[])\n-     * @see     java.lang.Runtime#exec(java.lang.String[], java.lang.String[])\n-     * @see     #checkPermission(java.security.Permission) checkPermission\n+     * @param      cmd   ignored\n+     * @throws     SecurityException always\n@@ -648,8 +170,1 @@\n-        File f = new File(cmd);\n-        if (f.isAbsolute()) {\n-            checkPermission(new FilePermission(cmd,\n-                SecurityConstants.FILE_EXECUTE_ACTION));\n-        } else {\n-            checkPermission(new FilePermission(\"<<ALL FILES>>\",\n-                SecurityConstants.FILE_EXECUTE_ACTION));\n-        }\n+        throw new SecurityException();\n@@ -659,16 +174,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to dynamic link the library code\n-     * specified by the string argument file. The argument is either a\n-     * simple library name or a complete filename.\n-     * <p>\n-     * This method is invoked for the current security manager by\n-     * methods {@code load} and {@code loadLibrary} of class\n-     * {@code Runtime}.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code RuntimePermission(\"loadLibrary.\"+lib)} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkLink}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -676,8 +176,2 @@\n-     * @param      lib   the name of the library.\n-     * @throws     SecurityException if the calling thread does not have\n-     *             permission to dynamically link the library.\n-     * @throws     NullPointerException if the {@code lib} argument is\n-     *             {@code null}.\n-     * @see        java.lang.Runtime#load(java.lang.String)\n-     * @see        java.lang.Runtime#loadLibrary(java.lang.String)\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      lib   ignored\n+     * @throws     SecurityException always\n@@ -686,4 +180,1 @@\n-        if (lib == null) {\n-            throw new NullPointerException(\"library can't be null\");\n-        }\n-        checkPermission(new RuntimePermission(\"loadLibrary.\"+lib));\n+        throw new SecurityException();\n@@ -693,12 +184,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to read from the specified file\n-     * descriptor.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code RuntimePermission(\"readFileDescriptor\")}\n-     * permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkRead}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -706,7 +186,2 @@\n-     * @param      fd   the system-dependent file descriptor.\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to access the specified file descriptor.\n-     * @throws     NullPointerException if the file descriptor argument is\n-     *             {@code null}.\n-     * @see        java.io.FileDescriptor\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      fd   the system-dependent file descriptor\n+     * @throws     SecurityException always\n@@ -715,4 +190,1 @@\n-        if (fd == null) {\n-            throw new NullPointerException(\"file descriptor can't be null\");\n-        }\n-        checkPermission(new RuntimePermission(\"readFileDescriptor\"));\n+        throw new SecurityException();\n@@ -722,11 +194,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to read the file specified by the\n-     * string argument.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code FilePermission(file,\"read\")} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkRead}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -734,6 +196,2 @@\n-     * @param      file   the system-dependent file name.\n-     * @throws     SecurityException if the calling thread does not have\n-     *             permission to access the specified file.\n-     * @throws     NullPointerException if the {@code file} argument is\n-     *             {@code null}.\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      file   ignored\n+     * @throws     SecurityException always\n@@ -742,2 +200,1 @@\n-        checkPermission(new FilePermission(file,\n-            SecurityConstants.FILE_READ_ACTION));\n+        throw new SecurityException();\n@@ -747,17 +204,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * specified security context is not allowed to read the file\n-     * specified by the string argument. The context must be a security\n-     * context returned by a previous call to\n-     * {@code getSecurityContext}.\n-     * <p> If {@code context} is an instance of\n-     * {@code AccessControlContext} then the\n-     * {@code AccessControlContext.checkPermission} method will\n-     * be invoked with the {@code FilePermission(file,\"read\")} permission.\n-     * <p> If {@code context} is not an instance of\n-     * {@code AccessControlContext} then a\n-     * {@code SecurityException} is thrown.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkRead}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -765,10 +206,3 @@\n-     * @param      file      the system-dependent filename.\n-     * @param      context   a system-dependent security context.\n-     * @throws     SecurityException  if the specified security context\n-     *             is not an instance of {@code AccessControlContext}\n-     *             (e.g., is {@code null}), or does not have permission\n-     *             to read the specified file.\n-     * @throws     NullPointerException if the {@code file} argument is\n-     *             {@code null}.\n-     * @see        java.lang.SecurityManager#getSecurityContext()\n-     * @see        java.security.AccessControlContext#checkPermission(java.security.Permission)\n+     * @param      file      ignored\n+     * @param      context   ignored\n+     * @throws     SecurityException always\n@@ -777,3 +211,1 @@\n-        checkPermission(\n-            new FilePermission(file, SecurityConstants.FILE_READ_ACTION),\n-            context);\n+        throw new SecurityException();\n@@ -783,12 +215,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to write to the specified file\n-     * descriptor.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code RuntimePermission(\"writeFileDescriptor\")}\n-     * permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkWrite}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -796,7 +217,2 @@\n-     * @param      fd   the system-dependent file descriptor.\n-     * @throws    SecurityException  if the calling thread does not have\n-     *             permission to access the specified file descriptor.\n-     * @throws     NullPointerException if the file descriptor argument is\n-     *             {@code null}.\n-     * @see        java.io.FileDescriptor\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param     fd   ignored\n+     * @throws    SecurityException always\n@@ -805,5 +221,1 @@\n-        if (fd == null) {\n-            throw new NullPointerException(\"file descriptor can't be null\");\n-        }\n-        checkPermission(new RuntimePermission(\"writeFileDescriptor\"));\n-\n+        throw new SecurityException();\n@@ -813,11 +225,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to write to the file specified by\n-     * the string argument.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code FilePermission(file,\"write\")} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkWrite}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -825,6 +227,2 @@\n-     * @param      file   the system-dependent filename.\n-     * @throws     SecurityException  if the calling thread does not\n-     *             have permission to access the specified file.\n-     * @throws     NullPointerException if the {@code file} argument is\n-     *             {@code null}.\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      file   ignored\n+     * @throws     SecurityException always\n@@ -833,2 +231,1 @@\n-        checkPermission(new FilePermission(file,\n-            SecurityConstants.FILE_WRITE_ACTION));\n+        throw new SecurityException();\n@@ -838,13 +235,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to delete the specified file.\n-     * <p>\n-     * This method is invoked for the current security manager by the\n-     * {@code delete} method of class {@code File}.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code FilePermission(file,\"delete\")} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkDelete}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -852,7 +237,2 @@\n-     * @param      file   the system-dependent filename.\n-     * @throws     SecurityException if the calling thread does not\n-     *             have permission to delete the file.\n-     * @throws     NullPointerException if the {@code file} argument is\n-     *             {@code null}.\n-     * @see        java.io.File#delete()\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      file   ignored\n+     * @throws     SecurityException always\n@@ -861,2 +241,1 @@\n-        checkPermission(new FilePermission(file,\n-            SecurityConstants.FILE_DELETE_ACTION));\n+        throw new SecurityException();\n@@ -866,18 +245,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to open a socket connection to the\n-     * specified host and port number.\n-     * <p>\n-     * A port number of {@code -1} indicates that the calling\n-     * method is attempting to determine the IP address of the specified\n-     * host name.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code SocketPermission(host+\":\"+port,\"connect\")} permission if\n-     * the port is not equal to -1. If the port is equal to -1, then\n-     * it calls {@code checkPermission} with the\n-     * {@code SocketPermission(host,\"resolve\")} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkConnect}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -885,8 +247,3 @@\n-     * @param      host   the host name port to connect to.\n-     * @param      port   the protocol port to connect to.\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to open a socket connection to the specified\n-     *               {@code host} and {@code port}.\n-     * @throws     NullPointerException if the {@code host} argument is\n-     *             {@code null}.\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      host   ignored\n+     * @param      port   ignored\n+     * @throws     SecurityException always\n@@ -895,13 +252,1 @@\n-        if (host == null) {\n-            throw new NullPointerException(\"host can't be null\");\n-        }\n-        if (!host.startsWith(\"[\") && host.indexOf(':') != -1) {\n-            host = \"[\" + host + \"]\";\n-        }\n-        if (port == -1) {\n-            checkPermission(new SocketPermission(host,\n-                SecurityConstants.SOCKET_RESOLVE_ACTION));\n-        } else {\n-            checkPermission(new SocketPermission(host+\":\"+port,\n-                SecurityConstants.SOCKET_CONNECT_ACTION));\n-        }\n+        throw new SecurityException();\n@@ -911,24 +256,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * specified security context is not allowed to open a socket\n-     * connection to the specified host and port number.\n-     * <p>\n-     * A port number of {@code -1} indicates that the calling\n-     * method is attempting to determine the IP address of the specified\n-     * host name.\n-     * <p> If {@code context} is not an instance of\n-     * {@code AccessControlContext} then a\n-     * {@code SecurityException} is thrown.\n-     * <p>\n-     * Otherwise, the port number is checked. If it is not equal\n-     * to -1, the {@code context}'s {@code checkPermission}\n-     * method is called with a\n-     * {@code SocketPermission(host+\":\"+port,\"connect\")} permission.\n-     * If the port is equal to -1, then\n-     * the {@code context}'s {@code checkPermission} method\n-     * is called with a\n-     * {@code SocketPermission(host,\"resolve\")} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkConnect}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -936,12 +258,4 @@\n-     * @param      host      the host name port to connect to.\n-     * @param      port      the protocol port to connect to.\n-     * @param      context   a system-dependent security context.\n-     * @throws     SecurityException if the specified security context\n-     *             is not an instance of {@code AccessControlContext}\n-     *             (e.g., is {@code null}), or does not have permission\n-     *             to open a socket connection to the specified\n-     *             {@code host} and {@code port}.\n-     * @throws     NullPointerException if the {@code host} argument is\n-     *             {@code null}.\n-     * @see        java.lang.SecurityManager#getSecurityContext()\n-     * @see        java.security.AccessControlContext#checkPermission(java.security.Permission)\n+     * @param      host      ignored\n+     * @param      port      ignored\n+     * @param      context   ignored\n+     * @throws     SecurityException always\n@@ -950,14 +264,1 @@\n-        if (host == null) {\n-            throw new NullPointerException(\"host can't be null\");\n-        }\n-        if (!host.startsWith(\"[\") && host.indexOf(':') != -1) {\n-            host = \"[\" + host + \"]\";\n-        }\n-        if (port == -1)\n-            checkPermission(new SocketPermission(host,\n-                SecurityConstants.SOCKET_RESOLVE_ACTION),\n-                context);\n-        else\n-            checkPermission(new SocketPermission(host+\":\"+port,\n-                SecurityConstants.SOCKET_CONNECT_ACTION),\n-                context);\n+        throw new SecurityException();\n@@ -967,11 +268,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to wait for a connection request on\n-     * the specified local port number.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code SocketPermission(\"localhost:\"+port,\"listen\")}.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkListen}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -979,4 +270,2 @@\n-     * @param      port   the local port.\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to listen on the specified port.\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      port   ignored\n+     * @throws     SecurityException always\n@@ -985,2 +274,1 @@\n-        checkPermission(new SocketPermission(\"localhost:\"+port,\n-            SecurityConstants.SOCKET_LISTEN_ACTION));\n+        throw new SecurityException();\n@@ -990,14 +278,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not permitted to accept a socket connection from\n-     * the specified host and port number.\n-     * <p>\n-     * This method is invoked for the current security manager by the\n-     * {@code accept} method of class {@code ServerSocket}.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code SocketPermission(host+\":\"+port,\"accept\")} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkAccept}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -1005,8 +280,3 @@\n-     * @param      host   the host name of the socket connection.\n-     * @param      port   the port number of the socket connection.\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to accept the connection.\n-     * @throws     NullPointerException if the {@code host} argument is\n-     *             {@code null}.\n-     * @see        java.net.ServerSocket#accept()\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      host   ignored\n+     * @param      port   ignored\n+     * @throws     SecurityException always\n@@ -1015,8 +285,1 @@\n-        if (host == null) {\n-            throw new NullPointerException(\"host can't be null\");\n-        }\n-        if (!host.startsWith(\"[\") && host.indexOf(':') != -1) {\n-            host = \"[\" + host + \"]\";\n-        }\n-        checkPermission(new SocketPermission(host+\":\"+port,\n-            SecurityConstants.SOCKET_ACCEPT_ACTION));\n+        throw new SecurityException();\n@@ -1026,12 +289,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to use\n-     * (join\/leave\/send\/receive) IP multicast.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * <code>java.net.SocketPermission(maddr.getHostAddress(),\n-     * \"accept,connect\")<\/code> permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkMulticast}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -1039,5 +291,2 @@\n-     * @param      maddr  Internet group address to be used.\n-     * @throws     SecurityException  if the calling thread is not allowed to\n-     *  use (join\/leave\/send\/receive) IP multicast.\n-     * @throws     NullPointerException if the address argument is\n-     *             {@code null}.\n+     * @param      maddr  ignored\n+     * @throws     SecurityException always\n@@ -1045,1 +294,0 @@\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n@@ -1048,6 +296,1 @@\n-        String host = maddr.getHostAddress();\n-        if (!host.startsWith(\"[\") && host.indexOf(':') != -1) {\n-            host = \"[\" + host + \"]\";\n-        }\n-        checkPermission(new SocketPermission(host,\n-            SecurityConstants.SOCKET_CONNECT_ACCEPT_ACTION));\n+        throw new SecurityException();\n@@ -1057,12 +300,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to use\n-     * (join\/leave\/send\/receive) IP multicast.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * <code>java.net.SocketPermission(maddr.getHostAddress(),\n-     * \"accept,connect\")<\/code> permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkMulticast}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -1070,8 +302,3 @@\n-     * @param      maddr  Internet group address to be used.\n-     * @param      ttl        value in use, if it is multicast send.\n-     * Note: this particular implementation does not use the ttl\n-     * parameter.\n-     * @throws     SecurityException  if the calling thread is not allowed to\n-     *  use (join\/leave\/send\/receive) IP multicast.\n-     * @throws     NullPointerException if the address argument is\n-     *             {@code null}.\n+     * @param      maddr  ignored\n+     * @param      ttl    ignored\n+     * @throws     SecurityException always\n@@ -1079,1 +306,0 @@\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n@@ -1081,1 +307,0 @@\n-    @Deprecated(since=\"1.4\", forRemoval=true)\n@@ -1083,6 +308,1 @@\n-        String host = maddr.getHostAddress();\n-        if (!host.startsWith(\"[\") && host.indexOf(':') != -1) {\n-            host = \"[\" + host + \"]\";\n-        }\n-        checkPermission(new SocketPermission(host,\n-            SecurityConstants.SOCKET_CONNECT_ACCEPT_ACTION));\n+        throw new SecurityException();\n@@ -1092,14 +312,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to access or modify the system\n-     * properties.\n-     * <p>\n-     * This method is used by the {@code getProperties} and\n-     * {@code setProperties} methods of class {@code System}.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code PropertyPermission(\"*\", \"read,write\")} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkPropertiesAccess}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -1107,5 +314,1 @@\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to access or modify the system properties.\n-     * @see        java.lang.System#getProperties()\n-     * @see        java.lang.System#setProperties(java.util.Properties)\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @throws     SecurityException always\n@@ -1114,2 +317,1 @@\n-        checkPermission(new PropertyPermission(\"*\",\n-            SecurityConstants.PROPERTY_RW_ACTION));\n+        throw new SecurityException();\n@@ -1119,14 +321,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to access the system property with\n-     * the specified {@code key} name.\n-     * <p>\n-     * This method is used by the {@code getProperty} method of\n-     * class {@code System}.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code PropertyPermission(key, \"read\")} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkPropertyAccess}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -1134,10 +323,2 @@\n-     * @param      key   a system property key.\n-     *\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to access the specified system property.\n-     * @throws     NullPointerException if the {@code key} argument is\n-     *             {@code null}.\n-     * @throws     IllegalArgumentException if {@code key} is empty.\n-     *\n-     * @see        java.lang.System#getProperty(java.lang.String)\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @param      key  ignored\n+     * @throws     SecurityException always\n@@ -1146,2 +327,1 @@\n-        checkPermission(new PropertyPermission(key,\n-            SecurityConstants.PROPERTY_READ_ACTION));\n+        throw new SecurityException();\n@@ -1151,11 +331,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to initiate a print job request.\n-     * <p>\n-     * This method calls\n-     * {@code checkPermission} with the\n-     * {@code RuntimePermission(\"queuePrintJob\")} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkPrintJobAccess}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -1163,2 +333,1 @@\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to initiate a print job request.\n+     * @throws     SecurityException always\n@@ -1166,1 +335,0 @@\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n@@ -1169,83 +337,1 @@\n-        checkPermission(new RuntimePermission(\"queuePrintJob\"));\n-    }\n-\n-    \/*\n-     * We have an initial invalid bit (initially false) for the class\n-     * variables which tell if the cache is valid.  If the underlying\n-     * java.security.Security property changes via setProperty(), the\n-     * Security class uses reflection to change the variable and thus\n-     * invalidate the cache.\n-     *\n-     * Locking is handled by synchronization to the\n-     * packageAccessLock\/packageDefinitionLock objects.  They are only\n-     * used in this class.\n-     *\n-     * Note that cache invalidation as a result of the property change\n-     * happens without using these locks, so there may be a delay between\n-     * when a thread updates the property and when other threads updates\n-     * the cache.\n-     *\/\n-    private static boolean packageAccessValid = false;\n-    private static String[] packageAccess;\n-    private static final Object packageAccessLock = new Object();\n-\n-    private static boolean packageDefinitionValid = false;\n-    private static String[] packageDefinition;\n-    private static final Object packageDefinitionLock = new Object();\n-\n-    private static String[] getPackages(String p) {\n-        String packages[] = null;\n-        if (p != null && !p.isEmpty()) {\n-            java.util.StringTokenizer tok =\n-                new java.util.StringTokenizer(p, \",\");\n-            int n = tok.countTokens();\n-            if (n > 0) {\n-                packages = new String[n];\n-                int i = 0;\n-                while (tok.hasMoreElements()) {\n-                    String s = tok.nextToken().trim();\n-                    packages[i++] = s;\n-                }\n-            }\n-        }\n-\n-        if (packages == null) {\n-            packages = new String[0];\n-        }\n-        return packages;\n-    }\n-\n-    \/\/ The non-exported packages in modules defined to the boot or platform\n-    \/\/ class loaders. A non-exported package is a package that is not exported\n-    \/\/ or is only exported to specific modules.\n-    private static final Map<String, Boolean> nonExportedPkgs = new ConcurrentHashMap<>();\n-    static {\n-        addNonExportedPackages(ModuleLayer.boot());\n-    }\n-\n-    \/**\n-     * Record the non-exported packages of the modules in the given layer\n-     *\/\n-    static void addNonExportedPackages(ModuleLayer layer) {\n-        Set<String> bootModules = ModuleLoaderMap.bootModules();\n-        Set<String> platformModules = ModuleLoaderMap.platformModules();\n-        layer.modules().stream()\n-                .map(Module::getDescriptor)\n-                .filter(md -> bootModules.contains(md.name())\n-                        || platformModules.contains(md.name()))\n-                .map(SecurityManager::nonExportedPkgs)\n-                .flatMap(Set::stream)\n-                .forEach(pn -> nonExportedPkgs.put(pn, Boolean.TRUE));\n-    }\n-\n-\n-    \/**\n-     * Called by java.security.Security\n-     *\/\n-    static void invalidatePackageAccessCache() {\n-        synchronized (packageAccessLock) {\n-            packageAccessValid = false;\n-        }\n-        synchronized (packageDefinitionLock) {\n-            packageDefinitionValid = false;\n-        }\n+        throw new SecurityException();\n@@ -1255,48 +341,1 @@\n-     * Returns the non-exported packages of the specified module.\n-     *\/\n-    private static Set<String> nonExportedPkgs(ModuleDescriptor md) {\n-        \/\/ start with all packages in the module\n-        Set<String> pkgs = new HashSet<>(md.packages());\n-\n-        \/\/ remove the non-qualified exported packages\n-        md.exports().stream()\n-                    .filter(p -> !p.isQualified())\n-                    .map(Exports::source)\n-                    .forEach(pkgs::remove);\n-\n-        \/\/ remove the non-qualified open packages\n-        md.opens().stream()\n-                  .filter(p -> !p.isQualified())\n-                  .map(Opens::source)\n-                  .forEach(pkgs::remove);\n-\n-        return pkgs;\n-    }\n-\n-    \/**\n-     * Throws a {@code SecurityException} if the calling thread is not allowed\n-     * to access the specified package.\n-     * <p>\n-     * During class loading, this method may be called by the {@code loadClass}\n-     * method of class loaders and by the Java Virtual Machine to ensure that\n-     * the caller is allowed to access the package of the class that is\n-     * being loaded.\n-     * <p>\n-     * This method checks if the specified package starts with or equals\n-     * any of the packages in the {@code package.access} Security Property.\n-     * An implementation may also check the package against an additional\n-     * list of restricted packages as noted below. If the package is restricted,\n-     * {@link #checkPermission(Permission)} is called with a\n-     * {@code RuntimePermission(\"accessClassInPackage.\"+pkg)} permission.\n-     * <p>\n-     * If this method is overridden, then {@code super.checkPackageAccess}\n-     * should be called as the first line in the overridden method.\n-     *\n-     * @implNote\n-     * This implementation also restricts all non-exported packages of modules\n-     * loaded by {@linkplain ClassLoader#getPlatformClassLoader\n-     * the platform class loader} or its ancestors. A \"non-exported package\"\n-     * refers to a package that is not exported to all modules. Specifically,\n-     * it refers to a package that either is not exported at all by its\n-     * containing module or is exported in a qualified fashion by its\n-     * containing module.\n+     * Throws {@code SecurityException}.\n@@ -1304,8 +343,2 @@\n-     * @param      pkg   the package name.\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to access the specified package.\n-     * @throws     NullPointerException if the package name argument is\n-     *             {@code null}.\n-     * @see        java.lang.ClassLoader#loadClass(String, boolean) loadClass\n-     * @see        java.security.Security#getProperty getProperty\n-     * @see        #checkPermission(Permission) checkPermission\n+     * @param      pkg   ignored\n+     * @throws     SecurityException always\n@@ -1314,62 +347,1 @@\n-        Objects.requireNonNull(pkg, \"package name can't be null\");\n-\n-        \/\/ check if pkg is not exported to all modules\n-        if (nonExportedPkgs.containsKey(pkg)) {\n-            checkPermission(\n-                new RuntimePermission(\"accessClassInPackage.\" + pkg));\n-            return;\n-        }\n-\n-        String[] restrictedPkgs;\n-        synchronized (packageAccessLock) {\n-            \/*\n-             * Do we need to update our property array?\n-             *\/\n-            if (!packageAccessValid) {\n-                @SuppressWarnings(\"removal\")\n-                String tmpPropertyStr =\n-                    AccessController.doPrivileged(\n-                        new PrivilegedAction<>() {\n-                            public String run() {\n-                                return Security.getProperty(\"package.access\");\n-                            }\n-                        }\n-                    );\n-                packageAccess = getPackages(tmpPropertyStr);\n-                packageAccessValid = true;\n-            }\n-\n-            \/\/ Using a snapshot of packageAccess -- don't care if static field\n-            \/\/ changes afterwards; array contents won't change.\n-            restrictedPkgs = packageAccess;\n-        }\n-\n-        \/*\n-         * Traverse the list of packages, check for any matches.\n-         *\/\n-        final int plen = pkg.length();\n-        for (String restrictedPkg : restrictedPkgs) {\n-            final int rlast = restrictedPkg.length() - 1;\n-\n-            \/\/ Optimizations:\n-            \/\/\n-            \/\/ If rlast >= plen then restrictedPkg is longer than pkg by at\n-            \/\/ least one char. This means pkg cannot start with restrictedPkg,\n-            \/\/ since restrictedPkg will be longer than pkg.\n-            \/\/\n-            \/\/ Similarly if rlast != plen, then pkg + \".\" cannot be the same\n-            \/\/ as restrictedPkg, since pkg + \".\" will have a different length\n-            \/\/ than restrictedPkg.\n-            \/\/\n-            if (rlast < plen && pkg.startsWith(restrictedPkg) ||\n-                \/\/ The following test is equivalent to\n-                \/\/ restrictedPkg.equals(pkg + \".\") but is noticeably more\n-                \/\/ efficient:\n-                rlast == plen && restrictedPkg.startsWith(pkg) &&\n-                restrictedPkg.charAt(rlast) == '.')\n-            {\n-                checkPermission(\n-                    new RuntimePermission(\"accessClassInPackage.\" + pkg));\n-                break;  \/\/ No need to continue; only need to check this once\n-            }\n-        }\n+        throw new SecurityException();\n@@ -1379,24 +351,1 @@\n-     * Throws a {@code SecurityException} if the calling thread is not\n-     * allowed to define classes in the specified package.\n-     * <p>\n-     * This method is called by the {@code loadClass} method of some\n-     * class loaders.\n-     * <p>\n-     * This method checks if the specified package starts with or equals\n-     * any of the packages in the {@code package.definition} Security\n-     * Property. An implementation may also check the package against an\n-     * additional list of restricted packages as noted below. If the package\n-     * is restricted, {@link #checkPermission(Permission)} is called with a\n-     * {@code RuntimePermission(\"defineClassInPackage.\"+pkg)} permission.\n-     * <p>\n-     * If this method is overridden, then {@code super.checkPackageDefinition}\n-     * should be called as the first line in the overridden method.\n-     *\n-     * @implNote\n-     * This implementation also restricts all non-exported packages of modules\n-     * loaded by {@linkplain ClassLoader#getPlatformClassLoader\n-     * the platform class loader} or its ancestors. A \"non-exported package\"\n-     * refers to a package that is not exported to all modules. Specifically,\n-     * it refers to a package that either is not exported at all by its\n-     * containing module or is exported in a qualified fashion by its\n-     * containing module.\n+     * Throws {@code SecurityException}.\n@@ -1404,8 +353,2 @@\n-     * @param      pkg   the package name.\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to define classes in the specified package.\n-     * @throws     NullPointerException if the package name argument is\n-     *             {@code null}.\n-     * @see        java.lang.ClassLoader#loadClass(String, boolean)\n-     * @see        java.security.Security#getProperty getProperty\n-     * @see        #checkPermission(Permission) checkPermission\n+     * @param      pkg   ignored\n+     * @throws     SecurityException always\n@@ -1414,43 +357,1 @@\n-        Objects.requireNonNull(pkg, \"package name can't be null\");\n-\n-        \/\/ check if pkg is not exported to all modules\n-        if (nonExportedPkgs.containsKey(pkg)) {\n-            checkPermission(\n-                new RuntimePermission(\"defineClassInPackage.\" + pkg));\n-            return;\n-        }\n-\n-        String[] pkgs;\n-        synchronized (packageDefinitionLock) {\n-            \/*\n-             * Do we need to update our property array?\n-             *\/\n-            if (!packageDefinitionValid) {\n-                @SuppressWarnings(\"removal\")\n-                String tmpPropertyStr =\n-                    AccessController.doPrivileged(\n-                        new PrivilegedAction<>() {\n-                            public String run() {\n-                                return java.security.Security.getProperty(\n-                                    \"package.definition\");\n-                            }\n-                        }\n-                    );\n-                packageDefinition = getPackages(tmpPropertyStr);\n-                packageDefinitionValid = true;\n-            }\n-            \/\/ Using a snapshot of packageDefinition -- don't care if static\n-            \/\/ field changes afterwards; array contents won't change.\n-            pkgs = packageDefinition;\n-        }\n-\n-        \/*\n-         * Traverse the list of packages, check for any matches.\n-         *\/\n-        for (String restrictedPkg : pkgs) {\n-            if (pkg.startsWith(restrictedPkg) || restrictedPkg.equals(pkg + \".\")) {\n-                checkPermission(\n-                    new RuntimePermission(\"defineClassInPackage.\" + pkg));\n-                break; \/\/ No need to continue; only need to check this once\n-            }\n-        }\n+        throw new SecurityException();\n@@ -1460,12 +361,1 @@\n-     * Throws a {@code SecurityException} if the\n-     * calling thread is not allowed to set the socket factory used by\n-     * {@code ServerSocket} or {@code Socket}, or the stream\n-     * handler factory used by {@code URL}.\n-     * <p>\n-     * This method calls {@code checkPermission} with the\n-     * {@code RuntimePermission(\"setFactory\")} permission.\n-     * <p>\n-     * If you override this method, then you should make a call to\n-     * {@code super.checkSetFactory}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n+     * Throws {@code SecurityException}.\n@@ -1473,8 +363,1 @@\n-     * @throws     SecurityException  if the calling thread does not have\n-     *             permission to specify a socket factory or a stream\n-     *             handler factory.\n-     *\n-     * @see        java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory) setSocketFactory\n-     * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory) setSocketImplFactory\n-     * @see        java.net.URL#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory) setURLStreamHandlerFactory\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n+     * @throws     SecurityException always\n@@ -1483,1 +366,1 @@\n-        checkPermission(new RuntimePermission(\"setFactory\"));\n+        throw new SecurityException();\n@@ -1487,25 +370,1 @@\n-     * Determines whether the permission with the specified permission target\n-     * name should be granted or denied.\n-     *\n-     * <p> If the requested permission is allowed, this method returns\n-     * quietly. If denied, a SecurityException is raised.\n-     *\n-     * <p> This method creates a {@code SecurityPermission} object for\n-     * the given permission target name and calls {@code checkPermission}\n-     * with it.\n-     *\n-     * <p> See the documentation for\n-     * <code>{@link java.security.SecurityPermission}<\/code> for\n-     * a list of possible permission target names.\n-     *\n-     * <p> If you override this method, then you should make a call to\n-     * {@code super.checkSecurityAccess}\n-     * at the point the overridden method would normally throw an\n-     * exception.\n-     *\n-     * @param target the target name of the {@code SecurityPermission}.\n-     *\n-     * @throws    SecurityException if the calling thread does not have\n-     * permission for the requested access.\n-     * @throws    NullPointerException if {@code target} is null.\n-     * @throws    IllegalArgumentException if {@code target} is empty.\n+     * Throws {@code SecurityException}.\n@@ -1513,0 +372,2 @@\n+     * @param     target ignored\n+     * @throws    SecurityException always\n@@ -1514,1 +375,0 @@\n-     * @see        #checkPermission(java.security.Permission) checkPermission\n@@ -1517,1 +377,1 @@\n-        checkPermission(new SecurityPermission(target));\n+        throw new SecurityException();\n@@ -1521,7 +381,1 @@\n-     * Returns the thread group into which to instantiate any new\n-     * thread being created at the time this is being called.\n-     * By default, it returns the thread group of the current\n-     * thread. This should be overridden by a specific security\n-     * manager to return the appropriate thread group.\n-     *\n-     * @return  ThreadGroup that new threads are instantiated into\n+     * {@return the current Thread's {@code ThreadGroup}}\n@@ -1529,1 +383,0 @@\n-     * @see     java.lang.ThreadGroup\n@@ -1534,1 +387,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/SecurityManager.java","additions":151,"deletions":1299,"binary":false,"changes":1450,"status":"modified"},{"patch":"@@ -64,3 +64,0 @@\n- * A permission check is performed when a {@code StackWalker} is created,\n- * according to the options it requests.\n- * No further permission check is done at stack walking time.\n@@ -357,5 +354,0 @@\n-     * <p>\n-     * If a security manager is present and the given {@code option} is\n-     * {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE},\n-     * it calls its {@link SecurityManager#checkPermission checkPermission}\n-     * method for {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n@@ -366,3 +358,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkPermission} method denies access.\n@@ -383,6 +372,0 @@\n-     * <p>\n-     * If a security manager is present and the given {@code options} contains\n-     * {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE},\n-     * it calls its {@link SecurityManager#checkPermission checkPermission}\n-     * method for {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n-     *\n@@ -392,3 +375,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkPermission} method denies access.\n@@ -416,6 +396,0 @@\n-     * If a security manager is present and the given {@code options} contains\n-     * {@link Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE},\n-     * it calls its {@link SecurityManager#checkPermission checkPermission}\n-     * method for {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n-     *\n-     * <p>\n@@ -432,2 +406,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkPermission} method denies access.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StackWalker.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.lang.invoke.StringConcatFactory;\n@@ -43,1 +42,0 @@\n-import java.lang.reflect.Constructor;\n@@ -46,1 +44,0 @@\n-import java.lang.reflect.Modifier;\n@@ -78,1 +75,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -97,1 +93,0 @@\n-import sun.nio.fs.DefaultFileSystemProvider;\n@@ -196,9 +191,0 @@\n-    \/\/ indicates if a security manager is possible\n-    private static final int NEVER = 1;\n-    private static final int MAYBE = 2;\n-    private static @Stable int allowSecurityManager;\n-\n-    \/\/ current security manager\n-    @SuppressWarnings(\"removal\")\n-    private static volatile SecurityManager security;   \/\/ read by VM\n-\n@@ -210,5 +196,0 @@\n-    \/\/ return true if a security manager is allowed\n-    private static boolean allowSecurityManager() {\n-        return (allowSecurityManager != NEVER);\n-    }\n-\n@@ -218,4 +199,0 @@\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with a {@code RuntimePermission(\"setIO\")} permission\n-     *  to see if it's ok to reassign the \"standard\" input stream.\n-     *\n@@ -224,8 +201,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        reassigning of the standard input stream.\n-     *\n-     * @see SecurityManager#checkPermission\n-     * @see java.lang.RuntimePermission\n-     *\n@@ -242,4 +211,0 @@\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with a {@code RuntimePermission(\"setIO\")} permission\n-     *  to see if it's ok to reassign the \"standard\" output stream.\n-     *\n@@ -248,8 +213,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        reassigning of the standard output stream.\n-     *\n-     * @see SecurityManager#checkPermission\n-     * @see java.lang.RuntimePermission\n-     *\n@@ -266,4 +223,0 @@\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with a {@code RuntimePermission(\"setIO\")} permission\n-     *  to see if it's ok to reassign the \"standard\" error output stream.\n-     *\n@@ -272,8 +225,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        reassigning of the standard error output stream.\n-     *\n-     * @see SecurityManager#checkPermission\n-     * @see java.lang.RuntimePermission\n-     *\n@@ -328,4 +273,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and it does not\n-     *          permit access to the channel.\n-     *\n@@ -365,28 +306,5 @@\n-     * Sets the system-wide security manager.\n-     *\n-     * If there is a security manager already installed, this method first\n-     * calls the security manager's {@code checkPermission} method\n-     * with a {@code RuntimePermission(\"setSecurityManager\")}\n-     * permission to ensure it's ok to replace the existing\n-     * security manager.\n-     * This may result in throwing a {@code SecurityException}.\n-     *\n-     * <p> Otherwise, the argument is established as the current\n-     * security manager. If the argument is {@code null} and no\n-     * security manager has been established, then no action is taken and\n-     * the method simply returns.\n-     *\n-     * @implNote In the JDK implementation, if the Java virtual machine is\n-     * started with the system property {@code java.security.manager} not set or set to\n-     * the special token \"{@code disallow}\" then the {@code setSecurityManager}\n-     * method cannot be used to set a security manager. See the following\n-     * <a href=\"SecurityManager.html#set-security-manager\">section of the\n-     * {@code SecurityManager} class specification<\/a> for more details.\n-     *\n-     * @param  sm the security manager or {@code null}\n-     * @throws SecurityException\n-     *         if the security manager has already been set and its {@code\n-     *         checkPermission} method doesn't allow it to be replaced\n-     * @throws UnsupportedOperationException\n-     *         if {@code sm} is non-null and a security manager is not allowed\n-     *         to be set dynamically\n+     * Throws {@code UnsupportedOperationException}. Setting a security manager\n+     * is not supported.\n+     *\n+     * @param  sm ignored\n+     * @throws UnsupportedOperationException always\n@@ -394,8 +312,4 @@\n-     * @see SecurityManager#checkPermission\n-     * @see java.lang.RuntimePermission\n-     * @deprecated This method is only useful in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, which is\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this method is also deprecated and subject to\n-     *       removal. There is no replacement for the Security Manager or this\n-     *       method.\n+     * @deprecated This method originally set\n+     *       {@linkplain SecurityManager the system-wide Security Manager}.\n+     *       Setting a Security Manager is no longer supported. There is no\n+     *       replacement for the Security Manager or this method.\n@@ -404,1 +318,0 @@\n-    @CallerSensitive\n@@ -406,76 +319,2 @@\n-        if (allowSecurityManager()) {\n-            var callerClass = Reflection.getCallerClass();\n-            if (CallersHolder.callers.putIfAbsent(callerClass, true) == null) {\n-                URL url = codeSource(callerClass);\n-                final String source;\n-                if (url == null) {\n-                    source = callerClass.getName();\n-                } else {\n-                    source = callerClass.getName() + \" (\" + url + \")\";\n-                }\n-                initialErr.printf(\"\"\"\n-                        WARNING: A terminally deprecated method in java.lang.System has been called\n-                        WARNING: System::setSecurityManager has been called by %s\n-                        WARNING: Please consider reporting this to the maintainers of %s\n-                        WARNING: System::setSecurityManager will be removed in a future release\n-                        \"\"\", source, callerClass.getName());\n-            }\n-            implSetSecurityManager(sm);\n-        } else {\n-            \/\/ security manager not allowed\n-            if (sm != null) {\n-                throw new UnsupportedOperationException(\n-                    \"The Security Manager is deprecated and will be removed in a future release\");\n-            }\n-        }\n-    }\n-\n-    private static void implSetSecurityManager(@SuppressWarnings(\"removal\") SecurityManager sm) {\n-        if (security == null) {\n-            \/\/ ensure image reader is initialized\n-            Object.class.getResource(\"java\/lang\/ANY\");\n-            \/\/ ensure the default file system is initialized\n-            DefaultFileSystemProvider.theFileSystem();\n-        }\n-        if (sm != null) {\n-            try {\n-                \/\/ pre-populates the SecurityManager.packageAccess cache\n-                \/\/ to avoid recursive permission checking issues with custom\n-                \/\/ SecurityManager implementations\n-                sm.checkPackageAccess(\"java.lang\");\n-            } catch (Exception e) {\n-                \/\/ no-op\n-            }\n-        }\n-        setSecurityManager0(sm);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private static synchronized\n-    void setSecurityManager0(final SecurityManager s) {\n-        SecurityManager sm = getSecurityManager();\n-        if (sm != null) {\n-            \/\/ ask the currently installed security manager if we\n-            \/\/ can replace it.\n-            sm.checkPermission(new RuntimePermission(\"setSecurityManager\"));\n-        }\n-\n-        if ((s != null) && (s.getClass().getClassLoader() != null)) {\n-            \/\/ New security manager class is not on bootstrap classpath.\n-            \/\/ Force policy to get initialized before we install the new\n-            \/\/ security manager, in order to prevent infinite loops when\n-            \/\/ trying to initialize the policy (which usually involves\n-            \/\/ accessing some security and\/or system properties, which in turn\n-            \/\/ calls the installed security manager's checkPermission method\n-            \/\/ which will loop infinitely if there is a non-system class\n-            \/\/ (in this case: the new security manager class) on the stack).\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                public Object run() {\n-                    s.getClass().getProtectionDomain().implies\n-                        (SecurityConstants.ALL_PERMISSION);\n-                    return null;\n-                }\n-            });\n-        }\n-\n-        security = s;\n+        throw new UnsupportedOperationException(\n+                 \"Setting a Security Manager is not supported\");\n@@ -485,1 +324,1 @@\n-     * Gets the system-wide security manager.\n+     * Returns {@code null}. Setting a security manager is not supported.\n@@ -487,3 +326,1 @@\n-     * @return  if a security manager has already been established for the\n-     *          current application, then that security manager is returned;\n-     *          otherwise, {@code null} is returned.\n+     * @return  {@code null}\n@@ -491,6 +328,4 @@\n-     * @deprecated This method is only useful in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, which is\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this method is also deprecated and subject to\n-     *       removal. There is no replacement for the Security Manager or this\n-     *       method.\n+     * @deprecated This method originally returned\n+     *       {@linkplain SecurityManager the system-wide Security Manager}.\n+     *       Setting a Security Manager is no longer supported. There is no\n+     *       replacement for the Security Manager or this method.\n@@ -501,5 +336,1 @@\n-        if (allowSecurityManager()) {\n-            return security;\n-        } else {\n-            return null;\n-        }\n+        return null;\n@@ -693,4 +524,0 @@\n-     *\n-     * First, if there is a security manager, its\n-     * {@code checkPropertiesAccess} method is called with no\n-     * arguments. This may result in a security exception.\n@@ -811,4 +638,0 @@\n-     * Note that even if the security manager does not permit the\n-     * {@code getProperties} operation, it may choose to permit the\n-     * {@link #getProperty(String)} operation.\n-     * <p>\n@@ -858,3 +681,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkPropertiesAccess} method doesn't allow access\n-     *             to the system properties.\n@@ -862,2 +682,0 @@\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.SecurityManager#checkPropertiesAccess()\n@@ -895,4 +713,0 @@\n-     *\n-     * First, if there is a security manager, its\n-     * {@code checkPropertiesAccess} method is called with no\n-     * arguments. This may result in a security exception.\n@@ -911,3 +725,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkPropertiesAccess} method doesn't allow access\n-     *             to the system properties.\n@@ -916,2 +727,0 @@\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.SecurityManager#checkPropertiesAccess()\n@@ -936,4 +745,0 @@\n-     *\n-     * First, if there is a security manager, its\n-     * {@code checkPropertyAccess} method is called with the key as\n-     * its argument. This may result in a SecurityException.\n@@ -954,3 +759,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkPropertyAccess} method doesn't allow\n-     *             access to the specified system property.\n@@ -960,2 +762,0 @@\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -977,4 +777,0 @@\n-     *\n-     * First, if there is a security manager, its\n-     * {@code checkPropertyAccess} method is called with the\n-     * {@code key} as its argument.\n@@ -991,3 +787,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkPropertyAccess} method doesn't allow\n-     *             access to the specified system property.\n@@ -997,1 +790,0 @@\n-     * @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -1014,7 +806,0 @@\n-     * First, if a security manager exists, its\n-     * {@code SecurityManager.checkPermission} method\n-     * is called with a {@code PropertyPermission(key, \"write\")}\n-     * permission. This may result in a SecurityException being thrown.\n-     * If no exception is thrown, the specified property is set to the given\n-     * value.\n-     *\n@@ -1031,3 +816,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkPermission} method doesn't allow\n-     *             setting of the specified property.\n@@ -1040,2 +822,0 @@\n-     * @see        java.util.PropertyPermission\n-     * @see        SecurityManager#checkPermission\n@@ -1059,6 +839,0 @@\n-     * First, if a security manager exists, its\n-     * {@code SecurityManager.checkPermission} method\n-     * is called with a {@code PropertyPermission(key, \"write\")}\n-     * permission. This may result in a SecurityException being thrown.\n-     * If no exception is thrown, the specified property is removed.\n-     *\n@@ -1074,3 +848,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkPropertyAccess} method doesn't allow\n-     *              access to the specified system property.\n@@ -1082,2 +853,0 @@\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.SecurityManager#checkPropertiesAccess()\n@@ -1111,8 +880,0 @@\n-     * <p>If a security manager exists, its\n-     * {@link SecurityManager#checkPermission checkPermission}\n-     * method is called with a\n-     * {@link RuntimePermission RuntimePermission(\"getenv.\"+name)}\n-     * permission.  This may result in a {@link SecurityException}\n-     * being thrown.  If no exception is thrown the value of the\n-     * variable {@code name} is returned.\n-     *\n@@ -1144,5 +905,0 @@\n-     * @throws SecurityException\n-     *         if a security manager exists and its\n-     *         {@link SecurityManager#checkPermission checkPermission}\n-     *         method doesn't allow access to the environment variable\n-     *         {@code name}\n@@ -1183,6 +939,0 @@\n-     * <p>If a security manager exists, its\n-     * {@link SecurityManager#checkPermission checkPermission}\n-     * method is called with a\n-     * {@link RuntimePermission RuntimePermission(\"getenv.*\")} permission.\n-     * This may result in a {@link SecurityException} being thrown.\n-     *\n@@ -1194,4 +944,0 @@\n-     * @throws SecurityException\n-     *         if a security manager exists and its\n-     *         {@link SecurityManager#checkPermission checkPermission}\n-     *         method doesn't allow access to the process environment\n@@ -1617,10 +1363,0 @@\n-     * In addition, when a security manager is present, loggers provided to\n-     * system classes should not be directly configurable through the logging\n-     * backend without requiring permissions.\n-     * <br>\n-     * It is the responsibility of the provider of\n-     * the concrete {@code LoggerFinder} implementation to ensure that\n-     * these loggers are not configured by untrusted code without proper\n-     * permission checks, as configuration performed on such loggers usually\n-     * affects all applications in the same Java Runtime.\n-     * <p>\n@@ -1659,4 +1395,0 @@\n-         *\n-         * @throws SecurityException if a security manager is present and its\n-         *         {@code checkPermission} method doesn't allow the\n-         *         {@code RuntimePermission(\"loggerFinder\")}.\n@@ -1692,3 +1424,0 @@\n-         * @throws SecurityException if a security manager is present and its\n-         *         {@code checkPermission} method doesn't allow the\n-         *         {@code RuntimePermission(\"loggerFinder\")}.\n@@ -1735,3 +1464,0 @@\n-         * @throws SecurityException if a security manager is present and its\n-         *         {@code checkPermission} method doesn't allow the\n-         *         {@code RuntimePermission(\"loggerFinder\")}.\n@@ -1752,3 +1478,0 @@\n-         * @throws SecurityException if a security manager is present and its\n-         *         {@code checkPermission} method doesn't allow the\n-         *         {@code RuntimePermission(\"loggerFinder\")}.\n@@ -1899,4 +1622,4 @@\n-     * Initiates the {@linkplain Runtime##shutdown shutdown sequence} of the Java Virtual Machine.\n-     * Unless the security manager denies exiting, this method initiates the shutdown sequence\n-     * (if it is not already initiated) and then blocks indefinitely. This method neither returns\n-     * nor throws an exception; that is, it does not complete either normally or abruptly.\n+     * Initiates the {@linkplain Runtime##shutdown shutdown sequence} of the Java Virtual\n+     * Machine. This method initiates the shutdown sequence (if it is not already initiated)\n+     * and then blocks indefinitely. This method neither returns nor throws an exception;\n+     * that is, it does not complete either normally or abruptly.\n@@ -1916,3 +1639,0 @@\n-     * @throws SecurityException\n-     *         if a security manager exists and its {@code checkExit} method\n-     *         doesn't allow exit with the specified status.\n@@ -2012,3 +1732,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkLink} method doesn't allow\n-     *             loading of the specified dynamic library\n@@ -2025,1 +1742,0 @@\n-     * @see        java.lang.SecurityManager#checkLink(java.lang.String)\n@@ -2055,3 +1771,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkLink} method doesn't allow\n-     *             loading of the specified dynamic library\n@@ -2068,1 +1781,0 @@\n-     * @see        java.lang.SecurityManager#checkLink(java.lang.String)\n@@ -2337,5 +2049,2 @@\n-     * 1. eagerly initialize bootstrap method factories that might interact\n-     *    negatively with custom security managers and custom class loaders\n-     * 2. set security manager\n-     * 3. set system class loader\n-     * 4. set TCCL\n+     * 1. set system class loader\n+     * 2. set TCCL\n@@ -2344,2 +2053,0 @@\n-     * The security manager and system class loader may be a custom class from\n-     * the application classpath or modulepath.\n@@ -2347,1 +2054,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -2350,5 +2056,0 @@\n-        \/\/ Initialize the StringConcatFactory eagerly to avoid potential\n-        \/\/ bootstrap circularity issues that could be caused by a custom\n-        \/\/ SecurityManager\n-        Unsafe.getUnsafe().ensureClassInitialized(StringConcatFactory.class);\n-\n@@ -2362,1 +2063,0 @@\n-        boolean needWarning = false;\n@@ -2366,1 +2066,0 @@\n-                    allowSecurityManager = NEVER;\n@@ -2369,2 +2068,0 @@\n-                    allowSecurityManager = MAYBE;\n-                    break;\n@@ -2373,4 +2070,0 @@\n-                    implSetSecurityManager(new SecurityManager());\n-                    allowSecurityManager = MAYBE;\n-                    needWarning = true;\n-                    break;\n@@ -2378,21 +2071,2 @@\n-                    try {\n-                        ClassLoader cl = ClassLoader.getBuiltinAppClassLoader();\n-                        Class<?> c = Class.forName(smProp, false, cl);\n-                        Constructor<?> ctor = c.getConstructor();\n-                        \/\/ Must be a public subclass of SecurityManager with\n-                        \/\/ a public no-arg constructor\n-                        if (!SecurityManager.class.isAssignableFrom(c) ||\n-                            !Modifier.isPublic(c.getModifiers()) ||\n-                            !Modifier.isPublic(ctor.getModifiers())) {\n-                            throw new Error(\"Could not create SecurityManager: \"\n-                                             + ctor.toString());\n-                        }\n-                        \/\/ custom security manager may be in non-exported package\n-                        ctor.setAccessible(true);\n-                        SecurityManager sm = (SecurityManager) ctor.newInstance();\n-                        implSetSecurityManager(sm);\n-                        needWarning = true;\n-                    } catch (Exception e) {\n-                        throw new InternalError(\"Could not create SecurityManager\", e);\n-                    }\n-                    allowSecurityManager = MAYBE;\n+                    throw new Error(\"A command line option has attempted to allow or enable the Security Manager.\"\n+                            + \" Enabling a Security Manager is not supported.\");\n@@ -2400,8 +2074,0 @@\n-        } else {\n-            allowSecurityManager = NEVER;\n-        }\n-\n-        if (needWarning) {\n-            System.err.println(\"\"\"\n-                    WARNING: A command line option has enabled the Security Manager\n-                    WARNING: The Security Manager is deprecated and will be removed in a future release\"\"\");\n@@ -2494,8 +2160,0 @@\n-            @SuppressWarnings(\"removal\")\n-            public void addNonExportedPackages(ModuleLayer layer) {\n-                SecurityManager.addNonExportedPackages(layer);\n-            }\n-            @SuppressWarnings(\"removal\")\n-            public void invalidatePackageAccessCache() {\n-                SecurityManager.invalidatePackageAccessCache();\n-            }\n@@ -2794,5 +2452,0 @@\n-\n-            @Override\n-            public boolean allowSecurityManager() {\n-                return System.allowSecurityManager();\n-            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":26,"deletions":373,"binary":false,"changes":399,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.security.Permission;\n@@ -34,1 +33,0 @@\n-import java.security.ProtectionDomain;\n@@ -165,1 +163,9 @@\n- * A {@code Thread} inherits its initial values of {@linkplain InheritableThreadLocal\n+ * A {@code Thread} created with one of the public constructors inherits the daemon\n+ * status and thread priority from the parent thread at the time that the child {@code\n+ * Thread} is created. The {@linkplain ThreadGroup thread group} is also inherited when\n+ * not provided to the constructor. When using a {@code Thread.Builder} to create a\n+ * platform thread, the daemon status, thread priority, and thread group are inherited\n+ * when not set on the builder. As with the constructors, inheriting from the parent\n+ * thread is done when the child {@code Thread} is created.\n+ *\n+ * <p> A {@code Thread} inherits its initial values of {@linkplain InheritableThreadLocal\n@@ -174,11 +180,0 @@\n- * <p> Platform threads inherit the daemon status, thread priority, and when not\n- * provided (or not selected by a security manager), the thread group.\n- *\n- * <p> Creating a platform thread {@linkplain AccessController#getContext() captures} the\n- * {@linkplain AccessControlContext caller context} to limit the {@linkplain Permission\n- * permissions} of the new thread when it executes code that performs a {@linkplain\n- * AccessController#doPrivileged(PrivilegedAction) privileged action}. The captured\n- * caller context is the new thread's \"Inherited {@link AccessControlContext}\". Creating\n- * a virtual thread does not capture the caller context; virtual threads have no\n- * permissions when executing code that performs a privileged action.\n- *\n@@ -248,4 +243,0 @@\n-    \/\/ inherited AccessControlContext, this could be moved to FieldHolder\n-    @SuppressWarnings(\"removal\")\n-    private AccessControlContext inheritedAccessControlContext;\n-\n@@ -683,2 +674,1 @@\n-     * @param acc the AccessControlContext to inherit, or\n-     *        AccessController.getContext() if null\n+     * @param acc ignored\n@@ -731,6 +721,0 @@\n-        if (acc != null) {\n-            this.inheritedAccessControlContext = acc;\n-        } else {\n-            this.inheritedAccessControlContext = AccessController.getContext();\n-        }\n-\n@@ -768,1 +752,0 @@\n-        this.inheritedAccessControlContext = Constants.NO_PERMISSIONS_ACC;\n@@ -800,12 +783,0 @@\n-     * <p> <a id=\"ofplatform-security\"><b>Interaction with security manager when\n-     * creating platform threads<\/b><\/a>\n-     * <p> Creating a platform thread when there is a security manager set will\n-     * invoke the security manager's {@link SecurityManager#checkAccess(ThreadGroup)\n-     * checkAccess(ThreadGroup)} method with the thread's thread group.\n-     * If the thread group has not been set with the {@link\n-     * Builder.OfPlatform#group(ThreadGroup) OfPlatform.group} method then the\n-     * security manager's {@link SecurityManager#getThreadGroup() getThreadGroup}\n-     * method will be invoked first to select the thread group. If the security\n-     * manager {@code getThreadGroup} method returns {@code null} then the thread\n-     * group of the constructing thread is used.\n-     *\n@@ -941,3 +912,0 @@\n-         * @throws SecurityException if denied by the security manager\n-         *         (See <a href=\"Thread.html#ofplatform-security\">Interaction with\n-         *         security manager when creating platform threads<\/a>)\n@@ -955,3 +923,0 @@\n-         * @throws SecurityException if denied by the security manager\n-         *         (See <a href=\"Thread.html#ofplatform-security\">Interaction with\n-         *         security manager when creating platform threads<\/a>)\n@@ -1182,5 +1147,1 @@\n-     *         the thread group. If {@code null} and there is a security\n-     *         manager, the group is determined by {@linkplain\n-     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()}.\n-     *         If there is not a security manager or {@code\n-     *         SecurityManager.getThreadGroup()} returns {@code null}, the group\n+     *         the thread group. If {@code null} the group\n@@ -1193,4 +1154,0 @@\n-     * @throws  SecurityException\n-     *          if the current thread cannot create a thread in the specified\n-     *          thread group\n-     *\n@@ -1229,5 +1186,1 @@\n-     *         the thread group. If {@code null} and there is a security\n-     *         manager, the group is determined by {@linkplain\n-     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()}.\n-     *         If there is not a security manager or {@code\n-     *         SecurityManager.getThreadGroup()} returns {@code null}, the group\n+     *         the thread group. If {@code null}, the group\n@@ -1239,4 +1192,0 @@\n-     * @throws  SecurityException\n-     *          if the current thread cannot create a thread in the specified\n-     *          thread group\n-     *\n@@ -1276,10 +1225,0 @@\n-     * <p>If there is a security manager, its\n-     * {@link SecurityManager#checkAccess(ThreadGroup) checkAccess}\n-     * method is invoked with the ThreadGroup as its argument.\n-     *\n-     * <p>In addition, its {@code checkPermission} method is invoked with\n-     * the {@code RuntimePermission(\"enableContextClassLoaderOverride\")}\n-     * permission when invoked directly or indirectly by the constructor\n-     * of a subclass which overrides the {@code getContextClassLoader}\n-     * or {@code setContextClassLoader} methods.\n-     *\n@@ -1301,5 +1240,1 @@\n-     *         the thread group. If {@code null} and there is a security\n-     *         manager, the group is determined by {@linkplain\n-     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()}.\n-     *         If there is not a security manager or {@code\n-     *         SecurityManager.getThreadGroup()} returns {@code null}, the group\n+     *         the thread group. If {@code null}, the group\n@@ -1315,4 +1250,0 @@\n-     * @throws  SecurityException\n-     *          if the current thread cannot create a thread in the specified\n-     *          thread group or cannot override the context class loader methods.\n-     *\n@@ -1378,5 +1309,1 @@\n-     *         the thread group. If {@code null} and there is a security\n-     *         manager, the group is determined by {@linkplain\n-     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()}.\n-     *         If there is not a security manager or {@code\n-     *         SecurityManager.getThreadGroup()} returns {@code null}, the group\n+     *         the thread group. If {@code null}, the group\n@@ -1396,4 +1323,0 @@\n-     * @throws  SecurityException\n-     *          if the current thread cannot create a thread in the specified\n-     *          thread group\n-     *\n@@ -1438,5 +1361,1 @@\n-     *         the thread group. If {@code null} and there is a security\n-     *         manager, the group is determined by {@linkplain\n-     *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()}.\n-     *         If there is not a security manager or {@code\n-     *         SecurityManager.getThreadGroup()} returns {@code null}, the group\n+     *         the thread group. If {@code null}, the group\n@@ -1461,4 +1380,0 @@\n-     * @throws  SecurityException\n-     *          if the current thread cannot create a thread in the specified\n-     *          thread group\n-     *\n@@ -1599,1 +1514,0 @@\n-        inheritedAccessControlContext = null;\n@@ -1666,5 +1580,0 @@\n-     * <p> Unless the current thread is interrupting itself, which is\n-     * always permitted, the {@link #checkAccess() checkAccess} method\n-     * of this thread is invoked, which may cause a {@link\n-     * SecurityException} to be thrown.\n-     *\n@@ -1699,3 +1608,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          if the current thread cannot modify this thread\n@@ -1704,4 +1610,0 @@\n-        if (this != Thread.currentThread()) {\n-            checkAccess();\n-        }\n-\n@@ -1815,3 +1717,0 @@\n-     * @throws  SecurityException\n-     *          if {@link #checkAccess} determines that the current\n-     *          thread cannot modify this thread\n@@ -1822,1 +1721,0 @@\n-        checkAccess();\n@@ -1860,4 +1758,0 @@\n-     * <p>\n-     * First the {@code checkAccess} method of this thread is called\n-     * with no arguments. This may result in throwing a\n-     * {@code SecurityException}.\n@@ -1874,2 +1768,0 @@\n-     * @throws     SecurityException  if the current thread cannot modify this\n-     *             thread.\n@@ -1879,1 +1771,0 @@\n-     * @see        #checkAccess()\n@@ -1882,1 +1773,0 @@\n-        checkAccess();\n@@ -1961,4 +1851,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          if {@link java.lang.ThreadGroup#checkAccess} determines that\n-     *          the current thread cannot access its thread group\n@@ -2170,3 +2056,0 @@\n-     * @throws  SecurityException\n-     *          if {@link #checkAccess} determines that the current\n-     *          thread cannot modify this thread\n@@ -2175,1 +2058,0 @@\n-        checkAccess();\n@@ -2205,16 +2087,7 @@\n-     * Determines if the currently running thread has permission to\n-     * modify this thread.\n-     * <p>\n-     * If there is a security manager, its {@code checkAccess} method\n-     * is called with this thread as its argument. This may result in\n-     * throwing a {@code SecurityException}.\n-     *\n-     * @throws  SecurityException  if the current thread is not allowed to\n-     *          access this thread.\n-     * @see        SecurityManager#checkAccess(Thread)\n-     * @deprecated This method is only useful in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, which is\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this method is also deprecated and subject to\n-     *       removal. There is no replacement for the Security Manager or this\n-     *       method.\n+     * Does nothing.\n+     *\n+     * @deprecated This method originally determined if the currently running\n+     * thread had permission to modify this thread. This method was only useful\n+     * in conjunction with {@linkplain SecurityManager the Security Manager},\n+     * which is no longer supported. There is no replacement for the Security\n+     * Manager or this method.\n@@ -2223,7 +2096,1 @@\n-    public final void checkAccess() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkAccess(this);\n-        }\n-    }\n+    public final void checkAccess() { }\n@@ -2268,6 +2135,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is present, and the caller's class loader\n-     *          is not {@code null} and is not the same as or an ancestor of the\n-     *          context class loader, and the caller does not have the\n-     *          {@link RuntimePermission}{@code (\"getClassLoader\")}\n-     *\n@@ -2296,6 +2157,0 @@\n-     * <p> If a security manager is present, its {@link\n-     * SecurityManager#checkPermission(java.security.Permission) checkPermission}\n-     * method is invoked with a {@link RuntimePermission RuntimePermission}{@code\n-     * (\"setContextClassLoader\")} permission to see if setting the context\n-     * ClassLoader is permitted.\n-     *\n@@ -2306,3 +2161,0 @@\n-     * @throws  SecurityException\n-     *          if the current thread cannot set the context ClassLoader\n-     *\n@@ -2351,6 +2203,0 @@\n-     * <p>If there is a security manager, and this thread is not\n-     * the current thread, then the security manager's\n-     * {@code checkPermission} method is called with a\n-     * {@code RuntimePermission(\"getStackTrace\")} permission\n-     * to see if it's ok to get the stack trace.\n-     *\n@@ -2366,4 +2212,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        getting the stack trace of thread.\n@@ -2371,1 +2213,0 @@\n-     *\n@@ -2431,6 +2272,0 @@\n-     * <p>If there is a security manager, then the security manager's\n-     * {@code checkPermission} method is called with a\n-     * {@code RuntimePermission(\"getStackTrace\")} permission as well as\n-     * {@code RuntimePermission(\"modifyThreadGroup\")} permission\n-     * to see if it is ok to get the stack trace of all threads.\n-     *\n@@ -2441,4 +2276,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        getting the stack trace of thread.\n@@ -2763,3 +2594,0 @@\n-     * @throws SecurityException if a security manager is present and it denies\n-     *         {@link RuntimePermission}{@code (\"setDefaultUncaughtExceptionHandler\")}\n-     *\n@@ -2821,2 +2649,0 @@\n-     * @throws  SecurityException  if the current thread is not allowed to\n-     *          modify this thread.\n@@ -2828,1 +2654,0 @@\n-        checkAccess();\n@@ -2852,4 +2677,0 @@\n-        \/\/ AccessControlContext that doesn't support any permissions.\n-        @SuppressWarnings(\"removal\")\n-        static final AccessControlContext NO_PERMISSIONS_ACC;\n-\n@@ -2857,11 +2678,4 @@\n-            var getThreadGroup  = new PrivilegedAction<ThreadGroup>() {\n-                @Override\n-                public ThreadGroup run() {\n-                    ThreadGroup parent = Thread.currentCarrierThread().getThreadGroup();\n-                    for (ThreadGroup p; (p = parent.getParent()) != null; )\n-                        parent = p;\n-                    return parent;\n-                }\n-            };\n-            @SuppressWarnings(\"removal\")\n-            ThreadGroup root = AccessController.doPrivileged(getThreadGroup);\n+            ThreadGroup root = Thread.currentCarrierThread().getThreadGroup();\n+            for (ThreadGroup p; (p = root.getParent()) != null; ) {\n+                root = p;\n+            }\n@@ -2869,4 +2683,0 @@\n-\n-            NO_PERMISSIONS_ACC = new AccessControlContext(new ProtectionDomain[] {\n-                new ProtectionDomain(null, null)\n-            });\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":27,"deletions":217,"binary":false,"changes":244,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,1 +109,1 @@\n-     * Creates a ThreadGroup without any permission or other checks.\n+     * Creates a ThreadGroup.\n@@ -127,9 +127,0 @@\n-    private ThreadGroup(Void unused, ThreadGroup parent, String name) {\n-        this(parent, name, parent.maxPriority, parent.daemon);\n-    }\n-\n-    private static Void checkParentAccess(ThreadGroup parent) {\n-        parent.checkAccess();\n-        return null;\n-    }\n-\n@@ -139,3 +130,0 @@\n-     * <p>\n-     * The {@code checkAccess} method of the parent thread group is\n-     * called with no arguments; this may result in a security exception.\n@@ -144,3 +132,0 @@\n-     * @throws  SecurityException  if the current thread cannot create a\n-     *               thread in the specified thread group.\n-     * @see     java.lang.ThreadGroup#checkAccess()\n@@ -155,3 +140,0 @@\n-     * <p>\n-     * The {@code checkAccess} method of the parent thread group is\n-     * called with no arguments; this may result in a security exception.\n@@ -161,3 +143,0 @@\n-     * @throws    SecurityException  if the current thread cannot create a\n-     *               thread in the specified thread group.\n-     * @see     java.lang.ThreadGroup#checkAccess()\n@@ -167,1 +146,1 @@\n-        this(checkParentAccess(parent), parent, name);\n+        this(parent, name, parent.maxPriority, parent.daemon);\n@@ -181,4 +160,0 @@\n-     * <p>\n-     * First, if the parent is not {@code null}, the\n-     * {@code checkAccess} method of the parent thread group is\n-     * called with no arguments; this may result in a security exception.\n@@ -188,5 +163,0 @@\n-     * @throws  SecurityException  if the current thread cannot modify\n-     *               this thread group.\n-     * @see        java.lang.ThreadGroup#checkAccess()\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.RuntimePermission\n@@ -195,2 +165,0 @@\n-        if (parent != null)\n-            parent.checkAccess();\n@@ -248,3 +216,0 @@\n-     * <p>\n-     * First, the {@code checkAccess} method of this thread group is\n-     * called with no arguments; this may result in a security exception.\n@@ -253,4 +218,0 @@\n-     * @throws     SecurityException  if the current thread cannot modify\n-     *               this thread group.\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.ThreadGroup#checkAccess()\n@@ -267,1 +228,0 @@\n-        checkAccess();\n@@ -278,3 +238,0 @@\n-     * First, the {@code checkAccess} method of this thread group is\n-     * called with no arguments; this may result in a security exception.\n-     * <p>\n@@ -295,2 +252,0 @@\n-     * @throws     SecurityException  if the current thread cannot modify\n-     *               this thread group.\n@@ -298,2 +253,0 @@\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.ThreadGroup#checkAccess()\n@@ -302,1 +255,0 @@\n-        checkAccess();\n@@ -334,16 +286,7 @@\n-     * Determines if the currently running thread has permission to\n-     * modify this thread group.\n-     * <p>\n-     * If there is a security manager, its {@code checkAccess} method\n-     * is called with this thread group as its argument. This may result\n-     * in throwing a {@code SecurityException}.\n-     *\n-     * @throws     SecurityException  if the current thread is not allowed to\n-     *               access this thread group.\n-     * @see        java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)\n-     * @deprecated This method is only useful in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, which is\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this method is also deprecated and subject to\n-     *       removal. There is no replacement for the Security Manager or this\n-     *       method.\n+     * Does nothing.\n+     *\n+     * @deprecated This method originally determined if the currently running\n+     * thread had permission to modify this thread group. This method was only\n+     * useful in conjunction with {@linkplain SecurityManager the Security Manager},\n+     * which is no longer supported. There is no replacement for the Security\n+     * Manager or this method.\n@@ -352,7 +295,1 @@\n-    public final void checkAccess() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkAccess(this);\n-        }\n-    }\n+    public final void checkAccess() { }\n@@ -403,4 +340,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          if {@linkplain #checkAccess checkAccess} determines that\n-     *          the current thread cannot access this thread group\n@@ -438,4 +371,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          if {@linkplain #checkAccess checkAccess} determines that\n-     *          the current thread cannot access this thread group\n@@ -445,1 +374,0 @@\n-        checkAccess();\n@@ -497,4 +425,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          if {@linkplain #checkAccess checkAccess} determines that\n-     *          the current thread cannot access this thread group\n@@ -531,4 +455,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          if {@linkplain #checkAccess checkAccess} determines that\n-     *          the current thread cannot access this thread group\n@@ -538,1 +458,0 @@\n-        checkAccess();\n@@ -562,3 +481,0 @@\n-     * @throws     SecurityException  if the current thread is not allowed\n-     *               to access this thread group or any of the threads in\n-     *               the thread group.\n@@ -566,2 +482,0 @@\n-     * @see        java.lang.SecurityException\n-     * @see        java.lang.ThreadGroup#checkAccess()\n@@ -571,1 +485,0 @@\n-        checkAccess();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadGroup.java","additions":11,"deletions":98,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -899,2 +899,0 @@\n-            checkAccess();\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -319,3 +319,0 @@\n-     * @throws SecurityException If a security manager is present, and it\n-     *         <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n-     *         from {@code caller} to the package of {@code implementation}.\n@@ -470,3 +467,0 @@\n-     * @throws SecurityException If a security manager is present, and it\n-     *         <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n-     *         from {@code caller} to the package of {@code implementation}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaMetafactory.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -150,5 +150,0 @@\n-     * <p>\n-     * If a security manager is installed, this method is caller sensitive.\n-     * During any invocation of the target method handle via the returned wrapper,\n-     * the original creator of the wrapper (the caller) will be visible\n-     * to context checks requested by the security manager.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -168,2 +168,0 @@\n-     * A public lookup object is always subject to\n-     * <a href=\"MethodHandles.Lookup.html#secmgr\">security manager checks<\/a>.\n@@ -189,3 +187,0 @@\n-     * <li>If there is a security manager, its {@code checkPermission} method is\n-     * called to check {@code ReflectPermission(\"suppressAccessChecks\")} and\n-     * that must return normally.\n@@ -241,1 +236,0 @@\n-     * @throws SecurityException if denied by the security manager\n@@ -462,3 +456,0 @@\n-     * <p>\n-     * If there is a security manager, its {@code checkPermission} method\n-     * is called with a {@code ReflectPermission(\"suppressAccessChecks\")} permission.\n@@ -469,1 +460,0 @@\n-     * @throws    SecurityException if the caller is not privileged to call {@code setAccessible}\n@@ -619,4 +609,0 @@\n-     * <li>If there is a security manager installed, it can forbid the lookup\n-     * on various grounds (<a href=\"MethodHandles.Lookup.html#secmgr\">see below<\/a>).\n-     * By contrast, the {@code ldc} instruction on a {@code CONSTANT_MethodHandle}\n-     * constant is not subject to security manager checks.\n@@ -1320,68 +1306,0 @@\n-     * <h2><a id=\"secmgr\"><\/a>Security manager interactions<\/h2>\n-     * Although bytecode instructions can only refer to classes in\n-     * a related class loader, this API can search for methods in any\n-     * class, as long as a reference to its {@code Class} object is\n-     * available.  Such cross-loader references are also possible with the\n-     * Core Reflection API, and are impossible to bytecode instructions\n-     * such as {@code invokestatic} or {@code getfield}.\n-     * There is a {@linkplain java.lang.SecurityManager security manager API}\n-     * to allow applications to check such cross-loader references.\n-     * These checks apply to both the {@code MethodHandles.Lookup} API\n-     * and the Core Reflection API\n-     * (as found on {@link java.lang.Class Class}).\n-     * <p>\n-     * If a security manager is present, member and class lookups are subject to\n-     * additional checks.\n-     * From one to three calls are made to the security manager.\n-     * Any of these calls can refuse access by throwing a\n-     * {@link java.lang.SecurityException SecurityException}.\n-     * Define {@code smgr} as the security manager,\n-     * {@code lookc} as the lookup class of the current lookup object,\n-     * {@code refc} as the containing class in which the member\n-     * is being sought, and {@code defc} as the class in which the\n-     * member is actually defined.\n-     * (If a class or other type is being accessed,\n-     * the {@code refc} and {@code defc} values are the class itself.)\n-     * The value {@code lookc} is defined as <em>not present<\/em>\n-     * if the current lookup object does not have\n-     * {@linkplain #hasFullPrivilegeAccess() full privilege access}.\n-     * The calls are made according to the following rules:\n-     * <ul>\n-     * <li><b>Step 1:<\/b>\n-     *     If {@code lookc} is not present, or if its class loader is not\n-     *     the same as or an ancestor of the class loader of {@code refc},\n-     *     then {@link SecurityManager#checkPackageAccess\n-     *     smgr.checkPackageAccess(refcPkg)} is called,\n-     *     where {@code refcPkg} is the package of {@code refc}.\n-     * <li><b>Step 2a:<\/b>\n-     *     If the retrieved member is not public and\n-     *     {@code lookc} is not present, then\n-     *     {@link SecurityManager#checkPermission smgr.checkPermission}\n-     *     with {@code RuntimePermission(\"accessDeclaredMembers\")} is called.\n-     * <li><b>Step 2b:<\/b>\n-     *     If the retrieved class has a {@code null} class loader,\n-     *     and {@code lookc} is not present, then\n-     *     {@link SecurityManager#checkPermission smgr.checkPermission}\n-     *     with {@code RuntimePermission(\"getClassLoader\")} is called.\n-     * <li><b>Step 3:<\/b>\n-     *     If the retrieved member is not public,\n-     *     and if {@code lookc} is not present,\n-     *     and if {@code defc} and {@code refc} are different,\n-     *     then {@link SecurityManager#checkPackageAccess\n-     *     smgr.checkPackageAccess(defcPkg)} is called,\n-     *     where {@code defcPkg} is the package of {@code defc}.\n-     * <\/ul>\n-     * Security checks are performed after other access checks have passed.\n-     * Therefore, the above rules presuppose a member or class that is public,\n-     * or else that is being accessed from a lookup class that has\n-     * rights to access the member or class.\n-     * <p>\n-     * If a security manager is present and the current lookup object does not have\n-     * {@linkplain #hasFullPrivilegeAccess() full privilege access}, then\n-     * {@link #defineClass(byte[]) defineClass},\n-     * {@link #defineHiddenClass(byte[], boolean, ClassOption...) defineHiddenClass},\n-     * {@link #defineHiddenClassWithClassData(byte[], Object, boolean, ClassOption...)\n-     * defineHiddenClassWithClassData}\n-     * calls {@link SecurityManager#checkPermission smgr.checkPermission}\n-     * with {@code RuntimePermission(\"defineClass\")}.\n-     *\n@@ -1828,4 +1746,0 @@\n-         * <p> If there is a security manager and this lookup does not have {@linkplain\n-         * #hasFullPrivilegeAccess() full privilege access}, its {@code checkPermission} method\n-         * is first called to check {@code RuntimePermission(\"defineClass\")}. <\/p>\n-         *\n@@ -1841,2 +1755,0 @@\n-         * @throws SecurityException if a security manager is present and it\n-         *                           <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -2100,2 +2012,0 @@\n-         * @throws SecurityException if a security manager is present and it\n-         * <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -2183,2 +2093,0 @@\n-         * @throws SecurityException if a security manager is present and it\n-         * <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -2634,2 +2542,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -2718,2 +2624,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -2792,2 +2696,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -2822,2 +2724,0 @@\n-         * @throws SecurityException if a security manager is present and it\n-         *                           <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -2859,2 +2759,0 @@\n-         * @throws  SecurityException if a security manager is present and it\n-         *          <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -2969,2 +2867,0 @@\n-         * @throws SecurityException if a security manager is present and it\n-         *                           <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -3053,2 +2949,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -3078,2 +2972,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -3102,2 +2994,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -3175,2 +3065,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -3201,2 +3089,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -3226,2 +3112,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -3300,2 +3184,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -3354,2 +3236,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -3688,2 +3568,0 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n@@ -4659,1 +4537,1 @@\n-     * This method throws no reflective or security exceptions.\n+     * This method throws no reflective exceptions.\n@@ -4705,1 +4583,1 @@\n-     * This method throws no reflective or security exceptions.\n+     * This method throws no reflective exceptions.\n@@ -4743,1 +4621,1 @@\n-     * This method throws no reflective or security exceptions.\n+     * This method throws no reflective exceptions.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":3,"deletions":125,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1181,3 +1181,0 @@\n-     * @throws SecurityException if the security manager is present and\n-     *         {@code loader} is {@code null} and the caller does not have the\n-     *         {@link RuntimePermission}{@code (\"getClassLoader\")}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodType.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,2 +247,0 @@\n-     * @throws SecurityException\n-     *         If locating a module is denied by the security manager\n@@ -290,2 +288,0 @@\n-     * @throws SecurityException\n-     *         If locating a module is denied by the security manager\n@@ -402,3 +398,0 @@\n-     *\n-     * @throws SecurityException\n-     *         If locating a module is denied by the security manager\n@@ -474,2 +467,0 @@\n-     * @throws SecurityException\n-     *         If locating a module is denied by the security manager\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/Configuration.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,3 +102,0 @@\n-     *\n-     * @throws SecurityException\n-     *         If denied by the security manager\n@@ -126,3 +123,0 @@\n-     *\n-     * @throws SecurityException\n-     *         If denied by the security manager\n@@ -137,6 +131,0 @@\n-     * <p> If there is a security manager set then its {@link\n-     * SecurityManager#checkPermission(Permission) checkPermission} method is\n-     * invoked to check that the caller has been granted\n-     * {@link RuntimePermission RuntimePermission(\"accessSystemModules\")}\n-     * to access the system modules. <\/p>\n-     *\n@@ -144,3 +132,0 @@\n-     *\n-     * @throws SecurityException\n-     *         If denied by the security manager\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleFinder.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,5 +63,0 @@\n- * <p> A {@code ModuleReader} implementation may require permissions to access\n- * resources in the module. Consequently the {@link #find find}, {@link #open\n- * open}, {@link #read read}, and {@link #list list} methods may throw {@code\n- * SecurityException} if access is denied by the security manager. <\/p>\n- *\n@@ -98,2 +93,0 @@\n-     * @throws SecurityException\n-     *         If denied by the security manager\n@@ -125,2 +118,0 @@\n-     * @throws SecurityException\n-     *         If denied by the security manager\n@@ -165,2 +156,0 @@\n-     * @throws SecurityException\n-     *         If denied by the security manager\n@@ -212,3 +201,1 @@\n-     * access to be attempted. {@code SecurityException} may also be thrown\n-     * when using the stream to list the module contents and access is denied\n-     * by the security manager. <\/p>\n+     * access to be attempted.\n@@ -232,2 +219,0 @@\n-     * @throws SecurityException\n-     *         If denied by the security manager\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleReader.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,6 +79,0 @@\n-     * <p> This URI, when present, can be used as the {@linkplain\n-     * java.security.CodeSource#getLocation location} value of a {@link\n-     * java.security.CodeSource CodeSource} so that a module's classes can be\n-     * granted specific permissions when loaded by a {@link\n-     * java.security.SecureClassLoader SecureClassLoader}.\n-     *\n@@ -98,2 +92,0 @@\n-     * @throws SecurityException\n-     *         If denied by the security manager\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleReference.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,6 +56,4 @@\n- * <p>Classes {@link ClassLoader}, {@link Process}, {@link\n- * ProcessBuilder}, {@link Runtime}, {@link SecurityManager}, and\n- * {@link System} provide \"system operations\" that manage the dynamic\n- * loading of classes, creation of external processes, host\n- * environment inquiries such as the time of day, and enforcement of\n- * security policies.\n+ * <p>Classes {@link ClassLoader}, {@link Process}, {@link ProcessBuilder},\n+ * {@link Runtime}, and {@link System} provide \"system operations\" that\n+ * manage the dynamic loading of classes, creation of external processes,\n+ * and host environment inquiries such as the time of day.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/package-info.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -166,3 +166,0 @@\n-     * The thread has no permissions, enforced only if a\n-     * {@linkplain java.lang.System#setSecurityManager(SecurityManager)\n-     * {@code SecurityManager} is set}.\n@@ -174,3 +171,0 @@\n-     *\n-     * @throws  SecurityException  if the current thread is not allowed to\n-     *               create or start the thread.\n@@ -202,2 +196,0 @@\n-     * @throws  SecurityException  if the current thread is not allowed to\n-     *               create or start the thread.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Cleaner.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,1 @@\n-     * array of reflected objects with a single security check (for efficiency).\n+     * array of reflected objects.\n@@ -103,5 +103,1 @@\n-     * <p>If there is a security manager, its\n-     * {@code checkPermission} method is first called with a\n-     * {@code ReflectPermission(\"suppressAccessChecks\")} permission.\n-     *\n-     * <p>A {@code SecurityException} is also thrown if any of the elements of\n+     * <p>A {@code SecurityException} is thrown if any of the elements of\n@@ -116,2 +112,1 @@\n-     * @throws SecurityException if the request is denied by the security manager\n-     *         or an element in the array is a constructor for {@code\n+     * @throws SecurityException if an element in the array is a constructor for {@code\n@@ -119,2 +114,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see ReflectPermission\n@@ -197,4 +190,0 @@\n-     * <p> If there is a security manager, its\n-     * {@code checkPermission} method is first called with a\n-     * {@code ReflectPermission(\"suppressAccessChecks\")} permission.\n-     *\n@@ -203,1 +192,0 @@\n-     * @throws SecurityException if the request is denied by the security manager\n@@ -263,4 +251,0 @@\n-     * <p> If there is a security manager, its {@code checkPermission} method\n-     * is first called with a {@code ReflectPermission(\"suppressAccessChecks\")}\n-     * permission. <\/p>\n-     *\n@@ -269,1 +253,0 @@\n-     * @throws SecurityException if the request is denied by the security manager\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessibleObject.java","additions":4,"deletions":21,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-     * <p> A {@code SecurityException} is also thrown if this object is a\n+     * <p> A {@code SecurityException} is thrown if this object is a\n@@ -179,3 +179,1 @@\n-     * @throws SecurityException if the request is denied by the security manager\n-     *         or this is a constructor for {@code java.lang.Class}\n-     *\n+     * @throws SecurityException if this is a constructor for {@code java.lang.Class}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -169,1 +169,0 @@\n-     * @throws SecurityException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -172,1 +172,0 @@\n-     * @throws SecurityException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,3 +120,1 @@\n- * loader, such as {@code java.lang.Object}, because the code for a\n- * proxy class is generated by trusted system code.  This protection\n- * domain will typically be granted {@code java.security.AllPermission}.\n+ * loader, such as {@code java.lang.Object}.\n@@ -357,15 +355,0 @@\n-     * @throws  SecurityException if a security manager, <em>s<\/em>, is present\n-     *          and any of the following conditions is met:\n-     *          <ul>\n-     *             <li> the given {@code loader} is {@code null} and\n-     *             the caller's class loader is not {@code null} and the\n-     *             invocation of {@link SecurityManager#checkPermission\n-     *             s.checkPermission} with\n-     *             {@code RuntimePermission(\"getClassLoader\")} permission\n-     *             denies access.<\/li>\n-     *             <li> for each proxy interface, {@code intf},\n-     *             the caller's class loader is not the same as or an\n-     *             ancestor of the class loader for {@code intf} and\n-     *             invocation of {@link SecurityManager#checkPackageAccess\n-     *             s.checkPackageAccess()} denies access to {@code intf}.<\/li>\n-     *          <\/ul>\n@@ -992,21 +975,0 @@\n-     * @throws  SecurityException if a security manager, <em>s<\/em>, is present\n-     *          and any of the following conditions is met:\n-     *          <ul>\n-     *          <li> the given {@code loader} is {@code null} and\n-     *               the caller's class loader is not {@code null} and the\n-     *               invocation of {@link SecurityManager#checkPermission\n-     *               s.checkPermission} with\n-     *               {@code RuntimePermission(\"getClassLoader\")} permission\n-     *               denies access;<\/li>\n-     *          <li> for each proxy interface, {@code intf},\n-     *               the caller's class loader is not the same as or an\n-     *               ancestor of the class loader for {@code intf} and\n-     *               invocation of {@link SecurityManager#checkPackageAccess\n-     *               s.checkPackageAccess()} denies access to {@code intf};<\/li>\n-     *          <li> any of the given proxy interfaces is non-public and the\n-     *               caller class is not in the same {@linkplain Package runtime package}\n-     *               as the non-public interface and the invocation of\n-     *               {@link SecurityManager#checkPermission s.checkPermission} with\n-     *               {@code ReflectPermission(\"newProxyInPackage.{package name}\")}\n-     *               permission denies access.<\/li>\n-     *          <\/ul>\n@@ -1115,6 +1077,0 @@\n-     * @throws  SecurityException if a security manager, <em>s<\/em>, is present\n-     *          and the caller's class loader is not the same as or an\n-     *          ancestor of the class loader for the invocation handler\n-     *          and invocation of {@link SecurityManager#checkPackageAccess\n-     *          s.checkPackageAccess()} denies access to the invocation\n-     *          handler's class.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":2,"deletions":46,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,0 @@\n- * <P>\n- * The following table\n- * provides a summary description of what the permission allows,\n- * and discusses the risks of granting code the permission.\n@@ -35,32 +31,3 @@\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">Table shows permission target name, what the permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- * <tbody>\n- *\n- * <tr>\n- *   <th scope=\"row\">suppressAccessChecks<\/th>\n- *   <td>ability to suppress the standard Java language access checks\n- *       on fields and methods in a class; allow access not only public members\n- *       but also allow access to default (package) access, protected,\n- *       and private members.<\/td>\n- *   <td>This is dangerous in that information (possibly confidential) and\n- *       methods normally unavailable would be accessible to malicious code.<\/td>\n- * <\/tr>\n- * <tr>\n- *   <th scope=\"row\">newProxyInPackage.{package name}<\/th>\n- *   <td>ability to create a proxy instance in the specified package of which\n- *       the non-public interface that the proxy class implements.<\/td>\n- *   <td>This gives code access to classes in packages to which it normally\n- *       does not have access and the dynamic proxy class is in the system\n- *       protection domain. Malicious code may use these classes to\n- *       help in its attempt to compromise security in the system.<\/td>\n- * <\/tr>\n- *\n- * <\/tbody>\n- * <\/table>\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n@@ -71,5 +38,0 @@\n- * @see Field#get\n- * @see Field#set\n- * @see Method#invoke\n- * @see Constructor#newInstance\n- * @see Proxy#newProxyInstance\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ReflectPermission.java","additions":4,"deletions":42,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,3 +40,0 @@\n- * <p>{@link AccessibleObject} allows suppression of access checks if\n- * the necessary {@link ReflectPermission} is available.\n- *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/package-info.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,5 +110,0 @@\n-     * <p>\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with a\n-     * {@code NetPermission(\"setDefaultAuthenticator\")} permission.\n-     * This may result in a java.lang.SecurityException.\n@@ -118,8 +113,0 @@\n-     *\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        setting the default authenticator.\n-     *\n-     * @see SecurityManager#checkPermission\n-     * @see java.net.NetPermission\n@@ -141,6 +128,0 @@\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with a\n-     * {@code NetPermission(\"requestPasswordAuthentication\")} permission.\n-     * This may result in a java.lang.SecurityException.\n-     * Then the default authenticator, if set, is returned.\n-     * Otherwise, {@code null} is returned.\n@@ -149,5 +130,0 @@\n-     *\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        requesting password authentication.\n@@ -155,2 +131,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see java.net.NetPermission\n@@ -172,5 +146,0 @@\n-     * <p>\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with a\n-     * {@code NetPermission(\"requestPasswordAuthentication\")} permission.\n-     * This may result in a java.lang.SecurityException.\n@@ -187,8 +156,0 @@\n-     *\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        the password authentication request.\n-     *\n-     * @see SecurityManager#checkPermission\n-     * @see java.net.NetPermission\n@@ -232,5 +193,0 @@\n-     * <p>\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with a\n-     * {@code NetPermission(\"requestPasswordAuthentication\")} permission.\n-     * This may result in a java.lang.SecurityException.\n@@ -249,7 +205,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        the password authentication request.\n-     *\n-     * @see SecurityManager#checkPermission\n-     * @see java.net.NetPermission\n@@ -294,5 +243,0 @@\n-     * <p>\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with a\n-     * {@code NetPermission(\"requestPasswordAuthentication\")} permission.\n-     * This may result in a java.lang.SecurityException.\n@@ -314,8 +258,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        the password authentication request.\n-     *\n-     * @see SecurityManager#checkPermission\n-     * @see java.net.NetPermission\n-     *\n@@ -366,5 +302,0 @@\n-     * <p>\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with a\n-     * {@code NetPermission(\"requestPasswordAuthentication\")} permission.\n-     * This may result in a java.lang.SecurityException.\n@@ -387,8 +318,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        the password authentication request.\n-     *\n-     * @see SecurityManager#checkPermission\n-     * @see java.net.NetPermission\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/net\/Authenticator.java","additions":1,"deletions":78,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,4 +70,0 @@\n- * <p>\n- * If the loading of the content handler class would be performed by\n- * a classloader that is outside of the delegation chain of the caller,\n- * the JVM will need the RuntimePermission \"getClassLoader\".\n","filename":"src\/java.base\/share\/classes\/java\/net\/ContentHandler.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,3 +73,0 @@\n-     * @throws SecurityException\n-     *       If a security manager has been installed and it denies\n-     * {@link NetPermission}{@code (\"getCookieHandler\")}\n@@ -94,3 +91,0 @@\n-     * @throws SecurityException\n-     *       If a security manager has been installed and it denies\n-     * {@link NetPermission}{@code (\"setCookieHandler\")}\n","filename":"src\/java.base\/share\/classes\/java\/net\/CookieHandler.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -274,5 +274,0 @@\n-     * <p>If there is a security manager,\n-     * its {@code checkListen} method is first called\n-     * with 0 as its argument to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n-     *\n@@ -281,4 +276,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkListen} method doesn't allow the operation.\n-     *\n-     * @see SecurityManager#checkListen\n@@ -308,6 +299,0 @@\n-     * <p>If there is a security manager,\n-     * its {@code checkListen} method is first called\n-     * with the port from the socket address\n-     * as its argument to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n-     *\n@@ -319,2 +304,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkListen} method doesn't allow the operation.\n@@ -324,1 +307,0 @@\n-     * @see SecurityManager#checkListen\n@@ -336,6 +318,0 @@\n-     * <p>If there is a security manager,\n-     * its {@code checkListen} method is first called\n-     * with the {@code port} argument\n-     * as its argument to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n-     *\n@@ -345,2 +321,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkListen} method doesn't allow the operation.\n@@ -349,2 +323,0 @@\n-     *\n-     * @see SecurityManager#checkListen\n@@ -367,6 +339,0 @@\n-     * <p>If there is a security manager,\n-     * its {@code checkListen} method is first called\n-     * with the {@code port} argument\n-     * as its argument to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n-     *\n@@ -378,2 +344,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkListen} method doesn't allow the operation.\n@@ -382,2 +346,0 @@\n-     *\n-     * @see SecurityManager#checkListen\n@@ -399,2 +361,0 @@\n-     * @throws  SecurityException  if a security manager exists and its\n-     *             {@code checkListen} method doesn't allow the operation.\n@@ -430,13 +390,0 @@\n-     * <p> If a security manager has been installed then it is invoked to check\n-     * access to the remote address. Specifically, if the given {@code address}\n-     * is a {@link InetAddress#isMulticastAddress multicast address},\n-     * the security manager's {@link\n-     * java.lang.SecurityManager#checkMulticast(InetAddress)\n-     * checkMulticast} method is invoked with the given {@code address}.\n-     * Otherwise, the security manager's {@link\n-     * java.lang.SecurityManager#checkConnect(String,int) checkConnect}\n-     * and {@link java.lang.SecurityManager#checkAccept checkAccept} methods\n-     * are invoked, with the given {@code address} and {@code port}, to\n-     * verify that datagrams are permitted to be sent and received\n-     * respectively.\n-     *\n@@ -464,4 +411,0 @@\n-     * @throws SecurityException\n-     *         if a security manager has been installed and it does\n-     *         not permit access to the given remote address\n-     *\n@@ -506,4 +449,0 @@\n-     * @throws SecurityException\n-     *         if a security manager has been installed and it does\n-     *         not permit access to the given remote address\n-     *\n@@ -641,13 +580,0 @@\n-     * <p>If there is a security manager, and the socket is not currently\n-     * connected to a remote address, this method first performs some\n-     * security checks. First, if {@code p.getAddress().isMulticastAddress()}\n-     * is true, this method calls the\n-     * security manager's {@code checkMulticast} method\n-     * with {@code p.getAddress()} as its argument.\n-     * If the evaluation of that expression is false,\n-     * this method instead calls the security manager's\n-     * {@code checkConnect} method with arguments\n-     * {@code p.getAddress().getHostAddress()} and\n-     * {@code p.getPort()}. Each call to a security manager method\n-     * could result in a SecurityException if the operation is not allowed.\n-     *\n@@ -657,3 +583,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkMulticast} or {@code checkConnect}\n-     *             method doesn't allow the send.\n@@ -673,2 +596,0 @@\n-     * @see        SecurityManager#checkMulticast(InetAddress)\n-     * @see        SecurityManager#checkConnect\n@@ -707,6 +628,0 @@\n-     * <p> If there is a security manager, and the socket is not currently\n-     * connected to a remote address, a packet cannot be received if the\n-     * security manager's {@code checkAccept} method does not allow it.\n-     * Datagrams that are not permitted by the security manager are silently\n-     * discarded.\n-     *\n@@ -740,6 +655,0 @@\n-     * <p>If there is a security manager, its\n-     * {@code checkConnect} method is first called\n-     * with the host address and {@code -1}\n-     * as its arguments to see if the operation is allowed.\n-     *\n-     * @see SecurityManager#checkConnect\n@@ -750,3 +659,1 @@\n-     *          address if either the socket is not bound, or\n-     *          the security manager {@code checkConnect}\n-     *          method does not allow the operation\n+     *          address if the socket is not bound\n@@ -1158,5 +1065,0 @@\n-     * <p>If there is a security manager, this method first calls\n-     * the security manager's {@code checkSetFactory} method\n-     * to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n-     *\n@@ -1167,2 +1069,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkSetFactory} method doesn't allow the operation.\n@@ -1170,1 +1070,0 @@\n-     * @see       SecurityManager#checkSetFactory\n@@ -1217,6 +1116,0 @@\n-     * @throws SecurityException if a security manager is set and if the socket\n-     *         option requires a security permission and if the caller does\n-     *         not have the required permission.\n-     *         {@link java.net.StandardSocketOptions StandardSocketOptions}\n-     *         do not require any security permission.\n-     *\n@@ -1249,6 +1142,0 @@\n-     * @throws SecurityException if a security manager is set and if the socket\n-     *         option requires a security permission and if the caller does\n-     *         not have the required permission.\n-     *         {@link java.net.StandardSocketOptions StandardSocketOptions}\n-     *         do not require any security permission.\n-     *\n@@ -1304,4 +1191,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls its {@code checkMulticast} method with the {@code mcastaddr}\n-     * argument as its argument.\n-     *\n@@ -1318,2 +1201,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkMulticast} method doesn't allow the join.\n@@ -1322,1 +1203,0 @@\n-     * @see    SecurityManager#checkMulticast(InetAddress)\n@@ -1335,4 +1215,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls its {@code checkMulticast} method with the\n-     * {@code mcastaddr} argument as its argument.\n-     *\n@@ -1362,2 +1238,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkMulticast} method doesn't allow the operation.\n@@ -1366,1 +1240,0 @@\n-     * @see    SecurityManager#checkMulticast(InetAddress)\n","filename":"src\/java.base\/share\/classes\/java\/net\/DatagramSocket.java","additions":1,"deletions":128,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -53,12 +53,0 @@\n- * <p>\n- * <b>Security permissions<\/b>\n- * <p>\n- * If a security manager is installed, and if a method is called which results in an\n- * attempt to open a connection, the caller must possess either:\n- * <ul><li>a \"connect\" {@link SocketPermission} to the host\/port combination of the\n- * destination URL or<\/li>\n- * <li>a {@link URLPermission} that permits this request.<\/li>\n- * <\/ul><p>\n- * If automatic redirection is enabled, and this request is redirected to another\n- * destination, then the caller must also have permission to connect to the\n- * redirected host\/URL.\n@@ -377,5 +365,0 @@\n-     * <p>\n-     * If there is a security manager, this method first calls\n-     * the security manager's {@code checkSetFactory} method\n-     * to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n@@ -385,4 +368,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkSetFactory} method doesn't\n-     *             allow the operation.\n-     * @see        SecurityManager#checkSetFactory\n@@ -463,3 +442,0 @@\n-     * @throws    SecurityException if a security manager is set and the\n-     *              method is \"TRACE\", but the \"allowHttpTrace\"\n-     *              NetPermission is not granted.\n","filename":"src\/java.base\/share\/classes\/java\/net\/HttpURLConnection.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -183,6 +183,2 @@\n- * <p> By default, when a security manager is installed, in order to\n- * protect against DNS spoofing attacks,\n- * the result of positive host name resolutions are\n- * cached forever. When a security manager is not installed, the default\n- * behavior is to cache entries for a finite (implementation dependent)\n- * period of time. The result of unsuccessful host\n+ * <p> The default behavior is to cache entries for a finite (implementation\n+ * dependent) period of time. The result of unsuccessful host\n@@ -739,10 +735,1 @@\n-     * <p>If there is a security manager, its\n-     * {@code checkConnect} method is first called\n-     * with the hostname and {@code -1}\n-     * as its arguments to see if the operation is allowed.\n-     * If the operation is not allowed, it will return\n-     * the textual representation of the IP address.\n-     *\n-     * @return  the host name for this IP address, or if the operation\n-     *    is not allowed by the security check, the textual\n-     *    representation of the IP address.\n+     * @return  the host name for this IP address\n@@ -751,1 +738,0 @@\n-     * @see SecurityManager#checkConnect\n@@ -764,8 +750,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls its {@code checkConnect} method\n-     * with the hostname and {@code -1}\n-     * as its arguments to see if the calling code is allowed to know\n-     * the hostname for this IP address, i.e., to connect to the host.\n-     * If the operation is not allowed, it will return\n-     * the textual representation of the IP address.\n-     *\n@@ -777,2 +755,0 @@\n-     *\n-     * @see SecurityManager#checkConnect\n@@ -798,8 +774,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls its {@code checkConnect} method\n-     * with the hostname and {@code -1}\n-     * as its arguments to see if the calling code is allowed to know\n-     * the hostname for this IP address, i.e., to connect to the host.\n-     * If the operation is not allowed, it will return\n-     * the textual representation of the IP address.\n-     *\n@@ -807,2 +775,1 @@\n-     *          If either the operation is not allowed by the security check\n-     *          or the system-wide resolver wasn't able to determine the\n+     *          If the system-wide resolver wasn't able to determine the\n@@ -812,2 +779,0 @@\n-     * @see SecurityManager#checkConnect\n-     *\n@@ -827,8 +792,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls its {@code checkConnect} method\n-     * with the hostname and {@code -1}\n-     * as its arguments to see if the calling code is allowed to know\n-     * the hostname for the given IP address, i.e., to connect to the host.\n-     * If the operation is not allowed, it will return\n-     * the textual representation of the IP address.\n-     *\n@@ -842,2 +799,0 @@\n-     *\n-     * @see SecurityManager#checkConnect\n@@ -1560,5 +1515,0 @@\n-     * <p> If there is a security manager, and {@code host} is not {@code null}\n-     * or {@code host.length() } is not equal to zero, the security manager's\n-     * {@code checkConnect} method is called with the hostname and {@code -1}\n-     * as its arguments to determine if the operation is allowed.\n-     *\n@@ -1570,2 +1520,0 @@\n-     * @throws     SecurityException if a security manager exists\n-     *             and its checkConnect method doesn't allow the operation\n@@ -1604,5 +1552,0 @@\n-     * <p> If there is a security manager, and {@code host} is not {@code null}\n-     * or {@code host.length() } is not equal to zero, the security manager's\n-     * {@code checkConnect} method is called with the hostname and {@code -1}\n-     * as its arguments to determine if the operation is allowed.\n-     *\n@@ -1615,2 +1558,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *               {@code checkConnect} method doesn't allow the operation.\n@@ -1620,1 +1561,0 @@\n-     * @see SecurityManager#checkConnect\n@@ -1877,7 +1817,0 @@\n-     * <p>If there is a security manager, its\n-     * {@code checkConnect} method is called\n-     * with the local host name and {@code -1}\n-     * as its arguments to see if the operation is allowed.\n-     * If the operation is not allowed, an InetAddress representing\n-     * the loopback address is returned.\n-     *\n@@ -1889,1 +1822,0 @@\n-     * @see SecurityManager#checkConnect\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetAddress.java","additions":4,"deletions":72,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -207,4 +207,0 @@\n-     * <p>\n-     * If there is a security manager, its {@code checkConnect} method\n-     * is called with the host name as its argument to check the permission\n-     * to resolve it. This could result in a SecurityException.\n@@ -220,3 +216,0 @@\n-     * @throws SecurityException if a security manager is present and\n-     *                           permission to resolve the host name is\n-     *                           denied.\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetSocketAddress.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -134,4 +134,0 @@\n-     * If there is a security manager, its {@code checkListen} method is first\n-     * called with 0 as its argument to ensure the operation is allowed. This\n-     * could result in a SecurityException.\n-     * <p>\n@@ -144,3 +140,0 @@\n-     * @throws    SecurityException if a security manager exists and its\n-     * {@code checkListen} method doesn't allow the operation.\n-     * @see SecurityManager#checkListen\n@@ -159,5 +152,0 @@\n-     * <p>If there is a security manager,\n-     * its {@code checkListen} method is first called\n-     * with the {@code port} argument\n-     * as its argument to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n@@ -172,2 +160,0 @@\n-     * @throws    SecurityException  if a security manager exists and its\n-     *            {@code checkListen} method doesn't allow the operation.\n@@ -177,1 +163,0 @@\n-     * @see       SecurityManager#checkListen\n@@ -189,5 +174,0 @@\n-     *\n-     * <p>If there is a security manager,\n-     * its {@code checkListen} method is first called\n-     * with the SocketAddress port as its argument to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n@@ -203,3 +183,0 @@\n-     * @throws   SecurityException  if a security manager exists and its\n-     *           {@code checkListen} method doesn't allow the operation.\n-     * @see      SecurityManager#checkListen\n@@ -302,4 +279,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls its {@code checkMulticast} method with the\n-     * {@code mcastaddr} argument as its argument.\n-     *\n@@ -315,2 +288,0 @@\n-     * @throws     SecurityException if a security manager exists and its\n-     *             {@code checkMulticast} method doesn't allow the join.\n@@ -320,1 +291,0 @@\n-     * @see        SecurityManager#checkMulticast(InetAddress)\n@@ -331,4 +301,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls its {@code checkMulticast} method with the\n-     * {@code mcastaddr} argument as its argument.\n-     *\n@@ -343,2 +309,0 @@\n-     * @throws     SecurityException if a security manager exists and its\n-     *             {@code checkMulticast} method doesn't allow the operation.\n@@ -348,1 +312,0 @@\n-     * @see        SecurityManager#checkMulticast(InetAddress)\n@@ -358,1 +321,0 @@\n-     * @throws SecurityException {@inheritDoc}\n@@ -360,1 +322,0 @@\n-     * @see    SecurityManager#checkMulticast(InetAddress)\n@@ -377,1 +338,0 @@\n-     * @throws SecurityException {@inheritDoc}\n@@ -379,1 +339,0 @@\n-     * @see    SecurityManager#checkMulticast(InetAddress)\n@@ -520,12 +479,0 @@\n-     * <p>If there is a security manager, this method first performs some\n-     * security checks. First, if {@code p.getAddress().isMulticastAddress()}\n-     * is true, this method calls the\n-     * security manager's {@code checkMulticast} method\n-     * with {@code p.getAddress()} and {@code ttl} as its arguments.\n-     * If the evaluation of that expression is false,\n-     * this method instead calls the security manager's\n-     * {@code checkConnect} method with arguments\n-     * {@code p.getAddress().getHostAddress()} and\n-     * {@code p.getPort()}. Each call to a security manager method\n-     * could result in a SecurityException if the operation is not allowed.\n-     *\n@@ -540,3 +487,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkMulticast} or {@code checkConnect}\n-     *             method doesn't allow the send.\n@@ -562,2 +506,0 @@\n-     * @see SecurityManager#checkMulticast(java.net.InetAddress, byte)\n-     * @see SecurityManager#checkConnect\n","filename":"src\/java.base\/share\/classes\/java\/net\/MulticastSocket.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import java.util.Enumeration;\n-import java.util.Hashtable;\n-import java.util.StringTokenizer;\n@@ -39,5 +36,5 @@\n- * The target name is the name of the network permission (see below). The naming\n- * convention follows the  hierarchical property naming convention.\n- * Also, an asterisk\n- * may appear at the end of the name, following a \".\", or by itself, to\n- * signify a wildcard match. For example: \"foo.*\" and \"*\" signify a wildcard\n+ * The target name is the name of the network permission. The naming convention\n+ * follows the hierarchical property naming convention, typically the reverse\n+ * domain name notation, to avoid name clashes.\n+ * An asterisk may appear at the end of the name, following a \".\", or by itself,\n+ * to signify a wildcard match. For example: \"foo.*\" and \"*\" signify a wildcard\n@@ -45,134 +42,0 @@\n- * <P>\n- * The following table lists the standard NetPermission target names,\n- * and for each provides a description of what the permission allows\n- * and a discussion of the risks of granting code the permission.\n- *\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">Permission target name, what the permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- * <tbody>\n- * <tr>\n- *   <th scope=\"row\">allowHttpTrace<\/th>\n- *   <td>The ability to use the HTTP TRACE method in HttpURLConnection.<\/td>\n- *   <td>Malicious code using HTTP TRACE could get access to security sensitive\n- *   information in the HTTP headers (such as cookies) that it might not\n- *   otherwise have access to.<\/td>\n- *   <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">accessUnixDomainSocket<\/th>\n- *   <td>The ability to accept, bind, connect or get the local address\n- *   of a <i>Unix Domain<\/i> socket.\n- *   <\/td>\n- *   <td>Malicious code could connect to local processes using Unix domain sockets\n- *    or impersonate local processes, by binding to the same pathnames (assuming they\n- *    have the required Operating System permissions.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getCookieHandler<\/th>\n- *   <td>The ability to get the cookie handler that processes highly\n- *   security sensitive cookie information for an Http session.<\/td>\n- *   <td>Malicious code can get a cookie handler to obtain access to\n- *   highly security sensitive cookie information. Some web servers\n- *   use cookies to save user private information such as access\n- *   control information, or to track user browsing habit.<\/td>\n- *   <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getNetworkInformation<\/th>\n- *   <td>The ability to retrieve all information about local network interfaces.<\/td>\n- *   <td>Malicious code can read information about network hardware such as\n- *   MAC addresses, which could be used to construct local IPv6 addresses.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getProxySelector<\/th>\n- *   <td>The ability to get the proxy selector used to make decisions\n- *   on which proxies to use when making network connections.<\/td>\n- *   <td>Malicious code can get a ProxySelector to discover proxy\n- *   hosts and ports on internal networks, which could then become\n- *   targets for attack.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getResponseCache<\/th>\n- *   <td>The ability to get the response cache that provides\n- *   access to a local response cache.<\/td>\n- *   <td>Malicious code getting access to the local response cache\n- *   could access security sensitive information.<\/td>\n- *   <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">requestPasswordAuthentication<\/th>\n- *   <td>The ability\n- *   to ask the authenticator registered with the system for\n- *   a password<\/td>\n- *   <td>Malicious code may steal this password.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setCookieHandler<\/th>\n- *   <td>The ability to set the cookie handler that processes highly\n- *   security sensitive cookie information for an Http session.<\/td>\n- *   <td>Malicious code can set a cookie handler to obtain access to\n- *   highly security sensitive cookie information. Some web servers\n- *   use cookies to save user private information such as access\n- *   control information, or to track user browsing habit.<\/td>\n- *   <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setDefaultAuthenticator<\/th>\n- *   <td>The ability to set the\n- *   way authentication information is retrieved when\n- *   a proxy or HTTP server asks for authentication<\/td>\n- *   <td>Malicious\n- *   code can set an authenticator that monitors and steals user\n- *   authentication input as it retrieves the input from the user.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setProxySelector<\/th>\n- *   <td>The ability to set the proxy selector used to make decisions\n- *   on which proxies to use when making network connections.<\/td>\n- *   <td>Malicious code can set a ProxySelector that directs network\n- *   traffic to an arbitrary network host.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setResponseCache<\/th>\n- *   <td>The ability to set the response cache that provides access to\n- *   a local response cache.<\/td>\n- *   <td>Malicious code getting access to the local response cache\n- *   could access security sensitive information, or create false\n- *   entries in the response cache.<\/td>\n- *   <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setSocketImpl<\/th>\n- *   <td>The ability to create a sub-class of Socket or ServerSocket with a\n- *   user specified SocketImpl.<\/td>\n- *   <td>Malicious user-defined SocketImpls can change the behavior of\n- *   Socket and ServerSocket in surprising ways, by virtue of their\n- *   ability to access the protected fields of SocketImpl.<\/td>\n- *   <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">specifyStreamHandler<\/th>\n- *   <td>The ability\n- *   to specify a stream handler when constructing a URL<\/td>\n- *   <td>Malicious code may create a URL with resources that it would\n- *   normally not have access to (like file:\/foo\/fum\/), specifying a\n- *   stream handler that gets the actual bytes from someplace it does\n- *   have access to. Thus it might be able to trick the system into\n- *   creating a ProtectionDomain\/CodeSource for a class even though\n- *   that class really didn't come from that location.<\/td>\n- * <\/tr>\n- * <\/tbody>\n- * <\/table>\n@@ -180,3 +43,3 @@\n- * @implNote\n- * Implementations may define additional target names, but should use naming\n- * conventions such as reverse domain name notation to avoid name clashes.\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.base\/share\/classes\/java\/net\/NetPermission.java","additions":9,"deletions":146,"binary":false,"changes":155,"status":"modified"},{"patch":"@@ -123,7 +123,0 @@\n-     * <p>\n-     * If there is a security manager, its {@code checkConnect}\n-     * method is called for each InetAddress. Only InetAddresses where\n-     * the {@code checkConnect} doesn't throw a SecurityException\n-     * will be returned in the Enumeration. However, if the caller has the\n-     * {@link NetPermission}(\"getNetworkInformation\") permission, then all\n-     * InetAddresses are returned.\n@@ -147,7 +140,0 @@\n-     * <p>\n-     * If there is a security manager, its {@code checkConnect}\n-     * method is called for each InetAddress. Only InetAddresses where\n-     * the {@code checkConnect} doesn't throw a SecurityException will be\n-     * returned in the Stream. However, if the caller has the\n-     * {@link NetPermission}(\"getNetworkInformation\") permission, then all\n-     * InetAddresses are returned.\n@@ -196,5 +182,0 @@\n-     * <p>\n-     * If there is a security manager, its {@code checkConnect}\n-     * method is called with the InetAddress for each InterfaceAddress.\n-     * Only InterfaceAddresses where the {@code checkConnect} doesn't throw\n-     * a SecurityException will be returned in the List.\n@@ -570,2 +551,0 @@\n-     * If a security manager is set, then the caller must have\n-     * the permission {@link NetPermission}(\"getNetworkInformation\").\n@@ -574,3 +553,1 @@\n-     *          the address doesn't exist, is not accessible or a security\n-     *          manager is set and the caller does not have the permission\n-     *          NetPermission(\"getNetworkInformation\")\n+     *          the address doesn't exist or is not accessible\n","filename":"src\/java.base\/share\/classes\/java\/net\/NetworkInterface.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,3 +92,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link NetPermission}{@code (\"getProxySelector\")}\n@@ -116,4 +113,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link NetPermission}{@code (\"setProxySelector\")}\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/net\/ProxySelector.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,4 +82,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     * {@link NetPermission}{@code (\"getResponseCache\")}\n-     *\n@@ -107,4 +103,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     * {@link NetPermission}{@code (\"setResponseCache\")}\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/net\/ResponseCache.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -106,3 +106,0 @@\n-     * @throws     SecurityException if a security manager is set and\n-     *             its {@code checkPermission} method doesn't allow\n-     *             {@code NetPermission(\"setSocketImpl\")}.\n@@ -148,7 +145,0 @@\n-     * <p>\n-     * If there is a security manager,\n-     * its {@code checkListen} method is called\n-     * with the {@code port} argument\n-     * as its argument to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n-     *\n@@ -160,3 +150,0 @@\n-     * @throws     SecurityException\n-     * if a security manager exists and its {@code checkListen}\n-     * method doesn't allow the operation.\n@@ -166,2 +153,0 @@\n-     *\n-     * @see        SecurityManager#checkListen\n@@ -191,6 +176,0 @@\n-     * <p>\n-     * If there is a security manager,\n-     * its {@code checkListen} method is called\n-     * with the {@code port} argument\n-     * as its argument to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n@@ -211,3 +190,0 @@\n-     * @throws     SecurityException\n-     * if a security manager exists and its {@code checkListen}\n-     * method doesn't allow the operation.\n@@ -217,2 +193,0 @@\n-     *\n-     * @see        SecurityManager#checkListen\n@@ -237,6 +211,0 @@\n-     * <P>If there is a security manager, this method\n-     * calls its {@code checkListen} method\n-     * with the {@code port} argument\n-     * as its argument to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n-     *\n@@ -256,3 +224,0 @@\n-     * @throws  SecurityException if a security manager exists and\n-     * its {@code checkListen} method doesn't allow the operation.\n-     *\n@@ -263,2 +228,0 @@\n-     *\n-     * @see SecurityManager#checkListen\n@@ -333,2 +296,0 @@\n-     * @throws  SecurityException       if a {@code SecurityManager} is present and\n-     * its {@code checkListen} method doesn't allow the operation.\n@@ -362,2 +323,0 @@\n-     * @throws  SecurityException       if a {@code SecurityManager} is present and\n-     * its {@code checkListen} method doesn't allow the operation.\n@@ -400,5 +359,0 @@\n-     * <p>\n-     * If there is a security manager set, its {@code checkConnect} method is\n-     * called with the local address and {@code -1} as its arguments to see\n-     * if the operation is allowed. If the operation is not allowed,\n-     * the {@link InetAddress#getLoopbackAddress loopback} address is returned.\n@@ -407,1 +361,0 @@\n-     *          or the loopback address if denied by the security manager,\n@@ -409,2 +362,0 @@\n-     *\n-     * @see SecurityManager#checkConnect\n@@ -461,7 +412,0 @@\n-     * <p>\n-     * If there is a security manager set, its {@code checkConnect} method is\n-     * called with the local address and {@code -1} as its arguments to see\n-     * if the operation is allowed. If the operation is not allowed,\n-     * a {@code SocketAddress} representing the\n-     * {@link InetAddress#getLoopbackAddress loopback} address and the local\n-     * port to which the socket is bound is returned.\n@@ -470,3 +414,1 @@\n-     *         this socket, or a {@code SocketAddress} representing the\n-     *         loopback address if denied by the security manager,\n-     *         or {@code null} if the socket is not bound yet.\n+     *         this socket, or {@code null} if the socket is not bound yet.\n@@ -477,1 +419,0 @@\n-     * @see SecurityManager#checkConnect\n@@ -506,8 +447,0 @@\n-     * <p> A new Socket {@code s} is created and, if there\n-     * is a security manager,\n-     * the security manager's {@code checkAccept} method is called\n-     * with {@code s.getInetAddress().getHostAddress()} and\n-     * {@code s.getPort()}\n-     * as its arguments to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n-     *\n@@ -522,2 +455,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkAccept} method doesn't allow the operation.\n@@ -532,1 +463,0 @@\n-     * @see SecurityManager#checkAccept\n@@ -684,2 +614,1 @@\n-     * the peer. The SocketImpl and connection are closed if the connection is\n-     * denied by the security manager.\n+     * the peer.\n@@ -687,1 +616,0 @@\n-     * @throws SecurityException if the security manager's checkAccept method fails\n@@ -907,8 +835,0 @@\n-     * <p>\n-     * If there is a security manager set, and this socket is\n-     * {@linkplain #isBound bound}, its {@code checkConnect} method is\n-     * called with the local address and {@code -1} as its arguments to see\n-     * if the operation is allowed. If the operation is not allowed,\n-     * an {@code InetAddress} representing the\n-     * {@link InetAddress#getLoopbackAddress loopback} address is returned as\n-     * the implementation address.\n@@ -946,5 +866,0 @@\n-     * <p>\n-     * If there is a security manager, this method first calls\n-     * the security manager's {@code checkSetFactory} method\n-     * to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n@@ -956,2 +871,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkSetFactory} method doesn't allow the operation.\n@@ -959,1 +872,0 @@\n-     * @see        SecurityManager#checkSetFactory\n@@ -1115,6 +1027,0 @@\n-     * @throws SecurityException if a security manager is set and if the socket\n-     *         option requires a security permission and if the caller does\n-     *         not have the required permission.\n-     *         {@link java.net.StandardSocketOptions StandardSocketOptions}\n-     *         do not require any security permission.\n-     *\n@@ -1148,6 +1054,0 @@\n-     * @throws SecurityException if a security manager is set and if the socket\n-     *         option requires a security permission and if the caller does\n-     *         not have the required permission.\n-     *         {@link java.net.StandardSocketOptions StandardSocketOptions}\n-     *         do not require any security permission.\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/net\/ServerSocket.java","additions":2,"deletions":102,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -188,4 +188,0 @@\n-     * If there is a security manager, its {@code checkConnect} method\n-     * is called with the proxy host address and port number\n-     * as its arguments. This could result in a SecurityException.\n-     * <P>\n@@ -204,3 +200,0 @@\n-     * @throws SecurityException if a security manager is present and\n-     *                           permission to connect to the proxy is\n-     *                           denied.\n@@ -266,3 +259,0 @@\n-     * @throws SecurityException if {@code impl} is non-null and a security manager is set\n-     * and its {@code checkPermission} method doesn't allow {@code NetPermission(\"setSocketImpl\")}.\n-     *\n@@ -301,5 +291,0 @@\n-     * <p>\n-     * If there is a security manager, its\n-     * {@code checkConnect} method is called\n-     * with the host address and {@code port}\n-     * as its arguments. This could result in a SecurityException.\n@@ -314,2 +299,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkConnect} method doesn't allow the operation.\n@@ -319,1 +302,0 @@\n-     * @see        SecurityManager#checkConnect\n@@ -339,5 +321,0 @@\n-     * <p>\n-     * If there is a security manager, its\n-     * {@code checkConnect} method is called\n-     * with the host address and {@code port}\n-     * as its arguments. This could result in a SecurityException.\n@@ -348,2 +325,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkConnect} method doesn't allow the operation.\n@@ -354,1 +329,0 @@\n-     * @see        SecurityManager#checkConnect\n@@ -375,5 +349,0 @@\n-     * <p>\n-     * If there is a security manager, its\n-     * {@code checkConnect} method is called\n-     * with the host address and {@code port}\n-     * as its arguments. This could result in a SecurityException.\n@@ -388,4 +357,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkConnect} method doesn't allow the connection\n-     *             to the destination, or if its {@code checkListen} method\n-     *             doesn't allow the bind to the local port.\n@@ -395,1 +360,0 @@\n-     * @see        SecurityManager#checkConnect\n@@ -417,5 +381,0 @@\n-     * <p>\n-     * If there is a security manager, its\n-     * {@code checkConnect} method is called\n-     * with the host address and {@code port}\n-     * as its arguments. This could result in a SecurityException.\n@@ -430,4 +389,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkConnect} method doesn't allow the connection\n-     *             to the destination, or if its {@code checkListen} method\n-     *             doesn't allow the bind to the local port.\n@@ -438,1 +393,0 @@\n-     * @see        SecurityManager#checkConnect\n@@ -468,5 +422,0 @@\n-     * If there is a security manager, its\n-     * {@code checkConnect} method is called\n-     * with the host address and {@code port}\n-     * as its arguments. This could result in a SecurityException.\n-     * <p>\n@@ -480,2 +429,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkConnect} method doesn't allow the operation.\n@@ -485,1 +432,0 @@\n-     * @see        SecurityManager#checkConnect\n@@ -509,5 +455,0 @@\n-     *\n-     * <p>If there is a security manager, its\n-     * {@code checkConnect} method is called\n-     * with {@code host.getHostAddress()} and {@code port}\n-     * as its arguments. This could result in a SecurityException.\n@@ -522,2 +463,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkConnect} method doesn't allow the operation.\n@@ -528,1 +467,0 @@\n-     * @see        SecurityManager#checkConnect\n@@ -786,3 +724,0 @@\n-     * @throws  SecurityException  if a security manager exists and its\n-     *          {@code checkListen} method doesn't allow the bind\n-     *          to the local port.\n@@ -851,5 +786,0 @@\n-     * <p>\n-     * If there is a security manager set, its {@code checkConnect} method is\n-     * called with the local address and {@code -1} as its arguments to see\n-     * if the operation is allowed. If the operation is not allowed,\n-     * the {@link InetAddress#getLoopbackAddress loopback} address is returned.\n@@ -857,2 +787,1 @@\n-     * @return the local address to which the socket is bound,\n-     *         the loopback address if denied by the security manager, or\n+     * @return the local address to which the socket is bound, or\n@@ -861,2 +790,0 @@\n-     *\n-     * @see SecurityManager#checkConnect\n@@ -960,7 +887,0 @@\n-     * <p>\n-     * If there is a security manager set, its {@code checkConnect} method is\n-     * called with the local address and {@code -1} as its arguments to see\n-     * if the operation is allowed. If the operation is not allowed,\n-     * a {@code SocketAddress} representing the\n-     * {@link InetAddress#getLoopbackAddress loopback} address and the local\n-     * port to which this socket is bound is returned.\n@@ -969,3 +889,1 @@\n-     *         this socket, or a {@code SocketAddress} representing the\n-     *         loopback address if denied by the security manager, or\n-     *         {@code null} if the socket is not bound yet.\n+     *         this socket, or {@code null} if the socket is not bound yet.\n@@ -976,1 +894,0 @@\n-     * @see SecurityManager#checkConnect\n@@ -1918,4 +1835,0 @@\n-     * <p>If there is a security manager, this method first calls\n-     * the security manager's {@code checkSetFactory} method\n-     * to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n@@ -1927,2 +1840,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkSetFactory} method doesn't allow the operation.\n@@ -1930,1 +1841,0 @@\n-     * @see        SecurityManager#checkSetFactory\n@@ -2021,6 +1931,0 @@\n-     * @throws SecurityException if a security manager is set and if the socket\n-     *         option requires a security permission and if the caller does\n-     *         not have the required permission.\n-     *         {@link java.net.StandardSocketOptions StandardSocketOptions}\n-     *         do not require any security permission.\n-     *\n@@ -2052,6 +1956,0 @@\n-     * @throws SecurityException if a security manager is set and if the socket\n-     *         option requires a security permission and if the caller does\n-     *         not have the required permission.\n-     *         {@link java.net.StandardSocketOptions StandardSocketOptions}\n-     *         do not require any security permission.\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":2,"deletions":104,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -114,2 +114,0 @@\n- * <p>As an example of the creation and meaning of SocketPermissions,\n- * note that if the following permission:\n@@ -117,21 +115,3 @@\n- * <pre>\n- *   p1 = new SocketPermission(\"foo.example.com:7777\", \"connect,accept\");\n- * <\/pre>\n- *\n- * is granted to some code, it allows that code to connect to port 7777 on\n- * {@code foo.example.com}, and to accept connections on that port.\n- *\n- * <p>Similarly, if the following permission:\n- *\n- * <pre>\n- *   p2 = new SocketPermission(\"localhost:1024-\", \"accept,connect,listen\");\n- * <\/pre>\n- *\n- * is granted to some code, it allows that code to\n- * accept connections on, connect to, or listen on any port between\n- * 1024 and 65535 on the local host.\n- *\n- * <p>Note: Granting code permission to accept or make connections to remote\n- * hosts may be dangerous because malevolent code can then more easily\n- * transfer and share confidential data among parties who may not\n- * otherwise have access to the data.\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketPermission.java","additions":3,"deletions":23,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -462,6 +462,0 @@\n-     * <p>If the handler is not null and there is a security manager,\n-     * the security manager's {@code checkPermission}\n-     * method is called with a\n-     * {@code NetPermission(\"specifyStreamHandler\")} permission.\n-     * This may result in a SecurityException.\n-     *\n@@ -479,4 +473,0 @@\n-     * @throws     SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        specifying a stream handler explicitly.\n@@ -489,2 +479,0 @@\n-     * @see        SecurityManager#checkPermission\n-     * @see        java.net.NetPermission\n@@ -676,4 +664,0 @@\n-     * @throws     SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        specifying a stream handler.\n@@ -850,5 +834,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        specifying a stream handler\n-     *\n@@ -1275,3 +1254,0 @@\n-     * @throws     SecurityException if a security manager is present\n-     *             and the caller doesn't have permission to connect\n-     *             to the proxy.\n@@ -1374,5 +1350,0 @@\n-     * <p> If there is a security manager, this method first calls\n-     * the security manager's {@code checkSetFactory} method\n-     * to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n-     *\n@@ -1381,3 +1352,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkSetFactory} method doesn't allow\n-     *             the operation.\n@@ -1387,1 +1355,0 @@\n-     * @see        SecurityManager#checkSetFactory\n","filename":"src\/java.base\/share\/classes\/java\/net\/URL.java","additions":1,"deletions":34,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,7 +71,0 @@\n- * <p>\n- * The AccessControlContext of the thread that created the instance of\n- * URLClassLoader will be used when subsequently loading classes and\n- * resources.\n- * <p>\n- * The classes that are loaded are by default granted permission only to\n- * access the URLs specified when the URLClassLoader was created.\n@@ -99,4 +92,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls the security manager's {@code checkCreateClassLoader} method\n-     * to ensure creation of a class loader is allowed.\n-     *\n@@ -105,3 +94,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkCreateClassLoader} method doesn't allow\n-     *             creation of a class loader.\n@@ -110,1 +96,0 @@\n-     * @see SecurityManager#checkCreateClassLoader\n@@ -135,4 +120,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls the security manager's {@code checkCreateClassLoader} method\n-     * to ensure creation of a class loader is allowed.\n-     *\n@@ -141,3 +122,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkCreateClassLoader} method doesn't allow\n-     *             creation of a class loader.\n@@ -146,1 +124,0 @@\n-     * @see SecurityManager#checkCreateClassLoader\n@@ -168,4 +145,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls the security manager's {@code checkCreateClassLoader} method\n-     * to ensure creation of a class loader is allowed.\n-     *\n@@ -176,3 +149,0 @@\n-     * @throws SecurityException  if a security manager exists and its\n-     *         {@code checkCreateClassLoader} method doesn't allow\n-     *         creation of a class loader.\n@@ -181,1 +151,0 @@\n-     * @see SecurityManager#checkCreateClassLoader\n@@ -208,4 +177,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@link SecurityManager#checkCreateClassLoader()} method doesn't\n-     *         allow creation of a class loader.\n-     *\n@@ -239,4 +204,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkCreateClassLoader} method doesn't allow\n-     *         creation of a class loader.\n-     *\n@@ -338,3 +299,0 @@\n-    * @throws    SecurityException if a security manager is set, and it denies\n-    *   {@link RuntimePermission}{@code (\"closeClassLoader\")}\n-    *\n@@ -692,1 +650,1 @@\n-     * If the protocol of this URL is \"jar\", then the permission granted\n+     * If the protocol of this URL is \"jar\", then the permission returned\n@@ -698,1 +656,1 @@\n-     * may be granted. If the protocol is \"file\"\n+     * may be returned. If the protocol is \"file\"\n@@ -700,2 +658,2 @@\n-     * file is granted. If protocol is \"file\" and the path is\n-     * a directory, permission is granted to read all files\n+     * file is returned. If protocol is \"file\" and the path is\n+     * a directory, then permission is returned to read all files\n@@ -706,1 +664,1 @@\n-     * to connect to and accept connections from the URL's host is granted.\n+     * to connect to and accept connections from the URL's host is returned.\n@@ -709,1 +667,1 @@\n-     * @return the permissions granted to the codesource\n+     * @return the permissions for the codesource\n@@ -781,5 +739,1 @@\n-     * URLs and parent class loader. If a security manager is\n-     * installed, the {@code loadClass} method of the URLClassLoader\n-     * returned by this method will invoke the\n-     * {@code SecurityManager.checkPackageAccess} method before\n-     * loading the class.\n+     * URLs and parent class loader.\n@@ -811,5 +765,1 @@\n-     * URLs and default parent class loader. If a security manager is\n-     * installed, the {@code loadClass} method of the URLClassLoader\n-     * returned by this method will invoke the\n-     * {@code SecurityManager.checkPackageAccess} before\n-     * loading the class.\n+     * URLs and default parent class loader.\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLClassLoader.java","additions":9,"deletions":59,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -325,5 +325,0 @@\n-     * <p>\n-     * If there is a security manager, this method first calls\n-     * the security manager's {@code checkSetFactory} method\n-     * to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n@@ -332,3 +327,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkSetFactory} method doesn't allow the operation.\n-     * @see        SecurityManager#checkSetFactory\n@@ -1286,5 +1278,0 @@\n-     * <p>\n-     * If there is a security manager, this method first calls\n-     * the security manager's {@code checkSetFactory} method\n-     * to ensure the operation is allowed.\n-     * This could result in a SecurityException.\n@@ -1294,2 +1281,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkSetFactory} method doesn't allow the operation.\n@@ -1298,1 +1283,0 @@\n-     * @see        SecurityManager#checkSetFactory\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLConnection.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -145,6 +145,5 @@\n- * <p>\n- * Note. Depending on the context of use, some request methods and headers may be permitted\n- * at all times, and others may not be permitted at any time. For example, the\n- * HTTP protocol handler might disallow certain headers such as Content-Length\n- * from being set by application code, regardless of whether the security policy\n- * in force, permits it.\n+ *\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLPermission.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,3 +113,0 @@\n-     * @throws SecurityException if a security manager is present and its\n-     *                           {@code checkPermission} method doesn't allow the\n-     *                           {@code RuntimePermission(\"inetAddressResolverProvider\")}.\n","filename":"src\/java.base\/share\/classes\/java\/net\/spi\/InetAddressResolverProvider.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,4 +63,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"setFactory\")}.\n","filename":"src\/java.base\/share\/classes\/java\/net\/spi\/URLStreamHandlerProvider.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -243,8 +243,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is installed and it denies an\n-     *          unspecified permission required by the implementation.\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String)} method is invoked to check\n-     *          read access if the file is opened for reading. The {@link\n-     *          SecurityManager#checkWrite(String)} method is invoked to check\n-     *          write access if the file is opened for writing\n@@ -304,8 +296,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is installed and it denies an\n-     *          unspecified permission required by the implementation.\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String)} method is invoked to check\n-     *          read access if the file is opened for reading. The {@link\n-     *          SecurityManager#checkWrite(String)} method is invoked to check\n-     *          write access if the file is opened for writing\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/AsynchronousFileChannel.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,1 +191,0 @@\n-     * @throws  SecurityException                   {@inheritDoc}\n@@ -228,3 +227,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and its {@link\n-     *          SecurityManager#checkListen checkListen} method denies the operation\n@@ -268,8 +264,0 @@\n-     * <p> If a security manager has been installed then it verifies that the\n-     * address and port number of the connection's remote endpoint are permitted\n-     * by the security manager's {@link SecurityManager#checkAccept checkAccept}\n-     * method. The permission check is performed with privileges that are restricted\n-     * by the calling context of this method. If the permission check fails then\n-     * the connection is closed and the operation completes with a {@link\n-     * SecurityException}.\n-     *\n@@ -315,7 +303,0 @@\n-     * <p>\n-     * If there is a security manager set, its {@code checkConnect} method is\n-     * called with the local address and {@code -1} as its arguments to see\n-     * if the operation is allowed. If the operation is not allowed,\n-     * a {@code SocketAddress} representing the\n-     * {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n-     * local port of the channel's socket is returned.\n@@ -323,4 +304,2 @@\n-     * @return  The {@code SocketAddress} that the socket is bound to, or the\n-     *          {@code SocketAddress} representing the loopback address if\n-     *          denied by the security manager, or {@code null} if the\n-     *          channel's socket is not bound\n+     * @return  The {@code SocketAddress} that the socket is bound to; {@code null}\n+     *          if the channel's socket is not bound\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/AsynchronousServerSocketChannel.java","additions":3,"deletions":24,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -208,4 +208,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and its\n-     *          {@link SecurityManager#checkListen checkListen} method denies\n-     *          the operation\n@@ -298,6 +294,0 @@\n-     * <p> This method performs exactly the same security checks as the {@link\n-     * java.net.Socket} class.  That is, if a security manager has been\n-     * installed then this method verifies that its {@link\n-     * java.lang.SecurityManager#checkConnect checkConnect} method permits\n-     * connecting to the address and port number of the given remote endpoint.\n-     *\n@@ -323,3 +313,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed\n-     *          and it does not permit access to the given remote endpoint\n@@ -356,3 +343,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed\n-     *          and it does not permit access to the given remote endpoint\n@@ -677,12 +661,3 @@\n-     * <p>\n-     * If there is a security manager set, its {@code checkConnect} method is\n-     * called with the local address and {@code -1} as its arguments to see\n-     * if the operation is allowed. If the operation is not allowed,\n-     * a {@code SocketAddress} representing the\n-     * {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n-     * local port of the channel's socket is returned.\n-     *\n-     * @return  The {@code SocketAddress} that the socket is bound to, or the\n-     *          {@code SocketAddress} representing the loopback address if\n-     *          denied by the security manager, or {@code null} if the\n-     *          channel's socket is not bound\n+     *\n+     * @return  The {@code SocketAddress} that the socket is bound to; {@code null}\n+     *          if the channel's socket is not bound\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/AsynchronousSocketChannel.java","additions":4,"deletions":29,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,5 +47,4 @@\n- * avoid the overhead of the security checks are otherwise performed as part of\n- * every send and receive operation.  A datagram channel must be connected in\n- * order to use the {@link #read(java.nio.ByteBuffer) read} and {@link\n- * #write(java.nio.ByteBuffer) write} methods, since those methods do not\n- * accept or return socket addresses.\n+ * avoid the overhead of checks performed as part of every send and receive operation.\n+ * A datagram channel must be connected in order to use the {@link\n+ * #read(java.nio.ByteBuffer) read} and {@link #write(java.nio.ByteBuffer) write}\n+ * methods, since those methods do not accept or return socket addresses.\n@@ -223,4 +222,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and its {@link\n-     *          SecurityManager#checkListen checkListen} method denies the\n-     *          operation\n@@ -271,12 +266,0 @@\n-     * <p> This method performs exactly the same security checks as the {@link\n-     * java.net.DatagramSocket#connect connect} method of the {@link\n-     * java.net.DatagramSocket} class.  That is, if a security manager has been\n-     * installed then this method verifies that its {@link\n-     * java.lang.SecurityManager#checkAccept checkAccept} and {@link\n-     * java.lang.SecurityManager#checkConnect checkConnect} methods permit\n-     * datagrams to be received from and sent to, respectively, the given\n-     * remote address. Once connected, no further security checks are performed\n-     * for datagrams received from, or sent to, the given remote address. Care\n-     * should be taken to ensure that a connected datagram channel is not shared\n-     * with untrusted code.\n-     *\n@@ -318,6 +301,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it does not\n-     *          permit access to the given remote address, or if unbound,\n-     *          the security manager {@link SecurityManager#checkListen checkListen}\n-     *          method denies the operation\n-     *\n@@ -334,2 +311,1 @@\n-     * from, and sends datagrams to, any remote address so long as the security\n-     * manager, if installed, permits it.\n+     * from, and sends datagrams to, any remote address.\n@@ -387,11 +363,0 @@\n-     * <p> This method performs exactly the same security checks as the {@link\n-     * java.net.DatagramSocket#receive receive} method of the {@link\n-     * java.net.DatagramSocket} class.  That is, if the socket is not connected\n-     * to a specific remote address and a security manager has been installed\n-     * then for each datagram received this method verifies that the source's\n-     * address and port number are permitted by the security manager's {@link\n-     * java.lang.SecurityManager#checkAccept checkAccept} method. Datagrams\n-     * that are not permitted by the security manager are silently discarded.\n-     * The overhead of this security check can be avoided by first connecting\n-     * the socket via the {@link #connect connect} method.\n-     *\n@@ -429,5 +394,0 @@\n-     * @throws  SecurityException\n-     *          If unbound, and a security manager has been installed and\n-     *          its {@link SecurityManager#checkListen checkListen} method\n-     *          denies the operation\n-     *\n@@ -451,10 +411,0 @@\n-     * <p> This method performs exactly the same security checks as the {@link\n-     * java.net.DatagramSocket#send send} method of the {@link\n-     * java.net.DatagramSocket} class.  That is, if the socket is not connected\n-     * to a specific remote address and a security manager has been installed\n-     * then for each datagram sent this method verifies that the target address\n-     * and port number are permitted by the security manager's {@link\n-     * java.lang.SecurityManager#checkConnect checkConnect} method.  The\n-     * overhead of this security check can be avoided by first connecting the\n-     * socket via the {@link #connect connect} method.\n-     *\n@@ -504,6 +454,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it does not permit\n-     *          datagrams to be sent to the given address, or if unbound, and\n-     *          the security manager's {@link SecurityManager#checkListen checkListen}\n-     *          method denies the operation\n-     *\n@@ -654,12 +598,3 @@\n-     * <p>\n-     * If there is a security manager set, its {@code checkConnect} method is\n-     * called with the local address and {@code -1} as its arguments to see\n-     * if the operation is allowed. If the operation is not allowed,\n-     * a {@code SocketAddress} representing the\n-     * {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n-     * local port of the channel's socket is returned.\n-     *\n-     * @return  The {@code SocketAddress} that the socket is bound to, or the\n-     *          {@code SocketAddress} representing the loopback address if\n-     *          denied by the security manager, or {@code null} if the\n-     *          channel's socket is not bound\n+     *\n+     * @return  The {@code SocketAddress} that the socket is bound to; {@code null}\n+     *          if the channel's socket is not bound\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/DatagramChannel.java","additions":9,"deletions":74,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -292,8 +292,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is installed and it denies an\n-     *          unspecified permission required by the implementation.\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String)} method is invoked to check\n-     *          read access if the file is opened for reading. The {@link\n-     *          SecurityManager#checkWrite(String)} method is invoked to check\n-     *          write access if the file is opened for writing\n@@ -348,8 +340,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is installed and it denies an\n-     *          unspecified permission required by the implementation.\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String)} method is invoked to check\n-     *          read access if the file is opened for reading. The {@link\n-     *          SecurityManager#checkWrite(String)} method is invoked to check\n-     *          write access if the file is opened for writing\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/FileChannel.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -185,4 +185,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is set, and its\n-     *          {@link SecurityManager#checkMulticast(InetAddress) checkMulticast}\n-     *          method denies access to the multicast group\n@@ -234,4 +230,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is set, and its\n-     *          {@link SecurityManager#checkMulticast(InetAddress) checkMulticast}\n-     *          method denies access to the multicast group\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/MulticastChannel.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,4 +80,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is installed and it denies an unspecified\n-     *          permission. An implementation of this interface should specify\n-     *          any required permissions.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/NetworkChannel.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,3 +215,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies the\n-     *          operation\n@@ -278,6 +275,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and its {@link\n-     *          SecurityManager#checkListen checkListen} method denies\n-     *          the operation for an <i>Internet protocol<\/i> socket address,\n-     *          or for a <i>Unix domain<\/i> socket address if it denies\n-     *          {@link NetPermission}{@code(\"accessUnixDomainSocket\")}.\n@@ -325,10 +316,0 @@\n-     * <p> If bound to an <i>Internet protocol<\/i> socket address, this method\n-     * performs exactly the same security checks as the {@link\n-     * java.net.ServerSocket#accept accept} method of the {@link java.net.ServerSocket}\n-     * class.  That is, if a security manager has been installed then for each\n-     * new connection this method verifies that the address and port number\n-     * of the connection's remote endpoint are permitted by the security\n-     * manager's {@link java.lang.SecurityManager#checkAccept checkAccept}\n-     * method. If bound to a <i>Unix Domain<\/i> socket address, this method checks\n-     * {@link NetPermission}{@code (\"accessUnixDomainSocket\")}.\n-     *\n@@ -355,8 +336,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and this\n-     *          channel is bound to an {@link InetSocketAddress}\n-     *          and the security manager denies access to the remote endpoint\n-     *          of the new connection, or if this channel is bound to a\n-     *          {@link UnixDomainSocketAddress} and the security manager\n-     *          denies {@link NetPermission}{@code (\"accessUnixDomainSocket\")}\n-     *\n@@ -371,7 +344,0 @@\n-     * If there is a security manager set, its {@code checkConnect} method is\n-     * called with the local address and {@code -1} as its arguments to see\n-     * if the operation is allowed. If the operation is not allowed,\n-     * a {@code SocketAddress} representing the\n-     * {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n-     * local port of the channel's socket is returned.\n-     *\n@@ -379,10 +345,4 @@\n-     * address is a {@link UnixDomainSocketAddress}. If there is a security manager\n-     * set, its {@link SecurityManager#checkPermission(java.security.Permission)\n-     * checkPermission} method is called with {@link NetPermission}{@code\n-     * (\"accessUnixDomainSocket\")}. If the operation is not allowed an unnamed\n-     * {@link UnixDomainSocketAddress} is returned.\n-     *\n-     * @return  The {@code SocketAddress} that the socket is bound to, or the\n-     *          {@code SocketAddress} representing the loopback address or empty\n-     *          path if denied by the security manager, or {@code null} if the\n-     *          channel's socket is not bound\n+     * address is a {@link UnixDomainSocketAddress}.\n+     *\n+     * @return  The {@code SocketAddress} that the socket is bound to or {@code null}\n+     *          if the channel's socket is not bound\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/ServerSocketChannel.java","additions":5,"deletions":45,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,4 +262,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed\n-     *          and it does not permit access to the given remote endpoint\n-     *\n@@ -358,6 +354,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and its {@link\n-     *          SecurityManager#checkListen checkListen} method denies\n-     *          the operation for an <i>Internet protocol<\/i> socket address,\n-     *          or for a <i>Unix domain<\/i> socket address if it denies\n-     *          {@link NetPermission}{@code(\"accessUnixDomainSocket\")}.\n@@ -466,13 +456,0 @@\n-     * <p> For channels to <i>Internet protocol<\/i> sockets, this method performs\n-     * exactly the same security checks as the {@link java.net.Socket} class.\n-     * That is, if a security manager has been\n-     * installed then this method verifies that its {@link\n-     * java.lang.SecurityManager#checkConnect checkConnect} method permits\n-     * connecting to the address and port number of the given remote endpoint.\n-     *\n-     * <p> For channels to <i>Unix Domain<\/i> sockets, this method checks\n-     * {@link java.net.NetPermission NetPermission}{@code\n-     * (\"accessUnixDomainSocket\")} with the security manager's {@link\n-     * SecurityManager#checkPermission(java.security.Permission)\n-     * checkPermission} method.\n-     *\n@@ -519,4 +496,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed\n-     *          and it does not permit access to the given remote endpoint\n-     *\n@@ -666,7 +639,0 @@\n-     * If there is a security manager set, its {@code checkConnect} method is\n-     * called with the local address and {@code -1} as its arguments to see\n-     * if the operation is allowed. If the operation is not allowed,\n-     * a {@code SocketAddress} representing the\n-     * {@link java.net.InetAddress#getLoopbackAddress loopback} address and the\n-     * local port of the channel's socket is returned.\n-     *\n@@ -674,10 +640,4 @@\n-     * address is a {@link UnixDomainSocketAddress}. If there is a security manager\n-     * set, its {@link SecurityManager#checkPermission(java.security.Permission)\n-     * checkPermission} method is called with {@link NetPermission}{@code\n-     * (\"accessUnixDomainSocket\")}. If the operation is not allowed an unnamed\n-     * {@link UnixDomainSocketAddress} is returned.\n-     *\n-     * @return  The {@code SocketAddress} that the socket is bound to, or the\n-     *          {@code SocketAddress} representing the loopback address or empty\n-     *          path if denied by the security manager, or {@code null} if the\n-     *          channel's socket is not bound\n+     * address is a {@link UnixDomainSocketAddress}.\n+     *\n+     * @return  The {@code SocketAddress} that the socket is bound to; {@code null}\n+     *          if the channel's socket is not bound\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/SocketChannel.java","additions":5,"deletions":45,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,8 +54,0 @@\n-    private static Void checkPermission() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(new RuntimePermission(\"asynchronousChannelProvider\"));\n-        return null;\n-    }\n-    private AsynchronousChannelProvider(Void ignore) { }\n@@ -65,4 +57,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"asynchronousChannelProvider\")}\n@@ -71,1 +59,0 @@\n-        this(checkPermission());\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/AsynchronousChannelProvider.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,9 +75,0 @@\n-    private static Void checkPermission() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(new RuntimePermission(\"selectorProvider\"));\n-        return null;\n-    }\n-    private SelectorProvider(Void ignore) { }\n-\n@@ -86,4 +77,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"selectorProvider\")}\n@@ -92,1 +79,0 @@\n-        this(checkPermission());\n@@ -318,4 +304,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"inheritedChannel\")}\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/spi\/SelectorProvider.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -85,9 +85,0 @@\n-    private static Void checkPermission() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(new RuntimePermission(\"charsetProvider\"));\n-        return null;\n-    }\n-    private CharsetProvider(Void ignore) { }\n-\n@@ -96,4 +87,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"charsetProvider\")}\n@@ -102,1 +89,0 @@\n-        this(checkPermission());\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/spi\/CharsetProvider.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,5 +32,0 @@\n- * <p> This exception is not related to the {@link\n- * java.security.AccessControlException AccessControlException} or {@link\n- * SecurityException} thrown by access controllers or security managers when\n- * access to a file is denied.\n- *\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/AccessDeniedException.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,4 +175,4 @@\n-     * root directory. Unless denied by the security manager, each element in\n-     * the returned iterator corresponds to the root directory of a distinct\n-     * file hierarchy. The order of the elements is not defined. The file\n-     * hierarchies may change during the lifetime of the Java virtual machine.\n+     * root directory. Each element in the returned iterator corresponds to the\n+     * root directory of a distinct file hierarchy. The order of the elements is\n+     * not defined. The file hierarchies may change during the lifetime of the\n+     * ava virtual machine.\n@@ -184,7 +184,0 @@\n-     * <p> When a security manager is installed, it is invoked to check access\n-     * to the each root directory. If denied, the root directory is not returned\n-     * by the iterator. In the case of the default provider, the {@link\n-     * SecurityManager#checkRead(String)} method is invoked to check read access\n-     * to each root directory. It is system dependent if the permission checks\n-     * are done when the iterator is obtained or during iteration.\n-     *\n@@ -204,10 +197,0 @@\n-     * <p> In the case of the default provider, and a security manager is\n-     * installed, the security manager is invoked to check {@link\n-     * RuntimePermission}{@code (\"getFileStoreAttributes\")}. If denied, then\n-     * no file stores are returned by the iterator. In addition, the security\n-     * manager's {@link SecurityManager#checkRead(String)} method is invoked to\n-     * check read access to the file store's <em>top-most<\/em> directory. If\n-     * denied, the file store is not returned by the iterator. It is system\n-     * dependent if the permission checks are done when the iterator is obtained\n-     * or during iteration.\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileSystem.java","additions":5,"deletions":22,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -209,5 +209,0 @@\n-     * <p> If a security manager is installed then a provider implementation\n-     * may require to check a permission before returning a reference to an\n-     * existing file system. In the case of the {@link FileSystems#getDefault\n-     * default} file system, no permission check is required.\n-     *\n@@ -224,3 +219,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission\n@@ -281,3 +273,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission required by the file system provider implementation\n@@ -326,3 +315,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission required by the file system provider implementation\n@@ -392,3 +378,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission\n@@ -431,3 +414,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission\n@@ -468,3 +448,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission\n@@ -513,3 +490,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileSystems.java","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -152,4 +152,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -217,7 +213,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -362,10 +351,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the path if the file is\n-     *          opened for reading. The {@link SecurityManager#checkWrite(String)\n-     *          checkWrite} method is invoked to check write access to the path\n-     *          if the file is opened for writing. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -409,10 +388,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the path if the file is\n-     *          opened for reading. The {@link SecurityManager#checkWrite(String)\n-     *          checkWrite} method is invoked to check write access to the path\n-     *          if the file is opened for writing. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -474,4 +443,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the directory.\n@@ -529,4 +494,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the directory.\n@@ -605,4 +566,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the directory.\n@@ -650,4 +607,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the new file.\n@@ -692,4 +645,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the new directory.\n@@ -736,11 +685,0 @@\n-     * @throws  SecurityException\n-     *          in the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked prior to attempting to create a directory and\n-     *          its {@link SecurityManager#checkRead(String) checkRead} is\n-     *          invoked for each parent directory that is checked. If {@code\n-     *          dir} is not an absolute path then its {@link Path#toAbsolutePath\n-     *          toAbsolutePath} may need to be invoked to get its absolute path.\n-     *          This may invoke the security manager's {@link\n-     *          SecurityManager#checkPropertyAccess(String) checkPropertyAccess}\n-     *          method to check access to the system property {@code user.dir}\n@@ -868,4 +806,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file.\n@@ -914,4 +848,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file.\n@@ -966,5 +896,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access when creating the\n-     *          directory.\n@@ -1008,5 +933,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access when creating the\n-     *          directory.\n@@ -1060,5 +980,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager\n-     *          is installed, it denies {@link LinkPermission}{@code (\"symbolic\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the path of the symbolic link.\n@@ -1105,6 +1020,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager\n-     *          is installed, it denies {@link LinkPermission}{@code (\"hard\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to either the link or the\n-     *          existing file.\n@@ -1147,4 +1056,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkDelete(String)} method\n-     *          is invoked to check delete access to the file\n@@ -1186,4 +1091,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkDelete(String)} method\n-     *          is invoked to check delete access to the file.\n@@ -1290,8 +1191,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the source file, the\n-     *          {@link SecurityManager#checkWrite(String) checkWrite} is invoked\n-     *          to check write access to the target file. If a symbolic link is\n-     *          copied the security manager is invoked to check {@link\n-     *          LinkPermission}{@code (\"symbolic\")}.\n@@ -1425,5 +1318,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to both the source and\n-     *          target file.\n@@ -1468,4 +1356,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager\n-     *          is installed, it checks that {@code FilePermission} has been\n-     *          granted with the \"{@code readlink}\" action to read the link.\n@@ -1495,6 +1379,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file, and in\n-     *          addition it checks\n-     *          {@link RuntimePermission}{@code (\"getFileStoreAttributes\")}\n@@ -1538,5 +1416,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to both files when the\n-     *          two paths are not equal\n@@ -1594,5 +1467,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to both files when the\n-     *          two paths are not equal\n@@ -1647,4 +1515,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -1732,3 +1596,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is installed and it denies an unspecified\n-     *          permission required by a file type detector implementation.\n@@ -1853,6 +1714,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file. If this\n-     *          method is invoked to read security sensitive attributes then the\n-     *          security manager may be invoked to check for additional permissions.\n@@ -1922,6 +1777,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the file. If this method is invoked\n-     *          to set security sensitive attributes then the security manager\n-     *          may be invoked to check for additional permissions.\n@@ -1983,6 +1832,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method denies read access to the file. If this method is invoked\n-     *          to read security sensitive attributes then the security manager\n-     *          may be invoked to check for additional permissions.\n@@ -2087,6 +1930,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method denies read access to the file. If this method is invoked\n-     *          to read security sensitive attributes then the security manager\n-     *          may be invoked to check for additional permissions.\n@@ -2128,6 +1965,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies\n-     *          {@link RuntimePermission}{@code (\"accessUserInformation\")}\n-     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n-     *          denies read access to the file.\n@@ -2166,6 +1997,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, it denies\n-     *          {@link RuntimePermission}{@code (\"accessUserInformation\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the file.\n@@ -2204,6 +2029,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, it denies\n-     *          {@link RuntimePermission}{@code (\"accessUserInformation\")}\n-     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n-     *          denies read access to the file.\n@@ -2248,6 +2067,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, it denies\n-     *          {@link RuntimePermission}{@code (\"accessUserInformation\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the file.\n@@ -2283,5 +2096,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method denies read access to the file.\n@@ -2322,5 +2130,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method denies read access to the file.\n@@ -2361,5 +2164,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method denies read access to the file.\n@@ -2398,4 +2196,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method denies read access to the file.\n@@ -2437,4 +2231,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkWrite(String)\n-     *          checkWrite} method denies write access to the file.\n@@ -2466,4 +2256,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method denies read access to the file.\n@@ -2517,5 +2303,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String)} is invoked to check\n-     *          read access to the file.\n-     *\n@@ -2554,5 +2335,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String)} is invoked to check\n-     *          read access to the file.\n@@ -2612,5 +2388,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          is invoked to check read access to the file.\n@@ -2647,5 +2418,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          is invoked to check write access to the file.\n@@ -2686,5 +2452,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkExec(String)\n-     *          checkExec} is invoked to check execute access to the file.\n@@ -2757,5 +2518,4 @@\n-     * file is visited, unless denied by the security manager. A value of\n-     * {@link Integer#MAX_VALUE MAX_VALUE} may be used to indicate that all\n-     * levels should be visited. The {@code visitFile} method is invoked for all\n-     * files, including directories, encountered at {@code maxDepth}, unless the\n-     * basic file attributes cannot be read, in which case the {@code\n+     * file is visited. A value of {@link Integer#MAX_VALUE MAX_VALUE} may be used\n+     * to indicate that all levels should be visited. The {@code visitFile} method\n+     * is invoked for all files, including directories, encountered at {@code maxDepth},\n+     * unless the basic file attributes cannot be read, in which case the {@code\n@@ -2767,4 +2527,0 @@\n-     * <p> When a security manager is installed and it denies access to a file\n-     * (or directory), then it is ignored and the visitor is not invoked for\n-     * that file (or directory).\n-     *\n@@ -2784,5 +2540,0 @@\n-     * @throws  SecurityException\n-     *          If the security manager denies access to the starting file.\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String) checkRead} method is invoked\n-     *          to check read access to the directory.\n@@ -2870,5 +2621,0 @@\n-     * @throws  SecurityException\n-     *          If the security manager denies access to the starting file.\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String) checkRead} method is invoked\n-     *          to check read access to the directory.\n@@ -2910,4 +2656,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -2946,4 +2688,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -2997,7 +2735,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -3047,7 +2778,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -3120,7 +2844,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file. Where the\n-     *          {@code REPLACE_EXISTING} option is specified, the security\n-     *          manager's {@link SecurityManager#checkDelete(String) checkDelete}\n-     *          method is invoked to check that an existing file can be deleted.\n@@ -3207,4 +2924,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -3286,4 +2999,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -3321,4 +3030,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -3359,4 +3064,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -3408,4 +3109,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -3449,4 +3146,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -3502,7 +3195,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -3570,7 +3256,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -3622,7 +3301,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -3665,7 +3337,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -3717,7 +3382,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -3787,4 +3445,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the directory.\n@@ -3878,6 +3532,2 @@\n-     * file is visited, unless denied by the security manager. A value of\n-     * {@link Integer#MAX_VALUE MAX_VALUE} may be used to indicate that all\n-     * levels should be visited.\n-     *\n-     * <p> When a security manager is installed and it denies access to a file\n-     * (or directory), then it is ignored and not included in the stream.\n+     * file is visited. A value of {@link Integer#MAX_VALUE MAX_VALUE} may be used\n+     * to indicate that all levels should be visited.\n@@ -3909,5 +3559,0 @@\n-     * @throws  SecurityException\n-     *          If the security manager denies access to the starting file.\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String) checkRead} method is invoked\n-     *          to check read access to the directory.\n@@ -3967,5 +3612,0 @@\n-     * @throws  SecurityException\n-     *          If the security manager denies access to the starting file.\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String) checkRead} method is invoked\n-     *          to check read access to the directory.\n@@ -4025,5 +3665,0 @@\n-     * @throws  SecurityException\n-     *          If the security manager denies access to the starting file.\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String) checkRead} method is invoked\n-     *          to check read access to the directory.\n@@ -4120,4 +3755,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -4225,4 +3856,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Files.java","additions":6,"deletions":379,"binary":false,"changes":385,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,30 +33,3 @@\n- * <p> The following table provides a summary description of what the permission\n- * allows, and discusses the risks of granting code the permission.\n- *\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">Table shows permission target name, what the permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- * <tbody>\n- * <tr>\n- *   <th scope=\"row\">hard<\/th>\n- *   <td> Ability to add an existing file to a directory. This is sometimes\n- *   known as creating a link, or hard link. <\/td>\n- *   <td> Extreme care should be taken when granting this permission. It allows\n- *   linking to any file or directory in the file system thus allowing the\n- *   attacker access to all files. <\/td>\n- * <\/tr>\n- * <tr>\n- *   <th scope=\"row\">symbolic<\/th>\n- *   <td> Ability to create symbolic links. <\/td>\n- *   <td> Extreme care should be taken when granting this permission. It allows\n- *   linking to any file or directory in the file system thus allowing the\n- *   attacker to access to all files. <\/td>\n- * <\/tr>\n- * <\/tbody>\n- * <\/table>\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n@@ -65,3 +38,0 @@\n- *\n- * @see Files#createLink\n- * @see Files#createSymbolicLink\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/LinkPermission.java","additions":4,"deletions":34,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,3 +191,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission to access the file system\n@@ -750,5 +747,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager\n-     *          is installed, the {@link #toAbsolutePath toAbsolutePath} method\n-     *          throws a security exception.\n@@ -772,6 +764,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager\n-     *          is installed, and this path is not absolute, then the security\n-     *          manager's {@link SecurityManager#checkPropertyAccess(String)\n-     *          checkPropertyAccess} method is invoked to check access to the\n-     *          system property {@code user.dir}\n@@ -817,7 +803,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager\n-     *          is installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file, and where\n-     *          this path is not absolute, its {@link SecurityManager#checkPropertyAccess(String)\n-     *          checkPropertyAccess} method is invoked to check access to the\n-     *          system property {@code user.dir}\n@@ -916,4 +895,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -972,4 +947,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,3 +91,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission to access the file system\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Paths.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,5 +50,0 @@\n- * <p> In the case of the default {@link java.nio.file.spi.FileSystemProvider\n- * provider}, and a security manager is set, then the permission checks are\n- * performed using the path obtained by resolving the given relative path\n- * against the <i>original path<\/i> of the directory (irrespective of if the\n- * directory is moved since it was opened).\n@@ -93,4 +88,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the directory.\n@@ -141,7 +132,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the path if the file\n-     *          is opened for reading. The {@link SecurityManager#checkWrite(String)\n-     *          checkWrite} method is invoked to check write access to the path\n-     *          if the file is opened for writing.\n@@ -174,4 +158,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkDelete(String) checkDelete}\n-     *          method is invoked to check delete access to the file\n@@ -202,4 +182,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkDelete(String) checkDelete}\n-     *          method is invoked to check delete access to the directory\n@@ -241,5 +217,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to both the source and\n-     *          target file.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/SecureDirectoryStream.java","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,4 +84,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission required to monitor this object. Implementations of\n-     *          this interface should specify the permission checks.\n@@ -121,4 +117,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is installed and it denies an unspecified\n-     *          permission required to monitor this object. Implementations of\n-     *          this interface should specify the permission checks.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Watchable.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,5 +173,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies {@link RuntimePermission}{@code (\"accessUserInformation\")}\n-     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n-     *          denies read access to the file.\n@@ -209,5 +204,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, it denies {@link RuntimePermission}{@code (\"accessUserInformation\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the file.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/attribute\/AclFileAttributeView.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,4 +124,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file\n@@ -172,4 +168,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, its  {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/attribute\/BasicFileAttributeView.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,1 +100,0 @@\n-     * @throws  SecurityException                       {@inheritDoc}\n@@ -118,4 +117,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default, and a security manager is installed,\n-     *          its  {@link SecurityManager#checkWrite(String) checkWrite} method\n-     *          is invoked to check write access to the file\n@@ -138,4 +133,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default, and a security manager is installed,\n-     *          its  {@link SecurityManager#checkWrite(String) checkWrite} method\n-     *          is invoked to check write access to the file\n@@ -158,4 +149,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default, and a security manager is installed,\n-     *          its  {@link SecurityManager#checkWrite(String) checkWrite} method\n-     *          is invoked to check write access to the file\n@@ -178,4 +165,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default, and a security manager is installed,\n-     *          its  {@link SecurityManager#checkWrite(String) checkWrite} method\n-     *          is invoked to check write access to the file\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/attribute\/DosFileAttributeView.java","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,6 +69,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies {@link\n-     *          RuntimePermission}{@code (\"accessUserInformation\")} or its\n-     *          {@link SecurityManager#checkRead(String) checkRead} method\n-     *          denies read access to the file.\n@@ -93,6 +87,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies {@link\n-     *          RuntimePermission}{@code (\"accessUserInformation\")} or its\n-     *          {@link SecurityManager#checkWrite(String) checkWrite} method\n-     *          denies write access to the file.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/attribute\/FileOwnerAttributeView.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -155,6 +155,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies\n-     *          {@link RuntimePermission}{@code (\"accessUserInformation\")}\n-     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n-     *          denies read access to the file.\n@@ -176,6 +170,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies\n-     *          {@link RuntimePermission}{@code (\"accessUserInformation\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the file.\n@@ -193,6 +181,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, it denies\n-     *          {@link RuntimePermission}{@code (\"accessUserInformation\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the file.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/attribute\/PosixFileAttributeView.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,6 +50,0 @@\n- * <p> User-defined attributes may be used in some implementations to store\n- * security related attributes so consequently, in the case of the default\n- * provider at least, all methods that access user-defined attributes require the\n- * {@code RuntimePermission(\"accessUserDefinedAttributes\")} permission when a\n- * security manager is installed.\n- *\n@@ -89,6 +83,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies {@link\n-     *          RuntimePermission}{@code (\"accessUserDefinedAttributes\")}\n-     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n-     *          denies read access to the file.\n@@ -110,6 +98,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies {@link\n-     *          RuntimePermission}{@code (\"accessUserDefinedAttributes\")}\n-     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n-     *          denies read access to the file.\n@@ -156,6 +138,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies {@link\n-     *          RuntimePermission}{@code (\"accessUserDefinedAttributes\")}\n-     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n-     *          denies read access to the file.\n@@ -206,6 +182,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies {@link\n-     *          RuntimePermission}{@code (\"accessUserDefinedAttributes\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the file.\n@@ -223,6 +193,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, and it denies {@link\n-     *          RuntimePermission}{@code (\"accessUserDefinedAttributes\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the file.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/attribute\/UserDefinedFileAttributeView.java","additions":1,"deletions":37,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,4 +73,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, it checks\n-     *          {@link RuntimePermission}{@code (\"lookupUserInformation\")}\n@@ -99,4 +95,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, it checks\n-     *          {@link RuntimePermission}{@code (\"lookupUserInformation\")}\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/attribute\/UserPrincipalLookupService.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,10 +121,1 @@\n-    private static boolean loadingProviders  = false;\n-\n-    private static Void checkPermission() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(new RuntimePermission(\"fileSystemProvider\"));\n-        return null;\n-    }\n-    private FileSystemProvider(Void ignore) { }\n+    private static boolean loadingProviders;\n@@ -139,4 +130,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"fileSystemProvider\")}\n@@ -145,1 +132,0 @@\n-        this(checkPermission());\n@@ -259,3 +245,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is installed and it denies an unspecified\n-     *          permission required by the file system provider implementation\n@@ -289,5 +272,0 @@\n-     * <p> If a security manager is installed then a provider implementation\n-     * may require to check a permission before returning a reference to an\n-     * existing file system. In the case of the {@link FileSystems#getDefault\n-     * default} file system, no permission check is required.\n-     *\n@@ -303,3 +281,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is installed and it denies an unspecified\n-     *          permission.\n@@ -320,5 +295,0 @@\n-     * <p> If a security manager is installed then a provider implementation\n-     * may require to check a permission. In the case of the {@link\n-     * FileSystems#getDefault default} file system, no permission check is\n-     * required.\n-     *\n@@ -336,3 +306,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is installed and it denies an unspecified\n-     *          permission.\n@@ -373,3 +340,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is installed and it denies an unspecified\n-     *          permission.\n@@ -406,4 +370,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -458,7 +418,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the file. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -521,6 +474,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default file system, the {@link\n-     *          SecurityManager#checkRead(String)} method is invoked to check\n-     *          read access if the file is opened for reading. The {@link\n-     *          SecurityManager#checkWrite(String)} method is invoked to check\n-     *          write access if the file is opened for writing\n@@ -574,6 +521,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default file system, the {@link\n-     *          SecurityManager#checkRead(String)} method is invoked to check\n-     *          read access if the file is opened for reading. The {@link\n-     *          SecurityManager#checkWrite(String)} method is invoked to check\n-     *          write access if the file is opened for writing\n@@ -617,10 +558,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the path if the file is\n-     *          opened for reading. The {@link SecurityManager#checkWrite(String)\n-     *          checkWrite} method is invoked to check write access to the path\n-     *          if the file is opened for writing. The {@link\n-     *          SecurityManager#checkDelete(String) checkDelete} method is\n-     *          invoked to check delete access if the file is opened with the\n-     *          {@code DELETE_ON_CLOSE} option.\n@@ -650,4 +581,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the directory.\n@@ -676,4 +603,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to the new directory.\n@@ -708,5 +631,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager\n-     *          is installed, it denies {@link LinkPermission}{@code (\"symbolic\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the path of the symbolic link.\n@@ -741,6 +659,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager\n-     *          is installed, it denies {@link LinkPermission}{@code (\"hard\")}\n-     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to either the  link or the\n-     *          existing file.\n@@ -767,4 +679,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkDelete(String)} method\n-     *          is invoked to check delete access to the file\n@@ -795,4 +703,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkDelete(String)} method\n-     *          is invoked to check delete access to the file\n@@ -828,4 +732,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager\n-     *          is installed, it checks that {@code FilePermission} has been\n-     *          granted with the \"{@code readlink}\" action to read the link.\n@@ -862,8 +762,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the source file, the\n-     *          {@link SecurityManager#checkWrite(String) checkWrite} is invoked\n-     *          to check write access to the target file. If a symbolic link is\n-     *          copied the security manager is invoked to check {@link\n-     *          LinkPermission}{@code (\"symbolic\")}.\n@@ -901,5 +793,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method is invoked to check write access to both the source and\n-     *          target file.\n@@ -923,4 +810,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to both files.\n@@ -945,4 +828,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file.\n@@ -964,6 +843,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file, and in\n-     *          addition it checks\n-     *          {@link RuntimePermission}{@code (\"getFileStoreAttributes\")}\n@@ -1042,8 +915,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n-     *          is invoked when checking read access to the file or only the\n-     *          existence of the file, the {@link SecurityManager#checkWrite(String)\n-     *          checkWrite} is invoked when checking write access to the file,\n-     *          and {@link SecurityManager#checkExec(String) checkExec} is invoked\n-     *          when checking execute access.\n@@ -1095,4 +960,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file\n@@ -1125,6 +986,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method denies read access to the file. If this method is invoked\n-     *          to read security sensitive attributes then the security manager\n-     *          may be invoked to check for additional permissions.\n@@ -1161,6 +1016,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, and a security manager is\n-     *          installed, its {@link SecurityManager#checkWrite(String) checkWrite}\n-     *          method denies write access to the file. If this method is invoked\n-     *          to set security sensitive attributes then the security manager\n-     *          may be invoked to check for additional permissions.\n@@ -1192,5 +1041,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, the {@link\n-     *          SecurityManager#checkRead(String)} is invoked to check\n-     *          read access to the file.\n-     *\n@@ -1255,6 +1099,0 @@\n-     * @throws  SecurityException\n-     *          In the case of the default provider, a security manager is\n-     *          installed, its {@link SecurityManager#checkRead(String) checkRead}\n-     *          method is invoked to check read access to the file. If this\n-     *          method is invoked to read security sensitive attributes then the\n-     *          security manager may be invoked to check for additional permissions.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/spi\/FileSystemProvider.java","additions":2,"deletions":164,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,9 +52,0 @@\n-    private static Void checkPermission() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(new RuntimePermission(\"fileTypeDetector\"));\n-        return null;\n-    }\n-    private FileTypeDetector(Void ignore) { }\n-\n@@ -63,4 +54,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"fileTypeDetector\")}\n@@ -69,1 +56,0 @@\n-        this(checkPermission());\n@@ -95,7 +81,0 @@\n-     * @throws  SecurityException\n-     *          If the implementation requires to access the file, and a\n-     *          security manager is installed, and it denies an unspecified\n-     *          permission required by a file system provider implementation.\n-     *          If the file reference is associated with the default file system\n-     *          provider then the {@link SecurityManager#checkRead(String)} method\n-     *          is invoked to check read access to the file.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/spi\/FileTypeDetector.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,5 +31,0 @@\n-import sun.security.util.Debug;\n-import sun.security.util.FilePermCompat;\n-import sun.security.util.SecurityConstants;\n-\n-\n@@ -37,38 +32,3 @@\n- * An {@code AccessControlContext} is used to make system resource access\n- * decisions based on the context it encapsulates.\n- *\n- * <p>More specifically, it encapsulates a context and\n- * has a single method, {@code checkPermission},\n- * that is equivalent to the {@code checkPermission} method\n- * in the {@code AccessController} class, with one difference:\n- * The {@code checkPermission} method makes access decisions based on the\n- * context it encapsulates,\n- * rather than that of the current execution thread.\n- *\n- * <p>Thus, the purpose of {@code AccessControlContext} is for those\n- * situations where a security check that should be made within a given context\n- * actually needs to be done from within a\n- * <i>different<\/i> context (for example, from within a worker thread).\n- *\n- * <p> An {@code AccessControlContext} is created by calling the\n- * {@code AccessController.getContext} method.\n- * The {@code getContext} method takes a \"snapshot\"\n- * of the current calling context, and places\n- * it in an {@code AccessControlContext} object, which it returns.\n- * A sample call is the following:\n- *\n- * <pre>\n- *   AccessControlContext acc = AccessController.getContext()\n- * <\/pre>\n- *\n- * <p>\n- * Code within a different context can subsequently call the\n- * {@code checkPermission} method on the\n- * previously-saved {@code AccessControlContext} object. A sample call is the\n- * following:\n- *\n- * <pre>\n- *   acc.checkPermission(permission)\n- * <\/pre>\n- *\n- * @see AccessController\n+ * {@code AccessControlContext} was used with the Security Manager for access\n+ * control decisions based on context that it encapsulated. This feature no\n+ * longer exists.\n@@ -78,5 +38,3 @@\n- * @deprecated This class is only useful in conjunction with\n- *       {@linkplain SecurityManager the Security Manager}, which is deprecated\n- *       and subject to removal in a future release. Consequently, this class\n- *       is also deprecated and subject to removal. There is no replacement for\n- *       the Security Manager or this class.\n+ * @deprecated This class was only useful in conjunction with the {@linkplain\n+ *       SecurityManager the Security Manager}, which is no longer supported.\n+ *       There is no replacement for the Security Manager or this class.\n@@ -101,26 +59,0 @@\n-    \/\/ limited privilege scope\n-    private Permission[] permissions;\n-    private AccessControlContext parent;\n-    private boolean isWrapped;\n-\n-    \/\/ is constrained by limited privilege scope?\n-    private boolean isLimited;\n-    private ProtectionDomain[] limitedContext;\n-\n-    private static boolean debugInit = false;\n-    private static Debug debug = null;\n-\n-    @SuppressWarnings(\"removal\")\n-    static Debug getDebug()\n-    {\n-        if (debugInit)\n-            return debug;\n-        else {\n-            if (Policy.isSet()) {\n-                debug = Debug.getInstance(\"access\");\n-                debugInit = true;\n-            }\n-            return debug;\n-        }\n-    }\n-\n@@ -151,1 +83,1 @@\n-                if ((context[i] != null) &&  (!v.contains(context[i])))\n+                if ((context[i] != null) && (!v.contains(context[i])))\n@@ -177,3 +109,0 @@\n-     * @throws    SecurityException if a security manager is installed and the\n-     *          caller does not have the \"createAccessControlContext\"\n-     *          {@link SecurityPermission}\n@@ -184,23 +113,0 @@\n-\n-        this(acc, combiner, false);\n-    }\n-\n-    \/**\n-     * package private to allow calls from {@code ProtectionDomain} without\n-     * performing the security check for\n-     * {@linkplain SecurityConstants#CREATE_ACC_PERMISSION} permission\n-     *\/\n-    AccessControlContext(AccessControlContext acc,\n-                        @SuppressWarnings(\"removal\") DomainCombiner combiner,\n-                        boolean preauthorized) {\n-        if (!preauthorized) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(SecurityConstants.CREATE_ACC_PERMISSION);\n-                this.isAuthorized = true;\n-            }\n-        } else {\n-            this.isAuthorized = true;\n-        }\n-\n@@ -208,44 +114,0 @@\n-\n-        \/\/ we do not need to run the combine method on the\n-        \/\/ provided ACC.  it was already \"combined\" when the\n-        \/\/ context was originally retrieved.\n-        \/\/\n-        \/\/ at this point in time, we simply throw away the old\n-        \/\/ combiner and use the newly provided one.\n-        this.combiner = combiner;\n-    }\n-\n-    \/**\n-     * package private for {@code AccessController}\n-     *\n-     * This \"argument wrapper\" context will be passed as the actual context\n-     * parameter on an internal doPrivileged() call used in the implementation.\n-     *\/\n-    AccessControlContext(ProtectionDomain caller, @SuppressWarnings(\"removal\") DomainCombiner combiner,\n-        AccessControlContext parent, AccessControlContext context,\n-        Permission[] perms)\n-    {\n-        \/*\n-         * Combine the domains from the doPrivileged() context into our\n-         * wrapper context, if necessary.\n-         *\/\n-        ProtectionDomain[] callerPDs = null;\n-        if (caller != null) {\n-             callerPDs = new ProtectionDomain[] { caller };\n-        }\n-        if (context != null) {\n-            if (combiner != null) {\n-                this.context = combiner.combine(callerPDs, context.context);\n-            } else {\n-                this.context = combine(callerPDs, context.context);\n-            }\n-        } else {\n-            \/*\n-             * Call combiner even if there is seemingly nothing to combine.\n-             *\/\n-            if (combiner != null) {\n-                this.context = combiner.combine(callerPDs, null);\n-            } else {\n-                this.context = combine(callerPDs, null);\n-            }\n-        }\n@@ -253,95 +115,0 @@\n-\n-        Permission[] tmp = null;\n-        if (perms != null) {\n-            tmp = new Permission[perms.length];\n-            for (int i=0; i < perms.length; i++) {\n-                if (perms[i] == null) {\n-                    throw new NullPointerException(\"permission can't be null\");\n-                }\n-\n-                \/*\n-                 * An AllPermission argument is equivalent to calling\n-                 * doPrivileged() without any limit permissions.\n-                 *\/\n-                if (perms[i].getClass() == AllPermission.class) {\n-                    parent = null;\n-                }\n-                \/\/ Add altPath into permission for compatibility.\n-                tmp[i] = FilePermCompat.newPermPlusAltPath(perms[i]);\n-            }\n-        }\n-\n-        \/*\n-         * For a doPrivileged() with limited privilege scope, initialize\n-         * the relevant fields.\n-         *\n-         * The limitedContext field contains the union of all domains which\n-         * are enclosed by this limited privilege scope. In other words,\n-         * it contains all of the domains which could potentially be checked\n-         * if none of the limiting permissions implied a requested permission.\n-         *\/\n-        if (parent != null) {\n-            this.limitedContext = combine(parent.context, parent.limitedContext);\n-            this.isLimited = true;\n-            this.isWrapped = true;\n-            this.permissions = tmp;\n-            this.parent = parent;\n-            this.privilegedContext = context; \/\/ used in checkPermission2()\n-        }\n-        this.isAuthorized = true;\n-    }\n-\n-\n-    \/**\n-     * package private constructor for {@code AccessController.getContext()}\n-     *\/\n-\n-    AccessControlContext(ProtectionDomain[] context,\n-                         boolean isPrivileged)\n-    {\n-        this.context = context;\n-        this.isPrivileged = isPrivileged;\n-        this.isAuthorized = true;\n-    }\n-\n-    \/**\n-     * Constructor for {@code JavaSecurityAccess.doIntersectionPrivilege()}\n-     *\/\n-    AccessControlContext(ProtectionDomain[] context,\n-                         AccessControlContext privilegedContext)\n-    {\n-        this.context = context;\n-        this.privilegedContext = privilegedContext;\n-        this.isPrivileged = true;\n-    }\n-\n-    \/**\n-     * Returns this context's context.\n-     *\/\n-    ProtectionDomain[] getContext() {\n-        return context;\n-    }\n-\n-    \/**\n-     * Returns {@code true} if this context is privileged.\n-     *\/\n-    boolean isPrivileged()\n-    {\n-        return isPrivileged;\n-    }\n-\n-    \/**\n-     * get the assigned combiner from the privileged or inherited context\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    DomainCombiner getAssignedCombiner() {\n-        AccessControlContext acc;\n-        if (isPrivileged) {\n-            acc = privilegedContext;\n-        } else {\n-            acc = AccessController.getInheritedAccessControlContext();\n-        }\n-        if (acc != null) {\n-            return acc.combiner;\n-        }\n-        return null;\n@@ -358,3 +125,0 @@\n-     * @throws    SecurityException if a security manager is installed and\n-     *          the caller does not have the \"getDomainCombiner\"\n-     *          {@link SecurityPermission}\n@@ -365,13 +129,0 @@\n-\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(SecurityConstants.GET_COMBINER_PERMISSION);\n-        }\n-        return getCombiner();\n-    }\n-\n-    \/**\n-     * package private for {@code AccessController}\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    DomainCombiner getCombiner() {\n@@ -381,4 +132,0 @@\n-    boolean isAuthorized() {\n-        return isAuthorized;\n-    }\n-\n@@ -386,11 +133,1 @@\n-     * Determines whether the access request indicated by the\n-     * specified permission should be allowed or denied, based on\n-     * the security policy currently in effect, and the context in\n-     * this object. The request is allowed only if every\n-     * {@code ProtectionDomain} in the context implies the permission.\n-     * Otherwise the request is denied.\n-     *\n-     * <p>\n-     * This method quietly returns if the access request\n-     * is permitted, or throws a suitable {@code AccessControlException}\n-     * otherwise.\n+     * Throws {@code AccessControlException}.\n@@ -398,7 +135,2 @@\n-     * @param perm the requested permission.\n-     *\n-     * @throws    AccessControlException if the specified permission\n-     * is not permitted, based on the current security policy and the\n-     * context encapsulated by this object.\n-     * @throws    NullPointerException if the permission to check for is\n-     * {@code null}.\n+     * @param perm ignored\n+     * @throws    AccessControlException always\n@@ -410,88 +142,1 @@\n-        boolean dumpDebug = false;\n-\n-        if (perm == null) {\n-            throw new NullPointerException(\"permission can't be null\");\n-        }\n-        if (getDebug() != null) {\n-            \/\/ If \"codebase\" is not specified, we dump the info by default.\n-            dumpDebug = !Debug.isOn(\"codebase=\");\n-            if (!dumpDebug) {\n-                \/\/ If \"codebase\" is specified, only dump if the specified code\n-                \/\/ value is in the stack.\n-                for (int i = 0; context != null && i < context.length; i++) {\n-                    if (context[i].getCodeSource() != null &&\n-                        context[i].getCodeSource().getLocation() != null &&\n-                        Debug.isOn(\"codebase=\" + context[i].getCodeSource().getLocation().toString())) {\n-                        dumpDebug = true;\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            dumpDebug &= !Debug.isOn(\"permission=\") ||\n-                Debug.isOn(\"permission=\" + perm.getClass().getCanonicalName());\n-\n-            if (dumpDebug && Debug.isOn(\"stack\")) {\n-                Thread.dumpStack();\n-            }\n-\n-            if (dumpDebug && Debug.isOn(\"domain\")) {\n-                if (context == null) {\n-                    debug.println(\"domain (context is null)\");\n-                } else {\n-                    for (int i=0; i< context.length; i++) {\n-                        debug.println(\"domain \"+i+\" \"+context[i]);\n-                    }\n-                }\n-            }\n-        }\n-\n-        \/*\n-         * iterate through the ProtectionDomains in the context.\n-         * Stop at the first one that doesn't allow the\n-         * requested permission (throwing an exception).\n-         *\n-         *\/\n-\n-        \/* if ctxt is null, all we had on the stack were system domains,\n-           or the first domain was a Privileged system domain. This\n-           is to make the common case for system code very fast *\/\n-\n-        if (context == null) {\n-            checkPermission2(perm);\n-            return;\n-        }\n-\n-        for (int i=0; i< context.length; i++) {\n-            if (context[i] != null && !context[i].impliesWithAltFilePerm(perm)) {\n-                if (dumpDebug) {\n-                    debug.println(\"access denied \" + perm);\n-                }\n-\n-                if (Debug.isOn(\"failure\") && debug != null) {\n-                    \/\/ Want to make sure this is always displayed for failure,\n-                    \/\/ but do not want to display again if already displayed\n-                    \/\/ above.\n-                    if (!dumpDebug) {\n-                        debug.println(\"access denied \" + perm);\n-                    }\n-                    Thread.dumpStack();\n-                    final ProtectionDomain pd = context[i];\n-                    final Debug db = debug;\n-                    AccessController.doPrivileged (new PrivilegedAction<>() {\n-                        public Void run() {\n-                            db.println(\"domain that failed \"+pd);\n-                            return null;\n-                        }\n-                    });\n-                }\n-                throw new AccessControlException(\"access denied \"+perm, perm);\n-            }\n-        }\n-\n-        \/\/ allow if all of them allowed access\n-        if (dumpDebug) {\n-            debug.println(\"access allowed \"+perm);\n-        }\n-\n-        checkPermission2(perm);\n+        throw new AccessControlException(\"checking permissions is not supported\");\n@@ -500,256 +145,0 @@\n-    \/*\n-     * Check the domains associated with the limited privilege scope.\n-     *\/\n-    private void checkPermission2(Permission perm) {\n-        if (!isLimited) {\n-            return;\n-        }\n-\n-        \/*\n-         * Check the doPrivileged() context parameter, if present.\n-         *\/\n-        if (privilegedContext != null) {\n-            privilegedContext.checkPermission2(perm);\n-        }\n-\n-        \/*\n-         * Ignore the limited permissions and parent fields of a wrapper\n-         * context since they were already carried down into the unwrapped\n-         * context.\n-         *\/\n-        if (isWrapped) {\n-            return;\n-        }\n-\n-        \/*\n-         * Try to match any limited privilege scope.\n-         *\/\n-        if (permissions != null) {\n-            Class<?> permClass = perm.getClass();\n-            for (int i=0; i < permissions.length; i++) {\n-                Permission limit = permissions[i];\n-                if (limit.getClass().equals(permClass) && limit.implies(perm)) {\n-                    return;\n-                }\n-            }\n-        }\n-\n-        \/*\n-         * Check the limited privilege scope up the call stack or the inherited\n-         * parent thread call stack of this ACC.\n-         *\/\n-        if (parent != null) {\n-            \/*\n-             * As an optimization, if the parent context is the inherited call\n-             * stack context from a parent thread then checking the protection\n-             * domains of the parent context is redundant since they have\n-             * already been merged into the child thread's context by\n-             * optimize(). When parent is set to an inherited context this\n-             * context was not directly created by a limited scope\n-             * doPrivileged() and it does not have its own limited permissions.\n-             *\/\n-            if (permissions == null) {\n-                parent.checkPermission2(perm);\n-            } else {\n-                parent.checkPermission(perm);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Take the stack-based context (this) and combine it with the\n-     * privileged or inherited context, if need be. Any limited\n-     * privilege scope is flagged regardless of whether the assigned\n-     * context comes from an immediately enclosing limited doPrivileged().\n-     * The limited privilege scope can indirectly flow from the inherited\n-     * parent thread or an assigned context previously captured by getContext().\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    AccessControlContext optimize() {\n-        \/\/ the assigned (privileged or inherited) context\n-        AccessControlContext acc;\n-        DomainCombiner combiner = null;\n-        AccessControlContext parent = null;\n-        Permission[] permissions = null;\n-\n-        if (isPrivileged) {\n-            acc = privilegedContext;\n-            if (acc != null) {\n-                \/*\n-                 * If the context is from a limited scope doPrivileged() then\n-                 * copy the permissions and parent fields out of the wrapper\n-                 * context that was created to hold them.\n-                 *\/\n-                if (acc.isWrapped) {\n-                    permissions = acc.permissions;\n-                    parent = acc.parent;\n-                }\n-            }\n-        } else {\n-            acc = AccessController.getInheritedAccessControlContext();\n-            if (acc != null) {\n-                \/*\n-                 * If the inherited context is constrained by a limited scope\n-                 * doPrivileged() then set it as our parent so we will process\n-                 * the non-domain-related state.\n-                 *\/\n-                if (acc.isLimited) {\n-                    parent = acc;\n-                }\n-            }\n-        }\n-\n-        \/\/ this.context could be null if only system code is on the stack;\n-        \/\/ in that case, ignore the stack context\n-        boolean skipStack = (context == null);\n-\n-        \/\/ acc.context could be null if only system code was involved;\n-        \/\/ in that case, ignore the assigned context\n-        boolean skipAssigned = (acc == null || acc.context == null);\n-        ProtectionDomain[] assigned = (skipAssigned) ? null : acc.context;\n-        ProtectionDomain[] pd;\n-\n-        \/\/ if there is no enclosing limited privilege scope on the stack or\n-        \/\/ inherited from a parent thread\n-        boolean skipLimited = ((acc == null || !acc.isWrapped) && parent == null);\n-\n-        if (acc != null && acc.combiner != null) {\n-            \/\/ let the assigned acc's combiner do its thing\n-            if (getDebug() != null) {\n-                debug.println(\"AccessControlContext invoking the Combiner\");\n-            }\n-\n-            \/\/ No need to clone current and assigned.context\n-            \/\/ combine() will not update them\n-            combiner = acc.combiner;\n-            pd = combiner.combine(context, assigned);\n-        } else {\n-            if (skipStack) {\n-                if (skipAssigned) {\n-                    calculateFields(acc, parent, permissions);\n-                    return this;\n-                } else if (skipLimited) {\n-                    return acc;\n-                }\n-            } else if (assigned != null) {\n-                if (skipLimited) {\n-                    \/\/ optimization: if there is a single stack domain and\n-                    \/\/ that domain is already in the assigned context; no\n-                    \/\/ need to combine\n-                    if (context.length == 1 && context[0] == assigned[0]) {\n-                        return acc;\n-                    }\n-                }\n-            }\n-\n-            pd = combine(context, assigned);\n-            if (skipLimited && !skipAssigned && pd == assigned) {\n-                return acc;\n-            } else if (skipAssigned && pd == context) {\n-                calculateFields(acc, parent, permissions);\n-                return this;\n-            }\n-        }\n-\n-        \/\/ Reuse existing ACC\n-        this.context = pd;\n-        this.combiner = combiner;\n-        this.isPrivileged = false;\n-\n-        calculateFields(acc, parent, permissions);\n-        return this;\n-    }\n-\n-\n-    \/*\n-     * Combine the current (stack) and assigned domains.\n-     *\/\n-    private static ProtectionDomain[] combine(ProtectionDomain[] current,\n-        ProtectionDomain[] assigned) {\n-\n-        \/\/ current could be null if only system code is on the stack;\n-        \/\/ in that case, ignore the stack context\n-        boolean skipStack = (current == null);\n-\n-        \/\/ assigned could be null if only system code was involved;\n-        \/\/ in that case, ignore the assigned context\n-        boolean skipAssigned = (assigned == null);\n-\n-        int slen = (skipStack) ? 0 : current.length;\n-\n-        \/\/ optimization: if there is no assigned context and the stack length\n-        \/\/ is less then or equal to two; there is no reason to compress the\n-        \/\/ stack context, it already is\n-        if (skipAssigned && slen <= 2) {\n-            return current;\n-        }\n-\n-        int n = (skipAssigned) ? 0 : assigned.length;\n-\n-        \/\/ now we combine both of them, and create a new context\n-        ProtectionDomain[] pd = new ProtectionDomain[slen + n];\n-\n-        \/\/ first copy in the assigned context domains, no need to compress\n-        if (!skipAssigned) {\n-            System.arraycopy(assigned, 0, pd, 0, n);\n-        }\n-\n-        \/\/ now add the stack context domains, discarding nulls and duplicates\n-    outer:\n-        for (int i = 0; i < slen; i++) {\n-            ProtectionDomain sd = current[i];\n-            if (sd != null) {\n-                for (int j = 0; j < n; j++) {\n-                    if (sd == pd[j]) {\n-                        continue outer;\n-                    }\n-                }\n-                pd[n++] = sd;\n-            }\n-        }\n-\n-        \/\/ if length isn't equal, we need to shorten the array\n-        if (n != pd.length) {\n-            \/\/ optimization: if we didn't really combine anything\n-            if (!skipAssigned && n == assigned.length) {\n-                return assigned;\n-            } else if (skipAssigned && n == slen) {\n-                return current;\n-            }\n-            ProtectionDomain[] tmp = new ProtectionDomain[n];\n-            System.arraycopy(pd, 0, tmp, 0, n);\n-            pd = tmp;\n-        }\n-\n-        return pd;\n-    }\n-\n-\n-    \/*\n-     * Calculate the additional domains that could potentially be reached via\n-     * limited privilege scope. Mark the context as being subject to limited\n-     * privilege scope unless the reachable domains (if any) are already\n-     * contained in this domain context (in which case any limited\n-     * privilege scope checking would be redundant).\n-     *\/\n-    private void calculateFields(AccessControlContext assigned,\n-        AccessControlContext parent, Permission[] permissions)\n-    {\n-        ProtectionDomain[] parentLimit = null;\n-        ProtectionDomain[] assignedLimit = null;\n-        ProtectionDomain[] newLimit;\n-\n-        parentLimit = (parent != null)? parent.limitedContext: null;\n-        assignedLimit = (assigned != null)? assigned.limitedContext: null;\n-        newLimit = combine(parentLimit, assignedLimit);\n-        if (newLimit != null) {\n-            if (context == null || !containsAllPDs(newLimit, context)) {\n-                this.limitedContext = newLimit;\n-                this.permissions = permissions;\n-                this.parent = parent;\n-                this.isLimited = true;\n-            }\n-        }\n-    }\n-\n-\n@@ -773,2 +162,1 @@\n-                && equalContext(that)\n-                && equalLimitedContext(that);\n+                && equalContext(that);\n@@ -808,81 +196,0 @@\n-    \/*\n-     * Compare for equality based on state that is captured during a\n-     * call to AccessController.getContext() when a limited privilege\n-     * scope is in effect.\n-     *\/\n-    private boolean equalLimitedContext(AccessControlContext that) {\n-        if (that == null)\n-            return false;\n-\n-        \/*\n-         * If neither instance has limited privilege scope then we're done.\n-         *\/\n-        if (!this.isLimited && !that.isLimited)\n-            return true;\n-\n-        \/*\n-         * If only one instance has limited privilege scope then we're done.\n-         *\/\n-         if (!(this.isLimited && that.isLimited))\n-             return false;\n-\n-        \/*\n-         * Wrapped instances should never escape outside the implementation\n-         * this class and AccessController so this will probably never happen\n-         * but it only makes any sense to compare if they both have the same\n-         * isWrapped state.\n-         *\/\n-        if ((this.isWrapped && !that.isWrapped) ||\n-            (!this.isWrapped && that.isWrapped)) {\n-            return false;\n-        }\n-\n-        if (this.permissions == null && that.permissions != null)\n-            return false;\n-\n-        if (this.permissions != null && that.permissions == null)\n-            return false;\n-\n-        if (!(this.containsAllLimits(that) && that.containsAllLimits(this)))\n-            return false;\n-\n-        \/*\n-         * Skip through any wrapped contexts.\n-         *\/\n-        AccessControlContext thisNextPC = getNextPC(this);\n-        AccessControlContext thatNextPC = getNextPC(that);\n-\n-        \/*\n-         * The protection domains and combiner of a privilegedContext are\n-         * not relevant because they have already been included in the context\n-         * of this instance by optimize() so we only care about any limited\n-         * privilege state they may have.\n-         *\/\n-        if (thisNextPC == null && thatNextPC != null && thatNextPC.isLimited)\n-            return false;\n-\n-        if (thisNextPC != null && !thisNextPC.equalLimitedContext(thatNextPC))\n-            return false;\n-\n-        if (this.parent == null && that.parent != null)\n-            return false;\n-\n-        if (this.parent != null && !this.parent.equals(that.parent))\n-            return false;\n-\n-        return true;\n-    }\n-\n-    \/*\n-     * Follow the privilegedContext link making our best effort to skip\n-     * through any wrapper contexts.\n-     *\/\n-    private static AccessControlContext getNextPC(AccessControlContext acc) {\n-        while (acc != null && acc.privilegedContext != null) {\n-            acc = acc.privilegedContext;\n-            if (!acc.isWrapped)\n-                return acc;\n-        }\n-        return null;\n-    }\n-\n@@ -922,21 +229,0 @@\n-    private boolean containsAllLimits(AccessControlContext that) {\n-        boolean match = false;\n-\n-        if (this.permissions == null && that.permissions == null)\n-            return true;\n-\n-        for (int i = 0; i < this.permissions.length; i++) {\n-            Permission limit = this.permissions[i];\n-            Class <?> limitClass = limit.getClass();\n-            match = false;\n-            for (int j = 0; (j < that.permissions.length) && !match; j++) {\n-                Permission perm = that.permissions[j];\n-                match = (limitClass.equals(perm.getClass()) &&\n-                    limit.equals(perm));\n-            }\n-            if (!match) return false;\n-        }\n-        return match;\n-    }\n-\n-\n","filename":"src\/java.base\/share\/classes\/java\/security\/AccessControlContext.java","additions":13,"deletions":727,"binary":false,"changes":740,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,9 +29,2 @@\n- * <p> This exception is thrown by the {@code AccessController} to indicate\n- * that a requested access (to a critical system resource such as the\n- * file system or the network) is denied.\n- *\n- * <p> The reason to deny access can vary.  For example, the requested\n- * permission might be of an incorrect type, contain an invalid\n- * value, or request access that is not allowed according to the\n- * security policy.  Such information should be given whenever\n- * possible at the time the exception is thrown.\n+ * This exception was originally thrown by the {@link AccessController} to\n+ * indicate that a requested access was denied.\n@@ -42,5 +35,4 @@\n- * @deprecated This class is only useful in conjunction with\n- *       {@linkplain SecurityManager the Security Manager}, which is deprecated\n- *       and subject to removal in a future release. Consequently, this class\n- *       is also deprecated and subject to removal. There is no replacement for\n- *       the Security Manager or this class.\n+ * @deprecated This exception was only useful in conjunction with\n+ *       {@linkplain SecurityManager the Security Manager}, which is no\n+ *       longer supported. There is no replacement for the Security Manager\n+ *       or this class.\n","filename":"src\/java.base\/share\/classes\/java\/security\/AccessControlException.java","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,15 +28,0 @@\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import java.lang.ref.Reference;\n-\n-import jdk.internal.vm.annotation.Hidden;\n-import sun.security.util.Debug;\n-import sun.security.util.SecurityConstants;\n-import jdk.internal.reflect.CallerSensitive;\n-import jdk.internal.reflect.Reflection;\n-import jdk.internal.vm.annotation.DontInline;\n-import jdk.internal.vm.annotation.ForceInline;\n-import jdk.internal.vm.annotation.ReservedStackAccess;\n-\n@@ -44,226 +29,2 @@\n- * <p> The {@code AccessController} class is used for access control operations\n- * and decisions.\n- *\n- * <p> More specifically, the {@code AccessController} class is used for\n- * three purposes:\n- *\n- * <ul>\n- * <li> to decide whether an access to a critical system\n- * resource is to be allowed or denied, based on the security policy\n- * currently in effect,\n- * <li>to mark code as being \"privileged\", thus affecting subsequent\n- * access determinations, and\n- * <li>to obtain a \"snapshot\" of the current calling context so\n- * access-control decisions from a different context can be made with\n- * respect to the saved context. <\/ul>\n- *\n- * <p> The {@link #checkPermission(Permission) checkPermission} method\n- * determines whether the access request indicated by a specified\n- * permission should be granted or denied. A sample call appears\n- * below. In this example, {@code checkPermission} will determine\n- * whether or not to grant \"read\" access to the file named \"testFile\" in\n- * the \"\/temp\" directory.\n- *\n- * <pre>\n- *\n- * FilePermission perm = new FilePermission(\"\/temp\/testFile\", \"read\");\n- * AccessController.checkPermission(perm);\n- *\n- * <\/pre>\n- *\n- * <p> If a requested access is allowed,\n- * {@code checkPermission} returns quietly. If denied, an\n- * {@code AccessControlException} is\n- * thrown. {@code AccessControlException} can also be thrown if the requested\n- * permission is of an incorrect type or contains an invalid value.\n- * Such information is given whenever possible.\n- *\n- * Suppose the current thread traversed m callers, in the order of caller 1\n- * to caller 2 to caller m. Then caller m invoked the\n- * {@code checkPermission} method.\n- * The {@code checkPermission} method determines whether access\n- * is granted or denied based on the following algorithm:\n- *\n- *  <pre> {@code\n- * for (int i = m; i > 0; i--) {\n- *\n- *     if (caller i's domain does not have the permission)\n- *         throw AccessControlException\n- *\n- *     else if (caller i is marked as privileged) {\n- *         if (a context was specified in the call to doPrivileged)\n- *             context.checkPermission(permission)\n- *         if (limited permissions were specified in the call to doPrivileged) {\n- *             for (each limited permission) {\n- *                 if (the limited permission implies the requested permission)\n- *                     return;\n- *             }\n- *         } else\n- *             return;\n- *     }\n- * }\n- *\n- * \/\/ Next, check the context inherited when the thread was created.\n- * \/\/ Whenever a new thread is created, the AccessControlContext at\n- * \/\/ that time is stored and associated with the new thread, as the\n- * \/\/ \"inherited\" context.\n- *\n- * inheritedContext.checkPermission(permission);\n- * }<\/pre>\n- *\n- * <p> A caller can be marked as being \"privileged\"\n- * (see {@link #doPrivileged(PrivilegedAction) doPrivileged} and below).\n- * When making access control decisions, the {@code checkPermission}\n- * method stops checking if it reaches a caller that\n- * was marked as \"privileged\" via a {@code doPrivileged}\n- * call without a context argument (see below for information about a\n- * context argument). If that caller's domain has the\n- * specified permission and at least one limiting permission argument (if any)\n- * implies the requested permission, no further checking is done and\n- * {@code checkPermission}\n- * returns quietly, indicating that the requested access is allowed.\n- * If that domain does not have the specified permission, an exception\n- * is thrown, as usual. If the caller's domain had the specified permission\n- * but it was not implied by any limiting permission arguments given in the call\n- * to {@code doPrivileged} then the permission checking continues\n- * until there are no more callers or another {@code doPrivileged}\n- * call matches the requested permission and returns normally.\n- *\n- * <p> The normal use of the \"privileged\" feature is as follows. If you\n- * don't need to return a value from within the \"privileged\" block, do\n- * the following:\n- *\n- *  <pre> {@code\n- * somemethod() {\n- *     ...normal code here...\n- *     AccessController.doPrivileged(new PrivilegedAction<Void>() {\n- *         public Void run() {\n- *             \/\/ privileged code goes here, for example:\n- *             System.loadLibrary(\"awt\");\n- *             return null; \/\/ nothing to return\n- *         }\n- *     });\n- *     ...normal code here...\n- * }}<\/pre>\n- *\n- * <p>\n- * {@code PrivilegedAction} is an interface with a single method, named\n- * {@code run}.\n- * The above example shows creation of an implementation\n- * of that interface; a concrete implementation of the\n- * {@code run} method is supplied.\n- * When the call to {@code doPrivileged} is made, an\n- * instance of the {@code PrivilegedAction} implementation is passed\n- * to it. The {@code doPrivileged} method calls the\n- * {@code run} method from the {@code PrivilegedAction}\n- * implementation after enabling privileges, and returns the\n- * {@code run} method's return value as the\n- * {@code doPrivileged} return value (which is\n- * ignored in this example).\n- *\n- * <p> If you need to return a value, you can do something like the following:\n- *\n- *  <pre> {@code\n- * somemethod() {\n- *     ...normal code here...\n- *     String user = AccessController.doPrivileged(\n- *         new PrivilegedAction<String>() {\n- *         public String run() {\n- *             return System.getProperty(\"user.name\");\n- *             }\n- *         });\n- *     ...normal code here...\n- * }}<\/pre>\n- *\n- * <p>If the action performed in your {@code run} method could\n- * throw a \"checked\" exception (those listed in the {@code throws} clause\n- * of a method), then you need to use the\n- * {@code PrivilegedExceptionAction} interface instead of the\n- * {@code PrivilegedAction} interface:\n- *\n- *  <pre> {@code\n- * somemethod() throws FileNotFoundException {\n- *     ...normal code here...\n- *     try {\n- *         FileInputStream fis = AccessController.doPrivileged(\n- *         new PrivilegedExceptionAction<FileInputStream>() {\n- *             public FileInputStream run() throws FileNotFoundException {\n- *                 return new FileInputStream(\"someFile\");\n- *             }\n- *         });\n- *     } catch (PrivilegedActionException e) {\n- *         \/\/ e.getException() should be an instance of FileNotFoundException,\n- *         \/\/ as only \"checked\" exceptions will be \"wrapped\" in a\n- *         \/\/ PrivilegedActionException.\n- *         throw (FileNotFoundException) e.getException();\n- *     }\n- *     ...normal code here...\n- *  }}<\/pre>\n- *\n- * <p> Be *very* careful in your use of the \"privileged\" construct, and\n- * always remember to make the privileged code section as small as possible.\n- * You can pass {@code Permission} arguments to further limit the\n- * scope of the \"privilege\" (see below).\n- *\n- *\n- * <p> Note that {@code checkPermission} always performs security checks\n- * within the context of the currently executing thread.\n- * Sometimes a security check that should be made within a given context\n- * will actually need to be done from within a\n- * <i>different<\/i> context (for example, from within a worker thread).\n- * The {@link #getContext() getContext} method and\n- * {@code AccessControlContext} class are provided\n- * for this situation. The {@code getContext} method takes a \"snapshot\"\n- * of the current calling context, and places\n- * it in an {@code AccessControlContext} object, which it returns. A sample call is\n- * the following:\n- *\n- * <pre>\n- *\n- * AccessControlContext acc = AccessController.getContext()\n- *\n- * <\/pre>\n- *\n- * <p>\n- * {@code AccessControlContext} itself has a {@code checkPermission} method\n- * that makes access decisions based on the context <i>it<\/i> encapsulates,\n- * rather than that of the current execution thread.\n- * Code within a different context can thus call that method on the\n- * previously-saved {@code AccessControlContext} object. A sample call is the\n- * following:\n- *\n- * <pre>\n- *\n- * acc.checkPermission(permission)\n- *\n- * <\/pre>\n- *\n- * <p> There are also times where you don't know a priori which permissions\n- * to check the context against. In these cases you can use the\n- * {@code doPrivileged} method that takes a context. You can also limit the\n- * scope of the privileged code by passing additional {@code Permission}\n- * parameters.\n- *\n- *  <pre> {@code\n- * somemethod() {\n- *     AccessController.doPrivileged(new PrivilegedAction<Object>() {\n- *         public Object run() {\n- *             \/\/ Code goes here. Any permission checks within this\n- *             \/\/ run method will require that the intersection of the\n- *             \/\/ caller's protection domain and the snapshot's\n- *             \/\/ context have the desired permission. If a requested\n- *             \/\/ permission is not implied by the limiting FilePermission\n- *             \/\/ argument then checking of the thread continues beyond the\n- *             \/\/ caller of doPrivileged.\n- *         }\n- *     }, acc, new FilePermission(\"\/temp\/*\", read));\n- *     ...normal code here...\n- * }}<\/pre>\n- * <p> Passing a limiting {@code Permission} argument of an instance of\n- * {@code AllPermission} is equivalent to calling the equivalent\n- * {@code doPrivileged} method without limiting {@code Permission}\n- * arguments. Passing a zero length array of {@code Permission} disables\n- * the code privileges so that checking always continues beyond the caller of\n- * that {@code doPrivileged} method.\n- *\n- * @see AccessControlContext\n+ * {@code AccessController} was used with the Security Manager for access\n+ * control operations and decisions. This feature no longer exists.\n@@ -274,5 +35,3 @@\n- * @deprecated This class is only useful in conjunction with\n- *       {@linkplain SecurityManager the Security Manager}, which is deprecated\n- *       and subject to removal in a future release. Consequently, this class\n- *       is also deprecated and subject to removal. There is no replacement for\n- *       the Security Manager or this class.\n+ * @deprecated This class was only useful in conjunction with {@linkplain\n+ *       SecurityManager the Security Manager}, which is no longer supported.\n+ *       There is no replacement for the Security Manager or this class.\n@@ -280,1 +39,0 @@\n-\n@@ -290,3 +48,1 @@\n-     * Performs the specified {@code PrivilegedAction} with privileges\n-     * enabled. The action is performed with <i>all<\/i> of the permissions\n-     * possessed by the caller's protection domain.\n+     * Performs the specified action.\n@@ -297,4 +53,0 @@\n-     * <p> Note that any {@code DomainCombiner} associated with the current\n-     * {@code AccessControlContext} will be ignored while the action is\n-     * performed.\n-     *\n@@ -302,1 +54,1 @@\n-     *                  {@code run} method.\n+     *                  {@code run} method\n@@ -304,1 +56,1 @@\n-     * @param action the action to be performed.\n+     * @param action the action to be performed\n@@ -306,1 +58,1 @@\n-     * @return the value returned by the action's {@code run} method.\n+     * @return the value returned by the action's {@code run} method\n@@ -312,2 +64,8 @@\n-     * @see #doPrivilegedWithCombiner(PrivilegedAction)\n-     * @see java.security.DomainCombiner\n+     * @apiNote This method originally performed the specified\n+     *     {@code PrivilegedAction} with privileges enabled. Running the action\n+     *     with privileges enabled was only useful in conjunction with\n+     *     {@linkplain SecurityManager the Security Manager}, which is no\n+     *     longer supported. This method has been changed to run the action as\n+     *     is, and has equivalent behavior as if there were no Security Manager\n+     *     enabled. There is no replacement for the Security Manager or this\n+     *     method.\n@@ -315,5 +73,3 @@\n-\n-    @CallerSensitive\n-    public static <T> T doPrivileged(PrivilegedAction<T> action)\n-    {\n-        return executePrivileged(action, null, Reflection.getCallerClass());\n+    public static <T> T doPrivileged(PrivilegedAction<T> action) {\n+        T result = action.run();\n+        return result;\n@@ -323,3 +79,1 @@\n-     * Performs the specified {@code PrivilegedAction} with privileges\n-     * enabled. The action is performed with <i>all<\/i> of the permissions\n-     * possessed by the caller's protection domain.\n+     * Performs the specified action.\n@@ -330,3 +84,0 @@\n-     * <p> This method preserves the current AccessControlContext's\n-     * {@code DomainCombiner} (which may be null) while the action is performed.\n-     *\n@@ -334,1 +85,1 @@\n-     *                  {@code run} method.\n+     *                  {@code run} method\n@@ -336,1 +87,1 @@\n-     * @param action the action to be performed.\n+     * @param action the action to be performed\n@@ -338,1 +89,1 @@\n-     * @return the value returned by the action's {@code run} method.\n+     * @return the value returned by the action's {@code run} method\n@@ -342,2 +93,9 @@\n-     * @see #doPrivileged(PrivilegedAction)\n-     * @see java.security.DomainCombiner\n+     * @apiNote This method originally performed the specified\n+     *     {@code PrivilegedAction} with privileges enabled and with the current\n+     *     access control context's domain combiner preserved. Running the\n+     *     action with privileges enabled was only useful in conjunction with\n+     *     {@linkplain SecurityManager the Security Manager}, which is no\n+     *     longer supported. This method has been changed to run the action as\n+     *     is, and has equivalent behavior as if there were no Security Manager\n+     *     enabled. There is no replacement for the Security Manager or this\n+     *     method.\n@@ -347,1 +105,0 @@\n-    @CallerSensitive\n@@ -349,9 +106,2 @@\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext acc = getStackAccessControlContext();\n-        if (acc == null) {\n-            return AccessController.doPrivileged(action);\n-        }\n-        @SuppressWarnings(\"removal\")\n-        DomainCombiner dc = acc.getAssignedCombiner();\n-        return AccessController.doPrivileged(action,\n-                                             preserveCombiner(dc, Reflection.getCallerClass()));\n+        T result = action.run();\n+        return result;\n@@ -360,1 +110,0 @@\n-\n@@ -362,5 +111,1 @@\n-     * Performs the specified {@code PrivilegedAction} with privileges\n-     * enabled and restricted by the specified {@code AccessControlContext}.\n-     * The action is performed with the intersection of the permissions\n-     * possessed by the caller's protection domain, and those possessed\n-     * by the domains represented by the specified {@code AccessControlContext}.\n+     * Performs the specified action.\n@@ -370,7 +115,0 @@\n-     * <p>\n-     * If a security manager is installed and the specified\n-     * {@code AccessControlContext} was not created by system code and the\n-     * caller's {@code ProtectionDomain} has not been granted the\n-     * {@literal \"createAccessControlContext\"}\n-     * {@link java.security.SecurityPermission}, then the action is performed\n-     * with no permissions.\n@@ -379,1 +117,1 @@\n-     *                  {@code run} method.\n+     *                  {@code run} method\n@@ -381,5 +119,1 @@\n-     * @param context an <i>access control context<\/i>\n-     *                representing the restriction to be applied to the\n-     *                caller's domain's privileges before performing\n-     *                the specified action.  If the context is\n-     *                {@code null}, then no additional restriction is applied.\n+     * @param context ignored\n@@ -387,1 +121,1 @@\n-     * @return the value returned by the action's {@code run} method.\n+     * @return the value returned by the action's {@code run} method\n@@ -391,2 +125,9 @@\n-     * @see #doPrivileged(PrivilegedAction)\n-     * @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n+     * @apiNote This method originally performed the specified\n+     *     {@code PrivilegedAction} with privileges enabled and restricted\n+     *     by the specified {@code AccessControlContext}. Running the\n+     *     action with privileges enabled was only useful in conjunction with\n+     *     {@linkplain SecurityManager the Security Manager}, which is no\n+     *     longer supported. This method has been changed to run the action as\n+     *     is, and has equivalent behavior as if there were no Security Manager\n+     *     enabled. There is no replacement for the Security Manager or this\n+     *     method.\n@@ -394,1 +135,0 @@\n-    @CallerSensitive\n@@ -398,3 +138,2 @@\n-        Class<?> caller = Reflection.getCallerClass();\n-        context = checkContext(context, caller);\n-        return executePrivileged(action, context, caller);\n+        T result = action.run();\n+        return result;\n@@ -403,1 +142,0 @@\n-\n@@ -405,4 +143,1 @@\n-     * Performs the specified {@code PrivilegedAction} with privileges\n-     * enabled and restricted by the specified\n-     * {@code AccessControlContext} and with a privilege scope limited\n-     * by specified {@code Permission} arguments.\n+     * Performs the specified action.\n@@ -410,4 +145,0 @@\n-     * The action is performed with the intersection of the permissions\n-     * possessed by the caller's protection domain, and those possessed\n-     * by the domains represented by the specified\n-     * {@code AccessControlContext}.\n@@ -417,7 +148,0 @@\n-     * <p>\n-     * If a security manager is installed and the specified\n-     * {@code AccessControlContext} was not created by system code and the\n-     * caller's {@code ProtectionDomain} has not been granted the\n-     * {@literal \"createAccessControlContext\"}\n-     * {@link java.security.SecurityPermission}, then the action is performed\n-     * with no permissions.\n@@ -426,11 +150,4 @@\n-     *                  {@code run} method.\n-     * @param action the action to be performed.\n-     * @param context an <i>access control context<\/i>\n-     *                representing the restriction to be applied to the\n-     *                caller's domain's privileges before performing\n-     *                the specified action.  If the context is\n-     *                {@code null},\n-     *                then no additional restriction is applied.\n-     * @param perms the {@code Permission} arguments which limit the\n-     *              scope of the caller's privileges. The number of arguments\n-     *              is variable.\n+     *                  {@code run} method\n+     * @param action the action to be performed\n+     * @param context ignored\n+     * @param perms ignored\n@@ -438,1 +155,1 @@\n-     * @return the value returned by the action's {@code run} method.\n+     * @return the value returned by the action's {@code run} method\n@@ -440,2 +157,1 @@\n-     * @throws NullPointerException if action or perms or any element of\n-     *         perms is {@code null}\n+     * @throws NullPointerException if action is {@code null}\n@@ -443,2 +159,10 @@\n-     * @see #doPrivileged(PrivilegedAction)\n-     * @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n+     * @apiNote This method originally performed the specified\n+     *     {@code PrivilegedAction} with privileges enabled and restricted\n+     *     by the specified {@code AccessControlContext} and with a privilege\n+     *     scope limited by the specified {@code Permission} arguments. Running\n+     *     the action with privileges enabled was only useful in conjunction with\n+     *     {@linkplain SecurityManager the Security Manager}, which is no\n+     *     longer supported. This method has been changed to run the action as\n+     *     is, and has equivalent behavior as if there were no Security Manager\n+     *     enabled. There is no replacement for the Security Manager or this\n+     *     method.\n@@ -448,1 +172,0 @@\n-    @CallerSensitive\n@@ -453,10 +176,2 @@\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext parent = getContext();\n-        if (perms == null) {\n-            throw new NullPointerException(\"null permissions parameter\");\n-        }\n-        Class<?> caller = Reflection.getCallerClass();\n-        @SuppressWarnings(\"removal\")\n-        DomainCombiner dc = (context == null) ? null : context.getCombiner();\n-        return AccessController.doPrivileged(action, createWrapper(dc,\n-            caller, parent, context, perms));\n+        T result = action.run();\n+        return result;\n@@ -465,1 +180,0 @@\n-\n@@ -467,4 +181,1 @@\n-     * Performs the specified {@code PrivilegedAction} with privileges\n-     * enabled and restricted by the specified\n-     * {@code AccessControlContext} and with a privilege scope limited\n-     * by specified {@code Permission} arguments.\n+     * Performs the specified action.\n@@ -472,4 +183,0 @@\n-     * The action is performed with the intersection of the permissions\n-     * possessed by the caller's protection domain, and those possessed\n-     * by the domains represented by the specified\n-     * {@code AccessControlContext}.\n@@ -480,10 +187,0 @@\n-     * <p> This method preserves the current AccessControlContext's\n-     * {@code DomainCombiner} (which may be null) while the action is performed.\n-     * <p>\n-     * If a security manager is installed and the specified\n-     * {@code AccessControlContext} was not created by system code and the\n-     * caller's {@code ProtectionDomain} has not been granted the\n-     * {@literal \"createAccessControlContext\"}\n-     * {@link java.security.SecurityPermission}, then the action is performed\n-     * with no permissions.\n-     *\n@@ -491,13 +188,4 @@\n-     *                  {@code run} method.\n-     * @param action the action to be performed.\n-     * @param context an <i>access control context<\/i>\n-     *                representing the restriction to be applied to the\n-     *                caller's domain's privileges before performing\n-     *                the specified action.  If the context is\n-     *                {@code null},\n-     *                then no additional restriction is applied.\n-     * @param perms the {@code Permission} arguments which limit the\n-     *              scope of the caller's privileges. The number of arguments\n-     *              is variable.\n-     *\n-     * @return the value returned by the action's {@code run} method.\n+     *                  {@code run} method\n+     * @param action the action to be performed\n+     * @param context ignored\n+     * @param perms ignored\n@@ -505,2 +193,1 @@\n-     * @throws NullPointerException if action or perms or any element of\n-     *         perms is {@code null}\n+     * @return the value returned by the action's {@code run} method\n@@ -508,3 +195,14 @@\n-     * @see #doPrivileged(PrivilegedAction)\n-     * @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n-     * @see java.security.DomainCombiner\n+     * @throws NullPointerException if action is {@code null}\n+     *\n+     * @apiNote This method originally performed the specified\n+     *     {@code PrivilegedAction} with privileges enabled and restricted\n+     *     by the specified {@code AccessControlContext} and with a privilege\n+     *     scope limited by the specified {@code Permission} arguments. This\n+     *     method also originally preserved the current access control context's\n+     *     domain combiner while the action was performed. Running the action\n+     *     with privileges enabled was only useful in conjunction with\n+     *     {@linkplain SecurityManager the Security Manager}, which is no\n+     *     longer supported. This method has been changed to run the action as\n+     *     is, and has equivalent behavior as if there were no Security Manager\n+     *     enabled. There is no replacement for the Security Manager or this\n+     *     method.\n@@ -514,1 +212,0 @@\n-    @CallerSensitive\n@@ -519,13 +216,2 @@\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext parent = getContext();\n-        @SuppressWarnings(\"removal\")\n-        DomainCombiner dc = parent.getCombiner();\n-        if (dc == null && context != null) {\n-            dc = context.getCombiner();\n-        }\n-        if (perms == null) {\n-            throw new NullPointerException(\"null permissions parameter\");\n-        }\n-        Class<?> caller = Reflection.getCallerClass();\n-        return AccessController.doPrivileged(action, createWrapper(dc, caller,\n-            parent, context, perms));\n+        T result = action.run();\n+        return result;\n@@ -535,3 +221,1 @@\n-     * Performs the specified {@code PrivilegedExceptionAction} with\n-     * privileges enabled.  The action is performed with <i>all<\/i> of the\n-     * permissions possessed by the caller's protection domain.\n+     * Performs the specified action.\n@@ -542,4 +226,0 @@\n-     * <p> Note that any {@code DomainCombiner} associated with the current\n-     * {@code AccessControlContext} will be ignored while the action is\n-     * performed.\n-     *\n@@ -547,1 +227,1 @@\n-     *                  PrivilegedExceptionAction's {@code run} method.\n+     *                  PrivilegedExceptionAction's {@code run} method\n@@ -557,4 +237,8 @@\n-     * @see #doPrivileged(PrivilegedAction)\n-     * @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n-     * @see #doPrivilegedWithCombiner(PrivilegedExceptionAction)\n-     * @see java.security.DomainCombiner\n+     * @apiNote This method originally performed the specified\n+     *     {@code PrivilegedExceptionAction} with privileges enabled. Running\n+     *     the action with privileges enabled was only useful in conjunction with\n+     *     {@linkplain SecurityManager the Security Manager}, which is no\n+     *     longer supported. This method has been changed to run the action as\n+     *     is, and has equivalent behavior as if there were no Security Manager\n+     *     enabled. There is no replacement for the Security Manager or this\n+     *     method.\n@@ -562,1 +246,0 @@\n-    @CallerSensitive\n@@ -567,3 +250,0 @@\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext context = null;\n-        Class<?> caller = Reflection.getCallerClass();\n@@ -571,1 +251,2 @@\n-            return executePrivileged(action, context, caller);\n+            T result = action.run();\n+            return result;\n@@ -580,3 +261,1 @@\n-     * Performs the specified {@code PrivilegedExceptionAction} with\n-     * privileges enabled.  The action is performed with <i>all<\/i> of the\n-     * permissions possessed by the caller's protection domain.\n+     * Performs the specified action.\n@@ -587,3 +266,0 @@\n-     * <p> This method preserves the current AccessControlContext's\n-     * {@code DomainCombiner} (which may be null) while the action is performed.\n-     *\n@@ -591,1 +267,1 @@\n-     *                  PrivilegedExceptionAction's {@code run} method.\n+     *                  PrivilegedExceptionAction's {@code run} method\n@@ -593,1 +269,1 @@\n-     * @param action the action to be performed.\n+     * @param action the action to be performed\n@@ -601,3 +277,9 @@\n-     * @see #doPrivileged(PrivilegedAction)\n-     * @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n-     * @see java.security.DomainCombiner\n+     * @apiNote This method originally performed the specified\n+     *     {@code PrivilegedExceptionAction} with privileges enabled and with\n+     *     the current access control context's domain combiner preserved.\n+     *     Running the action with privileges enabled was only useful in\n+     *     conjunction with {@linkplain SecurityManager the Security Manager},\n+     *     which is no longer supported. This method has been changed to run\n+     *     the action as is, and has equivalent behavior as if there were no\n+     *     Security Manager enabled. There is no replacement for the Security\n+     *     Manager or this method.\n@@ -607,1 +289,0 @@\n-    @CallerSensitive\n@@ -611,40 +292,7 @@\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext acc = getStackAccessControlContext();\n-        if (acc == null) {\n-            return AccessController.doPrivileged(action);\n-        }\n-        @SuppressWarnings(\"removal\")\n-        DomainCombiner dc = acc.getAssignedCombiner();\n-        return AccessController.doPrivileged(action,\n-                                             preserveCombiner(dc, Reflection.getCallerClass()));\n-    }\n-\n-    \/**\n-     * preserve the combiner across the doPrivileged call\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext preserveCombiner(DomainCombiner combiner,\n-                                                         Class<?> caller)\n-    {\n-        return createWrapper(combiner, caller, null, null, null);\n-    }\n-\n-    \/**\n-     * Create a wrapper to contain the limited privilege scope data.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext\n-        createWrapper(DomainCombiner combiner, Class<?> caller,\n-                      AccessControlContext parent, AccessControlContext context,\n-                      Permission[] perms)\n-    {\n-        ProtectionDomain callerPD = getProtectionDomain(caller);\n-        \/\/ check if caller is authorized to create context\n-        if (System.getSecurityManager() != null &&\n-            context != null && !context.isAuthorized() &&\n-            !callerPD.implies(SecurityConstants.CREATE_ACC_PERMISSION))\n-        {\n-            return getInnocuousAcc();\n-        } else {\n-            return new AccessControlContext(callerPD, combiner, parent,\n-                                            context, perms);\n+        try {\n+            T result = action.run();\n+            return result;\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw wrapException(e);\n@@ -654,15 +302,0 @@\n-    private static class AccHolder {\n-        \/\/ An AccessControlContext with no granted permissions.\n-        \/\/ Only initialized on demand when getInnocuousAcc() is called.\n-        @SuppressWarnings(\"removal\")\n-        static final AccessControlContext innocuousAcc =\n-            new AccessControlContext(new ProtectionDomain[] {\n-                                     new ProtectionDomain(null, null) });\n-    }\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext getInnocuousAcc() {\n-        return AccHolder.innocuousAcc;\n-    }\n-\n-    private static native ProtectionDomain getProtectionDomain(final Class<?> caller);\n-\n@@ -670,6 +303,1 @@\n-     * Performs the specified {@code PrivilegedExceptionAction} with\n-     * privileges enabled and restricted by the specified\n-     * {@code AccessControlContext}.  The action is performed with the\n-     * intersection of the permissions possessed by the caller's\n-     * protection domain, and those possessed by the domains represented by the\n-     * specified {@code AccessControlContext}.\n+     * Performs the specified action.\n@@ -679,7 +307,0 @@\n-     * <p>\n-     * If a security manager is installed and the specified\n-     * {@code AccessControlContext} was not created by system code and the\n-     * caller's {@code ProtectionDomain} has not been granted the\n-     * {@literal \"createAccessControlContext\"}\n-     * {@link java.security.SecurityPermission}, then the action is performed\n-     * with no permissions.\n@@ -688,1 +309,1 @@\n-     *                  PrivilegedExceptionAction's {@code run} method.\n+     *                  PrivilegedExceptionAction's {@code run} method\n@@ -690,5 +311,1 @@\n-     * @param context an <i>access control context<\/i>\n-     *                representing the restriction to be applied to the\n-     *                caller's domain's privileges before performing\n-     *                the specified action.  If the context is\n-     *                {@code null}, then no additional restriction is applied.\n+     * @param context ignored\n@@ -704,0 +321,9 @@\n+     * @apiNote This method originally performed the specified\n+     *     {@code PrivilegedExceptionAction} with privileges enabled and\n+     *     restricted by the specified {@code AccessControlContext}. Running the\n+     *     action with privileges enabled was only useful in conjunction with\n+     *     {@linkplain SecurityManager the Security Manager}, which is no\n+     *     longer supported. This method has been changed to run the action as\n+     *     is, and has equivalent behavior as if there were no Security Manager\n+     *     enabled. There is no replacement for the Security Manager or this\n+     *     method.\n@@ -705,1 +331,0 @@\n-    @CallerSensitive\n@@ -711,2 +336,0 @@\n-        Class<?> caller = Reflection.getCallerClass();\n-        context = checkContext(context, caller);\n@@ -714,1 +337,2 @@\n-            return executePrivileged(action, context, caller);\n+            T result = action.run();\n+            return result;\n@@ -722,112 +346,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext checkContext(AccessControlContext context,\n-        Class<?> caller)\n-    {\n-        \/\/ check if caller is authorized to create context\n-        if (System.getSecurityManager() != null &&\n-            context != null && !context.isAuthorized() &&\n-            context != getInnocuousAcc())\n-        {\n-            ProtectionDomain callerPD = getProtectionDomain(caller);\n-            if (callerPD != null && !callerPD.implies(SecurityConstants.CREATE_ACC_PERMISSION)) {\n-                return getInnocuousAcc();\n-            }\n-        }\n-        return context;\n-    }\n-\n-    \/**\n-     * The value needs to be physically located in the frame, so that it\n-     * can be found by a stack walk.\n-     *\/\n-    @Hidden\n-    private static native void ensureMaterializedForStackWalk(Object o);\n-\n-    \/**\n-     * Sanity check that the caller context is indeed privileged.\n-     *\n-     * Used by {@code executePrivileged} to make sure the frame is properly\n-     * recognized by the VM.\n-     *\/\n-    private static boolean isPrivileged() {\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext ctx = getStackAccessControlContext();\n-        return ctx == null || ctx.isPrivileged();\n-    }\n-\n-    \/**\n-     * Execute the action as privileged.\n-     *\n-     * The VM recognizes this method as special, so any changes to the\n-     * name or signature require corresponding changes in\n-     * getStackAccessControlContext().\n-     *\/\n-    @Hidden\n-    @ForceInline\n-    private static <T> T\n-        executePrivileged(PrivilegedAction<T> action,\n-                          @SuppressWarnings(\"removal\") AccessControlContext context,\n-                          Class<?> caller)\n-    {\n-        \/\/ Ensure context has a physical value in the frame\n-        if (context != null) {\n-            ensureMaterializedForStackWalk(context);\n-        }\n-\n-        assert isPrivileged(); \/\/ sanity check invariant\n-        T result = action.run();\n-        assert isPrivileged(); \/\/ sanity check invariant\n-\n-        \/\/ The 'getStackAccessControlContext' call inside 'isPrivileged'\n-        \/\/ requires that no Local was scalar replaced. However, in some\n-        \/\/ situations, after inlining, 'result' (or part of a possibly\n-        \/\/ allocation merge Phi leading to it) might become NonEscaping and get\n-        \/\/ scalar replaced. The call below enforces 'result' to always escape.\n-        ensureMaterializedForStackWalk(result);\n-\n-        \/\/ Keep these alive across the run() call so they can be\n-        \/\/ retrieved by getStackAccessControlContext().\n-        Reference.reachabilityFence(context);\n-        Reference.reachabilityFence(caller);\n-        return result;\n-    }\n-\n-    \/**\n-     * Execute the action as privileged.\n-     *\n-     * The VM recognizes this method as special, so any changes to the\n-     * name or signature require corresponding changes in\n-     * getStackAccessControlContext().\n-     *\/\n-    @Hidden\n-    @ForceInline\n-    private static <T> T\n-        executePrivileged(PrivilegedExceptionAction<T> action,\n-                          @SuppressWarnings(\"removal\") AccessControlContext context,\n-                          Class<?> caller)\n-        throws Exception\n-    {\n-        \/\/ Ensure context has a physical value in the frame\n-        if (context != null) {\n-            ensureMaterializedForStackWalk(context);\n-        }\n-\n-        assert isPrivileged(); \/\/ sanity check invariant\n-        T result = action.run();\n-        assert isPrivileged(); \/\/ sanity check invariant\n-\n-        \/\/ The 'getStackAccessControlContext' call inside 'isPrivileged'\n-        \/\/ requires that no Local was scalar replaced. However, in some\n-        \/\/ situations, after inlining, 'result' (or part of a possibly\n-        \/\/ allocation merge Phi leading to it) might become NonEscaping and get\n-        \/\/ scalar replaced. The call below enforces 'result' to always escape.\n-        ensureMaterializedForStackWalk(result);\n-\n-        \/\/ Keep these alive across the run() call so they can be\n-        \/\/ retrieved by getStackAccessControlContext().\n-        Reference.reachabilityFence(context);\n-        Reference.reachabilityFence(caller);\n-        return result;\n-    }\n-\n-\n@@ -835,17 +347,1 @@\n-     * Wrap an exception.  The annotations are used in a best effort to\n-     * avoid StackOverflowError in the caller.  Inlining the callees as\n-     * well and tail-call elimination could also help here, but are not\n-     * needed for correctness, only quality of implementation.\n-     *\/\n-    @Hidden\n-    @ForceInline\n-    @ReservedStackAccess\n-    private static PrivilegedActionException wrapException(Exception e) {\n-        return new PrivilegedActionException(e);\n-    }\n-\n-    \/**\n-     * Performs the specified {@code PrivilegedExceptionAction} with\n-     * privileges enabled and restricted by the specified\n-     * {@code AccessControlContext} and with a privilege scope limited by\n-     * specified {@code Permission} arguments.\n+     * Performs the specified action.\n@@ -853,4 +349,0 @@\n-     * The action is performed with the intersection of the permissions\n-     * possessed by the caller's protection domain, and those possessed\n-     * by the domains represented by the specified\n-     * {@code AccessControlContext}.\n@@ -860,7 +352,0 @@\n-     * <p>\n-     * If a security manager is installed and the specified\n-     * {@code AccessControlContext} was not created by system code and the\n-     * caller's {@code ProtectionDomain} has not been granted the\n-     * {@literal \"createAccessControlContext\"}\n-     * {@link java.security.SecurityPermission}, then the action is performed\n-     * with no permissions.\n@@ -869,11 +354,4 @@\n-     *                  PrivilegedExceptionAction's {@code run} method.\n-     * @param action the action to be performed.\n-     * @param context an <i>access control context<\/i>\n-     *                representing the restriction to be applied to the\n-     *                caller's domain's privileges before performing\n-     *                the specified action.  If the context is\n-     *                {@code null},\n-     *                then no additional restriction is applied.\n-     * @param perms the {@code Permission} arguments which limit the\n-     *              scope of the caller's privileges. The number of arguments\n-     *              is variable.\n+     *                  PrivilegedExceptionAction's {@code run} method\n+     * @param action the action to be performed\n+     * @param context ignored\n+     * @param perms ignored\n@@ -881,1 +359,1 @@\n-     * @return the value returned by the action's {@code run} method.\n+     * @return the value returned by the action's {@code run} method\n@@ -885,5 +363,12 @@\n-     * @throws NullPointerException if action or perms or any element of\n-     *         perms is {@code null}\n-     *\n-     * @see #doPrivileged(PrivilegedAction)\n-     * @see #doPrivileged(PrivilegedAction,AccessControlContext)\n+     * @throws NullPointerException if action is {@code null}\n+     *\n+     * @apiNote This method originally performed the specified\n+     *     {@code PrivilegedExceptionAction} with privileges enabled and\n+     *     restricted by the specified {@code AccessControlContext} and with a\n+     *     privilege scope limited by the specified {@code Permission}\n+     *     arguments. Running the action with privileges enabled was only useful\n+     *     in conjunction with {@linkplain SecurityManager the Security Manager},\n+     *     which is no longer supported. This method has been changed to run\n+     *     the action as is, and has equivalent behavior as if there were no\n+     *     Security Manager enabled. There is no replacement for the Security\n+     *     Manager or this method.\n@@ -893,1 +378,0 @@\n-    @CallerSensitive\n@@ -899,4 +383,7 @@\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext parent = getContext();\n-        if (perms == null) {\n-            throw new NullPointerException(\"null permissions parameter\");\n+        try {\n+            T result = action.run();\n+            return result;\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw wrapException(e);\n@@ -904,4 +391,0 @@\n-        Class<?> caller = Reflection.getCallerClass();\n-        @SuppressWarnings(\"removal\")\n-        DomainCombiner dc = (context == null) ? null : context.getCombiner();\n-        return AccessController.doPrivileged(action, createWrapper(dc, caller, parent, context, perms));\n@@ -910,0 +393,3 @@\n+    private static PrivilegedActionException wrapException(Exception e) {\n+         return new PrivilegedActionException(e);\n+    }\n@@ -912,4 +398,1 @@\n-     * Performs the specified {@code PrivilegedExceptionAction} with\n-     * privileges enabled and restricted by the specified\n-     * {@code AccessControlContext} and with a privilege scope limited by\n-     * specified {@code Permission} arguments.\n+     * Performs the specified action.\n@@ -917,4 +400,0 @@\n-     * The action is performed with the intersection of the permissions\n-     * possessed by the caller's protection domain, and those possessed\n-     * by the domains represented by the specified\n-     * {@code AccessControlContext}.\n@@ -925,10 +404,0 @@\n-     * <p> This method preserves the current AccessControlContext's\n-     * {@code DomainCombiner} (which may be null) while the action is performed.\n-     * <p>\n-     * If a security manager is installed and the specified\n-     * {@code AccessControlContext} was not created by system code and the\n-     * caller's {@code ProtectionDomain} has not been granted the\n-     * {@literal \"createAccessControlContext\"}\n-     * {@link java.security.SecurityPermission}, then the action is performed\n-     * with no permissions.\n-     *\n@@ -936,11 +405,4 @@\n-     *                  PrivilegedExceptionAction's {@code run} method.\n-     * @param action the action to be performed.\n-     * @param context an <i>access control context<\/i>\n-     *                representing the restriction to be applied to the\n-     *                caller's domain's privileges before performing\n-     *                the specified action.  If the context is\n-     *                {@code null},\n-     *                then no additional restriction is applied.\n-     * @param perms the {@code Permission} arguments which limit the\n-     *              scope of the caller's privileges. The number of arguments\n-     *              is variable.\n+     *                  PrivilegedExceptionAction's {@code run} method\n+     * @param action the action to be performed\n+     * @param context ignored\n+     * @param perms ignored\n@@ -948,1 +410,1 @@\n-     * @return the value returned by the action's {@code run} method.\n+     * @return the value returned by the action's {@code run} method\n@@ -952,6 +414,14 @@\n-     * @throws NullPointerException if action or perms or any element of\n-     *         perms is {@code null}\n-     *\n-     * @see #doPrivileged(PrivilegedAction)\n-     * @see #doPrivileged(PrivilegedAction,AccessControlContext)\n-     * @see java.security.DomainCombiner\n+     * @throws NullPointerException if action is {@code null}\n+     *\n+     * @apiNote This method originally performed the specified\n+     *     {@code PrivilegedExceptionAction} with privileges enabled and\n+     *     restricted by the specified {@code AccessControlContext} and with a\n+     *     privilege scope limited by the specified {@code Permission}\n+     *     arguments. This method also preserved the current access control\n+     *     context's domain combiner while the action was performed. Running\n+     *     the action with privileges enabled was only useful in conjunction\n+     *     with {@linkplain SecurityManager the Security Manager}, which is no\n+     *     longer supported. This method has been changed to run the action as\n+     *     is, and has equivalent behavior as if there were no Security Manager\n+     *     enabled. There is no replacement for the Security Manager or this\n+     *     method.\n@@ -961,1 +431,0 @@\n-    @CallerSensitive\n@@ -967,9 +436,7 @@\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext parent = getContext();\n-        @SuppressWarnings(\"removal\")\n-        DomainCombiner dc = parent.getCombiner();\n-        if (dc == null && context != null) {\n-            dc = context.getCombiner();\n-        }\n-        if (perms == null) {\n-            throw new NullPointerException(\"null permissions parameter\");\n+        try {\n+            T result = action.run();\n+            return result;\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw wrapException(e);\n@@ -977,3 +444,0 @@\n-        Class<?> caller = Reflection.getCallerClass();\n-        return AccessController.doPrivileged(action, createWrapper(dc, caller,\n-            parent, context, perms));\n@@ -982,10 +446,0 @@\n-    \/**\n-     * Returns the {@code AccessControlContext}. i.e., it gets\n-     * the protection domains of all the callers on the stack,\n-     * starting at the first class with a non-null\n-     * {@code ProtectionDomain}.\n-     *\n-     * @return the access control context based on the current stack or\n-     *         {@code null} if there was only privileged system code.\n-     *\/\n-\n@@ -993,2 +447,4 @@\n-    private static native AccessControlContext getStackAccessControlContext();\n-\n+    private static AccessControlContext NO_PERMISSIONS_ACC =\n+        new AccessControlContext(new ProtectionDomain[] {\n+            new ProtectionDomain(null, null)\n+    });\n@@ -997,14 +453,3 @@\n-     * Returns the \"inherited\" {@code AccessControlContext}. This is the context\n-     * that existed when the thread was created. Package private so\n-     * {@code AccessControlContext} can use it.\n-     *\/\n-\n-    @SuppressWarnings(\"removal\")\n-    static native AccessControlContext getInheritedAccessControlContext();\n-\n-    \/**\n-     * This method takes a \"snapshot\" of the current calling context, which\n-     * includes the current thread's inherited {@code AccessControlContext}\n-     * and any limited privilege scope, and places it in an\n-     * {@code AccessControlContext} object.\n-     * This context may then be checked at a later point, possibly in another thread.\n+     * Returns an {@code AccessControlContext} where the {@code checkPermission}\n+     * method always throws an {@code AccessControlException} and the\n+     * {@code getDomainCombiner} method always returns {@code null}.\n@@ -1012,1 +457,1 @@\n-     * @see AccessControlContext\n+     * @return an {@code AccessControlContext} as specified above\n@@ -1014,1 +459,10 @@\n-     * @return the {@code AccessControlContext} based on the current context.\n+     * @see AccessControlContext\n+     * @apiNote This method originally returned a snapshot of the current\n+     *       calling context, which included the current thread's access\n+     *       control context and any limited privilege scope. This method has\n+     *       been changed to always return an innocuous\n+     *       {@code AccessControlContext} that fails all permission checks.\n+     *       This method was only useful in conjunction with\n+     *       {@linkplain SecurityManager the Security Manager}, which is no\n+     *       longer supported. There is no replacement for the Security Manager\n+     *       or this method.\n@@ -1016,1 +470,0 @@\n-\n@@ -1020,8 +473,1 @@\n-        AccessControlContext acc = getStackAccessControlContext();\n-        if (acc == null) {\n-            \/\/ all we had was privileged system code. We don't want\n-            \/\/ to return null though, so we construct a real ACC.\n-            return new AccessControlContext(null, true);\n-        } else {\n-            return acc.optimize();\n-        }\n+        return NO_PERMISSIONS_ACC;\n@@ -1031,15 +477,13 @@\n-     * Determines whether the access request indicated by the\n-     * specified permission should be allowed or denied, based on\n-     * the current {@code AccessControlContext} and security policy.\n-     * This method quietly returns if the access request\n-     * is permitted, or throws an {@code AccessControlException} otherwise. The\n-     * {@code getPermission} method of the {@code AccessControlException}\n-     * returns the {@code Permission} object instance ({@code perm}}.\n-     *\n-     * @param perm the requested permission.\n-     *\n-     * @throws    AccessControlException if the specified permission\n-     *            is not permitted, based on the current security policy.\n-     * @throws    NullPointerException if the specified permission\n-     *            is {@code null} and is checked based on the\n-     *            security policy currently in effect.\n+     * Throws {@code AccessControlException}.\n+     *\n+     * @param perm ignored\n+     * @throws    AccessControlException always\n+     *\n+     * @apiNote This method originally determined whether the access request\n+     *       indicated by the specified permission should be allowed or denied,\n+     *       based on the current {@code AccessControlContext} and security\n+     *       policy. This method has been changed to always throw\n+     *       {@code AccessControlException}. This method was only useful in\n+     *       conjunction with {@linkplain SecurityManager the Security Manager},\n+     *       which is no longer supported. There is no replacement for the\n+     *       Security Manager or this method.\n@@ -1047,1 +491,0 @@\n-\n@@ -1052,34 +495,1 @@\n-        \/\/System.err.println(\"checkPermission \"+perm);\n-        \/\/Thread.currentThread().dumpStack();\n-\n-        if (perm == null) {\n-            throw new NullPointerException(\"permission can't be null\");\n-        }\n-\n-        AccessControlContext stack = getStackAccessControlContext();\n-        \/\/ if context is null, we had privileged system code on the stack.\n-        if (stack == null) {\n-            Debug debug = AccessControlContext.getDebug();\n-            boolean dumpDebug = false;\n-            if (debug != null) {\n-                dumpDebug = !Debug.isOn(\"codebase=\");\n-                dumpDebug &= !Debug.isOn(\"permission=\") ||\n-                    Debug.isOn(\"permission=\" + perm.getClass().getCanonicalName());\n-            }\n-\n-            if (dumpDebug && Debug.isOn(\"stack\")) {\n-                Thread.dumpStack();\n-            }\n-\n-            if (dumpDebug && Debug.isOn(\"domain\")) {\n-                debug.println(\"domain (context is null)\");\n-            }\n-\n-            if (dumpDebug) {\n-                debug.println(\"access allowed \"+perm);\n-            }\n-            return;\n-        }\n-\n-        AccessControlContext acc = stack.optimize();\n-        acc.checkPermission(perm);\n+        throw new AccessControlException(\"checking permissions is not supported\");\n","filename":"src\/java.base\/share\/classes\/java\/security\/AccessController.java","additions":225,"deletions":815,"binary":false,"changes":1040,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,9 +34,4 @@\n- * <p>\n- * <b>Note:<\/b> Granting {@code AllPermission} should be done with extreme care,\n- * as it implies all other permissions. Thus, it grants code the ability\n- * to run with security\n- * disabled.  Extreme caution should be taken before granting such\n- * a permission to code.  This permission should be used only during testing,\n- * or in extremely rare cases where an application or applet is\n- * completely trusted and adding the necessary permissions to the policy\n- * is prohibitively cumbersome.\n+ *\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n@@ -45,1 +40,0 @@\n- * @see java.security.AccessController\n@@ -48,2 +42,0 @@\n- * @see java.lang.SecurityManager\n- *\n","filename":"src\/java.base\/share\/classes\/java\/security\/AllPermission.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,5 +101,0 @@\n-     * @throws SecurityException if the caller does not pass a\n-     *  security check for\n-     *  {@code SecurityPermission(\"authProvider.name\")},\n-     *  where {@code name} is the value returned by\n-     *  this provider's {@code getName} method\n@@ -116,5 +111,0 @@\n-     * @throws SecurityException if the caller does not pass a\n-     *  security check for\n-     *  {@code SecurityPermission(\"authProvider.name\")},\n-     *  where {@code name} is the value returned by\n-     *  this provider's {@code getName} method\n@@ -143,5 +133,0 @@\n-     * @throws SecurityException if the caller does not pass a\n-     *  security check for\n-     *  {@code SecurityPermission(\"authProvider.name\")},\n-     *  where {@code name} is the value returned by\n-     *  this provider's {@code getName} method\n","filename":"src\/java.base\/share\/classes\/java\/security\/AuthProvider.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,3 @@\n- * A {@code DomainCombiner} provides a means to dynamically\n- * update the ProtectionDomains associated with the current\n- * {@code AccessControlContext}.\n+ * {@code DomainCombiner} was used to dynamically update\n+ * {@code ProtectionDomain}s for access control operations and decisions. This\n+ * feature no longer exists.\n@@ -33,46 +33,0 @@\n- * <p> A {@code DomainCombiner} is passed as a parameter to the\n- * appropriate constructor for {@code AccessControlContext}.\n- * The newly constructed context is then passed to the\n- * {@code AccessController.doPrivileged(..., context)} method\n- * to bind the provided context (and associated {@code DomainCombiner})\n- * with the current execution thread.  Subsequent calls to\n- * {@code AccessController.getContext} or\n- * {@code AccessController.checkPermission}\n- * cause the {@code DomainCombiner.combine} to get invoked.\n- *\n- * <p> The combine method takes two arguments.  The first argument represents\n- * an array of ProtectionDomains from the current execution thread,\n- * since the most recent call to {@code AccessController.doPrivileged}.\n- * If no call to doPrivileged was made, then the first argument will contain\n- * all the ProtectionDomains from the current execution thread.\n- * The second argument represents an array of inherited ProtectionDomains,\n- * which may be {@code null}.  ProtectionDomains may be inherited\n- * from a parent thread, or from a privileged context.  If no call to\n- * doPrivileged was made, then the second argument will contain the\n- * ProtectionDomains inherited from the parent thread.  If one or more calls\n- * to doPrivileged were made, and the most recent call was to\n- * doPrivileged(action, context), then the second argument will contain the\n- * ProtectionDomains from the privileged context.  If the most recent call\n- * was to doPrivileged(action), then there is no privileged context,\n- * and the second argument will be {@code null}.\n- *\n- * <p> The {@code combine} method investigates the two input arrays\n- * of ProtectionDomains and returns a single array containing the updated\n- * ProtectionDomains.  In the simplest case, the {@code combine}\n- * method merges the two stacks into one.  In more complex cases,\n- * the {@code combine} method returns a modified\n- * stack of ProtectionDomains.  The modification may have added new\n- * ProtectionDomains, removed certain ProtectionDomains, or simply\n- * updated existing ProtectionDomains.  Re-ordering and other optimizations\n- * to the ProtectionDomains are also permitted.  Typically the\n- * {@code combine} method bases its updates on the information\n- * encapsulated in the {@code DomainCombiner}.\n- *\n- * <p> After the {@code AccessController.getContext} method\n- * receives the combined stack of ProtectionDomains back from\n- * the {@code DomainCombiner}, it returns a new\n- * AccessControlContext that has both the combined ProtectionDomains\n- * as well as the {@code DomainCombiner}.\n- *\n- * @see AccessController\n- * @see AccessControlContext\n@@ -80,5 +34,3 @@\n- * @deprecated This class is only useful in conjunction with\n- *       {@linkplain SecurityManager the Security Manager}, which is deprecated\n- *       and subject to removal in a future release. Consequently, this class\n- *       is also deprecated and subject to removal. There is no replacement for\n- *       the Security Manager or this class.\n+ * @deprecated This class was only useful in conjunction with {@linkplain\n+ *       SecurityManager the Security Manager}, which is no longer supported.\n+ *       There is no replacement for the Security Manager or this class.\n","filename":"src\/java.base\/share\/classes\/java\/security\/DomainCombiner.java","additions":7,"deletions":55,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,4 +171,0 @@\n-     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n-     * method is called with {@code \"setIdentityPublicKey\"}\n-     * as its argument to see if it's ok to set the public key.\n-     *\n@@ -180,4 +176,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     * {@code checkSecurityAccess} method doesn't allow\n-     * setting the public key.\n-     *\n@@ -185,1 +177,0 @@\n-     * @see SecurityManager#checkSecurityAccess\n@@ -198,4 +189,0 @@\n-     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n-     * method is called with {@code \"setIdentityInfo\"}\n-     * as its argument to see if it's ok to specify the information string.\n-     *\n@@ -204,4 +191,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     * {@code checkSecurityAccess} method doesn't allow\n-     * setting the information string.\n-     *\n@@ -209,1 +192,0 @@\n-     * @see SecurityManager#checkSecurityAccess\n@@ -233,4 +215,0 @@\n-     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n-     * method is called with {@code \"addIdentityCertificate\"}\n-     * as its argument to see if it's ok to add a certificate.\n-     *\n@@ -242,6 +220,0 @@\n-     *\n-     * @throws     SecurityException  if a security manager exists and its\n-     * {@code checkSecurityAccess} method doesn't allow\n-     * adding a certificate.\n-     *\n-     * @see SecurityManager#checkSecurityAccess\n@@ -284,4 +256,0 @@\n-     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n-     * method is called with {@code \"removeIdentityCertificate\"}\n-     * as its argument to see if it's ok to remove a certificate.\n-     *\n@@ -292,6 +260,0 @@\n-     *\n-     * @throws     SecurityException  if a security manager exists and its\n-     * {@code checkSecurityAccess} method doesn't allow\n-     * removing a certificate.\n-     *\n-     * @see SecurityManager#checkSecurityAccess\n@@ -395,4 +357,0 @@\n-     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n-     * method is called with {@code \"printIdentity\"}\n-     * as its argument to see if it's ok to return the string.\n-     *\n@@ -401,6 +359,0 @@\n-     *\n-     * @throws     SecurityException  if a security manager exists and its\n-     * {@code checkSecurityAccess} method doesn't allow\n-     * returning a string describing this {@code Identity}.\n-     *\n-     * @see SecurityManager#checkSecurityAccess\n@@ -422,4 +374,0 @@\n-     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n-     * method is called with {@code \"printIdentity\"}\n-     * as its argument to see if it's ok to return the string.\n-     *\n@@ -432,4 +380,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     * {@code checkSecurityAccess} method doesn't allow\n-     * returning a string describing this {@code Identity}.\n-     *\n@@ -437,1 +381,0 @@\n-     * @see SecurityManager#checkSecurityAccess\n","filename":"src\/java.base\/share\/classes\/java\/security\/Identity.java","additions":1,"deletions":58,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,5 +151,0 @@\n-     * <p>First, if there is a security manager, its\n-     * {@code checkSecurityAccess}\n-     * method is called with {@code \"setSystemScope\"}\n-     * as its argument to see if it's ok to set the identity scope.\n-     *\n@@ -158,4 +153,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     * {@code checkSecurityAccess} method doesn't allow\n-     * setting the identity scope.\n-     *\n@@ -163,1 +154,0 @@\n-     * @see SecurityManager#checkSecurityAccess\n","filename":"src\/java.base\/share\/classes\/java\/security\/IdentityScope.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1697,3 +1697,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *             {@link java.lang.SecurityManager#checkRead} method denies\n-     *             read access to the specified file.\n@@ -1754,3 +1751,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *             {@link java.lang.SecurityManager#checkRead} method denies\n-     *             read access to the specified file.\n@@ -1973,4 +1967,0 @@\n-         * <p><em>Note<\/em> that the {@link #getKeyStore} method is executed\n-         * within the {@link AccessControlContext} of the code invoking this\n-         * method.\n-         *\n@@ -2037,4 +2027,0 @@\n-         * <p><em>Note<\/em> that the {@link #getKeyStore} method is executed\n-         * within the {@link AccessControlContext} of the code invoking this\n-         * method.\n-         *\n@@ -2199,4 +2185,0 @@\n-         * <p><em>Note<\/em> that the {@link #getKeyStore} method is executed\n-         * within the {@link AccessControlContext} of the code invoking this\n-         * method.\n-         *\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,3 +88,1 @@\n-     * Implements the guard interface for a permission. The\n-     * {@code SecurityManager.checkPermission} method is called,\n-     * passing this permission object as the permission to check.\n+     * Implements the guard interface for a permission.\n@@ -94,0 +92,7 @@\n+     * @apiNote This method originally threw a {@code SecurityException} if a\n+     *       security manager was enabled and the requested access, specified\n+     *       by this permission, was not permitted.\n+     *       {@linkplain SecurityManager The Security Manager} is no longer\n+     *       supported; thus, this method always throws a\n+     *       {@code SecurityException}.\n+     *\n@@ -96,3 +101,1 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow access.\n+     * @throws SecurityException always\n@@ -102,1 +105,0 @@\n-     * @see SecurityManager#checkPermission\n@@ -105,0 +107,1 @@\n+    @Override\n@@ -106,3 +109,1 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) sm.checkPermission(this);\n+        throw new SecurityException(\"checking permissions is not supported\");\n@@ -119,4 +120,0 @@\n-     * <p>The {@code implies} method is used by the AccessController to determine\n-     * whether a requested permission is implied by another permission that\n-     * is known to be valid in the current execution context.\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/security\/Permission.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.WeakHashMap;\n@@ -33,3 +32,0 @@\n-import sun.security.util.Debug;\n-import sun.security.util.SecurityConstants;\n-\n@@ -38,40 +34,3 @@\n- * A {@code Policy} object is responsible for determining whether code executing\n- * in the Java runtime environment has permission to perform a\n- * security-sensitive operation.\n- *\n- * <p> There is only one {@code Policy} object installed in the runtime at any\n- * given time.  A {@code Policy} object can be installed by calling the\n- * {@code setPolicy} method.  The installed {@code Policy} object can be\n- * obtained by calling the {@code getPolicy} method.\n- *\n- * <p> If no {@code Policy} object has been installed in the runtime, a call to\n- * {@code getPolicy} installs an instance of the default {@code Policy}\n- * implementation (a default subclass implementation of this abstract class).\n- * The default {@code Policy} implementation can be changed by setting the value\n- * of the {@code policy.provider} security property to the fully qualified\n- * name of the desired {@code Policy} subclass implementation. The system\n- * class loader is used to load this class.\n- *\n- * <p> Application code can directly subclass {@code Policy} to provide a custom\n- * implementation.  In addition, an instance of a {@code Policy} object can be\n- * constructed by invoking one of the {@code getInstance} factory methods\n- * with a standard type.  The default policy type is \"JavaPolicy\".\n- *\n- * <p> Once a {@code Policy} instance has been installed (either by default,\n- * or by calling {@code setPolicy}), the Java runtime invokes its\n- * {@code implies} method when it needs to\n- * determine whether executing code (encapsulated in a ProtectionDomain)\n- * can perform SecurityManager-protected operations.  How a {@code Policy}\n- * object retrieves its policy data is up to the {@code Policy} implementation\n- * itself. The policy data may be stored, for example, in a flat ASCII file,\n- * in a serialized binary file of the {@code Policy} class, or in a database.\n- *\n- * <p> The {@code refresh} method causes the policy object to\n- * refresh\/reload its data.  This operation is implementation-dependent.\n- * For example, if the policy object stores its data in configuration files,\n- * calling {@code refresh} will cause it to re-read the configuration\n- * policy files.  If a refresh operation is not supported, this method does\n- * nothing.  Note that refreshed policy may not have an effect on classes\n- * in a particular ProtectionDomain. This is dependent on the policy\n- * provider's implementation of the {@code implies}\n- * method and its PermissionCollection caching strategy.\n+ * A {@code Policy} object was responsible for determining whether code\n+ * executing in the Java runtime environment had permission to perform a\n+ * security-sensitive operation. This feature no longer exists.\n@@ -82,9 +41,8 @@\n- * @see java.security.Provider\n- * @see java.security.ProtectionDomain\n- * @see java.security.Permission\n- * @see java.security.Security security properties\n- * @deprecated This class is only useful in conjunction with\n- *       {@linkplain SecurityManager the Security Manager}, which is deprecated\n- *       and subject to removal in a future release. Consequently, this class\n- *       is also deprecated and subject to removal. There is no replacement for\n- *       the Security Manager or this class.\n+ * @deprecated This class was only useful in conjunction with\n+ *       {@linkplain SecurityManager the Security Manager}, which is no longer\n+ *       supported. Installing a system-wide {@code Policy} object is no longer\n+ *       supported. The {@linkplain #setPolicy setPolicy} method has been\n+ *       changed to always throw {@code UnsupportedOperationException}. The\n+ *       {@linkplain getPolicy getPolicy} method has been changed to always\n+ *       return a {@code Policy} object that grants no permissions. There is no\n+ *       replacement for the Security Manager or this class.\n@@ -96,0 +54,2 @@\n+    private static Policy NO_PERMISSIONS_POLICY = new Policy() {};\n+\n@@ -108,41 +68,0 @@\n-    \/\/ Information about the system-wide policy.\n-    private static class PolicyInfo {\n-        \/\/ the system-wide policy\n-        final Policy policy;\n-        \/\/ a flag indicating if the system-wide policy has been initialized\n-        final boolean initialized;\n-\n-        PolicyInfo(Policy policy, boolean initialized) {\n-            this.policy = policy;\n-            this.initialized = initialized;\n-        }\n-    }\n-\n-    \/\/ PolicyInfo is volatile since we apply DCL during initialization.\n-    \/\/ For correctness, care must be taken to read the field only once and only\n-    \/\/ write to it after any other initialization action has taken place.\n-    private static volatile PolicyInfo policyInfo = new PolicyInfo(null, false);\n-\n-    private static final Debug debug = Debug.getInstance(\"policy\");\n-\n-    \/\/ Default policy provider\n-    private static final String DEFAULT_POLICY =\n-        \"sun.security.provider.PolicyFile\";\n-\n-    \/\/ Cache mapping ProtectionDomain.Key to PermissionCollection\n-    private WeakHashMap<ProtectionDomain.Key, PermissionCollection> pdMapping;\n-\n-    \/** package private for AccessControlContext and ProtectionDomain *\/\n-    static boolean isSet() {\n-        PolicyInfo pi = policyInfo;\n-        return pi.policy != null && pi.initialized == true;\n-    }\n-\n-    private static void checkPermission(String type) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new SecurityPermission(\"createPolicy.\" + type));\n-        }\n-    }\n-\n@@ -150,13 +69,21 @@\n-     * Returns the installed {@code Policy} object. This value should not be\n-     * cached, as it may be changed by a call to {@code setPolicy}.\n-     * This method first calls\n-     * {@code SecurityManager.checkPermission} with a\n-     * {@code SecurityPermission(\"getPolicy\")} permission\n-     * to ensure it's ok to get the {@code Policy} object.\n-     *\n-     * @return the installed Policy.\n-     *\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        getting the {@code Policy} object.\n+     * Returns a {@code Policy} object that grants no permissions.\n+     * Specifically:\n+     *\n+     * <ul>\n+     *     <li> The {@code getParameters} method returns {@code null}. <\/li>\n+     *     <li> The {@code getPermissions(CodeSource)} and\n+     *     {@code getPermissions(ProtectionDomain)} methods return a read-only\n+     *     empty {@code PermissionCollection}. <\/li>\n+     *     <li> The {@code implies} method always returns {@code false}. <\/li>\n+     * <\/ul>\n+     *\n+     * @return a {@code Policy} object that grants no permissions\n+     *\n+     * @apiNote This method originally returned the installed {@code Policy}\n+     *    object, or if no {@code Policy} object had been installed, a default\n+     *    {@code Policy} implementation. Installing a system-wide {@code Policy}\n+     *    object is no longer supported. This method always returns a\n+     *    default {@code Policy} object that grants no permissions. A\n+     *    {@code Policy} object was only useful in conjunction with\n+     *    {@linkplain SecurityManager the Security Manager}, which is no\n+     *    longer supported. There is no replacement for this method.\n@@ -164,1 +91,0 @@\n-     * @see SecurityManager#checkPermission(Permission)\n@@ -169,5 +95,1 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(SecurityConstants.GET_POLICY_PERMISSION);\n-        return getPolicyNoCheck();\n+        return NO_PERMISSIONS_POLICY;\n@@ -177,2 +99,2 @@\n-     * Returns the installed {@code Policy} object, skipping the security check.\n-     * Used by ProtectionDomain and getPolicy.\n+     * Throws {@code UnsupportedOperationException}. Setting a system-wide\n+     * {@code Policy} object is not supported.\n@@ -180,92 +102,7 @@\n-     * @return the installed {@code Policy}.\n-     *\/\n-    static Policy getPolicyNoCheck()\n-    {\n-        PolicyInfo pi = policyInfo;\n-        \/\/ Use double-check idiom to avoid locking if system-wide policy is\n-        \/\/ already initialized\n-        if (pi.initialized == false || pi.policy == null) {\n-            synchronized (Policy.class) {\n-                pi = policyInfo;\n-                if (pi.policy == null) {\n-                    return loadPolicyProvider();\n-                }\n-            }\n-        }\n-        return pi.policy;\n-    }\n-\n-    \/**\n-     * Loads and instantiates a Policy implementation specified by the\n-     * policy.provider security property. Note that this method should only\n-     * be called by getPolicyNoCheck and from within a synchronized block with\n-     * an intrinsic lock on the Policy.class.\n-     *\/\n-    private static Policy loadPolicyProvider() {\n-        @SuppressWarnings(\"removal\")\n-        String policyProvider =\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                @Override\n-                public String run() {\n-                    return Security.getProperty(\"policy.provider\");\n-                }\n-            });\n-\n-        \/*\n-         * If policy.provider is not set or is set to the default provider,\n-         * simply instantiate it and return.\n-         *\/\n-        if (policyProvider == null || policyProvider.isEmpty() ||\n-            policyProvider.equals(DEFAULT_POLICY))\n-        {\n-            Policy polFile = new sun.security.provider.PolicyFile();\n-            policyInfo = new PolicyInfo(polFile, true);\n-            return polFile;\n-        }\n-\n-        \/*\n-         * Locate, load, and instantiate the policy.provider impl using\n-         * the system class loader. While doing so, install the bootstrap\n-         * provider to avoid potential recursion.\n-         *\/\n-        Policy polFile = new sun.security.provider.PolicyFile();\n-        policyInfo = new PolicyInfo(polFile, false);\n-\n-        @SuppressWarnings(\"removal\")\n-        Policy pol = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Policy run() {\n-                try {\n-                    ClassLoader scl = ClassLoader.getSystemClassLoader();\n-                    @SuppressWarnings(\"deprecation\")\n-                    Object o = Class.forName(policyProvider, true, scl).newInstance();\n-                    return (Policy)o;\n-                } catch (Exception e) {\n-                    if (debug != null) {\n-                        debug.println(\"policy provider \" + policyProvider +\n-                                      \" not available\");\n-                        e.printStackTrace();\n-                    }\n-                    return null;\n-                }\n-            }\n-        });\n-\n-        if (pol == null) {\n-            \/\/ Fallback and use the system default implementation\n-            if (debug != null) {\n-                debug.println(\"using \" + DEFAULT_POLICY);\n-            }\n-            pol = polFile;\n-        }\n-        policyInfo = new PolicyInfo(pol, true);\n-        return pol;\n-    }\n-\n-    \/**\n-     * Sets the system-wide {@code Policy} object. This method first calls\n-     * {@code SecurityManager.checkPermission} with a\n-     * {@code SecurityPermission(\"setPolicy\")}\n-     * permission to ensure it's ok to set the Policy.\n-     *\n-     * @param p the new system {@code Policy} object.\n+     * @param p ignored\n+     * @throws UnsupportedOperationException always\n+     * @apiNote This method originally installed the system-wide\n+     *    {@code Policy} object. Installing a system-wide {@code Policy} object\n+     *    is no longer supported. A {@code Policy} object was only useful in\n+     *    conjunction with {@linkplain SecurityManager the Security Manager},\n+     *    which is no longer supported. There is no replacement for this method.\n@@ -273,6 +110,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow\n-     *        setting the Policy.\n-     *\n-     * @see SecurityManager#checkPermission(Permission)\n@@ -280,1 +111,0 @@\n-     *\n@@ -284,10 +114,2 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) sm.checkPermission(\n-                                 new SecurityPermission(\"setPolicy\"));\n-        if (p != null) {\n-            initPolicy(p);\n-        }\n-        synchronized (Policy.class) {\n-            policyInfo = new PolicyInfo(p, p != null);\n-        }\n+        throw new UnsupportedOperationException(\n+                \"Setting a system-wide Policy object is not supported\");\n@@ -296,68 +118,0 @@\n-    \/**\n-     * Initialize superclass state such that a legacy provider can\n-     * handle queries for itself.\n-     *\n-     * @since 1.4\n-     *\/\n-    private static void initPolicy (final Policy p) {\n-        \/*\n-         * A policy provider not on the bootclasspath could trigger\n-         * security checks fulfilling a call to either Policy.implies\n-         * or Policy.getPermissions. If this does occur the provider\n-         * must be able to answer for it's own ProtectionDomain\n-         * without triggering additional security checks, otherwise\n-         * the policy implementation will end up in an infinite\n-         * recursion.\n-         *\n-         * To mitigate this, the provider can collect it's own\n-         * ProtectionDomain and associate a PermissionCollection while\n-         * it is being installed. The currently installed policy\n-         * provider (if there is one) will handle calls to\n-         * Policy.implies or Policy.getPermissions during this\n-         * process.\n-         *\n-         * This Policy superclass caches away the ProtectionDomain and\n-         * statically binds permissions so that legacy Policy\n-         * implementations will continue to function.\n-         *\/\n-\n-        @SuppressWarnings(\"removal\")\n-        ProtectionDomain policyDomain =\n-        AccessController.doPrivileged(new PrivilegedAction<>() {\n-            public ProtectionDomain run() {\n-                return p.getClass().getProtectionDomain();\n-            }\n-        });\n-\n-        \/*\n-         * Collect the permissions granted to this protection domain\n-         * so that the provider can be security checked while processing\n-         * calls to Policy.implies or Policy.getPermissions.\n-         *\/\n-        PermissionCollection policyPerms = null;\n-        synchronized (p) {\n-            if (p.pdMapping == null) {\n-                p.pdMapping = new WeakHashMap<>();\n-           }\n-        }\n-\n-        if (policyDomain.getCodeSource() != null) {\n-            Policy pol = policyInfo.policy;\n-            if (pol != null) {\n-                policyPerms = pol.getPermissions(policyDomain);\n-            }\n-\n-            if (policyPerms == null) { \/\/ assume it has all\n-                policyPerms = new Permissions();\n-                policyPerms.add(SecurityConstants.ALL_PERMISSION);\n-            }\n-\n-            synchronized (p.pdMapping) {\n-                \/\/ cache of pd to permissions\n-                p.pdMapping.put(policyDomain.key, policyPerms);\n-            }\n-        }\n-        return;\n-    }\n-\n-\n@@ -384,5 +138,1 @@\n-     * @param type the specified Policy type.  See the Policy section in the\n-     *    <a href=\n-     *    \"{@docRoot}\/..\/specs\/security\/standard-names.html#policy-types\">\n-     *    Java Security Standard Algorithm Names Specification<\/a>\n-     *    for a list of standard Policy types.\n+     * @param type the specified Policy type\n@@ -404,3 +154,0 @@\n-     * @throws SecurityException if the caller does not have permission\n-     *         to get a {@code Policy} instance for the specified type.\n-     *\n@@ -414,1 +161,0 @@\n-        checkPermission(type);\n@@ -440,5 +186,1 @@\n-     * @param type the specified Policy type.  See the Policy section in the\n-     *    <a href=\n-     *    \"{@docRoot}\/..\/specs\/security\/standard-names.html#policy-types\">\n-     *    Java Security Standard Algorithm Names Specification<\/a>\n-     *    for a list of standard Policy types.\n+     * @param type the specified Policy type\n@@ -467,3 +209,0 @@\n-     * @throws SecurityException if the caller does not have permission\n-     *         to get a {@code Policy} instance for the specified type\n-     *\n@@ -484,1 +223,0 @@\n-        checkPermission(type);\n@@ -508,5 +246,1 @@\n-     * @param type the specified Policy type.  See the Policy section in the\n-     *    <a href=\n-     *    \"{@docRoot}\/..\/specs\/security\/standard-names.html#policy-types\">\n-     *    Java Security Standard Algorithm Names Specification<\/a>\n-     *    for a list of standard Policy types.\n+     * @param type the specified Policy type\n@@ -532,3 +266,0 @@\n-     * @throws SecurityException if the caller does not have permission\n-     *         to get a {@code Policy} instance for the specified type\n-     *\n@@ -549,1 +280,0 @@\n-        checkPermission(type);\n@@ -623,6 +353,2 @@\n-     * <p> Applications are discouraged from calling this method\n-     * since this operation may not be supported by all policy implementations.\n-     * Applications should solely rely on the {@code implies} method\n-     * to perform policy checks.  If an application absolutely must call\n-     * a getPermissions method, it should call\n-     * {@code getPermissions(ProtectionDomain)}.\n+     * <p> The default implementation of this method ignores the\n+     * CodeSource and returns Policy.UNSUPPORTED_EMPTY_COLLECTION.\n@@ -630,7 +356,1 @@\n-     * <p> The default implementation of this method returns\n-     * Policy.UNSUPPORTED_EMPTY_COLLECTION.  This method can be\n-     * overridden if the policy implementation can return a set of\n-     * permissions granted to a CodeSource.\n-     *\n-     * @param codesource the CodeSource to which the returned\n-     *          PermissionCollection has been granted.\n+     * @param codesource ignored\n@@ -653,17 +373,2 @@\n-     * <p> Applications are discouraged from calling this method\n-     * since this operation may not be supported by all policy implementations.\n-     * Applications should rely on the {@code implies} method\n-     * to perform policy checks.\n-     *\n-     * <p> The default implementation of this method first retrieves\n-     * the permissions returned via {@code getPermissions(CodeSource)}\n-     * (the CodeSource is taken from the specified ProtectionDomain),\n-     * as well as the permissions located inside the specified ProtectionDomain.\n-     * All of these permissions are then combined and returned in a new\n-     * PermissionCollection object.  If {@code getPermissions(CodeSource)}\n-     * returns Policy.UNSUPPORTED_EMPTY_COLLECTION, then this method\n-     * returns the permissions contained inside the specified ProtectionDomain\n-     * in a new PermissionCollection object.\n-     *\n-     * <p> This method can be overridden if the policy implementation\n-     * supports returning a set of permissions granted to a ProtectionDomain.\n+     * <p> The default implementation of this method ignores the\n+     * ProtectionDomain and returns Policy.UNSUPPORTED_EMPTY_COLLECTION.\n@@ -671,2 +376,1 @@\n-     * @param domain the ProtectionDomain to which the returned\n-     *          PermissionCollection has been granted.\n+     * @param domain ignored\n@@ -684,45 +388,1 @@\n-        PermissionCollection pc = null;\n-\n-        if (domain == null)\n-            return new Permissions();\n-\n-        if (pdMapping == null) {\n-            initPolicy(this);\n-        }\n-\n-        synchronized (pdMapping) {\n-            pc = pdMapping.get(domain.key);\n-        }\n-\n-        if (pc != null) {\n-            Permissions perms = new Permissions();\n-            synchronized (pc) {\n-                for (Enumeration<Permission> e = pc.elements() ; e.hasMoreElements() ;) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return perms;\n-        }\n-\n-        pc = getPermissions(domain.getCodeSource());\n-        if (pc == null || pc == UNSUPPORTED_EMPTY_COLLECTION) {\n-            pc = new Permissions();\n-        }\n-\n-        addStaticPerms(pc, domain.getPermissions());\n-        return pc;\n-    }\n-\n-    \/**\n-     * add static permissions to provided permission collection\n-     *\/\n-    private void addStaticPerms(PermissionCollection perms,\n-                                PermissionCollection statics) {\n-        if (statics != null) {\n-            synchronized (statics) {\n-                Enumeration<Permission> e = statics.elements();\n-                while (e.hasMoreElements()) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-        }\n+        return Policy.UNSUPPORTED_EMPTY_COLLECTION;\n@@ -732,3 +392,5 @@\n-     * Evaluates the global policy for the permissions granted to\n-     * the ProtectionDomain and tests whether the permission is\n-     * granted.\n+     * Evaluates the permissions granted to the ProtectionDomain and tests\n+     * whether the permission is granted.\n+     *\n+     * <p> The default implementation of this method ignores the\n+     * ProtectionDomain and Permission parameters and always returns false.\n@@ -736,2 +398,2 @@\n-     * @param domain the ProtectionDomain to test\n-     * @param permission the Permission object to be tested for implication.\n+     * @param domain ignored\n+     * @param permission ignored\n@@ -739,2 +401,1 @@\n-     * @return {@code true} if \"permission\" is a proper subset of a permission\n-     * granted to this ProtectionDomain.\n+     * @return {@code false} always\n@@ -746,25 +407,1 @@\n-        PermissionCollection pc;\n-\n-        if (pdMapping == null) {\n-            initPolicy(this);\n-        }\n-\n-        synchronized (pdMapping) {\n-            pc = pdMapping.get(domain.key);\n-        }\n-\n-        if (pc != null) {\n-            return pc.implies(permission);\n-        }\n-\n-        pc = getPermissions(domain);\n-        if (pc == null) {\n-            return false;\n-        }\n-\n-        synchronized (pdMapping) {\n-            \/\/ cache it\n-            pdMapping.put(domain.key, pc);\n-        }\n-\n-        return pc.implies(permission);\n+        return false;\n@@ -774,3 +411,1 @@\n-     * Refreshes\/reloads the policy configuration. The behavior of this method\n-     * depends on the implementation. For example, calling {@code refresh}\n-     * on a file-based policy will cause the file to be re-read.\n+     * Refreshes\/reloads the policy configuration.\n@@ -779,2 +414,0 @@\n-     * This method should be overridden if a refresh operation is supported\n-     * by the policy implementation.\n@@ -832,1 +465,1 @@\n-     * @deprecated This class is only useful in conjunction with\n+     * @deprecated This class was only useful in conjunction with\n@@ -834,3 +467,2 @@\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this class is also deprecated and subject to removal.\n-     *       There is no replacement for the Security Manager or this class.\n+     *       no longer supported. There is no replacement for the Security\n+     *       Manager or this class.\n","filename":"src\/java.base\/share\/classes\/java\/security\/Policy.java","additions":69,"deletions":437,"binary":false,"changes":506,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,10 +31,2 @@\n- * for the {@code Policy} class.\n- * All the abstract methods in this class must be implemented by each\n- * service provider who wishes to supply a {@code Policy} implementation.\n- *\n- * <p> Subclass implementations of this abstract class must provide\n- * a public constructor that takes a {@code Policy.Parameters}\n- * object as an input parameter.  This constructor also must throw\n- * an {@code IllegalArgumentException} if it does not understand the\n- * {@code Policy.Parameters} input.\n- *\n+ * for the {@code Policy} class. Installing a system-wide {@code Policy}\n+ * object is no longer supported.\n@@ -43,4 +35,3 @@\n- * @deprecated This class is only useful in conjunction with\n- *       {@linkplain SecurityManager the Security Manager}, which is deprecated\n- *       and subject to removal in a future release. Consequently, this class\n- *       is also deprecated and subject to removal. There is no replacement for\n+ * @deprecated This class was only useful in conjunction with\n+ *       {@linkplain SecurityManager the Security Manager}, which is no\n+ *       longer supported. There is no replacement for\n@@ -54,1 +45,1 @@\n-     * Constructor for subclasses to call.\n+     * Constructor.\n@@ -61,1 +52,1 @@\n-     * @param domain the ProtectionDomain to check.\n+     * @param domain the ProtectionDomain to check\n@@ -64,1 +55,1 @@\n-     *          specified domain.\n+     *          specified domain\n@@ -66,1 +57,1 @@\n-     * @return boolean {@code true} if the permission is granted to the domain.\n+     * @return boolean {@code true} if the permission is granted to the domain\n@@ -72,3 +63,1 @@\n-     * Refreshes\/reloads the policy configuration. The behavior of this method\n-     * depends on the implementation. For example, calling {@code refresh}\n-     * on a file-based policy will cause the file to be re-read.\n+     * Refreshes\/reloads the policy configuration.\n@@ -77,2 +66,0 @@\n-     * This method should be overridden if a refresh operation is supported\n-     * by the policy implementation.\n@@ -87,3 +74,1 @@\n-     * Policy.UNSUPPORTED_EMPTY_COLLECTION object.  This method can be\n-     * overridden if the policy implementation can return a set of\n-     * permissions granted to a CodeSource.\n+     * Policy.UNSUPPORTED_EMPTY_COLLECTION object.\n@@ -92,1 +77,1 @@\n-     *          PermissionCollection has been granted.\n+     *          PermissionCollection has been granted\n@@ -94,6 +79,1 @@\n-     * @return a set of permissions granted to the specified CodeSource.\n-     *          If this operation is supported, the returned\n-     *          set of permissions must be a new mutable instance\n-     *          and it must support heterogeneous Permission types.\n-     *          If this operation is not supported,\n-     *          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.\n+     * @return a set of permissions granted to the specified CodeSource\n@@ -112,3 +92,1 @@\n-     * Policy.UNSUPPORTED_EMPTY_COLLECTION object.  This method can be\n-     * overridden if the policy implementation can return a set of\n-     * permissions granted to a ProtectionDomain.\n+     * Policy.UNSUPPORTED_EMPTY_COLLECTION object.\n@@ -117,1 +95,1 @@\n-     *          PermissionCollection has been granted.\n+     *          PermissionCollection has been granted\n@@ -119,6 +97,1 @@\n-     * @return a set of permissions granted to the specified ProtectionDomain.\n-     *          If this operation is supported, the returned\n-     *          set of permissions must be a new mutable instance\n-     *          and it must support heterogeneous Permission types.\n-     *          If this operation is not supported,\n-     *          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.\n+     * @return a set of permissions granted to the specified ProtectionDomain\n","filename":"src\/java.base\/share\/classes\/java\/security\/PolicySpi.java","additions":17,"deletions":44,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,0 @@\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.WeakHashMap;\n@@ -37,5 +30,0 @@\n-import sun.security.action.GetPropertyAction;\n-import sun.security.provider.PolicyFile;\n-import sun.security.util.Debug;\n-import sun.security.util.FilePermCompat;\n-import sun.security.util.SecurityConstants;\n@@ -46,1 +34,1 @@\n- * of permissions when being executed on behalf of a given set of Principals.\n+ * of permissions.\n@@ -52,2 +40,5 @@\n- * is dynamically mapped to a set of permissions by the current policy whenever\n- * a permission is checked.\n+ * is dynamically mapped to a set of permissions by the current policy.\n+ *\n+ * @apiNote Installing a system-wide {@link Policy} object is\n+ * no longer supported. The {@linkplain Policy#getPolicy current policy}\n+ * is always a {@code Policy} object that grants no permissions.\n@@ -63,9 +54,0 @@\n-    \/**\n-     * If {@code true}, {@link #impliesWithAltFilePerm} will try to be\n-     * compatible on FilePermission checking even if a 3rd-party Policy\n-     * implementation is set.\n-     *\/\n-    private static final boolean filePermCompatInPD =\n-            \"true\".equals(GetPropertyAction.privilegedGetProperty(\n-                \"jdk.security.filePermCompat\"));\n-\n@@ -87,4 +69,1 @@\n-            return AccessController.doPrivileged(\n-                action,\n-                getCombinedACC(context, stack)\n-            );\n+            return AccessController.doPrivileged(action);\n@@ -101,29 +80,0 @@\n-\n-        @Override\n-        public ProtectionDomain[] getProtectDomains(@SuppressWarnings(\"removal\") AccessControlContext context) {\n-            return context.getContext();\n-        }\n-\n-        @SuppressWarnings(\"removal\")\n-        private static AccessControlContext getCombinedACC(\n-            AccessControlContext context, AccessControlContext stack) {\n-            AccessControlContext acc =\n-                new AccessControlContext(context, stack.getCombiner(), true);\n-\n-            return new AccessControlContext(stack.getContext(), acc).optimize();\n-        }\n-\n-        @Override\n-        public ProtectionDomainCache getProtectionDomainCache() {\n-            return new ProtectionDomainCache() {\n-                private final Map<Key, PermissionCollection> map =\n-                        Collections.synchronizedMap(new WeakHashMap<>());\n-                public void put(ProtectionDomain pd,\n-                                PermissionCollection pc) {\n-                    map.put((pd == null ? null : pd.key), pc);\n-                }\n-                public PermissionCollection get(ProtectionDomain pd) {\n-                    return pd == null ? map.get(null) : map.get(pd.key);\n-                }\n-            };\n-        }\n@@ -156,5 +106,0 @@\n-    \/*\n-     * An object used as a key when the ProtectionDomain is stored in a Map.\n-     *\/\n-    final Key key = new Key();\n-\n@@ -173,0 +118,4 @@\n+     * @apiNote Installing a system-wide {@link Policy} object is\n+     * no longer supported. The {@linkplain Policy#getPolicy current policy}\n+     * is always a {@code Policy} object that grants no permissions.\n+     *\n@@ -202,10 +151,5 @@\n-     * and any permissions granted to this domain by the current policy at the\n-     * time a permission is checked.\n-     * <p>\n-     * This constructor is typically used by\n-     * {@link SecureClassLoader ClassLoaders}\n-     * and {@link DomainCombiner DomainCombiners} which delegate to the\n-     * {@code Policy} object to actively associate the permissions granted to\n-     * this domain. This constructor affords the\n-     * policy provider the opportunity to augment the supplied\n-     * {@code PermissionCollection} to reflect policy changes.\n+     * and any permissions granted to this domain by the current policy.\n+     *\n+     * @apiNote Installing a system-wide {@link Policy} object is\n+     * no longer supported. The {@linkplain Policy#getPolicy current policy}\n+     * is always a {@code Policy} object that grants no permissions.\n@@ -219,1 +163,0 @@\n-     * @see Policy#refresh\n@@ -251,1 +194,0 @@\n-\n@@ -262,1 +204,0 @@\n-\n@@ -288,2 +229,5 @@\n-     * and does not check the current {@code Policy} at the time of\n-     * permission checking.\n+     * and does not check the current {@code Policy}.\n+     *\n+     * @apiNote Installing a system-wide {@link Policy} object is\n+     * no longer supported. The {@linkplain Policy#getPolicy current policy}\n+     * is always a {@code Policy} object that grants no permissions.\n@@ -313,1 +257,5 @@\n-     * the current policy binding.\n+     * the current policy.\n+     *\n+     * @apiNote Installing a system-wide {@link Policy} object is\n+     * no longer supported. The {@linkplain Policy#getPolicy current policy}\n+     * is always a {@code Policy} object that grants no permissions.\n@@ -330,1 +278,1 @@\n-            Policy.getPolicyNoCheck().implies(this, perm)) {\n+            Policy.getPolicy().implies(this, perm)) {\n@@ -340,67 +288,0 @@\n-    \/**\n-     * This method has almost the same logic flow as {@link #implies} but\n-     * it ensures some level of FilePermission compatibility after JDK-8164705.\n-     *\n-     * This method is called by {@link AccessControlContext#checkPermission}\n-     * and not intended to be called by an application.\n-     *\/\n-    boolean impliesWithAltFilePerm(Permission perm) {\n-\n-        \/\/ If FilePermCompat.compat is set (default value), FilePermission\n-        \/\/ checking compatibility should be considered.\n-\n-        \/\/ If filePermCompatInPD is set, this method checks for alternative\n-        \/\/ FilePermission to keep compatibility for any Policy implementation.\n-        \/\/ When set to false (default value), implies() is called since\n-        \/\/ the PolicyFile implementation already supports compatibility.\n-\n-        \/\/ If this is a subclass of ProtectionDomain, call implies()\n-        \/\/ because most likely user has overridden it.\n-\n-        if (!filePermCompatInPD || !FilePermCompat.compat ||\n-                getClass() != ProtectionDomain.class) {\n-            return implies(perm);\n-        }\n-\n-        if (hasAllPerm) {\n-            \/\/ internal permission collection already has AllPermission -\n-            \/\/ no need to go to policy\n-            return true;\n-        }\n-\n-        Permission p2 = null;\n-        boolean p2Calculated = false;\n-\n-        if (!staticPermissions) {\n-            @SuppressWarnings(\"removal\")\n-            Policy policy = Policy.getPolicyNoCheck();\n-            if (policy instanceof PolicyFile) {\n-                \/\/ The PolicyFile implementation supports compatibility\n-                \/\/ inside, and it also covers the static permissions.\n-                return policy.implies(this, perm);\n-            } else {\n-                if (policy.implies(this, perm)) {\n-                    return true;\n-                }\n-                p2 = FilePermCompat.newPermUsingAltPath(perm);\n-                p2Calculated = true;\n-                if (p2 != null && policy.implies(this, p2)) {\n-                    return true;\n-                }\n-            }\n-        }\n-        if (permissions != null) {\n-            if (permissions.implies(perm)) {\n-                return true;\n-            } else {\n-                if (!p2Calculated) {\n-                    p2 = FilePermCompat.newPermUsingAltPath(perm);\n-                }\n-                if (p2 != null) {\n-                    return permissions.implies(p2);\n-                }\n-            }\n-        }\n-        return false;\n-    }\n-\n@@ -427,7 +308,0 @@\n-        \/\/ Check if policy is set; we don't want to load\n-        \/\/ the policy prematurely here\n-        @SuppressWarnings(\"removal\")\n-        PermissionCollection pc = Policy.isSet() && seeAllp() ?\n-                                      mergePermissions():\n-                                      getPermissions();\n-\n@@ -438,131 +312,1 @@\n-            \" \"+pc+\"\\n\";\n-    }\n-\n-    \/*\n-     * holder class for the static field \"debug\" to delay its initialization\n-     *\/\n-    private static class DebugHolder {\n-        private static final Debug debug = Debug.getInstance(\"domain\");\n-    }\n-\n-    \/**\n-     * Return {@code true} (merge policy permissions) in the following cases:\n-     *\n-     * . SecurityManager is {@code null}\n-     *\n-     * . SecurityManager is not {@code null},\n-     *          debug is not {@code null},\n-     *          SecurityManager implementation is in bootclasspath,\n-     *          Policy implementation is in bootclasspath\n-     *          (the bootclasspath restrictions avoid recursion)\n-     *\n-     * . SecurityManager is not {@code null},\n-     *          debug is {@code null},\n-     *          caller has Policy.getPolicy permission\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static boolean seeAllp() {\n-        SecurityManager sm = System.getSecurityManager();\n-\n-        if (sm == null) {\n-            return true;\n-        } else {\n-            if (DebugHolder.debug != null) {\n-                return sm.getClass().getClassLoader() == null &&\n-                        Policy.getPolicyNoCheck().getClass().getClassLoader()\n-                                == null;\n-            } else {\n-                try {\n-                    sm.checkPermission(SecurityConstants.GET_POLICY_PERMISSION);\n-                    return true;\n-                } catch (SecurityException se) {\n-                    return false;\n-                }\n-            }\n-        }\n-    }\n-\n-    private PermissionCollection mergePermissions() {\n-        if (staticPermissions)\n-            return permissions;\n-\n-        @SuppressWarnings(\"removal\")\n-        PermissionCollection perms =\n-            java.security.AccessController.doPrivileged\n-            ((PrivilegedAction<PermissionCollection>) () ->\n-                Policy.getPolicyNoCheck().getPermissions(ProtectionDomain.this));\n-\n-        Permissions mergedPerms = new Permissions();\n-        int swag = 32;\n-        int vcap = 8;\n-        Enumeration<Permission> e;\n-        List<Permission> pdVector = new ArrayList<>(vcap);\n-        List<Permission> plVector = new ArrayList<>(swag);\n-\n-        \/\/\n-        \/\/ Build a vector of domain permissions for subsequent merge\n-        if (permissions != null) {\n-            synchronized (permissions) {\n-                e = permissions.elements();\n-                while (e.hasMoreElements()) {\n-                    pdVector.add(e.nextElement());\n-                }\n-            }\n-        }\n-\n-        \/\/\n-        \/\/ Build a vector of Policy permissions for subsequent merge\n-        if (perms != null) {\n-            synchronized (perms) {\n-                e = perms.elements();\n-                while (e.hasMoreElements()) {\n-                    plVector.add(e.nextElement());\n-                    vcap++;\n-                }\n-            }\n-        }\n-\n-        if (perms != null && permissions != null) {\n-            \/\/\n-            \/\/ Weed out the duplicates from the policy. Unless a refresh\n-            \/\/ has occurred since the pd was consed this should result in\n-            \/\/ an empty vector.\n-            synchronized (permissions) {\n-                e = permissions.elements();   \/\/ domain vs policy\n-                while (e.hasMoreElements()) {\n-                    Permission pdp = e.nextElement();\n-                    Class<?> pdpClass = pdp.getClass();\n-                    String pdpActions = pdp.getActions();\n-                    String pdpName = pdp.getName();\n-                    for (int i = 0; i < plVector.size(); i++) {\n-                        Permission pp = plVector.get(i);\n-                        if (pdpClass.isInstance(pp)) {\n-                            \/\/ The equals() method on some permissions\n-                            \/\/ have some side effects so this manual\n-                            \/\/ comparison is sufficient.\n-                            if (pdpName.equals(pp.getName()) &&\n-                                Objects.equals(pdpActions, pp.getActions())) {\n-                                plVector.remove(i);\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        if (perms !=null) {\n-            \/\/ the order of adding to merged perms and permissions\n-            \/\/ needs to preserve the bugfix 4301064\n-\n-            for (int i = plVector.size()-1; i >= 0; i--) {\n-                mergedPerms.add(plVector.get(i));\n-            }\n-        }\n-        if (permissions != null) {\n-            for (int i = pdVector.size()-1; i >= 0; i--) {\n-                mergedPerms.add(pdVector.get(i));\n-            }\n-        }\n-\n-        return mergedPerms;\n+            \" \"+permissions+\"\\n\";\n@@ -570,6 +314,0 @@\n-\n-    \/**\n-     * Used for storing ProtectionDomains as keys in a Map.\n-     *\/\n-    static final class Key {}\n-\n","filename":"src\/java.base\/share\/classes\/java\/security\/ProtectionDomain.java","additions":29,"deletions":291,"binary":false,"changes":320,"status":"modified"},{"patch":"@@ -358,10 +358,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the string {@code \"clearProviderProperties.\"+name}\n-     * (where {@code name} is the provider name) to see if it's ok to clear\n-     * this provider.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to clear this provider\n-     *\n@@ -470,10 +460,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the string {@code \"putProviderProperty.\"+name},\n-     * where {@code name} is the provider name, to see if it's ok to set this\n-     * provider's property values.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to set property values.\n-     *\n@@ -497,10 +477,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the string {@code \"putProviderProperty.\"+name},\n-     * where {@code name} is the provider name, to see if it's ok to set this\n-     * provider's property values.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to set property values.\n-     *\n@@ -523,10 +493,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the string {@code \"removeProviderProperty.\"+name},\n-     * where {@code name} is the provider name, to see if it's ok to remove this\n-     * provider's properties.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to remove this provider's properties.\n-     *\n@@ -548,10 +508,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the string {@code \"removeProviderProperty.\"+name},\n-     * where {@code name} is the provider name, to see if it's ok to remove this\n-     * provider's properties.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to remove this provider's properties.\n-     *\n@@ -573,10 +523,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the string {@code \"putProviderProperty.\"+name},\n-     * where {@code name} is the provider name, to see if it's ok to set this\n-     * provider's property values.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to set property values.\n-     *\n@@ -599,10 +539,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the string {@code \"putProviderProperty.\"+name},\n-     * where {@code name} is the provider name, to see if it's ok to set this\n-     * provider's property values.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to set property values.\n-     *\n@@ -626,10 +556,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the string {@code \"putProviderProperty.\"+name},\n-     * where {@code name} is the provider name, to see if it's ok to set this\n-     * provider's property values.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to set property values.\n-     *\n@@ -653,11 +573,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the strings {@code \"putProviderProperty.\"+name}\n-     * and {@code \"removeProviderProperty.\"+name}, where {@code name} is the\n-     * provider name, to see if it's ok to set this provider's property values\n-     * and remove this provider's properties.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to set property values or remove properties.\n-     *\n@@ -683,11 +592,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the strings {@code \"putProviderProperty.\"+name}\n-     * and {@code \"removeProviderProperty.\"+name}, where {@code name} is the\n-     * provider name, to see if it's ok to set this provider's property values\n-     * and remove this provider's properties.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to set property values and remove properties.\n-     *\n@@ -712,11 +610,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the strings {@code \"putProviderProperty.\"+name}\n-     * and {@code \"removeProviderProperty.\"+name}, where {@code name} is the\n-     * provider name, to see if it's ok to set this provider's property values\n-     * and remove this provider's properties.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to set property values or remove properties.\n-     *\n@@ -745,11 +632,0 @@\n-     * <p>If a security manager is enabled, its {@code checkSecurityAccess}\n-     * method is called with the strings {@code \"putProviderProperty.\"+name}\n-     * and {@code \"removeProviderProperty.\"+name}, where {@code name} is the\n-     * provider name, to see if it's ok to set this provider's property values\n-     * and remove this provider's properties.\n-     *\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to set property values or remove properties.\n-     *\n@@ -1359,10 +1235,0 @@\n-     * <p>Also, if there is a security manager, its\n-     * {@code checkSecurityAccess} method is called with the string\n-     * {@code \"putProviderProperty.\"+name}, where {@code name} is\n-     * the provider name, to see if it's ok to set this provider's property\n-     * values. If the default implementation of {@code checkSecurityAccess}\n-     * is used (that is, that method is not overridden), then this results in\n-     * a call to the security manager's {@code checkPermission} method with\n-     * a {@code SecurityPermission(\"putProviderProperty.\"+name)}\n-     * permission.\n-     *\n@@ -1371,4 +1237,0 @@\n-     * @throws SecurityException\n-     *      if a security manager exists and its {@link\n-     *      java.lang.SecurityManager#checkSecurityAccess} method denies\n-     *      access to set property values.\n@@ -1480,11 +1342,0 @@\n-     * <p>Also, if there is a security manager, its\n-     * {@code checkSecurityAccess} method is called with the string\n-     * {@code \"removeProviderProperty.\"+name}, where {@code name} is\n-     * the provider name, to see if it's ok to remove this provider's\n-     * properties. If the default implementation of\n-     * {@code checkSecurityAccess} is used (that is, that method is not\n-     * overridden), then this results in a call to the security manager's\n-     * {@code checkPermission} method with a\n-     * {@code SecurityPermission(\"removeProviderProperty.\"+name)}\n-     * permission.\n-     *\n@@ -1493,4 +1344,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method denies\n-     *          access to remove this provider's properties.\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":0,"deletions":153,"binary":false,"changes":153,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,5 @@\n- * classes with an associated code source and permissions which are\n- * retrieved by the system policy by default.\n+ * classes with an associated code source and permissions.\n+ *\n+ * @apiNote\n+ * Permissions cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n@@ -66,4 +69,0 @@\n-     * <p>If there is a security manager, this method first\n-     * calls the security manager's {@code checkCreateClassLoader}\n-     * method  to ensure creation of a class loader is allowed.\n-     *\n@@ -71,4 +70,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkCreateClassLoader} method doesn't allow\n-     *             creation of a class loader.\n-     * @see SecurityManager#checkCreateClassLoader\n@@ -83,9 +78,0 @@\n-     *\n-     * <p>If there is a security manager, this method first\n-     * calls the security manager's {@code checkCreateClassLoader}\n-     * method  to ensure creation of a class loader is allowed.\n-     *\n-     * @throws     SecurityException  if a security manager exists and its\n-     *             {@code checkCreateClassLoader} method doesn't allow\n-     *             creation of a class loader.\n-     * @see SecurityManager#checkCreateClassLoader\n@@ -106,4 +92,0 @@\n-     * @throws SecurityException  if a security manager exists and its\n-     *         {@link SecurityManager#checkCreateClassLoader()} method\n-     *         doesn't allow creation of a class loader.\n-     *\n@@ -194,1 +176,1 @@\n-     * @return the permissions granted to the codesource.\n+     * @return the permissions for the codesource.\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureClassLoader.java","additions":7,"deletions":25,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -462,8 +462,0 @@\n-     * <p>If there is a security manager, the\n-     * {@link java.lang.SecurityManager#checkSecurityAccess} method is called\n-     * with the {@code \"insertProvider\"} permission target name to see if\n-     * it's ok to add a new provider. If this permission check is denied,\n-     * {@code checkSecurityAccess} is called again with the\n-     * {@code \"insertProvider.\"+provider.getName()} permission target name. If\n-     * both checks are denied, a {@code SecurityException} is thrown.\n-     *\n@@ -480,4 +472,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to add a new provider\n@@ -487,1 +475,0 @@\n-     * @see java.security.SecurityPermission\n@@ -505,8 +492,0 @@\n-     * <p>If there is a security manager, the\n-     * {@link java.lang.SecurityManager#checkSecurityAccess} method is called\n-     * with the {@code \"insertProvider\"} permission target name to see if\n-     * it's ok to add a new provider. If this permission check is denied,\n-     * {@code checkSecurityAccess} is called again with the\n-     * {@code \"insertProvider.\"+provider.getName()} permission target name. If\n-     * both checks are denied, a {@code SecurityException} is thrown.\n-     *\n@@ -520,4 +499,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies access to add a new provider\n@@ -527,1 +502,0 @@\n-     * @see java.security.SecurityPermission\n@@ -550,10 +524,0 @@\n-     * <p>First, if there is a security manager, its\n-     * {@code checkSecurityAccess}\n-     * method is called with the string {@code \"removeProvider.\"+name}\n-     * to see if it's ok to remove the provider.\n-     * If the default implementation of {@code checkSecurityAccess}\n-     * is used (i.e., that method is not overridden), then this will result in\n-     * a call to the security manager's {@code checkPermission} method\n-     * with a {@code SecurityPermission(\"removeProvider.\"+name)}\n-     * permission.\n-     *\n@@ -562,6 +526,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkSecurityAccess} method\n-     *          denies\n-     *          access to remove the provider\n-     *\n@@ -853,6 +811,0 @@\n-     * <p>First, if there is a security manager, its\n-     * {@code checkPermission}  method is called with a\n-     * {@code java.security.SecurityPermission(\"getProperty.\"+key)}\n-     * permission to see if it's ok to retrieve the specified\n-     * security property value.\n-     *\n@@ -864,5 +816,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkPermission} method\n-     *          denies\n-     *          access to retrieve the specified security property value\n@@ -875,1 +822,0 @@\n-     * @see java.security.SecurityPermission\n@@ -889,6 +835,0 @@\n-     * <p>First, if there is a security manager, its\n-     * {@code checkPermission} method is called with a\n-     * {@code java.security.SecurityPermission(\"setProperty.\"+key)}\n-     * permission to see if it's ok to set the specified\n-     * security property value.\n-     *\n@@ -899,4 +839,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager exists and its {@link\n-     *          java.lang.SecurityManager#checkPermission} method\n-     *          denies access to set the specified security property value\n@@ -909,1 +845,0 @@\n-     * @see java.security.SecurityPermission\n@@ -915,1 +850,0 @@\n-        invalidateSMCache(key);  \/* See below. *\/\n@@ -928,17 +862,0 @@\n-    \/*\n-     * Implementation detail:  If the property we just set in\n-     * setProperty() was either \"package.access\" or\n-     * \"package.definition\", we need to signal to the SecurityManager\n-     * class that the value has just changed, and that it should\n-     * invalidate its local cache values.\n-     *\/\n-    private static void invalidateSMCache(String key) {\n-\n-        final boolean pa = key.equals(\"package.access\");\n-        final boolean pd = key.equals(\"package.definition\");\n-\n-        if (pa || pd) {\n-            SharedSecrets.getJavaLangAccess().invalidatePackageAccessCache();\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,161 +33,1 @@\n- * The target name is the name of a security configuration parameter\n- * (see below). Currently, the {@code SecurityPermission} object is used to\n- * guard access to the {@link AccessControlContext}, {@link Policy},\n- * {@link Provider}, {@link Security}, {@link Signer}, and {@link Identity}\n- * objects.\n- * <p>\n- * The following table lists the standard {@code SecurityPermission}\n- * target names, and for each provides a description of what the permission\n- * allows and a discussion of the risks of granting code the permission.\n- *\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">target name, what the permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- * <tbody>\n- *\n- * <tr>\n- *   <th scope=\"row\">authProvider.{provider name}<\/th>\n- *   <td>Allow the named provider to be an AuthProvider for login and\n- * logout operations. <\/td>\n- *   <td>This allows the named provider to perform login and logout\n- * operations. The named provider must extend {@code AuthProvider}\n- * and care must be taken to grant to a trusted provider since\n- * login operations involve sensitive authentication information\n- * such as PINs and passwords. <\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">createAccessControlContext<\/th>\n- *   <td>Creation of an AccessControlContext<\/td>\n- *   <td>This allows someone to instantiate an AccessControlContext\n- * with a {@code DomainCombiner}.  Extreme care must be taken when\n- * granting this permission. Malicious code could create a DomainCombiner\n- * that augments the set of permissions granted to code, and even grant the\n- * code {@link java.security.AllPermission}.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getDomainCombiner<\/th>\n- *   <td>Retrieval of an AccessControlContext's DomainCombiner<\/td>\n- *   <td>This allows someone to retrieve an AccessControlContext's\n- * {@code DomainCombiner}.  Since DomainCombiners may contain\n- * sensitive information, this could potentially lead to a privacy leak.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getPolicy<\/th>\n- *   <td>Retrieval of the system-wide security policy (specifically, of the\n- * currently-installed Policy object)<\/td>\n- *   <td>This allows someone to query the policy via the\n- * {@code getPermissions} call,\n- * which discloses which permissions would be granted to a given CodeSource.\n- * While revealing the policy does not compromise the security of\n- * the system, it does provide malicious code with additional information\n- * which it may use to better aim an attack. It is wise\n- * not to divulge more information than necessary.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setPolicy<\/th>\n- *   <td>Setting of the system-wide security policy (specifically,\n- * the Policy object)<\/td>\n- *   <td>Granting this permission is extremely dangerous, as malicious\n- * code may grant itself all the necessary permissions it needs\n- * to successfully mount an attack on the system.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">createPolicy.{policy type}<\/th>\n- *   <td>Getting an instance of a Policy implementation from a provider<\/td>\n- *   <td>Granting this permission enables code to obtain a Policy object.\n- * Malicious code may query the Policy object to determine what permissions\n- * have been granted to code other than itself.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getProperty.{key}<\/th>\n- *   <td>Retrieval of the security property with the specified key<\/td>\n- *   <td>Depending on the particular key for which access has\n- * been granted, the code may have access to the list of security\n- * providers, as well as the location of the system-wide and user\n- * security policies.  while revealing this information does not\n- * compromise the security of the system, it does provide malicious\n- * code with additional information which it may use to better aim\n- * an attack.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setProperty.{key}<\/th>\n- *   <td>Setting of the security property with the specified key<\/td>\n- *   <td>This could include setting a security provider or defining\n- * the location of the system-wide security policy.  Malicious\n- * code that has permission to set a new security provider may\n- * set a rogue provider that steals confidential information such\n- * as cryptographic private keys. In addition, malicious code with\n- * permission to set the location of the system-wide security policy\n- * may point it to a security policy that grants the attacker\n- * all the necessary permissions it requires to successfully mount\n- * an attack on the system.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">insertProvider<\/th>\n- *   <td>Addition of a new provider<\/td>\n- *   <td>This would allow somebody to introduce a possibly\n- * malicious provider (e.g., one that discloses the private keys passed\n- * to it) as the highest-priority provider. This would be possible\n- * because the Security object (which manages the installed providers)\n- * currently does not check the integrity or authenticity of a provider\n- * before attaching it. The \"insertProvider\" permission subsumes the\n- * \"insertProvider.{provider name}\" permission (see the section below for\n- * more information).<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">removeProvider.{provider name}<\/th>\n- *   <td>Removal of the specified provider<\/td>\n- *   <td>This may change the behavior or disable execution of other\n- * parts of the program. If a provider subsequently requested by the\n- * program has been removed, execution may fail. Also, if the removed\n- * provider is not explicitly requested by the rest of the program, but\n- * it would normally be the provider chosen when a cryptography service\n- * is requested (due to its previous order in the list of providers),\n- * a different provider will be chosen instead, or no suitable provider\n- * will be found, thereby resulting in program failure.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">clearProviderProperties.{provider name}<\/th>\n- *   <td>\"Clearing\" of a Provider so that it no longer contains the properties\n- * used to look up services implemented by the provider<\/td>\n- *   <td>This disables the lookup of services implemented by the provider.\n- * This may thus change the behavior or disable execution of other\n- * parts of the program that would normally utilize the Provider, as\n- * described under the \"removeProvider.{provider name}\" permission.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">putProviderProperty.{provider name}<\/th>\n- *   <td>Setting of properties for the specified Provider<\/td>\n- *   <td>The provider properties each specify the name and location\n- * of a particular service implemented by the provider. By granting\n- * this permission, you let code replace the service specification\n- * with another one, thereby specifying a different implementation.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">removeProviderProperty.{provider name}<\/th>\n- *   <td>Removal of properties from the specified Provider<\/td>\n- *   <td>This disables the lookup of services implemented by the\n- * provider. They are no longer accessible due to removal of the properties\n- * specifying their names and locations. This\n- * may change the behavior or disable execution of other\n- * parts of the program that would normally utilize the Provider, as\n- * described under the \"removeProvider.{provider name}\" permission.<\/td>\n- * <\/tr>\n+ * The target name is the name of a security configuration parameter.\n@@ -195,123 +35,3 @@\n- * <\/tbody>\n- * <\/table>\n- *\n- * <P>\n- * The following permissions have been superseded by newer permissions or are\n- * associated with classes that have been deprecated: {@link Identity},\n- * {@link IdentityScope}, {@link Signer}. Use of them is discouraged. See the\n- * applicable classes for more information.\n- *\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">target name, what the permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- *\n- * <tbody>\n- * <tr>\n- *   <th scope=\"row\">insertProvider.{provider name}<\/th>\n- *   <td>Addition of a new provider, with the specified name<\/td>\n- *   <td>Use of this permission is discouraged from further use because it is\n- * possible to circumvent the name restrictions by overriding the\n- * {@link java.security.Provider#getName} method. Also, there is an equivalent\n- * level of risk associated with granting code permission to insert a provider\n- * with a specific name, or any name it chooses. Users should use the\n- * \"insertProvider\" permission instead.\n- * <p>This would allow somebody to introduce a possibly\n- * malicious provider (e.g., one that discloses the private keys passed\n- * to it) as the highest-priority provider. This would be possible\n- * because the Security object (which manages the installed providers)\n- * currently does not check the integrity or authenticity of a provider\n- * before attaching it.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setSystemScope<\/th>\n- *   <td>Setting of the system identity scope<\/td>\n- *   <td>This would allow an attacker to configure the system identity scope with\n- * certificates that should not be trusted, thereby granting applet or\n- * application code signed with those certificates privileges that\n- * would have been denied by the system's original identity scope.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setIdentityPublicKey<\/th>\n- *   <td>Setting of the public key for an Identity<\/td>\n- *   <td>If the identity is marked as \"trusted\", this allows an attacker to\n- * introduce a different public key (e.g., its own) that is not trusted\n- * by the system's identity scope, thereby granting applet or\n- * application code signed with that public key privileges that\n- * would have been denied otherwise.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setIdentityInfo<\/th>\n- *   <td>Setting of a general information string for an Identity<\/td>\n- *   <td>This allows attackers to set the general description for\n- * an identity.  This may trick applications into using a different\n- * identity than intended or may prevent applications from finding a\n- * particular identity.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">addIdentityCertificate<\/th>\n- *   <td>Addition of a certificate for an Identity<\/td>\n- *   <td>This allows attackers to set a certificate for\n- * an identity's public key.  This is dangerous because it affects\n- * the trust relationship across the system. This public key suddenly\n- * becomes trusted to a wider audience than it otherwise would be.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">removeIdentityCertificate<\/th>\n- *   <td>Removal of a certificate for an Identity<\/td>\n- *   <td>This allows attackers to remove a certificate for\n- * an identity's public key. This is dangerous because it affects\n- * the trust relationship across the system. This public key suddenly\n- * becomes considered less trustworthy than it otherwise would be.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *  <th scope=\"row\">printIdentity<\/th>\n- *  <td>Viewing the name of a principal\n- * and optionally the scope in which it is used, and whether\n- * or not it is considered \"trusted\" in that scope<\/td>\n- *  <td>The scope that is printed out may be a filename, in which case\n- * it may convey local system information. For example, here's a sample\n- * printout of an identity named \"carol\", who is\n- * marked not trusted in the user's identity database:<br>\n- *   carol[\/home\/luehe\/identitydb.obj][not trusted]<\/td>\n- *<\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getSignerPrivateKey<\/th>\n- *   <td>Retrieval of a Signer's private key<\/td>\n- *   <td>It is very dangerous to allow access to a private key; private\n- * keys are supposed to be kept secret. Otherwise, code can use the\n- * private key to sign various files and claim the signature came from\n- * the Signer.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setSignerKeyPair<\/th>\n- *   <td>Setting of the key pair (public key and private key) for a Signer<\/td>\n- *   <td>This would allow an attacker to replace somebody else's (the \"target's\")\n- * keypair with a possibly weaker keypair (e.g., a keypair of a smaller\n- * keysize).  This also would allow the attacker to listen in on encrypted\n- * communication between the target and its peers. The target's peers\n- * might wrap an encryption session key under the target's \"new\" public\n- * key, which would allow the attacker (who possesses the corresponding\n- * private key) to unwrap the session key and decipher the communication\n- * data encrypted under that session key.<\/td>\n- * <\/tr>\n- *\n- * <\/tbody>\n- * <\/table>\n- *\n- * @implNote\n- * Implementations may define additional target names, but should use naming\n- * conventions such as reverse domain name notation to avoid name clashes.\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n@@ -325,1 +45,0 @@\n- *\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecurityPermission.java","additions":5,"deletions":286,"binary":false,"changes":291,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,4 +98,0 @@\n-     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n-     * method is called with {@code \"getSignerPrivateKey\"}\n-     * as its argument to see if it's ok to return the private key.\n-     *\n@@ -104,6 +100,0 @@\n-     *\n-     * @throws     SecurityException  if a security manager exists and its\n-     * {@code checkSecurityAccess} method doesn't allow\n-     * returning the private key.\n-     *\n-     * @see SecurityManager#checkSecurityAccess\n@@ -119,4 +109,0 @@\n-     * <p>First, if there is a security manager, its {@code checkSecurityAccess}\n-     * method is called with {@code \"setSignerKeyPair\"}\n-     * as its argument to see if it's ok to set the key pair.\n-     *\n@@ -129,5 +115,0 @@\n-     * @throws     SecurityException  if a security manager exists and its\n-     * {@code checkSecurityAccess} method doesn't allow\n-     * setting the key pair.\n-     *\n-     * @see SecurityManager#checkSecurityAccess\n","filename":"src\/java.base\/share\/classes\/java\/security\/Signer.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,55 +41,3 @@\n- * The {@code UnresolvedPermission} class is used to hold Permissions that\n- * were \"unresolved\" when the Policy was initialized.\n- * An unresolved permission is one whose actual Permission class\n- * does not yet exist at the time the Policy is initialized (see below).\n- *\n- * <p>The policy for a Java runtime (specifying\n- * which permissions are available for code from various principals)\n- * is represented by a Policy object.\n- * Whenever a Policy is initialized or refreshed, Permission objects of\n- * appropriate classes are created for all permissions\n- * allowed by the Policy.\n- *\n- * <p>Many permission class types\n- * referenced by the policy configuration are ones that exist\n- * locally (i.e., ones that can be found on CLASSPATH).\n- * Objects for such permissions can be instantiated during\n- * Policy initialization. For example, it is always possible\n- * to instantiate a java.io.FilePermission, since the\n- * FilePermission class is found on the CLASSPATH.\n- *\n- * <p>Other permission classes may not yet exist during Policy\n- * initialization. For example, a referenced permission class may\n- * be in a JAR file that will later be loaded.\n- * For each such class, an {@code UnresolvedPermission} is instantiated.\n- * Thus, an {@code UnresolvedPermission} is essentially a \"placeholder\"\n- * containing information about the permission.\n- *\n- * <p>Later, when code calls {@link AccessController#checkPermission}\n- * on a permission of a type that was previously unresolved,\n- * but whose class has since been loaded, previously-unresolved\n- * permissions of that type are \"resolved\". That is,\n- * for each such {@code UnresolvedPermission}, a new object of\n- * the appropriate class type is instantiated, based on the\n- * information in the {@code UnresolvedPermission}.\n- *\n- * <p> To instantiate the new class, {@code UnresolvedPermission} assumes\n- * the class provides a zero, one, and\/or two-argument constructor.\n- * The zero-argument constructor would be used to instantiate\n- * a permission without a name and without actions.\n- * A one-arg constructor is assumed to take a {@code String}\n- * name as input, and a two-arg constructor is assumed to take a\n- * {@code String} name and {@code String} actions\n- * as input.  {@code UnresolvedPermission} may invoke a\n- * constructor with a {@code null} name and\/or actions.\n- * If an appropriate permission constructor is not available,\n- * the {@code UnresolvedPermission} is ignored and the relevant permission\n- * will not be granted to executing code.\n- *\n- * <p> The newly created permission object replaces the\n- * {@code UnresolvedPermission}, which is removed.\n- *\n- * <p> Note that the {@code getName} method for an\n- * {@code UnresolvedPermission} returns the\n- * {@code type} (class name) for the underlying permission\n- * that has not been resolved.\n+ * The {@code UnresolvedPermission} class used to hold Permissions that were\n+ * \"unresolved\" when the {@code Policy} was initialized. Installing a\n+ * system-wide {@code Policy} object is no longer supported.\n@@ -102,1 +50,0 @@\n- *\n","filename":"src\/java.base\/share\/classes\/java\/security\/UnresolvedPermission.java","additions":4,"deletions":57,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * This includes classes that implement an easily configurable,\n- * fine-grained access control security architecture.\n@@ -70,6 +68,0 @@\n- *   <li> {@extLink security_guide_default_policy\n- *     Default Policy Implementation and Policy File Syntax}<\/li>\n- *\n- *   <li> {@extLink security_guide_permissions\n- *     Permissions in the Java Development Kit (JDK)}<\/li>\n- *\n","filename":"src\/java.base\/share\/classes\/java\/security\/package-info.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2180,5 +2180,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n-     *          access to the file\n-     *\n@@ -2220,5 +2215,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n-     *          access to the file\n-     *\n@@ -2259,5 +2249,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n-     *          access to the file\n-     *\n@@ -2294,5 +2279,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n-     *          access to the file\n-     *\n@@ -2326,5 +2306,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(file.getPath())} denies\n-     *          write access to the file\n-     *\n@@ -2366,5 +2341,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(file.getPath())} denies\n-     *          write access to the file\n-     *\n@@ -2405,5 +2375,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager is present and {@link\n-     *          SecurityManager#checkWrite checkWrite(file.getPath())} denies\n-     *          write access to the file\n-     *\n@@ -2440,5 +2405,0 @@\n-     * @throws SecurityException\n-     *         If a security manager is present and {@link\n-     *         SecurityManager#checkWrite checkWrite(file.getPath())} denies\n-     *         write access to the file\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1171,4 +1171,0 @@\n-     * If there is a security manager, its {@code checkPermission}\n-     * method is called with a {@code PropertyPermission(\"user.language\", \"write\")}\n-     * permission before the default locale is changed.\n-     * <p>\n@@ -1187,3 +1183,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow the operation.\n@@ -1192,2 +1185,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see java.util.PropertyPermission\n@@ -1206,4 +1197,0 @@\n-     * If there is a security manager, its checkPermission method is called\n-     * with a PropertyPermission(\"user.language\", \"write\") permission before\n-     * the default locale is changed.\n-     * <p>\n@@ -1221,2 +1208,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *     checkPermission method doesn't allow the operation.\n@@ -1224,2 +1209,0 @@\n-     * @see SecurityManager#checkPermission(java.security.Permission)\n-     * @see PropertyPermission\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n- * The actions to be granted are passed to the constructor in a string containing\n+ * The actions are passed to the constructor in a string containing\n@@ -53,10 +53,1 @@\n- * \"read\" and \"write\". Their meaning is defined as follows:\n- *\n- * <DL>\n- *    <DT> read\n- *    <DD> read permission. Allows {@code System.getProperty} to\n- *         be called.\n- *    <DT> write\n- *    <DD> write permission. Allows {@code System.setProperty} to\n- *         be called.\n- * <\/DL>\n+ * \"read\" and \"write\".\n@@ -65,9 +56,4 @@\n- * <P>\n- * Care should be taken before granting code permission to access\n- * certain system properties.  For example, granting permission to\n- * access the \"java.home\" system property gives potentially malevolent\n- * code sensitive information about the system environment (the Java\n- * installation directory).  Also, granting permission to access\n- * the \"user.name\" and \"user.home\" system properties gives potentially\n- * malevolent code sensitive information about the user environment\n- * (the user's account name and home directory).\n+ *\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n@@ -81,1 +67,0 @@\n- *\n","filename":"src\/java.base\/share\/classes\/java\/util\/PropertyPermission.java","additions":7,"deletions":22,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -947,3 +947,0 @@\n-     * @throws SecurityException\n-     *         if a security manager exists and the caller is not the specified\n-     *         module and doesn't have {@code RuntimePermission(\"getClassLoader\")}\n@@ -1000,3 +997,0 @@\n-     * @throws SecurityException\n-     *         if a security manager exists and the caller is not the specified\n-     *         module and doesn't have {@code RuntimePermission(\"getClassLoader\")}\n@@ -3137,4 +3131,0 @@\n-         * @throws    SecurityException\n-         *        If a security manager is present and creation of new\n-         *        instances is denied. See {@link Class#newInstance()}\n-         *        for details.\n","filename":"src\/java.base\/share\/classes\/java\/util\/ResourceBundle.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -365,9 +365,0 @@\n- * <h2> Security <\/h2>\n- *\n- * <p> Service loaders always execute in the security context of the caller\n- * of the iterator or stream methods and may also be restricted by the security\n- * context of the caller that created the service loader.\n- * Trusted system code should typically invoke the methods in this class, and\n- * the methods of the iterators which they return, from within a privileged\n- * security context.\n- *\n","filename":"src\/java.base\/share\/classes\/java\/util\/ServiceLoader.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -728,3 +728,0 @@\n-     * @throws SecurityException if the security manager's {@code checkPermission}\n-     *                           denies {@code PropertyPermission(\"user.timezone\",\n-     *                           \"write\")}\n@@ -732,1 +729,0 @@\n-     * @see PropertyPermission\n","filename":"src\/java.base\/share\/classes\/java\/util\/TimeZone.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -159,8 +159,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and\n-     *         shutting down this ExecutorService may manipulate\n-     *         threads that the caller is not permitted to modify\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")},\n-     *         or the security manager's {@code checkAccess} method\n-     *         denies access.\n@@ -185,7 +177,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *         shutting down this ExecutorService may manipulate\n-     *         threads that the caller is not permitted to modify\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")},\n-     *         or the security manager's {@code checkAccess} method\n-     *         denies access.\n@@ -400,7 +385,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *         shutting down this ExecutorService may manipulate\n-     *         threads that the caller is not permitted to modify\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")},\n-     *         or the security manager's {@code checkAccess} method\n-     *         denies access.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ExecutorService.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.security.AccessControlException;\n@@ -376,3 +375,1 @@\n-     * same {@link ThreadGroup}. If there is a {@link\n-     * java.lang.SecurityManager}, it uses the group of {@link\n-     * System#getSecurityManager}, else the group of the thread\n+     * same {@link ThreadGroup}. It uses the group of the thread\n@@ -394,2 +391,3 @@\n-     * Returns a thread factory used to create new threads that\n-     * have the same permissions as the current thread.\n+     * Returns a thread factory used to create new threads that have\n+     * the current context class loader as the context class loader.\n+     *\n@@ -398,1 +396,1 @@\n-     * AccessControlContext and contextClassLoader of new threads to\n+     * contextClassLoader of new threads to\n@@ -400,6 +398,1 @@\n-     * {@code privilegedThreadFactory} method.  A new\n-     * {@code privilegedThreadFactory} can be created within an\n-     * {@link AccessController#doPrivileged AccessController.doPrivileged}\n-     * action setting the current thread's access control context to\n-     * create threads with the selected permission settings holding\n-     * within that action.\n+     * {@code privilegedThreadFactory} method.\n@@ -407,7 +400,5 @@\n-     * <p>Note that while tasks running within such threads will have\n-     * the same access control and class loader settings as the\n-     * current thread, they need not have the same {@link\n-     * java.lang.ThreadLocal} or {@link\n-     * java.lang.InheritableThreadLocal} values. If necessary,\n-     * particular values of thread locals can be set or reset before\n-     * any task runs in {@link ThreadPoolExecutor} subclasses using\n+     * <p>Note that while tasks running within such threads will have the\n+     * same class loader as the current thread, they need not have the same\n+     * {@link ThreadLocal} or {@link InheritableThreadLocal} values. If\n+     * necessary, particular values of thread locals can be set or reset\n+     * before any task runs in {@link ThreadPoolExecutor} subclasses using\n@@ -422,3 +413,0 @@\n-     * @throws AccessControlException if the current access control\n-     * context does not have permission to both get and set context\n-     * class loader\n@@ -426,6 +414,7 @@\n-     * @deprecated This method is only useful in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, which is\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this method is also deprecated and subject to\n-     *       removal. There is no replacement for the Security Manager or this\n-     *       method.\n+     * @deprecated This method originally returned a thread factory that\n+     *       created new threads that had the same access control context\n+     *       as the current thread. Access control contexts were\n+     *       only useful in conjunction with\n+     *       {@linkplain SecurityManager the Security Manager}, which is no\n+     *       longer supported. There is no replacement for the Security Manager\n+     *       or this method.\n@@ -499,7 +488,2 @@\n-     * execute the given {@code callable} under the current access\n-     * control context. This method should normally be invoked within\n-     * an {@link AccessController#doPrivileged AccessController.doPrivileged}\n-     * action to create callables that will, if possible, execute\n-     * under the selected permission settings holding within that\n-     * action; or if not possible, throw an associated {@link\n-     * AccessControlException}.\n+     * execute the given {@code callable} and return its result.\n+     *\n@@ -511,6 +495,7 @@\n-     * @deprecated This method is only useful in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, which is\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this method is also deprecated and subject to\n-     *       removal. There is no replacement for the Security Manager or this\n-     *       method.\n+     * @deprecated This method originally returned a {@code Callable} object\n+     *       that when called, executed the given {@code callable} under the\n+     *       current access control context. Access control contexts were\n+     *       only useful in conjunction with\n+     *       {@linkplain SecurityManager the Security Manager}, which is no\n+     *       longer supported. There is no replacement for the Security Manager\n+     *       or this method.\n@@ -527,9 +512,2 @@\n-     * execute the given {@code callable} under the current access\n-     * control context, with the current context class loader as the\n-     * context class loader. This method should normally be invoked\n-     * within an\n-     * {@link AccessController#doPrivileged AccessController.doPrivileged}\n-     * action to create callables that will, if possible, execute\n-     * under the selected permission settings holding within that\n-     * action; or if not possible, throw an associated {@link\n-     * AccessControlException}.\n+     * execute the given {@code callable} with the current context\n+     * class loader as the context class loader.\n@@ -541,3 +519,0 @@\n-     * @throws AccessControlException if the current access control\n-     * context does not have permission to both set and get context\n-     * class loader\n@@ -545,6 +520,8 @@\n-     * @deprecated This method is only useful in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, which is\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this method is also deprecated and subject to\n-     *       removal. There is no replacement for the Security Manager or this\n-     *       method.\n+     * @deprecated This method originally returned a {@code Callable} object\n+     *       that when called, executed the given {@code callable} under the\n+     *       current access control context, with the current context class\n+     *       loader as the context class loader. Access control contexts were\n+     *       only useful in conjunction with\n+     *       {@linkplain SecurityManager the Security Manager}, which is no\n+     *       longer supported. There is no replacement for the Security Manager\n+     *       or this method.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Executors.java","additions":37,"deletions":60,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -162,4 +162,0 @@\n- * In addition, if a {@link SecurityManager} is present, then\n- * the common pool uses a factory supplying threads that have no\n- * {@link Permissions} enabled, and are not guaranteed to preserve\n- * the values of {@link java.lang.ThreadLocal} variables across tasks.\n@@ -2852,5 +2848,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and\n-     *         the caller is not permitted to modify threads\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")}\n@@ -2874,4 +2865,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *         the caller is not permitted to modify threads\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")}\n@@ -2906,4 +2893,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *         the caller is not permitted to modify threads\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")}\n@@ -2991,4 +2974,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *         the caller is not permitted to modify threads\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")}\n@@ -3288,4 +3267,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *         the caller is not permitted to modify threads\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")}\n@@ -3695,5 +3670,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and\n-     *         the caller is not permitted to modify threads\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")}\n@@ -3720,4 +3690,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *         the caller is not permitted to modify threads\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")}\n@@ -3828,7 +3794,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *         shutting down this ExecutorService may manipulate\n-     *         threads that the caller is not permitted to modify\n-     *         because it does not hold {@link\n-     *         java.lang.RuntimePermission}{@code (\"modifyThread\")},\n-     *         or the security manager's {@code checkAccess} method\n-     *         denies access.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -95,3 +95,2 @@\n-     * thread. Otherwise, the thread group is chosen by the security\n-     * manager if present, else set to the current thread's thread\n-     * group.\n+     * thread. Otherwise, the thread group is set to the current thread's\n+     * thread group.\n@@ -239,3 +238,1 @@\n-        private static final ThreadGroup innocuousThreadGroup;\n-        @SuppressWarnings(\"removal\")\n-        private static final AccessControlContext innocuousACC;\n+        private static final ThreadGroup innocuousThreadGroup = createGroup();\n@@ -246,6 +243,0 @@\n-        @Override @SuppressWarnings(\"removal\")\n-        protected void onStart() {\n-            Thread t = Thread.currentThread();\n-            ThreadLocalRandom.setInheritedAccessControlContext(t, innocuousACC);\n-        }\n-\n@@ -261,5 +252,0 @@\n-        @SuppressWarnings(\"removal\")\n-        static AccessControlContext createACC() {\n-            return new AccessControlContext(\n-                new ProtectionDomain[] { new ProtectionDomain(null, null) });\n-        }\n@@ -272,16 +258,0 @@\n-        static {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            @SuppressWarnings(\"removal\")\n-            ThreadGroup g = innocuousThreadGroup =\n-                (sm == null) ? createGroup() :\n-                AccessController.doPrivileged(new PrivilegedAction<>() {\n-                        public ThreadGroup run() {\n-                            return createGroup(); }});\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext a = innocuousACC =\n-                (sm == null) ? createACC() :\n-                AccessController.doPrivileged(new PrivilegedAction<>() {\n-                        public AccessControlContext run() {\n-                            return createACC(); }});\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinWorkerThread.java","additions":3,"deletions":33,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -825,2 +825,0 @@\n-     *\n-     * @throws SecurityException {@inheritDoc}\n@@ -854,1 +852,0 @@\n-     * @throws SecurityException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ScheduledThreadPoolExecutor.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -297,5 +297,0 @@\n-    static final void setInheritedAccessControlContext(Thread thread,\n-                                                       @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        U.putReferenceRelease(thread, INHERITEDACCESSCONTROLCONTEXT, acc);\n-    }\n-\n@@ -373,2 +368,0 @@\n-    private static final long INHERITEDACCESSCONTROLCONTEXT\n-        = U.objectFieldOffset(Thread.class, \"inheritedAccessControlContext\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadLocalRandom.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1388,2 +1388,0 @@\n-     *\n-     * @throws SecurityException {@inheritDoc}\n@@ -1419,2 +1417,0 @@\n-     *\n-     * @throws SecurityException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadPoolExecutor.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -252,2 +252,0 @@\n-     * @throws SecurityException if access to the file is denied\n-     *         by the SecurityManager\n@@ -266,2 +264,0 @@\n-     * @throws SecurityException if access to the file is denied\n-     *         by the SecurityManager\n@@ -279,2 +275,0 @@\n-     * @throws SecurityException if access to the file is denied\n-     *         by the SecurityManager\n@@ -293,2 +287,0 @@\n-     * @throws SecurityException if access to the file is denied\n-     *         by the SecurityManager.\n@@ -312,2 +304,0 @@\n-     * @throws SecurityException if access to the file is denied\n-     *         by the SecurityManager\n@@ -340,2 +330,0 @@\n-     * @throws SecurityException if access to the file is denied\n-     *         by the SecurityManager\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -237,4 +237,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission RuntimePermission(\"localeServiceProvider\")}\n","filename":"src\/java.base\/share\/classes\/java\/util\/spi\/LocaleServiceProvider.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,4 +122,0 @@\n-     * <p>First, if there is a security manager, its {@code checkRead}\n-     * method is called with the {@code name} argument as its argument\n-     * to ensure the read is allowed.\n-     *\n@@ -132,4 +128,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkRead} method doesn't allow read access to the file.\n-     *\n-     * @see SecurityManager#checkRead(java.lang.String)\n@@ -146,4 +138,0 @@\n-     * <p>First, if there is a security manager, its {@code checkRead}\n-     * method is called with the {@code name} argument as its argument to\n-     * ensure the read is allowed.\n-     *\n@@ -157,5 +145,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *         its {@code checkRead} method\n-     *         doesn't allow read access to the file,\n-     *         or its {@code checkDelete} method doesn't allow deleting\n-     *         the file when the {@code OPEN_DELETE} flag is set.\n@@ -163,1 +146,0 @@\n-     * @see SecurityManager#checkRead(java.lang.String)\n@@ -189,4 +171,0 @@\n-     * <p>First, if there is a security manager, its {@code checkRead}\n-     * method is called with the {@code name} argument as its argument to\n-     * ensure the read is allowed.\n-     *\n@@ -204,6 +182,0 @@\n-     * @throws SecurityException\n-     *         if a security manager exists and its {@code checkRead}\n-     *         method doesn't allow read access to the file, or its\n-     *         {@code checkDelete} method doesn't allow deleting the\n-     *         file when the {@code OPEN_DELETE} flag is set\n-     *\n@@ -212,2 +184,0 @@\n-     * @see SecurityManager#checkRead(java.lang.String)\n-     *\n@@ -249,4 +219,0 @@\n-     * <p>First, if there is a security manager, its {@code checkRead}\n-     * method is called with the {@code name} argument as its argument\n-     * to ensure the read is allowed.\n-     *\n@@ -262,5 +228,0 @@\n-     * @throws SecurityException\n-     *         if a security manager exists and its {@code checkRead}\n-     *         method doesn't allow read access to the file\n-     *\n-     * @see SecurityManager#checkRead(java.lang.String)\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,5 +106,0 @@\n-     * <P>\n-     * If there is a security manager, its <code>checkListen<\/code>\n-     * method is called with the <code>port<\/code> argument as its\n-     * argument to ensure the operation is allowed. This could result\n-     * in a SecurityException.\n@@ -115,2 +110,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkListen<\/code> method doesn't allow the operation.\n@@ -120,1 +113,0 @@\n-     * @see    SecurityManager#checkListen\n@@ -135,5 +127,0 @@\n-     * <P>\n-     * If there is a security manager, its <code>checkListen<\/code>\n-     * method is called with the <code>port<\/code> argument as its\n-     * argument to ensure the operation is allowed. This could result\n-     * in a SecurityException.\n@@ -145,2 +132,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkListen<\/code> method doesn't allow the operation.\n@@ -150,1 +135,0 @@\n-     * @see    SecurityManager#checkListen\n@@ -172,5 +156,0 @@\n-     * <P>\n-     * If there is a security manager, its <code>checkListen<\/code>\n-     * method is called with the <code>port<\/code> argument as its\n-     * argument to ensure the operation is allowed. This could result\n-     * in a SecurityException.\n@@ -183,2 +162,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkListen<\/code> method doesn't allow the operation.\n@@ -188,1 +165,0 @@\n-     * @see    SecurityManager#checkListen\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ServerSocketFactory.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -132,4 +132,0 @@\n-     * <p>\n-     * If there is a security manager, its <code>checkConnect<\/code>\n-     * method is called with the host address and <code>port<\/code>\n-     * as its arguments. This could result in a SecurityException.\n@@ -142,2 +138,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkConnect<\/code> method doesn't allow the operation.\n@@ -148,1 +142,0 @@\n-     * @see SecurityManager#checkConnect\n@@ -161,4 +154,0 @@\n-     * <p>\n-     * If there is a security manager, its <code>checkConnect<\/code>\n-     * method is called with the host address and <code>port<\/code>\n-     * as its arguments. This could result in a SecurityException.\n@@ -173,2 +162,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkConnect<\/code> method doesn't allow the operation.\n@@ -179,1 +166,0 @@\n-     * @see SecurityManager#checkConnect\n@@ -191,4 +177,0 @@\n-     * <p>\n-     * If there is a security manager, its <code>checkConnect<\/code>\n-     * method is called with the host address and <code>port<\/code>\n-     * as its arguments. This could result in a SecurityException.\n@@ -200,2 +182,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkConnect<\/code> method doesn't allow the operation.\n@@ -206,1 +186,0 @@\n-     * @see SecurityManager#checkConnect\n@@ -218,4 +197,0 @@\n-     * <p>\n-     * If there is a security manager, its <code>checkConnect<\/code>\n-     * method is called with the host address and <code>port<\/code>\n-     * as its arguments. This could result in a SecurityException.\n@@ -229,2 +204,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkConnect<\/code> method doesn't allow the operation.\n@@ -235,1 +208,0 @@\n-     * @see SecurityManager#checkConnect\n","filename":"src\/java.base\/share\/classes\/javax\/net\/SocketFactory.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -222,3 +222,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkPermission<\/code> method does not allow\n-     *         <code>SSLPermission(\"setHostnameVerifier\")<\/code>\n@@ -304,3 +301,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkSetFactory<\/code> method does not allow\n-     *         a socket factory to be specified.\n@@ -354,3 +348,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkSetFactory<\/code> method does not allow\n-     *         a socket factory to be specified.\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/HttpsURLConnection.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,3 +126,0 @@\n-     * @throws  SecurityException if a security manager exists and its\n-     *          {@code checkPermission} method does not allow\n-     *          {@code SSLPermission(\"setDefaultSSLContext\")}\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLContext.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * The target name is the name of the network permission (see below). The naming\n+ * The target name is the name of the network permission. The naming\n@@ -42,47 +42,0 @@\n- * <P>\n- * The following table lists all the possible SSLPermission target names,\n- * and for each provides a description of what the permission allows\n- * and a discussion of the risks of granting code the permission.\n- *\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">permission name, what it allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- *\n- * <tbody>\n- * <tr>\n- *   <th scope=\"row\">setHostnameVerifier<\/th>\n- *   <td>The ability to set a callback which can decide whether to\n- * allow a mismatch between the host being connected to by\n- * an HttpsURLConnection and the common name field in\n- * server certificate.\n- *  <\/td>\n- *   <td>Malicious\n- * code can set a verifier that monitors host names visited by\n- * HttpsURLConnection requests or that allows server certificates\n- * with invalid common names.\n- * <\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">getSSLSessionContext<\/th>\n- *   <td>The ability to get the SSLSessionContext of an SSLSession.\n- * <\/td>\n- *   <td>Malicious code may monitor sessions which have been established\n- * with SSL peers or might invalidate sessions to slow down performance.\n- * <\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th scope=\"row\">setDefaultSSLContext<\/th>\n- *   <td>The ability to set the default SSL context\n- * <\/td>\n- *   <td>Malicious code can set a context that monitors the opening of\n- * connections or the plaintext data that is transmitted.\n- * <\/td>\n- * <\/tr>\n@@ -90,2 +43,3 @@\n- * <\/tbody>\n- * <\/table>\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLPermission.java","additions":5,"deletions":51,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,5 +81,0 @@\n-     * <P>\n-     * If there is a security manager, its <code>checkListen<\/code>\n-     * method is called with the <code>port<\/code> argument as its\n-     * argument to ensure the operation is allowed. This could result\n-     * in a SecurityException.\n@@ -89,2 +84,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkListen<\/code> method doesn't allow the operation.\n@@ -94,1 +87,0 @@\n-     * @see    SecurityManager#checkListen\n@@ -115,5 +107,0 @@\n-     * <P>\n-     * If there is a security manager, its <code>checkListen<\/code>\n-     * method is called with the <code>port<\/code> argument as its\n-     * argument to ensure the operation is allowed. This could result\n-     * in a SecurityException.\n@@ -125,2 +112,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkListen<\/code> method doesn't allow the operation.\n@@ -130,1 +115,0 @@\n-     * @see    SecurityManager#checkListen\n@@ -147,5 +131,0 @@\n-     * If there is a security manager, its <code>checkListen<\/code>\n-     * method is called with the <code>port<\/code> argument as its\n-     * argument to ensure the operation is allowed. This could result\n-     * in a SecurityException.\n-     * <P>\n@@ -170,2 +149,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkListen<\/code> method doesn't allow the operation.\n@@ -175,1 +152,0 @@\n-     * @see    SecurityManager#checkListen\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLServerSocket.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,7 +81,0 @@\n-     * <P>\n-     * If the context is available and there is a\n-     * security manager installed, the caller may require\n-     * permission to access it or a security exception may be thrown.\n-     * In a Java environment, the security manager's\n-     * {@code checkPermission} method is called with a\n-     * {@code SSLPermission(\"getSSLSessionContext\")} permission.\n@@ -89,2 +82,0 @@\n-     * @throws SecurityException if the calling thread does not have\n-     *         permission to get SSL session context.\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSession.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -212,4 +212,0 @@\n-     * <p>\n-     * If there is a security manager, its <code>checkConnect<\/code>\n-     * method is called with the host address and <code>port<\/code>\n-     * as its arguments. This could result in a SecurityException.\n@@ -221,2 +217,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkConnect<\/code> method doesn't allow the operation.\n@@ -227,1 +221,0 @@\n-     * @see SecurityManager#checkConnect\n@@ -238,4 +231,0 @@\n-     * <p>\n-     * If there is a security manager, its <code>checkConnect<\/code>\n-     * method is called with the host address and <code>port<\/code>\n-     * as its arguments. This could result in a SecurityException.\n@@ -246,2 +235,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkConnect<\/code> method doesn't allow the operation.\n@@ -252,1 +239,0 @@\n-     * @see SecurityManager#checkConnect\n@@ -264,4 +250,0 @@\n-     * <p>\n-     * If there is a security manager, its <code>checkConnect<\/code>\n-     * method is called with the host address and <code>port<\/code>\n-     * as its arguments. This could result in a SecurityException.\n@@ -277,2 +259,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkConnect<\/code> method doesn't allow the operation.\n@@ -283,1 +263,0 @@\n-     * @see SecurityManager#checkConnect\n@@ -296,4 +275,0 @@\n-     * <p>\n-     * If there is a security manager, its <code>checkConnect<\/code>\n-     * method is called with the host address and <code>port<\/code>\n-     * as its arguments. This could result in a SecurityException.\n@@ -308,2 +283,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         <code>checkConnect<\/code> method doesn't allow the operation.\n@@ -314,1 +287,0 @@\n-     * @see SecurityManager#checkConnect\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSocket.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,5 +33,3 @@\n- * <p> The target name is the name of a security configuration parameter\n- * (see below).  Currently, the {@code AuthPermission} object is used to\n- * guard access to the {@link Subject},\n- * {@link javax.security.auth.login.LoginContext}, and\n- * {@link javax.security.auth.login.Configuration} objects.\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n@@ -39,88 +37,0 @@\n- * <p> The standard target names for an Authentication Permission are:\n- *\n- * <pre>\n- *      doAs -                  allow the caller to invoke the\n- *                              {@code Subject.doAs} methods.\n- *\n- *      doAsPrivileged -        allow the caller to invoke the\n- *                              {@code Subject.doAsPrivileged} methods.\n- *\n- *      getSubject -            allow for the retrieval of the\n- *                              Subject(s) associated with the\n- *                              current Thread.\n- *\n- *      getSubjectFromDomainCombiner -  allow for the retrieval of the\n- *                              Subject associated with the\n- *                              a {@code SubjectDomainCombiner}.\n- *\n- *      setReadOnly -           allow the caller to set a Subject\n- *                              to be read-only.\n- *\n- *      modifyPrincipals -      allow the caller to modify the {@code Set}\n- *                              of Principals associated with a\n- *                              {@code Subject}\n- *\n- *      modifyPublicCredentials - allow the caller to modify the\n- *                              {@code Set} of public credentials\n- *                              associated with a {@code Subject}\n- *\n- *      modifyPrivateCredentials - allow the caller to modify the\n- *                              {@code Set} of private credentials\n- *                              associated with a {@code Subject}\n- *\n- *      refreshCredential -     allow code to invoke the {@code refresh}\n- *                              method on a credential which implements\n- *                              the {@code Refreshable} interface.\n- *\n- *      destroyCredential -     allow code to invoke the {@code destroy}\n- *                              method on a credential {@code object}\n- *                              which implements the {@code Destroyable}\n- *                              interface.\n- *\n- *      createLoginContext.{name} -  allow code to instantiate a\n- *                              {@code LoginContext} with the\n- *                              specified {@code name}.  {@code name}\n- *                              is used as the index into the installed login\n- *                              {@code Configuration}\n- *                              (that returned by\n- *                              {@code Configuration.getConfiguration()}).\n- *                              <i>name<\/i> can be wildcarded (set to '*')\n- *                              to allow for any name.\n- *\n- *      getLoginConfiguration - allow for the retrieval of the system-wide\n- *                              login Configuration.\n- *\n- *      createLoginConfiguration.{type} - allow code to obtain a Configuration\n- *                              object via\n- *                              {@code Configuration.getInstance}.\n- *\n- *      setLoginConfiguration - allow for the setting of the system-wide\n- *                              login Configuration.\n- *\n- *      refreshLoginConfiguration - allow for the refreshing of the system-wide\n- *                              login Configuration.\n- * <\/pre>\n- *\n- * <p>Please note that granting this permission with the \"modifyPrincipals\",\n- * \"modifyPublicCredentials\" or \"modifyPrivateCredentials\" target allows\n- * a JAAS login module to populate principal or credential objects into\n- * the Subject. Although reading information inside the private credentials\n- * set requires a {@link PrivateCredentialPermission} of the credential type to\n- * be granted, reading information inside the principals set and the public\n- * credentials set requires no additional permission. These objects can contain\n- * potentially sensitive information. For example, login modules that read\n- * local user information or perform a Kerberos login are able to add\n- * potentially sensitive information such as user ids, groups and domain names\n- * to the principals set.\n- *\n- * <p> The following target name has been deprecated in favor of\n- * {@code createLoginContext.{name}}.\n- *\n- * <pre>\n- *      createLoginContext -    allow code to instantiate a\n- *                              {@code LoginContext}.\n- * <\/pre>\n- *\n- * @implNote\n- * Implementations may define additional target names, but should use naming\n- * conventions such as reverse domain name notation to avoid name clashes.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/AuthPermission.java","additions":4,"deletions":94,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,3 +49,0 @@\n-     *\n-     * @exception SecurityException if the caller does not have permission\n-     *          to destroy this {@code Object}.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Destroyable.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,53 +50,3 @@\n- * For example, the following permission grants access to the\n- * com.sun.PrivateCredential owned by Subjects which have\n- * a com.sun.Principal with the name, \"duke\".  Note that although\n- * this example, as well as all the examples below, do not contain\n- * Codebase, SignedBy, or Principal information in the grant statement\n- * (for simplicity reasons), actual policy configurations should\n- * specify that information when appropriate.\n- *\n- * <pre>\n- *\n- *    grant {\n- *      permission javax.security.auth.PrivateCredentialPermission\n- *              \"com.sun.PrivateCredential com.sun.Principal \\\"duke\\\"\",\n- *              \"read\";\n- *    };\n- * <\/pre>\n- *\n- * If CredentialClass is \"*\", then access is granted to\n- * all private Credentials belonging to the specified\n- * {@code Subject}.\n- * If \"PrincipalName\" is \"*\", then access is granted to the\n- * specified Credential owned by any {@code Subject} that has the\n- * specified {@code Principal} (the actual PrincipalName doesn't matter).\n- * For example, the following grants access to the\n- * a.b.Credential owned by any {@code Subject} that has\n- * an a.b.Principal.\n- *\n- * <pre>\n- *    grant {\n- *      permission javax.security.auth.PrivateCredentialPermission\n- *              \"a.b.Credential a.b.Principal \"*\"\",\n- *              \"read\";\n- *    };\n- * <\/pre>\n- *\n- * If both the PrincipalClass and \"PrincipalName\" are \"*\",\n- * then access is granted to the specified Credential owned by\n- * any {@code Subject}.\n- *\n- * <p> In addition, the PrincipalClass\/PrincipalName pairing may be repeated:\n- *\n- * <pre>\n- *    grant {\n- *      permission javax.security.auth.PrivateCredentialPermission\n- *              \"a.b.Credential a.b.Principal \"duke\" c.d.Principal \"dukette\"\",\n- *              \"read\";\n- *    };\n- * <\/pre>\n- *\n- * The above grants access to the private Credential, \"a.b.Credential\",\n- * belonging to a {@code Subject} with at least two associated Principals:\n- * \"a.b.Principal\" with the name, \"duke\", and \"c.d.Principal\", with the name,\n- * \"dukette\".\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/PrivateCredentialPermission.java","additions":4,"deletions":54,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,4 +52,0 @@\n-     * @exception SecurityException if the caller does not have permission\n-     *          to update or extend the validity period for this\n-     *          {@code Object}.\n-     *\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Refreshable.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import jdk.internal.access.SharedSecrets;\n@@ -65,2 +64,1 @@\n- * within a public credential {@code Set}.  Different permissions\n- * are required to access and modify the different credential Sets.\n+ * within a public credential {@code Set}.\n@@ -106,2 +104,2 @@\n- * are replacements for these methods, where {@code current}\n- * is mostly equivalent to {@code getSubject(AccessController.getContext())}\n+ * are replacements for these methods, where {@code current} is equivalent to\n+ * {@code getSubject(AccessController.getContext())} (as originally specified)\n@@ -111,11 +109,1 @@\n- * <p id=\"sm-allowed\"><b>These methods behave differently depending on\n- * whether a security manager is\n- * {@linkplain SecurityManager##set-security-manager allowed or disallowed}<\/b>:\n- * <ul>\n- * <li>If a security manager is allowed, which means it is either already set\n- * or allowed to be set dynamically, a {@code Subject} object is associated\n- * with an {@code AccessControlContext} through a {@code doAs} or\n- * {@code callAs} call, and the subject can then be retrieved using the\n- * {@code getSubject(AccessControlContext)} or {@code current} method.\n-*  <li>If a security manager is not allowed, which means it is not set and\n- * not allowed to be set dynamically, a {@code doAs} or {@code callAs} call\n+ * <p> A {@code doAs} or {@code callAs} call\n@@ -127,1 +115,0 @@\n- * <\/ul>\n@@ -177,11 +164,2 @@\n-     * The newly created Sets also prevent illegal modifications\n-     * by ensuring that callers have sufficient permissions.  These Sets\n-     * also prohibit null elements, and attempts to add, query, or remove\n-     * a null element will result in a {@code NullPointerException}.\n-     *\n-     * <p> To modify the Principals Set, the caller must have\n-     * {@code AuthPermission(\"modifyPrincipals\")}.\n-     * To modify the public credential Set, the caller must have\n-     * {@code AuthPermission(\"modifyPublicCredentials\")}.\n-     * To modify the private credential Set, the caller must have\n-     * {@code AuthPermission(\"modifyPrivateCredentials\")}.\n+     * These Sets also prohibit null elements, and attempts to add, query,\n+     * or remove a null element will result in a {@code NullPointerException}.\n@@ -207,11 +185,2 @@\n-     * The newly created Sets also prevent illegal modifications\n-     * by ensuring that callers have sufficient permissions.  These Sets\n-     * also prohibit null elements, and attempts to add, query, or remove\n-     * a null element will result in a {@code NullPointerException}.\n-     *\n-     * <p> To modify the Principals Set, the caller must have\n-     * {@code AuthPermission(\"modifyPrincipals\")}.\n-     * To modify the public credential Set, the caller must have\n-     * {@code AuthPermission(\"modifyPublicCredentials\")}.\n-     * To modify the private credential Set, the caller must have\n-     * {@code AuthPermission(\"modifyPrivateCredentials\")}.\n+     * These Sets also prohibit null elements, and attempts to add, query,\n+     * or remove a null element will result in a {@code NullPointerException}.\n@@ -269,6 +238,0 @@\n-     *\n-     * @throws SecurityException if a security manager is installed and the\n-     *         caller does not have an\n-     *         {@link AuthPermission#AuthPermission(String)\n-     *         AuthPermission(\"setReadOnly\")} permission to set this\n-     *         {@code Subject} to be read-only.\n@@ -296,26 +259,7 @@\n-     * Get the {@code Subject} associated with the provided\n-     * {@code AccessControlContext}. This method is intended to be used with\n-     * a security manager. It throws an {@code UnsupportedOperationException}\n-     * if a security manager is not allowed.\n-     *\n-     * <p> The {@code AccessControlContext} may contain many\n-     * Subjects (from nested {@code doAs} calls).\n-     * In this situation, the most recent {@code Subject} associated\n-     * with the {@code AccessControlContext} is returned.\n-     *\n-     * @param  acc the {@code AccessControlContext} from which to retrieve\n-     *          the {@code Subject}.\n-     *\n-     * @return  the {@code Subject} associated with the provided\n-     *          {@code AccessControlContext}, or {@code null}\n-     *          if no {@code Subject} is associated\n-     *          with the provided {@code AccessControlContext}.\n-     *\n-     * @throws UnsupportedOperationException if a security manager is\n-     *          not allowed\n-     *\n-     * @throws SecurityException if a security manager is installed and the\n-     *          caller does not have an\n-     *          {@link AuthPermission#AuthPermission(String)\n-     *          AuthPermission(\"getSubject\")} permission to get the\n-     *          {@code Subject}.\n+     * Throws {@code UnsupportedOperationException}. A replacement API\n+     * named {@link #current()} has been added which can be used to obtain\n+     * the current subject.\n+     *\n+     * @param  acc ignored\n+     *\n+     * @return  n\/a\n@@ -323,2 +267,1 @@\n-     * @throws NullPointerException if the provided\n-     *          {@code AccessControlContext} is {@code null}.\n+     * @throws UnsupportedOperationException always\n@@ -326,7 +269,10 @@\n-     * @deprecated This method depends on {@link AccessControlContext}\n-     *       which, in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, is deprecated\n-     *       and subject to removal in a future release. However,\n-     *       obtaining a Subject is useful independent of the Security Manager.\n-     *       Thus, a replacement API named {@link #current()} has been added\n-     *       which can be used to obtain the current subject.\n+     * @deprecated This method used to get the subject associated with the\n+     *       provided {@link AccessControlContext}, which was only useful in\n+     *       conjunction with {@linkplain SecurityManager the Security Manager},\n+     *       which is no longer supported. This method has been changed to\n+     *       always throw {@code UnsupportedOperationException}. A replacement\n+     *       API named {@link #current()} has been added which can be used to\n+     *       obtain the current subject. There is no replacement for the\n+     *       Security Manager.\n+     *\n+     * @see #current()\n@@ -337,26 +283,1 @@\n-\n-        java.lang.SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(AuthPermissionHolder.GET_SUBJECT_PERMISSION);\n-        }\n-\n-        Objects.requireNonNull(acc, ResourcesMgr.getString\n-                (\"invalid.null.AccessControlContext.provided\"));\n-\n-        if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-            throw new UnsupportedOperationException(\n-                    \"getSubject is supported only if a security manager is allowed\");\n-        } else {\n-            \/\/ return the Subject from the DomainCombiner of the provided context\n-            return AccessController.doPrivileged\n-                    (new java.security.PrivilegedAction<>() {\n-                        public Subject run() {\n-                            DomainCombiner dc = acc.getDomainCombiner();\n-                            if (!(dc instanceof SubjectDomainCombiner)) {\n-                                return null;\n-                            }\n-                            SubjectDomainCombiner sdc = (SubjectDomainCombiner) dc;\n-                            return sdc.getSubject();\n-                        }\n-                    });\n-        }\n+        throw new UnsupportedOperationException(\"getSubject is not supported\");\n@@ -378,5 +299,1 @@\n-     * <p> If a security manager is <a href=#sm-allowed>allowed<\/a>, this\n-     * method is equivalent to calling {@link #getSubject} with the current\n-     * {@code AccessControlContext}.\n-     *\n-     * <p> If a security manager is not allowed, this method returns the\n+     * <p> This method returns the\n@@ -393,5 +310,1 @@\n-        if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-            return SCOPED_SUBJECT.orElse(null);\n-        } else {\n-            return getSubject(AccessController.getContext());\n-        }\n+        return SCOPED_SUBJECT.orElse(null);\n@@ -404,14 +317,1 @@\n-     * <p> If a security manager is <a href=#sm-allowed>allowed<\/a>,\n-     * this method first retrieves the current Thread's\n-     * {@code AccessControlContext} via\n-     * {@code AccessController.getContext},\n-     * and then instantiates a new {@code AccessControlContext}\n-     * using the retrieved context along with a new\n-     * {@code SubjectDomainCombiner} (constructed using\n-     * the provided {@code Subject}).\n-     * Finally, this method invokes {@code AccessController.doPrivileged},\n-     * passing it the provided {@code PrivilegedAction},\n-     * as well as the newly constructed {@code AccessControlContext}.\n-     *\n-     * <p> If a security manager is not allowed,\n-     * this method launches {@code action} and binds {@code subject} to the\n+     * <p> This method launches {@code action} and binds {@code subject} to the\n@@ -437,17 +337,4 @@\n-        if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-            try {\n-                return ScopedValue.where(SCOPED_SUBJECT, subject).call(action::call);\n-            } catch (Exception e) {\n-                throw new CompletionException(e);\n-            }\n-        } else {\n-            try {\n-                PrivilegedExceptionAction<T> pa = () -> action.call();\n-                @SuppressWarnings(\"removal\")\n-                var result = doAs(subject, pa);\n-                return result;\n-            } catch (PrivilegedActionException e) {\n-                throw new CompletionException(e.getCause());\n-            } catch (Exception e) {\n-                throw new CompletionException(e);\n-            }\n+        try {\n+            return ScopedValue.where(SCOPED_SUBJECT, subject).call(action::call);\n+        } catch (Exception e) {\n+            throw new CompletionException(e);\n@@ -460,14 +347,1 @@\n-     * <p> If a security manager is <a href=#sm-allowed>allowed<\/a>,\n-     * this method first retrieves the current Thread's\n-     * {@code AccessControlContext} via\n-     * {@code AccessController.getContext},\n-     * and then instantiates a new {@code AccessControlContext}\n-     * using the retrieved context along with a new\n-     * {@code SubjectDomainCombiner} (constructed using\n-     * the provided {@code Subject}).\n-     * Finally, this method invokes {@code AccessController.doPrivileged},\n-     * passing it the provided {@code PrivilegedAction},\n-     * as well as the newly constructed {@code AccessControlContext}.\n-     *\n-     * <p> If a security manager is not allowed,\n-     * this method launches {@code action} and binds {@code subject} to the\n+     * <p> This method launches {@code action} and binds {@code subject} to the\n@@ -492,13 +366,11 @@\n-     * @throws SecurityException if a security manager is installed and the\n-     *                  caller does not have an\n-     *                  {@link AuthPermission#AuthPermission(String)\n-     *                  AuthPermission(\"doAs\")} permission to invoke this\n-     *                  method.\n-     *\n-     * @deprecated This method depends on {@link AccessControlContext}\n-     *       which, in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, is deprecated\n-     *       and subject to removal in a future release. However, performing\n-     *       work as a Subject is useful independent of the Security Manager.\n-     *       Thus, a replacement API named {@link #callAs} has been added\n-     *       which can be used to perform the same work.\n+     * @deprecated This method originally performed the specified\n+     *       {@code PrivilegedAction} with privileges enabled. Running the\n+     *       action with privileges enabled was only useful in conjunction\n+     *       with {@linkplain SecurityManager the Security Manager}, which is\n+     *       no longer supported. This method has been changed to launch the\n+     *       action as is and bind the subject to the period of its execution.\n+     *       A replacement API named {@link #callAs} has been added which can\n+     *       be used to perform the same work. There is no replacement for the\n+     *       Security Manager.\n+     *\n+     * @see #callAs(Subject, Callable)\n@@ -519,12 +391,10 @@\n-        if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-            try {\n-                return callAs(subject, action::run);\n-            } catch (CompletionException ce) {\n-                var cause = ce.getCause();\n-                if (cause instanceof RuntimeException re) {\n-                    throw re;\n-                } else if (cause instanceof Error er) {\n-                    throw er;\n-                } else {\n-                    throw new AssertionError(ce);\n-                }\n+        try {\n+            return callAs(subject, action::run);\n+        } catch (CompletionException ce) {\n+            var cause = ce.getCause();\n+            if (cause instanceof RuntimeException re) {\n+                throw re;\n+            } else if (cause instanceof Error er) {\n+                throw er;\n+            } else {\n+                throw new AssertionError(ce);\n@@ -532,9 +402,0 @@\n-        } else {\n-            \/\/ set up the new Subject-based AccessControlContext\n-            \/\/ for doPrivileged\n-            final AccessControlContext currentAcc = AccessController.getContext();\n-\n-            \/\/ call doPrivileged and push this new context on the stack\n-            return java.security.AccessController.doPrivileged\n-                    (action,\n-                            createContext(subject, currentAcc));\n@@ -547,14 +408,1 @@\n-     * <p> If a security manager is <a href=#sm-allowed>allowed<\/a>,\n-     * this method first retrieves the current Thread's\n-     * {@code AccessControlContext} via\n-     * {@code AccessController.getContext},\n-     * and then instantiates a new {@code AccessControlContext}\n-     * using the retrieved context along with a new\n-     * {@code SubjectDomainCombiner} (constructed using\n-     * the provided {@code Subject}).\n-     * Finally, this method invokes {@code AccessController.doPrivileged},\n-     * passing it the provided {@code PrivilegedExceptionAction},\n-     * as well as the newly constructed {@code AccessControlContext}.\n-     *\n-     * <p> If a security manager is not allowed,\n-     * this method launches {@code action} and binds {@code subject} to the\n+     * <p> This method launches {@code action} and binds {@code subject} to the\n@@ -562,1 +410,1 @@\n-\n+     *\n@@ -584,13 +432,11 @@\n-     * @throws SecurityException if a security manager is installed and the\n-     *                  caller does not have an\n-     *                  {@link AuthPermission#AuthPermission(String)\n-     *                  AuthPermission(\"doAs\")} permission to invoke this\n-     *                  method.\n-     *\n-     * @deprecated This method depends on {@link AccessControlContext}\n-     *       which, in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, is deprecated\n-     *       and subject to removal in a future release. However, performing\n-     *       work as a Subject is useful independent of the Security Manager.\n-     *       Thus, a replacement API named {@link #callAs} has been added\n-     *       which can be used to perform the same work.\n+     * @deprecated This method originally performed the specified\n+     *       {@code PrivilegedExceptionAction} with privileges enabled.\n+     *       Running the action with privileges enabled was only useful in\n+     *       conjunction with {@linkplain SecurityManager the Security Manager},\n+     *       which is no longer supported. This method has been changed to\n+     *       launch the action as is and bind the subject to the period of its\n+     *       execution. A replacement API named {@link #callAs} has been added\n+     *       which can be used to perform the same work. There is no\n+     *       replacement for the Security Manager.\n+     *\n+     * @see #callAs(Subject, Callable)\n@@ -612,14 +458,12 @@\n-        if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-            try {\n-                return callAs(subject, action::run);\n-            } catch (CompletionException ce) {\n-                var cause = ce.getCause();\n-                if (cause instanceof RuntimeException re) {\n-                    throw re;\n-                } else if (cause instanceof Error er) {\n-                    throw er;\n-                } else if (cause instanceof Exception e) {\n-                    throw new PrivilegedActionException(e);\n-                } else {\n-                    throw new PrivilegedActionException(ce);\n-                }\n+        try {\n+            return callAs(subject, action::run);\n+        } catch (CompletionException ce) {\n+            var cause = ce.getCause();\n+            if (cause instanceof RuntimeException re) {\n+                throw re;\n+            } else if (cause instanceof Error er) {\n+                throw er;\n+            } else if (cause instanceof Exception e) {\n+                throw new PrivilegedActionException(e);\n+            } else {\n+                throw new PrivilegedActionException(ce);\n@@ -627,8 +471,0 @@\n-        } else {\n-            \/\/ set up the new Subject-based AccessControlContext for doPrivileged\n-            final AccessControlContext currentAcc = AccessController.getContext();\n-\n-            \/\/ call doPrivileged and push this new context on the stack\n-            return java.security.AccessController.doPrivileged\n-                    (action,\n-                            createContext(subject, currentAcc));\n@@ -641,11 +477,1 @@\n-     * <p> If a security manager is <a href=#sm-allowed>allowed<\/a>,\n-     * this method behaves exactly as {@code Subject.doAs},\n-     * except that instead of retrieving the current Thread's\n-     * {@code AccessControlContext}, it uses the provided\n-     * {@code AccessControlContext}.  If the provided\n-     * {@code AccessControlContext} is {@code null},\n-     * this method instantiates a new {@code AccessControlContext}\n-     * with an empty collection of ProtectionDomains.\n-     *\n-     * <p> If a security manager is not allowed,\n-     * this method ignores the {@code acc} argument, launches {@code action},\n+     * <p> This method ignores the {@code acc} argument, launches {@code action},\n@@ -673,12 +499,12 @@\n-     * @throws SecurityException if a security manager is installed and the\n-     *                  caller does not have a\n-     *                  {@link AuthPermission#AuthPermission(String)\n-     *                  AuthPermission(\"doAsPrivileged\")} permission to invoke\n-     *                  this method.\n-     *\n-     * @deprecated This method is only useful in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, which is\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this method is also deprecated and subject to\n-     *       removal. There is no replacement for the Security Manager or this\n-     *       method.\n+     * @deprecated This method originally performed the specified\n+     *       {@code PrivilegedAction} with privileges enabled and restricted\n+     *       by the specified {@code AccessControlContext}. Running the\n+     *       action with privileges enabled was only useful in conjunction\n+     *       with {@linkplain SecurityManager the Security Manager}, which is\n+     *       no longer supported. This method has been changed to ignore the\n+     *       {@code AccessControlContext} and launch the action as is and bind\n+     *       the subject to the period of its execution. A replacement API\n+     *       named {@link #callAs} has been added which can be used to perform\n+     *       the same work. There is no replacement for the Security Manager.\n+     *\n+     * @see #callAs(Subject, Callable)\n@@ -700,12 +526,10 @@\n-        if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-            try {\n-                return callAs(subject, action::run);\n-            } catch (CompletionException ce) {\n-                var cause = ce.getCause();\n-                if (cause instanceof RuntimeException re) {\n-                    throw re;\n-                } else if (cause instanceof Error er) {\n-                    throw er;\n-                } else {\n-                    throw new AssertionError(ce);\n-                }\n+        try {\n+            return callAs(subject, action::run);\n+        } catch (CompletionException ce) {\n+            var cause = ce.getCause();\n+            if (cause instanceof RuntimeException re) {\n+                throw re;\n+            } else if (cause instanceof Error er) {\n+                throw er;\n+            } else {\n+                throw new AssertionError(ce);\n@@ -713,12 +537,0 @@\n-        } else {\n-            \/\/ set up the new Subject-based AccessControlContext\n-            \/\/ for doPrivileged\n-            final AccessControlContext callerAcc =\n-                    (acc == null ?\n-                            new AccessControlContext(NULL_PD_ARRAY) :\n-                            acc);\n-\n-            \/\/ call doPrivileged and push this new context on the stack\n-            return java.security.AccessController.doPrivileged\n-                    (action,\n-                            createContext(subject, callerAcc));\n@@ -731,11 +543,1 @@\n-     * <p> If a security manager is <a href=#sm-allowed>allowed<\/a>,\n-     * this method behaves exactly as {@code Subject.doAs},\n-     * except that instead of retrieving the current Thread's\n-     * {@code AccessControlContext}, it uses the provided\n-     * {@code AccessControlContext}.  If the provided\n-     * {@code AccessControlContext} is {@code null},\n-     * this method instantiates a new {@code AccessControlContext}\n-     * with an empty collection of ProtectionDomains.\n-     *\n-     * <p> If a security manager is not allowed,\n-     * this method ignores the {@code acc} argument, launches {@code action},\n+     * <p> This method ignores the {@code acc} argument, launches {@code action},\n@@ -768,12 +570,12 @@\n-     * @throws SecurityException if a security manager is installed and the\n-     *                  caller does not have a\n-     *                  {@link AuthPermission#AuthPermission(String)\n-     *                  AuthPermission(\"doAsPrivileged\")} permission to invoke\n-     *                  this method.\n-     *\n-     * @deprecated This method is only useful in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, which is\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this method is also deprecated and subject to\n-     *       removal. There is no replacement for the Security Manager or this\n-     *       method.\n+     * @deprecated This method originally performed the specified\n+     *       {@code PrivilegedExceptionAction} with privileges enabled and\n+     *       restricted by the specified {@code AccessControlContext}. Running\n+     *       the action with privileges enabled was only useful in conjunction\n+     *       with {@linkplain SecurityManager the Security Manager}, which is\n+     *       no longer supported. This method has been changed to ignore the\n+     *       {@code AccessControlContext} and launch the action as is and bind\n+     *       the subject to the period of its execution. A replacement API\n+     *       named {@link #callAs} has been added which can be used to perform\n+     *       the same work. There is no replacement for the Security Manager.\n+     *\n+     * @see #callAs(Subject, Callable)\n@@ -796,14 +598,12 @@\n-        if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-            try {\n-                return callAs(subject, action::run);\n-            } catch (CompletionException ce) {\n-                var cause = ce.getCause();\n-                if (cause instanceof RuntimeException re) {\n-                    throw re;\n-                } else if (cause instanceof Error er) {\n-                    throw er;\n-                } else if (cause instanceof Exception e) {\n-                    throw new PrivilegedActionException(e);\n-                } else {\n-                    throw new PrivilegedActionException(ce);\n-                }\n+        try {\n+            return callAs(subject, action::run);\n+        } catch (CompletionException ce) {\n+            var cause = ce.getCause();\n+            if (cause instanceof RuntimeException re) {\n+                throw re;\n+            } else if (cause instanceof Error er) {\n+                throw er;\n+            } else if (cause instanceof Exception e) {\n+                throw new PrivilegedActionException(e);\n+            } else {\n+                throw new PrivilegedActionException(ce);\n@@ -811,11 +611,0 @@\n-        } else {\n-            \/\/ set up the new Subject-based AccessControlContext for doPrivileged\n-            final AccessControlContext callerAcc =\n-                    (acc == null ?\n-                            new AccessControlContext(NULL_PD_ARRAY) :\n-                            acc);\n-\n-            \/\/ call doPrivileged and push this new context on the stack\n-            return java.security.AccessController.doPrivileged\n-                    (action,\n-                            createContext(subject, callerAcc));\n@@ -854,5 +643,0 @@\n-     * <p> If a security manager is installed, the caller must have a\n-     * {@link AuthPermission#AuthPermission(String)\n-     * AuthPermission(\"modifyPrincipals\")} permission to modify\n-     * the returned set, or a {@code SecurityException} will be thrown.\n-     *\n@@ -910,5 +694,0 @@\n-     * <p> If a security manager is installed, the caller must have a\n-     * {@link AuthPermission#AuthPermission(String)\n-     * AuthPermission(\"modifyPublicCredentials\")} permission to modify\n-     * the returned set, or a {@code SecurityException} will be thrown.\n-     *\n@@ -934,11 +713,0 @@\n-     * <p> If a security manager is installed, the caller must have a\n-     * {@link AuthPermission#AuthPermission(String)\n-     * AuthPermission(\"modifyPrivateCredentials\")} permission to modify\n-     * the returned set, or a {@code SecurityException} will be thrown.\n-     *\n-     * <p> While iterating through the {@code Set},\n-     * a {@code SecurityException} is thrown if a security manager is installed\n-     * and the caller does not have a {@link PrivateCredentialPermission}\n-     * to access a particular Credential.  The {@code Iterator}\n-     * is nevertheless advanced to the next element in the {@code Set}.\n-     *\n@@ -1000,4 +768,0 @@\n-     * <p> If a security manager is installed, the caller must have a\n-     * {@link PrivateCredentialPermission} to access all of the requested\n-     * Credentials, or a {@code SecurityException} will be thrown.\n-     *\n@@ -1052,5 +816,0 @@\n-     *\n-     * @throws SecurityException if a security manager is installed and the\n-     *         caller does not have a {@link PrivateCredentialPermission}\n-     *         permission to access the private credentials for this\n-     *         {@code Subject} or the provided {@code Subject}.\n@@ -1154,4 +913,0 @@\n-     *\n-     * @throws SecurityException if a security manager is installed and the\n-     *         caller does not have a {@link PrivateCredentialPermission}\n-     *         permission to access this Subject's private credentials.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":129,"deletions":374,"binary":false,"changes":503,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,3 +37,3 @@\n- * A {@code SubjectDomainCombiner} updates ProtectionDomains\n- * with Principals from the {@code Subject} associated with this\n- * {@code SubjectDomainCombiner}.\n+ * SubjectDomainCombiner was used to dynamically update ProtectionDomains with\n+ * Principals for access control operations and decisions. This feature no\n+ * longer exists.\n@@ -42,4 +42,2 @@\n- * @deprecated This class is only useful in conjunction with\n- *       {@linkplain SecurityManager the Security Manager}, which is deprecated\n- *       and subject to removal in a future release. Consequently, this class\n- *       is also deprecated and subject to removal. There is no replacement for\n+ * @deprecated This class was only useful in conjunction with the Security\n+ *       Manager, which is no longer supported. There is no replacement for\n@@ -87,4 +85,0 @@\n-     *\n-     * @exception SecurityException if the caller does not have permission\n-     *          to get the {@code Subject} associated with this\n-     *          {@code SubjectDomainCombiner}.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/SubjectDomainCombiner.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -220,3 +220,0 @@\n-     * @exception SecurityException if the caller does not have permission\n-     *                          to retrieve the Configuration.\n-     *\n@@ -294,3 +291,0 @@\n-     * @exception SecurityException if the current thread does not have\n-     *                  Permission to set the {@code Configuration}.\n-     *\n@@ -346,3 +340,0 @@\n-     * @throws SecurityException if the caller does not have permission\n-     *         to get a {@code Configuration} instance for the specified type\n-     *\n@@ -411,3 +402,0 @@\n-     * @throws SecurityException if the caller does not have permission\n-     *         to get a {@code Configuration} instance for the specified type\n-     *\n@@ -475,3 +463,0 @@\n-     * @throws SecurityException if the caller does not have permission\n-     *         to get a {@code Configuration} instance for the specified type\n-     *\n@@ -586,3 +571,0 @@\n-     *\n-     * @exception SecurityException if the caller does not have permission\n-     *                          to refresh its Configuration.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/login\/Configuration.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,3 +73,0 @@\n-     *\n-     * @exception SecurityException if the caller does not have permission\n-     *          to refresh its Configuration.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/login\/ConfigurationSpi.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,18 +138,0 @@\n- *\n- * <li> When LoginContext uses the installed Configuration, the caller\n- * requires the createLoginContext.<em>name<\/em> and possibly\n- * createLoginContext.other AuthPermissions. Furthermore, the\n- * LoginContext will invoke configured modules from within an\n- * {@code AccessController.doPrivileged} call so that modules that\n- * perform security-sensitive tasks (such as connecting to remote hosts,\n- * and updating the Subject) will require the respective permissions, but\n- * the callers of the LoginContext will not require those permissions.\n- *\n- * <li> When LoginContext uses a caller-specified Configuration, the caller\n- * does not require any createLoginContext AuthPermission.  The LoginContext\n- * saves the {@code AccessControlContext} for the caller,\n- * and invokes the configured modules from within an\n- * {@code AccessController.doPrivileged} call constrained by that context.\n- * This means the caller context (stored when the LoginContext was created)\n- * must have sufficient permissions to perform any security-sensitive tasks\n- * that the modules may perform.\n@@ -176,10 +158,0 @@\n- *\n- * <li> When the LoginContext uses the installed Configuration (instead of\n- * a caller-specified Configuration, see above),\n- * then this LoginContext must wrap any\n- * caller-specified or default CallbackHandler implementation\n- * in a new CallbackHandler implementation\n- * whose {@code handle} method implementation invokes the\n- * specified CallbackHandler's {@code handle} method in a\n- * {@code java.security.AccessController.doPrivileged} call\n- * constrained by the caller's current {@code AccessControlContext}.\n@@ -191,1 +163,0 @@\n- * @see javax.security.auth.AuthPermission\n@@ -348,7 +319,0 @@\n-     *\n-     * @exception SecurityException if a SecurityManager is set and\n-     *          the caller does not have\n-     *          AuthPermission(\"createLoginContext.<i>name<\/i>\"),\n-     *          or if a configuration entry for {@code name} does not exist and\n-     *          the caller does not additionally have\n-     *          AuthPermission(\"createLoginContext.other\")\n@@ -378,7 +342,0 @@\n-     *\n-     * @exception SecurityException if a SecurityManager is set and\n-     *          the caller does not have\n-     *          AuthPermission(\"createLoginContext.<i>name<\/i>\"),\n-     *          or if a configuration entry for <i>name<\/i> does not exist and\n-     *          the caller does not additionally have\n-     *          AuthPermission(\"createLoginContext.other\")\n@@ -412,7 +369,0 @@\n-     *\n-     * @exception SecurityException if a SecurityManager is set and\n-     *          the caller does not have\n-     *          AuthPermission(\"createLoginContext.<i>name<\/i>\"),\n-     *          or if a configuration entry for <i>name<\/i> does not exist and\n-     *          the caller does not additionally have\n-     *          AuthPermission(\"createLoginContext.other\")\n@@ -452,7 +402,0 @@\n-     *\n-     * @exception SecurityException if a SecurityManager is set and\n-     *          the caller does not have\n-     *          AuthPermission(\"createLoginContext.<i>name<\/i>\"),\n-     *          or if a configuration entry for <i>name<\/i> does not exist and\n-     *          the caller does not additionally have\n-     *          AuthPermission(\"createLoginContext.other\")\n@@ -495,8 +438,0 @@\n-     * @exception SecurityException if a SecurityManager is set,\n-     *          <i>config<\/i> is {@code null},\n-     *          and either the caller does not have\n-     *          AuthPermission(\"createLoginContext.<i>name<\/i>\"),\n-     *          or if a configuration entry for <i>name<\/i> does not exist and\n-     *          the caller does not additionally have\n-     *          AuthPermission(\"createLoginContext.other\")\n-     *\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/login\/LoginContext.java","additions":1,"deletions":66,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -187,10 +187,0 @@\n-    \/**\n-     * Record the non-exported packages of the modules in the given layer\n-     *\/\n-    void addNonExportedPackages(ModuleLayer layer);\n-\n-    \/**\n-     * Invalidate package access cache\n-     *\/\n-    void invalidatePackageAccessCache();\n-\n@@ -636,6 +626,0 @@\n-\n-    \/**\n-     * Is a security manager already set or allowed to be set\n-     * (using -Djava.security.manager=allow)?\n-     *\/\n-    boolean allowSecurityManager();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.security.PermissionCollection;\n@@ -31,1 +30,0 @@\n-import java.security.ProtectionDomain;\n@@ -41,12 +39,0 @@\n-\n-    ProtectionDomain[] getProtectDomains(@SuppressWarnings(\"removal\") AccessControlContext context);\n-\n-    interface ProtectionDomainCache {\n-        void put(ProtectionDomain pd, PermissionCollection pc);\n-        PermissionCollection get(ProtectionDomain pd);\n-    }\n-\n-    \/**\n-     * Returns the ProtectionDomainCache.\n-     *\/\n-    ProtectionDomainCache getProtectionDomainCache();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaSecurityAccess.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessControlContext;\n@@ -31,1 +30,0 @@\n-import java.security.ProtectionDomain;\n@@ -47,2 +45,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final AccessControlContext INNOCUOUS_ACC = innocuousACC();\n@@ -52,1 +48,0 @@\n-    private static final long INHERITEDACCESSCONTROLCONTEXT;\n@@ -68,1 +63,0 @@\n-        U.putReferenceRelease(this, INHERITEDACCESSCONTROLCONTEXT, INNOCUOUS_ACC);\n@@ -136,10 +130,0 @@\n-    \/**\n-     * Return an AccessControlContext that doesn't support any permissions.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext innocuousACC() {\n-        return new AccessControlContext(new ProtectionDomain[] {\n-                new ProtectionDomain(null, null)\n-        });\n-    }\n-\n@@ -166,2 +150,0 @@\n-        INHERITEDACCESSCONTROLCONTEXT = U.objectFieldOffset(Thread.class,\n-                \"inheritedAccessControlContext\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CarrierThread.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,0 @@\n-    private static final AccessControlContext ACC;\n-    private static final long INHERITEDACCESSCONTROLCONTEXT;\n@@ -153,1 +151,0 @@\n-        UNSAFE.putReferenceRelease(this, INHERITEDACCESSCONTROLCONTEXT, ACC);\n@@ -193,4 +190,0 @@\n-            ACC = new AccessControlContext(new ProtectionDomain[] {\n-                new ProtectionDomain(null, null)\n-            });\n-\n@@ -205,2 +198,0 @@\n-            INHERITEDACCESSCONTROLCONTEXT = UNSAFE.objectFieldOffset\n-                (tk, \"inheritedAccessControlContext\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/InnocuousThread.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,3 +262,0 @@\n-        \/\/ update security manager before making types visible\n-        JLA.addNonExportedPackages(newLayer);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/Modules.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -168,1 +168,0 @@\n-        java.management.rmi,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,2250 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.provider;\n-\n-import java.io.*;\n-import java.lang.reflect.*;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URI;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.*;\n-import java.security.*;\n-import java.security.cert.Certificate;\n-import java.security.cert.X509Certificate;\n-import javax.security.auth.Subject;\n-import javax.security.auth.x500.X500Principal;\n-import java.net.SocketPermission;\n-import java.net.NetPermission;\n-import java.util.concurrent.ConcurrentHashMap;\n-import jdk.internal.access.JavaSecurityAccess;\n-import jdk.internal.access.SharedSecrets;\n-import jdk.internal.util.StaticProperty;\n-import sun.nio.fs.DefaultFileSystemProvider;\n-import sun.security.util.*;\n-import sun.net.www.ParseUtil;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static jdk.internal.access.JavaSecurityAccess.ProtectionDomainCache;\n-\n-\/**\n- * This class represents a default Policy implementation for the\n- * \"JavaPolicy\" type.\n- *\n- * <p> This object stores the policy for the entire Java runtime,\n- * and is the amalgamation of multiple static policy\n- * configurations that resides in files.\n- * The algorithm for locating the policy file(s) and reading their\n- * information into this <code>Policy<\/code> object is:\n- *\n- * <ol>\n- * <li>\n- *   Read in and load the default policy file named\n- *   &lt;JAVA_HOME&gt;\/lib\/security\/default.policy. &lt;JAVA_HOME&gt; refers\n- *   to the value of the java.home system property, and specifies the directory\n- *   where the JRE is installed. This policy file grants permissions to the\n- *   modules loaded by the platform class loader. If the default policy file\n- *   cannot be loaded, a fatal InternalError is thrown as these permissions\n- *   are needed in order for the runtime to operate correctly.\n- * <li>\n- *   Loop through the <code>java.security.Security<\/code> properties,\n- *   and <i>policy.url.1<\/i>, <i>policy.url.2<\/i>, ...,\n- *   <i>policy.url.X<\/i>\".  These properties are set\n- *   in the Java security properties file, which is located in the file named\n- *   &lt;JAVA_HOME&gt;\/conf\/security\/java.security.\n- *   Each property value specifies a <code>URL<\/code> pointing to a\n- *   policy file to be loaded.  Read in and load each policy.\n- *\n- *   If none of these could be loaded, use a builtin static policy\n- *   equivalent to the conf\/security\/java.policy file.\n- *\n- * <li>\n- *   The <code>java.lang.System<\/code> property <i>java.security.policy<\/i>\n- *   may also be set to a <code>URL<\/code> pointing to another policy file\n- *   (which is the case when a user uses the -D switch at runtime).\n- *   If this property is defined, and its use is allowed by the\n- *   security property file (the Security property,\n- *   <i>policy.allowSystemProperty<\/i> is set to <i>true<\/i>),\n- *   also load that policy.\n- *\n- *   If the <i>java.security.policy<\/i> property is defined using\n- *   \"==\" (rather than \"=\"), then load the specified policy file and ignore\n- *   all other configured policies. Note, that the default.policy file is\n- *   also loaded, as specified in the first step of the algorithm above.\n- *   If the specified policy file cannot be loaded, use a builtin static policy\n- *   equivalent to the default conf\/security\/java.policy file.\n- * <\/ol>\n- *\n- * Each policy file consists of one or more grant entries, each of\n- * which consists of a number of permission entries.\n- *\n- * <pre>\n- *   grant signedBy \"<b>alias<\/b>\", codeBase \"<b>URL<\/b>\",\n- *         principal <b>principalClass<\/b> \"<b>principalName<\/b>\",\n- *         principal <b>principalClass<\/b> \"<b>principalName<\/b>\",\n- *         ... {\n- *\n- *     permission <b>Type<\/b> \"<b>name<\/b> \"<b>action<\/b>\",\n- *         signedBy \"<b>alias<\/b>\";\n- *     permission <b>Type<\/b> \"<b>name<\/b> \"<b>action<\/b>\",\n- *         signedBy \"<b>alias<\/b>\";\n- *     ....\n- *   };\n- * <\/pre>\n- *\n- * All non-bold items above must appear as is (although case\n- * doesn't matter and some are optional, as noted below).\n- * principal entries are optional and need not be present.\n- * Italicized items represent variable values.\n- *\n- * <p> A grant entry must begin with the word <code>grant<\/code>.\n- * The <code>signedBy<\/code>,<code>codeBase<\/code> and <code>principal<\/code>\n- * name\/value pairs are optional.\n- * If they are not present, then any signer (including unsigned code)\n- * will match, and any codeBase will match.\n- * Note that the <i>principalClass<\/i>\n- * may be set to the wildcard value, *, which allows it to match\n- * any <code>Principal<\/code> class.  In addition, the <i>principalName<\/i>\n- * may also be set to the wildcard value, *, allowing it to match\n- * any <code>Principal<\/code> name.  When setting the <i>principalName<\/i>\n- * to the *, do not surround the * with quotes.\n- *\n- * <p> A permission entry must begin with the word <code>permission<\/code>.\n- * The word <code><i>Type<\/i><\/code> in the template above is\n- * a specific permission type, such as <code>java.io.FilePermission<\/code>\n- * or <code>java.lang.RuntimePermission<\/code>.\n- *\n- * <p> The \"<i>action<\/i>\" is required for\n- * many permission types, such as <code>java.io.FilePermission<\/code>\n- * (where it specifies what type of file access that is permitted).\n- * It is not required for categories such as\n- * <code>java.lang.RuntimePermission<\/code>\n- * where it is not necessary - you either have the\n- * permission specified by the <code>\"<i>name<\/i>\"<\/code>\n- * value following the type name or you don't.\n- *\n- * <p> The <code>signedBy<\/code> name\/value pair for a permission entry\n- * is optional. If present, it indicates a signed permission. That is,\n- * the permission class itself must be signed by the given alias in\n- * order for it to be granted. For example,\n- * suppose you have the following grant entry:\n- *\n- * <pre>\n- *   grant principal foo.com.Principal \"Duke\" {\n- *     permission Foo \"foobar\", signedBy \"FooSoft\";\n- *   }\n- * <\/pre>\n- *\n- * <p> Then this permission of type <i>Foo<\/i> is granted if the\n- * <code>Foo.class<\/code> permission has been signed by the\n- * \"FooSoft\" alias, or if XXX <code>Foo.class<\/code> is a\n- * system class (i.e., is found on the CLASSPATH).\n- *\n- * <p> Items that appear in an entry must appear in the specified order\n- * (<code>permission<\/code>, <i>Type<\/i>, \"<i>name<\/i>\", and\n- * \"<i>action<\/i>\"). An entry is terminated with a semicolon.\n- *\n- * <p> Case is unimportant for the identifiers (<code>permission<\/code>,\n- * <code>signedBy<\/code>, <code>codeBase<\/code>, etc.) but is\n- * significant for the <i>Type<\/i>\n- * or for any string that is passed in as a value.\n- *\n- * <p> An example of two entries in a policy configuration file is\n- * <pre>\n- *   \/\/ if the code is comes from \"foo.com\" and is running as \"Duke\",\n- *   \/\/ grant it read\/write to all files in \/tmp.\n- *\n- *   grant codeBase \"foo.com\", principal foo.com.Principal \"Duke\" {\n- *              permission java.io.FilePermission \"\/tmp\/*\", \"read,write\";\n- *   };\n- *\n- *   \/\/ grant any code running as \"Duke\" permission to read\n- *   \/\/ the \"java.vendor\" Property.\n- *\n- *   grant principal foo.com.Principal \"Duke\" {\n- *         permission java.util.PropertyPermission \"java.vendor\";\n- *\n- *\n- * <\/pre>\n- *  This Policy implementation supports special handling of any\n- *  permission that contains the string, \"<b>${{self}}<\/b>\", as part of\n- *  its target name.  When such a permission is evaluated\n- *  (such as during a security check), <b>${{self}}<\/b> is replaced\n- *  with one or more Principal class\/name pairs.  The exact\n- *  replacement performed depends upon the contents of the\n- *  grant clause to which the permission belongs.\n- * <p>\n- *\n- *  If the grant clause does not contain any principal information,\n- *  the permission will be ignored (permissions containing\n- *  <b>${{self}}<\/b> in their target names are only valid in the context\n- *  of a principal-based grant clause).  For example, BarPermission\n- *  will always be ignored in the following grant clause:\n- *\n- * <pre>\n- *    grant codebase \"www.foo.com\", signedby \"duke\" {\n- *      permission BarPermission \"... ${{self}} ...\";\n- *    };\n- * <\/pre>\n- *\n- *  If the grant clause contains principal information, <b>${{self}}<\/b>\n- *  will be replaced with that same principal information.\n- *  For example, <b>${{self}}<\/b> in BarPermission will be replaced by\n- *  <b>javax.security.auth.x500.X500Principal \"cn=Duke\"<\/b>\n- *  in the following grant clause:\n- *\n- *  <pre>\n- *    grant principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n- *      permission BarPermission \"... ${{self}} ...\";\n- *    };\n- *  <\/pre>\n- *\n- *  If there is a comma-separated list of principals in the grant\n- *  clause, then <b>${{self}}<\/b> will be replaced by the same\n- *  comma-separated list or principals.\n- *  In the case where both the principal class and name are\n- *  wildcarded in the grant clause, <b>${{self}}<\/b> is replaced\n- *  with all the principals associated with the <code>Subject<\/code>\n- *  in the current <code>AccessControlContext<\/code>.\n- *\n- * <p> For PrivateCredentialPermissions, you can also use \"<b>self<\/b>\"\n- * instead of \"<b>${{self}}<\/b>\". However the use of \"<b>self<\/b>\" is\n- * deprecated in favour of \"<b>${{self}}<\/b>\".\n- *\n- * @see java.security.CodeSource\n- * @see java.security.Permissions\n- * @see java.security.ProtectionDomain\n- *\/\n-@SuppressWarnings(\"removal\")\n-public class PolicyFile extends java.security.Policy {\n-\n-    private static final Debug debug = Debug.getInstance(\"policy\");\n-\n-    private static final String SELF = \"${{self}}\";\n-    private static final String X500PRINCIPAL =\n-                        \"javax.security.auth.x500.X500Principal\";\n-    private static final String POLICY = \"java.security.policy\";\n-    private static final String POLICY_URL = \"policy.url.\";\n-\n-    private static final int DEFAULT_CACHE_SIZE = 1;\n-\n-    \/\/ contains the policy grant entries, PD cache, and alias mapping\n-    \/\/ can be updated if refresh() is called\n-    private volatile PolicyInfo policyInfo;\n-\n-    private boolean expandProperties = true;\n-    private boolean allowSystemProperties = true;\n-    private boolean notUtf8 = false;\n-    private URL url;\n-\n-    \/\/ for use with the reflection API\n-    private static final Class<?>[] PARAMS0 = { };\n-    private static final Class<?>[] PARAMS1 = { String.class };\n-    private static final Class<?>[] PARAMS2 = { String.class, String.class };\n-\n-    \/**\n-     * When a policy file has a syntax error, the exception code may generate\n-     * another permission check and this can cause the policy file to be parsed\n-     * repeatedly, leading to a StackOverflowError or ClassCircularityError.\n-     * To avoid this, this set is populated with policy files that have been\n-     * previously parsed and have syntax errors, so that they can be\n-     * subsequently ignored.\n-     *\/\n-    private static Set<URL> badPolicyURLs =\n-        Collections.newSetFromMap(new ConcurrentHashMap<URL,Boolean>());\n-\n-    \/**\n-     * Use the platform's default file system to avoid recursive initialization\n-     * issues when the VM is configured to use a custom file system provider.\n-     *\/\n-    private static final java.nio.file.FileSystem builtInFS =\n-        DefaultFileSystemProvider.theFileSystem();\n-\n-    \/**\n-     * Initializes the Policy object and reads the default policy\n-     * configuration file(s) into the Policy object.\n-     *\/\n-    public PolicyFile() {\n-        init((URL)null);\n-    }\n-\n-    \/**\n-     * Initializes the Policy object and reads the default policy\n-     * from the specified URL only.\n-     *\/\n-    public PolicyFile(URL url) {\n-        this.url = url;\n-        init(url);\n-    }\n-\n-    \/**\n-     * Initializes the Policy object and reads the default policy\n-     * configuration file(s) into the Policy object.\n-     *\n-     * See the class description for details on the algorithm used to\n-     * initialize the Policy object.\n-     *\/\n-    private void init(URL url) {\n-        \/\/ Properties are set once for each init(); ignore changes\n-        \/\/ between diff invocations of initPolicyFile(policy, url, info).\n-        String numCacheStr =\n-          AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public String run() {\n-                expandProperties = \"true\".equalsIgnoreCase\n-                    (Security.getProperty(\"policy.expandProperties\"));\n-                allowSystemProperties = \"true\".equalsIgnoreCase\n-                    (Security.getProperty(\"policy.allowSystemProperty\"));\n-                notUtf8 = \"false\".equalsIgnoreCase\n-                    (System.getProperty(\"sun.security.policy.utf8\"));\n-                return System.getProperty(\"sun.security.policy.numcaches\");\n-            }});\n-\n-        int numCaches;\n-        if (numCacheStr != null) {\n-            try {\n-                numCaches = Integer.parseInt(numCacheStr);\n-            } catch (NumberFormatException e) {\n-                numCaches = DEFAULT_CACHE_SIZE;\n-            }\n-        } else {\n-            numCaches = DEFAULT_CACHE_SIZE;\n-        }\n-        PolicyInfo newInfo = new PolicyInfo(numCaches);\n-        initPolicyFile(newInfo, url);\n-        policyInfo = newInfo;\n-    }\n-\n-    private void initPolicyFile(final PolicyInfo newInfo, final URL url) {\n-\n-        \/\/ always load default.policy\n-        AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Void run() {\n-                initDefaultPolicy(newInfo);\n-                return null;\n-            }\n-        });\n-\n-        if (url != null) {\n-\n-            \/**\n-             * If the caller specified a URL via Policy.getInstance,\n-             * we only read from default.policy and that URL.\n-             *\/\n-\n-            if (debug != null) {\n-                debug.println(\"reading \" + url);\n-            }\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                @Override\n-                public Void run() {\n-                    if (init(url, newInfo) == false) {\n-                        \/\/ use static policy if all else fails\n-                        initStaticPolicy(newInfo);\n-                    }\n-                    return null;\n-                }\n-            });\n-\n-        } else {\n-\n-            \/**\n-             * Caller did not specify URL via Policy.getInstance.\n-             * Read from URLs listed in the java.security properties file.\n-             *\/\n-\n-            boolean loaded_one = initPolicyFile(POLICY, POLICY_URL, newInfo);\n-            \/\/ To maintain strict backward compatibility\n-            \/\/ we load the static policy only if POLICY load failed\n-            if (!loaded_one) {\n-                \/\/ use static policy if all else fails\n-                initStaticPolicy(newInfo);\n-            }\n-        }\n-    }\n-\n-    private boolean initPolicyFile(final String propname, final String urlname,\n-                                   final PolicyInfo newInfo) {\n-        boolean loadedPolicy =\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Boolean run() {\n-                boolean loaded_policy = false;\n-\n-                if (allowSystemProperties) {\n-                    String extra_policy = System.getProperty(propname);\n-                    if (extra_policy != null) {\n-                        boolean overrideAll = false;\n-                        if (extra_policy.startsWith(\"=\")) {\n-                            overrideAll = true;\n-                            extra_policy = extra_policy.substring(1);\n-                        }\n-                        try {\n-                            extra_policy =\n-                                PropertyExpander.expand(extra_policy);\n-                            URL policyURL;\n-\n-                            File policyFile = new File(extra_policy);\n-                            if (policyFile.exists()) {\n-                                policyURL = ParseUtil.fileToEncodedURL\n-                                    (new File(policyFile.getCanonicalPath()));\n-                            } else {\n-                                policyURL = newURL(extra_policy);\n-                            }\n-                            if (debug != null) {\n-                                debug.println(\"reading \"+policyURL);\n-                            }\n-                            if (init(policyURL, newInfo)) {\n-                                loaded_policy = true;\n-                            }\n-                        } catch (Exception e) {\n-                            \/\/ ignore.\n-                            if (debug != null) {\n-                                debug.println(\"caught exception: \"+e);\n-                            }\n-                        }\n-                        if (overrideAll) {\n-                            if (debug != null) {\n-                                debug.println(\"overriding other policies!\");\n-                            }\n-                            return Boolean.valueOf(loaded_policy);\n-                        }\n-                    }\n-                }\n-\n-                int n = 1;\n-                String policy_uri;\n-\n-                while ((policy_uri = Security.getProperty(urlname+n)) != null) {\n-                    try {\n-                        URL policy_url = null;\n-                        String expanded_uri = PropertyExpander.expand\n-                                (policy_uri).replace(File.separatorChar, '\/');\n-\n-                        if (policy_uri.startsWith(\"file:${java.home}\/\") ||\n-                            policy_uri.startsWith(\"file:${user.home}\/\")) {\n-\n-                            \/\/ this special case accommodates\n-                            \/\/ the situation java.home\/user.home\n-                            \/\/ expand to a single slash, resulting in\n-                            \/\/ a file:\/\/foo URI\n-                            policy_url = new File\n-                                (expanded_uri.substring(5)).toURI().toURL();\n-                        } else {\n-                            policy_url = new URI(expanded_uri).toURL();\n-                        }\n-\n-                        if (debug != null) {\n-                            debug.println(\"reading \" + policy_url);\n-                        }\n-                        if (init(policy_url, newInfo)) {\n-                            loaded_policy = true;\n-                        }\n-                    } catch (Exception e) {\n-                        if (debug != null) {\n-                            debug.println(\n-                                \"Debug info only. Error reading policy \" +e);\n-                            e.printStackTrace();\n-                        }\n-                        \/\/ ignore that policy\n-                    }\n-                    n++;\n-                }\n-                return Boolean.valueOf(loaded_policy);\n-            }\n-        });\n-\n-        return loadedPolicy;\n-    }\n-\n-    private void initDefaultPolicy(PolicyInfo newInfo) {\n-        Path defaultPolicy = builtInFS.getPath(StaticProperty.javaHome(),\n-                                     \"lib\",\n-                                     \"security\",\n-                                     \"default.policy\");\n-        if (debug != null) {\n-            debug.println(\"reading \" + defaultPolicy);\n-        }\n-        try (BufferedReader br = Files.newBufferedReader(defaultPolicy)) {\n-\n-            PolicyParser pp = new PolicyParser(expandProperties);\n-            pp.read(br);\n-\n-            Enumeration<PolicyParser.GrantEntry> enum_ = pp.grantElements();\n-            while (enum_.hasMoreElements()) {\n-                PolicyParser.GrantEntry ge = enum_.nextElement();\n-                addGrantEntry(ge, null, newInfo);\n-            }\n-        } catch (Exception e) {\n-            throw new InternalError(\"Failed to load default.policy\", e);\n-        }\n-    }\n-\n-    \/**\n-     * Reads a policy configuration into the Policy object using a\n-     * Reader object.\n-     *\/\n-    private boolean init(URL policy, PolicyInfo newInfo) {\n-\n-        \/\/ skip parsing policy file if it has been previously parsed and\n-        \/\/ has syntax errors\n-        if (badPolicyURLs.contains(policy)) {\n-            if (debug != null) {\n-                debug.println(\"skipping bad policy file: \" + policy);\n-            }\n-            return false;\n-        }\n-\n-        try (InputStreamReader isr =\n-                 getInputStreamReader(PolicyUtil.getInputStream(policy))) {\n-\n-            PolicyParser pp = new PolicyParser(expandProperties);\n-            pp.read(isr);\n-\n-            KeyStore keyStore = null;\n-            try {\n-                keyStore = PolicyUtil.getKeyStore\n-                                (policy,\n-                                pp.getKeyStoreUrl(),\n-                                pp.getKeyStoreType(),\n-                                pp.getKeyStoreProvider(),\n-                                pp.getStorePassURL(),\n-                                debug);\n-            } catch (Exception e) {\n-                \/\/ ignore, treat it like we have no keystore\n-                if (debug != null) {\n-                    debug.println(\"Debug info only. Ignoring exception.\");\n-                    e.printStackTrace();\n-                }\n-            }\n-\n-            Enumeration<PolicyParser.GrantEntry> enum_ = pp.grantElements();\n-            while (enum_.hasMoreElements()) {\n-                PolicyParser.GrantEntry ge = enum_.nextElement();\n-                addGrantEntry(ge, keyStore, newInfo);\n-            }\n-            return true;\n-        } catch (PolicyParser.ParsingException pe) {\n-            \/\/ record bad policy file to avoid later reparsing it\n-            badPolicyURLs.add(policy);\n-            Object[] source = {policy, pe.getNonlocalizedMessage()};\n-            System.err.println(LocalizedMessage.getNonlocalized\n-                (POLICY + \".error.parsing.policy.message\", source));\n-            if (debug != null) {\n-                pe.printStackTrace();\n-            }\n-        } catch (Exception e) {\n-            if (debug != null) {\n-                debug.println(\"error parsing \"+policy);\n-                debug.println(e.toString());\n-                e.printStackTrace();\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    private InputStreamReader getInputStreamReader(InputStream is) {\n-        \/*\n-         * Read in policy using UTF-8 by default.\n-         *\n-         * Check non-standard system property to see if the default encoding\n-         * should be used instead.\n-         *\/\n-        return (notUtf8)\n-            ? new InputStreamReader(is)\n-            : new InputStreamReader(is, UTF_8);\n-    }\n-\n-    private void initStaticPolicy(final PolicyInfo newInfo) {\n-        if (debug != null) {\n-            debug.println(\"Initializing with static permissions\");\n-        }\n-        AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Void run() {\n-                PolicyEntry pe = new PolicyEntry(new CodeSource(null,\n-                    (Certificate[]) null));\n-                pe.add(SecurityConstants.LOCAL_LISTEN_PERMISSION);\n-                pe.add(new PropertyPermission(\"java.version\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"java.vendor\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"java.vendor.url\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"java.class.version\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"os.name\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"os.version\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"os.arch\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"file.separator\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"path.separator\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"line.separator\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission\n-                                (\"java.specification.version\",\n-                                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission\n-                                (\"java.specification.maintenance.version\",\n-                                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission\n-                                (\"java.specification.vendor\",\n-                                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission\n-                                (\"java.specification.name\",\n-                                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission\n-                                (\"java.vm.specification.version\",\n-                                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission\n-                                (\"java.vm.specification.vendor\",\n-                                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission\n-                                (\"java.vm.specification.name\",\n-                                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"java.vm.version\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"java.vm.vendor\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-                pe.add(new PropertyPermission(\"java.vm.name\",\n-                    SecurityConstants.PROPERTY_READ_ACTION));\n-\n-                \/\/ No need to sync because no one has access to newInfo yet\n-                newInfo.policyEntries.add(pe);\n-\n-                return null;\n-            }\n-        });\n-    }\n-\n-    \/**\n-     * Given a GrantEntry, create a codeSource.\n-     *\n-     * @return null if signedBy alias is not recognized\n-     *\/\n-    private CodeSource getCodeSource(PolicyParser.GrantEntry ge, KeyStore keyStore,\n-        PolicyInfo newInfo) throws java.net.MalformedURLException\n-    {\n-        Certificate[] certs = null;\n-        if (ge.signedBy != null) {\n-            certs = getCertificates(keyStore, ge.signedBy, newInfo);\n-            if (certs == null) {\n-                \/\/ we don't have a key for this alias,\n-                \/\/ just return\n-                if (debug != null) {\n-                    debug.println(\"  -- No certs for alias '\" +\n-                                       ge.signedBy + \"' - ignoring entry\");\n-                }\n-                return null;\n-            }\n-        }\n-\n-        URL location;\n-\n-        if (ge.codeBase != null)\n-            location = newURL(ge.codeBase);\n-        else\n-            location = null;\n-\n-        return (canonicalizeCodebase(new CodeSource(location, certs),false));\n-    }\n-\n-    \/**\n-     * Add one policy entry to the list.\n-     *\/\n-    private void addGrantEntry(PolicyParser.GrantEntry ge,\n-                               KeyStore keyStore, PolicyInfo newInfo) {\n-\n-        if (debug != null) {\n-            debug.println(\"Adding policy entry: \");\n-            debug.println(\"  signedBy \" + ge.signedBy);\n-            debug.println(\"  codeBase \" + ge.codeBase);\n-            if (ge.principals != null) {\n-                for (PolicyParser.PrincipalEntry pppe : ge.principals) {\n-                    debug.println(\"  \" + pppe.toString());\n-                }\n-            }\n-        }\n-\n-        try {\n-            CodeSource codesource = getCodeSource(ge, keyStore, newInfo);\n-            \/\/ skip if signedBy alias was unknown...\n-            if (codesource == null) return;\n-\n-            \/\/ perform keystore alias principal replacement.\n-            \/\/ for example, if alias resolves to X509 certificate,\n-            \/\/ replace principal with:  <X500Principal class>  <SubjectDN>\n-            \/\/ -- skip if alias is unknown\n-            if (replacePrincipals(ge.principals, keyStore) == false)\n-                return;\n-            PolicyEntry entry = new PolicyEntry(codesource, ge.principals);\n-            Enumeration<PolicyParser.PermissionEntry> enum_ =\n-                                                ge.permissionElements();\n-            while (enum_.hasMoreElements()) {\n-                PolicyParser.PermissionEntry pe = enum_.nextElement();\n-\n-                try {\n-                    \/\/ perform ${{ ... }} expansions within permission name\n-                    expandPermissionName(pe, keyStore);\n-\n-                    \/\/ XXX special case PrivateCredentialPermission-SELF\n-                    Permission perm;\n-                    if (pe.permission.equals\n-                        (\"javax.security.auth.PrivateCredentialPermission\") &&\n-                        pe.name.endsWith(\" self\")) {\n-                        pe.name = pe.name.substring(0, pe.name.indexOf(\"self\"))\n-                                + SELF;\n-                    }\n-                    \/\/ check for self\n-                    if (pe.name != null && pe.name.contains(SELF)) {\n-                        \/\/ Create a \"SelfPermission\" , it could be an\n-                        \/\/ an unresolved permission which will be resolved\n-                        \/\/ when implies is called\n-                        \/\/ Add it to entry\n-                        Certificate[] certs;\n-                        if (pe.signedBy != null) {\n-                            certs = getCertificates(keyStore,\n-                                                    pe.signedBy,\n-                                                    newInfo);\n-                        } else {\n-                            certs = null;\n-                        }\n-                        perm = new SelfPermission(pe.permission,\n-                                                  pe.name,\n-                                                  pe.action,\n-                                                  certs);\n-                    } else {\n-                        perm = getInstance(pe.permission,\n-                                           pe.name,\n-                                           pe.action);\n-                    }\n-                    entry.add(perm);\n-                    if (debug != null) {\n-                        debug.println(\"  \"+perm);\n-                    }\n-                } catch (ClassNotFoundException cnfe) {\n-                    Certificate[] certs;\n-                    if (pe.signedBy != null) {\n-                        certs = getCertificates(keyStore,\n-                                                pe.signedBy,\n-                                                newInfo);\n-                    } else {\n-                        certs = null;\n-                    }\n-\n-                    \/\/ only add if we had no signer or we had\n-                    \/\/ a signer and found the keys for it.\n-                    if (certs != null || pe.signedBy == null) {\n-                        Permission perm = new UnresolvedPermission(\n-                                                  pe.permission,\n-                                                  pe.name,\n-                                                  pe.action,\n-                                                  certs);\n-                        entry.add(perm);\n-                        if (debug != null) {\n-                            debug.println(\"  \"+perm);\n-                        }\n-                    }\n-                } catch (java.lang.reflect.InvocationTargetException ite) {\n-                    Object[] source = {pe.permission,\n-                                       ite.getCause().toString()};\n-                    System.err.println(\n-                        LocalizedMessage.getNonlocalized(\n-                            POLICY + \".error.adding.Permission.perm.message\",\n-                            source));\n-                } catch (Exception e) {\n-                    Object[] source = {pe.permission,\n-                                       e.toString()};\n-                    System.err.println(\n-                        LocalizedMessage.getNonlocalized(\n-                            POLICY + \".error.adding.Permission.perm.message\",\n-                            source));\n-                }\n-            }\n-\n-            \/\/ No need to sync because no one has access to newInfo yet\n-            newInfo.policyEntries.add(entry);\n-        } catch (Exception e) {\n-            Object[] source = {e.toString()};\n-            System.err.println(\n-                LocalizedMessage.getNonlocalized(\n-                    POLICY + \".error.adding.Entry.message\",\n-                    source));\n-        }\n-        if (debug != null)\n-            debug.println();\n-    }\n-\n-    \/**\n-     * Returns a new Permission object of the given Type. The Permission is\n-     * created by getting the\n-     * Class object using the <code>Class.forName<\/code> method, and using\n-     * the reflection API to invoke the (String name, String actions)\n-     * constructor on the\n-     * object.\n-     *\n-     * @param type the type of Permission being created.\n-     * @param name the name of the Permission being created.\n-     * @param actions the actions of the Permission being created.\n-     *\n-     * @exception  ClassNotFoundException  if the particular Permission\n-     *             class could not be found.\n-     *\n-     * @exception  IllegalAccessException  if the class or initializer is\n-     *               not accessible.\n-     *\n-     * @exception  InstantiationException  if getInstance tries to\n-     *               instantiate an abstract class or an interface, or if the\n-     *               instantiation fails for some other reason.\n-     *\n-     * @exception  NoSuchMethodException if the (String, String) constructor\n-     *               is not found.\n-     *\n-     * @exception  InvocationTargetException if the underlying Permission\n-     *               constructor throws an exception.\n-     *\n-     *\/\n-\n-    private static final Permission getInstance(String type,\n-                                    String name,\n-                                    String actions)\n-        throws ClassNotFoundException,\n-               InstantiationException,\n-               IllegalAccessException,\n-               NoSuchMethodException,\n-               InvocationTargetException\n-    {\n-        Class<?> pc = Class.forName(type, false, null);\n-        Permission answer = getKnownPermission(pc, name, actions);\n-        if (answer != null) {\n-            return answer;\n-        }\n-        if (!Permission.class.isAssignableFrom(pc)) {\n-            \/\/ not the right subtype\n-            throw new ClassCastException(type + \" is not a Permission\");\n-        }\n-\n-        if (name == null && actions == null) {\n-            try {\n-                Constructor<?> c = pc.getConstructor(PARAMS0);\n-                return (Permission) c.newInstance(new Object[] {});\n-            } catch (NoSuchMethodException ne) {\n-                try {\n-                    Constructor<?> c = pc.getConstructor(PARAMS1);\n-                    return (Permission) c.newInstance(\n-                              new Object[] { name});\n-                } catch (NoSuchMethodException ne1 ) {\n-                    Constructor<?> c = pc.getConstructor(PARAMS2);\n-                    return (Permission) c.newInstance(\n-                        new Object[] { name, actions });\n-                }\n-            }\n-        } else {\n-            if (name != null && actions == null) {\n-                try {\n-                    Constructor<?> c = pc.getConstructor(PARAMS1);\n-                    return (Permission) c.newInstance(new Object[] { name});\n-                } catch (NoSuchMethodException ne) {\n-                    Constructor<?> c = pc.getConstructor(PARAMS2);\n-                    return (Permission) c.newInstance(\n-                          new Object[] { name, actions });\n-                }\n-            } else {\n-                Constructor<?> c = pc.getConstructor(PARAMS2);\n-                return (Permission) c.newInstance(\n-                      new Object[] { name, actions });\n-             }\n-        }\n-    }\n-\n-    \/**\n-     * Creates one of the well-known permissions in the java.base module\n-     * directly instead of via reflection. Keep list short to not penalize\n-     * permissions from other modules.\n-     *\/\n-    private static Permission getKnownPermission(Class<?> claz, String name,\n-                                                 String actions) {\n-        if (claz.equals(FilePermission.class)) {\n-            return new FilePermission(name, actions);\n-        } else if (claz.equals(SocketPermission.class)) {\n-            return new SocketPermission(name, actions);\n-        } else if (claz.equals(RuntimePermission.class)) {\n-            return new RuntimePermission(name, actions);\n-        } else if (claz.equals(PropertyPermission.class)) {\n-            return new PropertyPermission(name, actions);\n-        } else if (claz.equals(NetPermission.class)) {\n-            return new NetPermission(name, actions);\n-        } else if (claz.equals(AllPermission.class)) {\n-            return SecurityConstants.ALL_PERMISSION;\n-        } else if (claz.equals(SecurityPermission.class)) {\n-            return new SecurityPermission(name, actions);\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    \/**\n-     * Creates one of the well-known principals in the java.base module\n-     * directly instead of via reflection. Keep list short to not penalize\n-     * principals from other modules.\n-     *\/\n-    private static Principal getKnownPrincipal(Class<?> claz, String name) {\n-        if (claz.equals(X500Principal.class)) {\n-            return new X500Principal(name);\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    \/**\n-     * Fetch all certs associated with this alias.\n-     *\/\n-    private Certificate[] getCertificates\n-                (KeyStore keyStore, String aliases, PolicyInfo newInfo) {\n-\n-        List<Certificate> vcerts = null;\n-\n-        StringTokenizer st = new StringTokenizer(aliases, \",\");\n-        int n = 0;\n-\n-        while (st.hasMoreTokens()) {\n-            String alias = st.nextToken().trim();\n-            n++;\n-            Certificate cert = null;\n-            \/\/ See if this alias's cert has already been cached\n-            synchronized (newInfo.aliasMapping) {\n-                cert = (Certificate)newInfo.aliasMapping.get(alias);\n-\n-                if (cert == null && keyStore != null) {\n-\n-                    try {\n-                        cert = keyStore.getCertificate(alias);\n-                    } catch (KeyStoreException kse) {\n-                        \/\/ never happens, because keystore has already been loaded\n-                        \/\/ when we call this\n-                    }\n-                    if (cert != null) {\n-                        newInfo.aliasMapping.put(alias, cert);\n-                        newInfo.aliasMapping.put(cert, alias);\n-                    }\n-                }\n-            }\n-\n-            if (cert != null) {\n-                if (vcerts == null)\n-                    vcerts = new ArrayList<>();\n-                vcerts.add(cert);\n-            }\n-        }\n-\n-        \/\/ make sure n == vcerts.size, since we are doing a logical *and*\n-        if (vcerts != null && n == vcerts.size()) {\n-            Certificate[] certs = new Certificate[vcerts.size()];\n-            vcerts.toArray(certs);\n-            return certs;\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    \/**\n-     * Refreshes the policy object by re-reading all the policy files.\n-     *\/\n-    @Override public void refresh() {\n-        init(url);\n-    }\n-\n-    \/**\n-     * Evaluates the global policy for the permissions granted to\n-     * the ProtectionDomain and tests whether the permission is\n-     * granted.\n-     *\n-     * @param pd the ProtectionDomain to test\n-     * @param p the Permission object to be tested for implication.\n-     *\n-     * @return true if \"permission\" is a proper subset of a permission\n-     * granted to this ProtectionDomain.\n-     *\n-     * @see java.security.ProtectionDomain\n-     *\/\n-    @Override\n-    public boolean implies(ProtectionDomain pd, Permission p) {\n-        ProtectionDomainCache pdMap = policyInfo.getPdMapping();\n-        PermissionCollection pc = pdMap.get(pd);\n-\n-        if (pc != null) {\n-            return pc.implies(p);\n-        }\n-\n-        pc = getPermissions(pd);\n-        if (pc == null) {\n-            return false;\n-        }\n-\n-        \/\/ cache mapping of protection domain to its PermissionCollection\n-        pdMap.put(pd, pc);\n-        return pc.implies(p);\n-    }\n-\n-    \/**\n-     * Examines this <code>Policy<\/code> and returns the permissions granted\n-     * to the specified <code>ProtectionDomain<\/code>.  This includes\n-     * the permissions currently associated with the domain as well\n-     * as the policy permissions granted to the domain's\n-     * CodeSource, ClassLoader, and Principals.\n-     *\n-     * <p> Note that this <code>Policy<\/code> implementation has\n-     * special handling for PrivateCredentialPermissions.\n-     * When this method encounters a <code>PrivateCredentialPermission<\/code>\n-     * which specifies \"self\" as the <code>Principal<\/code> class and name,\n-     * it does not add that <code>Permission<\/code> to the returned\n-     * <code>PermissionCollection<\/code>.  Instead, it builds\n-     * a new <code>PrivateCredentialPermission<\/code>\n-     * for each <code>Principal<\/code> associated with the provided\n-     * <code>Subject<\/code>.  Each new <code>PrivateCredentialPermission<\/code>\n-     * contains the same Credential class as specified in the\n-     * originally granted permission, as well as the Class and name\n-     * for the respective <code>Principal<\/code>.\n-     *\n-     * @param domain the Permissions granted to this\n-     *          <code>ProtectionDomain<\/code> are returned.\n-     *\n-     * @return the Permissions granted to the provided\n-     *          <code>ProtectionDomain<\/code>.\n-     *\/\n-    @Override\n-    public PermissionCollection getPermissions(ProtectionDomain domain) {\n-        Permissions perms = new Permissions();\n-\n-        if (domain == null)\n-           return perms;\n-\n-        \/\/ first get policy perms\n-        getPermissions(perms, domain);\n-\n-        \/\/ add static perms\n-        \/\/      - adding static perms after policy perms is necessary\n-        \/\/        to avoid a regression for 4301064\n-        PermissionCollection pc = domain.getPermissions();\n-        if (pc != null) {\n-            synchronized (pc) {\n-                Enumeration<Permission> e = pc.elements();\n-                while (e.hasMoreElements()) {\n-                    perms.add(FilePermCompat.newPermPlusAltPath(e.nextElement()));\n-                }\n-            }\n-        }\n-\n-        return perms;\n-    }\n-\n-    \/**\n-     * Examines this Policy and creates a PermissionCollection object with\n-     * the set of permissions for the specified CodeSource.\n-     *\n-     * @param codesource the CodeSource associated with the caller.\n-     * This encapsulates the original location of the code (where the code\n-     * came from) and the public key(s) of its signer.\n-     *\n-     * @return the set of permissions according to the policy.\n-     *\/\n-    @Override\n-    public PermissionCollection getPermissions(CodeSource codesource) {\n-        return getPermissions(new Permissions(), codesource);\n-    }\n-\n-    \/**\n-     * Examines the global policy and returns the provided Permissions\n-     * object with additional permissions granted to the specified\n-     * ProtectionDomain.\n-     *\n-     * @param perms the Permissions to populate\n-     * @param pd the ProtectionDomain associated with the caller.\n-     *\n-     * @return the set of Permissions according to the policy.\n-     *\/\n-    private PermissionCollection getPermissions(Permissions perms,\n-                                        ProtectionDomain pd ) {\n-        if (debug != null) {\n-            debug.println(\"getPermissions:\\n\\t\" + printPD(pd));\n-        }\n-\n-        final CodeSource cs = pd.getCodeSource();\n-        if (cs == null)\n-            return perms;\n-\n-        CodeSource canonCodeSource = AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<>(){\n-                @Override\n-                public CodeSource run() {\n-                    return canonicalizeCodebase(cs, true);\n-                }\n-            });\n-        return getPermissions(perms, canonCodeSource, pd.getPrincipals());\n-    }\n-\n-    \/**\n-     * Examines the global policy and returns the provided Permissions\n-     * object with additional permissions granted to the specified\n-     * CodeSource.\n-     *\n-     * @param perms the permissions to populate\n-     * @param cs the codesource associated with the caller.\n-     * This encapsulates the original location of the code (where the code\n-     * came from) and the public key(s) of its signer.\n-     *\n-     * @return the set of permissions according to the policy.\n-     *\/\n-    private PermissionCollection getPermissions(Permissions perms,\n-                                                final CodeSource cs) {\n-\n-        if (cs == null)\n-            return perms;\n-\n-        CodeSource canonCodeSource = AccessController.doPrivileged(\n-            new PrivilegedAction<>(){\n-                @Override\n-                public CodeSource run() {\n-                    return canonicalizeCodebase(cs, true);\n-                }\n-            });\n-\n-        return getPermissions(perms, canonCodeSource, null);\n-    }\n-\n-    private Permissions getPermissions(Permissions perms,\n-                                       final CodeSource cs,\n-                                       Principal[] principals) {\n-        for (PolicyEntry entry : policyInfo.policyEntries) {\n-            addPermissions(perms, cs, principals, entry);\n-        }\n-\n-        return perms;\n-    }\n-\n-    private void addPermissions(Permissions perms,\n-        final CodeSource cs,\n-        Principal[] principals,\n-        final PolicyEntry entry) {\n-\n-        if (debug != null) {\n-            debug.println(\"evaluate codesources:\\n\" +\n-                \"\\tPolicy CodeSource: \" + entry.getCodeSource() + \"\\n\" +\n-                \"\\tActive CodeSource: \" + cs);\n-        }\n-\n-        \/\/ check to see if the CodeSource implies\n-        Boolean imp = AccessController.doPrivileged\n-            (new PrivilegedAction<>() {\n-            @Override\n-            public Boolean run() {\n-                return entry.getCodeSource().implies(cs);\n-            }\n-        });\n-        if (!imp.booleanValue()) {\n-            if (debug != null) {\n-                debug.println(\"evaluation (codesource) failed\");\n-            }\n-\n-            \/\/ CodeSource does not imply - return and try next policy entry\n-            return;\n-        }\n-\n-        \/\/ check to see if the Principals imply\n-\n-        List<PolicyParser.PrincipalEntry> entryPs = entry.getPrincipals();\n-        if (debug != null) {\n-            List<PolicyParser.PrincipalEntry> accPs = new ArrayList<>();\n-            if (principals != null) {\n-                for (int i = 0; i < principals.length; i++) {\n-                    accPs.add(new PolicyParser.PrincipalEntry\n-                                        (principals[i].getClass().getName(),\n-                                        principals[i].getName()));\n-                }\n-            }\n-            debug.println(\"evaluate principals:\\n\" +\n-                \"\\tPolicy Principals: \" + entryPs + \"\\n\" +\n-                \"\\tActive Principals: \" + accPs);\n-        }\n-\n-        if (entryPs == null || entryPs.isEmpty()) {\n-\n-            \/\/ policy entry has no principals -\n-            \/\/ add perms regardless of principals in current ACC\n-\n-            addPerms(perms, principals, entry);\n-            if (debug != null) {\n-                debug.println(\"evaluation (codesource\/principals) passed\");\n-            }\n-            return;\n-\n-        } else if (principals == null || principals.length == 0) {\n-\n-            \/\/ current thread has no principals but this policy entry\n-            \/\/ has principals - perms are not added\n-\n-            if (debug != null) {\n-                debug.println(\"evaluation (principals) failed\");\n-            }\n-            return;\n-        }\n-\n-        \/\/ current thread has principals and this policy entry\n-        \/\/ has principals.  see if policy entry principals match\n-        \/\/ principals in current ACC\n-\n-        for (PolicyParser.PrincipalEntry pppe : entryPs) {\n-\n-            \/\/ Check for wildcards\n-            if (pppe.isWildcardClass()) {\n-                \/\/ a wildcard class matches all principals in current ACC\n-                continue;\n-            }\n-\n-            if (pppe.isWildcardName()) {\n-                \/\/ a wildcard name matches any principal with the same class\n-                if (wildcardPrincipalNameImplies(pppe.principalClass,\n-                                                 principals)) {\n-                    continue;\n-                }\n-                if (debug != null) {\n-                    debug.println(\"evaluation (principal name wildcard) failed\");\n-                }\n-                \/\/ policy entry principal not in current ACC -\n-                \/\/ immediately return and go to next policy entry\n-                return;\n-            }\n-\n-            Set<Principal> pSet = new HashSet<>(Arrays.asList(principals));\n-            Subject subject = new Subject(true, pSet,\n-                                          Collections.EMPTY_SET,\n-                                          Collections.EMPTY_SET);\n-            try {\n-                ClassLoader cl = Thread.currentThread().getContextClassLoader();\n-                Class<?> pClass = Class.forName(pppe.principalClass, false, cl);\n-                Principal p = getKnownPrincipal(pClass, pppe.principalName);\n-                if (p == null) {\n-                    if (!Principal.class.isAssignableFrom(pClass)) {\n-                        \/\/ not the right subtype\n-                        throw new ClassCastException(pppe.principalClass +\n-                                                     \" is not a Principal\");\n-                    }\n-\n-                    Constructor<?> c = pClass.getConstructor(PARAMS1);\n-                    p = (Principal)c.newInstance(new Object[] {\n-                                                 pppe.principalName });\n-\n-                }\n-\n-                if (debug != null) {\n-                    debug.println(\"found Principal \" + p.getClass().getName());\n-                }\n-\n-                \/\/ check if the Principal implies the current\n-                \/\/ thread's principals\n-                if (!p.implies(subject)) {\n-                    if (debug != null) {\n-                        debug.println(\"evaluation (principal implies) failed\");\n-                    }\n-\n-                    \/\/ policy principal does not imply the current Subject -\n-                    \/\/ immediately return and go to next policy entry\n-                    return;\n-                }\n-            } catch (Exception e) {\n-                \/\/ fall back to default principal comparison.\n-                \/\/ see if policy entry principal is in current ACC\n-\n-                if (debug != null) {\n-                    e.printStackTrace();\n-                }\n-\n-                if (!pppe.implies(subject)) {\n-                    if (debug != null) {\n-                        debug.println(\"evaluation (default principal implies) failed\");\n-                    }\n-\n-                    \/\/ policy entry principal not in current ACC -\n-                    \/\/ immediately return and go to next policy entry\n-                    return;\n-                }\n-            }\n-\n-            \/\/ either the principal information matched,\n-            \/\/ or the Principal.implies succeeded.\n-            \/\/ continue loop and test the next policy principal\n-        }\n-\n-        \/\/ all policy entry principals were found in the current ACC -\n-        \/\/ grant the policy permissions\n-\n-        if (debug != null) {\n-            debug.println(\"evaluation (codesource\/principals) passed\");\n-        }\n-        addPerms(perms, principals, entry);\n-    }\n-\n-    \/**\n-     * Returns true if the array of principals contains at least one\n-     * principal of the specified class.\n-     *\/\n-    private static boolean wildcardPrincipalNameImplies(String principalClass,\n-                                                        Principal[] principals)\n-    {\n-        for (Principal p : principals) {\n-            if (principalClass.equals(p.getClass().getName())) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private void addPerms(Permissions perms,\n-                        Principal[] accPs,\n-                        PolicyEntry entry) {\n-        for (int i = 0; i < entry.permissions.size(); i++) {\n-            Permission p = entry.permissions.get(i);\n-            if (debug != null) {\n-                debug.println(\"  granting \" + p);\n-            }\n-\n-            if (p instanceof SelfPermission) {\n-                \/\/ handle \"SELF\" permissions\n-                expandSelf((SelfPermission)p,\n-                        entry.getPrincipals(),\n-                        accPs,\n-                        perms);\n-            } else {\n-                perms.add(FilePermCompat.newPermPlusAltPath(p));\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * @param sp the SelfPermission that needs to be expanded.\n-     *\n-     * @param entryPs list of principals for the Policy entry.\n-     *\n-     * @param pdp Principal array from the current ProtectionDomain.\n-     *\n-     * @param perms the PermissionCollection where the individual\n-     *                  Permissions will be added after expansion.\n-     *\/\n-\n-    private void expandSelf(SelfPermission sp,\n-                            List<PolicyParser.PrincipalEntry> entryPs,\n-                            Principal[] pdp,\n-                            Permissions perms) {\n-\n-        if (entryPs == null || entryPs.isEmpty()) {\n-            \/\/ No principals in the grant to substitute\n-            if (debug != null) {\n-                debug.println(\"Ignoring permission \"\n-                                + sp.getSelfType()\n-                                + \" with target name (\"\n-                                + sp.getSelfName() + \").  \"\n-                                + \"No Principal(s) specified \"\n-                                + \"in the grant clause.  \"\n-                                + \"SELF-based target names are \"\n-                                + \"only valid in the context \"\n-                                + \"of a Principal-based grant entry.\"\n-                             );\n-            }\n-            return;\n-        }\n-        int startIndex = 0;\n-        int v;\n-        StringBuilder sb = new StringBuilder();\n-        while ((v = sp.getSelfName().indexOf(SELF, startIndex)) != -1) {\n-\n-            \/\/ add non-SELF string\n-            sb.append(sp.getSelfName().substring(startIndex, v));\n-\n-            \/\/ expand SELF\n-            Iterator<PolicyParser.PrincipalEntry> pli = entryPs.iterator();\n-            while (pli.hasNext()) {\n-                PolicyParser.PrincipalEntry pppe = pli.next();\n-                String[][] principalInfo = getPrincipalInfo(pppe,pdp);\n-                for (int i = 0; i < principalInfo.length; i++) {\n-                    if (i != 0) {\n-                        sb.append(\", \");\n-                    }\n-                    sb.append(principalInfo[i][0] + \" \" +\n-                        \"\\\"\" + principalInfo[i][1] + \"\\\"\");\n-                }\n-                if (pli.hasNext()) {\n-                    sb.append(\", \");\n-                }\n-            }\n-            startIndex = v + SELF.length();\n-        }\n-        \/\/ add remaining string (might be the entire string)\n-        sb.append(sp.getSelfName().substring(startIndex));\n-\n-        if (debug != null) {\n-            debug.println(\"  expanded:\\n\\t\" + sp.getSelfName()\n-                        + \"\\n  into:\\n\\t\" + sb.toString());\n-        }\n-        try {\n-            \/\/ first try to instantiate the permission\n-            perms.add(FilePermCompat.newPermPlusAltPath(getInstance(sp.getSelfType(),\n-                                  sb.toString(),\n-                                  sp.getSelfActions())));\n-        } catch (ClassNotFoundException cnfe) {\n-            \/\/ ok, the permission is not in the bootclasspath.\n-            \/\/ before we add an UnresolvedPermission, check to see\n-            \/\/ whether this perm already belongs to the collection.\n-            \/\/ if so, use that perm's ClassLoader to create a new\n-            \/\/ one.\n-            Class<?> pc = null;\n-            synchronized (perms) {\n-                Enumeration<Permission> e = perms.elements();\n-                while (e.hasMoreElements()) {\n-                    Permission pElement = e.nextElement();\n-                    if (pElement.getClass().getName().equals(sp.getSelfType())) {\n-                        pc = pElement.getClass();\n-                        break;\n-                    }\n-                }\n-            }\n-            if (pc == null) {\n-                \/\/ create an UnresolvedPermission\n-                perms.add(new UnresolvedPermission(sp.getSelfType(),\n-                                                        sb.toString(),\n-                                                        sp.getSelfActions(),\n-                                                        sp.getCerts()));\n-            } else {\n-                try {\n-                    \/\/ we found an instantiated permission.\n-                    \/\/ use its class loader to instantiate a new permission.\n-                    Constructor<?> c;\n-                    \/\/ name parameter can not be null\n-                    if (sp.getSelfActions() == null) {\n-                        try {\n-                            c = pc.getConstructor(PARAMS1);\n-                            perms.add((Permission)c.newInstance\n-                                 (new Object[] {sb.toString()}));\n-                        } catch (NoSuchMethodException ne) {\n-                            c = pc.getConstructor(PARAMS2);\n-                            perms.add((Permission)c.newInstance\n-                                 (new Object[] {sb.toString(),\n-                                                sp.getSelfActions() }));\n-                        }\n-                    } else {\n-                        c = pc.getConstructor(PARAMS2);\n-                        perms.add((Permission)c.newInstance\n-                           (new Object[] {sb.toString(),\n-                                          sp.getSelfActions()}));\n-                    }\n-                } catch (Exception nme) {\n-                    if (debug != null) {\n-                        debug.println(\"self entry expansion \" +\n-                        \" instantiation failed: \"\n-                        +  nme.toString());\n-                    }\n-                }\n-            }\n-        } catch (Exception e) {\n-            if (debug != null) {\n-                debug.println(e.toString());\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * return the principal class\/name pair in the 2D array.\n-     * array[x][y]:     x corresponds to the array length.\n-     *                  if (y == 0), it's the principal class.\n-     *                  if (y == 1), it's the principal name.\n-     *\/\n-    private String[][] getPrincipalInfo\n-        (PolicyParser.PrincipalEntry pe, Principal[] pdp) {\n-\n-        \/\/ there are 3 possibilities:\n-        \/\/ 1) the entry's Principal class and name are not wildcarded\n-        \/\/ 2) the entry's Principal name is wildcarded only\n-        \/\/ 3) the entry's Principal class and name are wildcarded\n-\n-        if (!pe.isWildcardClass() && !pe.isWildcardName()) {\n-\n-            \/\/ build an info array for the principal\n-            \/\/ from the Policy entry\n-            String[][] info = new String[1][2];\n-            info[0][0] = pe.principalClass;\n-            info[0][1] = pe.principalName;\n-            return info;\n-\n-        } else if (!pe.isWildcardClass() && pe.isWildcardName()) {\n-\n-            \/\/ build an info array for every principal\n-            \/\/ in the current domain which has a principal class\n-            \/\/ that is equal to policy entry principal class name\n-            List<Principal> plist = new ArrayList<>();\n-            for (int i = 0; i < pdp.length; i++) {\n-                if (pe.principalClass.equals(pdp[i].getClass().getName()))\n-                    plist.add(pdp[i]);\n-            }\n-            String[][] info = new String[plist.size()][2];\n-            int i = 0;\n-            for (Principal p : plist) {\n-                info[i][0] = p.getClass().getName();\n-                info[i][1] = p.getName();\n-                i++;\n-            }\n-            return info;\n-\n-        } else {\n-\n-            \/\/ build an info array for every\n-            \/\/ one of the current Domain's principals\n-\n-            String[][] info = new String[pdp.length][2];\n-\n-            for (int i = 0; i < pdp.length; i++) {\n-                info[i][0] = pdp[i].getClass().getName();\n-                info[i][1] = pdp[i].getName();\n-            }\n-            return info;\n-        }\n-    }\n-\n-    \/*\n-     * Returns the signer certificates from the list of certificates\n-     * associated with the given code source.\n-     *\n-     * The signer certificates are those certificates that were used\n-     * to verify signed code originating from the codesource location.\n-     *\n-     * This method assumes that in the given code source, each signer\n-     * certificate is followed by its supporting certificate chain\n-     * (which may be empty), and that the signer certificate and its\n-     * supporting certificate chain are ordered bottom-to-top\n-     * (i.e., with the signer certificate first and the (root) certificate\n-     * authority last).\n-     *\/\n-    protected Certificate[] getSignerCertificates(CodeSource cs) {\n-        Certificate[] certs = null;\n-        if ((certs = cs.getCertificates()) == null)\n-            return null;\n-        for (int i=0; i<certs.length; i++) {\n-            if (!(certs[i] instanceof X509Certificate))\n-                return cs.getCertificates();\n-        }\n-\n-        \/\/ Do we have to do anything?\n-        int i = 0;\n-        int count = 0;\n-        while (i < certs.length) {\n-            count++;\n-            while (((i+1) < certs.length)\n-                   && ((X509Certificate)certs[i]).getIssuerX500Principal().equals(\n-                           ((X509Certificate)certs[i+1]).getSubjectX500Principal())) {\n-                i++;\n-            }\n-            i++;\n-        }\n-        if (count == certs.length)\n-            \/\/ Done\n-            return certs;\n-\n-        List<Certificate> userCertList = new ArrayList<>();\n-        i = 0;\n-        while (i < certs.length) {\n-            userCertList.add(certs[i]);\n-            while (((i+1) < certs.length)\n-                   && ((X509Certificate)certs[i]).getIssuerX500Principal().equals(\n-                           ((X509Certificate)certs[i+1]).getSubjectX500Principal())) {\n-                i++;\n-            }\n-            i++;\n-        }\n-        Certificate[] userCerts = new Certificate[userCertList.size()];\n-        userCertList.toArray(userCerts);\n-        return userCerts;\n-    }\n-\n-    private CodeSource canonicalizeCodebase(CodeSource cs,\n-                                            boolean extractSignerCerts) {\n-\n-        String path = null;\n-\n-        CodeSource canonCs = cs;\n-        URL u = cs.getLocation();\n-        if (u != null) {\n-            if (u.getProtocol().equals(\"jar\")) {\n-                \/\/ unwrap url embedded inside jar url\n-                String spec = u.getFile();\n-                int separator = spec.indexOf(\"!\/\");\n-                if (separator != -1) {\n-                    try {\n-                        u = newURL(spec.substring(0, separator));\n-                    } catch (MalformedURLException e) {\n-                        \/\/ Fail silently. In this case, url stays what\n-                        \/\/ it was above\n-                    }\n-                }\n-            }\n-            if (u.getProtocol().equals(\"file\")) {\n-                boolean isLocalFile = false;\n-                String host = u.getHost();\n-                isLocalFile = (host == null || host.isEmpty() ||\n-                    host.equals(\"~\") || host.equalsIgnoreCase(\"localhost\"));\n-\n-                if (isLocalFile) {\n-                    path = u.getFile().replace('\/', File.separatorChar);\n-                    path = ParseUtil.decode(path);\n-                }\n-            }\n-        }\n-\n-        if (path != null) {\n-            try {\n-                URL csUrl = null;\n-                path = canonPath(path);\n-                csUrl = ParseUtil.fileToEncodedURL(new File(path));\n-\n-                if (extractSignerCerts) {\n-                    canonCs = new CodeSource(csUrl,\n-                                             getSignerCertificates(cs));\n-                } else {\n-                    canonCs = new CodeSource(csUrl,\n-                                             cs.getCertificates());\n-                }\n-            } catch (IOException ioe) {\n-                \/\/ leave codesource as it is, unless we have to extract its\n-                \/\/ signer certificates\n-                if (extractSignerCerts) {\n-                    canonCs = new CodeSource(cs.getLocation(),\n-                                             getSignerCertificates(cs));\n-                }\n-            }\n-        } else {\n-            if (extractSignerCerts) {\n-                canonCs = new CodeSource(cs.getLocation(),\n-                                         getSignerCertificates(cs));\n-            }\n-        }\n-        return canonCs;\n-    }\n-\n-    \/\/ Wrapper to return a canonical path that avoids calling getCanonicalPath()\n-    \/\/ with paths that are intended to match all entries in the directory\n-    private static String canonPath(String path) throws IOException {\n-        if (path.endsWith(\"*\")) {\n-            path = path.substring(0, path.length()-1) + \"-\";\n-            path = new File(path).getCanonicalPath();\n-            return path.substring(0, path.length()-1) + \"*\";\n-        } else {\n-            return new File(path).getCanonicalPath();\n-        }\n-    }\n-\n-    private String printPD(ProtectionDomain pd) {\n-        Principal[] principals = pd.getPrincipals();\n-        String pals = \"<no principals>\";\n-        if (principals != null && principals.length > 0) {\n-            StringBuilder palBuf = new StringBuilder(\"(principals \");\n-            for (int i = 0; i < principals.length; i++) {\n-                palBuf.append(principals[i].getClass().getName() +\n-                              \" \\\"\" + principals[i].getName() +\n-                              \"\\\"\");\n-                if (i < principals.length-1)\n-                    palBuf.append(\", \");\n-                else\n-                    palBuf.append(\")\");\n-            }\n-            pals = palBuf.toString();\n-        }\n-        return \"PD CodeSource: \"\n-                + pd.getCodeSource()\n-                +\"\\n\\t\" + \"PD ClassLoader: \"\n-                + pd.getClassLoader()\n-                +\"\\n\\t\" + \"PD Principals: \"\n-                + pals;\n-    }\n-\n-    \/**\n-     * return true if no replacement was performed,\n-     * or if replacement succeeded.\n-     *\/\n-    private boolean replacePrincipals(\n-        List<PolicyParser.PrincipalEntry> principals, KeyStore keystore) {\n-\n-        if (principals == null || principals.isEmpty() || keystore == null)\n-            return true;\n-\n-        for (PolicyParser.PrincipalEntry pppe : principals) {\n-            if (pppe.isReplaceName()) {\n-\n-                \/\/ perform replacement\n-                \/\/ (only X509 replacement is possible now)\n-                String name;\n-                if ((name = getDN(pppe.principalName, keystore)) == null) {\n-                    return false;\n-                }\n-\n-                if (debug != null) {\n-                    debug.println(\"  Replacing \\\"\" +\n-                        pppe.principalName +\n-                        \"\\\" with \" +\n-                        X500PRINCIPAL + \"\/\\\"\" +\n-                        name +\n-                        \"\\\"\");\n-                }\n-\n-                pppe.principalClass = X500PRINCIPAL;\n-                pppe.principalName = name;\n-            }\n-        }\n-        \/\/ return true if no replacement was performed,\n-        \/\/ or if replacement succeeded\n-        return true;\n-    }\n-\n-    private void expandPermissionName(PolicyParser.PermissionEntry pe,\n-                                        KeyStore keystore) throws Exception {\n-        \/\/ short cut the common case\n-        if (pe.name == null || pe.name.indexOf(\"${{\", 0) == -1) {\n-            return;\n-        }\n-\n-        int startIndex = 0;\n-        int b, e;\n-        StringBuilder sb = new StringBuilder();\n-        while ((b = pe.name.indexOf(\"${{\", startIndex)) != -1) {\n-            e = pe.name.indexOf(\"}}\", b);\n-            if (e < 1) {\n-                break;\n-            }\n-            sb.append(pe.name.substring(startIndex, b));\n-\n-            \/\/ get the value in ${{...}}\n-            String value = pe.name.substring(b+3, e);\n-\n-            \/\/ parse up to the first ':'\n-            int colonIndex;\n-            String prefix = value;\n-            String suffix;\n-            if ((colonIndex = value.indexOf(':')) != -1) {\n-                prefix = value.substring(0, colonIndex);\n-            }\n-\n-            \/\/ handle different prefix possibilities\n-            if (prefix.equalsIgnoreCase(\"self\")) {\n-                \/\/ do nothing - handled later\n-                sb.append(pe.name.substring(b, e+2));\n-                startIndex = e+2;\n-                continue;\n-            } else if (prefix.equalsIgnoreCase(\"alias\")) {\n-                \/\/ get the suffix and perform keystore alias replacement\n-                if (colonIndex == -1) {\n-                    Object[] source = {pe.name};\n-                    throw new Exception(\n-                        LocalizedMessage.getNonlocalized(\n-                            \"alias.name.not.provided.pe.name.\",\n-                            source));\n-                }\n-                suffix = value.substring(colonIndex+1);\n-                if ((suffix = getDN(suffix, keystore)) == null) {\n-                    Object[] source = {value.substring(colonIndex+1)};\n-                    throw new Exception(\n-                        LocalizedMessage.getNonlocalized(\n-                            \"unable.to.perform.substitution.on.alias.suffix\",\n-                            source));\n-                }\n-\n-                sb.append(X500PRINCIPAL + \" \\\"\" + suffix + \"\\\"\");\n-                startIndex = e+2;\n-            } else {\n-                Object[] source = {prefix};\n-                throw new Exception(\n-                    LocalizedMessage.getNonlocalized(\n-                        \"substitution.value.prefix.unsupported\",\n-                        source));\n-            }\n-        }\n-\n-        \/\/ copy the rest of the value\n-        sb.append(pe.name.substring(startIndex));\n-\n-        \/\/ replace the name with expanded value\n-        if (debug != null) {\n-            debug.println(\"  Permission name expanded from:\\n\\t\" +\n-                        pe.name + \"\\nto\\n\\t\" + sb.toString());\n-        }\n-        pe.name = sb.toString();\n-    }\n-\n-    private String getDN(String alias, KeyStore keystore) {\n-        Certificate cert = null;\n-        try {\n-            cert = keystore.getCertificate(alias);\n-        } catch (Exception e) {\n-            if (debug != null) {\n-                debug.println(\"  Error retrieving certificate for '\" +\n-                                alias +\n-                                \"': \" +\n-                                e.toString());\n-            }\n-            return null;\n-        }\n-\n-        if (!(cert instanceof X509Certificate x509Cert)) {\n-            if (debug != null) {\n-                debug.println(\"  -- No certificate for '\" +\n-                                alias +\n-                                \"' - ignoring entry\");\n-            }\n-            return null;\n-        } else {\n-            \/\/ 4702543:  X500 names with an EmailAddress\n-            \/\/ were encoded incorrectly.  create new\n-            \/\/ X500Principal name with correct encoding\n-\n-            X500Principal p = new X500Principal\n-                (x509Cert.getSubjectX500Principal().toString());\n-            return p.getName();\n-        }\n-    }\n-\n-    \/**\n-     * Each entry in the policy configuration file is represented by a\n-     * PolicyEntry object.  <p>\n-     *\n-     * A PolicyEntry is a (CodeSource,Permission) pair.  The\n-     * CodeSource contains the (URL, PublicKey) that together identify\n-     * where the Java bytecodes come from and who (if anyone) signed\n-     * them.  The URL could refer to localhost.  The URL could also be\n-     * null, meaning that this policy entry is given to all comers, as\n-     * long as they match the signer field.  The signer could be null,\n-     * meaning the code is not signed. <p>\n-     *\n-     * The Permission contains the (Type, Name, Action) triplet. <p>\n-     *\n-     * For now, the Policy object retrieves the public key from the\n-     * X.509 certificate on disk that corresponds to the signedBy\n-     * alias specified in the Policy config file.  For reasons of\n-     * efficiency, the Policy object keeps a hashtable of certs already\n-     * read in.  This could be replaced by a secure internal key\n-     * store.\n-     *\n-     * <p>\n-     * For example, the entry\n-     * <pre>\n-     *          permission java.io.File \"\/tmp\", \"read,write\",\n-     *          signedBy \"Duke\";\n-     * <\/pre>\n-     * is represented internally\n-     * <pre>\n-     *\n-     * FilePermission f = new FilePermission(\"\/tmp\", \"read,write\");\n-     * PublicKey p = publickeys.get(\"Duke\");\n-     * URL u = InetAddress.getLocalHost();\n-     * CodeBase c = new CodeBase( p, u );\n-     * pe = new PolicyEntry(f, c);\n-     * <\/pre>\n-     *\n-     * @author Marianne Mueller\n-     * @author Roland Schemers\n-     * @see java.security.CodeSource\n-     * @see java.security.Policy\n-     * @see java.security.Permissions\n-     * @see java.security.ProtectionDomain\n-     *\/\n-    private static class PolicyEntry {\n-\n-        private final CodeSource codesource;\n-        final List<Permission> permissions;\n-        private final List<PolicyParser.PrincipalEntry> principals;\n-\n-        \/**\n-         * Given a Permission and a CodeSource, create a policy entry.\n-         *\n-         * XXX Decide if\/how to add validity fields and \"purpose\" fields to\n-         * XXX policy entries\n-         *\n-         * @param cs the CodeSource, which encapsulates the URL and the\n-         *        public key\n-         *        attributes from the policy config file. Validity checks\n-         *        are performed on the public key before PolicyEntry is\n-         *        called.\n-         *\n-         *\/\n-        PolicyEntry(CodeSource cs, List<PolicyParser.PrincipalEntry> principals)\n-        {\n-            this.codesource = cs;\n-            this.permissions = new ArrayList<Permission>();\n-            this.principals = principals; \/\/ can be null\n-        }\n-\n-        PolicyEntry(CodeSource cs)\n-        {\n-            this(cs, null);\n-        }\n-\n-        List<PolicyParser.PrincipalEntry> getPrincipals() {\n-            return principals; \/\/ can be null\n-        }\n-\n-        \/**\n-         * add a Permission object to this entry.\n-         * No need to sync add op because perms are added to entry only\n-         * while entry is being initialized\n-         *\/\n-        void add(Permission p) {\n-            permissions.add(p);\n-        }\n-\n-        \/**\n-         * Return the CodeSource for this policy entry\n-         *\/\n-        CodeSource getCodeSource() {\n-            return codesource;\n-        }\n-\n-        @Override public String toString(){\n-            StringBuilder sb = new StringBuilder();\n-            sb.append(ResourcesMgr.getString(\"LPARAM\"));\n-            sb.append(getCodeSource());\n-            sb.append(\"\\n\");\n-            for (int j = 0; j < permissions.size(); j++) {\n-                Permission p = permissions.get(j);\n-                sb.append(ResourcesMgr.getString(\"SPACE\"));\n-                sb.append(ResourcesMgr.getString(\"SPACE\"));\n-                sb.append(p);\n-                sb.append(ResourcesMgr.getString(\"NEWLINE\"));\n-            }\n-            sb.append(ResourcesMgr.getString(\"RPARAM\"));\n-            sb.append(ResourcesMgr.getString(\"NEWLINE\"));\n-            return sb.toString();\n-        }\n-    }\n-\n-    private static class SelfPermission extends Permission {\n-\n-        @java.io.Serial\n-        private static final long serialVersionUID = -8315562579967246806L;\n-\n-        \/**\n-         * The class name of the Permission class that will be\n-         * created when this self permission is expanded .\n-         *\n-         * @serial\n-         *\/\n-        private String type;\n-\n-        \/**\n-         * The permission name.\n-         *\n-         * @serial\n-         *\/\n-        private String name;\n-\n-        \/**\n-         * The actions of the permission.\n-         *\n-         * @serial\n-         *\/\n-        private String actions;\n-\n-        \/**\n-         * The certs of the permission.\n-         *\n-         * @serial\n-         *\/\n-        private Certificate[] certs;\n-\n-        \/**\n-         * Creates a new SelfPermission containing the permission\n-         * information needed later to expand the self\n-         * @param type the class name of the Permission class that will be\n-         * created when this permission is expanded and if necessary resolved.\n-         * @param name the name of the permission.\n-         * @param actions the actions of the permission.\n-         * @param certs the certificates the permission's class was signed with.\n-         * This is a list of certificate chains, where each chain is composed of\n-         * a signer certificate and optionally its supporting certificate chain.\n-         * Each chain is ordered bottom-to-top (i.e., with the signer\n-         * certificate first and the (root) certificate authority last).\n-         *\/\n-        public SelfPermission(String type, String name, String actions,\n-                              Certificate[] certs)\n-        {\n-            super(type);\n-            if (type == null) {\n-                throw new NullPointerException\n-                    (LocalizedMessage.getNonlocalized(\"type.can.t.be.null\"));\n-            }\n-            this.type = type;\n-            this.name = name;\n-            this.actions = actions;\n-            if (certs != null) {\n-                \/\/ Extract the signer certs from the list of certificates.\n-                for (int i=0; i<certs.length; i++) {\n-                    if (!(certs[i] instanceof X509Certificate)) {\n-                        \/\/ there is no concept of signer certs, so we store the\n-                        \/\/ entire cert array\n-                        this.certs = certs.clone();\n-                        break;\n-                    }\n-                }\n-\n-                if (this.certs == null) {\n-                    \/\/ Go through the list of certs and see if all the certs are\n-                    \/\/ signer certs.\n-                    int i = 0;\n-                    int count = 0;\n-                    while (i < certs.length) {\n-                        count++;\n-                        while (((i+1) < certs.length) &&\n-                            ((X509Certificate)certs[i]).getIssuerX500Principal().equals(\n-                            ((X509Certificate)certs[i+1]).getSubjectX500Principal())) {\n-                            i++;\n-                        }\n-                        i++;\n-                    }\n-                    if (count == certs.length) {\n-                        \/\/ All the certs are signer certs, so we store the\n-                        \/\/ entire array\n-                        this.certs = certs.clone();\n-                    }\n-\n-                    if (this.certs == null) {\n-                        \/\/ extract the signer certs\n-                        List<Certificate> signerCerts = new ArrayList<>();\n-                        i = 0;\n-                        while (i < certs.length) {\n-                            signerCerts.add(certs[i]);\n-                            while (((i+1) < certs.length) &&\n-                                ((X509Certificate)certs[i]).getIssuerX500Principal().equals(\n-                                ((X509Certificate)certs[i+1]).getSubjectX500Principal())) {\n-                                i++;\n-                            }\n-                            i++;\n-                        }\n-                        this.certs = new Certificate[signerCerts.size()];\n-                        signerCerts.toArray(this.certs);\n-                    }\n-                }\n-            }\n-        }\n-\n-        \/**\n-         * This method always returns false for SelfPermission permissions.\n-         * That is, an SelfPermission never considered to\n-         * imply another permission.\n-         *\n-         * @param p the permission to check against.\n-         *\n-         * @return false.\n-         *\/\n-        @Override public boolean implies(Permission p) {\n-            return false;\n-        }\n-\n-        \/**\n-         * Checks two SelfPermission objects for equality.\n-         *\n-         * Checks that <i>obj<\/i> is an SelfPermission, and has\n-         * the same type (class) name, permission name, actions, and\n-         * certificates as this object.\n-         *\n-         * @param obj the object we are testing for equality with this object.\n-         *\n-         * @return true if obj is an SelfPermission, and has the same\n-         * type (class) name, permission name, actions, and\n-         * certificates as this object.\n-         *\/\n-        @Override public boolean equals(Object obj) {\n-            if (obj == this)\n-                return true;\n-\n-            if (! (obj instanceof SelfPermission))\n-                return false;\n-            SelfPermission that = (SelfPermission) obj;\n-\n-            if (!(this.type.equals(that.type) &&\n-                this.name.equals(that.name) &&\n-                this.actions.equals(that.actions)))\n-                return false;\n-\n-            if ((this.certs == null) && (that.certs == null)) {\n-                return true;\n-            }\n-\n-            if ((this.certs == null) || (that.certs == null)) {\n-                return false;\n-            }\n-\n-            if (this.certs.length != that.certs.length) {\n-                return false;\n-            }\n-\n-            int i,j;\n-            boolean match;\n-\n-            for (i = 0; i < this.certs.length; i++) {\n-                match = false;\n-                for (j = 0; j < that.certs.length; j++) {\n-                    if (this.certs[i].equals(that.certs[j])) {\n-                        match = true;\n-                        break;\n-                    }\n-                }\n-                if (!match) return false;\n-            }\n-\n-            for (i = 0; i < that.certs.length; i++) {\n-                match = false;\n-                for (j = 0; j < this.certs.length; j++) {\n-                    if (that.certs[i].equals(this.certs[j])) {\n-                        match = true;\n-                        break;\n-                    }\n-                }\n-                if (!match) return false;\n-            }\n-            return true;\n-        }\n-\n-        \/**\n-         * {@return the hash code value for this object}\n-         *\/\n-        @Override public int hashCode() {\n-            return type.hashCode() ^ Objects.hashCode(name)\n-                    ^ Objects.hashCode(actions);\n-        }\n-\n-        \/**\n-         * Returns the canonical string representation of the actions,\n-         * which currently is the empty string \"\", since there are no actions\n-         * for an SelfPermission. That is, the actions for the\n-         * permission that will be created when this SelfPermission\n-         * is resolved may be non-null, but an SelfPermission\n-         * itself is never considered to have any actions.\n-         *\n-         * @return the empty string \"\".\n-         *\/\n-        @Override public String getActions() {\n-            return \"\";\n-        }\n-\n-        public String getSelfType() {\n-            return type;\n-        }\n-\n-        public String getSelfName() {\n-            return name;\n-        }\n-\n-        public String getSelfActions() {\n-            return actions;\n-        }\n-\n-        public Certificate[] getCerts() {\n-            return (certs == null ? null : certs.clone());\n-        }\n-\n-        \/**\n-         * Returns a string describing this SelfPermission.  The convention\n-         * is to specify the class name, the permission name, and the actions,\n-         * in the following format: '(unresolved \"ClassName\" \"name\" \"actions\")'.\n-         *\n-         * @return information about this SelfPermission.\n-         *\/\n-        @Override public String toString() {\n-            return \"(SelfPermission \" + type + \" \" + name + \" \" + actions + \")\";\n-        }\n-\n-        \/**\n-         * Restores the state of this object from the stream.\n-         *\n-         * @param  stream the {@code ObjectInputStream} from which data is read\n-         * @throws IOException if an I\/O error occurs\n-         * @throws ClassNotFoundException if a serialized class cannot be loaded\n-         *\/\n-        @java.io.Serial\n-        private void readObject(ObjectInputStream stream)\n-                throws IOException, ClassNotFoundException {\n-            stream.defaultReadObject();\n-            if (certs != null) {\n-                this.certs = certs.clone();\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * holds policy information that we need to synch on\n-     *\/\n-    private static class PolicyInfo {\n-        private static final boolean verbose = false;\n-\n-        \/\/ Stores grant entries in the policy\n-        final List<PolicyEntry> policyEntries;\n-\n-        \/\/ Maps aliases to certs\n-        final Map<Object, Object> aliasMapping;\n-\n-        \/\/ Maps ProtectionDomain to PermissionCollection\n-        private final ProtectionDomainCache[] pdMapping;\n-        private java.util.Random random;\n-\n-        PolicyInfo(int numCaches) {\n-            policyEntries = new ArrayList<>();\n-            aliasMapping = Collections.synchronizedMap(new HashMap<>(11));\n-\n-            pdMapping = new ProtectionDomainCache[numCaches];\n-            JavaSecurityAccess jspda\n-                = SharedSecrets.getJavaSecurityAccess();\n-            for (int i = 0; i < numCaches; i++) {\n-                pdMapping[i] = jspda.getProtectionDomainCache();\n-            }\n-            if (numCaches > 1) {\n-                random = new java.util.Random();\n-            }\n-        }\n-        ProtectionDomainCache getPdMapping() {\n-            if (pdMapping.length == 1) {\n-                return pdMapping[0];\n-            } else {\n-                int i = java.lang.Math.abs(random.nextInt() % pdMapping.length);\n-                return pdMapping[i];\n-            }\n-        }\n-    }\n-\n-    @SuppressWarnings(\"deprecation\")\n-    private static URL newURL(String spec) throws MalformedURLException {\n-        return new URL(spec);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/PolicyFile.java","additions":0,"deletions":2250,"binary":false,"changes":2250,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,4 @@\n-import java.io.*;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StreamTokenizer;\n@@ -30,3 +33,5 @@\n-import java.security.Principal;\n-import java.util.*;\n-import javax.security.auth.x500.X500Principal;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.TreeMap;\n@@ -34,1 +39,0 @@\n-import sun.security.util.Debug;\n@@ -39,6 +43,4 @@\n- * The policy for a Java runtime (specifying\n- * which permissions are available for code from various principals)\n- * is represented as a separate\n- * persistent configuration.  The configuration may be stored as a\n- * flat ASCII file, as a serialized binary file of\n- * the Policy class, or as a database.\n+ * Configuration data that specifies the keystores in a DKS keystore.\n+ * A keystore domain is a collection of keystores that are presented as a\n+ * single logical keystore. The configuration data is used during KeyStore\n+ * load and store operations.\n@@ -46,4 +48,1 @@\n- * <p>The Java runtime creates one global Policy object, which is used to\n- * represent the static policy configuration file.  It is consulted by\n- * a ProtectionDomain when the protection domain initializes its set of\n- * permissions.\n+ * The following syntax is supported for configuration data:\n@@ -51,22 +50,5 @@\n- * <p>The Policy <code>init<\/code> method parses the policy\n- * configuration file, and then\n- * populates the Policy object.  The Policy object is agnostic in that\n- * it is not involved in making policy decisions.  It is merely the\n- * Java runtime representation of the persistent policy configuration\n- * file.\n- *\n- * <p>When a protection domain needs to initialize its set of\n- * permissions, it executes code such as the following\n- * to ask the global Policy object to populate a\n- * Permissions object with the appropriate permissions:\n- * <pre>\n- *  policy = Policy.getPolicy();\n- *  Permissions perms = policy.getPermissions(protectiondomain)\n- * <\/pre>\n- *\n- * <p>The protection domain contains a CodeSource\n- * object, which encapsulates its codebase (URL) and public key attributes.\n- * It also contains the principals associated with the domain.\n- * The Policy object evaluates the global policy in light of whom the\n- * principal is and what the code source is and returns an appropriate\n- * Permissions object.\n+ *     domain <domainName> [<property> ...] {\n+ *        keystore <keystoreName> [<property> ...] ;\n+ *        ...\n+ *    };\n+ *    ...\n@@ -82,1 +64,0 @@\n-    private final Vector<GrantEntry> grantEntries;\n@@ -85,3 +66,0 @@\n-    \/\/ Convenience variables for parsing\n-    private static final Debug debug = Debug.getInstance(\"parser\",\n-                                                \"\\t[Policy Parser]\");\n@@ -91,4 +69,0 @@\n-    private String keyStoreUrlString = null; \/\/ unexpanded\n-    private String keyStoreType = null;\n-    private String keyStoreProvider = null;\n-    private String storePassURL = null;\n@@ -115,6 +89,0 @@\n-\n-    public PolicyParser() {\n-        grantEntries = new Vector<>();\n-    }\n-\n-\n@@ -122,1 +90,0 @@\n-        this();\n@@ -138,1 +105,0 @@\n-\n@@ -174,4 +140,2 @@\n-         * for each entry in the config file.      The entries\n-         * are delimited by semicolons.   Once we've read in\n-         * the information for an entry, go ahead and try to\n-         * add it to the policy vector.\n+         * for each entry in the config file. The entries\n+         * are delimited by semicolons.\n@@ -182,1 +146,0 @@\n-        GrantEntry ge = null;\n@@ -184,15 +147,1 @@\n-            if (peek(\"grant\")) {\n-                ge = parseGrantEntry();\n-                \/\/ could be null if we couldn't expand a property\n-                if (ge != null)\n-                    add(ge);\n-            } else if (peek(\"keystore\") && keyStoreUrlString==null) {\n-                \/\/ only one keystore entry per policy file, others will be\n-                \/\/ ignored\n-                parseKeyStoreEntry();\n-            } else if (peek(\"keystorePasswordURL\") && storePassURL==null) {\n-                \/\/ only one keystore passwordURL per policy file, others will be\n-                \/\/ ignored\n-                parseStorePassURL();\n-            } else if (ge == null && keyStoreUrlString == null &&\n-                storePassURL == null && peek(\"domain\")) {\n+            if (peek(\"domain\")) {\n@@ -217,88 +166,0 @@\n-\n-        if (keyStoreUrlString == null && storePassURL != null) {\n-            throw new ParsingException(LocalizedMessage.getNonlocalized\n-                (\"keystorePasswordURL.can.not.be.specified.without.also.specifying.keystore\"));\n-        }\n-    }\n-\n-    public void add(GrantEntry ge)\n-    {\n-        grantEntries.addElement(ge);\n-    }\n-\n-    public void replace(GrantEntry origGe, GrantEntry newGe)\n-    {\n-        grantEntries.setElementAt(newGe, grantEntries.indexOf(origGe));\n-    }\n-\n-    public boolean remove(GrantEntry ge)\n-    {\n-        return grantEntries.removeElement(ge);\n-    }\n-\n-    \/**\n-     * Returns the (possibly expanded) keystore location, or null if the\n-     * expansion fails.\n-     *\/\n-    public String getKeyStoreUrl() {\n-        try {\n-            if (keyStoreUrlString!=null && keyStoreUrlString.length()!=0) {\n-                return expand(keyStoreUrlString, true).replace\n-                                                (File.separatorChar, '\/');\n-            }\n-        } catch (PropertyExpander.ExpandException peee) {\n-            if (debug != null) {\n-                debug.println(peee.toString());\n-            }\n-            return null;\n-        }\n-        return null;\n-    }\n-\n-    public void setKeyStoreUrl(String url) {\n-        keyStoreUrlString = url;\n-    }\n-\n-    public String getKeyStoreType() {\n-        return keyStoreType;\n-    }\n-\n-    public void setKeyStoreType(String type) {\n-        keyStoreType = type;\n-    }\n-\n-    public String getKeyStoreProvider() {\n-        return keyStoreProvider;\n-    }\n-\n-    public void setKeyStoreProvider(String provider) {\n-        keyStoreProvider = provider;\n-    }\n-\n-    public String getStorePassURL() {\n-        try {\n-            if (storePassURL!=null && storePassURL.length()!=0) {\n-                return expand(storePassURL, true).replace\n-                                                (File.separatorChar, '\/');\n-            }\n-        } catch (PropertyExpander.ExpandException peee) {\n-            if (debug != null) {\n-                debug.println(peee.toString());\n-            }\n-            return null;\n-        }\n-        return null;\n-    }\n-\n-    public void setStorePassURL(String storePassURL) {\n-        this.storePassURL = storePassURL;\n-    }\n-\n-    \/**\n-     * Enumerate all the entries in the global policy object.\n-     * This method is used by policy admin tools.   The tools\n-     * should use the Enumeration methods on the returned object\n-     * to fetch the elements sequentially.\n-     *\/\n-    public Enumeration<GrantEntry> grantElements(){\n-        return grantEntries.elements();\n@@ -311,299 +172,0 @@\n-    \/**\n-     * write out the policy\n-     *\/\n-\n-    public void write(Writer policy)\n-    {\n-        PrintWriter out = new PrintWriter(new BufferedWriter(policy));\n-\n-        out.println(\"\/* AUTOMATICALLY GENERATED ON \"+\n-                    (new java.util.Date()) + \"*\/\");\n-        out.println(\"\/* DO NOT EDIT *\/\");\n-        out.println();\n-\n-        \/\/ write the (unexpanded) keystore entry as the first entry of the\n-        \/\/ policy file\n-        if (keyStoreUrlString != null) {\n-            writeKeyStoreEntry(out);\n-        }\n-        if (storePassURL != null) {\n-            writeStorePassURL(out);\n-        }\n-\n-        \/\/ write \"grant\" entries\n-        for (GrantEntry ge : grantEntries) {\n-            ge.write(out);\n-            out.println();\n-        }\n-        out.flush();\n-    }\n-\n-    \/**\n-     * parses a keystore entry\n-     *\/\n-    private void parseKeyStoreEntry() throws ParsingException, IOException {\n-        match(\"keystore\");\n-        keyStoreUrlString = match(\"quoted string\");\n-\n-        \/\/ parse keystore type\n-        if (!peek(\",\")) {\n-            return; \/\/ default type\n-        }\n-        match(\",\");\n-\n-        if (peek(\"\\\"\")) {\n-            keyStoreType = match(\"quoted string\");\n-        } else {\n-            throw new ParsingException(st.lineno(),\n-                LocalizedMessage.getNonlocalized(\"expected.keystore.type\"));\n-        }\n-\n-        \/\/ parse keystore provider\n-        if (!peek(\",\")) {\n-            return; \/\/ provider optional\n-        }\n-        match(\",\");\n-\n-        if (peek(\"\\\"\")) {\n-            keyStoreProvider = match(\"quoted string\");\n-        } else {\n-            throw new ParsingException(st.lineno(),\n-                LocalizedMessage.getNonlocalized(\"expected.keystore.provider\"));\n-        }\n-    }\n-\n-    private void parseStorePassURL() throws ParsingException, IOException {\n-        match(\"keyStorePasswordURL\");\n-        storePassURL = match(\"quoted string\");\n-    }\n-\n-    \/**\n-     * writes the (unexpanded) keystore entry\n-     *\/\n-    private void writeKeyStoreEntry(PrintWriter out) {\n-        out.print(\"keystore \\\"\");\n-        out.print(keyStoreUrlString);\n-        out.print('\"');\n-        if (keyStoreType != null && !keyStoreType.isEmpty())\n-            out.print(\", \\\"\" + keyStoreType + \"\\\"\");\n-        if (keyStoreProvider != null && !keyStoreProvider.isEmpty())\n-            out.print(\", \\\"\" + keyStoreProvider + \"\\\"\");\n-        out.println(\";\");\n-        out.println();\n-    }\n-\n-    private void writeStorePassURL(PrintWriter out) {\n-        out.print(\"keystorePasswordURL \\\"\");\n-        out.print(storePassURL);\n-        out.print('\"');\n-        out.println(\";\");\n-        out.println();\n-    }\n-\n-    \/**\n-     * parse a Grant entry\n-     *\/\n-    private GrantEntry parseGrantEntry()\n-        throws ParsingException, IOException\n-    {\n-        GrantEntry e = new GrantEntry();\n-        LinkedList<PrincipalEntry> principals = null;\n-        boolean ignoreEntry = false;\n-\n-        match(\"grant\");\n-\n-        while(!peek(\"{\")) {\n-\n-            if (peekAndMatch(\"Codebase\")) {\n-                if (e.codeBase != null)\n-                    throw new ParsingException(\n-                            st.lineno(),\n-                            LocalizedMessage.getNonlocalized\n-                                (\"multiple.Codebase.expressions\"));\n-                e.codeBase = match(\"quoted string\");\n-                peekAndMatch(\",\");\n-            } else if (peekAndMatch(\"SignedBy\")) {\n-                if (e.signedBy != null)\n-                    throw new ParsingException(\n-                            st.lineno(),\n-                            LocalizedMessage.getNonlocalized\n-                                (\"multiple.SignedBy.expressions\"));\n-                e.signedBy = match(\"quoted string\");\n-\n-                \/\/ verify syntax of the aliases\n-                StringTokenizer aliases = new StringTokenizer(e.signedBy,\n-                                                              \",\", true);\n-                int actr = 0;\n-                int cctr = 0;\n-                while (aliases.hasMoreTokens()) {\n-                    String alias = aliases.nextToken().trim();\n-                    if (alias.equals(\",\"))\n-                        cctr++;\n-                    else if (!alias.isEmpty())\n-                        actr++;\n-                }\n-                if (actr <= cctr)\n-                    throw new ParsingException(\n-                            st.lineno(),\n-                            LocalizedMessage.getNonlocalized\n-                                (\"SignedBy.has.empty.alias\"));\n-\n-                peekAndMatch(\",\");\n-            } else if (peekAndMatch(\"Principal\")) {\n-                if (principals == null) {\n-                    principals = new LinkedList<>();\n-                }\n-\n-                String principalClass;\n-                String principalName;\n-\n-                if (peek(\"\\\"\")) {\n-                    \/\/ both the principalClass and principalName\n-                    \/\/ will be replaced later\n-                    principalClass = PrincipalEntry.REPLACE_NAME;\n-                    principalName = match(\"principal type\");\n-                } else {\n-                    \/\/ check for principalClass wildcard\n-                    if (peek(\"*\")) {\n-                        match(\"*\");\n-                        principalClass = PrincipalEntry.WILDCARD_CLASS;\n-                    } else {\n-                        principalClass = match(\"principal type\");\n-                    }\n-\n-                    \/\/ check for principalName wildcard\n-                    if (peek(\"*\")) {\n-                        match(\"*\");\n-                        principalName = PrincipalEntry.WILDCARD_NAME;\n-                    } else {\n-                        principalName = match(\"quoted string\");\n-                    }\n-\n-                    \/\/ disallow WILDCARD_CLASS && actual name\n-                    if (principalClass.equals(PrincipalEntry.WILDCARD_CLASS) &&\n-                        !principalName.equals(PrincipalEntry.WILDCARD_NAME)) {\n-                        if (debug != null) {\n-                                debug.println(\"disallowing principal that \" +\n-                                    \"has WILDCARD class but no WILDCARD name\");\n-                        }\n-                        throw new ParsingException\n-                                (st.lineno(),\n-                                LocalizedMessage.getNonlocalized\n-                                    (\"can.not.specify.Principal.with.a.wildcard.class.without.a.wildcard.name\"));\n-                    }\n-                }\n-\n-                try {\n-                    principalName = expand(principalName);\n-\n-                    if (principalClass.equals\n-                                (\"javax.security.auth.x500.X500Principal\") &&\n-                        !principalName.equals(PrincipalEntry.WILDCARD_NAME)) {\n-\n-                        \/\/ 4702543:  X500 names with an EmailAddress\n-                        \/\/ were encoded incorrectly.  construct a new\n-                        \/\/ X500Principal with correct encoding.\n-\n-                        X500Principal p = new X500Principal\n-                                ((new X500Principal(principalName)).toString());\n-                        principalName = p.getName();\n-                    }\n-\n-                    principals.add\n-                        (new PrincipalEntry(principalClass, principalName));\n-                } catch (PropertyExpander.ExpandException peee) {\n-                    \/\/ ignore the entire policy entry\n-                    \/\/ but continue parsing all the info\n-                    \/\/ so we can get to the next entry\n-                    if (debug != null) {\n-                        debug.println(\"principal name expansion failed: \" +\n-                                        principalName);\n-                    }\n-                    ignoreEntry = true;\n-                }\n-                peekAndMatch(\",\");\n-\n-            } else {\n-                throw new ParsingException(st.lineno(),\n-                    LocalizedMessage.getNonlocalized\n-                        (\"expected.codeBase.or.SignedBy.or.Principal\"));\n-            }\n-        }\n-\n-        if (principals != null) e.principals = principals;\n-        match(\"{\");\n-\n-        while(!peek(\"}\")) {\n-            if (peek(\"Permission\")) {\n-                try {\n-                    PermissionEntry pe = parsePermissionEntry();\n-                    e.add(pe);\n-                } catch (PropertyExpander.ExpandException peee) {\n-                    \/\/ ignore. The add never happened\n-                    if (debug != null) {\n-                        debug.println(peee.toString());\n-                    }\n-                    skipEntry();  \/\/ BugId 4219343\n-                }\n-                match(\";\");\n-            } else {\n-                throw new\n-                    ParsingException(st.lineno(),\n-                        LocalizedMessage.getNonlocalized\n-                            (\"expected.permission.entry\"));\n-            }\n-        }\n-        match(\"}\");\n-\n-        try {\n-            if (e.signedBy != null) e.signedBy = expand(e.signedBy);\n-            if (e.codeBase != null) {\n-                e.codeBase = expand(e.codeBase, true).replace\n-                                    (File.separatorChar, '\/');\n-            }\n-        } catch (PropertyExpander.ExpandException peee) {\n-            if (debug != null) {\n-                debug.println(peee.toString());\n-            }\n-            return null;\n-        }\n-\n-        return (ignoreEntry) ? null : e;\n-    }\n-\n-    \/**\n-     * parse a Permission entry\n-     *\/\n-    private PermissionEntry parsePermissionEntry()\n-        throws ParsingException, IOException, PropertyExpander.ExpandException\n-    {\n-        PermissionEntry e = new PermissionEntry();\n-\n-        \/\/ Permission\n-        match(\"Permission\");\n-        e.permission = match(\"permission type\");\n-\n-        if (peek(\"\\\"\")) {\n-            \/\/ Permission name\n-            e.name = expand(match(\"quoted string\"));\n-        }\n-\n-        if (!peek(\",\")) {\n-            return e;\n-        }\n-        match(\",\");\n-\n-        if (peek(\"\\\"\")) {\n-                e.action = expand(match(\"quoted string\"));\n-                if (!peek(\",\")) {\n-                    return e;\n-                }\n-                match(\",\");\n-        }\n-\n-        if (peekAndMatch(\"SignedBy\")) {\n-            e.signedBy = expand(match(\"quoted string\"));\n-        }\n-        return e;\n-    }\n-\n@@ -738,6 +300,0 @@\n-            } else if (expect.equalsIgnoreCase(\"permission type\")) {\n-                value = st.sval;\n-                lookahead = st.nextToken();\n-            } else if (expect.equalsIgnoreCase(\"principal type\")) {\n-                value = st.sval;\n-                lookahead = st.nextToken();\n@@ -758,6 +314,0 @@\n-            } else if (expect.equalsIgnoreCase(\"permission type\")) {\n-                value = st.sval;\n-                lookahead = st.nextToken();\n-            } else if (expect.equalsIgnoreCase(\"principal type\")) {\n-                value = st.sval;\n-                lookahead = st.nextToken();\n@@ -830,334 +380,0 @@\n-    \/**\n-     * Each grant entry in the policy configuration file is\n-     * represented by a GrantEntry object.\n-     *\n-     * <p>\n-     * For example, the entry\n-     * <pre>\n-     *      grant signedBy \"Duke\" {\n-     *          permission java.io.FilePermission \"\/tmp\", \"read,write\";\n-     *      };\n-     *\n-     * <\/pre>\n-     * is represented internally\n-     * <pre>\n-     *\n-     * pe = new PermissionEntry(\"java.io.FilePermission\",\n-     *                           \"\/tmp\", \"read,write\");\n-     *\n-     * ge = new GrantEntry(\"Duke\", null);\n-     *\n-     * ge.add(pe);\n-     *\n-     * <\/pre>\n-     *\n-     * @author Roland Schemers\n-     *\n-     * version 1.19, 05\/21\/98\n-     *\/\n-\n-    public static class GrantEntry {\n-\n-        public String signedBy;\n-        public String codeBase;\n-        public LinkedList<PrincipalEntry> principals;\n-        public Vector<PermissionEntry> permissionEntries;\n-\n-        public GrantEntry() {\n-            principals = new LinkedList<>();\n-            permissionEntries = new Vector<>();\n-        }\n-\n-        public GrantEntry(String signedBy, String codeBase) {\n-            this.codeBase = codeBase;\n-            this.signedBy = signedBy;\n-            principals = new LinkedList<>();\n-            permissionEntries = new Vector<>();\n-        }\n-\n-        public void add(PermissionEntry pe)\n-        {\n-            permissionEntries.addElement(pe);\n-        }\n-\n-        public boolean remove(PrincipalEntry pe)\n-        {\n-            return principals.remove(pe);\n-        }\n-\n-        public boolean remove(PermissionEntry pe)\n-        {\n-            return permissionEntries.removeElement(pe);\n-        }\n-\n-        public boolean contains(PrincipalEntry pe)\n-        {\n-            return principals.contains(pe);\n-        }\n-\n-        public boolean contains(PermissionEntry pe)\n-        {\n-            return permissionEntries.contains(pe);\n-        }\n-\n-        \/**\n-         * Enumerate all the permission entries in this GrantEntry.\n-         *\/\n-        public Enumeration<PermissionEntry> permissionElements(){\n-            return permissionEntries.elements();\n-        }\n-\n-\n-        public void write(PrintWriter out) {\n-            out.print(\"grant\");\n-            if (signedBy != null) {\n-                out.print(\" signedBy \\\"\");\n-                out.print(signedBy);\n-                out.print('\"');\n-                if (codeBase != null)\n-                    out.print(\", \");\n-            }\n-            if (codeBase != null) {\n-                out.print(\" codeBase \\\"\");\n-                out.print(codeBase);\n-                out.print('\"');\n-                if (principals != null && principals.size() > 0)\n-                    out.print(\",\\n\");\n-            }\n-            if (principals != null && principals.size() > 0) {\n-                Iterator<PrincipalEntry> pli = principals.iterator();\n-                while (pli.hasNext()) {\n-                    out.print(\"      \");\n-                    PrincipalEntry pe = pli.next();\n-                    pe.write(out);\n-                    if (pli.hasNext())\n-                        out.print(\",\\n\");\n-                }\n-            }\n-            out.println(\" {\");\n-            for (PermissionEntry pe : permissionEntries) {\n-                out.write(\"  \");\n-                pe.write(out);\n-            }\n-            out.println(\"};\");\n-        }\n-\n-        public Object clone() {\n-            GrantEntry ge = new GrantEntry();\n-            ge.codeBase = this.codeBase;\n-            ge.signedBy = this.signedBy;\n-            ge.principals = new LinkedList<>(this.principals);\n-            ge.permissionEntries = new Vector<>(this.permissionEntries);\n-            return ge;\n-        }\n-    }\n-\n-    \/**\n-     * Principal info (class and name) in a grant entry\n-     *\/\n-    public static class PrincipalEntry implements Principal {\n-\n-        public static final String WILDCARD_CLASS = \"WILDCARD_PRINCIPAL_CLASS\";\n-        public static final String WILDCARD_NAME = \"WILDCARD_PRINCIPAL_NAME\";\n-        public static final String REPLACE_NAME = \"PolicyParser.REPLACE_NAME\";\n-\n-        String principalClass;\n-        String principalName;\n-\n-        \/**\n-         * A PrincipalEntry consists of the Principal class and Principal name.\n-         *\n-         * @param principalClass the Principal class\n-         * @param principalName the Principal name\n-         * @throws NullPointerException if principalClass or principalName\n-         *                              are null\n-         *\/\n-        public PrincipalEntry(String principalClass, String principalName) {\n-            if (principalClass == null || principalName == null)\n-                throw new NullPointerException(LocalizedMessage.getNonlocalized\n-                    (\"null.principalClass.or.principalName\"));\n-            this.principalClass = principalClass;\n-            this.principalName = principalName;\n-        }\n-\n-        boolean isWildcardName() {\n-            return principalName.equals(WILDCARD_NAME);\n-        }\n-\n-        boolean isWildcardClass() {\n-            return principalClass.equals(WILDCARD_CLASS);\n-        }\n-\n-        boolean isReplaceName() {\n-            return principalClass.equals(REPLACE_NAME);\n-        }\n-\n-        public String getPrincipalClass() {\n-            return principalClass;\n-        }\n-\n-        public String getPrincipalName() {\n-            return principalName;\n-        }\n-\n-        public String getDisplayClass() {\n-            if (isWildcardClass()) {\n-                return \"*\";\n-            } else if (isReplaceName()) {\n-                return \"\";\n-            }\n-            else return principalClass;\n-        }\n-\n-        public String getDisplayName() {\n-            return getDisplayName(false);\n-        }\n-\n-        public String getDisplayName(boolean addQuote) {\n-            if (isWildcardName()) {\n-                return \"*\";\n-            }\n-            else {\n-                if (addQuote) return \"\\\"\" + principalName + \"\\\"\";\n-                else return principalName;\n-            }\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return principalName;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            if (!isReplaceName()) {\n-                return getDisplayClass() + \"\/\" + getDisplayName();\n-            } else {\n-                return getDisplayName();\n-            }\n-        }\n-\n-        \/**\n-         * Test for equality between the specified object and this object.\n-         * Two PrincipalEntries are equal if their class and name values\n-         * are equal.\n-         *\n-         * @param obj the object to test for equality with this object\n-         * @return true if the objects are equal, false otherwise\n-         *\/\n-        @Override\n-        public boolean equals(Object obj) {\n-            if (this == obj)\n-                return true;\n-\n-            if (!(obj instanceof PrincipalEntry that))\n-                return false;\n-\n-            return (principalClass.equals(that.principalClass) &&\n-                    principalName.equals(that.principalName));\n-        }\n-\n-        \/**\n-         * {@return a hashcode for this PrincipalEntry}\n-         *\/\n-        @Override\n-        public int hashCode() {\n-            return principalClass.hashCode();\n-        }\n-\n-        public void write(PrintWriter out) {\n-            out.print(\"principal \" + getDisplayClass() + \" \" +\n-                      getDisplayName(true));\n-        }\n-    }\n-\n-    \/**\n-     * Each permission entry in the policy configuration file is\n-     * represented by a\n-     * PermissionEntry object.\n-     *\n-     * <p>\n-     * For example, the entry\n-     * <pre>\n-     *          permission java.io.FilePermission \"\/tmp\", \"read,write\";\n-     * <\/pre>\n-     * is represented internally\n-     * <pre>\n-     *\n-     * pe = new PermissionEntry(\"java.io.FilePermission\",\n-     *                           \"\/tmp\", \"read,write\");\n-     * <\/pre>\n-     *\n-     * @author Roland Schemers\n-     *\n-     * version 1.19, 05\/21\/98\n-     *\/\n-\n-    public static class PermissionEntry {\n-\n-        public String permission;\n-        public String name;\n-        public String action;\n-        public String signedBy;\n-\n-        public PermissionEntry() {\n-        }\n-\n-        public PermissionEntry(String permission,\n-                        String name,\n-                        String action) {\n-            this.permission = permission;\n-            this.name = name;\n-            this.action = action;\n-        }\n-\n-        \/**\n-         * Calculates a hash code value for the object.  Objects\n-         * which are equal will also have the same hashcode.\n-         *\/\n-        @Override\n-        public int hashCode() {\n-            return Objects.hash(permission, name, action);\n-        }\n-\n-        @Override\n-        public boolean equals(Object obj) {\n-            if (obj == this)\n-                return true;\n-\n-            return obj instanceof PermissionEntry that\n-                    && Objects.equals(this.permission, that.permission)\n-                    && Objects.equals(this.name, that.name)\n-                    && Objects.equals(this.action, that.action)\n-                    && Objects.equals(this.signedBy, that.signedBy);\n-        }\n-\n-        public void write(PrintWriter out) {\n-            out.print(\"permission \");\n-            out.print(permission);\n-            if (name != null) {\n-                out.print(\" \\\"\");\n-\n-                \/\/ ATTENTION: regex with double escaping,\n-                \/\/ the normal forms look like:\n-                \/\/ $name =~ s\/\\\\\/\\\\\\\\\/g; and\n-                \/\/ $name =~ s\/\\\"\/\\\\\\\"\/g;\n-                \/\/ and then in a java string, it's escaped again\n-\n-                out.print(name.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\\"\", \"\\\\\\\\\\\\\\\"\"));\n-                out.print('\"');\n-            }\n-            if (action != null) {\n-                out.print(\", \\\"\");\n-                out.print(action);\n-                out.print('\"');\n-            }\n-            if (signedBy != null) {\n-                out.print(\", signedBy \\\"\");\n-                out.print(signedBy);\n-                out.print('\"');\n-            }\n-            out.println(\";\");\n-        }\n-    }\n-\n@@ -1315,9 +531,0 @@\n-\n-    public static void main(String[] arg) throws Exception {\n-        try (FileReader fr = new FileReader(arg[0]);\n-             FileWriter fw = new FileWriter(arg[1])) {\n-            PolicyParser pp = new PolicyParser(true);\n-            pp.read(fr);\n-            pp.write(fw);\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/PolicyParser.java","additions":23,"deletions":816,"binary":false,"changes":839,"status":"modified"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.provider;\n-\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Policy;\n-import java.security.PolicySpi;\n-import java.security.ProtectionDomain;\n-import java.security.URIParameter;\n-\n-import java.net.MalformedURLException;\n-\n-\/**\n- * This class wraps the PolicyFile subclass implementation of Policy\n- * inside a PolicySpi implementation that is available from the SUN provider\n- * via the Policy.getInstance calls.\n- *\n- *\/\n-@SuppressWarnings(\"removal\")\n-public final class PolicySpiFile extends PolicySpi {\n-\n-    private PolicyFile pf;\n-\n-    public PolicySpiFile(Policy.Parameters params) {\n-\n-        if (params == null) {\n-            pf = new PolicyFile();\n-        } else {\n-            if (!(params instanceof URIParameter)) {\n-                throw new IllegalArgumentException\n-                        (\"Unrecognized policy parameter: \" + params);\n-            }\n-            URIParameter uriParam = (URIParameter)params;\n-            try {\n-                pf = new PolicyFile(uriParam.getURI().toURL());\n-            } catch (MalformedURLException mue) {\n-                throw new IllegalArgumentException(\"Invalid URIParameter\", mue);\n-            }\n-        }\n-    }\n-\n-    protected PermissionCollection engineGetPermissions(CodeSource codesource) {\n-        return pf.getPermissions(codesource);\n-    }\n-\n-    protected PermissionCollection engineGetPermissions(ProtectionDomain d) {\n-        return pf.getPermissions(d);\n-    }\n-\n-    protected boolean engineImplies(ProtectionDomain d, Permission p) {\n-        return pf.implies(d, p);\n-    }\n-\n-    protected void engineRefresh() {\n-        pf.refresh();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/PolicySpiFile.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,2 +87,0 @@\n- * - JavaPolicy is the default file-based Policy type.\n- *\n@@ -284,5 +282,0 @@\n-        \/*\n-         * Policy\n-         *\/\n-        add(p, \"Policy\", \"JavaPolicy\", \"sun.security.provider.PolicySpiFile\");\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SunEntries.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-        System.err.println(\"access        print all checkPermission results\");\n@@ -103,1 +102,0 @@\n-        System.err.println(\"policy        loading and granting\");\n@@ -121,16 +119,0 @@\n-        System.err.println(\"The following can be used with access:\");\n-        System.err.println();\n-        System.err.println(\"stack         include stack trace\");\n-        System.err.println(\"domain        dump all domains in context\");\n-        System.err.println(\"failure       before throwing exception, dump stack\");\n-        System.err.println(\"              and domain that didn't have permission\");\n-        System.err.println();\n-        System.err.println(\"The following can be used with stack and domain:\");\n-        System.err.println();\n-        System.err.println(\"permission=<classname>\");\n-        System.err.println(\"              only dump output if specified permission\");\n-        System.err.println(\"              is being checked\");\n-        System.err.println(\"codebase=<URL>\");\n-        System.err.println(\"              only dump output if specified codebase\");\n-        System.err.println(\"              is being checked\");\n-        System.err.println();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Debug.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,2 +62,0 @@\n-        {\"invalid.null.AccessControlContext.provided\",\n-                \"invalid null AccessControlContext provided\"},\n@@ -93,18 +91,0 @@\n-        \/\/ sun.security.provider.PolicyFile\n-\n-        {\"java.security.policy.error.parsing.policy.message\",\n-                \"java.security.policy: error parsing {0}:\\n\\t{1}\"},\n-        {\"java.security.policy.error.adding.Permission.perm.message\",\n-                \"java.security.policy: error adding Permission, {0}:\\n\\t{1}\"},\n-        {\"java.security.policy.error.adding.Entry.message\",\n-                \"java.security.policy: error adding Entry:\\n\\t{0}\"},\n-        {\"alias.name.not.provided.pe.name.\", \"alias name not provided ({0})\"},\n-        {\"unable.to.perform.substitution.on.alias.suffix\",\n-                \"unable to perform substitution on alias, {0}\"},\n-        {\"substitution.value.prefix.unsupported\",\n-                \"substitution value, {0}, unsupported\"},\n-        {\"SPACE\", \" \"},\n-        {\"LPARAM\", \"(\"},\n-        {\"RPARAM\", \")\"},\n-        {\"type.can.t.be.null\",\"type can't be null\"},\n-\n@@ -112,7 +92,0 @@\n-        {\"keystorePasswordURL.can.not.be.specified.without.also.specifying.keystore\",\n-                \"keystorePasswordURL can not be specified without also specifying keystore\"},\n-        {\"expected.keystore.type\", \"expected keystore type\"},\n-        {\"expected.keystore.provider\", \"expected keystore provider\"},\n-        {\"multiple.Codebase.expressions\",\n-                \"multiple Codebase expressions\"},\n-        {\"multiple.SignedBy.expressions\",\"multiple SignedBy expressions\"},\n@@ -121,6 +94,0 @@\n-        {\"SignedBy.has.empty.alias\",\"SignedBy has empty alias\"},\n-        {\"can.not.specify.Principal.with.a.wildcard.class.without.a.wildcard.name\",\n-                \"can not specify Principal with a wildcard class without a wildcard name\"},\n-        {\"expected.codeBase.or.SignedBy.or.Principal\",\n-                \"expected codeBase or SignedBy or Principal\"},\n-        {\"expected.permission.entry\", \"expected permission entry\"},\n@@ -135,2 +102,0 @@\n-        {\"null.principalClass.or.principalName\",\n-                \"null principalClass or principalName\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Resources.java","additions":1,"deletions":36,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/\/\n-\/\/ This system policy file grants a set of default permissions to all domains\n-\/\/ and can be configured to grant additional permissions to modules and other\n-\/\/ code sources. The code source URL scheme for modules linked into a\n-\/\/ run-time image is \"jrt\".\n-\/\/\n-\/\/ For example, to grant permission to read the \"foo\" property to the module\n-\/\/ \"com.greetings\", the grant entry is:\n-\/\/\n-\/\/ grant codeBase \"jrt:\/com.greetings\" {\n-\/\/     permission java.util.PropertyPermission \"foo\", \"read\";\n-\/\/ };\n-\/\/\n-\n-\/\/ default permissions granted to all domains\n-grant {\n-    \/\/ allows anyone to listen on dynamic ports\n-    permission java.net.SocketPermission \"localhost:0\", \"listen\";\n-\n-    \/\/ \"standard\" properties that can be read by anyone\n-    permission java.util.PropertyPermission \"java.version\", \"read\";\n-    permission java.util.PropertyPermission \"java.vendor\", \"read\";\n-    permission java.util.PropertyPermission \"java.vendor.url\", \"read\";\n-    permission java.util.PropertyPermission \"java.class.version\", \"read\";\n-    permission java.util.PropertyPermission \"os.name\", \"read\";\n-    permission java.util.PropertyPermission \"os.version\", \"read\";\n-    permission java.util.PropertyPermission \"os.arch\", \"read\";\n-    permission java.util.PropertyPermission \"file.separator\", \"read\";\n-    permission java.util.PropertyPermission \"path.separator\", \"read\";\n-    permission java.util.PropertyPermission \"line.separator\", \"read\";\n-    permission java.util.PropertyPermission\n-                   \"java.specification.version\", \"read\";\n-    permission java.util.PropertyPermission\n-                   \"java.specification.maintenance.version\", \"read\";\n-    permission java.util.PropertyPermission \"java.specification.vendor\", \"read\";\n-    permission java.util.PropertyPermission \"java.specification.name\", \"read\";\n-    permission java.util.PropertyPermission\n-                   \"java.vm.specification.version\", \"read\";\n-    permission java.util.PropertyPermission\n-                   \"java.vm.specification.vendor\", \"read\";\n-    permission java.util.PropertyPermission\n-                   \"java.vm.specification.name\", \"read\";\n-    permission java.util.PropertyPermission \"java.vm.version\", \"read\";\n-    permission java.util.PropertyPermission \"java.vm.vendor\", \"read\";\n-    permission java.util.PropertyPermission \"java.vm.name\", \"read\";\n-};\n","filename":"src\/java.base\/share\/conf\/security\/java.policy","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -285,18 +285,4 @@\n-#\n-# Class to instantiate as the system Policy. This is the name of the class\n-# that will be used as the Policy object. The system class loader is used to\n-# locate this class.\n-#\n-policy.provider=sun.security.provider.PolicyFile\n-\n-# The default is to have a single system-wide policy file,\n-# and a policy file in the user's home directory.\n-#\n-policy.url.1=file:${java.home}\/conf\/security\/java.policy\n-policy.url.2=file:${user.home}\/.java.policy\n-\n-# Controls whether or not properties are expanded in policy and login\n-# configuration files. If set to false, properties (${...}) will not\n-# be expanded in policy and login configuration files. If commented out or\n-# set to an empty string, the default value is \"false\" for policy files and\n-# \"true\" for login configuration files.\n+# Controls whether or not properties are expanded in login configuration files.\n+# If set to false, properties (${...}) will not be expanded in login\n+# configuration files. If commented out or set to an empty string, the default\n+# value is \"true\" for login configuration files.\n@@ -306,4 +292,3 @@\n-# Controls whether or not an extra policy or login configuration file is\n-# allowed to be passed on the command line with -Djava.security.policy=somefile\n-# or -Djava.security.auth.login.config=somefile. If commented out or set to\n-# an empty string, the default value is \"false\".\n+# Controls whether or not an extra login configuration file is allowed to be\n+# passed on the command line with -Djava.security.auth.login.config=somefile.\n+# If commented out or set to an empty string, the default value is \"false\".\n@@ -313,7 +298,0 @@\n-# whether or not we look into the IdentityScope for trusted Identities\n-# when encountering a 1.1 signed JAR file. If the identity is found\n-# and is trusted, we grant it AllPermission. Note: the default policy\n-# provider (sun.security.provider.PolicyFile) does not support this property.\n-#\n-policy.ignoreIdentityScope=false\n-\n@@ -335,21 +313,0 @@\n-#\n-# List of comma-separated packages that start with or equal this string\n-# will cause a security exception to be thrown when passed to the\n-# SecurityManager::checkPackageAccess method unless the corresponding\n-# RuntimePermission(\"accessClassInPackage.\"+package) has been granted.\n-#\n-package.access=sun.misc.,\\\n-               sun.reflect.,\\\n-\n-#\n-# List of comma-separated packages that start with or equal this string\n-# will cause a security exception to be thrown when passed to the\n-# SecurityManager::checkPackageDefinition method unless the corresponding\n-# RuntimePermission(\"defineClassInPackage.\"+package) has been granted.\n-#\n-# By default, none of the class loaders supplied with the JDK call\n-# checkPackageDefinition.\n-#\n-package.definition=sun.misc.,\\\n-                   sun.reflect.,\\\n-\n@@ -376,4 +333,1 @@\n-# default value is forever (FOREVER). For security reasons, this\n-# caching is made forever when a security manager is set. When a security\n-# manager is not set, the default behavior in this implementation\n-# is to cache for 30 seconds.\n+# The default behavior in this implementation is to cache for 30 seconds.\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":8,"deletions":54,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1,210 +0,0 @@\n-\/\/\n-\/\/ Permissions required by modules stored in a run-time image and loaded\n-\/\/ by the platform class loader.\n-\/\/\n-\/\/ NOTE that this file is not intended to be modified. If additional\n-\/\/ permissions need to be granted to the modules in this file, it is\n-\/\/ recommended that they be configured in a separate policy file or\n-\/\/ ${java.home}\/conf\/security\/java.policy.\n-\/\/\n-\n-\n-grant codeBase \"jrt:\/java.compiler\" {\n-    permission java.security.AllPermission;\n-};\n-\n-\n-grant codeBase \"jrt:\/java.net.http\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.util\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.misc\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.ref\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.net.SocketPermission \"*\",\"connect,resolve\";\n-    \/\/ required if the HTTPClient is configured to use a local bind address\n-    permission java.net.SocketPermission \"localhost:*\",\"listen,resolve\";\n-    permission java.net.URLPermission \"http:*\",\"*:*\";\n-    permission java.net.URLPermission \"https:*\",\"*:*\";\n-    permission java.net.URLPermission \"ws:*\",\"*:*\";\n-    permission java.net.URLPermission \"wss:*\",\"*:*\";\n-    permission java.net.URLPermission \"socket:*\",\"CONNECT\";  \/\/ proxy\n-    \/\/ For request\/response body processors, fromFile, asFile\n-    permission java.io.FilePermission \"<<ALL FILES>>\",\"read,write,delete\";\n-    permission java.util.PropertyPermission \"*\",\"read\";\n-    permission java.net.NetPermission \"getProxySelector\";\n-};\n-\n-grant codeBase \"jrt:\/java.scripting\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/java.security.jgss\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/java.smartcardio\" {\n-    permission javax.smartcardio.CardPermission \"*\", \"*\";\n-    permission java.lang.RuntimePermission \"loadLibrary.j2pcsc\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.sun.security.jca\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.sun.security.util\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.jdk.internal.util\";\n-    permission java.util.PropertyPermission\n-                   \"javax.smartcardio.TerminalFactory.DefaultType\", \"read\";\n-    permission java.util.PropertyPermission \"os.name\", \"read\";\n-    permission java.util.PropertyPermission \"os.arch\", \"read\";\n-    permission java.util.PropertyPermission \"sun.arch.data.model\", \"read\";\n-    permission java.util.PropertyPermission\n-                   \"sun.security.smartcardio.library\", \"read\";\n-    permission java.util.PropertyPermission\n-                   \"sun.security.smartcardio.t0GetResponse\", \"read\";\n-    permission java.util.PropertyPermission\n-                   \"sun.security.smartcardio.t1GetResponse\", \"read\";\n-    permission java.util.PropertyPermission\n-                   \"sun.security.smartcardio.t1StripLe\", \"read\";\n-    \/\/ needed for looking up native PC\/SC library\n-    permission java.io.FilePermission \"<<ALL FILES>>\",\"read\";\n-    permission java.security.SecurityPermission \"putProviderProperty.SunPCSC\";\n-    permission java.security.SecurityPermission\n-                   \"clearProviderProperties.SunPCSC\";\n-    permission java.security.SecurityPermission\n-                   \"removeProviderProperty.SunPCSC\";\n-};\n-\n-grant codeBase \"jrt:\/java.sql\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/java.sql.rowset\" {\n-    permission java.security.AllPermission;\n-};\n-\n-\n-grant codeBase \"jrt:\/java.xml.crypto\" {\n-    permission java.lang.RuntimePermission\n-                   \"getStackWalkerWithClassReference\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.sun.security.util\";\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.security.SecurityPermission \"putProviderProperty.XMLDSig\";\n-    permission java.security.SecurityPermission\n-                   \"clearProviderProperties.XMLDSig\";\n-    permission java.security.SecurityPermission\n-                   \"removeProviderProperty.XMLDSig\";\n-    permission java.security.SecurityPermission\n-                   \"com.sun.org.apache.xml.internal.security.register\";\n-    permission java.security.SecurityPermission\n-                   \"getProperty.jdk.xml.dsig.hereFunctionSupported\";\n-    permission java.security.SecurityPermission\n-                   \"getProperty.jdk.xml.dsig.secureValidationPolicy\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.com.sun.org.apache.xml.internal.*\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.com.sun.org.apache.xpath.internal\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.com.sun.org.apache.xpath.internal.*\";\n-    permission java.io.FilePermission \"<<ALL FILES>>\",\"read\";\n-    permission java.net.SocketPermission \"*\", \"connect,resolve\";\n-};\n-\n-\n-grant codeBase \"jrt:\/jdk.accessibility\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.awt\";\n-};\n-\n-grant codeBase \"jrt:\/jdk.charsets\" {\n-    permission java.util.PropertyPermission \"os.name\", \"read\";\n-    permission java.lang.RuntimePermission \"charsetProvider\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.jdk.internal.access\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.jdk.internal.misc\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.jdk.internal.util\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.nio.cs\";\n-};\n-\n-grant codeBase \"jrt:\/jdk.crypto.cryptoki\" {\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.com.sun.crypto.provider\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.misc\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.access\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.sun.security.*\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.nio.ch\";\n-    permission java.lang.RuntimePermission \"loadLibrary.j2pkcs11\";\n-    permission java.util.PropertyPermission \"sun.security.pkcs11.allowSingleThreadedModules\", \"read\";\n-    permission java.util.PropertyPermission \"sun.security.pkcs11.disableKeyExtraction\", \"read\";\n-    permission java.util.PropertyPermission \"os.name\", \"read\";\n-    permission java.util.PropertyPermission \"os.arch\", \"read\";\n-    permission java.util.PropertyPermission \"jdk.crypto.KeyAgreement.legacyKDF\", \"read\";\n-    permission java.security.SecurityPermission \"putProviderProperty.*\";\n-    permission java.security.SecurityPermission \"clearProviderProperties.*\";\n-    permission java.security.SecurityPermission \"removeProviderProperty.*\";\n-    permission java.security.SecurityPermission\n-                   \"getProperty.auth.login.defaultCallbackHandler\";\n-    permission java.security.SecurityPermission \"authProvider.*\";\n-    \/\/ Needed for reading PKCS11 config file and NSS library check\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n-};\n-\n-grant codeBase \"jrt:\/jdk.dynalink\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/jdk.httpserver\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/jdk.internal.le\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/jdk.graal.compiler\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/jdk.localedata\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.text.*\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.util.*\";\n-};\n-\n-grant codeBase \"jrt:\/jdk.naming.dns\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/jdk.scripting.nashorn\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/jdk.scripting.nashorn.shell\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/jdk.security.auth\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/jdk.security.jgss\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/jdk.zipfs\" {\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"fileSystemProvider\";\n-    permission java.lang.RuntimePermission \"accessUserInformation\";\n-    permission java.util.PropertyPermission \"os.name\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-    permission java.util.PropertyPermission \"user.name\", \"read\";\n-};\n-\n-\/\/ permissions needed by applications using java.desktop module\n-grant {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.com.sun.beans\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.com.sun.beans.*\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.com.sun.java.swing.plaf.*\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.com.apple.*\";\n-};\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":0,"deletions":210,"binary":false,"changes":210,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*-\n- *      Implementation of class java.security.AccessController\n- *\n- *\/\n-\n-#include <string.h>\n-\n-#include \"jni.h\"\n-#include \"jvm.h\"\n-#include \"java_security_AccessController.h\"\n-\n-JNIEXPORT jobject JNICALL\n-Java_java_security_AccessController_getProtectionDomain(\n-                                                              JNIEnv *env,\n-                                                              jclass cls,\n-                                                              jclass caller)\n-{\n-    return JVM_GetProtectionDomain(env, caller);\n-}\n-\n-JNIEXPORT jobject JNICALL\n-Java_java_security_AccessController_getStackAccessControlContext(\n-                                                              JNIEnv *env,\n-                                                              jobject this)\n-{\n-    return JVM_GetStackAccessControlContext(env, this);\n-}\n-\n-\n-JNIEXPORT jobject JNICALL\n-Java_java_security_AccessController_getInheritedAccessControlContext(\n-                                                              JNIEnv *env,\n-                                                              jobject this)\n-{\n-    return JVM_GetInheritedAccessControlContext(env, this);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_java_security_AccessController_ensureMaterializedForStackWalk(\n-                                                              JNIEnv *env,\n-                                                              jclass cls,\n-                                                              jobject value)\n-{\n-    JVM_EnsureMaterializedForStackWalk(env, value);\n-}\n","filename":"src\/java.base\/share\/native\/libjava\/AccessController.c","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 1995, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-#include \"jvm.h\"\n-\n-#include \"java_lang_SecurityManager.h\"\n-#include \"java_lang_ClassLoader.h\"\n-\n-\/*\n- * Make sure a security manager instance is initialized.\n- * TRUE means OK, FALSE means not.\n- *\/\n-static jboolean\n-check(JNIEnv *env, jobject this)\n-{\n-    static jfieldID initField = 0;\n-    jboolean initialized = JNI_FALSE;\n-\n-    if (initField == 0) {\n-        jclass clazz = (*env)->FindClass(env, \"java\/lang\/SecurityManager\");\n-        if (clazz == 0) {\n-            (*env)->ExceptionClear(env);\n-            return JNI_FALSE;\n-        }\n-        initField = (*env)->GetFieldID(env, clazz, \"initialized\", \"Z\");\n-        if (initField == 0) {\n-            (*env)->ExceptionClear(env);\n-            return JNI_FALSE;\n-        }\n-    }\n-    initialized = (*env)->GetBooleanField(env, this, initField);\n-\n-    if (initialized == JNI_TRUE) {\n-        return JNI_TRUE;\n-    } else {\n-        jclass securityException =\n-            (*env)->FindClass(env, \"java\/lang\/SecurityException\");\n-        if (securityException != 0) {\n-            (*env)->ThrowNew(env, securityException,\n-                             \"security manager not initialized.\");\n-        }\n-        return JNI_FALSE;\n-    }\n-}\n-\n-JNIEXPORT jobjectArray JNICALL\n-Java_java_lang_SecurityManager_getClassContext(JNIEnv *env, jobject this)\n-{\n-    if (!check(env, this)) {\n-        return NULL;            \/* exception *\/\n-    }\n-\n-    return JVM_GetClassContext(env);\n-}\n","filename":"src\/java.base\/share\/native\/libjava\/SecurityManager.c","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,16 +0,0 @@\n-grant codeBase \"jrt:\/jdk.accessibility\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"jrt:\/jdk.crypto.mscapi\" {\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.sun.security.*\";\n-    permission java.lang.RuntimePermission \"loadLibrary.sunmscapi\";\n-    permission java.security.SecurityPermission \"putProviderProperty.SunMSCAPI\";\n-    permission java.security.SecurityPermission\n-                   \"clearProviderProperties.SunMSCAPI\";\n-    permission java.security.SecurityPermission\n-                   \"removeProviderProperty.SunMSCAPI\";\n-    permission java.security.SecurityPermission \"authProvider.SunMSCAPI\";\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-};\n","filename":"src\/java.base\/windows\/lib\/security\/default.policy","additions":0,"deletions":16,"binary":false,"changes":16,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,0 @@\n- * <p>All methods in this interface might throw a SecurityException if\n- * a security exception occurs.\n- *\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/FileObject.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-     * @throws SecurityException {@inheritDoc}\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/ForwardingJavaFileManager.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -89,2 +89,0 @@\n- * <p>All methods in this interface might throw a SecurityException.\n- *\n@@ -191,2 +189,0 @@\n-     * @throws SecurityException if a class loader can not be created\n-     * in the current security context\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/JavaFileManager.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,0 @@\n- * <p>All methods in this interface might throw a SecurityException if\n- * a security exception occurs.\n- *\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/JavaFileObject.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,4 +126,0 @@\n-     * <p>\n-     * If there is a security manager, its {@code checkPermission} method is\n-     * called with the {@code AWTPermission(\"setAppletStub\")} permission if a\n-     * stub has already been set.\n@@ -132,1 +128,0 @@\n-     * @throws SecurityException if the caller cannot set the stub\n","filename":"src\/java.desktop\/share\/classes\/java\/applet\/Applet.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,127 +37,3 @@\n- * <P>\n- * The target name is the name of the AWT permission (see below). The naming\n- * convention follows the hierarchical property naming convention.\n- * Also, an asterisk could be used to represent all AWT permissions.\n- *\n- * <P>\n- * The following table lists all the possible {@code AWTPermission}\n- * target names, and for each provides a description of what the\n- * permission allows and a discussion of the risks of granting code\n- * the permission.\n- *\n- * <table class=\"striped\">\n- * <caption>AWTPermission target names, descriptions, and associated risks\n- * <\/caption>\n- * <thead>\n- *   <tr>\n- *     <th scope=\"col\">Permission Target Name\n- *     <th scope=\"col\">What the Permission Allows\n- *     <th scope=\"col\">Risks of Allowing this Permission\n- * <\/thead>\n- * <tbody>\n- *   <tr>\n- *     <th scope=\"row\">accessClipboard\n- *     <td>Posting and retrieval of information to and from the AWT clipboard\n- *     <td>This would allow malfeasant code to share potentially sensitive or\n- *     confidential information.\n- *   <tr>\n- *     <th scope=\"row\">accessEventQueue\n- *     <td>Access to the AWT event queue\n- *     <td>After retrieving the AWT event queue, malicious code may peek at and\n- *     even remove existing events from its event queue, as well as post bogus\n- *     events which may purposefully cause the application or applet to\n- *     misbehave in an insecure manner.\n- *   <tr>\n- *     <th scope=\"row\">accessSystemTray\n- *     <td>Access to the AWT SystemTray instance\n- *     <td>This would allow malicious code to add tray icons to the system tray.\n- *     First, such an icon may look like the icon of some known application\n- *     (such as a firewall or anti-virus) and order a user to do something\n- *     unsafe (with help of balloon messages). Second, the system tray may be\n- *     glutted with tray icons so that no one could add a tray icon anymore.\n- *   <tr>\n- *     <th scope=\"row\">createRobot\n- *     <td>Create java.awt.Robot objects\n- *     <td>The java.awt.Robot object allows code to generate native-level mouse\n- *     and keyboard events as well as read the screen. It could allow malicious\n- *     code to control the system, run other programs, read the display, and\n- *     deny mouse and keyboard access to the user.\n- *   <tr>\n- *     <th scope=\"row\">fullScreenExclusive\n- *     <td>Enter full-screen exclusive mode\n- *     <td>Entering full-screen exclusive mode allows direct access to low-level\n- *     graphics card memory. This could be used to spoof the system, since the\n- *     program is in direct control of rendering. Depending on the\n- *     implementation, the security warning may not be shown for the windows\n- *     used to enter the full-screen exclusive mode (assuming that the\n- *     {@code fullScreenExclusive} permission has been granted to this\n- *     application). Note that this behavior does not mean that the\n- *     {@code showWindowWithoutWarningBanner} permission will be automatically\n- *     granted to the application which has the {@code fullScreenExclusive}\n- *     permission: non-full-screen windows will continue to be shown with the\n- *     security warning.\n- *   <tr>\n- *     <th scope=\"row\">listenToAllAWTEvents\n- *     <td>Listen to all AWT events, system-wide\n- *     <td>After adding an AWT event listener, malicious code may scan all AWT\n- *     events dispatched in the system, allowing it to read all user input (such\n- *     as passwords). Each AWT event listener is called from within the context\n- *     of that event queue's EventDispatchThread, so if the accessEventQueue\n- *     permission is also enabled, malicious code could modify the contents of\n- *     AWT event queues system-wide, causing the application or applet to\n- *     misbehave in an insecure manner.\n- *   <tr>\n- *     <th scope=\"row\">readDisplayPixels\n- *     <td>Readback of pixels from the display screen\n- *     <td>Interfaces such as the java.awt.Composite interface or the\n- *     java.awt.Robot class allow arbitrary code to examine pixels on the\n- *     display enable malicious code to snoop on the activities of the user.\n- *   <tr>\n- *     <th scope=\"row\">replaceKeyboardFocusManager\n- *     <td>Sets the {@code KeyboardFocusManager} for a particular thread.\n- *     <td>When {@code SecurityManager} is installed, the invoking thread must\n- *     be granted this permission in order to replace the current\n- *     {@code KeyboardFocusManager}. If permission is not granted, a\n- *     {@code SecurityException} will be thrown.\n- *   <tr>\n- *     <th scope=\"row\">setAppletStub\n- *     <td>Setting the stub which implements Applet container services\n- *     <td>Malicious code could set an applet's stub and result in unexpected\n- *     behavior or denial of service to an applet.\n- *   <tr>\n- *     <th scope=\"row\">setWindowAlwaysOnTop\n- *     <td>Setting always-on-top property of the window:\n- *     {@link Window#setAlwaysOnTop}\n- *     <td>The malicious window might make itself look and behave like a real\n- *     full desktop, so that information entered by the unsuspecting user is\n- *     captured and subsequently misused\n- *   <tr>\n- *     <th scope=\"row\">showWindowWithoutWarningBanner\n- *     <td>Display of a window without also displaying a banner warning that the\n- *     window was created by an applet\n- *     <td>Without this warning, an applet may pop up windows without the user\n- *     knowing that they belong to an applet. Since users may make\n- *     security-sensitive decisions based on whether or not the window belongs\n- *     to an applet (entering a username and password into a dialog box, for\n- *     example), disabling this warning banner may allow applets to trick the\n- *     user into entering such information.\n- *   <tr>\n- *     <th scope=\"row\">toolkitModality\n- *     <td>Creating {@link Dialog.ModalityType#TOOLKIT_MODAL TOOLKIT_MODAL}\n- *     dialogs and setting the\n- *     {@link Dialog.ModalExclusionType#TOOLKIT_EXCLUDE TOOLKIT_EXCLUDE} window\n- *     property.\n- *     <td>When a toolkit-modal dialog is shown from an applet, it blocks all\n- *     other applets in the browser. When launching applications from Java Web\n- *     Start, its windows (such as the security dialog) may also be blocked by\n- *     toolkit-modal dialogs, shown from these applications.\n- *   <tr>\n- *     <th scope=\"row\">watchMousePointer\n- *     <td>Getting the information about the mouse pointer position at any time\n- *     <td>Constantly watching the mouse pointer, an applet can make guesses\n- *     about what the user is doing, i.e. moving the mouse to the lower left\n- *     corner of the screen most likely means that the user is about to launch\n- *     an application. If a virtual keypad is used so that keyboard is emulated\n- *     using the mouse, an applet may guess what is being typed.\n- * <\/tbody>\n- * <\/table>\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/AWTPermission.java","additions":4,"deletions":128,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -359,3 +359,0 @@\n-     * @throws SecurityException If a security manager exists and its\n-     *         {@link SecurityManager#checkRead(java.lang.String)} method\n-     *         denies read access to the file\n@@ -416,7 +413,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     * {@link java.lang.SecurityManager#checkRead(java.lang.String)}\n-     * method denies read access to the file, or it denies the\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}\n-     * permission, or the calling thread is not allowed to create a\n-     * subprocess\n-     * @see java.awt.AWTPermission\n@@ -446,9 +436,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     * {@link java.lang.SecurityManager#checkRead(java.lang.String)}\n-     * method denies read access to the file, or {@link\n-     * java.lang.SecurityManager#checkWrite(java.lang.String)} method\n-     * denies write access to the file, or it denies the\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}\n-     * permission, or the calling thread is not allowed to create a\n-     * subprocess\n-     * @see java.awt.AWTPermission\n@@ -482,6 +463,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     * {@link java.lang.SecurityManager#checkRead(java.lang.String)}\n-     * method denies read access to the file, or its {@link\n-     * java.lang.SecurityManager#checkPrintJobAccess()} method denies\n-     * the permission to print the file, or the calling thread is not\n-     * allowed to create a subprocess\n@@ -520,5 +495,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * denies the\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}\n-     * permission, or the calling thread is not allowed to create a\n-     * subprocess\n@@ -526,1 +496,0 @@\n-     * @see java.awt.AWTPermission\n@@ -544,6 +513,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * denies the\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}\n-     * permission, or the calling thread is not allowed to create a\n-     * subprocess\n-     * @see java.awt.AWTPermission\n@@ -585,5 +548,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * denies the\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}\n-     * permission, or the calling thread is not allowed to create a\n-     * subprocess\n@@ -593,1 +551,0 @@\n-     * @see java.awt.AWTPermission\n@@ -643,5 +600,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")}\n-     * permission\n-     *\n@@ -670,5 +622,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")}\n-     * permission\n-     *\n@@ -697,4 +644,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")}\n-     * permission\n@@ -722,3 +665,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission\n@@ -749,6 +689,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     * {@link java.lang.SecurityManager#checkRead(java.lang.String)}\n-     * method denies read access to the files, or it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")}\n-     * permission, or the calling thread is not allowed to create a\n-     * subprocess\n@@ -780,4 +714,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     * {@link java.lang.SecurityManager#checkPrintJobAccess()} method denies\n-     * the permission to print or it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission\n@@ -817,3 +747,0 @@\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")}\n-     * permission, or the calling thread is not allowed to create a\n-     * subprocess\n@@ -840,3 +767,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * will not allow the caller to invoke {@code System.exit} or it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission\n@@ -860,5 +784,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * will not allow the caller to invoke {@code System.exit} or it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission\n-     * @throws UnsupportedOperationException if the current platform\n-     * does not support the {@link Desktop.Action#APP_QUIT_STRATEGY} action\n@@ -889,3 +808,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * will not allow the caller to invoke {@code System.exit} or it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission\n@@ -910,3 +826,0 @@\n-     * @throws SecurityException if a security manager exists and it\n-     * will not allow the caller to invoke {@code System.exit} or it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission\n@@ -930,2 +843,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -949,6 +860,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     *         {@code RuntimePermission(\"canProcessApplicationEvents\")}\n-     *         permission, or it denies the\n-     *         {@code AWTPermission(\"showWindowWithoutWarningBanner\")}\n-     *         permission, or the calling thread is not allowed to create a\n-     *         subprocess\n@@ -971,2 +876,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -996,6 +899,0 @@\n-     * @throws SecurityException If a security manager exists and its\n-     *         {@link SecurityManager#checkRead(java.lang.String)} method\n-     *         denies read access to the file or to its parent, or it denies the\n-     *         {@code AWTPermission(\"showWindowWithoutWarningBanner\")}\n-     *         permission, or the calling thread is not allowed to create a\n-     *         subprocess\n@@ -1027,3 +924,0 @@\n-     * @throws SecurityException If a security manager exists and its\n-     *         {@link SecurityManager#checkDelete(java.lang.String)} method\n-     *         denies deletion of the file\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Desktop.java","additions":1,"deletions":107,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,7 +184,0 @@\n-         * Special {@code AWTPermission} \"toolkitModality\" must be granted to use\n-         * toolkit-modal dialogs. If a {@code TOOLKIT_MODAL} dialog is being created\n-         * and this permission is not granted, a {@code SecurityException} will be\n-         * thrown, and no dialog will be created. If a modality type is being changed\n-         * to {@code TOOLKIT_MODAL} and this permission is not granted, a\n-         * {@code SecurityException} will be thrown, and the modality type will\n-         * be left unchanged.\n@@ -267,5 +260,0 @@\n-         * The \"toolkitModality\" {@code AWTPermission} must be granted\n-         * for this exclusion. If an exclusion property is being changed to\n-         * {@code TOOLKIT_EXCLUDE} and this permission is not granted, a\n-         * {@code SecurityException} will be thrown, and the exclusion\n-         * property will be left unchanged.\n@@ -627,2 +615,0 @@\n-     * @throws SecurityException if the calling thread does not have permission\n-     *    to create modal dialogs with the given {@code modalityType}\n@@ -662,2 +648,0 @@\n-     * @throws SecurityException if the calling thread does not have permission\n-     *     to create modal dialogs with the given {@code modalityType}\n@@ -713,2 +697,0 @@\n-     * @throws SecurityException if the calling thread does not have permission\n-     *     to create modal dialogs with the given {@code modalityType}\n@@ -850,2 +832,0 @@\n-     * @throws SecurityException if the calling thread does not have permission\n-     *     to create modal dialogs with the given {@code modalityType}\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Dialog.java","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1238,2 +1238,0 @@\n-     * @throws SecurityException if the executing code does not have\n-     * permission to read from the file.\n@@ -1615,2 +1613,1 @@\n-     * If the specified property is not found, or the executing code does\n-     * not have permission to read the property, null is returned instead.\n+     * If the specified property is not found, null is returned instead.\n@@ -1784,2 +1781,1 @@\n-     * If the specified property is not found, or the executing code does not\n-     * have permission to read the property, the {@code font}\n+     * If the specified property is not found, the {@code font}\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Font.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -839,12 +839,0 @@\n-     * <p>If this {@code Graphics2D} context is drawing to a\n-     * {@code Component} on the display screen and the\n-     * {@code Composite} is a custom object rather than an\n-     * instance of the {@code AlphaComposite} class, and if\n-     * there is a security manager, its {@code checkPermission}\n-     * method is called with an {@code AWTPermission(\"readDisplayPixels\")}\n-     * permission.\n-     * @throws SecurityException\n-     *         if a custom {@code Composite} object is being\n-     *         used to render to the screen and a security manager\n-     *         is set and its {@code checkPermission} method\n-     *         does not allow the operation.\n@@ -856,2 +844,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see java.awt.AWTPermission\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Graphics2D.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -211,5 +211,0 @@\n-     * If a SecurityManager is installed, its\n-     * {@code checkPermission} method will be called\n-     * with {@code AWTPermission(\"fullScreenExclusive\")}.\n-     * {@code isFullScreenSupported} returns true only if\n-     * that permission is granted.\n@@ -218,1 +213,0 @@\n-     * @see java.awt.AWTPermission\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/GraphicsDevice.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -226,6 +226,0 @@\n-     * <p>\n-     * If a SecurityManager is installed, the calling thread must be granted\n-     * the AWTPermission \"replaceKeyboardFocusManager\" in order to replace the\n-     * the current KeyboardFocusManager. If this permission is not granted,\n-     * this method will throw a SecurityException, and the current\n-     * KeyboardFocusManager will be unchanged.\n@@ -236,2 +230,0 @@\n-     * @throws SecurityException if the calling thread does not have permission\n-     *         to replace the current KeyboardFocusManager\n@@ -239,3 +231,1 @@\n-    public static void setCurrentKeyboardFocusManager(\n-        KeyboardFocusManager newManager) throws SecurityException\n-    {\n+    public static void setCurrentKeyboardFocusManager(KeyboardFocusManager newManager) {\n@@ -482,4 +472,0 @@\n-     * <p>\n-     * This method will throw a SecurityException if this KeyboardFocusManager\n-     * is not the current KeyboardFocusManager for the calling thread's\n-     * context.\n@@ -490,4 +476,0 @@\n-     * @throws SecurityException if this KeyboardFocusManager is not the\n-     *         current KeyboardFocusManager for the calling thread's context\n-     *         and if the calling thread does not have \"replaceKeyboardFocusManager\"\n-     *         permission\n@@ -495,1 +477,1 @@\n-    protected Component getGlobalFocusOwner() throws SecurityException {\n+    protected Component getGlobalFocusOwner() {\n@@ -523,4 +505,0 @@\n-     * @throws SecurityException if this KeyboardFocusManager is not the\n-     *         current KeyboardFocusManager for the calling thread's context\n-     *         and if the calling thread does not have \"replaceKeyboardFocusManager\"\n-     *         permission\n@@ -528,3 +506,1 @@\n-    protected void setGlobalFocusOwner(Component focusOwner)\n-        throws SecurityException\n-    {\n+    protected void setGlobalFocusOwner(Component focusOwner) {\n@@ -605,5 +581,0 @@\n-     * If a SecurityManager is installed, the calling thread must be granted\n-     * the \"replaceKeyboardFocusManager\" AWTPermission. If this permission is\n-     * not granted, this method will throw a SecurityException, and the current\n-     * focus owner will not be cleared.\n-     * <p>\n@@ -617,2 +588,0 @@\n-     * @throws SecurityException if the calling thread does not have\n-     *         \"replaceKeyboardFocusManager\" permission\n@@ -620,3 +589,1 @@\n-    public void clearGlobalFocusOwner()\n-        throws SecurityException\n-    {\n+    public void clearGlobalFocusOwner() {\n@@ -702,4 +669,0 @@\n-     * @throws SecurityException if this KeyboardFocusManager is not the\n-     *         current KeyboardFocusManager for the calling thread's context\n-     *         and if the calling thread does not have \"replaceKeyboardFocusManager\"\n-     *         permission\n@@ -707,3 +670,1 @@\n-    protected Component getGlobalPermanentFocusOwner()\n-        throws SecurityException\n-    {\n+    protected Component getGlobalPermanentFocusOwner() {\n@@ -738,4 +699,0 @@\n-     * @throws SecurityException if this KeyboardFocusManager is not the\n-     *         current KeyboardFocusManager for the calling thread's context\n-     *         and if the calling thread does not have \"replaceKeyboardFocusManager\"\n-     *         permission\n@@ -743,3 +700,1 @@\n-    protected void setGlobalPermanentFocusOwner(Component permanentFocusOwner)\n-        throws SecurityException\n-    {\n+    protected void setGlobalPermanentFocusOwner(Component permanentFocusOwner) {\n@@ -809,4 +764,0 @@\n-     * @throws SecurityException if this KeyboardFocusManager is not the\n-     *         current KeyboardFocusManager for the calling thread's context\n-     *         and if the calling thread does not have \"replaceKeyboardFocusManager\"\n-     *         permission\n@@ -814,1 +765,1 @@\n-    protected Window getGlobalFocusedWindow() throws SecurityException {\n+    protected Window getGlobalFocusedWindow() {\n@@ -839,4 +790,0 @@\n-     * @throws SecurityException if this KeyboardFocusManager is not the\n-     *         current KeyboardFocusManager for the calling thread's context\n-     *         and if the calling thread does not have \"replaceKeyboardFocusManager\"\n-     *         permission\n@@ -844,3 +791,1 @@\n-    protected void setGlobalFocusedWindow(Window focusedWindow)\n-        throws SecurityException\n-    {\n+    protected void setGlobalFocusedWindow(Window focusedWindow) {\n@@ -911,4 +856,0 @@\n-     * @throws SecurityException if this KeyboardFocusManager is not the\n-     *         current KeyboardFocusManager for the calling thread's context\n-     *         and if the calling thread does not have \"replaceKeyboardFocusManager\"\n-     *         permission\n@@ -916,1 +857,1 @@\n-    protected Window getGlobalActiveWindow() throws SecurityException {\n+    protected Window getGlobalActiveWindow() {\n@@ -942,4 +883,0 @@\n-     * @throws SecurityException if this KeyboardFocusManager is not the\n-     *         current KeyboardFocusManager for the calling thread's context\n-     *         and if the calling thread does not have \"replaceKeyboardFocusManager\"\n-     *         permission\n@@ -947,3 +884,1 @@\n-    protected void setGlobalActiveWindow(Window activeWindow)\n-        throws SecurityException\n-    {\n+    protected void setGlobalActiveWindow(Window activeWindow) {\n@@ -1226,4 +1161,0 @@\n-     * @throws SecurityException if this KeyboardFocusManager is not the\n-     *         current KeyboardFocusManager for the calling thread's context\n-     *         and if the calling thread does not have \"replaceKeyboardFocusManager\"\n-     *         permission\n@@ -1231,3 +1162,1 @@\n-    protected Container getGlobalCurrentFocusCycleRoot()\n-        throws SecurityException\n-    {\n+    protected Container getGlobalCurrentFocusCycleRoot() {\n@@ -1247,5 +1176,0 @@\n-     * If a SecurityManager is installed, the calling thread must be granted\n-     * the \"replaceKeyboardFocusManager\" AWTPermission. If this permission is\n-     * not granted, this method will throw a SecurityException, and the current\n-     * focus cycle root will not be changed.\n-     * <p>\n@@ -1258,2 +1182,0 @@\n-     * @throws SecurityException if the calling thread does not have\n-     *         \"replaceKeyboardFocusManager\" permission\n@@ -1261,3 +1183,1 @@\n-    public void setGlobalCurrentFocusCycleRoot(Container newFocusCycleRoot)\n-        throws SecurityException\n-    {\n+    public void setGlobalCurrentFocusCycleRoot(Container newFocusCycleRoot) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/KeyboardFocusManager.java","additions":13,"deletions":93,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,5 +59,0 @@\n-     * <p>\n-     * If there is a security manager, its {@code checkPermission} method\n-     * is called with an {@code AWTPermission(\"watchMousePointer\")}\n-     * permission before creating and returning a {@code PointerInfo}\n-     * object. This may result in a {@code SecurityException}.\n@@ -66,5 +61,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *            {@code checkPermission} method doesn't allow the operation\n-     * @see       GraphicsConfiguration\n-     * @see       SecurityManager#checkPermission\n-     * @see       java.awt.AWTPermission\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/MouseInfo.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,1 +127,0 @@\n-     * @throws  SecurityException if {@code createRobot} permission is not granted\n@@ -129,2 +128,0 @@\n-     * @see     SecurityManager#checkPermission\n-     * @see     AWTPermission\n@@ -159,1 +156,0 @@\n-     * @throws  SecurityException if {@code createRobot} permission is not granted\n@@ -162,2 +158,0 @@\n-     * @see     SecurityManager#checkPermission\n-     * @see     AWTPermission\n@@ -441,2 +435,1 @@\n-     * @throws  SecurityException if {@code readDisplayPixels} permission\n-     *          is not granted, or access to the screen is denied\n+     * @throws  SecurityException if access to the screen is denied\n@@ -470,2 +463,1 @@\n-     * @throws  SecurityException if {@code readDisplayPixels} permission\n-     *          is not granted, or access to the screen is denied\n+     * @throws  SecurityException if access to the screen is denied\n@@ -473,2 +465,0 @@\n-     * @see     SecurityManager#checkPermission\n-     * @see     AWTPermission\n@@ -516,2 +506,1 @@\n-     * @throws  SecurityException if {@code readDisplayPixels} permission\n-     *          is not granted, or access to the screen is denied\n+     * @throws  SecurityException if access to the screen is denied\n@@ -519,2 +508,0 @@\n-     * @see     SecurityManager#checkPermission\n-     * @see     AWTPermission\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Robot.java","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,5 +152,0 @@\n-     * <p>If a SecurityManager is installed, the AWTPermission\n-     * {@code accessSystemTray} must be granted in order to get the\n-     * {@code SystemTray} instance. Otherwise this method will throw a\n-     * SecurityException.\n-     *\n@@ -163,2 +158,0 @@\n-     * @throws SecurityException if {@code accessSystemTray} permission\n-     * is not granted\n@@ -168,2 +161,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see AWTPermission\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/SystemTray.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -264,2 +264,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -283,2 +281,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -299,2 +295,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -314,2 +308,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -329,2 +321,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -348,2 +338,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -370,2 +358,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -393,2 +379,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -411,2 +395,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -443,2 +425,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n@@ -477,2 +457,0 @@\n-     * @throws SecurityException if a security manager exists and it denies the\n-     * {@code RuntimePermission(\"canProcessApplicationEvents\")} permission.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Taskbar.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -626,5 +626,0 @@\n-     * <p>\n-     * This method first checks if there is a security manager installed.\n-     * If so, the method calls the security manager's\n-     * {@code checkRead} method with the file specified to ensure\n-     * that the access to the image is allowed.\n@@ -635,2 +630,0 @@\n-     * @throws SecurityException  if a security manager exists and its\n-     *                            checkRead method doesn't allow the operation.\n@@ -661,8 +654,0 @@\n-     * <p>\n-     * This method first checks if there is a security manager installed.\n-     * If so, the method calls the security manager's\n-     * {@code checkPermission} method with the corresponding\n-     * permission to ensure that the access to the image is allowed.\n-     * If the connection to the specified URL requires\n-     * either {@code URLPermission} or {@code SocketPermission},\n-     * then {@code URLPermission} is used for security checks.\n@@ -672,3 +657,0 @@\n-     * @throws SecurityException  if a security manager exists and its\n-     *                            checkPermission method doesn't allow\n-     *                            the operation.\n@@ -683,5 +665,0 @@\n-     * <p>\n-     * This method first checks if there is a security manager installed.\n-     * If so, the method calls the security manager's\n-     * {@code checkRead} method with the specified file to ensure\n-     * that the image creation is allowed.\n@@ -692,2 +669,0 @@\n-     * @throws SecurityException  if a security manager exists and its\n-     *                            checkRead method doesn't allow the operation.\n@@ -702,8 +677,0 @@\n-     * <p>\n-     * This method first checks if there is a security manager installed.\n-     * If so, the method calls the security manager's\n-     * {@code checkPermission} method with the corresponding\n-     * permission to ensure that the image creation is allowed.\n-     * If the connection to the specified URL requires\n-     * either {@code URLPermission} or {@code SocketPermission},\n-     * then {@code URLPermission} is used for security checks.\n@@ -713,3 +680,0 @@\n-     * @throws SecurityException  if a security manager exists and its\n-     *                            checkPermission method doesn't allow\n-     *                            the operation.\n@@ -844,9 +808,0 @@\n-     * <p>\n-     * Each actual implementation of this method should first check if there\n-     * is a security manager installed. If there is, the method should call\n-     * the security manager's {@code checkPrintJobAccess} method to\n-     * ensure initiation of a print operation is allowed. If the default\n-     * implementation of {@code checkPrintJobAccess} is used (that is,\n-     * that method is not overridden), then this results in a call to the\n-     * security manager's {@code checkPermission} method with a\n-     * {@code RuntimePermission(\"queuePrintJob\")} permission.\n@@ -867,2 +822,0 @@\n-     * @throws  SecurityException if this thread is not allowed to initiate a\n-     *          print job request\n@@ -871,1 +824,0 @@\n-     * @see     java.lang.RuntimePermission\n@@ -880,9 +832,0 @@\n-     * <p>\n-     * Each actual implementation of this method should first check if there\n-     * is a security manager installed. If there is, the method should call\n-     * the security manager's {@code checkPrintJobAccess} method to\n-     * ensure initiation of a print operation is allowed. If the default\n-     * implementation of {@code checkPrintJobAccess} is used (that is,\n-     * that method is not overridden), then this results in a call to the\n-     * security manager's {@code checkPermission} method with a\n-     * {@code RuntimePermission(\"queuePrintJob\")} permission.\n@@ -916,3 +859,0 @@\n-     * @throws  SecurityException if this thread is not allowed to initiate a\n-     *          print job request, or if jobAttributes specifies print to file,\n-     *          and this thread is not allowed to access the file system\n@@ -921,1 +861,0 @@\n-     * @see     java.lang.RuntimePermission\n@@ -969,5 +908,0 @@\n-     * <p>\n-     * Each actual implementation of this method should first check if there\n-     * is a security manager installed. If there is, the method should call\n-     * the security manager's {@link SecurityManager#checkPermission\n-     * checkPermission} method to check {@code AWTPermission(\"accessClipboard\")}.\n@@ -984,1 +918,0 @@\n-     * @see       java.awt.AWTPermission\n@@ -1014,5 +947,0 @@\n-     * <p>\n-     * Each actual implementation of this method should first check if there\n-     * is a security manager installed. If there is, the method should call\n-     * the security manager's {@link SecurityManager#checkPermission\n-     * checkPermission} method to check {@code AWTPermission(\"accessClipboard\")}.\n@@ -1032,1 +960,0 @@\n-     * @see AWTPermission\n@@ -1460,4 +1387,0 @@\n-     * <p> If there is a security manager then its\n-     * {@link SecurityManager#checkPermission checkPermission} method\n-     * is called to check {@code AWTPermission(\"accessEventQueue\")}.\n-     *\n@@ -1465,4 +1388,0 @@\n-     * @throws  SecurityException\n-     *          if a security manager is set and it denies access to\n-     *          the {@code EventQueue}\n-     * @see     java.awt.AWTPermission\n@@ -1775,5 +1694,0 @@\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with an\n-     * {@code AWTPermission(\"listenToAllAWTEvents\")} permission.\n-     * This may result in a SecurityException.\n-     * <p>\n@@ -1793,3 +1707,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow the operation.\n@@ -1798,1 +1709,0 @@\n-     * @see      SecurityManager#checkPermission\n@@ -1800,1 +1710,0 @@\n-     * @see      java.awt.AWTPermission\n@@ -1850,5 +1759,0 @@\n-     * First, if there is a security manager, its {@code checkPermission}\n-     * method is called with an\n-     * {@code AWTPermission(\"listenToAllAWTEvents\")} permission.\n-     * This may result in a SecurityException.\n-     * <p>\n@@ -1863,3 +1767,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow the operation.\n@@ -1868,1 +1769,0 @@\n-     * @see      SecurityManager#checkPermission\n@@ -1870,1 +1770,0 @@\n-     * @see      java.awt.AWTPermission\n@@ -1922,4 +1821,0 @@\n-     * If there is a security manager, its {@code checkPermission}\n-     * method is called with an\n-     * {@code AWTPermission(\"listenToAllAWTEvents\")} permission.\n-     * This may result in a SecurityException.\n@@ -1934,3 +1829,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow the operation.\n@@ -1939,1 +1831,0 @@\n-     * @see      SecurityManager#checkPermission\n@@ -1941,1 +1832,0 @@\n-     * @see      java.awt.AWTPermission\n@@ -1972,4 +1862,0 @@\n-     * If there is a security manager, its {@code checkPermission}\n-     * method is called with an\n-     * {@code AWTPermission(\"listenToAllAWTEvents\")} permission.\n-     * This may result in a SecurityException.\n@@ -1987,3 +1873,0 @@\n-     * @throws SecurityException\n-     *        if a security manager exists and its\n-     *        {@code checkPermission} method doesn't allow the operation.\n@@ -1992,1 +1875,0 @@\n-     * @see      SecurityManager#checkPermission\n@@ -1994,1 +1876,0 @@\n-     * @see      java.awt.AWTPermission\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Toolkit.java","additions":1,"deletions":120,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,5 +69,0 @@\n- * <p>If a SecurityManager is installed, the AWTPermission\n- * {@code accessSystemTray} must be granted in order to create\n- * a {@code TrayIcon}. Otherwise the constructor will throw a\n- * SecurityException.\n- *\n@@ -170,2 +165,0 @@\n-     * @throws SecurityException if {@code accessSystemTray} permission\n-     * is not granted\n@@ -175,2 +168,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see AWTPermission\n@@ -199,2 +190,0 @@\n-     * @throws SecurityException if {@code accessSystemTray} permission\n-     * is not granted\n@@ -204,2 +193,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see AWTPermission\n@@ -226,2 +213,0 @@\n-     * @throws SecurityException if {@code accessSystemTray} permission\n-     * is not granted\n@@ -234,2 +219,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see AWTPermission\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/TrayIcon.java","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -561,5 +561,0 @@\n-     * <p>\n-     * If there is a security manager set, it is invoked to check\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}.\n-     * If that check fails with a {@code SecurityException} then a warning\n-     * banner is created.\n@@ -588,5 +583,0 @@\n-     * <p>\n-     * If there is a security manager set, it is invoked to check\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}.\n-     * If that check fails with a {@code SecurityException} then a\n-     * warning banner is created.\n@@ -619,5 +609,0 @@\n-     * <p>\n-     * If there is a security manager set, it is invoked to check\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}. If that\n-     * check fails with a {@code SecurityException} then a warning banner\n-     * is created.\n@@ -1385,5 +1370,0 @@\n-     * If this window is insecure, the warning string is displayed\n-     * somewhere in the visible area of the window. A window is\n-     * insecure if there is a security manager and the security\n-     * manager denies\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}.\n@@ -1391,6 +1371,3 @@\n-     * If the window is secure, then {@code getWarningString}\n-     * returns {@code null}. If the window is insecure, this\n-     * method checks for the system property\n-     * {@code awt.appletWarning}\n-     * and returns the string value of that property.\n-     * @return    the warning string for this window.\n+     * Warning strings are no longer applicable,\n+     * so this method always returns {@code null}.\n+     * @return    null\n@@ -1687,3 +1664,0 @@\n-     * @throws SecurityException if the calling thread does not have permission\n-     *     to set the modal exclusion property to the window with the given\n-     *     {@code exclusionType}\n@@ -2235,7 +2209,0 @@\n-     * <p>\n-     * If a SecurityManager is installed, the calling thread must be\n-     * granted the AWTPermission \"setWindowAlwaysOnTop\" in\n-     * order to set the value of this property. If this\n-     * permission is not granted, this method will throw a\n-     * SecurityException, and the current value of the property will\n-     * be left unchanged.\n@@ -2245,2 +2212,0 @@\n-     * @throws SecurityException if the calling thread does not have\n-     *         permission to set the value of always-on-top property\n@@ -2251,1 +2216,0 @@\n-     * @see AWTPermission\n@@ -2257,1 +2221,1 @@\n-    public final void setAlwaysOnTop(boolean alwaysOnTop) throws SecurityException {\n+    public final void setAlwaysOnTop(boolean alwaysOnTop) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Window.java","additions":5,"deletions":41,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -862,2 +862,0 @@\n-     * @throws SecurityException If a security manager is installed and it does\n-     *         not permit read access to the given file\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_Profile.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-  <code>Runtime<\/code> or class <code>System<\/code>, and the exit\n-  operation is permitted by the security manager.\n+  <code>Runtime<\/code> or class <code>System<\/code>.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/doc-files\/AWTThreadIssues.html","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,4 +65,0 @@\n-     *\n-     * @throws  SecurityException if a security manager exists and its\n-     *          {@link java.lang.SecurityManager#checkPrintJobAccess}\n-     *          method disallows this thread from creating a print job request\n@@ -565,2 +561,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *         PropertyPermission - user.name is not given in the policy file\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/print\/PrinterJob.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -437,6 +437,0 @@\n-     * <p>Note that this method is security checked\n-     * and is not available to (for example) untrusted applets.\n-     * More specifically, if there is a security manager,\n-     * its {@code checkPropertiesAccess}\n-     * method is called. This could result in a SecurityException.\n-     *\n@@ -444,4 +438,0 @@\n-     * @throws  SecurityException  if a security manager exists and its\n-     *             {@code checkPropertiesAccess} method doesn't allow setting\n-     *              of system properties.\n-     * @see SecurityManager#checkPropertiesAccess\n@@ -450,2 +440,1 @@\n-    public static void setDesignTime(boolean isDesignTime)\n-                        throws SecurityException {\n+    public static void setDesignTime(boolean isDesignTime) {\n@@ -464,6 +453,0 @@\n-     * <p>Note that this method is security checked\n-     * and is not available to (for example) untrusted applets.\n-     * More specifically, if there is a security manager,\n-     * its {@code checkPropertiesAccess}\n-     * method is called. This could result in a SecurityException.\n-     *\n@@ -471,4 +454,0 @@\n-     * @throws  SecurityException  if a security manager exists and its\n-     *             {@code checkPropertiesAccess} method doesn't allow setting\n-     *              of system properties.\n-     * @see SecurityManager#checkPropertiesAccess\n@@ -477,2 +456,1 @@\n-    public static void setGuiAvailable(boolean isGuiAvailable)\n-                        throws SecurityException {\n+    public static void setGuiAvailable(boolean isGuiAvailable) {\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Beans.java","additions":2,"deletions":24,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,2 +112,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *                           it denies the method invocation\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Expression.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -338,3 +338,0 @@\n-     * <p>First, if there is a security manager, its {@code checkPropertiesAccess}\n-     * method is called. This could result in a SecurityException.\n-     *\n@@ -342,4 +339,0 @@\n-     * @throws  SecurityException  if a security manager exists and its\n-     *             {@code checkPropertiesAccess} method doesn't allow setting\n-     *              of system properties.\n-     * @see SecurityManager#checkPropertiesAccess\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Introspector.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,3 +69,0 @@\n-     * <p>\n-     * If there is a security manager, its {@code checkPropertiesAccess}\n-     * method is called. This could result in a {@linkplain SecurityException}.\n@@ -75,5 +72,0 @@\n-     * @throws SecurityException  if a security manager exists and\n-     *                            its {@code checkPropertiesAccess} method\n-     *                            doesn't allow setting of system properties\n-     *\n-     * @see SecurityManager#checkPropertiesAccess\n@@ -117,3 +109,0 @@\n-     * <p>First, if there is a security manager, its {@code checkPropertiesAccess}\n-     * method is called. This could result in a SecurityException.\n-     *\n@@ -121,4 +110,0 @@\n-     * @throws  SecurityException  if a security manager exists and its\n-     *             {@code checkPropertiesAccess} method doesn't allow setting\n-     *              of system properties.\n-     * @see SecurityManager#checkPropertiesAccess\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/PropertyEditorManager.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -169,2 +169,0 @@\n-     * @throws SecurityException if a security manager exists and\n-     *                           it denies the method invocation\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Statement.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,3 +53,0 @@\n-     *\n-     * @throws SecurityException If a security manager has been installed and it\n-     *         denies {@link RuntimePermission} {@code \"accessibilityProvider\"}\n","filename":"src\/java.desktop\/share\/classes\/javax\/accessibility\/AccessibilityProvider.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -280,2 +280,0 @@\n-     * @throws SecurityException if the security manager denies\n-     * access to the directory.\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/ImageIO.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,2 +65,0 @@\n-     * @throws SecurityException if a security manager exists\n-     * and does not allow read access to the file.\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/FileImageInputStream.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,2 +60,0 @@\n-     * @throws SecurityException if a security manager exists\n-     * and does not allow write access to the file.\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/stream\/FileImageOutputStream.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,13 +52,0 @@\n- * <p>\n- * A {@code PrintServiceLookup} implementor is recommended to check for the\n- * {@code SecurityManager.checkPrintJobAccess()} to deny access to untrusted\n- * code. Following this recommended policy means that untrusted code may not be\n- * able to locate any print services. Downloaded applets are the most common\n- * example of untrusted code.\n- * <p>\n- * This check is made on a per lookup service basis to allow flexibility in the\n- * policy to reflect the needs of different lookup services.\n- * <p>\n- * Services which are registered by {@link #registerService(PrintService)} will\n- * not be included in lookup results if a security manager is installed and its\n- * {@code checkPrintJobAccess()} method denies access.\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/PrintServiceLookup.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,2 +120,0 @@\n-     * @throws SecurityException thrown if the device cannot be opened due to\n-     *         security restrictions\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/midi\/MidiDevice.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * The target name is the name of the audio permission (see the table below).\n+ * The target name is the name of the audio permission.\n@@ -39,5 +39,0 @@\n- * <p>\n- * The following table lists the possible {@code AudioPermission} target names.\n- * For each name, the table provides a description of exactly what that\n- * permission allows, as well as a discussion of the risks of granting code the\n- * permission.\n@@ -45,30 +40,3 @@\n- * <table class=\"striped\">\n- * <caption>Permission target name, what the permission allows, and associated\n- * risks<\/caption>\n- * <thead>\n- *   <tr>\n- *     <th scope=\"col\">Permission Target Name\n- *     <th scope=\"col\">What the Permission Allows\n- *     <th scope=\"col\">Risks of Allowing this Permission\n- * <\/thead>\n- * <tbody>\n- *   <tr>\n- *     <th scope=\"row\">play\n- *     <td>Audio playback through the audio device or devices on the system.\n- *     Allows the application to obtain and manipulate lines and mixers for\n- *     audio playback (rendering).\n- *     <td>In some cases use of this permission may affect other\n- *     applications because the audio from one line may be mixed with other\n- *     audio being played on the system, or because manipulation of a mixer\n- *     affects the audio for all lines using that mixer.\n- *   <tr>\n- *     <th scope=\"row\">record\n- *     <td>Audio recording through the audio device or devices on the system.\n- *     Allows the application to obtain and manipulate lines and mixers for\n- *     audio recording (capture).\n- *     <td>In some cases use of this permission may affect other applications\n- *     because manipulation of a mixer affects the audio for all lines using\n- *     that mixer. This permission can enable an applet or application to\n- *     eavesdrop on a user.\n- * <\/tbody>\n- * <\/table>\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/sampled\/AudioPermission.java","additions":5,"deletions":37,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -190,2 +190,0 @@\n-     * @throws SecurityException if the requested mixer is unavailable because\n-     *         of security restrictions\n@@ -347,2 +345,0 @@\n-     * @throws SecurityException if a matching line is not available due to\n-     *         security restrictions\n@@ -446,2 +442,0 @@\n-     * @throws SecurityException if a clip object is not available due to\n-     *         security restrictions\n@@ -477,2 +471,0 @@\n-     * @throws SecurityException if a clip is not available from this mixer due\n-     *         to security restrictions\n@@ -521,2 +513,0 @@\n-     * @throws SecurityException if a matching source data line is not available\n-     *         due to security restrictions\n@@ -557,2 +547,0 @@\n-     * @throws SecurityException if a matching source data line is not available\n-     *         from the specified mixer due to security restrictions\n@@ -600,2 +588,0 @@\n-     * @throws SecurityException if a matching target data line is not available\n-     *         due to security restrictions\n@@ -606,1 +592,0 @@\n-     * @see AudioPermission\n@@ -638,2 +623,0 @@\n-     * @throws SecurityException if a matching target data line is not available\n-     *         from the specified mixer due to security restrictions\n@@ -644,1 +627,0 @@\n-     * @see AudioPermission\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/sampled\/AudioSystem.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,2 +89,0 @@\n-     * @throws SecurityException if the line cannot be opened due to security\n-     *         restrictions\n@@ -121,2 +119,0 @@\n-     * @throws SecurityException if the line cannot be opened due to security\n-     *         restrictions\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/sampled\/Clip.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,4 +60,0 @@\n- * <p>\n- * Certain line operations, such as open and close, can generate security\n- * exceptions if invoked by unprivileged code when the line is a shared audio\n- * resource.\n@@ -111,2 +107,0 @@\n-     * @throws SecurityException if the line cannot be opened due to security\n-     *         restrictions\n@@ -127,2 +121,0 @@\n-     * @throws SecurityException if the line cannot be closed due to security\n-     *         restrictions\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/sampled\/Line.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,2 +138,0 @@\n-     * @throws SecurityException if a matching line is not available due to\n-     *         security restrictions\n@@ -174,2 +172,0 @@\n-     * @throws SecurityException if the matching lines are not available due to\n-     *         security restrictions\n@@ -185,2 +181,0 @@\n-     * @throws SecurityException if the matching lines are not available due to\n-     *         security restrictions\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/sampled\/Mixer.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,2 +96,0 @@\n-     * @throws SecurityException if the line cannot be opened due to security\n-     *         restrictions\n@@ -132,2 +130,0 @@\n-     * @throws SecurityException if the line cannot be opened due to security\n-     *         restrictions\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/sampled\/SourceDataLine.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,2 +90,0 @@\n-     * @throws SecurityException if the line cannot be opened due to security\n-     *         restrictions\n@@ -125,2 +123,0 @@\n-     * @throws SecurityException if the line cannot be opened due to security\n-     *         restrictions\n","filename":"src\/java.desktop\/share\/classes\/javax\/sound\/sampled\/TargetDataLine.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,8 +95,0 @@\n-     * <p>\n-     * If a <code>SecurityManager<\/code> is installed,\n-     * the calling thread must be granted the <code>AWTPermission<\/code>\n-     * \"replaceKeyboardFocusManager\" in order to replace\n-     * the current <code>KeyboardFocusManager<\/code>.\n-     * If this permission is not granted,\n-     * this method will throw a <code>SecurityException<\/code>,\n-     * and the current <code>KeyboardFocusManager<\/code> will be unchanged.\n@@ -108,2 +100,0 @@\n-     * @throws SecurityException if the calling thread does not have permission\n-     *         to replace the current <code>KeyboardFocusManager<\/code>\n@@ -111,3 +101,1 @@\n-    public static void setCurrentManager(FocusManager aFocusManager)\n-        throws SecurityException\n-    {\n+    public static void setCurrentManager(FocusManager aFocusManager) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/FocusManager.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -516,3 +516,0 @@\n-     * @throws SecurityException\n-     *     if the calling thread does not have permission to create modal dialogs\n-     *     with the given {@code modalityType}\n@@ -583,3 +580,0 @@\n-     * @throws SecurityException\n-     *     if the calling thread does not have permission to create modal dialogs\n-     *     with the given {@code modalityType}\n@@ -628,3 +622,0 @@\n-     * @throws SecurityException\n-     *     if the calling thread does not have permission to create modal dialogs\n-     *     with the given {@code modalityType}\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JDialog.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -365,4 +365,0 @@\n-     * @throws  SecurityException\n-     *        if <code>EXIT_ON_CLOSE<\/code> has been specified and the\n-     *        <code>SecurityManager<\/code> will\n-     *        not allow the caller to invoke <code>System.exit<\/code>\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JFrame.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -6156,2 +6156,0 @@\n-     * @throws SecurityException if this thread is not allowed to\n-     *                           initiate a print job request\n@@ -6182,2 +6180,0 @@\n-     * @throws SecurityException if this thread is not allowed to\n-     *                           initiate a print job request\n@@ -6214,2 +6210,0 @@\n-     * @throws SecurityException if this thread is not allowed to\n-     *                           initiate a print job request\n@@ -6256,2 +6250,0 @@\n-     * @throws SecurityException if this thread is not allowed to\n-     *                           initiate a print job request\n@@ -6351,3 +6343,0 @@\n-     * @throws  SecurityException if a security manager exists and its\n-     *          {@link java.lang.SecurityManager#checkPrintJobAccess}\n-     *          method disallows this thread from creating a print job request\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTable.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -449,3 +449,1 @@\n-    public static void setInstalledLookAndFeels(LookAndFeelInfo[] infos)\n-        throws SecurityException\n-    {\n+    public static void setInstalledLookAndFeels(LookAndFeelInfo[] infos) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/UIManager.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,4 +74,1 @@\n-     * The exit application default window close operation. Attempting\n-     * to set this on Windows that support this, such as\n-     * <code>JFrame<\/code>, may throw a <code>SecurityException<\/code> based\n-     * on the <code>SecurityManager<\/code>.\n+     * The exit application default window close operation.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/WindowConstants.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -678,2 +678,0 @@\n-     * @throws SecurityException if the caller does not have necessary\n-     *                           permissions\n@@ -704,2 +702,0 @@\n-     * @throws SecurityException if the caller does not have necessary\n-     *                           permissions\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/filechooser\/FileSystemView.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2127,2 +2127,0 @@\n-     * @throws SecurityException if this thread is not allowed to\n-     *                           initiate a print job request\n@@ -2157,2 +2155,0 @@\n-     * @throws SecurityException if this thread is not allowed to\n-     *                           initiate a print job request\n@@ -2269,2 +2265,0 @@\n-     * @throws SecurityException if this thread is not allowed to\n-     *                           initiate a print job request\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/JTextComponent.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -267,2 +267,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\"))}.\n@@ -271,1 +269,1 @@\n-    public FileHandler() throws IOException, SecurityException {\n+    public FileHandler() throws IOException {\n@@ -295,2 +293,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -299,1 +295,1 @@\n-    public FileHandler(String pattern) throws IOException, SecurityException {\n+    public FileHandler(String pattern) throws IOException {\n@@ -327,2 +323,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -331,2 +325,1 @@\n-    public FileHandler(String pattern, boolean append) throws IOException,\n-            SecurityException {\n+    public FileHandler(String pattern, boolean append) throws IOException {\n@@ -363,2 +356,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -368,2 +359,1 @@\n-    public FileHandler(String pattern, int limit, int count)\n-                                        throws IOException, SecurityException {\n+    public FileHandler(String pattern, int limit, int count) throws IOException {\n@@ -401,2 +391,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -408,1 +396,1 @@\n-                                        throws IOException, SecurityException {\n+                                        throws IOException {\n@@ -432,2 +420,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -817,3 +803,0 @@\n-     *\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -822,1 +805,1 @@\n-    public void close() throws SecurityException {\n+    public void close() {\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/FileHandler.java","additions":7,"deletions":24,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -174,3 +174,0 @@\n-     *\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -178,1 +175,1 @@\n-    public abstract void close() throws SecurityException;\n+    public abstract void close();\n@@ -188,2 +185,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -191,1 +186,1 @@\n-    public void setFormatter(Formatter newFormatter) throws SecurityException {\n+    public void setFormatter(Formatter newFormatter) {\n@@ -226,2 +221,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -232,1 +225,1 @@\n-            throws SecurityException, java.io.UnsupportedEncodingException {\n+            throws java.io.UnsupportedEncodingException {\n@@ -279,2 +272,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -282,1 +273,1 @@\n-    public void setFilter(Filter newFilter) throws SecurityException {\n+    public void setFilter(Filter newFilter) {\n@@ -317,2 +308,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -346,2 +335,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -356,3 +343,1 @@\n-     * ErrorManager.  Note that this method retrieves and uses the ErrorManager\n-     * without doing a security check.  It can therefore be used in\n-     * environments where the caller may be non-privileged.\n+     * ErrorManager.\n@@ -383,2 +368,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -386,1 +369,1 @@\n-    public void setLevel(Level newLevel) throws SecurityException {\n+    public void setLevel(Level newLevel) {\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/Handler.java","additions":7,"deletions":24,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1350,2 +1350,0 @@\n-     * @throws   SecurityException  if a security manager exists and if\n-     *              the caller does not have LoggingPermission(\"control\").\n@@ -1354,1 +1352,1 @@\n-    public void readConfiguration() throws IOException, SecurityException {\n+    public void readConfiguration() throws IOException {\n@@ -1415,3 +1413,0 @@\n-     *\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have LoggingPermission(\"control\").\n@@ -1420,1 +1415,1 @@\n-    public void reset() throws SecurityException {\n+    public void reset() {\n@@ -1556,2 +1551,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have LoggingPermission(\"control\").\n@@ -1562,1 +1555,1 @@\n-    public void readConfiguration(InputStream ins) throws IOException, SecurityException {\n+    public void readConfiguration(InputStream ins) throws IOException {\n@@ -1856,6 +1849,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *          the caller does not have LoggingPermission(\"control\"), or\n-     *          does not have the permissions required to set up the\n-     *          configuration (e.g. open file specified for FileHandlers\n-     *          etc...)\n-     *\n@@ -2059,5 +2046,0 @@\n-     * @throws  SecurityException if a security manager exists and if\n-     *          the caller does not have LoggingPermission(\"control\"), or\n-     *          does not have the permissions required to set up the\n-     *          configuration (e.g. open files specified for FileHandlers)\n-     *\n@@ -2442,5 +2424,1 @@\n-     * Check that the current context is trusted to modify the logging\n-     * configuration.  This requires LoggingPermission(\"control\").\n-     * <p>\n-     * If the check fails we throw a SecurityException, otherwise\n-     * we return normally.\n+     * Does nothing.\n@@ -2448,8 +2426,5 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have LoggingPermission(\"control\").\n-     * @deprecated This method is only useful in conjunction with\n-     *       {@linkplain SecurityManager the Security Manager}, which is\n-     *       deprecated and subject to removal in a future release.\n-     *       Consequently, this method is also deprecated and subject to\n-     *       removal. There is no replacement for the Security Manager or this\n-     *       method.\n+     * @deprecated This method originally checked that the current context was\n+     * trusted to modify the logging configuration. This method was only useful\n+     * in conjunction with {@linkplain SecurityManager the Security Manager},\n+     * which is no longer supported. There is no replacement for the Security\n+     * Manager or this method.\n@@ -2458,3 +2433,1 @@\n-    public void checkAccess() throws SecurityException {\n-        checkPermission();\n-    }\n+    public void checkAccess() { }\n@@ -2614,2 +2587,0 @@\n-     * @throws SecurityException if a security manager exists and if the\n-     * caller does not have LoggingPermission(\"control\").\n@@ -2645,2 +2616,0 @@\n-     * @throws SecurityException if a security manager exists and if the\n-     * caller does not have LoggingPermission(\"control\").\n@@ -2707,3 +2676,0 @@\n-         * @throws SecurityException if a security manager is present and the\n-         *         calling code doesn't have the\n-         *        {@link LoggingPermission LoggingPermission(\"demandLogger\", null)}.\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/LogManager.java","additions":11,"deletions":45,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -826,2 +826,1 @@\n-     * registered in the LogManager namespace.  There will be no\n-     * access checks on updates to the logger.\n+     * registered in the LogManager namespace.\n@@ -829,1 +828,1 @@\n-     * This factory method is primarily intended for use from applets.\n+     * This factory method was primarily intended for use from applets.\n@@ -831,3 +830,3 @@\n-     * by the creating class.  This removes the need for normal security\n-     * checks, which in turn allows untrusted applet code to update\n-     * the control state of the Logger.  For example an applet can do\n+     * by the creating class.  This removed the need for normal security\n+     * checks, which in turn allowed untrusted applet code to update\n+     * the control state of the Logger.  For example an applet could do\n@@ -839,3 +838,1 @@\n-     * from the root logger. Changing its parent via the\n-     * {@link #setParent(java.util.logging.Logger) setParent} method\n-     * will still require the security permission specified by that method.\n+     * from the root logger.\n@@ -851,2 +848,1 @@\n-     * registered in the LogManager namespace.  There will be no\n-     * access checks on updates to the logger.\n+     * registered in the LogManager namespace.\n@@ -854,1 +850,1 @@\n-     * This factory method is primarily intended for use from applets.\n+     * This factory method was primarily intended for use from applets.\n@@ -856,3 +852,3 @@\n-     * by the creating class.  This removes the need for normal security\n-     * checks, which in turn allows untrusted applet code to update\n-     * the control state of the Logger.  For example an applet can do\n+     * by the creating class.  This removed the need for normal security\n+     * checks, which in turn allowed untrusted applet code to update\n+     * the control state of the Logger.  For example an applet could do\n@@ -864,3 +860,1 @@\n-     * from the root logger.  Changing its parent via the\n-     * {@link #setParent(java.util.logging.Logger) setParent} method\n-     * will still require the security permission specified by that method.\n+     * from the root logger.\n@@ -937,3 +931,0 @@\n-     * @throws  SecurityException if a security manager exists,\n-     *          this logger is not anonymous, and the caller\n-     *          does not have LoggingPermission(\"control\").\n@@ -941,1 +932,1 @@\n-    public void setFilter(Filter newFilter) throws SecurityException {\n+    public void setFilter(Filter newFilter) {\n@@ -2000,3 +1991,0 @@\n-     * @throws  SecurityException if a security manager exists,\n-     *          this logger is not anonymous, and the caller\n-     *          does not have LoggingPermission(\"control\").\n@@ -2004,1 +1992,1 @@\n-    public void setLevel(Level newLevel) throws SecurityException {\n+    public void setLevel(Level newLevel) {\n@@ -2059,3 +2047,0 @@\n-     * @throws  SecurityException if a security manager exists,\n-     *          this logger is not anonymous, and the caller\n-     *          does not have LoggingPermission(\"control\").\n@@ -2063,1 +2048,1 @@\n-    public void addHandler(Handler handler) throws SecurityException {\n+    public void addHandler(Handler handler) {\n@@ -2075,3 +2060,0 @@\n-     * @throws  SecurityException if a security manager exists,\n-     *          this logger is not anonymous, and the caller\n-     *          does not have LoggingPermission(\"control\").\n@@ -2079,1 +2061,1 @@\n-    public void removeHandler(Handler handler) throws SecurityException {\n+    public void removeHandler(Handler handler) {\n@@ -2110,3 +2092,0 @@\n-     * @throws  SecurityException if a security manager exists,\n-     *          this logger is not anonymous, and the caller\n-     *          does not have LoggingPermission(\"control\").\n@@ -2321,3 +2300,0 @@\n-     * @throws SecurityException if a security manager exists,\n-     *         this logger is not anonymous, and the caller\n-     *         does not have LoggingPermission(\"control\").\n@@ -2380,2 +2356,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *          the caller does not have LoggingPermission(\"control\").\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/Logger.java","additions":17,"deletions":43,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,3 +113,0 @@\n-     * @throws SecurityException if a security manager exists and if\n-     * the caller does not have LoggingPermission(\"control\").\n-     *\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/LoggingMXBean.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,12 +32,6 @@\n- * The permission which the SecurityManager will check when code\n- * that is running with a SecurityManager calls one of the logging\n- * control methods (such as Logger.setLevel).\n- * <p>\n- * Currently there is only one named LoggingPermission.  This is \"control\"\n- * and it grants the ability to control the logging configuration, for\n- * example by adding or removing Handlers, by adding or removing Filters,\n- * or by changing logging levels.\n- * <p>\n- * Programmers do not normally create LoggingPermission objects directly.\n- * Instead they are created by the security policy code based on reading\n- * the security policy file.\n+ * This class is for logging permissions. Currently there is only one\n+ * LoggingPermission named \"control\".\n+ *\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/LoggingPermission.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,3 +256,0 @@\n-     *\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -261,1 +258,1 @@\n-    public void close() throws SecurityException {\n+    public void close() {\n@@ -272,2 +269,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -275,1 +270,1 @@\n-    public void setPushLevel(Level newLevel) throws SecurityException {\n+    public void setPushLevel(Level newLevel) {\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/MemoryHandler.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,3 +154,0 @@\n-     *\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -159,1 +156,1 @@\n-    public void close() throws SecurityException {\n+    public void close() {\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/SocketHandler.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,2 +122,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -125,1 +123,1 @@\n-    protected void setOutputStream(OutputStream out) throws SecurityException {\n+    protected void setOutputStream(OutputStream out) {\n@@ -168,2 +166,0 @@\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have {@code LoggingPermission(\"control\")}.\n@@ -175,1 +171,1 @@\n-                        throws SecurityException, java.io.UnsupportedEncodingException {\n+                        throws java.io.UnsupportedEncodingException {\n@@ -343,3 +339,0 @@\n-     *\n-     * @throws  SecurityException  if a security manager exists and if\n-     *             the caller does not have LoggingPermission(\"control\").\n@@ -348,1 +341,1 @@\n-    public void close() throws SecurityException {\n+    public void close() {\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/StreamHandler.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -211,1 +211,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -271,1 +271,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -335,1 +335,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -372,1 +372,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -400,1 +400,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -402,1 +402,0 @@\n-     * if any, does not have permission to perform this operation.\n@@ -429,1 +428,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -459,1 +458,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -483,1 +482,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -499,1 +498,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -535,1 +534,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -571,1 +570,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -614,1 +613,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -655,1 +654,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -700,1 +699,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -727,1 +726,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -743,1 +742,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -767,1 +766,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -796,1 +795,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -839,1 +838,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -869,1 +868,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -910,1 +909,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n@@ -974,2 +973,2 @@\n-     * @throws SecurityException if, for one of the MBeans, the\n-     * client does not have permission to add a listener.\n+     * @throws SecurityException if, for one of the MBeans, the client is not\n+     * authorized to add a listener.\n@@ -1013,1 +1012,1 @@\n-     * @throws SecurityException if the client does not have permission\n+     * @throws SecurityException if the client is not authorized\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnection.java","additions":25,"deletions":26,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import jdk.internal.access.SharedSecrets;\n@@ -55,1 +54,0 @@\n-import com.sun.jmx.remote.security.JMXSubjectDomainCombiner;\n@@ -113,13 +111,0 @@\n-\n-        if (subject == null) {\n-            this.acc = null;\n-        } else {\n-            \/\/ An authenticated Subject was provided.\n-            \/\/ Subject Delegation has been removed.\n-            if (SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-                \/\/ SM is allowed.  Will use ACC created with Subject:\n-                this.acc = JMXSubjectDomainCombiner.getContext(subject);\n-            } else {\n-                this.acc = null;\n-            }\n-        }\n@@ -1301,7 +1286,2 @@\n-            if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-                \/\/ Modern case\n-                if (subject == null) {\n-                    return action.run();\n-                } else {\n-                    return Subject.doAs(subject, action);\n-                }\n+            if (subject == null) {\n+                return action.run();\n@@ -1309,6 +1289,1 @@\n-                \/\/ SM permitted\n-                if (acc == null) {\n-                    return action.run(); \/\/ No Subject or ACC\n-                } else {\n-                    return AccessController.doPrivileged(action, acc);\n-                }\n+                return Subject.doAs(subject, action);\n@@ -1431,11 +1406,8 @@\n-            if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-                \/\/ Modern case\n-                if (subject == null) {\n-                    try {\n-                        return op.run();\n-                    } catch (Exception e) {\n-                        if (e instanceof RuntimeException) {\n-                            throw (RuntimeException) e;\n-                        } else {\n-                            throw new PrivilegedActionException(e);\n-                        }\n+            if (subject == null) {\n+                try {\n+                    return op.run();\n+                } catch (Exception e) {\n+                    if (e instanceof RuntimeException) {\n+                        throw (RuntimeException) e;\n+                    } else {\n+                        throw new PrivilegedActionException(e);\n@@ -1443,2 +1415,0 @@\n-                } else {\n-                    return Subject.doAs(subject, op);\n@@ -1447,14 +1417,1 @@\n-                \/\/ SM permitted\n-                if (acc == null) {\n-                    try {\n-                        return op.run();\n-                    } catch (Exception e) {\n-                        if (e instanceof RuntimeException) {\n-                            throw (RuntimeException) e;\n-                        } else {\n-                            throw new PrivilegedActionException(e);\n-                        }\n-                    }\n-                } else {\n-                    return AccessController.doPrivileged(op, acc);\n-                }\n+                return Subject.doAs(subject, op);\n@@ -1626,7 +1583,2 @@\n-                if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-                    \/\/ Modern case\n-                    if (subject != null) {\n-                        return Subject.doAs(subject, (PrivilegedExceptionAction<T>) () -> wrappedClass.cast(mo.get()));\n-                    } else {\n-                        return wrappedClass.cast(mo.get());\n-                    }\n+                if (subject != null) {\n+                    return Subject.doAs(subject, (PrivilegedExceptionAction<T>) () -> wrappedClass.cast(mo.get()));\n@@ -1634,8 +1586,1 @@\n-                    \/\/ SM permitted\n-                    if (acc != null) {\n-                        return AccessController.doPrivileged(\n-                                (PrivilegedExceptionAction<T>) () ->\n-                                        wrappedClass.cast(mo.get()), acc);\n-                    } else {\n-                        return wrappedClass.cast(mo.get());\n-                    }\n+                    return wrappedClass.cast(mo.get());\n@@ -1758,3 +1703,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc;\n-\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnectionImpl.java","additions":15,"deletions":73,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -33,1 +31,0 @@\n-import java.security.PrivilegedAction;\n@@ -45,1 +42,0 @@\n-import jdk.internal.access.SharedSecrets;\n@@ -304,1 +300,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -306,11 +301,1 @@\n-        Subject s = null;\n-        if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-            s = Subject.current();\n-        } else {\n-            final AccessControlContext acc = AccessController.getContext();\n-            s = AccessController.doPrivileged(new PrivilegedAction<>() {\n-                        public Subject run() {\n-                            return Subject.getSubject(acc);\n-                        }\n-                });\n-        }\n+        final Subject s = Subject.current();\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/security\/MBeanServerFileAccessController.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,4 +107,0 @@\n-     *\n-     * @throws  java.lang.SecurityException if a security manager\n-     *          exists and the caller does not have\n-     *          ManagementPermission(\"control\").\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ClassLoadingMXBean.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -469,4 +469,0 @@\n-     * @throws SecurityException if there is a security manager\n-     * and the caller does not have the permission required by\n-     * {@link javax.management.MBeanServerFactory#createMBeanServer}.\n-     *\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ManagementFactory.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,1 @@\n- * The permission which the SecurityManager will check when code\n- * that is running with a SecurityManager calls methods defined\n- * in the management interface for the Java platform.\n- * <P>\n- * The following table\n- * provides a summary description of what the permission allows,\n- * and discusses the risks of granting code the permission.\n+ * This class is for management permissions.\n@@ -37,44 +31,3 @@\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">Table shows permission target name, what the permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- * <tbody style=\"text=align:left\">\n- *\n- * <tr>\n- *   <th scope=\"row\">control<\/th>\n- *   <td>Ability to control the runtime characteristics of the Java virtual\n- *       machine, for example, enabling and disabling the verbose output for\n- *       the class loading or memory system, setting the threshold of a memory\n- *       pool, and enabling and disabling the thread contention monitoring\n- *       support. Some actions controlled by this permission can disclose\n- *       information about the running application, like the -verbose:class\n- *       flag.\n- *   <\/td>\n- *   <td>This allows an attacker to control the runtime characteristics\n- *       of the Java virtual machine and cause the system to misbehave. An\n- *       attacker can also access some information related to the running\n- *       application.\n- *   <\/td>\n- * <\/tr>\n- * <tr>\n- *   <th scope=\"row\">monitor<\/th>\n- *   <td>Ability to retrieve runtime information about\n- *       the Java virtual machine such as thread\n- *       stack trace, a list of all loaded class names, and input arguments\n- *       to the Java virtual machine.<\/td>\n- *   <td>This allows malicious code to monitor runtime information and\n- *       uncover vulnerabilities.<\/td>\n- * <\/tr>\n- *\n- * <\/tbody>\n- * <\/table>\n- *\n- * <p>\n- * Programmers do not normally create ManagementPermission objects directly.\n- * Instead they are created by the security policy code based on reading\n- * the security policy file.\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ManagementPermission.java","additions":5,"deletions":52,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -291,4 +291,0 @@\n-     *\n-     * @throws java.lang.SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"control\").\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/MemoryMXBean.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -432,4 +432,0 @@\n-     *\n-     * @throws java.lang.SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"control\").\n@@ -491,4 +487,0 @@\n-     * @throws java.lang.SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"control\").\n-     *\n@@ -570,4 +562,0 @@\n-     * @throws java.lang.SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"control\").\n-     *\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/MemoryPoolMXBean.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,5 +70,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     <code>checkPropertiesAccess<\/code> method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -85,5 +80,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     <code>checkPropertiesAccess<\/code> method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -100,5 +90,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     <code>checkPropertiesAccess<\/code> method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/OperatingSystemMXBean.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,3 +112,0 @@\n-     * @throws SecurityException if a security manager exists and if\n-     * the caller does not have LoggingPermission(\"control\").\n-     *\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/PlatformLoggingMXBean.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,5 +102,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     {@code checkPropertiesAccess} method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -118,5 +113,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     {@code checkPropertiesAccess} method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -134,5 +124,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     {@code checkPropertiesAccess} method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -150,5 +135,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     {@code checkPropertiesAccess} method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -166,5 +146,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     {@code checkPropertiesAccess} method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -182,5 +157,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     {@code checkPropertiesAccess} method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -213,5 +183,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     {@code checkPropertiesAccess} method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -233,5 +198,0 @@\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     {@code checkPropertiesAccess} method doesn't allow access\n-     *     to this system property.\n-     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n@@ -270,4 +230,0 @@\n-     *\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and the caller does not have\n-     *     ManagementPermission(\"monitor\").\n@@ -299,4 +255,0 @@\n-     *\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and the caller does not have\n-     *     ManagementPermission(\"monitor\").\n@@ -355,5 +307,0 @@\n-     *\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and its\n-     *     {@code checkPropertiesAccess} method doesn't allow access\n-     *     to the system properties.\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/RuntimeMXBean.java","additions":1,"deletions":54,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,4 +172,0 @@\n-     *\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n@@ -212,3 +208,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n@@ -250,3 +243,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n@@ -297,4 +287,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n-     *\n@@ -350,4 +336,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n-     *\n@@ -390,4 +372,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"control\").\n-     *\n@@ -585,4 +563,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"control\").\n-     *\n@@ -621,4 +595,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n-     *\n@@ -633,4 +603,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"control\").\n-     *\n@@ -658,3 +624,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n@@ -720,3 +683,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n@@ -810,3 +770,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n@@ -852,3 +809,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n@@ -902,3 +856,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"monitor\").\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ThreadMXBean.java","additions":1,"deletions":50,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,0 +161,4 @@\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n+ *\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanPermission.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,185 +64,3 @@\n- * <p>An object obtained from the {@link\n- * MBeanServerFactory#createMBeanServer(String) createMBeanServer} or\n- * {@link MBeanServerFactory#newMBeanServer(String) newMBeanServer}\n- * methods of the {@link MBeanServerFactory} class applies security\n- * checks to its methods, as follows.<\/p>\n- *\n- * <p>First, if there is no security manager ({@link\n- * System#getSecurityManager()} is null), then an implementation of\n- * this interface is free not to make any checks.<\/p>\n- *\n- * <p>Assuming that there is a security manager, or that the\n- * implementation chooses to make checks anyway, the checks are made\n- * as detailed below.  In what follows, and unless otherwise specified,\n- * {@code className} is the\n- * string returned by {@link MBeanInfo#getClassName()} for the target\n- * MBean.<\/p>\n- *\n- * <p>If a security check fails, the method throws {@link\n- * SecurityException}.<\/p>\n- *\n- * <p>For methods that can throw {@link InstanceNotFoundException},\n- * this exception is thrown for a non-existent MBean, regardless of\n- * permissions.  This is because a non-existent MBean has no\n- * <code>className<\/code>.<\/p>\n- *\n- * <ul>\n- *\n- * <li><p>For the {@link #invoke invoke} method, the caller's\n- * permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, operationName, name, \"invoke\")}.<\/p>\n- *\n- * <li><p>For the {@link #getAttribute getAttribute} method, the\n- * caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, attribute, name, \"getAttribute\")}.<\/p>\n- *\n- * <li><p>For the {@link #getAttributes getAttributes} method, the\n- * caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, name, \"getAttribute\")}.\n- * Additionally, for each attribute <em>a<\/em> in the {@link\n- * AttributeList}, if the caller's permissions do not imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, <em>a<\/em>, name, \"getAttribute\")}, the\n- * MBean server will behave as if that attribute had not been in the\n- * supplied list.<\/p>\n- *\n- * <li><p>For the {@link #setAttribute setAttribute} method, the\n- * caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, attrName, name, \"setAttribute\")}, where\n- * <code>attrName<\/code> is {@link Attribute#getName()\n- * attribute.getName()}.<\/p>\n- *\n- * <li><p>For the {@link #setAttributes setAttributes} method, the\n- * caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, name, \"setAttribute\")}.\n- * Additionally, for each attribute <em>a<\/em> in the {@link\n- * AttributeList}, if the caller's permissions do not imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, <em>a<\/em>, name, \"setAttribute\")}, the\n- * MBean server will behave as if that attribute had not been in the\n- * supplied list.<\/p>\n- *\n- * <li><p>For the <code>addNotificationListener<\/code> methods,\n- * the caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, name,\n- * \"addNotificationListener\")}.<\/p>\n- *\n- * <li><p>For the <code>removeNotificationListener<\/code> methods,\n- * the caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, name,\n- * \"removeNotificationListener\")}.<\/p>\n- *\n- * <li><p>For the {@link #getMBeanInfo getMBeanInfo} method, the\n- * caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, name, \"getMBeanInfo\")}.<\/p>\n- *\n- * <li><p>For the {@link #getObjectInstance getObjectInstance} method,\n- * the caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, name, \"getObjectInstance\")}.<\/p>\n- *\n- * <li><p>For the {@link #isInstanceOf isInstanceOf} method, the\n- * caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, name, \"isInstanceOf\")}.<\/p>\n- *\n- * <li><p>For the {@link #queryMBeans queryMBeans} method, the\n- * caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(null, null, null, \"queryMBeans\")}.\n- * Additionally, for each MBean <em>n<\/em> that matches <code>name<\/code>,\n- * if the caller's permissions do not imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, <em>n<\/em>, \"queryMBeans\")}, the\n- * MBean server will behave as if that MBean did not exist.<\/p>\n- *\n- * <p>Certain query elements perform operations on the MBean server.\n- * If the caller does not have the required permissions for a given\n- * MBean, that MBean will not be included in the result of the query.\n- * The standard query elements that are affected are {@link\n- * Query#attr(String)}, {@link Query#attr(String,String)}, and {@link\n- * Query#classattr()}.<\/p>\n- *\n- * <li><p>For the {@link #queryNames queryNames} method, the checks\n- * are the same as for <code>queryMBeans<\/code> except that\n- * <code>\"queryNames\"<\/code> is used instead of\n- * <code>\"queryMBeans\"<\/code> in the <code>MBeanPermission<\/code>\n- * objects.  Note that a <code>\"queryMBeans\"<\/code> permission implies\n- * the corresponding <code>\"queryNames\"<\/code> permission.<\/p>\n- *\n- * <li><p>For the {@link #getDomains getDomains} method, the caller's\n- * permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(null, null, null, \"getDomains\")}.  Additionally,\n- * for each domain <var>d<\/var> in the returned array, if the caller's\n- * permissions do not imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(null, null, new ObjectName(\"<var>d<\/var>:x=x\"),\n- * \"getDomains\")}, the domain is eliminated from the array.  Here,\n- * <code>x=x<\/code> is any <var>key=value<\/var> pair, needed to\n- * satisfy ObjectName's constructor but not otherwise relevant.<\/p>\n- *\n- * <li><p>For the {@link #getClassLoader getClassLoader} method, the\n- * caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, loaderName,\n- * \"getClassLoader\")}.<\/p>\n- *\n- * <li><p>For the {@link #getClassLoaderFor getClassLoaderFor} method,\n- * the caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, mbeanName,\n- * \"getClassLoaderFor\")}.<\/p>\n- *\n- * <li><p>For the {@link #getClassLoaderRepository\n- * getClassLoaderRepository} method, the caller's permissions must\n- * imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(null, null, null, \"getClassLoaderRepository\")}.<\/p>\n- *\n- * <li><p>For the deprecated <code>deserialize<\/code> methods, the\n- * required permissions are the same as for the methods that replace\n- * them.<\/p>\n- *\n- * <li><p>For the <code>instantiate<\/code> methods, the caller's\n- * permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, null, \"instantiate\")},\n- * where {@code className} is the name of the class which is to\n- * be instantiated.<\/p>\n- *\n- * <li><p>For the {@link #registerMBean registerMBean} method, the\n- * caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, name, \"registerMBean\")}.\n- *\n- * <p>If the <code>MBeanPermission<\/code> check succeeds, the MBean's\n- * class is validated by checking that its {@link\n- * java.security.ProtectionDomain ProtectionDomain} implies {@link\n- * MBeanTrustPermission#MBeanTrustPermission(String)\n- * MBeanTrustPermission(\"register\")}.<\/p>\n- *\n- * <p>Finally, if the <code>name<\/code> argument is null, another\n- * <code>MBeanPermission<\/code> check is made using the\n- * <code>ObjectName<\/code> returned by {@link\n- * MBeanRegistration#preRegister MBeanRegistration.preRegister}.<\/p>\n- *\n- * <li><p>For the <code>createMBean<\/code> methods, the caller's\n- * permissions must imply the permissions needed by the equivalent\n- * <code>instantiate<\/code> followed by\n- * <code>registerMBean<\/code>.<\/p>\n- *\n- * <li><p>For the {@link #unregisterMBean unregisterMBean} method,\n- * the caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(className, null, name, \"unregisterMBean\")}.<\/p>\n- *\n- * <\/ul>\n+ * <p>Methods of {@code MBeanServer} and its subclasses may throw\n+ * {@link SecurityException} if the implementation doesn't authorize\n+ * access to the underlying resource.\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanServer.java","additions":3,"deletions":185,"binary":false,"changes":188,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -147,3 +147,0 @@\n-     * @exception SecurityException if there is a SecurityManager and\n-     * the caller's permissions do not include or imply <code>{@link\n-     * MBeanServerPermission}(\"releaseMBeanServer\")<\/code>.\n@@ -174,4 +171,0 @@\n-     * @exception SecurityException if there is a SecurityManager and the\n-     * caller's permissions do not include or imply <code>{@link\n-     * MBeanServerPermission}(\"createMBeanServer\")<\/code>.\n-     *\n@@ -211,4 +204,0 @@\n-     * @exception SecurityException if there is a SecurityManager and\n-     * the caller's permissions do not include or imply <code>{@link\n-     * MBeanServerPermission}(\"createMBeanServer\")<\/code>.\n-     *\n@@ -255,4 +244,0 @@\n-     * @exception SecurityException if there is a SecurityManager and the\n-     * caller's permissions do not include or imply <code>{@link\n-     * MBeanServerPermission}(\"newMBeanServer\")<\/code>.\n-     *\n@@ -294,4 +279,0 @@\n-     * @exception SecurityException if there is a SecurityManager and the\n-     * caller's permissions do not include or imply <code>{@link\n-     * MBeanServerPermission}(\"newMBeanServer\")<\/code>.\n-     *\n@@ -353,4 +334,0 @@\n-     *\n-     * @exception SecurityException if there is a SecurityManager and the\n-     * caller's permissions do not include or imply <code>{@link\n-     * MBeanServerPermission}(\"findMBeanServer\")<\/code>.\n@@ -385,3 +362,0 @@\n-     * @exception SecurityException if there is a SecurityManager and\n-     * the caller's permissions do not include or imply <code>{@link\n-     * MBeanPermission}(\"getClassLoaderRepository\")<\/code>.\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanServerFactory.java","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,0 +67,4 @@\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n+ *\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanServerPermission.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,4 +43,4 @@\n- * <p>\n- * If a signer, or codesource is granted this permission, then it is\n- * considered a trusted source for MBeans. Only MBeans from trusted\n- * sources may be registered in the MBeanServer.\n+ *\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanTrustPermission.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -64,1 +64,0 @@\n-import jdk.internal.access.SharedSecrets;\n@@ -719,1 +718,1 @@\n-            \/\/ Cache the Subject or AccessControlContext of the Monitor.start() caller.\n+            \/\/ Cache the Subject of the Monitor.start() caller.\n@@ -722,5 +721,1 @@\n-            if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-                subject = Subject.current();\n-            } else {\n-                acc = AccessController.getContext();\n-            }\n+            subject = Subject.current();\n@@ -1524,1 +1519,0 @@\n-            final AccessControlContext ac;\n@@ -1528,1 +1522,0 @@\n-                ac = Monitor.this.acc;\n@@ -1544,7 +1537,2 @@\n-            if (!SharedSecrets.getJavaLangAccess().allowSecurityManager()) {\n-                \/\/ No SecurityManager permitted:\n-                if (s == null) {\n-                    action.run();\n-                } else {\n-                    Subject.doAs(s, action);\n-                }\n+            if (s == null) {\n+                action.run();\n@@ -1552,5 +1540,1 @@\n-                if (ac == null) {\n-                    throw new SecurityException(\"AccessControlContext cannot be null\");\n-                }\n-                \/\/ ACC means SM is permitted.\n-                AccessController.doPrivileged(action, ac);\n+                Subject.doAs(s, action);\n","filename":"src\/java.management\/share\/classes\/javax\/management\/monitor\/Monitor.java","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,4 @@\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n+ *\n","filename":"src\/java.management\/share\/classes\/javax\/management\/remote\/SubjectDelegationPermission.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,4 +63,0 @@\n-     *\n-     * @throws SecurityException if a security manager is present and its\n-     *                           {@code checkPermission} method doesn't allow\n-     *                           the {@code RuntimePermission(\"ldapDnsProvider\")}.\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/ldap\/spi\/LdapDnsProvider.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,4 +92,0 @@\n-     *<p>\n-     * The builder can only be installed if the executing thread is allowed\n-     * (by the security manager's checkSetFactory() method) to do so.\n-     * Once installed, the builder cannot be replaced.\n@@ -99,2 +95,0 @@\n-     * @throws SecurityException builder cannot be installed\n-     *         for security reasons.\n@@ -107,1 +101,0 @@\n-     * @see java.lang.SecurityManager#checkSetFactory\n@@ -564,4 +557,0 @@\n-     *<p>\n-     * The builder can only be installed if the executing thread is allowed by\n-     * the security manager to do so. Once installed, the builder cannot\n-     * be replaced.\n@@ -570,2 +559,0 @@\n-     * @throws SecurityException builder cannot be installed for security\n-     *         reasons.\n@@ -576,1 +563,0 @@\n-     * @see java.lang.SecurityManager#checkSetFactory\n","filename":"src\/java.naming\/share\/classes\/javax\/naming\/spi\/NamingManager.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -122,10 +122,0 @@\n- * <p> <a id=\"securitychecks\"><b>Security checks<\/b><\/a>\n- *\n- * <p> If a security manager is present then security checks are performed by\n- * the HTTP Client's sending methods. An appropriate {@link URLPermission} is\n- * required to access the destination server, and proxy server if one has\n- * been configured. The form of the {@code URLPermission} required to access a\n- * proxy has a {@code method} parameter of {@code \"CONNECT\"} (for all kinds of\n- * proxying) and a {@code URL} string of the form {@code \"socket:\/\/host:port\"}\n- * where host and port specify the proxy's address.\n- *\n@@ -178,13 +168,0 @@\n- *\n- * <p>\n- * If an explicit {@linkplain HttpClient.Builder#executor(Executor)\n- * executor} has not been set for an {@code HttpClient}, and a security manager\n- * has been installed, then the default executor will execute asynchronous and\n- * dependent tasks in a context that is granted no permissions. Custom\n- * {@linkplain HttpRequest.BodyPublisher request body publishers}, {@linkplain\n- * HttpResponse.BodyHandler response body handlers}, {@linkplain\n- * BodySubscriber response body subscribers}, and {@linkplain\n- * WebSocket.Listener WebSocket Listeners}, if executing operations that require\n- * privileges, should do so within an appropriate {@linkplain\n- * AccessController#doPrivileged(PrivilegedAction) privileged context}.\n- *\n@@ -328,3 +305,1 @@\n-         * thread factory. If a security manager has been installed, the thread\n-         * factory creates threads that run with an access control context that\n-         * has no permissions.\n+         * thread factory.\n@@ -465,5 +440,0 @@\n-         * @implSpec If the {@link #localAddress(InetAddress) local address} is a non-null\n-         * address and a security manager is installed, then\n-         * this method calls {@link SecurityManager#checkListen checkListen} to check that\n-         * the caller has necessary permission to bind to that local address.\n-         *\n@@ -476,3 +446,0 @@\n-         * @throws SecurityException If a security manager has been installed and the\n-         *         security manager's {@link SecurityManager#checkListen checkListen}\n-         *         method disallows binding to the given address.\n@@ -674,5 +641,0 @@\n-     * @throws SecurityException If a security manager has been installed\n-     *          and it denies {@link java.net.URLPermission access} to the\n-     *          URL in the given request, or proxy if one is configured.\n-     *          See <a href=\"#securitychecks\">security checks<\/a> for further\n-     *          information.\n@@ -718,5 +680,0 @@\n-     * <li>{@link SecurityException} - If a security manager has been installed\n-     *          and it denies {@link java.net.URLPermission access} to the\n-     *          URL in the given request, or proxy if one is configured.\n-     *          See <a href=\"#securitychecks\">security checks<\/a> for further\n-     *          information.<\/li>\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpClient.java","additions":1,"deletions":44,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -714,4 +714,0 @@\n-         * <p> Security manager permission checks are performed in this factory\n-         * method, when the {@code BodyPublisher} is created. Care must be taken\n-         * that the {@code BodyPublisher} is not shared with untrusted code.\n-         *\n@@ -721,7 +717,0 @@\n-         * @throws SecurityException if\n-         *         {@linkplain Files#newInputStream(Path, OpenOption...)\n-         *         opening the file for reading} is denied:\n-         *         in the case of the system-default file system provider,\n-         *         and a security manager is installed,\n-         *         {@link SecurityManager#checkRead(String) checkRead}\n-         *         is invoked to check read access to the given file\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -528,9 +528,0 @@\n-         * <p> In the case of the default file system provider, security manager\n-         * permission checks are performed in this factory method, when the\n-         * {@code BodyHandler} is created. Otherwise,\n-         * {@linkplain FileChannel#open(Path, OpenOption...) permission checks}\n-         * may be performed asynchronously against the caller's context\n-         * at file access time.\n-         * Care must be taken that the {@code BodyHandler} is not shared with\n-         * untrusted code.\n-         *\n@@ -542,4 +533,0 @@\n-         * @throws SecurityException in the case of the default file system\n-         *         provider, and a security manager is installed,\n-         *         {@link SecurityManager#checkWrite(String) checkWrite}\n-         *         is invoked to check write access to the given file\n@@ -563,9 +550,0 @@\n-         * <p> In the case of the default file system provider, security manager\n-         * permission checks are performed in this factory method, when the\n-         * {@code BodyHandler} is created. Otherwise,\n-         * {@linkplain FileChannel#open(Path, OpenOption...) permission checks}\n-         * may be performed asynchronously against the caller's context\n-         * at file access time.\n-         * Care must be taken that the {@code BodyHandler} is not shared with\n-         * untrusted code.\n-         *\n@@ -574,4 +552,0 @@\n-         * @throws SecurityException in the case of the default file system\n-         *         provider, and a security manager is installed,\n-         *         {@link SecurityManager#checkWrite(String) checkWrite}\n-         *         is invoked to check write access to the given file\n@@ -600,4 +574,0 @@\n-         * <p> Security manager permission checks are performed in this factory\n-         * method, when the {@code BodyHandler} is created. Care must be taken\n-         * that the {@code BodyHandler} is not shared with untrusted code.\n-         *\n@@ -611,9 +581,0 @@\n-         * @throws SecurityException in the case of the default file system\n-         *         provider and a security manager has been installed,\n-         *         and it denies\n-         *         {@linkplain SecurityManager#checkRead(String) read access}\n-         *         to the directory, or it denies\n-         *         {@linkplain SecurityManager#checkWrite(String) write access}\n-         *         to the directory, or it denies\n-         *         {@linkplain SecurityManager#checkWrite(String) write access}\n-         *         to the files within the directory.\n@@ -1140,9 +1101,0 @@\n-         * <p> In the case of the default file system provider, security manager\n-         * permission checks are performed in this factory method, when the\n-         * {@code BodySubscriber} is created. Otherwise,\n-         * {@linkplain FileChannel#open(Path, OpenOption...) permission checks}\n-         * may be performed asynchronously against the caller's context\n-         * at file access time.\n-         * Care must be taken that the {@code BodySubscriber} is not shared with\n-         * untrusted code.\n-         *\n@@ -1154,4 +1106,0 @@\n-         * @throws SecurityException in the case of the default file system\n-         *         provider, and a security manager is installed,\n-         *         {@link SecurityManager#checkWrite(String) checkWrite}\n-         *         is invoked to check write access to the given file\n@@ -1175,9 +1123,0 @@\n-         * <p> In the case of the default file system provider, security manager\n-         * permission checks are performed in this factory method, when the\n-         * {@code BodySubscriber} is created. Otherwise,\n-         * {@linkplain FileChannel#open(Path, OpenOption...) permission checks}\n-         * may be performed asynchronously against the caller's context\n-         * at file access time.\n-         * Care must be taken that the {@code BodySubscriber} is not shared with\n-         * untrusted code.\n-         *\n@@ -1186,4 +1125,0 @@\n-         * @throws SecurityException in the case of the default file system\n-         *         provider, and a security manager is installed,\n-         *         {@link SecurityManager#checkWrite(String) checkWrite}\n-         *         is invoked to check write access to the given file\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,6 +197,0 @@\n-         * <li> {@link SecurityException} -\n-         *          if a security manager has been installed and it denies\n-         *          {@link java.net.URLPermission access} to {@code uri}.\n-         *          <a href=\"HttpClient.html#securitychecks\">Security checks<\/a>\n-         *          contains more information relating to the security context\n-         *          in which the listener is invoked.\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/WebSocket.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -365,3 +365,0 @@\n-     * @throws SecurityException if a security manager is present and\n-     *         it denies {@code RuntimePermission(\"preferences\")}.\n-     * @see    RuntimePermission\n@@ -409,3 +406,0 @@\n-     * @throws SecurityException if a security manager is present and\n-     *         it denies {@code RuntimePermission(\"preferences\")}.\n-     * @see    RuntimePermission\n@@ -447,3 +441,0 @@\n-     * @throws SecurityException If a security manager is present and\n-     *         it denies {@code RuntimePermission(\"preferences\")}.\n-     * @see    RuntimePermission\n@@ -464,3 +455,0 @@\n-     * @throws SecurityException If a security manager is present and\n-     *         it denies {@code RuntimePermission(\"preferences\")}.\n-     * @see    RuntimePermission\n@@ -1283,3 +1271,0 @@\n-     * @throws SecurityException If a security manager is present and\n-     *         it denies {@code RuntimePermission(\"preferences\")}.\n-     * @see    RuntimePermission\n","filename":"src\/java.prefs\/share\/classes\/java\/util\/prefs\/Preferences.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.*;\n-\n@@ -31,21 +29,3 @@\n- * {@code RMISecurityManager} implements a policy identical to the policy\n- * implemented by {@link SecurityManager}. RMI applications\n- * should use the {@code SecurityManager} class or another appropriate\n- * {@code SecurityManager} implementation instead of this class. RMI's class\n- * loader will download classes from remote locations only if a security\n- * manager has been set.\n- *\n- * @implNote\n- * <p>Applets typically run in a container that already has a security\n- * manager, so there is generally no need for applets to set a security\n- * manager. If you have a standalone application, you might need to set a\n- * {@code SecurityManager} in order to enable class downloading. This can be\n- * done by adding the following to your code. (It needs to be executed before\n- * RMI can download code from remote hosts, so it most likely needs to appear\n- * in the {@code main} method of your application.)\n- *\n- * <pre>{@code\n- *    if (System.getSecurityManager() == null) {\n- *        System.setSecurityManager(new SecurityManager());\n- *    }\n- * }<\/pre>\n+ * RMISecurityManager was originally specified to allow an application implement\n+ * a security policy identical to the policy implemented by {@link SecurityManager}.\n+ * This feature no longer exists.\n@@ -56,5 +36,1 @@\n- * @deprecated This class is only useful in conjunction with\n- *       {@linkplain SecurityManager the Security Manager}, which is deprecated\n- *       and subject to removal in a future release. Consequently, this class\n- *       is also deprecated and subject to removal. There is no replacement for\n- *       the Security Manager or this class.\n+ * @deprecated There is no replacement for the Security Manager.\n@@ -68,0 +44,1 @@\n+     *\n","filename":"src\/java.rmi\/share\/classes\/java\/rmi\/RMISecurityManager.java","additions":6,"deletions":29,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,3 +42,1 @@\n- * and return values of remote method calls, and they also may be\n- * invoked directly by applications in order to mimic RMI's dynamic\n- * class loading behavior.\n+ * and return values of remote method calls.\n@@ -327,8 +325,0 @@\n-     * <p>If there is a security manager, its <code>checkPermission<\/code>\n-     * method will be invoked with a\n-     * <code>RuntimePermission(\"getClassLoader\")<\/code> permission;\n-     * this could result in a <code>SecurityException<\/code>.\n-     * The provider implementation of this method may also perform further\n-     * security checks to verify that the calling context has permission to\n-     * connect to all of the URLs in the codebase URL path.\n-     *\n@@ -346,5 +336,0 @@\n-     * @throws  SecurityException if there is a security manager and the\n-     * invocation of its <code>checkPermission<\/code> method fails, or\n-     * if the caller does not have permission to connect to all of the\n-     * URLs in the codebase URL path\n-     *\n@@ -354,1 +339,1 @@\n-        throws MalformedURLException, SecurityException\n+        throws MalformedURLException\n@@ -406,5 +391,0 @@\n-     * <p>If there is a security manager, its\n-     * <code>checkPermission<\/code> method will be invoked with a\n-     * <code>RuntimePermission(\"setFactory\")<\/code> permission; this\n-     * could result in a <code>SecurityException<\/code>.\n-     *\n@@ -440,15 +420,1 @@\n-     * by invoking the <code>getURLs<\/code> methods of the loader.  If\n-     * the <code>URLClassLoader<\/code> was created by this provider to\n-     * service an invocation of its <code>loadClass<\/code> or\n-     * <code>loadProxyClass<\/code> methods, then no permissions are\n-     * required to get the associated codebase string.  If it is an\n-     * arbitrary other <code>URLClassLoader<\/code> instance, then if\n-     * there is a security manager, its <code>checkPermission<\/code>\n-     * method will be invoked once for each URL returned by the\n-     * <code>getURLs<\/code> method, with the permission returned by\n-     * invoking <code>openConnection().getPermission()<\/code> on each\n-     * URL; if any of those invocations throws a\n-     * <code>SecurityException<\/code> or an <code>IOException<\/code>,\n-     * then the value of the <code>java.rmi.server.codebase<\/code>\n-     * property (or possibly an earlier cached value) is returned, or\n-     * <code>null<\/code> is returned if that property is not set.\n+     * by invoking the <code>getURLs<\/code> methods of the loader.\n@@ -467,25 +433,5 @@\n-     * each invocation has an associated <i>codebase loader<\/i> that\n-     * is identified using the <code>codebase<\/code> argument in\n-     * conjunction with the current thread's context class loader (see\n-     * {@link Thread#getContextClassLoader()}).  When there is a\n-     * security manager, this provider maintains an internal table of\n-     * class loader instances (which are at least instances of {@link\n-     * java.net.URLClassLoader}) keyed by the pair of their parent\n-     * class loader and their codebase URL path (an ordered list of\n-     * URLs).  If the <code>codebase<\/code> argument is <code>null<\/code>,\n-     * the codebase URL path is the value of the system property\n-     * <code>java.rmi.server.codebase<\/code> or possibly an\n-     * earlier cached value.  For a given codebase URL path passed as the\n-     * <code>codebase<\/code> argument to an invocation of one of the\n-     * below methods in a given context, the codebase loader is the\n-     * loader in the table with the specified codebase URL path and\n-     * the current thread's context class loader as its parent.  If no\n-     * such loader exists, then one is created and added to the table.\n-     * The table does not maintain strong references to its contained\n-     * loaders, in order to allow them and their defined classes to be\n-     * garbage collected when not otherwise reachable.  In order to\n-     * prevent arbitrary untrusted code from being implicitly loaded\n-     * into a virtual machine with no security manager, if there is no\n-     * security manager set, the codebase loader is just the current\n-     * thread's context class loader (the supplied codebase URL path\n-     * is ignored, so remote class loading is disabled).\n+     * the <code>codebase<\/code> argument is ignored. Class loading\n+     * proceeds using the the current thread's context class loader\n+     * (see {@link Thread#getContextClassLoader()}), which is also\n+     * considered to be the codebase loader, irrespective of any\n+     * value passed as the <code>codebase<\/code> argument.\n@@ -494,5 +440,2 @@\n-     * getClassLoader}<\/b> method returns the codebase loader for the\n-     * specified codebase URL path.  If there is a security manager,\n-     * then if the calling context does not have permission to connect\n-     * to all of the URLs in the codebase URL path, a\n-     * <code>SecurityException<\/code> will be thrown.\n+     * getClassLoader}<\/b> method returns the current thread's\n+     * context class loader.\n@@ -510,1 +453,1 @@\n-     * <code>defaultLoader<\/code>, such as by evaluating\n+     * <code>defaultLoader<\/code>, as if by evaluating\n@@ -522,6 +465,2 @@\n-     * class with the specified <code>name<\/code> using the codebase\n-     * loader for the specified codebase URL path.\n-     * If there is a security manager, then the calling context\n-     * must have permission to connect to all of the URLs in the\n-     * codebase URL path; otherwise, the current thread's context\n-     * class loader will be used instead of the codebase loader.\n+     * class with the specified <code>name<\/code> using the current\n+     * thread's context class loader.\n@@ -599,3 +538,0 @@\n-     * @throws  SecurityException if there is a security manager and the\n-     * invocation of its <code>checkPermission<\/code> method fails\n-     *\n@@ -614,1 +550,1 @@\n-     * Returns the security context of the given class loader.\n+     * Always returns null.\n@@ -618,1 +554,1 @@\n-     * @return  the security context\n+     * @return  null\n@@ -620,3 +556,2 @@\n-     * @deprecated no replacement.  As of the Java 2 platform v1.2, RMI no\n-     * longer uses this method to obtain a class loader's security context.\n-     * @see java.lang.SecurityManager#getSecurityContext()\n+     * @deprecated no replacement. This method has no purpose in the absence\n+     * of a Security Manager.\n@@ -627,1 +562,1 @@\n-        return sun.rmi.server.LoaderHandler.getSecurityContext(loader);\n+        return null;\n","filename":"src\/java.rmi\/share\/classes\/java\/rmi\/server\/RMIClassLoader.java","additions":19,"deletions":84,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,8 +154,0 @@\n-     * <p>If there is a security manager, its <code>checkPermission<\/code>\n-     * method will be invoked with a\n-     * <code>RuntimePermission(\"getClassLoader\")<\/code> permission;\n-     * this could result in a <code>SecurityException<\/code>.\n-     * The implementation of this method may also perform further security\n-     * checks to verify that the calling context has permission to connect\n-     * to all of the URLs in the codebase URL path.\n-     *\n@@ -172,5 +164,0 @@\n-     *\n-     * @throws  SecurityException if there is a security manager and the\n-     * invocation of its <code>checkPermission<\/code> method fails, or\n-     * if the caller does not have permission to connect to all of the\n-     * URLs in the codebase URL path\n","filename":"src\/java.rmi\/share\/classes\/java\/rmi\/server\/RMIClassLoaderSpi.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,4 +122,1 @@\n-     * socket factory). The RMI socket factory can only be set once. Note: The\n-     * RMISocketFactory may only be set if the current security manager allows\n-     * setting a socket factory; if disallowed, a SecurityException will be\n-     * thrown.\n+     * socket factory). The RMI socket factory can only be set once.\n@@ -128,2 +125,0 @@\n-     * @throws  SecurityException  if a security manager exists and its\n-     *          <code>checkSetFactory<\/code> method doesn't allow the operation.\n@@ -131,1 +126,0 @@\n-     * @see java.lang.SecurityManager#checkSetFactory()\n@@ -183,9 +177,1 @@\n-     * <p>If there is a security manager, this method first calls\n-     * the security manager's <code>checkSetFactory<\/code> method\n-     * to ensure the operation is allowed.\n-     * This could result in a <code>SecurityException<\/code>.\n-     *\n-     * @param fh the failure handler\n-     * @throws  SecurityException  if a security manager exists and its\n-     *          <code>checkSetFactory<\/code> method doesn't allow the\n-     *          operation.\n+     * @param fh the failure handler.\n","filename":"src\/java.rmi\/share\/classes\/java\/rmi\/server\/RMISocketFactory.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,5 +84,0 @@\n-     * <p>If there is a security manager, its\n-     * <code>checkPermission<\/code> method will be invoked with a\n-     * <code>java.util.logging.LoggingPermission(\"control\")<\/code>\n-     * permission; this could result in a <code>SecurityException<\/code>.\n-     *\n@@ -90,3 +85,0 @@\n-     * @throws  SecurityException  if there is a security manager and\n-     *          the invocation of its <code>checkPermission<\/code> method\n-     *          fails\n","filename":"src\/java.rmi\/share\/classes\/java\/rmi\/server\/RemoteServer.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.security.PrivilegedAction;\n@@ -40,1 +39,0 @@\n-import java.io.FilePermission;\n@@ -49,9 +47,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.CodeSource;\n-import java.security.Policy;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.ProtectionDomain;\n@@ -118,3 +107,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final ObjectInputFilter registryFilter =\n-            AccessController.doPrivileged((PrivilegedAction<ObjectInputFilter>)RegistryImpl::initRegistryFilter);\n+    private static final ObjectInputFilter registryFilter = initRegistryFilter();\n@@ -126,1 +113,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -160,1 +146,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -167,17 +152,2 @@\n-        if (port == Registry.REGISTRY_PORT && System.getSecurityManager() != null) {\n-            \/\/ grant permission for default port only.\n-            try {\n-                AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n-                    public Void run() throws RemoteException {\n-                        LiveRef lref = new LiveRef(id, port, csf, ssf);\n-                        setup(new UnicastServerRef2(lref, serialFilter));\n-                        return null;\n-                    }\n-                }, null, new SocketPermission(\"localhost:\"+port, \"listen,accept\"));\n-            } catch (PrivilegedActionException pae) {\n-                throw (RemoteException)pae.getException();\n-            }\n-        } else {\n-            LiveRef lref = new LiveRef(id, port, csf, ssf);\n-            setup(new UnicastServerRef2(lref, serialFilter));\n-        }\n+        LiveRef lref = new LiveRef(id, port, csf, ssf);\n+        setup(new UnicastServerRef2(lref, serialFilter));\n@@ -189,1 +159,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -193,17 +162,2 @@\n-        if (port == Registry.REGISTRY_PORT && System.getSecurityManager() != null) {\n-            \/\/ grant permission for default port only.\n-            try {\n-                AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n-                    public Void run() throws RemoteException {\n-                        LiveRef lref = new LiveRef(id, port);\n-                        setup(new UnicastServerRef(lref, RegistryImpl::registryFilter));\n-                        return null;\n-                    }\n-                }, null, new SocketPermission(\"localhost:\"+port, \"listen,accept\"));\n-            } catch (PrivilegedActionException pae) {\n-                throw (RemoteException)pae.getException();\n-            }\n-        } else {\n-            LiveRef lref = new LiveRef(id, port);\n-            setup(new UnicastServerRef(lref, RegistryImpl::registryFilter));\n-        }\n+        LiveRef lref = new LiveRef(id, port);\n+        setup(new UnicastServerRef(lref, RegistryImpl::registryFilter));\n@@ -319,15 +273,2 @@\n-            final String clientHostName = getClientHost();\n-            InetAddress clientHost;\n-\n-            try {\n-                clientHost = java.security.AccessController.doPrivileged(\n-                    new java.security.PrivilegedExceptionAction<InetAddress>() {\n-                        public InetAddress run()\n-                            throws java.net.UnknownHostException\n-                        {\n-                            return InetAddress.getByName(clientHostName);\n-                        }\n-                    });\n-            } catch (PrivilegedActionException pae) {\n-                throw (java.net.UnknownHostException) pae.getException();\n-            }\n+            String clientHostName = getClientHost();\n+            InetAddress clientHost = InetAddress.getByName(clientHostName);\n@@ -344,18 +285,7 @@\n-                    final InetAddress finalClientHost = clientHost;\n-\n-                    java.security.AccessController.doPrivileged(\n-                        new java.security.PrivilegedExceptionAction<Void>() {\n-                            public Void run() throws java.io.IOException {\n-                                \/*\n-                                 * if a ServerSocket can be bound to the client's\n-                                 * address then that address must be local\n-                                 *\/\n-                                (new ServerSocket(0, 10, finalClientHost)).close();\n-                                allowedAccessCache.put(finalClientHost,\n-                                                       finalClientHost);\n-                                return null;\n-                            }\n-                    });\n-                } catch (PrivilegedActionException pae) {\n-                    \/\/ must have been an IOException\n-\n+                    \/*\n+                     * if a ServerSocket can be bound to the client's\n+                     * address then that address must be local\n+                     *\/\n+                    (new ServerSocket(0, 10, clientHost)).close();\n+                    allowedAccessCache.put(clientHost, clientHost);\n+                } catch (IOException ioe) {\n@@ -364,1 +294,1 @@\n-                        clientHost + \" is non-local host\");\n+                        clientHost + \" is non-local host\", ioe);\n@@ -494,1 +424,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -496,6 +425,0 @@\n-        \/\/ Create and install the security manager if one is not installed\n-        \/\/ already.\n-        if (System.getSecurityManager() == null) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n@@ -531,13 +454,1 @@\n-        RegistryImpl registryImpl = null;\n-        try {\n-            registryImpl = AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<RegistryImpl>() {\n-                    public RegistryImpl run() throws RemoteException {\n-                        return new RegistryImpl(regPort);\n-                    }\n-                }, getAccessControlContext(regPort));\n-        } catch (PrivilegedActionException ex) {\n-            throw (RemoteException) ex.getException();\n-        }\n-\n-        return registryImpl;\n+        return new RegistryImpl(regPort);\n@@ -577,45 +488,0 @@\n-\n-    \/**\n-     * Generates an AccessControlContext with minimal permissions.\n-     * The approach used here is taken from the similar method\n-     * getAccessControlContext() in the sun.applet.AppletPanel class.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext getAccessControlContext(int port) {\n-        \/\/ begin with permissions granted to all code in current policy\n-        PermissionCollection perms = AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<PermissionCollection>() {\n-                public PermissionCollection run() {\n-                    CodeSource codesource = new CodeSource(null,\n-                        (java.security.cert.Certificate[]) null);\n-                    Policy p = java.security.Policy.getPolicy();\n-                    if (p != null) {\n-                        return p.getPermissions(codesource);\n-                    } else {\n-                        return new Permissions();\n-                    }\n-                }\n-            });\n-\n-        \/*\n-         * Anyone can connect to the registry and the registry can connect\n-         * to and possibly download stubs from anywhere. Downloaded stubs and\n-         * related classes themselves are more tightly limited by RMI.\n-         *\/\n-        perms.add(new SocketPermission(\"*\", \"connect,accept\"));\n-        perms.add(new SocketPermission(\"localhost:\"+port, \"listen,accept\"));\n-\n-        perms.add(new RuntimePermission(\"accessClassInPackage.sun.jvmstat.*\"));\n-        perms.add(new RuntimePermission(\"accessClassInPackage.sun.jvm.hotspot.*\"));\n-\n-        perms.add(new FilePermission(\"<<ALL FILES>>\", \"read\"));\n-\n-        \/*\n-         * Create an AccessControlContext that consists of a single\n-         * protection domain with only the permissions calculated above.\n-         *\/\n-        ProtectionDomain pd = new ProtectionDomain(\n-            new CodeSource(null,\n-                (java.security.cert.Certificate[]) null), perms);\n-        return new AccessControlContext(new ProtectionDomain[] { pd });\n-    }\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/registry\/RegistryImpl.java","additions":17,"deletions":151,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import java.io.File;\n-import java.io.FilePermission;\n-import java.io.IOException;\n-import java.lang.ref.ReferenceQueue;\n@@ -33,1 +29,0 @@\n-import java.lang.ref.WeakReference;\n@@ -36,1 +31,0 @@\n-import java.net.JarURLConnection;\n@@ -38,1 +32,0 @@\n-import java.net.SocketPermission;\n@@ -41,8 +34,0 @@\n-import java.net.URLConnection;\n-import java.security.AccessControlContext;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.PermissionCollection;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -50,1 +35,0 @@\n-import java.security.PrivilegedAction;\n@@ -53,2 +37,0 @@\n-import java.util.Enumeration;\n-import java.util.HashMap;\n@@ -59,1 +41,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -74,4 +55,1 @@\n-    @SuppressWarnings(\"removal\")\n-    static final int logLevel = LogStream.parseLevel(\n-        java.security.AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> System.getProperty(\"sun.rmi.loader.logLevel\")));\n+    static final int logLevel = LogStream.parseLevel(System.getProperty(\"sun.rmi.loader.logLevel\"));\n@@ -89,3 +67,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String prop = java.security.AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> System.getProperty(\"java.rmi.server.codebase\"));\n+        String prop = System.getProperty(\"java.rmi.server.codebase\");\n@@ -112,13 +88,0 @@\n-    \/**\n-     * table mapping codebase URL path and context class loader pairs\n-     * to class loader instances.  Entries hold class loaders with weak\n-     * references, so this table does not prevent loaders from being\n-     * garbage collected.\n-     *\/\n-    private static final HashMap<LoaderKey, LoaderEntry> loaderTable\n-        = new HashMap<>(5);\n-\n-    \/** reference queue for cleared class loader entries *\/\n-    private static final ReferenceQueue<Loader> refQueue\n-        = new ReferenceQueue<>();\n-\n@@ -177,1 +140,1 @@\n-                Class<?> c = loadClassForName(name, false, defaultLoader);\n+                Class<?> c = Class.forName(name, false, defaultLoader);\n@@ -234,45 +197,4 @@\n-        if (loader instanceof Loader) {\n-            \/*\n-             * If the class loader is one of our RMI class loaders, we have\n-             * already computed the class annotation string, and no\n-             * permissions are required to know the URLs.\n-             *\/\n-            annotation = ((Loader) loader).getClassAnnotation();\n-\n-        } else if (loader instanceof URLClassLoader) {\n-            try {\n-                URL[] urls = ((URLClassLoader) loader).getURLs();\n-                if (urls != null) {\n-                    \/*\n-                     * If the class loader is not one of our RMI class loaders,\n-                     * we must verify that the current access control context\n-                     * has permission to know all of these URLs.\n-                     *\/\n-                    @SuppressWarnings(\"removal\")\n-                    SecurityManager sm = System.getSecurityManager();\n-                    if (sm != null) {\n-                        Permissions perms = new Permissions();\n-                        for (int i = 0; i < urls.length; i++) {\n-                            Permission p =\n-                                urls[i].openConnection().getPermission();\n-                            if (p != null) {\n-                                if (!perms.implies(p)) {\n-                                    sm.checkPermission(p);\n-                                    perms.add(p);\n-                                }\n-                            }\n-                        }\n-                    }\n-\n-                    annotation = urlsToPath(urls);\n-                }\n-            } catch (SecurityException | IOException e) {\n-                \/*\n-                 * SecurityException: If access was denied to the knowledge of\n-                 * the class loader's URLs, fall back to the default behavior.\n-                 *\n-                 * IOException: This shouldn't happen, although it is declared\n-                 * to be thrown by openConnection() and getPermission().  If it\n-                 * does happen, forget about this class loader's URLs and\n-                 * fall back to the default behavior.\n-                 *\/\n+        if (loader instanceof URLClassLoader) {\n+            URL[] urls = ((URLClassLoader) loader).getURLs();\n+            if (urls != null) {\n+                annotation = urlsToPath(urls);\n@@ -290,3 +212,1 @@\n-     * Returns a classloader that loads classes from the given codebase URL\n-     * path.  The parent classloader of the returned classloader is the\n-     * context class loader.\n+     * Returns the thread context classloader. The codebase argument is ignored.\n@@ -297,3 +217,1 @@\n-        ClassLoader parent = getRMIContextClassLoader();\n-\n-        URL[] urls;\n+        URL[] urls; \/\/ ignored, used only for URL syntax checking\n@@ -306,45 +224,1 @@\n-        \/*\n-         * If there is a security manager, the current access control\n-         * context must have the \"getClassLoader\" RuntimePermission.\n-         *\/\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"getClassLoader\"));\n-        } else {\n-            \/*\n-             * But if no security manager is set, disable access to\n-             * RMI class loaders and simply return the parent loader.\n-             *\/\n-            return parent;\n-        }\n-\n-        Loader loader = lookupLoader(urls, parent);\n-\n-        \/*\n-         * Verify that the caller has permission to access this loader.\n-         *\/\n-        if (loader != null) {\n-            loader.checkPermissions();\n-        }\n-\n-        return loader;\n-    }\n-\n-    \/**\n-     * Return the security context of the given class loader.\n-     *\/\n-    public static Object getSecurityContext(ClassLoader loader) {\n-        \/*\n-         * REMIND: This is a bogus JDK1.1-compatible implementation.\n-         * This method should never be called by application code anyway\n-         * (hence the deprecation), but should it do something different\n-         * and perhaps more useful, like return a String or a URL[]?\n-         *\/\n-        if (loader instanceof Loader) {\n-            URL[] urls = ((Loader) loader).getURLs();\n-            if (urls.length > 0) {\n-                return urls[0];\n-            }\n-        }\n-        return null;\n+        return Thread.currentThread().getContextClassLoader();\n@@ -368,1 +242,1 @@\n-        ClassLoader parent = getRMIContextClassLoader();\n+        ClassLoader parent = Thread.currentThread().getContextClassLoader();\n@@ -375,1 +249,1 @@\n-         * If no security manager is set, disable access to RMI class\n+         * There is no security manager, so disable access to RMI class\n@@ -379,32 +253,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            try {\n-                Class<?> c = Class.forName(name, false, parent);\n-                if (loaderLog.isLoggable(Log.VERBOSE)) {\n-                    loaderLog.log(Log.VERBOSE,\n-                        \"class \\\"\" + name + \"\\\" found via \" +\n-                        \"thread context class loader \" +\n-                        \"(no security manager: codebase disabled), \" +\n-                        \"defined by \" + c.getClassLoader());\n-                }\n-                return c;\n-            } catch (ClassNotFoundException e) {\n-                if (loaderLog.isLoggable(Log.BRIEF)) {\n-                    loaderLog.log(Log.BRIEF,\n-                        \"class \\\"\" + name + \"\\\" not found via \" +\n-                        \"thread context class loader \" +\n-                        \"(no security manager: codebase disabled)\", e);\n-                }\n-                throw new ClassNotFoundException(e.getMessage() +\n-                    \" (no security manager: RMI class loader disabled)\",\n-                    e.getException());\n-            }\n-        }\n-\n-        \/*\n-         * Get or create the RMI class loader for this codebase URL path\n-         * and parent class loader pair.\n-         *\/\n-        Loader loader = lookupLoader(urls, parent);\n-\n@@ -412,47 +254,1 @@\n-            if (loader != null) {\n-                \/*\n-                 * Verify that the caller has permission to access this loader.\n-                 *\/\n-                loader.checkPermissions();\n-            }\n-        } catch (SecurityException e) {\n-            \/*\n-             * If the current access control context does not have permission\n-             * to access all of the URLs in the codebase path, wrap the\n-             * resulting security exception in a ClassNotFoundException, so\n-             * the caller can handle this outcome just like any other class\n-             * loading failure (see bugid 4146529).\n-             *\/\n-            try {\n-                \/*\n-                 * But first, check to see if the named class could have been\n-                 * resolved without the security-offending codebase anyway;\n-                 * if so, return successfully (see bugids 4191926 & 4349670).\n-                 *\/\n-                Class<?> c = loadClassForName(name, false, parent);\n-                if (loaderLog.isLoggable(Log.VERBOSE)) {\n-                    loaderLog.log(Log.VERBOSE,\n-                        \"class \\\"\" + name + \"\\\" found via \" +\n-                        \"thread context class loader \" +\n-                        \"(access to codebase denied), \" +\n-                        \"defined by \" + c.getClassLoader());\n-                }\n-                return c;\n-            } catch (ClassNotFoundException unimportant) {\n-                \/*\n-                 * Presumably the security exception is the more important\n-                 * exception to report in this case.\n-                 *\/\n-                if (loaderLog.isLoggable(Log.BRIEF)) {\n-                    loaderLog.log(Log.BRIEF,\n-                        \"class \\\"\" + name + \"\\\" not found via \" +\n-                        \"thread context class loader \" +\n-                        \"(access to codebase denied)\", e);\n-                }\n-                throw new ClassNotFoundException(\n-                    \"access to class loader denied\", e);\n-            }\n-        }\n-\n-        try {\n-            Class<?> c = loadClassForName(name, false, loader);\n+            Class<?> c = Class.forName(name, false, parent);\n@@ -461,1 +257,3 @@\n-                    \"class \\\"\" + name + \"\\\" \" + \"found via codebase, \" +\n+                    \"class \\\"\" + name + \"\\\" found via \" +\n+                    \"thread context class loader \" +\n+                    \"(no security manager: codebase disabled), \" +\n@@ -468,1 +266,3 @@\n-                    \"class \\\"\" + name + \"\\\" not found via codebase\", e);\n+                    \"class \\\"\" + name + \"\\\" not found via \" +\n+                    \"thread context class loader \" +\n+                    \"(no security manager: codebase disabled)\", e);\n@@ -470,1 +270,3 @@\n-            throw e;\n+            throw new ClassNotFoundException(e.getMessage() +\n+                \" (no security manager: RMI class loader disabled)\",\n+                e.getException());\n@@ -525,1 +327,1 @@\n-        ClassLoader parent = getRMIContextClassLoader();\n+        ClassLoader parent = Thread.currentThread().getContextClassLoader();\n@@ -539,2 +341,2 @@\n-         * If no security manager is set, disable access to RMI class\n-         * loaders and use the would-de parent instead.\n+         * There is no security manager, so disable access to RMI class\n+         * loaders and use the would-be parent instead.\n@@ -542,74 +344,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            try {\n-                Class<?> c = loadProxyClass(interfaces, defaultLoader, parent,\n-                                         false);\n-                if (loaderLog.isLoggable(Log.VERBOSE)) {\n-                    loaderLog.log(Log.VERBOSE,\n-                        \"(no security manager: codebase disabled) \" +\n-                        \"proxy class defined by \" + c.getClassLoader());\n-                }\n-                return c;\n-            } catch (ClassNotFoundException e) {\n-                if (loaderLog.isLoggable(Log.BRIEF)) {\n-                    loaderLog.log(Log.BRIEF,\n-                        \"(no security manager: codebase disabled) \" +\n-                        \"proxy class resolution failed\", e);\n-                }\n-                throw new ClassNotFoundException(e.getMessage() +\n-                    \" (no security manager: RMI class loader disabled)\",\n-                    e.getException());\n-            }\n-        }\n-\n-        \/*\n-         * Get or create the RMI class loader for this codebase URL path\n-         * and parent class loader pair.\n-         *\/\n-        Loader loader = lookupLoader(urls, parent);\n-\n-        try {\n-            if (loader != null) {\n-                \/*\n-                 * Verify that the caller has permission to access this loader.\n-                 *\/\n-                loader.checkPermissions();\n-            }\n-        } catch (SecurityException e) {\n-            \/*\n-             * If the current access control context does not have permission\n-             * to access all of the URLs in the codebase path, wrap the\n-             * resulting security exception in a ClassNotFoundException, so\n-             * the caller can handle this outcome just like any other class\n-             * loading failure (see bugid 4146529).\n-             *\/\n-            try {\n-                \/*\n-                 * But first, check to see if the proxy class could have been\n-                 * resolved without the security-offending codebase anyway;\n-                 * if so, return successfully (see bugids 4191926 & 4349670).\n-                 *\/\n-                Class<?> c = loadProxyClass(interfaces, defaultLoader, parent,\n-                                            false);\n-                if (loaderLog.isLoggable(Log.VERBOSE)) {\n-                    loaderLog.log(Log.VERBOSE,\n-                        \"(access to codebase denied) \" +\n-                        \"proxy class defined by \" + c.getClassLoader());\n-                }\n-                return c;\n-            } catch (ClassNotFoundException unimportant) {\n-                \/*\n-                 * Presumably the security exception is the more important\n-                 * exception to report in this case.\n-                 *\/\n-                if (loaderLog.isLoggable(Log.BRIEF)) {\n-                    loaderLog.log(Log.BRIEF,\n-                        \"(access to codebase denied) \" +\n-                        \"proxy class resolution failed\", e);\n-                }\n-                throw new ClassNotFoundException(\n-                    \"access to class loader denied\", e);\n-            }\n-        }\n-\n@@ -617,1 +345,2 @@\n-            Class<?> c = loadProxyClass(interfaces, defaultLoader, loader, true);\n+            Class<?> c = loadProxyClass(interfaces, defaultLoader, parent,\n+                                     false);\n@@ -620,1 +349,2 @@\n-                              \"proxy class defined by \" + c.getClassLoader());\n+                    \"(no security manager: codebase disabled) \" +\n+                    \"proxy class defined by \" + c.getClassLoader());\n@@ -626,1 +356,2 @@\n-                              \"proxy class resolution failed\", e);\n+                    \"(no security manager: codebase disabled) \" +\n+                    \"proxy class resolution failed\", e);\n@@ -628,1 +359,3 @@\n-            throw e;\n+            throw new ClassNotFoundException(e.getMessage() +\n+                \" (no security manager: RMI class loader disabled)\",\n+                e.getException());\n@@ -737,1 +470,1 @@\n-                (classObjs[i] = loadClassForName(interfaces[i], false, loader));\n+                (classObjs[i] = Class.forName(interfaces[i], false, loader));\n@@ -812,423 +545,0 @@\n-\n-    \/**\n-     * Return the class loader to be used as the parent for an RMI class\n-     * loader used in the current execution context.\n-     *\/\n-    private static ClassLoader getRMIContextClassLoader() {\n-        \/*\n-         * The current implementation simply uses the current thread's\n-         * context class loader.\n-         *\/\n-        return Thread.currentThread().getContextClassLoader();\n-    }\n-\n-    \/**\n-     * Look up the RMI class loader for the given codebase URL path\n-     * and the given parent class loader.  A new class loader instance\n-     * will be created and returned if no match is found.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static Loader lookupLoader(final URL[] urls,\n-                                       final ClassLoader parent)\n-    {\n-        \/*\n-         * If the requested codebase URL path is empty, the supplied\n-         * parent class loader will be sufficient.\n-         *\n-         * REMIND: To be conservative, this optimization is commented out\n-         * for now so that it does not open a security hole in the future\n-         * by providing untrusted code with direct access to the public\n-         * loadClass() method of a class loader instance that it cannot\n-         * get a reference to.  (It's an unlikely optimization anyway.)\n-         *\n-         * if (urls.length == 0) {\n-         *     return parent;\n-         * }\n-         *\/\n-\n-        LoaderEntry entry;\n-        Loader loader;\n-\n-        synchronized (LoaderHandler.class) {\n-            \/*\n-             * Take this opportunity to remove from the table entries\n-             * whose weak references have been cleared.\n-             *\/\n-            while ((entry = (LoaderEntry) refQueue.poll()) != null) {\n-                if (!entry.removed) {   \/\/ ignore entries removed below\n-                    loaderTable.remove(entry.key);\n-                }\n-            }\n-\n-            \/*\n-             * Look up the codebase URL path and parent class loader pair\n-             * in the table of RMI class loaders.\n-             *\/\n-            LoaderKey key = new LoaderKey(urls, parent);\n-            entry = loaderTable.get(key);\n-\n-            if (entry == null || (loader = entry.get()) == null) {\n-                \/*\n-                 * If entry was in table but it's weak reference was cleared,\n-                 * remove it from the table and mark it as explicitly cleared,\n-                 * so that new matching entry that we put in the table will\n-                 * not be erroneously removed when this entry is processed\n-                 * from the weak reference queue.\n-                 *\/\n-                if (entry != null) {\n-                    loaderTable.remove(key);\n-                    entry.removed = true;\n-                }\n-\n-                \/*\n-                 * A matching loader was not found, so create a new class\n-                 * loader instance for the requested codebase URL path and\n-                 * parent class loader.  The instance is created within an\n-                 * access control context restricted to the permissions\n-                 * necessary to load classes from its codebase URL path.\n-                 *\/\n-                AccessControlContext acc = getLoaderAccessControlContext(urls);\n-                loader = java.security.AccessController.doPrivileged(\n-                    new java.security.PrivilegedAction<Loader>() {\n-                        public Loader run() {\n-                            return new Loader(urls, parent);\n-                        }\n-                    }, acc);\n-\n-                \/*\n-                 * Finally, create an entry to hold the new loader with a\n-                 * weak reference and store it in the table with the key.\n-                 *\/\n-                entry = new LoaderEntry(key, loader);\n-                loaderTable.put(key, entry);\n-            }\n-        }\n-\n-        return loader;\n-    }\n-\n-    \/**\n-     * LoaderKey holds a codebase URL path and parent class loader pair\n-     * used to look up RMI class loader instances in its class loader cache.\n-     *\/\n-    private static class LoaderKey {\n-\n-        private URL[] urls;\n-\n-        private ClassLoader parent;\n-\n-        private int hashValue;\n-\n-        public LoaderKey(URL[] urls, ClassLoader parent) {\n-            this.urls = urls;\n-            this.parent = parent;\n-\n-            if (parent != null) {\n-                hashValue = parent.hashCode();\n-            }\n-            for (int i = 0; i < urls.length; i++) {\n-                hashValue ^= urls[i].hashCode();\n-            }\n-        }\n-\n-        public int hashCode() {\n-            return hashValue;\n-        }\n-\n-        public boolean equals(Object obj) {\n-            if (obj instanceof LoaderKey) {\n-                LoaderKey other = (LoaderKey) obj;\n-                if (parent != other.parent) {\n-                    return false;\n-                }\n-                if (urls == other.urls) {\n-                    return true;\n-                }\n-                if (urls.length != other.urls.length) {\n-                    return false;\n-                }\n-                for (int i = 0; i < urls.length; i++) {\n-                    if (!urls[i].equals(other.urls[i])) {\n-                        return false;\n-                    }\n-                }\n-                return true;\n-            } else {\n-                return false;\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * LoaderEntry contains a weak reference to an RMIClassLoader.  The\n-     * weak reference is registered with the private static \"refQueue\"\n-     * queue.  The entry contains the codebase URL path and parent class\n-     * loader key for the loader so that the mapping can be removed from\n-     * the table efficiently when the weak reference is cleared.\n-     *\/\n-    private static class LoaderEntry extends WeakReference<Loader> {\n-\n-        public LoaderKey key;\n-\n-        \/**\n-         * set to true if the entry has been removed from the table\n-         * because it has been replaced, so it should not be attempted\n-         * to be removed again\n-         *\/\n-        public boolean removed = false;\n-\n-        public LoaderEntry(LoaderKey key, Loader loader) {\n-            super(loader, refQueue);\n-            this.key = key;\n-        }\n-    }\n-\n-    \/**\n-     * Return the access control context that a loader for the given\n-     * codebase URL path should execute with.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext getLoaderAccessControlContext(\n-        URL[] urls)\n-    {\n-        \/*\n-         * The approach used here is taken from the similar method\n-         * getAccessControlContext() in the sun.applet.AppletPanel class.\n-         *\/\n-        \/\/ begin with permissions granted to all code in current policy\n-        PermissionCollection perms =\n-            java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<PermissionCollection>() {\n-                public PermissionCollection run() {\n-                    CodeSource codesource = new CodeSource(null,\n-                        (java.security.cert.Certificate[]) null);\n-                    Policy p = java.security.Policy.getPolicy();\n-                    if (p != null) {\n-                        return p.getPermissions(codesource);\n-                    } else {\n-                        return new Permissions();\n-                    }\n-                }\n-            });\n-\n-        \/\/ createClassLoader permission needed to create loader in context\n-        perms.add(new RuntimePermission(\"createClassLoader\"));\n-\n-        \/\/ add permissions to read any \"java.*\" property\n-        perms.add(new java.util.PropertyPermission(\"java.*\",\"read\"));\n-\n-        \/\/ add permissions reuiqred to load from codebase URL path\n-        addPermissionsForURLs(urls, perms, true);\n-\n-        \/*\n-         * Create an AccessControlContext that consists of a single\n-         * protection domain with only the permissions calculated above.\n-         *\/\n-        ProtectionDomain pd = new ProtectionDomain(\n-            new CodeSource((urls.length > 0 ? urls[0] : null),\n-                (java.security.cert.Certificate[]) null),\n-            perms);\n-        return new AccessControlContext(new ProtectionDomain[] { pd });\n-    }\n-\n-    \/**\n-     * Adds to the specified permission collection the permissions\n-     * necessary to load classes from a loader with the specified URL\n-     * path; if \"forLoader\" is true, also adds URL-specific\n-     * permissions necessary for the security context that such a\n-     * loader operates within, such as permissions necessary for\n-     * granting automatic permissions to classes defined by the\n-     * loader.  A given permission is only added to the collection if\n-     * it is not already implied by the collection.\n-     *\/\n-    private static void addPermissionsForURLs(URL[] urls,\n-                                             PermissionCollection perms,\n-                                             boolean forLoader)\n-    {\n-        for (int i = 0; i < urls.length; i++) {\n-            URL url = urls[i];\n-            try {\n-                URLConnection urlConnection = url.openConnection();\n-                Permission p = urlConnection.getPermission();\n-                if (p != null) {\n-                    if (p instanceof FilePermission) {\n-                        \/*\n-                         * If the codebase is a file, the permission required\n-                         * to actually read classes from the codebase URL is\n-                         * the permission to read all files beneath the last\n-                         * directory in the file path, either because JAR\n-                         * files can refer to other JAR files in the same\n-                         * directory, or because permission to read a\n-                         * directory is not implied by permission to read the\n-                         * contents of a directory, which all that might be\n-                         * granted.\n-                         *\/\n-                        String path = p.getName();\n-                        int endIndex = path.lastIndexOf(File.separatorChar);\n-                        if (endIndex != -1) {\n-                            path = path.substring(0, endIndex+1);\n-                            if (path.endsWith(File.separator)) {\n-                                path += \"-\";\n-                            }\n-                            Permission p2 = new FilePermission(path, \"read\");\n-                            if (!perms.implies(p2)) {\n-                                perms.add(p2);\n-                            }\n-                            perms.add(new FilePermission(path, \"read\"));\n-                        } else {\n-                            \/*\n-                             * No directory separator: use permission to\n-                             * read the file.\n-                             *\/\n-                            if (!perms.implies(p)) {\n-                                perms.add(p);\n-                            }\n-                        }\n-                    } else {\n-                        if (!perms.implies(p)) {\n-                            perms.add(p);\n-                        }\n-\n-                        \/*\n-                         * If the purpose of these permissions is to grant\n-                         * them to an instance of a URLClassLoader subclass,\n-                         * we must add permission to connect to and accept\n-                         * from the host of non-\"file:\" URLs, otherwise the\n-                         * getPermissions() method of URLClassLoader will\n-                         * throw a security exception.\n-                         *\/\n-                        if (forLoader) {\n-                            \/\/ get URL with meaningful host component\n-                            URL hostURL = url;\n-                            for (URLConnection conn = urlConnection;\n-                                 conn instanceof JarURLConnection;)\n-                            {\n-                                hostURL =\n-                                    ((JarURLConnection) conn).getJarFileURL();\n-                                conn = hostURL.openConnection();\n-                            }\n-                            String host = hostURL.getHost();\n-                            if (host != null &&\n-                                p.implies(new SocketPermission(host,\n-                                                               \"resolve\")))\n-                            {\n-                                Permission p2 =\n-                                    new SocketPermission(host,\n-                                                         \"connect,accept\");\n-                                if (!perms.implies(p2)) {\n-                                    perms.add(p2);\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            } catch (IOException e) {\n-                \/*\n-                 * This shouldn't happen, although it is declared to be\n-                 * thrown by openConnection() and getPermission().  If it\n-                 * does, don't bother granting or requiring any permissions\n-                 * for this URL.\n-                 *\/\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Loader is the actual class of the RMI class loaders created\n-     * by the RMIClassLoader static methods.\n-     *\/\n-    private static class Loader extends URLClassLoader {\n-\n-        \/** parent class loader, kept here as an optimization *\/\n-        private ClassLoader parent;\n-\n-        \/** string form of loader's codebase URL path, also an optimization *\/\n-        private String annotation;\n-\n-        \/** permissions required to access loader through public API *\/\n-        private Permissions permissions;\n-\n-        private Loader(URL[] urls, ClassLoader parent) {\n-            super(urls, parent);\n-            this.parent = parent;\n-\n-            \/*\n-             * Precompute the permissions required to access the loader.\n-             *\/\n-            permissions = new Permissions();\n-            addPermissionsForURLs(urls, permissions, false);\n-\n-            \/*\n-             * Caching the value of class annotation string here assumes\n-             * that the protected method addURL() is never called on this\n-             * class loader.\n-             *\/\n-            annotation = urlsToPath(urls);\n-        }\n-\n-        \/**\n-         * Return the string to be annotated with all classes loaded from\n-         * this class loader.\n-         *\/\n-        public String getClassAnnotation() {\n-            return annotation;\n-        }\n-\n-        \/**\n-         * Check that the current access control context has all of the\n-         * permissions necessary to load classes from this loader.\n-         *\/\n-        private void checkPermissions() {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {           \/\/ should never be null?\n-                Enumeration<Permission> enum_ = permissions.elements();\n-                while (enum_.hasMoreElements()) {\n-                    sm.checkPermission(enum_.nextElement());\n-                }\n-            }\n-        }\n-\n-        \/**\n-         * Return the permissions to be granted to code loaded from the\n-         * given code source.\n-         *\/\n-        protected PermissionCollection getPermissions(CodeSource codesource) {\n-            PermissionCollection perms = super.getPermissions(codesource);\n-            \/*\n-             * Grant the same permissions that URLClassLoader would grant.\n-             *\/\n-            return perms;\n-        }\n-\n-        \/**\n-         * Return a string representation of this loader (useful for\n-         * debugging).\n-         *\/\n-        public String toString() {\n-            return super.toString() + \"[\\\"\" + annotation + \"\\\"]\";\n-        }\n-\n-        @Override\n-        protected Class<?> loadClass(String name, boolean resolve)\n-                throws ClassNotFoundException {\n-            if (parent == null) {\n-                ReflectUtil.checkPackageAccess(name);\n-            }\n-            return super.loadClass(name, resolve);\n-        }\n-\n-\n-    }\n-\n-    private static Class<?> loadClassForName(String name,\n-                                              boolean initialize,\n-                                              ClassLoader loader)\n-            throws ClassNotFoundException\n-    {\n-        if (loader == null) {\n-            ReflectUtil.checkPackageAccess(name);\n-        }\n-        return Class.forName(name, initialize, loader);\n-    }\n-\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/server\/LoaderHandler.java","additions":36,"deletions":726,"binary":false,"changes":762,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,1 @@\n- * This class is used to restrict the usage of the Kerberos\n- * delegation model, ie: forwardable and proxiable tickets.\n+ * This class is for Kerberos delegation permissions.\n@@ -46,10 +45,0 @@\n- * <p>\n- * For example, to specify the \"host\" service use of a forwardable TGT the\n- * target permission is specified as follows:\n- *\n- * <pre>\n- *  DelegationPermission(\"\\\"host\/foo.example.com@EXAMPLE.COM\\\" \\\"krbtgt\/EXAMPLE.COM@EXAMPLE.COM\\\"\");\n- * <\/pre>\n- * <p>\n- * To give the \"backup\" service a proxiable nfs service ticket the target permission\n- * might be specified:\n@@ -57,3 +46,3 @@\n- * <pre>\n- *  DelegationPermission(\"\\\"backup\/bar.example.com@EXAMPLE.COM\\\" \\\"nfs\/home.EXAMPLE.COM@EXAMPLE.COM\\\"\");\n- * <\/pre>\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.security.jgss\/share\/classes\/javax\/security\/auth\/kerberos\/DelegationPermission.java","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -64,9 +64,0 @@\n- * It might be necessary for the application to be granted a\n- * {@link javax.security.auth.PrivateCredentialPermission\n- * PrivateCredentialPermission} if it needs to access the {@code KerberosKey}\n- * instance from a Subject. This permission is not needed when the\n- * application depends on the default JGSS Kerberos mechanism to access the\n- * {@code KerberosKey}. In that case, however, the application will need an\n- * appropriate\n- * {@link javax.security.auth.kerberos.ServicePermission ServicePermission}.<p>\n- *\n","filename":"src\/java.security.jgss\/share\/classes\/javax\/security\/auth\/kerberos\/KerberosKey.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,9 +122,0 @@\n-     * <p>Additionally, if a security manager is\n-     * installed, a {@link ServicePermission} must be granted and the service\n-     * principal of the permission must minimally be inside the\n-     * {@code KerberosPrincipal}'s realm. For example, if the result of\n-     * {@code new KerberosPrincipal(\"user\")} is {@code user@EXAMPLE.COM},\n-     * then a {@code ServicePermission} with service principal\n-     * {@code host\/www.example.com@EXAMPLE.COM} (and any action)\n-     * must be granted.\n-     *\n@@ -137,3 +128,0 @@\n-     * @throws SecurityException if a security manager is installed and\n-     * {@code name} does not contain the realm to use, and a proper\n-     * {@link ServicePermission} as described above is not granted.\n@@ -171,9 +159,0 @@\n-     * <p>Additionally, if a security manager is\n-     * installed, a {@link ServicePermission} must be granted and the service\n-     * principal of the permission must minimally be inside the\n-     * {@code KerberosPrincipal}'s realm. For example, if the result of\n-     * {@code new KerberosPrincipal(\"user\")} is {@code user@EXAMPLE.COM},\n-     * then a {@code ServicePermission} with service principal\n-     * {@code host\/www.example.com@EXAMPLE.COM} (and any action)\n-     * must be granted.\n-     *\n@@ -187,3 +166,0 @@\n-     * @throws SecurityException if a security manager is installed and\n-     * {@code name} does not contain the realm to use, and a proper\n-     * {@link ServicePermission} as described above is not granted.\n","filename":"src\/java.security.jgss\/share\/classes\/javax\/security\/auth\/kerberos\/KerberosPrincipal.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,10 +55,1 @@\n- * {@link javax.security.auth.Subject Subject}.<p>\n- *\n- * It might be necessary for the application to be granted a\n- * {@link javax.security.auth.PrivateCredentialPermission\n- * PrivateCredentialPermission} if it needs to access a {@code KerberosTicket}\n- * instance from a {@code Subject}. This permission is not needed when the\n- * application depends on the default JGSS Kerberos mechanism to access the\n- * {@code KerberosTicket}. In that case, however, the application will need an\n- * appropriate\n- * {@link javax.security.auth.kerberos.ServicePermission ServicePermission}.\n+ * {@link javax.security.auth.Subject Subject}.\n@@ -74,1 +65,0 @@\n- * @see javax.security.auth.PrivateCredentialPermission\n","filename":"src\/java.security.jgss\/share\/classes\/javax\/security\/auth\/kerberos\/KerberosTicket.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,8 +59,0 @@\n- * It might be necessary for the application to be granted a\n- * {@link javax.security.auth.PrivateCredentialPermission\n- * PrivateCredentialPermission} if it needs to access the {@code KeyTab}\n- * instance from a {@code Subject}. This permission is not needed when the\n- * application depends on the default JGSS Kerberos mechanism to access the\n- * {@code KeyTab}. In that case, however, the application will need an appropriate\n- * {@link javax.security.auth.kerberos.ServicePermission ServicePermission}.\n- * <p>\n@@ -275,2 +267,0 @@\n-     * @throws SecurityException if a security manager exists and the read\n-     * access to the keytab file is not permitted\n@@ -311,2 +301,0 @@\n-     * @throws SecurityException if a security manager exists and the read\n-     * access to the keytab file is not permitted\n","filename":"src\/java.security.jgss\/share\/classes\/javax\/security\/auth\/kerberos\/KeyTab.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,11 +35,0 @@\n- * This class is used to protect Kerberos services and the\n- * credentials necessary to access those services. There is a one to\n- * one mapping of a service principal and the credentials necessary\n- * to access the service. Therefore, granting access to a service\n- * principal implicitly grants access to the credential necessary to\n- * establish a security context with the service principal. This\n- * applies regardless of whether the credentials are in a cache\n- * or acquired via an exchange with the KDC. The credential can\n- * be either a ticket granting ticket, a service ticket or a secret\n- * key from a key table.\n- * <p>\n@@ -56,10 +45,0 @@\n- * Granting this permission implies that the caller can use a cached\n- * credential (TGT, service ticket or secret key) within the context\n- * designated by the action. In the case of the TGT, granting this\n- * permission also implies that the TGT can be obtained by an\n- * Authentication Service exchange.\n- * <p>\n- * Granting this permission also implies creating {@link KerberosPrincipal}\n- * or {@link org.ietf.jgss.GSSName GSSName} without providing a Kerberos\n- * realm, as long as the permission's service principal is in this realm.\n- * <p>\n@@ -78,20 +57,3 @@\n- * For example, to specify the permission to access to the TGT to\n- * initiate a security context the permission is constructed as follows:\n- *\n- * <pre>\n- *     ServicePermission(\"krbtgt\/EXAMPLE.COM@EXAMPLE.COM\", \"initiate\");\n- * <\/pre>\n- * <p>\n- * To obtain a service ticket to initiate a context with the \"host\"\n- * service the permission is constructed as follows:\n- * <pre>\n- *     ServicePermission(\"host\/foo.example.com@EXAMPLE.COM\", \"initiate\");\n- * <\/pre>\n- * <p>\n- * For a Kerberized server the action is \"accept\". For example, the permission\n- * necessary to access and use the secret key of the  Kerberized \"host\"\n- * service (telnet and the likes)  would be constructed as follows:\n- *\n- * <pre>\n- *     ServicePermission(\"host\/foo.example.com@EXAMPLE.COM\", \"accept\");\n- * <\/pre>\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/java.security.jgss\/share\/classes\/javax\/security\/auth\/kerberos\/ServicePermission.java","additions":3,"deletions":41,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,5 +97,0 @@\n- * Finally, different mechanism providers might place different security\n- * restrictions on using GSS-API contexts. These will be documented by the\n- * mechanism provider. The application will need to ensure that it has the\n- * appropriate permissions if such checks are made in the mechanism layer.<p>\n- *\n@@ -247,6 +242,1 @@\n-     * established.<p>\n-     *\n-     * Some mechanism providers might require that the caller be granted\n-     * permission to initiate a security context. A failed permission check\n-     * might cause a {@link java.lang.SecurityException SecurityException}\n-     * to be thrown from this method.\n+     * established.\n@@ -313,5 +303,0 @@\n-     * Some mechanism providers might require that the caller be granted\n-     * permission to initiate a security context. A failed permission check\n-     * might cause a {@link java.lang.SecurityException SecurityException}\n-     * to be thrown from this method.<p>\n-     *\n@@ -386,5 +371,0 @@\n-     * Some mechanism providers might require that the caller be granted\n-     * permission to accept a security context. A failed permission check\n-     * might cause a {@link java.lang.SecurityException SecurityException}\n-     * to be thrown from this method.<p>\n-     *\n@@ -463,5 +443,0 @@\n-     * Some mechanism providers might require that the caller be granted\n-     * permission to accept a security context. A failed permission check\n-     * might cause a {@link java.lang.SecurityException SecurityException}\n-     * to be thrown from this method.<p>\n-     *\n","filename":"src\/java.security.jgss\/share\/classes\/org\/ietf\/jgss\/GSSContext.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -348,9 +348,1 @@\n-     * name, and lifetime.<p>\n-     *\n-     * GSS-API mechanism providers must impose a local access-control\n-     * policy on callers to prevent unauthorized callers from acquiring\n-     * credentials to which they are not entitled. The kinds of permissions\n-     * needed by different mechanism providers will be documented on a\n-     * per-mechanism basis. A failed permission check might cause a {@link\n-     * java.lang.SecurityException SecurityException} to be thrown from\n-     * this method.\n+     * name, and lifetime.\n@@ -384,8 +376,0 @@\n-     * GSS-API mechanism providers must impose a local access-control\n-     * policy on callers to prevent unauthorized callers from acquiring\n-     * credentials to which they are not entitled. The kinds of permissions\n-     * needed by different mechanism providers will be documented on a\n-     * per-mechanism basis. A failed permission check might cause a {@link\n-     * java.lang.SecurityException SecurityException} to be thrown from\n-     * this method. <p>\n-     *\n@@ -439,8 +423,0 @@\n-     * GSS-API mechanism providers must impose a local access-control\n-     * policy on callers to prevent unauthorized callers from acquiring\n-     * credentials to which they are not entitled. The kinds of permissions\n-     * needed by different mechanism providers will be documented on a\n-     * per-mechanism basis. A failed permission check might cause a {@link\n-     * java.lang.SecurityException SecurityException} to be thrown from\n-     * this method.<p>\n-     *\n@@ -490,6 +466,1 @@\n-     * side.\n-     *\n-     * Some mechanism providers might require that the caller be granted\n-     * permission to initiate a security context. A failed permission check\n-     * might cause a {@link java.lang.SecurityException SecurityException}\n-     * to be thrown from this method.<p>\n+     * side.<p>\n@@ -535,5 +506,0 @@\n-    * Some mechanism providers might require that the caller be granted\n-    * permission to accept a security context. A failed permission check\n-    * might cause a {@link java.lang.SecurityException SecurityException}\n-    * to be thrown from this method.\n-    *\n@@ -570,5 +536,0 @@\n-     * Some mechanism providers might require that the caller be granted\n-     * permission to initiate or accept a security context. A failed\n-     * permission check might cause a {@link java.lang.SecurityException\n-     * SecurityException} to be thrown from this method.\n-     *\n","filename":"src\/java.security.jgss\/share\/classes\/org\/ietf\/jgss\/GSSManager.java","additions":3,"deletions":42,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,11 +84,0 @@\n- * If a security manager is installed, in order to create a {@code GSSName}\n- * that contains a Kerberos name element without providing its realm,\n- * a {@link javax.security.auth.kerberos.ServicePermission ServicePermission}\n- * must be granted and the service principal of the permission must minimally\n- * be inside the Kerberos name element's realm. For example, if the result of\n- * {@link GSSManager#createName(String, Oid) createName(\"user\", NT_USER_NAME)}\n- * contains a Kerberos name element {@code user@EXAMPLE.COM}, then\n- * a {@code ServicePermission} with service principal\n- * {@code host\/www.example.com@EXAMPLE.COM} (and any action) must be granted.\n- * Otherwise, the creation will throw a {@link GSSException} containing the\n- * {@code GSSException.FAILURE} error code.\n","filename":"src\/java.security.jgss\/share\/classes\/org\/ietf\/jgss\/GSSName.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n- * application, given the right permissions, can purge the credentials in\n+ * application can purge the credentials in\n","filename":"src\/java.security.jgss\/share\/classes\/org\/ietf\/jgss\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,7 +126,0 @@\n-     * @throws  SecurityException  If a security manager, <i>s<\/i>, is present\n-     * and the caller's class loader is not the same as or an\n-     * ancestor of the class loader for the class of the\n-     * {@linkplain #getObject object} being serialized\n-     * and invocation of {@link SecurityManager#checkPackageAccess\n-     * s.checkPackageAccess()} denies access to the package\n-     * of that class.\n","filename":"src\/java.sql.rowset\/share\/classes\/javax\/sql\/rowset\/serial\/SerialJavaObject.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -623,8 +623,0 @@\n-     * <p>\n-     * This method checks to see that there is an {@code SQLPermission}\n-     * object  which grants the permission {@code setSyncFactory}\n-     * before allowing the method to succeed.  If a\n-     * {@code SecurityManager} exists and its\n-     * {@code checkPermission} method denies calling {@code setLogger},\n-     * this method throws a\n-     * {@code java.lang.SecurityException}.\n@@ -633,2 +625,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and its\n-     *   {@code checkPermission} method denies calling {@code setLogger}\n@@ -636,1 +626,0 @@\n-     * @see SecurityManager#checkPermission\n@@ -658,8 +647,0 @@\n-     * <p>\n-     * This method checks to see that there is an {@code SQLPermission}\n-     * object  which grants the permission {@code setSyncFactory}\n-     * before allowing the method to succeed.  If a\n-     * {@code SecurityManager} exists and its\n-     * {@code checkPermission} method denies calling {@code setLogger},\n-     * this method throws a\n-     * {@code java.lang.SecurityException}.\n@@ -670,2 +651,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and its\n-     *   {@code checkPermission} method denies calling {@code setLogger}\n@@ -673,2 +652,0 @@\n-     * @see SecurityManager#checkPermission\n-     * @see LoggingPermission\n@@ -712,8 +689,0 @@\n-     * <p>\n-     *  This method checks to see that there is an {@code SQLPermission}\n-     * object  which grants the permission {@code setSyncFactory}\n-     * before allowing the method to succeed.  If a\n-     * {@code SecurityManager} exists and its\n-     * {@code checkPermission} method denies calling {@code setJNDIContext},\n-     * this method throws a\n-     * {@code java.lang.SecurityException}.\n@@ -723,3 +692,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and its\n-     *  {@code checkPermission} method denies calling {@code setJNDIContext}\n-     * @see SecurityManager#checkPermission\n","filename":"src\/java.sql.rowset\/share\/classes\/javax\/sql\/rowset\/spi\/SyncFactory.java","additions":1,"deletions":35,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1357,7 +1357,0 @@\n-     * <p>\n-     * This method checks to see that there is an {@code SQLPermission}\n-     * object before allowing the method to proceed.  If a\n-     * {@code SecurityManager} exists and its\n-     * {@code checkPermission} method denies calling {@code abort},\n-     * this method throws a\n-     * {@code java.lang.SecurityException}.\n@@ -1367,4 +1360,1 @@\n-     * the {@code executor} is {@code null},\n-     * @throws java.lang.SecurityException if a security manager exists and its\n-     *    {@code checkPermission} method denies calling {@code abort}\n-     * @see SecurityManager#checkPermission\n+     * the {@code executor} is {@code null}\n@@ -1432,8 +1422,0 @@\n-     * <p>\n-     *\n-     * This method checks to see that there is an {@code SQLPermission}\n-     * object before allowing the method to proceed.  If a\n-     * {@code SecurityManager} exists and its\n-     * {@code checkPermission} method denies calling\n-     * {@code setNetworkTimeout}, this method throws a\n-     * {@code java.lang.SecurityException}.\n@@ -1454,3 +1436,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and its\n-     *    {@code checkPermission} method denies calling\n-     * {@code setNetworkTimeout}.\n@@ -1459,1 +1438,0 @@\n-     * @see SecurityManager#checkPermission\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Connection.java","additions":2,"deletions":24,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,4 +136,0 @@\n-     *<P>\n-     * If a security manager exists, its {@code checkPermission}\n-     * method is first called with a {@code SQLPermission(\"setLog\")}\n-     * permission to check that the caller is allowed to call {@code setLogWriter}.\n@@ -143,3 +139,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     * {@code checkPermission} method denies permission to set the log writer.\n-     * @see SecurityManager#checkPermission\n@@ -360,4 +353,0 @@\n-     * If a security manager exists, its {@code checkPermission}\n-     * method is first called with a {@code SQLPermission(\"deregisterDriver\")}\n-     * permission to check that the caller is allowed to deregister a JDBC Driver.\n-     * <p>\n@@ -374,4 +363,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     * {@code checkPermission} method denies permission to deregister a driver.\n-     *\n-     * @see SecurityManager#checkPermission\n@@ -488,4 +473,0 @@\n-     *<P>\n-     * If a security manager exists, its {@code checkPermission}\n-     * method is first called with a {@code SQLPermission(\"setLog\")}\n-     * permission to check that the caller is allowed to call {@code setLogStream}.\n@@ -495,3 +476,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     * {@code checkPermission} method denies permission to set the log stream.\n-     * @see SecurityManager#checkPermission\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/DriverManager.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,13 +32,0 @@\n- * The permission for which the {@code SecurityManager} will check\n- * when code that is running an application with a\n- * {@code SecurityManager} enabled, calls the\n- * {@code DriverManager.deregisterDriver} method,\n- * {@code DriverManager.setLogWriter} method,\n- * {@code DriverManager.setLogStream} (deprecated) method,\n- * {@code SyncFactory.setJNDIContext} method,\n- * {@code SyncFactory.setLogger} method,\n- * {@code Connection.setNetworkTimeout} method,\n- * or the {@code Connection.abort} method.\n- * If there is no {@code SQLPermission} object, these methods\n- * throw a {@code java.lang.SecurityException} as a runtime exception.\n- * <P>\n@@ -55,4 +42,0 @@\n- * <P>\n- * The following table lists all the possible {@code SQLPermission} target names.\n- * The table gives a description of what the permission allows\n- * and a discussion of the risks of granting code the permission.\n@@ -60,52 +43,3 @@\n- *\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">permission target name, what the permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- *\n- * <tbody>\n- * <tr>\n- *   <th scope=\"row\">setLog<\/th>\n- *   <td>Setting of the logging stream<\/td>\n- *   <td>This is a dangerous permission to grant.\n- * The contents of the log may contain usernames and passwords,\n- * SQL statements, and SQL data.<\/td>\n- * <\/tr>\n- * <tr>\n- * <th scope=\"row\">callAbort<\/th>\n- *   <td>Allows the invocation of the {@code Connection} method\n- *   {@code abort}<\/td>\n- *   <td>Permits an application to terminate a physical connection to a\n- *  database.<\/td>\n- * <\/tr>\n- * <tr>\n- * <th scope=\"row\">setSyncFactory<\/th>\n- *   <td>Allows the invocation of the {@code SyncFactory} methods\n- *   {@code setJNDIContext} and {@code setLogger}<\/td>\n- *   <td>Permits an application to specify the JNDI context from which the\n- *   {@code SyncProvider} implementations can be retrieved from and the logging\n- *   object to be used by the {@code SyncProvider} implementation.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- * <th scope=\"row\">setNetworkTimeout<\/th>\n- *   <td>Allows the invocation of the {@code Connection} method\n- *   {@code setNetworkTimeout}<\/td>\n- *   <td>Permits an application to specify the maximum period a\n- * {@code Connection} or\n- * objects created from the {@code Connection}\n- * will wait for the database to reply to any one request.<\/td>\n- * <tr>\n- * <th scope=\"row\">deregisterDriver<\/th>\n- *   <td>Allows the invocation of the {@code DriverManager}\n- * method {@code deregisterDriver}<\/td>\n- *   <td>Permits an application to remove a JDBC driver from the list of\n- * registered Drivers and release its resources.<\/td>\n- * <\/tr>\n- * <\/tbody>\n- * <\/table>\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n@@ -133,1 +67,0 @@\n-\n@@ -152,1 +85,0 @@\n-\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/SQLPermission.java","additions":4,"deletions":72,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,6 +93,0 @@\n- * <P>\n- * <b>NOTE:<\/b> The class {@code SQLPermission} was added in the\n- * Java 2 SDK, Standard Edition,\n- * version 1.3 release. This class is used to prevent unauthorized\n- * access to the logging stream associated with the {@code DriverManager},\n- * which may contain information such as table names, column data, and so on.\n@@ -106,4 +100,0 @@\n- *       <LI>{@code SQLPermission} class -- provides permission when code\n- *                   running within a Security Manager, such as an applet,\n- *                   attempts to set up a logging stream through the\n- *                   {@code DriverManager}\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/package-info.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -235,4 +235,0 @@\n-         *\n-         * @implNote\n-         * when the Java Security Manager is present, the JDK sets the value of\n-         * this feature to true and does not allow it to be turned off.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/XMLConstants.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,0 @@\n-     * @throws SecurityException if access to the resource is denied by the security manager\n@@ -144,1 +143,0 @@\n-     * @throws SecurityException if access to the resource is denied by the security manager\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogManager.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,8 +29,1 @@\n- * When a {@link java.lang.SecurityManager SecurityManager} set, this\n- * is the permission which will be checked when code invokes {@link\n- * VirtualMachine#attach VirtualMachine.attach} to attach to a target virtual\n- * machine.\n- * This permission is also checked when an {@link\n- * com.sun.tools.attach.spi.AttachProvider AttachProvider} is created.\n- *\n- * <p> An <code>AttachPermission<\/code> object contains a name (also referred\n+ * An <code>AttachPermission<\/code> object contains a name (also referred\n@@ -39,23 +32,0 @@\n- * The following table provides a summary description of what the\n- * permission allows, and discusses the risks of granting code the\n- * permission.\n- *\n- * <table class=\"striped\"><caption style=\"display:none\">Table shows permission\n- * target name, what the permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- * <tbody>\n- * <tr>\n- *   <th scope=\"row\">attachVirtualMachine<\/th>\n- *   <td>Ability to attach to another Java virtual machine and load agents\n- *       into that VM.\n- *   <\/td>\n- *   <td>This allows an attacker to control the target VM which can potentially\n- *       cause it to misbehave.\n- *   <\/td>\n- * <\/tr>\n@@ -63,16 +33,3 @@\n- * <tr>\n- *   <th scope=\"row\">createAttachProvider<\/th>\n- *   <td>Ability to create an <code>AttachProvider<\/code> instance.\n- *   <\/td>\n- *   <td>This allows an attacker to create an AttachProvider which can\n- *       potentially be used to attach to other Java virtual machines.\n- *   <\/td>\n- * <\/tr>\n- * <\/tbody>\n- *\n- * <\/table>\n-\n- * <p>\n- * Programmers do not normally create AttachPermission objects directly.\n- * Instead they are created by the security policy code based on reading\n- * the security policy file.\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/jdk.attach\/share\/classes\/com\/sun\/tools\/attach\/AttachPermission.java","additions":5,"deletions":48,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -177,6 +177,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link com.sun.tools.attach.AttachPermission AttachPermission}\n-     *          {@code (\"attachVirtualMachine\")}, or another permission\n-     *          required by the implementation.\n-     *\n@@ -230,6 +224,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link com.sun.tools.attach.AttachPermission AttachPermission}\n-     *          {@code (\"attachVirtualMachine\")}, or another permission\n-     *          required by the implementation.\n-     *\n","filename":"src\/jdk.attach\/share\/classes\/com\/sun\/tools\/attach\/VirtualMachine.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,5 +85,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link com.sun.tools.attach.AttachPermission AttachPermission}\n-     *          (\"{@code createAttachProvider}\")\n@@ -135,6 +130,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link com.sun.tools.attach.AttachPermission AttachPermission}\n-     *          (\"{@code attachVirtualMachine}\"), or other permission\n-     *          required by the implementation.\n-     *\n@@ -171,6 +160,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link com.sun.tools.attach.AttachPermission AttachPermission}\n-     *          (\"{@code attachVirtualMachine}\"), or other permission\n-     *          required by the implementation.\n-     *\n","filename":"src\/jdk.attach\/share\/classes\/com\/sun\/tools\/attach\/spi\/AttachProvider.java","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,2 +87,2 @@\n- * The class extends {@link SecureLookupSupplier} for security-checked access to\n- * the {@code MethodHandles.Lookup} object it carries. This lookup should be used\n+ * The class extends {@link SecureLookupSupplier} to encapsulate the {@code\n+ * MethodHandles.Lookup} object. This lookup should be used\n@@ -173,5 +173,0 @@\n-     * @throws SecurityException if the descriptor's lookup isn't the\n-     * {@link MethodHandles#publicLookup()}, and a security manager is present,\n-     * and a check for {@code RuntimePermission(\"dynalink.getLookup\")} fails.\n-     * This is necessary as changing the operation in the call site descriptor\n-     * allows fabrication of descriptors for arbitrary operations with the lookup.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/CallSiteDescriptor.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -420,3 +420,0 @@\n-     * <li>did not have the runtime permission named\n-     * {@link GuardingDynamicLinkerExporter#AUTOLOAD_PERMISSION_NAME} in a\n-     * system with a security manager, or<\/li>\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/DynamicLinkerFactory.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,6 @@\n- * Provides security-checked access to a {@code MethodHandles.Lookup} object.\n- * See {@link #getLookup()} for details.\n+ * Encapsulates a {@code MethodHandles.Lookup} object.\n+ *\n+ * @apiNote\n+ * SecureLookupSupplier provided a way in older JDK releases to guard access to\n+ * a {@code MethodHandles.Lookup} object when running with a security manager set.\n+ *\n@@ -49,1 +53,1 @@\n-     * Creates a new secure lookup supplier, securing the passed lookup.\n+     * Creates a new secure lookup supplier for the given lookup.\n@@ -60,3 +64,0 @@\n-     * @throws SecurityException if the secured lookup isn't the\n-     * {@link MethodHandles#publicLookup()}, and a security manager is present,\n-     * and a check for {@code RuntimePermission(\"dynalink.getLookup\")} fails.\n@@ -74,2 +75,1 @@\n-     * Returns the value of {@link #getLookup()} without a security check. Can\n-     * be used by subclasses to access the lookup quickly.\n+     * Returns the lookup secured by this {@code SecureLookupSupplier}.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/SecureLookupSupplier.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,5 +42,1 @@\n- * factories can discover them using the {@link ServiceLoader} mechanism. Note\n- * that instantiating this class is tied to a security check for the\n- * {@code RuntimePermission(\"dynalink.exportLinkersAutomatically\")} when a\n- * security manager is present, to ensure that only trusted runtimes can\n- * automatically export their linkers into other runtimes.\n+ * factories can discover them using the {@link ServiceLoader} mechanism.\n@@ -53,2 +49,3 @@\n-     * Granting this permission to a language runtime allows it to export its\n-     * linkers for automatic loading into other language runtimes.\n+     * @apiNote\n+     * This permission cannot be used for controlling access to resources\n+     * anymore as the Security Manager is no longer supported.\n@@ -61,7 +58,1 @@\n-     * Creates a new linker exporter. If there is a security manager installed\n-     * checks for the\n-     * {@code RuntimePermission(\"dynalink.exportLinkersAutomatically\")} runtime\n-     * permission. This ensures only language runtimes granted this permission\n-     * will be allowed to export their linkers for automatic loading.\n-     * @throws SecurityException if the necessary runtime permission is not\n-     * granted.\n+     * Creates a new linker exporter.\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/linker\/GuardingDynamicLinkerExporter.java","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,3 +191,0 @@\n-     * @throws SecurityException if a security manager is installed and a\n-     *         recursive {@link java.io.FilePermission} \"{@code read}\" of the\n-     *         rootDirectory is denied\n@@ -236,3 +233,0 @@\n-     * @throws SecurityException if a security manager is installed and a\n-     *         recursive {@link java.io.FilePermission} \"{@code read}\" of the\n-     *         rootDirectory is denied\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/SimpleFileServer.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,4 +85,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it denies\n-     *          {@link RuntimePermission}{@code (\"httpServerProvider\")}\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/spi\/HttpServerProvider.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,5 +53,0 @@\n-     *\n-     * @throws java.lang.SecurityException if a security manager has been\n-     * installed and it denies {@link JDIPermission}\n-     * (\"{@code virtualMachineManager}\") or other unspecified\n-     * permissions required by the implementation.\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/jdi\/Bootstrap.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,6 +29,0 @@\n- * The {@code JDIPermission} class represents access rights to\n- * the {@code VirtualMachineManager}.  This is the permission\n- * which the SecurityManager will check when code that is running with\n- * a SecurityManager requests access to the VirtualMachineManager, as\n- * defined in the Java Debug Interface (JDI) for the Java platform.\n- * <P>\n@@ -38,4 +32,0 @@\n- * <P>\n- * The following table provides a summary description of what the\n- * permission allows, and discusses the risks of granting code the\n- * permission.\n@@ -43,30 +33,3 @@\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">Table shows permission target name, what the\n- * permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- *\n- * <tbody>\n- * <tr>\n- *   <th scope=\"row\">virtualMachineManager<\/th>\n- *   <td>Ability to inspect and modify the JDI objects in the\n- *   {@code VirtualMachineManager}\n- *   <\/td>\n- *   <td>This allows an attacker to control the\n- *   {@code VirtualMachineManager} and cause the system to\n- *   misbehave.\n- *   <\/td>\n- * <\/tr>\n- * <\/tbody>\n- *\n- * <\/table>\n- *\n- * <p>\n- * Programmers do not normally create JDIPermission objects directly.\n- * Instead they are created by the security policy code based on reading\n- * the security policy file.\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/jdi\/JDIPermission.java","additions":4,"deletions":41,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -139,2 +139,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkRead} method denies read access to the file.\n@@ -143,1 +141,0 @@\n-     * @see java.lang.SecurityManager#checkRead(java.lang.String)\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Configuration.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,3 +95,0 @@\n-     * @throws SecurityException if a security manager exists and the caller does\n-     *         not have {@code FlightRecorderPermission(\"registerEvent\")}\n-     *\n@@ -203,2 +200,0 @@\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         does not have {@code FlightRecorderPermission(\"registerEvent\")}\n@@ -222,2 +217,0 @@\n-     * @throws SecurityException if a security manager exists and the caller does\n-     *         not have {@code FlightRecorderPermission(\"registerEvent\")}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventFactory.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,2 +120,0 @@\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         does not have {@code FlightRecorderPermission(\"registerEvent\")}\n@@ -141,3 +139,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         does not have {@code FlightRecorderPermission(\"registerEvent\")}\n@@ -162,3 +157,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and the caller does\n-     *         not have {@code FlightRecorderPermission(\"accessFlightRecorder\")}\n@@ -166,1 +158,1 @@\n-    public static FlightRecorder getFlightRecorder() throws IllegalStateException, SecurityException {\n+    public static FlightRecorder getFlightRecorder() throws IllegalStateException {\n@@ -215,2 +207,0 @@\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         does not have {@code FlightRecorderPermission(\"registerEvent\")}\n@@ -218,1 +208,1 @@\n-    public static void addPeriodicEvent(Class<? extends Event> eventClass, Runnable hook) throws SecurityException {\n+    public static void addPeriodicEvent(Class<? extends Event> eventClass, Runnable hook) {\n@@ -237,2 +227,0 @@\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         does not have {@code FlightRecorderPermission(\"registerEvent\")}\n@@ -240,1 +228,1 @@\n-    public static boolean removePeriodicEvent(Runnable hook) throws SecurityException {\n+    public static boolean removePeriodicEvent(Runnable hook) {\n@@ -272,4 +260,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         does not have\n-     *         {@code FlightRecorderPermission(\"accessFlightRecorder\")}\n@@ -294,4 +278,0 @@\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         does not have\n-     *         {@code FlightRecorderPermission(\"accessFlightRecorder\")}\n-     *\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorder.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,3 +43,0 @@\n- * <p>\n- * The following table provides a summary of what the permission\n- * allows, and the risks of granting code the permission.\n@@ -47,37 +44,3 @@\n- * <table class=\"striped\">\n- * <caption style=\"display:none\">Table shows permission target name,\n- *      what the permission allows, and associated risks<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\">Permission Target Name<\/th>\n- * <th scope=\"col\">What the Permission Allows<\/th>\n- * <th scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- * <\/thead>\n- *\n- * <tbody>\n- * <tr>\n- * <th scope=\"row\">{@code accessFlightRecorder}<\/th>\n- * <td>Ability to create a Flight Recorder instance, register callbacks to\n- * monitor the Flight Recorder life cycle, and control an existing instance\n- * of Flight Recorder, which can record and dump runtime information, such as\n- * stack traces, class names, and data in user defined events.<\/td>\n- * <td>A malicious user may be able to extract sensitive information that is stored in\n- * events and interrupt Flight Recorder by installing listeners or hooks that\n- * never finish.<\/td>\n- * <\/tr>\n- * <tr>\n- * <th scope=\"row\">{@code registerEvent}<\/th>\n- * <td>Ability to register events, write data to the Flight Recorder buffers,\n- * and execute code in a callback function for periodic events.\n- *\n- * <td>A malicious user may be able to write sensitive information to Flight\n- * Recorder buffers.<\/td>\n- * <\/tr>\n- * <\/tbody>\n- * <\/table>\n- *\n- * <p>\n- * Typically, programmers do not create {@code FlightRecorderPermission} objects\n- * directly. Instead the objects are created by the security policy code that is based on\n- * reading the security policy file.\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorderPermission.java","additions":4,"deletions":41,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,3 +99,0 @@\n-     * @throws SecurityException If a security manager is used and\n-     *         FlightRecorderPermission \"accessFlightRecorder\" is not set.\n-     *\n@@ -126,3 +123,0 @@\n-     *\n-     * @throws SecurityException If a security manager is used and\n-     *         FlightRecorderPermission \"accessFlightRecorder\" is not set.\n@@ -153,3 +147,0 @@\n-     * @throws SecurityException if a security manager is used and\n-     *         FlightRecorderPermission \"accessFlightRecorder\" is not set.\n-     *\n@@ -210,4 +201,0 @@\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         doesn't have {@code FilePermission} to write to the destination\n-     *         path\n-     *\n@@ -378,3 +365,0 @@\n-     * @throws SecurityException if a security manager exists and the caller doesn't\n-     *         have {@code FilePermission} to write to the destination path\n-     *\n@@ -476,4 +460,0 @@\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         doesn't have {@code FilePermission} to read, write, and delete the\n-     *         {@code destination} file\n-     *\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Recording.java","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,4 +101,0 @@\n-     *\n-     * @throws SecurityException if a security manager is present and the caller\n-     *         doesn't have {@code FlightRecorderPermission(\"registerEvent\")}\n-     *\n@@ -140,3 +136,0 @@\n-     *\n-     * @throws SecurityException if a security manager is present and the caller\n-     *         doesn't have {@code FlightRecorderPermission(\"registerEvent\")}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/ValueDescriptor.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,4 +115,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         does not have\n-     *         {@code FlightRecorderPermission(\"accessFlightRecorder\")}\n@@ -147,4 +143,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkRead} method denies read access to the directory, or\n-     *         files in the directory.\n@@ -179,3 +171,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkRead} method denies read access to the file\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/EventStream.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,3 +80,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkRead} method denies read access to the file.\n@@ -231,4 +228,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *                           {@code checkWrite} method denies write access to the\n-     *                           file\n-     *\n@@ -265,3 +258,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code checkRead} method denies read access to the file.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingFile.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,4 +95,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and the caller\n-     *         does not have\n-     *         {@code FlightRecorderPermission(\"accessFlightRecorder\")}\n@@ -153,3 +149,0 @@\n-     * @throws SecurityException if a security manager is used and\n-     *         FlightRecorderPermission \"accessFlightRecorder\" is not set.\n-     *\n@@ -435,3 +428,0 @@\n-     * @throws SecurityException if a security manager exists and the caller doesn't\n-     *         have {@code FilePermission} to write to the destination path\n-     *\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingStream.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -189,3 +189,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n-     *\n@@ -194,1 +191,1 @@\n-    long newRecording() throws IllegalStateException, SecurityException;\n+    long newRecording() throws IllegalStateException;\n@@ -210,3 +207,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n-     *\n@@ -238,3 +232,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n-     *\n@@ -243,1 +234,1 @@\n-    long cloneRecording(long recordingId, boolean stop) throws IllegalArgumentException, SecurityException;\n+    long cloneRecording(long recordingId, boolean stop) throws IllegalArgumentException;\n@@ -255,3 +246,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n-     *\n@@ -260,1 +248,1 @@\n-    void startRecording(long recordingId) throws IllegalStateException, SecurityException;\n+    void startRecording(long recordingId) throws IllegalStateException;\n@@ -273,2 +261,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n@@ -278,1 +264,1 @@\n-    boolean stopRecording(long recordingId) throws IllegalArgumentException, IllegalStateException, SecurityException;\n+    boolean stopRecording(long recordingId) throws IllegalArgumentException, IllegalStateException;\n@@ -291,2 +277,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n@@ -380,3 +364,0 @@\n-     *\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n@@ -397,2 +378,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n@@ -418,2 +397,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"monitor\")}\n@@ -436,3 +413,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"monitor\")}\n-     *\n@@ -459,2 +433,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"monitor\")}\n@@ -473,2 +445,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n@@ -488,2 +458,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n@@ -534,2 +502,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"control\")}\n@@ -554,4 +520,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists, and the\n-     *         caller does not have {@code ManagementPermission(\"control\")} or an\n-     *         option contains a file that the caller does not have permission to\n-     *         operate on.\n@@ -572,3 +534,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code  ManagementPermission(\"monitor\")}\n-     *\n@@ -590,3 +549,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"monitor\")}\n-     *\n@@ -608,3 +564,0 @@\n-     * @throws java.lang.SecurityException if a security manager exists and the\n-     *         caller does not have {@code ManagementPermission(\"monitor\")}\n-     *\n@@ -638,5 +591,0 @@\n-     * @throws SecurityException if a security manager exists and its\n-     *         {@code SecurityManager.checkWrite(java.lang.String)} method denies\n-     *         write access to the named file or the caller does not have\n-     *         {@code ManagmentPermission(\"control\")}\n-     *\n@@ -646,1 +594,1 @@\n-    void copyTo(long recordingId, String outputFile) throws IOException, SecurityException;\n+    void copyTo(long recordingId, String outputFile) throws IOException;\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/FlightRecorderMXBean.java","additions":6,"deletions":58,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -178,4 +178,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *                           {@code checkRead} method denies read access to the\n-     *                           directory, or files in the directory.\n@@ -203,4 +199,0 @@\n-     *\n-     * @throws SecurityException if a security manager exists and its\n-     *                           {@code checkRead} method denies read access to the\n-     *                           directory, or files in the directory.\n@@ -649,3 +641,0 @@\n-     * @throws SecurityException if a security manager exists and the caller doesn't\n-     *         have {@code FilePermission} to write to the destination path\n-     *\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/RemoteRecordingStream.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,5 +72,0 @@\n-     * @throws SecurityException\n-     *         If a security manager exists and its {@link\n-     *         java.lang.SecurityManager#checkWrite(java.lang.String)}\n-     *         method denies write access to the named file\n-     *         or the caller does not have ManagmentPermission(\"control\").\n@@ -116,4 +111,0 @@\n-     *\n-     * @throws  java.lang.SecurityException\n-     *     if a security manager exists and the caller does not have\n-     *     ManagementPermission(\"control\").\n@@ -145,5 +136,0 @@\n-     * @throws SecurityException\n-     *         if a security manager is set and its {@link\n-     *         SecurityManager#checkWrite(java.lang.String)} method denies write\n-     *         access to the file or {@link java.lang.management.ManagementPermission\n-     *         ManagementPermission(\"control\")} is denied\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/HotSpotDiagnosticMXBean.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -281,4 +281,0 @@\n-     * @throws SecurityException if a security manager\n-     *         exists and the caller does not have\n-     *         ManagementPermission(\"control\").\n-     *\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/ThreadMXBean.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,4 @@\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n+ *\n","filename":"src\/jdk.net\/share\/classes\/jdk\/net\/NetworkPermission.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,5 +53,0 @@\n- * <p>\n- * When a security manager is installed, some non-standard socket options\n- * may require a security permission before being set or get.\n- * The details are specified in {@link ExtendedSocketOptions}. No permission\n- * is required for {@link java.net.StandardSocketOptions}.\n@@ -93,3 +88,0 @@\n-     * @throws SecurityException if a security manager is set and the\n-     *         caller does not have any required permission.\n-     *\n@@ -122,3 +114,0 @@\n-     * @throws SecurityException if a security manager is set and the\n-     *         caller does not have any required permission.\n-     *\n@@ -155,3 +144,0 @@\n-     * @throws SecurityException if a security manager is set and the\n-     *         caller does not have any required permission.\n-     *\n@@ -184,3 +170,0 @@\n-     * @throws SecurityException if a security manager is set and the\n-     *         caller does not have any required permission.\n-     *\n@@ -216,3 +199,0 @@\n-     * @throws SecurityException if a security manager is set and the\n-     *         caller does not have any required permission.\n-     *\n@@ -246,3 +226,0 @@\n-     * @throws SecurityException if a security manager is set and the\n-     *         caller does not have any required permission.\n-     *\n","filename":"src\/jdk.net\/share\/classes\/jdk\/net\/Sockets.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,6 +132,0 @@\n-     * <p> If there is a security manager set then its\n-     * {@link SecurityManager#checkRead(FileDescriptor) checkRead} and\n-     * {@link SecurityManager#checkWrite(FileDescriptor) checkWrite} methods\n-     * are invoked to check that the caller has permission to both read from and\n-     * write to the file descriptor. <\/p>\n-     *\n@@ -150,2 +144,0 @@\n-     * @throws SecurityException\n-     *         If denied by the security manager\n","filename":"src\/jdk.net\/share\/classes\/jdk\/nio\/Channels.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,4 +213,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed\n-     *          and it does not permit access to the given remote peer\n-     *\n@@ -283,5 +279,0 @@\n-     *\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and its\n-     *          {@link SecurityManager#checkListen checkListen} method denies\n-     *          the operation\n@@ -402,5 +393,0 @@\n-     * <P> If a security manager has been installed then this method verifies\n-     * that its {@link java.lang.SecurityManager#checkConnect checkConnect}\n-     * method permits connecting to the address and port number of the given\n-     * remote peer.\n-     *\n@@ -447,4 +433,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed\n-     *          and it does not permit access to the given remote peer\n-     *\n@@ -512,4 +494,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed\n-     *          and it does not permit access to the given remote peer\n-     *\n","filename":"src\/jdk.sctp\/share\/classes\/com\/sun\/nio\/sctp\/SctpChannel.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -239,5 +239,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and its {@link\n-     *          java.lang.SecurityManager#checkListen(int) checkListen} method\n-     *          denies the operation\n-     *\n@@ -276,5 +271,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and its {@link\n-     *          java.lang.SecurityManager#checkListen(int) checkListen} method\n-     *          denies the operation\n-     *\n@@ -570,5 +560,0 @@\n-     * <P> If a security manager has been installed then for each new association\n-     * setup this method verifies that the associations source address and port\n-     * number are permitted by the security manager's {@link\n-     * java.lang.SecurityManager#checkAccept(String,int) checkAccept} method.\n-     *\n@@ -623,4 +608,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it does not permit\n-     *          new associations to be accepted from the message's sender\n-     *\n@@ -672,5 +653,0 @@\n-     * <P> If a security manager has been installed then for each new association\n-     * setup this method verifies that the given remote peers address and port\n-     * number are permitted by the security manager's {@link\n-     * java.lang.SecurityManager#checkConnect(String,int) checkConnect} method.\n-     *\n@@ -711,4 +687,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it does not permit\n-     *          new associations to be setup with the messages's address\n-     *\n","filename":"src\/jdk.sctp\/share\/classes\/com\/sun\/nio\/sctp\/SctpMultiChannel.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,5 +120,0 @@\n-     * <P> If a security manager has been installed then for each new\n-     * association this method verifies that the address and port number of the\n-     * assocaitions's remote peer are permitted by the security manager's {@link\n-     * java.lang.SecurityManager#checkAccept(String,int) checkAccept} method.\n-     *\n@@ -145,4 +140,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and it does not permit\n-     *          access to the remote peer of the new association\n-     *\n@@ -179,5 +170,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and its {@link\n-     *          java.lang.SecurityManager#checkListen(int) checkListen} method\n-     *          denies the operation\n-     *\n@@ -234,5 +220,0 @@\n-     * @throws  SecurityException\n-     *          If a security manager has been installed and its {@link\n-     *          java.lang.SecurityManager#checkListen(int) checkListen} method\n-     *          denies the operation\n-     *\n","filename":"src\/jdk.sctp\/share\/classes\/com\/sun\/nio\/sctp\/SctpServerChannel.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -138,3 +138,0 @@\n-     *\n-     * @throws SecurityException if the caller does not have permission\n-     *                           to refresh the {@code Configuration}\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/login\/ConfigFile.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.net.SocketPermission;\n@@ -258,41 +257,0 @@\n- * <dl>\n- * <dt><b>Note:<\/b> <\/dt>\n- * <dd>When a {@link SecurityManager} is active then an application\n- *     that creates a {@link LoginContext} and uses a {@link LoginModule}\n- *     must be granted certain permissions.\n- *     <p>\n- *     If the application creates a login context using an <em>installed<\/em>\n- *     {@link Configuration} then the application must be granted the\n- *     {@link AuthPermission} to create login contexts.\n- *     For example, the following security policy allows an application in\n- *     the user's current directory to instantiate <em>any<\/em> login context:\n- *     <pre>\n- *\n- *     grant codebase \"file:${user.dir}\/\" {\n- *         permission javax.security.auth.AuthPermission \"createLoginContext.*\";\n- *     };\n- *     <\/pre>\n- *\n- *     Alternatively, if the application creates a login context using a\n- *     <em>caller-specified<\/em> {@link Configuration} then the application\n- *     must be granted the permissions required by the {@link LoginModule}.\n- *     <em>This<\/em> module requires the following two permissions:\n- *     <ul>\n- *     <li> The {@link SocketPermission} to connect to an LDAP server.\n- *     <li> The {@link AuthPermission} to modify the set of {@link Principal}s\n- *          associated with a {@link Subject}.\n- *     <\/ul>\n- *     <p>\n- *     For example, the following security policy grants an application in the\n- *     user's current directory all the permissions required by this module:\n- *     <pre>\n- *\n- *     grant codebase \"file:${user.dir}\/\" {\n- *         permission java.net.SocketPermission \"*:389\", \"connect\";\n- *         permission java.net.SocketPermission \"*:636\", \"connect\";\n- *         permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n- *     };\n- *     <\/pre>\n- * <\/dd>\n- * <\/dl>\n- *\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/LdapLoginModule.java","additions":1,"deletions":43,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -42,4 +42,0 @@\n-     * If there is a security manager, an {@link InquireSecContextPermission}\n-     * with the name {@code type.mech} must be granted. Otherwise, this could\n-     * result in a {@link SecurityException}.\n-     * <p>\n@@ -73,3 +69,0 @@\n-     * @throws SecurityException if a security manager exists and a proper\n-     *   {@link InquireSecContextPermission} is not granted.\n-     * @see InquireSecContextPermission\n","filename":"src\/jdk.security.jgss\/share\/classes\/com\/sun\/security\/jgss\/ExtendedGSSContext.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,4 +31,1 @@\n- * This class is used to protect various attributes of an established\n- * GSS security context that can be accessed using the\n- * {@link com.sun.security.jgss.ExtendedGSSContext#inquireSecContext}\n- * method.\n+ * This class is for GSS security context permissions.\n@@ -38,0 +35,4 @@\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources\n+ * as the Security Manager is no longer supported.\n+ *\n","filename":"src\/jdk.security.jgss\/share\/classes\/com\/sun\/security\/jgss\/InquireSecContextPermission.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -116,0 +116,3 @@\n+runtime\/Dictionary\/CleanProtectionDomain.java 8341916 generic-all\n+runtime\/Dictionary\/ProtectionDomainCacheTest.java 8341916 generic-all\n+runtime\/logging\/ProtectionDomainVerificationTest.java 8341916 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4165973\n- * @summary Attempt to read inaccessible property can produce\n- *          exception of the wrong type.\n- * @author Tom Rodriguez\n- *\n- * @modules java.rmi\n- * @run main\/othervm -Djava.security.manager=allow compiler.exceptions.ExceptionInInit\n- *\/\n-\n-package compiler.exceptions;\n-\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n-public class ExceptionInInit {\n-\n-    public static void main(String[] args) {\n-\n-        Test test = null;\n-\n-        try {\n-            System.setSecurityManager(new java.rmi.RMISecurityManager());\n-            Test.showTest();\n-        } catch (ExceptionInInitializerError e) {\n-        }\n-    }\n-\n-    public static class FooBar {\n-        static String test = \"test\";\n-        FooBar(String test) {\n-            this.test = test;\n-        }\n-    }\n-\n-    public static class Test extends FooBar {\n-\n-        \/*\n-         * An AccessControlException is thrown in the static initializer of the\n-         * class FooBar. This exception should produce an ExceptionInInitializer\n-         * error. Instead it causes a more cryptic ClassNotFound error.\n-         *\n-         * The following is an excerpt from the output from java.security.debug=all\n-         *\n-         * access: access denied (java.util.PropertyPermission test.src read)\n-         * java.lang.Exception: Stack trace\n-         *         at java.lang.Thread.dumpStack(Thread.java:938)\n-         *         at java.security.AccessControlContext.checkPermission(AccessControlContext.java:184)\n-         *         at java.security.AccessController.checkPermission(AccessController.java:402)\n-         *         at java.lang.SecurityManager.checkPermission(SecurityManager.java:516)\n-         *         at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1035)\n-         *         at java.lang.System.getProperty(System.java:441)\n-         *         at sun.security.action.GetPropertyAction.run(GetPropertyAction.java:73)\n-         *         at java.security.AccessController.doPrivileged(Native Method)\n-         *         at ExceptionInInit$Test.&#60clinit>(ExceptionInInit.java:33)\n-         *         at ExceptionInInit.main(ExceptionInInit.java:18)\n-         * access: domain that failed ProtectionDomain (file:\/tmp\/exceptionInInit\/<no certificates>)\n-         *\n-         * The following exception is occurring when this test program tries\n-         * to access the test.src property.\n-         *\/\n-        private static String test =\n-            AccessController.doPrivileged((PrivilegedAction<String>)() -> System.getProperty(\"test.src\", \".\"));\n-\n-        Test(String test) {\n-            super(test);\n-        }\n-        public static void showTest() {\n-            System.err.println(test);\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/ExceptionInInit.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -1,197 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8136421\n- * @requires vm.jvmci\n- * @library \/test\/lib \/\n- * @library common\/patches\n- * @modules java.base\/jdk.internal.misc\n- * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n- * @build jdk.internal.vm.ci\/jdk.vm.ci.hotspot.CompilerToVMHelper\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions\n- *      -XX:+EnableJVMCI\n- *      compiler.jvmci.SecurityRestrictionsTest\n- *      NO_SEC_MAN\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions\n- *      -XX:+EnableJVMCI\n- *      -Djava.security.manager=allow\n- *      compiler.jvmci.SecurityRestrictionsTest\n- *      NO_PERM\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions\n- *      -XX:+EnableJVMCI\n- *      -Djava.security.manager=allow\n- *      compiler.jvmci.SecurityRestrictionsTest\n- *      ALL_PERM\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions\n- *      -XX:+EnableJVMCI -XX:-UseJVMCICompiler\n- *      -Djava.security.manager=allow\n- *      compiler.jvmci.SecurityRestrictionsTest\n- *      NO_JVMCI_ACCESS_PERM\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions\n- *      -XX:-EnableJVMCI -XX:-UseJVMCICompiler\n- *      compiler.jvmci.SecurityRestrictionsTest\n- *      NO_JVMCI\n- *\/\n-\n-package compiler.jvmci;\n-\n-import jdk.test.lib.Utils;\n-\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-import java.util.PropertyPermission;\n-import java.util.function.Consumer;\n-\n-public class SecurityRestrictionsTest {\n-\n-    public static void main(String[] args) {\n-        try {\n-            \/\/ to init Utils before call SecurityManager\n-            Class.forName(Utils.class.getName(), true,\n-                    Utils.class.getClassLoader());\n-        } catch (ClassNotFoundException e) {\n-            throw new Error(\"[TEST BUG]: jdk.test.lib.Utils not found\", e);\n-        }\n-        try {\n-            TestCase mode = TestCase.valueOf(args[0]);\n-            mode.run();\n-        } catch (IllegalArgumentException e) {\n-            throw new Error(\"[TEST BUG]: Unknown mode \" + args[0], e);\n-        }\n-    }\n-\n-    private enum TestCase {\n-        NO_SEC_MAN,\n-        NO_JVMCI {\n-            @Override\n-            public Class<? extends Throwable> getExpectedException() {\n-                return Error.class;\n-            }\n-        },\n-        ALL_PERM {\n-            @Override\n-            public SecurityManager getSecurityManager() {\n-                return new SecurityManager() {\n-                    @Override\n-                    public void checkPermission(Permission perm) {\n-                    }\n-                };\n-            }\n-        },\n-        NO_PERM {\n-            @Override\n-            public SecurityManager getSecurityManager() {\n-                return new SecurityManager();\n-            }\n-\n-            @Override\n-            public Class<? extends Throwable> getExpectedException() {\n-                return AccessControlException.class;\n-            }\n-        },\n-        NO_JVMCI_ACCESS_PERM {\n-            @Override\n-            public SecurityManager getSecurityManager() {\n-                return new SecurityManager() {\n-                    @Override\n-                    public void checkPermission(Permission perm) {\n-                        if (isJvmciPermission(perm)) {\n-                            super.checkPermission(perm);\n-                        }\n-                    }\n-\n-                    @Override\n-                    public void checkPropertyAccess(String key) {\n-                        if (key.startsWith(JVMCI_PROP_START)) {\n-                            super.checkPropertyAccess(key);\n-                        }\n-                    }\n-                };\n-            }\n-\n-            private boolean isJvmciPermission(Permission perm) {\n-                String name = perm.getName();\n-                boolean isJvmciRuntime = perm instanceof RuntimePermission\n-                        && (JVMCI_SERVICES.equals(name)\n-                            || name.startsWith(JVMCI_RT_PERM_START));\n-                boolean isJvmciProperty = perm instanceof PropertyPermission\n-                        && name.startsWith(JVMCI_PROP_START);\n-                return isJvmciRuntime || isJvmciProperty;\n-            }\n-\n-            @Override\n-            public Class<? extends Throwable> getExpectedException() {\n-                return AccessControlException.class;\n-            }\n-        };\n-\n-        public void run() {\n-            System.setSecurityManager(getSecurityManager());\n-            Consumer<Throwable> exceptionCheck = e -> {\n-                if (e == null) {\n-                    if (getExpectedException() != null) {\n-                        String message = name() + \": Didn't get expected exception \"\n-                                + getExpectedException();\n-                        throw new AssertionError(message);\n-                    }\n-                } else {\n-                    String message = name() + \": Got unexpected exception \"\n-                            + e.getClass().getSimpleName();\n-                    if (getExpectedException() == null){\n-                        throw new AssertionError(message, e);\n-                    }\n-\n-                    Throwable t = e;\n-                    while (t.getCause() != null) {\n-                        t = t.getCause();\n-                    }\n-                    if (!getExpectedException().isAssignableFrom(t.getClass())) {\n-                        message += \" instead of \" + getExpectedException()\n-                                .getSimpleName();\n-                        throw new AssertionError(message, e);\n-                    }\n-                }\n-            };\n-            Utils.runAndCheckException(() -> {\n-                \/\/ CompilerToVM::<cinit> provokes CompilerToVM::<init>\n-                Class.forName(\"jdk.vm.ci.hotspot.CompilerToVMHelper\");\n-            }, exceptionCheck);\n-        }\n-\n-        public SecurityManager getSecurityManager() {\n-            return null;\n-        }\n-\n-        public Class<? extends Throwable> getExpectedException() {\n-            return null;\n-        }\n-\n-        private static final String JVMCI_RT_PERM_START\n-                = \"accessClassInPackage.jdk.vm.ci\";\n-        private static final String JVMCI_SERVICES = \"jvmciServices\";\n-        private static final String JVMCI_PROP_START = \"jvmci.\";\n-\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/SecurityRestrictionsTest.java","additions":0,"deletions":197,"binary":false,"changes":197,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ Host and Host$Member will be loaded by a custom loader with different\n-\/\/ protection domains.\n-\n-public class Host {\n-\n-    private static int forNestmatesOnly = 1;\n-\n-    public static class Member {\n-        \/\/ We need our static initializer to ensure our CP reference\n-        \/\/ to Host is resolved by the main thread.\n-        static final Class<?> hostClass = Host.class;\n-\n-        int id;\n-\n-        \/\/ Executing, or JIT compiling, this method will result in\n-        \/\/ a nestmate access check.\n-        public Member() {\n-            id = forNestmatesOnly++;\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/protectionDomain\/Host.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,124 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8261395\n- * @summary Test the code paths when a nest-host and nest-member class are in\n- *          different protection domains and the compiler thread needs to\n- *          perform a nestmate access check.\n- * @comment We use WB to force-compile a constructor to recreate the original\n- *          failure scenario, so only run when we have \"normal\" compiler flags.\n- * @requires vm.compMode == \"Xmixed\" &\n- *           vm.compiler2.enabled &\n- *           (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)\n- * @library \/test\/lib \/\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @compile Host.java\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n- *                   -Xlog:class+nestmates=trace,protectiondomain=trace\n- *                   -Djava.security.manager=allow\n- *                   TestDifferentProtectionDomains\n- *\/\n-\n-import java.lang.reflect.Constructor;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.nio.file.Path;\n-import java.security.ProtectionDomain;\n-\n-import compiler.whitebox.CompilerWhiteBoxTest;\n-import jdk.test.whitebox.WhiteBox;\n-\n-public class TestDifferentProtectionDomains {\n-\n-    static final String TARGET = \"Host\";\n-\n-    \/\/ We need a custom classloader so that we can\n-    \/\/ use a different protection domain for our target classes.\n-\n-    static class CustomLoader extends ClassLoader {\n-\n-        CustomLoader(ClassLoader parent) {\n-            super(parent);\n-        }\n-\n-        @Override\n-        public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n-            synchronized (getClassLoadingLock(name)) {\n-                \/\/ First, check if the class has already been loaded\n-                Class<?> clz = findLoadedClass(name);\n-                if (clz != null) {\n-                    return clz;\n-                }\n-\n-                \/\/ Check for target class\n-                if (name.startsWith(TARGET)) {\n-                    try {\n-                        String clzFile = name.replaceAll(\"\\\\.\", \"\/\") + \".class\";\n-                        byte[] buff = getResourceAsStream(clzFile).readAllBytes();\n-                        ProtectionDomain differentPD = new ProtectionDomain(null, null);\n-                        return defineClass(name, buff, 0, buff.length, differentPD);\n-                    } catch (Throwable t) {\n-                        throw new RuntimeException(\"Unexpected\", t);\n-                    }\n-                }\n-            }\n-            return super.loadClass(name, resolve);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-\n-        CustomLoader cl = new CustomLoader(TestDifferentProtectionDomains.class.getClassLoader());\n-        Class<?> host = cl.loadClass(\"Host\");\n-        Class<?> member = cl.loadClass(\"Host$Member\");\n-\n-        if (host.getProtectionDomain() == member.getProtectionDomain()) {\n-            throw new Error(\"ProtectionDomain instances were not different!\");\n-        }\n-\n-        Constructor cons = member.getDeclaredConstructor(new Class<?>[] {});\n-        WhiteBox wb = WhiteBox.getWhiteBox();\n-\n-        \/\/ The code path for the original failure is now only followed when\n-        \/\/ there is a security manager set, so we set one. We do this here\n-        \/\/ as any earlier causes security exceptions running the test and we\n-        \/\/ don't want to have to set up a policy file etc.\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ Force the constructor to compile, which then triggers the nestmate\n-        \/\/ access check in the compiler thread, which leads to the original bug.\n-        if (!wb.enqueueMethodForCompilation(cons, CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION)) {\n-            throw new RuntimeException(\"Failed to queue constructor for compilation\");\n-        }\n-        while (!wb.isMethodCompiled(cons)) {\n-            Thread.sleep(100);\n-        }\n-\n-        \/\/ Just for good measure call the compiled constructor.\n-        Object m = member.newInstance();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/protectionDomain\/TestDifferentProtectionDomains.java","additions":0,"deletions":124,"binary":false,"changes":124,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- *\n- * @summary converted from VM Testbase nsk\/jvmti\/AttachOnDemand\/attach004.\n- * VM Testbase keywords: [jpda, jvmti, noras, feature_282, vm6, jdk]\n- * VM Testbase readme:\n- * Description :\n- *     Test tries to load java agent to the VM after the VM has started using\n- *     Attach API (com.sun.tools.attach).\n- *     Test is based on the nsk.share.aod framework. In this framework each java\n- *     agent starts new thread from the 'agentmain' method, and all test checks are executed\n- *     in this thread. Also in the terms of this framework java application running in the\n- *     VM where agent is loaded to is called 'target application'.\n- *     In this test target application is running with enabled security manager and with restricted\n- *     permissions. Test checks that loaded agent is also run with restricted permissions (attempt\n- *     to create ClassLoader should fail with SecurityException).\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- * @build nsk.share.aod.AODTestRunner\n- *        nsk.share.aod.TargetApplicationWaitingAgents\n- *\n- * @comment create attach004Agent00.jar in current directory\n- * @build nsk.jvmti.AttachOnDemand.attach004.attach004Agent00\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller nsk.jvmti.AttachOnDemand.attach004.attach004Agent00\n- * @run driver ExecDriver --cmd\n- *      ${compile.jdk}\/bin\/jar\n- *      -cfm attach004Agent00.jar ${test.src}\/attach004Agent00.mf\n- *      nsk\/jvmti\/AttachOnDemand\/attach004\/attach004Agent00.class\n- *\n- * @run main\/othervm\n- *      nsk.share.aod.AODTestRunner\n- *      -jdk ${test.jdk}\n- *      -javaOpts=\"-XX:+UsePerfData ${test.vm.opts} ${test.java.opts} -Djava.security.manager -Djava.security.policy==${test.src}\/attach004.policy\"\n- *      -target nsk.share.aod.TargetApplicationWaitingAgents\n- *      -ja attach004Agent00.jar\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/AttachOnDemand\/attach004\/TestDescription.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-grant {\n-        permission java.net.SocketPermission   \"*:0-\", \"listen,connect,resolve\";\n-        permission java.lang.RuntimePermission \"modifyThreadGroup\";\n-        permission java.lang.RuntimePermission \"modifyThread\";\n-        permission java.lang.RuntimePermission \"shutdownHooks\";\n-        permission java.util.PropertyPermission \"vmsqe.aod.AppId\", \"read\";\n-        permission java.io.FilePermission \"${vmsqe.aod.AppId}\", \"read\";\n-        permission java.io.FilePermission \"${vmsqe.aod.AppId}\", \"delete\";\n-};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/AttachOnDemand\/attach004\/attach004.policy","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package nsk.jvmti.AttachOnDemand.attach004;\n-\n-import nsk.share.aod.AbstractJarAgent;\n-import java.lang.instrument.Instrumentation;\n-\n-public class attach004Agent00 extends AbstractJarAgent {\n-\n-    static class TestClassLoader extends ClassLoader {\n-    }\n-\n-    protected void agentActions() throws Throwable {\n-        if (System.getSecurityManager() == null) {\n-            setStatusFailed(\"System.getSecurityManager() returns null\");\n-            return;\n-        }\n-        try {\n-            \/*\n-             * Target application should be run with restricted permissions\n-             * and attempt to create ClassLoader from the agent should fail\n-             * with SecurityException\n-             *\/\n-\n-            TestClassLoader classLoader = new TestClassLoader();\n-            display(\"ClassLoader created: \" + classLoader);\n-\n-            setStatusFailed(\"Expected SecurityException wasn't thrown\");\n-        } catch (SecurityException e) {\n-            display(\"Expected SecurityException: \" + e);\n-            logThrowable(e);\n-        }\n-    }\n-\n-    public static void agentmain(String options, Instrumentation inst) {\n-        new attach004Agent00().runJarAgent(options, inst);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/AttachOnDemand\/attach004\/attach004Agent00.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-Manifest-Version: 1.0\n-Agent-Class: nsk.jvmti.AttachOnDemand.attach004.attach004Agent00\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/AttachOnDemand\/attach004\/attach004Agent00.mf","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.CatalogReferCircularityTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/CatalogReferCircularityTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.DefaultFeaturesTest\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/DefaultFeaturesTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-import static jaxp.library.JAXPTestUtilities.tryRunWithAllPerm;\n@@ -43,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +48,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.DeferFeatureTest\n@@ -57,1 +53,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -110,2 +105,2 @@\n-        Method method = tryRunWithAllPerm(() -> catalog.getClass().getDeclaredMethod(\"loadedCatalogCount\"));\n-        runWithAllPerm(() -> method.setAccessible(true));\n+        Method method = catalog.getClass().getDeclaredMethod(\"loadedCatalogCount\");\n+        method.setAccessible(true);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/DeferFeatureTest.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.DelegatePublicTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/DelegatePublicTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.DelegateSystemTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/DelegateSystemTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.DelegateUriTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/DelegateUriTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.GroupTest\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/GroupTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.LoadCatalogTest\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/LoadCatalogTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.NextCatalogTest\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/NextCatalogTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.NormalizationTest\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/NormalizationTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.PreferFeatureTest\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/PreferFeatureTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.PreferTest\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/PreferTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.PublicFamilyTest\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/PublicFamilyTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.PublicTest\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/PublicTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -49,1 +48,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.ResolveFeatureTest\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/ResolveFeatureTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.RewriteSystemTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/RewriteSystemTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.RewriteUriTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/RewriteUriTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.SpecifyCatalogTest\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/SpecifyCatalogTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.SystemFamilyTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/SystemFamilyTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.SystemSuffixTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/SystemSuffixTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.SystemTest\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/SystemTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.UriFamilyTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/UriFamilyTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.UriSuffixTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/UriSuffixTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.UriTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/UriTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.UrnUnwrappingTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/UrnUnwrappingTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.ValidateCatalogTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/catalog\/ValidateCatalogTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-import org.testng.annotations.Listeners;\n@@ -56,1 +55,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.datatype.ptests.DurationTest\n@@ -60,1 +58,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/datatype\/ptests\/DurationTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.datatype.ptests.FactoryNewInstanceTest\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/datatype\/ptests\/FactoryNewInstanceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import org.testng.annotations.Listeners;\n@@ -52,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.datatype.ptests.XMLGregorianCalendarTest\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/datatype\/ptests\/XMLGregorianCalendarTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.parsers.ptests.DBFNamespaceTest\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/parsers\/ptests\/DBFNamespaceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,0 @@\n-import org.testng.annotations.Listeners;\n@@ -77,1 +76,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.parsers.ptests.DocumentBuilderFactoryTest\n@@ -80,1 +78,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/parsers\/ptests\/DocumentBuilderFactoryTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.parsers.ptests.DocumentBuilderImpl01\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/parsers\/ptests\/DocumentBuilderImpl01.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.parsers.ptests.FactoryConfErrorTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/parsers\/ptests\/FactoryConfErrorTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.parsers.ptests.SAXFactoryNewInstanceTest\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/parsers\/ptests\/SAXFactoryNewInstanceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.parsers.ptests.SAXParserFactTest\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/parsers\/ptests\/SAXParserFactTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-import static javax.xml.parsers.ptests.ParserTestConst.XML_DIR;\n-import static jaxp.library.JAXPTestUtilities.tryRunWithTmpPermission;\n-\n@@ -33,1 +30,0 @@\n-\n@@ -36,1 +32,1 @@\n-\n+import static javax.xml.parsers.ptests.ParserTestConst.XML_DIR;\n@@ -38,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.parsers.ptests.SAXParserTest\n@@ -54,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -132,1 +125,1 @@\n-        tryRunWithTmpPermission(() -> saxparser.parse(new File(\"\"), new HandlerBase()), new PropertyPermission(\"user.dir\", \"read\"));\n+        saxparser.parse(new File(\"\"), new HandlerBase());\n@@ -201,1 +194,1 @@\n-        tryRunWithTmpPermission(() -> saxparser.parse(file, new DefaultHandler()), new PropertyPermission(\"user.dir\", \"read\"));\n+        saxparser.parse(file, new DefaultHandler());\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/parsers\/ptests\/SAXParserTest.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -48,1 +47,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.parsers.ptests.SAXParserTest02\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/parsers\/ptests\/SAXParserTest02.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.parsers.ptests.SAXParserTest03\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/parsers\/ptests\/SAXParserTest03.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.stream.ptests.XMLEventFactoryNewInstanceTest\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/stream\/ptests\/XMLEventFactoryNewInstanceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.stream.ptests.XMLInputFactoryNewInstanceTest\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/stream\/ptests\/XMLInputFactoryNewInstanceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.stream.ptests.XMLOutputFactoryNewInstanceTest\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/stream\/ptests\/XMLOutputFactoryNewInstanceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.Bug6384418Test\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/Bug6384418Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -59,1 +58,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.DOMResultTest\n@@ -62,1 +60,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/DOMResultTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.ErrorListenerTest\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/ErrorListenerTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.SAXSourceTest\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/SAXSourceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-import org.testng.annotations.Listeners;\n@@ -65,1 +64,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.SAXTFactoryTest\n@@ -68,1 +66,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/SAXTFactoryTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import org.testng.annotations.Listeners;\n@@ -57,1 +56,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.StreamResultTest\n@@ -60,1 +58,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/StreamResultTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.TfClearParamTest\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/TfClearParamTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,0 @@\n-import org.testng.annotations.Listeners;\n@@ -74,1 +73,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.TransformTest\n@@ -79,1 +77,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/TransformTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -48,1 +47,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.TransformerExcpTest\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/TransformerExcpTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,0 @@\n-import org.testng.annotations.Listeners;\n@@ -63,1 +62,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.TransformerFactoryTest\n@@ -66,1 +64,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/TransformerFactoryTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import org.testng.annotations.Listeners;\n@@ -56,1 +55,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.TransformerTest\n@@ -59,1 +57,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/TransformerTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.TransformerTest02\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/TransformerTest02.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import org.testng.annotations.Listeners;\n@@ -55,1 +54,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.TransformerTest03\n@@ -58,1 +56,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/TransformerTest03.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import org.testng.annotations.Listeners;\n@@ -54,1 +53,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.URIResolverTest\n@@ -57,1 +55,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/URIResolverTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.transform.ptests.othervm.TFCErrorTest\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/transform\/ptests\/othervm\/TFCErrorTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,0 @@\n-import org.testng.annotations.Listeners;\n@@ -74,1 +73,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.validation.ptests.SchemaFactoryTest\n@@ -79,1 +77,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/validation\/ptests\/SchemaFactoryTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.validation.ptests.TypeInfoProviderTest\n@@ -57,1 +55,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/validation\/ptests\/TypeInfoProviderTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -52,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.validation.ptests.ValidatorHandlerTest\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/validation\/ptests\/ValidatorHandlerTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-import org.testng.annotations.Listeners;\n@@ -63,1 +62,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.validation.ptests.ValidatorTest\n@@ -67,1 +65,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/validation\/ptests\/ValidatorTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.xpath.ptests.XPathEvaluationResultTest\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/xpath\/ptests\/XPathEvaluationResultTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n-import org.testng.annotations.Listeners;\n@@ -60,1 +59,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.xpath.ptests.XPathExpressionTest\n@@ -63,1 +61,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/xpath\/ptests\/XPathExpressionTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -52,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.xpath.ptests.XPathFactoryTest\n@@ -55,1 +53,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/xpath\/ptests\/XPathFactoryTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.xpath.ptests.XPathFunctionResolverTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/xpath\/ptests\/XPathFunctionResolverTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,0 @@\n-import org.testng.annotations.Listeners;\n@@ -64,1 +63,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow javax.xml.xpath.ptests.XPathTest\n@@ -67,1 +65,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/javax\/xml\/xpath\/ptests\/XPathTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.AttrTest\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/AttrTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.CommentTest\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/CommentTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.DocumentTest\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/DocumentTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.DocumentTypeTest\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/DocumentTypeTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.DomImplementationTest\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/DomImplementationTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -54,1 +53,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.ElementTest\n@@ -58,1 +56,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/ElementTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.EntityChildTest\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/EntityChildTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.NamedNodeMapTest\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/NamedNodeMapTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.NodeListTest\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/NodeListTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import static jaxp.library.JAXPTestUtilities.tryRunWithTmpPermission;\n@@ -48,1 +47,0 @@\n-import org.testng.annotations.Listeners;\n@@ -60,1 +58,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.NodeTest\n@@ -64,1 +61,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -163,1 +159,1 @@\n-        tryRunWithTmpPermission(() -> outputXml(document, outputfile), new PropertyPermission(\"user.dir\", \"read\"));\n+        outputXml(document, outputfile);\n@@ -181,1 +177,1 @@\n-        tryRunWithTmpPermission(() -> outputXml(document, outputfile), new PropertyPermission(\"user.dir\", \"read\"));\n+        outputXml(document, outputfile);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/NodeTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.NotationTest\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/NotationTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.PITest\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/PITest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.TextTest\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/TextTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.w3c.dom.ptests.TypeInfoTest\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/w3c\/dom\/ptests\/TypeInfoTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.AttrImplTest\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/AttrImplTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -49,1 +48,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.AttributesNSTest\n@@ -52,1 +50,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/AttributesNSTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.AttributesTest\n@@ -53,1 +51,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/AttributesTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -55,1 +54,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.ContentHandlerTest\n@@ -58,1 +56,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/ContentHandlerTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -54,1 +53,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.DefaultHandlerTest\n@@ -57,1 +55,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/DefaultHandlerTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -55,1 +54,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.EHFatalTest\n@@ -58,1 +56,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/EHFatalTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.NSSupportTest\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/NSSupportTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.NSTableTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/NSTableTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.ParserAdapterTest\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/ParserAdapterTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import org.testng.annotations.Listeners;\n@@ -58,1 +57,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.ResolverTest\n@@ -62,1 +60,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/ResolverTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.SAXParserNSTableTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/SAXParserNSTableTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -55,1 +54,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.XMLFilterCBTest\n@@ -59,1 +57,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/XMLFilterCBTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.XMLFilterTest\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/XMLFilterTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.XMLReaderAdapterTest\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/XMLReaderAdapterTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.XMLReaderFactoryTest\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/XMLReaderFactoryTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -48,1 +47,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.XMLReaderNSTableTest\n@@ -52,1 +50,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/XMLReaderNSTableTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow org.xml.sax.ptests.XMLReaderTest\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/org\/xml\/sax\/ptests\/XMLReaderTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.astro.AstroTest\n@@ -72,1 +70,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/astro\/AstroTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import org.testng.annotations.Listeners;\n@@ -57,1 +56,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.astro.DocumentLSTest\n@@ -61,1 +59,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/astro\/DocumentLSTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.astro.NamespaceContextTest\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/astro\/NamespaceContextTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import org.testng.annotations.Listeners;\n@@ -34,1 +33,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.astro.SAX201Test\n@@ -38,1 +36,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/astro\/SAX201Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.astro.SchemaValidationTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/astro\/SchemaValidationTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-import org.testng.annotations.Listeners;\n@@ -59,1 +58,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.astro.XPathAPITest\n@@ -64,1 +62,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/astro\/XPathAPITest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,0 @@\n-import org.testng.annotations.Listeners;\n@@ -73,1 +72,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.auctionportal.AuctionController\n@@ -76,1 +74,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/auctionportal\/AuctionController.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n-import org.testng.annotations.Listeners;\n@@ -64,1 +63,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.auctionportal.AuctionItemRepository\n@@ -67,1 +65,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/auctionportal\/AuctionItemRepository.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import org.testng.annotations.Listeners;\n@@ -62,1 +61,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.auctionportal.UserController\n@@ -65,1 +63,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/auctionportal\/UserController.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.gaptest.Bug4511326\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/gaptest\/Bug4511326.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.gaptest.Bug4512806\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/gaptest\/Bug4512806.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.gaptest.Bug4515047\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/gaptest\/Bug4515047.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n-import org.testng.annotations.Listeners;\n@@ -57,1 +56,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.gaptest.Bug4515660\n@@ -62,1 +60,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/gaptest\/Bug4515660.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.gaptest.Bug4693341\n@@ -58,1 +56,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/gaptest\/Bug4693341.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.gaptest.Bug4848653\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/gaptest\/Bug4848653.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow test.gaptest.Bug4858685\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/functional\/test\/gaptest\/Bug4858685.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jaxp.library;\n-\n-import org.testng.ITestContext;\n-import org.testng.ITestListener;\n-import org.testng.ITestResult;\n-\n-\/**\n- * This policy includes default permissions.\n- * It should be used as one listener: either TestListener or MethodListener.\n- *\/\n-public class BasePolicy implements ITestListener {\n-\n-    @Override\n-    public void onFinish(ITestContext arg0) {\n-        try {\n-            JAXPPolicyManager.teardownPolicyManager();\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Failed to teardown the policy manager\", e);\n-        }\n-    }\n-\n-    @Override\n-    public void onStart(ITestContext arg0) {\n-        \/\/ suppose to only run othervm mode\n-        if (isRunWithSecurityManager())\n-            JAXPPolicyManager.getJAXPPolicyManager(true);\n-    }\n-\n-    @Override\n-    public void onTestFailedButWithinSuccessPercentage(ITestResult arg0) {\n-    }\n-\n-    @Override\n-    public void onTestFailure(ITestResult arg0) {\n-    }\n-\n-    @Override\n-    public void onTestSkipped(ITestResult arg0) {\n-    }\n-\n-    @Override\n-    public void onTestStart(ITestResult arg0) {\n-    }\n-\n-    @Override\n-    public void onTestSuccess(ITestResult arg0) {\n-    }\n-\n-    protected boolean isRunWithSecurityManager() {\n-        final String runSecMngr = JAXPTestUtilities.getSystemProperty(\"runSecMngr\");\n-        return runSecMngr != null && runSecMngr.equals(\"true\");\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/BasePolicy.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jaxp.library;\n-\n-import static jaxp.library.JAXPTestUtilities.getSystemProperty;\n-\n-import java.io.FilePermission;\n-\n-import org.testng.ITestContext;\n-\n-\/**\n- * This policy can access local XML files.\n- *\/\n-public class FilePolicy extends BasePolicy {\n-\n-    @Override\n-    public void onStart(ITestContext arg0) {\n-        \/\/ suppose to only run othervm mode\n-        if (isRunWithSecurityManager()) {\n-            JAXPPolicyManager policyManager = JAXPPolicyManager.getJAXPPolicyManager(true);\n-            String userdir = getSystemProperty(\"user.dir\");\n-            policyManager.addPermission(new FilePermission(userdir + \"\/-\", \"read,write,delete\"));\n-            String testSrc = System.getProperty(\"test.src\");\n-            \/\/ to handle the directory structure of some functional test suite\n-            if (testSrc.endsWith(\"ptests\"))\n-                testSrc = testSrc.substring(0, testSrc.length() - 7);\n-            policyManager.addPermission(new FilePermission(testSrc + \"\/-\", \"read\"));\n-            policyManager.addPermission(new FilePermission(userdir, \"read\"));\n-        }\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/FilePolicy.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jaxp.library;\n-\n-import org.testng.ITestContext;\n-\n-\/**\n- * This policy can access internal jaxp packages.\n- *\/\n-public class InternalAPIPolicy extends BasePolicy {\n-\n-    @Override\n-    public void onStart(ITestContext arg0) {\n-        \/\/ suppose to only run othervm mode\n-        if (isRunWithSecurityManager()) {\n-            JAXPPolicyManager policyManager = JAXPPolicyManager.getJAXPPolicyManager(true);\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.org.apache.xerces.internal.jaxp\"));\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.org.apache.bcel.internal.classfile\"));\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.org.apache.bcel.internal.generic\"));\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.org.apache.xalan.internal.xsltc.trax\"));\n-        }\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/InternalAPIPolicy.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,317 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jaxp.library;\n-\n-\n-import java.net.URI;\n-import java.net.URL;\n-import java.nio.file.Path;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.security.SecurityPermission;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.PropertyPermission;\n-import java.util.Set;\n-import java.util.StringJoiner;\n-\n-\n-\/*\n- * This is a base class that every test class must extend if it needs to be run\n- * with security mode.\n- *\/\n-@SuppressWarnings(\"removal\")\n-public class JAXPPolicyManager {\n-    \/*\n-     * Backing up policy.\n-     *\/\n-    private Policy policyBackup;\n-\n-    \/*\n-     * Backing up security manager.\n-     *\/\n-    private SecurityManager smBackup;\n-\n-    \/*\n-     * Current policy.\n-     *\/\n-    private TestPolicy policy = new TestPolicy();\n-\n-    \/*\n-     * JAXPPolicyManager singleton.\n-     *\/\n-    private static JAXPPolicyManager policyManager = null;\n-\n-    \/*\n-     * Install a SecurityManager along with a default Policy to allow testNG to\n-     * run when there is a security manager.\n-     *\/\n-    private JAXPPolicyManager() {\n-        \/\/ Backing up policy and security manager for restore\n-        policyBackup = Policy.getPolicy();\n-        smBackup = System.getSecurityManager();\n-\n-        \/\/ Set customized policy\n-        setDefaultPermissions();\n-        Policy.setPolicy(policy);\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-\n-    static synchronized JAXPPolicyManager getJAXPPolicyManager(boolean createIfNone) {\n-        if (policyManager == null & createIfNone)\n-            policyManager = new JAXPPolicyManager();\n-        return policyManager;\n-    }\n-\n-    private void teardown() throws Exception {\n-        System.setSecurityManager(smBackup);\n-        Policy.setPolicy(policyBackup);\n-    }\n-\n-    \/*\n-     * Restore the original Policy and SecurityManager.\n-     *\/\n-    static synchronized void teardownPolicyManager() throws Exception {\n-        if (policyManager != null) {\n-            policyManager.teardown();\n-            policyManager = null;\n-        }\n-    }\n-\n-    \/*\n-     * Set default permissions, sub-class of JAXPBaseTest should override this\n-     * method.\n-     *\/\n-    private void setDefaultPermissions() {\n-        \/\/Permissions to set security manager and policy\n-        addPermission(new SecurityPermission(\"getPolicy\"));\n-        addPermission(new SecurityPermission(\"setPolicy\"));\n-        addPermission(new RuntimePermission(\"setSecurityManager\"));\n-        addPermission(new PropertyPermission(\"test.src\", \"read\"));\n-    }\n-\n-    \/*\n-     * Add permission to the TestPolicy.\n-     *\n-     * @param permission to be added.\n-     *\/\n-    void addPermission(Permission p) {\n-        policy.addPermission(p);\n-    }\n-\n-    \/*\n-     * Add a temporary permission in current thread context. This won't impact\n-     * global policy and doesn't support permission combination.\n-     *\n-     * @param permission\n-     *            to add.\n-     * @return index of the added permission.\n-     *\/\n-    int addTmpPermission(Permission p) {\n-        return policy.addTmpPermission(p);\n-    }\n-\n-    \/*\n-     * set allowAll in current thread context.\n-     *\/\n-    void setAllowAll(boolean allow) {\n-        policy.setAllowAll(allow);\n-    }\n-\n-    \/*\n-     * Remove a temporary permission from current thread context.\n-     *\n-     * @param index to remove.\n-     *\n-     * @throws RuntimeException if no temporary permission list in current\n-     *             thread context or no permission correlated to the index.\n-     *\/\n-    void removeTmpPermission(int index) {\n-        policy.removeTmpPermission(index);\n-    }\n-\n-\n-}\n-\n-\/*\n- * Simple Policy class that supports the required Permissions to validate the\n- * JAXP concrete classes.\n- *\/\n-@SuppressWarnings(\"removal\")\n-class TestPolicy extends Policy {\n-    private final static Set<String> TEST_JARS =\n-         Set.of(\"jtreg.*jar\", \"javatest.*jar\", \"testng.*jar\", \"jcommander.*jar\");\n-    private final PermissionCollection permissions = new Permissions();\n-\n-    private ThreadLocal<Map<Integer, Permission>> transientPermissions = new ThreadLocal<>();\n-    private ThreadLocal<Boolean> allowAll = new ThreadLocal<>();\n-\n-    private static Policy defaultPolicy = Policy.getPolicy();\n-\n-    \/*\n-     * Add permission to this policy.\n-     *\n-     * @param permission to be added.\n-     *\/\n-    void addPermission(Permission p) {\n-        permissions.add(p);\n-    }\n-\n-    \/*\n-     * Set all permissions. Caution: this should not called carefully unless\n-     * it's really needed.\n-     *\n-     * private void setAllPermissions() { permissions.add(new AllPermission());\n-     * }\n-     *\/\n-\n-    \/*\n-     * Overloaded methods from the Policy class.\n-     *\/\n-    @Override\n-    public String toString() {\n-        StringJoiner sj = new StringJoiner(\"\\n\", \"policy: \", \"\");\n-        Enumeration<Permission> perms = permissions.elements();\n-        while (perms.hasMoreElements()) {\n-            sj.add(perms.nextElement().toString());\n-        }\n-        return sj.toString();\n-\n-    }\n-\n-    @Override\n-    public PermissionCollection getPermissions(ProtectionDomain domain) {\n-        return permissions;\n-    }\n-\n-    @Override\n-    public PermissionCollection getPermissions(CodeSource codesource) {\n-        return permissions;\n-    }\n-\n-    private boolean isTestMachineryDomain(ProtectionDomain domain) {\n-        CodeSource cs = (domain == null) ? null : domain.getCodeSource();\n-        URL loc = (cs == null) ? null : cs.getLocation();\n-        URI uri = (loc == null) ? null : URI.create(loc.toString());\n-        String name = (uri == null) ? null : Path.of(uri).getFileName().toString();\n-        return name != null && TEST_JARS.stream()\n-                                .filter(name::matches)\n-                                .findAny()\n-                                .isPresent();\n-    }\n-\n-    @Override\n-    public boolean implies(ProtectionDomain domain, Permission perm) {\n-        if (allowAll())\n-            return true;\n-\n-        if (defaultPolicy.implies(domain, perm))\n-            return true;\n-\n-        if (permissions.implies(perm))\n-            return true;\n-\n-        if (isTestMachineryDomain(domain))\n-            return true;\n-\n-        return tmpImplies(perm);\n-    }\n-\n-    \/*\n-     * Add a temporary permission in current thread context. This won't impact\n-     * global policy and doesn't support permission combination.\n-     *\n-     * @param permission to add.\n-     * @return index of the added permission.\n-     *\/\n-    int addTmpPermission(Permission p) {\n-        Map<Integer, Permission> tmpPermissions = transientPermissions.get();\n-        if (tmpPermissions == null)\n-            tmpPermissions = new HashMap<>();\n-\n-        int id = tmpPermissions.size();\n-        tmpPermissions.put(id, p);\n-        transientPermissions.set(tmpPermissions);\n-        return id;\n-    }\n-\n-    \/*\n-     * Remove a temporary permission from current thread context.\n-     *\n-     * @param index to remove.\n-     *\n-     * @throws RuntimeException if no temporary permission list in current\n-     *             thread context or no permission correlated to the index.\n-     *\/\n-    void removeTmpPermission(int index) {\n-        try {\n-            Map<Integer, Permission> tmpPermissions = transientPermissions.get();\n-            tmpPermissions.remove(index);\n-        } catch (NullPointerException | IndexOutOfBoundsException e) {\n-            throw new RuntimeException(\"Tried to delete a non-existent temporary permission\", e);\n-        }\n-    }\n-\n-    \/*\n-     * Checks to see if the specified permission is implied by temporary\n-     * permission list in current thread context.\n-     *\n-     * @param permission the Permission object to compare.\n-     *\n-     * @return true if \"permission\" is implied by any permission in the\n-     *         temporary permission list, false if not.\n-     *\/\n-    private boolean tmpImplies(Permission perm) {\n-        Map<Integer, Permission> tmpPermissions = transientPermissions.get();\n-        if (tmpPermissions != null) {\n-            for (Permission p : tmpPermissions.values()) {\n-                if (p.implies(perm))\n-                    return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    \/*\n-     * Checks to see if allow all permission requests in current thread context.\n-     *\/\n-    private boolean allowAll() {\n-        Boolean allow = allowAll.get();\n-        if (allow != null) {\n-            return allow;\n-        }\n-        return false;\n-    }\n-\n-    \/*\n-     * set allowAll in current thread context.\n-     *\/\n-    void setAllowAll(boolean allow) {\n-        allowAll.set(allow);\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/JAXPPolicyManager.java","additions":0,"deletions":317,"binary":false,"changes":317,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jaxp.library;\n-\n-import static jaxp.library.JAXPTestUtilities.getSystemProperty;\n-import java.io.FilePermission;\n-import java.net.SocketPermission;\n-import org.testng.ITestContext;\n-\n-\/**\n- * Covers all policies currently required for running JAXP tests\n- *\/\n-public class JAXPTestPolicy extends BasePolicy {\n-    @Override\n-    public void onStart(ITestContext arg0) {\n-        if (isRunWithSecurityManager()) {\n-            JAXPPolicyManager policyManager = JAXPPolicyManager.getJAXPPolicyManager(true);\n-            String userdir = getSystemProperty(\"user.dir\");\n-            policyManager.addPermission(new FilePermission(userdir + \"\/-\", \"read,write,delete\"));\n-            String testSrc = System.getProperty(\"test.src\");\n-            \/\/ to handle the directory structure of some functional test suite\n-            if (testSrc.endsWith(\"ptests\"))\n-                testSrc = testSrc.substring(0, testSrc.length() - 7);\n-            policyManager.addPermission(new FilePermission(testSrc + \"\/-\", \"read\"));\n-            policyManager.addPermission(new FilePermission(userdir, \"read\"));\n-\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.org.apache.xerces.internal.jaxp\"));\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.org.apache.xerces.internal.impl\"));\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.org.apache.xerces.internal.xni.parser\"));\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.org.apache.bcel.internal.classfile\"));\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.org.apache.bcel.internal.generic\"));\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.org.apache.xalan.internal.xsltc.trax\"));\n-            policyManager.addPermission(new RuntimePermission(\"accessClassInPackage.com.sun.xml.internal.stream\"));\n-\n-            policyManager.addPermission(new SocketPermission(\"openjdk.org:80\", \"connect,resolve\"));\n-            policyManager.addPermission(new SocketPermission(\"www.w3.org:80\", \"connect,resolve\"));\n-        }\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/JAXPTestPolicy.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,0 @@\n-import java.security.Permission;\n-import java.util.ArrayList;\n@@ -44,2 +42,0 @@\n-import java.util.Optional;\n-import java.util.concurrent.Callable;\n@@ -47,1 +43,0 @@\n-import java.util.function.Supplier;\n@@ -343,51 +338,0 @@\n-    \/**\n-     * Run the supplier with all permissions. This won't impact global policy.\n-     *\n-     * @param s\n-     *            Supplier to run\n-     *\/\n-    public static <T> T runWithAllPerm(Supplier<T> s) {\n-        Optional<JAXPPolicyManager> policyManager = Optional.ofNullable(JAXPPolicyManager\n-                .getJAXPPolicyManager(false));\n-        policyManager.ifPresent(manager -> manager.setAllowAll(true));\n-        try {\n-            return s.get();\n-        } finally {\n-            policyManager.ifPresent(manager -> manager.setAllowAll(false));\n-        }\n-    }\n-\n-    \/**\n-     * Run the supplier with all permissions. This won't impact global policy.\n-     *\n-     * @param s\n-     *            Supplier to run\n-     *\/\n-    public static <T> T tryRunWithAllPerm(Callable<T> c) throws Exception {\n-        Optional<JAXPPolicyManager> policyManager = Optional.ofNullable(JAXPPolicyManager\n-                .getJAXPPolicyManager(false));\n-        policyManager.ifPresent(manager -> manager.setAllowAll(true));\n-        try {\n-            return c.call();\n-        } finally {\n-            policyManager.ifPresent(manager -> manager.setAllowAll(false));\n-        }\n-    }\n-\n-    \/**\n-     * Run the Runnable with all permissions. This won't impact global policy.\n-     *\n-     * @param s\n-     *            Supplier to run\n-     *\/\n-    public static void runWithAllPerm(Runnable r) {\n-        Optional<JAXPPolicyManager> policyManager = Optional.ofNullable(JAXPPolicyManager\n-                .getJAXPPolicyManager(false));\n-        policyManager.ifPresent(manager -> manager.setAllowAll(true));\n-        try {\n-            r.run();\n-        } finally {\n-            policyManager.ifPresent(manager -> manager.setAllowAll(false));\n-        }\n-    }\n-\n@@ -402,1 +346,1 @@\n-        return runWithAllPerm(() -> System.getProperty(name));\n+        return System.getProperty(name);\n@@ -414,1 +358,1 @@\n-        runWithAllPerm(() -> System.setProperty(name, value));\n+        System.setProperty(name, value);\n@@ -424,73 +368,1 @@\n-        runWithAllPerm(() -> System.clearProperty(name));\n-    }\n-\n-    \/**\n-     * Run the runnable with assigning temporary permissions. This won't impact\n-     * global policy.\n-     *\n-     * @param r\n-     *            Runnable to run\n-     * @param ps\n-     *            assigning permissions to add.\n-     *\/\n-    public static void runWithTmpPermission(Runnable r, Permission... ps) {\n-        JAXPPolicyManager policyManager = JAXPPolicyManager.getJAXPPolicyManager(false);\n-        List<Integer> tmpPermissionIndexes = new ArrayList<>();\n-        if (policyManager != null) {\n-            for (Permission p : ps)\n-                tmpPermissionIndexes.add(policyManager.addTmpPermission(p));\n-        }\n-        try {\n-            r.run();\n-        } finally {\n-            for (int index: tmpPermissionIndexes)\n-                policyManager.removeTmpPermission(index);\n-        }\n-    }\n-\n-    \/**\n-     * Run the supplier with assigning temporary permissions. This won't impact\n-     * global policy.\n-     *\n-     * @param s\n-     *            Supplier to run\n-     * @param ps\n-     *            assigning permissions to add.\n-     *\/\n-    public static <T> T runWithTmpPermission(Supplier<T> s, Permission... ps) {\n-        JAXPPolicyManager policyManager = JAXPPolicyManager.getJAXPPolicyManager(false);\n-        List<Integer> tmpPermissionIndexes = new ArrayList<>();\n-        if (policyManager != null) {\n-            for (Permission p : ps)\n-                tmpPermissionIndexes.add(policyManager.addTmpPermission(p));\n-        }\n-        try {\n-            return s.get();\n-        } finally {\n-            for (int index: tmpPermissionIndexes)\n-                policyManager.removeTmpPermission(index);\n-        }\n-    }\n-\n-    \/**\n-     * Run the RunnableWithException with assigning temporary permissions. This\n-     * won't impact global policy.\n-     *\n-     * @param r\n-     *            RunnableWithException to execute\n-     * @param ps\n-     *            assigning permissions to add.\n-     *\/\n-    public static void tryRunWithTmpPermission(RunnableWithException r, Permission... ps) throws Exception {\n-        JAXPPolicyManager policyManager = JAXPPolicyManager.getJAXPPolicyManager(false);\n-        List<Integer> tmpPermissionIndexes = new ArrayList<>();\n-        if (policyManager != null) {\n-            for (Permission p : ps)\n-                tmpPermissionIndexes.add(policyManager.addTmpPermission(p));\n-        }\n-        try {\n-            r.run();\n-        } finally {\n-            for (int index: tmpPermissionIndexes)\n-                policyManager.removeTmpPermission(index);\n-        }\n+        System.clearProperty(name);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/JAXPTestUtilities.java","additions":4,"deletions":132,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jaxp.library;\n-\n-import java.net.SocketPermission;\n-\n-import org.testng.ITestContext;\n-\n-\/**\n- * This policy can access network.\n- *\/\n-public class NetAccessPolicy extends BasePolicy {\n-\n-    @Override\n-    public void onStart(ITestContext arg0) {\n-        \/\/ suppose to only run othervm mode\n-        if (isRunWithSecurityManager()) {\n-            JAXPPolicyManager policyManager = JAXPPolicyManager.getJAXPPolicyManager(true);\n-            policyManager.addPermission(new SocketPermission(\"openjdk.org:80\", \"connect,resolve\"));\n-            policyManager.addPermission(new SocketPermission(\"www.w3.org:80\", \"connect,resolve\"));\n-        }\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/NetAccessPolicy.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package catalog;\n-\n-import java.net.URI;\n-import javax.xml.catalog.CatalogFeatures;\n-import javax.xml.catalog.CatalogManager;\n-import javax.xml.catalog.CatalogResolver;\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Listeners;\n-import org.testng.annotations.Test;\n-import org.xml.sax.InputSource;\n-import static jaxp.library.JAXPTestUtilities.tryRunWithAllPerm;\n-\n-\/*\n- * @test\n- * @bug 8171243\n- * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.CatalogAccessTest\n- * @summary the Catalog API grants no privilege to external resources. This test\n- * verifies that SecurityException will be thrown if access to resources is denied\n- * by the security manager.\n- *\/\n-@Listeners({jaxp.library.BasePolicy.class})\n-public class CatalogAccessTest {\n-    static final CatalogFeatures FEATURES = CatalogFeatures.builder().\n-            with(CatalogFeatures.Feature.PREFER, \"system\").build();\n-\n-    \/*\n-     * Verifies that the SecurityException is thrown if access to the resource is\n-     * denied by the security manager.\n-     *\/\n-    @Test(dataProvider = \"accessTest\", expectedExceptions = SecurityException.class)\n-    public void testSecurity(String cfile, String sysId, String pubId) throws Exception {\n-        CatalogResolver cr = CatalogManager.catalogResolver(FEATURES, URI.create(cfile));\n-        InputSource is = cr.resolveEntity(pubId, sysId);\n-        Assert.fail(\"Failed to throw SecurityException\");\n-    }\n-\n-    \/*\n-        DataProvider: used for SecurityException testing\n-        Data columns:\n-        catalog uri, systemId, publicId\n-     *\/\n-    @DataProvider(name = \"accessTest\")\n-    Object[][] getDataForAccessTest() throws Exception {\n-        String systemId = \"http:\/\/www.sys00test.com\/rewrite.dtd\";\n-        String publicId = \"PUB-404\";\n-        String urlFile = tryRunWithAllPerm(() ->\n-                getClass().getResource(\"rewriteSystem_id.xml\").toExternalForm());\n-        return new Object[][]{\n-            {urlFile, systemId, publicId}\n-        };\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogAccessTest.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,0 @@\n-import org.testng.annotations.Listeners;\n@@ -75,1 +74,0 @@\n-@Listeners({jaxp.library.FilePolicy.class, jaxp.library.NetAccessPolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogFileInputTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -48,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogResolverTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.CatalogSupport\n@@ -69,1 +67,0 @@\n-@Listeners({jaxp.library.FilePolicy.class, jaxp.library.NetAccessPolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogSupport.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.CatalogSupport1\n@@ -65,1 +63,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogSupport1.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import org.testng.annotations.Listeners;\n@@ -57,1 +56,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.CatalogSupport2\n@@ -70,1 +68,0 @@\n-@Listeners({jaxp.library.FilePolicy.class, jaxp.library.NetAccessPolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogSupport2.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import org.testng.annotations.Listeners;\n@@ -57,1 +56,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.CatalogSupport3\n@@ -70,1 +68,0 @@\n-@Listeners({jaxp.library.FilePolicy.class, jaxp.library.NetAccessPolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogSupport3.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.CatalogSupport4\n@@ -67,1 +65,0 @@\n-@Listeners({jaxp.library.FilePolicy.class, jaxp.library.NetAccessPolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogSupport4.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.CatalogSupport5\n@@ -63,1 +61,0 @@\n-@Listeners({jaxp.library.FilePolicy.class, jaxp.library.NetAccessPolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogSupport5.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,0 @@\n-import org.testng.annotations.Listeners;\n@@ -73,1 +72,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow catalog.CatalogTest\n@@ -77,1 +75,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/GroupTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n@@ -31,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow common.Bug6350682\n@@ -42,1 +38,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -48,1 +43,1 @@\n-        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n+        Thread.currentThread().setContextClassLoader(null);\n@@ -61,1 +56,1 @@\n-        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n+        Thread.currentThread().setContextClassLoader(null);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/Bug6350682.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow common.Bug6723276Test\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/Bug6723276Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package common;\n-\n-import javax.xml.XMLConstants;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.validation.SchemaFactory;\n-import javax.xml.xpath.XPathFactory;\n-\n-import static jaxp.library.JAXPTestUtilities.clearSystemProperty;\n-import static jaxp.library.JAXPTestUtilities.setSystemProperty;\n-import org.testng.Assert;\n-import org.testng.annotations.Listeners;\n-import org.testng.annotations.Test;\n-\n-\/*\n- * @test\n- * @bug 7143711\n- * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow common.Bug7143711Test\n- * @summary Test set use-service-mechanism shall not override what's set by the constructor in secure mode.\n- *\/\n-@Listeners({ jaxp.library.BasePolicy.class })\n-@Test(singleThreaded = true)\n-public class Bug7143711Test {\n-    private static final String SCHEMA_LANGUAGE = \"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaLanguage\";\n-    private static final String SCHEMA_SOURCE = \"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaSource\";\n-\n-    private static final String DOM_FACTORY_ID = \"javax.xml.parsers.DocumentBuilderFactory\";\n-    private static final String SAX_FACTORY_ID = \"javax.xml.parsers.SAXParserFactory\";\n-\n-    \/\/ impl specific feature\n-    private static final String ORACLE_FEATURE_SERVICE_MECHANISM = \"http:\/\/www.oracle.com\/feature\/use-service-mechanism\";\n-\n-    @Test\n-    public void testValidation_SAX_withSM() {\n-        System.out.println(\"Validation using SAX Source with security manager:\");\n-        setSystemProperty(SAX_FACTORY_ID, \"MySAXFactoryImpl\");\n-\n-        try {\n-            SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n-            \/\/ should not allow\n-            factory.setFeature(ORACLE_FEATURE_SERVICE_MECHANISM, true);\n-            if ((boolean) factory.getFeature(ORACLE_FEATURE_SERVICE_MECHANISM)) {\n-                Assert.fail(\"should not override in secure mode\");\n-            }\n-        } catch (Exception e) {\n-            Assert.fail(e.getMessage());\n-\n-        } finally {\n-            clearSystemProperty(SAX_FACTORY_ID);\n-        }\n-    }\n-\n-    @Test(enabled=false) \/\/skipped due to bug JDK-8080097\n-    public void testTransform_DOM_withSM() {\n-        System.out.println(\"Transform using DOM Source;  Security Manager is set:\");\n-        setSystemProperty(DOM_FACTORY_ID, \"MyDOMFactoryImpl\");\n-\n-        try {\n-            TransformerFactory factory = TransformerFactory.newInstance(\"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\",\n-                    TransformerFactory.class.getClassLoader());\n-            factory.setFeature(ORACLE_FEATURE_SERVICE_MECHANISM, true);\n-            if ((boolean) factory.getFeature(ORACLE_FEATURE_SERVICE_MECHANISM)) {\n-                Assert.fail(\"should not override in secure mode\");\n-            }\n-\n-        } catch (Exception e) {\n-            Assert.fail(e.getMessage());\n-        } finally {\n-            clearSystemProperty(DOM_FACTORY_ID);\n-        }\n-    }\n-\n-    @Test\n-    public void testXPath_DOM_withSM() {\n-        System.out.println(\"Evaluate DOM Source;  Security Manager is set:\");\n-        setSystemProperty(DOM_FACTORY_ID, \"MyDOMFactoryImpl\");\n-\n-        try {\n-            XPathFactory xPathFactory = XPathFactory.newInstance(\"http:\/\/java.sun.com\/jaxp\/xpath\/dom\",\n-                    \"com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl\", null);\n-            xPathFactory.setFeature(ORACLE_FEATURE_SERVICE_MECHANISM, true);\n-            if ((boolean) xPathFactory.getFeature(ORACLE_FEATURE_SERVICE_MECHANISM)) {\n-                Assert.fail(\"should not override in secure mode\");\n-            }\n-\n-        } catch (Exception e) {\n-            Assert.fail(e.getMessage());\n-        } finally {\n-            clearSystemProperty(DOM_FACTORY_ID);\n-        }\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/Bug7143711Test.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow common.CDataChunkSizeTest\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/CDataChunkSizeTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow common.EncodingErrorsReportingTest\n@@ -52,1 +51,0 @@\n-import org.testng.annotations.Listeners;\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/EncodingErrorsReportingTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithTmpPermission;\n@@ -49,1 +48,0 @@\n-import org.testng.annotations.Listeners;\n@@ -60,1 +58,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow common.Sources\n@@ -65,1 +62,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -132,1 +128,1 @@\n-            { runWithTmpPermission(() -> new StreamSource(new File(\"\")), new PropertyPermission(\"user.dir\", \"read\")) },\n+            { new StreamSource(new File(\"\")) },\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/Sources.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow common.TransformationWarningsTest\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.BasePolicy.class, jaxp.library.InternalAPIPolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/TransformationWarningsTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow common.ValidationWarningsTest\n@@ -55,1 +53,0 @@\n-@Listeners({jaxp.library.InternalAPIPolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/ValidationWarningsTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-\n@@ -65,1 +63,1 @@\n-        runWithAllPerm(() -> System.setErr(new PrintStream(byteStream)));\n+        System.setErr(new PrintStream(byteStream));\n@@ -71,1 +69,1 @@\n-        runWithAllPerm(EXECUTOR::shutdown);\n+        EXECUTOR.shutdown();\n@@ -75,1 +73,1 @@\n-            runWithAllPerm(EXECUTOR::shutdownNow);\n+            EXECUTOR.shutdown();\n@@ -78,1 +76,1 @@\n-        runWithAllPerm(() -> System.setErr(defStdErr));\n+        System.setErr(defStdErr);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/WarningsTestBase.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-import org.testng.annotations.Listeners;\n@@ -69,1 +68,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow common.prettyprint.PrettyPrintTest\n@@ -73,1 +71,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/PrettyPrintTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow datatype.Bug6320118\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/Bug6320118.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow datatype.Bug6937951Test\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/Bug6937951Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow datatype.Bug6937964Test\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/Bug6937964Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow datatype.Bug7042647Test\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/Bug7042647Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow datatype.DatatypeFactoryTest\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/DatatypeFactoryTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow datatype.DurationTest\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/DurationTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-\n@@ -30,1 +28,0 @@\n-\n@@ -32,1 +29,0 @@\n-\n@@ -34,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow datatype.FactoryFindTest\n@@ -44,1 +38,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -54,1 +47,1 @@\n-        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n+        Thread.currentThread().setContextClassLoader(null);\n@@ -59,1 +52,1 @@\n-        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(new MyClassLoader()));\n+        Thread.currentThread().setContextClassLoader(new MyClassLoader());\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/FactoryFindTest.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow datatype.JDK8068839Test\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/JDK8068839Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow datatype.XMLGregorianCalendarTest\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/XMLGregorianCalendarTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug4915524\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug4915524.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug4915748\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug4915748.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug4966082\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug4966082.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug4966138\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug4966138.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug4966142\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug4966142.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug4966143\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug4966143.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug6339023\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug6339023.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug6355326\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug6355326.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug6367542\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug6367542.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug6520131\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug6520131.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug6521260\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug6521260.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -49,1 +48,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug6582545Test\n@@ -53,1 +51,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug6582545Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.Bug6879614Test\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/Bug6879614Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.CR6333993Test\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/CR6333993Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.CR6517707Test\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/CR6517707Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.CR6517717Test\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/CR6517717Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.CR6909336Test\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/CR6909336Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -62,1 +61,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.DOMConfigurationTest\n@@ -66,1 +64,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/DOMConfigurationTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -49,1 +48,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/DOMFeatureTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.DOMXPathTest\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/DOMXPathTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -59,1 +58,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/DocumentTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.ElementTraversal\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/ElementTraversal.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-\n@@ -28,1 +26,0 @@\n-import org.testng.annotations.Listeners;\n@@ -35,1 +32,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.JdkXmlDomTest\n@@ -39,1 +35,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -43,1 +38,1 @@\n-        ClassLoader cl = runWithAllPerm(() -> ClassLoader.getSystemClassLoader().getParent());\n+        ClassLoader cl = ClassLoader.getSystemClassLoader().getParent();\n@@ -46,1 +41,1 @@\n-        Assert.assertTrue(runWithAllPerm(() -> cls.getClassLoader()) != null);\n+        Assert.assertTrue(cls.getClassLoader() != null);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/JdkXmlDomTest.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.TCKEncodingTest\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/TCKEncodingTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -56,1 +55,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.ls.Bug4973153\n@@ -60,1 +58,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/ls\/Bug4973153.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.ls.Bug6290947\n@@ -55,1 +53,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/ls\/Bug6290947.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.ls.Bug6354955\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/ls\/Bug6354955.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.ls.Bug6376823\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/ls\/Bug6376823.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.ls.Bug6710741Test\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/ls\/Bug6710741Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.ls.LSParserTCKTest\n@@ -57,1 +55,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/ls\/LSParserTCKTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.ls.LSParserTest\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/ls\/LSParserTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -58,1 +57,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow dom.ls.LSSerializerTest\n@@ -62,1 +60,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/dom\/ls\/LSSerializerTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.BaseParsingTest\n@@ -55,1 +53,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/BaseParsingTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug4674384_MAX_OCCURS_Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug4674384_MAX_OCCURS_Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug4934208\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug4934208.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug4967002\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug4967002.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug4985486\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug4985486.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug4991020\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug4991020.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug4991946\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug4991946.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug5010072\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug5010072.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug5025825\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug5025825.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -48,1 +47,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6309988\n@@ -53,1 +51,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6309988.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.USER_DIR;\n-import static jaxp.library.JAXPTestUtilities.tryRunWithTmpPermission;\n-\n@@ -33,2 +30,0 @@\n-import java.util.PropertyPermission;\n-\n@@ -36,1 +31,0 @@\n-\n@@ -38,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,0 +36,1 @@\n+import static jaxp.library.JAXPTestUtilities.USER_DIR;\n@@ -48,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6341770\n@@ -52,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -80,7 +72,6 @@\n-            tryRunWithTmpPermission(\n-                    () -> SAXParserFactory.newInstance().newSAXParser().parse(main, new DefaultHandler() {\n-                        public void startElement(String uri, String localname, String qname, Attributes attr)\n-                                throws SAXException {\n-                            System.out.println(\"encountered <\" + qname + \">\");\n-                        }\n-                    }), new PropertyPermission(\"user.dir\", \"read\"));\n+            SAXParserFactory.newInstance().newSAXParser().parse(main, new DefaultHandler() {\n+                public void startElement(String uri, String localname, String qname, Attributes attr)\n+                        throws SAXException {\n+                    System.out.println(\"encountered <\" + qname + \">\");\n+                }\n+            });\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6341770.java","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6361283\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6361283.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6506304Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6506304Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6518733\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6518733.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6564400\n@@ -57,1 +55,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6564400.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6573786\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6573786.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6594813\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6594813.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6608841\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6608841.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6690015\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6690015.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6760982\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6760982.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug6849942Test\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug6849942Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -48,1 +47,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug7157608Test\n@@ -52,1 +50,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug7157608Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug7166896Test\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug7166896Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug8003147Test\n@@ -37,1 +36,0 @@\n-\n@@ -40,1 +38,0 @@\n-\n@@ -42,1 +39,0 @@\n-\n@@ -44,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +41,0 @@\n-\n@@ -58,1 +52,0 @@\n-@Listeners({ jaxp.library.FilePolicy.class, jaxp.library.InternalAPIPolicy.class })\n@@ -66,3 +59,2 @@\n-        JAXPTestUtilities.tryRunWithTmpPermission(() -> {\n-            String classfile = getSystemProperty(\"test.classes\") + \"\/parsers\/Bug8003147TestClass.class\";\n-            JavaClass jc = new ClassParser(classfile).parse();\n+        String classfile = getSystemProperty(\"test.classes\") + \"\/parsers\/Bug8003147TestClass.class\";\n+        JavaClass jc = new ClassParser(classfile).parse();\n@@ -70,11 +62,10 @@\n-            \/\/ rename class\n-            ConstantPool cp = jc.getConstantPool();\n-            int cpIndex = ((ConstantClass) cp.getConstant(jc.getClassNameIndex())).getNameIndex();\n-            cp.setConstant(cpIndex, new ConstantUtf8(\"parsers\/Bug8003147TestClassPrime\"));\n-            ClassGen gen = new ClassGen(jc);\n-            Method[] methods = jc.getMethods();\n-            int index;\n-            for (index = 0; index < methods.length; index++) {\n-                if (methods[index].getName().equals(\"doSomething\")) {\n-                    break;\n-                }\n+        \/\/ rename class\n+        ConstantPool cp = jc.getConstantPool();\n+        int cpIndex = ((ConstantClass) cp.getConstant(jc.getClassNameIndex())).getNameIndex();\n+        cp.setConstant(cpIndex, new ConstantUtf8(\"parsers\/Bug8003147TestClassPrime\"));\n+        ClassGen gen = new ClassGen(jc);\n+        Method[] methods = jc.getMethods();\n+        int index;\n+        for (index = 0; index < methods.length; index++) {\n+            if (methods[index].getName().equals(\"doSomething\")) {\n+                break;\n@@ -82,2 +73,3 @@\n-            Method m = methods[index];\n-            MethodGen mg = new MethodGen(m, gen.getClassName(), gen.getConstantPool());\n+        }\n+        Method m = methods[index];\n+        MethodGen mg = new MethodGen(m, gen.getClassName(), gen.getConstantPool());\n@@ -85,8 +77,8 @@\n-            \/\/ @bug 8064516, not currently used directly by JAXP, but we may need\n-            \/\/ to modify preexisting methods in the future.\n-            InstructionFactory f = new InstructionFactory(gen);\n-            InstructionList il = mg.getInstructionList();\n-            InstructionList newInst = new InstructionList();\n-            newInst.append(f.createPrintln(\"Hello Sekai!\"));\n-            il.insert(newInst);\n-            mg.setMaxStack();\n+        \/\/ @bug 8064516, not currently used directly by JAXP, but we may need\n+        \/\/ to modify preexisting methods in the future.\n+        InstructionFactory f = new InstructionFactory(gen);\n+        InstructionList il = mg.getInstructionList();\n+        InstructionList newInst = new InstructionList();\n+        newInst.append(f.createPrintln(\"Hello Sekai!\"));\n+        il.insert(newInst);\n+        mg.setMaxStack();\n@@ -94,3 +86,3 @@\n-            gen.replaceMethod(m, mg.getMethod());\n-            String path = classfile.replace(\"Bug8003147TestClass\", \"Bug8003147TestClassPrime\");\n-            gen.getJavaClass().dump(new FileOutputStream(path));\n+        gen.replaceMethod(m, mg.getMethod());\n+        String path = classfile.replace(\"Bug8003147TestClass\", \"Bug8003147TestClassPrime\");\n+        gen.getJavaClass().dump(new FileOutputStream(path));\n@@ -98,7 +90,6 @@\n-            try {\n-                Class.forName(\"parsers.Bug8003147TestClassPrime\");\n-            } catch (ClassFormatError cfe) {\n-                cfe.printStackTrace();\n-                Assert.fail(\"modified version of class does not pass verification\");\n-            }\n-        }, new FilePermission(getSystemProperty(\"test.classes\") + \"\/-\", \"read,write\"));\n+        try {\n+            Class.forName(\"parsers.Bug8003147TestClassPrime\");\n+        } catch (ClassFormatError cfe) {\n+            cfe.printStackTrace();\n+            Assert.fail(\"modified version of class does not pass verification\");\n+        }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug8003147Test.java","additions":33,"deletions":42,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n@@ -28,1 +27,0 @@\n-\n@@ -31,1 +29,0 @@\n-\n@@ -34,1 +31,0 @@\n-\n@@ -38,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.Bug8073385\n@@ -52,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -60,1 +53,1 @@\n-        runWithAllPerm(() -> Locale.setDefault(Locale.ENGLISH));\n+        Locale.setDefault(Locale.ENGLISH);\n@@ -65,1 +58,1 @@\n-        runWithAllPerm(() -> Locale.setDefault(defLoc));\n+        Locale.setDefault(defLoc);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/Bug8073385.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-\n@@ -30,1 +28,0 @@\n-\n@@ -32,1 +29,0 @@\n-\n@@ -34,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.FactoryFindTest\n@@ -44,1 +38,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -54,1 +47,1 @@\n-        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n+        Thread.currentThread().setContextClassLoader(null);\n@@ -58,1 +51,1 @@\n-        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(new MyClassLoader()));\n+        Thread.currentThread().setContextClassLoader(new MyClassLoader());\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/FactoryFindTest.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.HandleError\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/HandleError.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.ParseEmptyStream\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/ParseEmptyStream.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -8,1 +8,0 @@\n-import org.testng.annotations.Listeners;\n@@ -17,1 +16,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.SupplementaryChars\n@@ -25,1 +23,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/SupplementaryChars.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -49,1 +48,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow parsers.xinclude.Bug6794483Test\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/parsers\/xinclude\/Bug6794483Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import org.testng.annotations.Listeners;\n@@ -34,1 +33,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow sax.Attributes2ImplTest\n@@ -38,1 +36,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/Attributes2ImplTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow sax.Bug6889654Test\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/Bug6889654Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow sax.Bug6925410Test\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/Bug6925410Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow sax.Bug6949607Test\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/Bug6949607Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow sax.Bug6992561Test\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/Bug6992561Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static jaxp.library.JAXPTestUtilities.tryRunWithTmpPermission;\n-\n@@ -40,2 +38,0 @@\n-import java.util.PropertyPermission;\n-\n@@ -45,1 +41,0 @@\n-\n@@ -47,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -60,1 +54,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow sax.Bug7057778Test\n@@ -64,1 +57,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -80,2 +72,1 @@\n-            tryRunWithTmpPermission(() -> parser.parse(dst, new MyHandler1()),\n-                    new PropertyPermission(\"user.dir\", \"read\"));\n+            parser.parse(dst, new MyHandler1());\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/Bug7057778Test.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -48,1 +47,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow sax.DefaultHandler2Test\n@@ -52,1 +50,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/DefaultHandler2Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow sax.IssueTracker56Test\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/IssueTracker56Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow sax.NSSupportTest\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/NSSupportTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n-@Listeners({ jaxp.library.BasePolicy.class })\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/SAXParserTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-\n@@ -29,1 +27,0 @@\n-\n@@ -32,1 +29,0 @@\n-\n@@ -34,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,2 +40,0 @@\n- * @run testng\/othervm -Djdk.xml.resetSymbolTable=false -DrunSecMngr=true -Djava.security.manager=allow sax.SymbolTableResetTest\n- * @run testng\/othervm -Djdk.xml.resetSymbolTable=true -DrunSecMngr=true -Djava.security.manager=allow sax.SymbolTableResetTest\n@@ -50,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -94,1 +86,1 @@\n-        boolean spSet = runWithAllPerm(() -> System.getProperty(RESET_FEATURE)) != null;\n+        boolean spSet = System.getProperty(RESET_FEATURE) != null;\n@@ -101,1 +93,1 @@\n-            resetExpected = runWithAllPerm(() -> Boolean.getBoolean(RESET_FEATURE));\n+            resetExpected = Boolean.getBoolean(RESET_FEATURE);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/SymbolTableResetTest.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow sax.XMLReaderTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/sax\/XMLReaderTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.AttributeLocalNameTest.AttributeLocalNameTest\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/AttributeLocalNameTest\/AttributeLocalNameTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.Bug6370703\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/Bug6370703.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.Bug6378422\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/Bug6378422.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.Bug6380870\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/Bug6380870.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.Bug6489502\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/Bug6489502.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.Bug6509774\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/Bug6509774.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.Bug6688002Test\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/Bug6688002Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.Bug6976938Test\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/Bug6976938Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.CoalesceTest.CoalesceTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/CoalesceTest\/CoalesceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.EntitiesTest.EntityTest\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/EntitiesTest\/EntityTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.EventReaderDelegateTest\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/EventReaderDelegateTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,0 @@\n-import org.testng.annotations.Listeners;\n@@ -58,1 +57,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.EventsTest.Issue41Test\n@@ -62,1 +60,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/EventsTest\/Issue41Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.EventsTest.Issue48Test\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/EventsTest\/Issue48Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.EventsTest.Issue53Test\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/EventsTest\/Issue53Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.EventsTest.Issue58Test\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/EventsTest\/Issue58Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-\n@@ -37,1 +35,0 @@\n-\n@@ -40,1 +37,0 @@\n-\n@@ -42,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -48,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.FactoryFindTest\n@@ -52,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -112,1 +105,1 @@\n-            runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n+            Thread.currentThread().setContextClassLoader(null);\n@@ -116,1 +109,1 @@\n-            runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(new MyClassLoader()));\n+            Thread.currentThread().setContextClassLoader(new MyClassLoader());\n@@ -127,1 +120,1 @@\n-            runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n+            Thread.currentThread().setContextClassLoader(null);\n@@ -131,1 +124,1 @@\n-            runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(new MyClassLoader()));\n+            Thread.currentThread().setContextClassLoader(new MyClassLoader());\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/FactoryFindTest.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.IgnoreExternalDTDTest\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/IgnoreExternalDTDTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.ProcessingInstructionTest.ProcessingInstructionTest\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/ProcessingInstructionTest\/ProcessingInstructionTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.StreamReaderDelegateTest\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/StreamReaderDelegateTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventLocationTest\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventLocationTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventReaderTest.Bug6489890\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/Bug6489890.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.io.FilePermission;\n@@ -27,1 +26,0 @@\n-\n@@ -32,3 +30,0 @@\n-\n-import jaxp.library.JAXPTestUtilities;\n-\n@@ -36,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventReaderTest.Bug6555001\n@@ -47,1 +40,0 @@\n-@Listeners({ jaxp.library.BasePolicy.class })\n@@ -55,3 +47,2 @@\n-        JAXPTestUtilities.tryRunWithTmpPermission(() -> {\n-            XMLInputFactory factory = XMLInputFactory.newInstance();\n-            factory.setProperty(\"javax.xml.stream.isReplacingEntityReferences\", true);\n+        XMLInputFactory factory = XMLInputFactory.newInstance();\n+        factory.setProperty(\"javax.xml.stream.isReplacingEntityReferences\", true);\n@@ -59,2 +50,2 @@\n-            StringReader sr = new StringReader(XML);\n-            XMLEventReader reader = factory.createXMLEventReader(sr);\n+        StringReader sr = new StringReader(XML);\n+        XMLEventReader reader = factory.createXMLEventReader(sr);\n@@ -62,2 +53,2 @@\n-            boolean sawUndef = false;\n-            boolean sawDef = false;\n+        boolean sawUndef = false;\n+        boolean sawDef = false;\n@@ -65,12 +56,11 @@\n-            while (reader.hasNext()) {\n-                XMLEvent event = reader.nextEvent();\n-                \/\/ System.out.println(\"Event: \" + event);\n-                if (event.isEntityReference()) {\n-                    EntityReference ref = (EntityReference) event;\n-                    if (\"def\".equals(ref.getName())) {\n-                        sawDef = true;\n-                    } else if (\"undef\".equals(ref.getName())) {\n-                        sawUndef = true;\n-                    } else {\n-                        throw new IllegalArgumentException(\"Unexpected entity name\");\n-                    }\n+        while (reader.hasNext()) {\n+            XMLEvent event = reader.nextEvent();\n+            \/\/ System.out.println(\"Event: \" + event);\n+            if (event.isEntityReference()) {\n+                EntityReference ref = (EntityReference) event;\n+                if (\"def\".equals(ref.getName())) {\n+                    sawDef = true;\n+                } else if (\"undef\".equals(ref.getName())) {\n+                    sawUndef = true;\n+                } else {\n+                    throw new IllegalArgumentException(\"Unexpected entity name\");\n@@ -79,0 +69,1 @@\n+        }\n@@ -80,4 +71,3 @@\n-            Assert.assertEquals(false, sawDef);\n-            Assert.assertEquals(true, sawUndef);\n-            reader.close();\n-        }, new FilePermission(\"\/tmp\/this\/does\/not\/exist\/but\/that\/is\/ok\", \"read\"));\n+        Assert.assertEquals(false, sawDef);\n+        Assert.assertEquals(true, sawUndef);\n+        reader.close();\n@@ -88,3 +78,2 @@\n-        JAXPTestUtilities.tryRunWithTmpPermission(() -> {\n-            XMLInputFactory factory = XMLInputFactory.newInstance();\n-            factory.setProperty(\"javax.xml.stream.isReplacingEntityReferences\", false);\n+        XMLInputFactory factory = XMLInputFactory.newInstance();\n+        factory.setProperty(\"javax.xml.stream.isReplacingEntityReferences\", false);\n@@ -92,2 +81,2 @@\n-            StringReader sr = new StringReader(XML);\n-            XMLEventReader reader = factory.createXMLEventReader(sr);\n+        StringReader sr = new StringReader(XML);\n+        XMLEventReader reader = factory.createXMLEventReader(sr);\n@@ -95,2 +84,2 @@\n-            boolean sawUndef = false;\n-            boolean sawDef = false;\n+        boolean sawUndef = false;\n+        boolean sawDef = false;\n@@ -98,12 +87,11 @@\n-            while (reader.hasNext()) {\n-                XMLEvent event = reader.nextEvent();\n-                \/\/ System.out.println(\"Event: \" + event);\n-                if (event.isEntityReference()) {\n-                    EntityReference ref = (EntityReference) event;\n-                    if (\"def\".equals(ref.getName())) {\n-                        sawDef = true;\n-                    } else if (\"undef\".equals(ref.getName())) {\n-                        sawUndef = true;\n-                    } else {\n-                        throw new IllegalArgumentException(\"Unexpected entity name\");\n-                    }\n+        while (reader.hasNext()) {\n+            XMLEvent event = reader.nextEvent();\n+            \/\/ System.out.println(\"Event: \" + event);\n+            if (event.isEntityReference()) {\n+                EntityReference ref = (EntityReference) event;\n+                if (\"def\".equals(ref.getName())) {\n+                    sawDef = true;\n+                } else if (\"undef\".equals(ref.getName())) {\n+                    sawUndef = true;\n+                } else {\n+                    throw new IllegalArgumentException(\"Unexpected entity name\");\n@@ -112,0 +100,1 @@\n+        }\n@@ -113,4 +102,3 @@\n-            Assert.assertEquals(true, sawDef);\n-            Assert.assertEquals(true, sawUndef);\n-            reader.close();\n-        }, new FilePermission(\"\/tmp\/this\/does\/not\/exist\/but\/that\/is\/ok\", \"read\"));\n+        Assert.assertEquals(true, sawDef);\n+        Assert.assertEquals(true, sawUndef);\n+        reader.close();\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/Bug6555001.java","additions":43,"deletions":55,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventReaderTest.Bug6586466Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/Bug6586466Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventReaderTest.Bug6613059Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/Bug6613059Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventReaderTest.Bug6668115Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/Bug6668115Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventReaderTest.Bug6846133Test\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/Bug6846133Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventReaderTest.Bug8153781\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/Bug8153781.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-\n@@ -33,1 +32,0 @@\n-\n@@ -35,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +34,0 @@\n-\n@@ -47,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/EventReaderTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventReaderTest.Issue40Test\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/Issue40Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventReaderTest.JDK8201138\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/JDK8201138.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventReaderTest.JDK8209615\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventReaderTest\/JDK8209615.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventWriterTest.ReaderToWriterTest\n@@ -55,1 +53,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventWriterTest\/ReaderToWriterTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLEventWriterTest.XMLEventWriterTest\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLEventWriterTest\/XMLEventWriterTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithTmpPermission;\n-import static jaxp.library.JAXPTestUtilities.setSystemProperty;\n-\n@@ -30,1 +27,0 @@\n-\n@@ -32,1 +28,1 @@\n-\n+import static jaxp.library.JAXPTestUtilities.setSystemProperty;\n@@ -34,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLInputFactoryTest.Bug6756677Test\n@@ -46,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -54,2 +47,1 @@\n-            XMLInputFactory xif = runWithTmpPermission(() -> XMLInputFactory.newInstance(\"MyInputFactory\", null),\n-                    new PropertyPermission(\"MyInputFactory\", \"read\"));\n+            XMLInputFactory xif = XMLInputFactory.newInstance(\"MyInputFactory\", null);\n@@ -71,2 +63,1 @@\n-            XMLInputFactory xif = runWithTmpPermission(() -> XMLInputFactory.newFactory(\"MyInputFactory\", cl),\n-                    new PropertyPermission(\"MyInputFactory\", \"read\"));\n+            XMLInputFactory xif = XMLInputFactory.newFactory(\"MyInputFactory\", cl);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLInputFactoryTest\/Bug6756677Test.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLInputFactoryTest.Bug6909759Test\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLInputFactoryTest\/Bug6909759Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLInputFactoryTest.IssueTracker38\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLInputFactoryTest\/IssueTracker38.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLOutputFactoryTest.Bug6846132Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLOutputFactoryTest\/Bug6846132Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLOutputFactoryTest.DuplicateNSDeclarationTest\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLOutputFactoryTest\/DuplicateNSDeclarationTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLOutputFactoryTest.StreamResultTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLOutputFactoryTest\/StreamResultTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLResolverTest.XMLResolverTest\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLResolverTest\/XMLResolverTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamExceptionTest.ExceptionCauseTest\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamExceptionTest\/ExceptionCauseTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamExceptionTest.ExceptionTest\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamExceptionTest\/ExceptionTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamFilterTest.Bug6481615\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamFilterTest\/Bug6481615.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamFilterTest.Bug6481678\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamFilterTest\/Bug6481678.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamFilterTest.HasNextTest\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamFilterTest\/HasNextTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.BOMTest\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/BOMTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.Bug6388460\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/Bug6388460.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.Bug6472982Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/Bug6472982Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.Bug6767322Test\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/Bug6767322Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.Bug6847819Test\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/Bug6847819Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.BugTest\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/BugTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.DefaultAttributeTest\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/DefaultAttributeTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.DoubleXmlnsTest\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/DoubleXmlnsTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.IsValidatingTest\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/IsValidatingTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.Issue44Test\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/Issue44Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.Issue47Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/Issue47Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.IssueTracker24\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/IssueTracker24.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.IssueTracker35\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/IssueTracker35.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.IssueTracker70\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/IssueTracker70.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.Jsr173MR1Req5Test\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/Jsr173MR1Req5Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.Jsr173MR1Req8Test\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/Jsr173MR1Req8Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.NamespaceTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/NamespaceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.StreamReaderTest\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/StreamReaderTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.SupportDTDTest\n@@ -80,1 +78,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/SupportDTDTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.VoiceXMLDTDTest\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/VoiceXMLDTDTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamReaderTest.XML11Test\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamReaderTest\/XML11Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.AttributeEscapeTest\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/AttributeEscapeTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.Bug6452107\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/Bug6452107.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.Bug6600882Test\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/Bug6600882Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.Bug6675332Test\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/Bug6675332Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.Bug7037352Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/Bug7037352Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.DomUtilTest\n@@ -57,1 +55,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/DomUtilTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.EmptyElementTest\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/EmptyElementTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.EncodingTest\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/EncodingTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.NamespaceTest\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/NamespaceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.NullUriDetectionTest\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/NullUriDetectionTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.SqeLinuxTest\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/SqeLinuxTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.SurrogatesTest\n@@ -53,1 +51,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/SurrogatesTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.UnprefixedNameTest\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/UnprefixedNameTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.WriterTest\n@@ -55,1 +53,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/WriterTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow stream.XMLStreamWriterTest.XMLStreamWriterTest\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamWriterTest\/XMLStreamWriterTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug4693341Test\n@@ -55,1 +53,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug4693341Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug4892774\n@@ -58,1 +56,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug4892774.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug5073477\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug5073477.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6175602\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6175602.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -52,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6206491\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6206491.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.USER_DIR;\n-import static jaxp.library.JAXPTestUtilities.runWithTmpPermission;\n-\n@@ -32,1 +29,0 @@\n-\n@@ -37,1 +33,0 @@\n-\n@@ -39,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,0 +35,1 @@\n+import static jaxp.library.JAXPTestUtilities.USER_DIR;\n@@ -46,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6216226Test\n@@ -50,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -61,1 +54,1 @@\n-            StreamResult r = runWithTmpPermission(() -> new StreamResult(test), new PropertyPermission(\"user.dir\", \"read\"));\n+            StreamResult r = new StreamResult(test);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6216226Test.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6311448\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6311448.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6384805\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6384805.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6465722\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6465722.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6467808\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6467808.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6490380\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6490380.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -52,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6490921\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6490921.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6513892\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6513892.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6537167\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6537167.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6540545\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6540545.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6551616\n@@ -41,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.InternalAPIPolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6551616.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6559595\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6559595.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6565260\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6565260.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -49,1 +48,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Bug6940416\n@@ -53,1 +51,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Bug6940416.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.BugDB12665704Test\n@@ -57,1 +55,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/BugDB12665704Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,4 @@\n+package transform;\n+\n+import org.testng.annotations.Test;\n+\n@@ -27,1 +31,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CLITest\n@@ -31,11 +34,0 @@\n-\n-package transform;\n-\n-import java.util.PropertyPermission;\n-\n-import jaxp.library.JAXPTestUtilities;\n-\n-import org.testng.annotations.Listeners;\n-import org.testng.annotations.Test;\n-\n-@Listeners({ jaxp.library.FilePolicy.class })\n@@ -46,5 +38,3 @@\n-        JAXPTestUtilities.tryRunWithTmpPermission(() -> {\n-            String[] args = new String[] { \"-XSLTC\", \"-XSL\", getClass().getResource(\"tigertest.xsl\").toString(),\n-                \"-IN\", getClass().getResource(\"tigertest-in.xml\").toString(), };\n-            ProcessXSLT.main(args);\n-        }, new PropertyPermission(\"*\", \"read,write\"));\n+        String[] args = new String[] { \"-XSLTC\", \"-XSL\", getClass().getResource(\"tigertest.xsl\").toString(),\n+            \"-IN\", getClass().getResource(\"tigertest-in.xml\").toString(), };\n+        ProcessXSLT.main(args);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CLITest.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CR6401137Test\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CR6401137Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.io.FilePermission;\n@@ -31,1 +30,0 @@\n-\n@@ -38,1 +36,0 @@\n-\n@@ -40,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,2 +41,0 @@\n-import jaxp.library.JAXPTestUtilities;\n-\n@@ -52,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CR6551600Test\n@@ -56,1 +49,0 @@\n-@Listeners({ jaxp.library.BasePolicy.class })\n@@ -76,19 +68,18 @@\n-        JAXPTestUtilities.runWithTmpPermission(() -> {\n-            try {\n-                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n-                DocumentBuilder builder = factory.newDocumentBuilder();\n-                Document doc = builder.newDocument();\n-                Element root = doc.createElement(\"test\");\n-                doc.appendChild(root);\n-                \/\/ create an identity transform\n-                Transformer t = TransformerFactory.newInstance().newTransformer();\n-                File f = new File(uncFilePath);\n-                StreamResult result = new StreamResult(f);\n-                DOMSource source = new DOMSource(doc);\n-                System.out.println(\"Writing to \" + f);\n-                t.transform(source, result);\n-            } catch (Exception e) {\n-                \/\/ unexpected failure\n-                e.printStackTrace();\n-                Assert.fail(e.toString());\n-            }\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            Document doc = builder.newDocument();\n+            Element root = doc.createElement(\"test\");\n+            doc.appendChild(root);\n+            \/\/ create an identity transform\n+            Transformer t = TransformerFactory.newInstance().newTransformer();\n+            File f = new File(uncFilePath);\n+            StreamResult result = new StreamResult(f);\n+            DOMSource source = new DOMSource(doc);\n+            System.out.println(\"Writing to \" + f);\n+            t.transform(source, result);\n+        } catch (Exception e) {\n+            \/\/ unexpected failure\n+            e.printStackTrace();\n+            Assert.fail(e.toString());\n+        }\n@@ -96,5 +87,4 @@\n-            File file = new File(uncFilePath);\n-            if (file.exists()) {\n-                file.deleteOnExit();\n-            }\n-        }, new FilePermission(uncFilePath, \"read,write,delete\"));\n+        File file = new File(uncFilePath);\n+        if (file.exists()) {\n+            file.deleteOnExit();\n+        }\n@@ -104,11 +94,9 @@\n-        return JAXPTestUtilities.runWithTmpPermission(() -> {\n-            try {\n-                Path tmepFile = Files.createTempFile(Paths.get(path), \"test\", \"6551600\");\n-                Files.deleteIfExists(tmepFile);\n-                return true;\n-            } catch (Exception e) {\n-                System.out.println(\"Access check failed.\");\n-                e.printStackTrace();\n-                return false;\n-            }\n-        }, new FilePermission(path + \"*\", \"read,write,delete\"));\n+        try {\n+            Path tmepFile = Files.createTempFile(Paths.get(path), \"test\", \"6551600\");\n+            Files.deleteIfExists(tmepFile);\n+            return true;\n+        } catch (Exception e) {\n+            System.out.println(\"Access check failed.\");\n+            e.printStackTrace();\n+            return false;\n+        }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CR6551600Test.java","additions":32,"deletions":44,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CR6577667Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CR6577667Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CR6652519Test\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CR6652519Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CR6689809Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CR6689809Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CR6905829Test\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CR6905829Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CR6935697Test\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CR6935697Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CR6941869Test\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CR6941869Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -49,1 +48,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CR6957215Test\n@@ -53,1 +51,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CR6957215Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.CR7098746Test\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/CR7098746Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.testng.annotations.Listeners;\n@@ -52,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.DOMResultTest\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/DOMResultTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-\n@@ -30,1 +28,0 @@\n-\n@@ -32,1 +29,0 @@\n-\n@@ -34,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.FactoryFindTest\n@@ -44,1 +38,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -54,1 +47,1 @@\n-        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n+        Thread.currentThread().setContextClassLoader(null);\n@@ -58,1 +51,1 @@\n-        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(new MyClassLoader()));\n+        Thread.currentThread().setContextClassLoader(new MyClassLoader());\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/FactoryFindTest.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Issue2204Test\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Issue2204Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.Issue2290Test\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/Issue2290Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-\n@@ -38,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/JDK8207760.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-\n@@ -40,2 +39,0 @@\n-\n-import org.testng.annotations.Test;\n@@ -43,1 +40,1 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n+import org.testng.annotations.Test;\n@@ -49,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.NamespacePrefixTest\n@@ -87,1 +83,1 @@\n-        runWithAllPerm(EXECUTOR::shutdown);\n+        EXECUTOR.shutdown();\n@@ -91,1 +87,1 @@\n-            runWithAllPerm(EXECUTOR::shutdownNow);\n+            EXECUTOR.shutdown();\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/NamespacePrefixTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.SAX2DOMTest\n@@ -55,1 +53,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SAX2DOMTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.SecureProcessingTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SecureProcessingTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.SourceTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SourceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,0 @@\n-import org.testng.annotations.Listeners;\n@@ -64,1 +63,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.StAXSourceTest\n@@ -68,1 +66,0 @@\n-@Listeners({jaxp.library.JAXPTestPolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/StAXSourceTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-\n@@ -33,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.StylesheetTest\n@@ -45,1 +42,0 @@\n-@Listeners(jaxp.library.FilePolicy.class)\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/StylesheetTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-\n@@ -41,6 +40,0 @@\n-\n-import org.xml.sax.Attributes;\n-import org.xml.sax.SAXException;\n-import org.xml.sax.helpers.DefaultHandler;\n-\n-import static jaxp.library.JAXPTestUtilities.compareWithGold;\n@@ -48,0 +41,1 @@\n+import static jaxp.library.JAXPTestUtilities.compareWithGold;\n@@ -49,1 +43,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,0 +44,3 @@\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n@@ -59,1 +55,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SurrogateTest.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.TemplatesTest\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/TemplatesTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import org.testng.annotations.Listeners;\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.TransformerFactoryTest\n@@ -57,1 +55,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/TransformerFactoryTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n-import org.testng.annotations.Listeners;\n@@ -75,1 +74,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.TransformerTest\n@@ -80,1 +78,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/TransformerTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.io.IOException;\n@@ -40,1 +39,0 @@\n-\n@@ -43,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +42,0 @@\n-\n@@ -47,1 +43,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n@@ -50,1 +45,0 @@\n-import static jaxp.library.JAXPTestUtilities.tryRunWithTmpPermission;\n@@ -57,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.XSLTFunctionsTest\n@@ -62,1 +55,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -82,3 +74,1 @@\n-        tryRunWithTmpPermission(\n-                () -> t.transform(new StreamSource(new StringReader(xml)), new StreamResult(new StringWriter())),\n-                new FilePermission(output, \"write\"), new FilePermission(redirect, \"write\"));\n+        t.transform(new StreamSource(new StringReader(xml)), new StreamResult(new StringWriter()));\n@@ -176,1 +166,1 @@\n-                runWithAllPerm(() -> Thread.currentThread().getContextClassLoader()));\n+                Thread.currentThread().getContextClassLoader());\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/XSLTFunctionsTest.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.sax.Bug6451633\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/sax\/Bug6451633.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.sort.SortTest\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/sort\/SortTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithTmpPermission;\n-import static jaxp.library.JAXPTestUtilities.tryRunWithTmpPermission;\n@@ -34,1 +32,0 @@\n-\n@@ -42,1 +39,0 @@\n-\n@@ -45,1 +41,0 @@\n-\n@@ -72,1 +67,1 @@\n-        return runWithTmpPermission(() -> new StreamResult(fos), new PropertyPermission(\"user.dir\", \"read\"));\n+        return new StreamResult(fos);\n@@ -92,1 +87,1 @@\n-        tryRunWithTmpPermission(() -> parser.parse(new File(TEMP_FILE), dh), new PropertyPermission(\"user.dir\", \"read\"));\n+        parser.parse(new File(TEMP_FILE), dh);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/util\/StreamUtil.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.AnyElementTest\n@@ -42,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/AnyElementTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4966232\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4966232.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4966254\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4966254.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -48,1 +47,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4969042\n@@ -53,1 +51,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4969042.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4969089\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4969089.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4969110\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4969110.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4969689\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4969689.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4969692\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4969692.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4969693\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4969693.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4969695\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4969695.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4969732\n@@ -52,1 +50,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4969732.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +37,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4970380\n@@ -42,1 +40,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4970380.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4970383\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4970383.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4970400\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4970400.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4970402\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4970402.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4970951\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4970951.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4971605\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4971605.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4971607\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4971607.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4972882\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4972882.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4986844\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4986844.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4987574\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4987574.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4988267\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4988267.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import org.testng.annotations.Listeners;\n@@ -35,1 +34,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4988268\n@@ -39,1 +37,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4988268.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4988387\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4988387.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4996446\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4996446.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug4997818\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug4997818.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug5011500\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug5011500.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -52,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug5072946\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug5072946.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.testng.annotations.Listeners;\n@@ -37,1 +36,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6378043\n@@ -41,1 +39,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6378043.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import org.testng.annotations.Listeners;\n@@ -36,1 +35,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6449797\n@@ -40,1 +38,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6449797.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.testng.annotations.Listeners;\n@@ -49,1 +48,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6457662\n@@ -53,1 +51,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6457662.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import org.testng.annotations.Listeners;\n@@ -55,1 +54,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6467424Test\n@@ -59,1 +57,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6467424Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6483188\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6483188.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.testng.annotations.Listeners;\n@@ -34,1 +33,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6493687\n@@ -38,1 +36,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6493687.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -52,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6509668\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6509668.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6526547\n@@ -50,1 +48,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6526547.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6531160\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6531160.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6695843Test\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6695843Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-\n@@ -36,1 +34,0 @@\n-\n@@ -45,1 +42,0 @@\n-\n@@ -47,1 +43,0 @@\n-import org.testng.annotations.Listeners;\n@@ -58,1 +53,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6773084Test\n@@ -62,1 +56,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -102,1 +95,1 @@\n-        runWithAllPerm(() -> EXEC.shutdown());\n+        EXEC.shutdown();\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6773084Test.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6859210\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6859210.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.io.IOException;\n@@ -29,6 +28,0 @@\n-import java.security.AccessController;\n-import java.security.AllPermission;\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.PrivilegedAction;\n-\n@@ -41,3 +34,0 @@\n-\n-import org.testng.Assert;\n-import org.testng.annotations.Listeners;\n@@ -46,3 +36,0 @@\n-import org.xml.sax.SAXException;\n-import org.xml.sax.SAXNotRecognizedException;\n-import org.xml.sax.SAXNotSupportedException;\n@@ -54,3 +41,3 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6925531Test\n- * @run testng\/othervm -Djava.security.manager=allow validation.Bug6925531Test\n- * @summary Test Validator can validate SAXSource when SecurityManager is set or FEATURE_SECURE_PROCESSING is on.\n+ * @run testng\/othervm validation.Bug6925531Test\n+ * @summary Test Validator can validate SAXSource when FEATURE_SECURE_PROCESSING is on.\n+ * Note that the run with the Java Security Manager was removed.\n@@ -58,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -62,2 +48,5 @@\n-    String xsd = \"<?xml version='1.0'?>\\n\" + \"<schema xmlns='http:\/\/www.w3.org\/2001\/XMLSchema'\\n\" + \"        xmlns:test='jaxp13_test'\\n\"\n-            + \"        targetNamespace='jaxp13_test'\\n\" + \"        elementFormDefault='qualified'>\\n\" + \"    <element name='test' type='string'\/>\\n\"\n+    String xsd = \"<?xml version='1.0'?>\\n\" + \"<schema xmlns='http:\/\/www.w3.org\/2001\/XMLSchema'\\n\"\n+            + \"        xmlns:test='jaxp13_test'\\n\"\n+            + \"        targetNamespace='jaxp13_test'\\n\"\n+            + \"        elementFormDefault='qualified'>\\n\"\n+            + \"    <element name='test' type='string'\/>\\n\"\n@@ -66,1 +55,4 @@\n-    String xml = \"<?xml version='1.0'?>\\n\" + \"<ns:test xmlns:ns='jaxp13_test'>\\n\" + \"    abc\\n\" + \"<\/ns:test>\\n\";\n+    String xml = \"<?xml version='1.0'?>\\n\"\n+            + \"<ns:test xmlns:ns='jaxp13_test'>\\n\"\n+            + \"    abc\\n\"\n+            + \"<\/ns:test>\\n\";\n@@ -80,1 +72,4 @@\n-     * when security manager is present, secure feature is on automatically\n+     * Verifies validation with FEATURE_SECURE_PROCESSING (FSP) turned on explicitly\n+     * on SchemaFactory.\n+     * Note: the test with Java Security Manager was removed.\n+     * @throws Exception if the test fails\n@@ -83,1 +78,1 @@\n-    public void test_SM() {\n+    public void test_SF() throws Exception {\n@@ -85,4 +80,0 @@\n-        Permissions granted = new java.security.Permissions();\n-        granted.add(new AllPermission());\n-\n-        System.setSecurityManager(new MySM(granted));\n@@ -91,8 +82,2 @@\n-\n-        Schema schema = null;\n-        try {\n-            schema = schemaFactory.newSchema(xsdSource);\n-        } catch (SAXException e) {\n-            Assert.fail(e.toString());\n-        }\n-\n+        schemaFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        Schema schema = schemaFactory.newSchema(xsdSource);\n@@ -100,12 +85,1 @@\n-\n-        try {\n-            validator.validate(xmlSource, null);\n-        } catch (SAXException e) {\n-            Assert.fail(e.toString());\n-        } catch (IOException e) {\n-            Assert.fail(e.toString());\n-        } finally {\n-            System.setSecurityManager(null);\n-        }\n-\n-        System.out.println(\"OK\");\n+        validator.validate(xmlSource, null);\n@@ -115,1 +89,3 @@\n-     * set secure feature on SchemaFactory\n+     * Verifies validation with FEATURE_SECURE_PROCESSING (FSP) turned on explicitly\n+     * on the Validator.\n+     * @throws Exception if the test fails\n@@ -118,1 +94,1 @@\n-    public void test_SF() {\n+    public void test_Val() throws Exception {\n@@ -120,7 +96,0 @@\n-        AccessController.doPrivileged(new PrivilegedAction() {\n-            public Object run() {\n-                System.setSecurityManager(null);\n-                return null; \/\/ nothing to return\n-            }\n-        });\n-\n@@ -128,15 +97,1 @@\n-        try {\n-            schemaFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-        } catch (SAXNotRecognizedException ex) {\n-            System.out.println(ex.getMessage());\n-        } catch (SAXNotSupportedException ex) {\n-            System.out.println(ex.getMessage());\n-        }\n-\n-        Schema schema = null;\n-        try {\n-            schema = schemaFactory.newSchema(xsdSource);\n-        } catch (SAXException e) {\n-            Assert.fail(e.toString());\n-        }\n-\n+        Schema schema = schemaFactory.newSchema(xsdSource);\n@@ -144,67 +99,2 @@\n-\n-        try {\n-            validator.validate(xmlSource, null);\n-        } catch (SAXException e) {\n-            Assert.fail(e.toString());\n-        } catch (IOException e) {\n-            Assert.fail(e.toString());\n-        }\n-        System.out.println(\"OK\");\n-    }\n-\n-    \/**\n-     * set secure feature on the Validator\n-     *\/\n-    @Test\n-    public void test_Val() {\n-        init();\n-        System.setSecurityManager(null);\n-        SchemaFactory schemaFactory = SchemaFactory.newInstance(\"http:\/\/www.w3.org\/2001\/XMLSchema\");\n-\n-        Schema schema = null;\n-        try {\n-            schema = schemaFactory.newSchema(xsdSource);\n-        } catch (SAXException e) {\n-            Assert.fail(e.toString());\n-        }\n-\n-        Validator validator = schema.newValidator();\n-        try {\n-            validator.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-        } catch (SAXNotRecognizedException ex) {\n-            System.out.println(ex.getMessage());\n-        } catch (SAXNotSupportedException ex) {\n-            System.out.println(ex.getMessage());\n-        }\n-\n-        try {\n-            validator.validate(xmlSource, null);\n-        } catch (SAXException e) {\n-            Assert.fail(e.toString());\n-        } catch (IOException e) {\n-            Assert.fail(e.toString());\n-        }\n-        System.out.println(\"OK\");\n-    }\n-\n-    class MySM extends SecurityManager {\n-        Permissions granted;\n-\n-        public MySM(Permissions perms) {\n-            granted = perms;\n-        }\n-\n-        \/**\n-         * The central point in checking permissions. Overridden from\n-         * java.lang.SecurityManager\n-         *\n-         * @param perm The permission requested.\n-         *\/\n-        @Override\n-        public void checkPermission(Permission perm) {\n-            if (granted.implies(perm)) {\n-                return;\n-            }\n-            super.checkPermission(perm);\n-        }\n-\n+        validator.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        validator.validate(xmlSource, null);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6925531Test.java","additions":28,"deletions":138,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6946312Test\n@@ -55,1 +53,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6946312Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Bug6954738_Test\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Bug6954738_Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import org.testng.annotations.Listeners;\n@@ -50,1 +49,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.CR6708840Test\n@@ -54,1 +52,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/CR6708840Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.CR6740048\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/CR6740048.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -45,1 +44,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.Issue682Test\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/Issue682Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.IssueTracker30\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/IssueTracker30.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -51,1 +50,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.JaxpIssue43Test\n@@ -55,1 +53,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/JaxpIssue43Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -49,1 +48,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.JaxpIssue49\n@@ -53,1 +51,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/JaxpIssue49.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.LargeMaxOccursTest\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/LargeMaxOccursTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.MultiOccursTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/MultiOccursTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.MultiOccursUnboundedTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/MultiOccursUnboundedTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.OccursTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/OccursTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.OccursUnboundedTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/OccursUnboundedTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.OccursWildcardTest\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/OccursWildcardTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.OccursWildcardUnbounded\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/OccursWildcardUnbounded.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.ParticlesId005Test\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/ParticlesId005Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.ParticlesIg004Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/ParticlesIg004Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.ParticlesQ013Test\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/ParticlesQ013Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.TCKGroupA008Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/TCKGroupA008Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -57,1 +56,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/ValidationTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.USER_DIR;\n-import static jaxp.library.JAXPTestUtilities.runWithTmpPermission;\n-\n@@ -33,1 +30,0 @@\n-\n@@ -44,1 +40,0 @@\n-\n@@ -46,1 +41,0 @@\n-import org.testng.annotations.Listeners;\n@@ -49,0 +43,1 @@\n+import static jaxp.library.JAXPTestUtilities.USER_DIR;\n@@ -53,1 +48,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.ValidatorTest\n@@ -57,1 +51,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n@@ -99,2 +92,1 @@\n-            Result xmlResult = runWithTmpPermission(() -> new javax.xml.transform.stream.StreamResult(\n-                    resultAlias), new PropertyPermission(\"user.dir\", \"read\"));\n+            Result xmlResult = new javax.xml.transform.stream.StreamResult(resultAlias);\n@@ -129,2 +121,1 @@\n-            Result xmlResult = runWithTmpPermission(() -> new javax.xml.transform.stream.StreamResult(\n-                    resultAlias), new PropertyPermission(\"user.dir\", \"read\"));\n+            Result xmlResult = new javax.xml.transform.stream.StreamResult(resultAlias);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/ValidatorTest.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6943252Test\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6943252Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6963124Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6963124Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -52,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6963468Test\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6963468Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6964720Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6964720Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6967214Test\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6967214Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6970890Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6970890Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6971190Test\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6971190Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -47,1 +46,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6974551Test\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6974551Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6975265Test\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6975265Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6977201Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6977201Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.testng.annotations.Listeners;\n@@ -52,1 +51,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug6989956Test\n@@ -56,1 +54,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug6989956Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.Bug7014246Test\n@@ -44,1 +42,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/Bug7014246Test.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.ParticleTest\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/ParticleTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow validation.tck.RegexWord\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/validation\/tck\/RegexWord.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow xpath.Bug4991857\n@@ -45,1 +43,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/Bug4991857.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.Listeners;\n@@ -39,1 +38,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow xpath.Bug4991939\n@@ -43,1 +41,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/Bug4991939.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.testng.annotations.Listeners;\n@@ -42,1 +41,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow xpath.Bug4992788\n@@ -46,1 +44,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/Bug4992788.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow xpath.Bug4992793\n@@ -48,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/Bug4992793.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -43,1 +42,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow xpath.Bug4992805\n@@ -47,1 +45,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/Bug4992805.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-\n@@ -29,1 +27,0 @@\n-\n@@ -31,1 +28,0 @@\n-import org.testng.annotations.Listeners;\n@@ -38,1 +34,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow xpath.ClassLoaderTest\n@@ -42,1 +37,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -47,2 +41,2 @@\n-        MyClassLoader cl = runWithAllPerm(() -> new MyClassLoader());\n-        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(cl));\n+        MyClassLoader cl = new MyClassLoader();\n+        Thread.currentThread().setContextClassLoader(cl);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/ClassLoaderTest.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import org.testng.annotations.Listeners;\n@@ -54,1 +53,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow xpath.SecureProcessingTest\n@@ -59,1 +57,0 @@\n-@Listeners({jaxp.library.FilePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/SecureProcessingTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.testng.annotations.Listeners;\n@@ -44,1 +43,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow xpath.XPathAnyTypeTest\n@@ -49,1 +47,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathAnyTypeTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.testng.annotations.Listeners;\n@@ -46,1 +45,0 @@\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow xpath.XPathExpAnyTypeTest\n@@ -51,1 +49,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathExpAnyTypeTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -470,0 +470,1 @@\n+java\/awt\/Robot\/InfiniteLoopException.java 8342638 windows-all\n@@ -828,0 +829,5 @@\n+java\/awt\/print\/PrinterJob\/CheckPrivilege.java 8343219 generic-all\n+javax\/print\/PrintSE\/PrintSE.sh 8343219 generic-all\n+java\/awt\/print\/PrinterJob\/SecurityDialogTest.java 8343219 generic-all\n+java\/awt\/Dialog\/PrintToFileTest\/PrintToFileGranted.java 8343219 generic-all\n+java\/awt\/Dialog\/PrintToFileTest\/PrintToFileRevoked.java 8343219 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -426,2 +426,1 @@\n-    javax\/accessibility \\\n-    com\/sun\/java\/accessibility\n+    javax\/accessibility\n@@ -633,2 +632,0 @@\n-    sun\/security\/provider\/PolicyFile\/GrantAllPermToExtWhenNoPolicy.java \\\n-    sun\/security\/provider\/PolicyParser\/PrincipalExpansionError.java \\\n@@ -657,1 +654,0 @@\n-    java\/security\/Policy\/Root\/Root.java \\\n","filename":"test\/jdk\/TEST.groups","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/* Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+\/* Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm\/policy=testAES.policy TestAESWithProviderChange\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/AES\/TestAESCiphers\/TestAESWithProviderChange.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm\/policy=testAES.policy TestAESWithRemoveAddProvider\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/AES\/TestAESCiphers\/TestAESWithRemoveAddProvider.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.security.SecurityPermission \"removeProvider.*\";\n-    permission java.security.SecurityPermission \"insertProvider.*\";\n-    permission java.lang.RuntimePermission\n-               \"accessClassInPackage.com.sun.crypto.provider\";\n-    permission java.util.PropertyPermission \"test.provider.name\", \"read\";\n-};\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/AES\/TestAESCiphers\/testAES.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 8051626\n- * @summary Ensure no failure when using Java Accessibility Utility with security manager\n- * @modules java.desktop jdk.accessibility\n- *\n- * @run main\/othervm -Djava.security.manager=allow Bug8051626\n- *\/\n-\n-import com.sun.java.accessibility.util.AWTEventMonitor;\n-import java.awt.Dimension;\n-import java.lang.reflect.InvocationTargetException;\n-import javax.swing.JButton;\n-import javax.swing.JFrame;\n-import javax.swing.JPanel;\n-import javax.swing.SwingUtilities;\n-\n-public class Bug8051626 {\n-\n-    public static void main(final String[] args) throws InterruptedException,\n-                                                        InvocationTargetException {\n-            final Bug8051626 app = new Bug8051626();\n-            app.test();\n-        }\n-\n-    private void test() throws InterruptedException, InvocationTargetException {\n-        System.setSecurityManager(new SecurityManager());\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            @Override\n-            public void run() {\n-                final JFrame frame = new JFrame(\"Bug 8051626\");\n-                try {\n-                    final JPanel panel = new JPanel();\n-                    final JButton okButton = new JButton(\"OK\");\n-                    panel.add(okButton);\n-                    frame.getContentPane().add(panel);\n-                    frame.setMinimumSize(new Dimension(300, 180));\n-                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-                    frame.pack();\n-                    frame.setLocation(400, 300);\n-                    frame.setVisible(true);\n-                    \/\/ If the security manager is on this should not cause an exception.\n-                    \/\/ Prior to the 8051626 fix it would as follows:\n-                    \/\/ java.security.AccessControlException:\n-                    \/\/   access denied (\"java.lang.RuntimePermission\" \"accessClassInPackage.com.sun.java.accessibility.util\")\n-                    AWTEventMonitor.getComponentWithFocus();\n-                } finally {\n-                    frame.dispose();\n-                }\n-            }\n-        });\n-    }\n-\n-}\n","filename":"test\/jdk\/com\/sun\/java\/accessibility\/util\/8051626\/Bug8051626.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,4 +61,2 @@\n- * @run main\/othervm LdapDnsProviderTest nosm\n- * @run main\/othervm -Djava.security.manager=allow LdapDnsProviderTest smnodns\n- * @run main\/othervm -Djava.security.manager=allow LdapDnsProviderTest smdns\n- * @run main\/othervm LdapDnsProviderTest nosmbaddns\n+ * @run main\/othervm LdapDnsProviderTest serviceloader\n+ * @run main\/othervm LdapDnsProviderTest missingprovider\n@@ -67,15 +65,0 @@\n-class DNSSecurityManager extends SecurityManager {\n-\n-    private boolean dnsProvider = false;\n-\n-    public void setAllowDnsProvider(boolean allow) {\n-        dnsProvider = allow;\n-    }\n-\n-    @Override\n-    public void checkPermission(Permission p) {\n-        if (p.getName().equals(\"ldapDnsProvider\") && !dnsProvider) {\n-            throw new SecurityException(p.getName());\n-        }\n-    }\n-}\n@@ -175,2 +158,3 @@\n-        if (args.length > 0 && args[0].equals(\"nosm\")) {\n-            \/\/ no security manager, serviceloader\n+        if (args.length > 0 && args[0].equals(\"serviceloader\")) {\n+            \/\/ service loader\n+            \/\/ TestDnsProvider\n@@ -179,17 +163,3 @@\n-        } else if (args.length > 0 && args[0].equals(\"smnodns\")) {\n-            \/\/ security manager & serviceloader\n-            installServiceConfigurationFile(\"dnsprovider.TestDnsProvider\");\n-            \/\/ install security manager\n-            System.setSecurityManager(new DNSSecurityManager());\n-            runTest(\"ldap:\/\/\/dc=example,dc=com\", \"ServiceConfigurationError\");\n-        } else if (args.length > 0 && args[0].equals(\"smdns\")) {\n-            \/\/ security manager & serviceloader\n-            DNSSecurityManager sm = new DNSSecurityManager();\n-            installServiceConfigurationFile(\"dnsprovider.TestDnsProvider\");\n-            \/\/ install security manager\n-            System.setSecurityManager(sm);\n-            sm.setAllowDnsProvider(true);\n-            runTest(\"ldap:\/\/\/dc=example,dc=com\", \"yupyupyup:389\");\n-        } else if (args.length > 0 && args[0].equals(\"nosmbaddns\")) {\n-            \/\/ no security manager, no serviceloader\n-            \/\/ DefaultLdapDnsProvider\n+        } else if (args.length > 0 && args[0].equals(\"missingprovider\")) {\n+            \/\/ no service loader\n+            \/\/ MissingDnsProvider\n@@ -197,1 +167,0 @@\n-            \/\/ no SecurityManager\n@@ -200,1 +169,1 @@\n-            \/\/ no security manager, no serviceloader\n+            \/\/ no service loader\n@@ -210,1 +179,0 @@\n-            \/\/ no SecurityManager\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapDnsProviderTest.java","additions":10,"deletions":42,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1,246 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug     7150256\n- * @summary Permissions Tests for the DiagnosticCommandMBean\n- * @author  Frederic Parain\n- *\n- * @modules java.logging\n- *          java.management\n- *\n- * @run main\/othervm -Djava.security.manager=allow DcmdMBeanPermissionsTest\n- *\/\n-\n-import java.lang.management.ManagementFactory;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.ReflectPermission;\n-import java.security.Permission;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import javax.management.Descriptor;\n-import javax.management.InstanceNotFoundException;\n-import javax.management.IntrospectionException;\n-import javax.management.MBeanException;\n-import javax.management.MBeanInfo;\n-import javax.management.MBeanOperationInfo;\n-import javax.management.MBeanPermission;\n-import javax.management.MBeanServer;\n-import javax.management.MalformedObjectNameException;\n-import javax.management.ObjectName;\n-import javax.management.ReflectionException;\n-import javax.management.RuntimeMBeanException;\n-\n-\/**\n- *\n- * @author fparain\n- *\/\n-public class DcmdMBeanPermissionsTest {\n-\n-    private static String HOTSPOT_DIAGNOSTIC_MXBEAN_NAME =\n-        \"com.sun.management:type=DiagnosticCommand\";\n-\n-    static public class CustomSecurityManager extends SecurityManager {\n-\n-        private HashSet<Permission> grantedPermissions;\n-\n-        public CustomSecurityManager() {\n-            grantedPermissions = new HashSet<Permission>();\n-        }\n-\n-        public final void grantPermission(final Permission perm) {\n-            grantedPermissions.add(perm);\n-        }\n-\n-        public final void denyPermission(final Permission perm) {\n-            Iterator<Permission> it = grantedPermissions.iterator();\n-            while (it.hasNext()) {\n-                Permission p = it.next();\n-                if (p.equals(perm)) {\n-                    it.remove();\n-                }\n-            }\n-        }\n-\n-        public final void checkPermission(final Permission perm) {\n-            for (Permission p : grantedPermissions) {\n-                if (p.implies(perm)) {\n-                    return;\n-                }\n-            }\n-            throw new SecurityException(perm.toString());\n-        }\n-    };\n-\n-    static Permission createPermission(String classname, String name,\n-            String action) {\n-        Permission permission = null;\n-        try {\n-            Class c = Class.forName(classname);\n-            if (action == null) {\n-                try {\n-                    Constructor constructor = c.getConstructor(String.class);\n-                    permission = (Permission) constructor.newInstance(name);\n-\n-                } catch (InstantiationException | IllegalAccessException\n-                        | IllegalArgumentException | InvocationTargetException\n-                        | NoSuchMethodException | SecurityException ex) {\n-                    ex.printStackTrace();\n-                    throw new RuntimeException(\"TEST FAILED\");\n-                }\n-            }\n-            if (permission == null) {\n-                try {\n-                    Constructor constructor = c.getConstructor(String.class,\n-                            String.class);\n-                    permission = (Permission) constructor.newInstance(\n-                            name,\n-                            action);\n-                } catch (InstantiationException | IllegalAccessException\n-                        | IllegalArgumentException | InvocationTargetException\n-                        | NoSuchMethodException | SecurityException ex) {\n-                    ex.printStackTrace();\n-                    throw new RuntimeException(\"TEST FAILED\");\n-                }\n-            }\n-        } catch (ClassNotFoundException ex) {\n-            ex.printStackTrace();\n-                    throw new RuntimeException(\"TEST FAILED\");\n-        }\n-        if (permission == null) {\n-            throw new RuntimeException(\"TEST FAILED\");\n-        }\n-        return permission;\n-    }\n-\n-    \/\/ return true if invokation triggered a SecurityException\n-    static boolean invokeOperation(MBeanServer mbs, ObjectName on,\n-            MBeanOperationInfo opInfo) {\n-        try {\n-            if (opInfo.getSignature().length == 0) {\n-                mbs.invoke(on, opInfo.getName(),\n-                        new Object[0], new String[0]);\n-            } else {\n-                mbs.invoke(on, opInfo.getName(),\n-                        new Object[1], new String[]{ String[].class.getName()});\n-            }\n-        } catch (SecurityException ex) {\n-            ex.printStackTrace();\n-            return true;\n-        } catch (RuntimeMBeanException ex) {\n-            if (ex.getCause() instanceof SecurityException) {\n-                \/\/ex.printStackTrace();\n-                return true;\n-            }\n-        } catch (MBeanException | InstanceNotFoundException\n-                | ReflectionException ex) {\n-            throw new RuntimeException(\"TEST FAILED\");\n-        }\n-        return false;\n-    }\n-\n-    static void testOperation(MBeanServer mbs, CustomSecurityManager sm,\n-            ObjectName on, MBeanOperationInfo opInfo) {\n-        System.out.println(\"Testing \" + opInfo.getName());\n-        Descriptor desc = opInfo.getDescriptor();\n-        if (desc.getFieldValue(\"dcmd.permissionClass\") == null) {\n-        \/\/ No special permission required, execution should not trigger\n-        \/\/ any security exception\n-            if (invokeOperation(mbs, on, opInfo)) {\n-                throw new RuntimeException(\"TEST FAILED\");\n-            }\n-        } else {\n-            \/\/ Building the required permission\n-            Permission reqPerm = createPermission(\n-                    (String)desc.getFieldValue(\"dcmd.permissionClass\"),\n-                    (String)desc.getFieldValue(\"dcmd.permissionName\"),\n-                    (String)desc.getFieldValue(\"dcmd.permissionAction\"));\n-            \/\/ Paranoid mode: check that the SecurityManager has not already\n-            \/\/ been granted the permission\n-            sm.denyPermission(reqPerm);\n-            \/\/ A special permission is required for this operation,\n-            \/\/ invoking it without the permission granted must trigger\n-            \/\/ a security exception\n-            if(!invokeOperation(mbs, on, opInfo)) {\n-                throw new RuntimeException(\"TEST FAILED\");\n-            }\n-            \/\/ grant the permission and re-try invoking the operation\n-            sm.grantPermission(reqPerm);\n-            if(invokeOperation(mbs, on, opInfo)) {\n-                throw new RuntimeException(\"TEST FAILED\");\n-            }\n-            \/\/ Clean up\n-            sm.denyPermission(reqPerm);\n-        }\n-    }\n-\n-    public static void main(final String[] args) {\n-        final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n-        ObjectName on = null;\n-        try {\n-            on = new ObjectName(HOTSPOT_DIAGNOSTIC_MXBEAN_NAME);\n-        } catch (MalformedObjectNameException ex) {\n-            ex.printStackTrace();\n-            throw new RuntimeException(\"TEST FAILED\");\n-        }\n-        MBeanInfo info = null;\n-        try {\n-            info = mbs.getMBeanInfo(on);\n-        } catch (InstanceNotFoundException | IntrospectionException\n-                | ReflectionException ex) {\n-            ex.printStackTrace();\n-            throw new RuntimeException(\"TEST FAILED\");\n-        }\n-        CustomSecurityManager sm = new CustomSecurityManager();\n-        System.setSecurityManager(sm);\n-        \/\/ Set of permission required to run the test cleanly\n-        \/\/ Some permissions are required by the MBeanServer and other\n-        \/\/ platform services (RuntimePermission(\"createClassLoader\"),\n-        \/\/ ReflectPermission(\"suppressAccessChecks\"),\n-        \/\/ java.util.logging.LoggingPermission(\"control\"),\n-        \/\/ RuntimePermission(\"exitVM.97\")).\n-        \/\/ Other permissions are required by commands being invoked\n-        \/\/ in the test (for instance, RuntimePermission(\"modifyThreadGroup\")\n-        \/\/ and RuntimePermission(\"modifyThread\") are checked when\n-        \/\/ runFinalization() is invoked by the gcRunFinalization command.\n-        sm.grantPermission(new RuntimePermission(\"createClassLoader\"));\n-        sm.grantPermission(new ReflectPermission(\"suppressAccessChecks\"));\n-        sm.grantPermission(new java.util.logging.LoggingPermission(\"control\", \"\"));\n-        sm.grantPermission(new java.lang.RuntimePermission(\"exitVM.*\"));\n-        sm.grantPermission(new java.lang.RuntimePermission(\"modifyThreadGroup\"));\n-        sm.grantPermission(new java.lang.RuntimePermission(\"modifyThread\"));\n-        sm.grantPermission(new java.security.SecurityPermission(\"getProperty.jdk.jar.disabledAlgorithms\"));\n-        for(MBeanOperationInfo opInfo : info.getOperations()) {\n-            Permission opPermission = new MBeanPermission(info.getClassName(),\n-                    opInfo.getName(),\n-                    on,\n-                    \"invoke\");\n-            sm.grantPermission(opPermission);\n-            testOperation(mbs, sm, on, opInfo);\n-            sm.denyPermission(opPermission);\n-        }\n-        System.out.println(\"TEST PASSED\");\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/management\/DiagnosticCommandMBean\/DcmdMBeanPermissionsTest.java","additions":0,"deletions":246,"binary":false,"changes":246,"status":"deleted"},{"patch":"@@ -0,0 +1,288 @@\n+\/*\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Tests for FileServerHandler with SecurityManager\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.net.URIBuilder\n+ * @run main\/othervm -ea RootDirPermissionsTest true\n+ * @run main\/othervm -ea RootDirPermissionsTest false\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.AclEntry;\n+import java.nio.file.attribute.AclEntryPermission;\n+import java.nio.file.attribute.AclEntryType;\n+import java.nio.file.attribute.AclFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.UserPrincipal;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import com.sun.net.httpserver.HttpServer;\n+import com.sun.net.httpserver.SimpleFileServer;\n+import com.sun.net.httpserver.SimpleFileServer.OutputLevel;\n+import jdk.test.lib.net.URIBuilder;\n+import jdk.test.lib.util.FileUtils;\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.nio.file.StandardOpenOption.CREATE;\n+\n+\/**\n+ * Tests file permission checks during the creation of a FileServerHandler.\n+ *\n+ * A FileServerHandler can only be created if its root directory\n+ * is readable. The test consists of 2 runs:\n+ *     1) RootDir is readable\n+ *     2) RootDir is NOT readable\n+ * 2)  reuses the test directory created in the previous run, revoking\n+ *     read access.\n+* *\/\n+public class RootDirPermissionsTest {\n+\n+    static final Path CWD = Path.of(\".\").toAbsolutePath().normalize();\n+    static final Path TEST_DIR = CWD.resolve(\"RootDir\");\n+    static final InetSocketAddress LOOPBACK_ADDR =\n+            new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+\n+    static final boolean ENABLE_LOGGING = true;\n+    static final Logger LOGGER = Logger.getLogger(\"com.sun.net.httpserver\");\n+\n+    static boolean readPermitted;\n+    static String lastModifiedDir;\n+    static String lastModifiedFile;\n+\n+    static Set<PosixFilePermission> posixPermissions;\n+    static List<AclEntry> acls;\n+\n+    public static void main(String[] args) throws Exception {\n+        setupLogging();\n+        readPermitted = Boolean.parseBoolean(args[0]);\n+        if (readPermitted) {\n+            createTestDir();\n+            testDirectoryGET();\n+            testFileGET();\n+        } else {\n+            revokePermissions();\n+            try {\n+                testCreateHandler();\n+            } finally {\n+                restorePermissions();\n+            }\n+        }\n+    }\n+\n+    private static void revokePermissions() throws IOException {\n+        if (!Files.isReadable(TEST_DIR)) {\n+            \/\/ good nothing to do:\n+            System.out.println(\"File is already not readable: nothing to do\");\n+            return;\n+        }\n+        System.out.println(\"FileSystem: \" + Files.getFileStore(TEST_DIR).type());\n+        if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"posix\")) {\n+            System.out.println(\"Revoking owner's read access in POSIX permissions for \" + TEST_DIR);\n+            posixPermissions = Files.getPosixFilePermissions(TEST_DIR);\n+            Set<PosixFilePermission> newPerms = new HashSet<>(posixPermissions);\n+            newPerms.remove(PosixFilePermission.OWNER_READ);\n+            newPerms.remove(PosixFilePermission.OWNER_EXECUTE);\n+            Files.setPosixFilePermissions(TEST_DIR, newPerms);\n+        } else if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"acl\")) {\n+            System.out.println(\"Revoking owner's read access in ACLs for \" + TEST_DIR);\n+            AclFileAttributeView view = Files.getFileAttributeView(TEST_DIR, AclFileAttributeView.class);\n+            acls = view.getAcl();\n+            List<AclEntry> entries = new ArrayList<>();\n+            UserPrincipal owner = view.getOwner();\n+            \/\/ Deny owner\n+            entries.add(AclEntry.newBuilder().setType(AclEntryType.DENY)\n+                    .setPrincipal(owner).setPermissions(AclEntryPermission.READ_DATA,\n+                            AclEntryPermission.READ_ATTRIBUTES, AclEntryPermission.READ_NAMED_ATTRS,\n+                            AclEntryPermission.EXECUTE)\n+                    .build());\n+            \/\/ Revoke read data and execute\n+            for (AclEntry entry : acls) {\n+                Set<AclEntryPermission> perms =\n+                        new HashSet<>(entry.permissions());\n+                if (entry.type() == AclEntryType.ALLOW) {\n+                    System.out.println(\"Revoking read access: \" + entry);\n+                    perms.remove(AclEntryPermission.READ_DATA);\n+                    perms.remove(AclEntryPermission.LIST_DIRECTORY);\n+                    perms.remove(AclEntryPermission.READ_ATTRIBUTES);\n+                    perms.remove(AclEntryPermission.READ_NAMED_ATTRS);\n+                    perms.remove(AclEntryPermission.EXECUTE);\n+                    entries.add(AclEntry.newBuilder(entry).setPermissions(perms).build());\n+                }\n+            }\n+            view.setAcl(entries);\n+            System.out.println(\"ACLs: \" + view.getAcl());\n+            try {\n+                System.out.println(\"File is readable: \" + Files.isReadable(TEST_DIR));\n+                Thread.sleep(50);\n+            } catch (InterruptedException x) {}\n+            \/\/ The above does not always work, skip the test if we can't make TEST_DIR\n+            \/\/ read-only.\n+            if (Files.isReadable(TEST_DIR)) {\n+                throw new jtreg.SkippedException(\"Can't make directory read-only\");\n+            }\n+        } else {\n+            throw new RuntimeException(\"Required attribute view not supported\");\n+        }\n+        System.out.println(\"File is readable: \" + Files.isReadable(TEST_DIR));\n+    }\n+\n+    private static void restorePermissions() throws IOException {\n+        if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"posix\")) {\n+            if (posixPermissions != null) {\n+                System.out.println(\"Restoring original POSIX permissions\");\n+                Files.setPosixFilePermissions(TEST_DIR, posixPermissions);\n+            }\n+        } else if (Files.getFileStore(TEST_DIR).supportsFileAttributeView(\"acl\")) {\n+            if (acls != null) {\n+                System.out.println(\"Restoring original ACLs\");\n+                AclFileAttributeView view = Files.getFileAttributeView(TEST_DIR, AclFileAttributeView.class);\n+                view.setAcl(acls);\n+            }\n+        } else {\n+            throw new RuntimeException(\"Required attribute view not supported\");\n+        }\n+    }\n+\n+    private static void setupLogging() {\n+        if (ENABLE_LOGGING) {\n+            ConsoleHandler ch = new ConsoleHandler();\n+            LOGGER.setLevel(Level.ALL);\n+            ch.setLevel(Level.ALL);\n+            LOGGER.addHandler(ch);\n+        }\n+    }\n+\n+    private static void createTestDir() throws IOException {\n+        if (Files.exists(TEST_DIR)) {\n+            FileUtils.deleteFileTreeWithRetry(TEST_DIR);\n+        }\n+        Files.createDirectories(TEST_DIR);\n+        var file = Files.writeString(TEST_DIR.resolve(\"aFile.txt\"), \"some text\", CREATE);\n+        lastModifiedDir = getLastModified(TEST_DIR);\n+        lastModifiedFile = getLastModified(file);\n+    }\n+\n+    private static void testDirectoryGET() throws Exception {\n+        var expectedBody = openHTML + \"\"\"\n+                <h1>Directory listing for &#x2F;<\/h1>\n+                <ul>\n+                <li><a href=\"aFile.txt\">aFile.txt<\/a><\/li>\n+                <\/ul>\n+                \"\"\" + closeHTML;\n+        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.VERBOSE);\n+\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assert response.statusCode() == 200;\n+            assert response.body().equals(expectedBody);\n+            assert response.headers().firstValue(\"content-type\").get().equals(\"text\/html; charset=UTF-8\");\n+            assert response.headers().firstValue(\"content-length\").get().equals(expectedLength);\n+            assert response.headers().firstValue(\"last-modified\").get().equals(lastModifiedDir);\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    private static void testFileGET() throws Exception {\n+        var expectedBody = \"some text\";\n+        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.VERBOSE);\n+\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assert response.statusCode() == 200;\n+            assert response.body().equals(\"some text\");\n+            assert response.headers().firstValue(\"content-type\").get().equals(\"text\/plain\");\n+            assert response.headers().firstValue(\"content-length\").get().equals(expectedLength);\n+            assert response.headers().firstValue(\"last-modified\").get().equals(lastModifiedFile);\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"removal\")\n+    private static void testCreateHandler(){\n+        try {\n+            SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.NONE);\n+            throw new RuntimeException(\"Handler creation expected to fail\");\n+        } catch (IllegalArgumentException expected) { }\n+\n+        try {\n+            SimpleFileServer.createFileHandler(TEST_DIR);\n+            throw new RuntimeException(\"Handler creation expected to fail\");\n+        } catch (IllegalArgumentException expected) { }\n+    }\n+\n+    static final String openHTML = \"\"\"\n+                <!DOCTYPE html>\n+                <html>\n+                <head>\n+                <meta charset=\"utf-8\"\/>\n+                <\/head>\n+                <body>\n+                \"\"\";\n+\n+    static final String closeHTML = \"\"\"\n+                <\/body>\n+                <\/html>\n+                \"\"\";\n+\n+    static URI uri(HttpServer server, String path) {\n+        return URIBuilder.newBuilder()\n+                .host(\"localhost\")\n+                .port(server.getAddress().getPort())\n+                .scheme(\"http\")\n+                .path(\"\/\" + path)\n+                .buildUnchecked();\n+    }\n+\n+    static String getLastModified(Path path) throws IOException {\n+        return Files.getLastModifiedTime(path).toInstant().atZone(ZoneId.of(\"GMT\"))\n+                .format(DateTimeFormatter.RFC_1123_DATE_TIME);\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/RootDirPermissionsTest.java","additions":288,"deletions":0,"binary":false,"changes":288,"status":"added"},{"patch":"@@ -1,201 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Tests for FileServerHandler with SecurityManager\n- * @library \/test\/lib\n- * @build jdk.test.lib.net.URIBuilder\n- * @run main\/othervm\/java.security.policy=SecurityManagerTestRead.policy -ea SecurityManagerTest true\n- * @run main\/othervm\/java.security.policy=SecurityManagerTestNoRead.policy -ea SecurityManagerTest false\n- * @run main\/othervm -ea SecurityManagerTest true\n- *\/\n-\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.URI;\n-import java.net.http.HttpClient;\n-import java.net.http.HttpRequest;\n-import java.net.http.HttpResponse.BodyHandlers;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.security.AccessControlException;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n-import java.util.logging.ConsoleHandler;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.SimpleFileServer;\n-import com.sun.net.httpserver.SimpleFileServer.OutputLevel;\n-import jdk.test.lib.net.URIBuilder;\n-import jdk.test.lib.util.FileUtils;\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-import static java.nio.file.StandardOpenOption.CREATE;\n-\n-\/**\n- * Tests the permission checks during the creation of a FileServerHandler.\n- *\n- * A FileServerHandler can only be created if a \"read\" FilePermission is\n- * granted for the root directory passed. The test consists of 3 runs:\n- *     1) security manager enabled and \"read\" FilePermission granted\n- *     2) security manager enabled and \"read\" FilePermission NOT granted\n- *     3) security manager NOT enabled\n- * 2) misses the required permissions to call many of the java.nio.file methods,\n- * the test works around this by reusing the test directory created in the\n- * previous run.\n-* *\/\n-public class SecurityManagerTest {\n-\n-    static final Path CWD = Path.of(\".\").toAbsolutePath().normalize();\n-    static final Path TEST_DIR = CWD.resolve(\"SecurityManagerTest\");\n-    static final InetSocketAddress LOOPBACK_ADDR =\n-            new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n-\n-    static final boolean ENABLE_LOGGING = true;\n-    static final Logger LOGGER = Logger.getLogger(\"com.sun.net.httpserver\");\n-\n-    static boolean readPermitted;\n-    static String lastModifiedDir;\n-    static String lastModifiedFile;\n-\n-    public static void main(String[] args) throws Exception {\n-        setupLogging();\n-        readPermitted = Boolean.parseBoolean(args[0]);\n-        if (readPermitted) {\n-            createTestDir();\n-            testDirectoryGET();\n-            testFileGET();\n-        } else {  \/\/ no FilePermission \"read\" for TEST_DIR granted,\n-                  \/\/ assert handler cannot be created\n-            testCreateHandler();\n-        }\n-    }\n-\n-    private static void setupLogging() {\n-        if (ENABLE_LOGGING) {\n-            ConsoleHandler ch = new ConsoleHandler();\n-            LOGGER.setLevel(Level.ALL);\n-            ch.setLevel(Level.ALL);\n-            LOGGER.addHandler(ch);\n-        }\n-    }\n-\n-    private static void createTestDir() throws IOException {\n-        if (Files.exists(TEST_DIR)) {\n-            FileUtils.deleteFileTreeWithRetry(TEST_DIR);\n-        }\n-        Files.createDirectories(TEST_DIR);\n-        var file = Files.writeString(TEST_DIR.resolve(\"aFile.txt\"), \"some text\", CREATE);\n-        lastModifiedDir = getLastModified(TEST_DIR);\n-        lastModifiedFile = getLastModified(file);\n-    }\n-\n-    private static void testDirectoryGET() throws Exception {\n-        var expectedBody = openHTML + \"\"\"\n-                <h1>Directory listing for &#x2F;<\/h1>\n-                <ul>\n-                <li><a href=\"aFile.txt\">aFile.txt<\/a><\/li>\n-                <\/ul>\n-                \"\"\" + closeHTML;\n-        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n-        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.VERBOSE);\n-\n-        server.start();\n-        try {\n-            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n-            var response = client.send(request, BodyHandlers.ofString());\n-            assert response.statusCode() == 200;\n-            assert response.body().equals(expectedBody);\n-            assert response.headers().firstValue(\"content-type\").get().equals(\"text\/html; charset=UTF-8\");\n-            assert response.headers().firstValue(\"content-length\").get().equals(expectedLength);\n-            assert response.headers().firstValue(\"last-modified\").get().equals(lastModifiedDir);\n-        } finally {\n-            server.stop(0);\n-        }\n-    }\n-\n-    private static void testFileGET() throws Exception {\n-        var expectedBody = \"some text\";\n-        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n-        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.VERBOSE);\n-\n-        server.start();\n-        try {\n-            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\")).build();\n-            var response = client.send(request, BodyHandlers.ofString());\n-            assert response.statusCode() == 200;\n-            assert response.body().equals(\"some text\");\n-            assert response.headers().firstValue(\"content-type\").get().equals(\"text\/plain\");\n-            assert response.headers().firstValue(\"content-length\").get().equals(expectedLength);\n-            assert response.headers().firstValue(\"last-modified\").get().equals(lastModifiedFile);\n-        } finally {\n-            server.stop(0);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private static void testCreateHandler(){\n-        try {\n-            SimpleFileServer.createFileServer(LOOPBACK_ADDR, TEST_DIR, OutputLevel.NONE);\n-            throw new RuntimeException(\"Handler creation expected to fail\");\n-        } catch (AccessControlException expected) { }\n-\n-        try {\n-            SimpleFileServer.createFileHandler(TEST_DIR);\n-            throw new RuntimeException(\"Handler creation expected to fail\");\n-        } catch (AccessControlException expected) { }\n-    }\n-\n-    static final String openHTML = \"\"\"\n-                <!DOCTYPE html>\n-                <html>\n-                <head>\n-                <meta charset=\"utf-8\"\/>\n-                <\/head>\n-                <body>\n-                \"\"\";\n-\n-    static final String closeHTML = \"\"\"\n-                <\/body>\n-                <\/html>\n-                \"\"\";\n-\n-    static URI uri(HttpServer server, String path) {\n-        return URIBuilder.newBuilder()\n-                .host(\"localhost\")\n-                .port(server.getAddress().getPort())\n-                .scheme(\"http\")\n-                .path(\"\/\" + path)\n-                .buildUnchecked();\n-    }\n-\n-    static String getLastModified(Path path) throws IOException {\n-        return Files.getLastModifiedTime(path).toInstant().atZone(ZoneId.of(\"GMT\"))\n-                .format(DateTimeFormatter.RFC_1123_DATE_TIME);\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SecurityManagerTest.java","additions":0,"deletions":201,"binary":false,"changes":201,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ for JTwork\/classes\/test\/lib\/jdk\/test\/lib\/util\/FileUtils.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.net.URLPermission \"http:\/\/localhost:*\/*\", \"GET\";\n-\n-    \/\/ for HTTP server\n-    permission java.net.SocketPermission \"localhost:*\", \"accept,resolve\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-};\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SecurityManagerTestNoRead.policy","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ for JTwork\/classes\/test\/lib\/jdk\/test\/lib\/util\/FileUtils.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.net.URLPermission \"http:\/\/localhost:*\/*\", \"GET\";\n-\n-    \/\/ for test directory tree\n-    permission java.io.FilePermission \"${user.dir}${\/}SecurityManagerTest\", \"read,write,delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}SecurityManagerTest\/-\", \"read,write,delete\";\n-\n-    \/\/ for HTTP server\n-    permission java.net.SocketPermission \"localhost:*\", \"accept,resolve\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-};\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SecurityManagerTestRead.policy","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm\/policy=uphc.policy\n+ * @run main\/othervm\n","filename":"test\/jdk\/com\/sun\/security\/auth\/UnixPrincipalHashCode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm\/policy=InnerClassConfig.policy -Djava.security.auth.login.config==file:${test.src}\/InnerClassConfig.config InnerClassConfig\n+ * @run main\/othervm -Djava.security.auth.login.config==file:${test.src}\/InnerClassConfig.config InnerClassConfig\n","filename":"test\/jdk\/com\/sun\/security\/auth\/login\/ConfigFile\/InnerClassConfig.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,8 +0,0 @@\n-\/\/ grant javatest and jtreg AllPermission\n-grant codebase \"file:\/usr\/local\/java\/-\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant {\n-    permission javax.security.auth.AuthPermission \"getLoginConfiguration\";\n-};\n","filename":"test\/jdk\/com\/sun\/security\/auth\/login\/ConfigFile\/InnerClassConfig.policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm\/policy=PropertyExpansion.policy -Djava.security.auth.login.config==file:${test.src}\/PropertyExpansion.config PropertyExpansion\n+ * @run main\/othervm -Djava.security.auth.login.config==file:${test.src}\/PropertyExpansion.config PropertyExpansion\n@@ -31,1 +31,0 @@\n-import com.sun.security.auth.login.*;\n@@ -38,15 +37,1 @@\n-        try {\n-            ConfigFile config = new ConfigFile();\n-            throw new IllegalStateException(\"test 1 failed\");\n-        } catch (SecurityException se) {\n-            \/\/ good\n-            se.printStackTrace();\n-        }\n-\n-        Configuration config = null;\n-        try {\n-            config = Configuration.getConfiguration();\n-        } catch (SecurityException se) {\n-            System.out.println(\"test 2 failed\");\n-            throw se;\n-        }\n+        Configuration config = Configuration.getConfiguration();\n@@ -58,2 +43,3 @@\n-        if (entries.length != 2)\n-                throw new IllegalStateException(\"test 2 failed\");\n+        if (entries.length != 2) {\n+            throw new IllegalStateException(\"test 2 failed\");\n+        }\n@@ -62,9 +48,9 @@\n-                System.out.println(\"module \" + i + \" = \" +\n-                        entries[i].getLoginModuleName());\n-                System.out.println(\"control flag \" + i + \" = \" +\n-                        entries[i].getControlFlag());\n-                java.util.Map map = entries[i].getOptions();\n-                System.out.println(\"option \" + i + \" = useFile, \" +\n-                        \"value = \" + map.get(\"useFile\"));\n-                System.out.println(\"option \" + i + \" = debug, \" +\n-                        \"value = \" + map.get(\"debug\"));\n+            System.out.println(\"module \" + i + \" = \" +\n+                    entries[i].getLoginModuleName());\n+            System.out.println(\"control flag \" + i + \" = \" +\n+                    entries[i].getControlFlag());\n+            java.util.Map map = entries[i].getOptions();\n+            System.out.println(\"option \" + i + \" = useFile, \" +\n+                    \"value = \" + map.get(\"useFile\"));\n+            System.out.println(\"option \" + i + \" = debug, \" +\n+                    \"value = \" + map.get(\"debug\"));\n@@ -72,1 +58,1 @@\n-                if (i == 0 && map.get(\"useFile\") == null ||\n+            if (i == 0 && map.get(\"useFile\") == null ||\n@@ -74,3 +60,3 @@\n-                    throw new IllegalStateException(\"test 3 failed\");\n-                }\n-                if (i == 1 && map.get(\"useFile\") != null ||\n+                throw new IllegalStateException(\"test 3 failed\");\n+            }\n+            if (i == 1 && map.get(\"useFile\") != null ||\n@@ -78,2 +64,2 @@\n-                    throw new IllegalStateException(\"test 4 failed\");\n-                }\n+                throw new IllegalStateException(\"test 4 failed\");\n+            }\n@@ -83,1 +69,0 @@\n-\n","filename":"test\/jdk\/com\/sun\/security\/auth\/login\/ConfigFile\/PropertyExpansion.java","additions":21,"deletions":36,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -1,8 +0,0 @@\n-\/\/ grant jtreg and javatest AllPermission\n-grant codebase \"file:\/usr\/local\/java\/-\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant {\n-    permission javax.security.auth.AuthPermission \"getLoginConfiguration\";\n-};\n","filename":"test\/jdk\/com\/sun\/security\/auth\/login\/ConfigFile\/PropertyExpansion.policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n- * @run main\/othervm\/policy=CheckConfigs.policy CheckConfigs\n@@ -52,5 +51,0 @@\n-        SecurityManager securityManager = System.getSecurityManager();\n-        System.out.println(securityManager == null\n-            ? \"[security manager is not running]\"\n-            : \"[security manager is running: \" +\n-                securityManager.getClass().getName() + \"]\");\n","filename":"test\/jdk\/com\/sun\/security\/auth\/module\/LdapLoginModule\/CheckConfigs.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,10 +0,0 @@\n-grant codeBase \"file:${test.classes}\/*\" {\n-    \/\/ The following permissions are not required because the test is\n-    \/\/ not expected to connect to an LDAP server\n-    \/\/\n-    \/\/permission java.net.SocketPermission \"*:389\", \"connect\";\n-    \/\/permission java.net.SocketPermission \"*:636\", \"connect\";\n-    \/\/permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.com.sun.jndi.ldap\";\n-    permission java.lang.RuntimePermission \"ldapDnsProvider\";\n-};\n","filename":"test\/jdk\/com\/sun\/security\/auth\/module\/LdapLoginModule\/CheckConfigs.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-grant {\n-   permission java.io.FilePermission \".\/-\", \"write\";\n-   permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-   permission javax.security.auth.AuthPermission \"createLoginContext\";\n-   permission javax.security.auth.AuthPermission \"doAsPrivileged\";\n-};\n","filename":"test\/jdk\/com\/sun\/security\/auth\/uphc.policy","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -1,136 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import com.sun.tools.attach.VirtualMachine;\n-import com.sun.tools.attach.AttachNotSupportedException;\n-import java.io.File;\n-import jdk.test.lib.thread.ProcessThread;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-\/*\n- * @test\n- * @bug 6173612 6273707 6277253 6335921 6348630 6342019 6381757\n- * @summary Basic unit tests for the VM attach mechanism. Unit test for Attach\n- * API - this checks that a SecurityException is thrown as expected.\n- *\n- * @library \/test\/lib\n- * @modules jdk.attach\n- *          jdk.jartool\/sun.tools.jar\n- *\n- * @run build Application\n- * @run main PermissionTest\n- *\/\n-public class PermissionTest {\n-\n-    \/*\n-     * The actual test is in the nested class TestMain.\n-     * The responsibility of this class is to:\n-     * 1. Start the Application class in a separate process.\n-     * 2. Find the pid and shutdown port of the running Application.\n-     * 3. Run the tests in TstMain that will attach to the Application.\n-     * 4. Shut down the Application.\n-     *\/\n-    public static void main(String args[]) throws Throwable {\n-        ProcessThread processThread = null;\n-        try {\n-            processThread = RunnerUtil.startApplication();\n-            runTests(processThread.getPid());\n-        } catch (Throwable t) {\n-            System.out.println(\"TestPermission got unexpected exception: \" + t);\n-            t.printStackTrace();\n-            throw t;\n-        } finally {\n-            \/\/ Make sure the Application process is stopped.\n-            RunnerUtil.stopApplication(processThread);\n-        }\n-    }\n-\n-    \/**\n-     * Runs the actual test the nested class TestMain.\n-     * The test is run in a separate process because we need to add to the classpath.\n-     *\/\n-    private static void runTests(long pid) throws Throwable {\n-        final String sep = File.separator;\n-\n-        String classpath =\n-            System.getProperty(\"test.class.path\", \"\");\n-        String testSrc = System.getProperty(\"test.src\", \"\") + sep;\n-\n-        \/\/ Use a policy that will NOT allow attach. Test will verify exception.\n-        String[] args = {\n-            \"-classpath\",\n-            classpath,\n-            \"-Djava.security.manager\",\n-            String.format(\"-Djava.security.policy=%sjava.policy.deny\", testSrc),\n-            \"PermissionTest$TestMain\",\n-            Long.toString(pid),\n-            \"true\" };\n-        OutputAnalyzer output = ProcessTools.executeTestJava(args);\n-        output.shouldHaveExitValue(0);\n-\n-        \/\/ Use a policy that will allow attach.\n-        args = new String[] {\n-            \"-classpath\",\n-            classpath,\n-            \"-Djava.security.manager\",\n-            String.format(\"-Djava.security.policy=%sjava.policy.allow\", testSrc),\n-            \"PermissionTest$TestMain\",\n-            Long.toString(pid),\n-            \"false\" };\n-        output = ProcessTools.executeTestJava(args);\n-        output.shouldHaveExitValue(0);\n-    }\n-\n-    \/**\n-     * This is the actual test code. It will attach to the Application and verify\n-     * that we get a SecurityException when that is expected.\n-     *\/\n-    public static class TestMain {\n-        public static void main(String args[]) throws Exception {\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm == null) {\n-                throw new RuntimeException(\"Test configuration error - no security manager set\");\n-            }\n-\n-            String pid = args[0];\n-            boolean shouldFail = Boolean.parseBoolean(args[1]);\n-\n-            try {\n-                VirtualMachine.attach(pid).detach();\n-                if (shouldFail) {\n-                    throw new RuntimeException(\"SecurityException should be thrown\");\n-                }\n-                System.out.println(\" - attached to target VM as expected.\");\n-            } catch (Exception x) {\n-                \/\/ AttachNotSupportedException thrown when no providers can be loaded\n-                if (shouldFail && ((x instanceof AttachNotSupportedException) ||\n-                    (x instanceof SecurityException))) {\n-                    System.out.println(\" - exception thrown as expected.\");\n-                } else {\n-                    throw x;\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/PermissionTest.java","additions":0,"deletions":136,"binary":false,"changes":136,"status":"deleted"},{"patch":"@@ -1,22 +0,0 @@\n-\/*\n- * Policy file used by unit tests for attach API\n- *\/\n-grant {\n-    permission com.sun.tools.attach.AttachPermission \"attachVirtualMachine\";\n-    permission com.sun.tools.attach.AttachPermission \"createAttachProvider\";\n-\n-    \/* implementation specific *\/\n-    permission java.lang.RuntimePermission \"manageProcess\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.misc\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.tools.attach\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.jvmstat.monitor\";\n-    permission java.lang.RuntimePermission \"loadLibrary.attach\";\n-    permission java.util.PropertyPermission \"sun.jvmstat.*\", \"read\";\n-\n-    \/* \n-     * To read configuration file in META-INF\/services, write\/delete .attach_pid<pid>, \n-     * and read symbolic link of \/proc\/self\/ns\/mnt.\n-     *\/\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write,delete,readlink\";\n-};\n-\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/java.policy.allow","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,18 +0,0 @@\n-\/*\n- *\n- *\n- * Policy file used by unit tests for attach API\n- *\/\n-grant {\n-    permission com.sun.tools.attach.AttachPermission \"createAttachProvider\";\n-\n-    \/* implementation specific *\/\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.misc\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.tools.attach\";\n-    permission java.lang.RuntimePermission \"loadLibrary.attach\";\n-    permission java.util.PropertyPermission \"sun.jvmstat.*\", \"read\";\n-\n-    \/* to read configuration file in META-INF\/services, and write\/delete .attach_pid<pid> *\/\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write,delete\";\n-};\n-\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/java.policy.deny","additions":0,"deletions":18,"binary":false,"changes":18,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,0 @@\n- * @run main\/othervm\/java.security.policy=dump.policy\/secure=java.lang.SecurityManager DumpOnKey -Dsun.awt.nativedebug=true true\n- * @run main\/othervm\/java.security.policy=dump.policy\/secure=java.lang.SecurityManager DumpOnKey -Dsun.awt.nativedebug=true -Dawtdebug.on=false false\n","filename":"test\/jdk\/java\/awt\/Debug\/DumpOnKey\/DumpOnKey.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.awt.AWTPermission \"createRobot\";\n-};\n","filename":"test\/jdk\/java\/awt\/Debug\/DumpOnKey\/dump.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.Desktop;\n-\n-\/**\n- * @test\n- * @bug 8195624\n- * @summary Desktop.getDesktop() should work without permissions\n- * @run main\/othervm\/policy=java.policy -Djava.security.manager DefaultPermissions\n- *\/\n-public final class DefaultPermissions {\n-\n-    public static void main(final String[] args) {\n-        if (Desktop.isDesktopSupported()) {\n-            Desktop.getDesktop();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/Desktop\/DefaultPermissions\/DefaultPermissions.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-;\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Desktop\/DefaultPermissions\/java.policy","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,192 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.Desktop;\n-import java.awt.desktop.AppForegroundEvent;\n-import java.awt.desktop.AppForegroundListener;\n-import java.awt.desktop.AppHiddenEvent;\n-import java.awt.desktop.AppHiddenListener;\n-import java.awt.desktop.AppReopenedListener;\n-import java.awt.desktop.QuitStrategy;\n-import java.awt.desktop.ScreenSleepEvent;\n-import java.awt.desktop.ScreenSleepListener;\n-import java.awt.desktop.SystemSleepEvent;\n-import java.awt.desktop.SystemSleepListener;\n-import java.awt.desktop.UserSessionEvent;\n-import java.awt.desktop.UserSessionListener;\n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.Writer;\n-import java.net.URI;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-\n-\/**\n- * @test\n- * @bug 6255196 8143227\n- * @key headful\n- * @summary Tests that Desktop.browse() throws SecurityException without\n- *          permission of java.awt.AWTPermission showWindowWithoutWarningBanner\n- * @run main\/othervm\/policy=desktop.policy DesktopSecurityTest\n- *\/\n-public final class DesktopSecurityTest {\n-\n-    public static void main(String[] args) throws Exception {\n-        if(!Desktop.isDesktopSupported()){\n-            System.out.println(\"Desktop is not supported\");\n-            return;\n-        }\n-\n-        URI webURI = URI.create(System.getProperty(\"java.vendor.url\",\n-                                                   \"http:\/\/www.sun.com\"));\n-        File testFile = new File(\"JDIC-test.txt\").getAbsoluteFile();\n-        try {\n-            try (Writer writer = new FileWriter(testFile)) {\n-                writer.write(\"temp file used to test print() method of Desktop.\");\n-                writer.flush();\n-            }\n-            test(webURI, testFile);\n-        } finally {\n-            Files.delete(Paths.get(testFile.getAbsolutePath()));\n-        }\n-    }\n-\n-    private static void test(URI webURI, File testFile) throws Exception {\n-        Desktop desktop = Desktop.getDesktop();\n-        for (Desktop.Action action : Desktop.Action.values()) {\n-            if (!desktop.isSupported(action)) {\n-                continue;   \/\/ skip if this action is unsupported.\n-            }\n-\n-           try {\n-               switch (action) {\n-                   case OPEN -> desktop.open(testFile);\n-                   case EDIT -> desktop.edit(testFile);\n-                   case PRINT -> desktop.print(testFile);\n-                   case MAIL -> desktop.mail();\n-                   case BROWSE -> desktop.browse(webURI);\n-                   case APP_EVENT_FOREGROUND -> {\n-                       desktop.addAppEventListener(new AppForegroundListener() {\n-                           @Override\n-                           public void appRaisedToForeground(AppForegroundEvent e) {\n-                           }\n-                           @Override\n-                           public void appMovedToBackground(AppForegroundEvent e) {\n-                           }\n-                       });\n-                   }\n-                   case APP_EVENT_HIDDEN -> {\n-                       desktop.addAppEventListener(new AppHiddenListener() {\n-                           @Override\n-                           public void appHidden(AppHiddenEvent e) {\n-                           }\n-                           @Override\n-                           public void appUnhidden(AppHiddenEvent e) {\n-                           }\n-                       });\n-                   }\n-                   case APP_EVENT_REOPENED -> {\n-                       desktop.addAppEventListener((AppReopenedListener) e -> {});\n-                   }\n-                   case APP_EVENT_SCREEN_SLEEP -> {\n-                       desktop.addAppEventListener(new ScreenSleepListener() {\n-                           @Override\n-                           public void screenAboutToSleep(ScreenSleepEvent e) {\n-                           }\n-                           @Override\n-                           public void screenAwoke(ScreenSleepEvent e) {\n-                           }\n-                       });\n-                   }\n-                   case APP_EVENT_SYSTEM_SLEEP -> {\n-                       desktop.addAppEventListener(new SystemSleepListener() {\n-                           @Override\n-                           public void systemAboutToSleep(SystemSleepEvent e) {\n-                           }\n-                           @Override\n-                           public void systemAwoke(SystemSleepEvent e) {\n-                           }\n-                       });\n-                   }\n-                   case APP_EVENT_USER_SESSION -> {\n-                       desktop.addAppEventListener(new UserSessionListener() {\n-                           @Override\n-                           public void userSessionDeactivated(UserSessionEvent e) {\n-                           }\n-                           @Override\n-                           public void userSessionActivated(UserSessionEvent e) {\n-                           }\n-                       });\n-                   }\n-                   case APP_ABOUT -> {\n-                       desktop.setAboutHandler(e -> {});\n-                   }\n-                   case APP_PREFERENCES -> {\n-                       desktop.setPreferencesHandler(e -> {});\n-                   }\n-                   case APP_OPEN_FILE -> {\n-                       desktop.setOpenFileHandler(e -> {});\n-                   }\n-                   case APP_PRINT_FILE -> {\n-                       desktop.setPrintFileHandler(e -> {});\n-                   }\n-                   case APP_OPEN_URI -> {\n-                       desktop.setOpenURIHandler(e -> {});\n-                   }\n-                   case APP_QUIT_HANDLER -> {\n-                       desktop.setQuitHandler((e, response) -> {});\n-                   }\n-                   case APP_QUIT_STRATEGY -> {\n-                       desktop.setQuitStrategy(QuitStrategy.NORMAL_EXIT);\n-                   }\n-                   case APP_SUDDEN_TERMINATION -> {\n-                        desktop.enableSuddenTermination();\n-                   }\n-                   case APP_REQUEST_FOREGROUND -> {\n-                       desktop.requestForeground(true);\n-                   }\n-                   case APP_HELP_VIEWER -> {\n-                       desktop.openHelpViewer();\n-                   }\n-                   case APP_MENU_BAR -> {\n-                       desktop.setDefaultMenuBar(null);\n-                   }\n-                   case BROWSE_FILE_DIR -> {\n-                       desktop.browseFileDirectory(testFile.getParentFile());\n-                   }\n-                   case MOVE_TO_TRASH -> {\n-                       \/\/ The test have permission to create\/delete files, skip\n-                       continue;\n-                   }\n-                   default -> throw new IllegalStateException(\n-                           \"Unexpected value: \" + action);\n-               }\n-               \/\/ no exception has been thrown.\n-               throw new RuntimeException(\n-                       \"SecurityException wax expected for: \" + action);\n-           } catch (SecurityException ignored) {\n-               \/\/ expected\n-           }\n-       }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/Desktop\/SecurityTest\/DesktopSecurityTest.java","additions":0,"deletions":192,"binary":false,"changes":192,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-\/\/ default permissions granted to all domains\n-\n-grant { \n-\tpermission java.util.PropertyPermission \"*\", \"read\";\n-\tpermission java.io.FilePermission \"<<ALL FILES>>\", \"read,write,execute,delete\";\n-};\n-\n","filename":"test\/jdk\/java\/awt\/Desktop\/SecurityTest\/desktop.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.Dialog;\n-import java.awt.Frame;\n-import java.util.Timer;\n-import java.util.TimerTask;\n-\n-\/*\n-  @test\n-  @key headful\n-  @bug 7080109\n-  @summary Dialog.show() lacks doPrivileged() to access system event queue.\n-  @author sergey.bylokhov@oracle.com: area=awt.dialog\n-  @run main\/othervm\/policy=java.policy -Djava.security.manager ModalDialogPermission\n-*\/\n-public final class ModalDialogPermission {\n-\n-    public static void main(final String[] args) {\n-        Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n-            @Override\n-            public void uncaughtException(final Thread t, final Throwable e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n-        final Frame frame = new Frame();\n-        final Dialog dialog = new Dialog(frame, \"ModalDialog\", true);\n-        final Timer t = new Timer();\n-        t.schedule(new TimerTask() {\n-\n-            @Override\n-            public void run() {\n-                dialog.setVisible(false);\n-                dialog.dispose();\n-            }\n-        }, 3000L);\n-        dialog.show();\n-        frame.dispose();\n-        t.cancel();\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/Dialog\/ModalDialogPermission\/ModalDialogPermission.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setDefaultUncaughtExceptionHandler\";\n-};\n","filename":"test\/jdk\/java\/awt\/Dialog\/ModalDialogPermission\/java.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.Point;\n-import java.awt.Robot;\n-import java.awt.event.FocusEvent;\n-import java.awt.event.FocusListener;\n-import java.awt.event.InputEvent;\n-import java.awt.event.MouseEvent;\n-import java.awt.event.MouseListener;\n-\n-import javax.swing.JFrame;\n-import javax.swing.SwingUtilities;\n-\n-\/**\n- * @test\n- * @key headful\n- * @bug 8080405\n- * @run main\/othervm\/policy=java.policy -Djava.security.manager PropertyPermissionOnEDT\n- *\/\n-public final class PropertyPermissionOnEDT {\n-\n-    public static void main(final String[] args) throws Exception {\n-        SwingUtilities.invokeAndWait(PropertyPermissionOnEDT::test);\n-\n-        JFrame frame = new JFrame();\n-        frame.addMouseListener(new MouseListener() {\n-            @Override\n-            public void mouseClicked(final MouseEvent e) {\n-                test();\n-            }\n-\n-            @Override\n-            public void mousePressed(MouseEvent e) {\n-                test();\n-            }\n-\n-            @Override\n-            public void mouseReleased(MouseEvent e) {\n-                test();\n-            }\n-\n-            @Override\n-            public void mouseEntered(MouseEvent e) {\n-                test();\n-            }\n-\n-            @Override\n-            public void mouseExited(MouseEvent e) {\n-                test();\n-            }\n-        });\n-        frame.addFocusListener(new FocusListener() {\n-            @Override\n-            public void focusGained(FocusEvent e) {\n-                test();\n-            }\n-\n-            @Override\n-            public void focusLost(FocusEvent e) {\n-                test();\n-            }\n-        });\n-        frame.addMouseWheelListener(e -> test());\n-        frame.addWindowStateListener(e -> test());\n-\n-        frame.setSize(100, 100);\n-        frame.setLocationRelativeTo(null);\n-        frame.setVisible(true);\n-        Robot robot = new Robot();\n-        robot.setAutoWaitForIdle(true);\n-        robot.setAutoDelay(100);\n-        Point loc = frame.getLocationOnScreen();\n-        robot.mouseMove(loc.x + frame.getWidth() \/ 2,\n-                        loc.y + frame.getHeight() \/ 2);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-        robot.mouseWheel(100);\n-        frame.dispose();\n-    }\n-\n-    private static void test() {\n-        String property = System.getProperty(\"os.name\");\n-        System.out.println(\"property = \" + property);\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/EventDispatchThread\/PropertyPermissionOnEDT\/PropertyPermissionOnEDT.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-  permission java.util.PropertyPermission \"os.name\", \"read\";\n-  permission java.awt.AWTPermission \"createRobot\";\n-};\n","filename":"test\/jdk\/java\/awt\/EventDispatchThread\/PropertyPermissionOnEDT\/java.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  @test\n-  @key headful\n-  @bug       6785058\n-  @summary   Tests that an owner is activated on closing its owned dialog with the warning icon.\n-  @library   ..\/..\/regtesthelpers\n-  @build     Util\n-  @run       main\/othervm\/policy=java.policy -Djava.security.manager CloseDialogActivateOwnerTest\n-*\/\n-\n-import java.awt.*;\n-import test.java.awt.regtesthelpers.Util;\n-\n-public class CloseDialogActivateOwnerTest {\n-    Robot robot;\n-\n-    public static void main(String[] args) {\n-        CloseDialogActivateOwnerTest app = new CloseDialogActivateOwnerTest();\n-        app.init();\n-        app.start();\n-    }\n-\n-    public void init() {\n-        robot = Util.createRobot();\n-    }\n-\n-    public void start() {\n-        final Frame frame = new Frame(\"Owner Frame\");\n-        final Dialog dialog = new Dialog(frame, \"Owned Dialog\");\n-\n-        frame.setSize(100, 100);\n-        dialog.setSize(100, 100);\n-\n-        \/\/ Show the owner. Check that it's focused.\n-        if (!Util.trackWindowGainedFocus(frame, new Runnable() {\n-                public void run() {\n-                    frame.setVisible(true);\n-                }\n-            }, 2000, false))\n-        {\n-            throw new TestErrorException(\"the owner frame hasn't been activated on show\");\n-        }\n-\n-        \/\/ Show the owned dialog. Check that it's focused.\n-        if (!Util.trackWindowGainedFocus(dialog, new Runnable() {\n-                public void run() {\n-                    dialog.setVisible(true);\n-                }\n-            }, 2000, true))\n-        {\n-            throw new TestErrorException(\"the owned dialog hasn't been activated on show\");\n-        }\n-\n-        robot.delay(2000); \/\/ wait for the warning icon is shown\n-\n-        \/\/ Close the dialog. Check that the owner is activated.\n-        if (!Util.trackWindowGainedFocus(frame, new Runnable() {\n-                public void run() {\n-                    dialog.dispose();\n-                }\n-            }, 2000, false))\n-        {\n-            throw new TestFailedException(\"the owner hasn't been activated on closing the owned dialog\");\n-        }\n-\n-        System.out.println(\"Test passed.\");\n-    }\n-}\n-\n-\/**\n- * Thrown when the behavior being verified is found wrong.\n- *\/\n-class TestFailedException extends RuntimeException {\n-    TestFailedException(String msg) {\n-        super(\"Test failed: \" + msg);\n-    }\n-}\n-\n-\/**\n- * Thrown when an error not related to the behavior being verified is encountered.\n- *\/\n-class TestErrorException extends Error {\n-    TestErrorException(String msg) {\n-        super(\"Unexpected error: \" + msg);\n-    }\n-}\n-\n","filename":"test\/jdk\/java\/awt\/Focus\/CloseDialogActivateOwnerTest\/CloseDialogActivateOwnerTest.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-\tpermission java.awt.AWTPermission \"createRobot\";\n-};\n","filename":"test\/jdk\/java\/awt\/Focus\/CloseDialogActivateOwnerTest\/java.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,160 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.Font;\n-import java.awt.FontFormatException;\n-import java.io.BufferedInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.net.URL;\n-import java.nio.file.Paths;\n-\n-\/**\n- * @test\n- * @key headful\n- * @bug 6522586\n- * @summary Enforce limits on font creation\n- * @run main\/othervm -Djava.security.manager=allow BigFont 1 A.ttf\n- * @run main\/othervm -Djava.security.manager=allow BigFont 2 A.ttf\n- *\/\n-public class BigFont {\n-\n-   static private class SizedInputStream extends InputStream {\n-\n-       int size;\n-       int cnt = 0;\n-\n-       SizedInputStream(int size) {\n-           this.size = size;\n-       }\n-\n-       public int read() {\n-           if (cnt < size) {\n-              cnt++;\n-              return 0;\n-           } else {\n-              return -1;\n-           }\n-       }\n-\n-       public int getCurrentSize() {\n-           return cnt;\n-       }\n-   }\n-\n-    static String id;\n-    static String fileName;\n-\n-    public static void main(final String[] args) {\n-        id = args[0];\n-        fileName = args[1];\n-\n-        System.out.println(\"Applet \" + id + \" \"+\n-                           Thread.currentThread().getThreadGroup());\n-        if (System.getSecurityManager() == null) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-        \/\/ Larger than size for a single font.\n-        int fontSize = 64 * 1000 * 1000;\n-        SizedInputStream sis = new SizedInputStream(fontSize);\n-        try {\n-             Font font = Font.createFont(Font.TRUETYPE_FONT, sis);\n-        } catch (Throwable t) {\n-            t.printStackTrace();\n-            if (t instanceof FontFormatException ||\n-                fontSize <= sis.getCurrentSize())\n-            {\n-                System.out.println(sis.getCurrentSize());\n-                System.out.println(t);\n-                throw new RuntimeException(\"Allowed file to be too large.\");\n-            }\n-        }\n-        \/\/ The following part of the test was verified manually but\n-        \/\/ is impractical to enable  because it requires a fairly large\n-        \/\/ valid font to be part of the test, and we can't easily include\n-        \/\/ that, nor dependably reference one from the applet environment.\n-        \/*\n-        if (fileName == null) {\n-            return;\n-        }\n-        int size = getFileSize(fileName);\n-        if (size == 0) {\n-            return;\n-        }\n-        int fontCnt = 1000 * 1000 * 1000 \/ size;\n-        loadMany(size, fontCnt, fileName);\n-        System.gc(); System.gc();\n-        fontCnt = fontCnt \/ 2;\n-        System.out.println(\"Applet \" + id + \" load more.\");\n-        loadMany(size, fontCnt, fileName);\n-        *\/\n-        System.out.println(\"Applet \" + id + \" finished.\");\n-    }\n-\n-    int getFileSize(String fileName) {\n-        try {\n-            String path = Paths.get(System.getProperty(\"test.src\", \".\"),\n-                                    fileName).toAbsolutePath().normalize()\n-                                             .toString();\n-            URL url = new URL(path);\n-            InputStream inStream = url.openStream();\n-            BufferedInputStream fontStream = new BufferedInputStream(inStream);\n-            int size = 0;\n-            while (fontStream.read() != -1) {\n-                size++;\n-            }\n-            fontStream.close();\n-            return size;\n-        } catch (IOException e) {\n-            return 0;\n-        }\n-\n-    }\n-    void loadMany(int oneFont, int fontCnt, String fileName) {\n-        System.out.println(\"fontcnt= \" + fontCnt);\n-        Font[] fonts = new Font[fontCnt];\n-        int totalSize = 0;\n-        boolean gotException = false;\n-        for (int i=0; i<fontCnt; i++) {\n-            try {\n-                String path = Paths.get(System.getProperty(\"test.src\", \".\"),\n-                                        fileName).toAbsolutePath().normalize()\n-                                                 .toString();\n-                URL url = new URL(path);\n-                InputStream inStream = url.openStream();\n-                BufferedInputStream fontStream =\n-                    new BufferedInputStream(inStream);\n-                fonts[i] = Font.createFont(Font.TRUETYPE_FONT, fontStream);\n-                totalSize += oneFont;\n-                fontStream.close();\n-            } catch (Throwable t) {\n-                gotException = true;\n-                System.out.println(\"Applet \" + id + \" \" + t);\n-            }\n-        }\n-        if (!gotException) {\n-          throw new RuntimeException(\"No expected exception\");\n-        }\n-    }\n-}\n-\n","filename":"test\/jdk\/java\/awt\/FontClass\/CreateFont\/BigFont.java","additions":0,"deletions":160,"binary":false,"changes":160,"status":"deleted"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6652929\n- * @summary verify handling of File.getPath()\n- * @compile FontFile.java\n- * @run shell TestFontFile.sh\n- *\/\n-\n-\/*\n- * When using jtreg this test needs to be run by shell script,\n- * since otherwise jtreg reflectively invokes the main method\n- * and the codebase for the purposes of the security manager\n- * is that of the jtreg harness, not the codebase (class file location)\n- * of this program, thus access to read to that location is not available.\n- *\/\n-\n-import java.awt.*;\n-import java.io.*;\n-\n-public class FontFile {\n-    public static void main(String[] args) throws Exception {\n-        String sep = System.getProperty(\"file.separator\");\n-        String fname = \"..\" + sep + \"A.ttf\";\n-        \/\/String dir = System.getProperty(\"test.src\");\n-        String dir = System.getenv(\"TESTSRC\");\n-        if (dir != null) {\n-            fname = dir + sep + fname;\n-        }\n-        \/\/String classesDir = System.getProperty(\"test.classes\");\n-        String classesDir = System.getenv(\"TESTCLASSES\");\n-        System.out.println(\"classesDir=\"+classesDir);\n-        String testfile = \"somefile\";\n-        if (classesDir != null) {\n-            testfile = classesDir + sep + testfile;\n-        }\n-        final String somefile = testfile;\n-        System.out.println(\"somefile=\"+somefile);\n-        System.out.println(\"userdir=\"+System.getProperty(\"user.dir\"));\n-        final String name = fname;\n-        System.out.println(\"Will try to access \" + name);\n-        if (!(new File(name)).canRead()) {\n-           System.out.println(\"File not available : can't run test\");\n-           return;\n-        }\n-        System.out.println(\"File is available. Verify no access under SM\");\n-\n-        System.setSecurityManager(new SecurityManager());\n-\n-\n-        \/\/ Check cannot read file.\n-        try {\n-            new FileInputStream(name);\n-            throw new Error(\"Something wrong with test environment\");\n-        } catch (SecurityException exc) {\n-            \/\/ Good.\n-        }\n-\n-        try {\n-            Font font = Font.createFont(Font.TRUETYPE_FONT,\n-            new File(\"nosuchfile\") {\n-                    private boolean read;\n-                    @Override public String getPath() {\n-                        if (read) {\n-                            return name;\n-                        } else {\n-                            read = true;\n-                            return somefile;\n-                        }\n-                    }\n-                    @Override public boolean canRead() {\n-                        return true;\n-                    }\n-               }\n-            );\n-          System.err.println(font.getFontName());\n-          throw new RuntimeException(\"No expected exception\");\n-        }  catch (IOException e) {\n-          System.err.println(\"Test passed.\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/FontClass\/CreateFont\/fileaccess\/FontFile.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"},{"patch":"@@ -1,80 +0,0 @@\n-#\n-# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#!\/bin\/sh\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then TESTSRC=.\n-fi\n-\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  PARENT=`dirname \\`which java\\``\n-  TESTJAVA=`dirname ${PARENT}`\n-  echo \"TESTJAVA not set, selecting \" ${TESTJAVA}\n-  echo \"If this is incorrect, try setting the variable manually.\"\n-fi\n-\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-BIT_FLAG=\"\"\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  AIX | Darwin | Linux )\n-    NULL=\/dev\/null\n-    PS=\":\"\n-    FS=\"\/\"\n-    ## for linux it's HOME\n-    FILE_LOCATION=$HOME\n-    ;;\n-  Windows_* | CYGWIN* )\n-    NULL=NUL\n-    PS=\";\"\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-JEMMYPATH=${CPAPPEND}\n-CLASSPATH=.${PS}${TESTCLASSES}${PS}${JEMMYPATH} ; export CLASSPATH\n-\n-THIS_DIR=`pwd`\n-\n-${TESTJAVA}${FS}bin${FS}java ${BIT_FLAG} -version\n-\n-${TESTJAVA}${FS}bin${FS}java -Djava.security.manager=allow ${BIT_FLAG} FontFile > test.out 2>&1\n-\n-STATUS=$?\n-\n-cat test.out\n-\n-exit $STATUS\n","filename":"test\/jdk\/java\/awt\/FontClass\/CreateFont\/fileaccess\/TestFontFile.sh","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6785424\n- * @summary Test no SecurityException searching for a font.\n- * @run main\/othervm -Djava.security.manager=allow FontAccess\n- *\n- * This can only test the specific bug if run on something like\n- * Windows Citrix Server where SystemDirectory and WindowsDirectory\n- * are different locations.\n- *\/\n-\n-import java.awt.*;\n-import java.awt.image.*;\n-\n-public class FontAccess {\n-\n-     public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        Font f = new Font(\"Verdana\", Font.PLAIN, 12);\n-        BufferedImage bi = new BufferedImage(1,1,1);\n-        Graphics2D g = bi.createGraphics();\n-        g.setFont(f);\n-        System.out.println(g.getFontMetrics());\n-     }\n-}\n","filename":"test\/jdk\/java\/awt\/FontClass\/FontAccess.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 5010310 6319835 6904882 6968373\n- * @summary test fonts can be created in the presence of a security manager\n- * @run main\/othervm -Djava.security.manager=allow FontPrivilege\n- *\/\n-\n-import java.awt.Font;\n-\n-public class FontPrivilege {\n-\n-    public static void main(String[] args) throws Exception {\n-        System.setSecurityManager(new SecurityManager());\n-\n-        new Font(\"Helvetica\", Font.PLAIN, 12).getFamily();\n-        new Font(\"foo bar\", Font.PLAIN, 12).getFamily();\n-   }\n-}\n","filename":"test\/jdk\/java\/awt\/FontClass\/FontPrivilege.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,3 @@\n- * correctly with and without a SecurityManager. Note that the test may fail\n- * on older Gnome versions (see bug 6500686).\n- * @run main\/othervm -Djava.security.manager=allow FSFrame\n- * @run main\/othervm -Djava.security.manager=allow -Dsun.java2d.noddraw=true FSFrame\n+ * correctly. Note that the test may fail on older Gnome versions (see bug 6500686).\n+ * @run main FSFrame\n+ * @run main\/othervm -Dsun.java2d.noddraw=true FSFrame\n@@ -35,2 +34,11 @@\n-import java.awt.*;\n-import java.awt.image.*;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n@@ -124,1 +132,1 @@\n-    void checkFSFunctionality(boolean withSecurity) {\n+    void checkFSFunctionality() {\n@@ -126,4 +134,0 @@\n-        if (withSecurity) {\n-            SecurityManager sm = new SecurityManager();\n-            System.setSecurityManager(sm);\n-        }\n@@ -140,1 +144,0 @@\n-            if (!withSecurity) {\n@@ -142,12 +145,9 @@\n-                try {\n-                    EventQueue.invokeAndWait(new Runnable() {\n-                        public void run() {\n-                            repaint();\n-                            checkFSDisplay(fs);\n-                        }\n-                    });\n-                } catch (InvocationTargetException ex) {\n-                    ex.printStackTrace();\n-                } catch (InterruptedException ex) {\n-                    ex.printStackTrace();\n-                }\n+            try {\n+                EventQueue.invokeAndWait(new Runnable() {\n+                    public void run() {\n+                        repaint();\n+                        checkFSDisplay(fs);\n+                    }\n+                });\n+            } catch (InvocationTargetException | InterruptedException ex) {\n+                ex.printStackTrace();\n@@ -173,2 +173,1 @@\n-                checkFSFunctionality(false);\n-                checkFSFunctionality(true);\n+                checkFSFunctionality();\n","filename":"test\/jdk\/java\/awt\/FullScreen\/SetFSWindow\/FSFrame.java","additions":26,"deletions":27,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @key headful printer\n- * @bug 6195901 6195923 6195928 6195933 6491273 6888734\n- * @summary No SecurityException should be thrown when printing to a file\n-            using the given policy.\n-            Print to file option should be selected.\n- * @run main\/othervm\/policy=policy SecurityDialogTest\n- *\/\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.util.*;\n-import java.io.*;\n-\n-\n-public class SecurityDialogTest extends Frame implements ActionListener {\n-    \/\/ Declare things used in the test, like buttons and labels here\n-\n-    Button nativeDlg, setSecurity;\n-        boolean isNative = true;\n-\n-    public SecurityDialogTest() {\n-\n-        nativeDlg = new Button(\"Print Dialog\");\n-        nativeDlg.addActionListener(this);\n-        setSecurity = new Button(\"Toggle Dialog\");\n-        setSecurity.addActionListener(this);\n-        add(\"South\", nativeDlg);\n-        add(\"North\", setSecurity);\n-        setSize(300, 300);\n-        setVisible(true);\n-    }\n-\n-    public static void main(String args[]) {\n-        System.out.println(\"Native dialog is the default\");\n-        SecurityDialogTest test = new SecurityDialogTest();\n-    }\n-\n-    public void actionPerformed(ActionEvent e) {\n-\n-        if (e.getSource() == setSecurity) {\n-            if (isNative) {\n-                isNative = false;\n-                System.out.println(\"Common dialog is the default\");\n-\n-            } else {\n-                isNative = true;\n-                System.out.println(\"Native dialog is the default\");\n-            }\n-            return;\n-        }\n-\n-        JobAttributes  ja = new JobAttributes();\n-        PageAttributes pa = new PageAttributes();\n-\n-        if (isNative) {\n-            ja.setDialog(JobAttributes.DialogType.NATIVE);\n-        } else {\n-            ja.setDialog(JobAttributes.DialogType.COMMON);\n-        }\n-        ja.setDestination(JobAttributes.DestinationType.FILE);\n-        ja.setFileName(\"mohan.ps\");\n-\n-\n-        PrintJob pjob = getToolkit().getPrintJob(this, null, ja, pa);\n-\n-        if (pjob != null) {\n-            Graphics pg = pjob.getGraphics();\n-            System.out.println(\"PJOB: \" + pjob);\n-            if (pg != null) {\n-                System.out.println(\"Printer Graphics: \" + pg);\n-                this.printAll(pg);\n-                pg.dispose();\n-            } else {\n-                System.out.println(\"Printer Graphics is null\");\n-            }\n-            pjob.end();\n-            System.out.println(\"DONE\");\n-        } else {\n-            System.out.println(\"PJOB is null\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/PrintJob\/Security\/SecurityDialogTest.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* AUTOMATICALLY GENERATED ON Thu Jan 03 15:48:39 PST 2002*\/\n-\/* DO NOT EDIT *\/\n-\n-grant {\n- permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write\";\n- permission java.lang.RuntimePermission \"queuePrintJob\"; \n- permission java.lang.RuntimePermission \"setSecurityManager\"; \n-};\n-\n","filename":"test\/jdk\/java\/awt\/PrintJob\/Security\/policy","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-import java.awt.*;\n+import java.awt.Toolkit;\n@@ -27,1 +27,0 @@\n-import java.security.Permission;\n@@ -29,2 +28,1 @@\n-\n-\/**\n+\/*\n@@ -33,1 +31,1 @@\n- * @run main\/othervm -Djava.security.manager=allow bug8078165\n+ * @run main bug8078165\n@@ -35,1 +33,0 @@\n- * @author Anton Nashatyrev\n@@ -40,7 +37,0 @@\n-        \/\/ Mac only\n-        System.setSecurityManager(new SecurityManager() {\n-            @Override\n-            public void checkPermission(Permission permission) {\n-                \/\/ Just allows everything\n-            }\n-        });\n","filename":"test\/jdk\/java\/awt\/Toolkit\/GetImage\/bug8078165.java","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 6599601\n- * @summary tests that a simple GUI application runs without any\n- *          exceptions thrown\n- * @author Artem.Ananiev area=awt.Toolkit\n- * @run main\/othervm -Djava.security.manager=allow SecurityTest2\n- *\/\n-\n-import java.awt.*;\n-\n-public class SecurityTest2\n-{\n-    public static void main(String[] args)\n-    {\n-        System.setSecurityManager(new SecurityManager());\n-\n-        try\n-        {\n-            Frame f = new Frame();\n-            f.setVisible(true);\n-            f.dispose();\n-        }\n-        catch (Exception z)\n-        {\n-            throw new RuntimeException(\"Test FAILED because of some Exception thrown\", z);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/Toolkit\/SecurityTest\/SecurityTest2.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @author Dmitriy Ermashov (dmitriy.ermashov@oracle.com)\n@@ -38,1 +37,1 @@\n- * @run main\/othervm\/policy=tray.policy -Djava.security.manager FunctionalityCheck\n+ * @run main FunctionalityCheck\n@@ -61,3 +60,3 @@\n-        InputEvent.BUTTON1_MASK,\n-        InputEvent.BUTTON2_MASK,\n-        InputEvent.BUTTON3_MASK\n+        InputEvent.BUTTON1_DOWN_MASK,\n+        InputEvent.BUTTON2_DOWN_MASK,\n+        InputEvent.BUTTON3_DOWN_MASK\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/SecurityCheck\/FunctionalityCheck\/FunctionalityCheck.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,23 +0,0 @@\n-grant {\r\n-  permission java.io.FilePermission \"<<ALL FILES>>\", \"read, write, delete, execute\";\r\n-  permission java.awt.AWTPermission \"accessSystemTray\";\r\n-  permission java.awt.AWTPermission \"createRobot\";\r\n-  permission java.util.PropertyPermission \"resultsDir\", \"read\";\r\n-  permission java.util.PropertyPermission \"user.home\", \"read\";\r\n-  permission java.util.PropertyPermission \"os.name\", \"read\";\r\n-  permission java.util.PropertyPermission \"os.version\", \"read\";\r\n-  permission java.awt.AWTPermission \"accessEventQueue\";\r\n-  permission java.lang.RuntimePermission \"setIO\";\r\n-  permission java.lang.RuntimePermission \"accessDeclaredMembers\";\r\n-  permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\r\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.lwawt.macosx\";\r\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.awt.X11\";\r\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.awt\";\r\n-  permission java.lang.RuntimePermission \"loadLibrary.stl\";\r\n-  permission java.util.PropertyPermission \"java.home\", \"read\";\r\n-  permission java.util.PropertyPermission \"java.class.path\", \"read\";\r\n-  permission java.awt.AWTPermission \"readDisplayPixels\";\r\n-  permission java.awt.AWTPermission \"watchMousePointer\";\r\n-\r\n-};\r\n-\r\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/SecurityCheck\/FunctionalityCheck\/tray.policy","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.*;\n-import java.awt.image.BufferedImage;\n-\n-\/*\n- * @test\n- * @key headful\n- * @summary Check for SecurityException occurrence if no permissions for system tray granted\n- * @author Dmitriy Ermashov (dmitriy.ermashov@oracle.com)\n- * @run main\/othervm\/policy=tray.policy -Djava.security.manager NoPermissionTest\n- *\/\n-\n-public class NoPermissionTest {\n-\n-    public static void main(String[] args) {\n-        if (! SystemTray.isSupported()) {\n-            System.out.println(\"SystemTray is not supported on this platform. Marking the test passed\");\n-        } else {\n-\n-            BufferedImage im = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\n-            Graphics gr = im.createGraphics();\n-            gr.setColor(Color.white);\n-            gr.fillRect(0, 0, 16, 16);\n-\n-            try {\n-                SystemTray.getSystemTray();\n-                throw new RuntimeException(\"FAIL: SecurityException not thrown by getSystemTray method\");\n-            } catch (SecurityException ex) {\n-                if (!ex.getMessage().matches(\".+java.awt.AWTPermission.+accessSystemTray.*\"))\n-                    throw new RuntimeException(\"FAIL: Security exception thrown due to unexpected reason\");\n-            }\n-\n-            try {\n-                TrayIcon icon = new TrayIcon(im, \"Caption\");\n-                throw new RuntimeException(\"FAIL: SecurityException not thrown by TrayIcon constructor\");\n-            } catch (SecurityException ex) {\n-                if (!ex.getMessage().matches(\".+java.awt.AWTPermission.+accessSystemTray.*\"))\n-                    throw new RuntimeException(\"FAIL: Security exception thrown due to unexpected reason\");\n-            }\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/SecurityCheck\/NoPermissionTest\/NoPermissionTest.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-\/\/NoPermission Test\n-grant{\n-};\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/SecurityCheck\/NoPermissionTest\/tray.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.*;\n-import java.awt.image.BufferedImage;\n-\n-\/*\n- * @test\n- * @key headful\n- * @summary Check for no Exception occurrence if permissions for system tray granted\n- * @author Dmitriy Ermashov (dmitriy.ermashov@oracle.com)\n- * @run main\/othervm\/policy=tray.policy -Djava.security.manager PermissionTest\n- *\/\n-\n-public class PermissionTest {\n-\n-    public static void main(String[] args) {\n-\n-        if (!SystemTray.isSupported()) {\n-            System.out.println(\"SystemTray is not supported on this platform. Marking the test passed\");\n-        } else {\n-            BufferedImage im = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\n-            Graphics gr = im.createGraphics();\n-            gr.setColor(Color.white);\n-            gr.fillRect(0, 0, 16, 16);\n-\n-            SystemTray.getSystemTray();\n-            TrayIcon icon = new TrayIcon(im, \"Caption\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/SecurityCheck\/PermissionTest\/PermissionTest.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-  permission java.awt.AWTPermission \"accessSystemTray\";\n-};\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/SecurityCheck\/PermissionTest\/tray.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.color.*;\n-\n-\/*\n- * @test\n- * @bug 8058969 8178708\n- * @summary test standard profiles loads with SecurityManager installed.\n- * @run main\/othervm -Djava.security.manager=allow LoadProfileWithSM\n- *\/\n-\n-public class LoadProfileWithSM {\n-\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        ICC_Profile profile =\n-            ((ICC_ColorSpace)(ColorSpace.getInstance(\n-                ColorSpace.CS_GRAY))).getProfile();\n-        \/* request profile data in order to force profile loading *\/\n-        profile.getData();\n-   }\n-}\n","filename":"test\/jdk\/java\/awt\/color\/LoadProfileWithSM.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.color.ColorSpace;\n-import java.awt.color.ICC_Profile;\n-\n-\/**\n- * @test\n- * @bug 5042429\n- * @summary This test verifies if ICC_profile instances for standard ColorSpace\n- *          types are created without security exceptions if access to file\n- *          system is prohibited.\n- * @run main\/othervm\/policy=StandardProfileTest.policy StandardProfileTest\n- *\/\n-public final class StandardProfileTest {\n-\n-    public static void main(String[] args) {\n-        if (System.getSecurityManager() == null) {\n-            throw new RuntimeException(\"SecurityManager is null\");\n-        }\n-\n-        int[] types = {\n-            ColorSpace.CS_CIEXYZ,\n-            ColorSpace.CS_GRAY,\n-            ColorSpace.CS_LINEAR_RGB,\n-            ColorSpace.CS_PYCC,\n-            ColorSpace.CS_sRGB } ;\n-\n-        for (int t = 0; t<types.length; t++) {\n-            System.out.println(\"type \" + t);\n-            ICC_Profile p = ICC_Profile.getInstance(types[t]);\n-            p.getPCSType();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/color\/StandardProfileTest.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @bug     5042429\n- * @summary This policy file prohibits access to the file system.\n- *\/\n-\n-grant {\n-};\n","filename":"test\/jdk\/java\/awt\/color\/StandardProfileTest.policy","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -1,153 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  @test\n-  @key headful\n-  @bug 6887703\n-  @summary Unsigned applet can retrieve the dragged information before drop action occurs\n-  @library ..\/..\/regtesthelpers\n-  @library ..\/..\/regtesthelpers\/process\n-  @build Util\n-  @build ProcessResults ProcessCommunicator\n-  @run main\/othervm DragInterceptorAppletTest main\n-*\/\n-\n-import java.awt.Point;\n-import java.awt.Robot;\n-import java.awt.event.InputEvent;\n-\n-import test.java.awt.regtesthelpers.Util;\n-import test.java.awt.regtesthelpers.process.ProcessCommunicator;\n-import test.java.awt.regtesthelpers.process.ProcessResults;\n-\n-import static java.lang.Thread.sleep;\n-\n-public class DragInterceptorAppletTest {\n-\n-    public void start() {\n-\n-        SourceFrame sourceFrame = new SourceFrame();\n-\n-        Util.waitForIdle(null);\n-\n-        String [] args = new String [] {\n-            String.valueOf(sourceFrame.getNextLocationX()),\n-            String.valueOf(sourceFrame.getNextLocationY()),\n-            String.valueOf(sourceFrame.getDragSourcePointX()),\n-            String.valueOf(sourceFrame.getDragSourcePointY()),\n-        };\n-        String classpath = System.getProperty(\"java.class.path\");\n-        ProcessResults processResults =\n-            ProcessCommunicator.executeChildProcess(this.getClass(),classpath,args);\n-\n-        verifyTestResults(processResults);\n-\n-    }\/\/ start()\n-\n-    private static void verifyTestResults(ProcessResults processResults) {\n-\n-    switch (processResults.getExitValue()) {\n-        case InterprocessMessages.DATA_WAS_INTERCEPTED_AND_EXCEPTION_HANDLER_WAS_NOT_TRIGGERED:\n-            processResults.printProcessErrorOutput(System.err);\n-            throw new RuntimeException(\"TEST IS FAILED: Target applet can intercept data \" +\n-                    \"without a clipboard permission and an exception handler was not triggered.\");\n-            \/\/Unreachable...\n-\n-        case InterprocessMessages.DATA_WAS_INTERCEPTED:\n-            processResults.printProcessErrorOutput(System.err);\n-            throw new RuntimeException(\"TEST IS FAILED: Target applet can intercept data \" +\n-                    \"without a clipboard permission\");\n-            \/\/Unreachable...\n-\n-        case InterprocessMessages.EXCEPTION_HANDLER_WAS_NOT_TRIGGERED:\n-            processResults.printProcessErrorOutput(System.err);\n-            throw new RuntimeException(\"TEST IS FAILED: An exception handler was not triggered.\");\n-            \/\/Unreachable...\n-\n-    }\n-\n-        \/\/    The child process throws an exception. do not look at the stderr.\n-        processResults.verifyStdErr(System.err);\n-        processResults.verifyProcessExitValue(System.err);\n-        processResults.printProcessStandartOutput(System.out);\n-    }\n-\n-    \/\/We cannot make an instance of the applet without the default constructor\n-    public DragInterceptorAppletTest() {\n-        super();\n-    }\n-\n-    \/\/We need in this constructor to pass frame position between JVMs\n-    public DragInterceptorAppletTest(Point targetFrameLocation, Point dragSourcePoint)\n-            throws InterruptedException\n-    {\n-        DragInterceptorFrame targetFrame = new DragInterceptorFrame(targetFrameLocation);\n-\n-        Util.waitForIdle(null);\n-\n-        final Robot robot = Util.createRobot();\n-\n-        robot.mouseMove((int)dragSourcePoint.getX(),(int)dragSourcePoint.getY());\n-        sleep(100);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        sleep(100);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-        sleep(100);\n-\n-        Util.drag(robot, dragSourcePoint, targetFrame.getDropTargetPoint(),\n-                InputEvent.BUTTON1_MASK);\n-\n-        sleep(2000);\n-        ProcessCommunicator.destroyProcess();\n-    }\n-\n-    enum InterprocessArguments {\n-        TARGET_FRAME_X_POSITION_ARGUMENT,\n-        TARGET_FRAME_Y_POSITION_ARGUMENT,\n-        DRAG_SOURCE_POINT_X_ARGUMENT,\n-        DRAG_SOURCE_POINT_Y_ARGUMENT;\n-\n-        int extract (String [] args) {\n-            return Integer.parseInt(args[this.ordinal()]);\n-        }\n-    }\n-\n-    public static void main(final String[] args) {\n-        if (args.length > 0 && args[0].equals(\"main\")) {\n-            new DragInterceptorAppletTest().start();\n-            return;\n-        }\n-        Point dragSourcePoint = new Point(InterprocessArguments.DRAG_SOURCE_POINT_X_ARGUMENT.extract(args),\n-                InterprocessArguments.DRAG_SOURCE_POINT_Y_ARGUMENT.extract(args));\n-        Point targetFrameLocation = new Point(InterprocessArguments.TARGET_FRAME_X_POSITION_ARGUMENT.extract(args),\n-                InterprocessArguments.TARGET_FRAME_Y_POSITION_ARGUMENT.extract(args));\n-        try {\n-            new DragInterceptorAppletTest(targetFrameLocation, dragSourcePoint);\n-        } catch (InterruptedException e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-}\/\/ class DragInterceptorAppletTest\n","filename":"test\/jdk\/java\/awt\/dnd\/DragInterceptorAppletTest\/DragInterceptorAppletTest.java","additions":0,"deletions":153,"binary":false,"changes":153,"status":"deleted"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.*;\n-import java.awt.datatransfer.DataFlavor;\n-import java.awt.datatransfer.UnsupportedFlavorException;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.dnd.*;\n-import java.io.IOException;\n-import java.security.Permission;\n-import java.security.AccessControlException;\n-\n-class DragInterceptorFrame extends Frame implements DropTargetListener {\n-\n-    private static int exitMessage = InterprocessMessages.TEST_PASSED;\n-    private static boolean dataIsAccessible = false;\n-    private static boolean exceptionHasBeenThrown = false;\n-\n-    DragInterceptorFrame(Point location) {\n-        System.setSecurityManager(new ClipboardDefender());\n-        initGUI(location);\n-        setDropTarget(new DropTarget(this, DnDConstants.ACTION_COPY,\n-                this));\n-    }\n-\n-    private void initGUI(Point location) {\n-        this.setLocation(location);\n-        this.addWindowListener(new WindowAdapter() {\n-            public void windowClosing(WindowEvent e) {\n-                DragInterceptorFrame.this.dispose();\n-            }\n-        });\n-        setSize (200, 200);\n-        this.setVisible(true);\n-    }\n-\n-    public void dragEnter(DropTargetDragEvent dtde) {\n-        \/\/ We want to set the exception handler on EDT\n-        Thread.currentThread().setUncaughtExceptionHandler (\n-            new Thread.UncaughtExceptionHandler() {\n-                public void uncaughtException(Thread t, Throwable e) {\n-                    exceptionHasBeenThrown = true;\n-                }\n-            }\n-        );\n-        examineTransferable(dtde);\n-    }\n-\n-    public void dragOver(DropTargetDragEvent dtde) {\n-        examineTransferable(dtde);\n-    }\n-\n-    public void dropActionChanged(DropTargetDragEvent dtde) {\n-        examineTransferable(dtde);\n-    }\n-\n-    public void dragExit(DropTargetEvent dte) {}\n-\n-    public void drop(DropTargetDropEvent dtde) {\n-\n-        if (dataIsAccessible && !exceptionHasBeenThrown) {\n-            exitMessage = InterprocessMessages.DATA_WAS_INTERCEPTED_AND_EXCEPTION_HANDLER_WAS_NOT_TRIGGERED;\n-        } else if (dataIsAccessible) {\n-            exitMessage = InterprocessMessages.DATA_WAS_INTERCEPTED;\n-        } else if (!exceptionHasBeenThrown) {\n-            exitMessage = InterprocessMessages.EXCEPTION_HANDLER_WAS_NOT_TRIGGERED;\n-        }\n-\n-        \/\/ This returns the diagnostic code from the child VM\n-        System.exit(exitMessage);\n-    }\n-\n-    Point getDropTargetPoint() {\n-        return new Point((int)getLocationOnScreen().getX()+(getWidth()\/2),\n-                (int)getLocationOnScreen().getY()+(getHeight()\/2));\n-    }\n-\n-    private void examineTransferable(DropTargetDragEvent dtde) {\n-        if (dtde.getCurrentDataFlavorsAsList().contains(DataFlavor.stringFlavor)) {\n-            dtde.acceptDrag(DnDConstants.ACTION_COPY);\n-            try{\n-                if (null != dtde.getTransferable().getTransferData(DataFlavor.stringFlavor)) {\n-                    dataIsAccessible = true;\n-                }\n-            } catch (IOException e) {\n-                e.printStackTrace();\n-                exitMessage = InterprocessMessages.UNEXPECTED_IO_EXCEPTION;\n-            } catch (UnsupportedFlavorException e) {\n-                e.printStackTrace();\n-                exitMessage = InterprocessMessages.UNEXPECTED_UNSUPPORTED_FLAVOR_EXCEPTION;\n-            }\n-        }\n-    }\n-\n-    static class ClipboardDefender extends SecurityManager {\n-        public void checkPermission(Permission p) {\n-           if (p instanceof java.awt.AWTPermission &&\n-                   p.getName().equals(\"accessClipboard\")) {\n-               throw new AccessControlException(\"access denied \");\n-           }\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new DragInterceptorFrame(new Point(200,200));\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/dnd\/DragInterceptorAppletTest\/DragInterceptorFrame.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public interface InterprocessMessages {\n-    final static int TEST_PASSED = 0;\n-    final static int DATA_WAS_INTERCEPTED = 212;\n-    final static int EXCEPTION_HANDLER_WAS_NOT_TRIGGERED = 213;\n-    final static int DATA_WAS_INTERCEPTED_AND_EXCEPTION_HANDLER_WAS_NOT_TRIGGERED  = 214;\n-\n-    final static int UNEXPECTED_IO_EXCEPTION = 400;\n-    final static int UNEXPECTED_UNSUPPORTED_FLAVOR_EXCEPTION = 401;\n-}\n","filename":"test\/jdk\/java\/awt\/dnd\/DragInterceptorAppletTest\/InterprocessMessages.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import test.java.awt.regtesthelpers.Util;\n-\n-import java.awt.*;\n-import java.awt.datatransfer.StringSelection;\n-import java.awt.dnd.DragGestureListener;\n-import java.awt.dnd.DragSource;\n-import java.awt.dnd.DnDConstants;\n-import java.awt.dnd.DragGestureEvent;\n-\n-class SourceFrame extends Frame implements DragGestureListener {\n-\n-    SourceFrame() {\n-        super(\"Source File List Frame\");\n-        initGUI();\n-        new DragSource().createDefaultDragGestureRecognizer(this,\n-                DnDConstants.ACTION_COPY,this);\n-    }\n-\n-    private void initGUI() {\n-        this.addWindowListener(Util.getClosingWindowAdapter());\n-        this.setLocation(300,250);\n-        this.setSize(200,200);\n-        this.setVisible(true);\n-    }\n-\n-    int getNextLocationX() {\n-        return getX()+getWidth();\n-    }\n-\n-    int getNextLocationY() {\n-        return getY();\n-    }\n-\n-    int getDragSourcePointX() {\n-        return (int)getLocationOnScreen().getX()+(getWidth()\/2);\n-    }\n-\n-   int getDragSourcePointY() {\n-        return (int)getLocationOnScreen().getY()+ (getHeight()\/2);\n-    }\n-\n-    public void dragGestureRecognized(DragGestureEvent dge) {\n-        dge.startDrag(null, new StringSelection(\"A TEXT\"));\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/dnd\/DragInterceptorAppletTest\/SourceFrame.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,3 +38,1 @@\n- * @author Alexander Scherbatiy\n- * @run main\/othervm TestAWTKeyStroke\n- * @run main\/othervm\/policy=policy -Djava.security.manager TestAWTKeyStroke\n+ * @run main TestAWTKeyStroke\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/RegisterKeyStroke\/TestAWTKeyStroke.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,2 +0,0 @@\n-grant {\n-};\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/RegisterKeyStroke\/policy","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @summary Test verifies that on-demnad loading of medialib library does\n- *          not break imageing ops based on this library.\n+ * @summary Test verifies that on-demand loading of medialib library does\n+ *          not break imaging ops based on this library.\n@@ -31,1 +31,0 @@\n- * @run     main\/othervm\/policy=mlib.security.policy MlibOpsTest\n","filename":"test\/jdk\/java\/awt\/image\/mlib\/MlibOpsTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-        permission java.lang.RuntimePermission \"accessClassInPackage.sun.awt.image\";\n-};\n","filename":"test\/jdk\/java\/awt\/image\/mlib\/mlib.security.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.Arrays;\n-\n-import javax.print.PrintServiceLookup;\n-\n-\/*\n- * @test\n- * @bug 8241829\n- * @run main\/othervm -Djava.security.manager=allow PrintServicesSecurityManager\n- *\/\n-public final class PrintServicesSecurityManager {\n-\n-    public static void main(String[] args) throws InterruptedException {\n-        System.setSecurityManager(new SecurityManager());\n-        test();\n-        Thread.sleep(3000); \/\/ to be sure the pooling thread started\n-        test();\n-    }\n-\n-    private static void test() {\n-        Object[] services = PrintServiceLookup.lookupPrintServices(null, null);\n-        if (services.length != 0) {\n-            System.err.println(\"services = \" + Arrays.toString(services));\n-            throw new RuntimeException(\"The array of Services must be empty\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/print\/PrintServicesSecurityManager.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 4151121\n- * @run main\/othervm -Djava.security.manager=allow CheckAccess\n- * @summary Confirm that PrinterJob.getPrinterJob is access checked.\n- * @author Graham Hamilton\n- *\/\n-\n-import java.awt.print.*;\n-import java.security.*;\n-\n-public class CheckAccess {\n-\n-    static boolean verbose;\n-\n-    private static void println(String mess) {\n-        if (verbose) {\n-            System.err.println(mess);\n-        }\n-    }\n-\n-    \/**\n-     * SecurityManager that rejects all print requests,\n-     * but allows everything else.\n-     *\/\n-    static class PrintHater extends SecurityManager {\n-\n-        public void checkPermission(Permission p) {\n-           \/\/ We're easy.\n-        }\n-\n-        public void checkPrintJobAccess() {\n-            throw new SecurityException(\"No way!\");\n-        }\n-    }\n-\n-    public static void main(String argv[]) {\n-\n-        if (argv.length > 0 && argv[0].equals(\"-v\")) {\n-            verbose = true;\n-        }\n-\n-        \/\/ Try to install our own security manager.\n-        try {\n-            SecurityManager sm = new PrintHater();\n-            println(\"Installing PrintHater security manager\");\n-            System.setSecurityManager(sm);\n-            println(\"Installed security manager OK\");\n-\n-        } catch (Throwable th) {\n-            System.err.println(\"Failed to install SecurityManager\");\n-            th.printStackTrace();\n-            throw new RuntimeException(\"Failed to install SecurityManager\");\n-        }\n-\n-        try {\n-\n-            println(\"Calling PrinterJob.getPrinterJob()\");\n-            PrinterJob.getPrinterJob();\n-\n-            \/\/ Woops.  We did not get the SecurityException we expected.\n-            println(\"Failed to get SecurityException\");\n-            throw new RuntimeException(\"Failed to get expected SecurityException\");\n-\n-        } catch (SecurityException ex) {\n-            \/\/ Happy, happy.  This is what we want.\n-            println(\"Got expected SecurityException OK.\");\n-            return;\n-        }\n-\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/CheckAccess.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 6197099\n- * @summary Verifies PrinterJob's getUserName() throws a security exception when\n- *          username permission is not given\n- * @run main\/othervm\/java.security.policy=GetUserNameTest.policy GetUserNameTest\n- *\/\n-import java.awt.print.PrinterJob;\n-\n-public class GetUserNameTest {\n-\n-    public static void main(String args[]) {\n-        System.setSecurityManager(new SecurityManager());\n-        PrinterJob pj = PrinterJob.getPrinterJob();\n-        boolean secExcpn = false;\n-        try {\n-            System.out.println(pj.getUserName());\n-        } catch (SecurityException ex) {\n-            secExcpn = true;\n-            System.out.println(\"SecurityException thrown as user.name permission \"\n-                    + \"not given\");\n-        }\n-        if (!secExcpn) {\n-            throw new RuntimeException(\"SecurityException not thrown\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/GetUserNameTest.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-grant {\n-  permission java.lang.RuntimePermission \"setSecurityManager\";\n-  permission java.lang.RuntimePermission \"createSecurityManager\";\n-  permission java.lang.RuntimePermission \"usePolicy\";\n-  permission java.lang.RuntimePermission \"queuePrintJob\";\n-};\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/GetUserNameTest.policy","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -155,1 +155,0 @@\n-        commandBuilder.append(\"-Djava.security.manager=allow \");\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/process\/ProcessCommunicator.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 8008981\n- * @summary Test that selected Toolkit and Window methods\/constructors do\n- *   the appropriate permission check\n- * @run main\/othervm -Djava.security.manager=allow Permissions\n- *\/\n-\n-import java.awt.AWTPermission;\n-import java.awt.Frame;\n-import java.awt.GraphicsConfiguration;\n-import java.awt.Toolkit;\n-import java.awt.Window;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.security.Permission;\n-\n-public class Permissions {\n-\n-    static class MySecurityManager extends SecurityManager {\n-        private List<Permission> permissionsChecked = new ArrayList<>();\n-\n-        static MySecurityManager install() {\n-            MySecurityManager sm = new MySecurityManager();\n-            System.setSecurityManager(sm);\n-            return sm;\n-        }\n-\n-        @Override\n-        public void checkPermission(Permission perm) {\n-            permissionsChecked.add(perm);\n-        }\n-\n-        void prepare(String msg) {\n-            System.out.println(msg);\n-            permissionsChecked.clear();\n-        }\n-\n-        \/**\n-         * Checks the security manager's checkPermission method was invoked\n-         * to check the given permission and target name.\n-         *\/\n-        void assertChecked(Class<? extends Permission> type, String name) {\n-            for (Permission perm: permissionsChecked) {\n-                if (type.isInstance(perm) && perm.getName().equals(name))\n-                    return;\n-            }\n-            throw new RuntimeException(type.getName() + \"(\\\"\" + name + \"\\\") not checked\");\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        MySecurityManager sm = MySecurityManager.install();\n-\n-        Toolkit toolkit = Toolkit.getDefaultToolkit();\n-\n-        sm.prepare(\"Toolkit.getSystemClipboard()\");\n-        toolkit.getSystemClipboard();\n-        sm.assertChecked(AWTPermission.class, \"accessClipboard\");\n-\n-        sm.prepare(\"Toolkit.getSystemEventQueue()\");\n-        toolkit.getSystemEventQueue();\n-        sm.assertChecked(AWTPermission.class, \"accessEventQueue\");\n-\n-        sm.prepare(\"Toolkit.getSystemSelection()\");\n-        toolkit.getSystemSelection();\n-        \/\/sm.assertChecked(AWTPermission.class, \"accessClipboard\");\n-\n-        sm.prepare(\"Window(Frame)\");\n-        new Window((Frame)null);\n-        sm.assertChecked(AWTPermission.class, \"showWindowWithoutWarningBanner\");\n-\n-        sm.prepare(\"Window(Window)\");\n-        new Window((Window)null);\n-        sm.assertChecked(AWTPermission.class, \"showWindowWithoutWarningBanner\");\n-\n-        sm.prepare(\"Window(Window,GraphicsConfiguration)\");\n-        new Window((Window)null, (GraphicsConfiguration)null);\n-        sm.assertChecked(AWTPermission.class, \"showWindowWithoutWarningBanner\");\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/security\/Permissions.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  @test\n-  @key headful\n-  @bug 8041490\n-  @summary tests that the WarningWindow's surface is invalidated on dispose\n-  @author Petr Pchelko\n-  @run main\/othervm\/policy=policy  -Djava.security.manager WarningWindowDisposeCrashTest\n-*\/\n-\n-\n-\n-import java.awt.*;\n-\n-public class WarningWindowDisposeCrashTest {\n-    public static void main(String[] args) throws Exception {\n-        Frame f = new Frame();\n-        f.setVisible(true);\n-        Robot robot;\n-        try{\n-            robot = new Robot();\n-            robot.waitForIdle();\n-        }catch(Exception ex) {\n-            ex.printStackTrace();\n-            throw new RuntimeException(\"Cannot create Robot\");\n-        }\n-        Thread.sleep(1000);\n-        f.dispose();\n-        \/\/ If the bug is present VM could crash after this call\n-        for (int i = 0; i < 1000; i++) Toolkit.getDefaultToolkit().sync();\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/security\/WarningWindowDisposeTest\/WarningWindowDisposeCrashTest.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  @test\n-  @key headful\n-  @bug 8037776 8167288\n-  @summary tests that the WarningWindow is properly disposed\n-  @library ..\/..\/regtesthelpers\/process\n-  @build ProcessResults ProcessCommunicator\n-  @run main WarningWindowDisposeTest\n-*\/\n-\n-import java.awt.*;\n-import java.awt.Toolkit;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.security.Permission;\n-import java.io.File;\n-\n-import test.java.awt.regtesthelpers.process.ProcessCommunicator;\n-import test.java.awt.regtesthelpers.process.ProcessResults;\n-\n-public class WarningWindowDisposeTest {\n-\n-    public static void main(String[] args) {\n-        final AtomicBoolean passed = new AtomicBoolean(false);\n-        new Thread(() -> {\n-            for (int trial = 0; trial < 5; ++trial) {\n-                try {\n-                    Thread.sleep(2000);\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(\"Test FAILED!\", e);\n-                }\n-                if (passed.get()) {\n-                    break;\n-                } else if (trial == 4) {\n-                    throw new RuntimeException(\"Child process never exits\");\n-                }\n-            }\n-        }, \"TimeoutThread\").start();\n-\n-        String classpath = System.getProperty(\"java.class.path\");\n-        String policyPath = System.getProperty(\"test.src\")+File.separatorChar+\"policy\";\n-        System.out.println(\"policyPath in main: \"+policyPath);\n-        ProcessResults pres = ProcessCommunicator.executeChildProcess(TestApplication.class, classpath+\" -Djava.security.manager -Djava.security.policy=\"+policyPath, new String[0]);\n-        passed.set(true);\n-        if (pres.getStdErr() != null && pres.getStdErr().length() > 0) {\n-            System.err.println(\"========= Child VM System.err ========\");\n-            System.err.print(pres.getStdErr());\n-            System.err.println(\"======================================\");\n-        }\n-\n-        if (pres.getStdOut() != null && pres.getStdOut().length() > 0) {\n-            System.err.println(\"========= Child VM System.out ========\");\n-            System.err.print(pres.getStdOut());\n-            System.err.println(\"======================================\");\n-        }\n-    }\n-\n-    public static class TestApplication {\n-        public static void main(String[] args) throws Exception {\n-            Robot robot;\n-            try{\n-                robot = new Robot();\n-            }catch(Exception ex) {\n-                ex.printStackTrace();\n-                throw new RuntimeException(\"Cannot create Robot\");\n-            }\n-            Frame f = new Frame(\"Test frame\");\n-            f.setVisible(true);\n-            robot.waitForIdle();\n-            Thread.sleep(500);\n-            f.setVisible(false);\n-            f.dispose();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/security\/WarningWindowDisposeTest\/WarningWindowDisposeTest.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-        permission java.awt.AWTPermission \"createRobot\";\n-};\n","filename":"test\/jdk\/java\/awt\/security\/WarningWindowDisposeTest\/policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4080522\n- * @summary Tests security checks for calls on:\n- *          Beans.setDesignTime\n- *          Beans.setGuiAvailable\n- *          Introspector.setBeanInfoSearchPath\n- *          PropertyEditorManager.setEditorSearchPath\n- * @run main\/othervm -Djava.security.manager=allow Test4080522\n- * @author Graham Hamilton\n- *\/\n-\n-import java.beans.Introspector;\n-import java.beans.Beans;\n-import java.beans.PropertyEditorManager;\n-\n-public class Test4080522 {\n-    public static void main(String[] args) {\n-        OurSecurityManager sm = new OurSecurityManager();\n-        String[] path = {\"a\", \"b\"};\n-        \/\/ with no security manager we shuld be able to do these calls OK\n-        test(path);\n-        \/\/ add our own security manager\n-        System.setSecurityManager(sm);\n-        \/\/ now each of the calls should raise an exception\n-        try {\n-            Beans.setDesignTime(true);\n-            throw new Error(\"Beans.setDesignTime should throw SecurityException\");\n-        } catch (SecurityException exception) {\n-            \/\/ expected exception\n-        }\n-        try {\n-            Beans.setGuiAvailable(true);\n-            throw new Error(\"Beans.setGuiAvailable should throw SecurityException\");\n-        } catch (SecurityException exception) {\n-            \/\/ expected exception\n-        }\n-        try {\n-            Introspector.setBeanInfoSearchPath(path);\n-            throw new Error(\"Introspector.setBeanInfoSearchPath should throw SecurityException\");\n-        } catch (SecurityException exception) {\n-            \/\/ expected exception\n-        }\n-        try {\n-            PropertyEditorManager.setEditorSearchPath(path);\n-            throw new Error(\"PropertyEditorManager.setEditorSearchPath should throw SecurityException\");\n-        } catch (SecurityException exception) {\n-            \/\/ expected exception\n-        }\n-        \/\/ now set the security manager to be friendly\n-        sm.friendly = true;\n-        \/\/ now the calls should be OK again.\n-        test(path);\n-    }\n-\n-    private static void test(String[] path) {\n-        try {\n-            Beans.setDesignTime(true);\n-            Beans.setGuiAvailable(true);\n-            Introspector.setBeanInfoSearchPath(path);\n-            PropertyEditorManager.setEditorSearchPath(path);\n-        } catch (SecurityException exception) {\n-            throw new Error(\"unexpected security exception\", exception);\n-        }\n-    }\n-\n-    private static class OurSecurityManager extends SecurityManager {\n-        boolean friendly;\n-\n-        public void checkPropertiesAccess() {\n-            if (!friendly) {\n-                throw new SecurityException(\"No way\");\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/Beans\/Test4080522.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6277246\n- * @summary Tests problem with java.beans use of reflection\n- * @run main\/othervm -Djava.security.manager=allow Test6277246\n- * @author Jeff Nisewanger\n- *\/\n-\n-import java.lang.reflect.Method;\n-import java.beans.EventHandler;\n-\n-public class Test6277246 {\n-    public static void main(String[] args) {\n-        try {\n-            System.setSecurityManager(new SecurityManager());\n-            Class container = Class.forName(\"java.lang.Class\");\n-            Class parameter = Class.forName(\"java.lang.String\");\n-            Method method = container.getMethod(\"forName\", parameter);\n-            Object[] arglist = new Object[] {\"sun.security.x509.X509CertInfo\"};\n-            EventHandler eh = new EventHandler(Test6277246.class, \"forName\", \"\", \"forName\");\n-            Object object = eh.invoke(null, method, arglist);\n-            throw new Error((object != null) ? \"test failure\" : \"test error\");\n-        }\n-        catch (ClassNotFoundException exception) {\n-            throw new Error(\"unexpected exception\", exception);\n-        }\n-        catch (NoSuchMethodException exception) {\n-            throw new Error(\"unexpected exception\", exception);\n-        }\n-        catch (SecurityException exception) {\n-            \/\/ expected security exception\n-        }\n-        catch (RuntimeException exception) {\n-            throw new Error(\"unexpected exception\", exception);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/EventHandler\/Test6277246.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6277266\n- * @summary Tests access control issue in EventHandler\n- * @run main\/othervm -Djava.security.manager=allow Test6277266\n- * @author Jeff Nisewanger\n- *\/\n-\n-import java.beans.EventHandler;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Proxy;\n-import javax.swing.SwingUtilities;\n-\n-public class Test6277266 {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            SwingUtilities.invokeAndWait(\n-                    (Runnable) Proxy.newProxyInstance(\n-                            null,\n-                            new Class[] {Runnable.class},\n-                            new EventHandler(\n-                                    Test6277266.class,\n-                                    \"getProtectionDomain\",\n-                                    null,\n-                                    null\n-                            )\n-                    )\n-            );\n-            throw new Error(\"SecurityException expected\");\n-        } catch (SecurityException exception) {\n-            return; \/\/ expected security exception in JDK 7\n-        } catch (InvocationTargetException exception) {\n-            if (exception.getCause() instanceof SecurityException){\n-                return; \/\/ expected security exception in JDK 8\n-            }\n-            throw new Error(\"unexpected exception\", exception);\n-        } catch (InterruptedException exception) {\n-            throw new Error(\"unexpected exception\", exception);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/EventHandler\/Test6277266.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test7084904\n+ * @run main Test7084904\n@@ -35,1 +35,0 @@\n-        System.setSecurityManager(new SecurityManager());\n","filename":"test\/jdk\/java\/beans\/Introspector\/7084904\/Test7084904.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test4683761\n- * @author Sergey Malenkov\n+ * @run main Test4683761\n@@ -38,1 +37,0 @@\n-        System.setSecurityManager(new SecurityManager());\n","filename":"test\/jdk\/java\/beans\/Introspector\/Test4683761.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6277246\n- * @summary Tests problem with java.beans use of reflection\n- * @modules java.base\/sun.security.x509\n- *          java.desktop\n- * @run main\/othervm -Djava.security.manager=allow Test6277246\n- * @author Jeff Nisewanger\n- *\/\n-\n-import java.beans.BeanInfo;\n-import java.beans.IntrospectionException;\n-import java.beans.Introspector;\n-import java.beans.MethodDescriptor;\n-import java.lang.reflect.Method;\n-\n-public class Test6277246 {\n-    public static void main(String[] args) throws IntrospectionException {\n-        Class type = sun.security.x509.X509CertInfo.class;\n-        System.setSecurityManager(new SecurityManager());\n-        BeanInfo info = Introspector.getBeanInfo(type);\n-        for (MethodDescriptor md : info.getMethodDescriptors()) {\n-            Method method = md.getMethod();\n-            System.out.println(method);\n-\n-            String name = method.getDeclaringClass().getName();\n-            if (name.startsWith(\"sun.\")) {\n-                throw new Error(\"found inaccessible method\");\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/Introspector\/Test6277246.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510 6498158\n- * @summary Tests PropertyEditor for value of type Boolean with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestBooleanClass\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestBooleanClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Boolean.class);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestBooleanClass.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type boolean with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestBooleanType\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestBooleanType {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Boolean.TYPE);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestBooleanType.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type Byte with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestByteClass\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestByteClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Byte.class);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestByteClass.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type byte with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestByteType\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestByteType {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Byte.TYPE);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestByteType.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type Color with security manager\n- * @author Sergey Malenkov\n- * @key headful\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- * @run main\/othervm -Djava.security.manager=allow TestColorClass\n- *\/\n-\n-import java.awt.Color;\n-\n-public class TestColorClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Color.class);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestColorClass.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type Double with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestDoubleClass\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestDoubleClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Double.class);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestDoubleClass.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type double with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestDoubleType\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestDoubleType {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Double.TYPE);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestDoubleType.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6219769 6258510\n- * @summary Tests PropertyEditor for value of type Enum with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestEnumClass\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestEnumClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(HexLetter.class);\n-    }\n-\n-    public enum HexLetter {A,B,C,D,E,F}\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestEnumClass.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6736248\n- * @summary Tests PropertyEditor for value of subtype Enum with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestEnumSubclass\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestEnumSubclass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Operation.class);\n-    }\n-\n-    public enum Operation {\n-        PLUS {\n-            public int run(int i, int j) {\n-                return i + j;\n-            }\n-        },\n-        MINUS {\n-            public int run(int i, int j) {\n-                return i - j;\n-            }\n-        };\n-        public abstract int run(int i, int j);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestEnumSubclass.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type Float with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestFloatClass\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestFloatClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Float.class);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestFloatClass.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type float with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestFloatType\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestFloatType {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Float.TYPE);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestFloatType.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510 6538853\n- * @summary Tests PropertyEditor for value of type Font with security manager\n- * @author Sergey Malenkov\n- * @key headful\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- * @run main\/othervm -Djava.security.manager=allow TestFontClass\n- *\/\n-\n-import java.awt.Font;\n-\n-public class TestFontClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Font.class);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestFontClass.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510 6498158\n- * @summary Tests PropertyEditor for value of type Integer with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestIntegerClass\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestIntegerClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Integer.class);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestIntegerClass.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type int with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestIntegerType\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestIntegerType {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Integer.TYPE);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestIntegerType.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type Long with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestLongClass\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestLongClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Long.class);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestLongClass.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type long with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestLongType\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestLongType {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Long.TYPE);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestLongType.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type Short with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestShortClass\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestShortClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Short.class);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestShortClass.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510\n- * @summary Tests PropertyEditor for value of type short with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestShortType\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestShortType {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(Short.TYPE);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestShortType.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4506596 6258510 6457659\n- * @summary Tests PropertyEditor for value of type String with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestStringClass\n- * @author Sergey Malenkov\n- * @modules java.compiler\n- *          java.desktop\n- *          jdk.compiler\n- *\/\n-\n-public class TestStringClass {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new TestEditor(String.class);\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/PropertyEditor\/TestStringClass.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run main\/othervm\/policy=java.policy -Djava.security.manager LoadingStandardIcons\n+ * @run main LoadingStandardIcons\n","filename":"test\/jdk\/java\/beans\/SimpleBeanInfo\/LoadingStandardIcons\/LoadingStandardIcons.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-;\n","filename":"test\/jdk\/java\/beans\/SimpleBeanInfo\/LoadingStandardIcons\/java.policy","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm\/policy=java.policy -Djava.security.manager ClassForName\n","filename":"test\/jdk\/java\/beans\/Statement\/ClassForName\/ClassForName.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-;\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/beans\/Statement\/ClassForName\/java.policy","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6224433\n- * @summary Tests class loader lookup problem in Statement\n- * @run main\/othervm -Djava.security.manager=allow Test6224433\n- * @author Jeff Nisewanger\n- *\/\n-\n-import java.beans.Expression;\n-\n-public class Test6224433 {\n-    public static void main(String[] args) {\n-        try {\n-            System.setSecurityManager(new SecurityManager());\n-            Class target = Test6224433.class;\n-            String method = \"forName\";\n-            String[] params = {\"sun.security.x509.X509CertInfo\"};\n-            if (null != new Expression(target, method, params).getValue())\n-                throw new Error(\"failure: bug exists\");\n-\n-            throw new Error(\"unexpected condition\");\n-        }\n-        catch (ClassNotFoundException exception) {\n-            throw new Error(\"expected class missing\", exception);\n-        }\n-        catch (SecurityException exception) {\n-            \/\/ expected\n-        }\n-        catch (Exception exception) {\n-            throw new Error(\"unexpected condition\", exception);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/Statement\/Test6224433.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,3 +45,0 @@\n-     *\n-     * @param security  use {@code true} to start\n-     *                  second pass in secure context\n@@ -49,1 +46,1 @@\n-    final void test(boolean security) {\n+    final void test() {\n@@ -61,4 +58,0 @@\n-        if (security) {\n-            System.setSecurityManager(new SecurityManager());\n-            test(false);\n-        }\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/AbstractTest.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestArray\n+ * @run main\/othervm TestArray\n@@ -49,1 +49,1 @@\n-        new TestArray().test(true);\n+        new TestArray().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestArray.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestBoolean\n+ * @run main\/othervm TestBoolean\n@@ -41,1 +41,1 @@\n-        new TestBoolean().test(true);\n+        new TestBoolean().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestBoolean.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestByte\n+ * @run main\/othervm TestByte\n@@ -42,1 +42,1 @@\n-        new TestByte().test(true);\n+        new TestByte().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestByte.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestChar\n+ * @run main\/othervm TestChar\n@@ -41,1 +41,1 @@\n-        new TestChar().test(true);\n+        new TestChar().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestChar.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestClass\n+ * @run main\/othervm TestClass\n@@ -46,1 +46,1 @@\n-        new TestClass().test(true);\n+        new TestClass().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestClass.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestDouble\n+ * @run main\/othervm TestDouble\n@@ -43,1 +43,1 @@\n-        new TestDouble().test(true);\n+        new TestDouble().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestDouble.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestFalse\n+ * @run main\/othervm TestFalse\n@@ -40,1 +40,1 @@\n-        new TestFalse().test(true);\n+        new TestFalse().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestFalse.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestField\n+ * @run main\/othervm TestField\n@@ -53,1 +53,1 @@\n-        new TestField().test(true);\n+        new TestField().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestField.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestFloat\n+ * @run main\/othervm TestFloat\n@@ -43,1 +43,1 @@\n-        new TestFloat().test(true);\n+        new TestFloat().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestFloat.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestInt\n+ * @run main\/othervm TestInt\n@@ -46,1 +46,1 @@\n-        new TestInt().test(true);\n+        new TestInt().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestInt.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestJava\n+ * @run main\/othervm TestJava\n@@ -45,1 +45,1 @@\n-        new TestJava().test(true);\n+        new TestJava().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestJava.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestLong\n+ * @run main\/othervm TestLong\n@@ -48,1 +48,1 @@\n-        new TestLong().test(true);\n+        new TestLong().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestLong.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestMethod\n+ * @run main\/othervm TestMethod\n@@ -69,1 +69,1 @@\n-        new TestMethod().test(true);\n+        new TestMethod().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestMethod.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestNew\n+ * @run main\/othervm TestNew\n@@ -53,1 +53,1 @@\n-        new TestNew().test(true);\n+        new TestNew().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestNew.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestNull\n+ * @run main\/othervm TestNull\n@@ -40,1 +40,1 @@\n-        new TestNull().test(true);\n+        new TestNull().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestNull.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestObject\n+ * @run main\/othervm TestObject\n@@ -61,1 +61,1 @@\n-        new TestObject().test(true);\n+        new TestObject().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestObject.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestProperty\n+ * @run main\/othervm TestProperty\n@@ -51,1 +51,1 @@\n-        new TestProperty().test(true);\n+        new TestProperty().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestProperty.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestShort\n+ * @run main\/othervm TestShort\n@@ -44,1 +44,1 @@\n-        new TestShort().test(true);\n+        new TestShort().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestShort.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestString\n+ * @run main\/othervm TestString\n@@ -45,1 +45,1 @@\n-        new TestString().test(true);\n+        new TestString().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestString.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestTrue\n+ * @run main\/othervm TestTrue\n@@ -40,1 +40,1 @@\n-        new TestTrue().test(true);\n+        new TestTrue().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestTrue.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestVar\n+ * @run main\/othervm TestVar\n@@ -44,1 +44,1 @@\n-        new TestVar().test(true);\n+        new TestVar().test();\n","filename":"test\/jdk\/java\/beans\/XMLDecoder\/spec\/TestVar.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4741757\n- * @summary Tests encoding with security manager\n- * @run main\/othervm -Djava.security.manager=allow TestSecurityManager\n- * @author Sergey Malenkov\n- *\/\n-\n-public final class TestSecurityManager extends AbstractTest {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        test(new TestSecurityManager(5));\n-    }\n-\n-    private int value;\n-\n-    public TestSecurityManager(int value) {\n-        this.value = value;\n-    }\n-\n-    public int getValue() {\n-        return this.value;\n-    }\n-}\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/4741757\/TestSecurityManager.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestBox\n- * @author Sergey Malenkov\n+ * @run main TestBox\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestBox.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestCheckedCollection\n- * @author Sergey Malenkov\n+ * @run main TestCheckedCollection\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestCheckedCollection.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestCheckedList\n- * @author Sergey Malenkov\n+ * @run main TestCheckedList\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestCheckedList.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestCheckedMap\n- * @author Sergey Malenkov\n+ * @run main TestCheckedMap\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestCheckedMap.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestCheckedRandomAccessList\n- * @author Sergey Malenkov\n+ * @run main TestCheckedRandomAccessList\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestCheckedRandomAccessList.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestCheckedSet\n- * @author Sergey Malenkov\n+ * @run main TestCheckedSet\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestCheckedSet.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestCheckedSortedMap\n- * @author Sergey Malenkov\n+ * @run main TestCheckedSortedMap\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestCheckedSortedMap.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestCheckedSortedSet\n- * @author Sergey Malenkov\n+ * @run main TestCheckedSortedSet\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestCheckedSortedSet.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestEncoder.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestEnumMap\n- * @author Sergey Malenkov\n+ * @run main TestEnumMap\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestEnumMap.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestEnumSet\n- * @author Sergey Malenkov\n+ * @run main TestEnumSet\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/6777487\/TestEnumSet.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,3 +94,0 @@\n-     *\n-     * @param security  use {@code true} to start\n-     *                  second pass in secure context\n@@ -98,1 +95,1 @@\n-    final void test(boolean security) {\n+    final void test() {\n@@ -117,4 +114,0 @@\n-        if (security) {\n-            System.setSecurityManager(new SecurityManager());\n-            test(false);\n-        }\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/AbstractTest.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.security.manager=allow ReferenceToNonStaticField\n+ * @run main\/othervm ReferenceToNonStaticField\n@@ -85,1 +85,1 @@\n-        new ReferenceToNonStaticField().test(true);\n+        new ReferenceToNonStaticField().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/ReferenceToNonStaticField.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test4631471\n+ * @run main\/othervm Test4631471\n@@ -41,2 +41,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-        main();\n@@ -51,1 +49,1 @@\n-        }.test(false);\n+        }.test();\n@@ -58,1 +56,1 @@\n-        }.test(false);\n+        }.test();\n@@ -67,1 +65,1 @@\n-        }.test(false);\n+        }.test();\n@@ -74,1 +72,1 @@\n-        }.test(false);\n+        }.test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test4631471.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test4652928\n+ * @run main\/othervm Test4652928\n@@ -43,1 +43,1 @@\n-        new Test4652928().test(true);\n+        new Test4652928().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test4652928.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test4679556\n+ * @run main\/othervm Test4679556\n@@ -92,1 +92,1 @@\n-        new Test4679556().test(true);\n+        new Test4679556().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test4679556.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test4903007\n+ * @run main\/othervm Test4903007\n@@ -40,1 +40,1 @@\n-        new Test4903007().test(true);\n+        new Test4903007().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test4903007.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test4935607\n+ * @run main\/othervm Test4935607\n@@ -36,1 +36,1 @@\n-        new Test4935607().test(true);\n+        new Test4935607().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test4935607.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test4936682\n+ * @run main\/othervm Test4936682\n@@ -39,1 +39,1 @@\n-        new Test4936682().test(true);\n+        new Test4936682().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test4936682.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test4993777\n+ * @run main\/othervm Test4993777\n@@ -34,1 +34,1 @@\n-        new Test4993777().test(true);\n+        new Test4993777().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test4993777.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test4994637\n+ * @run main\/othervm Test4994637\n@@ -36,1 +36,1 @@\n-        new Test4994637().test(true);\n+        new Test4994637().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test4994637.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test5023550\n+ * @run main\/othervm Test5023550\n@@ -40,1 +40,1 @@\n-        new Test5023550().test(true);\n+        new Test5023550().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test5023550.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test5023552\n+ * @run main\/othervm Test5023552\n@@ -39,1 +39,1 @@\n-        new Test5023552().test(true);\n+        new Test5023552().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test5023552.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test5023557\n+ * @run main\/othervm Test5023557\n@@ -39,1 +39,1 @@\n-        new Test5023557().test(true);\n+        new Test5023557().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test5023557.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test5023559\n+ * @run main\/othervm Test5023559\n@@ -39,1 +39,1 @@\n-        new Test5023559().test(true);\n+        new Test5023559().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test5023559.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6176120\n+ * @run main\/othervm Test6176120\n@@ -36,1 +36,1 @@\n-        new Test6176120().test(true);\n+        new Test6176120().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6176120.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6187118\n+ * @run main\/othervm Test6187118\n@@ -44,1 +44,1 @@\n-        new Test6187118().test(true);\n+        new Test6187118().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6187118.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6256805\n+ * @run main\/othervm Test6256805\n@@ -34,1 +34,1 @@\n-        new Test6256805().test(true);\n+        new Test6256805().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6256805.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6437265\n+ * @run main\/othervm Test6437265\n@@ -50,1 +50,1 @@\n-        new Test6437265().test(true);\n+        new Test6437265().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6437265.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6501431\n+ * @run main\/othervm Test6501431\n@@ -37,1 +37,1 @@\n-        new Test6501431().test(true);\n+        new Test6501431().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6501431.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6505888\n+ * @run main\/othervm Test6505888\n@@ -39,1 +39,1 @@\n-        new Test6505888().test(true);\n+        new Test6505888().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6505888.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6531597\n+ * @run main\/othervm Test6531597\n@@ -34,1 +34,1 @@\n-        new Test6531597().test(true);\n+        new Test6531597().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6531597.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6570354\n+ * @run main\/othervm Test6570354\n@@ -37,1 +37,1 @@\n-        new Test6570354().test(true);\n+        new Test6570354().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6570354.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6852574\n+ * @run main\/othervm Test6852574\n@@ -34,1 +34,1 @@\n-        new Test6852574().test(true);\n+        new Test6852574().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6852574.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6921644\n+ * @run main\/othervm Test6921644\n@@ -38,1 +38,1 @@\n-        new Test6921644().test(true);\n+        new Test6921644().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6921644.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test6989223\n+ * @run main\/othervm Test6989223\n@@ -36,1 +36,1 @@\n-        new Test6989223().test(true);\n+        new Test6989223().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test6989223.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test7080156\n+ * @run main\/othervm Test7080156\n@@ -34,1 +34,1 @@\n-        new Test7080156().test(true);\n+        new Test7080156().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test7080156.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test7092744\n+ * @run main\/othervm Test7092744\n@@ -35,1 +35,1 @@\n-        new Test7092744().test(true);\n+        new Test7092744().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test7092744.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test7169395\n+ * @run main\/othervm Test7169395\n@@ -41,1 +41,1 @@\n-        new Test7169395().test(true);\n+        new Test7169395().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test7169395.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test8013416\n+ * @run main\/othervm Test8013416\n@@ -43,1 +43,1 @@\n-        new Test8013416().test(true);\n+        new Test8013416().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test8013416.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test8013557\n+ * @run main\/othervm Test8013557\n@@ -34,1 +34,1 @@\n-        new Test8013557().test(true);\n+        new Test8013557().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test8013557.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test8016545\n+ * @run main\/othervm Test8016545\n@@ -34,1 +34,1 @@\n-        new Test8016545().test(true);\n+        new Test8016545().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test8016545.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Test8027066\n+ * @run main\/othervm Test8027066\n@@ -33,1 +33,1 @@\n-        new Test8027066().test(true);\n+        new Test8027066().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/Test8027066.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_AWTKeyStroke\n+ * @run main\/othervm java_awt_AWTKeyStroke\n@@ -38,1 +38,1 @@\n-        new java_awt_AWTKeyStroke().test(true);\n+        new java_awt_AWTKeyStroke().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_AWTKeyStroke.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_BasicStroke\n+ * @run main\/othervm java_awt_BasicStroke\n@@ -36,1 +36,1 @@\n-        new java_awt_BasicStroke().test(true);\n+        new java_awt_BasicStroke().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_BasicStroke.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_BorderLayout\n+ * @run main\/othervm java_awt_BorderLayout\n@@ -49,1 +49,1 @@\n-        new java_awt_BorderLayout().test(true);\n+        new java_awt_BorderLayout().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_BorderLayout.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_CardLayout\n+ * @run main\/othervm java_awt_CardLayout\n@@ -44,1 +44,1 @@\n-        new java_awt_CardLayout().test(true);\n+        new java_awt_CardLayout().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_CardLayout.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_Color\n+ * @run main\/othervm java_awt_Color\n@@ -36,1 +36,1 @@\n-        new java_awt_Color().test(true);\n+        new java_awt_Color().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_Color.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_Component\n+ * @run main\/othervm java_awt_Component\n@@ -38,1 +38,1 @@\n-        new java_awt_Component().test(true);\n+        new java_awt_Component().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_Component.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_Cursor\n+ * @run main\/othervm java_awt_Cursor\n@@ -36,1 +36,1 @@\n-        new java_awt_Cursor().test(true);\n+        new java_awt_Cursor().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_Cursor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_Dimension\n+ * @run main\/othervm java_awt_Dimension\n@@ -36,1 +36,1 @@\n-        new java_awt_Dimension().test(true);\n+        new java_awt_Dimension().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_Dimension.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_Font\n+ * @run main\/othervm java_awt_Font\n@@ -39,1 +39,1 @@\n-        new java_awt_Font().test(true);\n+        new java_awt_Font().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_Font.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_GradientPaint\n+ * @run main\/othervm java_awt_GradientPaint\n@@ -37,1 +37,1 @@\n-        new java_awt_GradientPaint().test(true);\n+        new java_awt_GradientPaint().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_GradientPaint.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_GridBagConstraints\n+ * @run main\/othervm java_awt_GridBagConstraints\n@@ -36,1 +36,1 @@\n-        new java_awt_GridBagConstraints().test(true);\n+        new java_awt_GridBagConstraints().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_GridBagConstraints.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_GridBagLayout\n+ * @run main\/othervm java_awt_GridBagLayout\n@@ -33,1 +33,0 @@\n-import java.awt.Component;\n@@ -38,1 +37,0 @@\n-import java.util.Map;\n@@ -45,1 +43,1 @@\n-        new java_awt_GridBagLayout().test(true);\n+        new java_awt_GridBagLayout().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_GridBagLayout.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_Insets\n+ * @run main\/othervm java_awt_Insets\n@@ -36,1 +36,1 @@\n-        new java_awt_Insets().test(true);\n+        new java_awt_Insets().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_Insets.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_LinearGradientPaint\n+ * @run main\/othervm java_awt_LinearGradientPaint\n@@ -34,5 +34,0 @@\n-import java.awt.geom.AffineTransform;\n-import java.awt.geom.Point2D;\n-\n-import static java.awt.MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;\n-import static java.awt.MultipleGradientPaint.CycleMethod.REFLECT;\n@@ -42,1 +37,1 @@\n-        new java_awt_LinearGradientPaint().test(true);\n+        new java_awt_LinearGradientPaint().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_LinearGradientPaint.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_MenuShortcut\n+ * @run main\/othervm java_awt_MenuShortcut\n@@ -37,1 +37,1 @@\n-        new java_awt_MenuShortcut().test(true);\n+        new java_awt_MenuShortcut().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_MenuShortcut.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_Point\n+ * @run main\/othervm java_awt_Point\n@@ -36,1 +36,1 @@\n-        new java_awt_Point().test(true);\n+        new java_awt_Point().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_Point.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_RadialGradientPaint\n+ * @run main\/othervm java_awt_RadialGradientPaint\n@@ -34,5 +34,0 @@\n-import java.awt.geom.AffineTransform;\n-import java.awt.geom.Point2D;\n-\n-import static java.awt.MultipleGradientPaint.ColorSpaceType.LINEAR_RGB;\n-import static java.awt.MultipleGradientPaint.CycleMethod.REFLECT;\n@@ -42,1 +37,1 @@\n-        new java_awt_RadialGradientPaint().test(true);\n+        new java_awt_RadialGradientPaint().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_RadialGradientPaint.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_Rectangle\n+ * @run main\/othervm java_awt_Rectangle\n@@ -36,1 +36,1 @@\n-        new java_awt_Rectangle().test(true);\n+        new java_awt_Rectangle().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_Rectangle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_ScrollPane\n+ * @run main\/othervm java_awt_ScrollPane\n@@ -37,1 +37,1 @@\n-        new java_awt_ScrollPane().test(true);\n+        new java_awt_ScrollPane().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_ScrollPane.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_awt_geom_AffineTransform\n+ * @run main\/othervm java_awt_geom_AffineTransform\n@@ -36,1 +36,1 @@\n-        new java_awt_geom_AffineTransform().test(true);\n+        new java_awt_geom_AffineTransform().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_awt_geom_AffineTransform.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_beans_EventHandler\n+ * @run main\/othervm java_beans_EventHandler\n@@ -36,1 +36,1 @@\n-        new java_beans_EventHandler().test(true);\n+        new java_beans_EventHandler().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_beans_EventHandler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_beans_Expression\n+ * @run main\/othervm java_beans_Expression\n@@ -36,1 +36,1 @@\n-        new java_beans_Expression().test(true);\n+        new java_beans_Expression().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_beans_Expression.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_beans_Statement\n+ * @run main\/othervm java_beans_Statement\n@@ -36,1 +36,1 @@\n-        new java_beans_Statement().test(true);\n+        new java_beans_Statement().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_beans_Statement.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_lang_Character\n+ * @run main\/othervm java_lang_Character\n@@ -34,1 +34,1 @@\n-        new java_lang_Character().test(true);\n+        new java_lang_Character().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_lang_Character.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_lang_Class\n+ * @run main\/othervm java_lang_Class\n@@ -34,1 +34,1 @@\n-        new java_lang_Class().test(true);\n+        new java_lang_Class().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_lang_Class.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_lang_Enum\n+ * @run main\/othervm java_lang_Enum\n@@ -34,1 +34,1 @@\n-        new java_lang_Enum().test(true);\n+        new java_lang_Enum().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_lang_Enum.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_lang_String\n+ * @run main\/othervm java_lang_String\n@@ -34,1 +34,1 @@\n-        new java_lang_String().test(true);\n+        new java_lang_String().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_lang_String.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_lang_reflect_Field\n+ * @run main\/othervm java_lang_reflect_Field\n@@ -39,1 +39,1 @@\n-        new java_lang_reflect_Field().test(true);\n+        new java_lang_reflect_Field().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_lang_reflect_Field.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_lang_reflect_Method\n+ * @run main\/othervm java_lang_reflect_Method\n@@ -36,1 +36,1 @@\n-        new java_lang_reflect_Method().test(true);\n+        new java_lang_reflect_Method().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_lang_reflect_Method.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_net_URI\n+ * @run main\/othervm java_net_URI\n@@ -37,1 +37,1 @@\n-        new java_net_URI().test(true);\n+        new java_net_URI().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_net_URI.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_sql_Date\n+ * @run main\/othervm java_sql_Date\n@@ -38,1 +38,1 @@\n-        new java_sql_Date().test(true);\n+        new java_sql_Date().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_sql_Date.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_sql_Time\n+ * @run main\/othervm java_sql_Time\n@@ -38,1 +38,1 @@\n-        new java_sql_Time().test(true);\n+        new java_sql_Time().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_sql_Time.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_sql_Timestamp\n+ * @run main\/othervm java_sql_Timestamp\n@@ -38,1 +38,1 @@\n-        new java_sql_Timestamp().test(true);\n+        new java_sql_Timestamp().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_sql_Timestamp.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_ArrayList\n+ * @run main\/othervm java_util_ArrayList\n@@ -37,1 +37,1 @@\n-        new java_util_ArrayList().test(true);\n+        new java_util_ArrayList().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_ArrayList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_EmptyList\n+ * @run main\/othervm java_util_Collections_EmptyList\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_EmptyList().test(true);\n+        new java_util_Collections_EmptyList().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_EmptyList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_EmptyMap\n+ * @run main\/othervm java_util_Collections_EmptyMap\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_EmptyMap().test(true);\n+        new java_util_Collections_EmptyMap().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_EmptyMap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_EmptySet\n+ * @run main\/othervm java_util_Collections_EmptySet\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_EmptySet().test(true);\n+        new java_util_Collections_EmptySet().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_EmptySet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_SingletonList\n+ * @run main\/othervm java_util_Collections_SingletonList\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_SingletonList().test(true);\n+        new java_util_Collections_SingletonList().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_SingletonList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_SingletonMap\n+ * @run main\/othervm java_util_Collections_SingletonMap\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_SingletonMap().test(true);\n+        new java_util_Collections_SingletonMap().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_SingletonMap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_SingletonSet\n+ * @run main\/othervm java_util_Collections_SingletonSet\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_SingletonSet().test(true);\n+        new java_util_Collections_SingletonSet().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_SingletonSet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_SynchronizedCollection\n+ * @run main\/othervm java_util_Collections_SynchronizedCollection\n@@ -38,1 +38,1 @@\n-        new java_util_Collections_SynchronizedCollection().test(true);\n+        new java_util_Collections_SynchronizedCollection().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_SynchronizedCollection.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_SynchronizedList\n+ * @run main\/othervm java_util_Collections_SynchronizedList\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_SynchronizedList().test(true);\n+        new java_util_Collections_SynchronizedList().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_SynchronizedList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_SynchronizedMap\n+ * @run main\/othervm java_util_Collections_SynchronizedMap\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_SynchronizedMap().test(true);\n+        new java_util_Collections_SynchronizedMap().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_SynchronizedMap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_SynchronizedRandomAccessList\n+ * @run main\/othervm java_util_Collections_SynchronizedRandomAccessList\n@@ -38,1 +38,1 @@\n-        new java_util_Collections_SynchronizedRandomAccessList().test(true);\n+        new java_util_Collections_SynchronizedRandomAccessList().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_SynchronizedRandomAccessList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_SynchronizedSet\n+ * @run main\/othervm java_util_Collections_SynchronizedSet\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_SynchronizedSet().test(true);\n+        new java_util_Collections_SynchronizedSet().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_SynchronizedSet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_SynchronizedSortedMap\n+ * @run main\/othervm java_util_Collections_SynchronizedSortedMap\n@@ -38,1 +38,1 @@\n-        new java_util_Collections_SynchronizedSortedMap().test(true);\n+        new java_util_Collections_SynchronizedSortedMap().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_SynchronizedSortedMap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_SynchronizedSortedSet\n+ * @run main\/othervm java_util_Collections_SynchronizedSortedSet\n@@ -38,1 +38,1 @@\n-        new java_util_Collections_SynchronizedSortedSet().test(true);\n+        new java_util_Collections_SynchronizedSortedSet().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_SynchronizedSortedSet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_UnmodifiableCollection\n+ * @run main\/othervm java_util_Collections_UnmodifiableCollection\n@@ -38,1 +38,1 @@\n-        new java_util_Collections_UnmodifiableCollection().test(true);\n+        new java_util_Collections_UnmodifiableCollection().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_UnmodifiableCollection.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_UnmodifiableList\n+ * @run main\/othervm java_util_Collections_UnmodifiableList\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_UnmodifiableList().test(true);\n+        new java_util_Collections_UnmodifiableList().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_UnmodifiableList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_UnmodifiableMap\n+ * @run main\/othervm java_util_Collections_UnmodifiableMap\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_UnmodifiableMap().test(true);\n+        new java_util_Collections_UnmodifiableMap().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_UnmodifiableMap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_UnmodifiableRandomAccessList\n+ * @run main\/othervm java_util_Collections_UnmodifiableRandomAccessList\n@@ -38,1 +38,1 @@\n-        new java_util_Collections_UnmodifiableRandomAccessList().test(true);\n+        new java_util_Collections_UnmodifiableRandomAccessList().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_UnmodifiableRandomAccessList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_UnmodifiableSet\n+ * @run main\/othervm java_util_Collections_UnmodifiableSet\n@@ -37,1 +37,1 @@\n-        new java_util_Collections_UnmodifiableSet().test(true);\n+        new java_util_Collections_UnmodifiableSet().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_UnmodifiableSet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_UnmodifiableSortedMap\n+ * @run main\/othervm java_util_Collections_UnmodifiableSortedMap\n@@ -38,1 +38,1 @@\n-        new java_util_Collections_UnmodifiableSortedMap().test(true);\n+        new java_util_Collections_UnmodifiableSortedMap().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_UnmodifiableSortedMap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Collections_UnmodifiableSortedSet\n+ * @run main\/othervm java_util_Collections_UnmodifiableSortedSet\n@@ -38,1 +38,1 @@\n-        new java_util_Collections_UnmodifiableSortedSet().test(true);\n+        new java_util_Collections_UnmodifiableSortedSet().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Collections_UnmodifiableSortedSet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_Date\n+ * @run main\/othervm java_util_Date\n@@ -36,1 +36,1 @@\n-        new java_util_Date().test(true);\n+        new java_util_Date().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_Date.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow java_util_HashMap\n+ * @run main\/othervm java_util_HashMap\n@@ -37,1 +37,1 @@\n-        new java_util_HashMap().test(true);\n+        new java_util_HashMap().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/java_util_HashMap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_Box\n+ * @run main\/othervm javax_swing_Box\n@@ -37,1 +37,1 @@\n-        new javax_swing_Box().test(true);\n+        new javax_swing_Box().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_Box.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_BoxLayout\n+ * @run main\/othervm javax_swing_BoxLayout\n@@ -37,1 +37,1 @@\n-        new javax_swing_BoxLayout().test(true);\n+        new javax_swing_BoxLayout().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_BoxLayout.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_Box_Filler\n+ * @run main\/othervm javax_swing_Box_Filler\n@@ -37,1 +37,1 @@\n-        new javax_swing_Box_Filler().test(true);\n+        new javax_swing_Box_Filler().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_Box_Filler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_DefaultCellEditor\n+ * @run main\/othervm javax_swing_DefaultCellEditor\n@@ -39,1 +39,1 @@\n-        new javax_swing_DefaultCellEditor().test(true);\n+        new javax_swing_DefaultCellEditor().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_DefaultCellEditor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_JButton\n+ * @run main\/othervm javax_swing_JButton\n@@ -36,1 +36,1 @@\n-        new javax_swing_JButton().test(true);\n+        new javax_swing_JButton().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_JButton.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_JComponent\n+ * @run main\/othervm javax_swing_JComponent\n@@ -36,1 +36,1 @@\n-        new javax_swing_JComponent().test(true);\n+        new javax_swing_JComponent().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_JComponent.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_JLayeredPane\n+ * @run main\/othervm javax_swing_JLayeredPane\n@@ -39,1 +39,1 @@\n-        new javax_swing_JLayeredPane().test(true);\n+        new javax_swing_JLayeredPane().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_JLayeredPane.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_JSplitPane\n+ * @run main\/othervm javax_swing_JSplitPane\n@@ -36,1 +36,1 @@\n-        new javax_swing_JSplitPane().test(true);\n+        new javax_swing_JSplitPane().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_JSplitPane.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_JTree\n+ * @run main\/othervm javax_swing_JTree\n@@ -39,1 +39,1 @@\n-        new javax_swing_JTree().test(true);\n+        new javax_swing_JTree().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_JTree.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_KeyStroke\n+ * @run main\/othervm javax_swing_KeyStroke\n@@ -38,1 +38,1 @@\n-        new javax_swing_KeyStroke().test(true);\n+        new javax_swing_KeyStroke().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_KeyStroke.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_OverlayLayout\n+ * @run main\/othervm javax_swing_OverlayLayout\n@@ -37,1 +37,1 @@\n-        new javax_swing_OverlayLayout().test(true);\n+        new javax_swing_OverlayLayout().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_OverlayLayout.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_border_BevelBorder\n+ * @run main\/othervm javax_swing_border_BevelBorder\n@@ -37,1 +37,1 @@\n-        new javax_swing_border_BevelBorder().test(true);\n+        new javax_swing_border_BevelBorder().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_border_BevelBorder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_border_CompoundBorder\n+ * @run main\/othervm javax_swing_border_CompoundBorder\n@@ -36,1 +36,1 @@\n-        new javax_swing_border_CompoundBorder().test(true);\n+        new javax_swing_border_CompoundBorder().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_border_CompoundBorder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_border_EmptyBorder\n+ * @run main\/othervm javax_swing_border_EmptyBorder\n@@ -36,1 +36,1 @@\n-        new javax_swing_border_EmptyBorder().test(true);\n+        new javax_swing_border_EmptyBorder().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_border_EmptyBorder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_border_EtchedBorder\n+ * @run main\/othervm javax_swing_border_EtchedBorder\n@@ -37,1 +37,1 @@\n-        new javax_swing_border_EtchedBorder().test(true);\n+        new javax_swing_border_EtchedBorder().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_border_EtchedBorder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_border_LineBorder\n+ * @run main\/othervm javax_swing_border_LineBorder\n@@ -37,1 +37,1 @@\n-        new javax_swing_border_LineBorder().test(true);\n+        new javax_swing_border_LineBorder().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_border_LineBorder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_border_MatteBorder\n+ * @run main\/othervm javax_swing_border_MatteBorder\n@@ -37,1 +37,1 @@\n-        new javax_swing_border_MatteBorder().test(true);\n+        new javax_swing_border_MatteBorder().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_border_MatteBorder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_border_SoftBevelBorder\n+ * @run main\/othervm javax_swing_border_SoftBevelBorder\n@@ -38,1 +38,1 @@\n-        new javax_swing_border_SoftBevelBorder().test(true);\n+        new javax_swing_border_SoftBevelBorder().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_border_SoftBevelBorder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_border_StrokeBorder\n+ * @run main\/othervm javax_swing_border_StrokeBorder\n@@ -38,1 +38,1 @@\n-        new javax_swing_border_StrokeBorder().test(true);\n+        new javax_swing_border_StrokeBorder().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_border_StrokeBorder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_border_TitledBorder\n+ * @run main\/othervm javax_swing_border_TitledBorder\n@@ -39,1 +39,1 @@\n-        new javax_swing_border_TitledBorder().test(true);\n+        new javax_swing_border_TitledBorder().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_border_TitledBorder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_plaf_BorderUIResource_BevelBorderUIResource\n+ * @run main\/othervm javax_swing_plaf_BorderUIResource_BevelBorderUIResource\n@@ -37,1 +37,1 @@\n-        new javax_swing_plaf_BorderUIResource_BevelBorderUIResource().test(true);\n+        new javax_swing_plaf_BorderUIResource_BevelBorderUIResource().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_plaf_BorderUIResource_BevelBorderUIResource.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_plaf_BorderUIResource_CompoundBorderUIResource\n+ * @run main\/othervm javax_swing_plaf_BorderUIResource_CompoundBorderUIResource\n@@ -32,1 +32,0 @@\n-import javax.swing.border.CompoundBorder;\n@@ -37,1 +36,1 @@\n-        new javax_swing_plaf_BorderUIResource_CompoundBorderUIResource().test(true);\n+        new javax_swing_plaf_BorderUIResource_CompoundBorderUIResource().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_plaf_BorderUIResource_CompoundBorderUIResource.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_plaf_BorderUIResource_EmptyBorderUIResource\n+ * @run main\/othervm javax_swing_plaf_BorderUIResource_EmptyBorderUIResource\n@@ -36,1 +36,1 @@\n-        new javax_swing_plaf_BorderUIResource_EmptyBorderUIResource().test(true);\n+        new javax_swing_plaf_BorderUIResource_EmptyBorderUIResource().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_plaf_BorderUIResource_EmptyBorderUIResource.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_plaf_BorderUIResource_EtchedBorderUIResource\n+ * @run main\/othervm javax_swing_plaf_BorderUIResource_EtchedBorderUIResource\n@@ -37,1 +37,1 @@\n-        new javax_swing_plaf_BorderUIResource_EtchedBorderUIResource().test(true);\n+        new javax_swing_plaf_BorderUIResource_EtchedBorderUIResource().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_plaf_BorderUIResource_EtchedBorderUIResource.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_plaf_BorderUIResource_LineBorderUIResource\n+ * @run main\/othervm javax_swing_plaf_BorderUIResource_LineBorderUIResource\n@@ -37,1 +37,1 @@\n-        new javax_swing_plaf_BorderUIResource_LineBorderUIResource().test(true);\n+        new javax_swing_plaf_BorderUIResource_LineBorderUIResource().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_plaf_BorderUIResource_LineBorderUIResource.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_plaf_BorderUIResource_MatteBorderUIResource\n+ * @run main\/othervm javax_swing_plaf_BorderUIResource_MatteBorderUIResource\n@@ -37,1 +37,1 @@\n-        new javax_swing_plaf_BorderUIResource_MatteBorderUIResource().test(true);\n+        new javax_swing_plaf_BorderUIResource_MatteBorderUIResource().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_plaf_BorderUIResource_MatteBorderUIResource.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_plaf_BorderUIResource_TitledBorderUIResource\n+ * @run main\/othervm javax_swing_plaf_BorderUIResource_TitledBorderUIResource\n@@ -40,1 +40,1 @@\n-        new javax_swing_plaf_BorderUIResource_TitledBorderUIResource().test(true);\n+        new javax_swing_plaf_BorderUIResource_TitledBorderUIResource().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_plaf_BorderUIResource_TitledBorderUIResource.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_plaf_ColorUIResource\n+ * @run main\/othervm javax_swing_plaf_ColorUIResource\n@@ -36,1 +36,1 @@\n-        new javax_swing_plaf_ColorUIResource().test(true);\n+        new javax_swing_plaf_ColorUIResource().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_plaf_ColorUIResource.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_plaf_FontUIResource\n+ * @run main\/othervm javax_swing_plaf_FontUIResource\n@@ -39,1 +39,1 @@\n-        new javax_swing_plaf_FontUIResource().test(true);\n+        new javax_swing_plaf_FontUIResource().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_plaf_FontUIResource.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_tree_DefaultTreeModel\n+ * @run main\/othervm javax_swing_tree_DefaultTreeModel\n@@ -38,1 +38,1 @@\n-        new javax_swing_tree_DefaultTreeModel().test(true);\n+        new javax_swing_tree_DefaultTreeModel().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_tree_DefaultTreeModel.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow javax_swing_tree_TreePath\n+ * @run main\/othervm javax_swing_tree_TreePath\n@@ -36,1 +36,1 @@\n-        new javax_swing_tree_TreePath().test(true);\n+        new javax_swing_tree_TreePath().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/javax_swing_tree_TreePath.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.security.manager=allow sun_swing_PrintColorUIResource\n+ * @run main\/othervm sun_swing_PrintColorUIResource\n@@ -39,1 +39,1 @@\n-        new sun_swing_PrintColorUIResource().test(true);\n+        new sun_swing_PrintColorUIResource().test();\n","filename":"test\/jdk\/java\/beans\/XMLEncoder\/sun_swing_PrintColorUIResource.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @run testng\/othervm\/policy=security.policy\n- *          -Djava.security.manager=default TestLinker\n+ * @run testng\/othervm TestLinker\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-grant codeBase \"file:${test.classes}\/*\" {\n-    \/\/ Permissions needed to run the test\n-    permission java.util.PropertyPermission \"os.name\", \"read\";\n-    permission java.util.PropertyPermission \"NativeTestHelper.DEFAULT_RANDOM.seed\", \"read\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.foreign\";\n-};\n-\n","filename":"test\/jdk\/java\/foreign\/security.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8295803\n- * @summary Tests System.console() works with the security manager\n- * @run main\/othervm\/java.security.policy=test.policy -Djava.security.manager -Djdk.console=jdk.internal.le SecurityManagerTest\n- *\/\n-public class SecurityManagerTest {\n-    public static void main(String... args) {\n-        System.console();\n-        \/\/ consider it successful if ServiceConfigurationError was not thrown here\n-    }\n-}\n","filename":"test\/jdk\/java\/io\/Console\/SecurityManagerTest.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"<<ALL FILES>>\",\"read,write,delete\";\n-};\n","filename":"test\/jdk\/java\/io\/Console\/test.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,380 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8017212\n- * @summary Examine methods in File.java that access the file system do the\n- *          right permission check when a security manager exists.\n- * @run main\/othervm -Djava.security.manager=allow CheckPermission\n- * @author Dan Xu\n- *\/\n-\n-import java.io.File;\n-import java.io.FilenameFilter;\n-import java.io.FileFilter;\n-import java.io.IOException;\n-import java.security.Permission;\n-import java.util.ArrayList;\n-import java.util.EnumMap;\n-import java.util.EnumSet;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n-public class CheckPermission {\n-\n-    private static final String CHECK_PERMISSION_TEST = \"CheckPermissionTest\";\n-\n-    public enum FileOperation {\n-        READ, WRITE, DELETE, EXEC\n-    }\n-\n-    static class Checks {\n-        private List<Permission> permissionsChecked = new ArrayList<>();\n-        private Set<String> propertiesChecked = new HashSet<>();\n-\n-        private Map<FileOperation, List<String>> fileOperationChecked =\n-            new EnumMap<>(FileOperation.class);\n-\n-        List<Permission> permissionsChecked() {\n-            return permissionsChecked;\n-        }\n-\n-        Set<String> propertiesChecked() {\n-            return propertiesChecked;\n-        }\n-\n-        List<String> fileOperationChecked(FileOperation op) {\n-            return fileOperationChecked.get(op);\n-        }\n-\n-        void addFileOperation(FileOperation op, String file) {\n-            List<String> opList = fileOperationChecked.get(op);\n-            if (opList == null) {\n-                opList = new ArrayList<>();\n-                fileOperationChecked.put(op, opList);\n-            }\n-            opList.add(file);\n-        }\n-    }\n-\n-    static ThreadLocal<Checks> myChecks = new ThreadLocal<>();\n-\n-    static void prepare() {\n-        myChecks.set(new Checks());\n-    }\n-\n-    static class LoggingSecurityManager extends SecurityManager {\n-        static void install() {\n-            System.setSecurityManager(new LoggingSecurityManager());\n-        }\n-\n-        private void checkFileOperation(FileOperation op, String file) {\n-            Checks checks = myChecks.get();\n-            if (checks != null)\n-                checks.addFileOperation(op, file);\n-        }\n-\n-        @Override\n-        public void checkRead(String file) {\n-            checkFileOperation(FileOperation.READ, file);\n-        }\n-\n-        @Override\n-        public void checkWrite(String file) {\n-            checkFileOperation(FileOperation.WRITE, file);\n-        }\n-\n-        @Override\n-        public void checkDelete(String file) {\n-            checkFileOperation(FileOperation.DELETE, file);\n-        }\n-\n-        @Override\n-        public void checkExec(String file) {\n-            checkFileOperation(FileOperation.EXEC, file);\n-        }\n-\n-        @Override\n-        public void checkPermission(Permission perm) {\n-            Checks checks = myChecks.get();\n-            if (checks != null)\n-                checks.permissionsChecked().add(perm);\n-        }\n-\n-        @Override\n-        public void checkPropertyAccess(String key) {\n-            Checks checks = myChecks.get();\n-            if (checks != null)\n-                checks.propertiesChecked().add(key);\n-        }\n-    }\n-\n-    static void assertCheckPermission(Class<? extends Permission> type,\n-            String name)\n-    {\n-        for (Permission perm : myChecks.get().permissionsChecked()) {\n-            if (type.isInstance(perm) && perm.getName().equals(name))\n-                return;\n-        }\n-        throw new RuntimeException(type.getName() + \"(\\\"\" + name\n-            + \"\\\") not checked\");\n-    }\n-\n-    static void assertCheckPropertyAccess(String key) {\n-        if (!myChecks.get().propertiesChecked().contains(key))\n-            throw new RuntimeException(\"Property \" + key + \" not checked\");\n-    }\n-\n-    static void assertChecked(File file, List<String> list) {\n-        if (list != null && !list.isEmpty()) {\n-            for (String path : list) {\n-                if (path.equals(file.getPath()))\n-                    return;\n-            }\n-        }\n-        throw new RuntimeException(\"Access not checked\");\n-    }\n-\n-    static void assertNotChecked(File file, List<String> list) {\n-        if (list != null && !list.isEmpty()) {\n-            for (String path : list) {\n-                if (path.equals(file.getPath()))\n-                    throw new RuntimeException(\"Access checked\");\n-            }\n-        }\n-    }\n-\n-    static void assertCheckOperation(File file, Set<FileOperation> ops) {\n-        for (FileOperation op : ops)\n-            assertChecked(file, myChecks.get().fileOperationChecked(op));\n-    }\n-\n-    static void assertNotCheckOperation(File file, Set<FileOperation> ops) {\n-        for (FileOperation op : ops)\n-            assertNotChecked(file, myChecks.get().fileOperationChecked(op));\n-    }\n-\n-    static void assertOnlyCheckOperation(File file,\n-            EnumSet<FileOperation> ops)\n-    {\n-        assertCheckOperation(file, ops);\n-        assertNotCheckOperation(file, EnumSet.complementOf(ops));\n-    }\n-\n-    static File testFile, another;\n-\n-    static void setup() {\n-        testFile = new File(CHECK_PERMISSION_TEST + System.currentTimeMillis());\n-        if (testFile.exists()) {\n-            testFile.delete();\n-        }\n-\n-        another = new File(CHECK_PERMISSION_TEST + \"Another\"\n-                           + System.currentTimeMillis());\n-        if (another.exists()) {\n-            another.delete();\n-        }\n-\n-        LoggingSecurityManager.install();\n-    }\n-\n-    public static void main(String[] args) throws IOException {\n-        setup();\n-\n-        prepare();\n-        testFile.canRead();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.canWrite();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        prepare();\n-        testFile.exists();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.isDirectory();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.isFile();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.isHidden();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.lastModified();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.length();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.createNewFile();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        prepare();\n-        testFile.list();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.list(new FilenameFilter() {\n-            @Override\n-            public boolean accept(File dir, String name) {\n-                return false;\n-            }\n-        });\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.listFiles();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.listFiles(new FilenameFilter() {\n-            @Override\n-            public boolean accept(File dir, String name) {\n-                return false;\n-            }\n-        });\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.listFiles(new FileFilter() {\n-            @Override\n-            public boolean accept(File file) {\n-                return false;\n-            }\n-        });\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-\n-        prepare();\n-        testFile.mkdir();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        if (testFile.exists()) {\n-            prepare();\n-            testFile.mkdirs();\n-            assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-        }\n-\n-        if (!another.exists()) {\n-            prepare();\n-            another.mkdirs();\n-            assertOnlyCheckOperation(another,\n-                    EnumSet.of(FileOperation.READ, FileOperation.WRITE));\n-        }\n-\n-        prepare();\n-        another.delete();\n-        assertOnlyCheckOperation(another, EnumSet.of(FileOperation.DELETE));\n-\n-        prepare();\n-        boolean renRst = testFile.renameTo(another);\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-        assertOnlyCheckOperation(another, EnumSet.of(FileOperation.WRITE));\n-\n-        if (renRst) {\n-            if (testFile.exists())\n-                throw new RuntimeException(testFile + \" is already renamed to \"\n-                    + another);\n-            testFile = another;\n-        }\n-\n-        prepare();\n-        testFile.setLastModified(0);\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        prepare();\n-        testFile.setReadOnly();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        prepare();\n-        testFile.setWritable(true, true);\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        prepare();\n-        testFile.setWritable(true);\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        prepare();\n-        testFile.setReadable(true, true);\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        prepare();\n-        testFile.setReadable(true);\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        prepare();\n-        testFile.setExecutable(true, true);\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        prepare();\n-        testFile.setExecutable(true);\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.WRITE));\n-\n-        prepare();\n-        testFile.canExecute();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.EXEC));\n-\n-        prepare();\n-        testFile.getTotalSpace();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-        assertCheckPermission(RuntimePermission.class,\n-                \"getFileSystemAttributes\");\n-\n-        prepare();\n-        testFile.getFreeSpace();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-        assertCheckPermission(RuntimePermission.class,\n-                \"getFileSystemAttributes\");\n-\n-        prepare();\n-        testFile.getUsableSpace();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.READ));\n-        assertCheckPermission(RuntimePermission.class,\n-                \"getFileSystemAttributes\");\n-\n-        prepare();\n-        File tmpFile = File.createTempFile(CHECK_PERMISSION_TEST, null, new File(\".\"));\n-        assertOnlyCheckOperation(tmpFile, EnumSet.of(FileOperation.WRITE));\n-        tmpFile.delete();\n-        assertCheckOperation(tmpFile, EnumSet.of(FileOperation.DELETE));\n-\n-        prepare();\n-        tmpFile = File.createTempFile(CHECK_PERMISSION_TEST, null, new File(\".\"));\n-        assertOnlyCheckOperation(tmpFile, EnumSet.of(FileOperation.WRITE));\n-        tmpFile.delete();\n-        assertCheckOperation(tmpFile, EnumSet.of(FileOperation.DELETE));\n-\n-        prepare();\n-        testFile.deleteOnExit();\n-        assertOnlyCheckOperation(testFile, EnumSet.of(FileOperation.DELETE));\n-    }\n-}\n","filename":"test\/jdk\/java\/io\/File\/CheckPermission.java","additions":0,"deletions":380,"binary":false,"changes":380,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @run main\/othervm\/native -Djava.security.manager=allow GetXSpace\n+ * @run main\/othervm\/native GetXSpace\n@@ -43,1 +43,0 @@\n-import java.security.Permission;\n@@ -53,1 +52,0 @@\n-@SuppressWarnings(\"removal\")\n@@ -59,3 +57,0 @@\n-    private static SecurityManager [] sma = { null, new Allow(), new DenyFSA(),\n-                                              new DenyRead() };\n-\n@@ -167,30 +162,0 @@\n-    private static void tryCatch(Space s) {\n-        out.format(\"%s:%n\", s.name());\n-        File f = new File(s.name());\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm instanceof Deny) {\n-            String fmt = \"  %14s: \\\"%s\\\" thrown as expected%n\";\n-            try {\n-                f.getTotalSpace();\n-                fail(s.name(), SecurityException.class);\n-            } catch (SecurityException x) {\n-                out.format(fmt, \"getTotalSpace\", x);\n-                pass();\n-            }\n-            try {\n-                f.getFreeSpace();\n-                fail(s.name(), SecurityException.class);\n-            } catch (SecurityException x) {\n-                out.format(fmt, \"getFreeSpace\", x);\n-                pass();\n-            }\n-            try {\n-                f.getUsableSpace();\n-                fail(s.name(), SecurityException.class);\n-            } catch (SecurityException x) {\n-                out.format(fmt, \"getUsableSpace\", x);\n-                pass();\n-            }\n-        }\n-    }\n-\n@@ -344,46 +309,0 @@\n-    private static class Allow extends SecurityManager {\n-        public void checkRead(String file) {}\n-        public void checkPermission(Permission p) {}\n-        public void checkPermission(Permission p, Object context) {}\n-    }\n-\n-    private static class Deny extends SecurityManager {\n-        public void checkPermission(Permission p) {\n-            if (p.implies(new RuntimePermission(\"setSecurityManager\"))\n-                || p.implies(new RuntimePermission(\"getProtectionDomain\")))\n-                return;\n-            super.checkPermission(p);\n-        }\n-\n-        public void checkPermission(Permission p, Object context) {\n-            if (p.implies(new RuntimePermission(\"setSecurityManager\"))\n-                || p.implies(new RuntimePermission(\"getProtectionDomain\")))\n-                return;\n-            super.checkPermission(p, context);\n-        }\n-    }\n-\n-    private static class DenyFSA extends Deny {\n-        private String err = \"sorry - getFileSystemAttributes\";\n-\n-        public void checkPermission(Permission p) {\n-            if (p.implies(new RuntimePermission(\"getFileSystemAttributes\")))\n-                throw new SecurityException(err);\n-            super.checkPermission(p);\n-        }\n-\n-        public void checkPermission(Permission p, Object context) {\n-            if (p.implies(new RuntimePermission(\"getFileSystemAttributes\")))\n-                throw new SecurityException(err);\n-            super.checkPermission(p, context);\n-        }\n-    }\n-\n-    private static class DenyRead extends Deny {\n-        private String err = \"sorry - checkRead()\";\n-\n-        public void checkRead(String file) {\n-            throw new SecurityException(err);\n-        }\n-    }\n-\n@@ -421,19 +340,5 @@\n-        for (int i = 0; i < sma.length; i++) {\n-            System.setSecurityManager(sma[i]);\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sma[i] != null && sm == null)\n-                throw new RuntimeException(\"Test configuration error \"\n-                                           + \" - can't set security manager\");\n-\n-            out.format(\"%nSecurityManager = %s%n\" ,\n-                       (sm == null ? \"null\" : sm.getClass().getName()));\n-            for (var p : l) {\n-                Space s = new Space(p);\n-                if (sm instanceof Deny) {\n-                    tryCatch(s);\n-                } else {\n-                    compare(s);\n-                    compareZeroNonExist();\n-                    compareZeroExist();\n-                }\n-            }\n+        for (var p : l) {\n+            Space s = new Space(p);\n+            compare(s);\n+            compareZeroNonExist();\n+            compareZeroExist();\n@@ -442,2 +347,0 @@\n-        System.setSecurityManager(null);\n-\n","filename":"test\/jdk\/java\/io\/File\/GetXSpace.java","additions":7,"deletions":104,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4138064\n- * @build SecurityTest\n- * @run main\/othervm\/policy=java.policy SecurityTest\n- *\/\n-\n-import java.io.File;\n-\n-public class SecurityTest {\n-\n-    public static void main(String[] args) throws Exception {\n-        try {\n-            File f = File.createTempFile(\"foo\", null);\n-        } catch (java.security.AccessControlException x) {\n-            throw x;\n-        } catch (SecurityException x) {\n-            if (x.getMessage().equals(\"Unable to create temporary file\")) {\n-                return;\n-            }\n-            throw x;\n-        }\n-        throw new Exception(\"SecurityException not thrown\");\n-    }\n-}\n","filename":"test\/jdk\/java\/io\/File\/createTempFile\/SecurityTest.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-grant {\n-};\n","filename":"test\/jdk\/java\/io\/File\/createTempFile\/java.policy","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.process.ProcessTools;\n-\n-import java.io.File;\n-import java.io.FilePermission;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-\n-\/**\n- * @test\n- * @bug 8170364\n- * @summary FilePermission path modified during merge\n- * @library \/test\/lib\n- * @build jdk.test.lib.Utils\n- *        jdk.test.lib.Asserts\n- *        jdk.test.lib.JDKToolFinder\n- *        jdk.test.lib.JDKToolLauncher\n- *        jdk.test.lib.Platform\n- *        jdk.test.lib.process.*\n- * @run main MergeName\n- *\/\n-\n-public class MergeName {\n-\n-    public static final String[] ALL_ACTIONS\n-            = {\"read\", \"write\", \"execute\", \"delete\"};\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 0) {\n-            test(\"p1\", \"read\", \"write\", \"delete\", \"execute\");\n-            test(\"p2\", \"read,write\", \"delete,execute\");\n-            test(\"p3\", \"read,write,delete\", \"execute\");\n-            test(\"p4\", \"read,write,delete,execute\");\n-        } else {\n-            SecurityManager sm = System.getSecurityManager();\n-            for (String arg : args) {\n-                \/\/ Use bits to create powerset of ALL_ACTIONS\n-                IntStream.range(1, 16)\n-                        .mapToObj(n -> IntStream.range(0, 4)\n-                                .filter(x -> (n & (1 << x)) != 0)\n-                                .mapToObj(x -> ALL_ACTIONS[x])\n-                                .collect(Collectors.joining(\",\")))\n-                        .forEach(a -> sm.checkPermission(\n-                                new FilePermission(arg, a)));\n-            }\n-        }\n-    }\n-\n-    private static void test(String file, String... actions) throws Exception {\n-        List<String> content = new ArrayList<>();\n-        content.add(\"grant {\");\n-        for (String action : actions) {\n-            content.add(\"   permission java.io.FilePermission \" +\n-                    \"\\\"x\\\", \\\"\" +action + \"\\\";\");\n-        }\n-        content.add(\"};\");\n-        Files.write(Paths.get(file), content);\n-        ProcessTools.executeTestJava(\"-Djava.security.manager\",\n-                \"-Djava.security.policy=\" + file,\n-                \"MergeName\",\n-                \"x\",\n-                new File(System.getProperty(\"user.dir\"), \"x\").getPath())\n-            .shouldHaveExitValue(0);\n-    }\n-}\n","filename":"test\/jdk\/java\/io\/FilePermission\/MergeName.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8164705\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          jdk.compiler\n- * @build jdk.test.lib.compiler.CompilerUtils\n- *        jdk.test.lib.Utils\n- *        jdk.test.lib.Asserts\n- *        jdk.test.lib.JDKToolFinder\n- *        jdk.test.lib.JDKToolLauncher\n- *        jdk.test.lib.Platform\n- *        jdk.test.lib.process.*\n- *        jdk.test.lib.util.JarUtils\n- * @run main ReadFileOnPath\n- * @summary Still able to read file on the same path\n- *\/\n-\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.compiler.CompilerUtils;\n-import jdk.test.lib.util.JarUtils;\n-\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-public class ReadFileOnPath {\n-\n-    private static final Path SRC_DIR    = Paths.get(System.getProperty(\"test.src\"));\n-    private static final Path HERE_DIR   = Paths.get(\".\");\n-    private static final Path MODS_DIR   = Paths.get(\"modules\");\n-\n-    public static void main(String args[]) throws Exception {\n-        CompilerUtils.compile(SRC_DIR.resolve(\"m\"), MODS_DIR.resolve(\"m\"));\n-        Files.write(MODS_DIR.resolve(\"m\/base\"), \"base\".getBytes());\n-        Files.write(MODS_DIR.resolve(\"m\/p\/child\"), \"child\".getBytes());\n-        JarUtils.createJarFile(HERE_DIR.resolve(\"old.jar\"),\n-                MODS_DIR.resolve(\"m\"),\n-                \"base\", \"p\/App.class\", \"p\/child\");\n-        JarUtils.createJarFile(HERE_DIR.resolve(\"new.jar\"),\n-                MODS_DIR.resolve(\"m\"),\n-                \"module-info.class\", \"base\", \"p\/App.class\", \"p\/child\");\n-\n-        \/\/ exploded module\n-        test(\"--module-path\", \"modules\", \"-m\", \"m\/p.App\", \"SS++++0\");\n-\n-        \/\/ module in jar\n-        test(\"--module-path\", \"new.jar\", \"-m\", \"m\/p.App\", \"SSSS++0\");\n-\n-        \/\/ exploded classpath\n-        test(\"-cp\", \"modules\/m\", \"p.App\", \"SS+++++\");\n-\n-        \/\/ classpath in jar\n-        test(\"-cp\", \"old.jar\", \"p.App\", \"SSSS++0\");\n-    }\n-\n-    static void test(String... args) throws Exception {\n-        List<String> cmds = new ArrayList<>();\n-        cmds.add(\"-Djava.security.manager\");\n-        cmds.addAll(Arrays.asList(args));\n-        cmds.addAll(List.of(\n-                \"x\", \"modules\/m\", \"modules\/m\/base\", \"modules\/m\/p\/child\",\n-                \"-\", \"child\", \"\/base\", \"..\/base\"));\n-        ProcessTools.executeTestJava(cmds.toArray(new String[cmds.size()]))\n-                .shouldHaveExitValue(0);\n-    }\n-}\n","filename":"test\/jdk\/java\/io\/FilePermission\/ReadFileOnPath.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-module m {\n-    exports p;\n-}\n","filename":"test\/jdk\/java\/io\/FilePermission\/m\/module-info.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-package p;\n-import java.io.InputStream;\n-import java.io.FileInputStream;\n-public class App {\n-    public static void main(String[] args) throws Exception {\n-        boolean f = true;\n-        StringBuilder sb = new StringBuilder();\n-        String expected = null;\n-        for (String s: args) {\n-            if (expected == null) {\n-                expected = s;\n-            } else if (s.equals(\"-\")) {\n-                f = false;\n-            } else if (f) {\n-                try (InputStream is = new FileInputStream(s)) {\n-                    is.readAllBytes();\n-                    sb.append('+');\n-                } catch (SecurityException se) {\n-                    System.out.println(se);\n-                    sb.append('S');\n-                } catch (Exception e) {\n-                    System.out.println(e);\n-                    sb.append('-');\n-                }\n-            } else {\n-                try (InputStream is = App.class.getResourceAsStream(s)) {\n-                    is.readAllBytes();\n-                    sb.append('+');\n-                } catch (NullPointerException npe) {\n-                    System.out.println(npe);\n-                    sb.append('0');\n-                } catch (Exception e) {\n-                    System.out.println(e);\n-                    sb.append('-');\n-                }\n-            }\n-        }\n-        if (!sb.toString().equals(expected)) {\n-            throw new Exception(\"Expected \" + expected + \", actually \" + sb);\n-        } else {\n-            System.out.println(\"OK\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/io\/FilePermission\/m\/p\/App.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,1 @@\n- * @summary Verify that unauthorized ObjectOutputStream and ObjectInputStream\n- *          cannot be constructed if they override security-sensitive non-final\n- *          methods.\n+ * @summary Verify that ObjectOutputStream and ObjectInputStream can be constructed\n@@ -30,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow AuditStreamSubclass\n+ * @run main AuditStreamSubclass\n@@ -42,16 +40,0 @@\n-class BadOOS1 extends ObjectOutputStream {\n-    BadOOS1(OutputStream out) throws IOException { super(out); }\n-    public PutField putFields() throws IOException { return null; }\n-}\n-\n-class BadOOS2 extends ObjectOutputStream {\n-    BadOOS2(OutputStream out) throws IOException { super(out); }\n-    public void writeUnshared(Object obj) throws IOException {}\n-}\n-\n-class BadOOS3 extends GoodOOS1 {\n-    BadOOS3(OutputStream out) throws IOException { super(out); }\n-    public void writeUnshared(Object obj) throws IOException {}\n-}\n-\n-\n@@ -66,21 +48,0 @@\n-class BadOIS1 extends ObjectInputStream {\n-    BadOIS1(InputStream in) throws IOException { super(in); }\n-    public GetField readFields() throws IOException, ClassNotFoundException {\n-        return null;\n-    }\n-}\n-\n-class BadOIS2 extends ObjectInputStream {\n-    BadOIS2(InputStream in) throws IOException { super(in); }\n-    public Object readUnshared() throws IOException, ClassNotFoundException {\n-        return null;\n-    }\n-}\n-\n-class BadOIS3 extends GoodOIS1 {\n-    BadOIS3(InputStream in) throws IOException { super(in); }\n-    public Object readUnshared() throws IOException, ClassNotFoundException {\n-        return null;\n-    }\n-}\n-\n@@ -89,3 +50,1 @@\n-        if (System.getSecurityManager() == null) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n+\n@@ -101,36 +60,0 @@\n-\n-        try {\n-            new BadOOS1(bout);\n-            throw new Error();\n-        } catch (SecurityException ex) {\n-        }\n-\n-        try {\n-            new BadOOS2(bout);\n-            throw new Error();\n-        } catch (SecurityException ex) {\n-        }\n-\n-        try {\n-            new BadOOS3(bout);\n-            throw new Error();\n-        } catch (SecurityException ex) {\n-        }\n-\n-        try {\n-            new BadOIS1(new ByteArrayInputStream(buf));\n-            throw new Error();\n-        } catch (SecurityException ex) {\n-        }\n-\n-        try {\n-            new BadOIS2(new ByteArrayInputStream(buf));\n-            throw new Error();\n-        } catch (SecurityException ex) {\n-        }\n-\n-        try {\n-            new BadOIS3(new ByteArrayInputStream(buf));\n-            throw new Error();\n-        } catch (SecurityException ex) {\n-        }\n","filename":"test\/jdk\/java\/io\/Serializable\/auditStreamSubclass\/AuditStreamSubclass.java","additions":4,"deletions":81,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy AbsentStreamValuesTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/AbsentStreamValuesTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy BasicRecordSer\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/BasicRecordSer.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy ConstructorAccessTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ConstructorAccessTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,138 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8246774\n- * @summary Verifies that privileged operations performed in the record\n- *          constructor throw, when run without the required permissions\n- * @run testng\/othervm\/java.security.policy=empty_security.policy ConstructorPermissionTest\n- *\/\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InvalidObjectException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.Serializable;\n-import java.net.Socket;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.security.AccessControlException;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static java.lang.System.out;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.expectThrows;\n-\n-\/**\n- * Ensures that the appropriate exception, invalid object exception, with a\n- * suitable cause, is thrown when the record constructor performs a privileged\n- * operation without permission.\n- *\/\n-public class ConstructorPermissionTest {\n-\n-    \/** \"big switch\" that can be used to allow\/disallow record construction\n-     * set to true after the data provider has constructed all record objects *\/\n-    private static volatile boolean firstDataSetCreated;\n-\n-    record R1 () implements Serializable {\n-        public R1 {\n-            if (firstDataSetCreated) {\n-                try { Files.list(Path.of(\".\")); }\n-                catch (IOException unexpected) { throw new AssertionError(unexpected); }\n-            }\n-        }\n-    }\n-\n-    record R2 (int x) implements Serializable {\n-        public R2 {\n-            if (firstDataSetCreated) {\n-                try { new Socket(\"localhost\", 8080); }\n-                catch (IOException unexpected) { throw new AssertionError(unexpected); }\n-            }\n-        }\n-    }\n-\n-    record R3 (String... args) implements Serializable {\n-        public R3 {\n-            if (firstDataSetCreated)\n-                ProcessHandle.current();\n-        }\n-    }\n-\n-    static final Class<InvalidObjectException> IOE = InvalidObjectException.class;\n-\n-    @DataProvider(name = \"exceptionInstances\")\n-    public Object[][] exceptionInstances() {\n-        var objs = new Object[][] {\n-            new Object[] { new R1(),     AccessControlException.class, \"FilePermission\"   },\n-            new Object[] { new R2(1),    AccessControlException.class, \"SocketPermission\" },\n-            new Object[] { new R3(\"s\"),  AccessControlException.class, \"manageProcess\"    },\n-        };\n-        firstDataSetCreated = true;\n-        return objs;\n-    }\n-\n-    @Test(dataProvider = \"exceptionInstances\")\n-    public void testExceptions(Object objectToSerialize,\n-                               Class<? extends Throwable> expectedExType,\n-                               String expectedExMessage)\n-        throws Exception\n-    {\n-        out.println(\"\\n---\");\n-        out.println(\"serializing: \" + objectToSerialize);\n-        byte[] bytes = serialize(objectToSerialize);\n-        InvalidObjectException ioe = expectThrows(IOE, () -> deserialize(bytes));\n-        out.println(\"caught expected IOE: \" + ioe);\n-        Throwable t = ioe.getCause();\n-        assertTrue(t.getClass().equals(expectedExType),\n-                   \"Expected:\" + expectedExType + \", got:\" + t);\n-        out.println(\"expected cause \" + expectedExType +\" : \" + t);\n-        String msg = t.getMessage();\n-        assertTrue(msg.contains(expectedExMessage),\n-                   \"Expected message to contain [\" + expectedExMessage + \"], in \" + msg);\n-    }\n-\n-    \/\/ TODO: add positive tests with permissions granted.\n-\n-    \/\/ --- infra\n-\n-    static <T> byte[] serialize(T obj) throws IOException {\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        ObjectOutputStream oos = new ObjectOutputStream(baos);\n-        oos.writeObject(obj);\n-        oos.close();\n-        return baos.toByteArray();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    static <T> T deserialize(byte[] streamBytes)\n-        throws IOException, ClassNotFoundException\n-    {\n-        ByteArrayInputStream bais = new ByteArrayInputStream(streamBytes);\n-        ObjectInputStream ois  = new ObjectInputStream(bais);\n-        return (T) ois.readObject();\n-    }\n-}\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ConstructorPermissionTest.java","additions":0,"deletions":138,"binary":false,"changes":138,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy CycleTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/CycleTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy DifferentStreamFieldsTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/DifferentStreamFieldsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy ReadResolveTest\n@@ -160,1 +159,0 @@\n-\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ReadResolveTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy RecordClassTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/RecordClassTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy SerialVersionUIDTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/SerialVersionUIDTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy ThrowingConstructorTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ThrowingConstructorTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy WriteReplaceTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/WriteReplaceTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,25 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ This policy is used by tests not requiring permissions, to assert that the\n-\/\/ JDK implementation has the correct privileged blocks.\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/empty_security.policy","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.security.Security;\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/CheckInputOrderTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ObjectInputFilter;\n-import java.io.ObjectInputStream;\n-import java.security.AccessControlException;\n-\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-import org.testng.Assert;\n-\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n-\n-\/* @test\n- * @build FilterWithSecurityManagerTest SerialFilterTest\n- * @run testng\/othervm FilterWithSecurityManagerTest\n- * @run testng\/othervm\/policy=security.policy.without.globalFilter\n- *          -Djava.security.manager=default FilterWithSecurityManagerTest\n- * @run testng\/othervm\/policy=security.policy\n- *          -Djava.security.manager=default\n- *          -Djdk.serialFilter=java.lang.Integer FilterWithSecurityManagerTest\n- *\n- * @summary Test that setting specific filter is checked by security manager,\n- *          setting process-wide filter is checked by security manager.\n- *\/\n-\n-@Test\n-public class FilterWithSecurityManagerTest {\n-\n-    byte[] bytes;\n-    boolean setSecurityManager;\n-    ObjectInputFilter filter;\n-\n-    @BeforeClass\n-    @SuppressWarnings(\"removal\")\n-    public void setup() throws Exception {\n-        setSecurityManager = System.getSecurityManager() != null;\n-        Object toDeserialized = Long.MAX_VALUE;\n-        bytes = SerialFilterTest.writeObjects(toDeserialized);\n-        filter = ObjectInputFilter.Config.createFilter(\"java.lang.Long\");\n-    }\n-\n-    \/**\n-     * Test that setting process-wide filter is checked by security manager.\n-     *\/\n-    @Test\n-    @SuppressWarnings(\"removal\")\n-    public void testGlobalFilter() {\n-        ObjectInputFilter global = ObjectInputFilter.Config.getSerialFilter();\n-\n-        try  {\n-            ObjectInputFilter.Config.setSerialFilter(filter);\n-            assertFalse(setSecurityManager,\n-                    \"When SecurityManager exists, without \"\n-                    + \"java.io.SerializablePermission(serialFilter) \"\n-                    + \"IllegalStateException should be thrown\");\n-        } catch (AccessControlException ex) {\n-            assertTrue(setSecurityManager);\n-            assertTrue(ex.getMessage().contains(\"java.io.SerializablePermission\"));\n-            assertTrue(ex.getMessage().contains(\"serialFilter\"));\n-        } catch (IllegalStateException ise) {\n-            \/\/ ISE should occur only if global filter already set\n-            Assert.assertNotNull(global, \"Global filter should be non-null\");\n-        }\n-    }\n-\n-    \/**\n-     * Test that setting specific filter is checked by security manager.\n-     *\/\n-    @Test(dependsOnMethods = { \"testGlobalFilter\" })\n-    @SuppressWarnings(\"removal\")\n-    public void testSpecificFilter() throws Exception {\n-        try (ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n-                ObjectInputStream ois = new ObjectInputStream(bais)) {\n-            ois.setObjectInputFilter(filter);\n-            Object o = ois.readObject();\n-        } catch (AccessControlException ex) {\n-            assertTrue(setSecurityManager);\n-            assertTrue(ex.getMessage().contains(\"java.io.SerializablePermission\"));\n-            assertTrue(ex.getMessage().contains(\"serialFilter\"));\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/FilterWithSecurityManagerTest.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.io.SerializablePermission;\n@@ -49,5 +48,0 @@\n- * @run testng\/othervm\/policy=security.policy GlobalFilterTest\n- * @run testng\/othervm\/policy=security.policy\n- *        -Djava.security.properties=${test.src}\/java.security-extra1\n- *        -Djava.security.debug=properties GlobalFilterTest\n- *\n@@ -128,3 +122,0 @@\n-     * If there is a security manager, setting the serialFilter should fail\n-     * without the appropriate permission.\n-     * If there is no security manager then setting it should work.\n@@ -135,1 +126,0 @@\n-        SecurityManager sm = System.getSecurityManager();\n@@ -144,5 +134,1 @@\n-                \/\/ Normal, once set can never be re-set even if no security manager\n-            } catch (SecurityException se) {\n-                if (sm == null) {\n-                    Assert.fail(\"wrong exception when security manager is not set\", se);\n-                }\n+                \/\/ Normal, once set can never be re-set\n@@ -151,36 +137,10 @@\n-            if (sm == null) {\n-                \/\/ no security manager\n-                try {\n-                    ObjectInputFilter.Config.setSerialFilter(filter);\n-                    \/\/ Note once set, it can not be reset; so other tests\n-                    System.out.printf(\"Global Filter set to Validator%n\");\n-                } catch (SecurityException se) {\n-                    Assert.fail(\"setGlobalFilter should not get SecurityException\", se);\n-                }\n-                try {\n-                    \/\/ Try to set it again, expecting it to throw\n-                    ObjectInputFilter.Config.setSerialFilter(filter);\n-                    Assert.fail(\"set only once process-wide filter\");\n-                } catch (IllegalStateException ise) {\n-                    \/\/ Normal case\n-                }\n-            } else {\n-                \/\/ Security manager\n-                SecurityException expectSE = null;\n-                try {\n-                    sm.checkPermission(new SerializablePermission(\"serialFilter\"));\n-                } catch (SecurityException se1) {\n-                    expectSE = se1;\n-                }\n-                SecurityException actualSE = null;\n-                try {\n-                    ObjectInputFilter.Config.setSerialFilter(filter);\n-                } catch (SecurityException se2) {\n-                    actualSE = se2;\n-                }\n-                if (expectSE == null | actualSE == null) {\n-                    Assert.assertEquals(expectSE, actualSE, \"SecurityException\");\n-                } else {\n-                    Assert.assertEquals(expectSE.getClass(), actualSE.getClass(),\n-                            \"SecurityException class\");\n-                }\n+            ObjectInputFilter.Config.setSerialFilter(filter);\n+            \/\/ Note once set, it can not be reset; so other tests\n+            System.out.printf(\"Global Filter set to Validator%n\");\n+\n+            try {\n+                \/\/ Try to set it again, expecting it to throw\n+                ObjectInputFilter.Config.setSerialFilter(filter);\n+                Assert.fail(\"set only once process-wide filter\");\n+            } catch (IllegalStateException ise) {\n+                \/\/ Normal case\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/GlobalFilterTest.java","additions":12,"deletions":52,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/MixedFiltersTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,3 +39,0 @@\n-import java.io.SerializablePermission;\n-import java.security.AccessControlException;\n-import java.security.Permission;\n@@ -51,5 +48,0 @@\n- * @run testng\/othervm\/policy=security.policy\n- *        -Djava.security.properties=${test.src}\/java.security-extra-factory\n- *        -Djava.security.debug=properties SerialFilterFactoryTest\n- * @run testng\/othervm\/policy=security.policy SerialFilterFactoryTest\n- * @run testng\/othervm\/policy=security.policy.without.globalFilter SerialFilterFactoryTest\n@@ -120,19 +112,0 @@\n-    \/**\n-     * Returns true if serialFilter actions are ok, either no SM or SM has serialFilter Permission\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private static boolean hasFilterPerm() {\n-        boolean hasSerialPerm = true;\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            try {\n-                Permission p = new SerializablePermission(\"serialFilter\");\n-                sm.checkPermission(p);\n-                hasSerialPerm = true;\n-            } catch (AccessControlException ace2) {\n-                hasSerialPerm = false;      \/\/ SM and serialFilter not allowed\n-            }\n-        }\n-        return hasSerialPerm;\n-    }\n-\n@@ -168,4 +141,0 @@\n-        if (System.getSecurityManager() != null) {\n-            \/\/ Skip test when running with SM\n-            return;\n-        }\n@@ -209,10 +178,2 @@\n-        try {\n-            configFilter = setupFilter(dynFilter);\n-            factory = setupFilterFactory(dynFilterFactory);\n-            Assert.assertTrue(hasFilterPerm(),\n-                    \"setSerialFilterFactory and setFilterFactory succeeded without serialFilter permission\");\n-        } catch (AccessControlException ace) {\n-            Assert.assertFalse(hasFilterPerm(),\n-                    \"setSerialFilterFactory failed even with serialFilter permission\");\n-            return;         \/\/ test complete\n-        }\n+        configFilter = setupFilter(dynFilter);\n+        factory = setupFilterFactory(dynFilterFactory);\n@@ -268,6 +229,3 @@\n-        if (hasFilterPerm()) {\n-            \/\/ Only test if is allowed by SM.\n-            BinaryOperator<ObjectInputFilter> factory = Config.getSerialFilterFactory();\n-            IllegalStateException ise = Assert.expectThrows(IllegalStateException.class, () -> Config.setSerialFilterFactory(factory));\n-            Assert.assertTrue(ise.getMessage().startsWith(\"Cannot replace filter factory: \"));\n-        }\n+        BinaryOperator<ObjectInputFilter> factory = Config.getSerialFilterFactory();\n+        IllegalStateException ise = Assert.expectThrows(IllegalStateException.class, () -> Config.setSerialFilterFactory(factory));\n+        Assert.assertTrue(ise.getMessage().startsWith(\"Cannot replace filter factory: \"));\n@@ -281,14 +239,12 @@\n-        if (hasFilterPerm()) {\n-            \/\/ Only test if is allowed by SM.\n-            ObjectInputFilter curr = null;\n-            try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(simpleStream))) {\n-                curr = ois.getObjectInputFilter();\n-                \/\/ Try to set the filter to null\n-                ois.setObjectInputFilter(null);\n-                if (curr != null) {\n-                    Assert.fail(\"setting filter to null after a non-null filter should throw\");\n-                }\n-            } catch (IllegalStateException ise) {\n-                if (curr == null) {\n-                    Assert.fail(\"setting filter to null after a null filter should not throw\");\n-                }\n+        \/\/ Only test if is allowed by SM.\n+        ObjectInputFilter curr = null;\n+        try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(simpleStream))) {\n+            curr = ois.getObjectInputFilter();\n+            \/\/ Try to set the filter to null\n+            ois.setObjectInputFilter(null);\n+            if (curr != null) {\n+                Assert.fail(\"setting filter to null after a non-null filter should throw\");\n+            }\n+        } catch (IllegalStateException ise) {\n+            if (curr == null) {\n+                Assert.fail(\"setting filter to null after a null filter should not throw\");\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterFactoryTest.java","additions":18,"deletions":62,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -1,13 +0,0 @@\n-\/\/ Individual Permissions to for GlobalFilterTest and FilterWithSecurityManager\n-grant {\n-        \/\/ Specific permission under test\n-        permission java.io.SerializablePermission \"serialFilter\";\n-\n-        \/\/ Permissions needed to run the test\n-        permission java.util.PropertyPermission \"*\", \"read,write\";\n-        permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write,delete\";\n-        permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n-        permission java.security.SecurityPermission \"*\";\n-        permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n-};\n-\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/security.policy","additions":0,"deletions":13,"binary":false,"changes":13,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-\/\/ Individual Permissions for FilterWithSecurityManagerTest\n-grant {\n-        \/\/ Permissions needed to run the test\n-        permission java.util.PropertyPermission \"*\", \"read\";\n-        permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write,delete\";\n-        permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n-        permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n-};\n-\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/security.policy.without.globalFilter","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-grant { \n-\t\/\/ \"standard\" properies that can be read by anyone\n-\tpermission java.io.FilePermission \"-\",\"read,write,execute\";\n-\tpermission java.io.SerializablePermission \"enableSubstitution\";\n-\n-\t\/\/ Needed to get access to private writeObjectMethod and\n-        \/\/ to be able to call it.\n-\tpermission java.lang.reflect.ReflectPermission \"access\";\n-};\n","filename":"test\/jdk\/java\/io\/Serializable\/subclass\/Allow.policy","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n- * @run main\/othervm\/policy=Allow.policy SubclassTest -expectSecurityException\n@@ -135,4 +134,0 @@\n-        if (argv.length > 0 &&\n-            argv[0].compareTo(\"-expectSecurityException\") == 0)\n-            expectSecurityException = true;\n-\n@@ -141,12 +136,1 @@\n-        try {\n-            os = new XObjectOutputStream(baos);\n-            if (expectSecurityException)\n-                throw new Error(\"Assertion failure. \" +\n-                                \"Expected a security exception on previous line.\");\n-        } catch (SecurityException e) {\n-            if (expectSecurityException) {\n-                System.err.println(\"Caught expected security exception.\");\n-                return;\n-            }\n-            throw e;\n-        }\n+        os = new XObjectOutputStream(baos);\n","filename":"test\/jdk\/java\/io\/Serializable\/subclass\/SubclassTest.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- *          separete ClassLoaders be available for garbage collection\n+ *          separate ClassLoaders be available for garbage collection\n@@ -32,1 +32,1 @@\n- * @run main\/othervm\/policy=security.policy SubclassGC\n+ * @run main\/othervm SubclassGC\n@@ -48,3 +48,0 @@\n-                if (System.getSecurityManager() == null) {\n-                        System.setSecurityManager(new SecurityManager());\n-                }\n","filename":"test\/jdk\/java\/io\/Serializable\/subclassGC\/SubclassGC.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,8 +0,0 @@\n-\n-grant {\n-\tpermission java.lang.RuntimePermission \"createClassLoader\";\n-\tpermission java.lang.RuntimePermission \"getClassLoader\";\n-\tpermission java.util.PropertyPermission \"test.classes\", \"read\";\n-\tpermission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n-};\n-\n","filename":"test\/jdk\/java\/io\/Serializable\/subclassGC\/security.policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-    private static final String[] modules = new String[] {\"m1\", \"m2\", \"m3\"};\n+    private static final String[] modules = new String[] {\"m1\", \"m2\"};\n@@ -112,39 +112,0 @@\n-    @Test\n-    public void testDeniedClassLoaderAccess() throws Exception {\n-        String[] options = new String[] {\n-                \"--module-path\", MOD_DEST_DIR.toString(),\n-                \"--add-modules\", String.join(\",\", modules),\n-                \"-Djava.security.manager=allow\",\n-                \"-m\", \"m3\/p3.NoGetClassLoaderAccess\"\n-        };\n-        assertTrue(executeTestJava(options)\n-                        .outputTo(System.out)\n-                        .errorTo(System.err)\n-                        .getExitValue() == 0);\n-    }\n-\n-    @Test\n-    public void testDeniedAccess() throws Exception {\n-        Path policyFile = Paths.get(TEST_SRC, \"policy.denied\");\n-\n-        String[] options = new String[] {\n-                \"-Djava.security.manager\",\n-                \"-Djava.security.policy=\" + policyFile.toString(),\n-                \"--module-path\", MOD_DEST_DIR.toString(),\n-                \"--add-modules\", String.join(\",\", modules),\n-                \"-m\", \"m3\/p3.NoAccess\"\n-        };\n-        assertTrue(executeTestJava(options)\n-                        .outputTo(System.out)\n-                        .errorTo(System.err)\n-                        .getExitValue() == 0);\n-    }\n-\n-    private String[] runWithSecurityManager(String[] options) {\n-        Path policyFile = Paths.get(TEST_SRC, \"policy\");\n-        Stream<String> opts = Stream.concat(Stream.of(\"-Djava.security.manager\",\n-                                                      \"-Djava.security.policy=\" + policyFile.toString()),\n-                                            Arrays.stream(options));\n-        return opts.toArray(String[]::new);\n-    }\n-\n@@ -156,5 +117,0 @@\n-\n-        assertTrue(executeTestJava(runWithSecurityManager(options))\n-                        .outputTo(System.out)\n-                        .errorTo(System.err)\n-                        .getExitValue() == 0);\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/modules\/TestDriver.java","additions":2,"deletions":46,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,6 +38,0 @@\n-        \/\/ disable security manager until Class.forName is called.\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            System.setSecurityManager(null);\n-        }\n-\n@@ -57,4 +51,0 @@\n-        if (sm != null) {\n-            System.setSecurityManager(sm);\n-        }\n-\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/modules\/TestLayer.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.lang.RuntimePermission \"getBootLayer\";\n-    permission java.lang.RuntimePermission \"getClassLoader\";\n-    permission java.io.FilePermission \"mods\/-\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-};\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/modules\/policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,11 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.lang.RuntimePermission \"getBootLayer\";\n-    permission java.lang.RuntimePermission \"getClassLoader\";\n-    permission java.io.FilePermission \"mods1\", \"read\";\n-    permission java.io.FilePermission \"mods2\", \"read\";\n-    \/\/ only grant access to p1.* classes\n-    \/\/ no access to p1.internal.* and p2.* classes\n-    permission java.io.FilePermission \"mods1\/p1\/*\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-};\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/modules\/policy.denied","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -1,25 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-module m3 {\n-}\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/modules\/src\/m3\/module-info.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p3;\n-\n-import java.io.FilePermission;\n-import java.lang.module.Configuration;\n-import java.lang.module.ModuleFinder;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-import java.util.Set;\n-\n-public class NoAccess {\n-    private static final Module M3 = NoAccess.class.getModule();\n-    private static final Path MODS_DIR1 = Paths.get(\"mods1\");\n-    private static final Path MODS_DIR2 = Paths.get(\"mods2\");\n-    public static void main(String[] args) throws Exception {\n-        \/\/ disable security manager until Class.forName is called.\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            System.setSecurityManager(null);\n-        }\n-\n-        ModuleFinder finder = ModuleFinder.of(Paths.get(\"mods1\"), Paths.get(\"mods2\"));\n-\n-        ModuleLayer bootLayer = ModuleLayer.boot();\n-        Configuration parent = bootLayer.configuration();\n-\n-        Configuration cf = parent.resolveAndBind(finder,\n-                                                 ModuleFinder.of(),\n-                                                 Set.of(\"m1\", \"m2\"));\n-\n-        ClassLoader scl = ClassLoader.getSystemClassLoader();\n-        ModuleLayer layer = bootLayer.defineModulesWithManyLoaders(cf, scl);\n-\n-        if (sm != null) {\n-            System.setSecurityManager(sm);\n-        }\n-\n-        Module m1 = bootLayer.findModule(\"m1\").get();\n-        Module m2 = bootLayer.findModule(\"m2\").get();\n-        Module m3 = bootLayer.findModule(\"m3\").get();\n-\n-        findClass(m1, \"p1.internal.B\");\n-        findClass(m2, \"p2.C\");\n-        findClass(m3, \"p3.internal.Foo\");\n-\n-        \/\/ permissions granted\n-        findClass(m1, \"p1.A\");\n-        findClass(m1, \"p1.internal.B\");\n-        findClass(m2, \"p2.C\");\n-        findClass(m3, \"p3.internal.Foo\");\n-\n-\n-        \/\/ m1 and m2 from a different layer\n-        m1 = layer.findModule(\"m1\").get();\n-        m2 = layer.findModule(\"m2\").get();\n-        m3 = layer.findModule(\"m3\").get();\n-\n-        findClass(m1, \"p1.A\");\n-        findClass(m3, \"p3.internal.Foo\");\n-\n-        \/\/ no permission\n-        Path path = MODS_DIR1.resolve(\"p1\").resolve(\"internal\").resolve(\"B.class\");\n-        findClass(m1, \"p1.internal.B\", new FilePermission(path.toString(), \"read\"));\n-        path = MODS_DIR2.resolve(\"p2\").resolve(\"C.class\");\n-        findClass(m2, \"p2.C\", new FilePermission(path.toString(), \"read\"));\n-    }\n-\n-    static Class<?> findClass(Module module, String cn) {\n-        return findClass(module, cn, null);\n-    }\n-\n-    static Class<?> findClass(Module module, String cn, Permission perm) {\n-        try {\n-            Class<?> c = Class.forName(module, cn);\n-            if (c == null) {\n-                throw new RuntimeException(cn + \" not found in \" + module);\n-            }\n-            if (c.getModule() != module) {\n-                throw new RuntimeException(c.getModule() + \" != \" + module);\n-            }\n-            return c;\n-        } catch (AccessControlException e) {\n-            if (e.getPermission().equals(perm))\n-                return null;\n-            throw e;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/modules\/src\/m3\/p3\/NoAccess.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p3;\n-\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-\n-\/**\n- * Verify RuntimePermission(\"getClassLoader\") is needed to load\n- * a class in another module\n- *\/\n-public class NoGetClassLoaderAccess {\n-    private static final Module m3 = NoGetClassLoaderAccess.class.getModule();\n-    private static final Permission GET_CLASSLOADER_PERMISSION = new RuntimePermission(\"getClassLoader\");\n-\n-    public static void main(String[] args) throws Exception {\n-        ModuleLayer boot = ModuleLayer.boot();\n-\n-        System.setSecurityManager(new SecurityManager());\n-        Module m1 = boot.findModule(\"m1\").get();\n-        Module m2 = boot.findModule(\"m2\").get();\n-        findClass(m1, \"p1.A\");\n-        findClass(m1, \"p1.internal.B\");\n-        findClass(m2, \"p2.C\");\n-        findClass(m3, \"p3.internal.Foo\");\n-    }\n-\n-    static Class<?> findClass(Module module, String cn) {\n-        try {\n-            Class<?> c = Class.forName(module, cn);\n-            if (c == null) {\n-                throw new RuntimeException(cn + \" not found in \" + module);\n-            }\n-            if (c.getModule() != module) {\n-                throw new RuntimeException(c.getModule() + \" != \" + module);\n-            }\n-            return c;\n-        } catch (AccessControlException e) {\n-            if (module != m3) {\n-                if (e.getPermission().equals(GET_CLASSLOADER_PERMISSION))\n-                    return null;\n-            }\n-            throw e;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/modules\/src\/m3\/p3\/NoGetClassLoaderAccess.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p3.internal;\n-\n-public class Foo {\n-}\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/modules\/src\/m3\/p3\/internal\/Foo.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,10 +25,0 @@\n-import java.lang.reflect.ReflectPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.util.Arrays;\n-import java.util.Enumeration;\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -40,3 +30,3 @@\n- *          set accessible if the right permission is granted; this test\n- *          also verifies that Class.classLoader final private field is\n- *          hidden from reflection access.\n+ *          set accessible if package java.lang is open to unnamed module;\n+ *          this test also verifies that Class.classLoader final private field\n+ *          is hidden from reflection access.\n@@ -44,2 +34,1 @@\n- * @run main\/othervm ClassDeclaredFieldsTest UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow ClassDeclaredFieldsTest SECURE\n+ * @run main\/othervm ClassDeclaredFieldsTest\n@@ -50,10 +39,0 @@\n-\n-    \/\/ Test with or without a security manager\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void run() throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            Configure.setUp(this);\n-            test(this);\n-        }\n-    }\n@@ -65,10 +44,0 @@\n-        if (args == null || args.length == 0) {\n-            args = new String[] { \"SECURE\" };\n-        } else if (args.length != 1) {\n-            throw new IllegalArgumentException(\"Only one arg expected: \"\n-                    + Arrays.asList(args));\n-        }\n-        TestCase.valueOf(args[0]).run();\n-    }\n-\n-    static void test(TestCase test) {\n@@ -89,75 +58,1 @@\n-        System.out.println(\"Passed \"+test);\n-    }\n-\n-    \/\/ A helper class to configure the security manager for the test,\n-    \/\/ and bypass it when needed.\n-    static class Configure {\n-        static Policy policy = null;\n-        static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-            @Override\n-            protected AtomicBoolean initialValue() {\n-                return  new AtomicBoolean(false);\n-            }\n-        };\n-        static void setUp(TestCase test) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE, allowAll);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    throw new InternalError(\"No such testcase: \" + test);\n-            }\n-        }\n-        static void doPrivileged(Runnable run) {\n-            allowAll.get().set(true);\n-            try {\n-                run.run();\n-            } finally {\n-                allowAll.get().set(false);\n-            }\n-        }\n-    }\n-\n-    \/\/ A Helper class to build a set of permissions.\n-    static final class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n+        System.out.println(\"Passed\");\n@@ -165,42 +60,0 @@\n-\n-    \/\/ Policy for the test...\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowAll; \/\/ actually: this should be in a thread locale\n-        public SimplePolicy(TestCase test, ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowAll = allowAll;\n-            \/\/ we don't actually need any permission to create our\n-            \/\/ FileHandlers because we're passing invalid parameters\n-            \/\/ which will make the creation fail...\n-            permissions = new Permissions();\n-            permissions.add(new RuntimePermission(\"accessDeclaredMembers\"));\n-            permissions.add(new ReflectPermission(\"suppressAccessChecks\"));\n-\n-            \/\/ these are used for configuring the test itself...\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get().get()) return allPermissions.implies(permission);\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/Class\/getDeclaredField\/ClassDeclaredFieldsTest.java","additions":6,"deletions":153,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.io.FilePermission;\n@@ -33,1 +32,0 @@\n-import java.lang.reflect.ReflectPermission;\n@@ -39,6 +37,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -48,1 +40,0 @@\n-import java.util.Enumeration;\n@@ -56,2 +47,0 @@\n-import java.util.PropertyPermission;\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -67,1 +56,1 @@\n- *          be set accessible if the right permission is granted; this test\n+ *          be set accessible; this test\n@@ -71,2 +60,1 @@\n- * @run main\/othervm --add-modules=ALL-SYSTEM FieldSetAccessibleTest UNSECURE\n- * @run main\/othervm --add-modules=ALL-SYSTEM -Djava.security.manager=allow FieldSetAccessibleTest SECURE\n+ * @run main\/othervm --add-modules=ALL-SYSTEM FieldSetAccessibleTest\n@@ -152,1 +140,1 @@\n-     *     SECURE|UNSECURE [startIndex (default=0)] [maxSize (default=Long.MAX_VALUE)]\n+     *     [startIndex (default=0)] [maxSize (default=Long.MAX_VALUE)]\n@@ -158,2 +146,2 @@\n-            args = new String[] {\"SECURE\", \"0\"};\n-        } else if (args.length > 3) {\n+            args = new String[] {\"0\"};\n+        } else if (args.length > 2) {\n@@ -164,2 +152,2 @@\n-            if (args.length > 1) {\n-                startIndex = Long.parseLong(args[1]);\n+            if (args.length > 0) {\n+                startIndex = Long.parseLong(args[0]);\n@@ -167,1 +155,1 @@\n-                    throw new IllegalArgumentException(\"startIndex args[1]: \"\n+                    throw new IllegalArgumentException(\"startIndex args[0]: \"\n@@ -171,2 +159,2 @@\n-            if (args.length > 2) {\n-                maxSize = Long.parseLong(args[2]);\n+            if (args.length > 1) {\n+                maxSize = Long.parseLong(args[1]);\n@@ -179,1 +167,1 @@\n-            TestCase.valueOf(args[0]).run();\n+            test(listAllClassNames());\n@@ -186,6 +174,0 @@\n-    public static void run(TestCase test) {\n-        System.out.println(\"Testing \" + test);\n-        test(listAllClassNames());\n-        System.out.println(\"Passed \" + test);\n-    }\n-\n@@ -348,142 +330,0 @@\n-\n-    \/\/ Test with or without a security manager\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void run() throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            Configure.setUp(this);\n-            FieldSetAccessibleTest.run(this);\n-        }\n-    }\n-\n-    \/\/ A helper class to configure the security manager for the test,\n-    \/\/ and bypass it when needed.\n-    static class Configure {\n-        static Policy policy = null;\n-        static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-            @Override\n-            protected AtomicBoolean initialValue() {\n-                return  new AtomicBoolean(false);\n-            }\n-        };\n-        static void setUp(TestCase test) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE, allowAll);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    throw new InternalError(\"No such testcase: \" + test);\n-            }\n-        }\n-        static void doPrivileged(Runnable run) {\n-            allowAll.get().set(true);\n-            try {\n-                run.run();\n-            } finally {\n-                allowAll.get().set(false);\n-            }\n-        }\n-    }\n-\n-    \/\/ A Helper class to build a set of permissions.\n-    static final class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    \/\/ Policy for the test...\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowAll;\n-        public SimplePolicy(TestCase test, ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowAll = allowAll;\n-\n-            \/\/ Permission needed by the tested code exercised in the test\n-            permissions = new Permissions();\n-            permissions.add(new RuntimePermission(\"fileSystemProvider\"));\n-            permissions.add(new RuntimePermission(\"createClassLoader\"));\n-            permissions.add(new RuntimePermission(\"closeClassLoader\"));\n-            permissions.add(new RuntimePermission(\"getClassLoader\"));\n-            permissions.add(new RuntimePermission(\"accessDeclaredMembers\"));\n-            permissions.add(new RuntimePermission(\"accessSystemModules\"));\n-            permissions.add(new ReflectPermission(\"suppressAccessChecks\"));\n-            permissions.add(new PropertyPermission(\"*\", \"read\"));\n-            permissions.add(new FilePermission(\"<<ALL FILES>>\", \"read\"));\n-\n-            \/\/ these are used for configuring the test itself...\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get().get()) return allPermissions.implies(permission);\n-            if (permissions.implies(permission)) return true;\n-            if (permission instanceof java.lang.RuntimePermission) {\n-                if (permission.getName().startsWith(\"accessClassInPackage.\")) {\n-                    \/\/ add these along to the set of permission we have, when we\n-                    \/\/ discover that we need them.\n-                    permissions.add(permission);\n-                    return true;\n-                }\n-            }\n-            if (DEFAULT_POLICY.implies(domain, permission)) return true;\n-            return false;\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/Class\/getDeclaredField\/FieldSetAccessibleTest.java","additions":12,"deletions":172,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8014678\n- * @run main EnclosingConstructorWithSecurityManager\n- * @run main\/othervm -Djava.security.manager=allow EnclosingConstructorWithSecurityManager \"WithSecurityManager\"\n- *\/\n-\n-public class EnclosingConstructorWithSecurityManager {\n-    public static void main(String[] args) {\n-        if (args.length == 1) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n-        new Inner();\n-        Inner.theInner.getEnclosingConstructor();\n-    }\n-\n-    public static class Inner {\n-        public static Class<?> theInner;\n-\n-        public Inner() {\n-            Object o = new Object() {\n-            };\n-            Inner.theInner = o.getClass();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingConstructor\/EnclosingConstructorWithSecurityManager.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8014678\n- * @run main EnclosingMethodWithSecurityManager\n- * @run main\/othervm -Djava.security.manager=allow EnclosingMethodWithSecurityManager \"WithSecurityManager\"\n- *\/\n-\n-public class EnclosingMethodWithSecurityManager {\n-    public static void main(String[] args) {\n-        if (args.length == 1) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n-        new Inner().setTheInner();\n-        Inner.theInner.getEnclosingMethod();\n-    }\n-\n-    public static class Inner {\n-        public static Class<?> theInner;\n-\n-        public void setTheInner() {\n-            Object o = new Object() {\n-            };\n-            Inner.theInner = o.getClass();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingMethod\/EnclosingMethodWithSecurityManager.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -231,11 +231,0 @@\n-        \/\/ SecurityManager case\n-        System.setSecurityManager(new SecurityManager());\n-\n-        assertNull(Main.class.getResource(\"\/\" + NAME));\n-        assertNull(p1.Main.getResource(\"\/\" + NAME));\n-        assertNull(p2.Main.getResource(\"\/\" + NAME));\n-\n-        assertNull(Main.class.getResourceAsStream(\"\/\" + NAME));\n-        assertNull(p1.Main.getResourceAsStream(\"\/\" + NAME));\n-        assertNull(p2.Main.getResourceAsStream(\"\/\" + NAME));\n-\n","filename":"test\/jdk\/java\/lang\/Class\/getResource\/Main.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,0 @@\n-                              \"-Djava.security.manager=allow\",\n","filename":"test\/jdk\/java\/lang\/Class\/getResource\/ResourcesTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6636650\n- * @summary Uninitialized class loaders should not be a parent of other\n- *          class loaders.\n- * @run main\/othervm -Djava.security.manager=allow UninitializedParent\n- *\/\n-\n-\n-import java.net.*;\n-\n-public class UninitializedParent {\n-    private static ClassLoader loader;\n-    public static void main(String[] args) throws Exception {\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ Create an uninitialized class loader\n-        try {\n-            new ClassLoader(null) {\n-                @Override\n-                protected void finalize() {\n-                    loader = this;\n-                }\n-            };\n-        } catch (SecurityException exc) {\n-            \/\/ Expected\n-        }\n-        System.gc();\n-        System.runFinalization();\n-\n-        \/\/ if 'loader' isn't null, need to ensure that it can't be used as\n-        \/\/ parent\n-        if (loader != null) {\n-            try {\n-                \/\/ Create a class loader with 'loader' being the parent\n-                URLClassLoader child = URLClassLoader.newInstance\n-                    (new URL[0], loader);\n-                throw new RuntimeException(\"Test Failed!\");\n-            } catch (SecurityException se) {\n-                System.out.println(\"Test Passed: Exception thrown\");\n-            }\n-        } else {\n-            System.out.println(\"Test Passed: Loader is null\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/UninitializedParent.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run main\/othervm\/policy=test.policy -Djava.security.manager ClassForNameLeak\n+ * @run main\/othervm ClassForNameLeak\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/forNameLeak\/ClassForNameLeak.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-grant {\n-  permission java.io.FilePermission \"<<ALL FILES>>\", \"read, write, delete\";\n-  permission java.lang.RuntimePermission \"createClassLoader\";\n-  permission java.lang.RuntimePermission \"getClassLoader\";\n-  permission java.lang.RuntimePermission \"modifyThread\";\n-  permission java.util.PropertyPermission \"*\", \"read\"; \/* for Utils *\/\n-};\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/forNameLeak\/test.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -283,12 +283,0 @@\n-\n-        \/\/ SecurityManager case\n-        System.setSecurityManager(new SecurityManager());\n-\n-        assertNull(Main.class.getClassLoader().getResource(\"\/\" + NAME));\n-        assertNull(p1.Main.getResourceInClassLoader(\"\/\" + NAME));\n-        assertNull(p2.Main.getResourceInClassLoader(\"\/\" + NAME));\n-\n-        assertNull(Main.class.getClassLoader().getResourceAsStream(\"\/\" + NAME));\n-        assertNull(p1.Main.getResourceAsStreamInClassLoader(\"\/\" + NAME));\n-        assertNull(p2.Main.getResourceAsStreamInClassLoader(\"\/\" + NAME));\n-\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/getResource\/modules\/Main.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,0 @@\n-                              \"-Djava.security.manager=allow\",\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/getResource\/modules\/ResourcesTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,299 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n- \/*\n- * @test\n- * @bug 8168423\n- * @summary Different types of ClassLoader running with(out) SecurityManager and\n- *          (in)valid security policy file.\n- * @enablePreview\n- * @modules java.base\/jdk.internal.module\n- * @library \/test\/lib\n- * @build jdk.test.lib.util.JarUtils\n- *        jdk.test.lib.util.ModuleInfoWriter\n- * @build TestClassLoader TestClient\n- * @run main ClassLoaderTest -noPolicy\n- * @run main ClassLoaderTest -validPolicy\n- * @run main ClassLoaderTest -invalidPolicy\n- * @run main ClassLoaderTest -noPolicy      -customSCL\n- * @run main ClassLoaderTest -validPolicy   -customSCL\n- * @run main ClassLoaderTest -invalidPolicy -customSCL\n- *\/\n-import java.io.File;\n-import java.io.OutputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.stream.Stream;\n-import java.lang.module.ModuleDescriptor;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.util.JarUtils;\n-import jdk.test.lib.util.ModuleInfoWriter;\n-\n-public class ClassLoaderTest {\n-\n-    private static final String SRC = System.getProperty(\"test.src\");\n-    private static final Path TEST_CLASSES =\n-            Paths.get(System.getProperty(\"test.classes\"));\n-    private static final Path ARTIFACT_DIR = Paths.get(\"jars\");\n-    private static final Path VALID_POLICY = Paths.get(SRC, \"valid.policy\");\n-    private static final Path INVALID_POLICY\n-            = Paths.get(SRC, \"malformed.policy\");\n-    \/*\n-     * Here is the naming convention followed for each jar.\n-     * cl.jar   - Regular custom class loader jar.\n-     * mcl.jar  - Modular custom class loader jar.\n-     * c.jar    - Regular client jar.\n-     * mc.jar   - Modular client jar.\n-     * amc.jar  - Modular client referring automated custom class loader jar.\n-     *\/\n-    private static final Path CL_JAR = ARTIFACT_DIR.resolve(\"cl.jar\");\n-    private static final Path MCL_JAR = ARTIFACT_DIR.resolve(\"mcl.jar\");\n-    private static final Path C_JAR = ARTIFACT_DIR.resolve(\"c.jar\");\n-    private static final Path MC_JAR = ARTIFACT_DIR.resolve(\"mc.jar\");\n-    private static final Path AMC_JAR = ARTIFACT_DIR.resolve(\"amc.jar\");\n-\n-    \/\/ Expected output messages\n-    private static final String MISSING_MODULE =\n-            \"Module cl not found, required by mc\";\n-    private static final String POLICY_ERROR =\n-            \"java.security.policy: error parsing file\";\n-    private static final String SYSTEM_CL_MSG =\n-            \"jdk.internal.loader.ClassLoaders$AppClassLoader\";\n-    private static final String CUSTOM_CL_MSG = \"cl.TestClassLoader\";\n-\n-    \/\/ Member vars\n-    private final boolean useSCL;       \/\/ Use default system loader, or custom\n-    private final String smMsg;         \/\/ Security manager message, or \"\"\n-    private final String autoAddModArg; \/\/ Flag to add cl modules, or \"\"\n-    private final String addmodArg;     \/\/ Flag to add mcl modules, or \"\"\n-    private final String expectedStatus;\/\/ Expected exit status from client\n-    private final String expectedMsg;   \/\/ Expected output message from client\n-\n-    \/\/ Common set of VM arguments used in all test cases\n-    private final List<String> commonArgs;\n-\n-    public ClassLoaderTest(Path policy, boolean useSCL) {\n-        this.useSCL = useSCL;\n-\n-        List<String> argList = new LinkedList<>();\n-        argList.add(\"-Duser.language=en\");\n-        argList.add(\"-Duser.region=US\");\n-\n-        boolean malformedPolicy = false;\n-        if (policy == null) {\n-            smMsg = \"Without SecurityManager\";\n-        } else {\n-            malformedPolicy = policy.equals(INVALID_POLICY);\n-            argList.add(\"-Djava.security.manager\");\n-            argList.add(\"-Djava.security.policy=\" +\n-                    policy.toFile().getAbsolutePath());\n-            smMsg = \"With SecurityManager\";\n-        }\n-\n-        if (useSCL) {\n-            autoAddModArg = \"\";\n-            addmodArg = \"\";\n-        } else {\n-            argList.add(\"-Djava.system.class.loader=cl.TestClassLoader\");\n-            autoAddModArg = \"--add-modules=cl\";\n-            addmodArg = \"--add-modules=mcl\";\n-        }\n-\n-        if (malformedPolicy) {\n-            expectedStatus = \"FAIL\";\n-            expectedMsg = POLICY_ERROR;\n-        } else if (useSCL) {\n-            expectedStatus = \"PASS\";\n-            expectedMsg = SYSTEM_CL_MSG;\n-        } else {\n-            expectedStatus = \"PASS\";\n-            expectedMsg = CUSTOM_CL_MSG;\n-        }\n-        commonArgs = Collections.unmodifiableList(argList);\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        Path policy;\n-        if (args[0].equals(\"-noPolicy\")) {\n-            policy = null;\n-        } else if (args[0].equals(\"-validPolicy\")) {\n-            policy = VALID_POLICY;\n-        } else if (args[0].equals(\"-invalidPolicy\")) {\n-            policy = INVALID_POLICY;\n-        } else {\n-            throw new RuntimeException(\"Unknown policy arg: \" + args[0]);\n-        }\n-\n-        boolean useSystemLoader = true;\n-        if (args.length > 1) {\n-            if (args[1].equals(\"-customSCL\")) {\n-                useSystemLoader = false;\n-            } else {\n-                throw new RuntimeException(\"Unknown custom loader arg: \" + args[1]);\n-            }\n-        }\n-\n-        ClassLoaderTest test = new ClassLoaderTest(policy, useSystemLoader);\n-        setUp();\n-        test.processForPolicyFile();\n-    }\n-\n-    \/**\n-     * Test cases are based on the following logic,\n-     *  given: a policyFile in {none, valid, malformed} and\n-     *         a classLoader in {SystemClassLoader, CustomClassLoader}:\n-     *  for (clientModule : {\"NAMED\", \"UNNAMED\"}) {\n-     *      for (classLoaderModule : {\"NAMED\", \"UNNAMED\"}) {\n-     *          Create and run java command for each possible Test case\n-     *      }\n-     *  }\n-     *\/\n-    private void processForPolicyFile() throws Exception {\n-        final String regLoaderLoc = CL_JAR.toFile().getAbsolutePath();\n-        final String modLoadrLoc = MCL_JAR.toFile().getAbsolutePath();\n-        final String regClientLoc = C_JAR.toFile().getAbsolutePath();\n-        final String modClientLoc = MC_JAR.toFile().getAbsolutePath();\n-        final String autoModCloc = AMC_JAR.toFile().getAbsolutePath();\n-        final String separator = File.pathSeparator;\n-\n-        \/\/ NAMED-NAMED:\n-        System.out.println(\"Case:- Modular Client and \" +\n-                ((useSCL) ? \"SystemClassLoader\"\n-                        : \"Modular CustomClassLoader\") + \" \" + smMsg);\n-        execute(\"--module-path\", modClientLoc + separator + modLoadrLoc, \"-m\",\n-                \"mc\/c.TestClient\");\n-\n-        \/\/ NAMED-UNNAMED:\n-        System.out.println(\"Case:- Modular Client and \" + ((useSCL)\n-                ? \"SystemClassLoader\"\n-                : \"Unknown modular CustomClassLoader\") + \" \" + smMsg);\n-        execute(new String[] {\"--module-path\", autoModCloc, \"-cp\", regLoaderLoc,\n-                \"-m\", \"mc\/c.TestClient\"},\n-                \"FAIL\", MISSING_MODULE);\n-\n-        \/\/ UNNAMED-NAMED:\n-        System.out.println(\"Case:- Unknown modular Client and \" +\n-                ((useSCL) ? \"SystemClassLoader\"\n-                      : \"Modular CustomClassLoader\") + \" \" + smMsg);\n-        execute(\"-cp\", regClientLoc, \"--module-path\", modLoadrLoc, addmodArg,\n-                \"c.TestClient\");\n-\n-        \/\/ UNNAMED-UNNAMED:\n-        System.out.println(\"Case:- Unknown modular Client and \" +\n-                ((useSCL) ? \"SystemClassLoader\"\n-                        : \"Unknown modular CustomClassLoader\") + \" \" + smMsg);\n-        execute(\"-cp\", regClientLoc + separator + regLoaderLoc, \"c.TestClient\");\n-\n-        \/\/ Regular jars in module-path\n-        System.out.println(\"Case:- Regular Client and \" + ((useSCL)\n-                ? \"SystemClassLoader\"\n-                : \"Unknown modular CustomClassLoader\") +\n-                \" inside --module-path \" + smMsg);\n-        execute(\"--module-path\", regClientLoc + separator + regLoaderLoc,\n-                autoAddModArg, \"-m\", \"c\/c.TestClient\");\n-\n-        \/\/ Modular jars in class-path\n-        System.out.println(\"Case:- Modular Client and \" +\n-                ((useSCL) ? \"SystemClassLoader\"\n-                        : \"Modular CustomClassLoader\") + \" in -cp \" + smMsg);\n-        execute(\"-cp\", modClientLoc + separator + modLoadrLoc, \"c.TestClient\");\n-    }\n-\n-    private void execute(String... args) throws Exception {\n-        execute(args, this.expectedStatus, this.expectedMsg);\n-    }\n-\n-    \/**\n-     * Execute with command arguments and process the result.\n-     *\/\n-    private void execute(String[] args, String status, String msg) throws Exception {\n-\n-        \/\/ Combine with commonArgs, and perform sanity check\n-        String[] safeArgs = Stream.concat(commonArgs.stream(), Stream.of(args))\n-                .filter(s -> {\n-                    if (s.contains(\" \")) { throw new RuntimeException(\"No spaces in args\");}\n-                    return !s.isEmpty();\n-                }).toArray(String[]::new);\n-        String out = ProcessTools.executeTestJava(safeArgs).getOutput();\n-        \/\/ Handle response.\n-        if (\"PASS\".equals(status) && out.contains(msg)) {\n-            System.out.println(\"PASS: Expected Result: \" + msg);\n-        } else if (\"FAIL\".equals(status) && out.contains(msg)) {\n-            System.out.printf(\"PASS: Expected Failure: \" +  msg);\n-        } else if (out.contains(\"Exception\") || out.contains(\"Error\")) {\n-            System.out.printf(\"OUTPUT: %s\", out);\n-            throw new RuntimeException(\"FAIL: Unknown Exception.\");\n-        } else {\n-            System.out.printf(\"OUTPUT: %s\", out);\n-            throw new RuntimeException(\"FAIL: Unknown Test case found\");\n-        }\n-    }\n-\n-    \/**\n-     * Creates regular\/modular jar files for TestClient and TestClassLoader.\n-     *\/\n-    private static void setUp() throws Exception {\n-\n-        \/\/ Generate regular jar files for TestClient and TestClassLoader\n-        JarUtils.createJarFile(CL_JAR, TEST_CLASSES,\n-                               \"cl\/TestClassLoader.class\");\n-        JarUtils.createJarFile(C_JAR, TEST_CLASSES,\n-                               \"c\/TestClient.class\");\n-        \/\/ Generate modular jar files for TestClient and TestClassLoader with\n-        \/\/ their corresponding ModuleDescriptor.\n-        Files.copy(CL_JAR, MCL_JAR,\n-                StandardCopyOption.REPLACE_EXISTING);\n-        updateModuleDescr(MCL_JAR, ModuleDescriptor.newModule(\"mcl\")\n-                .exports(\"cl\").requires(\"java.base\").build());\n-        Files.copy(C_JAR, MC_JAR,\n-                StandardCopyOption.REPLACE_EXISTING);\n-        updateModuleDescr(MC_JAR, ModuleDescriptor.newModule(\"mc\")\n-                .exports(\"c\").requires(\"java.base\").requires(\"mcl\").build());\n-        Files.copy(C_JAR, AMC_JAR,\n-                StandardCopyOption.REPLACE_EXISTING);\n-        updateModuleDescr(AMC_JAR, ModuleDescriptor.newModule(\"mc\")\n-                .exports(\"c\").requires(\"java.base\").requires(\"cl\").build());\n-    }\n-\n-    \/**\n-     * Update regular jars and include module-info.class inside it to make\n-     * modular jars.\n-     *\/\n-    private static void updateModuleDescr(Path jar, ModuleDescriptor mDescr)\n-            throws Exception {\n-        if (mDescr != null) {\n-            Path dir = Files.createTempDirectory(\"tmp\");\n-            Path mi = dir.resolve(\"module-info.class\");\n-            try (OutputStream out = Files.newOutputStream(mi)) {\n-                ModuleInfoWriter.write(mDescr, out);\n-            }\n-            System.out.format(\"Adding 'module-info.class' to jar '%s'%n\", jar);\n-            JarUtils.updateJarFile(jar, dir);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/securityManager\/ClassLoaderTest.java","additions":0,"deletions":299,"binary":false,"changes":299,"status":"deleted"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package cl;\n-\n-public class TestClassLoader extends ClassLoader {\n-\n-    \/**\n-     * This constructor is used to set the parent ClassLoader\n-     *\/\n-    public TestClassLoader(ClassLoader parent) {\n-        super(parent);\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/securityManager\/TestClassLoader.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package c;\n-\n-public class TestClient {\n-\n-    public static void main(String[] args) {\n-\n-        \/\/ Initialize policy file.\n-        System.getProperty(\"test.src\");\n-        System.out.printf(\"ContextClassLoader: %s%n\",\n-                Thread.currentThread().getContextClassLoader().toString());\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/securityManager\/TestClient.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    xyz;\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/securityManager\/malformed.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant codeBase \"file:.\/jars\/*\" {\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/securityManager\/valid.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,145 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @modules jdk.compiler\n- * @summary Test java.lang.Module methods that specify permission checks\n- * @run main\/othervm -Djava.security.manager=allow -Djava.security.policy=${test.src}\/allow.policy WithSecurityManager allow\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager deny\n- *\/\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.lang.module.Configuration;\n-import java.lang.module.ModuleFinder;\n-import java.lang.module.ModuleReference;\n-import java.util.Collections;\n-import java.util.Optional;\n-import java.util.Set;\n-\n-\/**\n- * Test java.lang.Module methods that specify permission checks.\n- *\/\n-\n-public class WithSecurityManager {\n-\n-    \/\/ a module that will be loaded into a child layer\n-    static final String ANOTHER_MODULE          = \"jdk.compiler\";\n-    static final String ANOTHER_MODULE_RESOURCE = \"com\/sun\/tools\/javac\/Main.class\";\n-\n-    public static void main(String[] args) throws IOException {\n-        boolean allow = args[0].equals(\"allow\");\n-\n-        \/\/ base module, in the boot layer\n-        Module base = Object.class.getModule();\n-\n-        \/\/ another module, in a child layer\n-        Module other = loadModuleInChildLayer(ANOTHER_MODULE);\n-        assertTrue(other.getLayer() != ModuleLayer.boot());\n-\n-        System.setSecurityManager(new SecurityManager());\n-\n-        test(base, \"java\/lang\/Object.class\", allow);\n-        test(other, ANOTHER_MODULE_RESOURCE, allow);\n-    }\n-\n-    \/**\n-     * Test the permission checks by invoking methods on the given module.\n-     *\n-     * If {@code allow} is {@code true} then the permission checks should succeed.\n-     *\/\n-    static void test(Module m, String name, boolean allow) throws IOException {\n-\n-        \/\/ test Module::getClassLoader\n-        System.out.format(\"Test getClassLoader on %s ...%n\", m);\n-        try {\n-            ClassLoader cl = m.getClassLoader();\n-            System.out.println(cl);\n-            if (!allow)\n-                assertTrue(\"getClassLoader should have failed\", false);\n-        } catch (SecurityException e) {\n-            System.out.println(e + \" thrown\");\n-            if (allow)\n-                throw e;\n-        }\n-\n-        \/\/ test Module::getResourceAsStream\n-        System.out.format(\"Test getResourceAsStream(\\\"%s\\\") on %s ...%n\", name, m);\n-        try (InputStream in = m.getResourceAsStream(name)) {\n-            System.out.println(in);\n-            if (allow && (in == null))\n-                assertTrue(name + \" not found\", false);\n-            if (!allow && (in != null))\n-                assertTrue(name + \" should not be found\", false);\n-        }\n-\n-    }\n-\n-    \/**\n-     * Create a module layer that contains the given system module.\n-     *\/\n-    static Module loadModuleInChildLayer(String mn) {\n-        Optional<ModuleReference> omref = ModuleFinder.ofSystem().find(mn);\n-        assertTrue(\"module \" + mn + \" not a system module\", omref.isPresent());\n-\n-        \/\/ create a ModuleFinder that only finds this module\n-        ModuleReference mref = omref.get();\n-        ModuleFinder finder = new ModuleFinder() {\n-            @Override\n-            public Optional<ModuleReference> find(String name) {\n-                if (name.equals(mn))\n-                    return Optional.of(mref);\n-                else\n-                    return Optional.empty();\n-            }\n-\n-            @Override\n-            public Set<ModuleReference> findAll() {\n-                return Collections.singleton(mref);\n-            }\n-        };\n-\n-        \/\/ create a child configuration and layer with this module\n-        ModuleLayer bootLayer = ModuleLayer.boot();\n-        Configuration cf = bootLayer\n-            .configuration()\n-            .resolve(finder, ModuleFinder.of(), Set.of(ANOTHER_MODULE));\n-        ModuleLayer layer = bootLayer.defineModulesWithOneLoader(cf, null);\n-\n-        Optional<Module> om = layer.findModule(mn);\n-        assertTrue(\"module \" + mn + \" not in child layer\", om.isPresent());\n-        return om.get();\n-    }\n-\n-    static void assertTrue(String msg, boolean e) {\n-        if (!e)\n-            throw new RuntimeException(msg);\n-    }\n-\n-    static void assertTrue(boolean e) {\n-        if (!e)\n-            throw new RuntimeException();\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/ModuleTests\/WithSecurityManager.java","additions":0,"deletions":145,"binary":false,"changes":145,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-grant {\n-    permission java.lang.RuntimePermission \"getClassLoader\";\n-    permission java.lang.RuntimePermission \"accessSystemModules\";\n-    permission java.io.FilePermission \"${java.home}\/modules\/-\", \"read\";    \/\/ exploded build\n-};\n","filename":"test\/jdk\/java\/lang\/ModuleTests\/allow.policy","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- * @run main\/othervm\/native\/timeout=300 -Djava.security.manager=allow Basic\n- * @run main\/othervm\/native\/timeout=300 -Djava.security.manager=allow -Djdk.lang.Process.launchMechanism=fork Basic\n+ * @run main\/othervm\/native\/timeout=300 Basic\n+ * @run main\/othervm\/native\/timeout=300 -Djdk.lang.Process.launchMechanism=fork Basic\n@@ -51,1 +51,1 @@\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow -Djdk.lang.Process.launchMechanism=posix_spawn Basic\n+ * @run main\/othervm\/timeout=300 -Djdk.lang.Process.launchMechanism=posix_spawn Basic\n@@ -68,1 +68,0 @@\n-import java.security.*;\n@@ -1221,71 +1220,0 @@\n-\n-        \/\/----------------------------------------------------------------\n-        \/\/ Test security implications of I\/O redirection\n-        \/\/----------------------------------------------------------------\n-\n-        \/\/ Read access to current directory is always granted;\n-        \/\/ So create a tmpfile for input instead.\n-        final File tmpFile = File.createTempFile(\"Basic\", \"tmp\");\n-        setFileContents(tmpFile, \"standard input\");\n-\n-        final Policy policy = new Policy();\n-        Policy.setPolicy(policy);\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            final Permission xPermission\n-                = new FilePermission(\"<<ALL FILES>>\", \"execute\");\n-            final Permission rxPermission\n-                = new FilePermission(\"<<ALL FILES>>\", \"read,execute\");\n-            final Permission wxPermission\n-                = new FilePermission(\"<<ALL FILES>>\", \"write,execute\");\n-            final Permission rwxPermission\n-                = new FilePermission(\"<<ALL FILES>>\", \"read,write,execute\");\n-\n-            THROWS(SecurityException.class,\n-                   () -> { policy.setPermissions(xPermission);\n-                           redirectIO(pb, from(tmpFile), PIPE, PIPE);\n-                           pb.start();},\n-                   () -> { policy.setPermissions(rxPermission);\n-                           redirectIO(pb, PIPE, to(ofile), PIPE);\n-                           pb.start();},\n-                   () -> { policy.setPermissions(rxPermission);\n-                           redirectIO(pb, PIPE, PIPE, to(efile));\n-                           pb.start();});\n-\n-            {\n-                policy.setPermissions(rxPermission);\n-                redirectIO(pb, from(tmpFile), PIPE, PIPE);\n-                ProcessResults r = run(pb);\n-                equal(r.out(), \"standard output\");\n-                equal(r.err(), \"standard error\");\n-            }\n-\n-            {\n-                policy.setPermissions(wxPermission);\n-                redirectIO(pb, PIPE, to(ofile), to(efile));\n-                Process p = pb.start();\n-                new PrintStream(p.getOutputStream()).print(\"standard input\");\n-                p.getOutputStream().close();\n-                ProcessResults r = run(p);\n-                policy.setPermissions(rwxPermission);\n-                equal(fileContents(ofile), \"standard output\");\n-                equal(fileContents(efile), \"standard error\");\n-            }\n-\n-            {\n-                policy.setPermissions(rwxPermission);\n-                redirectIO(pb, from(tmpFile), to(ofile), to(efile));\n-                ProcessResults r = run(pb);\n-                policy.setPermissions(rwxPermission);\n-                equal(fileContents(ofile), \"standard output\");\n-                equal(fileContents(efile), \"standard error\");\n-            }\n-\n-        } finally {\n-            policy.setPermissions(new RuntimePermission(\"setSecurityManager\"));\n-            System.setSecurityManager(null);\n-            tmpFile.delete();\n-            ifile.delete();\n-            ofile.delete();\n-            efile.delete();\n-        }\n@@ -2350,83 +2278,0 @@\n-        \/\/----------------------------------------------------------------\n-        \/\/ Check for correct security permission behavior\n-        \/\/----------------------------------------------------------------\n-        final Policy policy = new Policy();\n-        Policy.setPolicy(policy);\n-        System.setSecurityManager(new SecurityManager());\n-\n-        try {\n-            \/\/ No permissions required to CREATE a ProcessBuilder\n-            policy.setPermissions(\/* Nothing *\/);\n-            new ProcessBuilder(\"env\").directory(null).directory();\n-            new ProcessBuilder(\"env\").directory(new File(\"dir\")).directory();\n-            new ProcessBuilder(\"env\").command(\"??\").command();\n-        } catch (Throwable t) { unexpected(t); }\n-\n-        THROWS(SecurityException.class,\n-               () -> { policy.setPermissions(\/* Nothing *\/);\n-                       System.getenv(\"foo\");},\n-               () -> { policy.setPermissions(\/* Nothing *\/);\n-                       System.getenv();},\n-               () -> { policy.setPermissions(\/* Nothing *\/);\n-                       new ProcessBuilder(\"echo\").start();},\n-               () -> { policy.setPermissions(\/* Nothing *\/);\n-                       Runtime.getRuntime().exec(\"echo\");},\n-               () -> { policy.setPermissions(\n-                               new RuntimePermission(\"getenv.bar\"));\n-                       System.getenv(\"foo\");});\n-\n-        try {\n-            policy.setPermissions(new RuntimePermission(\"getenv.foo\"));\n-            System.getenv(\"foo\");\n-\n-            policy.setPermissions(new RuntimePermission(\"getenv.*\"));\n-            System.getenv(\"foo\");\n-            System.getenv();\n-            new ProcessBuilder().environment();\n-        } catch (Throwable t) { unexpected(t); }\n-\n-\n-        final Permission execPermission\n-            = new FilePermission(\"<<ALL FILES>>\", \"execute\");\n-\n-        THROWS(SecurityException.class,\n-               () -> { \/\/ environment permission by itself insufficient\n-                       policy.setPermissions(new RuntimePermission(\"getenv.*\"));\n-                       ProcessBuilder pb = new ProcessBuilder(\"env\");\n-                       pb.environment().put(\"foo\",\"bar\");\n-                       pb.start();},\n-               () -> { \/\/ exec permission by itself insufficient\n-                       policy.setPermissions(execPermission);\n-                       ProcessBuilder pb = new ProcessBuilder(\"env\");\n-                       pb.environment().put(\"foo\",\"bar\");\n-                       pb.start();});\n-\n-        try {\n-            \/\/ Both permissions? OK.\n-            policy.setPermissions(new RuntimePermission(\"getenv.*\"),\n-                                  execPermission);\n-            ProcessBuilder pb = new ProcessBuilder(\"env\");\n-            pb.environment().put(\"foo\",\"bar\");\n-            Process p = pb.start();\n-            closeStreams(p);\n-        } catch (IOException e) { \/\/ OK\n-        } catch (Throwable t) { unexpected(t); }\n-\n-        try {\n-            \/\/ Don't need environment permission unless READING environment\n-            policy.setPermissions(execPermission);\n-            Runtime.getRuntime().exec(\"env\", new String[]{});\n-        } catch (IOException e) { \/\/ OK\n-        } catch (Throwable t) { unexpected(t); }\n-\n-        try {\n-            \/\/ Don't need environment permission unless READING environment\n-            policy.setPermissions(execPermission);\n-            new ProcessBuilder(\"env\").start();\n-        } catch (IOException e) { \/\/ OK\n-        } catch (Throwable t) { unexpected(t); }\n-\n-        \/\/ Restore \"normal\" state without a security manager\n-        policy.setPermissions(new RuntimePermission(\"setSecurityManager\"));\n-        System.setSecurityManager(null);\n-\n@@ -2707,32 +2552,0 @@\n-    \/\/----------------------------------------------------------------\n-    \/\/ A Policy class designed to make permissions fiddling very easy.\n-    \/\/----------------------------------------------------------------\n-    @SuppressWarnings(\"removal\")\n-    private static class Policy extends java.security.Policy {\n-        static final java.security.Policy DEFAULT_POLICY = java.security.Policy.getPolicy();\n-\n-        private Permissions perms;\n-\n-        public void setPermissions(Permission...permissions) {\n-            perms = new Permissions();\n-            for (Permission permission : permissions)\n-                perms.add(permission);\n-        }\n-\n-        public Policy() { setPermissions(\/* Nothing *\/); }\n-\n-        public PermissionCollection getPermissions(CodeSource cs) {\n-            return perms;\n-        }\n-\n-        public PermissionCollection getPermissions(ProtectionDomain pd) {\n-            return perms;\n-        }\n-\n-        public boolean implies(ProtectionDomain pd, Permission p) {\n-            return perms.implies(p) || DEFAULT_POLICY.implies(pd, p);\n-        }\n-\n-        public void refresh() {}\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":4,"deletions":191,"binary":false,"changes":195,"status":"modified"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright 2010 Google Inc.  All Rights Reserved.\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6980747 8297451\n- * @summary Check that Process-related classes have the proper\n- *     doPrivileged blocks, and can be initialized with an adversarial\n- *     security manager.\n- * @run main\/othervm -Djava.security.manager=allow SecurityManagerClinit\n- * @author Martin Buchholz\n- *\/\n-\n-import java.io.*;\n-import java.security.*;\n-\n-public class SecurityManagerClinit {\n-    private static class SimplePolicy extends Policy {\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        private Permissions perms;\n-\n-        public SimplePolicy(Permission... permissions) {\n-            perms = new Permissions();\n-            for (Permission permission : permissions)\n-                perms.add(permission);\n-        }\n-\n-        public boolean implies(ProtectionDomain pd, Permission p) {\n-            return perms.implies(p) || DEFAULT_POLICY.implies(pd, p);\n-        }\n-    }\n-\n-    \/\/ Security manager that unconditionally performs Thread Modify Access checks.\n-    @SuppressWarnings(\"removal\")\n-    private static class TMACSecurityManager extends SecurityManager {\n-        static final RuntimePermission MODIFY_THREAD_PERMISSION =\n-                new RuntimePermission(\"modifyThread\");\n-        @Override\n-        public void checkAccess(Thread thread) {\n-            checkPermission(MODIFY_THREAD_PERMISSION);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        String javaExe =\n-            System.getProperty(\"java.home\") +\n-            File.separator + \"bin\" + File.separator + \"java\";\n-\n-        final SimplePolicy policy =\n-            new SimplePolicy\n-            (new FilePermission(\"<<ALL FILES>>\", \"execute\"),\n-             new RuntimePermission(\"setSecurityManager\"),\n-             new RuntimePermission(\"modifyThread\"));\n-        Policy.setPolicy(policy);\n-\n-        System.setSecurityManager(new TMACSecurityManager());\n-\n-        try {\n-            String[] cmd = { javaExe, \"-version\" };\n-            Process p = Runtime.getRuntime().exec(cmd);\n-            p.getOutputStream().close();\n-            p.getInputStream().close();\n-            p.getErrorStream().close();\n-            p.waitFor();\n-        } finally {\n-            System.setSecurityManager(null);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/SecurityManagerClinit.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -1,245 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.FilePermission;\n-import java.io.IOException;\n-import java.lang.reflect.ReflectPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.security.SecurityPermission;\n-import java.util.Arrays;\n-import java.util.PropertyPermission;\n-\n-import org.testng.Assert;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.Test;\n-\n-\/*\n- * @test\n- * @run testng\/othervm -Djava.security.manager=allow PermissionTest\n- * @summary Test Permissions to access Info\n- *\/\n-\n-public class PermissionTest {\n-    \/**\n-     * Backing up policy.\n-     *\/\n-    protected static Policy policy;\n-\n-    \/**\n-     * Backing up security manager.\n-     *\/\n-    private static SecurityManager sm;\n-\n-    \/**\n-     * Current process handle.\n-     *\/\n-    private final ProcessHandle currentHndl;\n-\n-    PermissionTest() {\n-        policy = Policy.getPolicy();\n-        sm = System.getSecurityManager();\n-        currentHndl = ProcessHandle.current();\n-    }\n-\n-    @Test\n-    public void descendantsWithPermission() {\n-        Policy.setPolicy(new TestPolicy(new RuntimePermission(\"manageProcess\")));\n-        currentHndl.descendants();\n-    }\n-\n-    @Test\n-    public void allProcessesWithPermission() {\n-        Policy.setPolicy(new TestPolicy(new RuntimePermission(\"manageProcess\")));\n-        ProcessHandle.allProcesses();\n-    }\n-\n-    @Test\n-    public void childrenWithPermission() {\n-        Policy.setPolicy(new TestPolicy(new RuntimePermission(\"manageProcess\")));\n-        currentHndl.children();\n-    }\n-\n-    @Test\n-    public void currentWithPermission() {\n-        Policy.setPolicy(new TestPolicy(new RuntimePermission(\"manageProcess\")));\n-        ProcessHandle.current();\n-    }\n-\n-    @Test\n-    public void ofWithPermission() {\n-        Policy.setPolicy(new TestPolicy(new RuntimePermission(\"manageProcess\")));\n-        ProcessHandle.of(0);\n-    }\n-\n-    @Test\n-    public void parentWithPermission() {\n-        Policy.setPolicy(new TestPolicy(new RuntimePermission(\"manageProcess\")));\n-        currentHndl.parent();\n-    }\n-\n-    @Test\n-    public void processToHandleWithPermission() throws IOException {\n-        Policy.setPolicy(new TestPolicy(new RuntimePermission(\"manageProcess\")));\n-        Process p = null;\n-        try {\n-            ProcessBuilder pb = new ProcessBuilder(\"sleep\", \"30\");\n-            p = pb.start();\n-            ProcessHandle ph = p.toHandle();\n-            Assert.assertNotNull(ph, \"ProcessHandle expected from Process\");\n-        } finally {\n-            if (p != null) {\n-                p.destroy();\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Setup a policy that would reject ProcessHandle requests without Permissions ManageProcess.\n-     *\/\n-    public void noPermissionsSetup(){\n-        Policy.setPolicy(new TestPolicy());\n-        SecurityManager sm = new SecurityManager();\n-        System.setSecurityManager(sm);\n-    }\n-\n-    @Test(expectedExceptions = SecurityException.class)\n-    public void noPermissionAllChildren() {\n-        noPermissionsSetup();\n-        currentHndl.descendants();\n-    }\n-\n-    @Test(expectedExceptions = SecurityException.class)\n-    public void noPermissionAllProcesses() {\n-        noPermissionsSetup();\n-        ProcessHandle.allProcesses();\n-    }\n-\n-    @Test(expectedExceptions = SecurityException.class)\n-    public void noPermissionChildren() {\n-        noPermissionsSetup();\n-        currentHndl.children();\n-    }\n-\n-    @Test(expectedExceptions = SecurityException.class)\n-    public void noPermissionCurrent() {\n-        noPermissionsSetup();\n-        ProcessHandle.current();\n-    }\n-\n-    @Test(expectedExceptions = SecurityException.class)\n-    public void noPermissionOf() {\n-        noPermissionsSetup();\n-        ProcessHandle.of(0);\n-    }\n-\n-    @Test(expectedExceptions = SecurityException.class)\n-    public void noPermissionParent() {\n-        noPermissionsSetup();\n-        currentHndl.parent();\n-    }\n-\n-    @Test(expectedExceptions = SecurityException.class)\n-    public void noPermissionProcessToHandle() throws IOException {\n-        noPermissionsSetup();\n-        Process p = null;\n-        try {\n-            ProcessBuilder pb = new ProcessBuilder(\"sleep\", \"30\");\n-            p = pb.start();\n-            ProcessHandle ph = p.toHandle();\n-            Assert.assertNotNull(ph, \"ProcessHandle expected from Process\");\n-        } finally {\n-            if (p != null) {\n-                p.destroy();\n-            }\n-        }\n-    }\n-\n-    @AfterClass\n-    public void tearDownClass() throws Exception {\n-        System.setSecurityManager(sm);\n-        Policy.setPolicy(policy);\n-    }\n-}\n-\n-class TestPolicy extends Policy {\n-\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-    private final PermissionCollection permissions = new Permissions();\n-\n-    public TestPolicy() {\n-        setBasicPermissions();\n-    }\n-\n-    \/*\n-     * Defines the minimal permissions required by testNG and set security\n-     * manager permission when running these tests.\n-     *\/\n-    public void setBasicPermissions() {\n-        permissions.add(new SecurityPermission(\"getPolicy\"));\n-        permissions.add(new SecurityPermission(\"setPolicy\"));\n-        permissions.add(new RuntimePermission(\"getClassLoader\"));\n-        permissions.add(new RuntimePermission(\"setSecurityManager\"));\n-        permissions.add(new RuntimePermission(\"createSecurityManager\"));\n-        permissions.add(new PropertyPermission(\"user.dir\", \"read\"));\n-        permissions.add(new PropertyPermission(\"test.src\", \"read\"));\n-        permissions.add(new PropertyPermission(\"file.separator\", \"read\"));\n-        permissions.add(new PropertyPermission(\"line.separator\", \"read\"));\n-        permissions.add(new PropertyPermission(\"fileStringBuffer\", \"read\"));\n-        permissions.add(new PropertyPermission(\"dataproviderthreadcount\", \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.show.stack.frames\",\n-                \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.thread.affinity\", \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.memory.friendly\", \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.mode.dryrun\", \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.report.xml.name\", \"read\"));\n-        permissions.add(new PropertyPermission(\"testng.timezone\", \"read\"));\n-        permissions.add(new ReflectPermission(\"suppressAccessChecks\"));\n-        permissions.add(new FilePermission(\"<<ALL FILES>>\", \"execute\"));\n-    }\n-\n-    public TestPolicy(Permission... ps) {\n-        setBasicPermissions();\n-        Arrays.stream(ps).forEach(p -> permissions.add(p));\n-    }\n-\n-    @Override\n-    public PermissionCollection getPermissions(ProtectionDomain domain) {\n-        return permissions;\n-    }\n-\n-    @Override\n-    public PermissionCollection getPermissions(CodeSource codesource) {\n-        return permissions;\n-    }\n-\n-    @Override\n-    public boolean implies(ProtectionDomain domain, Permission perm) {\n-        return permissions.implies(perm) || DEFAULT_POLICY.implies(domain, perm);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/ProcessHandle\/PermissionTest.java","additions":0,"deletions":245,"binary":false,"changes":245,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Djava.security.manager=allow ExecCommand\n+ * @run testng\/othervm ExecCommand\n@@ -41,1 +41,0 @@\n-import java.security.AccessControlException;\n@@ -59,42 +58,0 @@\n-    static class SecurityMan extends SecurityManager {\n-        public static String unquote(String str)\n-        {\n-            int length = (str == null)\n-                ? 0\n-                : str.length();\n-\n-            if (length > 1\n-                && str.charAt(0) == '\\\"'\n-                && str.charAt(length - 1) == '\\\"')\n-            {\n-               return str.substring(1, length - 1);\n-            }\n-            return str;\n-        }\n-\n-        @Override public void checkExec(String cmd) {\n-            String ncmd = (new File(unquote(cmd))).getPath();\n-            if ( ncmd.equals(\".\\\\Program\")\n-              || ncmd.equals(\"\\\".\\\\Program\")\n-              || ncmd.equals(\".\\\\Program Files\\\\do.cmd\")\n-              || ncmd.equals(\".\\\\Program.cmd\")\n-              || ncmd.equals(\"cmd\"))\n-            {\n-                return;\n-            }\n-            super.checkExec(cmd);\n-        }\n-\n-        public void checkPermission(Permission perm) {\n-            if (perm instanceof RuntimePermission ||\n-                    perm instanceof java.lang.reflect.ReflectPermission)\n-                return;\n-            super.checkPermission(perm);\n-        };\n-        @Override public void checkRead(String file) {}       \/\/ TestNG reads files\n-        @Override public void checkWrite(String file) {}      \/\/ TestNG writes files\n-        @Override public void checkDelete(String file) {}\n-        @Override public void checkPropertiesAccess() {}\n-        @Override public void checkPropertyAccess(String name) {}  \/\/ TestNG reads properties\n-    }\n-\n@@ -109,1 +66,1 @@\n-        \/\/ Create files to be execute\n+        \/\/ Create files to be executed\n@@ -127,5 +84,4 @@\n-    private enum Mode {\n-        UNSET_NO_SM, \/\/ 0) no SM and default allowAmbiguousCommands; equivalent to true\n-        EMPTY_NO_SM, \/\/ 1) no SM and allowAmbiguousCommand is empty; equivalent to true\n-        FALSE_NO_SM, \/\/ 2) no SM and allowAmbiguousCommands = false\n-        EMPTY_SM,    \/\/ 3) SM and default allowAmbiguousCommands is empty; equivalent to false\n+    private enum AmbiguousMode {\n+        UNSET,      \/\/ 0) default allowAmbiguousCommands; equivalent to true\n+        EMPTY,      \/\/ 1) allowAmbiguousCommand is empty; equivalent to true\n+        FALSE,      \/\/ 2) allowAmbiguousCommands = false\n@@ -146,1 +102,0 @@\n-                                FileNotFoundException.class,\n@@ -153,1 +108,0 @@\n-                                FileNotFoundException.class,\n@@ -160,1 +114,0 @@\n-                                IOException.class,\n@@ -165,4 +118,1 @@\n-                        Arrays.asList(null,\n-                                null,\n-                                null,\n-                                AccessControlException.class)\n+                        Arrays.asList(null, null, null)\n@@ -172,2 +122,1 @@\n-                        \/\/ AccessControlException\n-                        Arrays.asList(null, null, null, null)\n+                        Arrays.asList(null, null, null)\n@@ -177,1 +126,1 @@\n-                        Arrays.asList(null, null, null, null)\n+                        Arrays.asList(null, null, null)\n@@ -181,1 +130,1 @@\n-                        Arrays.asList(null, null, null, null)\n+                        Arrays.asList(null, null, null)\n@@ -197,1 +146,0 @@\n-        System.setSecurityManager(null);\n@@ -200,1 +148,1 @@\n-                perModeExpected.get(Mode.UNSET_NO_SM.ordinal()));\n+                perModeExpected.get(AmbiguousMode.UNSET.ordinal()));\n@@ -212,1 +160,0 @@\n-        System.setSecurityManager(null);\n@@ -214,1 +161,1 @@\n-                perModeExpected.get(Mode.EMPTY_NO_SM.ordinal()));\n+                perModeExpected.get(AmbiguousMode.EMPTY.ordinal()));\n@@ -226,1 +173,0 @@\n-        System.setSecurityManager(null);\n@@ -229,16 +175,1 @@\n-                perModeExpected.get(Mode.FALSE_NO_SM.ordinal()));\n-    }\n-\n-    \/**\n-     * Test each command with SecurityManager and default allowAmbiguousCommands is empty.\n-     * @param command a command\n-     * @param perModeExpected an expected Exception class or null\n-     *\/\n-    @Test(dataProvider = \"TEST_RTE_ARGS\")\n-    void testCommandWithSM(String command, String testFile, List<Class<Exception>> perModeExpected) {\n-        Properties props = System.getProperties();\n-        props.setProperty(JDK_LANG_PROCESS_ALLOW_AMBIGUOUS_COMMANDS, \"\");\n-        System.setSecurityManager(new SecurityMan());\n-\n-        testCommandMode(command, \"SecurityManager and Ambiguous Empty\", testFile,\n-                perModeExpected.get(Mode.EMPTY_SM.ordinal()));\n+                perModeExpected.get(AmbiguousMode.FALSE.ordinal()));\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/exec\/ExecCommand.java","additions":14,"deletions":83,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test SecurityManager methods\n+ * @run junit Basic\n+ *\/\n+\n+import java.security.AccessControlContext;\n+import java.security.AccessControlException;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class Basic {\n+\n+    @Test\n+    void testGetClassContext() {\n+        var sm = new SecurityManager() {\n+            @Override\n+            public Class<?>[] getClassContext() {\n+                return super.getClassContext();\n+            }\n+        };\n+        Class<?>[] stack = sm.getClassContext();\n+        assertEquals(sm.getClass(), stack[0]);      \/\/ currently executing method\n+        assertEquals(this.getClass(), stack[1]);    \/\/ caller\n+    }\n+\n+    @Test\n+    void testGetSecurityContext() {\n+        var sm = new SecurityManager();\n+        var acc = (AccessControlContext) sm.getSecurityContext();\n+        assertThrows(AccessControlException.class,\n+                     () -> acc.checkPermission(new RuntimePermission(\"foo\")));\n+        assertNull(acc.getDomainCombiner());\n+    }\n+\n+    @Test\n+    void testGetThreadGroup() {\n+        var sm = new SecurityManager();\n+        assertEquals(Thread.currentThread().getThreadGroup(), sm.getThreadGroup());\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/Basic.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8055206\n- * @summary Check that each module loaded by the platform loader has the\n- *          proper \"accessClassInPackage\" RuntimePermissions to access its\n- *          qualified exports.\n- * @run main CheckAccessClassInPackagePermissions\n- *\/\n-\n-import java.lang.module.ModuleDescriptor;\n-import java.lang.module.ModuleDescriptor.Exports;\n-import java.net.URL;\n-import java.security.CodeSigner;\n-import java.security.CodeSource;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-public class CheckAccessClassInPackagePermissions {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ Get the modules in the boot layer loaded by the boot or platform\n-        \/\/ loader\n-        ModuleLayer bootLayer = ModuleLayer.boot();\n-        Set<Module> modules = bootLayer.modules()\n-            .stream()\n-            .filter(CheckAccessClassInPackagePermissions::isBootOrPlatformMod)\n-            .collect(Collectors.toSet());\n-\n-        \/\/ Create map of target module's qualified export packages\n-        Map<String, List<String>> map = new HashMap<>();\n-        Set<Exports> qualExports =\n-            modules.stream()\n-                   .map(Module::getDescriptor)\n-                   .map(ModuleDescriptor::exports)\n-                   .flatMap(Set::stream)\n-                   .filter(Exports::isQualified)\n-                   .collect(Collectors.toSet());\n-        for (Exports e : qualExports) {\n-            Set<String> targets = e.targets();\n-            for (String t : targets) {\n-                map.compute(t, (k, ov) -> {\n-                    if (ov == null) {\n-                        List<String> v = new ArrayList<>();\n-                        v.add(e.source());\n-                        return v;\n-                    } else {\n-                        ov.add(e.source());\n-                        return ov;\n-                    }\n-                });\n-            }\n-        }\n-\n-        \/\/ Check if each target module has the right permissions to access\n-        \/\/ its qualified exports\n-        Policy policy = Policy.getPolicy();\n-        for (Map.Entry<String, List<String>> me : map.entrySet()) {\n-            String moduleName = me.getKey();\n-\n-            \/\/ is this a module loaded by the platform loader?\n-            Optional<Module> module = bootLayer.findModule(moduleName);\n-            if (!module.isPresent()) {\n-                continue;\n-            }\n-            Module mod = module.get();\n-            if (mod.getClassLoader() != ClassLoader.getPlatformClassLoader()) {\n-                continue;\n-            }\n-\n-            \/\/ create ProtectionDomain simulating module\n-            URL url = new URL(\"jrt:\/\" + moduleName);\n-            CodeSource cs = new CodeSource(url, (CodeSigner[])null);\n-            ProtectionDomain pd = new ProtectionDomain(cs, null, null, null);\n-\n-            List<String> pkgs = me.getValue();\n-            for (String p : pkgs) {\n-                RuntimePermission rp =\n-                    new RuntimePermission(\"accessClassInPackage.\" + p);\n-                if (!policy.implies(pd, rp)) {\n-                    throw new Exception(\"Module \" + mod + \" has not been \" +\n-                                        \"granted \" + rp);\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Returns true if the module's loader is the boot or platform loader.\n-     *\/\n-    private static boolean isBootOrPlatformMod(Module m) {\n-        return m.getClassLoader() == null ||\n-               m.getClassLoader() == ClassLoader.getPlatformClassLoader();\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/CheckAccessClassInPackagePermissions.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -1,192 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *  @test\n- *  @bug 6741606 7146431 8000450 8019830 8022945 8027144 8041633 8078427 8055206\n- *  @summary Check that various restricted packages that are supposed to be\n- *           restricted by default or are listed in the package.access\n- *           property in the java.security file are blocked\n- *  @run main\/othervm CheckPackageAccess\n- *\/\n-\n-import java.lang.module.ModuleFinder;\n-import java.lang.module.ModuleReference;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Optional;\n-\n-public class CheckPackageAccess {\n-\n-    private static final SecurityManager sm = new SecurityManager();\n-    private static final ModuleFinder mf = ModuleFinder.ofSystem();\n-\n-    \/*\n-     * The expected list of restricted packages of the package.access property.\n-     *\n-     * This array should be updated whenever new packages are added to the\n-     * package.access property in the java.security file\n-     * NOTE: it should be in the same order as the java.security file\n-     *\/\n-    private static final String[] EXPECTED = {\n-        \"sun.misc.\",\n-        \"sun.reflect.\",\n-    };\n-\n-    \/**\n-     * Tests access to various packages of a module.\n-     *\/\n-    private static class Test {\n-        String moduleName;     \/\/ name of module\n-        ModuleReference moduleRef;     \/\/ module reference\n-        String exports;    \/\/ exported pkg\n-        Optional<String> opens;      \/\/ opened pkg\n-        String conceals;   \/\/ concealed pkg\n-        Optional<String> qualExports; \/\/ qualified export pkg\n-        Optional<String> qualOpens;   \/\/ qualified open pkg\n-        \/\/ qual open and non-qualified export pkg\n-        Optional<String> qualOpensAndExports;\n-        Test(String module, String exports, String opens, String conceals,\n-             String qualExports, String qualOpens, String qualOpensAndExports) {\n-            this.moduleName = module;\n-            this.moduleRef = mf.find(moduleName).get();\n-            this.exports = exports;\n-            this.opens = Optional.ofNullable(opens);\n-            this.conceals = conceals;\n-            this.qualExports = Optional.ofNullable(qualExports);\n-            this.qualOpens = Optional.ofNullable(qualOpens);\n-            this.qualOpensAndExports = Optional.ofNullable(qualOpensAndExports);\n-        }\n-\n-        void test() {\n-            final boolean isModulePresent =\n-                        ModuleLayer.boot().findModule(moduleName).isPresent();\n-            System.out.format(\"Testing module: %1$s. Module is%2$s present.\\n\",\n-                        moduleName, isModulePresent ? \"\" : \" NOT\");\n-\n-            if (isModulePresent) {\n-\n-                \/\/ access to exported pkg should pass\n-                testNonRestricted(exports);\n-\n-                \/\/ access to opened pkg should pass\n-                opens.ifPresent(Test::testNonRestricted);\n-\n-                \/\/ access to concealed pkg should fail\n-                testRestricted(conceals);\n-\n-                \/\/ access to qualified export pkg should fail\n-                qualExports.ifPresent(Test::testRestricted);\n-\n-                \/\/ access to qualified open pkg should fail\n-                qualOpens.ifPresent(Test::testRestricted);\n-\n-                \/\/ access to qualified opened pkg that is also exported should pass\n-                qualOpensAndExports.ifPresent(Test::testNonRestricted);\n-            } else {\n-                System.out.println(\"Skipping tests for module.\");\n-            }\n-        }\n-\n-        private static void testRestricted(String pkg) {\n-            try {\n-                sm.checkPackageAccess(pkg);\n-                throw new RuntimeException(\"Able to access restricted package: \"\n-                                           + pkg);\n-            } catch (SecurityException se) {}\n-            try {\n-                sm.checkPackageDefinition(pkg);\n-                throw new RuntimeException(\"Able to access restricted package: \"\n-                                           + pkg);\n-            } catch (SecurityException se) {}\n-        }\n-\n-        private static void testNonRestricted(String pkg) {\n-            try {\n-                sm.checkPackageAccess(pkg);\n-            } catch (SecurityException se) {\n-                throw new RuntimeException(\"Unable to access exported package: \"\n-                                           + pkg, se);\n-            }\n-            try {\n-                sm.checkPackageDefinition(pkg);\n-            } catch (SecurityException se) {\n-                throw new RuntimeException(\"Unable to access exported package: \"\n-                                           + pkg, se);\n-            }\n-        }\n-    }\n-\n-    private static final Test[] tests = new Test[] {\n-        \/\/ java.base module loaded by boot loader\n-        new Test(\"java.base\", \"java.security\", null, \"jdk.internal.jrtfs\",\n-                 \"jdk.internal.loader\", null, null),\n-        \/\/ java.desktop module loaded by boot loader and has an openQual pkg\n-        \/\/ that is exported\n-        new Test(\"java.desktop\", \"java.applet\", null, \"sun.font\",\n-                 \"sun.awt\", null, \"javax.swing.plaf.basic\"),\n-        \/\/ java.security.jgss module loaded by platform loader\n-        new Test(\"java.security.jgss\", \"org.ietf.jgss\", null,\n-                 \"sun.security.krb5.internal.crypto\", \"sun.security.krb5\",\n-                 null, null),\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ check expected list of restricted packages in java.security file\n-        checkPackages(Arrays.asList(EXPECTED));\n-\n-        \/\/ check access to each module's packages\n-        for (Test test : tests) {\n-            test.test();\n-        }\n-\n-        System.out.println(\"Test passed\");\n-    }\n-\n-    private static void checkPackages(List<String> pkgs) {\n-        for (String pkg : pkgs) {\n-            try {\n-                sm.checkPackageAccess(pkg);\n-                throw new RuntimeException(\"Able to access \" + pkg +\n-                                           \" package\");\n-            } catch (SecurityException se) { }\n-            try {\n-                sm.checkPackageDefinition(pkg);\n-                throw new RuntimeException(\"Able to define class in \" + pkg +\n-                                           \" package\");\n-            } catch (SecurityException se) { }\n-            String subpkg = pkg + \"foo\";\n-            try {\n-                sm.checkPackageAccess(subpkg);\n-                throw new RuntimeException(\"Able to access \" + subpkg +\n-                                           \" package\");\n-            } catch (SecurityException se) { }\n-            try {\n-                sm.checkPackageDefinition(subpkg);\n-                throw new RuntimeException(\"Able to define class in \" +\n-                                           subpkg + \" package\");\n-            } catch (SecurityException se) { }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/CheckPackageAccess.java","additions":0,"deletions":192,"binary":false,"changes":192,"status":"deleted"},{"patch":"@@ -1,542 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8072692\n- * @summary Check the matching implemented by SecurityManager.checkPackageAccess\n- * @run main\/othervm -Djava.security.manager=allow CheckPackageMatching\n- *\/\n-\n-import java.security.Security;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.StringTokenizer;\n-\n-\/*\n- * The purpose of this test is not to verify the content of the package\n- * access list - but to ensure that the matching implemented by the\n- * SecurityManager is correct. This is why we have our own pattern matching\n- * algorithm here.\n- *\/\n-public class CheckPackageMatching {\n-\n-    \/**\n-     * The restricted packages listed in the package.access property of the\n-     * java.security file.\n-     *\/\n-    private static final String[] packages = actual().toArray(new String[0]);\n-\n-    \/**\n-     * Returns the list of restricted packages in the package.access property.\n-     *\/\n-    private static List<String> actual() {\n-        String prop = Security.getProperty(\"package.access\");\n-        List<String> packages = new ArrayList<>();\n-        if (prop != null && !prop.equals(\"\")) {\n-            StringTokenizer tok = new StringTokenizer(prop, \",\");\n-            while (tok.hasMoreElements()) {\n-                String s = tok.nextToken().trim();\n-                packages.add(s);\n-            }\n-        }\n-        return packages;\n-    }\n-\n-    \/**\n-     * PackageMatcher implements a state machine that matches package\n-     * names against packages parsed from the package access list.\n-     *\/\n-    private abstract static class PackageMatcher {\n-        \/\/ For each state, chars[state] contains the chars that matches.\n-        private final char[][] chars;\n-        \/\/ For each state, states[state][i] contains the next state to go\n-        \/\/ to when chars[state][i] matches the current character.\n-        private final int[][] states;\n-\n-        \/\/ Some markers. We're making the assumption that 0\n-        \/\/ cannot be a valid character for a package name.\n-        \/\/\n-        \/\/ We use 0 for marking that we expect an end of string in\n-        \/\/ char[state][i].\n-        private static final char END_OF_STRING = 0;\n-        \/\/ This special state value indicates that we expect the string to end\n-        \/\/ there.\n-        private static final int END_STATE = -1;\n-        \/\/ This special state value indicates that we can accept any character\n-        \/\/ from now on.\n-        private static final int WILDCARD_STATE = Integer.MIN_VALUE;\n-\n-        \/\/ Create the data for a new state machine to match package names from\n-        \/\/ the array of package names passed as argument.\n-        \/\/ Each package name in the array is expected to end with '.'\n-        \/\/ For each package in packages we're going to compile state data\n-        \/\/ that will match the regexp:\n-        \/\/ ^packages[i].substring(0, packages[i].length()-1).replace(\".\",\"\\\\.\")$|^packages[i].replace(\".\",\"\\\\.\").*\n-        \/\/\n-        \/\/ Let's say the package array is:\n-        \/\/\n-        \/\/ String[] packages = { \"sun.\", \"com.sun.jmx.\", \"com.sun.proxy.\",\n-        \/\/                       \"apple.\" };\n-        \/\/\n-        \/\/ then the state machine will need data that looks like:\n-        \/\/\n-        \/\/ char[][] chars = {\n-        \/\/    { 'a', 'c', 's' }, { 'p' }, { 'p' }, { 'l' }, { 'e' }, { 0, '.' },\n-        \/\/    { 'o' }, { 'm' }, { '.' }, { 's' }, { 'u' }, { 'n' }, { '.' },\n-        \/\/    { 'j', 'p'},\n-        \/\/    { 'm' }, { 'x' }, { 0, '.' },\n-        \/\/    { 'r' }, { 'o' }, { 'x' }, { 'y' }, { 0, '.' },\n-        \/\/    { 'u' }, { 'n' }, { 0, '.' }\n-        \/\/ }\n-        \/\/ int[][] states = {\n-        \/\/    { 1, 6, 22 }, { 2 }, { 3 }, { 4 }, { 5 },\n-        \/\/    { END_STATE, WILDCARD_STATE },\n-        \/\/    { 7 }, { 8 }, { 9 }, { 10 }, { 11 }, { 12 }, { 13 }, { 14, 17 },\n-        \/\/    { 15 }, { 16 }, { END_STATE, WILDCARD_STATE },\n-        \/\/    { 18 }, { 19 }, { 20 }, { 21 }, { END_STATE, WILDCARD_STATE },\n-        \/\/    { 23 }, { 24 }, { END_STATE, WILDCARD_STATE }\n-        \/\/ }\n-        \/\/\n-        \/\/ The machine will start by loading the chars and states for state 0\n-        \/\/ chars[0] => { 'a', 'c', 's' } states[0] => { 1, 6, 22 }\n-        \/\/ then it examines the char at index 0 in the candidate name.\n-        \/\/ if the char matches one of the characters in chars[0], then it goes\n-        \/\/ to the corresponding state in states[0]. For instance - if the first\n-        \/\/ char in the candidate name is 's', which corresponds to chars[0][2] -\n-        \/\/ then it will proceed with the next char in the candidate name and go\n-        \/\/ to state 22 (as indicated by states[0][2]) - where it will load the\n-        \/\/ chars and states for states 22: chars[22] = { 'u' },\n-        \/\/ states[22] = { 23 } etc... until the candidate char at the current\n-        \/\/ index matches no char in chars[states] => the candidate name doesn't\n-        \/\/ match - or until it finds a success termination condition: the\n-        \/\/ candidate chars are exhausted and states[state][0] is END_STATE, or\n-        \/\/ the candidate chars are not exhausted - and\n-        \/\/ states[state][chars[state]] is WILDCARD_STATE indicating a '.*' like\n-        \/\/ regexp.\n-        \/\/\n-        \/\/ [Note that the chars in chars[i] are sorted]\n-        \/\/\n-        \/\/ The compile(...) method is reponsible for building the state machine\n-        \/\/ data and is called only once in the constructor.\n-        \/\/\n-        \/\/ The matches(String candidate) method will tell whether the candidate\n-        \/\/ matches by implementing the algorithm described above.\n-        \/\/\n-        PackageMatcher(String[] packages) {\n-            final boolean[] selected = new boolean[packages.length];\n-            Arrays.fill(selected, true);\n-            final ArrayList<char[]> charList = new ArrayList<>();\n-            final ArrayList<int[]> stateList = new ArrayList<>();\n-            compile(0, 0, packages, selected, charList, stateList);\n-            chars = charList.toArray(new char[0][0]);\n-            states = stateList.toArray(new int[0][0]);\n-        }\n-\n-        \/**\n-         * Compiles the state machine data (recursive).\n-         *\n-         * @param step  The index of the character which we're looking at in\n-         *              this step.\n-         * @param state The current state (starts at 0).\n-         * @param pkgs  The list of packages from which the automaton is built.\n-         * @param selected  Indicates which packages we're looking at in this\n-                            step.\n-         * @param charList  The list from which we will build\n-                            {@code char[][] chars;}\n-         * @param stateList The list from which we will build\n-                            {@code int[][]  states;}\n-         * @return the next available state.\n-         *\/\n-        private int compile(int step, int state, String[] pkgs,\n-                            boolean[] selected, ArrayList<char[]> charList,\n-                            ArrayList<int[]> stateList) {\n-            final char[] next = new char[pkgs.length];\n-            final int[] nexti = new int[pkgs.length];\n-            int j = 0;\n-            char min = Character.MAX_VALUE; char max = 0;\n-            for (int i = 0; i < pkgs.length; i++) {\n-                if (!selected[i]) continue;\n-                final String p = pkgs[i];\n-                final int len = p.length();\n-                if (step > len) {\n-                    selected[i] = false;\n-                    continue;\n-                }\n-                if (len - 1 == step) {\n-                    boolean unknown = true;\n-                    for (int k = 0; k < j ; k++) {\n-                        if (next[k] == END_OF_STRING) {\n-                            unknown = false;\n-                            break;\n-                        }\n-                    }\n-                    if (unknown) {\n-                        next[j] = END_OF_STRING;\n-                        j++;\n-                    }\n-                    nexti[i] = END_STATE;\n-                }\n-                final char c = p.charAt(step);\n-                nexti[i] = len - 1 == step ? END_STATE : c;\n-                boolean unknown = j == 0 || c < min || c > max;\n-                if (!unknown) {\n-                    if (c != min || c != max) {\n-                        unknown = true;\n-                        for (int k = 0; k < j ; k++) {\n-                            if (next[k] == c) {\n-                                unknown = false;\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n-                if (unknown) {\n-                    min = min > c ? c : min;\n-                    max = max < c ? c : max;\n-                    next[j] = c;\n-                    j++;\n-                }\n-            }\n-            final char[] nc = new char[j];\n-            final int[]  nst = new int[j];\n-            System.arraycopy(next, 0, nc, 0, nc.length);\n-            Arrays.sort(nc);\n-            final boolean ns[] = new boolean[pkgs.length];\n-\n-            charList.ensureCapacity(state + 1);\n-            stateList.ensureCapacity(state + 1);\n-            charList.add(state, nc);\n-            stateList.add(state, nst);\n-            state = state + 1;\n-            for (int k = 0; k < nc.length; k++) {\n-                int selectedCount = 0;\n-                boolean endStateFound = false;\n-                boolean wildcardFound = false;\n-                for (int l = 0; l < nexti.length; l++) {\n-                    if (!(ns[l] = selected[l])) {\n-                        continue;\n-                    }\n-                    ns[l] = nexti[l] == nc[k] || nexti[l] == END_STATE\n-                            && nc[k] == '.';\n-                    endStateFound = endStateFound || nc[k] == END_OF_STRING\n-                                    && nexti[l] == END_STATE;\n-                    wildcardFound = wildcardFound || nc[k] == '.'\n-                                    && nexti[l] == END_STATE;\n-                    if (ns[l]) {\n-                        selectedCount++;\n-                    }\n-                }\n-                nst[k] = (endStateFound ? END_STATE\n-                         : wildcardFound ? WILDCARD_STATE : state);\n-                if (selectedCount == 0 || wildcardFound) {\n-                    continue;\n-                }\n-                state = compile(step + 1, state, pkgs, ns, charList, stateList);\n-            }\n-            return state;\n-        }\n-\n-        \/**\n-         * Matches 'pkg' against the list of package names compiled in the\n-         * state machine data.\n-         *\n-         * @param pkg The package name to match. Must not end with '.'.\n-         * @return true if the package name matches, false otherwise.\n-         *\/\n-        public boolean matches(String pkg) {\n-            int state = 0;\n-            int i;\n-            final int len = pkg.length();\n-            next: for (i = 0; i <= len; i++) {\n-                if (state == WILDCARD_STATE) {\n-                    return true; \/\/ all characters will match.\n-                }\n-                if (state == END_STATE) {\n-                    return i == len;\n-                }\n-                final char[] ch = chars[state];\n-                final int[] st = states[state];\n-                if (i == len) {\n-                    \/\/ matches only if we have exhausted the string.\n-                    return st[0] == END_STATE;\n-                }\n-                if (st[0] == END_STATE && st.length == 1) {\n-                    \/\/ matches only if we have exhausted the string.\n-                    return i == len;\n-                }\n-                final char c = pkg.charAt(i); \/\/ look at next char...\n-                for (int j = st[0] == END_STATE ? 1 : 0; j < ch.length; j++) {\n-                    final char n = ch[j];\n-                    if (c == n) {      \/\/ found a match\n-                        state = st[j]; \/\/ get the next state.\n-                        continue next; \/\/ go to next state\n-                    } else if (c < n) {\n-                        break; \/\/ chars are sorted. we won't find it. no match.\n-                    }\n-                }\n-                break; \/\/ no match\n-            }\n-            return false;\n-        }\n-    }\n-\n-    private static final class TestPackageMatcher extends PackageMatcher {\n-        private final List<String> list;\n-\n-        TestPackageMatcher(String[] packages) {\n-            super(packages);\n-            this.list = Collections.unmodifiableList(Arrays.asList(packages));\n-        }\n-\n-        @Override\n-        public boolean matches(String pkg) {\n-            final boolean match1 = super.matches(pkg);\n-            boolean match2 = false;\n-            String p2 = pkg + \".\";\n-            for (String p : list) {\n-                if (pkg.startsWith(p) || p2.equals(p)) {\n-                    match2 = true;\n-                    break;\n-                }\n-            }\n-            if (match1 != match2) {\n-                System.err.println(\"Test Bug: PackageMatcher.matches(\\\"\" +\n-                                   pkg + \"\\\") returned \" + match1);\n-                System.err.println(\"Package Access List is: \" + list);\n-                throw new Error(\"Test Bug: PackageMatcher.matches(\\\"\" +\n-                                pkg + \"\\\") returned \" + match1);\n-            }\n-            return match1;\n-        }\n-    }\n-\n-    private static void smokeTest() {\n-        \/\/ these checks should pass.\n-        System.getSecurityManager().checkPackageAccess(\"com.sun.blah\");\n-        System.getSecurityManager().checkPackageAccess(\"com.sun.jm\");\n-        System.getSecurityManager().checkPackageAccess(\"com.sun.jmxa\");\n-        System.getSecurityManager().checkPackageAccess(\"jmx\");\n-        List<String> actual = Arrays.asList(packages);\n-        if (!actual.contains(\"sun.misc.\")) {\n-            throw new Error(\"package.access does not contain 'sun.misc.'\");\n-        }\n-    }\n-\n-    \/\/ This is a sanity test for our own test code.\n-    private static void testTheTest(String[] pkgs, char[][] chars,\n-                                    int[][] states) {\n-\n-        PackageMatcher m = new TestPackageMatcher(pkgs);\n-        String unexpected = \"\";\n-        if (!Arrays.deepEquals(chars, m.chars)) {\n-            System.err.println(\"Char arrays differ\");\n-            if (chars.length != m.chars.length) {\n-                System.err.println(\"Char array lengths differ: expected=\"\n-                        + chars.length + \" actual=\" + m.chars.length);\n-            }\n-            System.err.println(Arrays.deepToString(m.chars).replace((char)0,\n-                                                   '0'));\n-            unexpected = \"chars[]\";\n-        }\n-        if (!Arrays.deepEquals(states, m.states)) {\n-            System.err.println(\"State arrays differ\");\n-            if (states.length != m.states.length) {\n-                System.err.println(\"Char array lengths differ: expected=\"\n-                        + states.length + \" actual=\" + m.states.length);\n-            }\n-            System.err.println(Arrays.deepToString(m.states));\n-            if (unexpected.length() > 0) {\n-                unexpected = unexpected + \" and \";\n-            }\n-            unexpected = unexpected + \"states[]\";\n-        }\n-\n-        if (unexpected.length() > 0) {\n-            throw new Error(\"Unexpected \"+unexpected+\" in PackageMatcher\");\n-        }\n-\n-        testMatches(m, pkgs);\n-    }\n-\n-    \/\/ This is a sanity test for our own test code.\n-    private static void testTheTest() {\n-        final String[] packages2 = { \"sun.\", \"com.sun.jmx.\",\n-                                     \"com.sun.proxy.\", \"apple.\" };\n-\n-        final int END_STATE = PackageMatcher.END_STATE;\n-        final int WILDCARD_STATE = PackageMatcher.WILDCARD_STATE;\n-\n-        final char[][] chars2 = {\n-            { 'a', 'c', 's' }, { 'p' }, { 'p' }, { 'l' }, { 'e' }, { 0, '.' },\n-            { 'o' }, { 'm' }, { '.' }, { 's' }, { 'u' }, { 'n' }, { '.' },\n-            { 'j', 'p'},\n-            { 'm' }, { 'x' }, { 0, '.' },\n-            { 'r' }, { 'o' }, { 'x' }, { 'y' }, { 0, '.' },\n-            { 'u' }, { 'n' }, { 0, '.' }\n-         };\n-\n-         final int[][] states2 = {\n-            { 1, 6, 22 }, { 2 }, { 3 }, { 4 }, { 5 },\n-            { END_STATE, WILDCARD_STATE },\n-            { 7 }, { 8 }, { 9 }, { 10 }, { 11 }, { 12 }, { 13 }, { 14, 17 },\n-            { 15 }, { 16 }, { END_STATE, WILDCARD_STATE },\n-            { 18 }, { 19 }, { 20 }, { 21 }, { END_STATE, WILDCARD_STATE },\n-            { 23 }, { 24 }, { END_STATE, WILDCARD_STATE }\n-         };\n-\n-         testTheTest(packages2, chars2, states2);\n-\n-         final String[] packages3 = { \"sun.\", \"com.sun.pro.\",\n-                                      \"com.sun.proxy.\", \"apple.\" };\n-\n-         final char[][] chars3 = {\n-            { 'a', 'c', 's' }, { 'p' }, { 'p' }, { 'l' }, { 'e' }, { 0, '.' },\n-            { 'o' }, { 'm' }, { '.' }, { 's' }, { 'u' }, { 'n' }, { '.' },\n-            { 'p' }, { 'r' }, { 'o' }, { 0, '.', 'x' },\n-            { 'y' }, { 0, '.' },\n-            { 'u' }, { 'n' }, { 0, '.' }\n-         };\n-\n-         final int[][] states3 = {\n-            { 1, 6, 19 }, { 2 }, { 3 }, { 4 }, { 5 },\n-            { END_STATE, WILDCARD_STATE },\n-            { 7 }, { 8 }, { 9 }, { 10 }, { 11 }, { 12 }, { 13 }, { 14 },\n-            { 15 }, { 16 }, { END_STATE, WILDCARD_STATE, 17 },\n-            { 18 }, { END_STATE, WILDCARD_STATE },\n-            { 20 }, { 21 }, { END_STATE, WILDCARD_STATE }\n-         };\n-\n-         testTheTest(packages3, chars3, states3);\n-    }\n-\n-    private static volatile boolean sanityTesting = false;\n-\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ Some smoke tests.\n-        smokeTest();\n-        System.out.println(\"Smoke tests passed.\");\n-\n-        \/\/ Test our own pattern matching algorithm. Here we actually test\n-        \/\/ the PackageMatcher class from our own test code.\n-        sanityTesting = true;\n-        try {\n-            testTheTest();\n-            System.out.println(\"Sanity tests passed.\");\n-        } finally {\n-            sanityTesting = false;\n-        }\n-\n-        \/\/ Now test the package matching in the security manager.\n-        PackageMatcher matcher = new TestPackageMatcher(packages);\n-\n-        \/\/ These should not match.\n-        for (String pkg : new String[] {\"gloups.machin\", \"su\",\n-                                        \"org.jcp.xml.dsig.inter\",\n-                                        \"com.sun.jm\", \"com.sun.jmxa\"}) {\n-            testMatch(matcher, pkg, false, true);\n-        }\n-\n-        \/\/ These should match.\n-        for (String pkg : Arrays.asList(\n-                new String[] {\"sun.misc.gloups.machin\", \"sun.misc\",\n-                              \"sun.reflect\"})) {\n-            testMatch(matcher, pkg, true, true);\n-        }\n-\n-        \/\/ Derive a list of packages that should match or not match from\n-        \/\/ the list in 'packages' - and check that the security manager\n-        \/\/ throws the appropriate exception.\n-        testMatches(matcher, packages);\n-    }\n-\n-    private static void testMatches(PackageMatcher matcher, String[] pkgs) {\n-        Collection<String> pkglist = Arrays.asList(pkgs);\n-        PackageMatcher ref = new TestPackageMatcher(packages);\n-\n-        for (String pkg : pkgs) {\n-            String candidate = pkg + \"toto\";\n-            boolean expected = true;\n-            testMatch(matcher, candidate, expected,\n-                      ref.matches(candidate) == expected);\n-        }\n-\n-        for (String pkg : pkgs) {\n-            String candidate = pkg.substring(0, pkg.length() - 1);\n-            boolean expected = pkglist.contains(candidate + \".\");\n-            testMatch(matcher, candidate, expected,\n-                      ref.matches(candidate) == expected);\n-        }\n-\n-        for (String pkg : pkgs) {\n-            String candidate = pkg.substring(0, pkg.length() - 2);\n-            boolean expected = pkglist.contains(candidate + \".\");\n-            testMatch(matcher, candidate, expected,\n-                      ref.matches(candidate) == expected);\n-        }\n-    }\n-\n-    private static void testMatch(PackageMatcher matcher, String candidate,\n-                                  boolean expected, boolean testSecurityManager)\n-    {\n-        final boolean m = matcher.matches(candidate);\n-        if (m != expected) {\n-            final String msg = \"\\\"\" + candidate + \"\\\": \" +\n-                (m ? \"matches\" : \"does not match\");\n-            throw new Error(\"PackageMatcher does not give expected results: \"\n-                            + msg);\n-        }\n-\n-        if (sanityTesting) {\n-            testSecurityManager = false;\n-        }\n-\n-        if (testSecurityManager) {\n-            System.out.println(\"Access to \" + candidate + \" should be \" +\n-                               (expected ? \"rejected\" : \"granted\"));\n-            final String errormsg = \"\\\"\" + candidate + \"\\\" : \" +\n-                (expected ? \"granted\" : \"not granted\");\n-            try {\n-                System.getSecurityManager().checkPackageAccess(candidate);\n-                if (expected) {\n-                    System.err.println(errormsg);\n-                    throw new Error(\"Expected exception not thrown: \" +\n-                                    errormsg);\n-                }\n-            } catch (SecurityException x) {\n-                if (!expected) {\n-                    System.err.println(errormsg);\n-                    throw new Error(errormsg + \" - unexpected exception: \" +\n-                                    x, x);\n-                } else {\n-                    System.out.println(\"Got expected exception: \" + x);\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/CheckPackageMatching.java","additions":0,"deletions":542,"binary":false,"changes":542,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow CheckSecurityProvider\n+ * @run main\/othervm CheckSecurityProvider\n@@ -42,2 +42,1 @@\n- * removed. With the security manager enabled, this test can also catch\n- * scenarios where the default permission policy needs to be updated.\n+ * removed.\n@@ -49,2 +48,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/CheckSecurityProvider.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4256530 4136245\n- * @summary Check that restricted packages that are supposed to be restricted\n- *          and explicit grants accessClassInPackage permission overridden in\n- *          privileged block\n- * @modules java.base\/sun.security.x509\n- * @run main\/othervm PackageAccessTest\n- * @run main\/othervm\/java.security.policy=test.policy PackageAccessTest access\n- * @run main\/othervm\/java.security.policy=empty.policy PackageAccessTest deny\n- *\/\n-\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n-\n-public class PackageAccessTest {\n-\n-    public static void main(String[] args) {\n-        boolean access = true;\n-\n-        if (args != null && args.length > 0) {\n-            switch (args[0]) {\n-                case \"access\":\n-                    access = true;\n-                    break;\n-                case \"deny\":\n-                    access = false;\n-                    break;\n-                default:\n-                    throw new RuntimeException(\n-                            \"Invalid input parameter \" + args[0]);\n-            }\n-        }\n-\n-        testPkgAccess(access);\n-        testPkgAccessWithPrivileged(access);\n-    }\n-\n-    private static void testPkgAccess(boolean access) {\n-        try {\n-            sun.security.x509.X509CertInfo x = new sun.security.x509.X509CertInfo();\n-            if (!access) {\n-                throw new RuntimeException(\n-                        \"application unexpectedly able to access the internal package\");\n-            }\n-        } catch (SecurityException se) {\n-            if (access) {\n-                throw new RuntimeException(\"Unexpected security exception\", se);\n-            }\n-        }\n-    }\n-\n-    private static void testPkgAccessWithPrivileged(boolean access) {\n-        sun.security.x509.X509CertInfo o = null;\n-        try {\n-            o = (sun.security.x509.X509CertInfo) AccessController.doPrivileged(\n-                    (PrivilegedExceptionAction) () -> new sun.security.x509.X509CertInfo());\n-            if (!access) {\n-                throw new RuntimeException(\n-                        \"application unexpectedly able to access the internal package\");\n-            }\n-        } catch (AccessControlException ace) {\n-            if (access) {\n-                throw new RuntimeException(\"Unexpected AccessControlException\", ace);\n-            }\n-        } catch (Exception ex) {\n-            throw new RuntimeException(\"Test failed with unexpected exception\", ex);\n-        }\n-        if (access && o == null)\n-            throw new RuntimeException(\n-                    \"Test failed: unable to instantiate object\");\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/PackageAccessTest.java","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-\/\/ This is an empty policy\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/empty.policy","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import java.nio.file.Paths;\n-import java.util.List;\n-\n-\/*\n- * @test\n- * @summary Basic test of -Djava.security.manager to a class in named module.\n- * @library \/test\/lib\n- * @build jdk.test.lib.process.*\n- *        m\/*\n- * @run testng\/othervm CustomSecurityManagerTest\n- *\/\n-public class CustomSecurityManagerTest {\n-\n-    private static final String MODULE_PATH = Paths.get(Utils.TEST_CLASSES).resolve(\"modules\").toString();\n-    private static final String POLICY_PATH = Paths.get(Utils.TEST_SRC).resolve(\"test.policy\").toString();\n-\n-    @DataProvider\n-    public Object[][] testCases() {\n-        return new Object[][]{\n-            new Object[] { List.of(\n-                    \"--module-path\", MODULE_PATH,\n-                    \"--add-modules\", \"m\",\n-                    \"-Djava.security.manager\",\n-                    String.format(\"-Djava.security.policy=%s\", POLICY_PATH),\n-                    \"RunTest\"\n-            ) },\n-            new Object[] { List.of(\n-                    \"--module-path\", MODULE_PATH,\n-                    \"--add-modules\", \"m\",\n-                    \"-Djava.security.manager=p.CustomSecurityManager\",\n-                    String.format(\"-Djava.security.policy=%s\", POLICY_PATH),\n-                    \"RunTest\"\n-            ) }\n-        };\n-    }\n-\n-    @Test(dataProvider = \"testCases\")\n-    public void testProvider(List<String> args) throws Throwable {\n-        ProcessBuilder processBuilder = ProcessTools.createTestJavaProcessBuilder(args);\n-        OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(processBuilder);\n-        outputAnalyzer.shouldHaveExitValue(0);\n-    }\n-\n-}\n-\n-class RunTest {\n-    public static void main(String... args) {\n-        SecurityManager sm = System.getSecurityManager();\n-        Module module = sm.getClass().getModule();\n-        String s = System.getProperty(\"java.security.manager\");\n-        String expected = s.isEmpty() ? \"java.base\" : \"m\";\n-        if (!module.isNamed() || !module.getName().equals(expected)) {\n-            throw new RuntimeException(module + \" expected module m instead\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/modules\/CustomSecurityManagerTest.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,25 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-module m {\n-}\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/modules\/m\/module-info.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p;\n-\n-public class CustomSecurityManager extends SecurityManager {\n-    public CustomSecurityManager() {\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/modules\/m\/p\/CustomSecurityManager.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-        permission java.util.PropertyPermission \"*\", \"read\";\n-};\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/modules\/test.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant  {\n- permission java.lang.RuntimePermission \"accessClassInPackage.sun.security.x509\";\n-};\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/test.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow csm\/jdk.test.CallerSensitiveTest sm\n","filename":"test\/jdk\/java\/lang\/StackWalker\/CallerSensitiveMethod\/Main.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,5 +31,0 @@\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -45,1 +40,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n@@ -51,17 +45,0 @@\n-        boolean sm = false;\n-        if (args.length > 0 && args[0].equals(\"sm\")) {\n-            sm = true;\n-            PermissionCollection perms = new Permissions();\n-            perms.add(new RuntimePermission(\"getStackWalkerWithClassReference\"));\n-            Policy.setPolicy(new Policy() {\n-                @Override\n-                public boolean implies(ProtectionDomain domain, Permission p) {\n-                    return perms.implies(p) ||\n-                        DEFAULT_POLICY.implies(domain, p);\n-                }\n-            });\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n-        System.err.format(\"Test %s security manager.%n\",\n-                          sm ? \"with\" : \"without\");\n","filename":"test\/jdk\/java\/lang\/StackWalker\/CallerSensitiveMethod\/csm\/jdk\/test\/CallerSensitiveTest.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm -Djava.security.manager=allow GetCallerClassTest sm\n@@ -39,5 +38,0 @@\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -49,1 +43,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n@@ -58,12 +51,0 @@\n-        if (args.length > 0 && args[0].equals(\"sm\")) {\n-            PermissionCollection perms = new Permissions();\n-            perms.add(new RuntimePermission(\"getStackWalkerWithClassReference\"));\n-            Policy.setPolicy(new Policy() {\n-                @Override\n-                public boolean implies(ProtectionDomain domain, Permission p) {\n-                    return perms.implies(p) ||\n-                        DEFAULT_POLICY.implies(domain, p);\n-                }\n-            });\n-            System.setSecurityManager(new SecurityManager());\n-        }\n","filename":"test\/jdk\/java\/lang\/StackWalker\/GetCallerClassTest.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8020968\n- * @summary Test security permission check\n- * @run main\/othervm\/java.security.policy=noperms.policy SecurityExceptions true\n- * @run main\/othervm\/java.security.policy=stackwalk.policy SecurityExceptions false\n- *\/\n-public class SecurityExceptions {\n-    public static void main(String[] args) {\n-        boolean expectException = Boolean.parseBoolean(args[0]);\n-\n-        StackWalker sw = StackWalker.getInstance();\n-\n-        try {\n-            sw = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n-            if (expectException) {\n-                throw new RuntimeException(\"Expected SecurityException, but none thrown\");\n-            }\n-        } catch (SecurityException e) {\n-            if (!expectException) {\n-                System.err.println(\"Unexpected security exception:\");\n-                throw e;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/StackWalker\/SecurityExceptions.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n- * @run main\/othervm\/java.security.policy=stackwalktest.policy StackWalkTest\n@@ -46,1 +45,0 @@\n- * @run main\/othervm\/java.security.policy=stackwalktest.policy StackWalkTest -random:50\n","filename":"test\/jdk\/java\/lang\/StackWalker\/StackWalkTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n- * @run main\/othervm\/java.security.policy=stackwalk.policy VerifyStackTrace\n@@ -144,4 +143,3 @@\n-            \"15: java.base\/java.security.AccessController.executePrivileged(AccessController.java:753)\\n\" +\n-            \"16: java.base\/java.security.AccessController.doPrivileged(AccessController.java:312)\\n\" +\n-            \"17: VerifyStackTrace.test(VerifyStackTrace.java:301)\\n\" +\n-            \"18: VerifyStackTrace.main(VerifyStackTrace.java:254)\\n\";\n+            \"15: java.base\/java.security.AccessController.doPrivileged(AccessController.java:312)\\n\" +\n+            \"16: VerifyStackTrace.test(VerifyStackTrace.java:301)\\n\" +\n+            \"17: VerifyStackTrace.main(VerifyStackTrace.java:254)\\n\";\n","filename":"test\/jdk\/java\/lang\/StackWalker\/VerifyStackTrace.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-\/*\n- * grant nothing\n- *\/\n-grant {};\n-\n","filename":"test\/jdk\/java\/lang\/StackWalker\/noperms.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-  permission java.lang.RuntimePermission \"getStackWalkerWithClassReference\";\n-};\n-\n","filename":"test\/jdk\/java\/lang\/StackWalker\/stackwalk.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-  permission java.lang.RuntimePermission \"getStackWalkerWithClassReference\";\n-  permission java.util.PropertyPermission \"seed\", \"read\";\n-};\n-\n","filename":"test\/jdk\/java\/lang\/StackWalker\/stackwalktest.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.Permission;\n-\n-\/**\n- * @test\n- * @summary String concatenation fails with a custom SecurityManager that uses concatenation\n- * @bug 8155090 8158851 8222895\n- * @requires !vm.graal.enabled\n- *\n- * @compile WithSecurityManager.java\n- *\n- * @run main\/othervm -Xverify:all -Djava.security.manager=allow WithSecurityManager\n- * @run main\/othervm -Xverify:all --limit-modules=java.base -Djava.security.manager=allow WithSecurityManager\n-*\/\n-public class WithSecurityManager {\n-    public static void main(String[] args) throws Throwable {\n-        \/\/ First time should succeed to bootstrap everything\n-        {\n-            SecurityManager sm = new SecurityManager() {\n-                @Override\n-                public void checkPermission(Permission perm) {\n-                    String abc = \"abc\";\n-                    int ival = perm.hashCode();\n-                    String full = abc + \"abc\";\n-                    \/\/ Contorted to avoid sweeping cases where we've\n-                    \/\/ pre-generated commonly used species under the rug\n-                    full = \"abc\" + ival + \"def\" + abc + \"def\" + abc + \"def\" +\n-                           abc + \"def\" + ival + \"def\" + abc + \"def\" +\n-                           abc + \"def\" + abc + \"def\" + abc + \"def\";\n-                }\n-            };\n-            System.setSecurityManager(sm);\n-            ClassLoader cl = new ClassLoader() {};\n-        }\n-\n-        \/\/ Second time should succeed to run after bootstrapping\n-        {\n-            SecurityManager sm = new SecurityManager() {\n-                @Override\n-                public void checkPermission(Permission perm) {\n-                    String abc = \"abc\";\n-                    int ival = perm.hashCode();\n-                    String full = abc + \"abc\";\n-                    \/\/ Contorted variant to avoid sweeping cases where we've\n-                    \/\/ pre-generated commonly used species under the rug\n-                    full = \"abc\" + ival + \"def\" + abc + \"def\" + abc + \"def\" +\n-                            abc + \"def\" + ival + \"def\" + abc + \"def\" +\n-                            abc + \"def\" + abc + \"def\" + abc + \"def\";\n-                }\n-            };\n-\n-            \/\/ Provoke checkPermission invocation\n-            System.setSecurityManager(sm);\n-            ClassLoader cl = new ClassLoader() {};\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/String\/concat\/WithSecurityManager.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @summary Test that the allow\/disallow options of the java.security.manager\n- *          system property work correctly\n+ * @summary Test that the allow\/disallow options are ignored\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Djava.security.manager=allow AllowSecurityManager\n+ * @run main\/othervm AllowSecurityManager extra\n@@ -34,0 +34,2 @@\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -37,7 +39,9 @@\n-        String prop = System.getProperty(\"java.security.manager\");\n-        boolean disallow = !\"allow\".equals(prop);\n-        try {\n-            System.setSecurityManager(new SecurityManager());\n-            if (disallow) {\n-                throw new Exception(\"System.setSecurityManager did not \" +\n-                                    \"throw UnsupportedOperationException\");\n+        if (args.length > 0) {\n+            \/\/ Any other system property value would fail\n+            if (args[0].equals(\"extra\")) {\n+                ProcessTools.executeTestJava(\"-Djava.security.manager=other\",\n+                                \"AllowSecurityManager\", \"test\")\n+                        .shouldHaveExitValue(1)\n+                        .shouldContain(\"Enabling a Security Manager is not supported.\");\n+            } else {\n+                \/\/ The sub-process is here\n@@ -45,5 +49,7 @@\n-        } catch (UnsupportedOperationException uoe) {\n-            if (!disallow) {\n-                throw new Exception(\"UnsupportedOperationException \" +\n-                                    \"unexpectedly thrown by \" +\n-                                    \"System.setSecurityManager\");\n+        } else {\n+            try {\n+                System.setSecurityManager(new SecurityManager());\n+                throw new Exception(\"System.setSecurityManager did not \" +\n+                        \"throw UnsupportedOperationException\");\n+            } catch (UnsupportedOperationException uoe) {\n+                \/\/ Will always happen\n","filename":"test\/jdk\/java\/lang\/System\/AllowSecurityManager.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4213876\n- * @summary Make sure \"null\" security manager is ignored, as specified in the\n- * javadocs\n- * @run main\/othervm IgnoreNullSecurityManager\n- *\/\n-\n-public class IgnoreNullSecurityManager {\n-\n-    public static void main(String argv[]) throws Exception {\n-        System.setSecurityManager(null);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/System\/IgnoreNullSecurityManager.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,9 +23,0 @@\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n@@ -42,1 +33,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -48,2 +38,0 @@\n-import java.util.stream.Stream;\n-import java.security.AllPermission;\n@@ -59,3 +47,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:boot CustomLoggerTest NOSECURITY\n- * @run main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow CustomLoggerTest NOPERMISSIONS\n- * @run main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow CustomLoggerTest WITHPERMISSIONS\n+ * @run main\/othervm -Xbootclasspath\/a:boot CustomLoggerTest\n@@ -68,12 +54,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n@@ -252,8 +226,0 @@\n-            \/\/ We should check the permission to obey the API contract, but\n-            \/\/ what happens if we don't?\n-            \/\/ This is the main difference compared with what we test in\n-            \/\/ java\/lang\/System\/LoggerFinder\/BaseLoggerFinderTest\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null && doChecks) {\n-                sm.checkPermission(SimplePolicy.LOGGERFINDER_PERMISSION);\n-            }\n@@ -261,7 +227,2 @@\n-            final boolean before = allowAll.get().getAndSet(true);\n-            final ClassLoader callerLoader;\n-            try {\n-                callerLoader = caller.getClassLoader();\n-            } finally {\n-                allowAll.get().set(before);\n-            }\n+            final ClassLoader callerLoader = caller.getClassLoader();\n+\n@@ -278,8 +239,0 @@\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            Policy.setPolicy(new SimplePolicy(allowControl, allowAll));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-    }\n@@ -287,6 +240,0 @@\n-        if (args.length == 0)\n-            args = new String[] {\n-                \"NOSECURITY\",\n-                \"NOPERMISSIONS\",\n-                \"WITHPERMISSIONS\"\n-            };\n@@ -302,30 +249,1 @@\n-\n-\n-        Stream.of(args).map(TestCases::valueOf).forEach((testCase) -> {\n-            switch (testCase) {\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n-                    test(provider, true, appSink, sysSink);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    setSecurityManager();\n-                    test(provider, false, appSink, sysSink);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with control permission\\n\");\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        test(provider, true, appSink, sysSink);\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    break;\n-                default:\n-                    throw new RuntimeException(\"Unknown test case: \" + testCase);\n-            }\n-        });\n+        test(provider, true, appSink, sysSink);\n@@ -349,12 +267,2 @@\n-        try {\n-            sysLogger1 = accessSystemLogger.getLogger(\"foo\");\n-            loggerDescMap.put(sysLogger1, \"AccessSystemLogger.getLogger(\\\"foo\\\")\");\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(SimplePolicy.LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            throw new RuntimeException(\"unexpected exception: \" + acx, acx);\n-        }\n+        sysLogger1 = accessSystemLogger.getLogger(\"foo\");\n+        loggerDescMap.put(sysLogger1, \"AccessSystemLogger.getLogger(\\\"foo\\\")\");\n@@ -386,12 +294,3 @@\n-        try {\n-            sysLogger2 = accessSystemLogger.getLogger(\"foo\", loggerBundle);\n-            loggerDescMap.put(sysLogger2, \"AccessSystemLogger.getLogger(\\\"foo\\\", loggerBundle)\");\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(SimplePolicy.LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            throw new RuntimeException(\"unexpected exception: \" + acx, acx);\n-        }\n+        sysLogger2 = accessSystemLogger.getLogger(\"foo\", loggerBundle);\n+        loggerDescMap.put(sysLogger2, \"AccessSystemLogger.getLogger(\\\"foo\\\", loggerBundle)\");\n+\n@@ -678,76 +577,0 @@\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n-        final Permissions permissions;\n-        final Permissions controlPermissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        final ThreadLocal<AtomicBoolean> allowAll;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowControl, ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowControl = allowControl;\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-\n-            \/\/ these are used for configuring the test itself...\n-            controlPermissions = new Permissions();\n-            controlPermissions.add(LOGGERFINDER_PERMISSION);\n-\n-            \/\/ these are used for simulating a doPrivileged call from\n-            \/\/ a class in the BCL\n-            allPermissions = new Permissions();\n-            allPermissions.add(new AllPermission());\n-\n-        }\n-\n-        Permissions permissions() {\n-            if (allowAll.get().get()) return allPermissions;\n-            if (allowControl.get().get()) return controlPermissions;\n-            return permissions;\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return permissions().implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(permissions()).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(permissions()).toPermissions();\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/System\/Logger\/custom\/CustomLoggerTest.java","additions":10,"deletions":187,"binary":false,"changes":197,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,7 +23,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -62,6 +55,3 @@\n- * @run main\/othervm -Xbootclasspath\/a:boot DefaultLoggerTest NOSECURITY\n- * @run main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow DefaultLoggerTest NOPERMISSIONS\n- * @run main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow DefaultLoggerTest WITHPERMISSIONS\n- * @run main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow DefaultLoggerTest WITHCUSTOMWRAPPERS\n- * @run main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow DefaultLoggerTest WITHREFLECTION\n- * @author danielfuchs\n+ * @run main\/othervm -Xbootclasspath\/a:boot DefaultLoggerTest DEFAULTS\n+ * @run main\/othervm -Xbootclasspath\/a:boot DefaultLoggerTest WITHCUSTOMWRAPPERS\n+ * @run main\/othervm -Xbootclasspath\/a:boot DefaultLoggerTest WITHREFLECTION\n@@ -73,12 +63,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n@@ -182,7 +160,1 @@\n-        boolean before = allowAll.get().get();\n-        try {\n-            allowAll.get().set(true);\n-            sink.setLevel(loggerLevel);\n-        } finally {\n-            allowAll.get().set(before);\n-        }\n+        sink.setLevel(loggerLevel);\n@@ -240,9 +212,1 @@\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS,\n-            WITHCUSTOMWRAPPERS, WITHREFLECTION};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            Policy.setPolicy(new SimplePolicy(allowControl, allowAll));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-    }\n+    static enum TestCases {DEFAULTS, WITHCUSTOMWRAPPERS, WITHREFLECTION};\n@@ -417,3 +381,1 @@\n-                \"NOSECURITY\",\n-                \"NOPERMISSIONS\",\n-                \"WITHPERMISSIONS\",\n+                \"DEFAULTS\",\n@@ -430,9 +392,3 @@\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n-                    test(true);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    setSecurityManager();\n-                    test(false);\n+                case DEFAULTS:\n+                    System.out.println(\"\\n*** Using defaults\\n\");\n+                    test();\n@@ -441,11 +397,0 @@\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with control permission\\n\");\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        test(true);\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    break;\n@@ -453,9 +398,3 @@\n-                    System.out.println(\"\\n*** With Security Manager, with control permission, using custom Wrappers\\n\");\n-                    setSecurityManager();\n-                    final boolean previous = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        test(CustomLoggerWrapper::new, true);\n-                    } finally {\n-                        allowControl.get().set(previous);\n-                    }\n+                    System.out.println(\"\\n*** Using custom Wrappers\\n\");\n+                    test(CustomLoggerWrapper::new);\n+                    System.out.println(\"Tetscase count: \" + sequencer.get());\n@@ -464,11 +403,3 @@\n-                    System.out.println(\"\\n*** With Security Manager,\"\n-                            + \" with control permission,\"\n-                            + \" using reflection while logging\\n\");\n-                    setSecurityManager();\n-                    final boolean before = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        test(ReflectionLoggerWrapper::new, true);\n-                    } finally {\n-                        allowControl.get().set(before);\n-                    }\n+                    System.out.println(\"\\n*** Using reflection while logging\\n\");\n+                    test(ReflectionLoggerWrapper::new);\n+                    System.out.println(\"Tetscase count: \" + sequencer.get());\n@@ -476,1 +407,0 @@\n-\n@@ -484,2 +414,2 @@\n-    public static void test(boolean hasRequiredPermissions) {\n-        test(Function.identity(), hasRequiredPermissions);\n+    public static void test() {\n+        test(Function.identity());\n@@ -488,1 +418,1 @@\n-    public static void test(Function<Logger, Logger> wrapper, boolean hasRequiredPermissions) {\n+    public static void test(Function<Logger, Logger> wrapper) {\n@@ -498,12 +428,2 @@\n-        try {\n-            sysLogger1 = wrapper.apply(accessSystemLogger.getLogger(\"foo\"));\n-            loggerDescMap.put(sysLogger1, \"AccessSystemLogger.getLogger(\\\"foo\\\")\");\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(SimplePolicy.LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            throw new RuntimeException(\"unexpected exception: \" + acx, acx);\n-        }\n+        sysLogger1 = wrapper.apply(accessSystemLogger.getLogger(\"foo\"));\n+        loggerDescMap.put(sysLogger1, \"AccessSystemLogger.getLogger(\\\"foo\\\")\");\n@@ -526,12 +446,3 @@\n-        try {\n-            sysLogger2 = wrapper.apply(accessSystemLogger.getLogger(\"foo\", loggerBundle));\n-            loggerDescMap.put(sysLogger2, \"AccessSystemLogger.getLogger(\\\"foo\\\", loggerBundle)\");\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(SimplePolicy.LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            throw new RuntimeException(\"unexpected exception: \" + acx, acx);\n-        }\n+        sysLogger2 = wrapper.apply(accessSystemLogger.getLogger(\"foo\", loggerBundle));\n+        loggerDescMap.put(sysLogger2, \"AccessSystemLogger.getLogger(\\\"foo\\\", loggerBundle)\");\n+\n@@ -548,11 +459,8 @@\n-        allowAll.get().set(true);\n-        try {\n-            appSink = java.util.logging.Logger.getLogger(\"foo\");\n-            sysSink = accessSystemLogger.demandSystemLogger(\"foo\");\n-            sink = java.util.logging.Logger.getLogger(\"foo\");\n-            sink.addHandler(appHandler = sysHandler = new MyHandler());\n-            sink.setUseParentHandlers(false);\n-            provider = LoggerFinder.getLoggerFinder();\n-        } finally {\n-            allowAll.get().set(false);\n-        }\n+\n+        appSink = java.util.logging.Logger.getLogger(\"foo\");\n+        sysSink = accessSystemLogger.demandSystemLogger(\"foo\");\n+        sink = java.util.logging.Logger.getLogger(\"foo\");\n+        sink.addHandler(appHandler = sysHandler = new MyHandler());\n+        sink.setUseParentHandlers(false);\n+        provider = LoggerFinder.getLoggerFinder();\n+\n@@ -565,9 +473,4 @@\n-            allowAll.get().set(true);\n-            try {\n-                appSink.removeHandler(appHandler);\n-                sysSink.removeHandler(sysHandler);\n-                sysSink.setLevel(null);\n-                appSink.setLevel(null);\n-            } finally {\n-                allowAll.get().set(false);\n-            }\n+            appSink.removeHandler(appHandler);\n+            sysSink.removeHandler(sysHandler);\n+            sysSink.setLevel(null);\n+            appSink.setLevel(null);\n@@ -859,72 +762,0 @@\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final Permissions controlPermissions;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        final ThreadLocal<AtomicBoolean> allowAll;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowControl, ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowControl = allowControl;\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-\n-            \/\/ these are used for configuring the test itself...\n-            controlPermissions = new Permissions();\n-            controlPermissions.add(LOGGERFINDER_PERMISSION);\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get().get()) return allPermissions.implies(permission);\n-            if (allowControl.get().get()) return controlPermissions.implies(permission);\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : allowControl.get().get()\n-                    ? controlPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : allowControl.get().get()\n-                    ? controlPermissions : permissions).toPermissions();\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/System\/Logger\/default\/DefaultLoggerTest.java","additions":36,"deletions":205,"binary":false,"changes":241,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,7 +23,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -35,1 +28,0 @@\n-import java.util.stream.Stream;\n@@ -37,1 +29,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -46,1 +37,1 @@\n- * @bug     8140364\n+ * @bug 8140364\n@@ -50,5 +41,2 @@\n- * @run  driver AccessSystemLogger\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader BaseLoggerFinderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader BaseLoggerFinderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader BaseLoggerFinderTest WITHPERMISSIONS\n- * @author danielfuchs\n+ * @run driver AccessSystemLogger\n+ * @run main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader BaseLoggerFinderTest\n@@ -58,2 +46,0 @@\n-    static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n@@ -61,13 +47,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAccess = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-\n@@ -106,8 +79,0 @@\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            Policy.setPolicy(new SimplePolicy(allowControl, allowAccess));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-    }\n@@ -116,6 +81,0 @@\n-        if (args.length == 0)\n-            args = new String[] {\n-                \/\/\"NOSECURITY\",\n-                \"NOPERMISSIONS\",\n-                \"WITHPERMISSIONS\"\n-            };\n@@ -125,46 +84,5 @@\n-        Stream.of(args).map(TestCases::valueOf).forEach((testCase) -> {\n-            TestLoggerFinder provider;\n-            switch (testCase) {\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n-                    provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                    test(provider, true);\n-                    System.out.println(\"Tetscase count: \" + TestLoggerFinder.sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    setSecurityManager();\n-                    try {\n-                        provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                        throw new RuntimeException(\"Expected exception not raised\");\n-                    } catch (AccessControlException x) {\n-                        if (!LOGGERFINDER_PERMISSION.equals(x.getPermission())) {\n-                            throw new RuntimeException(\"Unexpected permission check\", x);\n-                        }\n-                        final boolean control = allowControl.get().get();\n-                        try {\n-                            allowControl.get().set(true);\n-                            provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                        } finally {\n-                            allowControl.get().set(control);\n-                        }\n-                    }\n-                    test(provider, false);\n-                    System.out.println(\"Tetscase count: \" + TestLoggerFinder.sequencer.get());\n-                    break;\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with control permission\\n\");\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                        test(provider, true);\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    break;\n-                default:\n-                    throw new RuntimeException(\"Unknown test case: \" + testCase);\n-            }\n-        });\n+        TestLoggerFinder provider;\n+        System.out.println(\"\\n*** Without Security Manager\\n\");\n+        provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n+        test(provider);\n+        System.out.println(\"Tetscase count: \" + TestLoggerFinder.sequencer.get());\n@@ -174,1 +92,1 @@\n-    public static void test(TestLoggerFinder provider, boolean hasRequiredPermissions) {\n+    public static void test(TestLoggerFinder provider) {\n@@ -183,2 +101,1 @@\n-        try {\n-            appLogger1 =\n+        appLogger1 =\n@@ -186,22 +103,5 @@\n-            loggerDescMap.put(appLogger1, \"provider.getLogger(\\\"foo\\\", BaseLoggerFinderTest.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for logger: \" + acx);\n-            final boolean old = allowControl.get().get();\n-            allowControl.get().set(true);\n-            try {\n-                appLogger1 =\n-                    TestLoggerFinder.LoggerImpl.class.cast(provider.getLogger(\"foo\", BaseLoggerFinderTest.class.getModule()));\n-                    loggerDescMap.put(appLogger1, \"provider.getLogger(\\\"foo\\\", BaseLoggerFinderTest.class.getModule())\");\n-            } finally {\n-                allowControl.get().set(old);\n-            }\n-        }\n+        loggerDescMap.put(appLogger1, \"provider.getLogger(\\\"foo\\\", BaseLoggerFinderTest.class.getModule())\");\n+\n+        TestLoggerFinder.LoggerImpl sysLogger1 =\n+                TestLoggerFinder.LoggerImpl.class.cast(provider.getLogger(\"foo\", Thread.class.getModule()));\n+        loggerDescMap.put(sysLogger1, \"provider.getLogger(\\\"foo\\\", Thread.class.getModule())\");\n@@ -209,24 +109,0 @@\n-        TestLoggerFinder.LoggerImpl sysLogger1 = null;\n-        try {\n-            sysLogger1 = TestLoggerFinder.LoggerImpl.class.cast(provider.getLogger(\"foo\", Thread.class.getModule()));\n-            loggerDescMap.put(sysLogger1, \"provider.getLogger(\\\"foo\\\", Thread.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for system logger: \" + acx);\n-            final boolean old = allowControl.get().get();\n-            allowControl.get().set(true);\n-            try {\n-                sysLogger1 = TestLoggerFinder.LoggerImpl.class.cast(provider.getLogger(\"foo\", Thread.class.getModule()));\n-                loggerDescMap.put(sysLogger1, \"provider.getLogger(\\\"foo\\\", Thread.class.getModule())\");\n-            } finally {\n-                allowControl.get().set(old);\n-            }\n-        }\n@@ -255,24 +131,3 @@\n-        Logger appLogger2 = null;\n-        try {\n-            appLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, BaseLoggerFinderTest.class.getModule());\n-            loggerDescMap.put(appLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, BaseLoggerFinderTest.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for logger: \" + acx);\n-            final boolean old = allowControl.get().get();\n-            allowControl.get().set(true);\n-            try {\n-                appLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, BaseLoggerFinderTest.class.getModule());\n-                loggerDescMap.put(appLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, BaseLoggerFinderTest.class.getModule())\");\n-            } finally {\n-                allowControl.get().set(old);\n-            }\n-        }\n+        Logger appLogger2 =\n+                provider.getLocalizedLogger(\"foo\", loggerBundle, BaseLoggerFinderTest.class.getModule());\n+        loggerDescMap.put(appLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, BaseLoggerFinderTest.class.getModule())\");\n@@ -280,24 +135,3 @@\n-        Logger sysLogger2 = null;\n-        try {\n-            sysLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, Thread.class.getModule());\n-            loggerDescMap.put(sysLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for localized system logger: \" + acx);\n-            final boolean old = allowControl.get().get();\n-            allowControl.get().set(true);\n-            try {\n-                sysLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, Thread.class.getModule());\n-                loggerDescMap.put(sysLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule()))\");\n-            } finally {\n-                allowControl.get().set(old);\n-            }\n-        }\n+        Logger sysLogger2 =\n+                provider.getLocalizedLogger(\"foo\", loggerBundle, Thread.class.getModule());\n+        loggerDescMap.put(sysLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n@@ -624,72 +458,0 @@\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-        final static RuntimePermission CONTROL = LOGGERFINDER_PERMISSION;\n-        final static RuntimePermission ACCESS = new RuntimePermission(\"accessClassInPackage.jdk.internal.logger\");\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        final ThreadLocal<AtomicBoolean> allowAccess;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowControl, ThreadLocal<AtomicBoolean> allowAccess) {\n-            this.allowControl = allowControl;\n-            this.allowAccess = allowAccess;\n-            permissions = new Permissions();\n-        }\n-\n-        Permissions getPermissions() {\n-            if (allowControl.get().get() || allowAccess.get().get()) {\n-                PermissionsBuilder builder =  new PermissionsBuilder()\n-                        .addAll(permissions);\n-                if (allowControl.get().get()) {\n-                    builder.add(CONTROL);\n-                }\n-                if (allowAccess.get().get()) {\n-                    builder.add(ACCESS);\n-                }\n-                return builder.toPermissions();\n-            }\n-            return permissions;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions().implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/BaseLoggerFinderTest\/BaseLoggerFinderTest.java","additions":22,"deletions":260,"binary":false,"changes":282,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,7 +23,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -40,1 +33,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -48,1 +40,0 @@\n-import java.util.stream.Stream;\n@@ -52,1 +43,1 @@\n- * @bug     8140364\n+ * @bug 8140364\n@@ -57,5 +48,2 @@\n- * @run  driver AccessSystemLogger\n- * @run  main\/othervm -Xbootclasspath\/a:boot DefaultLoggerFinderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow DefaultLoggerFinderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow DefaultLoggerFinderTest WITHPERMISSIONS\n- * @author danielfuchs\n+ * @run driver AccessSystemLogger\n+ * @run main\/othervm -Xbootclasspath\/a:boot DefaultLoggerFinderTest\n@@ -65,2 +53,0 @@\n-    static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n@@ -69,12 +55,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n@@ -163,1 +137,0 @@\n-\n@@ -283,9 +256,0 @@\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            Policy.setPolicy(new SimplePolicy(allowAll, allowControl));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-    }\n-\n@@ -293,6 +257,0 @@\n-        if (args.length == 0)\n-            args = new String[] {\n-                \"NOSECURITY\",\n-                \"NOPERMISSIONS\",\n-                \"WITHPERMISSIONS\"\n-            };\n@@ -306,46 +264,4 @@\n-        Stream.of(args).map(TestCases::valueOf).forEach((testCase) -> {\n-            LoggerFinder provider;\n-            switch (testCase) {\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n-                    provider = LoggerFinder.getLoggerFinder();\n-                    test(provider, true, appSink, sysSink);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    setSecurityManager();\n-                    try {\n-                        provider = LoggerFinder.getLoggerFinder();\n-                        throw new RuntimeException(\"Expected exception not raised\");\n-                    } catch (AccessControlException x) {\n-                        if (!LOGGERFINDER_PERMISSION.equals(x.getPermission())) {\n-                            throw new RuntimeException(\"Unexpected permission check\", x);\n-                        }\n-                        final boolean control = allowControl.get().get();\n-                        try {\n-                            allowControl.get().set(true);\n-                            provider = LoggerFinder.getLoggerFinder();\n-                        } finally {\n-                            allowControl.get().set(control);\n-                        }\n-                    }\n-                    test(provider, false, appSink, sysSink);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with control permission\\n\");\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        provider = LoggerFinder.getLoggerFinder();\n-                        test(provider, true, appSink, sysSink);\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    break;\n-                default:\n-                    throw new RuntimeException(\"Unknown test case: \" + testCase);\n-            }\n-        });\n+        System.out.println(\"\\n*** Running test\\n\");\n+        LoggerFinder provider = LoggerFinder.getLoggerFinder();\n+        test(provider, appSink, sysSink);\n+\n@@ -356,1 +272,0 @@\n-            boolean hasRequiredPermissions,\n@@ -364,24 +279,5 @@\n-        Logger appLogger1 = null;\n-        try {\n-            appLogger1 = provider.getLogger(\"foo\", DefaultLoggerFinderTest.class.getModule());\n-            loggerDescMap.put(appLogger1, \"provider.getLogger(\\\"foo\\\", DefaultLoggerFinderTest.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for logger: \" + acx);\n-            boolean old = allowControl.get().get();\n-            allowControl.get().set(true);\n-            try {\n-                appLogger1 =provider.getLogger(\"foo\", DefaultLoggerFinderTest.class.getModule());\n-                loggerDescMap.put(appLogger1, \"provider.getLogger(\\\"foo\\\", DefaultLoggerFinderTest.class.getModule())\");\n-            } finally {\n-                allowControl.get().set(old);\n-            }\n-        }\n+        Logger appLogger1 = provider.getLogger(\"foo\", DefaultLoggerFinderTest.class.getModule());\n+        loggerDescMap.put(appLogger1, \"provider.getLogger(\\\"foo\\\", DefaultLoggerFinderTest.class.getModule())\");\n+\n+        Logger sysLogger1 = provider.getLogger(\"foo\", Thread.class.getModule());\n+        loggerDescMap.put(sysLogger1, \"provider.getLogger(\\\"foo\\\", Thread.class.getModule())\");\n@@ -389,24 +285,0 @@\n-        Logger sysLogger1 = null;\n-        try {\n-            sysLogger1 = provider.getLogger(\"foo\", Thread.class.getModule());\n-            loggerDescMap.put(sysLogger1, \"provider.getLogger(\\\"foo\\\", Thread.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for system logger: \" + acx);\n-            boolean old = allowControl.get().get();\n-            allowControl.get().set(true);\n-            try {\n-                sysLogger1 = provider.getLogger(\"foo\", Thread.class.getModule());\n-                loggerDescMap.put(sysLogger1, \"provider.getLogger(\\\"foo\\\", Thread.class.getModule())\");\n-            } finally {\n-                allowControl.get().set(old);\n-            }\n-        }\n@@ -417,24 +289,2 @@\n-        Logger appLogger2 = null;\n-        try {\n-            appLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, DefaultLoggerFinderTest.class.getModule());\n-            loggerDescMap.put(appLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, DefaultLoggerFinderTest.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for logger: \" + acx);\n-            boolean old = allowControl.get().get();\n-            allowControl.get().set(true);\n-            try {\n-                appLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, DefaultLoggerFinderTest.class.getModule());\n-                loggerDescMap.put(appLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, DefaultLoggerFinderTest.class.getModule())\");\n-            } finally {\n-                allowControl.get().set(old);\n-            }\n-        }\n+        Logger appLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, DefaultLoggerFinderTest.class.getModule());\n+        loggerDescMap.put(appLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, DefaultLoggerFinderTest.class.getModule())\");\n@@ -442,24 +292,2 @@\n-        Logger sysLogger2 = null;\n-        try {\n-            sysLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, Thread.class.getModule());\n-            loggerDescMap.put(sysLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for localized system logger: \" + acx);\n-            boolean old = allowControl.get().get();\n-            allowControl.get().set(true);\n-            try {\n-                sysLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, Thread.class.getModule());\n-                loggerDescMap.put(sysLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n-            } finally {\n-                allowControl.get().set(old);\n-            }\n-        }\n+        Logger sysLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, Thread.class.getModule());\n+        loggerDescMap.put(sysLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n@@ -526,7 +354,1 @@\n-        boolean before = allowAll.get().get();\n-        try {\n-            allowAll.get().set(true);\n-            sink.setLevel(loggerLevel);\n-        } finally {\n-            allowAll.get().set(before);\n-        }\n+        sink.setLevel(loggerLevel);\n@@ -815,74 +637,0 @@\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions withControlPermissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowAll;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowAll,\n-                ThreadLocal<AtomicBoolean> allowControl) {\n-            this.allowAll = allowAll;\n-            this.allowControl = allowControl;\n-            permissions = new Permissions();\n-\n-            withControlPermissions = new Permissions();\n-            withControlPermissions.add(LOGGERFINDER_PERMISSION);\n-\n-            \/\/ these are used for configuring the test itself...\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get().get()) return allPermissions.implies(permission);\n-            if (allowControl.get().get()) return withControlPermissions.implies(permission);\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(\n-                    allowAll.get().get() ? allPermissions :\n-                    allowControl.get().get()\n-                    ? withControlPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(\n-                    allowAll.get().get() ? allPermissions :\n-                    allowControl.get().get()\n-                    ? withControlPermissions : permissions).toPermissions();\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/DefaultLoggerFinderTest\/DefaultLoggerFinderTest.java","additions":18,"deletions":270,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,7 +27,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -49,2 +42,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -61,1 +52,1 @@\n- * @bug     8140364 8145686 8189291\n+ * @bug 8140364 8145686 8189291\n@@ -69,5 +60,3 @@\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader BaseDefaultLoggerFinderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader BaseDefaultLoggerFinderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader BaseDefaultLoggerFinderTest WITHPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader BaseDefaultLoggerFinderTest WITHCUSTOMWRAPPERS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader BaseDefaultLoggerFinderTest WITHREFLECTION\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader BaseDefaultLoggerFinderTest DEFAULTS\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader BaseDefaultLoggerFinderTest WITHCUSTOMWRAPPERS\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader BaseDefaultLoggerFinderTest WITHREFLECTION\n@@ -78,3 +67,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-    static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n@@ -82,12 +68,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAccess = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n@@ -145,9 +119,1 @@\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS,\n-                           WITHCUSTOMWRAPPERS, WITHREFLECTION};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            Policy.setPolicy(new SimplePolicy(allowControl, allowAccess));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-    }\n+    static enum TestCases {DEFAULTS, WITHCUSTOMWRAPPERS, WITHREFLECTION};\n@@ -156,7 +122,2 @@\n-        LoggerFinder provider = null;\n-        try {\n-            TestLoggerFinder.sequencer.incrementAndGet();\n-            provider = LoggerFinder.getLoggerFinder();\n-        } catch(AccessControlException a) {\n-            throw a;\n-        }\n+        TestLoggerFinder.sequencer.incrementAndGet();\n+        LoggerFinder provider = LoggerFinder.getLoggerFinder();\n@@ -397,3 +358,1 @@\n-                \/\/\"NOSECURITY\",\n-                \"NOPERMISSIONS\",\n-                \"WITHPERMISSIONS\",\n+                \"DEFAULTS\",\n@@ -439,2 +398,2 @@\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n+                case DEFAULTS:\n+                    System.out.println(\"\\n*** Defaults\\n\");\n@@ -446,26 +405,1 @@\n-                    test(provider, true);\n-                    System.out.println(\"Tetscase count: \" + TestLoggerFinder.sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    System.out.println(TestLoggerFinder.conf.get());\n-                    setSecurityManager();\n-                    try {\n-                        provider = getLoggerFinder(expectedClass);\n-                        throw new RuntimeException(\"Expected exception not raised\");\n-                    } catch (AccessControlException x) {\n-                        if (!LOGGERFINDER_PERMISSION.equals(x.getPermission())) {\n-                            throw new RuntimeException(\"Unexpected permission check\", x);\n-                        }\n-                        final boolean control = allowControl.get().get();\n-                        try {\n-                            allowControl.get().set(true);\n-                            provider = getLoggerFinder(expectedClass);\n-                            if (!provider.getClass().getName().equals(\"BaseLoggerFinder\")) {\n-                                throw new RuntimeException(\"Unexpected provider: \" + provider.getClass().getName());\n-                            }\n-                        } finally {\n-                            allowControl.get().set(control);\n-                        }\n-                    }\n-                    test(provider, false);\n+                    test(provider);\n@@ -474,16 +408,0 @@\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with control permission\\n\");\n-                    System.out.println(TestLoggerFinder.conf.get());\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        provider = getLoggerFinder(expectedClass);\n-                        if (!provider.getClass().getName().equals(\"BaseLoggerFinder\")) {\n-                            throw new RuntimeException(\"Unexpected provider: \" + provider.getClass().getName());\n-                        }\n-                        test(provider, true);\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    break;\n@@ -491,1 +409,1 @@\n-                    System.out.println(\"\\n*** With Security Manager, with control permission and custom Wrapper\\n\");\n+                    System.out.println(\"\\n*** With custom Wrapper\\n\");\n@@ -493,11 +411,3 @@\n-                    setSecurityManager();\n-                    final boolean previous = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        provider = getLoggerFinder(expectedClass);\n-                        if (!provider.getClass().getName().equals(\"BaseLoggerFinder\")) {\n-                            throw new RuntimeException(\"Unexpected provider: \" + provider.getClass().getName());\n-                        }\n-                        test(provider, CustomLoggerWrapper::new, true);\n-                    } finally {\n-                        allowControl.get().set(previous);\n+                    provider = getLoggerFinder(expectedClass);\n+                    if (!provider.getClass().getName().equals(\"BaseLoggerFinder\")) {\n+                        throw new RuntimeException(\"Unexpected provider: \" + provider.getClass().getName());\n@@ -505,0 +415,1 @@\n+                    test(provider, CustomLoggerWrapper::new);\n@@ -507,3 +418,1 @@\n-                    System.out.println(\"\\n*** With Security Manager,\"\n-                            + \" with control permission,\"\n-                            + \" using reflection while logging\\n\");\n+                    System.out.println(\"\\n*** Using reflection while logging\\n\");\n@@ -511,11 +420,3 @@\n-                    setSecurityManager();\n-                    final boolean before = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        provider = getLoggerFinder(expectedClass);\n-                        if (!provider.getClass().getName().equals(\"BaseLoggerFinder\")) {\n-                            throw new RuntimeException(\"Unexpected provider: \" + provider.getClass().getName());\n-                        }\n-                        test(provider, ReflectionLoggerWrapper::new, true);\n-                    } finally {\n-                        allowControl.get().set(before);\n+                    provider = getLoggerFinder(expectedClass);\n+                    if (!provider.getClass().getName().equals(\"BaseLoggerFinder\")) {\n+                        throw new RuntimeException(\"Unexpected provider: \" + provider.getClass().getName());\n@@ -523,0 +424,1 @@\n+                    test(provider, ReflectionLoggerWrapper::new);\n@@ -531,2 +433,2 @@\n-    public static void test(TestLoggerFinder provider, boolean hasRequiredPermissions) {\n-        test(provider, Function.identity(), hasRequiredPermissions);\n+    public static void test(TestLoggerFinder provider) {\n+        test(provider, Function.identity());\n@@ -535,1 +437,1 @@\n-    public static void test(TestLoggerFinder provider, Function<Logger, Logger> wrapper, boolean hasRequiredPermissions) {\n+    public static void test(TestLoggerFinder provider, Function<Logger, Logger> wrapper) {\n@@ -865,74 +767,0 @@\n-\n-    }\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-        final static RuntimePermission CONTROL = LOGGERFINDER_PERMISSION;\n-        final static RuntimePermission ACCESS = new RuntimePermission(\"accessClassInPackage.jdk.internal.logger\");\n-\n-        final Permissions permissions;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        final ThreadLocal<AtomicBoolean> allowAccess;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowControl, ThreadLocal<AtomicBoolean> allowAccess) {\n-            this.allowControl = allowControl;\n-            this.allowAccess = allowAccess;\n-            permissions = new Permissions();\n-            permissions.add(new RuntimePermission(\"setIO\"));\n-        }\n-\n-        Permissions getPermissions() {\n-            if (allowControl.get().get() || allowAccess.get().get()) {\n-                PermissionsBuilder builder =  new PermissionsBuilder()\n-                        .addAll(permissions);\n-                if (allowControl.get().get()) {\n-                    builder.add(CONTROL);\n-                }\n-                if (allowAccess.get().get()) {\n-                    builder.add(ACCESS);\n-                }\n-                return builder.toPermissions();\n-            }\n-            return permissions;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions().implies(permission) ||\n-                    DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/BaseDefaultLoggerFinderTest\/BaseDefaultLoggerFinderTest.java","additions":25,"deletions":197,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,9 +23,0 @@\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n@@ -42,1 +33,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -49,1 +39,0 @@\n-import java.util.stream.Stream;\n@@ -53,1 +42,1 @@\n- * @bug     8140364\n+ * @bug 8140364\n@@ -59,4 +48,1 @@\n- * @run  main\/othervm -Djava.system.class.loader=CustomSystemClassLoader BaseLoggerBridgeTest NOSECURITY\n- * @run  main\/othervm -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader BaseLoggerBridgeTest NOPERMISSIONS\n- * @run  main\/othervm -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader BaseLoggerBridgeTest WITHPERMISSIONS\n- * @author danielfuchs\n+ * @run main\/othervm -Djava.system.class.loader=CustomSystemClassLoader BaseLoggerBridgeTest\n@@ -75,18 +61,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAccess = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n@@ -346,7 +314,1 @@\n-        boolean old = allowAll.get().get();\n-        allowAccess.get().set(true);\n-        try {\n-            return PlatformLogger.Bridge.convert(logger);\n-        } finally {\n-            allowAccess.get().set(old);\n-        }\n+        return PlatformLogger.Bridge.convert(logger);\n@@ -356,21 +318,1 @@\n-        boolean old = allowAll.get().get();\n-        allowAccess.get().set(true);\n-        try {\n-            return jdk.internal.logger.LazyLoggers.getLogger(name, caller);\n-        } finally {\n-            allowAccess.get().set(old);\n-        }\n-    }\n-\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            \/\/ Ugly test hack: preload the resources needed by String.format\n-            \/\/   We need to do that before setting the security manager\n-            \/\/   because our implementation of CustomSystemClassLoader\n-            \/\/   doesn't have the required permission.\n-            System.out.println(String.format(\"debug: %s\", \"Setting security manager\"));\n-            Policy.setPolicy(new SimplePolicy(allowControl, allowAccess, allowAll));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n+        return jdk.internal.logger.LazyLoggers.getLogger(name, caller);\n@@ -380,54 +322,4 @@\n-        if (args.length == 0)\n-            args = new String[] {\n-                \"NOSECURITY\",\n-                \"NOPERMISSIONS\",\n-                \"WITHPERMISSIONS\"\n-            };\n-\n-\n-        Stream.of(args).map(TestCases::valueOf).forEach((testCase) -> {\n-            TestLoggerFinder provider;\n-            switch (testCase) {\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n-                    provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                    test(provider, true);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    setSecurityManager();\n-                    try {\n-                        provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                        throw new RuntimeException(\"Expected exception not raised\");\n-                    } catch (AccessControlException x) {\n-                        if (!LOGGERFINDER_PERMISSION.equals(x.getPermission())) {\n-                            throw new RuntimeException(\"Unexpected permission check\", x);\n-                        }\n-                        final boolean control = allowControl.get().get();\n-                        try {\n-                            allowControl.get().set(true);\n-                            provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                        } finally {\n-                            allowControl.get().set(control);\n-                        }\n-                    }\n-                    test(provider, false);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with control permission\\n\");\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                        test(provider, true);\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    break;\n-                default:\n-                    throw new RuntimeException(\"Unknown test case: \" + testCase);\n-            }\n-        });\n+        System.out.println(\"\\n*** Starting test\\n\");\n+        TestLoggerFinder provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n+        test(provider);\n+        System.out.println(\"Tetscase count: \" + sequencer.get());\n@@ -437,1 +329,1 @@\n-    public static void test(TestLoggerFinder provider, boolean hasRequiredPermissions) {\n+    public static void test(TestLoggerFinder provider) {\n@@ -443,23 +335,2 @@\n-        TestLoggerFinder.LoggerImpl appSink = null;\n-        try {\n-            appSink = TestLoggerFinder.LoggerImpl.class.cast(provider.getLogger(\"foo\", BaseLoggerBridgeTest.class.getModule()));\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for logger: \" + acx);\n-            boolean old = allowControl.get().get();\n-            allowControl.get().set(true);\n-            try {\n-                appSink = TestLoggerFinder.LoggerImpl.class.cast(provider.getLogger(\"foo\", BaseLoggerBridgeTest.class.getModule()));\n-            } finally {\n-                allowControl.get().set(old);\n-            }\n-        }\n-\n+        TestLoggerFinder.LoggerImpl appSink = TestLoggerFinder.LoggerImpl.class.cast(\n+                provider.getLogger(\"foo\", BaseLoggerBridgeTest.class.getModule()));\n@@ -467,18 +338,2 @@\n-        TestLoggerFinder.LoggerImpl sysSink = null;\n-        try {\n-            sysSink = TestLoggerFinder.LoggerImpl.class.cast(provider.getLogger(\"foo\", Thread.class.getModule()));\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for system logger: \" + acx);\n-        }\n-        if (hasRequiredPermissions && appSink == sysSink) {\n-            throw new RuntimeException(\"identical loggers\");\n-        }\n+        TestLoggerFinder.LoggerImpl sysSink = TestLoggerFinder.LoggerImpl.class.cast(\n+                provider.getLogger(\"foo\", Thread.class.getModule()));\n@@ -492,1 +347,1 @@\n-        if (hasRequiredPermissions && provider.user.contains(sysSink)) {\n+        if (provider.user.contains(sysSink)) {\n@@ -495,1 +350,1 @@\n-        if (hasRequiredPermissions && !provider.system.contains(sysSink)) {\n+        if (!provider.system.contains(sysSink)) {\n@@ -505,4 +360,2 @@\n-        Logger sysLogger1 = null;\n-        try {\n-            sysLogger1 = getLogger(\"foo\", Thread.class.getModule());\n-            loggerDescMap.put(sysLogger1,\n+        Logger sysLogger1 = getLogger(\"foo\", Thread.class.getModule());\n+        loggerDescMap.put(sysLogger1,\n@@ -511,18 +364,1 @@\n-            if (!hasRequiredPermissions) {\n-                \/\/ check that the provider would have thrown an exception\n-                provider.getLogger(\"foo\", Thread.class.getModule());\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for system logger: \" + acx);\n-        }\n-\n-        if (hasRequiredPermissions) {\n-            \/\/ if we don't have permissions sysSink will be null.\n-            testLogger(provider, loggerDescMap, \"foo\", null,\n+        testLogger(provider, loggerDescMap, \"foo\", null,\n@@ -530,1 +366,0 @@\n-        }\n@@ -550,17 +385,3 @@\n-        Logger sysLogger2 = null;\n-        try {\n-            sysLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, Thread.class.getModule());\n-            loggerDescMap.put(sysLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for localized system logger: \" + acx);\n-        }\n-        if (hasRequiredPermissions && appLogger2 == sysLogger2) {\n+        Logger sysLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, Thread.class.getModule());\n+        loggerDescMap.put(sysLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n+        if (appLogger2 == sysLogger2) {\n@@ -569,1 +390,1 @@\n-        if (hasRequiredPermissions && sysLogger2 == sysLogger1) {\n+        if (sysLogger2 == sysLogger1) {\n@@ -572,1 +393,1 @@\n-        if (hasRequiredPermissions && provider.user.contains(sysLogger2)) {\n+        if (provider.user.contains(sysLogger2)) {\n@@ -575,1 +396,1 @@\n-        if (hasRequiredPermissions && provider.system.contains(sysLogger2)) {\n+        if (provider.system.contains(sysLogger2)) {\n@@ -579,3 +400,1 @@\n-        if (hasRequiredPermissions) {\n-            \/\/ if we don't have permissions sysSink will be null.\n-            testLogger(provider, loggerDescMap, \"foo\", loggerBundle,\n+        testLogger(provider, loggerDescMap, \"foo\", loggerBundle,\n@@ -583,2 +402,0 @@\n-        }\n-\n@@ -628,10 +445,9 @@\n-        static Supplier<String> logpMessage(ResourceBundle bundle,\n-                String className, String methodName, Supplier<String> msg) {\n-            if (BEST_EFFORT_FOR_LOGP && bundle == null\n-                    && (className != null || methodName != null)) {\n-                final String cName = className == null ? \"\" :  className;\n-                final String mName = methodName == null ? \"\" : methodName;\n-                return () -> String.format(\"[%s %s] %s\", cName, mName, msg.get());\n-            } else {\n-                return msg;\n-            }\n+    static Supplier<String> logpMessage(ResourceBundle bundle,\n+            String className, String methodName, Supplier<String> msg) {\n+        if (BEST_EFFORT_FOR_LOGP && bundle == null\n+                && (className != null || methodName != null)) {\n+            final String cName = className == null ? \"\" :  className;\n+            final String mName = methodName == null ? \"\" : methodName;\n+            return () -> String.format(\"[%s %s] %s\", cName, mName, msg.get());\n+        } else {\n+            return msg;\n@@ -639,0 +455,1 @@\n+    }\n@@ -640,10 +457,9 @@\n-        static String logpMessage(ResourceBundle bundle,\n-                String className, String methodName, String msg) {\n-            if (BEST_EFFORT_FOR_LOGP && bundle == null\n-                    && (className != null || methodName != null)) {\n-                final String cName = className == null ? \"\" :  className;\n-                final String mName = methodName == null ? \"\" : methodName;\n-                return String.format(\"[%s %s] %s\", cName, mName, msg == null ? \"\" : msg);\n-            } else {\n-                return msg;\n-            }\n+    static String logpMessage(ResourceBundle bundle,\n+            String className, String methodName, String msg) {\n+        if (BEST_EFFORT_FOR_LOGP && bundle == null\n+                && (className != null || methodName != null)) {\n+            final String cName = className == null ? \"\" :  className;\n+            final String mName = methodName == null ? \"\" : methodName;\n+            return String.format(\"[%s %s] %s\", cName, mName, msg == null ? \"\" : msg);\n+        } else {\n+            return msg;\n@@ -651,0 +467,1 @@\n+    }\n@@ -951,86 +768,0 @@\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-        final static RuntimePermission CONTROL = LOGGERFINDER_PERMISSION;\n-        final static RuntimePermission ACCESS_LOGGER = new RuntimePermission(\"accessClassInPackage.jdk.internal.logger\");\n-        final static RuntimePermission ACCESS_LOGGING = new RuntimePermission(\"accessClassInPackage.sun.util.logging\");\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        final ThreadLocal<AtomicBoolean> allowAccess;\n-        final ThreadLocal<AtomicBoolean> allowAll;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowControl,\n-                ThreadLocal<AtomicBoolean> allowAccess,\n-                ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowControl = allowControl;\n-            this.allowAccess = allowAccess;\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            allPermissions = new PermissionsBuilder()\n-                    .add(new java.security.AllPermission())\n-                    .toPermissions();\n-        }\n-\n-        Permissions getPermissions() {\n-            if (allowControl.get().get() || allowAccess.get().get() || allowAll.get().get()) {\n-                PermissionsBuilder builder =  new PermissionsBuilder()\n-                        .addAll(permissions);\n-                if (allowControl.get().get()) {\n-                    builder.add(CONTROL);\n-                }\n-                if (allowAccess.get().get()) {\n-                    builder.add(ACCESS_LOGGER);\n-                    builder.add(ACCESS_LOGGING);\n-                }\n-                if (allowAll.get().get()) {\n-                    builder.addAll(allPermissions);\n-                }\n-                return builder.toPermissions();\n-            }\n-            return permissions;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions().implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/BaseLoggerBridgeTest\/BaseLoggerBridgeTest.java","additions":46,"deletions":315,"binary":false,"changes":361,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,8 +23,0 @@\n-import java.security.AccessController;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n@@ -41,1 +33,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -47,2 +38,0 @@\n-import java.security.AccessControlException;\n-import java.util.stream.Stream;\n@@ -53,1 +42,1 @@\n- * @bug     8140364\n+ * @bug 8140364\n@@ -59,4 +48,1 @@\n- * @run  main\/othervm -Djava.system.class.loader=CustomSystemClassLoader BasePlatformLoggerTest NOSECURITY\n- * @run  main\/othervm -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader BasePlatformLoggerTest NOPERMISSIONS\n- * @run  main\/othervm -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader BasePlatformLoggerTest WITHPERMISSIONS\n- * @author danielfuchs\n+ * @run main\/othervm -Djava.system.class.loader=CustomSystemClassLoader BasePlatformLoggerTest\n@@ -71,19 +57,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAccess = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-\n@@ -334,16 +301,1 @@\n-        boolean old = allowAccess.get().get();\n-        allowAccess.get().set(true);\n-        try {\n-            return PlatformLogger.getLogger(name);\n-        } finally {\n-            allowAccess.get().set(old);\n-        }\n-    }\n-\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            Policy.setPolicy(new SimplePolicy(allowControl, allowAccess, allowAll));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n+        return PlatformLogger.getLogger(name);\n@@ -353,54 +305,4 @@\n-        if (args.length == 0)\n-            args = new String[] {\n-                \"NOSECURITY\",\n-                \"NOPERMISSIONS\",\n-                \"WITHPERMISSIONS\"\n-            };\n-\n-\n-        Stream.of(args).map(TestCases::valueOf).forEach((testCase) -> {\n-            TestLoggerFinder provider;\n-            switch (testCase) {\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n-                    provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                    test(provider, true);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    setSecurityManager();\n-                    try {\n-                        provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                        throw new RuntimeException(\"Expected exception not raised\");\n-                    } catch (AccessControlException x) {\n-                        if (!LOGGERFINDER_PERMISSION.equals(x.getPermission())) {\n-                            throw new RuntimeException(\"Unexpected permission check\", x);\n-                        }\n-                        final boolean control = allowControl.get().get();\n-                        try {\n-                            allowControl.get().set(true);\n-                            provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                        } finally {\n-                            allowControl.get().set(control);\n-                        }\n-                    }\n-                    test(provider, false);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with control permission\\n\");\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n-                        test(provider, true);\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    break;\n-                default:\n-                    throw new RuntimeException(\"Unknown test case: \" + testCase);\n-            }\n-        });\n+        System.out.println(\"\\n*** Running test\\n\");\n+        TestLoggerFinder provider = TestLoggerFinder.class.cast(LoggerFinder.getLoggerFinder());\n+        test(provider);\n+        System.out.println(\"Tetscase count: \" + sequencer.get());\n@@ -410,1 +312,1 @@\n-    public static void test(TestLoggerFinder provider, boolean hasRequiredPermissions) {\n+    public static void test(TestLoggerFinder provider) {\n@@ -414,5 +316,1 @@\n-        TestLoggerFinder.LoggerImpl appSink;\n-        boolean before = allowControl.get().get();\n-        try {\n-            allowControl.get().set(true);\n-            appSink = TestLoggerFinder.LoggerImpl.class.cast(\n+        TestLoggerFinder.LoggerImpl appSink = TestLoggerFinder.LoggerImpl.class.cast(\n@@ -420,3 +318,0 @@\n-        } finally {\n-            allowControl.get().set(before);\n-        }\n@@ -424,5 +319,1 @@\n-        TestLoggerFinder.LoggerImpl sysSink = null;\n-        before = allowControl.get().get();\n-        try {\n-            allowControl.get().set(true);\n-            sysSink = TestLoggerFinder.LoggerImpl.class.cast(\n+        TestLoggerFinder.LoggerImpl sysSink = TestLoggerFinder.LoggerImpl.class.cast(\n@@ -430,5 +321,1 @@\n-        } finally {\n-            allowControl.get().set(before);\n-        }\n-\n-        if (hasRequiredPermissions && appSink == sysSink) {\n+        if (appSink == sysSink) {\n@@ -444,1 +331,1 @@\n-        if (hasRequiredPermissions && provider.user.contains(sysSink)) {\n+        if (provider.user.contains(sysSink)) {\n@@ -447,1 +334,1 @@\n-        if (hasRequiredPermissions && !provider.system.contains(sysSink)) {\n+        if (!provider.system.contains(sysSink)) {\n@@ -632,85 +519,0 @@\n-\n-    }\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-        final static RuntimePermission CONTROL = LOGGERFINDER_PERMISSION;\n-        final static RuntimePermission ACCESS_LOGGING = new RuntimePermission(\"accessClassInPackage.sun.util.logging\");\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        final ThreadLocal<AtomicBoolean> allowAccess;\n-        final ThreadLocal<AtomicBoolean> allowAll;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowControl,\n-                ThreadLocal<AtomicBoolean> allowAccess,\n-                ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowControl = allowControl;\n-            this.allowAccess = allowAccess;\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            allPermissions = new PermissionsBuilder()\n-                    .add(new java.security.AllPermission())\n-                    .toPermissions();\n-        }\n-\n-        Permissions getPermissions() {\n-            if (allowControl.get().get() || allowAccess.get().get() || allowAll.get().get()) {\n-                PermissionsBuilder builder =  new PermissionsBuilder()\n-                        .addAll(permissions);\n-                if (allowControl.get().get()) {\n-                    builder.add(CONTROL);\n-                }\n-                if (allowAccess.get().get()) {\n-                    builder.add(ACCESS_LOGGING);\n-                }\n-                if (allowAll.get().get()) {\n-                    builder.addAll(allPermissions);\n-                }\n-                return builder.toPermissions();\n-            }\n-            return permissions;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions().implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/BasePlatformLoggerTest\/BasePlatformLoggerTest.java","additions":14,"deletions":212,"binary":false,"changes":226,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,7 +33,0 @@\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -51,2 +44,1 @@\n- * @bug     8140364 8189291\n- * @author  danielfuchs\n+ * @bug 8140364 8189291\n@@ -60,3 +52,2 @@\n- * @run main\/othervm BootstrapLoggerTest NO_SECURITY\n- * @run main\/othervm -Djava.security.manager=allow BootstrapLoggerTest SECURE\n- * @run main\/othervm\/timeout=120 -Djava.security.manager=allow BootstrapLoggerTest SECURE_AND_WAIT\n+ * @run main\/othervm BootstrapLoggerTest\n+ * @run main\/othervm\/timeout=120 BootstrapLoggerTest RUN_AND_WAIT\n@@ -66,1 +57,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n@@ -87,1 +77,1 @@\n-        NO_SECURITY, SECURE, SECURE_AND_WAIT\n+        DEFAULTS, RUN_AND_WAIT\n@@ -92,1 +82,1 @@\n-            args = new String[] { TestCase.SECURE_AND_WAIT.name() };\n+            args = new String[] { TestCase.RUN_AND_WAIT.name() };\n@@ -114,6 +104,0 @@\n-        if (test != TestCase.NO_SECURITY) {\n-            LogStream.err.println(\"Setting security manager\");\n-            Policy.setPolicy(new SimplePolicy());\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n@@ -153,1 +137,0 @@\n-        SimplePolicy.allowAll.set(Boolean.TRUE);\n@@ -156,0 +139,3 @@\n+        Set<Thread> set = Thread.getAllStackTraces().keySet().stream()\n+                .filter((t) -> t.getName().startsWith(\"BootstrapMessageLoggerTask-\"))\n+                .collect(Collectors.toSet());\n@@ -157,3 +143,0 @@\n-            Set<Thread> set = Thread.getAllStackTraces().keySet().stream()\n-                    .filter((t) -> t.getName().startsWith(\"BootstrapMessageLoggerTask-\"))\n-                    .collect(Collectors.toSet());\n@@ -164,3 +147,3 @@\n-            Optional<Thread> t = set.stream().findFirst();\n-            if (t.isPresent()) {\n-                threadRef = new WeakReference<>(t.get(), queue);\n+            Optional<Thread> firstThread = set.stream().findFirst();\n+            if (firstThread.isPresent()) {\n+                threadRef = new WeakReference<>(firstThread.get(), queue);\n@@ -168,2 +151,3 @@\n-        } finally{\n-            SimplePolicy.allowAll.set(Boolean.FALSE);\n+        } finally {\n+            set.clear();\n+            set = null;\n@@ -171,0 +155,1 @@\n+\n@@ -210,1 +195,0 @@\n-        SimplePolicy.allowAll.set(Boolean.TRUE);\n@@ -238,2 +222,0 @@\n-        } finally {\n-            SimplePolicy.allowAll.set(Boolean.FALSE);\n@@ -264,4 +246,2 @@\n-        Logger bazbaz = null;\n-        SimplePolicy.allowAll.set(Boolean.TRUE);\n-        try {\n-            bazbaz = java.lang.System.LoggerFinder\n+\n+        Logger bazbaz = java.lang.System.LoggerFinder\n@@ -269,3 +249,1 @@\n-        } finally {\n-            SimplePolicy.allowAll.set(Boolean.FALSE);\n-        }\n+\n@@ -275,0 +253,1 @@\n+\n@@ -296,21 +275,20 @@\n-        SimplePolicy.allowAll.set(Boolean.TRUE);\n-        try {\n-            \/\/ Though unlikely, it is not impossible that the bootstrap logger\n-            \/\/ executor may have released its first thread and spawned a new one.\n-            \/\/ If that happened then the executor itself might have been GC'ed\n-            \/\/ as well and a new one might have been created.\n-            \/\/ The code below will lookup the executor threads again and\n-            \/\/ join them.\n-            \/\/ Only one may be active at a given time, but that might not\n-            \/\/ be the one referenced by threadRef.\n-            \/\/ We're just making sure all of them have stopped running\n-            \/\/ before verifying that the executor is eventually GC'ed.\n-            final WeakReference<Thread> previous = threadRef;\n-            Stream<WeakReference<Thread>> stream = Thread.getAllStackTraces().keySet().stream()\n-               .filter((t) -> t.getName().startsWith(\"BootstrapMessageLoggerTask-\"))\n-               .filter((t) -> previous == null ? true : t != previous.get())\n-               .map((t) -> new WeakReference<>(t, queue));\n-            List<WeakReference<Thread>> threads = stream.collect(Collectors.toList());\n-            if (previous != null) threads.add(previous);\n-            threads.forEach(t -> LogStream.err.println(t.get()));\n-            stream = null;\n+        \/\/\n+        \/\/ Though unlikely, it is not impossible that the bootstrap logger\n+        \/\/ executor may have released its first thread and spawned a new one.\n+        \/\/ If that happened then the executor itself might have been GC'ed\n+        \/\/ as well and a new one might have been created.\n+        \/\/ The code below will lookup the executor threads again and\n+        \/\/ join them.\n+        \/\/ Only one may be active at a given time, but that might not\n+        \/\/ be the one referenced by threadRef.\n+        \/\/ We're just making sure all of them have stopped running\n+        \/\/ before verifying that the executor is eventually GC'ed.\n+        final WeakReference<Thread> previous = threadRef;\n+        Stream<WeakReference<Thread>> stream = Thread.getAllStackTraces().keySet().stream()\n+           .filter((t) -> t.getName().startsWith(\"BootstrapMessageLoggerTask-\"))\n+           .filter((t) -> previous == null ? true : t != previous.get())\n+           .map((t) -> new WeakReference<>(t, queue));\n+        List<WeakReference<Thread>> threads = stream.collect(Collectors.toList());\n+        if (previous != null) threads.add(previous);\n+        threads.forEach(t -> LogStream.err.println(t.get()));\n+        stream = null;\n@@ -318,13 +296,7 @@\n-            if (test == TestCase.SECURE_AND_WAIT) {\n-                \/\/ First wait for all executor threads to terminate\n-                for (var ref : threads) {\n-                    Thread t = ref.get();\n-                    if (t != null) {\n-                        if (!(Boolean)isAlive.invoke(null) && t.isAlive()) {\n-                            throw new RuntimeException(\"Executor already terminated\");\n-                        } else {\n-                            LogStream.err.println(\"Executor still alive as expected: \" + t.getName());\n-                        }\n-                        LogStream.err.println(\"Waiting for \" + t.getName() + \" to terminate (join)\");\n-                        t.join(60_000);\n-                        t = null;\n+        if (test == TestCase.RUN_AND_WAIT) {\n+            \/\/ First wait for all executor threads to terminate\n+            for (var ref : threads) {\n+                Thread t = ref.get();\n+                if (t != null) {\n+                    if (!(Boolean)isAlive.invoke(null) && t.isAlive()) {\n+                        throw new RuntimeException(\"Executor already terminated\");\n@@ -332,7 +304,1 @@\n-                        LogStream.err.println(\"WeakReference<Thread> is already cleared.\");\n-                        long count = Thread.getAllStackTraces().keySet().stream()\n-                            .filter((tr) -> tr.getName().startsWith(\"BootstrapMessageLoggerTask-\"))\n-                            .count();\n-                        if (count != 0) {\n-                            LogStream.err.println(\"There are \" + count + \" threads still lingering.\");\n-                        }\n+                        LogStream.err.println(\"Executor still alive as expected: \" + t.getName());\n@@ -340,10 +306,10 @@\n-                }\n-                \/\/ Then wait until all the executor threads are GC'ed\n-                while (!threads.isEmpty()) {\n-                    LogStream.err.println(\"Calling System.gc()\");\n-                    System.gc();\n-                    LogStream.err.println(\"Waiting for BootstrapMessageLoggerTask to be gc'ed\");\n-                    Reference<?> tref;\n-                    while ((tref = queue.remove(1000)) == null) {\n-                        LogStream.err.println(\"Calling System.gc()\");\n-                        System.gc();\n+                    LogStream.err.println(\"Waiting for \" + t.getName() + \" to terminate (join)\");\n+                    t.join(60_000);\n+                    t = null;\n+                } else {\n+                    LogStream.err.println(\"WeakReference<Thread> is already cleared.\");\n+                    long count = Thread.getAllStackTraces().keySet().stream()\n+                        .filter((tr) -> tr.getName().startsWith(\"BootstrapMessageLoggerTask-\"))\n+                        .count();\n+                    if (count != 0) {\n+                        LogStream.err.println(\"There are \" + count + \" threads still lingering.\");\n@@ -351,4 +317,0 @@\n-\n-                    threads.remove(tref);\n-                    LogStream.err.println(\"BootstrapMessageLoggerTask has been gc'ed: \"\n-                                          + threads.size() + \" remaining...\");\n@@ -356,2 +318,4 @@\n-                \/\/ Then wait for the executor to be gc'ed...\n-                LogStream.err.println(\"Waiting for the executor to be gc'ed: Calling System.gc()\");\n+            }\n+            \/\/ Then wait until all the executor threads are GC'ed\n+            while (!threads.isEmpty()) {\n+                LogStream.err.println(\"Calling System.gc()\");\n@@ -359,4 +323,3 @@\n-                for (int i=0; i<10; i++) {\n-                    if (!(Boolean)isAlive.invoke(null)) break;\n-                    \/\/ It would be unexpected that we reach here...\n-                    Thread.sleep(1000);\n+                LogStream.err.println(\"Waiting for BootstrapMessageLoggerTask to be gc'ed\");\n+                Reference<?> tref;\n+                while ((tref = queue.remove(1000)) == null) {\n@@ -367,7 +330,3 @@\n-                if ((Boolean)isAlive.invoke(null)) {\n-                    throw new RuntimeException(\"Executor still alive\");\n-                } else {\n-                    LogStream.err.println(\"Executor terminated as expected.\");\n-                }\n-            } else {\n-                LogStream.err.println(\"Not checking executor termination for \" + test);\n+                threads.remove(tref);\n+                LogStream.err.println(\"BootstrapMessageLoggerTask has been gc'ed: \"\n+                                      + threads.size() + \" remaining...\");\n@@ -375,11 +334,9 @@\n-        } finally {\n-            SimplePolicy.allowAll.set(Boolean.FALSE);\n-        }\n-        LogStream.err.println(test.name() + \": PASSED\");\n-    }\n-\n-    final static class SimplePolicy extends Policy {\n-        static final ThreadLocal<Boolean> allowAll = new ThreadLocal<Boolean>() {\n-            @Override\n-            protected Boolean initialValue() {\n-                return Boolean.FALSE;\n+            \/\/ Then wait for the executor to be gc'ed...\n+            LogStream.err.println(\"Waiting for the executor to be gc'ed: Calling System.gc()\");\n+            System.gc();\n+            for (int i=0; i<10; i++) {\n+                if (!(Boolean)isAlive.invoke(null)) break;\n+                \/\/ It would be unexpected that we reach here...\n+                Thread.sleep(1000);\n+                LogStream.err.println(\"Calling System.gc()\");\n+                System.gc();\n@@ -387,1 +344,0 @@\n-        };\n@@ -389,4 +345,4 @@\n-        Permissions getPermissions() {\n-            Permissions perms = new Permissions();\n-            if (allowAll.get()) {\n-                perms.add(new AllPermission());\n+            if ((Boolean)isAlive.invoke(null)) {\n+                throw new RuntimeException(\"Executor still alive\");\n+            } else {\n+                LogStream.err.println(\"Executor terminated as expected.\");\n@@ -394,17 +350,2 @@\n-            return perms;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions(domain).implies(permission) ||\n-                   DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return getPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return getPermissions();\n+        } else {\n+            LogStream.err.println(\"Not checking executor termination for \" + test);\n@@ -412,1 +353,1 @@\n-\n+        LogStream.err.println(test.name() + \": PASSED\");\n@@ -414,0 +355,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/BootstrapLogger\/BootstrapLoggerTest.java","additions":85,"deletions":143,"binary":false,"changes":228,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,7 +25,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -42,1 +35,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -49,1 +41,0 @@\n-import java.util.stream.Stream;\n@@ -54,1 +45,1 @@\n- * @bug     8140364\n+ * @bug 8140364\n@@ -62,4 +53,1 @@\n- * @run  main\/othervm -Djava.system.class.loader=CustomSystemClassLoader LoggerBridgeTest NOSECURITY\n- * @run  main\/othervm -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader LoggerBridgeTest NOPERMISSIONS\n- * @run  main\/othervm -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader LoggerBridgeTest WITHPERMISSIONS\n- * @author danielfuchs\n+ * @run  main\/othervm -Djava.system.class.loader=CustomSystemClassLoader LoggerBridgeTest\n@@ -74,18 +62,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAccess = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n@@ -416,6 +386,1 @@\n-        final boolean before = allowAll.get().getAndSet(true);\n-        try {\n-            return m.getClassLoader();\n-        } finally {\n-            allowAll.get().set(before);\n-        }\n+        return m.getClassLoader();\n@@ -534,8 +499,0 @@\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            Policy.setPolicy(new SimplePolicy(allowControl, allowAccess, allowAll));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-    }\n@@ -544,54 +501,4 @@\n-        if (args.length == 0)\n-            args = new String[] {\n-                \/\/\"NOSECURITY\",\n-                \"NOPERMISSIONS\",\n-                \"WITHPERMISSIONS\"\n-            };\n-\n-\n-        Stream.of(args).map(TestCases::valueOf).forEach((testCase) -> {\n-            LoggerFinder provider;\n-            switch (testCase) {\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n-                    provider = LoggerFinder.getLoggerFinder();\n-                    test(provider, true);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    setSecurityManager();\n-                    try {\n-                        provider = LoggerFinder.getLoggerFinder();\n-                        throw new RuntimeException(\"Expected exception not raised\");\n-                    } catch (AccessControlException x) {\n-                        if (!LOGGERFINDER_PERMISSION.equals(x.getPermission())) {\n-                            throw new RuntimeException(\"Unexpected permission check\", x);\n-                        }\n-                        final boolean control = allowControl.get().get();\n-                        try {\n-                            allowControl.get().set(true);\n-                            provider = LoggerFinder.getLoggerFinder();\n-                        } finally {\n-                            allowControl.get().set(control);\n-                        }\n-                    }\n-                    test(provider, false);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with control permission\\n\");\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        provider = LoggerFinder.getLoggerFinder();\n-                        test(provider, true);\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    break;\n-                default:\n-                    throw new RuntimeException(\"Unknown test case: \" + testCase);\n-            }\n-        });\n+        System.out.println(\"\\n*** Running test\\n\");\n+        LoggerFinder provider = LoggerFinder.getLoggerFinder();\n+        test(provider);\n+        System.out.println(\"Tetscase count: \" + sequencer.get());\n@@ -601,1 +508,1 @@\n-    public static void test(LoggerFinder provider, boolean hasRequiredPermissions) {\n+    public static void test(LoggerFinder provider) {\n@@ -610,17 +517,2 @@\n-        Logger sysLogger1 = null;\n-        try {\n-            sysLogger1 = getLogger(provider, \"foo\", Thread.class.getModule());\n-            loggerDescMap.put(sysLogger1, \"provider.getLogger(\\\"foo\\\", Thread.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for system logger: \" + acx);\n-        }\n-\n+        Logger sysLogger1 = getLogger(provider, \"foo\", Thread.class.getModule());\n+        loggerDescMap.put(sysLogger1, \"provider.getLogger(\\\"foo\\\", Thread.class.getModule())\");\n@@ -628,2 +520,1 @@\n-        Logger appLogger2 =\n-                System.getLogger(\"foo\", loggerBundle);\n+        Logger appLogger2 = System.getLogger(\"foo\", loggerBundle);\n@@ -632,17 +523,3 @@\n-        Logger sysLogger2 = null;\n-        try {\n-            sysLogger2 = getLogger(provider, \"foo\", loggerBundle, Thread.class.getModule());\n-            loggerDescMap.put(sysLogger2, \"provider.getLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for localized system logger: \" + acx);\n-        }\n-        if (hasRequiredPermissions && appLogger2 == sysLogger2) {\n+        Logger sysLogger2 = getLogger(provider, \"foo\", loggerBundle, Thread.class.getModule());\n+        loggerDescMap.put(sysLogger2, \"provider.getLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n+        if (appLogger2 == sysLogger2) {\n@@ -654,1 +531,1 @@\n-        if (hasRequiredPermissions && sysLogger2 == sysLogger1) {\n+        if (sysLogger2 == sysLogger1) {\n@@ -659,6 +536,1 @@\n-        final LoggerImpl appSink;\n-        final LoggerImpl sysSink;\n-        boolean old = allowControl.get().get();\n-        allowControl.get().set(true);\n-        try {\n-           appSink = LoggerImpl.class.cast(\n+        final LoggerImpl appSink = LoggerImpl.class.cast(\n@@ -666,1 +538,1 @@\n-           sysSink = LoggerImpl.class.cast(\n+        final LoggerImpl sysSink = LoggerImpl.class.cast(\n@@ -668,3 +540,0 @@\n-        } finally {\n-            allowControl.get().set(old);\n-        }\n@@ -673,3 +542,1 @@\n-        if (hasRequiredPermissions) {\n-            testLogger(provider, loggerDescMap, \"foo\", null, convert(sysLogger1), sysSink);\n-        }\n+        testLogger(provider, loggerDescMap, \"foo\", null, convert(sysLogger1), sysSink);\n@@ -677,3 +544,1 @@\n-        if (hasRequiredPermissions) {\n-            testLogger(provider, loggerDescMap, \"foo\", loggerBundle, convert(sysLogger2), sysSink);\n-        }\n+        testLogger(provider, loggerDescMap, \"foo\", loggerBundle, convert(sysLogger2), sysSink);\n@@ -996,86 +861,0 @@\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-        final static RuntimePermission CONTROL = LOGGERFINDER_PERMISSION;\n-        final static RuntimePermission ACCESS_LOGGER = new RuntimePermission(\"accessClassInPackage.jdk.internal.logger\");\n-        final static RuntimePermission ACCESS_LOGGING = new RuntimePermission(\"accessClassInPackage.sun.util.logging\");\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        final ThreadLocal<AtomicBoolean> allowAccess;\n-        final ThreadLocal<AtomicBoolean> allowAll;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowControl,\n-                ThreadLocal<AtomicBoolean> allowAccess,\n-                ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowControl = allowControl;\n-            this.allowAccess = allowAccess;\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            allPermissions = new PermissionsBuilder()\n-                    .add(new java.security.AllPermission())\n-                    .toPermissions();\n-        }\n-\n-        Permissions getPermissions() {\n-            if (allowControl.get().get() || allowAccess.get().get() || allowAll.get().get()) {\n-                PermissionsBuilder builder =  new PermissionsBuilder()\n-                        .addAll(permissions);\n-                if (allowControl.get().get()) {\n-                    builder.add(CONTROL);\n-                }\n-                if (allowAccess.get().get()) {\n-                    builder.add(ACCESS_LOGGER);\n-                    builder.add(ACCESS_LOGGING);\n-                }\n-                if (allowAll.get().get()) {\n-                    builder.addAll(allPermissions);\n-                }\n-                return builder.toPermissions();\n-            }\n-            return permissions;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions().implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/LoggerBridgeTest\/LoggerBridgeTest.java","additions":20,"deletions":241,"binary":false,"changes":261,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,7 +27,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -40,1 +33,0 @@\n-import java.util.stream.Stream;\n@@ -56,1 +48,1 @@\n- * @bug     8140364 8189291 8283049\n+ * @bug 8140364 8189291 8283049\n@@ -65,28 +57,9 @@\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader LoggerFinderLoaderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader LoggerFinderLoaderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader LoggerFinderLoaderTest WITHPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true LoggerFinderLoaderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true LoggerFinderLoaderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true LoggerFinderLoaderTest WITHPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=ERROR LoggerFinderLoaderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=ERROR LoggerFinderLoaderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=ERROR LoggerFinderLoaderTest WITHPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=DEBUG LoggerFinderLoaderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=DEBUG LoggerFinderLoaderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=DEBUG LoggerFinderLoaderTest WITHPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=QUIET LoggerFinderLoaderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=QUIET LoggerFinderLoaderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=QUIET LoggerFinderLoaderTest WITHPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true LoggerFinderLoaderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true LoggerFinderLoaderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true LoggerFinderLoaderTest WITHPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=ERROR LoggerFinderLoaderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=ERROR LoggerFinderLoaderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=ERROR LoggerFinderLoaderTest WITHPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=DEBUG LoggerFinderLoaderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=DEBUG LoggerFinderLoaderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=DEBUG LoggerFinderLoaderTest WITHPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=QUIET LoggerFinderLoaderTest NOSECURITY\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=QUIET LoggerFinderLoaderTest NOPERMISSIONS\n- * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=QUIET LoggerFinderLoaderTest WITHPERMISSIONS\n- * @author danielfuchs\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader LoggerFinderLoaderTest\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true LoggerFinderLoaderTest\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=ERROR LoggerFinderLoaderTest\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=DEBUG LoggerFinderLoaderTest\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Dtest.fails=true -Djdk.logger.finder.error=QUIET LoggerFinderLoaderTest\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true LoggerFinderLoaderTest\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=ERROR LoggerFinderLoaderTest\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=DEBUG LoggerFinderLoaderTest\n+ * @run  main\/othervm -Xbootclasspath\/a:boot -Djava.system.class.loader=CustomSystemClassLoader -Djdk.logger.finder.singleton=true -Djdk.logger.finder.error=QUIET LoggerFinderLoaderTest\n@@ -96,3 +69,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-    static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n@@ -100,13 +70,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAccess = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-\n@@ -193,9 +150,0 @@\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            Policy.setPolicy(new SimplePolicy(allowControl, allowAccess));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-    }\n-\n@@ -246,2 +194,0 @@\n-        } catch(AccessControlException a) {\n-            throw a;\n@@ -394,50 +340,7 @@\n-        Stream.of(args).map(TestCases::valueOf).forEach((testCase) -> {\n-            LoggerFinder provider;\n-            ErrorStream.errorStream.restore();\n-            switch (testCase) {\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n-                    System.out.println(TestLoggerFinder.conf.get());\n-                    provider = getLoggerFinder(expectedClass, errorPolicy, ensureSingleton);\n-                    test(provider, true);\n-                    System.out.println(\"Tetscase count: \" + TestLoggerFinder.sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    System.out.println(TestLoggerFinder.conf.get());\n-                    setSecurityManager();\n-                    try {\n-                        provider = getLoggerFinder(expectedClass, errorPolicy, ensureSingleton);\n-                        throw new RuntimeException(\"Expected exception not raised\");\n-                    } catch (AccessControlException x) {\n-                        if (!LOGGERFINDER_PERMISSION.equals(x.getPermission())) {\n-                            throw new RuntimeException(\"Unexpected permission check\", x);\n-                        }\n-                        final boolean control = allowControl.get().get();\n-                        try {\n-                            allowControl.get().set(true);\n-                            provider = getLoggerFinder(expectedClass, errorPolicy, ensureSingleton);\n-                        } finally {\n-                            allowControl.get().set(control);\n-                        }\n-                    }\n-                    test(provider, false);\n-                    System.out.println(\"Tetscase count: \" + TestLoggerFinder.sequencer.get());\n-                    break;\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with control permission\\n\");\n-                    System.out.println(TestLoggerFinder.conf.get());\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        provider = getLoggerFinder(expectedClass, errorPolicy, ensureSingleton);\n-                        test(provider, true);\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    break;\n-                default:\n-                    throw new RuntimeException(\"Unknown test case: \" + testCase);\n-            }\n-        });\n+        LoggerFinder provider;\n+        ErrorStream.errorStream.restore();\n+        System.out.println(\"\\n*** Test starting\\n\");\n+        System.out.println(TestLoggerFinder.conf.get());\n+        provider = getLoggerFinder(expectedClass, errorPolicy, ensureSingleton);\n+        test(provider);\n+        System.out.println(\"Tetscase count: \" + TestLoggerFinder.sequencer.get());\n@@ -447,1 +350,1 @@\n-    public static void test(LoggerFinder provider, boolean hasRequiredPermissions) {\n+    public static void test(LoggerFinder provider) {\n@@ -767,74 +670,0 @@\n-\n-    }\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-        final static RuntimePermission CONTROL = LOGGERFINDER_PERMISSION;\n-        final static RuntimePermission ACCESS = new RuntimePermission(\"accessClassInPackage.jdk.internal.logger\");\n-\n-        final Permissions permissions;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        final ThreadLocal<AtomicBoolean> allowAccess;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowControl, ThreadLocal<AtomicBoolean> allowAccess) {\n-            this.allowControl = allowControl;\n-            this.allowAccess = allowAccess;\n-            permissions = new Permissions();\n-            permissions.add(new RuntimePermission(\"setIO\"));\n-        }\n-\n-        Permissions getPermissions() {\n-            if (allowControl.get().get() || allowAccess.get().get()) {\n-                PermissionsBuilder builder =  new PermissionsBuilder()\n-                        .addAll(permissions);\n-                if (allowControl.get().get()) {\n-                    builder.add(CONTROL);\n-                }\n-                if (allowAccess.get().get()) {\n-                    builder.add(ACCESS);\n-                }\n-                return builder.toPermissions();\n-            }\n-            return permissions;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions().implies(permission) ||\n-                   DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/LoggerFinderLoaderTest\/LoggerFinderLoaderTest.java","additions":19,"deletions":190,"binary":false,"changes":209,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,9 +23,0 @@\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n@@ -42,1 +33,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -50,1 +40,0 @@\n-import java.util.stream.Stream;\n@@ -55,1 +44,1 @@\n- * @bug     8140364\n+ * @bug 8140364\n@@ -62,4 +51,1 @@\n- * @run  main\/othervm -Djava.system.class.loader=CustomSystemClassLoader PlatformLoggerBridgeTest NOSECURITY\n- * @run  main\/othervm -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader PlatformLoggerBridgeTest NOPERMISSIONS\n- * @run  main\/othervm -Djava.security.manager=allow -Djava.system.class.loader=CustomSystemClassLoader PlatformLoggerBridgeTest WITHPERMISSIONS\n- * @author danielfuchs\n+ * @run  main\/othervm -Djava.system.class.loader=CustomSystemClassLoader PlatformLoggerBridgeTest\n@@ -69,2 +55,0 @@\n-    static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n@@ -73,18 +57,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAccess = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n@@ -476,9 +442,0 @@\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            Policy.setPolicy(new SimplePolicy(allowControl, allowAccess, allowAll));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-    }\n-\n@@ -486,7 +443,0 @@\n-        if (args.length == 0)\n-            args = new String[] {\n-                \/\/\"NOSECURITY\",\n-                \"NOPERMISSIONS\",\n-                \"WITHPERMISSIONS\"\n-            };\n-\n@@ -494,52 +444,4 @@\n-        Stream.of(args).map(TestCases::valueOf).forEach((testCase) -> {\n-            LoggerFinder provider;\n-            switch (testCase) {\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n-                    provider = LoggerFinder.getLoggerFinder();\n-                    test(provider, true);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    setSecurityManager();\n-                    try {\n-                        provider = LoggerFinder.getLoggerFinder();\n-                        throw new RuntimeException(\"Expected exception not raised\");\n-                    } catch (AccessControlException x) {\n-                        if (!LOGGERFINDER_PERMISSION.equals(x.getPermission())) {\n-                            throw new RuntimeException(\"Unexpected permission check\", x);\n-                        }\n-                        final boolean control = allowControl.get().get();\n-                        try {\n-                            allowControl.get().set(true);\n-                            provider = LoggerFinder.getLoggerFinder();\n-                        } finally {\n-                            allowControl.get().set(control);\n-                        }\n-                    }\n-                    test(provider, false);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with access permission\\n\");\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        provider = LoggerFinder.getLoggerFinder();\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    final boolean access = allowAccess.get().get();\n-                    try {\n-                        allowAccess.get().set(true);\n-                        test(provider, true);\n-                    } finally {\n-                        allowAccess.get().set(access);\n-                    }\n-                    break;\n-                default:\n-                    throw new RuntimeException(\"Unknown test case: \" + testCase);\n-            }\n-        });\n+        System.out.println(\"\\n*** Without Security Manager\\n\");\n+        LoggerFinder provider = LoggerFinder.getLoggerFinder();\n+        test(provider);\n+        System.out.println(\"Tetscase count: \" + sequencer.get());\n@@ -549,1 +451,1 @@\n-    public static void test(LoggerFinder provider, boolean hasRequiredPermissions) {\n+    public static void test(LoggerFinder provider) {\n@@ -553,24 +455,2 @@\n-        PlatformLogger sysLogger1 = null;\n-        try {\n-            sysLogger1 = PlatformLogger.getLogger(\"foo\");\n-            loggerDescMap.put(sysLogger1, \"PlatformLogger.getLogger(\\\"foo\\\")\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(SimplePolicy.ACCESS_LOGGING)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            final boolean old = allowAccess.get().get();\n-            allowAccess.get().set(true);\n-            try {\n-                sysLogger1 = PlatformLogger.getLogger(\"foo\");\n-                loggerDescMap.put(sysLogger1, \"PlatformLogger.getLogger(\\\"foo\\\")\");\n-            } finally {\n-                allowAccess.get().set(old);\n-            }\n-            System.out.println(\"Got expected exception for system logger: \" + acx);\n-        }\n+        PlatformLogger sysLogger1 = PlatformLogger.getLogger(\"foo\");\n+        loggerDescMap.put(sysLogger1, \"PlatformLogger.getLogger(\\\"foo\\\")\");\n@@ -578,9 +458,2 @@\n-        final LoggerImpl sysSink;\n-        boolean old = allowControl.get().get();\n-        allowControl.get().set(true);\n-        try {\n-           sysSink = LoggerImpl.class.cast(\n-                        provider.getLogger(\"foo\", Thread.class.getModule()));\n-        } finally {\n-            allowControl.get().set(old);\n-        }\n+        final LoggerImpl sysSink = LoggerImpl.class.cast(\n+                provider.getLogger(\"foo\", Thread.class.getModule()));\n@@ -775,86 +648,0 @@\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-        final static RuntimePermission CONTROL = LOGGERFINDER_PERMISSION;\n-        final static RuntimePermission ACCESS_LOGGER = new RuntimePermission(\"accessClassInPackage.jdk.internal.logger\");\n-        final static RuntimePermission ACCESS_LOGGING = new RuntimePermission(\"accessClassInPackage.sun.util.logging\");\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        final ThreadLocal<AtomicBoolean> allowAccess;\n-        final ThreadLocal<AtomicBoolean> allowAll;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowControl,\n-                ThreadLocal<AtomicBoolean> allowAccess,\n-                ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowControl = allowControl;\n-            this.allowAccess = allowAccess;\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            allPermissions = new PermissionsBuilder()\n-                    .add(new java.security.AllPermission())\n-                    .toPermissions();\n-        }\n-\n-        Permissions getPermissions() {\n-            if (allowControl.get().get() || allowAccess.get().get() || allowAll.get().get()) {\n-                PermissionsBuilder builder =  new PermissionsBuilder()\n-                        .addAll(permissions);\n-                if (allowControl.get().get()) {\n-                    builder.add(CONTROL);\n-                }\n-                if (allowAccess.get().get()) {\n-                    builder.add(ACCESS_LOGGER);\n-                    builder.add(ACCESS_LOGGING);\n-                }\n-                if (allowAll.get().get()) {\n-                    builder.addAll(allPermissions);\n-                }\n-                return builder.toPermissions();\n-            }\n-            return permissions;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions().implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/PlatformLoggerBridgeTest\/PlatformLoggerBridgeTest.java","additions":12,"deletions":225,"binary":false,"changes":237,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,7 +23,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -40,1 +33,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -49,1 +41,0 @@\n-import java.util.stream.Stream;\n@@ -54,1 +45,1 @@\n- * @bug     8140364\n+ * @bug 8140364\n@@ -61,4 +52,1 @@\n- * @run  main\/othervm DefaultLoggerBridgeTest NOSECURITY\n- * @run  main\/othervm -Djava.security.manager=allow DefaultLoggerBridgeTest NOPERMISSIONS\n- * @run  main\/othervm -Djava.security.manager=allow DefaultLoggerBridgeTest WITHPERMISSIONS\n- * @author danielfuchs\n+ * @run main\/othervm DefaultLoggerBridgeTest NOSECURITY\n@@ -70,18 +58,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAccess = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n@@ -242,7 +212,1 @@\n-        boolean old = allowAccess.get().get();\n-        allowAccess.get().set(true);\n-        try {\n-            return PlatformLogger.Bridge.convert(logger);\n-        } finally {\n-            allowAccess.get().set(old);\n-        }\n+        return PlatformLogger.Bridge.convert(logger);\n@@ -252,16 +216,1 @@\n-        boolean old = allowAccess.get().get();\n-        allowAccess.get().set(true);\n-        try {\n-            return jdk.internal.logger.LazyLoggers.getLogger(name, caller);\n-        } finally {\n-            allowAccess.get().set(old);\n-        }\n-    }\n-\n-    static enum TestCases {NOSECURITY, NOPERMISSIONS, WITHPERMISSIONS};\n-\n-    static void setSecurityManager() {\n-        if (System.getSecurityManager() == null) {\n-            Policy.setPolicy(new SimplePolicy(allowControl, allowAccess, allowAll));\n-            System.setSecurityManager(new SecurityManager());\n-        }\n+        return jdk.internal.logger.LazyLoggers.getLogger(name, caller);\n@@ -271,35 +220,3 @@\n-        if (args.length == 0)\n-            args = new String[] {\n-                \"NOSECURITY\",\n-                \"NOPERMISSIONS\",\n-                \"WITHPERMISSIONS\"\n-            };\n-\n-        Stream.of(args).map(TestCases::valueOf).forEach((testCase) -> {\n-            switch (testCase) {\n-                case NOSECURITY:\n-                    System.out.println(\"\\n*** Without Security Manager\\n\");\n-                    test(true);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case NOPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, without permissions\\n\");\n-                    setSecurityManager();\n-                    test(false);\n-                    System.out.println(\"Tetscase count: \" + sequencer.get());\n-                    break;\n-                case WITHPERMISSIONS:\n-                    System.out.println(\"\\n*** With Security Manager, with control permission\\n\");\n-                    setSecurityManager();\n-                    final boolean control = allowControl.get().get();\n-                    try {\n-                        allowControl.get().set(true);\n-                        test(true);\n-                    } finally {\n-                        allowControl.get().set(control);\n-                    }\n-                    break;\n-                default:\n-                    throw new RuntimeException(\"Unknown test case: \" + testCase);\n-            }\n-        });\n+        System.out.println(\"\\n*** Starting test\\n\");\n+        test();\n+        System.out.println(\"Tetscase count: \" + sequencer.get());\n@@ -309,1 +226,1 @@\n-    public static void test(boolean hasRequiredPermissions) {\n+    public static void test() {\n@@ -321,21 +238,1 @@\n-        LoggerFinder provider;\n-        try {\n-            provider = LoggerFinder.getLoggerFinder();\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Expected exception not raised\");\n-            }\n-        } catch (AccessControlException x) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected permission check\", x);\n-            }\n-            if (!SimplePolicy.LOGGERFINDER_PERMISSION.equals(x.getPermission())) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + x, x);\n-            }\n-            final boolean control = allowControl.get().get();\n-            try {\n-                allowControl.get().set(true);\n-                provider = LoggerFinder.getLoggerFinder();\n-            } finally {\n-                allowControl.get().set(control);\n-            }\n-        }\n+        LoggerFinder provider = LoggerFinder.getLoggerFinder();\n@@ -343,17 +240,3 @@\n-        Logger sysLogger1b = null;\n-        try {\n-            sysLogger1b = provider.getLogger(\"foo\", Thread.class.getModule());\n-            if (sysLogger1b != sysLogger1a) {\n-                loggerDescMap.put(sysLogger1b, \"provider.getLogger(\\\"foo\\\", Thread.class.getModule())\");\n-            }\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(SimplePolicy.LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for system logger: \" + acx);\n+        Logger sysLogger1b =  provider.getLogger(\"foo\", Thread.class.getModule());\n+        if (sysLogger1b != sysLogger1a) {\n+            loggerDescMap.put(sysLogger1b, \"provider.getLogger(\\\"foo\\\", Thread.class.getModule())\");\n@@ -369,17 +252,3 @@\n-        Logger sysLogger2 = null;\n-        try {\n-            sysLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, Thread.class.getModule());\n-            loggerDescMap.put(sysLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n-            if (!hasRequiredPermissions) {\n-                throw new RuntimeException(\"Managed to obtain a system logger without permission\");\n-            }\n-        } catch (AccessControlException acx) {\n-            if (hasRequiredPermissions) {\n-                throw new RuntimeException(\"Unexpected security exception: \", acx);\n-            }\n-            if (!acx.getPermission().equals(SimplePolicy.LOGGERFINDER_PERMISSION)) {\n-                throw new RuntimeException(\"Unexpected permission in exception: \" + acx, acx);\n-            }\n-            System.out.println(\"Got expected exception for localized system logger: \" + acx);\n-        }\n-        if (hasRequiredPermissions && appLogger2 == sysLogger2) {\n+        Logger sysLogger2 = provider.getLocalizedLogger(\"foo\", loggerBundle, Thread.class.getModule());\n+        loggerDescMap.put(sysLogger2, \"provider.getLocalizedLogger(\\\"foo\\\", loggerBundle, Thread.class.getModule())\");\n+        if (appLogger2 == sysLogger2) {\n@@ -388,1 +257,1 @@\n-        if (hasRequiredPermissions && sysLogger2 == sysLogger1a) {\n+        if (sysLogger2 == sysLogger1a) {\n@@ -392,3 +261,0 @@\n-        final java.util.logging.Logger sink;\n-        final java.util.logging.Logger appSink;\n-        final java.util.logging.Logger sysSink;\n@@ -397,4 +263,1 @@\n-        final boolean old = allowAll.get().get();\n-        allowAll.get().set(true);\n-        try {\n-            appSink = LoggingProviderImpl.getLogManagerAccess().demandLoggerFor(\n+        final java.util.logging.Logger appSink = LoggingProviderImpl.getLogManagerAccess().demandLoggerFor(\n@@ -402,1 +265,1 @@\n-            sysSink = LoggingProviderImpl.getLogManagerAccess().demandLoggerFor(\n+        final java.util.logging.Logger sysSink = LoggingProviderImpl.getLogManagerAccess().demandLoggerFor(\n@@ -404,7 +267,3 @@\n-            if (appSink == sysSink) {\n-                throw new RuntimeException(\"identical backend loggers\");\n-            }\n-            sink = java.util.logging.Logger.getLogger(\"foo\");\n-            if (appSink != sink) {\n-                throw new RuntimeException(\"expected same application logger\");\n-            }\n+        if (appSink == sysSink) {\n+            throw new RuntimeException(\"identical backend loggers\");\n+        }\n@@ -412,4 +271,3 @@\n-            sink.addHandler(appHandler = sysHandler = new MyHandler());\n-            sink.setUseParentHandlers(VERBOSE);\n-        } finally {\n-            allowAll.get().set(old);\n+        final java.util.logging.Logger sink = java.util.logging.Logger.getLogger(\"foo\");\n+        if (appSink != sink) {\n+            throw new RuntimeException(\"expected same application logger\");\n@@ -418,0 +276,3 @@\n+        sink.addHandler(appHandler = sysHandler = new MyHandler());\n+        sink.setUseParentHandlers(VERBOSE);\n+\n@@ -429,7 +290,2 @@\n-            allowAll.get().set(true);\n-            try {\n-                appSink.removeHandler(appHandler);\n-                sysSink.removeHandler(sysHandler);\n-            } finally {\n-                allowAll.get().set(old);\n-            }\n+            appSink.removeHandler(appHandler);\n+            sysSink.removeHandler(sysHandler);\n@@ -481,7 +337,1 @@\n-        boolean before = allowAll.get().get();\n-        try {\n-            allowAll.get().set(true);\n-            sink.setLevel(loggerLevel);\n-        } finally {\n-            allowAll.get().set(before);\n-        }\n+        sink.setLevel(loggerLevel);\n@@ -491,7 +341,1 @@\n-        boolean old = allowAccess.get().get();\n-        allowAccess.get().set(true);\n-        try {\n-            return sun.util.logging.PlatformLogger.Level.valueOf(level.getName());\n-        } finally {\n-            allowAccess.get().set(old);\n-        }\n+        return sun.util.logging.PlatformLogger.Level.valueOf(level.getName());\n@@ -770,87 +614,0 @@\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-        public static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n-        final static RuntimePermission ACCESS_LOGGER = new RuntimePermission(\"accessClassInPackage.jdk.internal.logger\");\n-        final static RuntimePermission ACCESS_LOGGING = new RuntimePermission(\"accessClassInPackage.sun.util.logging\");\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        final ThreadLocal<AtomicBoolean> allowAccess;\n-        final ThreadLocal<AtomicBoolean> allowAll;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowControl,\n-                ThreadLocal<AtomicBoolean> allowAccess,\n-                ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowControl = allowControl;\n-            this.allowAccess = allowAccess;\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            allPermissions = new PermissionsBuilder()\n-                    .add(new java.security.AllPermission())\n-                    .toPermissions();\n-        }\n-\n-        Permissions getPermissions() {\n-            if (allowControl.get().get() || allowAccess.get().get() || allowAll.get().get()) {\n-                PermissionsBuilder builder =  new PermissionsBuilder()\n-                        .addAll(permissions);\n-                if (allowControl.get().get()) {\n-                    builder.add(LOGGERFINDER_PERMISSION);\n-                }\n-                if (allowAccess.get().get()) {\n-                    builder.add(ACCESS_LOGGER);\n-                    builder.add(ACCESS_LOGGING);\n-                }\n-                if (allowAll.get().get()) {\n-                    builder.addAll(allPermissions);\n-                }\n-                return builder.toPermissions();\n-            }\n-            return permissions;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions().implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(getPermissions()).toPermissions();\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/jdk\/DefaultLoggerBridgeTest\/DefaultLoggerBridgeTest.java","additions":32,"deletions":275,"binary":false,"changes":307,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,6 +23,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -39,1 +33,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -49,1 +42,1 @@\n-\/**\n+\/*\n@@ -51,1 +44,1 @@\n- * @bug     8140364\n+ * @bug 8140364\n@@ -54,2 +47,1 @@\n- * @run  main\/othervm -Djava.security.manager=allow DefaultPlatformLoggerTest\n- * @author danielfuchs\n+ * @run  main\/othervm DefaultPlatformLoggerTest\n@@ -61,12 +53,0 @@\n-    static final ThreadLocal<AtomicBoolean> allowControl = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n-    static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-        @Override\n-        protected AtomicBoolean initialValue() {\n-            return  new AtomicBoolean(false);\n-        }\n-    };\n@@ -259,3 +239,0 @@\n-        Policy.setPolicy(new SimplePolicy(allowAll, allowControl));\n-        System.setSecurityManager(new SecurityManager());\n-\n@@ -267,1 +244,0 @@\n-        allowControl.get().set(true);\n@@ -328,7 +304,1 @@\n-        boolean before = allowAll.get().get();\n-        try {\n-            allowAll.get().set(true);\n-            sink.setLevel(loggerLevel);\n-        } finally {\n-            allowAll.get().set(before);\n-        }\n+        sink.setLevel(loggerLevel);\n@@ -468,77 +438,0 @@\n-\n-    }\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-        public static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions withControlPermissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowAll;\n-        final ThreadLocal<AtomicBoolean> allowControl;\n-        public SimplePolicy(ThreadLocal<AtomicBoolean> allowAll,\n-                ThreadLocal<AtomicBoolean> allowControl) {\n-            this.allowAll = allowAll;\n-            this.allowControl = allowControl;\n-            permissions = new Permissions();\n-\n-            withControlPermissions = new Permissions();\n-            withControlPermissions.add(LOGGERFINDER_PERMISSION);\n-\n-            \/\/ these are used for configuring the test itself...\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get().get()) return allPermissions.implies(permission);\n-            if (allowControl.get().get()) return withControlPermissions.implies(permission);\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(\n-                    allowAll.get().get() ? allPermissions :\n-                    allowControl.get().get()\n-                    ? withControlPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(\n-                    allowAll.get().get() ? allPermissions :\n-                    allowControl.get().get()\n-                    ? withControlPermissions : permissions).toPermissions();\n-        }\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/jdk\/DefaultPlatformLoggerTest\/DefaultPlatformLoggerTest.java","additions":5,"deletions":112,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.io.File;\n@@ -38,1 +37,0 @@\n-import java.nio.file.Files;\n@@ -45,7 +43,0 @@\n-            Files.writeString(Path.of(\"policy\"), \"\"\"\n-                    grant {\n-                        permission java.lang.RuntimePermission \"setIO\";\n-                        permission java.lang.RuntimePermission \"createSecurityManager\";\n-                        permission java.lang.RuntimePermission \"setSecurityManager\";\n-                    };\n-                    \"\"\");\n@@ -56,6 +47,6 @@\n-            disallowTest(null, testClasses);\n-            allowTest(\"allow\", testClasses);\n-            disallowTest(\"disallow\", testClasses);\n-            enableTest(\"\", testClasses);\n-            enableTest(\"default\", testClasses);\n-            enableTest(\"java.lang.SecurityManager\", testClasses);\n+            failLateTest(null, testClasses);\n+            failLateTest(\"disallow\", testClasses);\n+            failEarlyTest(\"allow\", testClasses);\n+            failEarlyTest(\"\", testClasses);\n+            failEarlyTest(\"default\", testClasses);\n+            failEarlyTest(\"java.lang.SecurityManager\", testClasses);\n@@ -66,2 +57,1 @@\n-                    Path.of(\"A.class\"),\n-                    Path.of(\"B.class\"));\n+                    Path.of(\"A.class\"));\n@@ -69,1 +59,1 @@\n-            disallowTest(null, \"a.jar\");\n+            failLateTest(null, \"a.jar\");\n@@ -71,1 +61,0 @@\n-            System.out.println(\"SM is enabled: \" + (System.getSecurityManager() != null));\n@@ -77,3 +66,0 @@\n-                \/\/ Run A.run() twice will show only one warning\n-                \/\/ (setSecurityManager(null) to ensure the next set is permitted)\n-                \/\/ Run B.run() and a new warning will appear\n@@ -81,2 +67,0 @@\n-                A.run();    \/\/ System.setSecurityManager(null);\n-                B.run();    \/\/ System.setSecurityManager(new SecurityManager());\n@@ -91,10 +75,3 @@\n-    \/\/ When SM is allowed, no startup warning, has setSM warning\n-    static void allowTest(String prop, String cp) throws Exception {\n-        checkInstallMessage(run(prop, cp), cp)\n-                .shouldHaveExitValue(0)\n-                .stdoutShouldContain(\"SM is enabled: false\")\n-                .shouldNotContain(\"A command line option\");\n-    }\n-\n-    \/\/ When SM is disallowed, no startup warning, setSM fails\n-    static void disallowTest(String prop, String cp) throws Exception {\n+    \/\/ When -Djava.security.manager is not set, or set to \"allow\",\n+    \/\/ or \"disallow\", JVM starts but setSecurityManager will fail.\n+    static void failLateTest(String prop, String cp) throws Exception {\n@@ -103,4 +80,2 @@\n-                .stdoutShouldContain(\"SM is enabled: false\")\n-                .shouldNotContain(\"A command line option\")\n-                .shouldNotContain(\"A terminally deprecated method\")\n-                .stderrShouldContain(\"UnsupportedOperationException: The Security Manager is deprecated and will be removed in a future release\");\n+                .stderrShouldContain(\"at SecurityManagerWarnings.main\")\n+                .stderrShouldContain(\"UnsupportedOperationException: Setting a Security Manager is not supported\");\n@@ -109,20 +84,8 @@\n-    \/\/ When SM is allowed, has startup warning, has setSM warning\n-    static void enableTest(String prop, String cp) throws Exception {\n-        checkInstallMessage(run(prop, cp), cp)\n-                .shouldHaveExitValue(0)\n-                .stdoutShouldContain(\"SM is enabled: true\")\n-                .stderrShouldContain(\"WARNING: A command line option has enabled the Security Manager\")\n-                .stderrShouldContain(\"WARNING: The Security Manager is deprecated and will be removed in a future release\");\n-    }\n-\n-    \/\/ Check the setSM warning\n-    static OutputAnalyzer checkInstallMessage(OutputAnalyzer oa, String cp) {\n-        String uri = new File(cp).toURI().toString();\n-        return oa\n-                .stderrShouldContain(\"WARNING: A terminally deprecated method in java.lang.System has been called\")\n-                .stderrShouldContain(\"WARNING: System::setSecurityManager has been called by A (\" + uri + \")\")\n-                .stderrShouldContain(\"WARNING: System::setSecurityManager has been called by B (\" + uri + \")\")\n-                .stderrShouldContain(\"WARNING: Please consider reporting this to the maintainers of A\")\n-                .stderrShouldContain(\"WARNING: Please consider reporting this to the maintainers of B\")\n-                .stderrShouldContain(\"WARNING: System::setSecurityManager will be removed in a future release\")\n-                .stderrShouldNotMatch(\"(?s)by A.*by A\");    \/\/ \"by A\" appears only once\n+    \/\/ When -Djava.security.manager is set to any other values,\n+    \/\/ JVM will not start.\n+    static void failEarlyTest(String prop, String cp) throws Exception {\n+        run(prop, cp)\n+                .shouldNotHaveExitValue(0)\n+                .shouldNotContain(\"SecurityManagerWarnings.main\")\n+                .shouldContain(\"at java.lang.System.initPhase3\")\n+                .shouldContain(\"Error: A command line option has attempted to allow or enable the Security Manager.\");\n@@ -141,1 +104,0 @@\n-                    \"-Djava.security.policy=policy\",\n@@ -154,6 +116,0 @@\n-\n-class B {\n-    static void run() {\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/System\/SecurityManagerWarnings.java","additions":21,"deletions":65,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -1,202 +0,0 @@\n-\/*\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6302839\n- * @summary SecurityRace System field accesses in two threads\n- * @author Pete Soper\n- * @build SecurityRace\n- * @run main\/othervm\/policy=System.policy SecurityRace\n- *\/\n-\n-\/*\n- * By default the test runs for a very short time.  Use main arg \"stress\"\n- * to have a real chance of exposing races. Use main arg \"time\" to report\n- * the average nanoseconds per invocation of System.setSecurityManager and\n- * System.getSecurityManager. No testing for access races is performed with\n- * argument \"time.\"\n- *\n- * Requires security permissions \"setSecurityManager\" and\n- * \"createSecurityManager.\"\n- *\/\n-\n-\n-\n-public class SecurityRace implements Runnable {\n-\n-    \/\/ Number of iterations to \"warm up\" and get methods compiled\/inlined.\n-    \/\/ (this is conservative)\n-    static final int WARMUP_LOOPS = 100000;\n-\n-    \/\/ Number of timing trials\n-    static final int TIMING_TRIALS = 10;\n-\n-    \/\/ Seconds to run this in \"stress\" mode. This is double the average\n-    \/\/ time to expose the races of bug 6302839 on a Blade 1000. Invoke\n-    \/\/ the program with the \"stress\" option multiple times for more\n-    \/\/ confidence.\n-    static final int STRESS_MILLISECONDS = 300000;\n-    static final int SET_TIMING_LOOPS    = 10000;\n-\n-    \/\/ Max seconds to run before terminating the test (\"declaring victory\").\n-    static int MAX_MILLISECONDS = 100;\n-\n-    \/\/ Number of iterations to time\n-    static final int GET_TIMING_LOOPS = 10000000;\n-\n-    \/\/ Set true by main thread when NPE caught or time to terminate.\n-    \/\/ Set true by other thread when NPE caught. It makes\n-    \/\/ no difference where the NPE is thrown.\n-    static volatile boolean stopthreads = false;\n-\n-    \/\/ Number of getProperty invocations between main loop checks\n-    static final int       GETPROPERTY_LOOPS = 30000;\n-\n-    \/\/ Used by race and timing tests. Must get set non-null at lease once.\n-    static SecurityManager sm = new SecurityManager();\n-\n-    public static void main(String[] argv) throws Exception {\n-        String s;\n-\n-        if (argv.length > 0) {\n-            if (argv[0].equals(\"time\")) {\n-\n-                \/\/ Run the timing method\n-                \/\/ First warm up the method to make sure it gets compiled\n-                for (int i = 0; i < WARMUP_LOOPS; i++) {\n-                    timeit(1, 1, 1);\n-                }\n-\n-                System.out.println(\"boo\");\n-\n-                \/\/ Now do the actual timing\n-                timeit(TIMING_TRIALS, GET_TIMING_LOOPS, SET_TIMING_LOOPS);\n-            } else if (argv[0].equals(\"stress\")) {\n-\n-                \/\/ For stress test the test duration is boosted\n-                MAX_MILLISECONDS = STRESS_MILLISECONDS;\n-            } else {\n-                throw new RuntimeException(\n-                    \"SecurityRace: \" + argv[0]\n-                    + \" argument to main not recognized\");\n-            }    \/\/ if argv\n-        }        \/\/ if length\n-\n-        long start = System.currentTimeMillis(),\n-             end   = start + MAX_MILLISECONDS;\n-\n-        \/\/ Create and start racing thread\n-        (new Thread(new SecurityRace())).start();\n-\n-        \/\/ main thread alternates batches of getProperty() with time checks\n-        try {\n-            do {\n-                if (stopthreads) {\n-\n-                    \/\/ other thread suffered an NPE\n-                    throw new RuntimeException(\"SecurityRace failed with NPE\");\n-                }\n-\n-                for (int i = 0; i < GETPROPERTY_LOOPS; i++) {\n-                    s = System.getProperty(\"java.version\");\n-                }\n-            } while (System.currentTimeMillis() < end);\n-        } catch (NullPointerException e) {\n-            throw new RuntimeException(\"SecurityRace failed with NPE\");\n-        } finally {\n-\n-            \/\/ make sure other thread terminates\n-            stopthreads = true;\n-        }\n-    }    \/\/ main\n-\n-    \/\/ System.security mutator.\n-    public void run() {\n-        try {\n-            while (true) {\n-                if (stopthreads) {\n-                    return;\n-                }\n-\n-                System.setSecurityManager(sm);\n-\n-                \/\/ The goal is to catch another thread testing the\n-                \/\/ value set above and trying to use it after it's\n-                \/\/ nulled below.\n-                System.setSecurityManager(null);\n-            }\n-        } catch (NullPointerException e) {\n-            stopthreads = true;\n-\n-            return;\n-        }\n-    }\n-\n-    \/\/ Time method execution. Collects trials number of timings\n-    \/\/ for the number of accessor and mutator invocation loops\n-    \/\/ specified.\n-    public static void timeit(int timing_trials, int get_timing_loops,\n-                              int set_timing_loops) {\n-        try {\n-            long start;\n-\n-            \/\/ Time the methods and report average.\n-            \/\/ Time multiple trials so noise is apparent and a\n-            \/\/ T test can be used to establish significance.\n-            for (int j = 0; j < timing_trials; j++) {\n-                start = System.nanoTime();\n-\n-                for (int i = 0; i < get_timing_loops; i++) {\n-                    sm = System.getSecurityManager();\n-                }\n-\n-                \/\/ Don't print for \"warmup\" case. This might mean that\n-                \/\/ the compiler fails to compile the println (setting it\n-                \/\/ up to execute via interpretation using an \"uncommon trap\")\n-                \/\/ but we don't care if this println runs slowly!\n-                if (timing_trials > 1) {\n-                    System.out.println((float) (System.nanoTime() - start)\n-                                       \/ (float) get_timing_loops);\n-                }\n-            }\n-\n-            for (int j = 0; j < timing_trials; j++) {\n-                start = System.nanoTime();\n-\n-                for (int i = 0; i < set_timing_loops; i++) {\n-                    System.setSecurityManager(sm);\n-                }\n-\n-                if (timing_trials > 1) {\n-                    System.out.println((float) (System.nanoTime() - start)\n-                                       \/ (float) set_timing_loops);\n-                }\n-            }\n-\n-            return;\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"SecurityRace got unexpected: \" + e);\n-        }\n-    }    \/\/ timeit\n-}    \/\/ SecurityRace\n","filename":"test\/jdk\/java\/lang\/System\/SecurityRace.java","additions":0,"deletions":202,"binary":false,"changes":202,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/\/\n-\/\/ Used by SecurityRace.java \n-\n-\/\/ default permissions granted to all domains\n-\n-grant { \n-\t\/\/ These two added for SecurityRace test\n-\n-\tpermission java.lang.RuntimePermission \"setSecurityManager\";\n-\tpermission java.lang.RuntimePermission \"createSecurityManager\";\n-\n-\t\/\/ allows anyone to listen on un-privileged ports\n-\tpermission java.net.SocketPermission \"localhost:1024-\", \"listen\";\n-\n-\t\/\/ \"standard\" properies that can be read by anyone\n-\n-\tpermission java.util.PropertyPermission \"java.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vendor.url\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.class.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.arch\", \"read\";\n-\tpermission java.util.PropertyPermission \"file.separator\", \"read\";\n-\tpermission java.util.PropertyPermission \"path.separator\", \"read\";\n-\tpermission java.util.PropertyPermission \"line.separator\", \"read\";\n-\n-\tpermission java.util.PropertyPermission \"java.specification.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.specification.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.specification.name\", \"read\";\n-\n-\tpermission java.util.PropertyPermission \"java.vm.specification.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.specification.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.specification.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.name\", \"read\";\n-};\n-\n","filename":"test\/jdk\/java\/lang\/System\/System.policy","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,4 +27,2 @@\n- * @summary Check properties of Annotations returned from\n- * getParameterAnnotations, including freedom from security\n- * exceptions.\n- * @run main\/othervm -Djava.security.manager=allow ParameterAnnotations\n+ * @summary Check properties of Annotations returned from getParameterAnnotations\n+ * @run main ParameterAnnotations\n@@ -40,3 +38,0 @@\n-import java.security.Permission;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -52,13 +47,0 @@\n-    \/\/ A security policy that differs from the default only in that it\n-    \/\/ allows a security manager to be uninstalled.\n-    static class MyPolicy extends Policy {\n-        final Policy defaultPolicy;\n-        MyPolicy(Policy defaultPolicy) {\n-            this.defaultPolicy = defaultPolicy;\n-        }\n-        public boolean implies(ProtectionDomain pd, Permission p) {\n-            return p.getName().equals(\"setSecurityManager\") ||\n-                defaultPolicy.implies(pd, p);\n-        }\n-    }\n-\n@@ -70,16 +52,0 @@\n-        \/\/ Test without a security manager\n-        test1();\n-\n-        \/\/ Test with a security manager\n-        Policy defaultPolicy = Policy.getPolicy();\n-        Policy.setPolicy(new MyPolicy(defaultPolicy));\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            test1();\n-        } finally {\n-            System.setSecurityManager(null);\n-            Policy.setPolicy(defaultPolicy);\n-        }\n-    }\n-\n-    void test1() throws Throwable {\n","filename":"test\/jdk\/java\/lang\/annotation\/ParameterAnnotations.java","additions":3,"deletions":37,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug     8073056\n- * @summary Repeating annotations throws java.security.AccessControlException with a SecurityManager\n- *\n- * @library \/test\/lib\n- * @build jdk.test.lib.Asserts\n- * @run main CustomRepeatingWithSecurityManager\n- * @run main\/othervm -Djava.security.manager=allow CustomRepeatingWithSecurityManager \"withSM\"\n- *\/\n-\n-import java.lang.annotation.*;\n-import java.lang.reflect.*;\n-\n-import jdk.test.lib.Asserts;\n-\n-public class CustomRepeatingWithSecurityManager {\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 1) {\n-            SecurityManager sm = new SecurityManager();\n-            System.setSecurityManager(sm);\n-        }\n-\n-        Asserts.assertTrue(new CustomAnnotations().getAnnotationsByType(MyAnnotation.class).length == 2,\n-                \"Array should contain 2 annotations\");\n-        Asserts.assertEquals(new CustomAnnotations().getAnnotationsByType(MyAnnotation.class)[1].name(),\n-                \"Bar\", \"Should be 'Bar'\");\n-    }\n-\n-    static class CustomAnnotations implements AnnotatedElement {\n-        @Override\n-        public Annotation[] getDeclaredAnnotations() {\n-            Annotation[] res = new Annotation[1];\n-            res[0] = new MyAnnotationsImpl();\n-            return res;\n-        }\n-\n-        @Override\n-        public Annotation[] getAnnotations() {\n-            return getDeclaredAnnotations();\n-        }\n-\n-        @Override\n-        public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {\n-            return null;\n-        }\n-    }\n-\n-    static class MyAnnotationsImpl implements MyAnnotations {\n-        public MyAnnotation[] value() {\n-            MyAnnotation[] res = new MyAnnotation[2];\n-            res[0] = new MyAnnotationImpl(\"Foo\");\n-            res[1] = new MyAnnotationImpl(\"Bar\");\n-            return res;\n-        }\n-\n-        @Override\n-        public Class<? extends Annotation> annotationType() {\n-            return MyAnnotations.class;\n-        }\n-    }\n-\n-    static class MyAnnotationImpl implements MyAnnotation {\n-        private String val;\n-        MyAnnotationImpl(String val) {\n-            this.val = val;\n-        }\n-\n-        public String name() { return val; }\n-\n-        @Override\n-        public Class<? extends Annotation> annotationType() {\n-            return MyAnnotations.class;\n-        }\n-    }\n-\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @interface MyAnnotations {\n-        MyAnnotation[] value();\n-    }\n-\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @Repeatable(MyAnnotations.class)\n-    @interface MyAnnotation {\n-        String name();\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/annotation\/repeatingAnnotations\/CustomRepeatingWithSecurityManager.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug     8073056\n- * @summary Repeating annotations throws java.security.AccessControlException with a SecurityManager\n- *\n- * @library \/test\/lib\n- * @build jdk.test.lib.Asserts\n- * @run main RepeatingWithSecurityManager\n- * @run main\/othervm -Djava.security.manager=allow RepeatingWithSecurityManager \"withSM\"\n- *\/\n-\n-import java.lang.annotation.*;\n-import java.util.*;\n-\n-import jdk.test.lib.Asserts;\n-\n-public class RepeatingWithSecurityManager {\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 1) {\n-            SecurityManager sm = new SecurityManager();\n-            System.setSecurityManager(sm);\n-        }\n-\n-        Asserts.assertTrue(TwoAnnotations.class.getAnnotationsByType(MyAnnotation.class).length == 2,\n-                \"Array should contain 2 annotations: \" +\n-                Arrays.toString(TwoAnnotations.class.getAnnotationsByType(MyAnnotation.class)));\n-    }\n-\n-    @MyAnnotation(name = \"foo\")\n-    @MyAnnotation(name = \"bar\")\n-    private static class TwoAnnotations {\n-    }\n-\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @interface MyAnnotations {\n-        MyAnnotation[] value();\n-    }\n-\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @Repeatable(MyAnnotations.class)\n-    @interface MyAnnotation {\n-        String name();\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/annotation\/repeatingAnnotations\/RepeatingWithSecurityManager.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,107 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8229785\n- * @library \/test\/lib\n- * @build jdk.unsupported\/*\n- * @summary MethodTypeDesc::resolveConstantDesc with security manager\n- * @run main\/othervm\/policy=test.policy ResolveConstantDesc\n- *\/\n-\n-import java.lang.constant.MethodTypeDesc;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-import java.lang.invoke.MethodType;\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-\n-import static jdk.test.lib.Asserts.*;\n-\n-\/*\n- * MethodTypeDesc::resolveConstantDec may get security exception depending\n- * on the access of Lookup object\n- *\/\n-public class ResolveConstantDesc {\n-    private static final String DESCRIPTOR = \"()Ljdk\/internal\/misc\/VM;\";\n-\n-    public static void main(String... args) throws Exception {\n-        \/\/ private Lookup object has access to classes exported from another module\n-        Lookup lookup = sun.misc.Test.LOOKUP;\n-        Module m = lookup.lookupClass().getModule();\n-\n-        MethodType mtype = MethodType.fromMethodDescriptorString(DESCRIPTOR, ClassLoader.getPlatformClassLoader());\n-        Class<?> target = mtype.returnType();\n-        Module javaBase = target.getModule();\n-        assertTrue(javaBase.isExported(target.getPackageName(), m));\n-\n-        \/\/ MethodType that references java.base internal class\n-        MethodTypeDesc mtd = MethodTypeDesc.ofDescriptor(DESCRIPTOR);\n-        testInaccessibleClass(mtd);\n-\n-        \/\/ Lookup has no access to JDK internal API; IAE\n-        throwIAE(MethodHandles.lookup(), mtd);\n-\n-        \/\/ resolve successfully if Lookup has access to sun.misc and security permission\n-        MethodTypeDesc.ofDescriptor(\"()Lsun\/misc\/Unsafe;\")\n-                      .resolveConstantDesc(MethodHandles.lookup());\n-    }\n-\n-    \/*\n-     * Test Lookup with different access\n-     *\/\n-    private static void testInaccessibleClass(MethodTypeDesc mtd) throws Exception {\n-        Lookup lookup = sun.misc.Test.LOOKUP;\n-        \/\/ full power lookup can resolve MethodTypeDesc of java.base internal types\n-        mtd.resolveConstantDesc(lookup);\n-\n-        \/\/ drop PRIVATE access; fail package access check\n-        throwACC(lookup.dropLookupMode(Lookup.PRIVATE), mtd);\n-\n-        \/\/ jdk.internal.access is not accessible by jdk.unsupported\n-        MethodTypeDesc mtd1 = MethodTypeDesc.ofDescriptor(\"()Ljdk\/internal\/access\/SharedSecrets;\");\n-        throwIAE(lookup, mtd1);\n-    }\n-\n-    \/\/ IAE thrown when resolving MethodType using the given Lookup object\n-    private static void throwIAE(Lookup lookup, MethodTypeDesc mtd) throws Exception {\n-        try {\n-            MethodType mtype = mtd.resolveConstantDesc(lookup);\n-            throw new RuntimeException(\"unexpected IAE not thrown\");\n-        } catch (IllegalAccessException e) { }\n-    }\n-\n-    private static void throwACC(Lookup lookup, MethodTypeDesc mtd) throws Exception {\n-        try {\n-            MethodType mtype = mtd.resolveConstantDesc(lookup);\n-            throw new RuntimeException(\"unexpected IAE not thrown\");\n-        } catch (AccessControlException e) {\n-            Permission perm = e.getPermission();\n-            if (!(perm instanceof RuntimePermission &&\n-                  \"accessClassInPackage.jdk.internal.misc\".equals(perm.getName()))) {\n-                throw e;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/constant\/methodTypeDesc\/ResolveConstantDesc.java","additions":0,"deletions":107,"binary":false,"changes":107,"status":"deleted"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.misc;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-\n-public class Test {\n-     public static final Lookup LOOKUP = MethodHandles.lookup();\n-}\n","filename":"test\/jdk\/java\/lang\/constant\/methodTypeDesc\/jdk.unsupported\/sun\/misc\/Test.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-\/\/ security policy for ResolveConstantDesc test\n-grant {\n-    permission java.lang.RuntimePermission \"getClassLoader\";\n-    permission \"java.lang.RuntimePermission\" \"accessClassInPackage.sun.misc\";\n-};\n-\n","filename":"test\/jdk\/java\/lang\/constant\/methodTypeDesc\/test.policy","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -91,4 +91,0 @@\n-# Repeat test with security manager\n-sh -xc \"$JAVA ${TESTVMOPTS} ${TESTJAVAOPTS} -classpath . -javaagent:Agent.jar -Djava.security.manager DynamicTest\" 2>&1\n-if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n-\n","filename":"test\/jdk\/java\/lang\/instrument\/appendToClassLoaderSearch\/run_tests.sh","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,111 +0,0 @@\n-\/*\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 7196190\n- * @summary Improve method of handling MethodHandles\n- *\n- * @run main\/othervm\/policy=jtreg.security.policy\/secure=java.lang.SecurityManager GetUnsafeTest\n- *\/\n-\n-import java.lang.invoke.*;\n-import java.lang.reflect.Method;\n-import java.util.Arrays;\n-\n-public class GetUnsafeTest {\n-    static final String NAME = \"sun.misc.Unsafe\";\n-\n-    private static boolean isTestFailed = false;\n-\n-    private static void fail() {\n-        isTestFailed = true;\n-        try { throw new Exception(); } catch (Throwable e) {\n-            StackTraceElement frame = e.getStackTrace()[1];\n-            System.out.printf(\"Failed at %s:%d\\n\", frame.getFileName(), frame.getLineNumber());\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        {\n-            final MethodType mt = MethodType.methodType(Class.class, String.class);\n-            final MethodHandle mh = MethodHandles.lookup()\n-                    .findStatic(Class.class, \"forName\", mt);\n-\n-            try { Class.forName(NAME);                         fail(); } catch (Throwable e) {}\n-\n-            try { mh.invoke(NAME);                             fail(); } catch (Throwable e) {}\n-            try { mh.bindTo(NAME).invoke();                    fail(); } catch (Throwable e) {}\n-            try { mh.invokeWithArguments(Arrays.asList(NAME)); fail(); } catch (Throwable e) {}\n-            try { mh.invokeWithArguments(NAME);                fail(); } catch (Throwable e) {}\n-            try { Class cls = (Class) mh.invokeExact(NAME);    fail(); } catch (Throwable e) {}\n-        }\n-\n-        {\n-            final Method fnMethod = Class.class.getMethod(\"forName\", String.class);\n-            final MethodType mt = MethodType.methodType(Object.class, Object.class, Object[].class);\n-            final MethodHandle mh = MethodHandles.lookup()\n-                    .findVirtual(Method.class, \"invoke\", mt)\n-                    .bindTo(fnMethod);\n-\n-            try { fnMethod.invoke(null, NAME); fail(); } catch (Throwable e) {}\n-\n-            try { mh.bindTo(null).bindTo(new Object[]{NAME}).invoke();             fail(); } catch (Throwable e) {}\n-            try { mh.invoke(null, new Object[]{NAME});                             fail(); } catch (Throwable e) {}\n-            try { mh.invokeWithArguments(null, new Object[]{NAME});                fail(); } catch (Throwable e) {}\n-            try { mh.invokeWithArguments(Arrays.asList(null, new Object[]{NAME})); fail(); } catch (Throwable e) {}\n-            try { Object obj = mh.invokeExact((Object) null, new Object[]{NAME});  fail(); } catch (Throwable e) {}\n-        }\n-\n-        {\n-            final Method fnMethod = Class.class.getMethod(\"forName\", String.class);\n-            final MethodType mt = MethodType.methodType(Object.class, Object.class, Object[].class);\n-\n-            final MethodHandle mh = MethodHandles.lookup().bind(fnMethod, \"invoke\", mt);\n-\n-            try { mh.bindTo(null).bindTo(new Object[]{NAME}).invoke();            fail(); } catch (Throwable e) {}\n-            try { mh.invoke(null, new Object[]{NAME});                            fail(); } catch (Throwable e) {}\n-            try { mh.invokeWithArguments(null, NAME);                             fail(); } catch (Throwable e) {}\n-            try { mh.invokeWithArguments(Arrays.asList(null, NAME));              fail(); } catch (Throwable e) {}\n-            try { Object obj = mh.invokeExact((Object) null, new Object[]{NAME}); fail(); } catch (Throwable e) {}\n-        }\n-\n-        {\n-            final Method fnMethod = Class.class.getMethod(\"forName\", String.class);\n-            final MethodHandle mh = MethodHandles.lookup().unreflect(fnMethod);\n-\n-            try { mh.bindTo(NAME).invoke();                    fail(); } catch (Throwable e) {}\n-            try { mh.invoke(NAME);                             fail(); } catch (Throwable e) {}\n-            try { mh.invokeWithArguments(NAME);                fail(); } catch (Throwable e) {}\n-            try { mh.invokeWithArguments(Arrays.asList(NAME)); fail(); } catch (Throwable e) {}\n-            try { Class cls = (Class) mh.invokeExact(NAME);    fail(); } catch (Throwable e) {}\n-        }\n-\n-        if (!isTestFailed) {\n-            System.out.println(\"TEST PASSED\");\n-        } else {\n-            System.out.println(\"TEST FAILED\");\n-            System.exit(1);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/invoke\/7196190\/GetUnsafeTest.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-\/*\n- * security policy used by the test process\n- * must allow file reads so that jtreg itself can run\n- *\/\n-\n-grant {\n-  \/\/ standard test activation permissions\n-  permission java.io.FilePermission \"*\", \"read\";\n-};\n","filename":"test\/jdk\/java\/lang\/invoke\/7196190\/jtreg.security.policy","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8076596\n- * @run main\/othervm\/policy=Test8076596.security.policy\/secure=Test8076596 -ea -esa Test8076596\n- *\/\n-\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n-public class Test8076596 extends SecurityManager {\n-    public Test8076596() {\n-        \/\/ 1. Using lambda\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> null);\n-        \/\/ 2. Using inner class\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            @Override\n-            public Void run() {\n-                return null;\n-            }\n-        });\n-    }\n-\n-    public static void main(String[] args) {\n-        \/\/ empty\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/invoke\/8076596\/Test8076596.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,8 +0,0 @@\n-\/*\n- * Security policy used by the Test8076596.\n- * Must allow file reads so that jtreg itself can run.\n- *\/\n-\n-grant {\n-  permission java.io.FilePermission \"*\", \"read\";\n-};\n","filename":"test\/jdk\/java\/lang\/invoke\/8076596\/Test8076596.security.policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8139885\n- * @run main\/othervm\/policy=getclassloader.policy\/secure=java.lang.SecurityManager -ea -esa test.java.lang.invoke.FindClassSecurityManager\n- *\/\n-\n-package test.java.lang.invoke;\n-\n-import java.lang.invoke.MethodHandles;\n-\n-public class FindClassSecurityManager {\n-    public static void main(String[] args) throws Throwable {\n-        assert null != System.getSecurityManager();\n-        Class<?> thisClass = FindClassSecurityManager.class;\n-        MethodHandles.Lookup lookup = MethodHandles.lookup();\n-        Class<?> lookedUp = lookup.findClass(thisClass.getName());\n-        assert thisClass == lookedUp;\n-        Class<?> accessed = lookup.accessClass(thisClass);\n-        assert thisClass == accessed;\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/invoke\/FindClassSecurityManager.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,6 +33,1 @@\n- *      --java test.java.lang.invoke.InvokeDynamicPrintArgs --check-output\n- * @run main\/othervm\n- *      -Djava.security.manager=allow\n- *      indify.Indify\n- *      --expand-properties --classpath ${test.classes}\n- *      --java test.java.lang.invoke.InvokeDynamicPrintArgs --security-manager\n+ *      --java test.java.lang.invoke.InvokeDynamicPrintArgs\n@@ -47,1 +42,0 @@\n-import java.security.*;\n@@ -53,2 +47,1 @@\n-        if (av.length > 0 && av[0].equals(\"--check-output\"))  openBuf();\n-        if (av.length > 0 && av[0].equals(\"--security-manager\"))  setSM();\n+        openBuf();\n@@ -78,5 +71,0 @@\n-    private static void setSM() {\n-        Policy.setPolicy(new TestPolicy());\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-\n@@ -236,20 +224,0 @@\n-\n-    static class TestPolicy extends Policy {\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final PermissionCollection permissions = new Permissions();\n-        TestPolicy() {\n-            permissions.add(new java.io.FilePermission(\"<<ALL FILES>>\", \"read\"));\n-        }\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return permissions;\n-        }\n-\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return permissions;\n-        }\n-\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            return permissions.implies(perm) || DEFAULT_POLICY.implies(domain, perm);\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/InvokeDynamicPrintArgs.java","additions":3,"deletions":35,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n- *      -Djava.security.manager=allow\n@@ -38,1 +37,1 @@\n- *      --java test.java.lang.invoke.MethodHandleConstants --security-manager\n+ *      --java test.java.lang.invoke.MethodHandleConstants\n@@ -54,1 +53,0 @@\n-        if (av.length > 0 && av[0].equals(\"--security-manager\"))  setSM();\n@@ -77,5 +75,0 @@\n-    private static void setSM() {\n-        Policy.setPolicy(new TestPolicy());\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-\n@@ -171,20 +164,0 @@\n-\n-    static class TestPolicy extends Policy {\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final PermissionCollection permissions = new Permissions();\n-        TestPolicy() {\n-            permissions.add(new java.io.FilePermission(\"<<ALL FILES>>\", \"read\"));\n-        }\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return permissions;\n-        }\n-\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return permissions;\n-        }\n-\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            return permissions.implies(perm) || DEFAULT_POLICY.implies(domain, perm);\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleConstants.java","additions":2,"deletions":29,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandleProxies;\n-import java.lang.invoke.MethodHandles;\n-import java.util.List;\n-\n-import static jdk.test.lib.Asserts.assertSame;\n-\n-\/*\n- * @test\n- * @bug 6983726\n- * @library \/test\/lib\n- * @build jdk.test.lib.Asserts Client\n- * @run main\/othervm\/policy=jtreg.security.policy WithSecurityManagerTest\n- * @summary Checks MethodHandleProxies behavior with security manager present\n- *\/\n-public class WithSecurityManagerTest {\n-    public interface NestedInterface {\n-        void task();\n-    }\n-\n-    public static void main(String... args) {\n-        var originalMh = MethodHandles.zero(void.class);\n-\n-        \/\/ Test system and user interfaces\n-        for (Class<?> cl : List.of(Runnable.class, Client.class, NestedInterface.class)) {\n-            try {\n-                Object o = MethodHandleProxies.asInterfaceInstance(cl, originalMh);\n-                testWrapperInstanceTarget(o, originalMh);\n-                testWrapperInstanceType(o, cl);\n-            } catch (Throwable ex) {\n-                throw new AssertionError(\"Test failed for \" + cl, ex);\n-            }\n-        }\n-    }\n-\n-    private static void testWrapperInstanceTarget(Object wrapper, MethodHandle originalMh) {\n-        var recoveredTarget = MethodHandleProxies.wrapperInstanceTarget(wrapper);\n-        assertSame(originalMh, recoveredTarget, \"wrapperInstanceTarget recovery\");\n-    }\n-\n-    private static void testWrapperInstanceType(Object wrapper, Class<?> type) {\n-        var recoveredType = MethodHandleProxies.wrapperInstanceType(wrapper);\n-        assertSame(type, recoveredType, \"wrapperInstanceType recovery\");\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/WithSecurityManagerTest.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-\/*\n- * security policy used by the test process\n- * must allow file reads so that jtreg itself can run\n- *\/\n-\n-grant {\n-  \/\/ standard test activation permissions\n-  permission java.io.FilePermission \"*\", \"read\";\n-};\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/jtreg.security.policy","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8229785\n- * @summary Test MethodType.fromMethodDescriptorString with security manager\n- * @run main\/othervm -Djava.security.manager=allow test.java.lang.invoke.MethodTypeSecurityManager\n- * @run main\/othervm\/policy=getclassloader.policy test.java.lang.invoke.MethodTypeSecurityManager access\n- *\/\n-\n-package test.java.lang.invoke;\n-\n-import java.lang.invoke.MethodType;\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-\n-public class MethodTypeSecurityManager {\n-    private static boolean hasClassLoaderAccess;\n-    public static void main(String... args) throws Throwable {\n-        ClassLoader platformLoader = ClassLoader.getPlatformClassLoader();\n-        ClassLoader appLoader = ClassLoader.getSystemClassLoader();\n-        hasClassLoaderAccess = args.length == 1 && \"access\".equals(args[0]);\n-\n-        assert hasClassLoaderAccess || System.getSecurityManager() == null;\n-        if (!hasClassLoaderAccess) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n-        \/\/ require getClassLoader permission\n-        throwACC(\"()Ljdk\/internal\/misc\/VM;\", null);\n-        \/\/ package access check when app class loader loads the class\n-        throwACC(\"()Ljdk\/internal\/misc\/VM;\", appLoader);\n-\n-        \/\/ if using the platform class loader, no package access check\n-        MethodType.fromMethodDescriptorString(\"()Ljdk\/internal\/misc\/VM;\", platformLoader);\n-    }\n-\n-    private static void throwACC(String desc, ClassLoader loader) {\n-        try {\n-            MethodType.fromMethodDescriptorString(desc, loader);\n-            throw new RuntimeException(\"should never leak JDK internal class\");\n-        } catch (AccessControlException e) {\n-            System.out.println(e.getMessage());\n-            Permission perm = e.getPermission();\n-            if (!(perm instanceof RuntimePermission)) throw e;\n-            \/\/ ACC thrown either no \"getClassLoader\" permission or no package access\n-            switch (perm.getName()) {\n-                case \"getClassLoader\":\n-                    if (!hasClassLoaderAccess) break;\n-                case \"accessClassInPackage.jdk.internal.misc\":\n-                    break;\n-                default:\n-                    throw e;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodTypeSecurityManager.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,0 @@\n- * @test\n- * @summary verify Lookup.revealDirect on a variety of input handles, with security manager\n- * @run main\/othervm\/policy=jtreg.security.policy\/secure=java.lang.SecurityManager -ea -esa test.java.lang.invoke.RevealDirectTest\n@@ -39,1 +36,0 @@\n- * $ $JAVA8X_HOME\/bin\/java  -cp $JUNIT4_JAR:..\/..\/..\/.. -ea -esa    -Djava.security.manager test.java.lang.invoke.RevealDirectTest\n@@ -245,3 +241,0 @@\n-    static boolean hasSM() {\n-        return (System.getSecurityManager() != null);\n-    }\n@@ -251,10 +244,0 @@\n-        if (hasSM()) {\n-            try {\n-                mems = (Member[]) invokeMethod(getter, cls);\n-            } catch (SecurityException ex) {\n-                \/\/if (VERBOSE)  ex.printStackTrace();\n-                accessor = accessor.replace(\"Declared\", \"\");\n-                getter = getMethod(Class.class, accessor);\n-                if (VERBOSE)  System.out.println(\"replaced accessor: \"+getter);\n-            }\n-        }\n@@ -746,5 +729,1 @@\n-            Member mem3;\n-            if (hasSM())\n-                mem3 = info2.reflectAs(Member.class, lookup);\n-            else\n-                mem3 = MethodHandles.reflectAs(Member.class, mh2);\n+            Member mem3 = MethodHandles.reflectAs(Member.class, mh2);\n@@ -752,8 +731,0 @@\n-            if (hasSM()) {\n-                try {\n-                    MethodHandles.reflectAs(Member.class, mh2);\n-                    throw new AssertionError(\"failed to throw on \"+mem3);\n-                } catch (SecurityException ex3) {\n-                    \/\/ OK...\n-                }\n-            }\n","filename":"test\/jdk\/java\/lang\/invoke\/RevealDirectTest.java","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-\n-\/**\n- * @test\n- * @bug 8007035\n- * @summary Test MethodHandle of a private member\n- *\n- * @run main\/othervm -Djava.security.manager=allow TestPrivateMember\n- *\/\n-\n-public class TestPrivateMember {\n-    public static void main(String... args) throws Throwable {\n-        System.setSecurityManager(new SecurityManager());\n-        TestPrivateMember t = new TestPrivateMember();\n-        t.test();\n-    }\n-\n-    public TestPrivateMember() {\n-    }\n-\n-    public void test() throws Throwable {\n-        MethodHandles.Lookup lookup = MethodHandles.lookup();\n-        MethodType mt = MethodType.methodType(void.class);\n-        try {\n-            Class<?> checkInittedHolder = TestPrivateMemberPackageSibling.class;\n-            \/\/ Original model:  checkInittedHolder = Class.class;\n-            \/\/ Not using Class.checkInitted because it could change without notice.\n-            MethodHandle mh = lookup.findStatic(checkInittedHolder, \"checkInitted\", mt);\n-            throw new RuntimeException(\"IllegalAccessException not thrown\");\n-        } catch (IllegalAccessException e) {\n-            \/\/ okay\n-            System.out.println(\"Expected exception: \" + e.getMessage());\n-        }\n-    }\n-}\n-\n-class TestPrivateMemberPackageSibling {\n-    private static void checkInitted() { }\n-}\n","filename":"test\/jdk\/java\/lang\/invoke\/TestPrivateMember.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n- * @run main\/othervm -Djava.security.manager=allow csm\/jdk.test.MethodInvokeTest\n- * @run main\/othervm -Djava.security.manager=allow csm\/jdk.test.MethodInvokeTest sm\n+ * @run main\/othervm csm\/jdk.test.MethodInvokeTest\n","filename":"test\/jdk\/java\/lang\/invoke\/callerSensitive\/Main.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,5 +32,0 @@\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -48,1 +43,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n@@ -56,3 +50,0 @@\n-        if (sm) {\n-            setupSecurityManager();\n-        }\n@@ -71,12 +62,0 @@\n-    static void setupSecurityManager() {\n-        PermissionCollection perms = new Permissions();\n-        perms.add(new RuntimePermission(\"getStackWalkerWithClassReference\"));\n-        Policy.setPolicy(new Policy() {\n-            @Override\n-            public boolean implies(ProtectionDomain domain, Permission p) {\n-                return perms.implies(p) || DEFAULT_POLICY.implies(domain, p);\n-            }\n-        });\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/callerSensitive\/csm\/jdk\/test\/MethodInvokeTest.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1,10 +0,0 @@\n-\/*\n- * Security policy used by the FindClassSecurityManager and \n- * MethodTypeSecurityManager test.\n- * Must allow file reads so that jtreg itself can run, and getting class loaders.\n- *\/\n-\n-grant {\n-  permission java.io.FilePermission \"*\", \"read\";\n-  permission java.lang.RuntimePermission \"getClassLoader\";\n-};\n","filename":"test\/jdk\/java\/lang\/invoke\/getclassloader.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-\/*\n- * security policy used by the test process\n- * must allow file reads so that jtreg itself can run\n- *\/\n-\n-grant {\n-  \/\/ standard test activation permissions\n-  permission java.io.FilePermission \"*\", \"read\";\n-};\n","filename":"test\/jdk\/java\/lang\/invoke\/jtreg.security.policy","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Djava.security.manager=allow LambdaAccessControlDoPrivilegedTest\n+ * @run main\/othervm LambdaAccessControlDoPrivilegedTest\n@@ -66,1 +66,0 @@\n-        scratch.add(\"System.setSecurityManager(new SecurityManager());\");\n@@ -84,1 +83,0 @@\n-                                \"-Djava.security.manager=allow\",\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaAccessControlDoPrivilegedTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8003881\n- * @modules jdk.compiler\n- * @run main\/othervm -Djava.security.manager=allow LambdaAccessControlTest\n- * @summary tests Lambda expression with a security manager at top level\n- *\/\n-\n-public class LambdaAccessControlTest {\n-    public static void main(String... args) {\n-        System.setSecurityManager(new SecurityManager());\n-        JJ<Integer> iii = (new CC())::impl;\n-        System.out.printf(\">>> %s\\n\", iii.foo(44));\n-        iii = DD::impl;\n-        System.out.printf(\">>> %s\\n\", iii.foo(44));\n-        return;\n-    }\n-}\n-\/*\n- * support classes for the test\n- *\/\n-interface II<T> {  Object foo(T x); }\n-interface JJ<R extends Number> extends II<R> { }\n-class CC {  String impl(int i) { return \"impl:\"+i; }}\n-class DD {  static String impl(int i) { return \"impl:\"+i; }}\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaAccessControlTest.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -74,1 +74,0 @@\n-        scratch.add(\"        System.setSecurityManager(new SecurityManager());\");\n@@ -120,1 +119,0 @@\n-                               \"-Djava.security.manager=allow\",\n@@ -132,1 +130,0 @@\n-                               \"-Djava.security.manager=allow\",\n@@ -156,1 +153,0 @@\n-                                \"-Djava.security.manager=allow\",\n@@ -179,1 +175,0 @@\n-                                \"-Djava.security.manager=allow\",\n@@ -237,1 +232,0 @@\n-                                   \"-Djava.security.manager=allow\",\n@@ -256,1 +250,0 @@\n-                               \"-Djava.security.manager=allow\",\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LogGeneratedClassesTest.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @run main\/othervm -Djava.security.manager=allow ModuleFinderWithSecurityManager allow\n- * @run main\/othervm -Djava.security.manager=allow ModuleFinderWithSecurityManager deny\n- * @summary Basic test for ModuleFinder.ofSystem() with security manager\n- *\/\n-\n-import java.lang.module.ModuleFinder;\n-import java.lang.module.ModuleReference;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Set;\n-\n-public class ModuleFinderWithSecurityManager {\n-    public static void main(String[] args) throws Exception {\n-        boolean allow = args[0].equals(\"allow\");\n-\n-        \/\/ set security policy to allow access\n-        if (allow) {\n-            String testSrc = System.getProperty(\"test.src\");\n-            if (testSrc == null)\n-                testSrc = \".\";\n-            Path policyFile = Paths.get(testSrc, \"java.policy\");\n-            System.setProperty(\"java.security.policy\", policyFile.toString());\n-        }\n-\n-        System.setSecurityManager(new SecurityManager());\n-\n-        ModuleFinder finder = null;\n-        try {\n-            finder = ModuleFinder.ofSystem();\n-            if (!allow) throw new RuntimeException(\"SecurityException expected\");\n-        } catch (SecurityException e) {\n-            if (allow) throw new RuntimeException(\"SecurityException not expected\");\n-        }\n-\n-        \/\/ no additional permissions should be required to locate modules\n-        if (finder != null) {\n-            ModuleReference base = finder.find(\"java.base\").orElse(null);\n-            if (base == null)\n-                throw new RuntimeException(\"java.base not found\");\n-            Set<ModuleReference> allModules = finder.findAll();\n-            if (!allModules.contains(base))\n-                throw new RuntimeException(\"java.base not in all modules\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/module\/ModuleFinderWithSecurityManager.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    \/\/ ModuleFinder.ofSystem() needs this\n-    permission java.lang.RuntimePermission \"accessSystemModules\";\n-};\n","filename":"test\/jdk\/java\/lang\/module\/java.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n- * @run main\/othervm\/java.security.policy=empty.policy TestReflectionAPI\n","filename":"test\/jdk\/java\/lang\/reflect\/Nestmates\/TestReflectionAPI.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8046171\n- * @summary Test that security checks occur for getNestHost\/getNestMembers\n- *\n- * @library \/test\/lib\n- * @build TestSecurityManagerChecks testPkg.Host testPkg.Singleton\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller testPkg.Host testPkg.Host$Member testPkg.Singleton\n- * @run main\/othervm -Xbootclasspath\/a:. -Djava.security.manager=allow TestSecurityManagerChecks\n- *\/\n-\n-\/\/ ClassFileInstaller copies the testPkg files into the \"current\" directory\n-\/\/ so we can add it to the bootclasspath. Then when we run the test the\n-\/\/ loader for the testPkg files is the bootloader but the loader for the\n-\/\/ test class is the system loader, hence a package access check will fail\n-\/\/ because the system loader is not the same as, nor a parent of, the bootloader.\n-import java.security.Security;\n-\n-public class TestSecurityManagerChecks {\n-\n-    public static void main(String[] args) throws Throwable {\n-\n-        \/\/ First get hold of the target classes before we enable security\n-        Class<?> host = testPkg.Host.class;\n-        Class<?> member = testPkg.Host.Member.class;\n-        Class<?> memberArray = testPkg.Host.Member[].class;\n-        Class<?> singleton = testPkg.Singleton.class;\n-\n-        \/\/ Next add testPkg to the set of packages for which package-access\n-        \/\/ permission is required\n-        Security.setProperty(\"package.access\",\n-                             Security.getProperty(\"package.access\") + \",testPkg.\");\n-\n-        \/\/ Finally install a default security manager\n-        SecurityManager sm = new SecurityManager();\n-        System.setSecurityManager(sm);\n-\n-        \/\/ These cases all succeed\n-        getNestHost(int.class);   \/\/ primitive\n-        getNestHost(int[].class); \/\/ primitive[]\n-        getNestHost(host);        \/\/ host class\n-        getNestHost(memberArray); \/\/ NestedT[]\n-        getNestHost(singleton);   \/\/ Singleton nest\n-\n-        getNestMembers(int.class);   \/\/ primitive\n-        getNestMembers(int[].class); \/\/ primitive[]\n-        getNestMembers(memberArray); \/\/ NestedT[]\n-        getNestMembers(singleton);   \/\/ Singleton nest\n-\n-        \/\/ these cases all fail\n-        getNestHostThrows(member); \/\/ NestedT\n-\n-        getNestMembersThrows(member); \/\/ NestedT\n-        getNestMembersThrows(host);   \/\/ host class\n-    }\n-\n-    static void getNestHost(Class<?> c) {\n-        Class<?> host = c.getNestHost();\n-        System.out.println(\"OK - getNestHost succeeded for \" + c.getName());\n-    }\n-\n-    static void getNestHostThrows(Class<?> c) throws SecurityException {\n-        try {\n-            Class<?> host = c.getNestHost();\n-            throw new Error(\"getNestHost succeeded for \" + c.getName());\n-        } catch (SecurityException e) {\n-            System.out.println(\"OK - getNestHost for \" + c.getName() +\n-                               \" got expected exception: \" + e);\n-        }\n-    }\n-\n-    static void getNestMembers(Class<?> c) {\n-        Class<?>[] members = c.getNestMembers();\n-        System.out.println(\"OK - getNestMembers succeeded for \" + c.getName());\n-    }\n-\n-    static void getNestMembersThrows(Class<?> c) throws SecurityException {\n-        try {\n-            Class<?>[] members = c.getNestMembers();\n-            throw new Error(\"getNestMembers succeeded for \" + c.getName());\n-        } catch (SecurityException e) {\n-            System.out.println(\"OK - getNestMembers for \" + c.getName() +\n-                               \" got expected exception: \" + e);\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/reflect\/Nestmates\/TestSecurityManagerChecks.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-\/\/ A deliberately empty policy file for use with jtreg.\n-\/\/ Setting othervm\/java.security.policy=empty.policy\n-\/\/ causes jtreg to run under the default system policy\n-\/\/ and default security manager, with the addition of\n-\/\/ the permissions jtreg itself needs to run.\n","filename":"test\/jdk\/java\/lang\/reflect\/Nestmates\/empty.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package testPkg;\n-\n-\/\/ Host class with single member\n-public class Host {\n-    public static class Member {\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/reflect\/Nestmates\/testPkg\/Host.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package testPkg;\n-\n-\/\/ Self-hosting singleton nest\n-public class Singleton {\n-}\n","filename":"test\/jdk\/java\/lang\/reflect\/Nestmates\/testPkg\/Singleton.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,9 +29,0 @@\n-import java.lang.reflect.ReflectPermission;\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.security.SecurityPermission;\n@@ -46,2 +37,0 @@\n- * @run main\/othervm -Djava.security.manager=allow NonPublicProxyClass grant\n- * @run main\/othervm -Djava.security.manager=allow NonPublicProxyClass deny\n@@ -51,1 +40,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n@@ -72,11 +60,0 @@\n-        if (args.length == 1) {\n-            switch (args[0]) {\n-                case \"grant\": Policy.setPolicy(new NewInstancePolicy(true));\n-                              break;\n-                case \"deny\" : Policy.setPolicy(new NewInstancePolicy(false));\n-                              break;\n-                default: throw new IllegalArgumentException(args[0]);\n-            }\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n@@ -86,2 +63,0 @@\n-        System.out.format(\"Test passed: security %s%n\",\n-            (args.length == 0 ? \"manager not installed\" : Policy.getPolicy()));\n@@ -100,17 +75,1 @@\n-        boolean hasAccess = loader != null || hasAccess();\n-        try {\n-            proxyClass = Proxy.getProxyClass(loader, interfaces);\n-            if (!hasAccess) {\n-                throw new RuntimeException(\"should have no permission to create proxy class\");\n-            }\n-        } catch (AccessControlException e) {\n-            if (hasAccess) {\n-                throw e;\n-            }\n-            if (e.getPermission().getClass() != RuntimePermission.class ||\n-                    !e.getPermission().getName().equals(\"getClassLoader\")) {\n-                throw e;\n-            }\n-            return;\n-        }\n-\n+        proxyClass = Proxy.getProxyClass(loader, interfaces);\n@@ -124,9 +83,0 @@\n-    private boolean hasAccess() {\n-        if (System.getSecurityManager() == null) {\n-            return true;\n-        }\n-        NewInstancePolicy policy = NewInstancePolicy.class.cast(Policy.getPolicy());\n-        return policy.grant;\n-    }\n-\n-    private static final String NEW_PROXY_IN_PKG = \"newProxyInPackage.\";\n@@ -137,15 +87,1 @@\n-        boolean hasAccess = pkg.isEmpty() || hasAccess();\n-        try {\n-            Proxy.newProxyInstance(loader, interfaces, handler);\n-            if (!hasAccess) {\n-                throw new RuntimeException(\"ERROR: Proxy.newProxyInstance should fail \" + proxyClass);\n-            }\n-        } catch (AccessControlException e) {\n-            if (hasAccess) {\n-                throw e;\n-            }\n-            if (e.getPermission().getClass() != ReflectPermission.class ||\n-                    !e.getPermission().getName().equals(NEW_PROXY_IN_PKG + pkg)) {\n-                throw e;\n-            }\n-        }\n+        Proxy.newProxyInstance(loader, interfaces, handler);\n@@ -183,35 +119,0 @@\n-\n-    static class NewInstancePolicy extends Policy {\n-        final PermissionCollection permissions = new Permissions();\n-        final boolean grant;\n-        NewInstancePolicy(boolean grant) {\n-            this.grant = grant;\n-            permissions.add(new SecurityPermission(\"getPolicy\"));\n-            if (grant) {\n-                permissions.add(new RuntimePermission(\"getClassLoader\"));\n-                permissions.add(new ReflectPermission(NEW_PROXY_IN_PKG + \"p\"));\n-                permissions.add(new ReflectPermission(NEW_PROXY_IN_PKG + \"java.util.zip\"));\n-            }\n-        }\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return permissions;\n-        }\n-\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return permissions;\n-        }\n-\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            return permissions.implies(perm) ||\n-                    DEFAULT_POLICY.implies(domain, perm);\n-        }\n-\n-        public String toString() {\n-            StringBuilder sb = new StringBuilder(\"policy: \");\n-            Enumeration<Permission> perms = permissions.elements();\n-            while (perms.hasMoreElements()) {\n-                sb.append(\"\\n\").append(perms.nextElement().toString());\n-            }\n-            return sb.toString();\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/nonPublicProxy\/NonPublicProxyClass.java","additions":3,"deletions":102,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,1 @@\n- * @summary Test making a proxy instance that implements a non-public\n- *          interface with and without security manager installed\n+ * @summary Test making a proxy instance that implements a non-public interface\n@@ -34,1 +33,1 @@\n- * @run main\/othervm -Djava.security.manager=allow SimpleProxy\n+ * @run main\/othervm SimpleProxy\n@@ -43,11 +42,0 @@\n-\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            makeProxy(loader, barClass);\n-            throw new RuntimeException(\"should fail to new proxy instance of a non-public interface\");\n-        } catch (AccessControlException e) {\n-            if (e.getPermission().getClass() != ReflectPermission.class ||\n-                    !e.getPermission().getName().equals(\"newProxyInPackage.p\")) {\n-                throw e;\n-            }\n-        }\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/nonPublicProxy\/SimpleProxy.java","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run testng\/othervm\/java.security.policy=allPermissions.policy IsRecordTest\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/IsRecordTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,212 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8235369\n- * @summary Security manager checks for record related core reflection\n- * @compile RecordPermissionsTest.java\n- * @run testng\/othervm\/java.security.policy=allPermissions.policy RecordPermissionsTest\n- *\/\n-\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.nio.file.Path;\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.stream.Stream;\n-import org.testng.annotations.*;\n-import org.testng.annotations.Test;\n-import static java.lang.System.out;\n-import static org.testng.Assert.*;\n-\n-public class RecordPermissionsTest {\n-\n-    class C { }\n-    record R1() { }\n-    record R2(int i, int j) { }\n-    record R3(List<String> ls) { }\n-    record R4(R1 r1, R2 r2, R3 r3) { }\n-    record R5(String... args) { }\n-    record R6(long l, String... args) implements java.io.Serializable { }\n-\n-    \/** A list of classes loaded by a different loader to that of this class' loader. *\/\n-    static final List<Class<?>> OTHER_LOADER_CLASSES = otherLoaderClasses();\n-\n-    \/** A list of classes loaded by the same loader as this class' loader. *\/\n-    static final List<Class<?>> SAME_LOADER_CLASSES = sameLoaderClasses();\n-\n-    static List<Class<?>> otherLoaderClasses() {\n-        try {\n-            ClassLoader cl = new URLClassLoader(\n-                \"other-classloader\",\n-                new URL[]{Path.of(System.getProperty(\"test.classes\")).toUri().toURL()},\n-                ClassLoader.getPlatformClassLoader()); \/\/ skip the system classloader\n-\n-            return List.of(cl.loadClass(\"RecordPermissionsTest$R1\"),\n-                           cl.loadClass(\"RecordPermissionsTest$R2\"),\n-                           Record.class,\n-                           Record[].class,\n-                           byte.class,\n-                           byte[].class);\n-        } catch (Exception e) {\n-            throw new AssertionError(\"should not reach here\", e);\n-        }\n-    }\n-\n-    static List<Class<?>> sameLoaderClasses() {\n-        return List.of(C.class,\n-                       R3.class,\n-                       R4.class,\n-                       R5.class,\n-                       R6.class);\n-    }\n-\n-    @BeforeTest\n-    public void setup() throws Exception {\n-        assertTrue(System.getSecurityManager() != null);\n-    }\n-\n-    @DataProvider(name = \"isRecordScenarios\")\n-    public Object[][] isRecordScenarios() {\n-         return Stream.of(OTHER_LOADER_CLASSES, SAME_LOADER_CLASSES)\n-                      .flatMap(Collection::stream)\n-                      .map(cls -> new Object[]{\"isRecord-\" + cls.getName(),\n-                                               (PrivilegedAction<?>)cls::isRecord })\n-                      .toArray(Object[][]::new);\n-     }\n-\n-     @DataProvider(name = \"otherGetRecordComponentsScenarios\")\n-     public Object[][] otherGetRecordComponentsScenarios() {\n-         return OTHER_LOADER_CLASSES.stream()\n-                     .map(cls -> new Object[]{\"getRecordComponents-other-\" + cls.getName(),\n-                                             (PrivilegedAction<?>)cls::getRecordComponents })\n-                     .toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider(name = \"sameGetRecordComponentsScenarios\")\n-    public Object[][] sameGetRecordComponentsScenarios() {\n-        return SAME_LOADER_CLASSES.stream()\n-                     .map(cls -> new Object[]{\"getRecordComponents-same-\" + cls.getName(),\n-                                             (PrivilegedAction<?>)cls::getRecordComponents })\n-                     .toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider(name = \"allScenarios\")\n-    public Object[][] allScenarios() {\n-        return Stream.of(isRecordScenarios(),\n-                         sameGetRecordComponentsScenarios(),\n-                         otherGetRecordComponentsScenarios())\n-                     .flatMap(Arrays::stream)\n-                     .toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider(name = \"allNonThrowingScenarios\")\n-    public Object[][] allNonThrowingScenarios() {\n-        return Stream.of(isRecordScenarios(),\n-                         sameGetRecordComponentsScenarios())\n-                     .flatMap(Arrays::stream)\n-                     .toArray(Object[][]::new);\n-    }\n-\n-    \/** Tests all scenarios without any security manager - sanity. *\/\n-    @Test(dataProvider = \"allScenarios\")\n-    public void testWithNoSecurityManager(String description,\n-                                          PrivilegedAction<?> action) {\n-        System.setSecurityManager(null);\n-        try {\n-            AccessController.doPrivileged(action);\n-        } finally {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-    }\n-\n-    \/** Tests all scenarios with all permissions. *\/\n-    @Test(dataProvider = \"allScenarios\")\n-    public void testWithAllPermissions(String description,\n-                                       PrivilegedAction<?> action) {\n-        \/\/ Run with all permissions, i.e. no further restrictions than test's AllPermission\n-        assert System.getSecurityManager() != null;\n-        AccessController.doPrivileged(action);\n-    }\n-\n-    \/** Tests given scenarios with no permissions - expect should not require any. *\/\n-    @Test(dataProvider = \"allNonThrowingScenarios\")\n-    public void testWithNoPermissionsPass(String description,\n-                                          PrivilegedAction<?> action) {\n-        assert System.getSecurityManager() != null;\n-        AccessController.doPrivileged(action, noPermissions());\n-    }\n-\n-    static Class<SecurityException> SE = SecurityException.class;\n-\n-    \/**\n-     * Tests getRecordComponents with no permissions, and classes\n-     * loaded by a loader other than the test class' loader - expects\n-     * security exception.\n-     *\/\n-    @Test(dataProvider = \"otherGetRecordComponentsScenarios\")\n-    public void testWithNoPermissionsFail(String description,\n-                                          PrivilegedAction<?> action) {\n-        \/\/ Run with NO permissions, i.e. expect SecurityException\n-        assert System.getSecurityManager() != null;\n-        SecurityException se = expectThrows(SE, () -> AccessController.doPrivileged(action, noPermissions()));\n-        out.println(\"Got expected SecurityException: \" + se);\n-    }\n-\n-    \/**\n-     * Tests getRecordComponents with minimal permissions, and classes\n-     * loaded by a loader other than the test class' loader.\n-     *\/\n-    @Test(dataProvider = \"otherGetRecordComponentsScenarios\")\n-    public void testWithMinimalPermissions(String description,\n-                                           PrivilegedAction<?> action) {\n-        \/\/ Run with minimal permissions, i.e. just what is required\n-        assert System.getSecurityManager() != null;\n-        AccessControlContext minimalACC = withPermissions(\n-                new RuntimePermission(\"accessDeclaredMembers\"),\n-                new RuntimePermission(\"accessClassInPackage.*\")\n-        );\n-        AccessController.doPrivileged(action, minimalACC);\n-    }\n-\n-    static AccessControlContext withPermissions(Permission... perms) {\n-        Permissions p = new Permissions();\n-        for (Permission perm : perms) {\n-            p.add(perm);\n-        }\n-        ProtectionDomain pd = new ProtectionDomain(null, p);\n-        return new AccessControlContext(new ProtectionDomain[]{ pd });\n-    }\n-\n-    static AccessControlContext noPermissions() {\n-        return withPermissions(\/*empty*\/);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/RecordPermissionsTest.java","additions":0,"deletions":212,"binary":false,"changes":212,"status":"deleted"},{"patch":"@@ -31,1 +31,0 @@\n- * @run testng\/othervm\/java.security.policy=allPermissions.policy RecordReflectionTest\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/RecordReflectionTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,27 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ bootstrap to get the test going, it will do its own restrictions\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/allPermissions.policy","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,275 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8246778\n- * @summary Test that security checks occur for getPermittedSubclasses\n- * @library \/test\/lib\n- * @modules java.compiler\n- * @build jdk.test.lib.compiler.CompilerUtils jdk.test.lib.compiler.ModuleInfoMaker TestSecurityManagerChecks\n- * @run main\/othervm -Djava.security.manager=allow TestSecurityManagerChecks named\n- * @run main\/othervm -Djava.security.manager=allow TestSecurityManagerChecks unnamed\n- *\/\n-\n-import java.io.IOException;\n-import java.lang.module.Configuration;\n-import java.lang.module.ModuleFinder;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-\n-import jdk.test.lib.compiler.*;\n-\n-public class TestSecurityManagerChecks {\n-\n-    private static final ClassLoader OBJECT_CL = null;\n-\n-    public static void main(String[] args) throws Throwable {\n-        if (\"named\".equals(args[0])) {\n-            runNamedModuleTest();\n-        } else {\n-            runUnnamedModuleTest();\n-        }\n-    }\n-\n-    private static void runNamedModuleTest() throws Throwable {\n-        Path classes = compileNamedModuleTest();\n-        URL[] testClassPath = getTestClassPath();\n-\n-        \/\/need to use a different ClassLoader to run the test, so that the checks are performed:\n-        ClassLoader testCL = new URLClassLoader(testClassPath, OBJECT_CL);\n-        testCL.loadClass(\"TestSecurityManagerChecks\")\n-              .getDeclaredMethod(\"doRunNamedModuleTest\", Path.class)\n-              .invoke(null, classes);\n-    }\n-\n-    public static void doRunNamedModuleTest(Path classes) throws Throwable {\n-        Configuration testConfig = ModuleLayer.boot()\n-                                              .configuration()\n-                                              .resolve(ModuleFinder.of(),\n-                                                       ModuleFinder.of(classes),\n-                                                       List.of(\"test\"));\n-        ModuleLayer testLayer = ModuleLayer.boot()\n-                                           .defineModulesWithOneLoader(testConfig,\n-                                                                         OBJECT_CL);\n-\n-        \/\/ First get hold of the target classes before we enable security\n-        Class<?> sealed = Class.forName(testLayer.findModule(\"test\").get(), \"test.Base\");\n-\n-        \/\/try without a SecurityManager:\n-        checkPermittedSubclasses(sealed, \"test.a.ImplA1\",\n-                                         \"test.a.ImplA2\",\n-                                         \"test.b.ImplB\");\n-\n-        String[] denyPackageAccess = new String[1];\n-        int[] checkPackageAccessCallCount = new int[1];\n-\n-        \/\/try with a SecurityManager:\n-        SecurityManager sm = new SecurityManager() {\n-            @Override\n-            public void checkPackageAccess(String pkg) {\n-                if (pkg.startsWith(\"test.\")) {\n-                    checkPackageAccessCallCount[0]++;\n-                }\n-                if (Objects.equals(denyPackageAccess[0], pkg)) {\n-                    throw new SecurityException();\n-                }\n-            }\n-        };\n-\n-        System.setSecurityManager(sm);\n-\n-        denyPackageAccess[0] = \"test\";\n-\n-        \/\/passes - does not return a class from package \"test\":\n-        checkPermittedSubclasses(sealed, \"test.a.ImplA1\",\n-                                         \"test.a.ImplA2\",\n-                                         \"test.b.ImplB\");\n-\n-        if (checkPackageAccessCallCount[0] != 2) {\n-            throw new AssertionError(\"Unexpected call count: \" +\n-                                      checkPackageAccessCallCount[0]);\n-        }\n-\n-        denyPackageAccess[0] = \"test.a\";\n-\n-        try {\n-            sealed.getPermittedSubclasses();\n-            throw new Error(\"getPermittedSubclasses incorrectly succeeded for \" +\n-                             sealed.getName());\n-        } catch (SecurityException e) {\n-            System.out.println(\"OK - getPermittedSubclasses for \" + sealed.getName() +\n-                               \" got expected exception: \" + e);\n-        }\n-    }\n-\n-    private static Path compileNamedModuleTest() throws IOException {\n-        Path base = Paths.get(\".\", \"named\");\n-        Path src = base.resolve(\"src\");\n-        Path classes = base.resolve(\"classes\");\n-\n-        ModuleInfoMaker maker = new ModuleInfoMaker(src);\n-        maker.writeJavaFiles(\"test\",\n-                              \"module test {}\",\n-                              \"package test; public sealed interface Base permits test.a.ImplA1, test.a.ImplA2, test.b.ImplB, test.c.ImplC {}\",\n-                              \"package test.a; public final class ImplA1 implements test.Base {}\",\n-                              \"package test.a; public final class ImplA2 implements test.Base {}\",\n-                              \"package test.b; public final class ImplB implements test.Base {}\",\n-                              \"package test.c; public final class ImplC implements test.Base {}\"\n-                              );\n-\n-        if (!CompilerUtils.compile(src, classes.resolve(\"test\"), \"--enable-preview\", \"-source\", System.getProperty(\"java.specification.version\"))) {\n-            throw new AssertionError(\"Compilation didn't succeed!\");\n-        }\n-\n-        Files.delete(classes.resolve(\"test\").resolve(\"test\").resolve(\"c\").resolve(\"ImplC.class\"));\n-\n-        return classes;\n-    }\n-\n-    private static void runUnnamedModuleTest() throws Throwable {\n-        Path classes = compileUnnamedModuleTest();\n-        URL[] testClassPath = getTestClassPath();\n-\n-        \/\/need to use a different ClassLoader to run the test, so that the checks are performed:\n-        ClassLoader testCL = new URLClassLoader(testClassPath, OBJECT_CL);\n-        testCL.loadClass(\"TestSecurityManagerChecks\")\n-              .getDeclaredMethod(\"doRunUnnamedModuleTest\", Path.class)\n-              .invoke(null, classes);\n-    }\n-\n-    public static void doRunUnnamedModuleTest(Path classes) throws Throwable {\n-        ClassLoader unnamedModuleCL =\n-                new URLClassLoader(new URL[] {classes.toUri().toURL()}, OBJECT_CL);\n-\n-        \/\/ First get hold of the target classes before we enable security\n-        Class<?> sealed = unnamedModuleCL.loadClass(\"test.Base\");\n-\n-        \/\/try without a SecurityManager:\n-        checkPermittedSubclasses(sealed, \"test.ImplA1\",\n-                                         \"test.ImplA2\",\n-                                         \"test.ImplB\");\n-\n-        String[] denyPackageAccess = new String[1];\n-        int[] checkPackageAccessCallCount = new int[1];\n-\n-        \/\/try with a SecurityManager:\n-        SecurityManager sm = new SecurityManager() {\n-            @Override\n-            public void checkPackageAccess(String pkg) {\n-                if (pkg.equals(\"test\")) {\n-                    checkPackageAccessCallCount[0]++;\n-                }\n-                if (Objects.equals(denyPackageAccess[0], pkg)) {\n-                    throw new SecurityException();\n-                }\n-            }\n-        };\n-\n-        System.setSecurityManager(sm);\n-\n-        denyPackageAccess[0] = \"test.unknown\";\n-\n-        \/\/passes - does not return a class from package \"test.unknown\":\n-        checkPermittedSubclasses(sealed, \"test.ImplA1\",\n-                                         \"test.ImplA2\",\n-                                         \"test.ImplB\");\n-\n-        if (checkPackageAccessCallCount[0] != 1) {\n-            throw new AssertionError(\"Unexpected call count: \" +\n-                                      checkPackageAccessCallCount[0]);\n-        }\n-\n-        denyPackageAccess[0] = \"test\";\n-\n-        try {\n-            sealed.getPermittedSubclasses();\n-            throw new Error(\"getPermittedSubclasses incorrectly succeeded for \" +\n-                             sealed.getName());\n-        } catch (SecurityException e) {\n-            System.out.println(\"OK - getPermittedSubclasses for \" + sealed.getName() +\n-                               \" got expected exception: \" + e);\n-        }\n-    }\n-\n-    private static Path compileUnnamedModuleTest() throws IOException {\n-        Path base = Paths.get(\".\", \"unnamed\");\n-        Path src = base.resolve(\"src\");\n-        Path classes = base.resolve(\"classes\");\n-\n-        ModuleInfoMaker maker = new ModuleInfoMaker(src);\n-        maker.writeJavaFiles(\"test\",\n-                              \"module test {}\",\n-                              \"package test; public sealed interface Base permits ImplA1, ImplA2, ImplB, ImplC {}\",\n-                              \"package test; public final class ImplA1 implements test.Base {}\",\n-                              \"package test; public final class ImplA2 implements test.Base {}\",\n-                              \"package test; public final class ImplB implements test.Base {}\",\n-                              \"package test; public final class ImplC implements test.Base {}\"\n-                              );\n-\n-        Files.delete(src.resolve(\"test\").resolve(\"module-info.java\"));\n-\n-        if (!CompilerUtils.compile(src.resolve(\"test\"), classes, \"--enable-preview\", \"-source\", System.getProperty(\"java.specification.version\"))) {\n-            throw new AssertionError(\"Compilation didn't succeed!\");\n-        }\n-\n-        Files.delete(classes.resolve(\"test\").resolve(\"ImplC.class\"));\n-\n-        return classes;\n-    }\n-\n-    private static void checkPermittedSubclasses(Class<?> c, String... expected) {\n-        Class<?>[] subclasses = c.getPermittedSubclasses();\n-        List<String> subclassesNames = Arrays.stream(subclasses)\n-                                             .map(Class::getName)\n-                                             .collect(Collectors.toList());\n-        if (!subclassesNames.equals(Arrays.asList(expected))) {\n-            throw new AssertionError(\"Incorrect permitted subclasses: \" +\n-                                       subclassesNames);\n-        }\n-    }\n-\n-    private static URL[] getTestClassPath() {\n-        return Arrays.stream(System.getProperty(\"test.class.path\")\n-                                    .split(System.getProperty(\"path.separator\")))\n-                     .map(TestSecurityManagerChecks::path2URL)\n-                     .toArray(s -> new URL[s]);\n-    }\n-\n-    private static URL path2URL(String p) {\n-        try {\n-            return Path.of(p).toUri().toURL();\n-        } catch (MalformedURLException ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/reflect\/sealed_classes\/TestSecurityManagerChecks.java","additions":0,"deletions":275,"binary":false,"changes":275,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=empty.policy ObjectMethodsTest\n","filename":"test\/jdk\/java\/lang\/runtime\/ObjectMethodsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,26 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ This policy is used by tests not requiring permissions, to assert that the\n-\/\/ JDK implementation has the correct privileged blocks.\n-\n","filename":"test\/jdk\/java\/lang\/runtime\/empty.policy","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.net.NetPermission;\n@@ -27,1 +26,0 @@\n-import java.security.AccessControlException;\n@@ -33,1 +31,1 @@\n- * @run main\/othervm -Djava.security.manager=allow GetAuthenticatorTest\n+ * @run main\/othervm GetAuthenticatorTest\n@@ -63,10 +61,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            defaultAuth = Authenticator.getDefault();\n-            throw new RuntimeException(\"Expected security exception not raised\");\n-        } catch (AccessControlException s) {\n-            System.out.println(\"Got expected exception: \" + s);\n-            if (!s.getPermission().equals(new NetPermission(\"requestPasswordAuthentication\"))) {\n-                throw new RuntimeException(\"Unexpected permission check: \" + s.getPermission());\n-            }\n-        }\n","filename":"test\/jdk\/java\/net\/Authenticator\/GetAuthenticatorTest.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.net.SocketPermission;\n@@ -38,6 +37,0 @@\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -54,1 +47,1 @@\n- * @run testng\/othervm -Djava.security.manager=allow ConnectPortZero\n+ * @run testng\/othervm ConnectPortZero\n@@ -57,1 +50,1 @@\n-public class ConnectPortZero{\n+public class ConnectPortZero {\n@@ -63,4 +56,1 @@\n-    private static final Class<UncheckedIOException> UCIOE =\n-            UncheckedIOException.class;\n-    private static final Class<AccessControlException> ACE =\n-            AccessControlException.class;\n+    private static final Class<UncheckedIOException> UCIOE = UncheckedIOException.class;\n@@ -99,28 +89,0 @@\n-\n-    \/\/ Check that 0 port check doesn't override security manager check\n-    @Test(dataProvider = \"data\")\n-    public void testConnectWithSecurityManager(DatagramSocket ds,\n-                                               InetAddress addr) {\n-        Policy defaultPolicy = Policy.getPolicy();\n-        try {\n-            Policy.setPolicy(new NoSendPolicy());\n-            System.setSecurityManager(new SecurityManager());\n-\n-            assertThrows(ACE, () -> ds.connect(addr, 0));\n-            assertThrows(ACE, () ->\n-                    ds.connect(new InetSocketAddress(addr, 0)));\n-        } finally {\n-            System.setSecurityManager(null);\n-            Policy.setPolicy(defaultPolicy);\n-        }\n-    }\n-\n-    static class NoSendPolicy extends Policy {\n-        final PermissionCollection perms = new Permissions();\n-        { perms.add(new SocketPermission(\"*:0\", \"connect\")); }\n-\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            return !perms.implies(perm);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/ConnectPortZero.java","additions":4,"deletions":42,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.net.SocketPermission;\n@@ -38,6 +37,0 @@\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -52,1 +45,1 @@\n- * @run testng\/othervm -Djava.security.manager=allow SendPortZero\n+ * @run testng\/othervm SendPortZero\n@@ -61,2 +54,0 @@\n-    private static final Class<AccessControlException> ACE =\n-            AccessControlException.class;\n@@ -113,26 +104,0 @@\n-    \/\/ Check that 0 port check doesn't override security manager check\n-    @Test(dataProvider = \"data\")\n-    public void testSendWithSecurityManager(DatagramSocket ds,\n-                                            DatagramPacket pkt) {\n-        Policy defaultPolicy = Policy.getPolicy();\n-        try {\n-            Policy.setPolicy(new NoSendPolicy());\n-            System.setSecurityManager(new SecurityManager());\n-\n-            assertThrows(ACE, () -> ds.send(pkt));\n-        } finally {\n-            System.setSecurityManager(null);\n-            Policy.setPolicy(defaultPolicy);\n-        }\n-    }\n-\n-    static class NoSendPolicy extends Policy {\n-        final PermissionCollection perms = new Permissions();\n-        { perms.add(\n-                new SocketPermission(\"*:0\", \"connect\")); }\n-\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            return !perms.implies(perm);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/SendPortZero.java","additions":2,"deletions":37,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test a timed DatagramSocket.receive with a SecurityManager set\n- * @run main\/othervm -Djava.security.manager=allow TimeoutWithSM\n- *\/\n-\n-import java.net.DatagramPacket;\n-import java.net.DatagramSocket;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.SocketAddress;\n-import java.net.SocketTimeoutException;\n-import java.security.Permission;\n-import java.time.Duration;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-public class TimeoutWithSM {\n-\n-    private static final int TIMEOUT = 10_000;\n-\n-    public static void main(String[] args) throws Exception {\n-        try (var socket = new DatagramSocket(null)) {\n-            InetAddress lb = InetAddress.getLoopbackAddress();\n-            socket.bind(new InetSocketAddress(lb, 0));\n-\n-            \/\/ start sender to send datagrams to us\n-            var done = new AtomicBoolean();\n-            startSender(socket.getLocalSocketAddress(), done);\n-\n-            \/\/ set a SecurityManager that blocks datagrams from sender\n-            System.setSecurityManager(new SecurityManager() {\n-                @Override\n-                public void checkPermission(Permission p) {\n-                }\n-                @Override\n-                public void checkAccept(String host, int port) {\n-                    var isa = new InetSocketAddress(host, port);\n-                    System.out.println(\"checkAccept \" + isa);\n-                    throw new SecurityException();\n-                }\n-            });\n-\n-            \/\/ timed receive, should throw SocketTimeoutException\n-            try {\n-                socket.setSoTimeout(TIMEOUT);\n-                try {\n-                    byte[] bytes = new byte[1024];\n-                    DatagramPacket p = new DatagramPacket(bytes, bytes.length);\n-                    socket.receive(p);\n-                    throw new RuntimeException(\"Packet received, unexpected!!! \"\n-                            + \" sender=\" + p.getSocketAddress() + \", len=\" + p.getLength());\n-                } catch (SocketTimeoutException expected) {\n-                    System.out.println(expected + \", expected!!!\");\n-                }\n-            } finally {\n-                done.set(true);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Start a thread to send datagrams to the given target address at intervals of\n-     * one second. The sender stops when done is set to true.\n-     *\/\n-    static void startSender(SocketAddress target, AtomicBoolean done) throws Exception {\n-        assert target instanceof InetSocketAddress isa && isa.getAddress().isLoopbackAddress();\n-        var sender = new DatagramSocket(null);\n-        boolean started = false;\n-        try {\n-            InetAddress lb = InetAddress.getLoopbackAddress();\n-            sender.bind(new InetSocketAddress(lb, 0));\n-            Thread.ofPlatform().start(() -> {\n-                try {\n-                    try (sender) {\n-                        byte[] bytes = \"hello\".getBytes(\"UTF-8\");\n-                        DatagramPacket p = new DatagramPacket(bytes, bytes.length);\n-                        p.setSocketAddress(target);\n-                        while (!done.get()) {\n-                            System.out.println(\"Send datagram to \" + target + \" ...\");\n-                            sender.send(p);\n-                            Thread.sleep(Duration.ofSeconds(1));\n-                        }\n-                    }\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-            });\n-            started = true;\n-        } finally {\n-            if (!started) {\n-                sender.close();\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/TimeoutWithSM.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8220673\n- * @library \/test\/lib\n- * @build jdk.test.lib.net.IPSupport\n- * @summary Ensure IPSupport works under a security manager.\n- * @run main\/othervm\/policy=MinimumPermissions.policy MinimumPermissions\n- *\/\n-\n-import jdk.test.lib.net.IPSupport;\n-\n-public class MinimumPermissions {\n-    public static void main(String[] args) {\n-        IPSupport.throwSkippedExceptionIfNonOperational();\n-    }\n-}\n-\n","filename":"test\/jdk\/java\/net\/IPSupport\/MinimumPermissions.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.net.SocketPermission \"localhost:0\", \"listen,resolve\";\n-    permission java.util.PropertyPermission \"java.net.preferIPv4Stack\", \"read\";\n-    permission java.util.PropertyPermission \"java.net.preferIPv6Addresses\", \"read\";\n-};\n-\n","filename":"test\/jdk\/java\/net\/IPSupport\/MinimumPermissions.policy","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 4531817 8026245\n- * @library \/test\/lib\n- * @summary Inet[46]Address.localHost need doPrivileged\n- * @run main\/othervm -Djava.security.manager=allow GetLocalHostWithSM\n- * @run main\/othervm -Djava.security.manager=allow -Djava.net.preferIPv4Stack=true GetLocalHostWithSM\n- * @run main\/othervm -Djava.security.manager=allow -Djava.net.preferIPv6Addresses=true GetLocalHostWithSM\n- * files needed: GetLocalHostWithSM.java, MyPrincipal.java, and policy.file\n- *\/\n-\n-import java.net.*;\n-\n-import javax.security.auth.Subject;\n-import java.security.Principal;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.*;\n-\n-import jdk.test.lib.net.IPSupport;\n-\n-public class GetLocalHostWithSM {\n-\n-        public static void main(String[] args) throws Exception {\n-            IPSupport.throwSkippedExceptionIfNonOperational();\n-\n-            \/\/ try setting the local hostname\n-            InetAddress localHost = InetAddress.getLocalHost();\n-            if (localHost.isLoopbackAddress()) {\n-                System.err.println(\"Local host name is resolved into a loopback address. Quit now!\");\n-                return;\n-            }\n-            System.setProperty(\"host.name\", localHost.\n-                                            getHostName());\n-            String policyFileName = System.getProperty(\"test.src\", \".\") +\n-                          \"\/\" + \"policy.file\";\n-            System.setProperty(\"java.security.policy\", policyFileName);\n-            System.setSecurityManager(new SecurityManager());\n-\n-            InetAddress localHost1 = null;\n-            InetAddress localHost2 = null;\n-\n-            localHost1 = InetAddress.getLocalHost();\n-\n-            Subject mySubject = new Subject();\n-            MyPrincipal userPrincipal = new MyPrincipal(\"test\");\n-            mySubject.getPrincipals().add(userPrincipal);\n-            localHost2 = (InetAddress)Subject.doAsPrivileged(mySubject,\n-                                new MyAction(), null);\n-\n-            if (localHost1.equals(localHost2)) {\n-                System.out.println(\"localHost1 = \" + localHost1);\n-                throw new RuntimeException(\"InetAddress.getLocalHost() test \" +\n-                                           \" fails. localHost2 should be \" +\n-                                           \" the real address instead of \" +\n-                                           \" the loopback address.\"+localHost2);\n-            }\n-        }\n-}\n-\n-\n-class MyAction implements PrivilegedExceptionAction {\n-\n-    public Object run() throws Exception {\n-        return InetAddress.getLocalHost();\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/InetAddress\/GetLocalHostWithSM.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.net.SocketPermission;\n@@ -38,6 +37,0 @@\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -52,1 +45,1 @@\n- * @run testng\/othervm -Djava.security.manager=allow SendPortZero\n+ * @run testng\/othervm SendPortZero\n@@ -61,2 +54,0 @@\n-    private static final Class<AccessControlException> ACE =\n-            AccessControlException.class;\n@@ -108,27 +99,0 @@\n-    \/\/ Check that 0 port check doesn't override security manager check\n-    @Test(dataProvider = \"data\")\n-    public void testSendWithSecurityManager(MulticastSocket ms,\n-                                            DatagramPacket pkt) {\n-        Policy defaultPolicy = Policy.getPolicy();\n-        try {\n-            Policy.setPolicy(new NoSendPolicy());\n-            System.setSecurityManager(new SecurityManager());\n-\n-            assertThrows(ACE, () -> ms.send(pkt));\n-            assertThrows(ACE, () -> ms.send(pkt, (byte) 0));\n-        } finally {\n-            System.setSecurityManager(null);\n-            Policy.setPolicy(defaultPolicy);\n-        }\n-    }\n-\n-    static class NoSendPolicy extends Policy {\n-        final PermissionCollection perms = new Permissions();\n-        { perms.add(\n-                new SocketPermission(\"*:0\", \"connect\")); }\n-\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            return !perms.implies(perm);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/SendPortZero.java","additions":2,"deletions":38,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Equals\n+ * @run main\/othervm Equals\n@@ -59,2 +59,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-\n","filename":"test\/jdk\/java\/net\/NetworkInterface\/Equals.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,289 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.ServerSocket;\n-import java.net.SocketAddress;\n-import java.net.SocketPermission;\n-import java.nio.channels.ServerSocketChannel;\n-import java.security.AccessControlContext;\n-import java.security.AllPermission;\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.ProtectionDomain;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-import static java.lang.System.out;\n-import static java.security.AccessController.*;\n-import static org.testng.Assert.*;\n-\n-\/*\n- * @test\n- * @bug 8224730\n- * @summary Check local address access with a security manager\n- * @run testng\/othervm -Djava.security.manager=allow TestLocalAddress\n- *\/\n-\n-public class TestLocalAddress {\n-\n-    InetAddress localHost;\n-    ExposedSecurityManager exposedSecurityManager;\n-\n-    @BeforeTest\n-    public void setup() throws Exception {\n-        localHost = InetAddress.getLocalHost();\n-        out.println(\"localHost: \" + localHost);\n-\n-        Policy.setPolicy(new AllPermissionsPolicy());\n-        exposedSecurityManager = new ExposedSecurityManager();\n-        System.setSecurityManager(exposedSecurityManager);\n-        out.println(\"Security manager set\");\n-    }\n-\n-    @Test\n-    public void serverSocketNoSecurityManager() throws Exception {\n-        out.println(\"\\n\\n--- serverSocketNoSecurityManager ---\");\n-        try (ServerSocket ss = new ServerSocket()) {\n-            testWithNoSecurityManager(ss);\n-        }\n-    }\n-\n-    @Test\n-    public void serverSocketAdapterNoSecurityManager() throws Exception {\n-        out.println(\"\\n\\n--- serverSocketAdapterNoSecurityManager ---\");\n-        try (ServerSocket ss = ServerSocketChannel.open().socket()) {\n-            testWithNoSecurityManager(ss);\n-        }\n-    }\n-\n-    void testWithNoSecurityManager(ServerSocket ss) throws Exception {\n-        final SecurityManager sm = System.getSecurityManager();\n-        System.setSecurityManager(null);\n-        try {\n-            ss.bind(new InetSocketAddress(localHost, 0));\n-\n-            var localSocketAddr = ((InetSocketAddress)ss.getLocalSocketAddress());\n-            var localInetAddress = ss.getInetAddress();\n-            assertEquals(localInetAddress, localSocketAddr.getAddress());\n-            if (!(localHost.equals(InetAddress.getLoopbackAddress())))\n-                assertNotEquals(localInetAddress, InetAddress.getLoopbackAddress());\n-\n-            \/\/ toString\n-            String s = ss.toString();\n-            out.println(\"toString returned:\" + s);\n-            assertTrue(s.contains(localInetAddress.toString()),\n-                    \"Expected [\" + localInetAddress + \"] in \" + s);\n-\n-        } finally {\n-            System.setSecurityManager(sm);\n-        }\n-    }\n-\n-    @Test\n-    public void serverSocketNoPermissions() throws Exception {\n-        out.println(\"\\n\\n--- serverSocketNoPermissions ---\");\n-        try (ServerSocket ss = new ServerSocket()) {\n-            testWithNoPermissions(ss);\n-        }\n-    }\n-\n-    @Test\n-    public void serverSocketAdapterNoPermissions() throws Exception {\n-        out.println(\"\\n\\n--- serverSocketAdapterNoPermissions ---\");\n-        try (ServerSocket ss = ServerSocketChannel.open().socket()) {\n-            testWithNoPermissions(ss);\n-        }\n-    }\n-\n-    void testWithNoPermissions(ServerSocket ss) throws Exception {\n-        ss.bind(new InetSocketAddress(localHost, 0));\n-\n-        PrivilegedExceptionAction<SocketAddress> pa = ss::getLocalSocketAddress;\n-        var localSocketAddr = (InetSocketAddress) doPrivileged(pa, noPermissions());\n-        assertSecurityManagerCalled();\n-        PrivilegedExceptionAction<InetAddress> pa1 = ss::getInetAddress;\n-        var localInetAddress = doPrivileged(pa1, noPermissions());\n-        assertSecurityManagerCalled();\n-\n-        assertEquals(localInetAddress, localSocketAddr.getAddress());\n-        assertEquals(localInetAddress, InetAddress.getLoopbackAddress());\n-\n-        \/\/ toString\n-        PrivilegedExceptionAction<String> pa2 = ss::toString;\n-        String s = doPrivileged(pa2, noPermissions());\n-        assertSecurityManagerCalled();\n-        out.println(\"toString returned:\" + s);\n-        assertTrue(s.contains(localInetAddress.toString()),\n-                \"Expected [\" + localInetAddress + \"] in \" + s);\n-    }\n-\n-\n-    @Test\n-    public void serverSocketFineGrainPermissions() throws Exception {\n-        out.println(\"\\n\\n--- serverSocketFineGrainPermissions ---\");\n-        try (ServerSocket ss = new ServerSocket()) {\n-            testWithFineGrainPermissions(ss);\n-        }\n-    }\n-\n-    @Test\n-    public void serverSocketAdapterFineGrainPermissions() throws Exception {\n-        out.println(\"\\n\\n--- serverSocketAdapterFineGrainPermissions ---\");\n-        try (ServerSocket ss = ServerSocketChannel.open().socket()) {\n-            testWithFineGrainPermissions(ss);\n-        }\n-    }\n-\n-    void testWithFineGrainPermissions(ServerSocket ss) throws Exception {\n-        AccessControlContext connectPermission = withPermissions(\n-                new SocketPermission(localHost.getHostName(), \"connect\")\n-        );\n-        ss.bind(new InetSocketAddress(localHost, 0));\n-\n-        PrivilegedExceptionAction<SocketAddress> pa = ss::getLocalSocketAddress;\n-        var localSocketAddr = (InetSocketAddress) doPrivileged(pa, connectPermission);\n-        assertSecurityManagerCalled();\n-        PrivilegedExceptionAction<InetAddress> pa1 = ss::getInetAddress;\n-        var localInetAddress = doPrivileged(pa1, connectPermission);\n-        assertSecurityManagerCalled();\n-\n-        assertEquals(localInetAddress, localSocketAddr.getAddress());\n-        assertEquals(localInetAddress, localHost);\n-\n-        \/\/ toString\n-        PrivilegedExceptionAction<String> pa2 = ss::toString;\n-        String s = doPrivileged(pa2, connectPermission);\n-        assertSecurityManagerCalled();\n-        out.println(\"toString returned:\" + s);\n-        assertTrue(s.contains(localInetAddress.toString()),\n-                \"Expected [\" + localInetAddress + \"] in \" + s);\n-    }\n-\n-\n-    @Test\n-    public void serverSocketUnbound() throws Exception {\n-        out.println(\"\\n\\n--- serverSocketUnbound ---\");\n-        try (ServerSocket ss = new ServerSocket()) {\n-            testUnbound(ss);\n-        }\n-    }\n-\n-    @Test\n-    public void serverSocketAdapterUnbound() throws Exception {\n-        out.println(\"\\n\\n--- serverSocketAdapterUnbound ---\");\n-        try (ServerSocket ss = ServerSocketChannel.open().socket()) {\n-            testUnbound(ss);\n-        }\n-    }\n-\n-    void testUnbound(ServerSocket ss) {\n-        assert !ss.isBound();\n-        exposedSecurityManager.reset();\n-        assertEquals(ss.getLocalSocketAddress(), null);\n-        assertEquals(exposedSecurityManager.port, -999);\n-        assertEquals(ss.getInetAddress(), null);\n-        assertEquals(exposedSecurityManager.port, -999);\n-        String s = ss.toString();\n-        assertEquals(exposedSecurityManager.port, -999);\n-        out.println(\"toString returned:\" + s);\n-        assertTrue(s.contains(\"unbound\"), \"Expected [unbound] in \" + s);\n-    }\n-\n-    \/\/ A security manager that allows inspection of checkConnect's host\/port.\n-    static class ExposedSecurityManager extends SecurityManager {\n-        volatile String host;\n-        volatile int port;\n-        ExposedSecurityManager() {\n-            reset();\n-        }\n-        @Override\n-        public void checkConnect(String host, int port) {\n-            this.host = host;\n-            this.port = port;\n-            super.checkConnect(host, port);\n-        }\n-        void reset() {\n-            host = \"reset\";\n-            port = -999;\n-        }\n-    }\n-\n-    void assertSecurityManagerCalled() {\n-        assertEquals(exposedSecurityManager.port, -1);\n-        assertEquals(exposedSecurityManager.host, localHost.getHostAddress());\n-        exposedSecurityManager.reset();\n-    }\n-\n-    @Test\n-    \/\/ Ensures that the test machinery is operating as expected.\n-    public void sanity() {\n-        PrivilegedAction<?> connectAction = () -> {\n-            System.getSecurityManager().checkConnect(\"example.com\", 80);\n-            return null;\n-        };\n-\n-        try {\n-            doPrivileged(connectAction, allPermissions());\n-        } catch (SecurityException unexpected) {\n-            throw unexpected;\n-        }\n-        try {\n-            doPrivileged(connectAction, noPermissions());\n-            fail(\"Expected exception not thrown\");\n-        } catch (SecurityException expected) { }\n-        try {\n-            doPrivileged(connectAction,\n-                    withPermissions(new SocketPermission(\"example.com:80\", \"connect\")));\n-        } catch (SecurityException unexpected) {\n-            throw unexpected;\n-        }\n-    }\n-\n-    static AccessControlContext withPermissions(Permission... perms) {\n-        Permissions p = new Permissions();\n-        for (Permission perm : perms) {\n-            p.add(perm);\n-        }\n-        ProtectionDomain pd = new ProtectionDomain(null, p);\n-        return new AccessControlContext(new ProtectionDomain[]{ pd });\n-    }\n-\n-    static AccessControlContext allPermissions() {\n-        return withPermissions(new AllPermission());\n-    }\n-\n-    static AccessControlContext noPermissions() {\n-        return withPermissions(\/*empty*\/);\n-    }\n-\n-    \/\/ A Policy that implies all permissions.\n-    static class AllPermissionsPolicy extends Policy {\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return true;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/ServerSocket\/TestLocalAddress.java","additions":0,"deletions":289,"binary":false,"changes":289,"status":"deleted"},{"patch":"@@ -1,88 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @bug 8048052\n- * @summary Test a series of methods which requires \"setFactory\" runtime permission\n- * @modules java.rmi\n- * @run main\/othervm SetFactoryPermission success\n- * @run main\/othervm\/policy=policy.fail SetFactoryPermission fail\n- * @run main\/othervm\/policy=policy.success SetFactoryPermission success\n- *\/\n-import java.net.ServerSocket;\n-import java.net.Socket;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.rmi.server.RMISocketFactory;\n-import java.security.AccessControlException;\n-\n-public class SetFactoryPermission {\n-    static boolean success = false;\n-\n-    interface Runner {\n-        public void run() throws Exception;\n-    }\n-\n-    public static void main (String[] args) throws Exception {\n-        if (args.length > 0) {\n-            success = System.getSecurityManager() == null || args[0].equals(\"success\");\n-        }\n-\n-        doTest(()->{\n-            System.out.println(\"Verify URLConnection.setContentHandlerFactor()\");\n-            URLConnection.setContentHandlerFactory(null);\n-        });\n-        doTest(()->{\n-            System.out.println(\"Verify URL.setURLStreamHandlerFactory()\");\n-            URL.setURLStreamHandlerFactory(null);\n-        });\n-        doTest(()->{\n-            System.out.println(\"Verify ServerSocket.setSocketFactory()\");\n-            ServerSocket.setSocketFactory(null);\n-        });\n-        doTest(()->{\n-            System.out.println(\"Verify Socket.setSocketImplFactory()\");\n-            Socket.setSocketImplFactory(null);\n-        });\n-        doTest(()->{\n-            System.out.println(\"Verify RMISocketFactory.setSocketFactory()\");\n-            RMISocketFactory.setSocketFactory(null);\n-        });\n-    }\n-\n-    static void doTest(Runner func) throws Exception {\n-        try {\n-            func.run();\n-            if (!success) {\n-                throw new RuntimeException(\"AccessControlException is not thrown. Test failed\");\n-            }\n-        } catch (SecurityException e) {\n-            if (success) {\n-                e.printStackTrace();\n-                throw new RuntimeException(\"AccessControlException is thrown unexpectedly. Test failed\");\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/SetFactoryPermission\/SetFactoryPermission.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -26,1 +26,1 @@\n- * @run testng\/othervm -Djava.security.manager=allow -Dsun.net.maxDatagramSockets=32 UdpSocket\n+ * @run testng\/othervm UdpSocket\n@@ -31,1 +31,0 @@\n-import java.lang.ref.WeakReference;\n@@ -38,1 +37,0 @@\n-import java.security.Permission;\n@@ -40,3 +38,0 @@\n-import java.util.ArrayDeque;\n-import java.util.Deque;\n-import java.net.BindException;\n@@ -86,75 +81,0 @@\n-\n-    \/**\n-     * Test that the number of UDP sockets is limited when running with a\n-     * security manager.\n-     *\/\n-    public void testMaxSockets() throws Exception {\n-        int limit = Integer.getInteger(\"sun.net.maxDatagramSockets\");\n-\n-        \/\/ security manager grants all permissions\n-        var securityManager = new SecurityManager() {\n-            @Override public void checkPermission(Permission perm) { }\n-        };\n-\n-        System.setSecurityManager(securityManager);\n-        Deque<Socket> sockets = new ArrayDeque<>();\n-        try {\n-            \/\/ create the maximum number of sockets\n-            for (int i=0; i<limit; i++) {\n-                sockets.offer(newUdpSocket());\n-            }\n-\n-            \/\/ try to create another socket - should fail\n-            try {\n-                Socket s = newUdpSocket();\n-                s.close();\n-                assertTrue(false);\n-            } catch (IOException expected) { }\n-\n-            \/\/ close one socket\n-            sockets.pop().close();\n-\n-            \/\/ try to create another socket - should succeed\n-            Socket s = newUdpSocket();\n-\n-            \/\/ unreference the socket and wait for it to be closed by the cleaner\n-            var ref = new WeakReference<>(s);\n-            s = null;\n-            while (ref.get() != null) {\n-                System.gc();\n-                Thread.sleep(100);\n-            }\n-\n-            \/\/ try to create another socket - should succeed\n-            s = newUdpSocket();\n-            s.close();\n-        } finally {\n-            closeAll(sockets);\n-            System.setSecurityManager(null);\n-        }\n-    }\n-\n-\n-    private Socket newUdpSocket() throws IOException, InterruptedException {\n-        BindException unexpected = null;\n-        for (int i=0; i < MAX_RETRIES; i++) {\n-            try {\n-                return new Socket(InetAddress.getLoopbackAddress(), 8000, false);\n-            } catch (BindException be) {\n-                unexpected = be;\n-                if (i != MAX_RETRIES - 1) {\n-                    System.out.printf(\"BindException caught: retry Socket creation [%s\/%s]%n\",\n-                            i + 1, MAX_RETRIES);\n-                    Thread.sleep(10 + 10 * i);\n-                }\n-            }\n-        }\n-        throw unexpected;\n-    }\n-\n-    private void closeAll(Deque<Socket> sockets) throws IOException {\n-        Socket s;\n-        while ((s = sockets.poll()) != null) {\n-            s.close();\n-        }\n-    }\n","filename":"test\/jdk\/java\/net\/Socket\/UdpSocket.java","additions":1,"deletions":81,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm\/policy=options.policy OptionsTest\n","filename":"test\/jdk\/java\/net\/SocketOption\/OptionsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,27 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-grant {\n-    permission java.net.SocketPermission \"*:*\", \"connect, accept, listen, resolve\";\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-};\n","filename":"test\/jdk\/java\/net\/SocketOption\/options.policy","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,355 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8047031\n- * @key intermittent\n- * @summary SocketPermission tests for legacy socket types.\n- *          This test needs to bind its servers to the wildcard\n- *          address and as such may fail intermittently.\n- * @library \/test\/lib\n- * @build jdk.test.lib.NetworkConfiguration\n- *        jdk.test.lib.Platform\n- * @run testng\/othervm -Djava.security.manager=allow SocketPermissionTest\n- *\/\n-\n-import java.io.IOException;\n-import java.net.DatagramPacket;\n-import java.net.DatagramSocket;\n-import java.net.InetAddress;\n-import java.net.MulticastSocket;\n-import java.net.NetworkInterface;\n-import java.net.ServerSocket;\n-import java.net.Socket;\n-import java.net.SocketPermission;\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.ProtectionDomain;\n-import java.util.Optional;\n-\n-import org.testng.annotations.BeforeMethod;\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.*;\n-\n-import static jdk.test.lib.NetworkConfiguration.probe;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-public class SocketPermissionTest {\n-\n-    @BeforeMethod\n-    public void setupSecurityManager() throws Exception {\n-        \/\/ All permissions, a specific ACC will be used to when testing\n-        \/\/ with a reduced permission set.\n-        Policy.setPolicy(new Policy() {\n-             final PermissionCollection perms = new Permissions();\n-             { perms.add(new java.security.AllPermission()); }\n-             public PermissionCollection getPermissions(ProtectionDomain domain) {\n-                 return perms;\n-             }\n-             public PermissionCollection getPermissions(CodeSource codesource) {\n-                 return perms;\n-             }\n-             public boolean implies(ProtectionDomain domain, Permission perm) {\n-                 return perms.implies(perm);\n-             }\n-        } );\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-\n-    static final AccessControlContext RESTRICTED_ACC = getAccessControlContext();\n-\n-    @Test\n-    public void connectSocketTest() throws Exception {\n-        try (ServerSocket ss = new ServerSocket(0)) {\n-            int port = ss.getLocalPort();\n-\n-            String addr = \"localhost:\" + port;\n-            AccessControlContext acc = getAccessControlContext(\n-                    new SocketPermission(addr, \"listen,connect,resolve\"));\n-\n-            \/\/ Positive\n-            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                try (Socket client = new Socket(InetAddress.getLocalHost(), port)) {\n-                }\n-                return null;\n-            }, acc);\n-\n-            \/\/Negative\n-            try {\n-                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                    Socket client = new Socket(InetAddress.getLocalHost(), port);\n-                    fail(\"Expected SecurityException\");\n-                    return null;\n-                }, RESTRICTED_ACC);\n-            } catch (SecurityException expected) { }\n-        }\n-    }\n-\n-    @Test\n-    public void connectDatagramSocketTest() throws Exception {\n-        byte[] msg = \"Hello\".getBytes(UTF_8);\n-        InetAddress lh = InetAddress.getLocalHost();\n-\n-        try (DatagramSocket ds = new DatagramSocket(0)) {\n-            int port = ds.getLocalPort();\n-\n-            String addr = lh.getHostAddress() + \":\" + port;\n-            AccessControlContext acc = getAccessControlContext(\n-                    new SocketPermission(addr, \"connect,resolve\"));\n-\n-            \/\/ Positive\n-            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                DatagramPacket dp = new DatagramPacket(msg, msg.length, lh, port);\n-                ds.send(dp);\n-                return null;\n-            }, acc);\n-\n-            \/\/ Negative\n-            try {\n-                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                    DatagramPacket dp = new DatagramPacket(msg, msg.length, lh, port);\n-                    ds.send(dp);\n-                    fail(\"Expected SecurityException\");\n-                    return null;\n-                }, RESTRICTED_ACC);\n-            } catch (SecurityException expected) { }\n-        }\n-    }\n-\n-    @Test\n-    public void acceptServerSocketTest() throws Exception {\n-        try (ServerSocket ss = new ServerSocket(0)) {\n-            int port = ss.getLocalPort();\n-\n-            String addr = \"localhost:\" + port;\n-            AccessControlContext acc = getAccessControlContext(\n-                    new SocketPermission(addr, \"listen,connect,resolve\"),\n-                    new SocketPermission(\"localhost:1024-\", \"accept\"));\n-\n-            \/\/ Positive\n-            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                InetAddress me = InetAddress.getLocalHost();\n-                try (Socket client = new Socket(me, port)) {\n-                    ss.accept();\n-                }\n-                return null;\n-            }, acc);\n-\n-            \/\/ Negative\n-            try {\n-                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                    InetAddress me = InetAddress.getLocalHost();\n-                    try (Socket client = new Socket(me, port)) {\n-                        ss.accept();\n-                    }\n-                    fail(\"Expected SecurityException\");\n-                    return null;\n-                }, RESTRICTED_ACC);\n-            } catch (SecurityException expected) { }\n-        }\n-    }\n-\n-    @Test\n-    public void sendDatagramPacketTest() throws Exception {\n-        byte[] msg = \"Hello\".getBytes(UTF_8);\n-        InetAddress group = InetAddress.getByName(\"229.227.226.221\");\n-\n-        try (DatagramSocket ds = new DatagramSocket(0)) {\n-            int port = ds.getLocalPort();\n-\n-            String addr = \"localhost:\" + port;\n-            \/\/test for SocketPermission \"229.227.226.221\", \"connect,accept\"\n-            AccessControlContext acc = getAccessControlContext(\n-                    new SocketPermission(addr, \"listen,resolve\"),\n-                    new SocketPermission(\"229.227.226.221\", \"connect,accept\"));\n-\n-            \/\/ Positive\n-            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                DatagramPacket hi = new DatagramPacket(msg, msg.length, group, port);\n-                ds.send(hi);\n-                return null;\n-            }, acc);\n-\n-            \/\/ Negative\n-            try {\n-                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                    DatagramPacket hi = new DatagramPacket(msg, msg.length, group, port);\n-                    ds.send(hi);\n-                    fail(\"Expected SecurityException\");\n-                    return null;\n-                }, RESTRICTED_ACC);\n-            } catch (SecurityException expected) { }\n-        }\n-    }\n-\n-    @Test\n-    public void joinGroupMulticastTest() throws Exception {\n-        InetAddress group = InetAddress.getByName(\"229.227.226.221\");\n-        try (MulticastSocket s = new MulticastSocket(0)) {\n-            int port = s.getLocalPort();\n-\n-            String addr = \"localhost:\" + port;\n-            AccessControlContext acc = getAccessControlContext(\n-                    new SocketPermission(addr, \"listen,resolve\"),\n-                    new SocketPermission(\"229.227.226.221\", \"connect,accept\"));\n-\n-            \/\/ Positive ( requires a functional network interface )\n-            Optional<NetworkInterface> onif = probe().ip4MulticastInterfaces().findFirst();\n-            if (!onif.isPresent()) {\n-                s.setNetworkInterface(onif.get());\n-\n-                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                    s.joinGroup(group);\n-                    s.leaveGroup(group);\n-                    return null;\n-                }, acc);\n-            }\n-\n-            \/\/ Negative\n-            try {\n-                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                    s.joinGroup(group);\n-                    s.leaveGroup(group);\n-                    fail(\"Expected SecurityException\");\n-                    return null;\n-                }, RESTRICTED_ACC);\n-            } catch (SecurityException expected) { }\n-        }\n-\n-    }\n-\n-    @Test\n-    public void listenDatagramSocketTest() throws Exception {\n-        \/\/ the hardcoded port number doesn't really matter since we expect the\n-        \/\/ security permission to be checked before the underlying operation.\n-        int port = 8899;\n-        String addr = \"localhost:\" + port;\n-        AccessControlContext acc = getAccessControlContext(\n-                new SocketPermission(addr, \"listen\"));\n-\n-        \/\/ Positive\n-        AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-            try (DatagramSocket ds = new DatagramSocket(port)) { }\n-            catch (IOException intermittentlyExpected) { \/* ignore *\/ }\n-            return null;\n-        }, acc);\n-\n-        \/\/ Negative\n-        try {\n-            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                try (DatagramSocket ds = new DatagramSocket(port)) { }\n-                catch (IOException intermittentlyExpected) { \/* ignore *\/ }\n-                fail(\"Expected SecurityException\");\n-                return null;\n-            }, RESTRICTED_ACC);\n-        } catch (SecurityException expected) { }\n-    }\n-\n-    @Test\n-    public void listenMulticastSocketTest() throws Exception {\n-        \/\/ the hardcoded port number doesn't really matter since we expect the\n-        \/\/ security permission to be checked before the underlying operation.\n-        int port = 8899;\n-        String addr = \"localhost:\" + port;\n-        AccessControlContext acc = getAccessControlContext(\n-                new SocketPermission(addr, \"listen\"));\n-\n-        \/\/ Positive\n-        AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-            try (MulticastSocket ms = new MulticastSocket(port)) { }\n-            catch (IOException intermittentlyExpected) { \/* ignore *\/ }\n-            return null;\n-        }, acc);\n-\n-        \/\/ Negative\n-        try {\n-            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                try (MulticastSocket ms = new MulticastSocket(port)) { }\n-                catch (IOException intermittentlyExpected) { \/* ignore *\/ }\n-                fail(\"Expected SecurityException\");\n-                return null;\n-            }, RESTRICTED_ACC);\n-        } catch (SecurityException expected) { }\n-    }\n-\n-    @Test\n-    public void listenServerSocketTest() throws Exception {\n-        \/\/ the hardcoded port number doesn't really matter since we expect the\n-        \/\/ security permission to be checked before the underlying operation.\n-        int port = 8899;\n-        String addr = \"localhost:\" + port;\n-        AccessControlContext acc = getAccessControlContext(\n-                new SocketPermission(addr, \"listen\"));\n-\n-        \/\/ Positive\n-        AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-            try (ServerSocket ss = new ServerSocket(port)) { }\n-            catch (IOException intermittentlyExpected) { \/* ignore *\/ }\n-            return null;\n-        }, acc);\n-\n-        \/\/ Negative\n-        try {\n-            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                try (ServerSocket ss = new ServerSocket(port)) { }\n-                catch (IOException intermittentlyExpected) { \/* ignore *\/ }\n-                fail(\"Expected SecurityException\");\n-                return null;\n-            }, RESTRICTED_ACC);\n-        } catch (SecurityException expected) { }\n-\n-    }\n-\n-    private static AccessControlContext getAccessControlContext(Permission... ps) {\n-        Permissions perms = new Permissions();\n-        for (Permission p : ps) {\n-            perms.add(p);\n-        }\n-        \/*\n-         *Create an AccessControlContext that consist a single protection domain\n-         * with only the permissions calculated above\n-         *\/\n-        ProtectionDomain pd = new ProtectionDomain(null, perms);\n-        return new AccessControlContext(new ProtectionDomain[]{pd});\n-    }\n-\n-    \/\/ Standalone entry point for running with, possibly older, JDKs.\n-    public static void main(String[] args) throws Throwable {\n-        SocketPermissionTest test = new SocketPermissionTest();\n-        test.setupSecurityManager();\n-        for (java.lang.reflect.Method m : SocketPermissionTest.class.getDeclaredMethods()) {\n-            if (m.getAnnotation(Test.class) != null) {\n-                System.out.println(\"Invoking \" + m.getName());\n-                m.invoke(test);\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/SocketPermission\/SocketPermissionTest.java","additions":0,"deletions":355,"binary":false,"changes":355,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm -Djava.security.manager=allow OpenConnection\n+ * @run main\/othervm OpenConnection\n@@ -35,1 +35,0 @@\n-        System.setSecurityManager( new SecurityManager() );\n","filename":"test\/jdk\/java\/net\/URL\/OpenConnection.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,2 @@\n- * @bug 4451522 4460484\n- * @run main\/othervm -Djava.security.manager=allow TestIPv6Addresses\n+ * @bug 4451522\n+ * @run main\/othervm TestIPv6Addresses\n@@ -30,2 +30,0 @@\n-\/\/ Run in othervm -Djava.security.manager=allow because the tests sets a SecurityManager\n-\n@@ -78,1 +76,0 @@\n-        \/\/ bug 4460484\n@@ -80,1 +77,0 @@\n-        SecurityManager sm = new SecurityManager();\n@@ -82,1 +78,0 @@\n-\n@@ -88,9 +83,0 @@\n-        System.setSecurityManager(sm);\n-\n-        try {\n-            InetAddress addr = InetAddress.getByName(strAddr);\n-        } catch (java.security.AccessControlException e) {\n-            \/\/ expected\n-        } catch (UnknownHostException e) {\n-            \/\/ expected\n-        }\n","filename":"test\/jdk\/java\/net\/URL\/TestIPv6Addresses.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-    private static final String POLICY_FILE = \"policy\";\n@@ -64,8 +63,0 @@\n-                        \"-Djava.security.policy=file:.\/policy\",\n-                        \"-Djava.security.manager\",\n-                        TEST_NAME, \".\/\" + ARCHIVE_NAME\n-                ),\n-                ProcessTools.createTestJavaProcessBuilder(\n-                        \"-cp\", \".\",\n-                        \"-Djava.security.policy=file:.\/policy\",\n-                        \"-Djava.security.manager\",\n@@ -76,2 +67,0 @@\n-                        \"-Djava.security.policy=file:..\/policy\",\n-                        \"-Djava.security.manager\",\n@@ -82,2 +71,0 @@\n-                        \"-Djava.security.policy=file:\" + basename + \"\/policy\",\n-                        \"-Djava.security.manager\",\n@@ -94,1 +81,0 @@\n-        Path policy = src.resolve(POLICY_FILE);\n@@ -98,1 +84,0 @@\n-        Files.copy(policy, userDir.resolve(POLICY_FILE), REPLACE_EXISTING);\n","filename":"test\/jdk\/java\/net\/URLClassLoader\/getresourceasstream\/TestDriver.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-grant {\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-};\n","filename":"test\/jdk\/java\/net\/URLClassLoader\/getresourceasstream\/policy","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow OpenURL\n+ * @run main\/othervm OpenURL\n@@ -33,0 +33,3 @@\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n@@ -40,15 +43,54 @@\n-        System.setSecurityManager(new SecurityManager());\n-\n-        try {\n-            URL url = URIBuilder.newBuilder()\n-                .scheme(\"http\")\n-                .userInfo(\"joe\")\n-                .loopback()\n-                .path(\"\/a\/b\")\n-                .toURL();\n-            System.out.println(\"URL: \" + url);\n-            HttpURLConnection urlc = (HttpURLConnection)url.openConnection(NO_PROXY);\n-            InputStream is = urlc.getInputStream();\n-            \/\/ error will throw exception other than SecurityException\n-        } catch (SecurityException e) {\n-            System.out.println(\"OK\");\n+        \/\/ minimal HTTP\/1.1 reply\n+        final String reply = \"HTTP\/1.1 200 OK\\r\\n\"+\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Length: 0\\r\\n\\r\\n\";\n+\n+        try (ServerSocket serverSocket = new ServerSocket()) {\n+            serverSocket.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            final AtomicBoolean done = new AtomicBoolean();\n+            final Thread serverThread = new Thread(() -> {\n+                while (!done.get()) {\n+                    try (Socket ss = serverSocket.accept()) {\n+                        ss.getOutputStream().write(reply.getBytes(StandardCharsets.US_ASCII));\n+                        ss.getOutputStream().close();\n+                        \/\/ Give a chance to the peer to close the socket first...\n+                        Thread.sleep(100);\n+                        \/\/ Reads the request headers - avoids Connection reset\n+                        BufferedReader reader = new BufferedReader(new InputStreamReader(ss.getInputStream()));\n+                        String line;\n+                        do {\n+                            System.out.println(\"Server: \" + (line = reader.readLine()));\n+                        } while (!line.isBlank());\n+                    } catch (Exception x) {\n+                        if (!done.get()) {\n+                            \/\/ Something else than the expected client\n+                            \/\/ might have connected...\n+                            x.printStackTrace();\n+                        }\n+                    }\n+                }\n+            });\n+            serverThread.start();\n+            try {\n+                URL url = URIBuilder.newBuilder()\n+                        .scheme(\"http\")\n+                        .userInfo(\"joe\")\n+                        .loopback()\n+                        .port(serverSocket.getLocalPort())\n+                        .path(\"\/a\/b\")\n+                        .toURL();\n+                System.out.println(\"URL: \" + url);\n+\n+                \/\/ will throw if not fixed\n+                URLPermission perm = new URLPermission(url.toString(), \"listen,read,resolve\");\n+                System.out.println(\"Permission: \" + perm);\n+                \/\/ may throw if not fixed\n+                HttpURLConnection urlc = (HttpURLConnection) url.openConnection(NO_PROXY);\n+                InputStream is = urlc.getInputStream();\n+            } finally {\n+                \/\/ make sure the server thread eventually exit\n+                done.set(true);\n+                serverSocket.close();\n+            }\n+            serverThread.join();\n+            System.out.println(\"OpenURL: OK\");\n@@ -56,0 +98,1 @@\n+\n","filename":"test\/jdk\/java\/net\/URLPermission\/OpenURL.java","additions":60,"deletions":17,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.net.URLPermission;\n@@ -31,2 +30,2 @@\n- * @run main\/othervm -Djava.security.manager=allow URLTest\n- * @run main\/othervm -Djava.security.manager=allow -Djava.net.preferIPv6Addresses=true URLTest\n+ * @run main\/othervm URLTest\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true URLTest\n@@ -39,0 +38,1 @@\n+import java.util.List;\n@@ -52,10 +52,0 @@\n-            \/\/ Verify without a Security Manager\n-            test1();\n-            test2();\n-            test3();\n-\n-            \/\/ Set the security manager. Each test will set its own policy.\n-            Policy.setPolicy(new CustomPolicy());\n-            System.setSecurityManager(new SecurityManager());\n-            System.out.println(\"\\n Security Manager has been set.\");\n-\n@@ -76,5 +66,1 @@\n-        boolean expectException = false;\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            expectException = true;\n-            Policy.setPolicy(new CustomPolicy(\n+        List<URLPermission> perms = List.of(\n@@ -82,2 +68,1 @@\n-                new URLPermission(\"https:\/\/\" + httpsAuth + \"\/foo.html\", \"POST:X-Fob,T-Bar\")));\n-        }\n+                new URLPermission(\"https:\/\/\" + httpsAuth + \"\/foo.html\", \"POST:X-Fob,T-Bar\"));\n@@ -91,5 +76,5 @@\n-        test(url1, \"GET\", \"X-Foo\");\n-        test(url1, \"GET\", \"Z-Bar\", \"X-Foo\");\n-        test(url1, \"GET\", \"X-Foo\", \"Z-Bar\");\n-        test(url1, \"GET\", \"Z-Bar\");\n-        test(url2, \"POST\", \"X-Fob\");\n+        test(url1, \"GET\", \"X-Foo\", perms);\n+        test(url1, \"GET\", \"Z-Bar\", \"X-Foo\", perms);\n+        test(url1, \"GET\", \"X-Foo\", \"Z-Bar\", perms);\n+        test(url1, \"GET\", \"Z-Bar\", perms);\n+        test(url2, \"POST\", \"X-Fob\", perms);\n@@ -98,2 +83,2 @@\n-        test(url1, \"POST\", \"X-Foo\", expectException);\n-        test(url2, \"GET\", \"X-Fob\", expectException);\n+        test(url1, \"POST\", \"X-Foo\", perms, true);\n+        test(url2, \"GET\", \"X-Fob\", perms, true);\n@@ -102,2 +87,2 @@\n-        test(url3, \"GET\", \"X-Foo\", expectException);\n-        test(url4, \"POST\", \"X-Fob\", expectException);\n+        test(url3, \"GET\", \"X-Foo\", perms, true);\n+        test(url4, \"POST\", \"X-Fob\", perms, true);\n@@ -109,3 +94,1 @@\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            Policy.setPolicy(new CustomPolicy(\n+        List<URLPermission> perms = List.of(\n@@ -113,2 +96,1 @@\n-                new URLPermission(\"https:\/\/\" + httpsAuth + \"\/*\", \"POST:X-Fob\")));\n-        }\n+                new URLPermission(\"https:\/\/\" + httpsAuth + \"\/*\", \"POST:X-Fob\"));\n@@ -122,4 +104,4 @@\n-        test(url1, \"GET\", \"X-Foo\");\n-        test(url2, \"POST\", \"X-Fob\");\n-        test(url3, \"GET\", \"X-Foo\");\n-        test(url4, \"POST\", \"X-Fob\");\n+        test(url1, \"GET\", \"X-Foo\", perms);\n+        test(url2, \"POST\", \"X-Fob\", perms);\n+        test(url3, \"GET\", \"X-Foo\", perms);\n+        test(url4, \"POST\", \"X-Fob\", perms);\n@@ -131,5 +113,1 @@\n-        boolean expectException = false;\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            expectException = true;\n-            Policy.setPolicy(new CustomPolicy(\n+        List<URLPermission> perms = List.of(\n@@ -137,2 +115,2 @@\n-                new URLPermission(\"https:\/\/\" + httpsAuth + \"\/a\/c\/-\", \"POST:*\")));\n-        }\n+                new URLPermission(\"https:\/\/\" + httpsAuth + \"\/a\/c\/-\", \"POST:*\"));\n+\n@@ -145,4 +123,4 @@\n-        test(url1, \"GET\", \"X-Foo\", expectException);\n-        test(url2, \"POST\", \"X-Zxc\");\n-        test(url3, \"DELETE\", \"Y-Foo\");\n-        test(url4, \"POST\", \"Y-Foo\", expectException);\n+        test(url1, \"GET\", \"X-Foo\", perms, true);\n+        test(url2, \"POST\", \"X-Zxc\", perms);\n+        test(url3, \"DELETE\", \"Y-Foo\", perms);\n+        test(url4, \"POST\", \"Y-Foo\", perms,true);\n@@ -162,2 +140,2 @@\n-    static void test(String u, String method, String header) throws IOException {\n-        test(u, method, header, null, false);\n+    static void test(String u, String method, String header, List<URLPermission> perms) throws IOException {\n+        test(u, method, header, perms, false);\n@@ -166,1 +144,1 @@\n-    static void test(String u, String method, String header, boolean expectException)\n+    static void test(String u, String method, String header, List<URLPermission> perms, boolean expectException)\n@@ -169,1 +147,1 @@\n-        test(u, method, header, null, expectException);\n+        test(u, method, header, null, perms, expectException);\n@@ -172,1 +150,1 @@\n-    static void test(String u, String method, String header1, String header2)\n+    static void test(String u, String method, String header1, String header2, List<URLPermission> perms)\n@@ -175,1 +153,1 @@\n-        test(u, method, header1, header2, false);\n+        test(u, method, header1, header2, perms, false);\n@@ -182,0 +160,1 @@\n+                     List<URLPermission> perms,\n@@ -185,0 +164,2 @@\n+\n+        \/\/ check that no SecurityException is thrown\n@@ -196,1 +177,2 @@\n-        if (header1 != null)\n+        String action = method + \":\";\n+        if (header1 != null) {\n@@ -198,1 +180,3 @@\n-        if (header2 != null)\n+            action = action + header1;\n+        }\n+        if (header2 != null) {\n@@ -200,0 +184,16 @@\n+            if (header1 != null) action = action + \",\";\n+            action = action + header2;\n+        }\n+\n+        int code = urlc.getResponseCode();\n+        if (code != 200)\n+            throw new RuntimeException(\"Unexpected response \" + code);\n+\n+        InputStream is = urlc.getInputStream();\n+        is.readAllBytes();\n+        is.close();\n+\n+        \/\/ all good - now check permissions still work\n+        URLPermission perm = new URLPermission(url.toString(), action);\n+        PermissionCollection allperms = new Permissions();\n+        perms.forEach(allperms::add);\n@@ -202,1 +202,3 @@\n-            int code = urlc.getResponseCode();\n+            if (!allperms.implies(perm)) {\n+                throw new RuntimeException(new SecurityException(perms.toString()));\n+            }\n@@ -204,0 +206,1 @@\n+                System.out.println(\"Expected exception not thrown for \" + perm);\n@@ -205,2 +208,0 @@\n-                System.out.println(\"FAIL\");\n-                return;\n@@ -208,6 +209,0 @@\n-            if (code != 200)\n-                throw new RuntimeException(\"Unexpected response \" + code);\n-\n-            InputStream is = urlc.getInputStream();\n-            is.readAllBytes();\n-            is.close();\n@@ -278,31 +273,0 @@\n-    static class CustomPolicy extends Policy {\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-        final PermissionCollection perms = new Permissions();\n-\n-        CustomPolicy(Permission... permissions) {\n-            java.util.Arrays.stream(permissions).forEach(perms::add);\n-\n-            \/\/ needed for the HTTP(S) server\n-            InetAddress loopback = InetAddress.getLoopbackAddress();\n-            InetSocketAddress serverBound = new InetSocketAddress(loopback,1024);\n-            perms.add(new SocketPermission(authority(serverBound) + \"-\", \"listen,resolve,accept\"));\n-            \/\/ needed by the test to reset the policy, per testX method\n-            perms.add(new SecurityPermission(\"setPolicy\"));\n-            \/\/ needed to shutdown the ThreadPoolExecutor ( used by the servers )\n-            perms.add(new RuntimePermission(\"modifyThread\"));\n-            \/\/ needed by the client code forHttpsURLConnection.setSSLSocketFactory\n-            perms.add(new RuntimePermission(\"setFactory\"));\n-        }\n-\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return perms;\n-        }\n-\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return perms;\n-        }\n-\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            return perms.implies(perm) || DEFAULT_POLICY.implies(domain, perm);\n-        }\n-    }\n","filename":"test\/jdk\/java\/net\/URLPermission\/URLTest.java","additions":62,"deletions":98,"binary":false,"changes":160,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,4 +26,4 @@\n- * @summary A simple smoke test of the HttpURLPermission mechanism, which checks\n- *          for either IOException (due to unknown host) or SecurityException\n- *          due to lack of permission to connect\n- * @run main\/othervm -Djava.security.manager=allow -Djdk.net.hosts.file=LookupTestHosts LookupTest\n+ * @summary A simple smoke test which checks URLPermission implies,\n+ *          and verify that HttpURLConnection either succeeds or throws\n+ *          IOException (due to unknown host).\n+ * @run main\/othervm -Djdk.net.hosts.file=LookupTestHosts LookupTest\n@@ -49,1 +49,0 @@\n-import java.security.CodeSource;\n@@ -53,2 +52,0 @@\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -59,2 +56,1 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-    static int port;\n+    static LookupTestPermisions permissions;\n@@ -72,0 +68,2 @@\n+            URLPermission permission = new URLPermission(url, \"GET\");\n+            if (!permissions.implies(permission)) throw new SecurityException(permission.toString());\n@@ -74,0 +72,1 @@\n+            System.err.println(\"Connection sucessful\");\n@@ -83,0 +82,2 @@\n+            } else {\n+                System.err.println(\"Got expected exception: \" + e);\n@@ -96,3 +97,2 @@\n-        if (throwsSecException || throwsIOException) {\n-            System.err.printf(\"was expecting a %s\\n\", throwsSecException\n-                    ? \"security exception\" : \"IOException\");\n+        if (throwsIOException) {\n+            System.err.printf(\"was expecting a %s\\n\", \"IOException\");\n@@ -117,0 +117,2 @@\n+        int port = server.getPort();\n+        permissions = new LookupTestPermisions(port);\n@@ -118,2 +120,0 @@\n-            Policy.setPolicy(new LookupTestPolicy());\n-            System.setSecurityManager(new SecurityManager());\n@@ -132,0 +132,1 @@\n+        private final int port;\n@@ -140,0 +141,4 @@\n+        int getPort() {\n+            return port;\n+        }\n+\n@@ -195,1 +200,1 @@\n-    static class LookupTestPolicy extends Policy {\n+    static class LookupTestPermisions  {\n@@ -198,1 +203,1 @@\n-        LookupTestPolicy() throws Exception {\n+        LookupTestPermisions(int port) {\n@@ -204,1 +209,0 @@\n-            \/\/perms.add(new PropertyPermission(\"java.io.tmpdir\", \"read\"));\n@@ -207,7 +211,0 @@\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return perms;\n-        }\n-\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return perms;\n-        }\n@@ -215,2 +212,2 @@\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            return perms.implies(perm) || DEFAULT_POLICY.implies(domain, perm);\n+        public boolean implies(Permission perm) {\n+            return perms.implies(perm);\n","filename":"test\/jdk\/java\/net\/URLPermission\/nstest\/LookupTest.java","additions":24,"deletions":27,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,0 @@\n- * @run testng\/othervm\/java.security.policy=AsFileDownloadTest.policy AsFileDownloadTest\n@@ -356,2 +355,2 @@\n-        if (System.getSecurityManager() == null && Files.exists(tempDir)) {\n-            \/\/ clean up before next run with security manager\n+        if (Files.exists(tempDir)) {\n+            \/\/ clean up\n","filename":"test\/jdk\/java\/net\/httpclient\/AsFileDownloadTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,72 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ for JTwork\/classes\/0\/test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"test.src.path\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\", \"read\";\n-};\n-\n-\/\/ for classes in JTwork\/\/classes\/0\/test\/jdk\/java\/net\/httpclient\/lib\/\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.io.FilePermission \"${user.dir}${\/}asFileDownloadTest.tmp.dir\", \"read,write\";\n-    permission java.io.FilePermission \"${user.dir}${\/}asFileDownloadTest.tmp.dir\/-\", \"read,write\";\n-\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http1\/afdt\",   \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/afdt\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/afdt\",   \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/afdt\", \"POST\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http1\/afdt\",   \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/afdt\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/afdt\",   \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/afdt\", \"POST\";\n-\n-\n-    \/\/ needed to grant permission to the HTTP\/2 server\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ needed to grant the HTTP servers\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/AsFileDownloadTest.policy","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=noPermissions.policy ConnectExceptionTest\n@@ -91,3 +90,0 @@\n-        } catch (SecurityException expectedIfSMIsSet) {\n-            out.println(\"Caught expected: \" + expectedIfSMIsSet);\n-            assertTrue(System.getSecurityManager() != null);\n@@ -112,3 +108,0 @@\n-        } catch (SecurityException expectedIfSMIsSet) {\n-            out.println(\"Caught expected: \" + expectedIfSMIsSet);\n-            assertTrue(System.getSecurityManager() != null);\n@@ -132,3 +125,0 @@\n-            } else if (t instanceof SecurityException) {\n-                out.println(\"Caught expected: \" + t);\n-                assertTrue(System.getSecurityManager() != null);\n@@ -158,3 +148,0 @@\n-            } else if (t instanceof SecurityException) {\n-                out.println(\"Caught expected: \" + t);\n-                assertTrue(System.getSecurityManager() != null);\n","filename":"test\/jdk\/java\/net\/httpclient\/ConnectExceptionTest.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n- * @run testng\/othervm\/java.security.policy=dependent.policy\n-  *        -Djdk.internal.httpclient.debug=true DependentActionsTest\n","filename":"test\/jdk\/java\/net\/httpclient\/DependentActionsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n- * @run testng\/othervm\/java.security.policy=dependent.policy\n-  *           -Djdk.internal.httpclient.debug=true DependentPromiseActionsTest\n@@ -505,9 +503,0 @@\n-            }            return;\n-        } else if (System.getSecurityManager() != null) {\n-            Optional<StackFrame> sf = WALKER.walk(s -> findFrame(s, \"PrivilegedRunnable\"));\n-            if (!sf.isPresent()) {\n-                failed.set(new RuntimeException(\"Dependant action does not have expected frame in \"\n-                        + Thread.currentThread()));\n-                return;\n-            } else {\n-                System.out.println(\"Found expected frame: \" + sf.get());\n@@ -515,0 +504,1 @@\n+            return;\n","filename":"test\/jdk\/java\/net\/httpclient\/DependentPromiseActionsTest.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,1 @@\n- *          works with changing permissions\n- *          policy 1: no custom permission\n- *          policy 2: custom permission for test classes\n- *          policy 3: custom permission for test classes and httpclient\n+ *          works as expected\n@@ -35,3 +32,1 @@\n- * @run testng\/othervm\/java.security.policy=FilePublisherPermsTest1.policy FilePublisherPermsTest\n- * @run testng\/othervm\/java.security.policy=FilePublisherPermsTest2.policy FilePublisherPermsTest\n- * @run testng\/othervm\/java.security.policy=FilePublisherPermsTest3.policy FilePublisherPermsTest\n+ * @run testng\/othervm FilePublisherPermsTest\n@@ -40,3 +35,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -55,2 +47,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n@@ -70,1 +60,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -129,20 +118,2 @@\n-\n-        if (System.getSecurityManager() != null) {\n-            changePerms(path.toString(), \"read,write,delete\");\n-            \/\/ Should not throw\n-            BodyPublisher bodyPublisher = BodyPublishers.ofFile(path);\n-            \/\/ Restrict permissions\n-            changePerms(path.toString(), \"delete\");\n-            try {\n-                BodyPublishers.ofFile(path);\n-                fail();\n-            } catch (SecurityException e) {\n-                out.println(\"Caught expected: \" + e);\n-            }\n-            try {\n-                send(uriString, bodyPublisher);\n-                fail();\n-            } catch (SecurityException e) {\n-                out.println(\"Caught expected: \" + e);\n-            }\n-        }\n+        BodyPublisher bodyPublisher = BodyPublishers.ofFile(path);\n+        send(uriString, bodyPublisher);\n@@ -190,31 +161,2 @@\n-        if (System.getSecurityManager() != null) {\n-            changePerms(path.toString(), \"read,write,delete\");\n-\n-            \/\/ Custom permission not sufficiently granted, expected to fail\n-            if (!policyFile.contains(\"FilePublisherPermsTest3\")) {\n-                try {\n-                    BodyPublishers.ofFile(path);\n-                    fail();\n-                } catch (SecurityException e) {\n-                    out.println(\"Caught expected: \" + e);\n-                    return;\n-                }\n-            } else {\n-                BodyPublisher bodyPublisher = BodyPublishers.ofFile(path);\n-                send(uriString, bodyPublisher);\n-                \/\/ Restrict permissions\n-                changePerms(path.toString(), \"delete\");\n-                try {\n-                    BodyPublishers.ofFile(path);\n-                    fail();\n-                } catch (SecurityException e) {\n-                    out.println(\"Caught expected: \" + e);\n-                }\n-                try {\n-                    send(uriString, bodyPublisher);\n-                    fail();\n-                } catch (SecurityException e) {\n-                    out.println(\"Caught expected: \" + e);\n-                }\n-            }\n-        }\n+        BodyPublisher bodyPublisher = BodyPublishers.ofFile(path);\n+        send(uriString, bodyPublisher);\n@@ -227,1 +169,0 @@\n-        changePerms(zipPath.toString(), \"read,write,delete\");\n@@ -237,1 +178,0 @@\n-        changePerms(path.toString(), \"read,write,delete\");\n@@ -259,30 +199,0 @@\n-    private void changePerms(String path, String actions) {\n-        Policy.setPolicy(new CustomPolicy(\n-                new FilePermission(path, actions)\n-        ));\n-    }\n-\n-    static class CustomPolicy extends Policy {\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-        final PermissionCollection perms = new Permissions();\n-\n-        CustomPolicy(Permission... permissions) {\n-            java.util.Arrays.stream(permissions).forEach(perms::add);\n-        }\n-\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return perms;\n-        }\n-\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return perms;\n-        }\n-\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            \/\/ Ignore any existing permissions for test files\n-            return perm.getName().equals(defaultFsPath.toString())\n-                    || perm.getName().equals(zipFsPath.toString())\n-                    ? perms.implies(perm)\n-                    : perms.implies(perm) || DEFAULT_POLICY.implies(domain, perm);\n-        }\n-    }\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherPermsTest.java","additions":7,"deletions":97,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -1,87 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ for JTwork\/classes\/0\/test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"test.src.path\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\", \"read\";\n-};\n-\n-\/\/ for jdk\/httpclient\/test\/lib\/* classes\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"GET\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"GET\";\n-\n-    \/\/ file permissions\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultFile.txt\", \"read,write,delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}file.zip\", \"read,write,delete\";\n-\n-    \/\/ needed to access FileSystemProvider\n-    permission java.lang.RuntimePermission \"fileSystemProvider\";\n-\n-    \/\/ for permission changes\n-    permission java.security.SecurityPermission \"getPolicy\";\n-    permission java.security.SecurityPermission \"setPolicy\";\n-\n-    \/\/ needed to grant permission to the HTTP\/2 server\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ needed to grant the HTTP servers\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherPermsTest1.policy","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -1,92 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ same as FilePublisherPermsTest1.policy with custom permission for test classes\n-\n-\/\/ for JTwork\/classes\/0\/test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"test.src.path\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\", \"read\";\n-};\n-\n-\/\/ for jdk\/httpclient\/test\/lib\/* classes\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"GET\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"GET\";\n-\n-    \/\/ file permissions\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultFile.txt\", \"read,write,delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}file.zip\", \"read,write,delete\";\n-\n-    \/\/ custom permission for testing\n-    permission java.lang.RuntimePermission \"customPermission\";\n-\n-    \/\/ needed to access FileSystemProvider\n-    permission java.lang.RuntimePermission \"fileSystemProvider\";\n-\n-    \/\/ for permission changes\n-    permission java.security.SecurityPermission \"getPolicy\";\n-    permission java.security.SecurityPermission \"setPolicy\";\n-\n-    \/\/ needed to grant permission to the HTTP\/2 server\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ needed to grant the HTTP servers\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherPermsTest2.policy","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -1,95 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ same as FilePublisherPermsTest1.policy with additional custom permission\n-\/\/ for test classes and HttpClient (in java.net.http)\n-\n-grant codeBase \"jrt:\/java.net.http\" {\n-    permission java.lang.RuntimePermission \"customPermission\";\n-};\n-\n-\/\/ for JTwork\/classes\/0\/test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"test.src.path\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\", \"read\";\n-};\n-\n-\/\/ for jdk\/httpclient\/test\/lib\/* classes\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"GET\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"GET\";\n-\n-    \/\/ file permissions\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultFile.txt\", \"read,write,delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}file.zip\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"customPermission\";\n-\n-    \/\/ needed to access FileSystemProvider\n-    permission java.lang.RuntimePermission \"fileSystemProvider\";\n-\n-    \/\/ for permission changes\n-    permission java.security.SecurityPermission \"getPolicy\";\n-    permission java.security.SecurityPermission \"setPolicy\";\n-\n-    \/\/ needed to grant permission to the HTTP\/2 server\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ needed to grant the HTTP servers\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherPermsTest3.policy","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run testng\/othervm\/java.security.policy=FilePublisherTest.policy FilePublisherTest\n@@ -36,3 +35,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -62,1 +58,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ for JTwork\/classes\/0\/test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"test.src.path\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\", \"read\";\n-};\n-\n-\/\/ for JTwork\/classes\/0\/java\/net\/httpclient\/http2\/server\/*\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"GET\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"GET\";\n-\n-    \/\/ file permissions\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultFile.txt\", \"read,write,delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}file.zip\", \"read,write,delete\";\n-\n-    \/\/ needed to grant permission to the HTTP\/2 server\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ needed to grant the HTTP servers\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherTest.policy","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,7 +70,0 @@\n- * @run testng\/othervm\/java.security.policy=httpclient-localaddr-security.policy\n- *      -Djdk.httpclient.HttpClient.log=frames,ssl,requests,responses,errors\n- *      -Djdk.internal.httpclient.debug=true\n- *      -Dsun.net.httpserver.idleInterval=50000\n- *      -Djdk.tracePinnedThreads=full\n- *      HttpClientLocalAddrTest\n- *\n@@ -182,1 +175,1 @@\n-        final List<Object[]> testMethodParams = new ArrayList();\n+        final List<Object[]> testMethodParams = new ArrayList<>();\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientLocalAddrTest.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n- * @run testng\/othervm\/java.security.policy=ofFileDownload.policy BodyHandlerOfFileDownloadTest\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/BodyHandlerOfFileDownloadTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- *          when SecurityManager is enabled\n@@ -41,1 +40,0 @@\n- * @run testng\/othervm\/java.security.policy=ofFile.policy BodyHandlerOfFileTest\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/BodyHandlerOfFileTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- *          when SecurityManager is enabled\n@@ -40,1 +39,0 @@\n- * @run testng\/othervm\/java.security.policy=ofFile.policy BodySubscriberOfFileTest\n@@ -70,2 +68,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -197,5 +193,1 @@\n-            \/\/ Retrieve handler with caller's privileges enabled\n-            PrivilegedAction<BodySubscriber<Path>> action = () ->\n-                    BodySubscribers.ofFile(path);\n-            BodyHandler<Path> handler = respInfo ->\n-                    AccessController.doPrivileged(action);\n+            BodyHandler<Path> handler = respInfo -> BodySubscribers.ofFile(path);\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/BodySubscriberOfFileTest.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,95 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ for test\/lib library classes\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"java.vm.info\", \"read\";\n-    permission java.util.PropertyPermission \"jdk.debug\", \"read\";\n-    permission java.util.PropertyPermission \"sun.arch.data.model\", \"read\";\n-    permission java.util.PropertyPermission \"sun.management.compiler\", \"read\";\n-    permission java.util.PropertyPermission \"test.jdk\", \"read\";\n-    permission java.util.PropertyPermission \"test.src.path\", \"read\";\n-    permission java.util.PropertyPermission \"user.name\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\", \"read\";\n-\n-    \/\/ file permissions for test files\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultFile.txt\", \"read,delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}file.zip\", \"delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultDir\", \"delete\";\n-};\n-\n-\/\/ for jdk\/httpclient\/test\/lib\/* classes\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"GET\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"GET\";\n-\n-    \/\/ file permissions for test files\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultFile.txt\", \"read,write,delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}file.zip\", \"read,write\";\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultDir\", \"read,write,delete\";\n-\n-    \/\/ file permission required by ZipFileSystem for temporary file creation\n-    permission java.io.FilePermission \"${user.dir}${\/}*\", \"read,write,delete\";\n-\n-    \/\/ needed to grant permission to the HTTP\/2 server\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ needed to grant the HTTP servers\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/ofFile.policy","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -1,92 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ for test\/lib library classes\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"java.vm.info\", \"read\";\n-    permission java.util.PropertyPermission \"jdk.debug\", \"read\";\n-    permission java.util.PropertyPermission \"sun.arch.data.model\", \"read\";\n-    permission java.util.PropertyPermission \"sun.management.compiler\", \"read\";\n-    permission java.util.PropertyPermission \"test.jdk\", \"read\";\n-    permission java.util.PropertyPermission \"test.src.path\", \"read\";\n-    permission java.util.PropertyPermission \"user.name\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\", \"read\";\n-\n-    \/\/ file permissions for test files\n-    permission java.io.FilePermission \"${user.dir}${\/}file.zip\", \"delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultDir\", \"read,delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultDir\/*\", \"read,delete\";\n-};\n-\n-\/\/ for jdk\/httpclient\/test\/lib\/* classes\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/echo\", \"GET\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/http1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/echo\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/echo\", \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/echo\", \"GET\";\n-\n-    \/\/ file permissions for test files\n-    permission java.io.FilePermission \"${user.dir}${\/}file.zip\", \"read,write\";\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultDir\", \"read,write,delete\";\n-    permission java.io.FilePermission \"${user.dir}${\/}defaultDir\/*\", \"read,write,delete\";\n-\n-    \/\/ needed to grant permission to the HTTP\/2 server\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ needed to grant the HTTP servers\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/httpclient\/PathSubscriber\/ofFileDownload.policy","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,3 +37,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -74,1 +71,0 @@\n- * @run testng\/othervm\/java.security.policy=RequestBodyTest.policy RequestBodyTest\n@@ -334,5 +330,3 @@\n-                    PrivilegedExceptionAction<FileInputStream> pa =\n-                            () -> new FileInputStream(file.toFile());\n-                    return AccessController.doPrivileged(pa);\n-                } catch (PrivilegedActionException x) {\n-                    throw new UncheckedIOException((IOException)x.getCause());\n+                    return new FileInputStream(file.toFile());\n+                } catch (IOException x) {\n+                    throw new UncheckedIOException(x);\n","filename":"test\/jdk\/java\/net\/httpclient\/RequestBodyTest.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,62 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ for JTwork\/\/classes\/0\/test\/lib\/jdk\/test\/lib\/util\/FileUtils.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"RequestBodyTest.tmp\", \"read,delete\";\n-};\n-\n-\/\/ for JTwork\/classes\/0\/test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"test.src.path\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\", \"read\";\n-};\n-\n-\/\/ for jdk\/httpclient\/test\/lib\/* classes\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}files${\/}smallfile.txt\", \"read\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}files${\/}notsobigfile.txt\", \"read\";\n-    permission java.io.FilePermission \"RequestBodyTest.tmp\", \"read,write,delete\";\n-\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/echo\/foo\",   \"POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/echo\/foo\",  \"POST\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/echo\/foo\",   \"POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/echo\/foo\",  \"POST\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ needed to grant the HTTP server\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/RequestBodyTest.policy","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ for JTwork\/classes\/0\/test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"test.src.path\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\", \"read\";\n-};\n-\n-\/\/ for jdk\/httpclient\/test\/lib\/* classes\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"listen,accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"listen,accept,resolve\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.io.FilePermission \"${user.dir}${\/}asFileDownloadTest.tmp.dir\", \"read,write\";\n-    permission java.io.FilePermission \"${user.dir}${\/}asFileDownloadTest.tmp.dir\/-\", \"read,write\";\n-\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http1\/-\",   \"GET,POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https1\/-\", \"GET,POST\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/http2\/-\",   \"GET,POST\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/https2\/-\", \"GET,POST\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http1\/-\",   \"GET,POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https1\/-\", \"GET,POST\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/http2\/-\",   \"GET,POST\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/https2\/-\", \"GET,POST\";\n-\n-    \/\/ needed to grant permission to the HTTP\/2 server\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ needed to grant the HTTP servers\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"listen,accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"listen,accept,resolve\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-\n-    \/\/ Permission for DependentActionsTest\n-    permission java.lang.RuntimePermission \"getStackWalkerWithClassReference\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/dependent.policy","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ for JTwork\/classes\/0\/test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.class and\n-\/\/ JTwork\/classes\/0\/test\/lib\/jdk\/test\/lib\/net\/IPSupport.class\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/lib\/-\" {\n-    permission java.util.PropertyPermission \"test.src.path\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\", \"read\";\n-    permission java.util.PropertyPermission \"java.net.preferIPv4Stack\", \"read\";\n-    permission java.util.PropertyPermission \"java.net.preferIPv6Addresses\", \"read\";\n-};\n-\n-\/\/ for classes in JTwork\/\/classes\/0\/test\/jdk\/java\/net\/httpclient\/lib\/\n-grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/jdk\/java\/net\/httpclient\/lib\/-\" {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"listen,accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"listen,accept,resolve\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/-\" {\n-\n-    \/\/ test issues HTTP GET requests\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/-\",   \"GET\";\n-    permission java.net.URLPermission \"https:\/\/127.0.0.1:*\/-\", \"GET\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/-\",   \"GET\";\n-    permission java.net.URLPermission \"https:\/\/[::1]:*\/-\", \"GET\";\n-\n-    \/\/ needed to grant permission to the HTTP\/2 server\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.common\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.frame\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.net.http.hpack\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-\n-    \/\/ for HTTP\/1.1 server logging\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ needed to grant the HTTP servers\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"accept,resolve\";\n-    permission java.net.SocketPermission \"[::1]:*\", \"accept,resolve\";\n-\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/httpclient-localaddr-security.policy","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,24 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-grant codeBase \"file:${test.classes}\/*\" { };\n","filename":"test\/jdk\/java\/net\/httpclient\/noPermissions.policy","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy: 0\n-\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n-\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/0.policy","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 1\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:${port.number}\/files\/foo.txt\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:${port.number}\/files\/foo.txt\", \"GET\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/1.policy","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 10\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:${port.number}\/files\/foo.txt\", \"GET:*\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:${port.number}\/files\/foo.txt\", \"GET:*\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/10.policy","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 11\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:${port.number}\/files\/foo.txt\", \"GET:*\";\n-    permission java.net.URLPermission \"socket:\/\/127.0.0.1:${port.number1}\", \"CONNECT\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:${port.number}\/files\/foo.txt\", \"GET:*\";\n-    permission java.net.URLPermission \"socket:\/\/[::1]:${port.number1}\", \"CONNECT\";\n-    \/\/ this specific test uses a proxy configured to loopback address. the httpclient implementation\n-    \/\/ during permissions check uses the InetAddress.hostString() API which can return resolved\n-    \/\/ hostname, so we use include a permission for \"localhost\" to cover that case too\n-    permission java.net.URLPermission \"socket:\/\/localhost:${port.number1}\", \"CONNECT\";\n-};\n-\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/11.policy","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 11\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:${port.number}\/files\/foo.txt\", \"GET:*\";\n-    permission java.net.URLPermission \"socket:\/\/127.0.0.1:${port.number1}\", \"CONNECT\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:${port.number}\/files\/foo.txt\", \"GET:*\";\n-    permission java.net.URLPermission \"socket:\/\/[::1]:${port.number1}\", \"CONNECT\";\n-    \/\/ this specific test uses a proxy configured to loopback address. the httpclient implementation\n-    \/\/ during permissions check uses the InetAddress.hostString() API which can return resolved\n-    \/\/ hostname, so we use include a permission for \"localhost\" to cover that case too\n-    permission java.net.URLPermission \"socket:\/\/localhost:${port.number1}\", \"CONNECT\";\n-};\n-\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/12.policy","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 14\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/files\/foo.txt\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/files\/foo.txt\", \"GET\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/14.policy","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 11\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/files\/foo.txt\", \"GET:*\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/files\/foo.txt\", \"GET:*\";\n-\n-    \/\/ Test checks for this explicitly\n-    permission java.lang.RuntimePermission \"foobar\";\n-};\n-\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/15.policy","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 16: Test tries to set Host header to localhost:123 but there is no permission\n-\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:${port.number}\/files\/foo.txt\", \"GET:Host\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:${port.number}\/files\/foo.txt\", \"GET:Host\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/16.policy","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 17. Grant permission to port 123 (no connect attempt is actually made)\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:${port.number}\/files\/foo.txt\", \"GET:Host\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:${port.number}\/files\/foo.txt\", \"GET:Host\";\n-    permission java.net.URLPermission \"http:\/\/foohost:123\/files\/foo.txt\", \"GET:Host\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/17.policy","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 2\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/files\/*\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/files\/*\", \"GET\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/2.policy","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 3\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/redirect\/foo.txt\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/redirect\/foo.txt\", \"GET\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/3.policy","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 4\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/redirect\/foo.txt\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/redirect\/bar.txt\", \"GET\";\n-    \/\/ ipv6\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/redirect\/foo.txt\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/redirect\/bar.txt\", \"GET\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/4.policy","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 5\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/redirect\/bar.txt\", \"GET\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/redirect\/bar.txt\", \"GET\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/5.policy","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 6\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/files\/foo.txt\", \"POST\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/files\/foo.txt\", \"POST\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/6.policy","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 7\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/files\/foo.txt\", \"GET:X-Bar\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/files\/foo.txt\", \"GET:X-Bar\";\n-\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/7.policy","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 8\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/files\/foo.txt\", \"GET:X-Foo1,X-Foo,X-Bar\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/files\/foo.txt\", \"GET:X-Foo1,X-Foo,X-Bar\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/8.policy","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ Policy 9\n-grant {\n-    \/\/ permissions common to all tests\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen\";\n-    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-\n-\n-    \/\/ permissions specific to this test\n-    permission java.net.URLPermission \"http:\/\/127.0.0.1:*\/files\/foo.txt\", \"GET:*\";\n-    permission java.net.URLPermission \"http:\/\/[::1]:*\/files\/foo.txt\", \"GET:*\";\n-};\n-\n-\/\/ For proxy only. Not being tested\n-grant codebase \"file:${test.classes}\/proxydir\/-\" {\n-    permission java.net.SocketPermission \"127.0.0.1:1024-\", \"accept,listen,connect,resolve\";\n-    permission java.net.SocketPermission \"[::1]:1024-\", \"accept,listen,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/9.policy","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,172 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8087112\n- * @library \/test\/lib\n- * @modules java.net.http\n- *          java.logging\n- *          jdk.httpserver\n- * @build jdk.test.lib.net.SimpleSSLContext jdk.test.lib.Utils\n- * @compile ..\/..\/..\/..\/com\/sun\/net\/httpserver\/LogFilter.java\n- * @compile ..\/..\/..\/..\/com\/sun\/net\/httpserver\/FileServerHandler.java\n- * @compile ..\/ProxyServer.java\n- * @build Security\n- *\n- * @run main\/othervm Driver\n- *\/\n-\n-\/**\n- * driver required for allocating free portnumbers and putting this number\n- * into security policy file used in some tests.\n- *\n- * The tests are in Security.java and port number supplied in -Dport.number\n- * and -Dport.number1 for tests that require a second free port\n- *\/\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.process.ProcessTools;\n-\n-\/**\n- * Driver for tests\n- *\/\n-public class Driver {\n-    \/\/ change the default value to \"true\" to get the subprocess traces.\n-    final static boolean DEBUG = Boolean.parseBoolean(System.getProperty(\"test.debug\", \"true\"));\n-\n-    public static void main(String[] args) throws Throwable {\n-        System.out.println(\"Starting Driver\");\n-        runtest(\"1.policy\", \"1\");\n-        runtest(\"10.policy\", \"10\");\n-        runtest(\"11.policy\", \"11\");\n-        runtest(\"12.policy\", \"12\");\n-        runtest(\"16.policy\", \"16\", \"-Djdk.httpclient.allowRestrictedHeaders=Host\");\n-        runtest(\"17.policy\", \"17\", \"-Djdk.httpclient.allowRestrictedHeaders=Host\");\n-        System.out.println(\"DONE\");\n-    }\n-\n-    static final Path CWD = Paths.get(\".\");\n-\n-    static class Logger extends Thread {\n-        private final OutputStream ps;\n-        private final InputStream stdout;\n-\n-        Logger(String cmdLine, Process p) throws IOException {\n-            super();\n-            setDaemon(true);\n-            cmdLine = \"Command line = [\" + cmdLine + \"]\\n\";\n-            stdout = p.getInputStream();\n-            File f = Files.createTempFile(CWD, \"debug\", \".txt\").toFile();\n-            ps = new FileOutputStream(f);\n-            ps.write(cmdLine.getBytes());\n-            ps.flush();\n-            if (DEBUG) {\n-                System.out.print(cmdLine);\n-                System.out.flush();\n-            }\n-        }\n-\n-        public void run() {\n-            try {\n-                byte[] buf = new byte[128];\n-                int c;\n-                while ((c = stdout.read(buf)) != -1) {\n-                    if (DEBUG) {\n-                        System.out.write(buf, 0, c);\n-                        System.out.flush();\n-                    }\n-                    ps.write(buf, 0, c);\n-                    ps.flush();\n-                }\n-                ps.close();\n-            } catch (Throwable e) {\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-\n-    public static void runtest(String policy, String testnum) throws Throwable {\n-        runtest(policy, testnum, null);\n-    }\n-\n-\n-    public static void runtest(String policy, String testnum, String addProp) throws Throwable {\n-        String testJdk = System.getProperty(\"test.jdk\", \"?\");\n-        String testSrc = System.getProperty(\"test.src\", \"?\");\n-        String testClassPath = System.getProperty(\"test.class.path\", \"?\");\n-        String testClasses = System.getProperty(\"test.classes\", \"?\");\n-        String sep = System.getProperty(\"file.separator\", \"?\");\n-        int retval = 10; \/\/ 10 is special exit code denoting a bind error\n-                         \/\/ in which case, we retry\n-        while (retval == 10) {\n-            List<String> cmd = new ArrayList<>();\n-            cmd.add(\"-ea\");\n-            cmd.add(\"-esa\");\n-            cmd.add(\"-Dtest.jdk=\" + testJdk);\n-            cmd.add(\"-Dtest.src=\" + testSrc);\n-            cmd.add(\"-Dtest.classes=\" + testClasses);\n-            cmd.add(\"-Djava.security.manager\");\n-            cmd.add(\"-Djava.security.policy=\" + testSrc + sep + policy);\n-            cmd.add(\"-Dport.number=\" + Integer.toString(Utils.getFreePort()));\n-            cmd.add(\"-Dport.number1=\" + Integer.toString(Utils.getFreePort()));\n-            cmd.add(\"-Djdk.httpclient.HttpClient.log=all,frames:all\");\n-            if (addProp != null) {\n-                cmd.add(addProp);\n-            }\n-            cmd.add(\"-cp\");\n-            cmd.add(testClassPath);\n-            cmd.add(\"Security\");\n-            cmd.add(testnum);\n-\n-            ProcessBuilder processBuilder = ProcessTools.createTestJavaProcessBuilder(cmd)\n-                .redirectOutput(ProcessBuilder.Redirect.PIPE)\n-                .redirectErrorStream(true);\n-\n-            String cmdLine = cmd.stream().collect(Collectors.joining(\" \"));\n-            long start = System.currentTimeMillis();\n-            Process child = processBuilder.start();\n-            Logger log = new Logger(cmdLine, child);\n-            log.start();\n-            retval = child.waitFor();\n-            long elapsed = System.currentTimeMillis() - start;\n-            System.out.println(\"Security \" + testnum\n-                               + \": retval = \" + retval\n-                               + \", duration=\" + elapsed+\" ms\");\n-        }\n-        if (retval != 0) {\n-            Thread.sleep(2000);\n-            throw new RuntimeException(\"Non zero return value\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/Driver.java","additions":0,"deletions":172,"binary":false,"changes":172,"status":"deleted"},{"patch":"@@ -1,554 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8087112\n- * @modules java.net.http\n- *          java.logging\n- *          jdk.httpserver\n- * @library \/test\/lib\n- * @build jdk.test.lib.net.SimpleSSLContext\n- * @compile ..\/..\/..\/..\/com\/sun\/net\/httpserver\/LogFilter.java\n- * @compile ..\/..\/..\/..\/com\/sun\/net\/httpserver\/FileServerHandler.java\n- * @compile ..\/ProxyServer.java\n- *\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=0.policy Security 0\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=2.policy Security 2\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=3.policy Security 3\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=4.policy Security 4\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=5.policy Security 5\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=6.policy Security 6\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=7.policy Security 7\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=8.policy Security 8\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=9.policy Security 9\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=0.policy Security 13\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=14.policy Security 14\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/policy=15.policy -Djava.security.debug=access:domain,failure Security 15\n- *\/\n-\n-\/\/ Tests 1, 10, 11 and 12 executed from Driver\n-\n-import com.sun.net.httpserver.Headers;\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsServer;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.File;\n-import java.io.OutputStream;\n-import java.lang.reflect.Constructor;\n-import java.net.BindException;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.ProxySelector;\n-import java.net.URI;\n-import java.net.URLClassLoader;\n-import java.net.URL;\n-import java.net.http.HttpHeaders;\n-import java.net.http.HttpClient;\n-import java.net.http.HttpRequest;\n-import java.net.http.HttpResponse;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.ByteBuffer;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.CompletionException;\n-import java.util.concurrent.CompletionStage;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Flow;\n-import java.util.logging.ConsoleHandler;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import java.lang.reflect.InvocationTargetException;\n-import static java.net.http.HttpResponse.BodyHandlers.ofString;\n-\n-\/**\n- * Security checks test\n- *\/\n-public class Security {\n-\n-    static HttpServer s1;\n-    static ExecutorService executor;\n-    static int port, proxyPort;\n-    static HttpClient client;\n-    static String httproot, fileuri, fileroot, redirectroot;\n-    static List<HttpClient> clients = new LinkedList<>();\n-    static URI uri;\n-    static String serverAuthority;\n-\n-    interface ThrowingRunnable { void run() throws Throwable; }\n-\n-    static class TestAndResult {\n-        private final ThrowingRunnable runnable;\n-        private final boolean expectSecurityException;\n-\n-        TestAndResult(boolean expectSecurityException, ThrowingRunnable runnable) {\n-            this.expectSecurityException = expectSecurityException;\n-            this.runnable = runnable;\n-        }\n-\n-        static TestAndResult of(boolean expectSecurityException,\n-                                ThrowingRunnable runnable) {\n-            return new TestAndResult(expectSecurityException, runnable);\n-        }\n-\n-        void runWithPolicy(String policy) {\n-            System.out.println(\"Using policy file: \" + policy);\n-            try {\n-                runnable.run();\n-                if (expectSecurityException) {\n-                    String msg = \"FAILED: expected security exception not thrown\";\n-                    System.out.println(msg);\n-                    throw new RuntimeException(msg);\n-                }\n-                System.out.println (policy + \" succeeded as expected\");\n-            } catch (BindException e) {\n-                System.exit(10);\n-            } catch (SecurityException e) {\n-                if (!expectSecurityException) {\n-                    System.out.println(\"UNEXPECTED security Exception: \" + e);\n-                    throw new RuntimeException(\"UNEXPECTED security Exception\", e);\n-                }\n-                System.out.println(policy + \" threw SecurityException as expected: \" + e);\n-            } catch (Throwable t) {\n-                throw new AssertionError(t);\n-            }\n-        }\n-    }\n-\n-    static TestAndResult[] tests = createTests();\n-    static String testclasses;\n-    static File subdir;\n-\n-    \/**\n-     * The ProxyServer class is compiled by jtreg, but we want to\n-     * move it so it is not on the application claspath. We want to\n-     * load it through a separate classloader so that it has a separate\n-     * protection domain and security permissions.\n-     *\n-     * Its permissions are in the second grant block in each policy file\n-     *\/\n-    static void setupProxy() throws IOException, ClassNotFoundException, NoSuchMethodException {\n-        testclasses = System.getProperty(\"test.classes\");\n-        subdir = new File (testclasses, \"proxydir\");\n-        subdir.mkdir();\n-\n-        movefile(\"ProxyServer.class\");\n-        movefile(\"ProxyServer$Connection.class\");\n-        movefile(\"ProxyServer$1.class\");\n-\n-        URL url = subdir.toURI().toURL();\n-        System.out.println(\"URL for class loader = \" + url);\n-        URLClassLoader urlc = new URLClassLoader(new URL[] {url});\n-        proxyClass = Class.forName(\"ProxyServer\", true, urlc);\n-        proxyConstructor = proxyClass.getConstructor(Integer.class, Boolean.class);\n-    }\n-\n-    static void movefile(String f) throws IOException {\n-        Path src = Paths.get(testclasses, f);\n-        Path dest = subdir.toPath().resolve(f);\n-        if (!dest.toFile().exists()) {\n-            System.out.printf(\"moving %s to %s\\n\", src.toString(), dest.toString());\n-            Files.move(src, dest,  StandardCopyOption.REPLACE_EXISTING);\n-        } else if (src.toFile().exists()) {\n-            System.out.printf(\"%s exists, deleting %s\\n\", dest.toString(), src.toString());\n-            Files.delete(src);\n-        } else {\n-            System.out.printf(\"NOT moving %s to %s\\n\", src.toString(), dest.toString());\n-        }\n-    }\n-\n-    static Object createProxy(int port, boolean b) throws Throwable {\n-        try {\n-            return proxyConstructor.newInstance(port, b);\n-        } catch (InvocationTargetException e) {\n-            throw e.getTargetException();\n-        }\n-    }\n-\n-    static Class<?> proxyClass;\n-    static Constructor<?> proxyConstructor;\n-\n-    static TestAndResult[] createTests() {\n-        return new TestAndResult[] {\n-            \/\/ (0) policy does not have permission for file. Should fail\n-            TestAndResult.of(true, () -> { \/\/ Policy 0\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u).GET().build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (1) policy has permission for file URL\n-            TestAndResult.of(false, () -> { \/\/Policy 1\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u).GET().build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (2) policy has permission for all file URLs under \/files\n-            TestAndResult.of(false, () -> { \/\/ Policy 2\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u).GET().build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (3) policy has permission for first URL but not redirected URL\n-            TestAndResult.of(true, () -> { \/\/ Policy 3\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/redirect\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u).GET().build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (4) policy has permission for both first URL and redirected URL\n-            TestAndResult.of(false, () -> { \/\/ Policy 4\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/redirect\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u).GET().build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (5) policy has permission for redirected but not first URL\n-            TestAndResult.of(true, () -> { \/\/ Policy 5\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/redirect\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u).GET().build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (6) policy has permission for file URL, but not method\n-            TestAndResult.of(true, () -> { \/\/Policy 6\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u).GET().build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (7) policy has permission for file URL, method, but not header\n-            TestAndResult.of(true, () -> { \/\/Policy 7\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u)\n-                                                 .header(\"X-Foo\", \"bar\")\n-                                                 .GET()\n-                                                 .build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (8) policy has permission for file URL, method and header\n-            TestAndResult.of(false, () -> { \/\/Policy 8\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u)\n-                                                 .header(\"X-Foo\", \"bar\")\n-                                                 .GET()\n-                                                 .build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (9) policy has permission for file URL, method and header\n-            TestAndResult.of(false, () -> { \/\/Policy 9\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u)\n-                                                 .headers(\"X-Foo\", \"bar\", \"X-Bar\", \"foo\")\n-                                                 .GET()\n-                                                 .build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (10) policy has permission for destination URL but not for proxy\n-            TestAndResult.of(true, () -> { \/\/Policy 10\n-                directProxyTest(proxyPort, true);\n-            }),\n-            \/\/ (11) policy has permission for both destination URL and proxy\n-            TestAndResult.of(false, () -> { \/\/Policy 11\n-                directProxyTest(proxyPort, true);\n-            }),\n-            \/\/ (12) policy has permission for both destination URL and proxy\n-            TestAndResult.of(true, () -> { \/\/Policy 12 ( 11 & 12 are the same )\n-                directProxyTest(proxyPort, false);\n-            }),\n-            \/\/ (13) async version of test 0\n-            TestAndResult.of(true, () -> { \/\/ Policy 0\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u).GET().build();\n-                try {\n-                    HttpResponse<?> response = client.sendAsync(request, ofString()).get();\n-                    System.out.println(\"Received response:\" + response);\n-                } catch (ExecutionException e) {\n-                    if (e.getCause() instanceof SecurityException) {\n-                        throw (SecurityException)e.getCause();\n-                    } else {\n-                        throw new RuntimeException(e);\n-                    }\n-                }\n-            }),\n-            \/\/ (14) async version of test 1\n-            TestAndResult.of(false, () -> { \/\/Policy 1\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u).GET().build();\n-                try {\n-                    HttpResponse<?> response = client.sendAsync(request, ofString()).get();\n-                    System.out.println(\"Received response:\" + response);\n-                } catch (ExecutionException e) {\n-                    if (e.getCause() instanceof SecurityException se) {\n-                        throw se;\n-                    } else {\n-                        throw new RuntimeException(e);\n-                    }\n-                }\n-            }),\n-            \/\/ (15) check that user provided unprivileged code running on a worker\n-            \/\/      thread does not gain ungranted privileges.\n-            TestAndResult.of(true, () -> { \/\/Policy 12\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u).GET().build();\n-                HttpResponse.BodyHandler<String> sth = ofString();\n-\n-                CompletableFuture<HttpResponse<String>> cf =\n-                    client.sendAsync(request, new HttpResponse.BodyHandler<String>() {\n-                        @Override\n-                        public HttpResponse.BodySubscriber<String> apply(HttpResponse.ResponseInfo rinfo) {\n-                            final HttpResponse.BodySubscriber<String> stproc = sth.apply(rinfo);\n-                            return new HttpResponse.BodySubscriber<String>() {\n-                                @Override\n-                                public CompletionStage<String> getBody() {\n-                                    return stproc.getBody();\n-                                }\n-                                @Override\n-                                public void onNext(List<ByteBuffer> item) {\n-                                    SecurityManager sm = System.getSecurityManager();\n-                                    \/\/ should succeed.\n-                                    sm.checkPermission(new RuntimePermission(\"foobar\"));\n-                                    \/\/ do some mischief here\n-                                    System.setSecurityManager(null);\n-                                    System.setSecurityManager(sm);\n-                                    \/\/ problem if we get this far\n-                                    stproc.onNext(item);\n-                                }\n-                                @Override\n-                                public void onSubscribe(Flow.Subscription subscription) {\n-                                    stproc.onSubscribe(subscription);\n-                                }\n-                                @Override\n-                                public void onError(Throwable throwable) {\n-                                    stproc.onError(throwable);\n-                                }\n-                                @Override\n-                                public void onComplete() {\n-                                    stproc.onComplete();\n-                                }\n-                            };\n-                        }\n-                    }\n-                );\n-                try {\n-                    HttpResponse<String> response = cf.join();\n-                    System.out.println(\"Received response:\" + response);\n-                } catch (CompletionException e) {\n-                    Throwable t = e.getCause();\n-                    if (t instanceof SecurityException se)\n-                        throw se;\n-                    else if ((t instanceof IOException)\n-                              && (t.getCause() instanceof SecurityException se))\n-                        throw se;\n-                    else\n-                        throw new RuntimeException(t);\n-                }\n-            }),\n-            \/\/ (16) allowed to set Host header but does not have permission\n-            TestAndResult.of(true, () -> { \/\/Policy 16\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u)\n-                        .header(\"Host\", \"foohost:123\")\n-                        .GET().build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            }),\n-            \/\/ (17) allowed to set Host header and does have permission\n-            TestAndResult.of(false, () -> { \/\/Policy 17\n-                URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-                HttpRequest request = HttpRequest.newBuilder(u)\n-                        .header(\"Host\", \"foohost:123\")\n-                        .GET().build();\n-                HttpResponse<?> response = client.send(request, ofString());\n-                System.out.println(\"Received response:\" + response);\n-            })\n-        };\n-    }\n-\n-    private static void directProxyTest(int proxyPort, boolean samePort)\n-        throws IOException, InterruptedException\n-    {\n-        System.out.println(\"proxyPort:\" + proxyPort + \", samePort:\" + samePort);\n-\n-        int p = proxyPort;\n-        if (samePort) {\n-            Object proxy;\n-            try {\n-                proxy = createProxy(p, true);\n-            } catch (BindException e) {\n-                System.out.println(\"Bind failed\");\n-                throw e;\n-            } catch (Throwable ee) {\n-                throw new RuntimeException(ee);\n-            }\n-        } else {\n-            while (p == proxyPort || p == port) {\n-                \/\/ avoid ports that may be granted permission\n-                p++;\n-                if (p > 65535) {\n-                    p = 32000; \/\/ overflow\n-                }\n-            }\n-        }\n-        System.out.println(\"Proxy port, p:\" + p);\n-\n-        InetSocketAddress addr = new InetSocketAddress(InetAddress.getLoopbackAddress(), p);\n-        HttpClient cl = HttpClient.newBuilder()\n-                                    .proxy(ProxySelector.of(addr))\n-                                    .build();\n-        clients.add(cl);\n-\n-        URI u = URI.create(\"http:\/\/\" + serverAuthority + \"\/files\/foo.txt\");\n-        HttpRequest request = HttpRequest.newBuilder(u)\n-                                         .headers(\"X-Foo\", \"bar\", \"X-Bar\", \"foo\")\n-                                         .build();\n-        HttpResponse<?> response = cl.send(request, ofString());\n-        System.out.println(\"Received response:\" + response);\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        try {\n-            initServer();\n-            setupProxy();\n-        } catch (BindException e) {\n-            System.exit(10);\n-        }\n-        fileroot = System.getProperty(\"test.src\")+ \"\/docs\";\n-        int testnum = Integer.parseInt(args[0]);\n-        String policy = args[0];\n-\n-        client = HttpClient.newBuilder()\n-                           .followRedirects(HttpClient.Redirect.ALWAYS)\n-                           .build();\n-\n-        clients.add(client);\n-\n-        try {\n-            TestAndResult tr = tests[testnum];\n-            tr.runWithPolicy(policy);\n-        } finally {\n-            s1.stop(0);\n-            executor.shutdownNow();\n-        }\n-    }\n-\n-    public static void initServer() throws Exception {\n-        String portstring = System.getProperty(\"port.number\");\n-        port = portstring != null ? Integer.parseInt(portstring) : 0;\n-        portstring = System.getProperty(\"port.number1\");\n-        proxyPort = portstring != null ? Integer.parseInt(portstring) : 0;\n-\n-        Logger logger = Logger.getLogger(\"com.sun.net.httpserver\");\n-        ConsoleHandler ch = new ConsoleHandler();\n-        logger.setLevel(Level.ALL);\n-        ch.setLevel(Level.ALL);\n-        logger.addHandler(ch);\n-        String root = System.getProperty(\"test.src\")+ \"\/docs\";\n-        InetSocketAddress addr = new InetSocketAddress(InetAddress.getLoopbackAddress(), port);\n-        s1 = HttpServer.create (addr, 0);\n-        if (s1 instanceof HttpsServer) {\n-            throw new RuntimeException(\"should not be httpsserver\");\n-        }\n-        s1.createContext(\"\/files\", new FileServerHandler(root));\n-        s1.createContext(\"\/redirect\", new RedirectHandler(\"\/redirect\"));\n-\n-        executor = Executors.newCachedThreadPool();\n-        s1.setExecutor(executor);\n-        s1.start();\n-\n-        if (port == 0)\n-            port = s1.getAddress().getPort();\n-        else {\n-            if (s1.getAddress().getPort() != port)\n-                throw new RuntimeException(\"Error wrong port\");\n-            System.out.println(\"Port was assigned by Driver\");\n-        }\n-        serverAuthority = makeServerAuthority(addr.getAddress().getHostAddress(), port);\n-        System.out.println(\"HTTP server started at \" + serverAuthority);\n-        httproot = \"http:\/\/\" + serverAuthority + \"\/files\/\";\n-        redirectroot = \"http:\/\/\" + serverAuthority + \"\/redirect\/\";\n-        uri = new URI(httproot);\n-        fileuri = httproot + \"foo.txt\";\n-    }\n-\n-    private static String makeServerAuthority(final String host, final int port) {\n-        \/\/ escape for ipv6\n-        final String h = host.contains(\":\") ? \"[\" + host + \"]\" : host;\n-        return h + \":\" + port;\n-    }\n-\n-    static class RedirectHandler implements HttpHandler {\n-\n-        String root;\n-        int count = 0;\n-\n-        RedirectHandler(String root) {\n-            this.root = root;\n-        }\n-\n-        synchronized int count() {\n-            return count;\n-        }\n-\n-        synchronized void increment() {\n-            count++;\n-        }\n-\n-        @Override\n-        public synchronized void handle(HttpExchange t) throws IOException {\n-            System.out.println(\"Server: \" + t.getRequestURI());\n-            try (InputStream is = t.getRequestBody()) {\n-               is.readAllBytes();\n-            }\n-            increment();\n-            if (count() == 1) {\n-                Headers map = t.getResponseHeaders();\n-                String redirect = \"\/redirect\/bar.txt\";\n-                map.add(\"Location\", redirect);\n-                t.sendResponseHeaders(301, -1);\n-                t.close();\n-            } else {\n-                String response = \"Hello world\";\n-                t.sendResponseHeaders(200, response.length());\n-                OutputStream os = t.getResponseBody();\n-                os.write(response.getBytes(StandardCharsets.ISO_8859_1));\n-                t.close();\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/Security.java","additions":0,"deletions":554,"binary":false,"changes":554,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @summary Basic checks for SecurityException from body processors APIs\n- * @run testng\/othervm\/java.security.policy=allpermissions.policy FileProcessorPermissionTest\n+ * @summary Basic checks for File Processors\n+ * @run testng\/othervm FileProcessorPermissionTest\n@@ -30,2 +30,0 @@\n-import java.io.File;\n-import java.io.FilePermission;\n@@ -34,5 +32,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.PrivilegedActionException;\n@@ -40,1 +33,0 @@\n-import java.security.ProtectionDomain;\n@@ -43,2 +35,0 @@\n-import java.net.http.HttpRequest.BodyPublishers;\n-import java.net.http.HttpResponse;\n@@ -58,13 +48,0 @@\n-    static AccessControlContext withPermissions(Permission... perms) {\n-        Permissions p = new Permissions();\n-        for (Permission perm : perms) {\n-            p.add(perm);\n-        }\n-        ProtectionDomain pd = new ProtectionDomain(null, p);\n-        return new AccessControlContext(new ProtectionDomain[]{ pd });\n-    }\n-\n-    static AccessControlContext noPermissions() {\n-        return withPermissions(\/*empty*\/);\n-    }\n-\n@@ -85,11 +62,0 @@\n-        \/\/ TEST 1 - sanity, just run ( no security manager )\n-        System.setSecurityManager(null);\n-        try {\n-            for (PrivilegedExceptionAction pa : list) {\n-                AccessController.doPrivileged(pa);\n-            }\n-        } finally {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n-        \/\/ Run with all permissions, i.e. no further restrictions than test's AllPermission\n@@ -97,7 +63,1 @@\n-            try {\n-                assert System.getSecurityManager() != null;\n-                AccessController.doPrivileged(pa, null, new Permission[] { });\n-            } catch (PrivilegedActionException pae) {\n-                fail(\"UNEXPECTED Exception:\" + pae);\n-                pae.printStackTrace();\n-            }\n+            pa.run();\n@@ -106,42 +66,0 @@\n-        \/\/ TEST 2 - with all file permissions\n-        AccessControlContext allFilesACC = withPermissions(\n-                new FilePermission(\"<<ALL FILES>>\" , \"read,write\")\n-        );\n-        for (PrivilegedExceptionAction pa : list) {\n-            try {\n-                assert System.getSecurityManager() != null;\n-                AccessController.doPrivileged(pa, allFilesACC);\n-            } catch (PrivilegedActionException pae) {\n-                fail(\"UNEXPECTED Exception:\" + pae);\n-                pae.printStackTrace();\n-            }\n-        }\n-\n-        \/\/ TEST 3 - with limited permissions, i.e. just what is required\n-        AccessControlContext minimalACC = withPermissions(\n-                new FilePermission(fromFilePath.toString() , \"read\"),\n-                new FilePermission(asFilePath.toString(), \"write\"),\n-                \/\/ ofFileDownload requires read and write to the dir\n-                new FilePermission(CWD.toString(), \"read,write\"),\n-                new FilePermission(CWD.toString() + File.separator + \"*\", \"read,write\")\n-        );\n-        for (PrivilegedExceptionAction pa : list) {\n-            try {\n-                assert System.getSecurityManager() != null;\n-                AccessController.doPrivileged(pa, minimalACC);\n-            } catch (PrivilegedActionException pae) {\n-                fail(\"UNEXPECTED Exception:\" + pae);\n-                pae.printStackTrace();\n-            }\n-        }\n-\n-        \/\/ TEST 4 - with NO permissions, i.e. expect SecurityException\n-        for (PrivilegedExceptionAction pa : list) {\n-            try {\n-                assert System.getSecurityManager() != null;\n-                AccessController.doPrivileged(pa, noPermissions());\n-                fail(\"EXPECTED SecurityException\");\n-            } catch (SecurityException expected) {\n-                System.out.println(\"Caught expected SE:\" + expected);\n-            }\n-        }\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/filePerms\/FileProcessorPermissionTest.java","additions":4,"deletions":86,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run testng\/othervm\/java.security.policy=nopermissions.policy SecurityBeforeFile\n@@ -47,3 +46,0 @@\n-    static final boolean hasSecurityManager = System.getSecurityManager() != null;\n-    static final boolean hasNoSecurityManager = !hasSecurityManager;\n-\n@@ -53,1 +49,1 @@\n-        if (hasNoSecurityManager && Files.exists(p))\n+        if (Files.exists(p))\n@@ -59,3 +55,0 @@\n-        } catch (SecurityException se) {\n-            assertTrue(hasSecurityManager);\n-            out.println(\"caught expected security exception: \" + se);\n@@ -63,1 +56,0 @@\n-            assertTrue(hasNoSecurityManager);\n@@ -80,1 +72,1 @@\n-        if (hasNoSecurityManager && Files.exists(p))\n+        if (Files.exists(p))\n@@ -86,3 +78,0 @@\n-        } catch (SecurityException se) {\n-            assertTrue(hasSecurityManager);\n-            out.println(\"caught expected security exception: \" + se);\n@@ -90,1 +79,0 @@\n-            assertTrue(hasNoSecurityManager);\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/filePerms\/SecurityBeforeFile.java","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,28 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ bootstrap to get the test going, it will do its own restrictions\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.security.AllPermission;\n-};\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/filePerms\/allpermissions.policy","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-grant codeBase \"file:${test.classes}\/*\" {\n-};\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/filePerms\/nopermissions.policy","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -0,0 +1,196 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Basic sanity checks for WebSocket URI from the Builder\n+ * @compile ..\/DummyWebSocketServer.java ..\/..\/ProxyServer.java\n+ * @run testng\/othervm WSSanityTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+import java.util.List;\n+import java.net.http.HttpClient;\n+import java.net.http.WebSocket;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+public class WSSanityTest {\n+\n+    URI wsURI;\n+    DummyWebSocketServer webSocketServer;\n+    InetSocketAddress proxyAddress;\n+\n+    @BeforeTest\n+    public void setup() throws Exception {\n+        ProxyServer proxyServer = new ProxyServer(0, true);\n+        proxyAddress = new InetSocketAddress(InetAddress.getLoopbackAddress(),\n+                                             proxyServer.getPort());\n+        webSocketServer = new DummyWebSocketServer();\n+        webSocketServer.open();\n+        wsURI = webSocketServer.getURI();\n+\n+        System.out.println(\"Proxy Server: \" + proxyAddress);\n+        System.out.println(\"DummyWebSocketServer: \" + wsURI);\n+    }\n+\n+    @AfterTest\n+    public void teardown() {\n+        webSocketServer.close();\n+    }\n+\n+    static class NoOpListener implements WebSocket.Listener {}\n+    static final WebSocket.Listener noOpListener = new NoOpListener();\n+\n+    interface ExceptionAction<T> {\n+        T run() throws Exception;\n+    }\n+\n+    @DataProvider(name = \"passingScenarios\")\n+    public Object[][] passingScenarios() {\n+        HttpClient noProxyClient = HttpClient.newHttpClient();\n+        return new Object[][]{\n+            { (ExceptionAction<?>)() -> {\n+                 noProxyClient.newWebSocketBuilder()\n+                              .buildAsync(wsURI, noOpListener).get().abort();\n+                 return null; },\n+              \"0\"  \/* for log file identification *\/ },\n+\n+            { (ExceptionAction<?>)() -> {\n+                URI uriWithPath = wsURI.resolve(\"\/path\/x\");\n+                 noProxyClient.newWebSocketBuilder()\n+                              .buildAsync(uriWithPath, noOpListener).get().abort();\n+                 return null; },\n+              \"1\" },\n+\n+            { (ExceptionAction<?>)() -> {\n+                 noProxyClient.newWebSocketBuilder()\n+                              .header(\"A-Header\", \"A-Value\")  \/\/ header\n+                              .buildAsync(wsURI, noOpListener).get().abort();\n+                 return null; },\n+              \"2\" },\n+\n+            { (ExceptionAction<?>)() -> {\n+                 noProxyClient.newWebSocketBuilder()\n+                              .header(\"A-Header\", \"A-Value\")  \/\/ headers\n+                              .header(\"B-Header\", \"B-Value\")  \/\/ headers\n+                              .buildAsync(wsURI, noOpListener).get().abort();\n+                 return null; },\n+              \"3\" },\n+\n+            \/\/ client with a DIRECT proxy\n+            { (ExceptionAction<?>)() -> {\n+                 ProxySelector ps = ProxySelector.of(null);\n+                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n+                 client.newWebSocketBuilder()\n+                       .buildAsync(wsURI, noOpListener).get().abort();\n+                 return null; },\n+              \"4\" },\n+\n+            \/\/ client with a SOCKS proxy! ( expect implementation to ignore SOCKS )\n+            { (ExceptionAction<?>)() -> {\n+                 ProxySelector ps = new ProxySelector() {\n+                     @Override public List<Proxy> select(URI uri) {\n+                         return List.of(new Proxy(Proxy.Type.SOCKS, proxyAddress)); }\n+                     @Override\n+                     public void connectFailed(URI uri, SocketAddress sa, IOException ioe) { }\n+                 };\n+                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n+                 client.newWebSocketBuilder()\n+                       .buildAsync(wsURI, noOpListener).get().abort();\n+                 return null; },\n+              \"5\" },\n+\n+            \/\/ client with an HTTP\/HTTPS proxy\n+            { (ExceptionAction<?>)() -> {\n+                 assert proxyAddress != null;\n+                 ProxySelector ps = ProxySelector.of(proxyAddress);\n+                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n+                 client.newWebSocketBuilder()\n+                       .buildAsync(wsURI, noOpListener).get().abort();\n+                 return null; },\n+              \"6\" },\n+\n+            { (ExceptionAction<?>)() -> {\n+                 assert proxyAddress != null;\n+                 CountingProxySelector ps = CountingProxySelector.of(proxyAddress);\n+                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n+                 client.newWebSocketBuilder()\n+                       .buildAsync(wsURI, noOpListener).get().abort();\n+                 assertEquals(ps.count(), 1);  \/\/ ps.select only invoked once\n+                 return null; },\n+              \"7\" },\n+\n+        };\n+    }\n+\n+    @Test(dataProvider = \"passingScenarios\")\n+    public void testScenarios(ExceptionAction<?> action, String dataProviderId)\n+        throws Exception\n+    {\n+        action.run();\n+    }\n+\n+    \/**\n+     * A Proxy Selector that wraps a ProxySelector.of(), and counts the number\n+     * of times its select method has been invoked. This can be used to ensure\n+     * that the Proxy Selector is invoked only once per WebSocket.Builder::buildAsync\n+     * invocation.\n+     *\/\n+    static class CountingProxySelector extends ProxySelector {\n+        private final ProxySelector proxySelector;\n+        private volatile int count; \/\/ 0\n+        private CountingProxySelector(InetSocketAddress proxyAddress) {\n+            proxySelector = ProxySelector.of(proxyAddress);\n+        }\n+\n+        public static CountingProxySelector of(InetSocketAddress proxyAddress) {\n+            return new CountingProxySelector(proxyAddress);\n+        }\n+\n+        int count() { return count; }\n+\n+        @Override\n+        public List<Proxy> select(URI uri) {\n+            System.out.println(\"PS: uri\");\n+            Throwable t = new Throwable();\n+            t.printStackTrace(System.out);\n+            count++;\n+            return proxySelector.select(uri);\n+        }\n+\n+        @Override\n+        public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {\n+            proxySelector.connectFailed(uri, sa, ioe);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/security\/WSSanityTest.java","additions":196,"deletions":0,"binary":false,"changes":196,"status":"added"},{"patch":"@@ -1,581 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Basic security checks for WebSocket URI from the Builder\n- * @compile ..\/DummyWebSocketServer.java ..\/..\/ProxyServer.java\n- * @run testng\/othervm\/java.security.policy=httpclient.policy WSURLPermissionTest\n- *\/\n-\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.Proxy;\n-import java.net.ProxySelector;\n-import java.net.SocketAddress;\n-import java.net.URI;\n-import java.net.URLPermission;\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.ProtectionDomain;\n-import java.util.List;\n-import java.util.concurrent.ExecutionException;\n-import java.net.http.HttpClient;\n-import java.net.http.WebSocket;\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n-\n-public class WSURLPermissionTest {\n-\n-    static AccessControlContext withPermissions(Permission... perms) {\n-        Permissions p = new Permissions();\n-        for (Permission perm : perms) {\n-            p.add(perm);\n-        }\n-        ProtectionDomain pd = new ProtectionDomain(null, p);\n-        return new AccessControlContext(new ProtectionDomain[]{ pd });\n-    }\n-\n-    static AccessControlContext noPermissions() {\n-        return withPermissions(\/*empty*\/);\n-    }\n-\n-    URI wsURI;\n-    DummyWebSocketServer webSocketServer;\n-    InetSocketAddress proxyAddress;\n-\n-    @BeforeTest\n-    public void setup() throws Exception {\n-        ProxyServer proxyServer = new ProxyServer(0, true);\n-        proxyAddress = new InetSocketAddress(InetAddress.getLoopbackAddress(),\n-                                             proxyServer.getPort());\n-        webSocketServer = new DummyWebSocketServer();\n-        webSocketServer.open();\n-        wsURI = webSocketServer.getURI();\n-\n-        System.out.println(\"Proxy Server: \" + proxyAddress);\n-        System.out.println(\"DummyWebSocketServer: \" + wsURI);\n-    }\n-\n-    @AfterTest\n-    public void teardown() {\n-        webSocketServer.close();\n-    }\n-\n-    static class NoOpListener implements WebSocket.Listener {}\n-    static final WebSocket.Listener noOpListener = new NoOpListener();\n-\n-    @DataProvider(name = \"passingScenarios\")\n-    public Object[][] passingScenarios() {\n-        HttpClient noProxyClient = HttpClient.newHttpClient();\n-        return new Object[][]{\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                       \/\/ no actions\n-              new URLPermission[] { new URLPermission(wsURI.toString()) },\n-              \"0\"  \/* for log file identification *\/ },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                       \/\/ scheme wildcard\n-              new URLPermission[] { new URLPermission(\"ws:\/\/*\") },\n-              \"0.1\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                       \/\/ port wildcard\n-              new URLPermission[] { new URLPermission(\"ws:\/\/\"+wsURI.getHost()+\":*\") },\n-              \"0.2\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                        \/\/ empty actions\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \"\") },\n-              \"1\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                         \/\/ colon\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \":\") },\n-              \"2\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                        \/\/ wildcard\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \"*:*\") },\n-              \"3\" },\n-\n-            \/\/ WS permission checking is agnostic of method, any\/none will do\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                        \/\/ specific method\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \"GET\") },\n-              \"3.1\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                        \/\/ specific method\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \"POST\") },\n-              \"3.2\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                URI uriWithPath = wsURI.resolve(\"\/path\/x\");\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(uriWithPath, noOpListener).get().abort();\n-                 return null; },                                       \/\/ path\n-              new URLPermission[] { new URLPermission(wsURI.resolve(\"\/path\/x\").toString()) },\n-              \"4\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                URI uriWithPath = wsURI.resolve(\"\/path\/x\");\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(uriWithPath, noOpListener).get().abort();\n-                 return null; },                                       \/\/ same dir wildcard\n-              new URLPermission[] { new URLPermission(wsURI.resolve(\"\/path\/*\").toString()) },\n-              \"5\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                URI uriWithPath = wsURI.resolve(\"\/path\/x\");\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(uriWithPath, noOpListener).get().abort();\n-                 return null; },                                       \/\/ recursive\n-              new URLPermission[] { new URLPermission(wsURI.resolve(\"\/path\/-\").toString()) },\n-              \"6\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                URI uriWithPath = wsURI.resolve(\"\/path\/x\");\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(uriWithPath, noOpListener).get().abort();\n-                 return null; },                                       \/\/ recursive top\n-              new URLPermission[] { new URLPermission(wsURI.resolve(\"\/-\").toString()) },\n-              \"7\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .header(\"A-Header\", \"A-Value\")  \/\/ header\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \":A-Header\") },\n-              \"8\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .header(\"A-Header\", \"A-Value\")  \/\/ header\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                        \/\/ wildcard\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \":*\") },\n-              \"9\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .header(\"A-Header\", \"A-Value\")  \/\/ headers\n-                              .header(\"B-Header\", \"B-Value\")  \/\/ headers\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \":A-Header,B-Header\") },\n-              \"10\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .header(\"A-Header\", \"A-Value\")  \/\/ headers\n-                              .header(\"B-Header\", \"B-Value\")  \/\/ headers\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                        \/\/ wildcard\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \":*\") },\n-              \"11\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .header(\"A-Header\", \"A-Value\")  \/\/ headers\n-                              .header(\"B-Header\", \"B-Value\")  \/\/ headers\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                        \/\/ wildcards\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \"*:*\") },\n-              \"12\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .header(\"A-Header\", \"A-Value\")  \/\/ multi-value\n-                              .header(\"A-Header\", \"B-Value\")  \/\/ headers\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                        \/\/ wildcard\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \":*\") },\n-              \"13\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .header(\"A-Header\", \"A-Value\")  \/\/ multi-value\n-                              .header(\"A-Header\", \"B-Value\")  \/\/ headers\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                        \/\/ single grant\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \":A-Header\") },\n-              \"14\" },\n-\n-            \/\/ client with a DIRECT proxy\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 ProxySelector ps = ProxySelector.of(null);\n-                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n-                 client.newWebSocketBuilder()\n-                       .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },\n-              new URLPermission[] { new URLPermission(wsURI.toString()) },\n-              \"15\" },\n-\n-            \/\/ client with a SOCKS proxy! ( expect implementation to ignore SOCKS )\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 ProxySelector ps = new ProxySelector() {\n-                     @Override public List<Proxy> select(URI uri) {\n-                         return List.of(new Proxy(Proxy.Type.SOCKS, proxyAddress)); }\n-                     @Override\n-                     public void connectFailed(URI uri, SocketAddress sa, IOException ioe) { }\n-                 };\n-                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n-                 client.newWebSocketBuilder()\n-                       .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },\n-              new URLPermission[] { new URLPermission(wsURI.toString()) },\n-              \"16\" },\n-\n-            \/\/ client with a HTTP\/HTTPS proxy\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 assert proxyAddress != null;\n-                 ProxySelector ps = ProxySelector.of(proxyAddress);\n-                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n-                 client.newWebSocketBuilder()\n-                       .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },\n-              new URLPermission[] {\n-                    new URLPermission(wsURI.toString()),            \/\/ CONNECT action string\n-                    new URLPermission(\"socket:\/\/\"+proxyAddress.getHostName()\n-                                      +\":\"+proxyAddress.getPort(), \"CONNECT\")},\n-              \"17\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 assert proxyAddress != null;\n-                 ProxySelector ps = ProxySelector.of(proxyAddress);\n-                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n-                 client.newWebSocketBuilder()\n-                       .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },\n-              new URLPermission[] {\n-                    new URLPermission(wsURI.toString()),            \/\/ no action string\n-                    new URLPermission(\"socket:\/\/\"+proxyAddress.getHostName()\n-                                      +\":\"+proxyAddress.getPort())},\n-              \"18\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 assert proxyAddress != null;\n-                 ProxySelector ps = ProxySelector.of(proxyAddress);\n-                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n-                 client.newWebSocketBuilder()\n-                       .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },\n-              new URLPermission[] {\n-                    new URLPermission(wsURI.toString()),            \/\/ wildcard headers\n-                    new URLPermission(\"socket:\/\/\"+proxyAddress.getHostName()\n-                                      +\":\"+proxyAddress.getPort(), \"CONNECT:*\")},\n-              \"19\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 assert proxyAddress != null;\n-                 CountingProxySelector ps = CountingProxySelector.of(proxyAddress);\n-                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n-                 client.newWebSocketBuilder()\n-                       .buildAsync(wsURI, noOpListener).get().abort();\n-                 assertEquals(ps.count(), 1);  \/\/ ps.select only invoked once\n-                 return null; },\n-              new URLPermission[] {\n-                    new URLPermission(wsURI.toString()),            \/\/ empty headers\n-                    new URLPermission(\"socket:\/\/\"+proxyAddress.getHostName()\n-                                      +\":\"+proxyAddress.getPort(), \"CONNECT:\")},\n-              \"20\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 assert proxyAddress != null;\n-                 ProxySelector ps = ProxySelector.of(proxyAddress);\n-                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n-                 client.newWebSocketBuilder()\n-                       .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },\n-              new URLPermission[] {\n-                    new URLPermission(wsURI.toString()),\n-                    new URLPermission(\"socket:\/\/*\")},               \/\/ wildcard socket URL\n-              \"21\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 assert proxyAddress != null;\n-                 ProxySelector ps = ProxySelector.of(proxyAddress);\n-                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n-                 client.newWebSocketBuilder()\n-                       .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },\n-              new URLPermission[] {\n-                    new URLPermission(\"ws:\/\/*\"),                    \/\/ wildcard ws URL\n-                    new URLPermission(\"socket:\/\/*\")},               \/\/ wildcard socket URL\n-              \"22\" },\n-\n-        };\n-    }\n-\n-    @Test(dataProvider = \"passingScenarios\")\n-    public void testWithNoSecurityManager(PrivilegedExceptionAction<?> action,\n-                                          URLPermission[] unused,\n-                                          String dataProviderId)\n-        throws Exception\n-    {\n-        \/\/ sanity ( no security manager )\n-        System.setSecurityManager(null);\n-        try {\n-            AccessController.doPrivileged(action);\n-        } finally {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-    }\n-\n-    @Test(dataProvider = \"passingScenarios\")\n-    public void testWithAllPermissions(PrivilegedExceptionAction<?> action,\n-                                       URLPermission[] unused,\n-                                       String dataProviderId)\n-        throws Exception\n-    {\n-        \/\/ Run with all permissions, i.e. no further restrictions than test's AllPermission\n-        assert System.getSecurityManager() != null;\n-        AccessController.doPrivileged(action);\n-    }\n-\n-    @Test(dataProvider = \"passingScenarios\")\n-    public void testWithMinimalPermissions(PrivilegedExceptionAction<?> action,\n-                                           URLPermission[] perms,\n-                                           String dataProviderId)\n-        throws Exception\n-    {\n-        \/\/ Run with minimal permissions, i.e. just what is required\n-        assert System.getSecurityManager() != null;\n-        AccessControlContext minimalACC = withPermissions(perms);\n-        AccessController.doPrivileged(action, minimalACC);\n-    }\n-\n-    @Test(dataProvider = \"passingScenarios\")\n-    public void testWithNoPermissions(PrivilegedExceptionAction<?> action,\n-                                      URLPermission[] unused,\n-                                      String dataProviderId)\n-        throws Exception\n-    {\n-        \/\/ Run with NO permissions, i.e. expect SecurityException\n-        assert System.getSecurityManager() != null;\n-        try {\n-            AccessController.doPrivileged(action, noPermissions());\n-            fail(\"EXPECTED SecurityException\");\n-        } catch (PrivilegedActionException expected) {\n-            Throwable t = expected.getCause();\n-            if (t instanceof ExecutionException)\n-                t = t.getCause();\n-\n-            if (t instanceof SecurityException)\n-                System.out.println(\"Caught expected SE:\" + expected);\n-            else\n-                fail(\"Expected SecurityException, but got: \" + t);\n-        }\n-    }\n-\n-    \/\/ --- Negative tests ---\n-\n-    @DataProvider(name = \"failingScenarios\")\n-    public Object[][] failingScenarios() {\n-        HttpClient noProxyClient = HttpClient.newHttpClient();\n-        return new Object[][]{\n-            { (PrivilegedExceptionAction<?>) () -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null;\n-              },\n-              new URLPermission[]{ \/* no permissions *\/ },\n-              \"50\"  \/* for log file identification *\/},\n-\n-            { (PrivilegedExceptionAction<?>) () -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null;\n-              },                                        \/\/ wrong scheme\n-              new URLPermission[]{ new URLPermission(\"http:\/\/*\") },\n-              \"51\" },\n-\n-            { (PrivilegedExceptionAction<?>) () -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null;\n-              },                                        \/\/ wrong scheme\n-              new URLPermission[]{ new URLPermission(\"socket:\/\/*\") },\n-              \"52\" },\n-\n-            { (PrivilegedExceptionAction<?>) () -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null;\n-              },                                        \/\/ wrong host\n-              new URLPermission[]{ new URLPermission(\"ws:\/\/foo.com\/\") },\n-              \"53\" },\n-\n-            { (PrivilegedExceptionAction<?>) () -> {\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null;\n-              },                                        \/\/ wrong port\n-              new URLPermission[]{ new URLPermission(\"ws:\/\/\"+ wsURI.getHost()+\":5\") },\n-              \"54\" },\n-\n-            { (PrivilegedExceptionAction<?>) () -> {\n-                  noProxyClient.newWebSocketBuilder()\n-                               .header(\"A-Header\", \"A-Value\")\n-                               .buildAsync(wsURI, noOpListener).get().abort();\n-                  return null;\n-              },                                                    \/\/ only perm to set B not A\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \"*:B-Header\") },\n-              \"55\" },\n-\n-            { (PrivilegedExceptionAction<?>) () -> {\n-                  noProxyClient.newWebSocketBuilder()\n-                               .header(\"A-Header\", \"A-Value\")\n-                               .header(\"B-Header\", \"B-Value\")\n-                               .buildAsync(wsURI, noOpListener).get().abort();\n-                  return null;\n-              },                                                    \/\/ only perm to set B not A\n-              new URLPermission[] { new URLPermission(wsURI.toString(), \"*:B-Header\") },\n-              \"56\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                URI uriWithPath = wsURI.resolve(\"\/path\/x\");\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(uriWithPath, noOpListener).get().abort();\n-                 return null; },                                    \/\/ wrong path\n-              new URLPermission[] { new URLPermission(wsURI.resolve(\"\/aDiffPath\/\").toString()) },\n-              \"57\" },\n-\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                URI uriWithPath = wsURI.resolve(\"\/path\/x\");\n-                 noProxyClient.newWebSocketBuilder()\n-                              .buildAsync(uriWithPath, noOpListener).get().abort();\n-                 return null; },                                    \/\/ more specific path\n-              new URLPermission[] { new URLPermission(wsURI.resolve(\"\/path\/x\/y\").toString()) },\n-              \"58\" },\n-\n-            \/\/ client with a HTTP\/HTTPS proxy\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 assert proxyAddress != null;\n-                 ProxySelector ps = ProxySelector.of(proxyAddress);\n-                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n-                 client.newWebSocketBuilder()\n-                       .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },                                    \/\/ missing proxy perm\n-              new URLPermission[] { new URLPermission(wsURI.toString()) },\n-              \"100\" },\n-\n-            \/\/ client with a HTTP\/HTTPS proxy\n-            { (PrivilegedExceptionAction<?>)() -> {\n-                 assert proxyAddress != null;\n-                 ProxySelector ps = ProxySelector.of(proxyAddress);\n-                 HttpClient client = HttpClient.newBuilder().proxy(ps).build();\n-                 client.newWebSocketBuilder()\n-                       .buildAsync(wsURI, noOpListener).get().abort();\n-                 return null; },\n-              new URLPermission[] {\n-                    new URLPermission(wsURI.toString()),            \/\/ missing proxy CONNECT\n-                    new URLPermission(\"socket:\/\/*\", \"GET\") },\n-              \"101\" },\n-        };\n-    }\n-\n-    @Test(dataProvider = \"failingScenarios\")\n-    public void testWithoutEnoughPermissions(PrivilegedExceptionAction<?> action,\n-                                             URLPermission[] perms,\n-                                             String dataProviderId)\n-        throws Exception\n-    {\n-        \/\/ Run without Enough permissions, i.e. expect SecurityException\n-        assert System.getSecurityManager() != null;\n-        AccessControlContext notEnoughPermsACC = withPermissions(perms);\n-        try {\n-            AccessController.doPrivileged(action, notEnoughPermsACC);\n-            fail(\"EXPECTED SecurityException\");\n-        } catch (PrivilegedActionException expected) {\n-            Throwable t = expected.getCause();\n-            if (t instanceof ExecutionException)\n-                t = t.getCause();\n-\n-            if (t instanceof SecurityException)\n-                System.out.println(\"Caught expected SE:\" + expected);\n-            else\n-                fail(\"Expected SecurityException, but got: \" + t);\n-        }\n-    }\n-\n-    \/**\n-     * A Proxy Selector that wraps a ProxySelector.of(), and counts the number\n-     * of times its select method has been invoked. This can be used to ensure\n-     * that the Proxy Selector is invoked only once per WebSocket.Builder::buildAsync\n-     * invocation.\n-     *\/\n-    static class CountingProxySelector extends ProxySelector {\n-        private final ProxySelector proxySelector;\n-        private volatile int count; \/\/ 0\n-        private CountingProxySelector(InetSocketAddress proxyAddress) {\n-            proxySelector = ProxySelector.of(proxyAddress);\n-        }\n-\n-        public static CountingProxySelector of(InetSocketAddress proxyAddress) {\n-            return new CountingProxySelector(proxyAddress);\n-        }\n-\n-        int count() { return count; }\n-\n-        @Override\n-        public List<Proxy> select(URI uri) {\n-            System.out.println(\"PS: uri\");\n-            Throwable t = new Throwable();\n-            t.printStackTrace(System.out);\n-            count++;\n-            return proxySelector.select(uri);\n-        }\n-\n-        @Override\n-        public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {\n-            proxySelector.connectFailed(uri, sa, ioe);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/security\/WSURLPermissionTest.java","additions":0,"deletions":581,"binary":false,"changes":581,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ bootstrap to get the test going, it will do its own restrictions\n-grant codeBase \"file:${test.classes}\/*\" {\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/security\/httpclient.policy","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.net.InetAddress;\n-import java.net.SocketPermission;\n-import java.net.UnknownHostException;\n-import java.security.Permission;\n-import java.util.logging.Logger;\n-\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-\/*\n- * @test\n- * @summary Test that resolution of host name requires SocketPermission(\"resolve\", <host name>)\n- * permission when running with security manager and custom resolver provider installed.\n- * @library lib providers\/simple\n- * @build test.library\/testlib.ResolutionRegistry simple.provider\/impl.SimpleResolverProviderImpl\n- *        ResolvePermissionTest\n- * @run testng\/othervm -Dtest.dataFileName=nonExistentFile -Djava.security.manager=allow\n- *                      ResolvePermissionTest\n- *\/\n-\n-public class ResolvePermissionTest {\n-\n-    @Test\n-    public void withResolvePermission() throws Exception {\n-        testResolvePermission(true);\n-    }\n-\n-    @Test\n-    public void noResolvePermission() throws Exception {\n-        testResolvePermission(false);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private void testResolvePermission(boolean grantResolvePermission) throws Exception {\n-        \/\/ Set security manager which grants or denies permission to resolve 'javaTest.org' host\n-        var securityManager = new ResolvePermissionTest.TestSecurityManager(grantResolvePermission);\n-        try {\n-            System.setSecurityManager(securityManager);\n-            Class expectedExceptionClass = grantResolvePermission ?\n-                    UnknownHostException.class : SecurityException.class;\n-            var exception = Assert.expectThrows(expectedExceptionClass, () -> InetAddress.getByName(\"javaTest.org\"));\n-            LOGGER.info(\"Got expected exception: \" + exception);\n-        } finally {\n-            System.setSecurityManager(null);\n-        }\n-    }\n-\n-    static class TestSecurityManager extends SecurityManager {\n-        final boolean allowJavaTestOrgResolve;\n-\n-        public TestSecurityManager(boolean allowJavaTestOrgResolve) {\n-            this.allowJavaTestOrgResolve = allowJavaTestOrgResolve;\n-        }\n-\n-        @Override\n-        public void checkPermission(Permission permission) {\n-            if (permission instanceof java.net.SocketPermission) {\n-                SocketPermission sockPerm = (SocketPermission) permission;\n-                if (\"resolve\".equals(sockPerm.getActions())) {\n-                    String host = sockPerm.getName();\n-                    LOGGER.info(\"Checking 'resolve' SocketPermission: \" + permission);\n-                    if (\"javaTest.org\".equals(host) && !allowJavaTestOrgResolve) {\n-                        LOGGER.info(\"Denying 'resolve' permission for 'javaTest.org'\");\n-                        throw new SecurityException(\"Access Denied\");\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    private static final Logger LOGGER = Logger.getLogger(ResolvePermissionTest.class.getName());\n-}\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/ResolvePermissionTest.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.net.InetAddress;\n-import java.security.Permission;\n-import java.util.ServiceConfigurationError;\n-import java.util.logging.Logger;\n-\n-\/*\n- * @test\n- * @summary Test that instantiation of InetAddressResolverProvider requires \"inetAddressResolverProvider\"\n- *          RuntimePermission when running with security manager.\n- * @library lib providers\/simple\n- * @build test.library\/testlib.ResolutionRegistry simple.provider\/impl.SimpleResolverProviderImpl\n- *        RuntimePermissionTest\n- * @run testng\/othervm -Djava.security.manager=allow RuntimePermissionTest\n- *\/\n-\n-public class RuntimePermissionTest {\n-\n-    @Test\n-    public void withRuntimePermission() throws Exception {\n-        testRuntimePermission(true);\n-    }\n-\n-    @Test\n-    public void noRuntimePermission() throws Exception {\n-        testRuntimePermission(false);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private void testRuntimePermission(boolean permitInetAddressResolver) throws Exception {\n-        \/\/ Set security manager which grants all permissions + RuntimePermission(\"inetAddressResolverProvider\")\n-        var securityManager = new TestSecurityManager(permitInetAddressResolver);\n-        try {\n-            System.setSecurityManager(securityManager);\n-            if (permitInetAddressResolver) {\n-                InetAddress.getByName(\"javaTest.org\");\n-            } else {\n-                ServiceConfigurationError sce =\n-                        Assert.expectThrows(ServiceConfigurationError.class,\n-                                            () -> InetAddress.getByName(\"javaTest.org\"));\n-                System.err.println(\"Got ServiceConfigurationError: \" + sce);\n-                Throwable cause = sce.getCause();\n-                Assert.assertTrue(cause instanceof SecurityException);\n-                Assert.assertTrue(cause.getMessage().contains(RUNTIME_PERMISSION_NAME));\n-            }\n-        } finally {\n-            System.setSecurityManager(null);\n-        }\n-    }\n-\n-    static class TestSecurityManager extends SecurityManager {\n-        final boolean permitInetAddressResolver;\n-\n-        public TestSecurityManager(boolean permitInetAddressResolver) {\n-            this.permitInetAddressResolver = permitInetAddressResolver;\n-            System.err.println(\"inetAddressResolverProvider permission is \" +\n-                               (permitInetAddressResolver ? \"granted\" : \"not granted\"));\n-        }\n-\n-        @Override\n-        public void checkPermission(Permission permission) {\n-            if (permission instanceof RuntimePermission) {\n-                if (RUNTIME_PERMISSION_NAME.equals(permission.getName()) && !permitInetAddressResolver) {\n-                    System.err.println(\"Denying '\" + RUNTIME_PERMISSION_NAME + \"' permission\");\n-                    throw new SecurityException(\"Access Denied: \" + RUNTIME_PERMISSION_NAME);\n-                } else {\n-                   \/\/ Do not do anything for non-matching Permission. Otherwise the test\n-                   \/\/ has a chance to re-enter here recursively, e.g. due to permission\n-                   \/\/ checks during class load. This would eventually overflow the stack.\n-               }\n-            }\n-        }\n-    }\n-\n-    private static final String RUNTIME_PERMISSION_NAME = \"inetAddressResolverProvider\";\n-\n-}\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/RuntimePermissionTest.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -78,6 +78,0 @@\n-        viaProvider(\"ernie\", UNKNOWN, \"-Djava.security.manager\");\n-        viaProvider(\"curly\", UNKNOWN, \"-Djava.security.manager\");\n-        viaProvider(\"larry\", KNOWN, \"-Djava.security.manager\",\n-                \"-Djava.security.policy=\" + TEST_SRC + File.separator + \"basic.policy\");\n-        viaProvider(\"moe\", KNOWN, \"-Djava.security.manager\",\n-                \"-Djava.security.policy=\" + TEST_SRC + File.separator + \"basic.policy\");\n@@ -88,4 +82,0 @@\n-    static final String SECURITY_MANAGER_DEPRECATED\n-            = \"WARNING: The Security Manager is deprecated and will be removed in a future release.\"\n-                    + System.getProperty(\"line.separator\");\n-\n","filename":"test\/jdk\/java\/net\/spi\/URLStreamHandlerProvider\/Basic.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n- grant {\n-    permission java.lang.RuntimePermission \"setFactory\";\n-};\n-\n","filename":"test\/jdk\/java\/net\/spi\/URLStreamHandlerProvider\/basic.policy","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,1 @@\n- * @library \/test\/lib bootlib\n- * @build PrivilegedThreadFactory Attack\n- *        jdk.test.lib.util.JarUtils\n- * @run driver SetupJar\n- * @run main\/othervm -Xbootclasspath\/a:privileged.jar -Djava.security.manager=allow AsExecutor\n+ * @run main AsExecutor\n@@ -45,1 +41,1 @@\n-        ThreadFactory factory = new PrivilegedThreadFactory();\n+        ThreadFactory factory = Executors.defaultThreadFactory();\n@@ -58,12 +54,0 @@\n-\n-            \/\/ install security manager and test again\n-            System.setSecurityManager( new SecurityManager() );\n-            testSimpleTask(group1);\n-            testSimpleTask(group2);\n-            testSimpleTask(group3);\n-\n-            \/\/ attempt to execute tasks that run with only frames from boot\n-            \/\/ class loader on the stack.\n-            testAttackingTask(group1);\n-            testAttackingTask(group2);\n-            testAttackingTask(group3);\n@@ -87,10 +71,0 @@\n-\n-    static void testAttackingTask(AsynchronousChannelGroup group) throws Exception {\n-        Executor executor = (Executor)group;\n-        Attack task = new Attack();\n-        executor.execute(task);\n-        task.waitUntilDone();\n-        if (!task.failedDueToSecurityException())\n-            throw new RuntimeException(\"SecurityException expected\");\n-    }\n-\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousChannelGroup\/AsExecutor.java","additions":3,"deletions":29,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.Socket;\n-import java.util.concurrent.CountDownLatch;\n-\n-\/**\n- * A task that attempts to attack the current host.\n- *\/\n-\n-public class Attack implements Runnable {\n-    private final CountDownLatch latch = new CountDownLatch(1);\n-    private volatile boolean failedDueToSecurityException;\n-\n-    public void Attack() {\n-        \/\/ check class is on boot class path\n-        if (Attack.class.getClassLoader() != null)\n-            throw new RuntimeException(\"Attack class not on boot class path\");\n-    }\n-\n-    @Override\n-    public void run() {\n-        try {\n-            new Socket(InetAddress.getLoopbackAddress(), 9999).close();\n-            throw new RuntimeException(\"Connected (not expected)\");\n-        } catch (IOException e) {\n-            throw new RuntimeException(\"IOException (not expected)\");\n-        } catch (SecurityException e) {\n-            failedDueToSecurityException = true;\n-        } finally {\n-            latch.countDown();\n-        }\n-    }\n-\n-    public void waitUntilDone() throws InterruptedException {\n-        latch.await();\n-    }\n-\n-    public boolean failedDueToSecurityException() {\n-        return failedDueToSecurityException;\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousChannelGroup\/bootlib\/Attack.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2009, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.concurrent.ThreadFactory;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n-\/**\n- * The \"privileged\" ThreadFactory used by the AsExecutor test.\n- *\/\n-\n-public class PrivilegedThreadFactory implements ThreadFactory {\n-    public void PrivilegedThreadPoolFactory() {\n-        \/\/ check class is on boot class path\n-        if (PrivilegedThreadFactory.class.getClassLoader() != null)\n-            throw new RuntimeException(\"PrivilegedThreadFactory class not on boot class path\");\n-    }\n-\n-    @Override\n-    public Thread newThread(final Runnable r) {\n-        return AccessController.doPrivileged(new PrivilegedAction<Thread>() {\n-            @Override\n-            public Thread run() {\n-                Thread t = new Thread(r);\n-                t.setDaemon(true);\n-                return t;\n-            }\n-        });\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousChannelGroup\/bootlib\/PrivilegedThreadFactory.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2009, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4607272\n- * @summary Unit test for AsynchronousServerServerSocketChannel\n- * @build WithSecurityManager\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager allow\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager deny\n- *\/\n-\n-import java.nio.file.Paths;\n-import java.nio.channels.*;\n-import java.net.*;\n-import java.util.concurrent.*;\n-\n-public class WithSecurityManager {\n-    public static void main(String[] args) throws Exception {\n-        boolean allow = false;\n-        String policy = (args[0].equals(\"allow\")) ? \"java.policy.allow\" :\n-            \"java.policy.deny\";\n-\n-        String testSrc = System.getProperty(\"test.src\");\n-        if (testSrc == null)\n-            testSrc = \".\";\n-\n-        System.setProperty(\"java.security.policy\",\n-            Paths.get(testSrc).resolve(policy).toString());\n-        System.setSecurityManager(new SecurityManager());\n-\n-        AsynchronousServerSocketChannel listener =\n-            AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(0));\n-\n-        InetAddress lh = InetAddress.getLocalHost();\n-        int port = ((InetSocketAddress)(listener.getLocalAddress())).getPort();\n-\n-        \/\/ establish and accept connection\n-        SocketChannel sc = SocketChannel.open(new InetSocketAddress(lh, port));\n-        Future<AsynchronousSocketChannel> result = listener.accept();\n-\n-        if (allow) {\n-            \/\/ no security exception\n-            result.get().close();\n-        } else {\n-            try {\n-                result.get();\n-            } catch (ExecutionException x) {\n-                if (!(x.getCause() instanceof SecurityException))\n-                    throw new RuntimeException(\"SecurityException expected\");\n-            }\n-        }\n-\n-        sc.close();\n-        listener.close();\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousServerSocketChannel\/WithSecurityManager.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.net.SocketPermission \"*:1024-\", \"accept,connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousServerSocketChannel\/java.policy.allow","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.net.SocketPermission \"*:1024-\", \"connect,resolve\";\n-};\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousServerSocketChannel\/java.policy.deny","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.net.SocketPermission;\n@@ -35,6 +34,0 @@\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -55,4 +48,3 @@\n- * @summary Check that DatagramChannel throws expected Exception when connecting\n- *          to port 0\n- * @run testng\/othervm -Djava.security.manager=allow ConnectPortZero\n- * @run testng\/othervm -Djava.security.manager=allow -Djava.net.preferIPv4Stack=true ConnectPortZero\n+ * @summary Check that DatagramChannel throws expected Exception when connecting to port 0\n+ * @run testng ConnectPortZero\n+ * @run testng\/othervm -Djava.net.preferIPv4Stack=true ConnectPortZero\n@@ -63,2 +55,1 @@\n-    private DatagramChannel datagramChannel, datagramChannelIPv4,\n-    datagramChannelIPv6;\n+    private DatagramChannel datagramChannel, datagramChannelIPv4, datagramChannelIPv6;\n@@ -68,2 +59,0 @@\n-    private static final Class<AccessControlException> ACE =\n-            AccessControlException.class;\n@@ -74,2 +63,1 @@\n-        loopbackZeroAddr = new\n-                InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+        loopbackZeroAddr = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n@@ -102,25 +90,0 @@\n-    @Test(dataProvider = \"data\")\n-    public void testSendWithSecurityManager(DatagramChannel dc) {\n-        Policy defaultPolicy = Policy.getPolicy();\n-        try {\n-            Policy.setPolicy(new SendPortZero.NoSendPolicy());\n-            System.setSecurityManager(new SecurityManager());\n-\n-            assertThrows(ACE, () -> dc.connect(loopbackZeroAddr));\n-            assertThrows(ACE, () -> dc.connect(wildcardZeroAddr));\n-        } finally {\n-            System.setSecurityManager(null);\n-            Policy.setPolicy(defaultPolicy);\n-        }\n-    }\n-\n-    static class NoSendPolicy extends Policy {\n-        final PermissionCollection perms = new Permissions();\n-        { perms.add(\n-                new SocketPermission(\"*:0\", \"connect\")); }\n-\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            return !perms.implies(perm);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/ConnectPortZero.java","additions":6,"deletions":43,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.net.SocketPermission;\n@@ -36,6 +35,0 @@\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -56,4 +49,3 @@\n- * @summary Check that DatagramChannel throws expected Exception when sending to\n- *          port 0\n- * @run testng\/othervm -Djava.security.manager=allow SendPortZero\n- * @run testng\/othervm -Djava.security.manager=allow -Djava.net.preferIPv4Stack=true SendPortZero\n+ * @summary Check that DatagramChannel throws expected Exception when sending to port 0\n+ * @run testng\/othervm SendPortZero\n+ * @run testng\/othervm -Djava.net.preferIPv4Stack=true SendPortZero\n@@ -66,2 +58,1 @@\n-    private DatagramChannel datagramChannel, datagramChannelIPv4,\n-    datagramChannelIPv6;\n+    private DatagramChannel datagramChannel, datagramChannelIPv4, datagramChannelIPv6;\n@@ -70,2 +61,0 @@\n-    private static final Class<AccessControlException> ACE =\n-            AccessControlException.class;\n@@ -78,2 +67,1 @@\n-        loopbackZeroAddr = new\n-                InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+        loopbackZeroAddr = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n@@ -106,25 +94,0 @@\n-    @Test(dataProvider = \"data\")\n-    public void testSendWithSecurityManager(DatagramChannel dc) {\n-        Policy defaultPolicy = Policy.getPolicy();\n-        try {\n-            Policy.setPolicy(new NoSendPolicy());\n-            System.setSecurityManager(new SecurityManager());\n-\n-            assertThrows(ACE, () -> dc.send(buf, loopbackZeroAddr));\n-            assertThrows(ACE, () -> dc.send(buf, wildcardZeroAddr));\n-        } finally {\n-            System.setSecurityManager(null);\n-            Policy.setPolicy(defaultPolicy);\n-        }\n-    }\n-\n-    static class NoSendPolicy extends Policy {\n-        final PermissionCollection perms = new Permissions();\n-        { perms.add(\n-                new SocketPermission(\"*:0\", \"connect\")); }\n-\n-        public boolean implies(ProtectionDomain domain, Permission perm) {\n-            return !perms.implies(perm);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/SendPortZero.java","additions":6,"deletions":43,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8236582\n- * @summary Tests the map method when running with a security manager\n- * @run main\/othervm -Djava.security.manager=allow MapWithSecurityManager\n- *\/\n-\n-import java.io.IOException;\n-import java.nio.channels.FileChannel;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-\n-public class MapWithSecurityManager {\n-    public static void main(String[] args) throws IOException {\n-        Path tempFile = Files.createTempFile(\"test\", \"test\");\n-        try (FileChannel ch = FileChannel.open(tempFile)) {\n-             System.setSecurityManager(new SecurityManager());\n-             ch.map(FileChannel.MapMode.READ_ONLY, 0, 0);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/MapWithSecurityManager.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,2 +65,0 @@\n-    private static final Path POLICY_PASS = Paths.get(TEST_SRC, \"java.policy.pass\");\n-    private static final Path POLICY_FAIL = Paths.get(TEST_SRC, \"java.policy.fail\");\n@@ -85,19 +83,0 @@\n-\n-            \/\/ run StateTest with a SecurityManager set\n-            \/\/ Note that the system properties are arguments to StateTest and not options.\n-            \/\/ These system properties are passed to the launched service as options:\n-            \/\/ java [-options] class [args...]\n-\n-            { \"StateTest run with \" + POLICY_PASS, List.of(StateTest.class.getName(),\n-                                                           \"-Djava.security.manager\",\n-                                                           \"-Dtest.classes=\" + TEST_CLASSES,\n-                                                           \"-Djava.security.policy=\"\n-                                                           + POLICY_PASS)\n-            },\n-            { \"StateTest run with \" + POLICY_FAIL, List.of(StateTest.class.getName(),\n-                                                           \"-expectFail\",\n-                                                           \"-Djava.security.manager\",\n-                                                           \"-Dtest.classes=\" + TEST_CLASSES,\n-                                                           \"-Djava.security.policy=\"\n-                                                           + POLICY_FAIL)\n-            }\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/InheritedChannelTest.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,6 +108,1 @@\n-            Channel c = null;\n-            try {\n-                c = System.inheritedChannel();\n-            } catch (SecurityException se) {\n-                \/\/ ignore\n-            }\n+            Channel c = System.inheritedChannel();\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/StateTestService.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,11 +0,0 @@\n-\/\/\n-\/\/ Used by unit tests for System.inheritedChannel() method. This policy\n-\/\/ file allows doesn't grant the service the runtime permission needed\n-\/\/ to obtain the inherited channel but does grant the socket permission\n-\/\/ needed to report a test result over a socket connection.\n-\/\/\n-grant {\n-    permission java.net.SocketPermission \"*:1024-\", \"resolve,connect\";\n-    permission java.io.FilePermission \"${test.classes}${\/}statetest.txt\", \"read,write\";\n-    permission java.util.PropertyPermission \"test.classes\", \"read\";\n-};\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/java.policy.fail","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -1,11 +0,0 @@\n-\/\/\n-\/\/ Used by unit tests for System.inheritedChannel() method. This policy\n-\/\/ file allows a service to obtain the inherited channel and additionally\n-\/\/ allows the service to report a test result over a socket connection.\n-\/\/\n-grant {\n-    permission java.lang.RuntimePermission \"inheritedChannel\";\n-    permission java.net.SocketPermission \"*:1024-\", \"resolve,connect\";\n-    permission java.io.FilePermission \"${test.classes}${\/}statetest.txt\", \"read,write\";\n-    permission java.util.PropertyPermission \"test.classes\", \"read\";\n-};\n","filename":"test\/jdk\/java\/nio\/channels\/spi\/SelectorProvider\/inheritedChannel\/java.policy.pass","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -1,203 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8245194\n- * @run main\/othervm\/java.security.policy=policy1 Security policy1\n- * @run main\/othervm\/java.security.policy=policy2 Security policy2\n- * @run main\/othervm -Djava.security.manager=allow Security policy3\n- * @summary Security test for Unix Domain socket and server socket channels\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.net.SocketAddress;\n-import java.net.UnixDomainSocketAddress;\n-import java.nio.channels.*;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Comparator;\n-\n-import static java.net.StandardProtocolFamily.UNIX;\n-\n-\/**\n- * Tests required all with security manager\n- *\/\n-\n-public class Security {\n-\n-    static interface Command {\n-        public void run() throws Exception;\n-    }\n-\n-    static <T extends Exception> void call(Command r, Class<? extends Exception> expectedException) {\n-        boolean threw = false;\n-        try {\n-            r.run();\n-        } catch (Throwable t) {\n-            if (expectedException == null) {\n-                t.printStackTrace();\n-                throw new RuntimeException(\"an exception was thrown but was not expected\");\n-            }\n-            threw = true;\n-            if (!(expectedException.isAssignableFrom(t.getClass()))) {\n-                throw new RuntimeException(\"wrong exception type thrown \" + t.toString());\n-            }\n-        }\n-        if (expectedException != null && !threw) {\n-            \/\/ should have thrown\n-            throw new RuntimeException(\"% was expected\".formatted(expectedException.getName()));\n-        }\n-    }\n-\n-\n-    public static void main(String[] args) throws Exception {\n-        try {\n-           SocketChannel.open(UNIX);\n-        } catch (UnsupportedOperationException e) {\n-            System.out.println(\"Unix domain not supported\");\n-            return;\n-        }\n-\n-        String policy = args[0];\n-        switch (policy) {\n-            case \"policy1\":\n-                testPolicy1();\n-                break;\n-            case \"policy2\":\n-                testPolicy2();\n-                break;\n-            case \"policy3\":\n-                testPolicy3();\n-                break;\n-        }\n-    }\n-\n-    static void setSecurityManager(String policy) {\n-        String testSrc = System.getProperty(\"test.src\");\n-        \/\/ Three \/\/\/ required for Windows below\n-        String policyURL = \"file:\/\/\/\" + testSrc + File.separator + policy;\n-        System.out.println(\"POLICY: \" + policyURL);\n-        System.setProperty(\"java.security.policy\", policyURL);\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-\n-    static void close(NetworkChannel... channels) {\n-\n-        for (NetworkChannel chan : channels) {\n-            try {\n-                chan.close();\n-            } catch (Exception e) {\n-            }\n-        }\n-    }\n-\n-    private static final Class<SecurityException> SE = SecurityException.class;\n-    private static final Class<IOException> IOE = IOException.class;\n-\n-    \/\/ No permission\n-\n-    public static void testPolicy1() throws Exception {\n-        Path servername = Path.of(\"sock\");\n-        Files.deleteIfExists(servername);\n-        \/\/ Permission exists to bind a ServerSocketChannel\n-        final UnixDomainSocketAddress saddr = UnixDomainSocketAddress.of(servername);\n-        try (final ServerSocketChannel server = ServerSocketChannel.open(UNIX)) {\n-            try (final SocketChannel client = SocketChannel.open(UNIX)) {\n-                call(() -> {\n-                    server.bind(saddr);\n-                }, SE);\n-                call(() -> {\n-                    client.connect(saddr);\n-                }, SE);\n-            }\n-        } finally {\n-            Files.deleteIfExists(servername);\n-        }\n-    }\n-\n-    \/\/ All permissions\n-\n-    public static void testPolicy2() throws Exception {\n-        Path servername = Path.of(\"sock\");\n-        Files.deleteIfExists(servername);\n-        final UnixDomainSocketAddress saddr = UnixDomainSocketAddress.of(servername);\n-        try (final ServerSocketChannel server = ServerSocketChannel.open(UNIX)) {\n-            try (final SocketChannel client = SocketChannel.open(UNIX)) {\n-                call(() -> {\n-                    server.bind(saddr);\n-                }, null);\n-                call(() -> {\n-                    client.connect(saddr);\n-                }, null);\n-                try (final SocketChannel peer = server.accept()) {\n-                    \/\/ Should succeed\n-                }\n-            }\n-        } finally {\n-            Files.deleteIfExists(servername);\n-        }\n-    }\n-\n-    public static void testPolicy3() throws Exception {\n-        Path sock1 = Path.of(\"sock3\");\n-        Path sock2 = null;\n-        Files.deleteIfExists(sock1);\n-        final UnixDomainSocketAddress saddr = UnixDomainSocketAddress.of(sock1);\n-        try (var s1 = ServerSocketChannel.open(UNIX)) {\n-            s1.bind(saddr);\n-            try (var s2 = ServerSocketChannel.open(UNIX)) {\n-                s2.bind(null);\n-                var add2 = (UnixDomainSocketAddress)s2.getLocalAddress();\n-                sock2 = add2.getPath();\n-\n-                \/\/ Now set security manager and check if we can see addresses\n-\n-                setSecurityManager(\"policy3\");\n-\n-                if (((UnixDomainSocketAddress)s1\n-                            .getLocalAddress())\n-                            .getPath()\n-                            .toString()\n-                            .length() != 0)\n-                {\n-                    throw new RuntimeException(\"address should have been empty\");\n-                }\n-\n-                if (((UnixDomainSocketAddress)s2\n-                            .getLocalAddress())\n-                            .getPath()\n-                            .toString()\n-                            .length() != 0)\n-                {\n-                    throw new RuntimeException(\"address should have been empty\");\n-                }\n-            }\n-        } finally {\n-            System.setSecurityManager(null);\n-            Files.deleteIfExists(sock1);\n-            Files.deleteIfExists(sock2);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/Security.java","additions":0,"deletions":203,"binary":false,"changes":203,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-grant {\n-    \/\/ No permission\n-    permission java.io.FilePermission \"sock\", \"delete\";\n-};\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/policy1","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-grant {\n-    \/\/ permission to bind a SocketChannel in sockets directory\n-    permission java.net.NetPermission \"accessUnixDomainSocket\";\n-\n-    permission java.io.FilePermission \"sock\", \"delete\";\n-};\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/policy2","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-grant {\n-    \/\/ No permission\n-    permission java.io.FilePermission \"sock\", \"delete\";\n-\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-};\n","filename":"test\/jdk\/java\/nio\/channels\/unixdomain\/policy3","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,10 +64,0 @@\n-    private static final List MINIMAL_POLICY = List.of(\n-        \"-Djava.security.manager\",\n-        \"-Djava.security.policy=\" + TEST_SRC + File.separator + \"default-pol\"\n-    );\n-\n-    private static final List CP_POLICY = List.of(\n-        \"-Djava.security.manager\",\n-        \"-Djava.security.policy=\" + TEST_SRC + File.separator + \"charsetProvider.sp\"\n-    );\n-\n@@ -85,5 +75,1 @@\n-                     .flatMap(locale -> Stream.of(\n-                             new Object[]{locale, List.of(\"\"), \"FOO\"},\n-                             new Object[]{locale, MINIMAL_POLICY, \"!FOO\"},\n-                             new Object[]{locale, CP_POLICY, \"FOO\"}\n-                     ))\n+                     .map(locale -> new Object[]{locale, \"FOO\"})\n@@ -94,1 +80,1 @@\n-    public void testDefaultCharset(String locale, List opts, String css) throws Throwable {\n+    public void testDefaultCharset(String locale, String css) throws Throwable {\n@@ -106,1 +92,0 @@\n-        args.addAll(opts);\n","filename":"test\/jdk\/java\/nio\/charset\/spi\/CharsetProviderBasicTest.java","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-\/\/\n-\n-grant { \n-    permission java.lang.RuntimePermission \"charsetProvider\";\n-};\n","filename":"test\/jdk\/java\/nio\/charset\/spi\/charsetProvider.sp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-grant codeBase \"jrt:\/jdk.charsets\" {\n-        permission java.io.FilePermission \"${java.home}\/-\", \"read\";\n-        permission java.util.PropertyPermission \"os.name\", \"read\";\n-        permission java.lang.RuntimePermission \"charsetProvider\";\n-        permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.misc\";\n-        permission java.lang.RuntimePermission \"accessClassInPackage.sun.nio.cs\";\n-};\n-\n-\/\/ default permissions granted to all domains\n-\n-grant { \n-\t\/\/ allows anyone to listen on un-privileged ports\n-\tpermission java.net.SocketPermission \"localhost:1024-\", \"listen\";\n-\n-\t\/\/ \"standard\" properies that can be read by anyone\n-\n-\tpermission java.util.PropertyPermission \"java.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vendor.url\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.class.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.arch\", \"read\";\n-\tpermission java.util.PropertyPermission \"file.separator\", \"read\";\n-\tpermission java.util.PropertyPermission \"path.separator\", \"read\";\n-\tpermission java.util.PropertyPermission \"line.separator\", \"read\";\n-\n-\tpermission java.util.PropertyPermission \"java.specification.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.specification.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.specification.name\", \"read\";\n-\n-\tpermission java.util.PropertyPermission \"java.vm.specification.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.specification.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.specification.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.name\", \"read\";\n-};\n-\n","filename":"test\/jdk\/java\/nio\/charset\/spi\/default-pol","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,792 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 6866804 7006126 8028270 8065109 8289984\n- * @summary Unit test for java.nio.file.Files\n- * @library ..\n- * @build CheckPermissions\n- * @run main\/othervm -Djava.security.manager=allow CheckPermissions\n- *\/\n-\n-import java.nio.ByteBuffer;\n-import java.nio.file.*;\n-import static java.nio.file.Files.*;\n-import static java.nio.file.StandardOpenOption.*;\n-import java.nio.file.attribute.*;\n-import java.nio.channels.SeekableByteChannel;\n-import java.security.Permission;\n-import java.io.*;\n-import java.nio.charset.StandardCharsets;\n-import java.util.*;\n-\n-\/**\n- * Checks each method that accesses the file system does the right permission\n- * check when there is a security manager set.\n- *\/\n-\n-public class CheckPermissions {\n-\n-    static class Checks {\n-        private List<Permission> permissionsChecked = new ArrayList<>();\n-        private Set<String>  propertiesChecked = new HashSet<>();\n-        private List<String> readsChecked   = new ArrayList<>();\n-        private List<String> writesChecked  = new ArrayList<>();\n-        private List<String> deletesChecked = new ArrayList<>();\n-        private List<String> execsChecked   = new ArrayList<>();\n-\n-        List<Permission> permissionsChecked()  { return permissionsChecked; }\n-        Set<String> propertiesChecked()        { return propertiesChecked; }\n-        List<String> readsChecked()            { return readsChecked; }\n-        List<String> writesChecked()           { return writesChecked; }\n-        List<String> deletesChecked()          { return deletesChecked; }\n-        List<String> execsChecked()            { return execsChecked; }\n-    }\n-\n-    static ThreadLocal<Checks> myChecks =\n-        new ThreadLocal<Checks>() {\n-            @Override protected Checks initialValue() {\n-                return null;\n-            }\n-        };\n-\n-    static void prepare() {\n-        myChecks.set(new Checks());\n-    }\n-\n-    static void assertCheckPermission(Permission expected) {\n-        if (!myChecks.get().permissionsChecked().contains(expected))\n-          throw new RuntimeException(expected + \" not checked\");\n-    }\n-\n-    static void assertCheckPropertyAccess(String key) {\n-        if (!myChecks.get().propertiesChecked().contains(key))\n-            throw new RuntimeException(\"Property \" + key + \" not checked\");\n-    }\n-\n-    static void assertChecked(Path file, List<String> list) {\n-        String s = file.toString();\n-        for (String f: list) {\n-            if (f.endsWith(s))\n-                return;\n-        }\n-        throw new RuntimeException(\"Access not checked\");\n-    }\n-\n-    static void assertCheckRead(Path file) {\n-        assertChecked(file, myChecks.get().readsChecked());\n-    }\n-\n-    static void assertCheckWrite(Path file) {\n-        assertChecked(file, myChecks.get().writesChecked());\n-    }\n-\n-    static void assertCheckWriteToDirectory(Path dir) {\n-        String s = dir.toString();\n-        List<String> list = myChecks.get().writesChecked();\n-        for (String f: list) {\n-            if (f.startsWith(s)) {\n-                return;\n-            }\n-        }\n-        throw new RuntimeException(\"Access not checked\");\n-    }\n-\n-    static void assertCheckDelete(Path file) {\n-        assertChecked(file, myChecks.get().deletesChecked());\n-    }\n-\n-    static void assertCheckExec(Path file) {\n-        assertChecked(file, myChecks.get().execsChecked());\n-    }\n-\n-    static class LoggingSecurityManager extends SecurityManager {\n-        static void install() {\n-            System.setSecurityManager(new LoggingSecurityManager());\n-        }\n-\n-        @Override\n-        public void checkPermission(Permission perm) {\n-            Checks checks = myChecks.get();\n-            if (checks != null)\n-                checks.permissionsChecked().add(perm);\n-        }\n-\n-        @Override\n-        public void checkPropertyAccess(String key) {\n-            Checks checks = myChecks.get();\n-            if (checks != null)\n-                checks.propertiesChecked().add(key);\n-        }\n-\n-        @Override\n-        public void checkRead(String file) {\n-            Checks checks = myChecks.get();\n-            if (checks != null)\n-                checks.readsChecked().add(file);\n-        }\n-\n-        @Override\n-        public void checkWrite(String file) {\n-            Checks checks = myChecks.get();\n-            if (checks != null)\n-                checks.writesChecked().add(file);\n-        }\n-\n-        @Override\n-        public void checkDelete(String file) {\n-            Checks checks = myChecks.get();\n-            if (checks != null)\n-                checks.deletesChecked().add(file);\n-        }\n-\n-        @Override\n-        public void checkExec(String file) {\n-            Checks checks = myChecks.get();\n-            if (checks != null)\n-                checks.execsChecked().add(file);\n-        }\n-    }\n-\n-    static void testBasicFileAttributeView(BasicFileAttributeView view, Path file)\n-        throws IOException\n-    {\n-        prepare();\n-        view.readAttributes();\n-        assertCheckRead(file);\n-\n-        prepare();\n-        FileTime now = FileTime.fromMillis(System.currentTimeMillis());\n-        view.setTimes(null, now, now);\n-        assertCheckWrite(file);\n-    }\n-\n-    static void testPosixFileAttributeView(PosixFileAttributeView view, Path file)\n-        throws IOException\n-    {\n-        prepare();\n-        PosixFileAttributes attrs = view.readAttributes();\n-        assertCheckRead(file);\n-        assertCheckPermission(new RuntimePermission(\"accessUserInformation\"));\n-\n-        prepare();\n-        view.setPermissions(attrs.permissions());\n-        assertCheckWrite(file);\n-        assertCheckPermission(new RuntimePermission(\"accessUserInformation\"));\n-\n-        prepare();\n-        view.setOwner(attrs.owner());\n-        assertCheckWrite(file);\n-        assertCheckPermission(new RuntimePermission(\"accessUserInformation\"));\n-\n-        prepare();\n-        view.setOwner(attrs.owner());\n-        assertCheckWrite(file);\n-        assertCheckPermission(new RuntimePermission(\"accessUserInformation\"));\n-    }\n-\n-    public static void main(String[] args) throws IOException {\n-        final Path testdir = Paths.get(System.getProperty(\"test.dir\", \".\")).toAbsolutePath();\n-        final Path tmpdir = Paths.get(System.getProperty(\"java.io.tmpdir\"));\n-\n-        Path file = createFile(testdir.resolve(\"file1234\"));\n-        try {\n-            LoggingSecurityManager.install();\n-\n-            \/\/ -- check access --\n-\n-            prepare();\n-            exists(file);\n-            assertCheckRead(file);\n-\n-            prepare();\n-            isDirectory(file);\n-            assertCheckRead(file);\n-\n-            prepare();\n-            isRegularFile(file);\n-            assertCheckRead(file);\n-\n-            prepare();\n-            isReadable(file);\n-            assertCheckRead(file);\n-\n-            prepare();\n-            isWritable(file);\n-            assertCheckWrite(file);\n-\n-            prepare();\n-            isExecutable(file);\n-            assertCheckExec(file);\n-\n-            \/\/ -- copy --\n-\n-            Path target = testdir.resolve(\"target1234\");\n-            prepare();\n-            copy(file, target);\n-            try {\n-                assertCheckRead(file);\n-                assertCheckWrite(target);\n-            } finally {\n-                delete(target);\n-            }\n-\n-            if (TestUtil.supportsSymbolicLinks(testdir)) {\n-                Path link = testdir.resolve(\"link1234\");\n-                createSymbolicLink(link, file);\n-                try {\n-                    prepare();\n-                    copy(link, target, LinkOption.NOFOLLOW_LINKS);\n-                    try {\n-                        assertCheckRead(link);\n-                        assertCheckWrite(target);\n-                        assertCheckPermission(new LinkPermission(\"symbolic\"));\n-                    } finally {\n-                        delete(target);\n-                    }\n-\n-                    prepare();\n-                    readSymbolicLink(link);\n-                    assertCheckPermission(new FilePermission(link.toString(), \"readlink\"));\n-                } finally {\n-                    delete(link);\n-                }\n-            }\n-\n-            \/\/ -- createDirectory --\n-\n-            Path subdir = testdir.resolve(\"subdir1234\");\n-            prepare();\n-            createDirectory(subdir);\n-            try {\n-                assertCheckWrite(subdir);\n-            } finally {\n-                delete(subdir);\n-            }\n-\n-            \/\/ -- createFile --\n-\n-            Path fileToCreate = testdir.resolve(\"file7890\");\n-            prepare();\n-            createFile(fileToCreate);\n-            try {\n-                assertCheckWrite(fileToCreate);\n-            } finally {\n-                delete(fileToCreate);\n-            }\n-\n-            \/\/ -- createSymbolicLink --\n-\n-            if (TestUtil.supportsSymbolicLinks(testdir)) {\n-                prepare();\n-                Path link = testdir.resolve(\"link1234\");\n-                createSymbolicLink(link, file);\n-                try {\n-                    assertCheckWrite(link);\n-                    assertCheckPermission(new LinkPermission(\"symbolic\"));\n-                } finally {\n-                    delete(link);\n-                }\n-            }\n-\n-            \/\/ -- createLink --\n-\n-            if (TestUtil.supportsHardLinks(testdir)) {\n-                prepare();\n-                Path link = testdir.resolve(\"entry234\");\n-                createLink(link, file);\n-                try {\n-                    assertCheckWrite(link);\n-                    assertCheckPermission(new LinkPermission(\"hard\"));\n-                } finally {\n-                    delete(link);\n-                }\n-            }\n-\n-            \/\/ -- createTempFile --\n-\n-            prepare();\n-            Path tmpfile1 = createTempFile(\"foo\", null);\n-            try {\n-                assertCheckWriteToDirectory(tmpdir);\n-            } finally {\n-                delete(tmpfile1);\n-            }\n-            prepare();\n-            Path tmpfile2 = createTempFile(testdir, \"foo\", \".tmp\");\n-            try {\n-                assertCheckWriteToDirectory(testdir);\n-            } finally {\n-                delete(tmpfile2);\n-            }\n-\n-            \/\/ -- createTempDirectory --\n-\n-            prepare();\n-            Path tmpdir1 = createTempDirectory(\"foo\");\n-            try {\n-                assertCheckWriteToDirectory(tmpdir);\n-            } finally {\n-                delete(tmpdir1);\n-            }\n-            prepare();\n-            Path tmpdir2 = createTempDirectory(testdir, \"foo\");\n-            try {\n-                assertCheckWriteToDirectory(testdir);\n-            } finally {\n-                delete(tmpdir2);\n-            }\n-\n-            \/\/ -- delete\/deleteIfExists --\n-\n-            Path fileToDelete = testdir.resolve(\"file7890\");\n-\n-            createFile(fileToDelete);\n-            prepare();\n-            delete(fileToDelete);\n-            assertCheckDelete(fileToDelete);\n-\n-            createFile(fileToDelete);\n-            prepare();\n-            deleteIfExists(fileToDelete);   \/\/ file exists\n-            assertCheckDelete(fileToDelete);\n-\n-            prepare();\n-            deleteIfExists(fileToDelete);   \/\/ file does not exist\n-            assertCheckDelete(fileToDelete);\n-\n-            \/\/ -- exists\/notExists --\n-\n-            prepare();\n-            exists(file);\n-            assertCheckRead(file);\n-\n-            prepare();\n-            notExists(file);\n-            assertCheckRead(file);\n-\n-            \/\/ -- getFileStore --\n-\n-            prepare();\n-            getFileStore(file);\n-            assertCheckRead(file);\n-            assertCheckPermission(new RuntimePermission(\"getFileStoreAttributes\"));\n-\n-            \/\/ -- isSameFile --\n-\n-            prepare();\n-            isSameFile(file, testdir);\n-            assertCheckRead(file);\n-            assertCheckRead(testdir);\n-\n-            \/\/ -- move --\n-\n-            Path target2 = testdir.resolve(\"target1234\");\n-            prepare();\n-            move(file, target2);\n-            try {\n-                assertCheckWrite(file);\n-                assertCheckWrite(target2);\n-            } finally {\n-                \/\/ restore file\n-                move(target2, file);\n-            }\n-\n-            \/\/ -- newByteChannel --\n-\n-            prepare();\n-            try (SeekableByteChannel sbc = newByteChannel(file)) {\n-                assertCheckRead(file);\n-            }\n-            prepare();\n-            try (SeekableByteChannel sbc = newByteChannel(file, WRITE)) {\n-                assertCheckWrite(file);\n-            }\n-            prepare();\n-            try (SeekableByteChannel sbc = newByteChannel(file, READ, WRITE)) {\n-                assertCheckRead(file);\n-                assertCheckWrite(file);\n-            }\n-\n-            prepare();\n-            try (SeekableByteChannel sbc = newByteChannel(file, DELETE_ON_CLOSE)) {\n-                assertCheckRead(file);\n-                assertCheckDelete(file);\n-            }\n-            createFile(file); \/\/ restore file\n-\n-            \/\/ -- newBufferedReader\/newBufferedWriter --\n-\n-            prepare();\n-            try (BufferedReader br = newBufferedReader(file)) {\n-                assertCheckRead(file);\n-            }\n-\n-            prepare();\n-            try (BufferedWriter bw = newBufferedWriter(file, WRITE)) {\n-                assertCheckWrite(file);\n-            }\n-\n-            prepare();\n-            try (BufferedWriter bw = newBufferedWriter(file, DELETE_ON_CLOSE)) {\n-                assertCheckWrite(file);\n-                assertCheckDelete(file);\n-            }\n-            createFile(file); \/\/ restore file\n-\n-            prepare();\n-            try (BufferedWriter bw = newBufferedWriter(file,\n-                StandardCharsets.UTF_16, WRITE)) {\n-                assertCheckWrite(file);\n-            }\n-\n-            prepare();\n-            try (BufferedWriter bw = newBufferedWriter(file,\n-                StandardCharsets.UTF_16, DELETE_ON_CLOSE)) {\n-                assertCheckWrite(file);\n-                assertCheckDelete(file);\n-            }\n-            createFile(file); \/\/ restore file\n-\n-            \/\/ -- newInputStream\/newOutputStream --\n-\n-            prepare();\n-            try (InputStream in = newInputStream(file)) {\n-                assertCheckRead(file);\n-            }\n-            prepare();\n-            try (OutputStream out = newOutputStream(file)) {\n-                assertCheckWrite(file);\n-            }\n-\n-            \/\/ -- write --\n-\n-            prepare();\n-            Files.write(file, new byte[]{(byte) 42, (byte) 666}, WRITE);\n-            assertCheckWrite(file);\n-\n-            prepare();\n-            Files.write(file, new byte[]{(byte) 42, (byte) 666}, WRITE,\n-                DELETE_ON_CLOSE);\n-            assertCheckWrite(file);\n-            assertCheckDelete(file);\n-            createFile(file); \/\/ restore file\n-\n-            List<String> lines = Arrays.asList(\"42\", \"666\");\n-\n-            prepare();\n-            Files.write(file, lines, StandardCharsets.UTF_16, WRITE);\n-            assertCheckWrite(file);\n-\n-            prepare();\n-            Files.write(file, lines, StandardCharsets.UTF_16, WRITE,\n-                DELETE_ON_CLOSE);\n-            assertCheckWrite(file);\n-            assertCheckDelete(file);\n-            createFile(file); \/\/ restore file\n-\n-            prepare();\n-            Files.write(file, lines, WRITE);\n-            assertCheckWrite(file);\n-\n-            prepare();\n-            Files.write(file, lines, WRITE, DELETE_ON_CLOSE);\n-            assertCheckWrite(file);\n-            assertCheckDelete(file);\n-            createFile(file); \/\/ restore file\n-\n-            \/\/ -- newDirectoryStream --\n-\n-            prepare();\n-            try (DirectoryStream<Path> stream = newDirectoryStream(testdir)) {\n-                assertCheckRead(testdir);\n-\n-                if (stream instanceof SecureDirectoryStream<?>) {\n-                    Path entry;\n-                    SecureDirectoryStream<Path> sds =\n-                        (SecureDirectoryStream<Path>)stream;\n-\n-                    \/\/ newByteChannel\n-                    entry = file.getFileName();\n-                    prepare();\n-                    try (SeekableByteChannel sbc = sds.newByteChannel(entry, EnumSet.of(READ))) {\n-                        assertCheckRead(file);\n-                    }\n-                    prepare();\n-                    try (SeekableByteChannel sbc = sds.newByteChannel(entry, EnumSet.of(WRITE))) {\n-                        assertCheckWrite(file);\n-                    }\n-\n-                    \/\/ deleteFile\n-                    entry = file.getFileName();\n-                    prepare();\n-                    sds.deleteFile(entry);\n-                    assertCheckDelete(file);\n-                    createFile(testdir.resolve(entry));  \/\/ restore file\n-\n-                    \/\/ deleteDirectory\n-                    entry = Paths.get(\"subdir1234\");\n-                    createDirectory(testdir.resolve(entry));\n-                    prepare();\n-                    sds.deleteDirectory(entry);\n-                    assertCheckDelete(testdir.resolve(entry));\n-\n-                    \/\/ move\n-                    entry = Paths.get(\"tempname1234\");\n-                    prepare();\n-                    sds.move(file.getFileName(), sds, entry);\n-                    assertCheckWrite(file);\n-                    assertCheckWrite(testdir.resolve(entry));\n-                    sds.move(entry, sds, file.getFileName());  \/\/ restore file\n-\n-                    \/\/ newDirectoryStream\n-                    entry = Paths.get(\"subdir1234\");\n-                    createDirectory(testdir.resolve(entry));\n-                    try {\n-                        prepare();\n-                        sds.newDirectoryStream(entry).close();\n-                        assertCheckRead(testdir.resolve(entry));\n-                    } finally {\n-                        delete(testdir.resolve(entry));\n-                    }\n-\n-                    \/\/ getFileAttributeView to access attributes of directory\n-                    testBasicFileAttributeView(sds\n-                        .getFileAttributeView(BasicFileAttributeView.class), testdir);\n-                    testPosixFileAttributeView(sds\n-                        .getFileAttributeView(PosixFileAttributeView.class), testdir);\n-\n-                    \/\/ getFileAttributeView to access attributes of entry\n-                    entry = file.getFileName();\n-                    testBasicFileAttributeView(sds\n-                        .getFileAttributeView(entry, BasicFileAttributeView.class), file);\n-                    testPosixFileAttributeView(sds\n-                        .getFileAttributeView(entry, PosixFileAttributeView.class), file);\n-\n-                } else {\n-                    System.out.println(\"SecureDirectoryStream not tested\");\n-                }\n-            }\n-\n-            \/\/ -- toAbsolutePath --\n-\n-            prepare();\n-            file.getFileName().toAbsolutePath();\n-            assertCheckPropertyAccess(\"user.dir\");\n-\n-            \/\/ -- toRealPath --\n-\n-            prepare();\n-            file.toRealPath();\n-            assertCheckRead(file);\n-\n-            prepare();\n-            file.toRealPath(LinkOption.NOFOLLOW_LINKS);\n-            assertCheckRead(file);\n-\n-            prepare();\n-            Paths.get(\".\").toRealPath();\n-            assertCheckPropertyAccess(\"user.dir\");\n-\n-            prepare();\n-            Paths.get(\".\").toRealPath(LinkOption.NOFOLLOW_LINKS);\n-            assertCheckPropertyAccess(\"user.dir\");\n-\n-            \/\/ -- register --\n-\n-            try (WatchService watcher = FileSystems.getDefault().newWatchService()) {\n-                prepare();\n-                testdir.register(watcher, StandardWatchEventKinds.ENTRY_DELETE);\n-                assertCheckRead(testdir);\n-            }\n-\n-            \/\/ -- getAttribute\/setAttribute\/readAttributes --\n-\n-            prepare();\n-            getAttribute(file, \"size\");\n-            assertCheckRead(file);\n-\n-            prepare();\n-            setAttribute(file, \"lastModifiedTime\",\n-                FileTime.fromMillis(System.currentTimeMillis()));\n-            assertCheckWrite(file);\n-\n-            prepare();\n-            readAttributes(file, \"*\");\n-            assertCheckRead(file);\n-\n-            \/\/ -- BasicFileAttributeView --\n-            testBasicFileAttributeView(\n-                getFileAttributeView(file, BasicFileAttributeView.class), file);\n-\n-            \/\/ -- PosixFileAttributeView --\n-\n-            {\n-                PosixFileAttributeView view =\n-                    getFileAttributeView(file, PosixFileAttributeView.class);\n-                if (view != null &&\n-                    getFileStore(file).supportsFileAttributeView(PosixFileAttributeView.class))\n-                {\n-                    testPosixFileAttributeView(view, file);\n-                } else {\n-                    System.out.println(\"PosixFileAttributeView not tested\");\n-                }\n-            }\n-\n-            \/\/ -- DosFileAttributeView --\n-\n-            {\n-                DosFileAttributeView view =\n-                    getFileAttributeView(file, DosFileAttributeView.class);\n-                if (view != null &&\n-                    getFileStore(file).supportsFileAttributeView(DosFileAttributeView.class))\n-                {\n-                    prepare();\n-                    view.readAttributes();\n-                    assertCheckRead(file);\n-\n-                    prepare();\n-                    view.setArchive(false);\n-                    assertCheckWrite(file);\n-\n-                    prepare();\n-                    view.setHidden(false);\n-                    assertCheckWrite(file);\n-\n-                    prepare();\n-                    view.setReadOnly(false);\n-                    assertCheckWrite(file);\n-\n-                    prepare();\n-                    view.setSystem(false);\n-                    assertCheckWrite(file);\n-                } else {\n-                    System.out.println(\"DosFileAttributeView not tested\");\n-                }\n-            }\n-\n-            \/\/ -- FileOwnerAttributeView --\n-\n-            {\n-                FileOwnerAttributeView view =\n-                    getFileAttributeView(file, FileOwnerAttributeView.class);\n-                if (view != null &&\n-                    getFileStore(file).supportsFileAttributeView(FileOwnerAttributeView.class))\n-                {\n-                    prepare();\n-                    UserPrincipal owner = view.getOwner();\n-                    assertCheckRead(file);\n-                    assertCheckPermission(new RuntimePermission(\"accessUserInformation\"));\n-\n-                    prepare();\n-                    view.setOwner(owner);\n-                    assertCheckWrite(file);\n-                    assertCheckPermission(new RuntimePermission(\"accessUserInformation\"));\n-\n-                } else {\n-                    System.out.println(\"FileOwnerAttributeView not tested\");\n-                }\n-            }\n-\n-            \/\/ -- UserDefinedFileAttributeView --\n-\n-            {\n-                UserDefinedFileAttributeView view =\n-                    getFileAttributeView(file, UserDefinedFileAttributeView.class);\n-                if (view != null &&\n-                    getFileStore(file).supportsFileAttributeView(UserDefinedFileAttributeView.class))\n-                {\n-                    prepare();\n-                    view.write(\"test\", ByteBuffer.wrap(new byte[100]));\n-                    assertCheckWrite(file);\n-                    assertCheckPermission(new RuntimePermission(\"accessUserDefinedAttributes\"));\n-\n-                    prepare();\n-                    view.read(\"test\", ByteBuffer.allocate(100));\n-                    assertCheckRead(file);\n-                    assertCheckPermission(new RuntimePermission(\"accessUserDefinedAttributes\"));\n-\n-                    prepare();\n-                    view.size(\"test\");\n-                    assertCheckRead(file);\n-                    assertCheckPermission(new RuntimePermission(\"accessUserDefinedAttributes\"));\n-\n-                    prepare();\n-                    view.list();\n-                    assertCheckRead(file);\n-                    assertCheckPermission(new RuntimePermission(\"accessUserDefinedAttributes\"));\n-\n-                    prepare();\n-                    view.delete(\"test\");\n-                    assertCheckWrite(file);\n-                    assertCheckPermission(new RuntimePermission(\"accessUserDefinedAttributes\"));\n-                } else {\n-                    System.out.println(\"UserDefinedFileAttributeView not tested\");\n-                }\n-            }\n-\n-            \/\/ -- AclFileAttributeView --\n-            {\n-                AclFileAttributeView view =\n-                    getFileAttributeView(file, AclFileAttributeView.class);\n-                if (view != null &&\n-                    getFileStore(file).supportsFileAttributeView(AclFileAttributeView.class))\n-                {\n-                    prepare();\n-                    List<AclEntry> acl = view.getAcl();\n-                    assertCheckRead(file);\n-                    assertCheckPermission(new RuntimePermission(\"accessUserInformation\"));\n-                    prepare();\n-                    view.setAcl(acl);\n-                    assertCheckWrite(file);\n-                    assertCheckPermission(new RuntimePermission(\"accessUserInformation\"));\n-                } else {\n-                    System.out.println(\"AclFileAttributeView not tested\");\n-                }\n-            }\n-\n-            \/\/ -- UserPrincipalLookupService\n-\n-            UserPrincipalLookupService lookupService =\n-                FileSystems.getDefault().getUserPrincipalLookupService();\n-            UserPrincipal owner = getOwner(file);\n-\n-            prepare();\n-            lookupService.lookupPrincipalByName(owner.getName());\n-            assertCheckPermission(new RuntimePermission(\"lookupUserInformation\"));\n-\n-            try {\n-                UserPrincipal group = readAttributes(file, PosixFileAttributes.class).group();\n-                prepare();\n-                lookupService.lookupPrincipalByGroupName(group.getName());\n-                assertCheckPermission(new RuntimePermission(\"lookupUserInformation\"));\n-            } catch (UnsupportedOperationException ignore) {\n-                System.out.println(\"lookupPrincipalByGroupName not tested\");\n-            }\n-\n-\n-        } finally {\n-            deleteIfExists(file);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/file\/Files\/CheckPermissions.java","additions":0,"deletions":792,"binary":false,"changes":792,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm\/java.security.policy=copy.policy CopyToNonDefaultFS\n+ * @run main\/othervm CopyToNonDefaultFS\n","filename":"test\/jdk\/java\/nio\/file\/Files\/CopyToNonDefaultFS.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -217,4 +217,0 @@\n-            if (filename.equals(\"SecurityException\")) {\n-                throw new SecurityException(\"FaultyFS\", new FaultyException());\n-            }\n-\n@@ -405,4 +401,0 @@\n-                                } catch (SecurityException se) {\n-                                    \/\/ ??? Does DS throw SecurityException during iteration?\n-                                    next = null;\n-                                    return hasNext();\n","filename":"test\/jdk\/java\/nio\/file\/Files\/FaultyFileSystem.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -503,151 +503,0 @@\n-    public void testSecurityException() throws IOException {\n-        Path empty = testFolder.resolve(\"empty\");\n-        Path triggerFile = Files.createFile(empty.resolve(\"SecurityException\"));\n-        Path sampleFile = Files.createDirectories(empty.resolve(\"sample\"));\n-\n-        Path dir2 = testFolder.resolve(\"dir2\");\n-        Path triggerDir = Files.createDirectories(dir2.resolve(\"SecurityException\"));\n-        Files.createFile(triggerDir.resolve(\"fileInSE\"));\n-        Path sample = Files.createFile(dir2.resolve(\"file\"));\n-\n-        Path triggerLink = null;\n-        Path linkTriggerDir = null;\n-        Path linkTriggerFile = null;\n-        if (supportsSymbolicLinks) {\n-            Path dir = testFolder.resolve(\"dir\");\n-            triggerLink = Files.createSymbolicLink(dir.resolve(\"SecurityException\"), empty);\n-            linkTriggerDir = Files.createSymbolicLink(dir.resolve(\"lnDirSE\"), triggerDir);\n-            linkTriggerFile = Files.createSymbolicLink(dir.resolve(\"lnFileSE\"), triggerFile);\n-        }\n-\n-        FaultyFileSystem.FaultyFSProvider fsp = FaultyFileSystem.FaultyFSProvider.getInstance();\n-        FaultyFileSystem fs = (FaultyFileSystem) fsp.newFileSystem(testFolder, null);\n-\n-        try {\n-            fsp.setFaultyMode(false);\n-            Path fakeRoot = fs.getRoot();\n-            \/\/ validate setting\n-            try (Stream<Path> s = Files.list(fakeRoot.resolve(\"empty\"))) {\n-                String[] result = s.map(path -> path.getFileName().toString())\n-                                   .toArray(String[]::new);\n-                assertEqualsNoOrder(result, new String[] { \"SecurityException\", \"sample\" });\n-            }\n-\n-            try (Stream<Path> s = Files.walk(fakeRoot.resolve(\"dir2\"))) {\n-                String[] result = s.map(path -> path.getFileName().toString())\n-                                   .toArray(String[]::new);\n-                assertEqualsNoOrder(result, new String[] { \"dir2\", \"SecurityException\", \"fileInSE\", \"file\" });\n-            }\n-\n-            if (supportsSymbolicLinks) {\n-                try (Stream<Path> s = Files.list(fakeRoot.resolve(\"dir\"))) {\n-                    String[] result = s.map(path -> path.getFileName().toString())\n-                                       .toArray(String[]::new);\n-                    assertEqualsNoOrder(result, new String[] { \"d1\", \"f1\", \"lnDir2\", \"SecurityException\", \"lnDirSE\", \"lnFileSE\" });\n-                }\n-            }\n-\n-            \/\/ execute test\n-            fsp.setFaultyMode(true);\n-            \/\/ ignore file cause SecurityException\n-            try (Stream<Path> s = Files.walk(fakeRoot.resolve(\"empty\"))) {\n-                String[] result = s.map(path -> path.getFileName().toString())\n-                                   .toArray(String[]::new);\n-                assertEqualsNoOrder(result, new String[] { \"empty\", \"sample\" });\n-            }\n-            \/\/ skip folder cause SecurityException\n-            try (Stream<Path> s = Files.walk(fakeRoot.resolve(\"dir2\"))) {\n-                String[] result = s.map(path -> path.getFileName().toString())\n-                                   .toArray(String[]::new);\n-                assertEqualsNoOrder(result, new String[] { \"dir2\", \"file\" });\n-            }\n-\n-            if (supportsSymbolicLinks) {\n-                \/\/ not following links\n-                try (Stream<Path> s = Files.walk(fakeRoot.resolve(\"dir\"))) {\n-                    String[] result = s.map(path -> path.getFileName().toString())\n-                                       .toArray(String[]::new);\n-                    assertEqualsNoOrder(result, new String[] { \"dir\", \"d1\", \"f1\", \"lnDir2\", \"lnDirSE\", \"lnFileSE\" });\n-                }\n-\n-                \/\/ following links\n-                try (Stream<Path> s = Files.walk(fakeRoot.resolve(\"dir\"), FileVisitOption.FOLLOW_LINKS)) {\n-                    String[] result = s.map(path -> path.getFileName().toString())\n-                                       .toArray(String[]::new);\n-                    \/\/ ?? Should fileInSE show up?\n-                    \/\/ With FaultyFS, it does as no exception thrown for link to \"SecurityException\" with read on \"lnXxxSE\"\n-                    assertEqualsNoOrder(result, new String[] { \"dir\", \"d1\", \"f1\", \"lnDir2\", \"file\", \"lnDirSE\", \"lnFileSE\", \"fileInSE\" });\n-                }\n-            }\n-\n-            \/\/ list instead of walk\n-            try (Stream<Path> s = Files.list(fakeRoot.resolve(\"empty\"))) {\n-                String[] result = s.map(path -> path.getFileName().toString())\n-                                   .toArray(String[]::new);\n-                assertEqualsNoOrder(result, new String[] { \"sample\" });\n-            }\n-            try (Stream<Path> s = Files.list(fakeRoot.resolve(\"dir2\"))) {\n-                String[] result = s.map(path -> path.getFileName().toString())\n-                                   .toArray(String[]::new);\n-                assertEqualsNoOrder(result, new String[] { \"file\" });\n-            }\n-\n-            \/\/ root cause SecurityException should be reported\n-            try (Stream<Path> s = Files.walk(\n-                fakeRoot.resolve(\"dir2\").resolve(\"SecurityException\")))\n-            {\n-                String[] result = s.map(path -> path.getFileName().toString())\n-                                   .toArray(String[]::new);\n-                fail(\"should not reach here due to SecurityException\");\n-            } catch (SecurityException se) {\n-                assertTrue(se.getCause() instanceof FaultyFileSystem.FaultyException);\n-            }\n-\n-            \/\/ Walk a file cause SecurityException, we should get SE\n-            try (Stream<Path> s = Files.walk(\n-                fakeRoot.resolve(\"dir\").resolve(\"SecurityException\")))\n-            {\n-                String[] result = s.map(path -> path.getFileName().toString())\n-                                   .toArray(String[]::new);\n-                fail(\"should not reach here due to SecurityException\");\n-            } catch (SecurityException se) {\n-                assertTrue(se.getCause() instanceof FaultyFileSystem.FaultyException);\n-            }\n-\n-            \/\/ List a file cause SecurityException, we should get SE as cannot read attribute\n-            try (Stream<Path> s = Files.list(\n-                fakeRoot.resolve(\"dir2\").resolve(\"SecurityException\")))\n-            {\n-                String[] result = s.map(path -> path.getFileName().toString())\n-                                   .toArray(String[]::new);\n-                fail(\"should not reach here due to SecurityException\");\n-            } catch (SecurityException se) {\n-                assertTrue(se.getCause() instanceof FaultyFileSystem.FaultyException);\n-            }\n-\n-            try (Stream<Path> s = Files.list(\n-                fakeRoot.resolve(\"dir\").resolve(\"SecurityException\")))\n-            {\n-                String[] result = s.map(path -> path.getFileName().toString())\n-                                   .toArray(String[]::new);\n-                fail(\"should not reach here due to SecurityException\");\n-            } catch (SecurityException se) {\n-                assertTrue(se.getCause() instanceof FaultyFileSystem.FaultyException);\n-            }\n-         } finally {\n-            \/\/ Cleanup\n-            if (fs != null) {\n-                fs.close();\n-            }\n-            if (supportsSymbolicLinks) {\n-                Files.delete(triggerLink);\n-                Files.delete(linkTriggerDir);\n-                Files.delete(linkTriggerFile);\n-            }\n-            Files.delete(triggerFile);\n-            Files.delete(sampleFile);\n-            Files.delete(sample);\n-            TestUtil.removeAll(triggerDir);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/nio\/file\/Files\/StreamTest.java","additions":0,"deletions":151,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write\";\n-    permission java.io.FilePermission \"out.zip\", \"delete\";\n-};\n","filename":"test\/jdk\/java\/nio\/file\/Files\/copy.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,129 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 6876541\n- * @summary Test Files.walkFileTree in the presence of a security manager\n- * @build WalkWithSecurity\n- * @run main\/othervm -Djava.security.manager=allow WalkWithSecurity grantAll.policy pass\n- * @run main\/othervm -Djava.security.manager=allow WalkWithSecurity denyAll.policy fail\n- * @run main\/othervm -Djava.security.manager=allow WalkWithSecurity grantTopOnly.policy top_only\n- *\/\n-\n-import java.nio.file.*;\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.io.IOException;\n-\n-public class WalkWithSecurity {\n-\n-    public static void main(String[] args) throws IOException {\n-        String policyFile = args[0];\n-        ExpectedResult expectedResult = ExpectedResult.valueOf(args[1].toUpperCase());\n-\n-        String here = System.getProperty(\"user.dir\");\n-        String testSrc = System.getProperty(\"test.src\");\n-        if (testSrc == null)\n-            throw new RuntimeException(\"This test must be run by jtreg\");\n-        Path dir = Paths.get(testSrc);\n-\n-        \/\/ Sanity check the environment\n-        if (Files.isSameFile(Paths.get(here), dir))\n-            throw new RuntimeException(\"Working directory cannot be \" + dir);\n-        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n-            if (!stream.iterator().hasNext())\n-                throw new RuntimeException(testSrc + \" is empty\");\n-        }\n-\n-        \/\/ Install security manager with the given policy file\n-        System.setProperty(\"java.security.policy\",\n-            dir.resolve(policyFile).toString());\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ Walk the source tree\n-        CountingVisitor visitor = new CountingVisitor();\n-        SecurityException exception = null;\n-        try {\n-            Files.walkFileTree(dir, visitor);\n-        } catch (SecurityException se) {\n-            exception = se;\n-        }\n-\n-        \/\/ Check result\n-        switch (expectedResult) {\n-            case PASS:\n-                if (exception != null) {\n-                    exception.printStackTrace();\n-                    throw new RuntimeException(\"SecurityException not expected\");\n-                }\n-                if (visitor.count() == 0)\n-                    throw new RuntimeException(\"No files visited\");\n-                break;\n-            case FAIL:\n-                if (exception == null)\n-                    throw new RuntimeException(\"SecurityException expected\");\n-                if (visitor.count() > 0)\n-                    throw new RuntimeException(\"Files were visited\");\n-                break;\n-            case TOP_ONLY:\n-                if (exception != null) {\n-                    exception.printStackTrace();\n-                    throw new RuntimeException(\"SecurityException not expected\");\n-                }\n-                if (visitor.count() == 0)\n-                    throw new RuntimeException(\"Starting file not visited\");\n-                if (visitor.count() > 1)\n-                    throw new RuntimeException(\"More than starting file visited\");\n-                break;\n-            default:\n-                throw new RuntimeException(\"Should not get here\");\n-        }\n-    }\n-\n-    static enum ExpectedResult {\n-        PASS,\n-        FAIL,\n-        TOP_ONLY;\n-    }\n-\n-    static class CountingVisitor extends SimpleFileVisitor<Path> {\n-        private int count;\n-\n-        int count() {\n-            return count;\n-        }\n-\n-        @Override\n-        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\n-            System.out.println(dir);\n-            count++;\n-            return FileVisitResult.CONTINUE;\n-        }\n-\n-        @Override\n-        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n-            System.out.println(file);\n-            count++;\n-            return FileVisitResult.CONTINUE;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/file\/Files\/walkFileTree\/WalkWithSecurity.java","additions":0,"deletions":129,"binary":false,"changes":129,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-\/\/ policy file that does not grant any permissions\n-grant {\n-};\n","filename":"test\/jdk\/java\/nio\/file\/Files\/walkFileTree\/denyAll.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-\/\/ policy file that grants read access to source directory and all descendants\n-grant {\n-    permission java.io.FilePermission \"${test.src}\", \"read\";\n-    permission java.io.FilePermission \"${test.src}${file.separator}-\", \"read\";\n-};\n","filename":"test\/jdk\/java\/nio\/file\/Files\/walkFileTree\/grantAll.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-\/\/ policy file that grants read access to source directory\n-grant {\n-    permission java.io.FilePermission \"${test.src}\", \"read\";\n-};\n","filename":"test\/jdk\/java\/nio\/file\/Files\/walkFileTree\/grantTopOnly.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"${java.io.tmpdir}\", \"read,write\";\n-    permission java.io.FilePermission \"${java.io.tmpdir}\/-\", \"read,write,delete\";\n-};\n","filename":"test\/jdk\/java\/nio\/file\/Path\/MacToRealPath.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8308678\n- * @requires (os.family == \"mac\")\n- * @summary Verify UnixPath::toRealPath falls back if no perms on macOS\n- * @run junit\/othervm -Djava.security.manager=allow MacToRealPathWithSM\n- *\/\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.LinkOption;\n-import java.nio.file.Path;\n-\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n-\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-\n-public class MacToRealPathWithSM {\n-    private static final String POLICY_FILE = \"MacToRealPath.policy\";\n-\n-    private static Path src;\n-    private static Path path;\n-\n-    @BeforeAll\n-    public static void setup() throws IOException {\n-        String testSrc = System.getProperty(\"test.src\");\n-        String tmpDir = System.getProperty(\"java.io.tmpdir\");\n-        if (testSrc == null || tmpDir == null)\n-            throw new RuntimeException(\"This test must be run by jtreg\");\n-        System.out.printf(\"testSrc: %s%ntmpDir:  %s%n\", testSrc, tmpDir);\n-\n-        src = Path.of(testSrc);\n-        Path tmp = Path.of(tmpDir);\n-\n-        path = Files.createTempFile(tmp, \"bonjour\", \".txt\");\n-        path.toFile().deleteOnExit();\n-\n-        \/\/ Write to the path\n-        Files.writeString(path, \"\\nBonjour, tout le monde!\\n\");\n-        System.out.println(Files.readString(path));\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(strings = {\"\", POLICY_FILE})\n-    @SuppressWarnings(\"removal\")\n-    public void testToRealPath(String policyFile) throws IOException {\n-        \/\/ Install security manager with the given policy file\n-        if (!policyFile.isEmpty()) {\n-            System.setProperty(\"java.security.policy\",\n-                src.resolve(policyFile).toString());\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n-        \/\/ Derive real path. Without the source change for this issue applied,\n-        \/\/ if a SecurityManager is used which does not grant read permission\n-        \/\/ for traversing \"path\" down from its root, an AccessContolException\n-        \/\/ is thrown by UnixPath::toRealPath\n-        assertDoesNotThrow(() ->\n-            System.out.printf(\"real path: %s%n\", path.toRealPath()),\n-            \"UnixPath::toRealPath() failed\");\n-        assertDoesNotThrow(() ->\n-            System.out.printf(\"real path no follow: %s%n\",\n-                              path.toRealPath(LinkOption.NOFOLLOW_LINKS)),\n-            \"UnixPath::toRealPath(LinkOption.NOFOLLOW_LINKS) failed\");\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/file\/Path\/MacToRealPathWithSM.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4313887\n- * @summary Unit test for Watchable#register's permission checks\n- * @modules jdk.unsupported\n- * @build WithSecurityManager\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager denyAll.policy - fail\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager denyAll.policy tree fail\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager grantDirOnly.policy - pass\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager grantDirOnly.policy tree fail\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager grantDirAndOneLevel.policy - pass\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager grantDirAndOneLevel.policy tree fail\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager grantDirAndTree.policy - pass\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager grantDirAndTree.policy tree pass\n- *\/\n-\n-import java.nio.file.*;\n-import java.io.IOException;\n-import com.sun.nio.file.ExtendedWatchEventModifier;\n-\n-public class WithSecurityManager {\n-\n-    public static void main(String[] args) throws IOException {\n-        String policyFile = args[0];\n-        boolean recursive = args[1].equals(\"tree\");\n-        boolean expectedToFail = args[2].equals(\"fail\");\n-\n-        \/\/ install security manager with the given policy file\n-        String testSrc = System.getProperty(\"test.src\");\n-        if (testSrc == null)\n-            throw new RuntimeException(\"This test must be run by jtreg\");\n-        Path dir = Paths.get(testSrc);\n-        System.setProperty(\"java.security.policy\", dir.resolve(policyFile).toString());\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ initialize optional modifier\n-        WatchEvent.Modifier[] modifiers;\n-        if (recursive) {\n-            modifiers = new WatchEvent.Modifier[1];\n-            modifiers[0] = ExtendedWatchEventModifier.FILE_TREE;\n-        } else {\n-            modifiers = new WatchEvent.Modifier[0];\n-        }\n-\n-        \/\/ attempt to register directory\n-        try {\n-            dir.register(dir.getFileSystem().newWatchService(),\n-                         new WatchEvent.Kind<?>[]{ StandardWatchEventKinds.ENTRY_CREATE },\n-                         modifiers);\n-            if (expectedToFail)\n-                throw new RuntimeException(\"SecurityException not thrown\");\n-        } catch (SecurityException e) {\n-            if (!expectedToFail)\n-                throw e;\n-        } catch (UnsupportedOperationException e) {\n-            \/\/ FILE_TREE modifier only supported on some platforms\n-            if (!recursive)\n-                throw new RuntimeException(e);\n-            System.out.println(\"FILE_TREE option not supported\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/WithSecurityManager.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-\/\/ policy file that does not grant any permissions\n-grant {\n-};\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/denyAll.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-\/\/ policy file that grants read access to source directory and its entries\n-grant {\n-    permission java.io.FilePermission \"${test.src}\", \"read\";\n-    permission java.io.FilePermission \"${test.src}${file.separator}*\", \"read\";\n-};\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/grantDirAndOneLevel.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-\/\/ policy file that grants read access to source directory and all descendants\n-grant {\n-    permission java.io.FilePermission \"${test.src}\", \"read\";\n-    permission java.io.FilePermission \"${test.src}${file.separator}-\", \"read\";\n-};\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/grantDirAndTree.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-\/\/ policy file that grants read access to source directory\n-grant {\n-    permission java.io.FilePermission \"${test.src}\", \"read\";\n-};\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/grantDirOnly.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,16 +117,0 @@\n-    \/**\n-     * Test override of default FileSystemProvider with the main application\n-     * on the class path and a SecurityManager enabled.\n-     *\/\n-    public void testClassPathWithSecurityManager() throws Exception {\n-        String moduleClasses = moduleClasses();\n-        String testClasses = System.getProperty(\"test.classes\");\n-        String classpath = moduleClasses + File.pathSeparator + testClasses;\n-        String policyFile = System.getProperty(\"test.src\", \".\")\n-            + File.separator + \"fs.policy\";\n-        int exitValue = exec(SET_DEFAULT_FSP, \"-cp\", classpath,\n-            \"-Dtest.classes=\" + testClasses, \"-Djava.security.manager\",\n-            \"-Djava.security.policy==\" + policyFile, \"p.Main\");\n-        assertEquals(exitValue, 0);\n-    }\n-\n","filename":"test\/jdk\/java\/nio\/file\/spi\/SetDefaultProvider.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant codeBase \"file:${test.classes}${\/}-\" {\n-    permission java.io.FilePermission \"${java.io.tmpdir}${\/}-\", \"write\";\n-};\n","filename":"test\/jdk\/java\/nio\/file\/spi\/fs.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4180392\n- * @summary When an instance of java.rmi.RMISecurityManager is set the VM's\n- * security manager, the same package access restrictions should be in effect\n- * as when the default java.lang.SecurityManager is set, which with the\n- * default \"java.security\" file in the JDK means that access to packages in\n- * the sun.* package hierarchy is denied (without explicit runtime permission\n- * \"accessClassInPackage.*\").\n- * @author Peter Jones\n- *\n- * @run main\/othervm -Djava.security.manager=allow CheckPackageAccess\n- *\/\n-\n-import java.rmi.RMISecurityManager;\n-\n-public class CheckPackageAccess {\n-\n-    \/*\n-     * This test assumes that the default security manager protects untrusted\n-     * access to classes in the sun.* hierarchy, which is what is specified\n-     * in the JDK's default java.security file.\n-     *\/\n-    private final static String restrictedClassName = \"sun.misc.Cache\";\n-\n-    public static void main(String[] args) {\n-\n-        System.err.println(\"\\nRegression test for bug 4180392\\n\");\n-\n-        System.err.println(\"Setting RMISecurityManager.\");\n-        System.setSecurityManager(new RMISecurityManager());\n-\n-        try {\n-            System.err.println(\"Attempting to acquire restricted class \" +\n-                restrictedClassName);\n-            Class restrictedClass = Class.forName(restrictedClassName);\n-            throw new RuntimeException(\n-                \"TEST FAILED: successfully acquired restricted class \" +\n-                    restrictedClass);\n-        } catch (ClassNotFoundException e) {\n-            throw new RuntimeException(\n-                \"TEST FAILED: couldn't find (but was allowed to look for) \" +\n-                    \"restricted class \" + restrictedClassName);\n-        } catch (SecurityException e) {\n-            System.err.println(\"TEST PASSED: \");\n-            e.printStackTrace();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/rmi\/RMISecurityManager\/checkPackageAccess\/CheckPackageAccess.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,2 @@\n- * @run main\/othervm\/policy=security.policy CheckVMID\n+ * @run main\/othervm -Djdk.net.hosts.file=nonExistentFile\n+ *                   CheckVMID\n@@ -50,2 +51,0 @@\n-        TestLibrary.suggestSecurityManager(null);\n-\n","filename":"test\/jdk\/java\/rmi\/dgc\/VMID\/CheckVMID.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,10 +0,0 @@\n-\/*\n- * security policy used by MarshalForeignStub test\n- *\/\n-grant {\n-\n-    \/\/ used by TestLibrary to determine test environment\n-    permission java.util.PropertyPermission \"test.*\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-};\n","filename":"test\/jdk\/java\/rmi\/dgc\/VMID\/security.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4465315\n- * @summary The RMI runtime's server-side DGC implementation object should\n- * not be exported with the arbitrary access control context that was in\n- * effect when it gets lazily created.  For example, calls to it should not\n- * fail due to the \"accept\" SocketPermission check simply because of the\n- * access control context that it was exported with.\n- * @author Peter Jones\n- *\n- * @library ..\/..\/testlibrary\n- * @modules java.rmi\/sun.rmi.registry\n- *          java.rmi\/sun.rmi.server\n- *          java.rmi\/sun.rmi.transport\n- *          java.rmi\/sun.rmi.transport.tcp\n- * @build TestLibrary DGCImplInsulation_Stub\n- * @run main\/othervm\/policy=security.policy DGCImplInsulation\n- *\/\n-\n-import java.lang.ref.Reference;\n-import java.lang.ref.ReferenceQueue;\n-import java.lang.ref.WeakReference;\n-import java.net.SocketPermission;\n-import java.rmi.MarshalledObject;\n-import java.rmi.Remote;\n-import java.rmi.server.UnicastRemoteObject;\n-import java.security.AccessControlContext;\n-import java.security.CodeSource;\n-import java.security.Permissions;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.ProtectionDomain;\n-import java.security.cert.Certificate;\n-\n-public class DGCImplInsulation implements java.rmi.Remote {\n-\n-    private static final long TIMEOUT = 5000;\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        TestLibrary.suggestSecurityManager(null);\n-\n-        Permissions perms = new Permissions();\n-        perms.add(new SocketPermission(\"*:1024-\", \"listen\"));\n-        AccessControlContext acc =\n-            new AccessControlContext(new ProtectionDomain[] {\n-                new ProtectionDomain(\n-                    new CodeSource(null, (Certificate[]) null), perms) });\n-\n-        Remote impl = new DGCImplInsulation();\n-\n-        try {\n-            Remote stub = (Remote) java.security.AccessController.doPrivileged(\n-                new ExportAction(impl));\n-            System.err.println(\"exported remote object; local stub: \" + stub);\n-\n-            MarshalledObject mobj = new MarshalledObject(stub);\n-            stub = (Remote) mobj.get();\n-            System.err.println(\"marshalled\/unmarshalled stub: \" + stub);\n-\n-            ReferenceQueue refQueue = new ReferenceQueue();\n-            Reference weakRef = new WeakReference(impl, refQueue);\n-            impl = null;\n-            System.gc();\n-            if (refQueue.remove(TIMEOUT) == weakRef) {\n-                throw new RuntimeException(\n-                    \"TEST FAILED: remote object garbage collected\");\n-            } else {\n-                System.err.println(\"TEST PASSED\");\n-                stub = null;\n-                System.gc();\n-                Thread.sleep(2000);\n-                System.gc();\n-            }\n-        } finally {\n-            try {\n-                UnicastRemoteObject.unexportObject(impl, true);\n-            } catch (Exception e) {\n-            }\n-        }\n-    }\n-\n-    private static class ExportAction implements PrivilegedExceptionAction {\n-        private final Remote impl;\n-        ExportAction(Remote impl) {\n-            this.impl = impl;\n-        }\n-        public Object run() throws Exception {\n-            return UnicastRemoteObject.exportObject(impl);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/rmi\/dgc\/dgcImplInsulation\/DGCImplInsulation.java","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ Stub class generated by rmic, do not edit.\n-\/\/ Contents subject to change without notice.\n-\n-public final class DGCImplInsulation_Stub\n-    extends java.rmi.server.RemoteStub\n-    implements java.rmi.Remote\n-{\n-    private static final long serialVersionUID = 2;\n-\n-    \/\/ constructors\n-    public DGCImplInsulation_Stub(java.rmi.server.RemoteRef ref) {\n-        super(ref);\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/rmi\/dgc\/dgcImplInsulation\/DGCImplInsulation_Stub.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-grant {\n-  \/\/ so that synchronous DGC dirty call will succeed\n-  permission java.net.SocketPermission \"*:1024-\", \"accept,connect,listen\";\n-};\n","filename":"test\/jdk\/java\/rmi\/dgc\/dgcImplInsulation\/security.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4183202\n- * @summary rmiregistry could allow alternate security manager\n- * @author Laird Dornin\n- *\n- * @library ..\/..\/testlibrary\n- * @modules java.rmi\/sun.rmi.registry\n- *          java.rmi\/sun.rmi.server\n- *          java.rmi\/sun.rmi.transport\n- *          java.rmi\/sun.rmi.transport.tcp\n- *          java.base\/sun.nio.ch\n- * @build TestLibrary RegistryVM RMIRegistryRunner TestSecurityManager\n- * @run main\/othervm AltSecurityManager\n- *\/\n-\n-\/**\n- * Ensure that a user is able to specify alternate security managers to\n- * be used in rmiregistry.  Test specifies a security manager\n- * that throws a runtime exception in its checkListen method, this\n- * will cause rmiregistry to exit early because those\n- * utilities will be unable to export any remote objects; test fails\n- * if registry takes too long to exit.\n- *\/\n-public class AltSecurityManager implements Runnable {\n-    \/\/ variable to hold registry child\n-    static JavaVM vm = null;\n-\n-    \/\/ names of utilities\n-    static String utilityToStart = null;\n-    static final String REGISTRY_IMPL = \"sun.rmi.registry.RegistryImpl\";\n-\n-    \/\/ children should exit in at least this time.\n-    private static final long TIME_OUT =\n-            (long)(15000 * TestLibrary.getTimeoutFactor());\n-\n-    public void run() {\n-        try {\n-            if (utilityToStart.equals(REGISTRY_IMPL)) {\n-                vm = RegistryVM.createRegistryVMWithRunner(\n-                        \"RMIRegistryRunner\",\n-                        \"-Djava.security.manager=TestSecurityManager\");\n-            } else {\n-                TestLibrary.bomb(\"Utility to start must be \" + REGISTRY_IMPL);\n-            }\n-\n-            System.err.println(\"starting \" + utilityToStart);\n-            try {\n-                vm.start();\n-                throw new RuntimeException(\"Expected exception did not occur!\");\n-            } catch (Exception expected) {\n-                int exit = vm.waitFor();\n-                if (exit != TestSecurityManager.EXIT_VALUE) {\n-                    throw new RuntimeException(utilityToStart\n-                            + \" exit with an unexpected value \"\n-                            + exit + \".\");\n-                }\n-                System.err.format(\"Success: starting %s exited with status %d%n\",\n-                                  utilityToStart, TestSecurityManager.EXIT_VALUE);\n-            }\n-\n-        } catch (Exception e) {\n-            TestLibrary.bomb(e);\n-        }\n-    }\n-\n-    \/**\n-     * Wait to make sure that the registry exits after\n-     * their security manager is set.\n-     *\/\n-    public static void ensureExit(String utility) throws Exception {\n-        utilityToStart = utility;\n-\n-        try {\n-            Thread thread = new Thread(new AltSecurityManager());\n-            System.err.println(\"expecting RuntimeException for \" +\n-                               \"checkListen in child process\");\n-            long start = System.currentTimeMillis();\n-            thread.start();\n-            thread.join(TIME_OUT);\n-\n-            long time = System.currentTimeMillis() - start;\n-            System.err.println(\"waited \" + time + \" millis for \" +\n-                               utilityToStart + \" to die\");\n-\n-            if (time >= TIME_OUT) {\n-                TestLibrary.bomb(utilityToStart +\n-                                 \" took too long to die...\");\n-            } else {\n-                System.err.println(utilityToStart +\n-                                   \" terminated on time\");\n-            }\n-        } finally {\n-            vm.cleanup();\n-            vm = null;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        try {\n-            System.err.println(\"\\nRegression test for bug 4183202\\n\");\n-\n-            \/\/ make sure the registry exits early.\n-            ensureExit(REGISTRY_IMPL);\n-\n-            System.err.println(\"test passed\");\n-\n-        } catch (Exception e) {\n-            TestLibrary.bomb(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/rmi\/registry\/altSecurityManager\/AltSecurityManager.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\/\n-\n-public class TestSecurityManager extends SecurityManager {\n-    public static final int EXIT_VALUE = 123;\n-\n-    public TestSecurityManager() {\n-    }\n-\n-    public void checkListen(int port) {\n-        \/\/ 4269910: ok, now the registry will *really* go away...\n-        \/\/\n-        \/\/ the registry needs to listen on sockets so they\n-        \/\/ will exit when they try to do so... this is used as a sign\n-        \/\/ by the main test process to detect that the proper security\n-        \/\/ manager has been installed in the relevant VMs.\n-        \/\/\n-        System.exit(EXIT_VALUE);\n-    }\n-\n-    public void checkExit(int status) {\n-        \/\/ permit check exit for all code\n-    }\n-}\n","filename":"test\/jdk\/java\/rmi\/registry\/altSecurityManager\/TestSecurityManager.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,8 +0,0 @@\n-grant {\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.registry\";\n-  permission java.util.PropertyPermission \"env.class.path\", \"read\";\n-  permission java.io.FilePermission \".\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.lang.RuntimePermission \"createClassLoader\";\n-  permission java.lang.RuntimePermission \"setContextClassLoader\";\n-};\n","filename":"test\/jdk\/java\/rmi\/registry\/altSecurityManager\/registry.security.policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-  permission java.lang.RuntimePermission \"selectorProvider\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.nio.ch\";\n-  permission java.net.SocketPermission \"*:1024-\", \"listen,resolve,connect,accept\";\n-};\n","filename":"test\/jdk\/java\/rmi\/registry\/altSecurityManager\/rmid.security.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,2 @@\n- * @build TestLibrary Dummy RegistryVM RMIRegistryRunner\n- * @run main\/othervm\/policy=security.policy\n+ * @build TestLibrary Dummy RegistryVM RMIRegistryRunner TestLoaderHandler\n+ * @run main\/othervm\n@@ -66,2 +66,1 @@\n-        TestLibrary.suggestSecurityManager(\"java.lang.SecurityManager\");\n-\n+        System.setProperty(\"java.rmi.server.RMIClassLoaderSpi\", \"TestLoaderHandler\");\n@@ -88,1 +87,1 @@\n-                            \" -Denv.class.path=. -Djava.security.manager=allow\"\n+                            \" -Denv.class.path=.\"\n","filename":"test\/jdk\/java\/rmi\/registry\/classPathCodebase\/ClassPathCodebase.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,18 +0,0 @@\n-\/*\n- * security policy used by the registry process started by RegistryVM.\n- *\/\n-\n-grant {\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.registry\";\n-  permission java.util.PropertyPermission \"env.class.path\", \"read\";\n-  permission java.io.FilePermission \".\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.lang.RuntimePermission \"createClassLoader\";\n-  permission java.lang.RuntimePermission \"setContextClassLoader\";\n-  permission java.io.FilePermission \".-Djava.rmi.server.codebase=file\", \"read\";\n-  permission java.io.FilePermission \".${\/}-\", \"read\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.server\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport.tcp\";\n-  permission java.net.SocketPermission \"*:1024-\", \"listen,resolve,connect,accept\";\n-};\n","filename":"test\/jdk\/java\/rmi\/registry\/classPathCodebase\/registry.security.policy","additions":0,"deletions":18,"binary":false,"changes":18,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-  \/\/ need to move some classes out of the test's classpath; specific to this test\n-  permission java.io.FilePermission \"${test.classes}\", \"read,write,delete\";\n-  permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-\n-  permission java.io.FilePermission \".\", \"read,write,delete\";\n-  permission java.io.FilePermission \".${\/}-\", \"read,write,delete\";\n-\n-  \/\/ used by TestLibrary to determine test environment \n-  permission java.util.PropertyPermission \"test.*\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-  \/\/ test needs to use java to exec an rmiregistry\n-  permission java.io.FilePermission \"${java.home}${\/}bin${\/}-\", \"execute\";\n-\n-  \/\/ test needs to communicate with its registry\n-  permission java.net.SocketPermission \"*:1024-\", \"connect,accept,listen\";\n-\n-  permission java.util.PropertyPermission \"java.security.policy\", \"read\";\n-  permission java.util.PropertyPermission \"java.security.manager\", \"read\";\n-\n-  \/\/ used by TestLibrary to determine extra commandline properties\n-  permission java.io.FilePermission \"..${\/}..${\/}test.props\", \"read\";\n-};\n","filename":"test\/jdk\/java\/rmi\/registry\/classPathCodebase\/security.policy","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @build TestLibrary RMIRegistryRunner RegistryVM JavaVM testPkg.* RegistryLookup\n+ * @build TestLibrary RMIRegistryRunner RegistryVM JavaVM testPkg.* RegistryLookup TestLoaderHandler\n@@ -39,4 +39,0 @@\n-import java.rmi.registry.Registry;\n-import java.rmi.registry.LocateRegistry;\n-import java.rmi.RemoteException;\n-import java.rmi.server.UnicastRemoteObject;\n@@ -49,0 +45,3 @@\n+\n+        System.setProperty(\"java.rmi.server.RMIClassLoaderSpi\", \"TestLoaderHandler\");\n+\n@@ -60,2 +59,3 @@\n-                    \" -Djava.rmi.server.useCodebaseOnly=false -Djava.security.manager=allow\"\n-                    + \" -Duser.dir=\" + rmiregistryDir.getAbsolutePath());\n+                    \" -Djava.rmi.server.useCodebaseOnly=false\"\n+                    + \" -Duser.dir=\" + rmiregistryDir.getAbsolutePath()\n+                    + \" -Djava.rmi.server.RMIClassLoaderSpi=TestLoaderHandler\");\n@@ -75,1 +75,2 @@\n-                    + \" -cp .\" + File.pathSeparator + System.getProperty(\"test.class.path\"),\n+                    + \" -cp .\" + File.pathSeparator + System.getProperty(\"test.class.path\")\n+                    + \" -Djava.rmi.server.RMIClassLoaderSpi=TestLoaderHandler\",\n","filename":"test\/jdk\/java\/rmi\/registry\/readTest\/CodebaseTest.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,12 +0,0 @@\n-grant {\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.registry\";\n-  permission java.util.PropertyPermission \"env.class.path\", \"read\";\n-  permission java.io.FilePermission \".\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.lang.RuntimePermission \"createClassLoader\";\n-  permission java.lang.RuntimePermission \"setContextClassLoader\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.server\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport.tcp\";\n-  permission java.net.SocketPermission \"*:1024-\", \"listen,resolve,connect,accept\";\n-};\n","filename":"test\/jdk\/java\/rmi\/registry\/readTest\/registry.security.policy","additions":0,"deletions":12,"binary":false,"changes":12,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n- * @run testng\/othervm\/policy=security.policy\n+ * @run testng\/othervm\n","filename":"test\/jdk\/java\/rmi\/registry\/serialFilter\/RegistryFilterTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-        permission java.security.AllPermission;\n-};\n-\n","filename":"test\/jdk\/java\/rmi\/registry\/serialFilter\/security.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -48,1 +48,1 @@\n- * @run main\/othervm\/policy=policy.all\/timeout=1800 bench.rmi.Main -server -c config\n+ * @run main\/othervm\/timeout=1800 bench.rmi.Main -server -c config\n@@ -217,1 +217,0 @@\n-        setupSecurity();\n@@ -242,2 +241,0 @@\n-                    clientProcessStr.add(\"-Djava.security.policy=\" + TEST_SRC_PATH + \"policy.all\");\n-                    clientProcessStr.add(\"-Djava.security.manager=allow\");\n@@ -401,16 +398,0 @@\n-    \/**\n-     * Set up security manager and policy, if not set already.\n-     *\/\n-    static void setupSecurity() {\n-        if (System.getSecurityManager() != null) {\n-            return;\n-        }\n-\n-        \/* As of 1.4, it is too late to set the security policy\n-         * file at this point so these line have been commented out.\n-         *\/\n-        \/\/System.setProperty(\"java.security.policy\",\n-        \/\/      Main.class.getResource(\"\/bench\/rmi\/policy.all\").toString());\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-\n","filename":"test\/jdk\/java\/rmi\/reliability\/benchmark\/bench\/rmi\/Main.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-        permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/java\/rmi\/reliability\/benchmark\/bench\/rmi\/policy.all","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n- * @run main\/othervm\/policy=security.policy AppleUserImpl -seconds 30\n+ * @run main\/othervm AppleUserImpl -seconds 30\n","filename":"test\/jdk\/java\/rmi\/reliability\/juicer\/AppleUserImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-\n-grant {\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/java\/rmi\/reliability\/juicer\/security.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4191926 4349670\n- * @summary When the RMIClassLoader.loadClass() methods are invoked with a\n- * codebase URL that the caller does not have permission to load from, but\n- * with a class name that is accessible through the caller's context class\n- * loader (such as in the boot or system class paths, for an application),\n- * the operations should succeed, instead of throwing a\n- * ClassNotFoundException (wrapping a SecurityExcpetion) because the caller\n- * does not have permission to access the codebase URL.\n- * @author Peter Jones\n- *\n- * @library ..\/..\/..\/testlibrary\n- * @modules java.rmi\/sun.rmi.registry\n- *          java.rmi\/sun.rmi.server\n- *          java.rmi\/sun.rmi.transport\n- *          java.rmi\/sun.rmi.transport.tcp\n- * @build TestLibrary Foo\n- * @run main\/othervm -Djava.security.manager=allow DelegateBeforePermissionCheck\n- *\/\n-\n-import java.net.*;\n-import java.rmi.*;\n-import java.rmi.server.*;\n-\n-public class DelegateBeforePermissionCheck {\n-\n-    private final static String tabooCodebase = \"http:\/\/taboo\/codebase\/\";\n-\n-    public static void main(String[] args) {\n-\n-        System.err.println(\"\\nRegression test for bug 4191926\\n\");\n-\n-        TestLibrary.suggestSecurityManager(null);\n-\n-        try {\n-            String localClassName = Foo.class.getName();\n-            System.err.println(\"Attempting to load local class \\\"\" +\n-                localClassName + \"\\\" from codebase \" + tabooCodebase);\n-            Class cl = RMIClassLoader.loadClass(\n-                tabooCodebase, localClassName);\n-            System.err.println(\"TEST PASSED: loaded \" + cl + \" locally\");\n-\n-        } catch (Exception e) {\n-            TestLibrary.bomb(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/delegateBeforePermissionCheck\/DelegateBeforePermissionCheck.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,25 +0,0 @@\n-\/*\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class Foo implements java.io.Serializable {\n-}\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/delegateBeforePermissionCheck\/Foo.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run main\/othervm\/policy=security.policy\/timeout=120 DelegateToContextLoader\n+ * @run main\/othervm\/timeout=120 DelegateToContextLoader\n@@ -43,1 +43,0 @@\n-import java.rmi.RMISecurityManager;\n@@ -55,8 +54,0 @@\n-\n-        \/*\n-         * Set a security manager so that RMI class loading will not\n-         * be disabled.\n-         *\/\n-        TestLibrary.suggestSecurityManager(\"java.rmi.RMISecurityManager\");\n-\n-\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/delegateToContextLoader\/DelegateToContextLoader.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,21 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-  \/\/ test must create a context loader for the current thread.\n-  permission java.lang.RuntimePermission \"createClassLoader\";\n-  permission java.lang.RuntimePermission \"setContextClassLoader\";\n-\n-  \/\/ need to move some classes out of the test's classpath; specific to this test\n-  permission java.io.FilePermission \"${test.classes}\", \"read,write,delete\";\n-  permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-\n-  permission java.io.FilePermission \".${\/}codebase\", \"read,write,delete\";\n-  permission java.io.FilePermission \".${\/}codebase${\/}-\", \"read,write,delete\";\n-\n-  \/\/ used by TestLibrary to determine test environment \n-  permission java.util.PropertyPermission \"test.*\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.util.PropertyPermission \"java.home\", \"read\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/delegateToContextLoader\/security.policy","additions":0,"deletions":21,"binary":false,"changes":21,"status":"deleted"},{"patch":"@@ -1,144 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4211906\n- * @summary If the type of a parameter or return value in an RMI call can be\n- * successfully downloaded by the receiving endpoint, then an array class with\n- * that type as its element type should likewise be able to be successfully\n- * downloaded.  This should be true regardless of how many dimensions the\n- * array has.\n- * @author Peter Jones\n- *\n- * @library ..\/..\/..\/testlibrary\n- * @modules java.rmi\/sun.rmi.registry\n- *          java.rmi\/sun.rmi.server\n- *          java.rmi\/sun.rmi.transport\n- *          java.rmi\/sun.rmi.transport.tcp\n- * @build TestLibrary Receiver DownloadArrayClass_Stub Foo\n- * @run main\/othervm\/policy=security.policy DownloadArrayClass\n- *\/\n-\n-import java.lang.reflect.Array;\n-import java.net.*;\n-import java.rmi.*;\n-import java.rmi.server.*;\n-\n-public class DownloadArrayClass\n-    extends UnicastRemoteObject\n-    implements Receiver\n-{\n-\n-    public DownloadArrayClass() throws RemoteException {\n-    }\n-\n-    public void receive(Object obj) {\n-        System.err.println(\"+ receive(): received object \" + obj);\n-    }\n-\n-    public static void main(String[] args) {\n-\n-        System.err.println(\"\\nRegression test for bug 4082868\\n\");\n-\n-        URL remoteCodebase = null;\n-        try {\n-            remoteCodebase =\n-                TestLibrary.installClassInCodebase(\"Foo\", \"remote_codebase\");\n-        } catch (MalformedURLException e) {\n-            TestLibrary.bomb(e);\n-        }\n-\n-        System.err.println(\"Setting codebase property to: \" + remoteCodebase);\n-        System.setProperty(\"java.rmi.server.codebase\",\n-            remoteCodebase.toString());\n-\n-        \/*\n-         * Load Foo from a non-RMI class loader so that it won't be already\n-         * loaded by an RMI class loader in this VM (for whatever that's\n-         * worth), but with URLClassLoader so that they will be annotated\n-         * properly.\n-         *\/\n-        System.err.println(\"Creating class loader for remote codebase \" +\n-            remoteCodebase);\n-        ClassLoader remoteCodebaseLoader =\n-            URLClassLoader.newInstance(new URL[] { remoteCodebase });\n-\n-        TestLibrary.suggestSecurityManager(null);\n-\n-        System.err.println(\"Creating remote object.\");\n-        DownloadArrayClass obj = null;\n-        try {\n-            obj = new DownloadArrayClass();\n-        } catch (RemoteException e) {\n-            TestLibrary.bomb(e);\n-        }\n-\n-        try {\n-            Receiver stub = (Receiver) RemoteObject.toStub(obj);\n-\n-            \/*\n-             * Load the downloadable class \"Foo\" to marshal over RMI calls\n-             * in various forms.\n-             *\/\n-            Class fooClass = remoteCodebaseLoader.loadClass(\"Foo\");\n-            Object arg;\n-\n-            \/*\n-             * First, to establish that simple class downloading is working\n-             * properly, try marshalling a simple instance of Foo.\n-             *\/\n-            arg = fooClass.newInstance();\n-            System.err.println(\"Passing object of type \" + arg.getClass());\n-            stub.receive(arg);\n-\n-            \/*\n-             * Second, try marshalling a one-dimensional array of element\n-             * type Foo.\n-             *\/\n-            arg = Array.newInstance(fooClass, 26);\n-            System.err.println(\"Passing object of type \" + arg.getClass());\n-            stub.receive(arg);\n-\n-            \/*\n-             * Finally, try marshalling a multi-dimensional array with\n-             * Foo as the eventual element type.\n-             *\/\n-            arg = Array.newInstance(fooClass, new int[] { 1, 42, 0 });\n-            System.err.println(\"Passing object of type \" + arg.getClass());\n-            stub.receive(arg);\n-\n-            System.err.println(\"TEST PASSED: \" +\n-                \"arrays of downloaded classes successfully passed\");\n-\n-        } catch (Exception e) {\n-            System.err.println(\"TEST FAILED: \");\n-            e.printStackTrace();\n-            throw new RuntimeException(\"TEST FAILED: \" + e.toString());\n-        } finally {\n-            try {\n-                UnicastRemoteObject.unexportObject(obj, true);\n-            } catch (Throwable e) {\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/downloadArrayClass\/DownloadArrayClass.java","additions":0,"deletions":144,"binary":false,"changes":144,"status":"deleted"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ Stub class generated by rmic, do not edit.\n-\/\/ Contents subject to change without notice.\n-\n-public final class DownloadArrayClass_Stub\n-    extends java.rmi.server.RemoteStub\n-    implements Receiver, java.rmi.Remote\n-{\n-    private static final java.rmi.server.Operation[] operations = {\n-        new java.rmi.server.Operation(\"void receive(java.lang.Object)\")\n-    };\n-\n-    private static final long interfaceHash = -953299374608818732L;\n-\n-    private static final long serialVersionUID = 2;\n-\n-    private static boolean useNewInvoke;\n-    private static java.lang.reflect.Method $method_receive_0;\n-\n-    static {\n-        try {\n-            java.rmi.server.RemoteRef.class.getMethod(\"invoke\",\n-                new java.lang.Class[] {\n-                    java.rmi.Remote.class,\n-                    java.lang.reflect.Method.class,\n-                    java.lang.Object[].class,\n-                    long.class\n-                });\n-            useNewInvoke = true;\n-            $method_receive_0 = Receiver.class.getMethod(\"receive\", new java.lang.Class[] {java.lang.Object.class});\n-        } catch (java.lang.NoSuchMethodException e) {\n-            useNewInvoke = false;\n-        }\n-    }\n-\n-    \/\/ constructors\n-    public DownloadArrayClass_Stub() {\n-        super();\n-    }\n-    public DownloadArrayClass_Stub(java.rmi.server.RemoteRef ref) {\n-        super(ref);\n-    }\n-\n-    \/\/ methods from remote interfaces\n-\n-    \/\/ implementation of receive(Object)\n-    public void receive(java.lang.Object $param_Object_1)\n-        throws java.rmi.RemoteException\n-    {\n-        try {\n-            if (useNewInvoke) {\n-                ref.invoke(this, $method_receive_0, new java.lang.Object[] {$param_Object_1}, -578858472643205929L);\n-            } else {\n-                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);\n-                try {\n-                    java.io.ObjectOutput out = call.getOutputStream();\n-                    out.writeObject($param_Object_1);\n-                } catch (java.io.IOException e) {\n-                    throw new java.rmi.MarshalException(\"error marshalling arguments\", e);\n-                }\n-                ref.invoke(call);\n-                ref.done(call);\n-            }\n-        } catch (java.lang.RuntimeException e) {\n-            throw e;\n-        } catch (java.rmi.RemoteException e) {\n-            throw e;\n-        } catch (java.lang.Exception e) {\n-            throw new java.rmi.UnexpectedException(\"undeclared checked exception\", e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/downloadArrayClass\/DownloadArrayClass_Stub.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,25 +0,0 @@\n-\/*\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class Foo implements java.io.Serializable {\n-}\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/downloadArrayClass\/Foo.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- *\n- *\/\n-import java.rmi.Remote;\n-import java.rmi.RemoteException;\n-public interface Receiver extends Remote {\n-    public void receive(Object obj) throws RemoteException;\n-}\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/downloadArrayClass\/Receiver.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -1,22 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-    permission java.util.PropertyPermission\n-        \"java.rmi.server.codebase\", \"read,write\";\n-\n-    \/\/ permissions needed to move classes into separate codebase directories\n-    permission java.io.FilePermission\n-\t\"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.io.FilePermission\n-\t\".${\/}-\", \"read,write,delete\";\n-\n-    \/\/ used by TestLibrary to determine test environment\n-    permission java.util.PropertyPermission \"test.*\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-    \/\/ allow exporting of remote objects on an arbitrary port\n-    permission java.net.SocketPermission \"*:1024-\", \"connect,accept,listen\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/downloadArrayClass\/security.policy","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,25 +0,0 @@\n-\/*\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class Foo implements java.io.Serializable {\n-}\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/getClassLoader\/Foo.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4240710\n- * @summary RMIClassLoader.getClassLoader for a codebase should return the\n- * same class loader that is used to load classes from that codebase (using\n- * RMIClassLoader.loadClass).\n- * @author Ann Wollrath\n- *\n- * @library ..\/..\/..\/testlibrary\n- * @modules java.rmi\/sun.rmi.registry\n- *          java.rmi\/sun.rmi.server\n- *          java.rmi\/sun.rmi.transport\n- *          java.rmi\/sun.rmi.transport.tcp\n- * @build TestLibrary Foo\n- * @run main\/othervm\/policy=security.policy GetClassLoader\n- *\/\n-\n-import java.net.*;\n-import java.rmi.*;\n-import java.rmi.server.*;\n-\n-public class GetClassLoader\n-{\n-\n-    public static void main(String[] args) {\n-\n-        System.err.println(\"\\nTest for rfe 4240710\\n\");\n-\n-        URL codebase1 = null;\n-        Class cl = null;\n-        ClassLoader loader = null;\n-\n-        TestLibrary.suggestSecurityManager(null);\n-\n-        try {\n-            codebase1 =\n-                TestLibrary.installClassInCodebase(\"Foo\", \"codebase1\");\n-        } catch (MalformedURLException e) {\n-            TestLibrary.bomb(e);\n-        }\n-\n-\n-        \/*\n-         * Force SecurityException for attempt to obtain a class loader\n-         * for a codebase that the test does not have permission to read from.\n-         *\/\n-        try {\n-            System.err.println(\n-                \"getClassLoader for codebase that I can't read\");\n-            loader = RMIClassLoader.getClassLoader(\"file:\/foo\");\n-            TestLibrary.bomb(\n-                \"Failed: no SecurityException obtaining loader\");\n-        } catch (MalformedURLException e) {\n-            System.err.println(\n-                \"Failed: MalformedURLException getting loader\");\n-            TestLibrary.bomb(e);\n-        } catch (SecurityException e) {\n-            System.err.println(\n-                \"Passed: SecurityException obtaining loader\");\n-        }\n-\n-        \/*\n-         * Verify that a specific class loaded by name via\n-         * RMIClassLoader.loadClass is the same as the class obtained by\n-         * loading that class by name through the loader obtained using\n-         * the RMIClassLoader.getClassLoader method.\n-         *\/\n-        System.err.println(\"load Foo from codebase1\");\n-        try {\n-            cl = RMIClassLoader.loadClass(codebase1.toString(), \"Foo\");\n-        } catch (Exception e) {\n-            System.err.println(\n-                \"Failed: exception loading class from codebase1\");\n-            TestLibrary.bomb(e);\n-        }\n-\n-        System.err.println(\n-            \"load Foo using loader obtained using getClassLoader\");\n-        try {\n-            loader = RMIClassLoader.getClassLoader(codebase1.toString());\n-        } catch (MalformedURLException e) {\n-            System.err.println(\n-                \"Failed: MalformedURLException getting codebase1 loader\");\n-            TestLibrary.bomb(e);\n-        }\n-\n-        try {\n-            if (cl == loader.loadClass(\"Foo\")) {\n-                System.err.println(\"Passed: Foo classes are equal\");\n-            } else {\n-                TestLibrary.bomb(\"Failed: Foo classes are not equal\");\n-            }\n-        } catch (Exception e) {\n-            System.err.println(\n-                \"Failed: exception loading class from codebase1\");\n-            TestLibrary.bomb(e);\n-        }\n-\n-        \/*\n-         * Force MalformedURLException by passing bogus URL to\n-         * getClassLoader.\n-         *\/\n-        try {\n-            loader = RMIClassLoader.getClassLoader(\"malformed:\/\/\/URL\");\n-            TestLibrary.bomb(\n-                \"Failed: getClassLoader should throw MalformedURLException\");\n-        } catch (MalformedURLException e) {\n-            System.err.println(\n-                \"Passed: getClassLoader threw MalformedURLException\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/getClassLoader\/GetClassLoader.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-    \/\/ permissions needed to move classes into separate codebase directories\n-    permission java.io.FilePermission\n-\t\"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.io.FilePermission\n-\t\".${\/}-\", \"read,write,delete\";\n-\n-    \/\/ used by TestLibrary to determine test environment\n-    permission java.util.PropertyPermission \"test.*\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-    \/\/ needed because RMIClassLoader.getClassLoader now requires it\n-    permission java.lang.RuntimePermission \"getClassLoader\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/getClassLoader\/security.policy","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * @run main\/othervm\/policy=security.policy\n+ * @run main\/othervm\n@@ -76,1 +76,1 @@\n- *  3. Public interface classes loaded in FNNL are also available in\n+ *  3. Disabled. Public interface classes loaded in FNNL are also available in\n@@ -79,1 +79,2 @@\n- *  interface must be defined in FNNL.\n+ *  interface must be defined in FNNL. Disabled because the default\n+ *  RMIClassLoader provider no longer creates class loaders.\n@@ -84,2 +85,3 @@\n- *  5. Interface classes loaded from RMI class loader. Proxy class\n- *  defined in RMI class loader.\n+ *  5. Disabled. Interface classes loaded from RMI class loader. Proxy class\n+ *  defined in RMI class loader. Disabled because the default RMIClassLoader\n+ *  provider no longer creates class loaders.\n@@ -130,3 +132,0 @@\n-            TestLibrary.suggestSecurityManager(null);\n-\n-\n@@ -183,2 +182,2 @@\n-            unmarshalProxyClass(proxy3, fnnLoader3, fnnLoader3,\n-                3, new Case3Checker());\n+\/\/            unmarshalProxyClass(proxy3, fnnLoader3, fnnLoader3,\n+\/\/                3, new Case3Checker());\n@@ -243,2 +242,2 @@\n-            unmarshalProxyClass(proxy5, fnnLoader2, publicLoader, 5,\n-                                new Case5Checker());\n+\/\/            unmarshalProxyClass(proxy5, fnnLoader2, publicLoader, 5,\n+\/\/                                new Case5Checker());\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/loadProxyClasses\/LoadProxyClasses.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,22 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-\n-    \/\/ permissions needed to move classes into separate codebase directories\n-    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.io.FilePermission \".${\/}-\", \"read,write,delete\";\n-\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-    permission java.lang.RuntimePermission \"getClassLoader\";\n-    permission java.lang.RuntimePermission \"setContextClassLoader\";\n-\n-    permission java.lang.reflect.ReflectPermission \"newProxyInPackage.\";\n-    permission java.lang.reflect.ReflectPermission \"newProxyInPackage.java.util.zip\";\n-\n-    \/\/ used by TestLibrary to determine test environment\n-    permission java.util.PropertyPermission \"test.*\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/loadProxyClasses\/security.policy","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4450891\n- * @summary verify that the java.util.ServiceLoader-based location of an\n- * RMIClassLoader provider does not require any permissions of the\n- * (arbitrary) protection domains that happens to be on the stack\n- * when RMIClassLoader is first used.\n- * @author Peter Jones\n- *\n- * @library ..\/..\/..\/testlibrary\n- * @modules java.rmi\/sun.rmi.registry\n- *          java.rmi\/sun.rmi.server\n- *          java.rmi\/sun.rmi.transport\n- *          java.rmi\/sun.rmi.transport.tcp\n- * @build TestLibrary ServiceConfiguration TestProvider TestProvider2\n- * @run main\/othervm\/policy=security.policy ContextInsulation\n- *\/\n-\n-import java.security.AccessControlContext;\n-import java.security.CodeSource;\n-import java.security.Permissions;\n-import java.security.ProtectionDomain;\n-import java.security.cert.Certificate;\n-\n-public class ContextInsulation {\n-    public static void main(String[] args) throws Exception {\n-\n-        \/*\n-         * If we delay setting the security manager until after the service\n-         * configuration file has been installed, then this test still\n-         * functions properly, but the -Djava.security.debug output is\n-         * lacking, so to ease debugging, we'll set it early-- at the cost\n-         * of having to specify the policy even when running standalone.\n-         *\/\n-        TestLibrary.suggestSecurityManager(null);\n-\n-        ServiceConfiguration.installServiceConfigurationFile();\n-\n-        \/*\n-         * Execute use of RMIClassLoader within an AccessControlContext\n-         * that has a protection domain with no permissions, to make sure\n-         * that RMIClassLoader can still properly initialize itself.\n-         *\/\n-        CodeSource codesource = new CodeSource(null, (Certificate[]) null);\n-        Permissions perms = null;\n-        ProtectionDomain pd = new ProtectionDomain(codesource, perms);\n-        AccessControlContext acc =\n-            new AccessControlContext(new ProtectionDomain[] { pd });\n-\n-        java.security.AccessController.doPrivileged(\n-        new java.security.PrivilegedExceptionAction() {\n-            public Object run() throws Exception {\n-                TestProvider.exerciseTestProvider(\n-                    TestProvider2.loadClassReturn,\n-                    TestProvider2.loadProxyClassReturn,\n-                    TestProvider2.getClassLoaderReturn,\n-                    TestProvider2.getClassAnnotationReturn,\n-                    TestProvider2.invocations);\n-                return null;\n-            }\n-        }, acc);\n-    }\n-}\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/spi\/ContextInsulation.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,2 @@\n- * @modules java.rmi\/sun.rmi.registry\n+ * @modules java.rmi\/java.rmi.server:+open\n+ *          java.rmi\/sun.rmi.registry\n@@ -36,2 +37,2 @@\n- * @build TestLibrary ServiceConfiguration Foo\n- * @run main\/othervm\/policy=security.policy DefaultProperty\n+ * @build TestLibrary ServiceConfiguration\n+ * @run main\/othervm DefaultProperty\n@@ -40,3 +41,1 @@\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-\n+import java.lang.reflect.Field;\n@@ -44,0 +43,1 @@\n+import java.rmi.server.RMIClassLoaderSpi;\n@@ -54,9 +54,3 @@\n-        String classname = \"Foo\";\n-\n-        URL codebaseURL = null;\n-        try {\n-            codebaseURL = TestLibrary.installClassInCodebase(\n-                classname, \"remote_codebase\");\n-        } catch (MalformedURLException e) {\n-            TestLibrary.bomb(e);\n-        }\n+        \/\/ Force loading of RMIClassLoader, which will initialize the\n+        \/\/ provider instance.\n+        RMIClassLoaderSpi def = RMIClassLoader.getDefaultProviderInstance();\n@@ -64,8 +58,3 @@\n-        TestLibrary.suggestSecurityManager(null);\n-\n-        Class fooClass = RMIClassLoader.loadClass(codebaseURL, classname);\n-        if (!fooClass.getName().equals(classname)) {\n-            throw new RuntimeException(\n-                \"wrong class name, expected: \" + classname +\n-                \", received: \" + fooClass.getName());\n-        }\n+        Field fProvider = RMIClassLoader.class.getDeclaredField(\"provider\");\n+        fProvider.setAccessible(true);\n+        RMIClassLoaderSpi actual = (RMIClassLoaderSpi) fProvider.get(null);\n@@ -73,5 +62,5 @@\n-        String annotation = RMIClassLoader.getClassAnnotation(fooClass);\n-        if (!annotation.equals(codebaseURL.toString())) {\n-            throw new RuntimeException(\n-                \"wrong class annotation, expected: \" + codebaseURL.toString() +\n-                \", received: \" + annotation);\n+        if (def != actual) {\n+            System.err.println(\"TEST FAILED\");\n+            System.err.println(\"default provider = \" + def);\n+            System.err.println(\"actual provider = \" + actual);\n+            throw new AssertionError(\"TEST FAILED\");\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/spi\/DefaultProperty.java","additions":18,"deletions":29,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run main\/othervm\/policy=security.policy Installed\n+ * @run main\/othervm Installed\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/spi\/Installed.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run main\/othervm\/policy=security.policy InvalidProperty\n+ * @run main\/othervm InvalidProperty\n@@ -53,2 +53,0 @@\n-        TestLibrary.suggestSecurityManager(null);\n-\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/spi\/InvalidProperty.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run main\/othervm\/policy=security.policy Property\n+ * @run main\/othervm Property\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/spi\/Property.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,2 +142,0 @@\n-        TestLibrary.suggestSecurityManager(null);\n-\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/spi\/TestProvider.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,22 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-\n-    \/\/ permissions needed to move classes into separate codebase directories\n-    permission java.io.FilePermission\n-\t\"${test.src}${\/}-\", \"read\";\n-    permission java.io.FilePermission\n-\t\"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.io.FilePermission\n-\t\".${\/}-\", \"read,write,delete\";\n-\n-    \/\/ used by TestLibrary to determine test environment\n-    permission java.util.PropertyPermission \"test.*\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-    permission java.util.PropertyPermission\n-\t\"java.rmi.server.RMIClassLoaderSpi\", \"read,write\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/spi\/security.policy","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,2 @@\n- * @build TestLibrary Receiver UseCodebaseOnly_Stub Foo Bar\n- * @run main\/othervm\/policy=security.policy UseCodebaseOnly\n+ * @build TestLibrary Receiver UseCodebaseOnly_Stub Foo Bar TestLoaderHandler\n+ * @run main\/othervm UseCodebaseOnly\n@@ -62,0 +62,2 @@\n+        System.setProperty(\"java.rmi.server.RMIClassLoaderSpi\", \"TestLoaderHandler\");\n+\n@@ -91,2 +93,0 @@\n-        TestLibrary.suggestSecurityManager(null);\n-\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/useCodebaseOnly\/UseCodebaseOnly.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-\n-    \/\/ specific property access needed by this test\n-    permission java.util.PropertyPermission\n-\t\"java.rmi.server.codebase\", \"read,write\";\n-    permission java.util.PropertyPermission\n-\t\"java.rmi.server.useCodebaseOnly\", \"read,write\";\n-\n-    \/\/ permissions needed to move classes into separate codebase directories\n-    permission java.io.FilePermission\n-\t\"${test.classes}${\/}-\", \"read,write,delete\";\n-    permission java.io.FilePermission\n-\t\".${\/}-\", \"read,write,delete\";\n-\n-    \/\/ used by TestLibrary to determine test environment\n-    permission java.util.PropertyPermission \"test.*\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-    \/\/ allow exporting of remote objects on an arbitrary port\n-    permission java.net.SocketPermission \"*:1024-\", \"connect,accept,listen\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/useCodebaseOnly\/security.policy","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @run main\/othervm\/policy=security.policy\/timeout=120 UseGetURLs\n+ * @run main\/othervm\/timeout=120 UseGetURLs\n@@ -53,4 +53,0 @@\n-        TestLibrary.suggestSecurityManager(\"java.rmi.RMISecurityManager\");\n-        System.err.println(\"Security manager: \" +\n-                           System.getSecurityManager().getClass().getName());\n-\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/useGetURLs\/UseGetURLs.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,18 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-  \/\/ the test needs to move classfiles out of its classpath\n-  permission java.io.FilePermission \"${test.classes}\", \"read,write,delete\";\n-  permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n-\n-  \/\/ test needs to install class files\n-  permission java.io.FilePermission \".\", \"read,write,delete\";\n-  permission java.io.FilePermission \".${\/}-\", \"read,write,delete\";\n-\n-  \/\/ used by TestLibrary to determine test environment \n-  permission java.util.PropertyPermission \"test.*\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.util.PropertyPermission \"java.home\", \"read\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RMIClassLoader\/useGetURLs\/security.policy","additions":0,"deletions":18,"binary":false,"changes":18,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,2 +61,0 @@\n-        TestLibrary.suggestSecurityManager(\"java.rmi.RMISecurityManager\");\n-\n","filename":"test\/jdk\/java\/rmi\/server\/RMISocketFactory\/useSocketFactory\/registry\/HelloImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run main\/othervm\/policy=security.policy\/timeout=240 UseCustomSocketFactory\n+ * @run main\/othervm\/timeout=240 UseCustomSocketFactory\n@@ -60,1 +60,0 @@\n-        TestLibrary.suggestSecurityManager(\"java.rmi.RMISecurityManager\");\n@@ -83,3 +82,0 @@\n-                                     \"-Djava.security.manager=allow\" +\n-                                     \" -Djava.security.policy=\" +\n-                                     TestParams.defaultPolicy +\n","filename":"test\/jdk\/java\/rmi\/server\/RMISocketFactory\/useSocketFactory\/registry\/UseCustomSocketFactory.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-  \/\/ used by TestLibrary to determine extra commandline properties\n-  permission java.io.FilePermission \"..${\/}..${\/}test.props\", \"read\";\n-\n-  \/\/ property specifically accessed by this test.\n-  permission java.util.PropertyPermission \"user.name\", \"read\";\n-\n-  \/\/ test needs to use java to exec an EchoImpl object\n-  permission java.io.FilePermission \"${java.home}${\/}bin${\/}java\", \"execute\";\n-\n-  \/\/ used by TestLibrary to determine test environment \n-  permission java.util.PropertyPermission \"test.*\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-  permission java.util.PropertyPermission \"rmi.registry.port\", \"read\";\t\n-\n-  permission java.util.PropertyPermission \"java.security.policy\", \"read\";\n-  permission java.util.PropertyPermission \"java.security.manager\", \"read\";\n-\n-  \/\/ used by TestLibrary to get the RMI Registry port\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.registry\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.server\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport.proxy\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport.tcp\";\n-\n-  \/\/ test needs to communicate with objects on arbitrary ports\n-  permission java.net.SocketPermission \"*:1024-\", \"connect,accept,listen\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RMISocketFactory\/useSocketFactory\/registry\/security.policy","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,2 +58,0 @@\n-        TestLibrary.suggestSecurityManager(\"java.rmi.RMISecurityManager\");\n-\n","filename":"test\/jdk\/java\/rmi\/server\/RMISocketFactory\/useSocketFactory\/unicast\/EchoImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run main\/othervm\/policy=security.policy\/timeout=120 UseCustomSocketFactory\n+ * @run main\/othervm\/timeout=120 UseCustomSocketFactory\n@@ -55,2 +55,0 @@\n-        TestLibrary.suggestSecurityManager(\"java.rmi.RMISecurityManager\");\n-\n@@ -64,2 +62,0 @@\n-            System.err.println(\"test policy: \" +\n-                    TestParams.defaultPolicy);\n@@ -67,2 +63,0 @@\n-                    \"-Djava.security.manager=allow -Djava.security.policy=\" +\n-                    TestParams.defaultPolicy +\n","filename":"test\/jdk\/java\/rmi\/server\/RMISocketFactory\/useSocketFactory\/unicast\/UseCustomSocketFactory.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-  \/\/ used by TestLibrary to determine extra commandline properties\n-  permission java.io.FilePermission \"..${\/}..${\/}test.props\", \"read\";\n-\n-  \/\/ property specifically accessed by this test.\n-  permission java.util.PropertyPermission \"user.name\", \"read\";\n-\n-  \/\/ test needs to use java to exec an EchoImpl object\n-  permission java.io.FilePermission \"${java.home}${\/}bin${\/}java\", \"execute\";\n-\n-  \/\/ used by TestLibrary to determine test environment \n-  permission java.util.PropertyPermission \"test.*\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-  permission java.util.PropertyPermission \"rmi.registry.port\", \"read\";\t\n-\n-  permission java.util.PropertyPermission \"java.security.policy\", \"read\";\n-  permission java.util.PropertyPermission \"java.security.manager\", \"read\";\n-\n-  \/\/ used by TestLibrary to get the RMI Registry port\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.registry\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.server\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport.proxy\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport.tcp\";\n-\n-  \/\/ test needs to communicate with objects on arbitrary ports\n-  permission java.net.SocketPermission \"*:1024-\", \"connect,accept,listen\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RMISocketFactory\/useSocketFactory\/unicast\/security.policy","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm\/policy=security.policy\/timeout=240 ToStub\n+ * @run main\/othervm\/timeout=240 ToStub\n@@ -60,4 +60,0 @@\n-            if (System.getSecurityManager() == null) {\n-                System.setSecurityManager(new SecurityManager());\n-            }\n-\n","filename":"test\/jdk\/java\/rmi\/server\/RemoteObject\/toStub\/ToStub.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RemoteObject\/toStub\/security.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4533390\n- * @summary SecurityException can be obtained but is not specified.\n- * The RemoteServer.setLog method requires\n- * java.util.log.LoggingPermission(\"control\").\n- * @author Ann Wollrath\n- * @run main\/othervm\/policy=security.policy SetLogPermission\n- *\/\n-\n-import java.rmi.server.RemoteServer;\n-import java.io.ByteArrayOutputStream;\n-import java.net.URL;\n-import java.security.*;\n-import java.security.cert.Certificate;\n-\n-public class SetLogPermission {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        System.err.println(\"\\nRegression test for bug 4533390\\n\");\n-\n-        if (System.getSecurityManager() == null) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n-        CodeSource codesource = new CodeSource(null, (Certificate[]) null);\n-        Permissions perms = null;\n-        ProtectionDomain pd = new ProtectionDomain(codesource, perms);\n-        AccessControlContext acc =\n-            new AccessControlContext(new ProtectionDomain[] { pd });\n-\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction() {\n-            public Object run() {\n-                try {\n-                    System.err.println(\n-                        \"Attempt to set log without permission\");\n-                    RemoteServer.setLog(new ByteArrayOutputStream());\n-                    throw new RuntimeException(\n-                        \"TEST FAILED: set log without permission\");\n-                } catch (SecurityException e) {\n-                    System.err.println(\n-                        \"TEST PASSED: unable to set log without permission\");\n-                }\n-                return null;\n-            }}, acc);\n-\n-        try {\n-            System.err.println(\"Attempt to set log with permission\");\n-            RemoteServer.setLog(new ByteArrayOutputStream());\n-            System.err.println(\n-                \"TEST PASSED: sufficient permission to set log\");\n-        } catch (SecurityException e) {\n-            System.err.println(\"TEST FAILED: unable to set log\");\n-            throw e;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/rmi\/server\/RemoteServer\/setLogPermission\/SetLogPermission.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.util.logging.LoggingPermission \"control\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/RemoteServer\/setLogPermission\/security.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @run main\/othervm\/policy=security.policy\/timeout=240 UseDynamicProxies true\n- * @run main\/othervm\/policy=security.policy\/timeout=240 UseDynamicProxies\n+ * @run main\/othervm\/timeout=240 UseDynamicProxies true\n+ * @run main\/othervm\/timeout=240 UseDynamicProxies\n@@ -66,4 +66,0 @@\n-            if (System.getSecurityManager() == null) {\n-                System.setSecurityManager(new SecurityManager());\n-            }\n-\n","filename":"test\/jdk\/java\/rmi\/server\/UnicastRemoteObject\/useDynamicProxies\/UseDynamicProxies.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/UnicastRemoteObject\/useDynamicProxies\/security.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n- * @run main\/othervm\/timeout=120 -Djava.security.manager=allow UnreferencedContext\n+ * @run main\/othervm\/timeout=120 UnreferencedContext\n@@ -70,4 +70,0 @@\n-        \/\/ turn on security to ensure that the action below will not\n-        \/\/ require extra permissions\n-        System.setSecurityManager(new java.rmi.RMISecurityManager());\n-\n","filename":"test\/jdk\/java\/rmi\/server\/Unreferenced\/unreferencedContext\/UnreferencedContext.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * @run main\/othervm\/policy=security.policy\/timeout=120 ClientStackTrace\n+ * @run main\/othervm\/timeout=120 ClientStackTrace\n@@ -68,3 +68,0 @@\n-\n-        TestLibrary.suggestSecurityManager(\"java.rmi.RMISecurityManager\");\n-\n","filename":"test\/jdk\/java\/rmi\/server\/clientStackTrace\/ClientStackTrace.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,8 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-  \/\/ test needs to communicate with objects on arbitrary ports\n-  permission java.net.SocketPermission \"*:1024-\", \"connect,accept,listen\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/clientStackTrace\/security.policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * @run main\/othervm\/policy=security.policy\/secure=java.rmi.RMISecurityManager\/timeout=120 UseCustomRef\n+ * @run main\/othervm\/timeout=120 UseCustomRef\n@@ -85,1 +85,0 @@\n-            TestLibrary.suggestSecurityManager(\"java.rmi.RMISecurityManager\");\n","filename":"test\/jdk\/java\/rmi\/server\/useCustomRef\/UseCustomRef.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,25 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-  \/\/ the test uses a class in the package sun.rmi.server\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.registry\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.server\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport.proxy\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.rmi.transport.tcp\";\n-  permission java.util.PropertyPermission \"package.restrict.access.sun\", \"read\";\n-  permission java.util.PropertyPermission \"package.restrict.access.sun.rmi\", \"read\";\n-\n-  \/\/ used by TestLibrary to determine test environment \n-  permission java.util.PropertyPermission \"test.*\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-  \/\/ allow exporting of remote objects on an arbitrary port.\n-  permission java.net.SocketPermission \"*:1024-\", \"connect,accept,listen\";\n-\n-  permission java.io.FilePermission \".\", \"read,write,delete\";\n-  permission java.io.FilePermission \".${\/}-\", \"read,write,delete\";\n-};\n","filename":"test\/jdk\/java\/rmi\/server\/useCustomRef\/security.policy","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -372,29 +372,0 @@\n-    \/**\n-     * Allow test framework to control the security manager set in\n-     * each test.\n-     *\n-     * @param managerClassName The class name of the security manager\n-     *                         to be instantiated and set if no security\n-     *                         manager has already been set.\n-     *\/\n-    public static void suggestSecurityManager(String managerClassName) {\n-        SecurityManager manager = null;\n-\n-        if (System.getSecurityManager() == null) {\n-            try {\n-                if (managerClassName == null) {\n-                    managerClassName = TestParams.defaultSecurityManager;\n-                }\n-                manager = ((SecurityManager) Class.\n-                           forName(managerClassName).newInstance());\n-            } catch (ClassNotFoundException cnfe) {\n-                bomb(\"Security manager could not be found: \" +\n-                     managerClassName, cnfe);\n-            } catch (Exception e) {\n-                bomb(\"Error creating security manager. \", e);\n-            }\n-\n-            System.setSecurityManager(manager);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/rmi\/testlibrary\/TestLibrary.java","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,696 @@\n+\/*\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.SoftReference;\n+import java.lang.ref.WeakReference;\n+import java.lang.reflect.Modifier;\n+import java.lang.reflect.Proxy;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.rmi.server.RMIClassLoaderSpi;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.WeakHashMap;\n+\n+\/**\n+ * Derived from <code>LoaderHandler<\/code> to provides the implementation of the\n+ * static methods of the <code>java.rmi.server.RMIClassLoader<\/code> class.\n+ *\n+ * WARNING: this loader will load classes from codebase annotations received over the\n+ * wire, without performing any security checks. It is intended only for testing.\n+ *\n+ * @author      Ann Wollrath\n+ * @author      Peter Jones\n+ * @author      Laird Dornin\n+ *\/\n+@SuppressWarnings(\"deprecation\")\n+public final class TestLoaderHandler extends RMIClassLoaderSpi {\n+\n+    \/**\n+     * value of \"java.rmi.server.codebase\" property, as cached at class\n+     * initialization time.  It may be null or contain malformed URLs.\n+     *\/\n+    private static String codebaseProperty = null;\n+    static {\n+        String prop = System.getProperty(\"java.rmi.server.codebase\");\n+        if (prop != null && prop.trim().length() > 0) {\n+            codebaseProperty = prop;\n+        }\n+    }\n+\n+    \/** list of URLs represented by the codebase property, if valid *\/\n+    private static URL[] codebaseURLs = null;\n+\n+    \/** table of class loaders that use codebase property for annotation *\/\n+    private static final Set<ClassLoader> codebaseLoaders =\n+        Collections.synchronizedSet(Collections.newSetFromMap(new IdentityHashMap<>(5)));\n+    static {\n+        for (ClassLoader codebaseLoader = ClassLoader.getSystemClassLoader();\n+             codebaseLoader != null;\n+             codebaseLoader = codebaseLoader.getParent())\n+        {\n+            codebaseLoaders.add(codebaseLoader);\n+        }\n+    }\n+\n+    \/**\n+     * table mapping codebase URL path and context class loader pairs\n+     * to class loader instances.  Entries hold class loaders with weak\n+     * references, so this table does not prevent loaders from being\n+     * garbage collected.\n+     *\/\n+    private static final HashMap<LoaderKey, LoaderEntry> loaderTable\n+        = new HashMap<>(5);\n+\n+    \/** reference queue for cleared class loader entries *\/\n+    private static final ReferenceQueue<Loader> refQueue = new ReferenceQueue<>();\n+\n+    public TestLoaderHandler() {\n+        System.err.println(\"*** TestLoaderHandler created ***\");\n+    }\n+\n+    \/**\n+     * Returns an array of URLs initialized with the value of the\n+     * java.rmi.server.codebase property as the URL path.\n+     *\/\n+    private static synchronized URL[] getDefaultCodebaseURLs()\n+        throws MalformedURLException\n+    {\n+        \/*\n+         * If it hasn't already been done, convert the codebase property\n+         * into an array of URLs; this may throw a MalformedURLException.\n+         *\/\n+        if (codebaseURLs == null) {\n+            if (codebaseProperty != null) {\n+                codebaseURLs = pathToURLs(codebaseProperty);\n+            } else {\n+                codebaseURLs = new URL[0];\n+            }\n+        }\n+        return codebaseURLs;\n+    }\n+\n+    \/**\n+     * Load a class from a network location (one or more URLs),\n+     * but first try to resolve the named class through the given\n+     * \"default loader\".\n+     *\/\n+    public Class<?> loadClass(String codebase, String name,\n+                                     ClassLoader defaultLoader)\n+        throws MalformedURLException, ClassNotFoundException\n+    {\n+        URL[] urls;\n+        if (codebase != null) {\n+            urls = pathToURLs(codebase);\n+        } else {\n+            urls = getDefaultCodebaseURLs();\n+        }\n+\n+        if (defaultLoader != null) {\n+            try {\n+                return Class.forName(name, false, defaultLoader);\n+            } catch (ClassNotFoundException e) {\n+            }\n+        }\n+\n+        return loadClass(urls, name);\n+    }\n+\n+    \/**\n+     * Returns the class annotation (representing the location for\n+     * a class) that RMI will use to annotate the call stream when\n+     * marshalling objects of the given class.\n+     *\/\n+    public String getClassAnnotation(Class<?> cl) {\n+        String name = cl.getName();\n+\n+        \/*\n+         * Class objects for arrays of primitive types never need an\n+         * annotation, because they never need to be (or can be) downloaded.\n+         *\n+         * REMIND: should we (not) be annotating classes that are in\n+         * \"java.*\" packages?\n+         *\/\n+        int nameLength = name.length();\n+        if (nameLength > 0 && name.charAt(0) == '[') {\n+            \/\/ skip past all '[' characters (see bugid 4211906)\n+            int i = 1;\n+            while (nameLength > i && name.charAt(i) == '[') {\n+                i++;\n+            }\n+            if (nameLength > i && name.charAt(i) != 'L') {\n+                return null;\n+            }\n+        }\n+\n+        \/*\n+         * Get the class's class loader.  If it is null, the system class\n+         * loader, an ancestor of the base class loader (such as the loader\n+         * for installed extensions), return the value of the\n+         * \"java.rmi.server.codebase\" property.\n+         *\/\n+        ClassLoader loader = cl.getClassLoader();\n+        if (loader == null || codebaseLoaders.contains(loader)) {\n+            return codebaseProperty;\n+        }\n+\n+        \/*\n+         * Get the codebase URL path for the class loader, if it supports\n+         * such a notion (i.e., if it is a URLClassLoader or subclass).\n+         *\/\n+        String annotation = null;\n+        if (loader instanceof Loader) {\n+            \/*\n+             * If the class loader is one of our RMI class loaders, we have\n+             * already computed the class annotation string, and no\n+             * permissions are required to know the URLs.\n+             *\/\n+            annotation = ((Loader) loader).getClassAnnotation();\n+\n+        } else if (loader instanceof URLClassLoader) {\n+            URL[] urls = ((URLClassLoader) loader).getURLs();\n+            if (urls != null) {\n+                annotation = urlsToPath(urls);\n+            }\n+        }\n+\n+        if (annotation != null) {\n+            return annotation;\n+        } else {\n+            return codebaseProperty;    \/\/ REMIND: does this make sense??\n+        }\n+    }\n+\n+    \/**\n+     * Returns a classloader that loads classes from the given codebase URL\n+     * path.  The parent classloader of the returned classloader is the\n+     * context class loader.\n+     *\/\n+    public ClassLoader getClassLoader(String codebase)\n+        throws MalformedURLException\n+    {\n+        ClassLoader parent = getRMIContextClassLoader();\n+\n+        URL[] urls;\n+        if (codebase != null) {\n+            urls = pathToURLs(codebase);\n+        } else {\n+            urls = getDefaultCodebaseURLs();\n+        }\n+\n+        return lookupLoader(urls, parent);\n+    }\n+\n+    \/**\n+     * Return the security context of the given class loader.\n+     *\/\n+    public static Object getSecurityContext(ClassLoader loader) {\n+        \/*\n+         * REMIND: This is a bogus JDK1.1-compatible implementation.\n+         * This method should never be called by application code anyway\n+         * (hence the deprecation), but should it do something different\n+         * and perhaps more useful, like return a String or a URL[]?\n+         *\/\n+        if (loader instanceof Loader) {\n+            URL[] urls = ((Loader) loader).getURLs();\n+            if (urls.length > 0) {\n+                return urls[0];\n+            }\n+        }\n+        return null;\n+    }\n+\n+    \/**\n+     * Register a class loader as one whose classes should always be\n+     * annotated with the value of the \"java.rmi.server.codebase\" property.\n+     *\/\n+    public static void registerCodebaseLoader(ClassLoader loader) {\n+        codebaseLoaders.add(loader);\n+    }\n+\n+    \/**\n+     * Load a class from the RMI class loader corresponding to the given\n+     * codebase URL path in the current execution context.\n+     *\/\n+    private Class<?> loadClass(URL[] urls, String name)\n+        throws ClassNotFoundException\n+    {\n+        ClassLoader parent = getRMIContextClassLoader();\n+\n+        \/*\n+         * Get or create the RMI class loader for this codebase URL path\n+         * and parent class loader pair.\n+         *\/\n+        Loader loader = lookupLoader(urls, parent);\n+\n+        return Class.forName(name, false, loader);\n+    }\n+\n+    \/**\n+     * Define and return a dynamic proxy class in a class loader with\n+     * URLs supplied in the given location.  The proxy class will\n+     * implement interface classes named by the given array of\n+     * interface names.\n+     *\/\n+    public Class<?> loadProxyClass(String codebase, String[] interfaces,\n+                                          ClassLoader defaultLoader)\n+        throws MalformedURLException, ClassNotFoundException\n+    {\n+        \/*\n+         * This method uses a fairly complex algorithm to load the\n+         * proxy class and its interface classes in order to maximize\n+         * the likelihood that the proxy's codebase annotation will be\n+         * preserved.  The algorithm is (assuming that all of the\n+         * proxy interface classes are public):\n+         *\n+         * If the default loader is not null, try to load the proxy\n+         * interfaces through that loader. If the interfaces can be\n+         * loaded in that loader, try to define the proxy class in an\n+         * RMI class loader (child of the context class loader) before\n+         * trying to define the proxy in the default loader.  If the\n+         * attempt to define the proxy class succeeds, the codebase\n+         * annotation is preserved.  If the attempt fails, try to\n+         * define the proxy class in the default loader.\n+         *\n+         * If the interface classes can not be loaded from the default\n+         * loader or the default loader is null, try to load them from\n+         * the RMI class loader.  Then try to define the proxy class\n+         * in the RMI class loader.\n+         *\n+         * Additionally, if any of the proxy interface classes are not\n+         * public, all of the non-public interfaces must reside in the\n+         * same class loader or it will be impossible to define the\n+         * proxy class (an IllegalAccessError will be thrown).  An\n+         * attempt to load the interfaces from the default loader is\n+         * made.  If the attempt fails, a second attempt will be made\n+         * to load the interfaces from the RMI loader. If all of the\n+         * non-public interfaces classes do reside in the same class\n+         * loader, then we attempt to define the proxy class in the\n+         * class loader of the non-public interfaces.  No other\n+         * attempt to define the proxy class will be made.\n+         *\/\n+        ClassLoader parent = getRMIContextClassLoader();\n+\n+        URL[] urls;\n+        if (codebase != null) {\n+            urls = pathToURLs(codebase);\n+        } else {\n+            urls = getDefaultCodebaseURLs();\n+        }\n+\n+        \/*\n+         * Get or create the RMI class loader for this codebase URL path\n+         * and parent class loader pair.\n+         *\/\n+        Loader loader = lookupLoader(urls, parent);\n+\n+        return loadProxyClass(interfaces, defaultLoader, loader, true);\n+    }\n+\n+    \/**\n+     * Define a proxy class in the default loader if appropriate.\n+     * Define the class in an RMI class loader otherwise.  The proxy\n+     * class will implement classes which are named in the supplied\n+     * interfaceNames.\n+     *\/\n+    private Class<?> loadProxyClass(String[] interfaceNames,\n+                                           ClassLoader defaultLoader,\n+                                           ClassLoader codebaseLoader,\n+                                           boolean preferCodebase)\n+        throws ClassNotFoundException\n+    {\n+        ClassLoader proxyLoader = null;\n+        Class<?>[] classObjs = new Class<?>[interfaceNames.length];\n+        boolean[] nonpublic = { false };\n+\n+      defaultLoaderCase:\n+        if (defaultLoader != null) {\n+            try {\n+                proxyLoader =\n+                    loadProxyInterfaces(interfaceNames, defaultLoader,\n+                                        classObjs, nonpublic);\n+            } catch (ClassNotFoundException e) {\n+                break defaultLoaderCase;\n+            }\n+            if (!nonpublic[0]) {\n+                if (preferCodebase) {\n+                    try {\n+                        return Proxy.getProxyClass(codebaseLoader, classObjs);\n+                    } catch (IllegalArgumentException e) {\n+                    }\n+                }\n+                proxyLoader = defaultLoader;\n+            }\n+            return loadProxyClass(proxyLoader, classObjs);\n+        }\n+\n+        nonpublic[0] = false;\n+        proxyLoader = loadProxyInterfaces(interfaceNames, codebaseLoader,\n+                                          classObjs, nonpublic);\n+        if (!nonpublic[0]) {\n+            proxyLoader = codebaseLoader;\n+        }\n+        return loadProxyClass(proxyLoader, classObjs);\n+    }\n+\n+    \/**\n+     * Define a proxy class in the given class loader.  The proxy\n+     * class will implement the given interfaces Classes.\n+     *\/\n+    private Class<?> loadProxyClass(ClassLoader loader, Class<?>[] interfaces)\n+        throws ClassNotFoundException\n+    {\n+        try {\n+            return Proxy.getProxyClass(loader, interfaces);\n+        } catch (IllegalArgumentException e) {\n+            throw new ClassNotFoundException(\n+                \"error creating dynamic proxy class\", e);\n+        }\n+    }\n+\n+    \/*\n+     * Load Class objects for the names in the interfaces array from\n+     * the given class loader.\n+     *\n+     * We pass classObjs and nonpublic arrays to avoid needing a\n+     * multi-element return value.  nonpublic is an array to enable\n+     * the method to take a boolean argument by reference.\n+     *\n+     * nonpublic array is needed to signal when the return value of\n+     * this method should be used as the proxy class loader.  Because\n+     * null represents a valid class loader, that value is\n+     * insufficient to signal that the return value should not be used\n+     * as the proxy class loader.\n+     *\/\n+    private static ClassLoader loadProxyInterfaces(String[] interfaces,\n+                                                   ClassLoader loader,\n+                                                   Class<?>[] classObjs,\n+                                                   boolean[] nonpublic)\n+        throws ClassNotFoundException\n+    {\n+        \/* loader of a non-public interface class *\/\n+        ClassLoader nonpublicLoader = null;\n+\n+        for (int i = 0; i < interfaces.length; i++) {\n+            Class<?> cl =\n+                (classObjs[i] = Class.forName(interfaces[i], false, loader));\n+\n+            if (!Modifier.isPublic(cl.getModifiers())) {\n+                ClassLoader current = cl.getClassLoader();\n+                if (!nonpublic[0]) {\n+                    nonpublicLoader = current;\n+                    nonpublic[0] = true;\n+                } else if (current != nonpublicLoader) {\n+                    throw new IllegalAccessError(\n+                        \"non-public interfaces defined in different \" +\n+                        \"class loaders\");\n+                }\n+            }\n+        }\n+        return nonpublicLoader;\n+    }\n+\n+    \/**\n+     * Convert a string containing a space-separated list of URLs into a\n+     * corresponding array of URL objects, throwing a MalformedURLException\n+     * if any of the URLs are invalid.\n+     *\/\n+    private static URL[] pathToURLs(String path)\n+        throws MalformedURLException\n+    {\n+        synchronized (pathToURLsCache) {\n+            Object[] v = pathToURLsCache.get(path);\n+            if (v != null) {\n+                return ((URL[])v[0]);\n+            }\n+        }\n+        StringTokenizer st = new StringTokenizer(path); \/\/ divide by spaces\n+        URL[] urls = new URL[st.countTokens()];\n+        for (int i = 0; st.hasMoreTokens(); i++) {\n+            @SuppressWarnings(\"deprecation\")\n+            var url = new URL(st.nextToken());\n+            urls[i] = url;\n+        }\n+        synchronized (pathToURLsCache) {\n+            pathToURLsCache.put(path,\n+                                new Object[] {urls, new SoftReference<String>(path)});\n+        }\n+        return urls;\n+    }\n+\n+    \/** map from weak(key=string) to [URL[], soft(key)] *\/\n+    private static final Map<String, Object[]> pathToURLsCache\n+        = new WeakHashMap<>(5);\n+\n+    \/**\n+     * Convert an array of URL objects into a corresponding string\n+     * containing a space-separated list of URLs.\n+     *\n+     * Note that if the array has zero elements, the return value is\n+     * null, not the empty string.\n+     *\/\n+    private static String urlsToPath(URL[] urls) {\n+        if (urls.length == 0) {\n+            return null;\n+        } else if (urls.length == 1) {\n+            return urls[0].toExternalForm();\n+        } else {\n+            StringBuilder path = new StringBuilder(urls[0].toExternalForm());\n+            for (int i = 1; i < urls.length; i++) {\n+                path.append(' ');\n+                path.append(urls[i].toExternalForm());\n+            }\n+            return path.toString();\n+        }\n+    }\n+\n+    \/**\n+     * Return the class loader to be used as the parent for an RMI class\n+     * loader used in the current execution context.\n+     *\/\n+    private static ClassLoader getRMIContextClassLoader() {\n+        \/*\n+         * The current implementation simply uses the current thread's\n+         * context class loader.\n+         *\/\n+        return Thread.currentThread().getContextClassLoader();\n+    }\n+\n+    \/**\n+     * Look up the RMI class loader for the given codebase URL path\n+     * and the given parent class loader.  A new class loader instance\n+     * will be created and returned if no match is found.\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    private static Loader lookupLoader(final URL[] urls,\n+                                       final ClassLoader parent)\n+    {\n+        \/*\n+         * If the requested codebase URL path is empty, the supplied\n+         * parent class loader will be sufficient.\n+         *\n+         * REMIND: To be conservative, this optimization is commented out\n+         * for now so that it does not open a security hole in the future\n+         * by providing untrusted code with direct access to the public\n+         * loadClass() method of a class loader instance that it cannot\n+         * get a reference to.  (It's an unlikely optimization anyway.)\n+         *\n+         * if (urls.length == 0) {\n+         *     return parent;\n+         * }\n+         *\/\n+\n+        LoaderEntry entry;\n+        Loader loader;\n+\n+        synchronized (TestLoaderHandler.class) {\n+            \/*\n+             * Take this opportunity to remove from the table entries\n+             * whose weak references have been cleared.\n+             *\/\n+            while ((entry = (LoaderEntry) refQueue.poll()) != null) {\n+                if (!entry.removed) {   \/\/ ignore entries removed below\n+                    loaderTable.remove(entry.key);\n+                }\n+            }\n+\n+            \/*\n+             * Look up the codebase URL path and parent class loader pair\n+             * in the table of RMI class loaders.\n+             *\/\n+            LoaderKey key = new LoaderKey(urls, parent);\n+            entry = loaderTable.get(key);\n+\n+            if (entry == null || (loader = entry.get()) == null) {\n+                \/*\n+                 * If entry was in table but it's weak reference was cleared,\n+                 * remove it from the table and mark it as explicitly cleared,\n+                 * so that new matching entry that we put in the table will\n+                 * not be erroneously removed when this entry is processed\n+                 * from the weak reference queue.\n+                 *\/\n+                if (entry != null) {\n+                    loaderTable.remove(key);\n+                    entry.removed = true;\n+                }\n+\n+                \/*\n+                 * A matching loader was not found, so create a new class\n+                 * loader instance for the requested codebase URL path and\n+                 * parent class loader.  The instance is created within an\n+                 * access control context restricted to the permissions\n+                 * necessary to load classes from its codebase URL path.\n+                 *\/\n+                loader = new Loader(urls, parent);\n+\n+                \/*\n+                 * Finally, create an entry to hold the new loader with a\n+                 * weak reference and store it in the table with the key.\n+                 *\/\n+                entry = new LoaderEntry(key, loader);\n+                loaderTable.put(key, entry);\n+            }\n+        }\n+\n+        return loader;\n+    }\n+\n+    \/**\n+     * LoaderKey holds a codebase URL path and parent class loader pair\n+     * used to look up RMI class loader instances in its class loader cache.\n+     *\/\n+    private static class LoaderKey {\n+\n+        private URL[] urls;\n+\n+        private ClassLoader parent;\n+\n+        private int hashValue;\n+\n+        public LoaderKey(URL[] urls, ClassLoader parent) {\n+            this.urls = urls;\n+            this.parent = parent;\n+\n+            if (parent != null) {\n+                hashValue = parent.hashCode();\n+            }\n+            for (int i = 0; i < urls.length; i++) {\n+                hashValue ^= urls[i].hashCode();\n+            }\n+        }\n+\n+        public int hashCode() {\n+            return hashValue;\n+        }\n+\n+        public boolean equals(Object obj) {\n+            if (obj instanceof LoaderKey) {\n+                LoaderKey other = (LoaderKey) obj;\n+                if (parent != other.parent) {\n+                    return false;\n+                }\n+                if (urls == other.urls) {\n+                    return true;\n+                }\n+                if (urls.length != other.urls.length) {\n+                    return false;\n+                }\n+                for (int i = 0; i < urls.length; i++) {\n+                    if (!urls[i].equals(other.urls[i])) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * LoaderEntry contains a weak reference to an RMIClassLoader.  The\n+     * weak reference is registered with the private static \"refQueue\"\n+     * queue.  The entry contains the codebase URL path and parent class\n+     * loader key for the loader so that the mapping can be removed from\n+     * the table efficiently when the weak reference is cleared.\n+     *\/\n+    private static class LoaderEntry extends WeakReference<Loader> {\n+\n+        public LoaderKey key;\n+\n+        \/**\n+         * set to true if the entry has been removed from the table\n+         * because it has been replaced, so it should not be attempted\n+         * to be removed again\n+         *\/\n+        public boolean removed = false;\n+\n+        public LoaderEntry(LoaderKey key, Loader loader) {\n+            super(loader, refQueue);\n+            this.key = key;\n+        }\n+    }\n+\n+    \/**\n+     * Loader is the actual class of the RMI class loaders created\n+     * by the RMIClassLoader static methods.\n+     *\/\n+    private static class Loader extends URLClassLoader {\n+\n+        \/** string form of loader's codebase URL path, also an optimization *\/\n+        private String annotation;\n+\n+        private Loader(URL[] urls, ClassLoader parent) {\n+            super(urls, parent);\n+\n+            \/*\n+             * Caching the value of class annotation string here assumes\n+             * that the protected method addURL() is never called on this\n+             * class loader.\n+             *\/\n+            annotation = urlsToPath(urls);\n+        }\n+\n+        \/**\n+         * Return the string to be annotated with all classes loaded from\n+         * this class loader.\n+         *\/\n+        public String getClassAnnotation() {\n+            return annotation;\n+        }\n+\n+        \/**\n+         * Return a string representation of this loader (useful for\n+         * debugging).\n+         *\/\n+        public String toString() {\n+            return super.toString() + \"[\\\"\" + annotation + \"\\\"]\";\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/rmi\/testlibrary\/TestLoaderHandler.java","additions":696,"deletions":0,"binary":false,"changes":696,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @run main\/othervm\/policy=security.policy\/timeout=360 DGCDeadLock\n+ * @run main\/othervm\/timeout=360 DGCDeadLock\n@@ -74,1 +74,0 @@\n-        TestLibrary.suggestSecurityManager(\"java.rmi.RMISecurityManager\");\n","filename":"test\/jdk\/java\/rmi\/transport\/dgcDeadLock\/DGCDeadLock.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * security policy used by the registry sub-process\n- *\/\n-\n-grant {\n-  \/\/ used by TestLibrary to determine extra commandline properties\n-  permission java.io.FilePermission \"..${\/}..${\/}test.props\", \"read\";\n-\n-  \/\/ property specifically accessed by this test.\n-  permission java.util.PropertyPermission \"sun.rmi.transport.cleanInterval\", \"write\";\n-  permission java.util.PropertyPermission \"package.restrict.access.sun\", \"read\";\n-  permission java.util.PropertyPermission \"package.restrict.access.sun.rmi\", \"read\";\n-\n-  \/\/ test needs to use java to exec an EchoImpl object\n-  permission java.io.FilePermission \"${java.home}${\/}bin${\/}java\", \"execute\";\n-\n-  \/\/ used by TestLibrary to determine test environment \n-  permission java.util.PropertyPermission \"test.*\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-  permission java.util.PropertyPermission \"java.security.policy\", \"read\";\n-  permission java.util.PropertyPermission \"java.security.manager\", \"read\";\n-\n-  \/\/ test needs to communicate with objects on arbitrary ports\n-  permission java.net.SocketPermission \"*:1024-\", \"connect,accept,listen\";\n-};\n","filename":"test\/jdk\/java\/rmi\/transport\/dgcDeadLock\/registry.security.policy","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * security policy used by the test process\n- *\/\n-\n-grant {\n-  \/\/ used by TestLibrary to determine extra commandline properties\n-  permission java.io.FilePermission \"..${\/}..${\/}test.props\", \"read\";\n-\n-  \/\/ property specifically accessed by this test.\n-  permission java.util.PropertyPermission \"sun.rmi.transport.cleanInterval\", \"write\";\n-  permission java.util.PropertyPermission \"package.restrict.access.sun\", \"read\";\n-  permission java.util.PropertyPermission \"package.restrict.access.sun.rmi\", \"read\";\n-\n-  \/\/ test needs to use java to exec an EchoImpl object\n-  permission java.io.FilePermission \"${java.home}${\/}bin${\/}java\", \"execute\";\n-\n-  \/\/ used by TestLibrary to determine test environment \n-  permission java.util.PropertyPermission \"test.*\", \"read\";\n-  permission java.util.PropertyPermission \"user.dir\", \"read\";\n-  permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-  permission java.util.PropertyPermission \"java.security.policy\", \"read\";\n-  permission java.util.PropertyPermission \"java.security.manager\", \"read\";\n-\n-  \/\/ test needs to communicate with objects on arbitrary ports\n-  permission java.net.SocketPermission \"*:1024-\", \"connect,accept,listen\";\n-};\n","filename":"test\/jdk\/java\/rmi\/transport\/dgcDeadLock\/security.policy","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm\/policy=security.policy\/timeout=60\n+ * @run main\/othervm\/timeout=60\n@@ -57,4 +57,0 @@\n-        \/\/ Make trouble for ourselves\n-        if (System.getSecurityManager() == null)\n-            System.setSecurityManager(new RMISecurityManager());\n-\n","filename":"test\/jdk\/java\/rmi\/transport\/readTimeout\/ReadTimeoutTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,10 +0,0 @@\n-grant {\n-    \/\/ Take this out once we can specify -Djava.security.debug on\n-    \/\/ the run line and figure out what else is needed\n-    permission java.security.AllPermission;\n-\n-    permission java.net.SocketPermission \"*:1024-65535\", \"connect,listen\";\n-    permission java.util.PropertyPermission \"http.proxyHost\", \"write\";\n-    permission java.util.PropertyPermission \"http.proxyPort\", \"write\";\n-    permission java.lang.RuntimePermission \"setFactory\";\n-};\n","filename":"test\/jdk\/java\/rmi\/transport\/readTimeout\/security.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4232768\n- * @summary Make sure NullPointerException is raised when permission to check\n- * for is null\n- *\/\n-\n-import java.security.ProtectionDomain;\n-import java.security.AccessControlContext;\n-\n-public class CheckNullPermission {\n-\n-   public static void main (String argv[]) throws Exception {\n-       ProtectionDomain pd[] = new ProtectionDomain[1];\n-\n-       try {\n-           (new AccessControlContext(pd)).checkPermission(null);\n-           throw new Exception(\"Expected NullPointerException not thrown\");\n-       } catch (NullPointerException npe) {\n-       }\n-   }\n-}\n","filename":"test\/jdk\/java\/security\/AccessControlContext\/CheckNullPermission.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8214583\n- * @summary Check that getContext works after JIT compiler escape analysis.\n- *\/\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.DomainCombiner;\n-import java.security.ProtectionDomain;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.net.URL;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-public class DoPriv {\n-\n-    static void go(final DomainCombiner dc0, final AccessControlContext co, final int index) throws Exception {\n-        final AccessControlContext ci = new AccessControlContext(co, dc0);\n-        AccessController.doPrivileged((PrivilegedExceptionAction<Integer>)() -> {\n-            AccessControlContext c1 = AccessController.getContext();\n-            DomainCombiner dc = c1.getDomainCombiner();\n-            if (dc != dc0 || dc == null) {\n-                throw new AssertionError(\"iteration \" + index + \" \" + dc + \" != \" + dc0);\n-            }\n-            return 0;\n-        }, ci);\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        final DomainCombiner dc0 = new DomainCombiner() {\n-            public ProtectionDomain[] combine(ProtectionDomain[] currentDomains,\n-                                            ProtectionDomain[] assignedDomains) {\n-                return null;\n-            }\n-        };\n-\n-        final AccessControlContext co = AccessController.getContext();\n-\n-        for (int i = 0; i < 500_000; ++i) {\n-            go(dc0, co, i);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/AccessController\/DoPriv.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class DoPrivAccomplice {\n-\n-    public String go() {\n-        String name = (String)java.security.AccessController.\n-                doPrivileged((java.security.PrivilegedAction)() ->\n-                        System.getProperty(\"user.name\"));\n-        return name;\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/AccessController\/DoPrivAccomplice.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,116 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.util.JarUtils;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-\/*\n- * @test\n- * @bug 8048362\n- * @summary Tests the doPrivileged with accomplice Generate two jars\n- * (DoPrivTest.jar and DoPrivAccomplice.jar) and grant permission to\n- * DoPrivAccmplice.jar for reading user.name property from a PrivilagedAction.\n- * Run DoPrivTest.jar and try to access user.name property using\n- * DoPrivAccmplice.jar.\n- *\n- * @library \/test\/lib\n- * @build jdk.test.lib.util.JarUtils\n- *        jdk.test.lib.Utils\n- *        jdk.test.lib.Asserts\n- *        jdk.test.lib.JDKToolFinder\n- *        jdk.test.lib.JDKToolLauncher\n- *        jdk.test.lib.Platform\n- *        jdk.test.lib.process.*\n- * @run main\/othervm DoPrivAccompliceTest\n- *\/\n-\n-public class DoPrivAccompliceTest {\n-    private static final String ACTION_SOURCE = DoPrivAccomplice.class.getName();\n-    private static final String TEST_SOURCE = DoPrivTest.class.getName();\n-\n-    private static void createPolicyFile(Path jarFile, Path policy) {\n-        String codebase = jarFile.toFile().toURI().toString();\n-        String quotes = \"\\\"\";\n-        StringBuilder policyFile = new StringBuilder();\n-        policyFile.append(\"grant codeBase \")\n-                  .append(quotes).append(codebase).append(quotes)\n-                  .append(\"{\\n\")\n-                  .append(\"permission java.util.PropertyPermission \")\n-                  .append(quotes).append(\"user.name\").append(quotes)\n-                  .append(\",\")\n-                  .append(quotes).append(\"read\").append(quotes)\n-                  .append(\";\\n};\");\n-        try (FileWriter writer = new FileWriter(policy.toFile())) {\n-            writer.write(policyFile.toString());\n-        } catch (IOException e) {\n-            throw new Error(\"Error while creating policy file \" + policy, e);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ copy class files to pwd\n-        ClassFileInstaller.main(ACTION_SOURCE, TEST_SOURCE);\n-        Path pwd = Paths.get(\".\");\n-        Path jarFile1 = pwd.resolve(ACTION_SOURCE + \".jar\").toAbsolutePath();\n-        Path jarFile2 = pwd.resolve(TEST_SOURCE + \".jar\").toAbsolutePath();\n-        Path policy = pwd.resolve(\"java.policy\").toAbsolutePath();\n-\n-        JarUtils.createJar(jarFile1.toString(), ACTION_SOURCE + \".class\");\n-        System.out.println(\"Created jar file \" + jarFile1);\n-        JarUtils.createJar(jarFile2.toString(), TEST_SOURCE + \".class\");\n-        System.out.println(\"Created jar file \" + jarFile2);\n-\n-\n-        String pathSepartor = System.getProperty(\"path.separator\");\n-        String[] commands = {\n-                \"-Djava.security.manager\",\n-                \"-Djava.security.policy=\" + policy,\n-                \"-classpath\", jarFile1 + pathSepartor + jarFile2,\n-                TEST_SOURCE\n-        };\n-\n-        String userName = System.getProperty(\"user.name\");\n-\n-        createPolicyFile(jarFile1, policy);\n-        System.out.println(\"Created policy for \" + jarFile1);\n-        ProcessTools.executeTestJava(commands)\n-                    .shouldHaveExitValue(0)\n-                    .shouldContain(userName)\n-                    .stderrShouldBeEmptyIgnoreWarnings();\n-\n-        createPolicyFile(jarFile2, policy);\n-        System.out.println(\"Created policy for \" + jarFile2);\n-        ProcessTools.executeTestJava(commands)\n-                    .shouldNotHaveExitValue(0)\n-                    .shouldNotContain(userName)\n-                    .stderrShouldContain(\"java.security.AccessControlException\");\n-\n-        System.out.println(\"Test PASSES\");\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/AccessController\/DoPrivAccompliceTest.java","additions":0,"deletions":116,"binary":false,"changes":116,"status":"deleted"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class DoPrivTest {\n-\n-    public static void main(String[] args) {\n-        String name = new DoPrivAccomplice().go();\n-        System.out.println(\"Received Name : \" + name);\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/AccessController\/DoPrivTest.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -1,215 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8014097\n- * @summary Test the limited privilege scope version of doPrivileged\n- *\/\n-\n-import java.security.*;\n-import java.util.*;\n-\n-public class LimitedDoPrivileged {\n-    \/*\n-     * Test variations of doPrivileged() and doPrivileged() with a limited privilege scope\n-     * in a sandbox with the usual default permission to read the system properties for the\n-     * file and path separators.\n-     *\n-     * By passing in an \"assigned\" AccessControlContext that has\n-     * no default permissions we can test how code privileges are being scoped.\n-     *\/\n-\n-    private static final ProtectionDomain domain =\n-        new ProtectionDomain(null, null, null, null);\n-    private static final AccessControlContext acc =\n-        new AccessControlContext(new ProtectionDomain[] { domain });\n-    private static final PropertyPermission pathPerm =\n-        new PropertyPermission(\"path.separator\", \"read\");\n-    private static final PropertyPermission filePerm =\n-        new PropertyPermission(\"file.separator\", \"read\");\n-\n-    public static void main(String[] args) throws Exception {\n-        \/*\n-         * Verify that we have the usual default property read permission.\n-         *\/\n-        AccessController.getContext().checkPermission(filePerm);\n-        AccessController.getContext().checkPermission(pathPerm);\n-        System.out.println(\"test 1 passed\");\n-\n-        \/*\n-         * Inject the \"no permission\" AccessControlContext.\n-         *\/\n-        AccessController.doPrivileged(new PrivilegedAction() {\n-            public Object run() {\n-\n-                \/*\n-                 * Verify that we no longer have the \"file.separator\" permission.\n-                 *\/\n-                try {\n-                    AccessController.getContext().checkPermission(pathPerm);\n-                } catch (AccessControlException ace) {\n-                    System.out.println(\"test 2 passed\");\n-                }\n-\n-                \/*\n-                 * Verify that we can give ourselves limited privilege to read\n-                 * any system property starting with \"path.\".\n-                 *\/\n-                AccessController.doPrivileged\n-                    (new PrivilegedAction() {\n-                        public Object run() {\n-                            AccessController.getContext().checkPermission(pathPerm);\n-                            return null;\n-                        }\n-                }, null, new PropertyPermission(\"path.*\", \"read\"));\n-                System.out.println(\"test 3 passed\");\n-\n-                \/*\n-                 * Verify that if we give ourselves limited privilege to read\n-                 * any system property starting with \"path.\" it won't give us the\n-                 * the ability to read \"file.separator\".\n-                 *\/\n-                try {\n-                    AccessController.doPrivileged\n-                        (new PrivilegedAction() {\n-                            public Object run() {\n-                                AccessController.getContext().checkPermission(filePerm);\n-                                return null;\n-                            }\n-                    }, null, new PropertyPermission(\"path.*\", \"read\"));\n-                } catch (AccessControlException ace) {\n-                    System.out.println(\"test 4 passed\");\n-                }\n-\n-                \/*\n-                 * Verify that capturing and passing in the context with no default\n-                 * system property permission grants will prevent access that succeeded\n-                 * earlier without the context assignment.\n-                 *\/\n-                final AccessControlContext context = AccessController.getContext();\n-                try {\n-                    AccessController.doPrivileged\n-                        (new PrivilegedAction() {\n-                            public Object run() {\n-                                AccessController.getContext().checkPermission(pathPerm);\n-                                return null;\n-                            }\n-                    }, context, new PropertyPermission(\"path.*\", \"read\"));\n-                } catch (AccessControlException ace) {\n-                    System.out.println(\"test 5 passed\");\n-                }\n-\n-                \/*\n-                 * Verify that we can give ourselves full privilege to read\n-                 * any system property starting with \"path.\".\n-                 *\/\n-                AccessController.doPrivileged\n-                     (new PrivilegedAction() {\n-                        public Object run() {\n-                            AccessController.getContext().checkPermission(pathPerm);\n-                            return null;\n-                        }\n-                });\n-                System.out.println(\"test 6 passed\");\n-\n-                \/*\n-                 * Verify that capturing and passing in the context with no default\n-                 * system property permission grants will prevent access that succeeded\n-                 * earlier without the context assignment.\n-                 *\/\n-                try {\n-                    AccessController.doPrivileged\n-                        (new PrivilegedAction() {\n-                            public Object run() {\n-                                AccessController.getContext().checkPermission(pathPerm);\n-                                return null;\n-                            }\n-                    }, context);\n-                } catch (AccessControlException ace) {\n-                    System.out.println(\"test 7 passed\");\n-                }\n-\n-                \/*\n-                 * Verify that we can give ourselves limited privilege to read\n-                 * any system property starting with \"path.\" when a limited\n-                 * privilege scope context is captured and passed to a regular\n-                 * doPrivileged() as an assigned context.\n-                 *\/\n-                AccessController.doPrivileged\n-                     (new PrivilegedAction() {\n-                        public Object run() {\n-\n-                            \/*\n-                             * Capture the limited privilege scope and inject it into the\n-                             * regular doPrivileged().\n-                             *\/\n-                            final AccessControlContext limitedContext = AccessController.getContext();\n-                            AccessController.doPrivileged\n-                                (new PrivilegedAction() {\n-                                    public Object run() {\n-                                        AccessController.getContext().checkPermission(pathPerm);\n-                                        return null;\n-                                }\n-                            }, limitedContext);\n-                            return null;\n-                        }\n-                }, null, new PropertyPermission(\"path.*\", \"read\"));\n-                System.out.println(\"test 8 passed\");\n-\n-                \/*\n-                 * Verify that we can give ourselves limited privilege to read\n-                 * any system property starting with \"path.\" it won't give us the\n-                 * the ability to read \"file.separator\" when a limited\n-                 * privilege scope context is captured and passed to a regular\n-                 * doPrivileged() as an assigned context.\n-                 *\/\n-                AccessController.doPrivileged\n-                     (new PrivilegedAction() {\n-                        public Object run() {\n-\n-                            \/*\n-                             * Capture the limited privilege scope and inject it into the\n-                             * regular doPrivileged().\n-                             *\/\n-                            final AccessControlContext limitedContext = AccessController.getContext();\n-                            try {\n-                                AccessController.doPrivileged\n-                                    (new PrivilegedAction() {\n-                                        public Object run() {\n-                                            AccessController.getContext().checkPermission(filePerm);\n-                                            return null;\n-                                    }\n-                                }, limitedContext);\n-                            } catch (AccessControlException ace) {\n-                                System.out.println(\"test 9 passed\");\n-                            }\n-                            return null;\n-                        }\n-                }, null, new PropertyPermission(\"path.*\", \"read\"));\n-\n-                return null;\n-            }\n-        }, acc);\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/AccessController\/LimitedDoPrivileged.java","additions":0,"deletions":215,"binary":false,"changes":215,"status":"deleted"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8050281\n- * @summary Test that NullPointerException is thrown if any element of perms\n- * parameter is null\n- * @run testng LimitedDoPrivilegedWithNullPerms\n- *\/\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.PropertyPermission;\n-import org.testng.annotations.Test;\n-\n-public class LimitedDoPrivilegedWithNullPerms {\n-\n-    AccessControlContext acc = AccessController.getContext();\n-    Permission p1 = new PropertyPermission(\"user.name\", \"read\");\n-\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void test1() {\n-        AccessController.doPrivileged(\n-                (PrivilegedAction<Void>) () -> null, acc, null);\n-    }\n-\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void test2() {\n-        AccessController.doPrivileged(\n-                (PrivilegedAction<Void>) () -> null, acc, p1, null);\n-    }\n-\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void test3() {\n-        AccessController.doPrivilegedWithCombiner(\n-                (PrivilegedAction<Void>) () -> null, acc, null);\n-    }\n-\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void test4() {\n-        AccessController.doPrivilegedWithCombiner(\n-                (PrivilegedAction<Void>) () -> null, acc, p1, null);\n-    }\n-\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void test5() throws PrivilegedActionException {\n-        AccessController.doPrivileged(\n-                (PrivilegedExceptionAction<Void>) () -> null,\n-                acc, null);\n-    }\n-\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void test6() throws PrivilegedActionException {\n-        AccessController.doPrivileged(\n-                (PrivilegedExceptionAction<Void>) () -> null,\n-                acc, p1, null);\n-    }\n-\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void test7() throws PrivilegedActionException {\n-        AccessController.doPrivilegedWithCombiner(\n-                (PrivilegedExceptionAction<Void>) () -> null,\n-                acc, null);\n-    }\n-\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void test8() throws PrivilegedActionException {\n-        AccessController.doPrivilegedWithCombiner(\n-                (PrivilegedExceptionAction<Void>) () -> null,\n-                acc, p1, null);\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/AccessController\/LimitedDoPrivilegedWithNullPerms.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8050281\n- * @summary Test limited doprivileged action with trhead calls.\n- * @run main\/othervm\/policy=policy LimitedDoPrivilegedWithThread\n- *\/\n-import java.io.FilePermission;\n-import java.security.AccessControlContext;\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n-import java.util.PropertyPermission;\n-\n-public class LimitedDoPrivilegedWithThread {\n-\n-    private static final Permission PROPERTYPERM\n-            = new PropertyPermission(\"user.name\", \"read\");\n-    private static final Permission FILEPERM\n-            = new FilePermission(\"*\", \"read\");\n-    private static final AccessControlContext ACC\n-            = new AccessControlContext(\n-                    new ProtectionDomain[]{new ProtectionDomain(null, null)});\n-\n-    public static void main(String args[]) {\n-        \/\/parent thread without any permission\n-        AccessController.doPrivileged(\n-                (PrivilegedAction) () -> {\n-                    Thread ct = new Thread(\n-                            new ChildThread(PROPERTYPERM, FILEPERM));\n-                    ct.start();\n-                    try {\n-                        ct.join();\n-                    } catch (InterruptedException ie) {\n-                        Thread.currentThread().interrupt();\n-                        ie.printStackTrace();\n-                        throw new RuntimeException(\"Unexpected InterruptedException\");\n-                    }\n-                    return null;\n-                }, ACC);\n-    }\n-}\n-\n-class ChildThread implements Runnable {\n-\n-    private final Permission P1;\n-    private final Permission P2;\n-    private boolean catchACE = false;\n-\n-    public ChildThread(Permission p1, Permission p2) {\n-        this.P1 = p1;\n-        this.P2 = p2;\n-    }\n-\n-    @Override\n-    public void run() {\n-        \/\/Verified that child thread has permission p1,\n-        runTest(null, P1, false, 1);\n-        \/\/Verified that child thread inherits parent thread's access control context\n-        AccessControlContext childAcc = AccessController.getContext();\n-        runTest(childAcc, P1, true, 2);\n-        \/\/Verified that we can give permision p2 to limit the \"privilege\" of the\n-        \/\/class calling doprivileged action, stack walk will continue\n-        runTest(null, P2, true, 3);\n-\n-    }\n-\n-    public void runTest(AccessControlContext acc, Permission perm,\n-            boolean expectACE, int id) {\n-\n-        AccessController.doPrivileged(\n-                (PrivilegedAction) () -> {\n-                    try {\n-                        AccessController.getContext().checkPermission(P1);\n-                    } catch (AccessControlException ace) {\n-                        catchACE = true;\n-                    }\n-                    if (catchACE ^ expectACE) {\n-                        throw new RuntimeException(\"test\" + id + \" failed\");\n-                    }\n-                    return null;\n-                }, acc, perm);\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/AccessController\/LimitedDoPrivilegedWithThread.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant{\n-\tpermission java.util.PropertyPermission \"user.name\", \"read\";\n- \tpermission java.io.FilePermission \"*\", \"read\";\n-};\n","filename":"test\/jdk\/java\/security\/AccessController\/policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm -Djava.security.manager=allow NullOrEmptyName\n+ * @run main\/othervm NullOrEmptyName\n@@ -33,0 +33,2 @@\n+import java.util.PropertyPermission;\n+\n@@ -38,6 +40,0 @@\n-        \/\/ run without sm installed\n-        noe.run();\n-\n-        \/\/ run with sm installed\n-        SecurityManager sm = new SecurityManager();\n-        System.setSecurityManager(sm);\n@@ -47,2 +43,1 @@\n-            \/\/ called by System.getProperty()\n-            sm.checkPropertyAccess(null);\n+            new PropertyPermission(null, \"read\");\n@@ -55,2 +50,1 @@\n-            \/\/ called by System.getProperty()\n-            sm.checkPropertyAccess(\"\");\n+            new PropertyPermission(\"\", \"read\");\n","filename":"test\/jdk\/java\/security\/BasicPermission\/NullOrEmptyName.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @run main\/othervm\/java.security.policy=Serial.policy Serial\n","filename":"test\/jdk\/java\/security\/KeyRep\/Serial.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"test.provider.name\", \"read\";\n-    \/\/ XXX note package access is *not* granted to the 'sun' package\n-};\n","filename":"test\/jdk\/java\/security\/KeyRep\/Serial.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm\/java.security.policy=SerialDSAPubKey.policy -Dsun.security.key.serial.interop=true -Dsun.security.pkcs11.enable-solaris=false SerialDSAPubKey\n+ * @run main\/othervm -Dsun.security.key.serial.interop=true -Dsun.security.pkcs11.enable-solaris=false SerialDSAPubKey\n","filename":"test\/jdk\/java\/security\/KeyRep\/SerialDSAPubKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,6 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission\n-\t\t\"accessClassInPackage.sun.security.provider\";\n-    permission java.lang.RuntimePermission\n-\t\t\"accessClassInPackage.sun.security.x509\";\n-}; \n","filename":"test\/jdk\/java\/security\/KeyRep\/SerialDSAPubKey.policy","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run main\/othervm\/java.security.policy=SerialOld.policy SerialOld\n","filename":"test\/jdk\/java\/security\/KeyRep\/SerialOld.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,16 +0,0 @@\n-grant codeBase \"file:${test.classes}\/*\" {\n-\n-    permission java.io.FilePermission \"${test.src}${file.separator}*\", \"read\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-\n-    permission java.lang.RuntimePermission\n-        \"accessClassInPackage.sun.security.provider\";\n-    permission java.lang.RuntimePermission\n-        \"accessClassInPackage.sun.security.pkcs\";\n-    permission java.lang.RuntimePermission\n-        \"accessClassInPackage.sun.security.x509\";\n-    permission java.lang.RuntimePermission\n-        \"accessClassInPackage.sun.security.rsa\";\n-    permission java.lang.RuntimePermission\n-        \"accessClassInPackage.com.sun.crypto.provider\";\n-};\n","filename":"test\/jdk\/java\/security\/KeyRep\/SerialOld.policy","additions":0,"deletions":16,"binary":false,"changes":16,"status":"deleted"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.*;\n-import java.util.PropertyPermission;\n-import java.net.SocketPermission;\n-import java.lang.*;\n-\n-public class DynamicPolicy extends Policy{\n-\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy(); \/\/ do this early before setPolicy is called\n-    static int refresher = 0;\n-\n-\n-    public DynamicPolicy() {\n-    }\n-\n-    public PermissionCollection getPermissions(CodeSource cs) {\n-\n-        Permissions perms = new Permissions();\n-        initStaticPolicy(perms);\n-        \/\/ Defalut policy in the beginning...\n-        \/\/ toggle from refresh to refresh\n-        if (refresher == 1)\n-            perms.add(new PropertyPermission(\"user.name\",\"read\"));\n-\n-        System.err.println(\"perms=[\" + perms + \"]\");\n-        return perms;\n-    }\n-\n-    public boolean implies(ProtectionDomain pd, Permission p) {\n-        return getPermissions(pd).implies(p) || DEFAULT_POLICY.implies(pd, p);\n-    }\n-\n-    public PermissionCollection getPermissions(ProtectionDomain pd) {\n-\n-        Permissions perms = new Permissions();\n-        initStaticPolicy(perms);\n-        \/\/ Defalut policy in the beginning...\n-        \/\/ toggle from refresh to refresh\n-        if (refresher == 1)\n-            perms.add(new PropertyPermission(\"user.name\",\"read\"));\n-\n-        return perms;\n-    }\n-\n-    public void refresh() {\n-        refresher++;\n-    }\n-\n-    private void initStaticPolicy(PermissionCollection perms) {\n-\n-        perms.add(new java.security.SecurityPermission(\"getPolicy\"));\n-        perms.add(new java.security.SecurityPermission(\"setPolicy\"));\n-        perms.add(new java.net.SocketPermission(\"localhost:1024-\", \"listen\"));\n-        perms.add(new PropertyPermission(\"java.version\",\"read\"));\n-        perms.add(new PropertyPermission(\"java.vendor\",\"read\"));\n-        perms.add(new PropertyPermission(\"java.vendor.url\",\"read\"));\n-        perms.add(new PropertyPermission(\"java.class.version\",\"read\"));\n-        perms.add(new PropertyPermission(\"os.name\",\"read\"));\n-        perms.add(new PropertyPermission(\"os.version\",\"read\"));\n-        perms.add(new PropertyPermission(\"os.arch\",\"read\"));\n-        perms.add(new PropertyPermission(\"file.separator\",\"read\"));\n-        perms.add(new PropertyPermission(\"path.separator\",\"read\"));\n-        perms.add(new PropertyPermission(\"line.separator\",\"read\"));\n-        perms.add(new PropertyPermission(\"java.specification.version\", \"read\"));\n-        perms.add(new PropertyPermission(\"java.specification.vendor\", \"read\"));\n-        perms.add(new PropertyPermission(\"java.specification.name\", \"read\"));\n-        perms.add(new PropertyPermission(\"java.vm.specification.version\", \"read\"));\n-        perms.add(new PropertyPermission(\"java.vm.specification.vendor\", \"read\"));\n-        perms.add(new PropertyPermission(\"java.vm.specification.name\", \"read\"));\n-        perms.add(new PropertyPermission(\"java.vm.version\", \"read\"));\n-        perms.add(new PropertyPermission(\"java.vm.vendor\", \"read\"));\n-        perms.add(new PropertyPermission(\"java.vm.name\", \"read\"));\n-        return;\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/Dynamic\/DynamicPolicy.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -1,124 +0,0 @@\n-\/*\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @author Danny Hendler\n- * @author Gary Ellison\n- * @bug 4244271\n- * @summary New policy sometimes has no effect with no  indication given\n- * @run main\/othervm\/policy=setpolicy.jp TestDynamicPolicy\n- *\/\n-\n-\/*\n-  The test should be given the following permissions:\n-\n-  grant codeBase \"file:testPath\" {\n-        permission java.security.SecurityPermission \"setPolicy\";\n-        permission java.security.SecurityPermission \"getPolicy\";\n-  };\n-\n- *\/\n-\n-\n-import java.io.PrintStream;\n-import java.io.IOException;\n-\n-import java.lang.System;\n-import java.security.Policy;\n-\n-\n-public class TestDynamicPolicy {\n-\n-    public static void main(String args[]) throws Exception {\n-\n-        try {\n-            \/\/\n-            TestDynamicPolicy jstest = new TestDynamicPolicy();\n-            jstest.doit();\n-        } catch(Exception e)  {\n-            System.out.println(\"Failed. Unexpected exception:\" + e);\n-            throw e;\n-        }\n-        System.out.println(\"Passed. OKAY\");\n-    }\n-\n-    private void doit() throws Exception {\n-        \/\/ A security manager must be installed\n-        SecurityManager sm=System.getSecurityManager();\n-        if (sm==null)\n-            throw new\n-                Exception(\"Test must be run with a security manager installed\");\n-\n-        \/\/ Instantiate and set the new policy\n-        DynamicPolicy dp = new DynamicPolicy();\n-        Policy.setPolicy(dp);\n-\n-        \/\/ Verify that policy has been set\n-        if (dp != Policy.getPolicy())\n-            throw new Exception(\"Policy was not set!!\");\n-\n-        \/\/ now see this class can access user.name\n-        String usr = getUserName();\n-\n-        if (usr != null) {\n-            System.out.println(\"Test was able to read user.name prior to refresh!\");\n-            throw new\n-                Exception(\"Test was able to read user.name prior to refresh!\");\n-        }\n-\n-        \/\/ Now, make policy allow reading user.name\n-        dp.refresh();\n-\n-        \/\/ now I should be able to read it\n-        usr = getUserName();\n-\n-        if (usr == null) {\n-            System.out.println(\"Test was unable to read user.name after refresh!\");\n-            throw new\n-                Exception(\"Test was unable to read user.name after refresh!\");\n-        }\n-        \/\/ Now, take away permission to read user.name\n-        dp.refresh();\n-\n-        \/\/ now I should not be able to read it\n-        usr = getUserName();\n-\n-        if (usr != null) {\n-            System.out.println(\"Test was able to read user.name following 2nd refresh!\");\n-            throw new\n-                Exception(\"Test was able to read user.name following 2nd refresh!\");\n-        }\n-\n-    }\n-\n-    private String getUserName() {\n-        String usr = null;\n-\n-        try {\n-            usr = System.getProperty(\"user.name\");\n-        } catch (Exception e) {\n-        }\n-        return usr;\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/Dynamic\/TestDynamicPolicy.java","additions":0,"deletions":124,"binary":false,"changes":124,"status":"deleted"},{"patch":"@@ -1,8 +0,0 @@\n-\/\/\n-\/\/ @bug 4244271\n-\n-\n-grant {\n-        permission java.security.SecurityPermission \"setPolicy\";\n-        permission java.security.SecurityPermission \"getPolicy\";\n-  };\n","filename":"test\/jdk\/java\/security\/Policy\/Dynamic\/setpolicy.jp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import TVJar.TVPermission;\n-import java.security.AccessController;\n-\n-\/**\n- * @test @bug 8050402\n- * @summary Check policy is extensible with user defined permissions\n- * @run main\/othervm\/policy=ExtensiblePolicyTest1.policy\n- *      ExtensiblePolicyTest false\n- * @run main\/othervm\/policy=ExtensiblePolicyTest2.policy\n- *      ExtensiblePolicyTest true\n- * @run main\/othervm\/policy=ExtensiblePolicyTest3.policy\n- *      ExtensiblePolicyTest true\n- *\/\n-public class ExtensiblePolicyTest {\n-\n-    public static void main(String args[]) throws Throwable {\n-        \/\/ ExtensiblePolicyTest1.policy: policy file grants permission to\n-        \/\/ watch TVChannel 3-6\n-        \/\/ ExtensiblePolicyTest2.policy: policy file grants permission to\n-        \/\/ watch TVChanel 4\n-        \/\/ ExtensiblePolicyTest3.policy: policy file grants permission signed\n-        \/\/ by duke2 to watch TVChanel 5\n-\n-        TVPermission perm = new TVPermission(\"channel:5\", \"watch\");\n-        boolean getException = false;\n-        String exceptionMessage = null;\n-        boolean expectException = Boolean.parseBoolean(args[0]);\n-        try {\n-            AccessController.checkPermission(perm);\n-        } catch (SecurityException se) {\n-            getException = true;\n-            exceptionMessage = se.getMessage();\n-        }\n-\n-        if (expectException ^ getException) {\n-            throw new RuntimeException(\"Test Failed: expectException = \"\n-                    + expectException + \" getException = \" + getException\n-                    + \"\\n\" + exceptionMessage);\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/ExtensiblePolicy\/ExtensiblePolicyTest.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-\tpermission TVJar.TVPermission \"channel:3-6\", \"watch\";\n-};\n-\n","filename":"test\/jdk\/java\/security\/Policy\/ExtensiblePolicy\/ExtensiblePolicyTest1.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-\tpermission TVJar.TVPermission \"channel:4\", \"watch\";\n-};\n","filename":"test\/jdk\/java\/security\/Policy\/ExtensiblePolicy\/ExtensiblePolicyTest2.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-keystore \"file:${user.dir}\/epkeystore\";\n-\n-grant {\n-\tpermission TVJar.TVPermission \"channel:5\", \"watch\", SignedBy \"duke2\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/security\/Policy\/ExtensiblePolicy\/ExtensiblePolicyTest3.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import TVJar.TVPermission;\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.security.AccessController;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.util.JarUtils;\n-\n-\/**\n- * @test\n- * @bug 8050402\n- * @summary Check policy is extensible with user defined permissions\n- * @library \/test\/lib\n- * @build jdk.test.lib.util.JarUtils\n- * @compile TVJar\/TVPermission.java\n- * @run main ExtensiblePolicyWithJarTest\n- *\/\n-public class ExtensiblePolicyWithJarTest {\n-\n-    public static void main(String args[]) throws Throwable {\n-        final String FS = File.separator;\n-        final String PS = File.pathSeparator;\n-        final String POL = \"ExtensiblePolicyTest3.policy\";\n-        final String JAVA_HOME = System.getProperty(\"test.jdk\");\n-        final String KEYTOOL = JAVA_HOME + FS + \"bin\" + FS + \"keytool\";\n-        final String JARSIGNER = JAVA_HOME + FS + \"bin\" + FS + \"jarsigner\";\n-        final String KEYSTORE = \"epkeystore\";\n-        final String PASSWORD = \"password\";\n-        final String ALIAS = \"duke2\";\n-        final String CLASSPATH = System.getProperty(\"test.class.path\", \"\");\n-        final String TESTCLASSES = System.getProperty(\"test.classes\", \"\");\n-        final String TVPERMJAR = \"tvPerm.jar\";\n-        final String PATHTOJAR = System.getProperty(\"user.dir\", \"\")\n-                                + FS + TVPERMJAR;\n-\n-        \/\/ create jar file for TVpermission\n-        new File(\"TVJar\").mkdir();\n-        Files.copy(Paths.get(TESTCLASSES + FS + \"TVJar\", \"TVPermission.class\"),\n-                Paths.get(\"TVJar\", \"TVPermission.class\"));\n-        Files.copy(Paths.get(TESTCLASSES + FS + \"TVJar\",\n-                \"TVPermissionCollection.class\"),\n-                Paths.get(\"TVJar\", \"TVPermissionCollection.class\"));\n-        JarUtils.createJar(TVPERMJAR, \"TVJar\/TVPermission.class\",\n-                \"TVJar\/TVPermissionCollection.class\");\n-\n-        \/\/ create key pair for jar signing\n-        ProcessTools.executeCommand(KEYTOOL,\n-                \"-genkey\",\n-                \"-keyalg\", \"DSA\",\n-                \"-alias\", ALIAS,\n-                \"-keystore\", KEYSTORE,\n-                \"-storetype\", \"JKS\",\n-                \"-keypass\", PASSWORD,\n-                \"-dname\", \"cn=Blah\",\n-                \"-storepass\", PASSWORD\n-        ).shouldHaveExitValue(0);\n-        \/\/ sign jar\n-        ProcessTools.executeCommand(JARSIGNER,\n-                \"-keystore\", KEYSTORE,\n-                \"-storepass\", PASSWORD,\n-                \"-keypass\", PASSWORD,\n-                TVPERMJAR,\n-                ALIAS).shouldHaveExitValue(0);\n-        \/\/ add jar file to classpath\n-        String cp = PATHTOJAR + PS + CLASSPATH;\n-\n-        \/\/ policy file grants permission signed by duke2 to watch TVChanel 5\n-        try {\n-            String[] cmd = {\n-            \"-classpath\", cp,\n-            \"-Djava.security.manager\",\n-            \"-Djava.security.policy=\" + POL,\n-            \"ExtensiblePolicyTest_orig$TestMain\"};\n-            ProcessTools.executeTestJava(cmd).shouldHaveExitValue(0);\n-        } catch (Exception ex) {\n-            System.out.println(\"ExtensiblePolicyWithJarTest Failed\");\n-        }\n-\n-    }\n-\n-    public static class TestMain {\n-        public static void main(String args[]) {\n-            TVPermission perm = new TVPermission(\"channel:5\", \"watch\");\n-            try {\n-                AccessController.checkPermission(perm);\n-            } catch (SecurityException se) {\n-                throw new RuntimeException(se);\n-            }\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/ExtensiblePolicy\/ExtensiblePolicyWithJarTest.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -1,358 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package TVJar;\n-\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.Iterator;\n-import java.util.StringJoiner;\n-import java.util.StringTokenizer;\n-\n-public class TVPermission extends Permission {\n-\n-    \/**\n-     * Watch\n-     *\/\n-    private final static int WATCH = 0x1;\n-\n-    \/**\n-     * Preview\n-     *\/\n-    private final static int PREVIEW = 0x2;\n-\n-    \/**\n-     * No actions\n-     *\/\n-    private final static int NONE = 0x0;\n-\n-    \/**\n-     * All actions\n-     *\/\n-    private final static int ALL = WATCH | PREVIEW;\n-\n-    \/\/ the actions mask\n-    private int mask;\n-\n-    \/\/ the actions string\n-    private String actions;\n-\n-    \/\/ the canonical name of the channel\n-    private String cname;\n-\n-    \/\/ true if the channelname is a wildcard\n-    private boolean wildcard;\n-\n-    \/\/ num range on channel\n-    private int[] numrange;\n-\n-    \/\/ various num constants\n-    private final static int NUM_MIN = 1;\n-    private final static int NUM_MAX = 128;\n-\n-    public TVPermission(String channel, String action) {\n-        this(channel, getMask(action));\n-    }\n-\n-    TVPermission(String channel, int mask) {\n-        super(channel);\n-        init(channel, mask);\n-    }\n-\n-    private synchronized int[] parseNum(String num)\n-            throws Exception {\n-\n-        if (num == null || num.equals(\"\") || num.equals(\"*\")) {\n-            wildcard = true;\n-            return new int[]{NUM_MIN, NUM_MAX};\n-        }\n-\n-        int dash = num.indexOf('-');\n-\n-        if (dash == -1) {\n-            int p = 0;\n-            try {\n-                p = Integer.parseInt(num);\n-            } catch (NumberFormatException nfe) {\n-                throw new IllegalArgumentException(\"invalid input\" + num);\n-            }\n-            return new int[]{p, p};\n-        } else {\n-            String low = num.substring(0, dash);\n-            String high = num.substring(dash + 1);\n-            int l, h;\n-\n-            if (low.equals(\"\")) {\n-                l = NUM_MIN;\n-            } else {\n-                try {\n-                    l = Integer.parseInt(low);\n-                } catch (NumberFormatException nfe) {\n-                    throw new IllegalArgumentException(\"invalid input\" + num);\n-                }\n-            }\n-\n-            if (high.equals(\"\")) {\n-                h = NUM_MAX;\n-            } else {\n-                try {\n-                    h = Integer.parseInt(high);\n-                } catch (NumberFormatException nfe) {\n-                    throw new IllegalArgumentException(\"invalid input\" + num);\n-                }\n-            }\n-            if (h < l || l < NUM_MIN || h > NUM_MAX) {\n-                throw new IllegalArgumentException(\"invalid num range\");\n-            }\n-\n-            return new int[]{l, h};\n-        }\n-    }\n-\n-    \/**\n-     * Initialize the TVPermission object.\n-     *\/\n-    private synchronized void init(String channel, int mask) {\n-\n-        \/\/ Parse the channel name.\n-        int sep = channel.indexOf(':');\n-\n-        if (sep != -1) {\n-            String num = channel.substring(sep + 1);\n-            cname = channel.substring(0, sep);\n-            try {\n-                numrange = parseNum(num);\n-            } catch (Exception e) {\n-                throw new IllegalArgumentException(\"invalid num range: \" + num);\n-            }\n-        } else {\n-            numrange = new int[]{NUM_MIN, NUM_MAX};\n-        }\n-    }\n-\n-    \/**\n-     * Convert an action string to an integer actions mask.\n-     *\n-     * @param action the action string\n-     * @return the action mask\n-     *\/\n-    private synchronized static int getMask(String action) {\n-        int mask = NONE;\n-\n-        if (action == null) {\n-            return mask;\n-        }\n-\n-        StringTokenizer st = new StringTokenizer(action.toLowerCase(), \",\");\n-        while (st.hasMoreTokens()) {\n-            String token = st.nextToken();\n-            if (token.equals(\"watch\")) {\n-                mask |= WATCH;\n-            } else if (token.equals(\"preview\")) {\n-                mask |= PREVIEW;\n-            } else {\n-                throw new IllegalArgumentException(\"invalid TV permission: \" + token);\n-            }\n-        }\n-        return mask;\n-    }\n-\n-    @Override\n-    public boolean implies(Permission p) {\n-        if (!(p instanceof TVPermission)) {\n-            return false;\n-        }\n-\n-        if (this.wildcard) {\n-            return true;\n-        }\n-\n-        TVPermission that = (TVPermission) p;\n-\n-        if ((this.mask & that.mask) != that.mask) {\n-            System.out.println(\"Masks are not ok this = \"\n-                    + this.mask + \"THat = \" + that.mask);\n-            return false;\n-        }\n-\n-        if ((this.numrange[0] > that.numrange[0])\n-                || (this.numrange[1] < that.numrange[1])) {\n-\n-            System.out.println(\"This 0= \" + this.numrange[0]\n-                    + \" 1 = \" + this.numrange[1]);\n-            System.out.println(\"That 0= \" + that.numrange[0]\n-                    + \" 1 = \" + that.numrange[1]);\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    \/**\n-     * Checks two TVPermission objects for equality.\n-     * <p>\n-     * @param obj the object we are testing for equality.\n-     * @return true if obj is a TVPermission, and has the same channelname and\n-     * action mask as this TVPermission object.\n-     *\/\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n-\n-        if (!(obj instanceof TVPermission)) {\n-            return false;\n-        }\n-\n-        TVPermission that = (TVPermission) obj;\n-\n-        \/\/ check the mask first\n-        if (this.mask != that.mask) {\n-            return false;\n-        }\n-\n-        \/\/ now check the num range...\n-        if ((this.numrange[0] != that.numrange[0])\n-                || (this.numrange[1] != that.numrange[1])) {\n-            return false;\n-        }\n-\n-        return this.getName().equals(that.getName());\n-    }\n-\n-    \/**\n-     * Returns the hash code value for this object.\n-     *\n-     * @return a hash code value for this object.\n-     *\/\n-    @Override\n-    public int hashCode() {\n-        return this.getName().hashCode();\n-    }\n-\n-    \/**\n-     * Return the canonical string representation of the actions. Always returns\n-     * actions in the following order: watch,preview.\n-     *\n-     * @param mask a specific integer action mask to translate into a string\n-     * @return the canonical string representation of the actions\n-     *\/\n-    private synchronized static String getActions(int mask) {\n-        StringJoiner sj = new StringJoiner(\",\");\n-        if ((mask & WATCH) == WATCH) {\n-            sj.add(\"watch\");\n-        }\n-        if ((mask & PREVIEW) == PREVIEW) {\n-            sj.add(\"preview\");\n-        }\n-        return sj.toString();\n-    }\n-\n-    \/**\n-     * Return the canonical string representation of the actions. Always returns\n-     * actions in the following order: watch,preview.\n-     *\n-     * @return the canonical string representation of the actions.\n-     *\/\n-    @Override\n-    public String getActions() {\n-        if (actions == null) {\n-            actions = getActions(this.mask);\n-        }\n-\n-        return actions;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return super.toString() + \"\\n\"\n-                + \"cname = \" + cname + \"\\n\"\n-                + \"wildcard = \" + wildcard + \"\\n\"\n-                + \"numrange = \" + numrange[0] + \",\" + numrange[1] + \"\\n\";\n-\n-    }\n-\n-    @Override\n-    public PermissionCollection newPermissionCollection() {\n-        return new TVPermissionCollection();\n-    }\n-}\n-\n-final class TVPermissionCollection extends PermissionCollection {\n-\n-    \/**\n-     * The TVPermissions for this set.\n-     *\/\n-    private final ArrayList<TVPermission> permissions = new ArrayList<>();\n-\n-    \/**\n-     * Adds a permission to the TVPermissions. The key for the hash is the name\n-     * in the case of wildcards, or all the IP addresses.\n-     *\n-     * @param permission the Permission object to add.\n-     *\/\n-    @Override\n-    public void add(Permission permission) {\n-        if (!(permission instanceof TVPermission)) {\n-            throw new IllegalArgumentException(\"invalid permission: \" + permission);\n-        }\n-        permissions.add((TVPermission) permission);\n-    }\n-\n-    \/**\n-     * Check and see if this collection of permissions implies the permissions\n-     * expressed in \"permission\".\n-     *\n-     * @param p the Permission object to compare\n-     *\n-     * @return true if \"permission\" is a proper subset of a permission in the\n-     * collection, false if not.\n-     *\/\n-    @Override\n-    public boolean implies(Permission p) {\n-        if (!(p instanceof TVPermission)) {\n-            return false;\n-        }\n-\n-        Iterator<TVPermission> i = permissions.iterator();\n-        while (i.hasNext()) {\n-            if (((TVPermission) i.next()).implies(p)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * Returns an enumeration of all the TVPermission objects in the container.\n-     *\n-     * @return an enumeration of all the TVPermission objects.\n-     *\/\n-    @Override\n-    public Enumeration elements() {\n-        return Collections.enumeration(permissions);\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/ExtensiblePolicy\/TVJar\/TVPermission.java","additions":0,"deletions":358,"binary":false,"changes":358,"status":"deleted"},{"patch":"@@ -1,248 +0,0 @@\n-\/*\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 5100561\n- * @bug 6273812\n- * @summary Can not explicitly create a java.security.Policy object from a file\n- * @modules java.base\/sun.security.provider\n- * @build GetInstancePolicySpi GetInstanceProvider\n- * @run main\/othervm\/policy=GetInstance.policy GetInstance\n- *\/\n-\n-import java.security.*;\n-\n-import java.io.File;\n-import java.net.URI;\n-\n-public class GetInstance {\n-\n-    private static final String JAVA_POLICY = \"JavaPolicy\";\n-\n-    private static class BadParam implements Policy.Parameters { }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        int testnum = 1;\n-        GetInstance gi = new GetInstance();\n-\n-        testnum = gi.testDefault(testnum);\n-        testnum = gi.testStringProvider(testnum);\n-        testnum = gi.testProvider(testnum);\n-        testnum = gi.testCustomImpl(testnum);\n-        testnum = gi.testBadParam(testnum);\n-\n-        \/\/ make this go last because we don't want to leave its policy set\n-        \/\/ for other tests\n-        testnum = gi.testURIParam(testnum);\n-    }\n-\n-    private int testDefault(int testnum) throws Exception {\n-        \/\/ get an instance of the default PolicySpiFile\n-        Policy p = Policy.getInstance(JAVA_POLICY, null);\n-        doTest(p, testnum++);\n-        Policy.setPolicy(p);\n-        doTestSM(testnum++);\n-\n-        \/\/ get an instance of FooPolicy\n-        try {\n-            p = Policy.getInstance(\"FooPolicy\", null);\n-            throw new SecurityException(\"test \" + testnum++ + \" failed\");\n-        } catch (NoSuchAlgorithmException nsae) {\n-            \/\/ good\n-            System.out.println(\"test \" + testnum++ + \" passed\");\n-        }\n-\n-        return testnum;\n-    }\n-\n-    private int testStringProvider(int testnum) throws Exception {\n-        \/\/ get an instance of JavaPolicy from SUN\n-        Policy p = Policy.getInstance(JAVA_POLICY, null, \"SUN\");\n-        doTest(p, testnum++);\n-        Policy.setPolicy(p);\n-        doTestSM(testnum++);\n-\n-        \/\/ get an instance of JavaPolicy from SunRsaSign\n-        try {\n-            p = Policy.getInstance(JAVA_POLICY, null, \"SunRsaSign\");\n-            throw new SecurityException(\"test \" + testnum++ + \" failed\");\n-        } catch (NoSuchAlgorithmException nsae) {\n-            \/\/ good\n-            System.out.println(\"test \" + testnum++ + \" passed\");\n-        }\n-\n-        \/\/ get an instance of JavaPolicy from FOO\n-        try {\n-            p = Policy.getInstance(JAVA_POLICY, null, \"FOO\");\n-            throw new SecurityException(\"test \" + testnum++ + \" failed\");\n-        } catch (NoSuchProviderException nspe) {\n-            \/\/ good\n-            System.out.println(\"test \" + testnum++ + \" passed\");\n-        }\n-\n-        return testnum;\n-    }\n-\n-    private int testProvider(int testnum) throws Exception {\n-        \/\/ get an instance of JavaPolicy from SUN\n-        Policy p = Policy.getInstance(JAVA_POLICY,\n-                                null,\n-                                Security.getProvider(\"SUN\"));\n-        doTest(p, testnum++);\n-        Policy.setPolicy(p);\n-        doTestSM(testnum++);\n-\n-        \/\/ get an instance of JavaPolicy from SunRsaSign\n-        try {\n-            p = Policy.getInstance(JAVA_POLICY,\n-                                null,\n-                                Security.getProvider(\"SunRsaSign\"));\n-            throw new SecurityException(\"test \" + testnum++ + \" failed\");\n-        } catch (NoSuchAlgorithmException nsae) {\n-            \/\/ good\n-            System.out.println(\"test \" + testnum++ + \" passed\");\n-        }\n-\n-        return testnum;\n-    }\n-\n-    private int testBadParam(int testnum) throws Exception {\n-\n-        \/\/ pass bad param\n-\n-        try {\n-            Policy p = Policy.getInstance(JAVA_POLICY,\n-                                new BadParam());\n-            throw new SecurityException(\"test \" + testnum++ + \" failed\");\n-        } catch (IllegalArgumentException iae) {\n-            \/\/ good\n-            System.out.println(\"test \" + testnum++ + \" passed\");\n-        }\n-\n-        try {\n-            Policy p = Policy.getInstance(JAVA_POLICY,\n-                                new BadParam(),\n-                                \"SUN\");\n-            throw new SecurityException(\"test \" + testnum++ + \" failed\");\n-        } catch (IllegalArgumentException iae) {\n-            \/\/ good\n-            System.out.println(\"test \" + testnum++ + \" passed\");\n-        }\n-\n-        try {\n-            Policy p = Policy.getInstance(JAVA_POLICY,\n-                                new BadParam(),\n-                                Security.getProvider(\"SUN\"));\n-            throw new SecurityException(\"test \" + testnum++ + \" failed\");\n-        } catch (IllegalArgumentException iae) {\n-            \/\/ good\n-            System.out.println(\"test \" + testnum++ + \" passed\");\n-        }\n-\n-        return testnum;\n-    }\n-\n-    private int testURIParam(int testnum) throws Exception {\n-        \/\/ get an instance of JavaPolicy from SUN and have it read from the URL\n-\n-        File file = new File(System.getProperty(\"test.src\", \".\"),\n-                                \"GetInstance.policyURL\");\n-        URI uri = file.toURI();\n-        Policy p = Policy.getInstance(JAVA_POLICY, new URIParameter(uri));\n-\n-        doTest(p, testnum++);\n-        Policy.setPolicy(p);\n-        doTestSM(testnum++);\n-\n-        return testnum;\n-    }\n-\n-    private int testCustomImpl(int testnum) throws Exception {\n-        Provider customProvider = new GetInstanceProvider();\n-        Policy p = Policy.getInstance(\"GetInstancePolicySpi\",\n-                                null,\n-                                customProvider);\n-\n-        \/\/ doTest has a case that will not work with custom policies,\n-        \/\/ so do not call it\n-        \/\/\n-        \/\/ doTest(p, testnum++);\n-\n-        Policy.setPolicy(p);\n-        doTestSM(testnum++);\n-\n-        return testnum;\n-    }\n-\n-    private void doTest(Policy p, int testnum) throws Exception {\n-\n-        \/\/ check granted perm\n-        if (p.implies(this.getClass().getProtectionDomain(),\n-                        new SecurityPermission(\"GetInstanceTest\"))) {\n-            System.out.println(\"test \" + testnum + \".1 passed\");\n-        } else {\n-            throw new SecurityException(\"test \" + testnum + \".1 failed\");\n-        }\n-\n-        \/\/ check perm not granted\n-        if (p.implies(this.getClass().getProtectionDomain(),\n-                        new SecurityPermission(\"NotGranted\"))) {\n-            throw new SecurityException(\"test \" + testnum + \".2 failed\");\n-        } else {\n-            System.out.println(\"test \" + testnum + \".2 passed\");\n-        }\n-\n-        \/\/ test getProvider\n-        if (\"SUN\".equals(p.getProvider().getName())) {\n-            System.out.println(\"test \" + testnum + \".3 passed\");\n-        } else {\n-            throw new SecurityException(\"test \" + testnum + \".3 failed\");\n-        }\n-\n-        \/\/ test getType\n-        if (JAVA_POLICY.equals(p.getType())) {\n-            System.out.println(\"test \" + testnum + \".4 passed\");\n-        } else {\n-            throw new SecurityException(\"test \" + testnum + \".4 failed\");\n-        }\n-    }\n-\n-    private void doTestSM(int testnum) throws Exception {\n-\n-        \/\/ check granted perm\n-        System.getSecurityManager().checkPermission\n-                        (new SecurityPermission(\"GetInstanceTest\"));\n-        System.out.println(\"test \" + testnum + \".1 passed\");\n-\n-        \/\/ check perm not granted\n-        try {\n-            System.getSecurityManager().checkPermission\n-                        (new SecurityPermission(\"NotGranted\"));\n-            throw new RuntimeException(\"test \" + testnum + \".2 failed\");\n-        } catch (SecurityException se) {\n-            System.out.println(\"test \" + testnum + \".2 passed\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/GetInstance\/GetInstance.java","additions":0,"deletions":248,"binary":false,"changes":248,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\n-grant {\n-    permission java.security.SecurityPermission\n-\t\t\t\"createPolicy.JavaPolicy\";\n-    permission java.security.SecurityPermission\n-\t\t\t\"createPolicy.FooPolicy\";\n-    permission java.security.SecurityPermission\n-\t\t\t\"createPolicy.GetInstancePolicySpi\";\n-    permission java.util.PropertyPermission\n-\t\t\t\"test.src\", \"read\";\n-    permission java.lang.RuntimePermission\n-\t\t\t\"accessClassInPackage.sun.net.www\";\n-    permission java.io.FilePermission\n-\t\t\t\"${test.src}\/GetInstance.policyURL\",\n-\t\t\t\"read\";\n-    permission java.lang.RuntimePermission\n-\t\t\t\"accessClassInPackage.sun.security.provider\";\n-    permission java.lang.SecurityPermission\n-\t\t\t\"setSecurityManager\";\n-    permission java.lang.RuntimePermission\n-\t\t\t\"getProtectionDomain\";\n-    permission java.security.SecurityPermission\n-\t\t\t\"setPolicy\";\n-    permission java.security.SecurityPermission\n-\t\t\t\"putProviderProperty.GetInstanceProvider\";\n-    permission java.security.SecurityPermission\n-\t\t\t\"GetInstanceTest\";\n-};\n","filename":"test\/jdk\/java\/security\/Policy\/GetInstance\/GetInstance.policy","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.security.SecurityPermission \"GetInstanceTest\";\n-};\n","filename":"test\/jdk\/java\/security\/Policy\/GetInstance\/GetInstance.policyURL","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.*;\n-import java.net.URL;\n-import java.net.MalformedURLException;\n-import sun.security.provider.*;\n-\n-public class GetInstancePolicySpi extends PolicySpi {\n-\n-    private Policy p;\n-\n-    public GetInstancePolicySpi(final Policy.Parameters params) {\n-        p = AccessController.doPrivileged\n-            (new PrivilegedAction<Policy>() {\n-            public Policy run() {\n-                if (params instanceof URIParameter) {\n-                    URIParameter uriParam = (URIParameter)params;\n-                    try {\n-                        URL url = uriParam.getURI().toURL();\n-                        return new PolicyFile(url);\n-                    } catch (MalformedURLException mue) {\n-                        throw new IllegalArgumentException(mue);\n-                    }\n-                }\n-                return new PolicyFile();\n-            }\n-        });\n-    }\n-\n-    public boolean engineImplies(ProtectionDomain domain, Permission perm) {\n-\n-        \/**\n-         * Note there is no need to capture own protection domain and\n-         * return immediately if we are performing a check against ourself\n-         * (a task normally needed for custom policy implementations).\n-         *\n-         * We simply call PolicyFile.implies - any doPrivileged\n-         * that PolicyFile performs will truncate us from the current ACC.\n-         *\/\n-\n-        return p.implies(domain, perm);\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/GetInstance\/GetInstancePolicySpi.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.*;\n-\n-public class GetInstanceProvider extends Provider {\n-\n-    public GetInstanceProvider() {\n-        super(\"GetInstanceProvider\",\n-                \"1\",\n-                \"GetInstanceProvider: Policy.GetInstancePolicySpi\");\n-\n-        AccessController.doPrivileged(new PrivilegedAction() {\n-            public Object run() {\n-                put(\"Policy.GetInstancePolicySpi\", \"GetInstancePolicySpi\");\n-                return null;\n-            }\n-        });\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/GetInstance\/GetInstanceProvider.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test 1.1, 00\/12\/07\n- * @bug 5100561\n- * @summary Can not explicitly create a java.security.Policy object from a file\n- * @run main\/othervm\/policy=GetInstanceSecurity.policy GetInstanceSecurity\n- *\/\n-\n-import java.security.*;\n-\n-public class GetInstanceSecurity {\n-\n-    private static final String JAVA_POLICY = \"JavaPolicy\";\n-\n-    public static void main(String[] args) throws Exception {\n-        try {\n-            Policy p = Policy.getInstance(JAVA_POLICY, null);\n-            throw new RuntimeException(\"did not catch security exception\");\n-        } catch (SecurityException se) {\n-            \/\/ good\n-        }\n-\n-        try {\n-            Policy p = Policy.getInstance(JAVA_POLICY, null, \"SUN\");\n-            throw new RuntimeException(\"did not catch security exception\");\n-        } catch (SecurityException se) {\n-            \/\/ good\n-        }\n-\n-        try {\n-            Policy p = Policy.getInstance(JAVA_POLICY, null,\n-                                        Security.getProvider(\"SUN\"));\n-            throw new RuntimeException(\"did not catch security exception\");\n-        } catch (SecurityException se) {\n-            \/\/ good\n-        }\n-\n-        System.out.println(\"test passed\");\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/GetInstance\/GetInstanceSecurity.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-grant {\n-    \/\/ do not grant this:\n-    \/\/\n-    \/\/ permission java.security.SecurityPermission\n-    \/\/\t\t\t\"createPolicy.JavaPolicy\";\n-};\n","filename":"test\/jdk\/java\/security\/Policy\/GetInstance\/GetInstanceSecurity.policy","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 7044443 7050329\n- * @run main\/othervm\/policy=JarURL.policy JarURL\n- * @summary Permissions resolved incorrectly for jar protocol\n- *\/\n-\n-import java.net.URL;\n-import java.io.File;\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.PermissionCollection;\n-import java.security.Policy;\n-import java.security.cert.Certificate;\n-\n-public class JarURL {\n-\n-    public static void main(String[] args) throws Exception {\n-        String userDir = System.getProperty(\"user.dir\");\n-        String jarURL = \"jar:file:\" + userDir + File.separator + \"foo.jar!\/\";\n-        URL codeSourceURL = new URL(jarURL);\n-        CodeSource cs = new CodeSource(codeSourceURL, new Certificate[0]);\n-        PermissionCollection perms = Policy.getPolicy().getPermissions(cs);\n-        if (!perms.implies(new AllPermission()))\n-            throw new Exception(\"FAILED: \" + codeSourceURL\n-                                + \" not granted AllPermission\");\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/GetPermissions\/JarURL.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,8 +0,0 @@\n-grant codeBase \"file:${user.dir}\/*\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant {\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-    permission java.security.SecurityPermission \"getPolicy\";\n-};\n","filename":"test\/jdk\/java\/security\/Policy\/GetPermissions\/JarURL.policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.Policy;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n-\n-public class CustomPolicy extends Policy {\n-\n-    \/\/ the ProtectionDomain of CustomPolicy\n-    private final ProtectionDomain policyPd;\n-\n-    public CustomPolicy() {\n-        policyPd = AccessController.doPrivileged(\n-            (PrivilegedAction<ProtectionDomain>)\n-                () -> this.getClass().getProtectionDomain());\n-    }\n-\n-    @Override\n-    public boolean implies(ProtectionDomain pd, Permission perm) {\n-        System.out.println(\"CustomPolicy.implies\");\n-\n-        \/\/ If the protection domain is the same as CustomPolicy, then\n-        \/\/ we return true. This is to prevent recursive permission checks\n-        \/\/ that lead to StackOverflow errors when the policy implementation\n-        \/\/ performs a sensitive operation that triggers a permission check,\n-        \/\/ for example, as below.\n-        if (pd == policyPd) {\n-            return true;\n-        }\n-\n-        \/\/ Do something that triggers a permission check to make sure that\n-        \/\/ we don't cause a StackOverflow error.\n-        String home = AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> System.getProperty(\"user.home\"));\n-\n-        return true;\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/PolicyProvider\/CustomPolicy.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.File;\n-import java.net.URL;\n-import java.security.Policy;\n-import java.security.Security;\n-\n-\/*\n- * @test\n- * @bug 8075706\n- * @summary Check that a custom policy provider can be loaded from the classpath\n- * @modules java.base\/sun.security.provider\n- * @run main\/othervm -Djava.security.manager=allow UseSystemClassLoader CUSTOM\n- * @run main\/othervm -Djava.security.manager=allow UseSystemClassLoader DEFAULT\n- * @run main\/othervm -Djava.security.manager=allow UseSystemClassLoader NOT_AVAIL\n- * @run main\/othervm -Djava.security.manager=allow UseSystemClassLoader NOT_SET\n- *\/\n-\n-public class UseSystemClassLoader {\n-\n-    enum Type {\n-        CUSTOM, DEFAULT, NOT_AVAIL, NOT_SET\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        Type t = Type.valueOf(args[0]);\n-\n-        \/\/ We can't use the jtreg java.security.policy option to specify\n-        \/\/ the policy file because that causes the default JDK policy provider\n-        \/\/ to be set and once set, we cannot change it. So, instead we use the\n-        \/\/ policy.url security property.\n-        File file = new File(System.getProperty(\"test.src\"), \"test.policy\");\n-        URL policyURL = file.toURI().toURL();\n-        Security.setProperty(\"policy.url.1\", policyURL.toString());\n-\n-        switch (t) {\n-            case CUSTOM:\n-                \/\/ Set policy.provider to our custom policy provider\n-                Security.setProperty(\"policy.provider\", \"CustomPolicy\");\n-                break;\n-            case NOT_AVAIL:\n-                \/\/ Set policy.provider to a non-existent policy provider\n-                Security.setProperty(\"policy.provider\", \"NonExistentPolicy\");\n-                break;\n-            case DEFAULT:\n-                \/\/ Don't set policy.provider (leave default)\n-                break;\n-            case NOT_SET:\n-                \/\/ Set policy.provider to empty string\n-                Security.setProperty(\"policy.provider\", \"\");\n-                break;\n-        }\n-\n-        System.setSecurityManager(new SecurityManager());\n-        Policy p = Policy.getPolicy();\n-        switch (t) {\n-            case CUSTOM:\n-                \/\/ check that the custom policy provider has been set\n-                if (!(p instanceof CustomPolicy)) {\n-                    throw new Exception(\"CustomPolicy was not set\");\n-                }\n-                break;\n-            case NOT_AVAIL:\n-            case DEFAULT:\n-            case NOT_SET:\n-                \/\/ check that the default policy provider has been set\n-                if (!(p instanceof sun.security.provider.PolicyFile)) {\n-                    throw new Exception(\"default provider was not set\");\n-                }\n-                break;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/PolicyProvider\/UseSystemClassLoader.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-grant {\n-  permission java.lang.RuntimePermission \"createSecurityManager\";\n-  permission java.lang.RuntimePermission \"setSecurityManager\";\n-  permission java.security.SecurityPermission \"setProperty.policy.provider\";\n-  permission java.security.SecurityPermission \"getPolicy\";\n-  permission java.util.PropertyPermission \"user.home\", \"read\";\n-  permission java.lang.RuntimePermission \"getProtectionDomain\";\n-  permission java.lang.RuntimePermission \"accessClassInPackage.sun.security.provider\";\n-};\n","filename":"test\/jdk\/java\/security\/Policy\/PolicyProvider\/test.policy","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -1,103 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4619757\n- * @summary User Policy Setting is not recognized on Netscape 6\n- *          when invoked as root.\n- * @library \/test\/lib\n- * @requires os.family != \"windows\"\n- * @run testng\/othervm\/manual Root\n- *\/\n-\n-\/*\n-* Run test as root user.\n-* *\/\n-\n-import org.testng.Assert;\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.security.*;\n-\n-public class Root {\n-    private static final String SRC = System.getProperty(\"test.src\");\n-    private static final String ROOT = System.getProperty(\"user.home\");\n-    private static final Path SOURCE = Paths.get(SRC, \"Root.policy\");\n-    private static final Path TARGET = Paths.get(ROOT, \".java.policy\");\n-    private static final Path BACKUP = Paths.get(ROOT, \".backup.policy\");\n-    private static final String ROOT_USER_ID = \"0\";\n-\n-    @BeforeTest\n-    public void setup() throws IOException {\n-        \/\/ Backup user policy file if it already exists\n-        if (TARGET.toFile().exists()) {\n-            Files.copy(TARGET, BACKUP, StandardCopyOption.REPLACE_EXISTING);\n-        }\n-        Files.copy(SOURCE, TARGET, StandardCopyOption.REPLACE_EXISTING);\n-    }\n-\n-    @AfterTest\n-    public void cleanUp() throws IOException {\n-        Files.delete(TARGET);\n-        \/\/ Restore original policy file if backup exists\n-        if (BACKUP.toFile().exists()) {\n-            Files.copy(BACKUP, TARGET, StandardCopyOption.REPLACE_EXISTING);\n-            Files.delete(BACKUP);\n-        }\n-    }\n-\n-    @Test\n-    private void test() throws InterruptedException, IOException {\n-        System.out.println(\"Run test as root user.\");\n-\n-        Process process = Runtime.getRuntime().exec(\"id -u\");\n-        process.waitFor();\n-        if (process.exitValue() != 0) {\n-            throw new RuntimeException(\"Failed to retrieve user id.\");\n-        }\n-\n-        try (BufferedReader reader = new BufferedReader(\n-                new InputStreamReader(process.getInputStream()))) {\n-            String line = reader.readLine();\n-\n-            if (!ROOT_USER_ID.equals(line)) {\n-                throw new RuntimeException(\n-                        \"This test needs to be run with root privilege.\");\n-            }\n-        }\n-\n-        Policy p = Policy.getPolicy();\n-        Assert.assertTrue(p.implies(Root.class.getProtectionDomain(),\n-                new AllPermission()));\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/Root\/Root.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/java\/security\/Policy\/Root\/Root.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,190 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n-import jdk.test.lib.process.ProcessTools;\n-\n-\/**\n- * @test\n- * @bug 8048360 8242565\n- * @summary test policy entry with signedBy alias\n- * @library \/test\/lib\n- * @run main\/othervm SignedJarTest\n- *\/\n-public class SignedJarTest {\n-\n-    private static final String FS = File.separator;\n-    private static final String JAVA_HOME = System.getProperty(\"test.jdk\");\n-    private static final String TESTCLASSES = System.getProperty(\"test.classes\", \"\");\n-    private static final String TESTSRC = System.getProperty(\"test.src\", \"\");\n-    private static final String KEYTOOL = JAVA_HOME + FS + \"bin\" + FS + \"keytool\";\n-    private static final String JAR = JAVA_HOME + FS + \"bin\" + FS + \"jar\";\n-    private static final String JARSIGNER = JAVA_HOME + FS + \"bin\" + FS + \"jarsigner\";\n-    private static final String PASSWORD = \"password\";\n-    private static final String PWDFILE = \"keypass\";\n-    private static final String POLICY1 = \"SignedJarTest_1.policy\";\n-    private static final String POLICY2 = \"SignedJarTest_2.policy\";\n-    private static final String KEYSTORE1 = \"both.jks\";\n-    private static final String KEYSTORE2 = \"first.jks\";\n-    private static final String SECPROPS = TESTSRC + FS + \"java.security\";\n-\n-    public static void main(String args[]) throws Throwable {\n-        \/\/copy PrivilegeTest.class, policy files and keystore password file into current direcotry\n-        Files.copy(Paths.get(TESTCLASSES, \"PrivilegeTest.class\"), Paths.get(\"PrivilegeTest.class\"));\n-        Files.copy(Paths.get(TESTSRC, POLICY1), Paths.get(POLICY1));\n-        Files.copy(Paths.get(TESTSRC, POLICY2), Paths.get(POLICY2));\n-        Files.copy(Paths.get(TESTSRC, PWDFILE), Paths.get(PWDFILE));\n-\n-        \/\/create Jar file\n-        ProcessTools.executeCommand(JAR, \"-cvf\", \"test.jar\", \"PrivilegeTest.class\");\n-\n-        \/\/Creating first key , keystore both.jks\n-        ProcessTools.executeCommand(KEYTOOL,\n-                \"-genkey\",\n-                \"-keyalg\", \"DSA\",\n-                \"-alias\", \"first\",\n-                \"-keystore\", KEYSTORE1,\n-                \"-keypass\", PASSWORD,\n-                \"-dname\", \"cn=First\",\n-                \"-storepass\", PASSWORD\n-        ).shouldHaveExitValue(0);\n-\n-        \/\/Creating Second key, keystore both.jks\n-        ProcessTools.executeCommand(KEYTOOL,\n-                \"-genkey\",\n-                \"-keyalg\", \"DSA\",\n-                \/\/ \"-storetype\",\"JKS\",\n-                \"-alias\", \"second\",\n-                \"-keystore\", KEYSTORE1,\n-                \"-keypass\", PASSWORD,\n-                \"-dname\", \"cn=Second\",\n-                \"-storepass\", PASSWORD\n-        ).shouldHaveExitValue(0);\n-\n-        \/\/copy both.jks to first.jks, remove second Keypair from first.jks\n-        Files.copy(Paths.get(KEYSTORE1), Paths.get(KEYSTORE2));\n-        ProcessTools.executeCommand(KEYTOOL,\n-                \"-delete\",\n-                \"-keystore\", KEYSTORE2,\n-                \"-alias\", \"second\",\n-                \"-storepass\", PASSWORD\n-        ).shouldHaveExitValue(0);\n-\n-        \/\/sign jar with first key, first.jar is only signed by first signer\n-        ProcessTools.executeCommand(JARSIGNER,\n-                \"-keystore\", KEYSTORE1,\n-                \"-storepass\", PASSWORD,\n-                \"-keypass\", PASSWORD,\n-                \"-signedjar\", \"first.jar\", \"test.jar\",\n-                \"first\").shouldHaveExitValue(0);\n-\n-        \/\/sign jar with second key, both.jar is signed by first and second signer\n-        ProcessTools.executeCommand(JARSIGNER,\n-                \"-keystore\", KEYSTORE1,\n-                \"-storepass\", PASSWORD,\n-                \"-keypass\", PASSWORD,\n-                \"-signedjar\", \"both.jar\", \"first.jar\",\n-                \"second\").shouldHaveExitValue(0);\n-\n-        \/\/test case 1\n-        \/\/setIO permission granted to code that was signed by first signer\n-        \/\/setFactory permission granted to code that was signed by second signer\n-        \/\/Keystore that contains both first and second  keypairs\n-        \/\/code was singed by first signer\n-        \/\/Expect AccessControlException for setFactory permission\n-        System.out.println(\"Test Case 1\");\n-        \/\/copy policy file into current directory\n-        String[] cmd = constructCMD(\"first.jar\", POLICY1, \"false\", \"true\");\n-        ProcessTools.executeTestJava(cmd).shouldHaveExitValue(0);\n-\n-        \/\/test case 2, test with both.jar\n-        \/\/setIO permission granted to code that was signed by first signer\n-        \/\/setFactory permission granted to code that was signed by second signer\n-        \/\/Keystore that contains both first and second  keypairs\n-        \/\/code was singed by first signer and second signer\n-        \/\/Expect no AccessControlException\n-        System.out.println(\"Test Case 2\");\n-        cmd = constructCMD(\"both.jar\", POLICY1, \"false\", \"false\");\n-        ProcessTools.executeTestJava(cmd).shouldHaveExitValue(0);\n-\n-        \/\/test case 3\n-        \/\/setIO permission granted to code that was signed by first signer\n-        \/\/setFactory permission granted to code that was signed by second signer\n-        \/\/Keystore that contains only first keypairs\n-        \/\/code was singed by first signer and second signer\n-        \/\/Expect AccessControlException for setFactory permission\n-        System.out.println(\"Test Case 3\");\n-        cmd = constructCMD(\"both.jar\", POLICY2, \"false\", \"true\");\n-        ProcessTools.executeTestJava(cmd).shouldHaveExitValue(0);\n-\n-    }\n-\n-    private static String[] constructCMD(String classpath, String policy, String arg1, String arg2) {\n-        String[] cmd = {\n-            \"-classpath\", classpath,\n-            \"-Djava.security.manager\",\n-            \"-Djava.security.policy=\" + policy,\n-            \"-Djava.security.properties=\" + SECPROPS,\n-            \"PrivilegeTest\",\n-            arg1, arg2};\n-        return cmd;\n-    }\n-}\n-\n-class PrivilegeTest {\n-\n-    private static final Permission PERM1 = new RuntimePermission(\"setIO\");\n-    private static final Permission PERM2 = new RuntimePermission(\"setFactory\");\n-\n-    public static void main(String args[]) {\n-        boolean expectException1 = Boolean.parseBoolean(args[0]);\n-        boolean expectException2 = Boolean.parseBoolean(args[1]);\n-        test(PERM1, expectException1);\n-        test(PERM2, expectException2);\n-    }\n-\n-    public static void test(Permission perm, boolean expectException) {\n-        boolean getException = (Boolean) AccessController.doPrivileged((PrivilegedAction) () -> {\n-            try {\n-                AccessController.checkPermission(perm);\n-                return (Boolean) false;\n-            } catch (AccessControlException ex) {\n-                return (Boolean) true;\n-            }\n-        });\n-\n-        if (expectException ^ getException) {\n-            String message = \"Check Permission :\" + perm + \"\\n ExpectException = \"\n-                    + expectException + \"\\n getException = \" + getException;\n-            throw new RuntimeException(message);\n-        }\n-\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/security\/Policy\/SignedJar\/SignedJarTest.java","additions":0,"deletions":190,"binary":false,"changes":190,"status":"deleted"},{"patch":"@@ -1,10 +0,0 @@\n-keystore \"file:both.jks\";\n-keystorePasswordURL \"file:keypass\";\n-\n-grant signedBy \"first\" {\n-    permission java.lang.RuntimePermission \"setIO\";\n-};\n-\n-grant signedBy \"second\" {\n-    permission java.lang.RuntimePermission \"setFactory\";\n-};\n","filename":"test\/jdk\/java\/security\/Policy\/SignedJar\/SignedJarTest_1.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,11 +0,0 @@\n-keystore \"file:first.jks\";\n-keystorePasswordURL \"file:keypass\";\n-\n-grant signedBy \"first\" {\n-    permission java.lang.RuntimePermission \"setIO\";\n-};\n-\n-grant signedBy \"second\" {\n-    permission java.lang.RuntimePermission \"setFactory\";\n-};\n-\n","filename":"test\/jdk\/java\/security\/Policy\/SignedJar\/SignedJarTest_2.policy","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-jdk.jar.disabledAlgorithms=MD2, MD5, RSA keySize < 1024, \\\n-      DSA keySize < 1024, include jdk.disabled.namedCurves, \\\n-      SHA1 jdkCA & denyAfter 2019-01-01\n","filename":"test\/jdk\/java\/security\/Policy\/SignedJar\/java.security","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-password\n","filename":"test\/jdk\/java\/security\/Policy\/SignedJar\/keypass","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"filename":"test\/jdk\/java\/security\/ProtectionDomain\/AllPerm.jar","binary":true,"status":"deleted"},{"patch":"@@ -1,109 +0,0 @@\n-\/*\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6256734\n- * @summary ProtectionDomain could optimize implies by first checking for\n- *          AllPermission in internal collection\n- * @run main\/othervm -Djava.security.manager=allow AllPerm\n- *\/\n-\n-import java.io.*;\n-import java.net.*;\n-import java.security.*;\n-import java.lang.reflect.*;\n-\n-public class AllPerm {\n-\n-    private static final Class[] ARGS = new Class[] { };\n-    private static ProtectionDomain allPermClassDomain;\n-\n-    public static void main(String[]args) throws Exception {\n-\n-        \/\/ create custom class loader that assigns AllPermission to\n-        \/\/ classes it loads\n-\n-        File file = new File(System.getProperty(\"test.src\"), \"AllPerm.jar\");\n-        URL[] urls = new URL[] { file.toURL() };\n-        ClassLoader parent = Thread.currentThread().getContextClassLoader();\n-        AllPermLoader loader = new AllPermLoader(urls, parent);\n-\n-        \/\/ load a class from AllPerm.jar using custom loader\n-\n-        Object o = loader.loadClass(\"AllPermClass\").newInstance();\n-        Method doCheck = o.getClass().getMethod(\"doCheck\", ARGS);\n-        allPermClassDomain = o.getClass().getProtectionDomain();\n-\n-        \/\/ set a custom Policy and set the SecurityManager\n-\n-        Policy.setPolicy(new AllPermPolicy());\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ invoke method on loaded class, which will perform a\n-        \/\/ security-sensitive operation.  custom policy will check\n-        \/\/ to see if it is called (it should not be called)\n-\n-        doCheck.invoke(o, ARGS);\n-    }\n-\n-    \/**\n-     * this class loader assigns AllPermission to classes that it loads\n-     *\/\n-    private static class AllPermLoader extends URLClassLoader {\n-\n-        public AllPermLoader(URL[] urls, ClassLoader parent) {\n-            super(urls, parent);\n-        }\n-\n-        protected PermissionCollection getPermissions(CodeSource codesource) {\n-            Permissions perms = new Permissions();\n-            perms.add(new AllPermission());\n-            return perms;\n-        }\n-    }\n-\n-    \/**\n-     * this policy should not be called if domain is allPermClassDomain\n-     *\/\n-    private static class AllPermPolicy extends Policy {\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (domain == allPermClassDomain) {\n-                throw new SecurityException\n-                        (\"Unexpected call into AllPermPolicy\");\n-            }\n-            return true;\n-        }\n-    }\n-}\n-\n-\/**\n- * here is the source code for AllPermClass inside AllPerm.jar\n- *\/\n-\/*\n-public class AllPermClass {\n-    public void doCheck() {\n-        System.getProperty(\"user.name\");\n-    }\n-}\n-*\/\n","filename":"test\/jdk\/java\/security\/ProtectionDomain\/AllPerm.java","additions":0,"deletions":109,"binary":false,"changes":109,"status":"deleted"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8043252\n- * @summary Debug of access control is obfuscated - NullPointerException in\n- *          ProtectionDomain\n- * @run main\/othervm\/java.security.policy=NullGetActions.policy NullGetActions\n- *\/\n-\n-import java.net.*;\n-import java.security.*;\n-\n-public class NullGetActions {\n-\n-    public static void main(String[] args) throws Exception {\n-        Permissions permset = new Permissions();\n-        permset.add(new EvilPermission(\"java.let.me.do.stuff\"));\n-\n-        Policy.getPolicy();\n-        ProtectionDomain protDom = new ProtectionDomain(\n-                new CodeSource(new URL(\"http:\/\/bar\"),\n-                        (java.security.cert.Certificate[])null), permset,\n-                        null, null);\n-\n-        System.out.println(\"Protection Domain:\\n\" + protDom);\n-    }\n-\n-    public static class EvilPermission extends Permission {\n-        public EvilPermission(String name) {\n-            super(name);\n-        }\n-\n-        @Override\n-        public String getActions() {\n-            return null;\n-        }\n-\n-        @Override\n-        public boolean equals(Object obj) {\n-            return (obj == this);\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return 42;\n-        }\n-\n-        @Override\n-        public boolean implies(Permission permission) {\n-            return false;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/ProtectionDomain\/NullGetActions.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.security.SecurityPermission \"getPolicy\";\n-};\n","filename":"test\/jdk\/java\/security\/ProtectionDomain\/NullGetActions.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.DomainCombiner;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n-import jdk.internal.access.SharedSecrets;\n-\n-\/*\n- * @test\n- * @bug 8064331\n- * @summary Make sure that JavaSecurityAccess.doIntersectionPrivilege()\n- *          is not dropping the information about the domain combiner of\n- *          the stack ACC\n- * @modules java.base\/jdk.internal.access\n- *\/\n-\n-public class PreserveCombinerTest {\n-    public static void main(String[]args) throws Exception {\n-        final DomainCombiner dc = new DomainCombiner() {\n-            @Override\n-            public ProtectionDomain[] combine(ProtectionDomain[] currentDomains, ProtectionDomain[] assignedDomains) {\n-                return currentDomains; \/\/ basically a no-op\n-            }\n-        };\n-\n-        \/\/ Get an instance of the saved ACC\n-        AccessControlContext saved = AccessController.getContext();\n-        \/\/ Simulate the stack ACC with a DomainCombiner attached\n-        AccessControlContext stack = new AccessControlContext(AccessController.getContext(), dc);\n-\n-        \/\/ Now try to run JavaSecurityAccess.doIntersectionPrivilege() and assert\n-        \/\/ whether the DomainCombiner from the stack ACC is preserved\n-        boolean ret = SharedSecrets.getJavaSecurityAccess().doIntersectionPrivilege(new PrivilegedAction<Boolean>() {\n-            @Override\n-            public Boolean run() {\n-                return dc == AccessController.getContext().getDomainCombiner();\n-            }\n-        }, stack, saved);\n-\n-        if (!ret) {\n-            System.exit(1);\n-        }\n-    }\n-}\n-\n","filename":"test\/jdk\/java\/security\/ProtectionDomain\/PreserveCombinerTest.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4947618\n- * @summary Recursion problem in security manager and policy code\n- *\n- * @run main\/othervm\/policy=Recursion.policy Recursion\n- *\/\n-\n-import java.net.*;\n-import java.security.*;\n-\n-public class Recursion {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ trigger security check to make sure policy is set\n-        try {\n-            System.getProperty(\"foo.bar\");\n-        } catch (Exception e) {\n-            \/\/ fall thru\n-        }\n-\n-        \/\/ static perms\n-        Permissions staticPerms = new Permissions();\n-        staticPerms.add(new java.util.PropertyPermission(\"static.foo\", \"read\"));\n-\n-        ProtectionDomain pd = new ProtectionDomain\n-                        (new CodeSource\n-                                (new URL(\"http:\/\/foo\"),\n-                                (java.security.cert.Certificate[])null),\n-                        staticPerms,\n-                        null,\n-                        null);\n-\n-        \/\/ test with no SecurityManager\n-        \/\/\n-        \/\/ merging should have occured - check for policy merged.foo permission\n-\n-        System.setSecurityManager(null);\n-        if (pd.toString().indexOf(\"merged.foo\") < 0) {\n-            throw new Exception(\"Test without SecurityManager failed\");\n-        }\n-\n-        \/\/ test with SecurityManager on the bootclasspath, debug turned off,\n-        \/\/ getPolicyPermission granted\n-        \/\/\n-        \/\/ merging should have occured - check for policy merged.foo permission\n-\n-        ProtectionDomain pd2 = new ProtectionDomain\n-                        (new CodeSource\n-                                (new URL(\"http:\/\/bar\"),\n-                                (java.security.cert.Certificate[])null),\n-                        staticPerms,\n-                        null,\n-                        null);\n-\n-        System.setSecurityManager(new SecurityManager());\n-        if (pd2.toString().indexOf(\"merged.foo\") < 0) {\n-            throw new Exception(\"Test with bootclass SecurityManager failed\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/ProtectionDomain\/Recursion.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-grant {\n-    permission java.security.SecurityPermission \"getPolicy\";\n-    permission java.lang.RuntimePermission \"createSecurityManager\";\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.util.PropertyPermission \"merged.foo\", \"read\";\n-};\n","filename":"test\/jdk\/java\/security\/ProtectionDomain\/Recursion.policy","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4947618 8268349\n- * @summary Recursion problem in security manager and policy code\n- *\n- * @run main\/othervm\/policy=Recursion.policy -Djava.security.debug=domain RecursionDebug\n- *\/\n-\n-import java.security.*;\n-import java.net.*;\n-\n-public class RecursionDebug {\n-\n-    \/\/ non bootclasspath SecurityManager\n-    public static class RecursionSM extends SecurityManager {\n-        public void checkPermission(Permission p) {\n-            super.checkPermission(p);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ trigger security check to make sure policy is set\n-        try {\n-            System.getProperty(\"foo.bar\");\n-        } catch (Exception e) {\n-            \/\/ fall thru\n-        }\n-\n-        \/\/ static perms\n-        Permissions staticPerms = new Permissions();\n-        staticPerms.add(new java.util.PropertyPermission(\"static.foo\", \"read\"));\n-\n-        ProtectionDomain pd = new ProtectionDomain\n-                        (new CodeSource\n-                                (new URL(\"http:\/\/foo\"),\n-                                (java.security.cert.Certificate[])null),\n-                        staticPerms,\n-                        null,\n-                        null);\n-\n-        \/\/ test with SecurityManager on the bootclasspath, debug turned on\n-        \/\/\n-        \/\/ merging should have occured - check for policy merged.foo permission\n-\n-        if (pd.toString().indexOf(\"merged.foo\") < 0) {\n-            throw new Exception(\"Test with bootclass SecurityManager failed\");\n-        }\n-\n-        \/\/ test with SecurityManager not on bootclasspath, debug turned on\n-        \/\/\n-        \/\/ merging should not have occured, and there should be no recursion\n-\n-        ProtectionDomain pd2 = new ProtectionDomain\n-                        (new CodeSource\n-                                (new URL(\"http:\/\/bar\"),\n-                                (java.security.cert.Certificate[])null),\n-                        staticPerms,\n-                        null,\n-                        null);\n-\n-        System.setSecurityManager(new RecursionDebug.RecursionSM());\n-        if (pd2.toString().indexOf(\"merged.foo\") >= 0) {\n-            throw new Exception\n-                (\"Test with custom non-bootclass SecurityManager failed\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/ProtectionDomain\/RecursionDebug.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -1,303 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.InputStream;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.net.URL;\n-import java.security.CodeSource;\n-import java.security.Key;\n-import java.security.KeyStoreException;\n-import java.security.KeyStoreSpi;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.Permission;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.security.Provider;\n-import java.security.SecureClassLoader;\n-import java.security.Security;\n-import java.security.UnrecoverableKeyException;\n-import java.security.URIParameter;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateException;\n-import java.security.cert.CertificateFactory;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Base64;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.Enumeration;\n-import java.util.List;\n-import java.util.PropertyPermission;\n-\n-\/*\n- * @test\n- * @bug 6826789 8131486 8130181\n- * @summary Make sure equivalent ProtectionDomains are granted the same\n- *          permissions when the CodeSource URLs are different but resolve\n- *          to the same ip address after name service resolution.\n- * @run main\/othervm -Djava.security.manager=allow DefineClass\n- *\/\n-\n-public class DefineClass {\n-\n-    \/\/ permissions that are expected to be granted by the policy file\n-    private final static Permission[] GRANTED_PERMS = new Permission[] {\n-        new PropertyPermission(\"user.home\", \"read\"),\n-        new PropertyPermission(\"user.name\", \"read\")\n-    };\n-\n-    \/\/ Base64 encoded bytes of simple class: \"package foo; public class Foo {}\"\n-    private final static String FOO_CLASS =\n-        \"yv66vgAAADMADQoAAwAKBwALBwAMAQAGPGluaXQ+AQADKClWAQAEQ29kZQEA\" +\n-        \"D0xpbmVOdW1iZXJUYWJsZQEAClNvdXJjZUZpbGUBAAhGb28uamF2YQwABAAF\" +\n-        \"AQAHZm9vL0ZvbwEAEGphdmEvbGFuZy9PYmplY3QAIQACAAMAAAAAAAEAAQAE\" +\n-        \"AAUAAQAGAAAAHQABAAEAAAAFKrcAAbEAAAABAAcAAAAGAAEAAAABAAEACAAA\" +\n-        \"AAIACQ==\";\n-\n-    \/\/ Base64 encoded bytes of simple class: \"package bar; public class Bar {}\"\n-    private final static String BAR_CLASS =\n-        \"yv66vgAAADMADQoAAwAKBwALBwAMAQAGPGluaXQ+AQADKClWAQAEQ29kZQEA\" +\n-        \"D0xpbmVOdW1iZXJUYWJsZQEAClNvdXJjZUZpbGUBAAhCYXIuamF2YQwABAAF\" +\n-        \"AQAHYmFyL0JhcgEAEGphdmEvbGFuZy9PYmplY3QAIQACAAMAAAAAAAEAAQAE\" +\n-        \"AAUAAQAGAAAAHQABAAEAAAAFKrcAAbEAAAABAAcAAAAGAAEAAAABAAEACAAA\" +\n-        \"AAIACQ==\";\n-\n-    \/\/ Base64 encoded bytes of simple class: \"package baz; public class Baz {}\"\n-    private final static String BAZ_CLASS =\n-        \"yv66vgAAADQADQoAAwAKBwALBwAMAQAGPGluaXQ+AQADKClWAQAEQ29kZQEA\" +\n-        \"D0xpbmVOdW1iZXJUYWJsZQEAClNvdXJjZUZpbGUBAAhCYXouamF2YQwABAAF\" +\n-        \"AQAHYmF6L0JhegEAEGphdmEvbGFuZy9PYmplY3QAIQACAAMAAAAAAAEAAQAE\" +\n-        \"AAUAAQAGAAAAHQABAAEAAAAFKrcAAbEAAAABAAcAAAAGAAEAAAABAAEACAAA\" +\n-        \"AAIACQ==\";\n-\n-    private final static String BAZ_CERT =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIEFzCCA8OgAwIBAgIESpPf8TANBglghkgBZQMEAwIFADAOMQwwCgYDVQQDEwNG\\n\" +\n-        \"b28wHhcNMTUwNzE1MTY1ODM5WhcNMTUxMDEzMTY1ODM5WjAOMQwwCgYDVQQDEwNG\\n\" +\n-        \"b28wggNCMIICNQYHKoZIzjgEATCCAigCggEBAI95Ndm5qum\/q+2Ies9JUbbzLsWe\\n\" +\n-        \"O683GOjqxJYfPv02BudDUanEGDM5uAnnwq4cU5unR1uF0BGtuLR5h3VJhGlcrA6P\\n\" +\n-        \"FLM2CCiiL\/onEQo9YqmTRTQJoP5pbEZY+EvdIIGcNwmgEFexla3NACM9ulSEtikf\\n\" +\n-        \"nWSO+INEhneXnOwEtDSmrC516Zhd4j2wKS\/BEYyf+p2BgeczjbeStzDXueNJWS9o\\n\" +\n-        \"CZhyFTkV6j1ri0ZTxjNFj4A7MqTC4PJykCVuTj+KOwg4ocRQ5OGMGimjfd9eoUPe\\n\" +\n-        \"S2b\/BJA+1c8WI+FY1IfGCOl\/IRzYHcojy244B2X4IuNCvkhMBXY5OWAc1mcCHQC6\\n\" +\n-        \"9pamhXj3397n+mfJd8eF7zKyM7rlgMC81WldAoIBABamXFggSFBwTnUCo5dXBA00\\n\" +\n-        \"2jo0eMFU1OSlwC0kLuBPluYeS9CQSr2sjzfuseCfMYLSPJBDy2QviABBYO35ygmz\\n\" +\n-        \"IHannDKmJ\/JHPpGHm6LE50S9IIFUTLVbgCw2jR+oPtSJ6U4PoGiOMkKKXHjEeMaN\\n\" +\n-        \"BSe3HJo6uwsL4SxEaJY559POdNsQGmWqK4f2TGgm2z7HL0tVmYNLtO2wL3yQ6aSW\\n\" +\n-        \"06VdU1vr\/EXU9hn2Pz3tu4c5JcLyJOB3MSltqIfsHkdI+H77X963VIQxayIy3uVT\\n\" +\n-        \"3a8CESsNHwLaMJcyJP4nrtqLnUspItm6i+Oe2eEDpjxSgQvGiLfi7UMW4e8X294D\\n\" +\n-        \"ggEFAAKCAQBsGeU8\/STExzQsJ8kFM9xarA\/2VAFMzyUpd3IQ2UGHQC5rEnGh\/RiU\\n\" +\n-        \"T20y7a2hCpQ1f\/qgLnY8hku9GRVY3z8WamBzWLzCAEAx67EsS58mf4o8R3sUbkH5\\n\" +\n-        \"\/mRaZoNVSPUy+tXoLmTzIetU4W+JT8Rq4OcXXU9uo9TreeBehhVexS3vpVgQeUIn\\n\" +\n-        \"MmMma8WHpovIJQQlp4cyjalX7Beda\/tqX\/HPLkAS4TRqQAz7hFr3FqFrVMKFSGo4\\n\" +\n-        \"fTS06GGdQ4tw9c6NQLuQ9WF9BxYSwSk9yENQvKDZaBNarqPMnsh1Gi\/QcKMRBVhM\\n\" +\n-        \"RT\/9vb4QUi\/pOowhhKCDBLgjY60QgX3HoyEwHzAdBgNVHQ4EFgQUa787CE+3ZNAb\\n\" +\n-        \"g1ql9yJVVrRCdx0wDQYJYIZIAWUDBAMCBQADPwAwPAIcCUkZIRrBlKdTzhKYBEOm\\n\" +\n-        \"E1i45MMum1RuHc28agIcfHQkkjBA4FfH5UMRgKpIyRR8V\/dVboxDj4hKOA==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        Security.addProvider(new TestProvider());\n-\n-        MySecureClassLoader scl = new MySecureClassLoader();\n-\n-        File policyFile = new File(System.getProperty(\"test.src\", \".\"),\n-                                   \"DefineClass.policy\");\n-        Policy p = Policy.getInstance(\"JavaPolicy\",\n-                                      new URIParameter(policyFile.toURI()));\n-        Policy.setPolicy(p);\n-\n-        System.setSecurityManager(new SecurityManager());\n-        ArrayList<Permission> perms1 = getPermissions(scl, p,\n-                                                      \"http:\/\/localhost\/\",\n-                                                      \"foo.Foo\", FOO_CLASS,\n-                                                      null);\n-        checkPerms(perms1, GRANTED_PERMS);\n-        ArrayList<Permission> perms2 = getPermissions(scl, p,\n-                                                      \"http:\/\/127.0.0.1\/\",\n-                                                      \"bar.Bar\", BAR_CLASS,\n-                                                      null);\n-        checkPerms(perms2, GRANTED_PERMS);\n-        assert(perms1.equals(perms2));\n-\n-        \/\/ check that class signed by baz is granted an additional permission\n-        Certificate[] chain = new Certificate[] {getCert(BAZ_CERT)};\n-        ArrayList<Permission> perms3 = getPermissions(scl, p,\n-                                                      \"http:\/\/localhost\/\",\n-                                                      \"baz.Baz\", BAZ_CLASS,\n-                                                      chain);\n-        List<Permission> perms = new ArrayList<>(Arrays.asList(GRANTED_PERMS));\n-        perms.add(new PropertyPermission(\"user.dir\", \"read\"));\n-        checkPerms(perms3, perms.toArray(new Permission[0]));\n-    }\n-\n-    \/\/ returns the permissions granted to the codebase URL\n-    private static ArrayList<Permission> getPermissions(MySecureClassLoader scl,\n-                                                        Policy p, String url,\n-                                                        String className,\n-                                                        String classBytes,\n-                                                        Certificate[] chain)\n-                                                        throws IOException {\n-        CodeSource cs = new CodeSource(new URL(url), chain);\n-        Base64.Decoder bd = Base64.getDecoder();\n-        byte[] bytes = bd.decode(classBytes);\n-        Class<?> c = scl.defineMyClass(className, bytes, cs);\n-        ProtectionDomain pd = c.getProtectionDomain();\n-        return Collections.list(p.getPermissions(pd).elements());\n-    }\n-\n-    private static void checkPerms(List<Permission> perms,\n-                                   Permission... grantedPerms)\n-        throws Exception\n-    {\n-        if (!perms.containsAll(Arrays.asList(grantedPerms))) {\n-            throw new Exception(\"Granted permissions not correct\");\n-        }\n-    }\n-\n-    private static Certificate getCert(String base64Cert) throws Exception {\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        InputStream is = new ByteArrayInputStream(base64Cert.getBytes(\"UTF-8\"));\n-        return cf.generateCertificate(is);\n-    }\n-\n-    \/\/ A SecureClassLoader that allows the test to define its own classes\n-    private static class MySecureClassLoader extends SecureClassLoader {\n-        Class<?> defineMyClass(String name, byte[] b, CodeSource cs) {\n-            return super.defineClass(name, b, 0, b.length, cs);\n-        }\n-    }\n-\n-    private static class TestProvider extends Provider {\n-        TestProvider() {\n-            super(\"Test8131486\", \"0.0\", \"For testing only\");\n-            putService(new Provider.Service(this, \"KeyStore\", \"Test8131486\",\n-                       \"DefineClass$TestKeyStore\", null, null));\n-        }\n-    }\n-\n-    \/**\n-     * A KeyStore containing a single certificate entry named \"baz\".\n-     *\/\n-    public static class TestKeyStore extends KeyStoreSpi {\n-        private final String baz = \"baz\";\n-        private final List<String> aliases = Collections.singletonList(baz);\n-        private final Certificate bazCert;\n-\n-        public TestKeyStore() {\n-            try {\n-                this.bazCert = getCert(BAZ_CERT);\n-            } catch (Exception e) {\n-                throw new Error();\n-            }\n-        }\n-\n-        @Override\n-        public Enumeration<String> engineAliases() {\n-            return Collections.enumeration(aliases);\n-        }\n-\n-        @Override\n-        public boolean engineContainsAlias(String alias) {\n-            return alias.equals(baz);\n-        }\n-\n-        @Override\n-        public void engineDeleteEntry(String alias) throws KeyStoreException {\n-            throw new KeyStoreException();\n-        }\n-\n-        @Override\n-        public Certificate engineGetCertificate(String alias) {\n-            return alias.equals(baz) ? bazCert : null;\n-        }\n-\n-        @Override\n-        public String engineGetCertificateAlias(Certificate cert) {\n-            return cert.equals(bazCert) ? baz : null;\n-        }\n-\n-        @Override\n-        public Certificate[] engineGetCertificateChain(String alias) {\n-            return alias.equals(baz) ? new Certificate[] {bazCert} : null;\n-        }\n-\n-        @Override\n-        public Date engineGetCreationDate(String alias) {\n-            return alias.equals(baz) ? new Date() : null;\n-        }\n-\n-        @Override\n-        public Key engineGetKey(String alias, char[] password)\n-            throws NoSuchAlgorithmException, UnrecoverableKeyException {\n-            return null;\n-        }\n-\n-        @Override\n-        public boolean engineIsCertificateEntry(String alias) {\n-            return alias.equals(baz);\n-        }\n-\n-        @Override\n-        public boolean engineIsKeyEntry(String alias) {\n-            return false;\n-        }\n-\n-        @Override\n-        public void engineLoad(InputStream stream, char[] password)\n-            throws IOException, NoSuchAlgorithmException, CertificateException {\n-        }\n-\n-        @Override\n-        public void engineSetCertificateEntry(String alias, Certificate cert)\n-            throws KeyStoreException {\n-            throw new KeyStoreException();\n-        }\n-\n-        @Override\n-        public void engineSetKeyEntry(String alias, byte[] key,\n-                                      Certificate[] chain)\n-            throws KeyStoreException {\n-            throw new KeyStoreException();\n-        }\n-\n-        @Override\n-        public void engineSetKeyEntry(String alias, Key key, char[] password,\n-                                      Certificate[] chain)\n-            throws KeyStoreException {\n-            throw new KeyStoreException();\n-        }\n-\n-        @Override\n-        public int engineSize() { return 1; }\n-\n-        @Override\n-        public void engineStore(OutputStream stream, char[] password)\n-            throws IOException, NoSuchAlgorithmException, CertificateException {\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/SecureClassLoader\/DefineClass.java","additions":0,"deletions":303,"binary":false,"changes":303,"status":"deleted"},{"patch":"@@ -1,14 +0,0 @@\n-keystore \"NONE\", \"Test8131486\", \"Test8131486\";\n-\n-grant {\n-    permission java.lang.RuntimePermission \"getProtectionDomain\";\n-};\n-grant codebase \"http:\/\/localhost\/\" {\n-    permission java.util.PropertyPermission \"user.home\", \"read\";\n-};\n-grant codebase \"http:\/\/127.0.0.1\/\" {\n-    permission java.util.PropertyPermission \"user.name\", \"read\";\n-};\n-grant codebase \"http:\/\/localhost\/\", signedby \"baz\" {\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-};\n","filename":"test\/jdk\/java\/security\/SecureClassLoader\/DefineClass.policy","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8001319 8130181\n- * @summary check that SecurityPermission insertProvider permission is enforced\n- *          correctly\n- * @run main\/othervm\/policy=AddProvider.policy.1 AddProvider 1\n- * @run main\/othervm\/policy=AddProvider.policy.2 AddProvider 2\n- * @run main\/othervm\/policy=AddProvider.policy.3 AddProvider 3\n- *\/\n-import java.security.Provider;\n-import java.security.Security;\n-\n-public class AddProvider {\n-\n-    public static void main(String[] args) throws Exception {\n-        boolean legacy = args[0].equals(\"2\");\n-        Security.addProvider(new TestProvider(\"Test1\"));\n-        Security.insertProviderAt(new TestProvider(\"Test2\"), 1);\n-        try {\n-            Security.addProvider(new TestProvider(\"Test3\"));\n-            if (legacy) {\n-                throw new Exception(\"Expected SecurityException\");\n-            }\n-        } catch (SecurityException se) {\n-            if (!legacy) {\n-                throw se;\n-            }\n-        }\n-    }\n-\n-    private static class TestProvider extends Provider {\n-        TestProvider(String name) {\n-            super(name, \"0.0\", \"Not for use in production systems!\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Security\/AddProvider.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.security.SecurityPermission \"insertProvider\";\n-};\n","filename":"test\/jdk\/java\/security\/Security\/AddProvider.policy.1","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-\n-grant {\n-    permission java.security.SecurityPermission \"insertProvider.Test1\";\n-    permission java.security.SecurityPermission \"insertProvider.Test2\";\n-};\n","filename":"test\/jdk\/java\/security\/Security\/AddProvider.policy.2","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-\n-grant {\n-    permission java.security.SecurityPermission \"insertProvider.*\";\n-};\n","filename":"test\/jdk\/java\/security\/Security\/AddProvider.policy.3","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm\/policy=SecurityPropFile.policy -Djava.security.properties=${test.src}\/SecurityPropFile.file -Djava.security.debug=properties SecurityPropFile\n+ * @run main\/othervm -Djava.security.properties=${test.src}\/SecurityPropFile.file -Djava.security.debug=properties SecurityPropFile\n","filename":"test\/jdk\/java\/security\/Security\/SecurityPropFile\/SecurityPropFile.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.security.SecurityPermission \"getProperty.policy.provider\", \"read\";\n-    permission java.security.SecurityPermission \"getProperty.policy.url.1\", \"read\";\n-    permission java.security.SecurityPermission \"getProperty.policy.url.2\", \"read\";\n-};\n","filename":"test\/jdk\/java\/security\/Security\/SecurityPropFile\/SecurityPropFile.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm\/java.security.policy=RemoveStaticProvider.policy RemoveStaticProvider\n+ * @run main\/othervm RemoveStaticProvider\n","filename":"test\/jdk\/java\/security\/Security\/removing\/RemoveStaticProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.security.SecurityPermission \"removeProvider.SunJCE\";\n-    permission java.security.SecurityPermission \"insertProvider.SunJCE\";\n-};\n-\n","filename":"test\/jdk\/java\/security\/Security\/removing\/RemoveStaticProvider.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4350951\n- * @summary     UnresolvedPermission assumes permission constructor\n- *              with 2 string parameters\n- *\n- * @compile Debug.java DebugPermissionBad.java DebugPermission0.java DebugPermission1.java DebugPermission2.java\n- * @run main\/othervm\/policy=Debug.policy -Djava.security.debug=policy,access Debug\n- *\/\n-\n-public class Debug {\n-\n-    public static void main(String[] args) {\n-\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            throw new SecurityException(\"Test Failed: no SecurityManager\");\n-        }\n-\n-        try {\n-            sm.checkPermission(new DebugPermissionBad(\"hello\", 1));\n-            throw new SecurityException(\"Test 1 Failed: no SecurityException\");\n-        } catch (SecurityException se) {\n-            \/\/ good\n-        }\n-\n-        try {\n-            sm.checkPermission(new DebugPermission0());\n-        } catch (SecurityException se) {\n-            throw new SecurityException(\"Test 2 Failed\");\n-        }\n-\n-        try {\n-            sm.checkPermission(new DebugPermission1(\"1\"));\n-        } catch (SecurityException se) {\n-            throw new SecurityException(\"Test 3 Failed\");\n-        }\n-\n-        try {\n-            sm.checkPermission(new DebugPermission2(\"1\", \"2\"));\n-        } catch (SecurityException se) {\n-            throw new SecurityException(\"Test 4 Failed\");\n-        }\n-\n-        System.out.println(\"Test Succeeded\");\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/UnresolvedPermission\/Debug.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-grant {\n-    permission DebugPermissionBad \"hello\";\n-    permission DebugPermission0;\n-    permission DebugPermission1 \"1\";\n-    permission DebugPermission2 \"1\", \"2\";\n-};\n","filename":"test\/jdk\/java\/security\/UnresolvedPermission\/Debug.policy","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class DebugPermission0 extends java.security.Permission {\n-\n-    public DebugPermission0() {\n-        super(\"DebugPermission0\");\n-    }\n-\n-    public boolean implies(java.security.Permission perm) {\n-        return true;\n-    }\n-\n-    public boolean equals(Object obj) {\n-        return false;\n-    }\n-\n-    public int hashCode() {\n-        return 0;\n-    }\n-\n-    public String getActions() {\n-        return null;\n-    }\n-};\n","filename":"test\/jdk\/java\/security\/UnresolvedPermission\/DebugPermission0.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class DebugPermission1 extends java.security.Permission {\n-\n-    public DebugPermission1(String name) {\n-        super(name);\n-    }\n-\n-    public boolean implies(java.security.Permission perm) {\n-        return true;\n-    }\n-\n-    public boolean equals(Object obj) {\n-        return false;\n-    }\n-\n-    public int hashCode() {\n-        return 0;\n-    }\n-\n-    public String getActions() {\n-        return null;\n-    }\n-};\n","filename":"test\/jdk\/java\/security\/UnresolvedPermission\/DebugPermission1.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class DebugPermission2 extends java.security.Permission {\n-\n-    public DebugPermission2(String name, String actions) {\n-        super(\"name\");\n-    }\n-\n-    public boolean implies(java.security.Permission perm) {\n-        return true;\n-    }\n-\n-    public boolean equals(Object obj) {\n-        return false;\n-    }\n-\n-    public int hashCode() {\n-        return 0;\n-    }\n-\n-    public String getActions() {\n-        return null;\n-    }\n-};\n","filename":"test\/jdk\/java\/security\/UnresolvedPermission\/DebugPermission2.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class DebugPermissionBad extends java.security.Permission {\n-\n-    public DebugPermissionBad(String name, int x) {\n-        super(name);\n-    }\n-\n-    public boolean implies(java.security.Permission perm) {\n-        return true;\n-    }\n-\n-    public boolean equals(Object obj) {\n-        return false;\n-    }\n-\n-    public int hashCode() {\n-        return 0;\n-    }\n-\n-    public String getActions() {\n-        return null;\n-    }\n-};\n","filename":"test\/jdk\/java\/security\/UnresolvedPermission\/DebugPermissionBad.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4513737\n- * @run main\/othervm Equals\n- * @summary UnresolvedPermission.equals() throws NullPointerException\n- *\/\n-\n-import java.security.*;\n-import java.util.*;\n-\n-public class Equals {\n-    public static void main(String[] args) {\n-        if (System.getProperty(\"test.src\") == null) {\n-            System.setProperty(\"test.src\", \".\");\n-        }\n-        System.setProperty(\"java.security.policy\",\n-                \"file:${test.src}\/Equals.policy\");\n-        PermissionCollection pc = Policy.getPolicy().getPermissions\n-                        (Equals.class.getProtectionDomain());\n-        ArrayList l = new ArrayList();\n-        for (Enumeration e = pc.elements(); e.hasMoreElements();) {\n-            Object p = e.nextElement();\n-            if (p instanceof UnresolvedPermission) {\n-                l.add(p);\n-            }\n-        }\n-        System.out.println(l.get(0) + \"\\n\" + l.get(1));\n-        System.out.println(l.get(0).equals(l.get(1)));\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/UnresolvedPermission\/Equals.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    permission FooPermission;\n-    permission FooPermission;\n-};\n","filename":"test\/jdk\/java\/security\/UnresolvedPermission\/Equals.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm\/policy=provider.policy GetInstance\n+ * @run main GetInstance\n","filename":"test\/jdk\/java\/security\/cert\/CertPathBuilder\/GetInstance.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,8 +0,0 @@\n-\/*\n- *\n- * @bug  4408997\n- * Used by GetInstance test.\n- *\/\n-grant {\n-    permission java.security.SecurityPermission \"putProviderProperty.StubProvider\";\n-};\n","filename":"test\/jdk\/java\/security\/cert\/CertPathBuilder\/provider.policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -1,161 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-import util.BaseTest;\n-import util.StubDriver;\n-import util.TestPolicy;\n-\n-import java.security.AccessControlException;\n-import java.security.Policy;\n-import java.sql.DriverManager;\n-import java.sql.SQLException;\n-\n-\/*\n- * @test\n- * @library \/java\/sql\/testng\n- * @run testng\/othervm -Djava.security.manager=allow DriverManagerPermissionsTests\n- * @summary Tests that a JDBC Driver that is a module can be loaded\n- * via the service-provider loading mechanism.\n- *\/\n-public class DriverManagerPermissionsTests extends BaseTest {\n-\n-    private  static Policy policy;\n-    private static SecurityManager sm;\n-\n-    \/*\n-     * Install a SecurityManager along with a base Policy to allow testNG to run\n-     *\/\n-    @BeforeClass\n-    public static void setUpClass() throws Exception {\n-        setPolicy(new TestPolicy());\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-\n-    \/*\n-     * Install the original Policy and SecurityManager\n-     *\/\n-    @AfterClass\n-    public static void tearDownClass() throws Exception {\n-        System.setSecurityManager(sm);\n-        setPolicy(policy);\n-    }\n-\n-    \/*\n-     * Save off the original Policy and SecurityManager\n-     *\/\n-    public DriverManagerPermissionsTests() {\n-        policy = Policy.getPolicy();\n-        sm = System.getSecurityManager();\n-    }\n-\n-    \/*\n-     * Validate that AccessControlException is thrown if SQLPermission(\"setLog\")\n-     * has not been granted\n-     *\/\n-    @Test(expectedExceptions = AccessControlException.class)\n-    public void test() {\n-        setPolicy(new TestPolicy());\n-        DriverManager.setLogStream(null);\n-    }\n-\n-    \/*\n-     * Validate that setLogStream succeeds if SQLPermission(\"setLog\") has been\n-     * granted\n-     *\/\n-    @Test\n-    public void test1() {\n-        Policy.setPolicy(new TestPolicy(\"setLog\"));\n-        DriverManager.setLogStream(null);\n-    }\n-\n-    \/*\n-     * Validate that setLogStream succeeds if AllPermissions has been granted\n-     *\/\n-    @Test\n-    public void test2() {\n-        setPolicy(new TestPolicy(\"all\"));\n-        DriverManager.setLogStream(null);\n-    }\n-\n-    \/*\n-     * Validate that AccessControlException is thrown if SQLPermission(\"setLog\")\n-     * has not been granted\n-     *\/\n-    @Test(expectedExceptions = AccessControlException.class)\n-    public void test4() {\n-        setPolicy(new TestPolicy());\n-        DriverManager.setLogWriter(null);\n-    }\n-\n-    \/*\n-     * Validate that setLogWriter succeeds if SQLPermission(\"setLog\") has been\n-     * granted\n-     *\/\n-    @Test\n-    public void test5() {\n-        setPolicy(new TestPolicy(\"setLog\"));\n-        DriverManager.setLogWriter(null);\n-    }\n-\n-    \/*\n-     * Validate that setLogWriter succeeds if AllPermissions has been granted\n-     *\/\n-    @Test\n-    public void test6() {\n-        setPolicy(new TestPolicy(\"all\"));\n-        DriverManager.setLogWriter(null);\n-    }\n-\n-    \/*\n-     * Validate that AccessControlException is thrown if\n-     * SQLPermission(\"deregisterDriver\") has not been granted\n-     *\/\n-    @Test(expectedExceptions = AccessControlException.class)\n-    public void test7() throws SQLException {\n-        setPolicy(new TestPolicy());\n-        DriverManager.deregisterDriver(new StubDriver());\n-    }\n-\n-    \/*\n-     * Validate that deregisterDriver succeeds if\n-     * SQLPermission(\"deregisterDriver\") has been granted\n-     *\/\n-    @Test\n-    public void test8() throws SQLException {\n-        setPolicy(new TestPolicy(\"deregisterDriver\"));\n-        DriverManager.deregisterDriver(new StubDriver());\n-    }\n-\n-    \/*\n-     * Validate that deregisterDriver succeeds if AllPermissions has been\n-     * granted\n-     *\/\n-    @Test\n-    public void test9() throws SQLException {\n-        setPolicy(new TestPolicy(\"all\"));\n-        DriverManager.deregisterDriver(new StubDriver());\n-    }\n-}\n","filename":"test\/jdk\/java\/sql\/permissionTests\/DriverManagerPermissionsTests.java","additions":0,"deletions":161,"binary":false,"changes":161,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package nontestng.java.time.chrono;\n-\n-import java.time.chrono.HijrahChronology;\n-\n-\/* @test\n- * @bug 8178823\n- * @build Bug8178823\n- * @run main\/othervm\/policy=bug8178823.policy -Djava.security.manager nontestng.java.time.chrono.Bug8178823\n- * @summary Test Hijrah calendar is initialized with the security manager.\n- *\/\n-public class Bug8178823 {\n-    public static void main(String[] args) {\n-        HijrahChronology.INSTANCE.isLeapYear(2017);\n-    }\n-}\n","filename":"test\/jdk\/java\/time\/nontestng\/java\/time\/chrono\/Bug8178823.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-\/\/ Empty policy file for Bug8178823\n","filename":"test\/jdk\/java\/time\/nontestng\/java\/time\/chrono\/bug8178823.policy","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8075545 8210406 8174269\n- * @summary Check whether RuntimePermission(\"localeServiceProvider\") is\n- *          handled correctly.\n- * @library providersrc\/foobarutils\n- *          providersrc\/barprovider\n- *          providersrc\/fooprovider\n- * @build com.foobar.Utils\n- *        com.bar.*\n- *        com.foo.*\n- * @run main\/othervm PermissionTest\n- * @run main\/othervm\/fail\/java.security.policy=dummy.policy\n- *                        -Djava.security.manager\n- *                        -Djava.locale.providers=CLDR,SPI\n- *                        PermissionTest\n- * @run main\/othervm\/java.security.policy=localeServiceProvider.policy\n- *                   -Djava.security.manager\n- *                   -Djava.locale.providers=CLDR,SPI\n- *                   PermissionTest\n- *\/\n-\n-import com.bar.CalendarDataProviderImpl;\n-import com.bar.CalendarNameProviderImpl;\n-import com.bar.CurrencyNameProviderImpl;\n-import com.bar.CurrencyNameProviderImpl2;\n-import com.bar.GenericTimeZoneNameProviderImpl;\n-import com.bar.LocaleNameProviderImpl;\n-import com.bar.TimeZoneNameProviderImpl;\n-import com.foo.BreakIteratorProviderImpl;\n-import com.foo.CollatorProviderImpl;\n-import com.foo.DateFormatProviderImpl;\n-import com.foo.DateFormatSymbolsProviderImpl;\n-import com.foo.DecimalFormatSymbolsProviderImpl;\n-import com.foo.NumberFormatProviderImpl;\n-\n-public class PermissionTest{\n-\n-    \/\/  Make sure provider impls can be instantiated under a security manager.ZZ\n-    BreakIteratorProviderImpl breakIP = new BreakIteratorProviderImpl();\n-    CollatorProviderImpl collatorP = new CollatorProviderImpl();\n-    DateFormatProviderImpl dateFP = new DateFormatProviderImpl();\n-    DateFormatSymbolsProviderImpl dateFSP = new DateFormatSymbolsProviderImpl();\n-    DecimalFormatSymbolsProviderImpl decimalFSP = new DecimalFormatSymbolsProviderImpl();\n-    NumberFormatProviderImpl numberFP = new NumberFormatProviderImpl();\n-    CurrencyNameProviderImpl currencyNP = new CurrencyNameProviderImpl();\n-    CurrencyNameProviderImpl2 currencyNP2 = new CurrencyNameProviderImpl2();\n-    LocaleNameProviderImpl localeNP = new LocaleNameProviderImpl();\n-    TimeZoneNameProviderImpl tzNP = new TimeZoneNameProviderImpl();\n-    GenericTimeZoneNameProviderImpl tzGenNP = new GenericTimeZoneNameProviderImpl();\n-    CalendarDataProviderImpl calDataP = new CalendarDataProviderImpl();\n-    CalendarNameProviderImpl calNameP = new CalendarNameProviderImpl();\n-\n-    public static void main(String[] s) {\n-        new PermissionTest();\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/PluggableLocale\/PermissionTest.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"","filename":"test\/jdk\/java\/util\/PluggableLocale\/dummy.policy","additions":0,"deletions":0,"binary":false,"changes":0,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"localeServiceProvider\";\n-};\n","filename":"test\/jdk\/java\/util\/PluggableLocale\/localeServiceProvider.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow LoadAndStoreXML\n+ * @run main\/othervm LoadAndStoreXML\n@@ -41,6 +41,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -49,1 +43,0 @@\n-import java.util.PropertyPermission;\n@@ -54,29 +47,0 @@\n-    \/**\n-     * Simple policy implementation that grants a set of permissions to\n-     * all code sources and protection domains.\n-     *\/\n-    static class SimplePolicy extends Policy {\n-        private final Permissions perms;\n-\n-        public SimplePolicy(Permission...permissions) {\n-            perms = new Permissions();\n-            for (Permission permission : permissions)\n-                perms.add(permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource cs) {\n-            return perms;\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain pd) {\n-            return perms;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain pd, Permission p) {\n-            return perms.implies(p);\n-        }\n-    }\n-\n@@ -273,1 +237,0 @@\n-\n@@ -290,15 +253,0 @@\n-\n-        \/\/ re-run sanity test with security manager\n-        Policy orig = Policy.getPolicy();\n-        Policy p = new SimplePolicy(new RuntimePermission(\"setSecurityManager\"),\n-                                    new PropertyPermission(\"line.separator\", \"read\"));\n-        Policy.setPolicy(p);\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            testLoadAndStore(\"UTF-8\", false);\n-        } finally {\n-            \/\/ turn off security manager and restore policy\n-            System.setSecurityManager(null);\n-            Policy.setPolicy(orig);\n-        }\n-\n","filename":"test\/jdk\/java\/util\/Properties\/LoadAndStoreXML.java","additions":2,"deletions":54,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -62,7 +62,2 @@\n-        \/\/ no security manager enabled\n-        testWithoutSecurityManager();\n-        \/\/ security manager enabled and security policy explicitly allows\n-        \/\/ read permissions on java.properties.date system property\n-        testWithSecMgrExplicitPermission();\n-        \/\/ security manager enabled and no explicit permission on java.properties.date system property\n-        testWithSecMgrNoSpecificPermission();\n+        \/\/ test that store method uses the java.properties.date system property\n+        testStoreUsesPropValue();\n@@ -90,1 +85,0 @@\n-     * The launched Java program is run without any security manager\n@@ -92,1 +86,1 @@\n-    private static void testWithoutSecurityManager() throws Exception {\n+    private static void testStoreUsesPropValue() throws Exception {\n@@ -104,88 +98,0 @@\n-            assertExpectedComment(tmpFile, sysPropVal);\n-            if (!StoreTest.propsToStore.equals(loadProperties(tmpFile))) {\n-                throw new RuntimeException(\"Unexpected properties stored in \" + tmpFile);\n-            }\n-        }\n-        assertAllFileContentsAreSame(storedFiles, sysPropVal);\n-    }\n-\n-    \/**\n-     * Launches a Java program which is responsible for using Properties.store() to write out the\n-     * properties to a file. The launched Java program is passed a value for the\n-     * {@code java.properties.date} system property and the date comment written out to the file\n-     * is expected to use this value.\n-     * The launched Java program is run with the default security manager and is granted\n-     * a {@code read} permission on {@code java.properties.date}.\n-     * The program is launched multiple times with the same value for {@code java.properties.date}\n-     * and the output written by each run of this program is verified to be exactly the same.\n-     * Additionally, the date comment that's written out is verified to be the expected date that\n-     * corresponds to the passed {@code java.properties.date}.\n-     *\/\n-    private static void testWithSecMgrExplicitPermission() throws Exception {\n-        final Path policyFile = Files.createTempFile(\"8231640\", \".policy\");\n-        Files.write(policyFile, Collections.singleton(\"\"\"\n-                grant {\n-                    \/\/ test writes\/stores to a file, so FilePermission\n-                    permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write\";\n-                    \/\/ explicitly grant read permission on java.properties.date system property\n-                    \/\/ to verify store() APIs work fine\n-                    permission java.util.PropertyPermission \"java.properties.date\", \"read\";\n-                };\n-                \"\"\"));\n-        final List<Path> storedFiles = new ArrayList<>();\n-        final String sysPropVal = FORMATTER.format(Instant.ofEpochSecond(1234342423));\n-        for (int i = 0; i < 5; i++) {\n-            final Path tmpFile = Files.createTempFile(\"8231640\", \".props\");\n-            storedFiles.add(tmpFile);\n-            final ProcessBuilder processBuilder = ProcessTools.createTestJavaProcessBuilder(\n-                    \"-D\" + SYS_PROP_JAVA_PROPERTIES_DATE + \"=\" + sysPropVal,\n-                    \"-Djava.security.manager\",\n-                    \"-Djava.security.policy=\" + policyFile,\n-                    StoreTest.class.getName(),\n-                    tmpFile.toString(),\n-                    i % 2 == 0 ? \"--use-outputstream\" : \"--use-writer\");\n-            executeJavaProcess(processBuilder);\n-            assertExpectedComment(tmpFile, sysPropVal);\n-            if (!StoreTest.propsToStore.equals(loadProperties(tmpFile))) {\n-                throw new RuntimeException(\"Unexpected properties stored in \" + tmpFile);\n-            }\n-        }\n-        assertAllFileContentsAreSame(storedFiles, sysPropVal);\n-    }\n-\n-    \/**\n-     * Launches a Java program which is responsible for using Properties.store() to write out the\n-     * properties to a file. The launched Java program is passed a value for the\n-     * {@code java.properties.date} system property and the date comment written out to the file\n-     * is expected to use this value.\n-     * The launched Java program is run with the default security manager and is NOT granted\n-     * any explicit permission for {@code java.properties.date} system property.\n-     * The program is launched multiple times with the same value for {@code java.properties.date}\n-     * and the output written by each run of this program is verified to be exactly the same.\n-     * Additionally, the date comment that's written out is verified to be the expected date that\n-     * corresponds to the passed {@code java.properties.date}.\n-     *\/\n-    private static void testWithSecMgrNoSpecificPermission() throws Exception {\n-        final Path policyFile = Files.createTempFile(\"8231640\", \".policy\");\n-        Files.write(policyFile, Collections.singleton(\"\"\"\n-                grant {\n-                    \/\/ test writes\/stores to a file, so FilePermission\n-                    permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write\";\n-                    \/\/ no other grants, not even \"read\" java.properties.date system property.\n-                    \/\/ test should still work fine and the date comment should correspond to the value of\n-                    \/\/ java.properties.date system property.\n-                };\n-                \"\"\"));\n-        final List<Path> storedFiles = new ArrayList<>();\n-        final String sysPropVal = FORMATTER.format(Instant.ofEpochSecond(1234342423));\n-        for (int i = 0; i < 5; i++) {\n-            final Path tmpFile = Files.createTempFile(\"8231640\", \".props\");\n-            storedFiles.add(tmpFile);\n-            final ProcessBuilder processBuilder = ProcessTools.createTestJavaProcessBuilder(\n-                    \"-D\" + SYS_PROP_JAVA_PROPERTIES_DATE + \"=\" + sysPropVal,\n-                    \"-Djava.security.manager\",\n-                    \"-Djava.security.policy=\" + policyFile,\n-                    StoreTest.class.getName(),\n-                    tmpFile.toString(),\n-                    i % 2 == 0 ? \"--use-outputstream\" : \"--use-writer\");\n-            executeJavaProcess(processBuilder);\n","filename":"test\/jdk\/java\/util\/Properties\/StoreReproducibilityTest.java","additions":3,"deletions":97,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 6359330\n- * @summary Make sure that getBundle doesn't cause a security error\n- * with a security manager when instantialing RBClassLoader (internal\n- * classloader).\n- * @modules java.xml\n- * @run main\/othervm -Djava.security.manager=allow Bug6359330\n- *\/\n-\n-import javax.xml.parsers.SAXParser;\n-import javax.xml.parsers.SAXParserFactory;\n-import org.xml.sax.SAXNotRecognizedException;\n-\n-public class Bug6359330 {\n-\n-    public static void main(String[] args) throws Throwable {\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            SAXParserFactory spf = SAXParserFactory.newInstance();\n-            spf.setNamespaceAware(true);\n-            spf.setValidating(true);\n-            SAXParser sp = spf.newSAXParser();\n-            \/\/ The following line shouldn't throw a\n-            \/\/ java.security.AccessControlException.\n-            sp.setProperty(\"foo\", \"bar\");\n-        } catch (SAXNotRecognizedException e) {\n-            \/\/ Ignore this expected exception.\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/Bug6359330.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.test.lib.compiler.CompilerUtils;\n-import static jdk.test.lib.process.ProcessTools.executeTestJava;\n-\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n-\n-\/**\n- * @test\n- * @library \/test\/lib\n- * @modules jdk.compiler\n- * @build TestPermission jdk.test.lib.compiler.CompilerUtils\n- * @run testng TestPermission\n- * @summary Driver for testing ResourceBundle::getBundle(String, Module)\n- *\/\n-\n-public class TestPermission {\n-\n-    private static final String TEST_SRC = System.getProperty(\"test.src\");\n-    private static final String TEST_CLASSES = System.getProperty(\"test.classes\");\n-\n-    private static final Path SRC_DIR = Paths.get(TEST_SRC, \"src\");\n-    private static final Path MODS_DIR = Paths.get(\"mods\");\n-\n-    \/\/ the names of the modules in this test\n-    private static List<String> modules = Arrays.asList(\"test\", \"m1\");\n-\n-    \/**\n-     * Compiles all modules used by the test\n-     *\/\n-    @BeforeTest\n-    public void compileAll() throws Exception {\n-        for (String mn : modules) {\n-            Path msrc = SRC_DIR.resolve(mn);\n-            assertTrue(CompilerUtils.compile(msrc, MODS_DIR, \"--module-source-path\", SRC_DIR.toString()));\n-        }\n-    }\n-\n-    \/**\n-     * Run the modular test\n-     *\/\n-    @Test\n-    public void runTest() throws Exception {\n-        int exitValue = executeTestJava(\"--module-path\", MODS_DIR.toString(),\n-                                        \"--add-modules\", \"m1\",\n-                                        \"-Djava.security.manager=allow\",\n-                                        \"-m\", \"test\/jdk.test.Main\")\n-                            .outputTo(System.out)\n-                            .errorTo(System.out)\n-                            .getExitValue();\n-\n-        assertTrue(exitValue == 0);\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/security\/TestPermission.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-module m1 {\n-    exports p1;\n-    opens p1.resources to test;\n-}\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/security\/src\/m1\/module-info.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p1;\n-\n-import java.util.ResourceBundle;\n-\n-public class Bundle {\n-    public static ResourceBundle getBundle(String basename) {\n-        return ResourceBundle.getBundle(basename);\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/security\/src\/m1\/p1\/Bundle.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p1.resources;\n-\n-import java.util.ListResourceBundle;\n-\n-public class MyResources extends ListResourceBundle {\n-    @Override\n-    public Object[][] getContents() {\n-        return new Object[][] {\n-            { \"msg\", \"m1\" }\n-        };\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/security\/src\/m1\/p1\/resources\/MyResources.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.test;\n-\n-import p1.Bundle;\n-import java.util.ResourceBundle;\n-\n-public class Main {\n-    private static final String TEST_RESOURCE_BUNDLE_NAME\n-            = \"jdk.test.resources.TestResources\";\n-    private static final String M1_RESOURCE_BUNDLE_NAME\n-            = \"p1.resources.MyResources\";\n-\n-    public static void main(String[] args) {\n-        \/\/ local resource\n-        ResourceBundle.getBundle(TEST_RESOURCE_BUNDLE_NAME, Main.class.getModule());\n-\n-        \/\/ resource in another module\n-        Module m1 = p1.Bundle.class.getModule();\n-\n-        \/\/ bundles loaded with different cache key\n-        ResourceBundle rb1 = Bundle.getBundle(M1_RESOURCE_BUNDLE_NAME);\n-        ResourceBundle rb2 = ResourceBundle.getBundle(M1_RESOURCE_BUNDLE_NAME, m1);\n-        if (rb1 == rb2) {\n-            throw new RuntimeException(\"unexpected resource bundle\");\n-        }\n-\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ no permission needed for local resource\n-        ResourceBundle.getBundle(TEST_RESOURCE_BUNDLE_NAME, Main.class.getModule());\n-\n-        \/\/ resource bundle through m1's exported API\n-        Bundle.getBundle(M1_RESOURCE_BUNDLE_NAME);\n-\n-        try {\n-            \/\/ fail to get resource bundle in another module\n-            ResourceBundle.getBundle(M1_RESOURCE_BUNDLE_NAME, m1);\n-            throw new RuntimeException(\"should deny access\");\n-        } catch (SecurityException e) {}\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/security\/src\/test\/jdk\/test\/Main.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.test.resources;\n-\n-import java.util.ListResourceBundle;\n-\n-public class TestResources extends ListResourceBundle {\n-    @Override\n-    public Object[][] getContents() {\n-        return new Object[][] {\n-            { \"msg\", \"test\" }\n-        };\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/security\/src\/test\/jdk\/test\/resources\/TestResources.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-module test {\n-    requires m1;\n-}\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/security\/src\/test\/module-info.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @build test\/*\n- * @run testng\/othervm -Djava.security.manager=allow test\/p.Tests\n- * @summary Tests to exercise ServiceLoader with a security manager\n- *\/\n","filename":"test\/jdk\/java\/util\/ServiceLoader\/security\/SecurityTest.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import p.Tests.*;\n-\n-module test {\n-    uses S1;\n-    uses S2;\n-    uses S3;\n-    uses S4;\n-    uses S5;\n-    uses S6;\n-    provides S1 with P1;\n-    provides S2 with P2;\n-    provides S3 with P3;\n-    provides S4 with P4;\n-    provides S5 with P5;\n-    provides S6 with P6;\n-    requires org.testng;\n-    exports p to org.testng;\n-}\n","filename":"test\/jdk\/java\/util\/ServiceLoader\/security\/test\/module-info.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,243 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package p;\n-\n-import java.security.AccessControlContext;\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n-import java.util.ServiceConfigurationError;\n-import java.util.ServiceLoader;\n-import java.util.ServiceLoader.Provider;\n-import static java.security.AccessController.doPrivileged;\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import org.testng.annotations.BeforeTest;\n-import static org.testng.Assert.*;\n-\n-\/**\n- * Tests ServiceLoader when running with a security manager, specifically\n- * tests to ensure that provider code is run with permissions restricted by\n- * the creater of ServiceLoader, and also testing of exceptions thrown\n- * when loading or initializing a provider.\n- *\/\n-\n-public class Tests {\n-\n-    static final Permission PERM = new RuntimePermission(\"eatMuffin\");\n-\n-    static <T> PrivilegedAction<ServiceLoader<T>> loadAction(Class<T> service) {\n-        return () -> ServiceLoader.load(service);\n-    }\n-\n-    static AccessControlContext withPermissions(Permission... perms) {\n-        Permissions p = new Permissions();\n-        for (Permission perm : perms) {\n-            p.add(perm);\n-        }\n-        ProtectionDomain pd = new ProtectionDomain(null, p);\n-        return new AccessControlContext(new ProtectionDomain[]{ pd });\n-    }\n-\n-    static AccessControlContext noPermissions() {\n-        return withPermissions(\/*empty*\/);\n-    }\n-\n-    @BeforeTest\n-    public void setSecurityManager() {\n-        class Policy extends java.security.Policy {\n-            private final Permissions perms;\n-            public Policy(Permission... permissions) {\n-                perms = new Permissions();\n-                for (Permission permission : permissions) {\n-                    perms.add(permission);\n-                }\n-            }\n-            public PermissionCollection getPermissions(CodeSource cs) {\n-                return perms;\n-            }\n-            public PermissionCollection getPermissions(ProtectionDomain pd) {\n-                return perms;\n-            }\n-            public boolean implies(ProtectionDomain pd, Permission p) {\n-                return perms.implies(p);\n-            }\n-            public void refresh() { }\n-        }\n-        Policy policy = new Policy(new AllPermission());\n-        Policy.setPolicy(policy);\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-\n-    @Test\n-    public void testConstructorUsingIteratorWithPermission() {\n-        ServiceLoader<S1> sl = doPrivileged(loadAction(S1.class), withPermissions(PERM));\n-        S1 obj = sl.iterator().next();\n-    }\n-\n-    @Test\n-    public void testConstructorUsingStreamWithPermission() {\n-        ServiceLoader<S1> sl = doPrivileged(loadAction(S1.class), withPermissions(PERM));\n-        assertTrue(sl.stream().map(Provider::get).count() == 1);\n-    }\n-\n-    @Test\n-    public void testConstructorUsingIteratorNoPermission() {\n-        ServiceLoader<S1> sl = doPrivileged(loadAction(S1.class), noPermissions());\n-        try {\n-            sl.iterator().next();\n-            assertTrue(false);\n-        } catch (ServiceConfigurationError e) {\n-            assertTrue(e.getCause() instanceof AccessControlException);\n-        }\n-    }\n-\n-    @Test\n-    public void testConstructorUsingStreamNoPermission() {\n-        ServiceLoader<S1> sl = doPrivileged(loadAction(S1.class), noPermissions());\n-        try {\n-            sl.stream().map(Provider::get).count();\n-            assertTrue(false);\n-        } catch (ServiceConfigurationError e) {\n-            assertTrue(e.getCause() instanceof AccessControlException);\n-        }\n-    }\n-\n-    @Test\n-    public void testFactoryMethodUsingIteratorWithPermission() {\n-        ServiceLoader<S2> sl = doPrivileged(loadAction(S2.class), withPermissions(PERM));\n-        S2 obj = sl.iterator().next();\n-    }\n-\n-    @Test\n-    public void testFactoryMethodUsingStreamWithPermission() {\n-        ServiceLoader<S2> sl = doPrivileged(loadAction(S2.class), withPermissions(PERM));\n-        assertTrue(sl.stream().map(Provider::get).count() == 1);\n-    }\n-\n-    @Test\n-    public void testFactoryMethodUsingIteratorNoPermission() {\n-        ServiceLoader<S2> sl = doPrivileged(loadAction(S2.class), noPermissions());\n-        try {\n-            sl.iterator().next();\n-            assertTrue(false);\n-        } catch (ServiceConfigurationError e) {\n-            assertTrue(e.getCause() instanceof AccessControlException);\n-        }\n-    }\n-\n-    @Test\n-    public void testFactoryMethodUsingStreamNoPermission() {\n-        ServiceLoader<S2> sl = doPrivileged(loadAction(S2.class), noPermissions());\n-        try {\n-            sl.stream().map(Provider::get).count();\n-            assertTrue(false);\n-        } catch (ServiceConfigurationError e) {\n-            assertTrue(e.getCause() instanceof AccessControlException);\n-        }\n-    }\n-\n-    @DataProvider(name = \"failingServices\")\n-    public Object[][] failingServices() {\n-        return new Object[][] {\n-            { S3.class,    P3.Error3.class },\n-            { S4.class,    P4.Error4.class },\n-            { S5.class,    P5.Error5.class },\n-            { S6.class,    P6.Error6.class },\n-        };\n-    }\n-\n-    @Test(dataProvider = \"failingServices\")\n-    public void testFailingService(Class<?> service, Class<? extends Error> errorClass) {\n-        ServiceLoader<?> sl = ServiceLoader.load(service);\n-        try {\n-            sl.iterator().next();\n-            assertTrue(false);\n-        } catch (ServiceConfigurationError e) {\n-            assertTrue(e.getCause().getClass() == errorClass);\n-        }\n-    }\n-\n-    \/\/ service types and implementations\n-\n-    public static interface S1 { }\n-    public static interface S2 { }\n-    public static interface S3 { }\n-    public static interface S4 { }\n-    public static interface S5 { }\n-    public static interface S6 { }\n-\n-    public static class P1 implements S1 {\n-        public P1() {\n-            AccessController.getContext().checkPermission(PERM);\n-        }\n-    }\n-    public static class P2 implements S2 {\n-        private P2() {\n-            AccessController.getContext().checkPermission(PERM);\n-        }\n-        public static S2 provider() {\n-            return new P2();\n-        }\n-    }\n-\n-    public static class P3 implements S3 {\n-        static class Error3 extends Error { }\n-        static {\n-            if (1==1) throw new Error3();  \/\/ fail\n-        }\n-        public P3() { }\n-    }\n-\n-    public static class P4 implements S4 {\n-        static class Error4 extends Error { }\n-        static {\n-            if (1==1) throw new Error4();  \/\/ fail\n-        }\n-        public static S4 provider() {\n-            return new P4();\n-        }\n-    }\n-\n-    public static class P5 implements S5 {\n-        static class Error5 extends Error { }\n-        public P5() {\n-            throw new Error5();  \/\/ fail\n-        }\n-    }\n-\n-    public static class P6 implements S6 {\n-        static class Error6 extends Error { }\n-        public static S6 provider() {\n-            throw new Error6();   \/\/ fail\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/ServiceLoader\/security\/test\/p\/Tests.java","additions":0,"deletions":243,"binary":false,"changes":243,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6912560\n- * @run main\/othervm -Djava.security.manager=allow Bug6912560\n- * @summary Make sure that file path canonicalization in\n- * sun.util.calendar.ZoneInfoFile works with the default security\n- * manager.\n- *\/\n-\n-import java.io.File;\n-import java.util.*;\n-\n-public class Bug6912560 {\n-    public static void main(String[] args) {\n-        \/\/ set the user.timezone property\n-        String tzname = \"Asia\/Tokyo\";\n-        System.setProperty(\"user.timezone\", tzname);\n-        \/\/ make sure the timezone will be initialized by\n-        \/\/ the next call to TimeZone.getDefault()\n-        TimeZone.setDefault(null);\n-\n-        System.setSecurityManager(new SecurityManager());\n-        TimeZone tz = TimeZone.getDefault();\n-        if (!tzname.equals(tz.getID())) {\n-            throw new RuntimeException(\"got \" + tz.getID()\n-                                       + \", expected \" + tzname);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug6912560.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8001029\n- * @summary Make sure that TimeZone.setDefault throws a SecurityException if the\n- *          security manager doesn't permit.\n- * @run main\/othervm -Djava.security.manager=allow SetDefaultSecurityTest\n- *\/\n-\n-import java.util.SimpleTimeZone;\n-import java.util.TimeZone;\n-\n-public class SetDefaultSecurityTest {\n-    static final TimeZone NOWHERE = new SimpleTimeZone(Integer.MAX_VALUE, \"Nowhere\");\n-\n-    public static void main(String[] args)   {\n-        TimeZone defaultZone = TimeZone.getDefault();\n-\n-        \/\/ Make sure that TimeZone.setDefault works for trusted code\n-        TimeZone.setDefault(NOWHERE);\n-        if (!NOWHERE.equals(TimeZone.getDefault())) {\n-            new RuntimeException(\"TimeZone.setDefault doesn't work for trusted code.\");\n-        }\n-        \/\/ Restore defaultZone\n-        TimeZone.setDefault(defaultZone);\n-        if (!defaultZone.equals(TimeZone.getDefault())) {\n-            new RuntimeException(\"TimeZone.setDefault doesn't restore defaultZone.\");\n-        }\n-\n-        \/\/ Install a SecurityManager.\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            TimeZone.setDefault(NOWHERE);\n-            throw new RuntimeException(\"TimeZone.setDefault doesn't throw a SecurityException.\");\n-        } catch (SecurityException se) {\n-            \/\/ OK\n-        }\n-        TimeZone tz = TimeZone.getDefault();\n-        if (!defaultZone.equals(tz)) {\n-            throw new RuntimeException(\"Default TimeZone changed: \" + tz);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/TimeZone\/SetDefaultSecurityTest.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/* Testcase for PR381 Stackoverflow error with security manager, signed jars\n- * and -Djava.security.debug set.\n- * Copyright (c) 2009, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.Date;\n-\n-\/**\n- * Test class. Create a test keystore and dummy cert, create a jar file to\n- * sign with the test class in it. Sign it run it with the security manager\n- * on, plus accesscontroller debugging, will go into infinite recursion\n- * trying to get enough permissions for printing Date of failing\n- * certificate, unless fix is applied.\n- *\/\n-public class TimeZoneDatePermissionCheck\n-{\n-  public static void main(String[] args)\n-  {\n-    System.out.println(new Date());\n-  }\n-}\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneDatePermissionCheck.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6584033\n- * @summary Stackoverflow error with security manager, signed jars and debug.\n- * @library \/test\/lib\n- * @build TimeZoneDatePermissionCheck\n- * @run main TimeZoneDatePermissionCheckRun\n- *\/\n-\n-import java.io.File;\n-import java.util.List;\n-\n-import jdk.test.lib.JDKToolLauncher;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class TimeZoneDatePermissionCheckRun {\n-    private static String storePath = Utils.TEST_CLASSES + File.separator\n-            + \"timezonedatetest.store\";\n-    private static String jarPath = Utils.TEST_CLASSES + File.separator\n-            + \"timezonedatetest.jar\";\n-\n-    public static void main(String[] args) throws Throwable {\n-        try {\n-            \/\/create a test keystore and dummy cert. Note that we use the COMPILEJAVA\n-            \/\/as this test is a TimeZone test, it doesn't test keytool\n-            runJavaCmd(\"keytool\",\n-                    List.of(\"-genkeypair\", \"-alias\", \"testcert\", \"-keystore\",\n-                            storePath, \"-storepass\", \"testpass\", \"-validity\",\n-                            \"360\", \"-keyalg\", \"rsa\", \"-dname\",\n-                            \"cn=Mark Wildebeest, ou=FreeSoft, o=Red Hat, c=NL\",\n-                            \"-keypass\", \"testpass\"));\n-\n-            \/\/create a jar file to sign with the test class in it.\n-            runJavaCmd(\"jar\", List.of(\"cf\", jarPath, \"-C\", Utils.TEST_CLASSES,\n-                    \"TimeZoneDatePermissionCheck.class\"));\n-\n-            \/\/sign it\n-            runJavaCmd(\"jarsigner\",\n-                    List.of(\"-keystore\", storePath, \"-storepass\", \"testpass\",\n-                            jarPath, \"testcert\"));\n-\n-            \/\/run it with the security manager on, plus accesscontroller debugging\n-            \/\/will go into infinite recursion trying to get enough permissions for\n-            \/\/printing Date of failing certificate unless fix is applied.\n-            \/\/ Build process (with VM flags)\n-            ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n-                    \"-Djava.security.manager\",\n-                    \"-Djava.security.debug=access,failure,policy\",\n-                    \"-ea\", \"-esa\",\n-                    \"-cp\", jarPath,\n-                    \"TimeZoneDatePermissionCheck\");\n-            \/\/ Evaluate process status\n-            int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n-            if (exitCode != 0) {\n-                throw new RuntimeException(\"Unexpected exit code: \" + exitCode);\n-            }\n-        } finally {\n-            \/\/clean up the test files\n-            File storeFile = new File(storePath);\n-            if (storeFile.exists()) {\n-                storeFile.delete();\n-            }\n-            File jarFile = new File(jarPath);\n-            if (jarFile.exists()) {\n-                jarFile.delete();\n-            }\n-        }\n-    }\n-\n-    private static void runJavaCmd(String cmd, List<String> javaParam)\n-            throws Throwable{\n-        JDKToolLauncher launcher = JDKToolLauncher.create(cmd);\n-        for (String para: javaParam) {\n-            launcher.addToolArg(para);\n-        }\n-\n-        System.out.println(launcher.getCommand());\n-        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n-                .getExitValue();\n-        if (exitCode != 0) {\n-            throw new RuntimeException(\"Unexpected exit code: \" + exitCode);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneDatePermissionCheckRun.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,1 +99,1 @@\n-                \/\/ ignore - security manager must be installed\n+                \/\/ ignore\n","filename":"test\/jdk\/java\/util\/concurrent\/BlockingQueue\/LastElement.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow PrivilegedCallables\n+ * @run main PrivilegedCallables\n@@ -36,6 +36,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.ProtectionDomain;\n@@ -69,31 +63,0 @@\n-    \/\/----------------------------------------------------------------\n-    \/\/ A Policy class designed to make permissions fiddling very easy.\n-    \/\/----------------------------------------------------------------\n-    static class Policy extends java.security.Policy {\n-        static final java.security.Policy DEFAULT_POLICY = java.security.Policy.getPolicy();\n-\n-        private Permissions perms;\n-\n-        public void setPermissions(Permission...permissions) {\n-            perms = new Permissions();\n-            for (Permission permission : permissions)\n-                perms.add(permission);\n-        }\n-\n-        public Policy() { setPermissions(\/* Nothing *\/); }\n-\n-        public PermissionCollection getPermissions(CodeSource cs) {\n-            return perms;\n-        }\n-\n-        public PermissionCollection getPermissions(ProtectionDomain pd) {\n-            return perms;\n-        }\n-\n-        public boolean implies(ProtectionDomain pd, Permission p) {\n-            return perms.implies(p) || DEFAULT_POLICY.implies(pd, p);\n-        }\n-\n-        public void refresh() {}\n-    }\n-\n@@ -101,21 +64,0 @@\n-        testPrivileged();\n-\n-        final Policy policy = new Policy();\n-        Policy.setPolicy(policy);\n-        policy.setPermissions(new RuntimePermission(\"getClassLoader\"),\n-                              new RuntimePermission(\"setContextClassLoader\"));\n-        System.setSecurityManager(new SecurityManager());\n-\n-        testPrivileged();\n-\n-        policy.setPermissions(\/* Nothing *\/);\n-\n-        THROWS(AccessControlException.class,\n-               new F() {void f(){ privilegedCallableUsingCurrentClassLoader(realCaller); }},\n-               new F() {void f(){ privilegedThreadFactory(); }});\n-\n-        policy.setPermissions(new RuntimePermission(\"setSecurityManager\"));\n-        System.setSecurityManager(null);\n-    }\n-\n-    void testPrivileged() {\n","filename":"test\/jdk\/java\/util\/concurrent\/Executors\/PrivilegedCallables.java","additions":2,"deletions":60,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm -Djava.security.manager=allow ConfigChanges\n+ * @run main ConfigChanges\n@@ -39,1 +39,0 @@\n-import java.security.Permission;\n@@ -74,4 +73,0 @@\n-    static class PermissiveSecurityManger extends SecurityManager {\n-        public void checkPermission(Permission p) { \/* bien sur, Monsieur *\/ }\n-    }\n-\n@@ -145,3 +140,0 @@\n-        if (rnd.nextBoolean())\n-            System.setSecurityManager(new PermissiveSecurityManger());\n-\n","filename":"test\/jdk\/java\/util\/concurrent\/ThreadPoolExecutor\/ConfigChanges.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.security.manager=allow ThrowingTasks\n+ * @run main ThrowingTasks\n@@ -32,1 +32,0 @@\n-import java.security.Permission;\n@@ -127,4 +126,0 @@\n-    static class PermissiveSecurityManger extends SecurityManager {\n-        public void checkPermission(Permission p) { \/* bien sur, Monsieur *\/ }\n-    }\n-\n@@ -222,3 +217,0 @@\n-        if (rnd.nextBoolean())\n-            System.setSecurityManager(new PermissiveSecurityManger());\n-\n","filename":"test\/jdk\/java\/util\/concurrent\/ThreadPoolExecutor\/ThrowingTasks.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run main\/othervm -Djava.security.manager=allow AtomicUpdaters UseSM\n@@ -31,2 +30,1 @@\n- *          accessible fields in different locations with\/without a security\n- *          manager\n+ *          accessible fields in different locations\n@@ -36,6 +34,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -50,2 +42,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n@@ -58,1 +48,0 @@\n-        final boolean reflectOk;\n@@ -64,1 +53,1 @@\n-               boolean reflectOk, boolean updaterOk, String desc, TYPE type) {\n+               boolean updaterOk, String desc, TYPE type) {\n@@ -68,1 +57,0 @@\n-            this.reflectOk = reflectOk;\n@@ -81,1 +69,1 @@\n-    static void initTests(boolean hasSM) {\n+    static void initTests() {\n@@ -83,6 +71,6 @@\n-            new Config(AtomicUpdaters.class, \"pub_int\", \"public\", true, true, \"public int field of current class\", TYPE.INT),\n-            new Config(AtomicUpdaters.class, \"priv_int\", \"private\", true, true, \"private int field of current class\", TYPE.INT),\n-            new Config(AtomicUpdaters.class, \"pub_long\", \"public\", true, true, \"public long field of current class\", TYPE.LONG),\n-            new Config(AtomicUpdaters.class, \"priv_long\", \"private\", true, true, \"private long field of current class\", TYPE.LONG),\n-            new Config(AtomicUpdaters.class, \"pub_ref\", \"public\", true, true, \"public ref field of current class\", TYPE.REF),\n-            new Config(AtomicUpdaters.class, \"priv_ref\", \"private\", true, true, \"private ref field of current class\", TYPE.REF),\n+            new Config(AtomicUpdaters.class, \"pub_int\", \"public\", true, \"public int field of current class\", TYPE.INT),\n+            new Config(AtomicUpdaters.class, \"priv_int\", \"private\", true, \"private int field of current class\", TYPE.INT),\n+            new Config(AtomicUpdaters.class, \"pub_long\", \"public\", true, \"public long field of current class\", TYPE.LONG),\n+            new Config(AtomicUpdaters.class, \"priv_long\", \"private\", true, \"private long field of current class\", TYPE.LONG),\n+            new Config(AtomicUpdaters.class, \"pub_ref\", \"public\", true, \"public ref field of current class\", TYPE.REF),\n+            new Config(AtomicUpdaters.class, \"priv_ref\", \"private\", true, \"private ref field of current class\", TYPE.REF),\n@@ -92,3 +80,3 @@\n-            new Config(AtomicInteger.class, \"value\", \"private\", !hasSM, false, \"private int field of class in different package\", TYPE.INT),\n-            new Config(AtomicLong.class, \"value\", \"private\", !hasSM, false, \"private long field of class in different package\", TYPE.LONG),\n-            new Config(AtomicReference.class, \"value\", \"private\", !hasSM, false, \"private reference field of class in different package\", TYPE.REF),\n+            new Config(AtomicInteger.class, \"value\", \"private\", false, \"private int field of class in different package\", TYPE.INT),\n+            new Config(AtomicLong.class, \"value\", \"private\", false, \"private long field of class in different package\", TYPE.LONG),\n+            new Config(AtomicReference.class, \"value\", \"private\", false, \"private reference field of class in different package\", TYPE.REF),\n@@ -106,3 +94,1 @@\n-    \/\/ This should be set dynamically at runtime using a System property, but\n-    \/\/ ironically we get a SecurityException if we try to do that with a\n-    \/\/ SecurityManager installed\n+    \/\/ run with -v\n@@ -112,1 +98,0 @@\n-        boolean hasSM = false;\n@@ -117,9 +102,0 @@\n-            else if (\"UseSM\".equals(arg)) {\n-                \/\/ Ensure that the test is not influenced by the default users policy.\n-                Policy.setPolicy(new NoPermissionsPolicy());\n-                SecurityManager m = System.getSecurityManager();\n-                if (m != null)\n-                    throw new RuntimeException(\"No security manager should initially be installed\");\n-                System.setSecurityManager(new java.lang.SecurityManager());\n-                hasSM = true;\n-            }\n@@ -130,1 +106,1 @@\n-        initTests(hasSM);\n+        initTests();\n@@ -134,1 +110,1 @@\n-        System.out.printf(\"Testing with%s a SecurityManager present\\n\", hasSM ? \"\" : \"out\");\n+\n@@ -137,1 +113,0 @@\n-            Error reflectionFailure = null;\n@@ -142,13 +117,0 @@\n-            try {\n-                Field f = clazz.getDeclaredField(c.field);\n-                if (!c.reflectOk)\n-                    reflectionFailure = new Error(\"Unexpected reflective access: \" + c);\n-            }\n-            catch (AccessControlException e) {\n-                if (c.reflectOk)\n-                    reflectionFailure = new Error(\"Unexpected reflective access failure: \" + c, e);\n-                else if (verbose) {\n-                    System.out.println(\"Got expected reflection exception: \" + e);\n-                    e.printStackTrace(System.out);\n-                }\n-            }\n@@ -156,3 +118,1 @@\n-            if (reflectionFailure != null) {\n-                reflectionFailure.printStackTrace(System.out);\n-            }\n+            Field f = clazz.getDeclaredField(c.field);\n@@ -192,3 +152,0 @@\n-            }\n-\n-            if (updaterFailure != null || reflectionFailure != null) {\n@@ -196,1 +153,0 @@\n-\n@@ -204,21 +160,0 @@\n-\n-    \/**\n-     * Policy with no permissions.\n-     *\/\n-    private static class NoPermissionsPolicy extends Policy {\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource cs) {\n-            return Policy.UNSUPPORTED_EMPTY_COLLECTION;\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain pd) {\n-            return Policy.UNSUPPORTED_EMPTY_COLLECTION;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain pd, Permission p) {\n-            return Policy.UNSUPPORTED_EMPTY_COLLECTION.implies(p) ||\n-                    DEFAULT_POLICY.implies(pd, p);\n-        }\n-    }\n","filename":"test\/jdk\/java\/util\/concurrent\/atomic\/AtomicUpdaters.java","additions":17,"deletions":82,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -149,4 +149,1 @@\n-        runWithPermissions(r,\n-                           new RuntimePermission(\"getClassLoader\"),\n-                           new RuntimePermission(\"setContextClassLoader\"),\n-                           new RuntimePermission(\"modifyThread\"));\n+        r.run();\n@@ -170,1 +167,1 @@\n-        runWithPermissions(r);\n+        r.run();\n@@ -192,1 +189,1 @@\n-        runWithPermissions(r);\n+        r.run();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/AbstractExecutorServiceTest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -4086,9 +4086,0 @@\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            try {\n-                System.setSecurityManager(null);\n-            } catch (SecurityException giveUp) {\n-                return \"Reflection not available\";\n-            }\n-        }\n-\n@@ -4102,2 +4093,0 @@\n-        } finally {\n-            if (sm != null) System.setSecurityManager(sm);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/CompletableFutureTest.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,3 +38,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n@@ -345,3 +342,1 @@\n-                    SecurityManager s = System.getSecurityManager();\n-                    assertSame(current.getThreadGroup(),\n-                               (s == null) ? egroup : s.getThreadGroup());\n+                    assertSame(current.getThreadGroup(), egroup);\n@@ -364,1 +359,1 @@\n-     * access control context and context class loader\n+     * and context class loader\n@@ -373,1 +368,0 @@\n-                final AccessControlContext thisacc = AccessController.getContext();\n@@ -379,3 +373,1 @@\n-                        SecurityManager s = System.getSecurityManager();\n-                        assertSame(current.getThreadGroup(),\n-                                   (s == null) ? egroup : s.getThreadGroup());\n+                        assertSame(current.getThreadGroup(), egroup);\n@@ -384,1 +376,0 @@\n-                        assertEquals(thisacc, AccessController.getContext());\n@@ -394,159 +385,1 @@\n-        runWithPermissions(r,\n-                           new RuntimePermission(\"getClassLoader\"),\n-                           new RuntimePermission(\"setContextClassLoader\"),\n-                           new RuntimePermission(\"modifyThread\"));\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    boolean haveCCLPermissions() {\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            try {\n-                sm.checkPermission(new RuntimePermission(\"setContextClassLoader\"));\n-                sm.checkPermission(new RuntimePermission(\"getClassLoader\"));\n-            } catch (AccessControlException e) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    void checkCCL() {\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"setContextClassLoader\"));\n-            sm.checkPermission(new RuntimePermission(\"getClassLoader\"));\n-        }\n-    }\n-\n-    class CheckCCL implements Callable<Object> {\n-        public Object call() {\n-            checkCCL();\n-            return null;\n-        }\n-    }\n-\n-    \/**\n-     * Without class loader permissions, creating\n-     * privilegedCallableUsingCurrentClassLoader throws ACE\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public void testCreatePrivilegedCallableUsingCCLWithNoPrivs() {\n-        Runnable r = new CheckedRunnable() {\n-            public void realRun() throws Exception {\n-                if (System.getSecurityManager() == null)\n-                    return;\n-                try {\n-                    Executors.privilegedCallableUsingCurrentClassLoader(new NoOpCallable());\n-                    shouldThrow();\n-                } catch (AccessControlException success) {}\n-            }};\n-\n-        runWithoutPermissions(r);\n-    }\n-\n-    \/**\n-     * With class loader permissions, calling\n-     * privilegedCallableUsingCurrentClassLoader does not throw ACE\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public void testPrivilegedCallableUsingCCLWithPrivs() throws Exception {\n-        Runnable r = new CheckedRunnable() {\n-            public void realRun() throws Exception {\n-                Executors.privilegedCallableUsingCurrentClassLoader\n-                    (new NoOpCallable())\n-                    .call();\n-            }};\n-\n-        runWithPermissions(r,\n-                           new RuntimePermission(\"getClassLoader\"),\n-                           new RuntimePermission(\"setContextClassLoader\"));\n-    }\n-\n-    \/**\n-     * Without permissions, calling privilegedCallable throws ACE\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public void testPrivilegedCallableWithNoPrivs() throws Exception {\n-        \/\/ Avoid classloader-related SecurityExceptions in swingui.TestRunner\n-        Executors.privilegedCallable(new CheckCCL());\n-\n-        Runnable r = new CheckedRunnable() {\n-            public void realRun() throws Exception {\n-                if (System.getSecurityManager() == null)\n-                    return;\n-                Callable<?> task = Executors.privilegedCallable(new CheckCCL());\n-                try {\n-                    task.call();\n-                    shouldThrow();\n-                } catch (AccessControlException success) {}\n-            }};\n-\n-        runWithoutPermissions(r);\n-\n-        \/\/ It seems rather difficult to test that the\n-        \/\/ AccessControlContext of the privilegedCallable is used\n-        \/\/ instead of its caller.  Below is a failed attempt to do\n-        \/\/ that, which does not work because the AccessController\n-        \/\/ cannot capture the internal state of the current Policy.\n-        \/\/ It would be much more work to differentiate based on,\n-        \/\/ e.g. CodeSource.\n-\n-\/\/         final AccessControlContext[] noprivAcc = new AccessControlContext[1];\n-\/\/         final Callable[] task = new Callable[1];\n-\n-\/\/         runWithPermissions\n-\/\/             (new CheckedRunnable() {\n-\/\/                 public void realRun() {\n-\/\/                     if (System.getSecurityManager() == null)\n-\/\/                         return;\n-\/\/                     noprivAcc[0] = AccessController.getContext();\n-\/\/                     task[0] = Executors.privilegedCallable(new CheckCCL());\n-\/\/                     try {\n-\/\/                         AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-\/\/                                                           public Void run() {\n-\/\/                                                               checkCCL();\n-\/\/                                                               return null;\n-\/\/                                                           }}, noprivAcc[0]);\n-\/\/                         shouldThrow();\n-\/\/                     } catch (AccessControlException success) {}\n-\/\/                 }});\n-\n-\/\/         runWithPermissions\n-\/\/             (new CheckedRunnable() {\n-\/\/                 public void realRun() throws Exception {\n-\/\/                     if (System.getSecurityManager() == null)\n-\/\/                         return;\n-\/\/                     \/\/ Verify that we have an underprivileged ACC\n-\/\/                     try {\n-\/\/                         AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-\/\/                                                           public Void run() {\n-\/\/                                                               checkCCL();\n-\/\/                                                               return null;\n-\/\/                                                           }}, noprivAcc[0]);\n-\/\/                         shouldThrow();\n-\/\/                     } catch (AccessControlException success) {}\n-\n-\/\/                     try {\n-\/\/                         task[0].call();\n-\/\/                         shouldThrow();\n-\/\/                     } catch (AccessControlException success) {}\n-\/\/                 }},\n-\/\/              new RuntimePermission(\"getClassLoader\"),\n-\/\/              new RuntimePermission(\"setContextClassLoader\"));\n-    }\n-\n-    \/**\n-     * With permissions, calling privilegedCallable succeeds\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public void testPrivilegedCallableWithPrivs() throws Exception {\n-        Runnable r = new CheckedRunnable() {\n-            public void realRun() throws Exception {\n-                Executors.privilegedCallable(new CheckCCL()).call();\n-            }};\n-\n-        runWithPermissions(r,\n-                           new RuntimePermission(\"getClassLoader\"),\n-                           new RuntimePermission(\"setContextClassLoader\"));\n+        r.run();\n@@ -655,0 +488,10 @@\n+    \/**\n+     * privilegedCallable\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    public void testPrivilegedCallable() throws Exception {\n+        Callable<String> c = () -> \"\";\n+        Callable<String> priv = Executors.privilegedCallable(c);\n+        assertEquals(\"\", priv.call());\n+    }\n+\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ExecutorsTest.java","additions":14,"deletions":171,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-        boolean haveSecurityManager = (System.getSecurityManager() != null);\n@@ -95,16 +94,3 @@\n-            if (haveSecurityManager)\n-                assertThrows(\n-                    SecurityException.class,\n-                    () -> System.getProperty(\"foo\"),\n-                    () -> currentThread.setContextClassLoader(\n-                        classLoaderDistinctFromSystemClassLoader));\n-            else {\n-                currentThread.setContextClassLoader(classLoaderDistinctFromSystemClassLoader);\n-                assertSame(currentThread.getContextClassLoader(), classLoaderDistinctFromSystemClassLoader);\n-                currentThread.setContextClassLoader(preexistingContextClassLoader);\n-            }\n-            \/\/ TODO ?\n-\/\/          if (haveSecurityManager\n-\/\/              && Thread.currentThread().getClass().getSimpleName()\n-\/\/                 .equals(\"InnocuousForkJoinWorkerThread\"))\n-\/\/              assertThrows(SecurityException.class, \/* ?? *\/);\n+            currentThread.setContextClassLoader(classLoaderDistinctFromSystemClassLoader);\n+            assertSame(currentThread.getContextClassLoader(), classLoaderDistinctFromSystemClassLoader);\n+            currentThread.setContextClassLoader(preexistingContextClassLoader);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPool9Test.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -513,1 +513,1 @@\n-        runWithPermissions(r, new RuntimePermission(\"modifyThread\"));\n+        r.run();\n@@ -532,1 +532,1 @@\n-        runWithPermissions(r, new RuntimePermission(\"modifyThread\"));\n+        r.run();\n@@ -556,1 +556,1 @@\n-        runWithPermissions(r, new RuntimePermission(\"modifyThread\"));\n+        r.run();\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPoolTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -466,46 +466,0 @@\n-    \/**\n-     * cancel(true) tries to interrupt a running task, but\n-     * Thread.interrupt throws (simulating a restrictive security\n-     * manager)\n-     *\/\n-    public void testCancelInterrupt_ThrowsSecurityException() {\n-        final CountDownLatch pleaseCancel = new CountDownLatch(1);\n-        final CountDownLatch cancelled = new CountDownLatch(1);\n-        final PublicFutureTask task =\n-            new PublicFutureTask(new CheckedRunnable() {\n-                public void realRun() {\n-                    pleaseCancel.countDown();\n-                    await(cancelled);\n-                    assertFalse(Thread.interrupted());\n-                }});\n-\n-        final Thread t = new Thread(task) {\n-            \/\/ Simulate a restrictive security manager.\n-            @Override public void interrupt() {\n-                throw new SecurityException();\n-            }};\n-        t.setDaemon(true);\n-        t.start();\n-\n-        await(pleaseCancel);\n-        try {\n-            task.cancel(true);\n-            shouldThrow();\n-        } catch (SecurityException success) {}\n-\n-        \/\/ We failed to deliver the interrupt, but the world retains\n-        \/\/ its sanity, as if we had done task.cancel(false)\n-        assertTrue(task.isCancelled());\n-        assertTrue(task.isDone());\n-        assertEquals(1, task.runCount());\n-        assertEquals(1, task.doneCount());\n-        assertEquals(0, task.setCount());\n-        assertEquals(0, task.setExceptionCount());\n-        cancelled.countDown();\n-        awaitTermination(t);\n-        assertEquals(1, task.setCount());\n-        assertEquals(0, task.setExceptionCount());\n-        tryToConfuseDoneTask(task);\n-        checkCancelled(task);\n-    }\n-\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/FutureTaskTest.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -45,9 +45,0 @@\n-\/*\n- * @test id=security-manager\n- * @summary Conformance testing variant of JSR-166 tck tests\n- *          with java security manager set to allow.\n- * @build *\n- * @modules java.management java.base\/jdk.internal.util\n- * @run junit\/othervm\/timeout=1000 -Djava.security.manager=allow JSR166TestCase\n- *\/\n-\n@@ -87,5 +78,0 @@\n- * @run junit\/othervm\/timeout=1000\/policy=tck.policy\n- *      --add-opens java.base\/java.util.concurrent=ALL-UNNAMED\n- *      --add-opens java.base\/java.lang=ALL-UNNAMED\n- *      -Djsr166.testImplementationDetails=true\n- *      JSR166TestCase\n@@ -109,7 +95,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.security.SecurityPermission;\n@@ -250,3 +229,0 @@\n-    \/\/ No longer run with custom securityManagers\n-    private static final boolean useSecurityManager =\n-    Boolean.getBoolean(\"jsr166.useSecurityManager\");\n@@ -465,8 +441,0 @@\n-        if (useSecurityManager) {\n-            System.err.println(\"Setting a permissive security manager\");\n-            Policy.setPolicy(permissivePolicy());\n-            try {\n-                System.setSecurityManager(new SecurityManager());\n-            } catch(Throwable ok) {  \/\/ failure OK during deprecation\n-            }\n-        }\n@@ -511,16 +479,2 @@\n-        try {\n-            @SuppressWarnings(\"removal\") double jcv =\n-            java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<Double>() {\n-                public Double run() {\n-                    return Double.valueOf(System.getProperty(\"java.class.version\"));}});\n-            JAVA_CLASS_VERSION = jcv;\n-            @SuppressWarnings(\"removal\") String jsv =\n-            java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<String>() {\n-                public String run() {\n-                    return System.getProperty(\"java.specification.version\");}});\n-            JAVA_SPECIFICATION_VERSION = jsv;\n-        } catch (Throwable t) {\n-            throw new Error(t);\n-        }\n+        JAVA_CLASS_VERSION = Double.valueOf(System.getProperty(\"java.class.version\"));\n+        JAVA_SPECIFICATION_VERSION = System.getProperty(\"java.specification.version\");\n@@ -1219,9 +1173,0 @@\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            try {\n-                System.setSecurityManager(null);\n-            } catch (SecurityException giveUp) {\n-                return;\n-            }\n-        }\n-\n@@ -1233,2 +1178,0 @@\n-\n-        if (sm != null) System.setSecurityManager(sm);\n@@ -1444,114 +1387,0 @@\n-    \/**\n-     * Runs Runnable r with a security policy that permits precisely\n-     * the specified permissions.  If there is no current security\n-     * manager, the runnable is run twice, both with and without a\n-     * security manager.  We require that any security manager permit\n-     * getPolicy\/setPolicy.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public void runWithPermissions(Runnable r, Permission... permissions) {\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            r.run();\n-        }\n-        runWithSecurityManagerWithPermissions(r, permissions);\n-    }\n-\n-    \/**\n-     * Runs Runnable r with a security policy that permits precisely\n-     * the specified permissions.  If there is no current security\n-     * manager, a temporary one is set for the duration of the\n-     * Runnable.  We require that any security manager permit\n-     * getPolicy\/setPolicy.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public void runWithSecurityManagerWithPermissions(Runnable r,\n-                                                      Permission... permissions) {\n-        if (!useSecurityManager) return;\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            Policy savedPolicy = Policy.getPolicy();\n-            try {\n-                Policy.setPolicy(permissivePolicy());\n-                System.setSecurityManager(new SecurityManager());\n-                runWithSecurityManagerWithPermissions(r, permissions);\n-            } catch (UnsupportedOperationException ok) {\n-            } finally {\n-                try {\n-                    System.setSecurityManager(null);\n-                    Policy.setPolicy(savedPolicy);\n-                } catch (Exception ok) {\n-                }\n-            }\n-        } else {\n-            Policy savedPolicy = Policy.getPolicy();\n-            AdjustablePolicy policy = new AdjustablePolicy(permissions);\n-            Policy.setPolicy(policy);\n-\n-            try {\n-                r.run();\n-            } finally {\n-                policy.addPermission(new SecurityPermission(\"setPolicy\"));\n-                Policy.setPolicy(savedPolicy);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Runs a runnable without any permissions.\n-     *\/\n-    public void runWithoutPermissions(Runnable r) {\n-        runWithPermissions(r);\n-    }\n-\n-    \/**\n-     * A security policy where new permissions can be dynamically added\n-     * or all cleared.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static class AdjustablePolicy extends java.security.Policy {\n-        Permissions perms = new Permissions();\n-        AdjustablePolicy(Permission... permissions) {\n-            for (Permission permission : permissions)\n-                perms.add(permission);\n-        }\n-        void addPermission(Permission perm) { perms.add(perm); }\n-        void clearPermissions() { perms = new Permissions(); }\n-        public PermissionCollection getPermissions(CodeSource cs) {\n-            return perms;\n-        }\n-        public PermissionCollection getPermissions(ProtectionDomain pd) {\n-            return perms;\n-        }\n-        public boolean implies(ProtectionDomain pd, Permission p) {\n-            return perms.implies(p);\n-        }\n-        public void refresh() {}\n-        public String toString() {\n-            List<Permission> ps = new ArrayList<>();\n-            for (Enumeration<Permission> e = perms.elements(); e.hasMoreElements();)\n-                ps.add(e.nextElement());\n-            return \"AdjustablePolicy with permissions \" + ps;\n-        }\n-    }\n-\n-    \/**\n-     * Returns a policy containing all the permissions we ever need.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static Policy permissivePolicy() {\n-        return new AdjustablePolicy\n-            \/\/ Permissions j.u.c. needs directly\n-            (new RuntimePermission(\"modifyThread\"),\n-             new RuntimePermission(\"getClassLoader\"),\n-             new RuntimePermission(\"setContextClassLoader\"),\n-             \/\/ Permissions needed to change permissions!\n-             new SecurityPermission(\"getPolicy\"),\n-             new SecurityPermission(\"setPolicy\"),\n-             new RuntimePermission(\"setSecurityManager\"),\n-             \/\/ Permissions needed by the junit test harness\n-             new RuntimePermission(\"accessDeclaredMembers\"),\n-             new PropertyPermission(\"*\", \"read\"),\n-             new java.io.FilePermission(\"<<ALL FILES>>\", \"read\"));\n-    }\n-\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/JSR166TestCase.java","additions":2,"deletions":173,"binary":false,"changes":175,"status":"modified"},{"patch":"@@ -95,3 +95,0 @@\n-        } catch (SecurityException acceptable) {\n-            \/\/ Security manager may deny access\n-            return;\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ThreadLocalRandomTest.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -80,2 +80,0 @@\n-        \/\/ failure due to SecurityException is OK.\n-        \/\/ Would be nice to explicitly test both ways, but cannot yet.\n@@ -85,0 +83,1 @@\n+        Thread.setDefaultUncaughtExceptionHandler(eh);\n@@ -86,8 +85,3 @@\n-            Thread.setDefaultUncaughtExceptionHandler(eh);\n-            try {\n-                assertSame(eh, Thread.getDefaultUncaughtExceptionHandler());\n-            } finally {\n-                Thread.setDefaultUncaughtExceptionHandler(defaultHandler);\n-            }\n-        } catch (SecurityException ok) {\n-            assertNotNull(System.getSecurityManager());\n+            assertSame(eh, Thread.getDefaultUncaughtExceptionHandler());\n+        } finally {\n+            Thread.setDefaultUncaughtExceptionHandler(defaultHandler);\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ThreadTest.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,18 +0,0 @@\n-grant {\n-    \/\/ Permissions j.u.c. needs directly\n-    permission java.lang.RuntimePermission \"modifyThread\";\n-    permission java.lang.RuntimePermission \"modifyThreadGroup\";\n-    permission java.lang.RuntimePermission \"getClassLoader\";\n-    permission java.lang.RuntimePermission \"setContextClassLoader\";\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    \/\/ Permissions needed to change permissions!\n-    permission java.security.SecurityPermission \"getPolicy\";\n-    permission java.security.SecurityPermission \"setPolicy\";\n-    permission java.security.SecurityPermission \"setSecurityManager\";\n-    \/\/ Permissions needed by the junit test harness\n-    permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n-    permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n-    \/\/ Allows test methods to inspect test thread state\n-    permission java.lang.management.ManagementPermission \"monitor\";\n-};\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/tck.policy","additions":0,"deletions":18,"binary":false,"changes":18,"status":"deleted"},{"patch":"@@ -1,133 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.LinkedHashSet;\n-import java.util.ResourceBundle;\n-import java.util.Set;\n-import java.util.logging.Filter;\n-import java.util.logging.Handler;\n-import java.util.logging.Level;\n-import java.util.logging.LogRecord;\n-import java.util.logging.Logger;\n-import java.util.logging.SimpleFormatter;\n-\n-\/**\n- * @test\n- * @bug 8026863\n- * @summary checks that anonymous logger setters work as expected when a\n- *          security manager is set, and checks that getters return expected\n- *          values.\n- * @run main\/othervm -Djava.security.manager=allow TestAnonymousLogger\n- *\/\n-public class TestAnonymousLogger {\n-\n-    public static final class TestHandler extends Handler {\n-        @Override\n-        public void publish(LogRecord record) {\n-            System.out.println(new SimpleFormatter().format(record));\n-        }\n-        @Override\n-        public void flush() {\n-            System.out.flush();\n-        }\n-        @Override\n-        public void close() {\n-            flush();\n-        }\n-    }\n-\n-    public static final class TestFilter implements Filter {\n-        @Override\n-        public boolean isLoggable(LogRecord record) {\n-            return true;\n-        }\n-    }\n-\n-    public static final class TestBundle extends ResourceBundle {\n-        Set<String> keys = Collections.synchronizedSet(new LinkedHashSet<>());\n-        @Override\n-        protected Object handleGetObject(String key) {\n-            keys.add(key);\n-            return \"[LOCALIZED] \"+key;\n-        }\n-        @Override\n-        public Enumeration<String> getKeys() {\n-            return Collections.enumeration(keys);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        Logger anonymous = Logger.getAnonymousLogger();\n-\n-        final TestHandler handler = new TestHandler();\n-        final TestFilter filter = new TestFilter();\n-        final ResourceBundle bundle = ResourceBundle.getBundle(TestBundle.class.getName());\n-        anonymous.setLevel(Level.FINEST);\n-        anonymous.addHandler(handler);\n-        anonymous.setFilter(filter);\n-        anonymous.setUseParentHandlers(true);\n-        anonymous.setResourceBundle(bundle);\n-\n-        if (anonymous.getLevel() != Level.FINEST) {\n-            throw new RuntimeException(\"Unexpected level: \" + anonymous.getLevel());\n-        } else {\n-            System.out.println(\"Got expected level: \" + anonymous.getLevel());\n-        }\n-        if (!Arrays.asList(anonymous.getHandlers()).contains(handler)) {\n-            throw new RuntimeException(\"Expected handler not found in: \"\n-                    + Arrays.asList(anonymous.getHandlers()));\n-        } else {\n-            System.out.println(\"Got expected handler in: \" + Arrays.asList(anonymous.getHandlers()));\n-        }\n-        if (anonymous.getFilter() != filter) {\n-            throw new RuntimeException(\"Unexpected filter: \" + anonymous.getFilter());\n-        } else {\n-            System.out.println(\"Got expected filter: \" + anonymous.getFilter());\n-        }\n-        if (!anonymous.getUseParentHandlers()) {\n-            throw new RuntimeException(\"Unexpected flag: \" + anonymous.getUseParentHandlers());\n-        } else {\n-            System.out.println(\"Got expected flag: \" + anonymous.getUseParentHandlers());\n-        }\n-        if (anonymous.getResourceBundle() != bundle) {\n-            throw new RuntimeException(\"Unexpected bundle: \" + anonymous.getResourceBundle());\n-        } else {\n-            System.out.println(\"Got expected bundle: \" + anonymous.getResourceBundle());\n-        }\n-        try {\n-            anonymous.setParent(Logger.getLogger(\"foo.bar\"));\n-            throw new RuntimeException(\"Expected SecurityException not raised!\");\n-        } catch (SecurityException x) {\n-            System.out.println(\"Got expected exception: \" + x);\n-        }\n-        if (anonymous.getParent() != Logger.getLogger(\"\")) {\n-            throw new RuntimeException(\"Unexpected parent: \" + anonymous.getParent());\n-        } else {\n-            System.out.println(\"Got expected parent: \" + anonymous.getParent());\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/util\/logging\/AnonymousLogger\/TestAnonymousLogger.java","additions":0,"deletions":133,"binary":false,"changes":133,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.io.FilePermission;\n@@ -31,6 +30,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -39,1 +32,0 @@\n-import java.util.Enumeration;\n@@ -43,2 +35,0 @@\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -49,1 +39,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -56,2 +45,1 @@\n- * @run main\/othervm FileHandlerLongLimit UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow FileHandlerLongLimit SECURE\n+ * @run main\/othervm FileHandlerLongLimit\n@@ -63,15 +51,5 @@\n-    \/**\n-     * We will test handling of limit and overflow of MeteredStream.written in\n-     * two configurations.\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         permissions granted.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void run(Properties propertyFile) throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            Configure.setUp(this, propertyFile);\n-            test(this.name() + \" \" + propertyFile.getProperty(\"test.name\"), propertyFile,\n-                    Long.parseLong(propertyFile.getProperty(FileHandler.class.getName()+\".limit\")));\n-        }\n+     \/\/ We will test handling of limit and overflow of MeteredStream.written\n+    public static void run(Properties propertyFile) throws Exception {\n+        setUp(propertyFile);\n+        test(propertyFile.getProperty(\"test.name\"), propertyFile,\n+                Long.parseLong(propertyFile.getProperty(FileHandler.class.getName()+\".limit\")));\n@@ -147,8 +125,0 @@\n-\n-        if (args == null || args.length == 0) {\n-            args = new String[] {\n-                TestCase.UNSECURE.name(),\n-                TestCase.SECURE.name(),\n-            };\n-        }\n-\n@@ -156,5 +126,2 @@\n-            for (String testName : args) {\n-                for (Properties propertyFile : properties) {\n-                    TestCase test = TestCase.valueOf(testName);\n-                    test.run(propertyFile);\n-                }\n+            for (Properties propertyFile : properties) {\n+                run(propertyFile);\n@@ -164,51 +131,1 @@\n-                Configure.doPrivileged(() -> {\n-                    \/\/ cleanup - delete files that have been created\n-                    try {\n-                        Files.list(Paths.get(userDir))\n-                            .filter((f) -> f.toString().contains(PREFIX))\n-                            .forEach((f) -> {\n-                                try {\n-                                    System.out.println(\"deleting \" + f);\n-                                    Files.delete(f);\n-                                } catch(Throwable t) {\n-                                    System.err.println(\"Failed to delete \" + f + \": \" + t);\n-                                }\n-                            });\n-                    } catch(Throwable t) {\n-                        System.err.println(\"Cleanup failed to list files: \" + t);\n-                        t.printStackTrace();\n-                    }\n-                });\n-            }\n-        }\n-    }\n-\n-    static class Configure {\n-        static Policy policy = null;\n-        static final AtomicBoolean allowAll = new AtomicBoolean(false);\n-        static void setUp(TestCase test, Properties propertyFile) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE, allowAll);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    new InternalError(\"No such testcase: \" + test);\n-            }\n-            doPrivileged(() -> {\n+                \/\/ cleanup - delete files that have been created\n@@ -216,6 +133,13 @@\n-                    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n-                    propertyFile.store(bytes, propertyFile.getProperty(\"test.name\"));\n-                    ByteArrayInputStream bais = new ByteArrayInputStream(bytes.toByteArray());\n-                    LogManager.getLogManager().readConfiguration(bais);\n-                } catch (IOException ex) {\n-                    throw new RuntimeException(ex);\n+                    Files.list(Paths.get(userDir))\n+                        .filter((f) -> f.toString().contains(PREFIX))\n+                        .forEach((f) -> {\n+                            try {\n+                                System.out.println(\"deleting \" + f);\n+                                Files.delete(f);\n+                            } catch(Throwable t) {\n+                                System.err.println(\"Failed to delete \" + f + \": \" + t);\n+                            }\n+                        });\n+                } catch(Throwable t) {\n+                    System.err.println(\"Cleanup failed to list files: \" + t);\n+                    t.printStackTrace();\n@@ -223,8 +147,0 @@\n-            });\n-        }\n-        static void doPrivileged(Runnable run) {\n-            allowAll.set(true);\n-            try {\n-                run.run();\n-            } finally {\n-                allowAll.set(false);\n@@ -233,7 +149,10 @@\n-        static <T> T callPrivileged(Callable<T> call) throws Exception {\n-            allowAll.set(true);\n-            try {\n-                return call.call();\n-            } finally {\n-                allowAll.set(false);\n-            }\n+    }\n+\n+    static void setUp(Properties propertyFile) {\n+        try {\n+            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+            propertyFile.store(bytes, propertyFile.getProperty(\"test.name\"));\n+            ByteArrayInputStream bais = new ByteArrayInputStream(bytes.toByteArray());\n+            LogManager.getLogManager().readConfiguration(bais);\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n@@ -297,3 +216,1 @@\n-        return Configure.callPrivileged((Callable<Long>)() -> {\n-            return limitField.getLong(handler);\n-        });\n+        return limitField.getLong(handler);\n@@ -302,4 +219,2 @@\n-        return Configure.callPrivileged((Callable<OutputStream>)() -> {\n-            final OutputStream metered = OutputStream.class.cast(meterField.get(handler));\n-            return metered;\n-        });\n+        final OutputStream metered = OutputStream.class.cast(meterField.get(handler));\n+        return metered;\n@@ -308,4 +223,2 @@\n-        return Configure.callPrivileged((Callable<TestOutputStream>)() -> {\n-            outField.set(metered, new TestOutputStream(OutputStream.class.cast(outField.get(metered))));\n-            return TestOutputStream.class.cast(outField.get(metered));\n-        });\n+        outField.set(metered, new TestOutputStream(OutputStream.class.cast(outField.get(metered))));\n+        return TestOutputStream.class.cast(outField.get(metered));\n@@ -314,3 +227,1 @@\n-        return Configure.callPrivileged((Callable<Long>)() -> {\n-            return writtenField.getLong(metered);\n-        });\n+        return writtenField.getLong(metered);\n@@ -320,4 +231,2 @@\n-        return Configure.callPrivileged((Callable<Long>)() -> {\n-            writtenField.setLong(metered, newValue);\n-            return writtenField.getLong(metered);\n-        });\n+        writtenField.setLong(metered, newValue);\n+        return writtenField.getLong(metered);\n@@ -328,7 +237,5 @@\n-        Configure.doPrivileged(() -> {\n-            try {\n-                Files.deleteIfExists(Paths.get(PREFIX));\n-            } catch (IOException x) {\n-                throw new RuntimeException(x);\n-            }\n-        });\n+        try {\n+            Files.deleteIfExists(Paths.get(PREFIX));\n+        } catch (IOException x) {\n+            throw new RuntimeException(x);\n+        }\n@@ -442,0 +349,1 @@\n+        System.out.println(\"Success for: \" + name);\n@@ -443,68 +351,0 @@\n-\n-\n-    static final class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final AtomicBoolean allowAll;\n-        public SimplePolicy(TestCase test, AtomicBoolean allowAll) {\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            permissions.add(new LoggingPermission(\"control\", null));\n-            permissions.add(new FilePermission(PREFIX+\".lck\", \"read,write,delete\"));\n-            permissions.add(new FilePermission(PREFIX, \"read,write\"));\n-\n-            \/\/ these are used for configuring the test itself...\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get()) return allPermissions.implies(permission);\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(allowAll.get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(allowAll.get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/FileHandlerLongLimit.java","additions":47,"deletions":207,"binary":false,"changes":254,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import java.io.FilePermission;\n@@ -28,1 +27,0 @@\n-import java.nio.channels.FileChannel;\n@@ -31,8 +29,0 @@\n-import static java.nio.file.StandardOpenOption.CREATE_NEW;\n-import static java.nio.file.StandardOpenOption.WRITE;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -41,1 +31,0 @@\n-import java.util.Enumeration;\n@@ -44,1 +33,0 @@\n-import java.util.PropertyPermission;\n@@ -46,1 +34,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -49,1 +36,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -56,2 +42,1 @@\n- * @run main\/othervm FileHandlerPath UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow FileHandlerPath SECURE\n+ * @run main\/othervm FileHandlerPath\n@@ -63,13 +48,4 @@\n-    \/**\n-     * We will test the simple pattern in two configurations.\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         permissions granted.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void run(Properties propertyFile) throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            Configure.setUp(this, propertyFile);\n-            test(this.name() + \" \" + propertyFile.getProperty(\"test.name\"), propertyFile);\n-        }\n+    \/\/ We will test the simple pattern\n+    public static void run(Properties propertyFile) throws Exception {\n+        setUp(propertyFile);\n+        test(propertyFile.getProperty(\"test.name\"), propertyFile);\n@@ -105,7 +81,0 @@\n-        if (args == null || args.length == 0) {\n-            args = new String[] {\n-                TestCase.UNSECURE.name(),\n-                TestCase.SECURE.name(),\n-            };\n-        }\n-\n@@ -143,5 +112,2 @@\n-            for (String testName : args) {\n-                for (Properties propertyFile : properties) {\n-                    TestCase test = TestCase.valueOf(testName);\n-                    test.run(propertyFile);\n-                }\n+            for (Properties propertyFile : properties) {\n+                run(propertyFile);\n@@ -151,15 +117,10 @@\n-            Configure.doPrivileged(() -> {\n-                for(File log : files) {\n-                    try {\n-                        final boolean isLockFile = log.getName().endsWith(\".lck\");\n-                        \/\/ lock file should already be deleted, except if the\n-                        \/\/ test failed in exception.\n-                        \/\/ log file should all be present, except if the test\n-                        \/\/ failed in exception.\n-                        if (log.exists()) {\n-                            if (!isLockFile) {\n-                                System.out.println(\"deleting \"+log.toString());\n-                            } else {\n-                                System.err.println(\"deleting lock file \"+log.toString());\n-                            }\n-                            log.delete();\n+            for(File log : files) {\n+                try {\n+                    final boolean isLockFile = log.getName().endsWith(\".lck\");\n+                    \/\/ lock file should already be deleted, except if the\n+                    \/\/ test failed in exception.\n+                    \/\/ log file should all be present, except if the test\n+                    \/\/ failed in exception.\n+                    if (log.exists()) {\n+                        if (!isLockFile) {\n+                            System.out.println(\"deleting \"+log.toString());\n@@ -167,3 +128,6 @@\n-                            if (!isLockFile) {\n-                                System.err.println(log.toString() + \": not found.\");\n-                            }\n+                            System.err.println(\"deleting lock file \"+log.toString());\n+                        }\n+                        log.delete();\n+                    } else {\n+                        if (!isLockFile) {\n+                            System.err.println(log.toString() + \": not found.\");\n@@ -171,3 +135,0 @@\n-                    } catch (Throwable t) {\n-                        \/\/ should not happen\n-                        t.printStackTrace();\n@@ -175,0 +136,3 @@\n+                } catch (Throwable t) {\n+                    \/\/ should not happen\n+                    t.printStackTrace();\n@@ -176,1 +140,1 @@\n-            });\n+            }\n@@ -180,46 +144,8 @@\n-    static class Configure {\n-        static Policy policy = null;\n-        static final AtomicBoolean allowAll = new AtomicBoolean(false);\n-        static void setUp(TestCase test, Properties propertyFile) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE, allowAll);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    new InternalError(\"No such testcase: \" + test);\n-            }\n-            doPrivileged(() -> {\n-                try {\n-                    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n-                    propertyFile.store(bytes, propertyFile.getProperty(\"test.name\"));\n-                    ByteArrayInputStream bais = new ByteArrayInputStream(bytes.toByteArray());\n-                    LogManager.getLogManager().readConfiguration(bais);\n-                } catch (IOException ex) {\n-                    throw new RuntimeException(ex);\n-                }\n-            });\n-        }\n-        static void doPrivileged(Runnable run) {\n-            allowAll.set(true);\n-            try {\n-                run.run();\n-            } finally {\n-                allowAll.set(false);\n-            }\n+    static void setUp(Properties propertyFile) {\n+        try {\n+            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+            propertyFile.store(bytes, propertyFile.getProperty(\"test.name\"));\n+            ByteArrayInputStream bais = new ByteArrayInputStream(bytes.toByteArray());\n+            LogManager.getLogManager().readConfiguration(bais);\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n@@ -240,1 +166,1 @@\n-        System.out.println(\"Success for \" + name);\n+        System.out.println(\"Success for: \" + name);\n@@ -242,76 +168,0 @@\n-\n-\n-    static final class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final AtomicBoolean allowAll;\n-        public SimplePolicy(TestCase test, AtomicBoolean allowAll) {\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            permissions.add(new LoggingPermission(\"control\", null)); \/\/ needed by new FileHandler()\n-            permissions.add(new FilePermission(\"<<ALL FILES>>\", \"read\")); \/\/ needed by new FileHandler()\n-            permissions.add(new FilePermission(logFile, \"write,delete\")); \/\/ needed by new FileHandler()\n-            permissions.add(new FilePermission(logFile+\".lck\", \"write,delete\")); \/\/ needed by FileHandler.close()\n-            permissions.add(new FilePermission(logFile+\".1\", \"write,delete\")); \/\/ needed by new FileHandler()\n-            permissions.add(new FilePermission(logFile+\".1.lck\", \"write,delete\")); \/\/ needed by FileHandler.close()\n-            permissions.add(new FilePermission(tmpLogFile, \"write,delete\")); \/\/ needed by new FileHandler()\n-            permissions.add(new FilePermission(tmpLogFile+\".lck\", \"write,delete\")); \/\/ needed by FileHandler.close()\n-            permissions.add(new FilePermission(tmpLogFile+\".1\", \"write,delete\")); \/\/ needed by new FileHandler()\n-            permissions.add(new FilePermission(tmpLogFile+\".1.lck\", \"write,delete\")); \/\/ needed by FileHandler.close()\n-            permissions.add(new FilePermission(userDir, \"write\")); \/\/ needed by new FileHandler()\n-            permissions.add(new FilePermission(tmpDir, \"write\")); \/\/ needed by new FileHandler()\n-            permissions.add(new PropertyPermission(\"user.dir\", \"read\"));\n-            permissions.add(new PropertyPermission(\"java.io.tmpdir\", \"read\"));\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get()) return allPermissions.implies(permission);\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(allowAll.get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(allowAll.get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/FileHandlerPath.java","additions":37,"deletions":187,"binary":false,"changes":224,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -37,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -41,1 +33,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -49,2 +40,1 @@\n- * @run main\/othervm FileHandlerPatternExceptions UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow FileHandlerPatternExceptions SECURE\n+ * @run main\/othervm FileHandlerPatternExceptions\n@@ -56,13 +46,4 @@\n-    \/**\n-     * We will test null\/empty pattern in two configurations.\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         permissions granted.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void run(Properties propertyFile) throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            Configure.setUp(this, propertyFile);\n-            test(this.name() + \" \" + propertyFile.getProperty(\"test.name\"));\n-        }\n+    \/\/ We will test null\/empty pattern\n+    public static void run(Properties propertyFile) throws Exception {\n+        setUp(propertyFile);\n+        test(propertyFile.getProperty(\"test.name\"));\n@@ -94,8 +75,0 @@\n-\n-        if (args == null || args.length == 0) {\n-            args = new String[] {\n-                TestCase.UNSECURE.name(),\n-                TestCase.SECURE.name(),\n-            };\n-        }\n-\n@@ -103,5 +76,2 @@\n-            for (String testName : args) {\n-                for (Properties propertyFile : properties) {\n-                    TestCase test = TestCase.valueOf(testName);\n-                    test.run(propertyFile);\n-                }\n+            for (Properties propertyFile : properties) {\n+                run(propertyFile);\n@@ -111,18 +81,16 @@\n-                Configure.doPrivileged(() -> {\n-                    \/\/ cleanup - delete files that have been created\n-                    try {\n-                        Files.list(Paths.get(userDir))\n-                            .filter((f) -> f.toString().contains(PREFIX))\n-                            .forEach((f) -> {\n-                                try {\n-                                    System.out.println(\"deleting \" + f);\n-                                    Files.delete(f);\n-                                } catch(Throwable t) {\n-                                    System.err.println(\"Failed to delete \" + f + \": \" + t);\n-                                }\n-                            });\n-                    } catch(Throwable t) {\n-                        System.err.println(\"Cleanup failed to list files: \" + t);\n-                        t.printStackTrace();\n-                    }\n-                });\n+                \/\/ cleanup - delete files that have been created\n+                try {\n+                    Files.list(Paths.get(userDir))\n+                        .filter((f) -> f.toString().contains(PREFIX))\n+                        .forEach((f) -> {\n+                            try {\n+                                System.out.println(\"deleting \" + f);\n+                                Files.delete(f);\n+                            } catch(Throwable t) {\n+                                System.err.println(\"Failed to delete \" + f + \": \" + t);\n+                            }\n+                        });\n+                } catch(Throwable t) {\n+                    System.err.println(\"Cleanup failed to list files: \" + t);\n+                    t.printStackTrace();\n+                }\n@@ -133,46 +101,8 @@\n-    static class Configure {\n-        static Policy policy = null;\n-        static final AtomicBoolean allowAll = new AtomicBoolean(false);\n-        static void setUp(TestCase test, Properties propertyFile) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE, allowAll);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    new InternalError(\"No such testcase: \" + test);\n-            }\n-            doPrivileged(() -> {\n-                try {\n-                    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n-                    propertyFile.store(bytes, propertyFile.getProperty(\"test.name\"));\n-                    ByteArrayInputStream bais = new ByteArrayInputStream(bytes.toByteArray());\n-                    LogManager.getLogManager().readConfiguration(bais);\n-                } catch (IOException ex) {\n-                    throw new RuntimeException(ex);\n-                }\n-            });\n-        }\n-        static void doPrivileged(Runnable run) {\n-            allowAll.set(true);\n-            try {\n-                run.run();\n-            } finally {\n-                allowAll.set(false);\n-            }\n+    static void setUp(Properties propertyFile) {\n+        try {\n+            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+            propertyFile.store(bytes, propertyFile.getProperty(\"test.name\"));\n+            ByteArrayInputStream bais = new ByteArrayInputStream(bytes.toByteArray());\n+            LogManager.getLogManager().readConfiguration(bais);\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n@@ -248,4 +178,1 @@\n-        final Class<? extends Exception> expectedException =\n-                System.getSecurityManager() != null ? AccessControlException.class : null;\n-\n-        if (userDirWritable || expectedException != null) {\n+        if (userDirWritable) {\n@@ -256,1 +183,1 @@\n-            checkException(expectedException,\n+            checkException(null,\n@@ -258,1 +185,1 @@\n-            checkException(expectedException,\n+            checkException(null,\n@@ -260,1 +187,1 @@\n-            checkException(expectedException,\n+            checkException(null,\n@@ -262,1 +189,1 @@\n-            checkException(expectedException,\n+            checkException(null,\n@@ -265,0 +192,1 @@\n+        System.out.println(\"Success for: \" + name);\n@@ -266,68 +194,0 @@\n-\n-\n-    static final class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final AtomicBoolean allowAll;\n-        public SimplePolicy(TestCase test, AtomicBoolean allowAll) {\n-            this.allowAll = allowAll;\n-            \/\/ we don't actually need any permission to create our\n-            \/\/ FileHandlers because we're passing invalid parameters\n-            \/\/ which will make the creation fail...\n-            permissions = new Permissions();\n-\n-            \/\/ these are used for configuring the test itself...\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get()) return allPermissions.implies(permission);\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(allowAll.get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(allowAll.get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/FileHandlerPatternExceptions.java","additions":38,"deletions":178,"binary":false,"changes":216,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n- * @run main\/othervm -Djava.security.manager=allow HandlersConfigTest default\n- * @run main\/othervm -Djava.security.manager=allow HandlersConfigTest configured\n+ * @run main\/othervm HandlersConfigTest default\n+ * @run main\/othervm HandlersConfigTest configured\n@@ -103,8 +103,0 @@\n-        \/\/ activate security\n-        System.setSecurityManager(new SecurityManager() {\n-            @Override\n-            public void checkConnect(String host, int port) {\n-                \/\/ allow socket connections\n-            }\n-        });\n-\n","filename":"test\/jdk\/java\/util\/logging\/HandlersConfigTest.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.io.FilePermission;\n@@ -32,6 +31,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -40,1 +33,0 @@\n-import java.util.Enumeration;\n@@ -52,1 +44,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -59,2 +50,1 @@\n- * @run main\/othervm ParentLoggerWithHandlerGC UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow ParentLoggerWithHandlerGC SECURE\n+ * @run main\/othervm ParentLoggerWithHandlerGC\n@@ -66,14 +56,4 @@\n-    \/**\n-     * We will test the handling of abstract logger nodes with file handlers in\n-     * two configurations:\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         permissions granted.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void run(Properties propertyFile) throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            Configure.setUp(this, propertyFile);\n-            test(this.name() + \" \" + propertyFile.getProperty(\"test.name\"), propertyFile);\n-        }\n+    \/\/ We will test the handling of abstract logger nodes with file handlers\n+    public static void run(Properties propertyFile) throws Exception {\n+        Configure.setUp(propertyFile);\n+        test(propertyFile.getProperty(\"test.name\"), propertyFile);\n@@ -82,1 +62,0 @@\n-\n@@ -130,8 +109,0 @@\n-\n-        if (args == null || args.length == 0) {\n-            args = new String[] {\n-                TestCase.UNSECURE.name(),\n-                TestCase.SECURE.name(),\n-            };\n-        }\n-\n@@ -139,5 +110,2 @@\n-            for (String testName : args) {\n-                for (Properties propertyFile : properties) {\n-                    TestCase test = TestCase.valueOf(testName);\n-                    test.run(propertyFile);\n-                }\n+            for (Properties propertyFile : properties) {\n+                run(propertyFile);\n@@ -170,27 +138,1 @@\n-        static Policy policy = null;\n-        static final AtomicBoolean allowAll = new AtomicBoolean(false);\n-        static void setUp(TestCase test, Properties propertyFile) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE, allowAll);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    new InternalError(\"No such testcase: \" + test);\n-            }\n+        static void setUp(Properties propertyFile) {\n@@ -209,6 +151,1 @@\n-            allowAll.set(true);\n-            try {\n-                run.run();\n-            } finally {\n-                allowAll.set(false);\n-            }\n+            run.run();\n@@ -217,6 +154,1 @@\n-            allowAll.set(true);\n-            try {\n-                return call.call();\n-            } finally {\n-                allowAll.set(false);\n-            }\n+            return call.call();\n@@ -452,68 +384,0 @@\n-\n-\n-    static final class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final AtomicBoolean allowAll;\n-        public SimplePolicy(TestCase test, AtomicBoolean allowAll) {\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            permissions.add(new LoggingPermission(\"control\", null));\n-            permissions.add(new FilePermission(PREFIX+\".lck\", \"read,write,delete\"));\n-            permissions.add(new FilePermission(PREFIX, \"read,write\"));\n-\n-            \/\/ these are used for configuring the test itself...\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get()) return allPermissions.implies(permission);\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(allowAll.get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(allowAll.get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/ParentLoggerWithHandlerGC.java","additions":11,"deletions":147,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import java.security.Permission;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -51,1 +48,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestConfigurationLock\n+ * @run main\/othervm TestConfigurationLock\n@@ -94,2 +91,0 @@\n-     * This test will run both with and without a security manager.\n-     *\n@@ -106,5 +101,1 @@\n-     * This procedure is done twice: once without a security manager and once\n-     * again with a security manager - which means the test takes ~8secs to\n-     * run.\n-     *\n-     * Note that 8sec may not be enough to detect issues if there are some.\n+     * Note that 4sec may not be enough to detect issues if there are some.\n@@ -124,15 +115,0 @@\n-        \/\/ test without security\n-        System.out.println(\"No security\");\n-        test();\n-\n-        \/\/ test with security\n-        System.out.println(\"\\nWith security\");\n-        Policy.setPolicy(new Policy() {\n-            @Override\n-            public boolean implies(ProtectionDomain domain, Permission permission) {\n-                if (super.implies(domain, permission)) return true;\n-                \/\/ System.out.println(\"Granting \" + permission);\n-                return true; \/\/ all permissions\n-            }\n-        });\n-        System.setSecurityManager(new SecurityManager());\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/TestConfigurationLock.java","additions":3,"deletions":27,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,4 +52,0 @@\n- * @run main\/othervm\/java.security.policy==test.policy -Dlogging.properties=badlogging.properties -Dclz=1custom.DotHandler BadRootLoggerHandlers CUSTOM\n- * @run main\/othervm\/java.security.policy==test.policy  -Dlogging.properties=badlogging.properties -Dclz=1custom.DotHandler BadRootLoggerHandlers DEFAULT\n- * @run main\/othervm\/java.security.policy==test.policy  -Dlogging.properties=badglobal.properties -Dclz=1custom.GlobalHandler BadRootLoggerHandlers CUSTOM\n- * @run main\/othervm\/java.security.policy==test.policy  -Dlogging.properties=badglobal.properties -Dclz=1custom.GlobalHandler BadRootLoggerHandlers DEFAULT\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/rootLoggerHandlers\/BadRootLoggerHandlers.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.Collections;\n@@ -42,1 +41,0 @@\n- * @run main\/othervm\/java.security.policy==test.policy RootLoggerHandlers\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/rootLoggerHandlers\/RootLoggerHandlers.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,13 +0,0 @@\n-grant {\n-    \/\/ permissions for RootLoggerHandlers\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-    permission java.util.PropertyPermission \"java.util.logging.config.file\", \"write\";\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write,delete\";\n-    permission java.util.logging.LoggingPermission \"control\";\n-\n-    \/\/ additional permissions for BadRootLoggerHandlers\n-    permission java.util.PropertyPermission \"java.util.logging.manager\", \"write\";\n-    permission java.lang.RuntimePermission \"setIO\";\n-    permission java.lang.RuntimePermission \"shutdownHooks\";\n-    permission java.lang.RuntimePermission \"setContextClassLoader\";\n-};\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/rootLoggerHandlers\/test.policy","additions":0,"deletions":13,"binary":false,"changes":13,"status":"deleted"},{"patch":"@@ -25,1 +25,0 @@\n-import java.io.FilePermission;\n@@ -32,6 +31,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -40,1 +33,0 @@\n-import java.util.Enumeration;\n@@ -51,1 +43,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -61,2 +52,1 @@\n- * @run main\/othervm HandlersOnComplexResetUpdate UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow HandlersOnComplexResetUpdate SECURE\n+ * @run main\/othervm HandlersOnComplexResetUpdate\n@@ -67,14 +57,4 @@\n-    \/**\n-     * We will test the handling of abstract logger nodes with file handlers in\n-     * two configurations:\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         permissions granted.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void run(List<Properties> properties) throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            Configure.setUp(this, properties.get(0));\n-            test(this.name(), properties);\n-        }\n+    \/\/ We will test the handling of abstract logger nodes with file handlers\n+    public static void run(List<Properties> properties) throws Exception {\n+        Configure.setUp(properties.get(0));\n+        test(properties);\n@@ -194,1 +174,0 @@\n-     * @param name\n@@ -198,1 +177,1 @@\n-    static void test(String name, List<Properties> properties)\n+    static void test(List<Properties> properties)\n@@ -201,1 +180,0 @@\n-        System.out.println(\"\\nTesting: \" + name);\n@@ -367,8 +345,0 @@\n-\n-        if (args == null || args.length == 0) {\n-            args = new String[] {\n-                TestCase.UNSECURE.name(),\n-                TestCase.SECURE.name(),\n-            };\n-        }\n-\n@@ -376,4 +346,1 @@\n-            for (String testName : args) {\n-                TestCase test = TestCase.valueOf(testName);\n-                test.run(properties);\n-            }\n+            run(properties);\n@@ -405,32 +372,1 @@\n-        static Policy policy = null;\n-        static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-            @Override\n-            protected AtomicBoolean initialValue() {\n-                return  new AtomicBoolean(false);\n-            }\n-        };\n-        static void setUp(TestCase test, Properties propertyFile) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE, allowAll);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    new InternalError(\"No such testcase: \" + test);\n-            }\n+        static void setUp(Properties propertyFile) {\n@@ -457,6 +393,1 @@\n-            final boolean old = allowAll.get().getAndSet(true);\n-            try {\n-                run.run();\n-            } finally {\n-                allowAll.get().set(old);\n-            }\n+            run.run();\n@@ -465,6 +396,1 @@\n-            final boolean old = allowAll.get().getAndSet(true);\n-            try {\n-                return call.call();\n-            } finally {\n-                allowAll.get().set(old);\n-            }\n+            return call.call();\n@@ -494,67 +420,0 @@\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowAll; \/\/ actually: this should be in a thread locale\n-        public SimplePolicy(TestCase test, ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            permissions.add(new LoggingPermission(\"control\", null));\n-            permissions.add(new FilePermission(PREFIX+\".lck\", \"read,write,delete\"));\n-            permissions.add(new FilePermission(PREFIX, \"read,write\"));\n-\n-            \/\/ these are used for configuring the test itself...\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get().get()) return allPermissions.implies(permission);\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/updateConfiguration\/HandlersOnComplexResetUpdate.java","additions":10,"deletions":151,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.io.FilePermission;\n@@ -32,6 +31,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -40,1 +33,0 @@\n-import java.util.Enumeration;\n@@ -51,1 +43,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -61,2 +52,1 @@\n- * @run main\/othervm HandlersOnComplexUpdate UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow HandlersOnComplexUpdate SECURE\n+ * @run main\/othervm HandlersOnComplexUpdate\n@@ -67,14 +57,4 @@\n-    \/**\n-     * We will test the handling of abstract logger nodes with file handlers in\n-     * two configurations:\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         permissions granted.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void run(List<Properties> properties) throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            Configure.setUp(this, properties.get(0));\n-            test(this.name(), properties);\n-        }\n+    \/\/ We will test the handling of abstract logger nodes with file handlers\n+    public static void run(List<Properties> properties) throws Exception {\n+        Configure.setUp(properties.get(0));\n+        test(properties);\n@@ -194,1 +174,0 @@\n-     * @param name\n@@ -198,1 +177,1 @@\n-    static void test(String name, List<Properties> properties)\n+    static void test(List<Properties> properties)\n@@ -201,1 +180,0 @@\n-        System.out.println(\"\\nTesting: \" + name);\n@@ -355,8 +333,0 @@\n-\n-        if (args == null || args.length == 0) {\n-            args = new String[] {\n-                TestCase.UNSECURE.name(),\n-                TestCase.SECURE.name(),\n-            };\n-        }\n-\n@@ -364,4 +334,1 @@\n-            for (String testName : args) {\n-                TestCase test = TestCase.valueOf(testName);\n-                test.run(properties);\n-            }\n+            run(properties);\n@@ -393,32 +360,1 @@\n-        static Policy policy = null;\n-        static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-            @Override\n-            protected AtomicBoolean initialValue() {\n-                return  new AtomicBoolean(false);\n-            }\n-        };\n-        static void setUp(TestCase test, Properties propertyFile) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE, allowAll);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    new InternalError(\"No such testcase: \" + test);\n-            }\n+        static void setUp(Properties propertyFile) {\n@@ -456,6 +392,1 @@\n-            final boolean old = allowAll.get().getAndSet(true);\n-            try {\n-                run.run();\n-            } finally {\n-                allowAll.get().set(old);\n-            }\n+            run.run();\n@@ -464,6 +395,1 @@\n-            final boolean old = allowAll.get().getAndSet(true);\n-            try {\n-                return call.call();\n-            } finally {\n-                allowAll.get().set(old);\n-            }\n+            return call.call();\n@@ -493,67 +419,0 @@\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowAll; \/\/ actually: this should be in a thread locale\n-        public SimplePolicy(TestCase test, ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            permissions.add(new LoggingPermission(\"control\", null));\n-            permissions.add(new FilePermission(PREFIX+\".lck\", \"read,write,delete\"));\n-            permissions.add(new FilePermission(PREFIX, \"read,write\"));\n-\n-            \/\/ these are used for configuring the test itself...\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get().get()) return allPermissions.implies(permission);\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/updateConfiguration\/HandlersOnComplexUpdate.java","additions":10,"deletions":151,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,6 +29,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -36,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -40,1 +33,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -49,1 +41,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -55,2 +46,1 @@\n- * @run main\/othervm SimpleUpdateConfigWithInputStreamTest UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow SimpleUpdateConfigWithInputStreamTest SECURE\n+ * @run main\/othervm SimpleUpdateConfigWithInputStreamTest\n@@ -60,1 +50,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n@@ -62,25 +51,14 @@\n-    \/**\n-     * We will test updateConfiguration in\n-     * two configurations:\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         permissions granted.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void execute(Runnable run) {\n-            System.out.println(\"Running test case: \" + name());\n-            try {\n-               Configure.setUp(this);\n-               Configure.doPrivileged(run, SimplePolicy.allowControl);\n-            } finally {\n-               Configure.doPrivileged(() -> {\n-                   try {\n-                       setSystemProperty(\"java.util.logging.config.file\", null);\n-                       LogManager.getLogManager().readConfiguration();\n-                       System.gc();\n-                   } catch (Exception x) {\n-                       throw new RuntimeException(x);\n-                   }\n-               }, SimplePolicy.allowAll);\n-            }\n+    \/\/ We will test updateConfiguration\n+    public static void execute(Runnable run) {\n+        try {\n+           Configure.doPrivileged(run);\n+        } finally {\n+           Configure.doPrivileged(() -> {\n+               try {\n+                   setSystemProperty(\"java.util.logging.config.file\", null);\n+                   LogManager.getLogManager().readConfiguration();\n+                   System.gc();\n+               } catch (Exception x) {\n+                   throw new RuntimeException(x);\n+               }\n+           });\n@@ -122,1 +100,1 @@\n-        }, SimplePolicy.allowAll);\n+        });\n@@ -132,1 +110,1 @@\n-        }, SimplePolicy.allowAll);\n+        });\n@@ -455,6 +433,1 @@\n-        if (args == null || args.length == 0) {\n-            args = new String[] { \"UNSECURE\", \"SECURE\" };\n-        }\n-        for (String test : args) {\n-            TestCase.valueOf(test).execute(SimpleUpdateConfigWithInputStreamTest::testUpdateConfiguration);\n-        }\n+        execute(SimpleUpdateConfigWithInputStreamTest::testUpdateConfiguration);\n@@ -464,27 +437,0 @@\n-        static Policy policy = null;\n-        static void setUp(TestCase test) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    throw new InternalError(\"No such testcase: \" + test);\n-            }\n-        }\n@@ -504,7 +450,2 @@\n-        static void doPrivileged(Runnable run, ThreadLocal<AtomicBoolean> granter) {\n-            final boolean old = granter.get().getAndSet(true);\n-            try {\n-                run.run();\n-            } finally {\n-                granter.get().set(old);\n-            }\n+        static void doPrivileged(Runnable run) {\n+            run.run();\n@@ -512,8 +453,2 @@\n-        static <T> T callPrivileged(Callable<T> call,\n-                ThreadLocal<AtomicBoolean> granter) throws Exception {\n-            final boolean old = granter.get().getAndSet(true);\n-            try {\n-                return call.call();\n-            } finally {\n-                granter.get().set(old);\n-            }\n+        static <T> T callPrivileged(Callable<T> call) throws Exception {\n+            return call.call();\n@@ -599,88 +534,0 @@\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        final Permissions basic;\n-        final Permissions control;\n-        final Permissions all;\n-        public final static ThreadLocal<AtomicBoolean> allowAll =\n-                new ThreadLocal<AtomicBoolean>() {\n-            @Override\n-            protected AtomicBoolean initialValue() {\n-                return new AtomicBoolean();\n-            }\n-        };\n-        public final static ThreadLocal<AtomicBoolean> allowControl =\n-                new ThreadLocal<AtomicBoolean>() {\n-            @Override\n-            protected AtomicBoolean initialValue() {\n-                return new AtomicBoolean();\n-            }\n-        };\n-        public SimplePolicy(TestCase test) {\n-            basic = new Permissions();\n-            control = new Permissions();\n-            control.add(new LoggingPermission(\"control\", null));\n-\n-            \/\/ these are used for configuring the test itself...\n-            all = new Permissions();\n-            all.add(new java.security.AllPermission());\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions(domain).implies(permission) ||\n-                   DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        public PermissionCollection permissions() {\n-            PermissionsBuilder builder = new PermissionsBuilder();\n-            if (allowAll.get().get()) {\n-                builder.addAll(all);\n-            } else {\n-                builder.addAll(basic);\n-                if (allowControl.get().get()) {\n-                    builder.addAll(control);\n-                }\n-            }\n-            return builder.toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return permissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return permissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/updateConfiguration\/SimpleUpdateConfigWithInputStreamTest.java","additions":23,"deletions":176,"binary":false,"changes":199,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import java.io.FilePermission;\n@@ -31,6 +30,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -38,1 +31,0 @@\n-import java.util.Enumeration;\n@@ -41,1 +33,0 @@\n-import java.util.PropertyPermission;\n@@ -43,1 +34,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -52,1 +42,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -58,2 +47,1 @@\n- * @run main\/othervm SimpleUpdateConfigurationTest UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow SimpleUpdateConfigurationTest SECURE\n+ * @run main\/othervm SimpleUpdateConfigurationTest\n@@ -64,25 +52,14 @@\n-    \/**\n-     * We will test updateConfiguration in\n-     * two configurations:\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         permissions granted.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void execute(Runnable run) {\n-            System.out.println(\"Running test case: \" + name());\n-            try {\n-               Configure.setUp(this);\n-               Configure.doPrivileged(run, SimplePolicy.allowControl);\n-            } finally {\n-               Configure.doPrivileged(() -> {\n-                   try {\n-                       setSystemProperty(\"java.util.logging.config.file\", null);\n-                       LogManager.getLogManager().readConfiguration();\n-                       System.gc();\n-                   } catch (Exception x) {\n-                       throw new RuntimeException(x);\n-                   }\n-               }, SimplePolicy.allowAll);\n-            }\n+    \/\/ We will test updateConfiguration\n+    public static void execute(Runnable run) {\n+        try {\n+           Configure.doPrivileged(run);\n+        } finally {\n+           Configure.doPrivileged(() -> {\n+               try {\n+                   setSystemProperty(\"java.util.logging.config.file\", null);\n+                   LogManager.getLogManager().readConfiguration();\n+                   System.gc();\n+               } catch (Exception x) {\n+                   throw new RuntimeException(x);\n+               }\n+           });\n@@ -124,1 +101,1 @@\n-        }, SimplePolicy.allowAll);\n+        });\n@@ -134,1 +111,1 @@\n-        }, SimplePolicy.allowAll);\n+        });\n@@ -475,1 +452,1 @@\n-                }, SimplePolicy.allowAll);\n+                });\n@@ -481,6 +458,1 @@\n-        if (args == null || args.length == 0) {\n-            args = new String[] { \"UNSECURE\", \"SECURE\" };\n-        }\n-        for (String test : args) {\n-            TestCase.valueOf(test).execute(SimpleUpdateConfigurationTest::testUpdateConfiguration);\n-        }\n+        execute(SimpleUpdateConfigurationTest::testUpdateConfiguration);\n@@ -490,28 +462,0 @@\n-        static Policy policy = null;\n-        static void setUp(TestCase test) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    throw new InternalError(\"No such testcase: \" + test);\n-            }\n-        }\n-\n@@ -530,7 +474,2 @@\n-        static void doPrivileged(Runnable run, ThreadLocal<AtomicBoolean> granter) {\n-            final boolean old = granter.get().getAndSet(true);\n-            try {\n-                run.run();\n-            } finally {\n-                granter.get().set(old);\n-            }\n+        static void doPrivileged(Runnable run) {\n+            run.run();\n@@ -538,8 +477,2 @@\n-        static <T> T callPrivileged(Callable<T> call,\n-                ThreadLocal<AtomicBoolean> granter) throws Exception {\n-            final boolean old = granter.get().getAndSet(true);\n-            try {\n-                return call.call();\n-            } finally {\n-                granter.get().set(old);\n-            }\n+        static <T> T callPrivileged(Callable<T> call) throws Exception {\n+            return call.call();\n@@ -625,97 +558,0 @@\n-\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions basic;\n-        final Permissions control;\n-        final Permissions all;\n-        public final static ThreadLocal<AtomicBoolean> allowAll =\n-                new ThreadLocal<AtomicBoolean>() {\n-            @Override\n-            protected AtomicBoolean initialValue() {\n-                return new AtomicBoolean();\n-            }\n-        };\n-        public final static ThreadLocal<AtomicBoolean> allowControl =\n-                new ThreadLocal<AtomicBoolean>() {\n-            @Override\n-            protected AtomicBoolean initialValue() {\n-                return new AtomicBoolean();\n-            }\n-        };\n-        public SimplePolicy(TestCase test) {\n-            basic = new Permissions();\n-            control = new Permissions();\n-            control.add(new LoggingPermission(\"control\", null));\n-\n-            \/\/ These permissions are required to call updateConfiguration(Function)\n-            control.add(new PropertyPermission(\"java.util.logging.config.file\", \"read\"));\n-            control.add(new PropertyPermission(\"java.home\", \"read\"));\n-            control.add(new FilePermission(\n-                    Paths.get(System.getProperty(\"user.dir\", \".\"),\"-\").toString(), \"read\"));\n-            control.add(new FilePermission(\n-                    Paths.get(System.getProperty(\"java.home\"),\"conf\",\"-\").toString(), \"read\"));\n-\n-            \/\/ these are used for configuring the test itself...\n-            all = new Permissions();\n-            all.add(new java.security.AllPermission());\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return getPermissions(domain).implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        public PermissionCollection permissions() {\n-            PermissionsBuilder builder = new PermissionsBuilder();\n-            if (allowAll.get().get()) {\n-                builder.addAll(all);\n-            } else {\n-                builder.addAll(basic);\n-                if (allowControl.get().get()) {\n-                    builder.addAll(control);\n-                }\n-            }\n-            return builder.toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return permissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return permissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/updateConfiguration\/SimpleUpdateConfigurationTest.java","additions":24,"deletions":188,"binary":false,"changes":212,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.io.FilePermission;\n@@ -33,6 +32,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -41,1 +34,0 @@\n-import java.util.Enumeration;\n@@ -56,1 +48,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -65,2 +56,1 @@\n- * @run main\/othervm UpdateConfigurationTest UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow UpdateConfigurationTest SECURE\n+ * @run main\/othervm UpdateConfigurationTest\n@@ -71,17 +61,3 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-    \/**\n-     * We will test the handling of abstract logger nodes with file handlers in\n-     * two configurations:\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         permissions granted.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE;\n-        public void run(Properties propertyFile, boolean last) throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            Configure.setUp(this);\n-            test(this.name() + \" \" + propertyFile.getProperty(\"test.name\"),\n-                    propertyFile, last);\n-        }\n+    \/\/ We will test the handling of abstract logger nodes with file handlers\n+    public static void run(Properties propertyFile, boolean last) throws Exception {\n+        test(propertyFile.getProperty(\"test.name\"), propertyFile, last);\n@@ -380,8 +356,0 @@\n-\n-        if (args == null || args.length == 0) {\n-            args = new String[] {\n-                TestCase.UNSECURE.name(),\n-                TestCase.SECURE.name(),\n-            };\n-        }\n-\n@@ -389,6 +357,3 @@\n-            for (String testName : args) {\n-                TestCase test = TestCase.valueOf(testName);\n-                for (int i=0; i<properties.size();i++) {\n-                    Properties propertyFile = properties.get(i);\n-                    test.run(propertyFile, i == properties.size() - 1);\n-                }\n+            for (int i=0; i<properties.size();i++) {\n+                Properties propertyFile = properties.get(i);\n+                run(propertyFile, i == properties.size() - 1);\n@@ -421,34 +386,0 @@\n-        static Policy policy = null;\n-        static final ThreadLocal<AtomicBoolean> allowAll = new ThreadLocal<AtomicBoolean>() {\n-            @Override\n-            protected AtomicBoolean initialValue() {\n-                return  new AtomicBoolean(false);\n-            }\n-        };\n-        static void setUp(TestCase test) {\n-            switch (test) {\n-                case SECURE:\n-                    if (policy == null && System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    } else if (policy == null) {\n-                        policy = new SimplePolicy(TestCase.SECURE, allowAll);\n-                        Policy.setPolicy(policy);\n-                        System.setSecurityManager(new SecurityManager());\n-                    }\n-                    if (System.getSecurityManager() == null) {\n-                        throw new IllegalStateException(\"No SecurityManager.\");\n-                    }\n-                    if (policy == null) {\n-                        throw new IllegalStateException(\"policy not configured\");\n-                    }\n-                    break;\n-                case UNSECURE:\n-                    if (System.getSecurityManager() != null) {\n-                        throw new IllegalStateException(\"SecurityManager already set\");\n-                    }\n-                    break;\n-                default:\n-                    new InternalError(\"No such testcase: \" + test);\n-            }\n-        }\n-\n@@ -468,1 +399,1 @@\n-            final boolean old = allowAll.get().getAndSet(true);\n+            Properties before = getProperties();\n@@ -470,10 +401,1 @@\n-                Properties before = getProperties();\n-                try {\n-                    run.run();\n-                } finally {\n-                    Properties after = getProperties();\n-                    if (before != after) {\n-                        previous = before;\n-                        current = after;\n-                    }\n-                }\n+                run.run();\n@@ -481,1 +403,5 @@\n-                allowAll.get().set(old);\n+                Properties after = getProperties();\n+                if (before != after) {\n+                    previous = before;\n+                    current = after;\n+                }\n@@ -485,1 +411,1 @@\n-            final boolean old = allowAll.get().getAndSet(true);\n+            Properties before = getProperties();\n@@ -487,10 +413,1 @@\n-                Properties before = getProperties();\n-                try {\n-                    return call.call();\n-                } finally {\n-                    Properties after = getProperties();\n-                    if (before != after) {\n-                        previous = before;\n-                        current = after;\n-                    }\n-                }\n+                return call.call();\n@@ -498,1 +415,5 @@\n-                allowAll.get().set(old);\n+                Properties after = getProperties();\n+                if (before != after) {\n+                    previous = before;\n+                    current = after;\n+                }\n@@ -551,65 +472,0 @@\n-    final static class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        final Permissions permissions;\n-        final Permissions allPermissions;\n-        final ThreadLocal<AtomicBoolean> allowAll; \/\/ actually: this should be in a thread locale\n-        public SimplePolicy(TestCase test, ThreadLocal<AtomicBoolean> allowAll) {\n-            this.allowAll = allowAll;\n-            permissions = new Permissions();\n-            permissions.add(new LoggingPermission(\"control\", null));\n-            permissions.add(new FilePermission(PREFIX+\".lck\", \"read,write,delete\"));\n-            permissions.add(new FilePermission(PREFIX, \"read,write\"));\n-\n-            \/\/ these are used for configuring the test itself...\n-            allPermissions = new Permissions();\n-            allPermissions.add(new java.security.AllPermission());\n-\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (allowAll.get().get()) return allPermissions.implies(permission);\n-            return permissions.implies(permission) ||\n-                   DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(allowAll.get().get()\n-                    ? allPermissions : permissions).toPermissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/updateConfiguration\/UpdateConfigurationTest.java","additions":22,"deletions":166,"binary":false,"changes":188,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,4 +24,0 @@\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -30,3 +26,0 @@\n-import java.util.logging.LoggingPermission;\n-\n-\n@@ -41,2 +34,1 @@\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestRootLoggerLevel\n- * @run main\/othervm -Dtest.security=off TestRootLoggerLevel\n+ * @run main\/othervm TestRootLoggerLevel\n@@ -70,9 +62,0 @@\n-        if (\"on\".equals(System.getProperty(\"test.security\",\"on\"))) {\n-            System.out.println(\"*** SecurityManager is ON\");\n-            Policy.setPolicy(new SimplePolicy());\n-\n-            System.setSecurityManager(new SecurityManager());\n-        } else {\n-            System.out.println(\"*** SecurityManager is OFF\");\n-        }\n-\n@@ -120,32 +103,0 @@\n-\n-    private static final class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        private final Permissions perms;\n-\n-        private static final Permissions permissions(Permission... perms) {\n-            Permissions permissions = new Permissions();\n-            for (Permission perm : perms) {\n-                permissions.add(perm);\n-            }\n-            return permissions;\n-        }\n-\n-        SimplePolicy() {\n-            this(permissions(new LoggingPermission(\"control\", null),\n-                    new RuntimePermission(\"accessClassInPackage.sun.util.logging\")\n-            ));\n-        }\n-\n-        SimplePolicy(Permissions perms) {\n-            this.perms = perms;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return perms.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/RootLogger\/setLevel\/TestRootLoggerLevel.java","additions":2,"deletions":51,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager TestGetGlobal\n@@ -35,1 +34,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.LogManagerImpl1 TestGetGlobal\n@@ -37,1 +35,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.LogManagerImpl2 TestGetGlobal\n@@ -39,1 +36,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.LogManagerImpl3 TestGetGlobal\n@@ -41,1 +37,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.BadLogManagerImpl TestGetGlobal\n@@ -43,1 +38,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.DummyLogManagerImpl TestGetGlobal\n@@ -63,2 +57,0 @@\n-            + (System.getSecurityManager() == null ? \" \" :\n-               \" -Djava.security.manager \")\n","filename":"test\/jdk\/java\/util\/logging\/Logger\/getGlobal\/TestGetGlobal.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager TestGetGlobalByName\n@@ -35,1 +34,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.LogManagerImpl TestGetGlobalByName\n@@ -37,1 +35,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.LogManagerImpl2 TestGetGlobalByName\n@@ -39,1 +36,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.LogManagerImpl3 TestGetGlobalByName\n@@ -41,1 +37,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.BadLogManagerImpl TestGetGlobalByName\n@@ -43,1 +38,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.DummyLogManagerImpl TestGetGlobalByName\n","filename":"test\/jdk\/java\/util\/logging\/Logger\/getGlobal\/TestGetGlobalByName.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.util.logging.Level;\n@@ -34,1 +33,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager TestGetGlobalConcurrent\n@@ -36,1 +34,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.LogManagerImpl1 TestGetGlobalConcurrent\n@@ -38,1 +35,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.LogManagerImpl2 TestGetGlobalConcurrent\n@@ -40,1 +36,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.LogManagerImpl3 TestGetGlobalConcurrent\n@@ -42,1 +37,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.BadLogManagerImpl TestGetGlobalConcurrent\n@@ -44,1 +38,0 @@\n- * @run main\/othervm\/policy=policy -Djava.security.manager -Djava.util.logging.manager=testgetglobal.DummyLogManagerImpl TestGetGlobalConcurrent\n@@ -158,2 +151,0 @@\n-            + (System.getSecurityManager() == null ? \" \" :\n-               \" -Djava.security.manager \")\n","filename":"test\/jdk\/java\/util\/logging\/Logger\/getGlobal\/TestGetGlobalConcurrent.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,8 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"java.util.logging.config.file\", \"write\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.util.PropertyPermission \"java.util.logging.manager\", \"read\";\n-    permission java.lang.RuntimePermission \"setContextClassLoader\";\n-    permission java.lang.RuntimePermission \"shutdownHooks\";\n-    permission java.util.logging.LoggingPermission \"control\";\n-};\n","filename":"test\/jdk\/java\/util\/logging\/Logger\/getGlobal\/policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow -Dsecurity=on TestLogger\n@@ -44,5 +43,0 @@\n-        final String security = System.getProperty(\"security\", \"off\");\n-        System.out.println(\"Security is \" + security);\n-        if (\"on\".equals(security)) {\n-           System.setSecurityManager(new SecurityManager());\n-        }\n","filename":"test\/jdk\/java\/util\/logging\/Logger\/getLogger\/TestLogger.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,5 +23,0 @@\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -30,1 +25,0 @@\n-import java.util.PropertyPermission;\n@@ -37,1 +31,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -45,3 +38,1 @@\n- * @run main\/othervm TestSetResourceBundle UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow TestSetResourceBundle PERMISSION\n- * @run main\/othervm -Djava.security.manager=allow TestSetResourceBundle SECURE\n+ * @run main\/othervm TestSetResourceBundle\n@@ -52,1 +43,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n@@ -78,32 +68,0 @@\n-    \/**\n-     * We will test setResourceBundle() in 3 configurations.\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         LoggingPermission(\"control\") granted.\n-     * PERMISSION: With the security manager present - and the required\n-     *         LoggingPermission(\"control\") *not* granted. Here we will\n-     *         test that the expected security permission is thrown.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE, PERMISSION;\n-        public void run(String name) throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            switch (this) {\n-                case UNSECURE:\n-                    testUnsecure(name);\n-                    break;\n-                case SECURE:\n-                    testSecure(name);\n-                    break;\n-                case PERMISSION:\n-                    testPermission(name);\n-                    break;\n-                default:\n-                    throw new Error(\"Unknown test case: \"+this);\n-            }\n-        }\n-        public String loggerName(String name) {\n-            return name().toLowerCase(Locale.ROOT) + \".\" + name;\n-        }\n-    }\n-\n@@ -114,14 +72,4 @@\n-        if (args == null || args.length == 0) {\n-            args = new String[] {\n-                TestCase.UNSECURE.name(),\n-                TestCase.SECURE.name()\n-            };\n-        }\n-\n-        for (String testName : args) {\n-            TestCase test = TestCase.valueOf(testName);\n-            try {\n-                test.run(test.loggerName(\"foo.bar\"));\n-            } finally {\n-                Locale.setDefault(defaultLocale);\n-            }\n+        try {\n+            test(\"foo.bar\");\n+        } finally {\n+            Locale.setDefault(defaultLocale);\n@@ -131,10 +79,2 @@\n-    \/**\n-     * Test without security manager.\n-     * @param loggerName The logger to use.\n-     * @throws Exception if the test fails.\n-     *\/\n-    public static void testUnsecure(String loggerName) throws Exception {\n-        if (System.getSecurityManager() != null) {\n-            throw new Error(\"Security manager is set\");\n-        }\n-        test(loggerName);\n+    static String getBaseName(ResourceBundle bundle) {\n+        return bundle == null ? null : bundle.getBaseBundleName();\n@@ -144,1 +84,1 @@\n-     * Test with security manager.\n+     * Main test runner.\n@@ -148,40 +88,0 @@\n-    public static void testSecure(String loggerName) throws Exception {\n-        if (System.getSecurityManager() != null) {\n-            throw new Error(\"Security manager is already set\");\n-        }\n-        Policy.setPolicy(new SimplePolicy(TestCase.SECURE));\n-        System.setSecurityManager(new SecurityManager());\n-        test(loggerName);\n-    }\n-\n-    \/**\n-     * Test the LoggingPermission(\"control\") is required.\n-     * @param loggerName The logger to use.\n-     *\/\n-    public static void testPermission(String loggerName) {\n-        if (System.getSecurityManager() != null) {\n-            throw new Error(\"Security manager is already set\");\n-        }\n-        Policy.setPolicy(new SimplePolicy(TestCase.PERMISSION));\n-        System.setSecurityManager(new SecurityManager());\n-        final ResourceBundle bundle = ResourceBundle.getBundle(LIST_BUNDLE_NAME);\n-        Logger foobar = Logger.getLogger(loggerName);\n-        try {\n-            foobar.setResourceBundle(bundle);\n-            throw new RuntimeException(\"Permission not checked!\");\n-        } catch (AccessControlException x) {\n-            if (x.getPermission() instanceof LoggingPermission) {\n-                if (\"control\".equals(x.getPermission().getName())) {\n-                    System.out.println(\"Got expected exception: \" + x);\n-                    return;\n-                }\n-            }\n-            throw new RuntimeException(\"Unexpected exception: \"+x, x);\n-        }\n-\n-    }\n-\n-    static String getBaseName(ResourceBundle bundle) {\n-        return bundle == null ? null : bundle.getBaseBundleName();\n-    }\n-\n@@ -468,20 +368,0 @@\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        final Permissions permissions;\n-        public SimplePolicy(TestCase test) {\n-            permissions = new Permissions();\n-            if (test != TestCase.PERMISSION) {\n-                permissions.add(new LoggingPermission(\"control\", null));\n-            }\n-            \/\/ required for calling Locale.setDefault in the test.\n-            permissions.add(new PropertyPermission(\"user.language\", \"write\"));\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return permissions.implies(permission) ||\n-                   DEFAULT_POLICY.implies(domain, permission);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/Logger\/setResourceBundle\/TestSetResourceBundle.java","additions":9,"deletions":129,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.io.FilePermission;\n@@ -27,6 +26,0 @@\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.util.PropertyPermission;\n@@ -36,3 +29,0 @@\n-import java.util.logging.LoggingPermission;\n-import jdk.internal.access.JavaAWTAccess;\n-import jdk.internal.access.SharedSecrets;\n@@ -47,1 +37,1 @@\n- * @run main\/othervm -Djava.security.manager=allow RootLevelInConfigFile\n+ * @run main\/othervm RootLevelInConfigFile\n@@ -69,23 +59,0 @@\n-\n-        LogManager.getLogManager().readConfiguration();\n-\n-        Policy.setPolicy(new SimplePolicy(configFile));\n-        System.setSecurityManager(new SecurityManager());\n-\n-        test(\"security\");\n-\n-        LogManager.getLogManager().readConfiguration();\n-\n-        final JavaAWTAccessStub access = new JavaAWTAccessStub();\n-        SharedSecrets.setJavaAWTAccess(access);\n-\n-        test(\"security and no context\");\n-\n-        for (Context ctx : Context.values()) {\n-\n-            LogManager.getLogManager().readConfiguration();\n-\n-            access.setContext(ctx);\n-\n-            test(\"security and context \" + ctx);\n-        }\n@@ -176,35 +143,0 @@\n-\n-    static final class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final PermissionCollection perms = new Permissions();\n-        public SimplePolicy(String configFile) {\n-            perms.add(new LoggingPermission(\"control\", null));\n-            perms.add(new PropertyPermission(\"java.util.logging.config.class\",\"read\"));\n-            perms.add(new PropertyPermission(\"java.util.logging.config.file\",\"read\"));\n-            perms.add(new FilePermission(configFile, \"read\"));\n-            perms.add(new RuntimePermission(\"accessClassInPackage.jdk.internal.access\"));\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return perms.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-    }\n-\n-    static enum Context { ONE, TWO };\n-\n-    static final class JavaAWTAccessStub implements JavaAWTAccess {\n-        private Context context;\n-\n-        public void setContext(Context context) {\n-            this.context = context;\n-        }\n-\n-        @Override\n-        public Object getAppletContext() {\n-            return context;\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/RootLogger\/RootLevelInConfigFile.java","additions":2,"deletions":70,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.security.Permission;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -46,1 +43,0 @@\n-\n@@ -52,2 +48,1 @@\n- * @run  main\/othervm SystemLoggerConfigTest NOSECURITY\n- * @run  main\/othervm -Djava.security.manager=allow SystemLoggerConfigTest WITHSECURITY\n+ * @run  main\/othervm SystemLoggerConfigTest\n@@ -137,9 +132,1 @@\n-        if (args == null || args.length == 0) {\n-            args = Stream.of(TestCase.values())\n-                    .map(String::valueOf)\n-                    .collect(Collectors.toList())\n-                    .toArray(new String[0]);\n-        }\n-        Stream.of(args)\n-              .map(TestCase::valueOf)\n-              .forEach(SystemLoggerConfigTest::launch);\n+        launch();\n@@ -148,16 +135,1 @@\n-    public static void launch(TestCase test) {\n-        switch(test) {\n-            case WITHSECURITY:\n-                Policy.setPolicy(new Policy() {\n-                    @Override\n-                    public boolean implies(ProtectionDomain domain, Permission permission) {\n-                        return true;\n-                    }\n-                });\n-                System.setSecurityManager(new SecurityManager());\n-                break;\n-            case NOSECURITY:\n-                break;\n-            default:\n-                throw new InternalError(\"Unexpected enum: \" + test);\n-        }\n+    public static void launch() {\n@@ -165,4 +137,4 @@\n-            test(test.name(), \".1\", \".child\");\n-            test(test.name(), \".2\", \"\");\n-            testUpdateConfiguration(test.name(), \".3\");\n-            testSetPlatformLevel(test.name(), \".4\");\n+            test(\"1\", \".child\");\n+            test(\"2\", \"\");\n+            testUpdateConfiguration(\"3\");\n+            testSetPlatformLevel(\"4\");\n@@ -174,1 +146,1 @@\n-    public static void test(String name, String step, String ext)\n+    public static void test(String step, String ext)\n@@ -177,1 +149,1 @@\n-        System.out.println(\"\\n*** Testing \" + name + step + ext);\n+        System.out.println(\"\\n*** Testing \" + step + ext);\n@@ -179,4 +151,4 @@\n-        final String systemName1a = \"system.logger.one.a.\" + name + step + ext;\n-        final String systemName1b = \"system.logger.one.b.\" + name + step + ext;\n-        final String appName1a = \"system.logger.one.a.\" + name + step;\n-        final String appName1b = \"system.logger.one.b.\" + name + step;\n+        final String systemName1a = \"system.logger.one.a.\" + step + ext;\n+        final String systemName1b = \"system.logger.one.b.\" + step + ext;\n+        final String appName1a = \"system.logger.one.a.\" + step;\n+        final String appName1b = \"system.logger.one.b.\" + step;\n@@ -185,2 +157,2 @@\n-        final String systemName2 = \"system.logger.two.\" + name + step + ext;\n-        final String appName2 = \"system.logger.two.\" + name + step;\n+        final String systemName2 = \"system.logger.two.\" + step + ext;\n+        final String appName2 = \"system.logger.two.\" + step;\n@@ -188,2 +160,2 @@\n-        final String systemName3 = \"system.logger.three.\" + name + step + ext;\n-        final String appName3 = \"system.logger.three.\" + name + step;\n+        final String systemName3 = \"system.logger.three.\" + step + ext;\n+        final String appName3 = \"system.logger.three.\" + step;\n@@ -280,2 +252,2 @@\n-    public static void testSetPlatformLevel(String name, String step) {\n-        System.out.println(\"\\n*** Testing PlatformLogger.setLevel \" + name + step);\n+    public static void testSetPlatformLevel(String step) {\n+        System.out.println(\"\\n*** Testing PlatformLogger.setLevel \" + step);\n@@ -283,1 +255,1 @@\n-        System.out.println(\"\\n[Case #5] Creating app logger: \" + name + step);\n+        System.out.println(\"\\n[Case #5] Creating app logger: \" + step);\n@@ -285,1 +257,1 @@\n-        Logger foo = Logger.getLogger(name + step);\n+        Logger foo = Logger.getLogger(step);\n@@ -288,2 +260,2 @@\n-        System.out.println(\"    Creating platform logger: \" + name + step);\n-        PlatformLogger foo1 = PlatformLogger.getLogger(name + step);\n+        System.out.println(\"    Creating platform logger: \" + step);\n+        PlatformLogger foo1 = PlatformLogger.getLogger(step);\n@@ -319,1 +291,1 @@\n-    public static void testUpdateConfiguration(String name, String step) throws IOException {\n+    public static void testUpdateConfiguration(String step) throws IOException {\n@@ -321,1 +293,1 @@\n-        System.out.println(\"\\n*** Testing LogManager.updateConfiguration \" + name + step);\n+        System.out.println(\"\\n*** Testing LogManager.updateConfiguration \" + step);\n@@ -323,2 +295,2 @@\n-        final String name1a = \"system.logger.one.a.\" + name + step;\n-        final String name1b = \"system.logger.one.b.\" + name + step;\n+        final String name1a = \"system.logger.one.a.\" + step;\n+        final String name1b = \"system.logger.one.b.\" + step;\n","filename":"test\/jdk\/java\/util\/logging\/SystemLoggerConfigTest.java","additions":28,"deletions":56,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -1,583 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.util.EnumSet;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.logging.LogManager;\n-import java.util.logging.Logger;\n-import java.util.logging.LoggingPermission;\n-import jdk.internal.access.JavaAWTAccess;\n-import jdk.internal.access.SharedSecrets;\n-\n-\/*\n- * @test\n- * @bug 8017174 8010727 8019945\n- * @summary  NPE when using Logger.getAnonymousLogger or\n- *           LogManager.getLogManager().getLogger\n- *\n- * @modules java.base\/jdk.internal.access\n- *          java.logging\n- * @run main\/othervm -Dtest.security=off TestAppletLoggerContext LoadingApplet\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestAppletLoggerContext  LoadingApplet\n- * @run main\/othervm -Dtest.security=off TestAppletLoggerContext LoadingMain\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestAppletLoggerContext  LoadingMain\n- * @run main\/othervm -Dtest.security=off TestAppletLoggerContext One\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestAppletLoggerContext  One\n- * @run main\/othervm -Dtest.security=off TestAppletLoggerContext Two\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestAppletLoggerContext  Two\n- * @run main\/othervm -Dtest.security=off TestAppletLoggerContext Three\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestAppletLoggerContext  Three\n- * @run main\/othervm -Dtest.security=off TestAppletLoggerContext Four\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestAppletLoggerContext  Four\n- * @run main\/othervm -Dtest.security=off TestAppletLoggerContext Five\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestAppletLoggerContext  Five\n- * @run main\/othervm -Dtest.security=off TestAppletLoggerContext Six\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestAppletLoggerContext  Six\n- * @run main\/othervm -Dtest.security=off TestAppletLoggerContext Seven\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestAppletLoggerContext  Seven\n- * @run main\/othervm -Dtest.security=off TestAppletLoggerContext\n- * @run main\/othervm -Djava.security.manager=allow -Dtest.security=on TestAppletLoggerContext\n- *\/\n-\n-\/\/ NOTE: We run in other VM in order to 1. switch security manager and 2. cause\n-\/\/ LogManager class to be loaded anew.\n-public class TestAppletLoggerContext {\n-\n-    \/\/ Avoids the hassle of dealing with files and system props...\n-    static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        private final Permissions perms;\n-        public SimplePolicy(Permission... permissions) {\n-            perms = new Permissions();\n-            for (Permission permission : permissions) {\n-                perms.add(permission);\n-            }\n-        }\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource cs) {\n-            return perms;\n-        }\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain pd) {\n-            return perms;\n-        }\n-        @Override\n-        public boolean implies(ProtectionDomain pd, Permission p) {\n-           return perms.implies(p) || DEFAULT_POLICY.implies(pd, p);\n-        }\n-    }\n-\n-    \/\/ The bridge class initializes the logging system.\n-    \/\/ It stubs the applet context in order to simulate context changes.\n-    \/\/\n-    public static class Bridge {\n-\n-        private static class JavaAWTAccessStub implements JavaAWTAccess {\n-            boolean active = true;\n-\n-            private static class TestExc {\n-                private final Map<Object, Object> map = new HashMap<>();\n-                void put(Object key, Object v) { map.put(key, v); }\n-                Object get(Object key) { return map.get(key); }\n-                void remove(Object o) { map.remove(o); }\n-                public static TestExc exc(Object o) {\n-                    return TestExc.class.cast(o);\n-                }\n-            }\n-\n-            TestExc exc;\n-\n-            @Override\n-            public Object getAppletContext() { return active ? exc : null; }\n-        }\n-\n-        static final JavaAWTAccessStub javaAwtAccess = new JavaAWTAccessStub();\n-        public static void init() {\n-            SharedSecrets.setJavaAWTAccess(javaAwtAccess);\n-            if (System.getProperty(\"test.security\", \"on\").equals(\"on\")) {\n-                Policy p = new SimplePolicy(new LoggingPermission(\"control\", null),\n-                    new RuntimePermission(\"setContextClassLoader\"),\n-                    new RuntimePermission(\"shutdownHooks\"));\n-                Policy.setPolicy(p);\n-                System.setSecurityManager(new SecurityManager());\n-            }\n-        }\n-\n-        public static void changeContext() {\n-            System.out.println(\"... Switching to a new applet context ...\");\n-            javaAwtAccess.active = true;\n-            javaAwtAccess.exc = new JavaAWTAccessStub.TestExc();\n-        }\n-\n-        public static void desactivate() {\n-            System.out.println(\"... Running with no applet context ...\");\n-            javaAwtAccess.exc = null;\n-            javaAwtAccess.active = false;\n-        }\n-\n-        public static class CustomAnonymousLogger extends Logger {\n-            public CustomAnonymousLogger() {\n-                this(\"\");\n-            }\n-            public CustomAnonymousLogger(String name) {\n-                super(null, null);\n-                System.out.println( \" LogManager: \" +LogManager.getLogManager());\n-                System.out.println( \" getLogger: \" +LogManager.getLogManager().getLogger(name));\n-                setParent(LogManager.getLogManager().getLogger(name));\n-            }\n-        }\n-\n-        public static class CustomLogger extends Logger {\n-            CustomLogger(String name) {\n-                super(name, null);\n-            }\n-        }\n-    }\n-\n-    public static enum TestCase {\n-        LoadingApplet, LoadingMain, One, Two, Three, Four, Five, Six, Seven;\n-        public void test() {\n-            switch(this) {\n-                \/\/ When run - each of these two tests must be\n-                \/\/ run before any other tests and before each other.\n-                case LoadingApplet: testLoadingApplet(); break;\n-                case LoadingMain:   testLoadingMain(); break;\n-                case One:   testOne(); break;\n-                case Two:   testTwo(); break;\n-                case Three: testThree(); break;\n-                case Four:  testFour(); break;\n-                case Five:  testFive(); break;\n-                case Six:   testSix(); break;\n-                case Seven: testSeven(); break;\n-            }\n-        }\n-        public String describe() {\n-            switch(this) {\n-                case LoadingApplet:\n-                    return \"Test that when the LogManager class is\"\n-                        + \" loaded in  an applet thread first,\"\n-                        + \"\\n all LoggerContexts are correctly initialized\";\n-                case LoadingMain:\n-                    return \"Test that when the LogManager class is\"\n-                        + \" loaded in  the main thread first,\"\n-                        + \"\\n all LoggerContexts are correctly initialized\";\n-                case One:\n-                    return \"Test that Logger.getAnonymousLogger()\"\n-                        + \" and new CustomAnonymousLogger() don't throw NPE\";\n-                case Two:\n-                    return \"Test that Logger.getLogger(\\\"\\\")\"\n-                            + \" does not return null nor throws NPE\";\n-                case Three:\n-                    return \"Test that LogManager.getLogManager().getLogger(\\\"\\\")\"\n-                            + \" does not return null nor throws NPE\";\n-                case Four:\n-                    return \"Test that Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)\"\n-                            + \" does not return null,\\n and that\"\n-                            + \" new CustomAnonymousLogger(Logger.GLOBAL_LOGGER_NAME)\"\n-                            + \" does not throw NPE\";\n-                case Five:\n-                    return \"Test that LogManager.getLogManager().getLogger(Logger.GLOBAL_LOGGER_NAME)\"\n-                            + \"\\n does not return null nor throws NPE\";\n-                case Six:\n-                    return \"Test that manager.getLogger(Logger.GLOBAL_LOGGER_NAME)\"\n-                            + \" returns null\\n when manager is not the default\"\n-                            + \" LogManager instance.\\n\"\n-                            + \"Test adding a new logger named \\\"global\\\" in that\"\n-                            + \" non default instance.\";\n-                case Seven: return \"Test that manager.getLogger(\\\"\\\")\"\n-                            + \" returns null\\n when manager is not the default\"\n-                            + \" LogManager instance.\\n\"\n-                            + \"Test adding a new logger named \\\"\\\" in that\"\n-                            + \" non default instance.\";\n-                default: return \"Undefined\";\n-            }\n-        }\n-    };\n-\n-    \/**\n-     * @param args the command line arguments\n-     *\/\n-    public static void main(String[] args) {\n-        Bridge.init();\n-        EnumSet<TestCase> tests = EnumSet.noneOf(TestCase.class);\n-        for (String arg : args) {\n-            tests.add(TestCase.valueOf(arg));\n-        }\n-        if (args.length == 0) {\n-            tests = EnumSet.complementOf(EnumSet.of(TestCase.LoadingMain));\n-        }\n-        final EnumSet<TestCase> loadingTests =\n-            EnumSet.of(TestCase.LoadingApplet, TestCase.LoadingMain);\n-        int testrun = 0;\n-        for (TestCase test : tests) {\n-            if (loadingTests.contains(test)) {\n-                if (testrun > 0) {\n-                    throw new UnsupportedOperationException(\"Test case \"\n-                          + test + \" must be executed first!\");\n-                }\n-            }\n-            System.out.println(\"Testing \"+ test+\": \");\n-            System.out.println(test.describe());\n-            try {\n-                test.test();\n-            } catch (Exception x) {\n-               throw new Error(String.valueOf(test)\n-                   + (System.getSecurityManager() == null ? \" without \" : \" with \")\n-                   + \"security failed: \"+x+\"\\n \"+\"FAILED: \"+test.describe()+\"\\n\", x);\n-            } finally {\n-                testrun++;\n-            }\n-            Bridge.changeContext();\n-            System.out.println(\"PASSED: \"+ test);\n-        }\n-    }\n-\n-    public static void testLoadingApplet() {\n-        Bridge.changeContext();\n-\n-        Logger bar = new Bridge.CustomLogger(\"com.foo.Bar\");\n-        LogManager.getLogManager().addLogger(bar);\n-        assertNotNull(bar.getParent());\n-        testParent(bar);\n-        testParent(LogManager.getLogManager().getLogger(\"global\"));\n-        testParent(LogManager.getLogManager().getLogger(bar.getName()));\n-\n-        Bridge.desactivate();\n-\n-        Logger foo = new Bridge.CustomLogger(\"com.foo.Foo\");\n-        boolean b = LogManager.getLogManager().addLogger(foo);\n-        assertEquals(Boolean.TRUE, Boolean.valueOf(b));\n-        assertNotNull(foo.getParent());\n-        testParent(foo);\n-        testParent(LogManager.getLogManager().getLogger(\"global\"));\n-        testParent(LogManager.getLogManager().getLogger(foo.getName()));\n-    }\n-\n-    public static void testLoadingMain() {\n-        Bridge.desactivate();\n-\n-        Logger bar = new Bridge.CustomLogger(\"com.foo.Bar\");\n-        LogManager.getLogManager().addLogger(bar);\n-        assertNotNull(bar.getParent());\n-        testParent(bar);\n-        testParent(LogManager.getLogManager().getLogger(\"global\"));\n-        testParent(LogManager.getLogManager().getLogger(bar.getName()));\n-\n-        Bridge.changeContext();\n-\n-        Logger foo = new Bridge.CustomLogger(\"com.foo.Foo\");\n-        boolean b = LogManager.getLogManager().addLogger(foo);\n-        assertEquals(Boolean.TRUE, Boolean.valueOf(b));\n-        assertNotNull(foo.getParent());\n-        testParent(foo);\n-        testParent(LogManager.getLogManager().getLogger(\"global\"));\n-        testParent(LogManager.getLogManager().getLogger(foo.getName()));\n-\n-    }\n-\n-    public static void testOne() {\n-        for (int i=0; i<3 ; i++) {\n-            Logger logger1 = Logger.getAnonymousLogger();\n-            Logger logger1b = Logger.getAnonymousLogger();\n-            Bridge.changeContext();\n-            Logger logger2 = Logger.getAnonymousLogger();\n-            Logger logger2b = Logger.getAnonymousLogger();\n-            Bridge.changeContext();\n-            Logger logger3 = new Bridge.CustomAnonymousLogger();\n-            Logger logger3b = new Bridge.CustomAnonymousLogger();\n-            Bridge.changeContext();\n-            Logger logger4 = new Bridge.CustomAnonymousLogger();\n-            Logger logger4b = new Bridge.CustomAnonymousLogger();\n-        }\n-    }\n-\n-\n-    public static void testTwo() {\n-        for (int i=0; i<3 ; i++) {\n-            Logger logger1 = Logger.getLogger(\"\");\n-            Logger logger1b = Logger.getLogger(\"\");\n-            assertNotNull(logger1);\n-            assertNotNull(logger1b);\n-            assertEquals(logger1, logger1b);\n-            Bridge.changeContext();\n-            Logger logger2 = Logger.getLogger(\"\");\n-            Logger logger2b = Logger.getLogger(\"\");\n-            assertNotNull(logger2);\n-            assertNotNull(logger2b);\n-            assertEquals(logger2, logger2b);\n-            assertEquals(logger1, logger2);\n-        }\n-    }\n-\n-    public static void testThree() {\n-        for (int i=0; i<3 ; i++) {\n-            Logger logger1 = LogManager.getLogManager().getLogger(\"\");\n-            Logger logger1b = LogManager.getLogManager().getLogger(\"\");\n-            assertNotNull(logger1);\n-            assertNotNull(logger1b);\n-            assertEquals(logger1, logger1b);\n-            Bridge.changeContext();\n-            Logger logger2 = LogManager.getLogManager().getLogger(\"\");\n-            Logger logger2b = LogManager.getLogManager().getLogger(\"\");\n-            assertNotNull(logger2);\n-            assertNotNull(logger2b);\n-            assertEquals(logger2, logger2b);\n-            assertEquals(logger1, logger2);\n-        }\n-    }\n-\n-    public static void testFour() {\n-        for (int i=0; i<3 ; i++) {\n-            Logger logger1 = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            Logger logger1b = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            assertNotNull(logger1);\n-            assertNotNull(logger1b);\n-            assertEquals(logger1, logger1b);\n-            Bridge.changeContext();\n-\n-            Logger logger2 = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            Logger logger2b = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            assertNotNull(logger2);\n-            assertNotNull(logger2b);\n-            assertEquals(logger2, logger2b);\n-\n-            assertEquals(logger1, logger2);\n-\n-            Bridge.changeContext();\n-            Logger logger3 = new Bridge.CustomAnonymousLogger(Logger.GLOBAL_LOGGER_NAME);\n-            Logger logger3b = new Bridge.CustomAnonymousLogger(Logger.GLOBAL_LOGGER_NAME);\n-            Bridge.changeContext();\n-            Logger logger4 = new Bridge.CustomAnonymousLogger(Logger.GLOBAL_LOGGER_NAME);\n-            Logger logger4b = new Bridge.CustomAnonymousLogger(Logger.GLOBAL_LOGGER_NAME);\n-        }\n-    }\n-\n-    public static void testFive() {\n-        for (int i=0; i<3 ; i++) {\n-            Logger logger1 = LogManager.getLogManager().getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            Logger logger1b = LogManager.getLogManager().getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            assertNotNull(logger1);\n-            assertNotNull(logger1b);\n-            assertEquals(logger1, logger1b);\n-\n-            Bridge.changeContext();\n-\n-            Logger logger2 = LogManager.getLogManager().getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            Logger logger2b = LogManager.getLogManager().getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            assertNotNull(logger2);\n-            assertNotNull(logger2b);\n-            assertEquals(logger2, logger2b);\n-\n-            assertEquals(logger1, logger2);\n-        }\n-    }\n-\n-    \/**\n-     * This test is designed to test the behavior of additional LogManager instances.\n-     * It must be noted that if the security manager is off, then calling\n-     * Bridge.changeContext() has actually no effect - which explains why we have\n-     * some differences between the cases security manager on & security manager\n-     * off.\n-     **\/\n-    public static void testSix() {\n-        for (int i=0; i<3 ; i++) {\n-            Bridge.desactivate();\n-            LogManager manager = new LogManager() {};\n-            Logger logger1 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            Logger logger1b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            assertNull(logger1);\n-            assertNull(logger1b);\n-            Logger global = new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);\n-            manager.addLogger(global);\n-            Logger logger2 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            Logger logger2b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            assertNotNull(logger2);\n-            assertNotNull(logger2b);\n-            assertEquals(logger2, global);\n-            assertEquals(logger2b, global);\n-            assertNull(manager.getLogger(\"\"));\n-            assertNull(manager.getLogger(\"\"));\n-\n-            for (int j = 0; j<3; j++) {\n-                Bridge.changeContext();\n-\n-                \/\/ this is not a supported configuration:\n-                \/\/ We are in an applet context with several log managers.\n-                \/\/ We however need to check our assumptions...\n-\n-                \/\/ Applet context => root logger and global logger should also be null.\n-\n-                Logger expected = (System.getSecurityManager() == null ? global : null);\n-                Logger logger3 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-                Logger logger3b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-                assertEquals(expected, logger3);\n-                assertEquals(expected, logger3b);\n-                Logger global2 = new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);\n-                manager.addLogger(global2);\n-                Logger logger4 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-                Logger logger4b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-                assertNotNull(logger4);\n-                assertNotNull(logger4b);\n-                expected = (System.getSecurityManager() == null ? global : global2);\n-                assertEquals(logger4,  expected);\n-                assertEquals(logger4b, expected);\n-\n-                Logger logger5 = manager.getLogger(\"\");\n-                Logger logger5b = manager.getLogger(\"\");\n-                Logger expectedRoot = null;\n-                assertEquals(logger5, expectedRoot);\n-                assertEquals(logger5b, expectedRoot);\n-            }\n-\n-        }\n-    }\n-\n-    \/**\n-     * This test is designed to test the behavior of additional LogManager instances.\n-     * It must be noted that if the security manager is off, then calling\n-     * Bridge.changeContext() has actually no effect - which explains why we have\n-     * some differences between the cases security manager on & security manager\n-     * off.\n-     **\/\n-    public static void testSeven() {\n-        for (int i=0; i<3 ; i++) {\n-            Bridge.desactivate();\n-            LogManager manager = new LogManager() {};\n-            Logger logger1 = manager.getLogger(\"\");\n-            Logger logger1b = manager.getLogger(\"\");\n-            assertNull(logger1);\n-            assertNull(logger1b);\n-            Logger global = new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);\n-            manager.addLogger(global);\n-            Logger logger2 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            Logger logger2b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-            assertNotNull(logger2);\n-            assertNotNull(logger2b);\n-            assertEquals(logger2, global);\n-            assertEquals(logger2b, global);\n-            Logger logger3 = manager.getLogger(\"\");\n-            Logger logger3b = manager.getLogger(\"\");\n-            assertNull(logger3);\n-            assertNull(logger3b);\n-            Logger root = new Bridge.CustomLogger(\"\");\n-            manager.addLogger(root);\n-            Logger logger4 = manager.getLogger(\"\");\n-            Logger logger4b = manager.getLogger(\"\");\n-            assertNotNull(logger4);\n-            assertNotNull(logger4b);\n-            assertEquals(logger4, root);\n-            assertEquals(logger4b, root);\n-\n-            for (int j = 0 ; j < 3 ; j++) {\n-                Bridge.changeContext();\n-\n-                \/\/ this is not a supported configuration:\n-                \/\/ We are in an applet context with several log managers.\n-                \/\/ We however need to check our assumptions...\n-\n-                \/\/ Applet context => root logger and global logger should also be null.\n-\n-                Logger logger5 = manager.getLogger(\"\");\n-                Logger logger5b = manager.getLogger(\"\");\n-                Logger expectedRoot = (System.getSecurityManager() == null ? root : null);\n-                assertEquals(logger5, expectedRoot);\n-                assertEquals(logger5b, expectedRoot);\n-\n-                if (System.getSecurityManager() != null) {\n-                    assertNull(manager.getLogger(Logger.GLOBAL_LOGGER_NAME));\n-                } else {\n-                    assertEquals(global, manager.getLogger(Logger.GLOBAL_LOGGER_NAME));\n-                }\n-\n-                Logger global2 = new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);\n-                manager.addLogger(global2);\n-                Logger logger6 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-                Logger logger6b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n-                Logger expectedGlobal = (System.getSecurityManager() == null ? global : global2);\n-\n-                assertNotNull(logger6);\n-                assertNotNull(logger6b);\n-                assertEquals(logger6, expectedGlobal);\n-                assertEquals(logger6b, expectedGlobal);\n-                if (System.getSecurityManager() != null) {\n-                    assertNull(manager.getLogger(\"\"));\n-                } else {\n-                    assertEquals(root, manager.getLogger(\"\"));\n-                }\n-\n-                Logger root2 = new Bridge.CustomLogger(\"\");\n-                manager.addLogger(root2);\n-                expectedRoot = (System.getSecurityManager() == null ? root : root2);\n-                Logger logger7 = manager.getLogger(\"\");\n-                Logger logger7b = manager.getLogger(\"\");\n-                assertNotNull(logger7);\n-                assertNotNull(logger7b);\n-                assertEquals(logger7, expectedRoot);\n-                assertEquals(logger7b, expectedRoot);\n-            }\n-        }\n-    }\n-\n-    public static void testParent(Logger logger) {\n-        Logger l = logger;\n-        while (l.getParent() != null) {\n-            l = l.getParent();\n-        }\n-        assertEquals(\"\", l.getName());\n-    }\n-\n-    public static class TestError extends RuntimeException {\n-        public TestError(String msg) {\n-            super(msg);\n-        }\n-    }\n-\n-    public static void assertNotNull(Object obj) {\n-        if (obj == null) throw new NullPointerException();\n-    }\n-\n-    public static void assertNull(Object obj) {\n-        if (obj != null) throw new TestError(\"Null expected, got \"+obj);\n-    }\n-\n-    public static void assertEquals(Object o1, Object o2) {\n-        if (o1 != o2) {\n-            throw new TestError(o1 + \" != \" + o2);\n-        }\n-    }\n-\n-    public static void assertNotEquals(Object o1, Object o2) {\n-        if (o1 == o2) {\n-            throw new TestError(o1 + \" == \" + o2);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/logging\/TestAppletLoggerContext.java","additions":0,"deletions":583,"binary":false,"changes":583,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.io.FilePermission;\n@@ -26,7 +25,0 @@\n-import java.security.AccessControlException;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -35,2 +27,0 @@\n-import java.util.ConcurrentModificationException;\n-import java.util.Enumeration;\n@@ -38,1 +28,0 @@\n-import java.util.PropertyPermission;\n@@ -42,1 +31,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -50,3 +38,1 @@\n- * @run main\/othervm TestConfigurationListeners UNSECURE\n- * @run main\/othervm -Djava.security.manager=allow TestConfigurationListeners PERMISSION\n- * @run main\/othervm -Djava.security.manager=allow TestConfigurationListeners SECURE\n+ * @run main\/othervm TestConfigurationListeners\n@@ -57,32 +43,1 @@\n-    \/**\n-     * We will test add and remove ConfigurationListeners in 3 configurations.\n-     * UNSECURE: No security manager.\n-     * SECURE: With the security manager present - and the required\n-     *         LoggingPermission(\"control\") granted.\n-     * PERMISSION: With the security manager present - and the required\n-     *         LoggingPermission(\"control\") *not* granted. Here we will\n-     *         test that the expected security permission is thrown.\n-     *\/\n-    public static enum TestCase {\n-        UNSECURE, SECURE, PERMISSION;\n-        public void run(String name) throws Exception {\n-            System.out.println(\"Running test case: \" + name());\n-            switch (this) {\n-                case UNSECURE:\n-                    testUnsecure(name);\n-                    break;\n-                case SECURE:\n-                    testSecure(name);\n-                    break;\n-                case PERMISSION:\n-                    testPermission(name);\n-                    break;\n-                default:\n-                    throw new Error(\"Unknown test case: \"+this);\n-            }\n-        }\n-        public String loggerName(String name) {\n-            return name;\n-        }\n-    }\n-\n+    \/\/ We will test add and remove ConfigurationListeners\n@@ -90,39 +45,1 @@\n-\n-\n-        if (args == null || args.length == 0) {\n-            args = new String[] {\n-                TestCase.UNSECURE.name(),\n-                TestCase.SECURE.name(),\n-            };\n-        }\n-\n-        for (String testName : args) {\n-            TestCase test = TestCase.valueOf(testName);\n-            test.run(test.loggerName(\"foo.bar\"));\n-        }\n-    }\n-\n-    \/**\n-     * Test without security manager.\n-     * @param loggerName The logger to use.\n-     * @throws Exception if the test fails.\n-     *\/\n-    public static void testUnsecure(String loggerName) throws Exception {\n-        if (System.getSecurityManager() != null) {\n-            throw new Error(\"Security manager is set\");\n-        }\n-        test(loggerName);\n-    }\n-\n-    \/**\n-     * Test with security manager.\n-     * @param loggerName The logger to use.\n-     * @throws Exception if the test fails.\n-     *\/\n-    public static void testSecure(String loggerName) throws Exception {\n-        if (System.getSecurityManager() != null) {\n-            throw new Error(\"Security manager is already set\");\n-        }\n-        Policy.setPolicy(new SimplePolicy(TestCase.SECURE));\n-        System.setSecurityManager(new SecurityManager());\n-        test(loggerName);\n+       test(\"foo.bar\");\n@@ -131,64 +48,0 @@\n-    \/**\n-     * Test the LoggingPermission(\"control\") is required.\n-     * @param loggerName The logger to use.\n-     *\/\n-    public static void testPermission(String loggerName) {\n-        TestConfigurationListener run = new TestConfigurationListener(\n-                TestCase.PERMISSION.toString());\n-        if (System.getSecurityManager() != null) {\n-            throw new Error(\"Security manager is already set\");\n-        }\n-        Policy.setPolicy(new SimplePolicy(TestCase.PERMISSION));\n-        System.setSecurityManager(new SecurityManager());\n-\n-        try {\n-            LogManager.getLogManager().addConfigurationListener(run);\n-            throw new RuntimeException(\"addConfigurationListener: Permission not checked!\");\n-        } catch (AccessControlException x) {\n-            boolean ok = false;\n-            if (x.getPermission() instanceof LoggingPermission) {\n-                if (\"control\".equals(x.getPermission().getName())) {\n-                    System.out.println(\"addConfigurationListener: Got expected exception: \" + x);\n-                    ok = true;\n-                }\n-            }\n-            if (!ok) {\n-                throw new RuntimeException(\"addConfigurationListener: Unexpected exception: \"+x, x);\n-            }\n-        }\n-\n-        try {\n-            LogManager.getLogManager().removeConfigurationListener(run);\n-            throw new RuntimeException(\"removeConfigurationListener: Permission not checked!\");\n-        } catch (AccessControlException x) {\n-            boolean ok = false;\n-            if (x.getPermission() instanceof LoggingPermission) {\n-                if (\"control\".equals(x.getPermission().getName())) {\n-                    System.out.println(\"removeConfigurationListener: Got expected exception: \" + x);\n-                    ok = true;\n-                }\n-            }\n-            if (!ok) {\n-                throw new RuntimeException(\"removeConfigurationListener: Unexpected exception: \"+x, x);\n-            }\n-        }\n-        try {\n-            LogManager.getLogManager().addConfigurationListener(null);\n-            throw new RuntimeException(\n-                    \"addConfigurationListener(null): Expected NPE not thrown.\");\n-        } catch (NullPointerException npe) {\n-            System.out.println(\"Got expected NPE: \"+npe);\n-        }\n-\n-        try {\n-            LogManager.getLogManager().removeConfigurationListener(null);\n-            throw new RuntimeException(\n-                    \"removeConfigurationListener(null): Expected NPE not thrown.\");\n-        } catch (NullPointerException npe) {\n-            System.out.println(\"Got expected NPE: \"+npe);\n-        }\n-\n-\n-    }\n-\n-\n@@ -276,0 +129,5 @@\n+    \/**\n+     * Main test runner.\n+     * @param loggerName The logger to use.\n+     * @throws Exception if the test fails.\n+     *\/\n@@ -430,61 +288,0 @@\n-\n-\n-    static final class PermissionsBuilder {\n-        final Permissions perms;\n-        public PermissionsBuilder() {\n-            this(new Permissions());\n-        }\n-        public PermissionsBuilder(Permissions perms) {\n-            this.perms = perms;\n-        }\n-        public PermissionsBuilder add(Permission p) {\n-            perms.add(p);\n-            return this;\n-        }\n-        public PermissionsBuilder addAll(PermissionCollection col) {\n-            if (col != null) {\n-                for (Enumeration<Permission> e = col.elements(); e.hasMoreElements(); ) {\n-                    perms.add(e.nextElement());\n-                }\n-            }\n-            return this;\n-        }\n-        public Permissions toPermissions() {\n-            final PermissionsBuilder builder = new PermissionsBuilder();\n-            builder.addAll(perms);\n-            return builder.perms;\n-        }\n-    }\n-\n-    public static class SimplePolicy extends Policy {\n-\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-\n-        final Permissions permissions;\n-        public SimplePolicy(TestCase test) {\n-            permissions = new Permissions();\n-            if (test != TestCase.PERMISSION) {\n-                permissions.add(new LoggingPermission(\"control\", null));\n-                permissions.add(new PropertyPermission(\"java.util.logging.config.class\", \"read\"));\n-                permissions.add(new PropertyPermission(\"java.util.logging.config.file\", \"read\"));\n-                permissions.add(new PropertyPermission(\"java.home\", \"read\"));\n-                permissions.add(new FilePermission(\"<<ALL FILES>>\", \"read\"));\n-            }\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return permissions.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return new PermissionsBuilder().addAll(permissions).toPermissions();\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return new PermissionsBuilder().addAll(permissions).toPermissions();\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/util\/logging\/TestConfigurationListeners.java","additions":9,"deletions":212,"binary":false,"changes":221,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,0 @@\n-import java.security.Permission;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -41,2 +38,2 @@\n- * @run main\/othervm -Djava.security.manager=allow TestGetLoggerNPE getLogger\n- * @run main\/othervm -Djava.security.manager=allow TestGetLoggerNPE getLogManager\n+ * @run main\/othervm TestGetLoggerNPE getLogger\n+ * @run main\/othervm TestGetLoggerNPE getLogManager\n@@ -74,7 +71,0 @@\n-        Policy.setPolicy(new Policy() {\n-             public boolean implies(ProtectionDomain domain,\n-                                    Permission permission) {\n-                 return true; \/\/ all permissions\n-             }\n-        });\n-        System.setSecurityManager(new SecurityManager());\n","filename":"test\/jdk\/java\/util\/logging\/TestGetLoggerNPE.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestLogConfigurationDeadLock\n+ * @run main\/othervm TestLogConfigurationDeadLock\n@@ -70,2 +70,0 @@\n-     * This test will run both with and without a security manager.\n-     *\n@@ -81,5 +79,1 @@\n-     * This procedure is done twice: once without a security manager and once\n-     * again with a security manager - which means the test takes ~8secs to\n-     * run.\n-     *\n-     * Note that 8sec may not be enough to detect issues if there are some.\n+     * Note that 4sec may not be enough to detect issues if there are some.\n@@ -91,16 +85,0 @@\n-\n-        \/\/ test without security\n-        System.out.println(\"No security\");\n-        test();\n-\n-        \/\/ test with security\n-        System.out.println(\"\\nWith security\");\n-        Policy.setPolicy(new Policy() {\n-            @Override\n-            public boolean implies(ProtectionDomain domain, Permission permission) {\n-                if (super.implies(domain, permission)) return true;\n-                \/\/ System.out.println(\"Granting \" + permission);\n-                return true; \/\/ all permissions\n-            }\n-        });\n-        System.setSecurityManager(new SecurityManager());\n","filename":"test\/jdk\/java\/util\/logging\/TestLogConfigurationDeadLock.java","additions":3,"deletions":25,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,0 @@\n-import java.security.Permission;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -49,1 +46,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestLogConfigurationDeadLockWithConf\n+ * @run main\/othervm TestLogConfigurationDeadLockWithConf\n@@ -54,1 +51,1 @@\n-\/\/ for 8secs. This is usually sufficient to detect issues.\n+\/\/ for 4secs. This is usually sufficient to detect issues.\n@@ -77,2 +74,0 @@\n-     * This test will run both with and without a security manager.\n-     *\n@@ -88,7 +83,0 @@\n-     * This procedure is done twice: once without a security manager and once\n-     * again with a security manager - which means the test takes ~8secs to\n-     * run.\n-     *\n-     * Note that 8sec may not be enough to detect issues if there are some.\n-     * This is a best effort test.\n-     *\n@@ -112,16 +100,0 @@\n-\n-        \/\/ test without security\n-        System.out.println(\"No security\");\n-        test();\n-\n-        \/\/ test with security\n-        System.out.println(\"\\nWith security\");\n-        Policy.setPolicy(new Policy() {\n-            @Override\n-            public boolean implies(ProtectionDomain domain, Permission permission) {\n-                if (super.implies(domain, permission)) return true;\n-                \/\/ System.out.println(\"Granting \" + permission);\n-                return true; \/\/ all permissions\n-            }\n-        });\n-        System.setSecurityManager(new SecurityManager());\n","filename":"test\/jdk\/java\/util\/logging\/TestLogConfigurationDeadLockWithConf.java","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-import java.security.Permission;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -58,1 +55,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestLoggerBundleSync\n+ * @run main\/othervm TestLoggerBundleSync\n@@ -110,2 +107,0 @@\n-     * This test will run both with and without a security manager.\n-     *\n@@ -123,15 +118,0 @@\n-            \/\/ test without security\n-            System.out.println(\"No security\");\n-            test();\n-\n-            \/\/ test with security\n-            System.out.println(\"\\nWith security\");\n-            Policy.setPolicy(new Policy() {\n-                @Override\n-                public boolean implies(ProtectionDomain domain, Permission permission) {\n-                    if (super.implies(domain, permission)) return true;\n-                    \/\/ System.out.println(\"Granting \" + permission);\n-                    return true; \/\/ all permissions\n-                }\n-            });\n-            System.setSecurityManager(new SecurityManager());\n","filename":"test\/jdk\/java\/util\/logging\/TestLoggerBundleSync.java","additions":2,"deletions":22,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestLoggingWithMainAppContext\n+ * @run main\/othervm TestLoggingWithMainAppContext\n@@ -51,4 +51,0 @@\n-        \/\/ Set a security manager\n-        System.setSecurityManager(new SecurityManager());\n-        System.out.println(\"Now running with security manager\");\n-\n","filename":"test\/jdk\/java\/util\/logging\/TestLoggingWithMainAppContext.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestMainAppContext\n+ * @run main\/othervm TestMainAppContext\n@@ -77,2 +77,0 @@\n-\n-        System.setSecurityManager(new SecurityManager());\n@@ -84,1 +82,0 @@\n-\n","filename":"test\/jdk\/java\/util\/logging\/TestMainAppContext.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,520 @@\n+\/*\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.LogManager;\n+import java.util.logging.Logger;\n+import jdk.internal.access.JavaAWTAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n+\/*\n+ * @test\n+ * @bug 8017174 8010727 8019945\n+ * @summary  NPE when using Logger.getAnonymousLogger or\n+ *           LogManager.getLogManager().getLogger\n+ *\n+ * @modules java.base\/jdk.internal.access\n+ *          java.logging\n+ * @run main\/othervm TestUILoggerContext LoadingUIContext\n+ * @run main\/othervm TestUILoggerContext LoadingMain\n+ * @run main\/othervm TestUILoggerContext One\n+ * @run main\/othervm TestUILoggerContext Two\n+ * @run main\/othervm TestUILoggerContext Three\n+ * @run main\/othervm TestUILoggerContext Four\n+ * @run main\/othervm TestUILoggerContext Five\n+ * @run main\/othervm TestUILoggerContext Six\n+ * @run main\/othervm TestUILoggerContext Seven\n+ * @run main\/othervm TestUILoggerContext\n+ *\/\n+\n+\/\/ NOTE: We run in other VM in order to cause LogManager class to be loaded anew.\n+public class TestUILoggerContext {\n+\n+    \/\/ The bridge class initializes the logging system.\n+    \/\/ It stubs the UI context in order to simulate context changes.\n+    \/\/\n+    public static class Bridge {\n+\n+        private static class JavaAWTAccessStub implements JavaAWTAccess {\n+            boolean active = true;\n+\n+            private static class TestExc {\n+                private final Map<Object, Object> map = new HashMap<>();\n+                void put(Object key, Object v) { map.put(key, v); }\n+                Object get(Object key) { return map.get(key); }\n+                void remove(Object o) { map.remove(o); }\n+                public static TestExc exc(Object o) {\n+                    return TestExc.class.cast(o);\n+                }\n+            }\n+\n+            TestExc exc;\n+\n+            @Override\n+            public Object getAppletContext() { return active ? exc : null; }\n+        }\n+\n+        static final JavaAWTAccessStub javaAwtAccess = new JavaAWTAccessStub();\n+        public static void init() {\n+            SharedSecrets.setJavaAWTAccess(javaAwtAccess);\n+        }\n+\n+        public static void changeContext() {\n+            System.out.println(\"... Switching to a new UI context ...\");\n+            javaAwtAccess.active = true;\n+            javaAwtAccess.exc = new JavaAWTAccessStub.TestExc();\n+        }\n+\n+        public static void desactivate() {\n+            System.out.println(\"... Running with no UI context ...\");\n+            javaAwtAccess.exc = null;\n+            javaAwtAccess.active = false;\n+        }\n+\n+        public static class CustomAnonymousLogger extends Logger {\n+            public CustomAnonymousLogger() {\n+                this(\"\");\n+            }\n+            public CustomAnonymousLogger(String name) {\n+                super(null, null);\n+                System.out.println( \" LogManager: \" +LogManager.getLogManager());\n+                System.out.println( \" getLogger: \" +LogManager.getLogManager().getLogger(name));\n+                setParent(LogManager.getLogManager().getLogger(name));\n+            }\n+        }\n+\n+        public static class CustomLogger extends Logger {\n+            CustomLogger(String name) {\n+                super(name, null);\n+            }\n+        }\n+    }\n+\n+    public static enum TestCase {\n+        LoadingUIContext, LoadingMain, One, Two, Three, Four, Five, Six, Seven;\n+        public void test() {\n+            switch(this) {\n+                \/\/ When run - each of these two tests must be\n+                \/\/ run before any other tests and before each other.\n+                case LoadingUIContext: testLoadingUIContext(); break;\n+                case LoadingMain:   testLoadingMain(); break;\n+                case One:   testOne(); break;\n+                case Two:   testTwo(); break;\n+                case Three: testThree(); break;\n+                case Four:  testFour(); break;\n+                case Five:  testFive(); break;\n+                case Six:   testSix(); break;\n+                case Seven: testSeven(); break;\n+            }\n+        }\n+        public String describe() {\n+            switch(this) {\n+                case LoadingUIContext:\n+                    return \"Test that when the LogManager class is\"\n+                        + \" loaded with UI context first,\"\n+                        + \"\\n all LoggerContexts are correctly initialized\";\n+                case LoadingMain:\n+                    return \"Test that when the LogManager class is\"\n+                        + \" loaded in  the main thread first,\"\n+                        + \"\\n all LoggerContexts are correctly initialized\";\n+                case One:\n+                    return \"Test that Logger.getAnonymousLogger()\"\n+                        + \" and new CustomAnonymousLogger() don't throw NPE\";\n+                case Two:\n+                    return \"Test that Logger.getLogger(\\\"\\\")\"\n+                            + \" does not return null nor throws NPE\";\n+                case Three:\n+                    return \"Test that LogManager.getLogManager().getLogger(\\\"\\\")\"\n+                            + \" does not return null nor throws NPE\";\n+                case Four:\n+                    return \"Test that Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)\"\n+                            + \" does not return null,\\n and that\"\n+                            + \" new CustomAnonymousLogger(Logger.GLOBAL_LOGGER_NAME)\"\n+                            + \" does not throw NPE\";\n+                case Five:\n+                    return \"Test that LogManager.getLogManager().getLogger(Logger.GLOBAL_LOGGER_NAME)\"\n+                            + \"\\n does not return null nor throws NPE\";\n+                case Six:\n+                    return \"Test that manager.getLogger(Logger.GLOBAL_LOGGER_NAME)\"\n+                            + \" returns null\\n when manager is not the default\"\n+                            + \" LogManager instance.\\n\"\n+                            + \"Test adding a new logger named \\\"global\\\" in that\"\n+                            + \" non default instance.\";\n+                case Seven: return \"Test that manager.getLogger(\\\"\\\")\"\n+                            + \" returns null\\n when manager is not the default\"\n+                            + \" LogManager instance.\\n\"\n+                            + \"Test adding a new logger named \\\"\\\" in that\"\n+                            + \" non default instance.\";\n+                default: return \"Undefined\";\n+            }\n+        }\n+    };\n+\n+    \/**\n+     * @param args the command line arguments\n+     *\/\n+    public static void main(String[] args) {\n+        Bridge.init();\n+        EnumSet<TestCase> tests = EnumSet.noneOf(TestCase.class);\n+        for (String arg : args) {\n+            tests.add(TestCase.valueOf(arg));\n+        }\n+        if (args.length == 0) {\n+            tests = EnumSet.complementOf(EnumSet.of(TestCase.LoadingMain));\n+        }\n+        final EnumSet<TestCase> loadingTests =\n+            EnumSet.of(TestCase.LoadingUIContext, TestCase.LoadingMain);\n+        int testrun = 0;\n+        for (TestCase test : tests) {\n+            if (loadingTests.contains(test)) {\n+                if (testrun > 0) {\n+                    throw new UnsupportedOperationException(\"Test case \"\n+                          + test + \" must be executed first!\");\n+                }\n+            }\n+            System.out.println(\"Testing \"+ test+\": \");\n+            System.out.println(test.describe());\n+            try {\n+                test.test();\n+            } catch (Exception x) {\n+               throw new Error(String.valueOf(test)\n+                   + \"failed: \"+x+\"\\n \"+\"FAILED: \"+test.describe()+\"\\n\", x);\n+            } finally {\n+                testrun++;\n+            }\n+            Bridge.changeContext();\n+            System.out.println(\"PASSED: \"+ test);\n+        }\n+    }\n+\n+    public static void testLoadingUIContext() {\n+        Bridge.changeContext();\n+\n+        Logger bar = new Bridge.CustomLogger(\"com.foo.Bar\");\n+        LogManager.getLogManager().addLogger(bar);\n+        assertNotNull(bar.getParent());\n+        testParent(bar);\n+        testParent(LogManager.getLogManager().getLogger(\"global\"));\n+        testParent(LogManager.getLogManager().getLogger(bar.getName()));\n+\n+        Bridge.desactivate();\n+\n+        Logger foo = new Bridge.CustomLogger(\"com.foo.Foo\");\n+        boolean b = LogManager.getLogManager().addLogger(foo);\n+        assertEquals(Boolean.TRUE, Boolean.valueOf(b));\n+        assertNotNull(foo.getParent());\n+        testParent(foo);\n+        testParent(LogManager.getLogManager().getLogger(\"global\"));\n+        testParent(LogManager.getLogManager().getLogger(foo.getName()));\n+    }\n+\n+    public static void testLoadingMain() {\n+        Bridge.desactivate();\n+\n+        Logger bar = new Bridge.CustomLogger(\"com.foo.Bar\");\n+        LogManager.getLogManager().addLogger(bar);\n+        assertNotNull(bar.getParent());\n+        testParent(bar);\n+        testParent(LogManager.getLogManager().getLogger(\"global\"));\n+        testParent(LogManager.getLogManager().getLogger(bar.getName()));\n+\n+        Bridge.changeContext();\n+\n+        Logger foo = new Bridge.CustomLogger(\"com.foo.Foo\");\n+        boolean b = LogManager.getLogManager().addLogger(foo);\n+        assertEquals(Boolean.TRUE, Boolean.valueOf(b));\n+        assertNotNull(foo.getParent());\n+        testParent(foo);\n+        testParent(LogManager.getLogManager().getLogger(\"global\"));\n+        testParent(LogManager.getLogManager().getLogger(foo.getName()));\n+\n+    }\n+\n+    public static void testOne() {\n+        for (int i=0; i<3 ; i++) {\n+            Logger logger1 = Logger.getAnonymousLogger();\n+            Logger logger1b = Logger.getAnonymousLogger();\n+            Bridge.changeContext();\n+            Logger logger2 = Logger.getAnonymousLogger();\n+            Logger logger2b = Logger.getAnonymousLogger();\n+            Bridge.changeContext();\n+            Logger logger3 = new Bridge.CustomAnonymousLogger();\n+            Logger logger3b = new Bridge.CustomAnonymousLogger();\n+            Bridge.changeContext();\n+            Logger logger4 = new Bridge.CustomAnonymousLogger();\n+            Logger logger4b = new Bridge.CustomAnonymousLogger();\n+        }\n+    }\n+\n+\n+    public static void testTwo() {\n+        for (int i=0; i<3 ; i++) {\n+            Logger logger1 = Logger.getLogger(\"\");\n+            Logger logger1b = Logger.getLogger(\"\");\n+            assertNotNull(logger1);\n+            assertNotNull(logger1b);\n+            assertEquals(logger1, logger1b);\n+            Bridge.changeContext();\n+            Logger logger2 = Logger.getLogger(\"\");\n+            Logger logger2b = Logger.getLogger(\"\");\n+            assertNotNull(logger2);\n+            assertNotNull(logger2b);\n+            assertEquals(logger2, logger2b);\n+            assertEquals(logger1, logger2);\n+        }\n+    }\n+\n+    public static void testThree() {\n+        for (int i=0; i<3 ; i++) {\n+            Logger logger1 = LogManager.getLogManager().getLogger(\"\");\n+            Logger logger1b = LogManager.getLogManager().getLogger(\"\");\n+            assertNotNull(logger1);\n+            assertNotNull(logger1b);\n+            assertEquals(logger1, logger1b);\n+            Bridge.changeContext();\n+            Logger logger2 = LogManager.getLogManager().getLogger(\"\");\n+            Logger logger2b = LogManager.getLogManager().getLogger(\"\");\n+            assertNotNull(logger2);\n+            assertNotNull(logger2b);\n+            assertEquals(logger2, logger2b);\n+            assertEquals(logger1, logger2);\n+        }\n+    }\n+\n+    public static void testFour() {\n+        for (int i=0; i<3 ; i++) {\n+            Logger logger1 = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            Logger logger1b = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            assertNotNull(logger1);\n+            assertNotNull(logger1b);\n+            assertEquals(logger1, logger1b);\n+            Bridge.changeContext();\n+\n+            Logger logger2 = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            Logger logger2b = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            assertNotNull(logger2);\n+            assertNotNull(logger2b);\n+            assertEquals(logger2, logger2b);\n+\n+            assertEquals(logger1, logger2);\n+\n+            Bridge.changeContext();\n+            Logger logger3 = new Bridge.CustomAnonymousLogger(Logger.GLOBAL_LOGGER_NAME);\n+            Logger logger3b = new Bridge.CustomAnonymousLogger(Logger.GLOBAL_LOGGER_NAME);\n+            Bridge.changeContext();\n+            Logger logger4 = new Bridge.CustomAnonymousLogger(Logger.GLOBAL_LOGGER_NAME);\n+            Logger logger4b = new Bridge.CustomAnonymousLogger(Logger.GLOBAL_LOGGER_NAME);\n+        }\n+    }\n+\n+    public static void testFive() {\n+        for (int i=0; i<3 ; i++) {\n+            Logger logger1 = LogManager.getLogManager().getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            Logger logger1b = LogManager.getLogManager().getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            assertNotNull(logger1);\n+            assertNotNull(logger1b);\n+            assertEquals(logger1, logger1b);\n+\n+            Bridge.changeContext();\n+\n+            Logger logger2 = LogManager.getLogManager().getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            Logger logger2b = LogManager.getLogManager().getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            assertNotNull(logger2);\n+            assertNotNull(logger2b);\n+            assertEquals(logger2, logger2b);\n+\n+            assertEquals(logger1, logger2);\n+        }\n+    }\n+\n+    \/**\n+     * This test is designed to test the behavior of additional LogManager instances.\n+     * It must be noted that if the security manager is off, then calling\n+     * Bridge.changeContext() has actually no effect.\n+     * off.\n+     **\/\n+    public static void testSix() {\n+        for (int i=0; i<3 ; i++) {\n+            Bridge.desactivate();\n+            LogManager manager = new LogManager() {};\n+            Logger logger1 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            Logger logger1b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            assertNull(logger1);\n+            assertNull(logger1b);\n+            Logger global = new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);\n+            manager.addLogger(global);\n+            Logger logger2 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            Logger logger2b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            assertNotNull(logger2);\n+            assertNotNull(logger2b);\n+            assertEquals(logger2, global);\n+            assertEquals(logger2b, global);\n+            assertNull(manager.getLogger(\"\"));\n+            assertNull(manager.getLogger(\"\"));\n+\n+            for (int j = 0; j<3; j++) {\n+                Bridge.changeContext();\n+\n+                \/\/ this is not a supported configuration:\n+                \/\/ We are in an UI context with several log managers.\n+                \/\/ We however need to check our assumptions...\n+\n+                \/\/ UI context => root logger and global logger should also be null.\n+\n+                Logger expected = global;\n+                Logger logger3 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+                Logger logger3b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+                assertEquals(expected, logger3);\n+                assertEquals(expected, logger3b);\n+                Logger global2 = new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);\n+                manager.addLogger(global2);\n+                Logger logger4 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+                Logger logger4b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+                assertNotNull(logger4);\n+                assertNotNull(logger4b);\n+                expected = global;\n+                assertEquals(logger4,  expected);\n+                assertEquals(logger4b, expected);\n+\n+                Logger logger5 = manager.getLogger(\"\");\n+                Logger logger5b = manager.getLogger(\"\");\n+                Logger expectedRoot = null;\n+                assertEquals(logger5, expectedRoot);\n+                assertEquals(logger5b, expectedRoot);\n+            }\n+\n+        }\n+    }\n+\n+    \/**\n+     * This test is designed to test the behavior of additional LogManager instances.\n+     * It must be noted that if the security manager is off, then calling\n+     * Bridge.changeContext() has actually no effect.\n+     **\/\n+    public static void testSeven() {\n+        for (int i=0; i<3 ; i++) {\n+            Bridge.desactivate();\n+            LogManager manager = new LogManager() {};\n+            Logger logger1 = manager.getLogger(\"\");\n+            Logger logger1b = manager.getLogger(\"\");\n+            assertNull(logger1);\n+            assertNull(logger1b);\n+            Logger global = new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);\n+            manager.addLogger(global);\n+            Logger logger2 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            Logger logger2b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+            assertNotNull(logger2);\n+            assertNotNull(logger2b);\n+            assertEquals(logger2, global);\n+            assertEquals(logger2b, global);\n+            Logger logger3 = manager.getLogger(\"\");\n+            Logger logger3b = manager.getLogger(\"\");\n+            assertNull(logger3);\n+            assertNull(logger3b);\n+            Logger root = new Bridge.CustomLogger(\"\");\n+            manager.addLogger(root);\n+            Logger logger4 = manager.getLogger(\"\");\n+            Logger logger4b = manager.getLogger(\"\");\n+            assertNotNull(logger4);\n+            assertNotNull(logger4b);\n+            assertEquals(logger4, root);\n+            assertEquals(logger4b, root);\n+\n+            for (int j = 0 ; j < 3 ; j++) {\n+                Bridge.changeContext();\n+\n+                \/\/ this is not a supported configuration:\n+                \/\/ We are in an UI context with several log managers.\n+                \/\/ We however need to check our assumptions...\n+\n+                \/\/ UI context => root logger and global logger should also be null.\n+\n+                Logger logger5 = manager.getLogger(\"\");\n+                Logger logger5b = manager.getLogger(\"\");\n+                Logger expectedRoot = root;\n+                assertEquals(logger5, expectedRoot);\n+                assertEquals(logger5b, expectedRoot);\n+\n+                assertEquals(global, manager.getLogger(Logger.GLOBAL_LOGGER_NAME));\n+\n+                Logger global2 = new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);\n+                manager.addLogger(global2);\n+                Logger logger6 = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+                Logger logger6b = manager.getLogger(Logger.GLOBAL_LOGGER_NAME);\n+                Logger expectedGlobal = global;\n+\n+                assertNotNull(logger6);\n+                assertNotNull(logger6b);\n+                assertEquals(logger6, expectedGlobal);\n+                assertEquals(logger6b, expectedGlobal);\n+                assertEquals(root, manager.getLogger(\"\"));\n+\n+                Logger root2 = new Bridge.CustomLogger(\"\");\n+                manager.addLogger(root2);\n+                expectedRoot = root;\n+                Logger logger7 = manager.getLogger(\"\");\n+                Logger logger7b = manager.getLogger(\"\");\n+                assertNotNull(logger7);\n+                assertNotNull(logger7b);\n+                assertEquals(logger7, expectedRoot);\n+                assertEquals(logger7b, expectedRoot);\n+            }\n+        }\n+    }\n+\n+    public static void testParent(Logger logger) {\n+        Logger l = logger;\n+        while (l.getParent() != null) {\n+            l = l.getParent();\n+        }\n+        assertEquals(\"\", l.getName());\n+    }\n+\n+    public static class TestError extends RuntimeException {\n+        public TestError(String msg) {\n+            super(msg);\n+        }\n+    }\n+\n+    public static void assertNotNull(Object obj) {\n+        if (obj == null) throw new NullPointerException();\n+    }\n+\n+    public static void assertNull(Object obj) {\n+        if (obj != null) throw new TestError(\"Null expected, got \"+obj);\n+    }\n+\n+    public static void assertEquals(Object o1, Object o2) {\n+        if (o1 != o2) {\n+            throw new TestError(o1 + \" != \" + o2);\n+        }\n+    }\n+\n+    public static void assertNotEquals(Object o1, Object o2) {\n+        if (o1 == o2) {\n+            throw new TestError(o1 + \" == \" + o2);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/logging\/TestUILoggerContext.java","additions":520,"deletions":0,"binary":false,"changes":520,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-    public void runWithoutSecurityManager() throws Exception {\n+    public void run() throws Exception {\n@@ -98,14 +98,0 @@\n-\n-    @Test\n-    public void runWithSecurityManager() throws Exception {\n-        int exitValue = executeTestJava(\n-                \"-Djava.security.manager\",\n-                \"-cp\", PKG_DEST_DIR.toString(),\n-                \"--module-path\", MOD_DEST_DIR.toString(),\n-                \"--add-modules\", String.join(\",\", modules),\n-                \"p3.test.ResourceBundleTest\")\n-                .outputTo(System.out)\n-                .errorTo(System.err)\n-                .getExitValue();\n-        assertTrue(exitValue == 0);\n-    }\n","filename":"test\/jdk\/java\/util\/logging\/modules\/GetResourceBundleTest.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n- * @run main\/othervm UserDefaultControlTest false\n- * @run main\/othervm -Djava.security.manager=allow UserDefaultControlTest true\n+ * @run main\/othervm UserDefaultControlTest\n@@ -34,3 +33,1 @@\n-import java.io.*;\n-import java.lang.reflect.*;\n-import java.net.*;\n+import java.io.IOException;\n@@ -44,1 +41,0 @@\n-        boolean smExists = Boolean.valueOf(args[0]);\n@@ -46,8 +42,1 @@\n-        if (smExists) {\n-            System.out.println(\"test with security manager present:\");\n-            System.setSecurityManager(new SecurityManager());\n-        } else {\n-            System.out.println(\"test without security manager present:\");\n-        }\n-\n-        test(smExists);\n+        test();\n@@ -71,18 +60,2 @@\n-    private static void test(boolean smExists) {\n-        ResourceBundle rb;\n-\n-        try {\n-            rb = ResourceBundle.getBundle(\"com.foo.XmlRB\", Locale.ROOT);\n-            if (smExists) {\n-                throw new RuntimeException(\"getBundle did not throw \" +\n-                    \"MissingResourceException with a security manager\");\n-            }\n-        } catch (MissingResourceException e) {\n-            if (smExists) {\n-                \/\/ failed successfully\n-                return;\n-            } else {\n-                throw e;\n-            }\n-        }\n-\n+    private static void test() {\n+        ResourceBundle rb = ResourceBundle.getBundle(\"com.foo.XmlRB\", Locale.ROOT);\n","filename":"test\/jdk\/java\/util\/spi\/ResourceBundleControlProvider\/UserDefaultControlTest.java","additions":6,"deletions":33,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Djava.security.manager=allow ToolProviderTest\n+ * @run main\/othervm ToolProviderTest\n@@ -47,11 +47,0 @@\n-\n-        System.out.println(\"Validate an NPE is thrown with null arguments\");\n-\n-        testNullArgs();\n-\n-        System.out.println(\"test without security manager present:\");\n-        test();\n-\n-        System.setSecurityManager(new SecurityManager());\n-\n-        System.out.println(\"test with security manager present:\");\n@@ -59,0 +48,1 @@\n+        testNullArgs();\n@@ -105,4 +95,0 @@\n-        public TestProvider() {\n-            checkPrivileges();\n-        }\n-\n@@ -117,16 +103,0 @@\n-\n-        private void checkPrivileges() {\n-            boolean haveSecurityManager = (System.getSecurityManager() != null);\n-            try {\n-                \/\/ validate appropriate privileges by checking access to a\n-                \/\/ system property\n-                System.getProperty(\"java.home\");\n-                if (haveSecurityManager) {\n-                    throw new Error(\"exception not thrown\");\n-                }\n-            } catch (SecurityException e) {\n-                if (!haveSecurityManager) {\n-                    throw new Error(\"unexpected exception: \" + e);\n-                }\n-            }\n-        }\n","filename":"test\/jdk\/java\/util\/spi\/ToolProviderTest.java","additions":3,"deletions":33,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant { \n-    permission java.lang.RuntimePermission \"accessibilityProvider\";\n-    permission java.io.FilePermission \"*\", \"read,write,delete\";\n-};\n","filename":"test\/jdk\/javax\/accessibility\/AccessibilityProvider\/accessibilityProvider.sp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-  sh -xc \"$JAVA $SECURITY_MANAGER -Djavax.accessibility.assistive_technologies=$PROVIDER1$COMMA$PROVIDER2 -cp $CP Load $1 $2 $3\" 2>&1\n+  sh -xc \"$JAVA -Djavax.accessibility.assistive_technologies=$PROVIDER1$COMMA$PROVIDER2 -cp $CP Load $1 $2 $3\" 2>&1\n@@ -81,7 +81,0 @@\n-# start using security manager\n-SECURITY_MANAGER=\"-Djava.security.manager -Djava.security.policy=$TESTSRC\/accessibilityProvider.sp\"\n-\n-# find one provider (with security manager)\n-go pass $PROVIDER1\n-SECURITY_MANAGER=\n-\n","filename":"test\/jdk\/javax\/accessibility\/AccessibilityProvider\/basic.sh","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,29 +27,3 @@\n- * @summary Test verifies that ImageIO checks all permissions required for\n- *           the file cache usage:\n- *\n- *          no policy file: No security restrictions.\n- *             Expected result: ImageIO creates file-cached stream.\n- *\n- *          w.policy: the case when we have read and write permissions\n- *              for java.io.temp directory but have only write permission\n- *              for a temp file.\n- *             Expected result: ImageIO create a memory-cached stream\n- *              image output stream.\n- *\n- *          rw.policy: the case when we  have read and write permissions\n- *              for java.io.temp directory but have only read and write\n- *              permission for a temp cache file.\n- *             Expected result: ImageIO creates a memory-cached stream\n- *              because temporary cache file can not be deleted.\n- *\n- *          rwd.policy: the case when we  have read and write permissions\n- *              for java.io.temp directory and have all required permissions\n- *             (read, write, and delete) for a temporary cache file.\n- *             Expected result: ImageIO creates file-cached stream.\n- *\n- *           -Djava.security.debug=access can be used to verify file permissions.\n- *\n- * @run     main CachePermissionsTest true\n- * @run     main\/othervm -Djava.security.manager=allow CachePermissionsTest false w.policy\n- * @run     main\/othervm -Djava.security.manager=allow CachePermissionsTest false rw.policy\n- * @run     main\/othervm -Djava.security.manager=allow CachePermissionsTest true rwd.policy\n+ * @summary Test verifies that ImageIO uses cache if requested.\n+ * @run     main\/othervm CachePermissionsTest true\n+ * @run     main\/othervm CachePermissionsTest false\n@@ -58,1 +32,0 @@\n-import java.io.File;\n@@ -62,1 +35,0 @@\n-\n@@ -65,1 +37,0 @@\n-\n@@ -67,1 +38,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -72,1 +43,1 @@\n-        ImageIO.setUseCache(true);\n+        ImageIO.setUseCache(isFileCacheExpected);\n@@ -76,11 +47,0 @@\n-        if (args.length > 1) {\n-            String testsrc = System.getProperty(\"test.src\", \".\");\n-            String policy = testsrc + File.separator + args[1];\n-\n-            System.out.println(\"Policy file: \" + policy);\n-            System.setProperty(\"java.security.policy\", policy);\n-\n-            System.out.println(\"Install security manager...\");\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n@@ -89,2 +49,1 @@\n-        try {\n-            ImageOutputStream ios = ImageIO.createImageOutputStream(baos);\n+        ImageOutputStream ios = ImageIO.createImageOutputStream(baos);\n@@ -92,2 +51,2 @@\n-            boolean isFileCache = ios.isCachedFile();\n-            System.out.println(\"Is file cache used: \" + isFileCache);\n+        boolean isFileCache = ios.isCachedFile();\n+        System.out.println(\"Is file cache used: \" + isFileCache);\n@@ -95,3 +54,3 @@\n-            if (isFileCache !=isFileCacheExpected) {\n-                System.out.println(\"WARNING: file chace usage is not as expected!\");\n-            }\n+        if (isFileCache != isFileCacheExpected) {\n+            System.out.println(\"WARNING: file cache usage is not as expected!\");\n+        }\n@@ -99,1 +58,1 @@\n-            System.out.println(\"Verify data writing...\");\n+        System.out.println(\"Verify data writing...\");\n@@ -101,2 +60,2 @@\n-                ios.writeInt(i);\n-            }\n+            ios.writeInt(i);\n+        }\n@@ -104,2 +63,2 @@\n-            System.out.println(\"Verify data reading...\");\n-            ios.seek(0L);\n+        System.out.println(\"Verify data reading...\");\n+        ios.seek(0L);\n@@ -107,5 +66,4 @@\n-            for (int i = 0; i < 8192; i++) {\n-                int j = ios.readInt();\n-                if (i != j) {\n-                    throw new RuntimeException(\"Wrong data in the stream \" + j + \" instead of \" + i);\n-                }\n+        for (int i = 0; i < 8192; i++) {\n+            int j = ios.readInt();\n+            if (i != j) {\n+                throw new RuntimeException(\"Wrong data in the stream \" + j + \" instead of \" + i);\n@@ -113,16 +71,0 @@\n-\n-            System.out.println(\"Verify stream closing...\");\n-            ios.close();\n-        } catch (IOException e) {\n-            \/*\n-             * Something went wrong?\n-             *\/\n-            throw new RuntimeException(\"Test FAILED.\", e);\n-        } catch (SecurityException e) {\n-            \/*\n-             * We do not expect security execptions here:\n-             * we there are any security restrition, ImageIO\n-             * should swith to memory-cached streams, instead\n-             * of using file cache.\n-             *\/\n-            throw new RuntimeException(\"Test FAILED.\", e);\n@@ -130,0 +72,3 @@\n+\n+        System.out.println(\"Verify stream closing...\");\n+        ios.close();\n","filename":"test\/jdk\/javax\/imageio\/CachePremissionsTest\/CachePermissionsTest.java","additions":24,"deletions":79,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-      permission java.util.PropertyPermission \"test.classes\", \"read\";\n-      permission java.util.PropertyPermission \"java.io.tmpdir\", \"read\";\n-      permission java.io.FilePermission \"${java.io.tmpdir}${\/}*\", \"read, write\";\n-};\n","filename":"test\/jdk\/javax\/imageio\/CachePremissionsTest\/rw.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-      permission java.util.PropertyPermission \"test.classes\", \"read\";\n-      permission java.util.PropertyPermission \"java.io.tmpdir\", \"read\";\n-      permission java.io.FilePermission \"${java.io.tmpdir}${\/}*\", \"read, write, delete\";\n-};\n","filename":"test\/jdk\/javax\/imageio\/CachePremissionsTest\/rwd.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-      permission java.util.PropertyPermission \"test.classes\", \"read\";\n-      permission java.util.PropertyPermission \"java.io.tmpdir\", \"read\";\n-      permission java.io.FilePermission \"${java.io.tmpdir}${\/}*\", \"write\";\n-};\n","filename":"test\/jdk\/javax\/imageio\/CachePremissionsTest\/w.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#          Test both cases with and without a security manager.\n@@ -80,6 +79,0 @@\n-echo \"Test classpath jar with security manager ..\"\n-$JAVA -Djava.security.manager -cp .${CPSEP}${TESTDIR}${CPSEP}${PLUGINDIR}\/simp.jar simptest.TestSIMPPlugin\n-if [ $? -ne 0 ]; then\n-    exception=1\n-    echo \"Classpath + SecurityManager test failed: exception thrown!\"\n-fi\n@@ -96,7 +89,0 @@\n-echo \"Test modular jar with security manager ..\"\n-$JAVA -Djava.security.manager --module-path $PLUGINDIR -cp $TESTDIR simptest.TestSIMPPlugin\n-if [ $? -ne 0 ]; then\n-    exception=1\n-    echo \"modular jar with security manager test failed: exception thrown!\"\n-fi\n-\n","filename":"test\/jdk\/javax\/imageio\/plugins\/external_plugin_tests\/TestClassPathPlugin.sh","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,17 +258,0 @@\n-\n-# Update policy file to grant read permission\n-echo \"grant codeBase \\\"file:${TEST_CODEBASE}\\\" {\" > classpath.policy\n-echo \" permission java.io.FilePermission \\\"${TEST_PLUGIN_JAR}\\\", \\\"read\\\";\" >> classpath.policy\n-echo \" permission java.util.PropertyPermission \\\"test.5076692.property\\\", \\\"read\\\";\" >> classpath.policy\n-echo \"};\" >> classpath.policy\n-echo \"grant codeBase \\\"file:${TEST_PLUGIN_JAR}\\\" {\" >> classpath.policy\n-echo \" permission java.util.PropertyPermission \\\"test.5076692.property\\\", \\\"read\\\";\" >> classpath.policy\n-echo \"};\" >> classpath.policy\n-\n-echo ---------------------\n-echo --- Applet policy ---\n-echo ---------------------\n-cat classpath.policy\n-echo ---------------------\n-echo\n-\n@@ -285,3 +268,1 @@\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} -cp \".${PATHSEP}${TEST_PLUGIN_JAR}\" \\\n-    -Djava.security.policy==classpath.policy \\\n-    -Djava.security.manager IIOPluginTest\n+${TESTJAVA}\/bin\/java ${TESTVMOPTS} -cp \".${PATHSEP}${TEST_PLUGIN_JAR}\" IIOPluginTest\n","filename":"test\/jdk\/javax\/imageio\/spi\/AppletContextTest\/BadPluginConfigurationTest.sh","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import java.util.ServiceConfigurationError;\n@@ -32,9 +33,10 @@\n-        SecurityManager sm = System.getSecurityManager();\n-        System.out.println(\"Sm is \" + sm);\n-\n-        String formatNames[] = ImageIO.getReaderFormatNames();\n-        String readerMimeTypes[] = ImageIO.getReaderMIMETypes();\n-\n-        if (!isPresent(dummyformatNames, formatNames) ||\n-            !isPresent(dummymimeType, readerMimeTypes)) {\n-            throw new RuntimeException(\"No test plugin available!\");\n+        try {\n+            String formatNames[] = ImageIO.getReaderFormatNames();\n+            String readerMimeTypes[] = ImageIO.getReaderMIMETypes();\n+            if (!isPresent(dummyformatNames, formatNames) ||\n+                !isPresent(dummymimeType, readerMimeTypes)) {\n+                throw new RuntimeException(\"No test plugin available!\");\n+            }\n+        } catch (ServiceConfigurationError sce) {\n+            System.out.println(\"Expected ServiceConfigurationError \\n\" + sce);\n+            System.out.println(\"Test Passed\");\n","filename":"test\/jdk\/javax\/imageio\/spi\/AppletContextTest\/IIOPluginTest.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * JDK version when the application is run with a security manager and the\n- * test codebase has the java permission to read the \"java.runtime.version\"\n- * system property.\n+ * JDK version.\n@@ -56,2 +54,0 @@\n-            \"-Djava.security.manager\",\n-            \"-Djava.security.policy==\" + testSrc + File.separator + \"policy\",\n","filename":"test\/jdk\/javax\/management\/ImplementationVersion\/ImplVersionTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-grant codebase \"file:${test.classes}\" {\n-  permission java.util.PropertyPermission \"java.runtime.version\", \"read\";\n-  permission javax.management.MBeanServerPermission \"createMBeanServer\";\n-  permission javax.management.MBeanPermission \"javax.management.MBeanServerDelegate#ImplementationVersion[JMImplementation:type=MBeanServerDelegate]\", \"getAttribute\";\n-};\n","filename":"test\/jdk\/javax\/management\/ImplementationVersion\/policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,164 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test AnnotationSecurityTest.java\n- * @bug 6366543 6370080\n- * @summary Test that having a security manager doesn't trigger a\n- *          NotCompliantMBeanException\n- * @author Daniel Fuchs, Yves Joan\n- *\n- * @modules java.desktop\n- *          java.management\n- *\n- * @run clean AnnotationSecurityTest Described UnDescribed DescribedMBean\n- *            UnDescribedMBean SqeDescriptorKey DescribedMX DescribedMXBean\n- * @run build AnnotationSecurityTest Described UnDescribed DescribedMBean\n- *            UnDescribedMBean SqeDescriptorKey DescribedMX DescribedMXBean\n- * @run main\/othervm -Djava.security.manager=allow AnnotationSecurityTest\n- *\/\n-\/\/ -Djava.security.debug=access,domain,policy\n-\n-import java.io.File;\n-import java.io.IOException;\n-\n-import java.lang.management.ManagementFactory;\n-import java.lang.reflect.Method;\n-import javax.management.MBeanServer;\n-import javax.management.ObjectName;\n-\/**\n- *\n- * @author Sun Microsystems, 2005 - All rights reserved.\n- *\/\n-\n-public class AnnotationSecurityTest {\n-\n-    \/** Creates a new instance of AnnotationSecurityTest *\/\n-    public AnnotationSecurityTest() {\n-    }\n-\n-    public static void main(String[] argv) {\n-        AnnotationSecurityTest test = new AnnotationSecurityTest();\n-        test.run();\n-    }\n-\n-\n-    public void run() {\n-        try {\n-            final String testSrc = System.getProperty(\"test.src\");\n-            final String codeBase = System.getProperty(\"test.classes\");\n-            final String policy = testSrc + File.separator +\n-                    \"AnnotationSecurityTest.policy\";\n-            final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n-            final File pf = new File(policy);\n-            if (!pf.exists())\n-                throw new IOException(\"policy file not found: \" + policy);\n-            if (!pf.canRead())\n-                throw new IOException(\"policy file not readable: \" + policy);\n-\n-            System.out.println(\"Policy=\"+policy);\n-            System.setProperty(\"java.security.policy\",policy);\n-            System.setSecurityManager(new SecurityManager());\n-\n-            \/\/ We check that 6370080 is fixed.\n-            \/\/\n-            try {\n-                final Method m1 =\n-                        DescribedMBean.class.getMethod(\"getStringProp\");\n-                final Method m2 =\n-                        DescribedMBean.class.getMethod(\"setStringProp\",\n-                            String.class);\n-                m1.getAnnotations();\n-                m2.getAnnotations();\n-            } catch (SecurityException x) {\n-                System.err.println(\"ERROR: 6370080 not fixed.\");\n-                throw new IllegalStateException(\"ERROR: 6370080 not fixed.\",x);\n-            }\n-\n-            \/\/ Do the test: we should be able to register these 3 MBeans....\n-            \/\/ We now test that the behaviour described in 6366543 does no\n-            \/\/ longer appears now that 6370080 is fixed.\n-            \/\/\n-\n-            final ObjectName name1 =\n-                    new ObjectName(\"defaultDomain:class=UnDescribed\");\n-            UnDescribed unDescribedMBean = new UnDescribed();\n-            System.out.println(\"\\nWe register an MBean where DescriptorKey is \" +\n-                    \"not used at all\");\n-            mbs.registerMBean(unDescribedMBean, name1);\n-            System.out.println(\"\\n\\tOK - The MBean \"\n-                    + name1 + \" is registered = \" + mbs.isRegistered(name1));\n-\n-            final ObjectName name2 =\n-                    new ObjectName(\"defaultDomain:class=Described\");\n-            final Described describedMBean = new Described();\n-\n-            System.out.println(\"\\nWe register an MBean with exactly the \" +\n-                    \"same management\"\n-                    + \" interface as above and where DescriptorKey is used.\");\n-            mbs.registerMBean(describedMBean, name2);\n-            System.out.println(\"\\n\\tOK - The MBean \"\n-                    + name2 + \" is registered = \" + mbs.isRegistered(name2));\n-\n-            final ObjectName name3 =\n-                    new ObjectName(\"defaultDomain:class=DescribedMX\");\n-            final DescribedMX describedMXBean = new DescribedMX();\n-\n-            System.out.println(\"\\nWe register an MXBean with exactly the \" +\n-                    \"same management\"\n-                    + \" interface as above and where DescriptorKey is used.\");\n-            mbs.registerMBean(describedMXBean, name3);\n-            System.out.println(\"\\n\\tOK - The MXBean \"\n-                    + name3 + \" is registered = \" + mbs.isRegistered(name3));\n-\n-            System.out.println(\"\\nAll three MBeans correctly registered...\");\n-\n-\n-            \/\/ We check that we don't have getAttribute() permission - as\n-            \/\/ it's been voluntarily omitted from our policy file.\n-            \/\/ If we don't get the Security Exception there is probably\n-            \/\/ a security configuration pb...\n-            \/\/\n-            try {\n-                \/\/ We don't have getAttribute() permission, so this must fail.\n-                System.err.println(\"Trying getStringProp() - should fail\");\n-                mbs.getAttribute(name1,\"StringProp\");\n-                System.err.println(\"ERROR: didn't get expected SecurityException\"\n-                        +\"\\n\\t check security configuration & policy file: \"+\n-                        policy);\n-                throw new RuntimeException(\"getStringProp() did not get a \" +\n-                        \"SecurityException!\");\n-            } catch (SecurityException x) {\n-                \/\/ OK!\n-                System.err.println(\"getStringProp() - failed\");\n-            }\n-\n-         } catch (Exception t) {\n-            t.printStackTrace();\n-            if (t instanceof RuntimeException)\n-                throw (RuntimeException)t;\n-            else throw new RuntimeException(t);\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/javax\/management\/Introspector\/AnnotationSecurityTest.java","additions":0,"deletions":164,"binary":false,"changes":164,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-grant {\n-     \/\/ JMX permissions\n-    permission javax.management.MBeanServerPermission \"*\";\n-    \/\/ Add permission to create and register 1 specific Described MBean\n-    permission javax.management.MBeanPermission \"Described#-[defaultDomain:class=Described]\", \"instantiate\";\n-    permission javax.management.MBeanPermission \"Described#-[defaultDomain:class=Described]\", \"registerMBean\";\n-    \/\/ Add permission to create and register 1 specific Described MXBean\n-    permission javax.management.MBeanPermission \"DescribedMX#-[defaultDomain:class=DescribedMX]\", \"instantiate\";\n-    permission javax.management.MBeanPermission \"DescribedMX#-[defaultDomain:class=DescribedMX]\", \"registerMBean\";\n-    \/\/ Add permission to create and register 1 specific UnDescribed MBean\n-    permission javax.management.MBeanPermission \"UnDescribed#-[defaultDomain:class=UnDescribed]\", \"instantiate\";\n-    permission javax.management.MBeanPermission \"UnDescribed#-[defaultDomain:class=UnDescribed]\", \"registerMBean\";\n-    \/\/\n-    permission javax.management.MBeanTrustPermission \"*\";\n-};\n","filename":"test\/jdk\/javax\/management\/Introspector\/AnnotationSecurityTest.policy","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @run main\/othervm\/java.security.policy=policy  GetAllDescriptorsTest\n+ * @run main\/othervm GetAllDescriptorsTest\n","filename":"test\/jdk\/javax\/management\/modelmbean\/ModelMBeanInfoSupport\/GetAllDescriptorsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run main\/othervm\/java.security.policy=policy  SimpleModelMBeanCommand\n+ * @run main\/othervm SimpleModelMBeanCommand\n","filename":"test\/jdk\/javax\/management\/modelmbean\/SimpleModelMBean\/SimpleModelMBeanCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,14 +0,0 @@\n-grant {\n-  permission javax.management.MBeanServerPermission \"createMBeanServer\";\n-  permission javax.management.MBeanPermission \"javax.management.modelmbean.RequiredModelMBean#-[-]\", \"instantiate\";\n-  permission javax.management.MBeanPermission \"javax.management.modelmbean.RequiredModelMBean#-[*:*]\", \"registerMBean\";\n-  permission javax.management.MBeanPermission \"javax.management.modelmbean.RequiredModelMBean#*[*:*]\", \"getAttribute\";\n-  permission javax.management.MBeanPermission \"javax.management.modelmbean.RequiredModelMBean#*[*:*]\", \"setAttribute\";\n-  permission javax.management.MBeanPermission \"javax.management.modelmbean.RequiredModelMBean#*[*:*]\", \"invoke\";\n-  permission javax.management.MBeanPermission \"SimpleModelMBeanCommand$Resource#-[*:*]\", \"registerMBean\";\n-  permission javax.management.MBeanPermission \"SimpleModelMBeanCommand$Resource#*[*:*]\", \"invoke\";\n-  permission javax.management.MBeanPermission \"SimpleModelMBeanCommand$Resource#*[*:*]\", \"getAttribute\";\n-  permission javax.management.MBeanPermission \"SimpleModelMBeanCommand$Resource#*[*:*]\", \"setAttribute\";\n-  permission javax.management.MBeanPermission \"SimpleModelMBeanCommand$Resource#*[*:*]\", \"getMBeanInfo\";\n-\n-};\n","filename":"test\/jdk\/javax\/management\/modelmbean\/SimpleModelMBean\/policy","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -39,6 +39,0 @@\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow StartStopTest 1\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow StartStopTest 2\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow StartStopTest 3\n- * @run main\/othervm\/timeout=300\/policy=all.policy StartStopTest 1\n- * @run main\/othervm\/timeout=300\/policy=all.policy StartStopTest 2\n- * @run main\/othervm\/timeout=300\/policy=all.policy StartStopTest 3\n","filename":"test\/jdk\/javax\/management\/monitor\/StartStopTest.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,4 +35,0 @@\n- * @run main\/othervm -Djava.security.manager=allow ThreadPoolAccTest\n- * @run main\/othervm -Djava.security.manager=allow -DThreadPoolAccTest.useGetSubjectACC=true ThreadPoolAccTest\n- * @run main\/othervm\/policy=all.policy ThreadPoolAccTest\n- * @run main\/othervm\/policy=all.policy -DThreadPoolAccTest.useGetSubjectACC=true ThreadPoolAccTest\n@@ -41,1 +37,0 @@\n-import java.security.AccessController;\n@@ -76,3 +71,1 @@\n-            \/\/ Use Subject.current() unless test Property is set.\n-            Subject subject = Boolean.getBoolean(\"ThreadPoolAccTest.useGetSubjectACC\") ?\n-                              Subject.getSubject(AccessController.getContext()) : Subject.current();\n+            Subject subject = Subject.current();\n","filename":"test\/jdk\/javax\/management\/monitor\/ThreadPoolAccTest.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/javax\/management\/monitor\/all.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @summary Check that class downloading is supported by RMI connector\n+ * @summary Check that class downloading is NOT supported by RMI connector\n@@ -30,4 +30,4 @@\n- * @run main\/othervm -Djava.security.manager=allow RMIDownloadTest receive without\n- * @run main\/othervm -Djava.security.manager=allow RMIDownloadTest send without\n- * @run main\/othervm -Djava.security.manager=allow RMIDownloadTest receive with\n- * @run main\/othervm -Djava.security.manager=allow RMIDownloadTest send with\n+ * @run main\/othervm RMIDownloadTest receive without\n+ * @run main\/othervm RMIDownloadTest send without\n+ * @run main\/othervm RMIDownloadTest receive with\n+ * @run main\/othervm RMIDownloadTest send with\n@@ -37,1 +37,3 @@\n- * This test checks that class downloading is supported by the RMI connector.\n+ * This test checks that class downloading is NOT supported by the RMI connector,\n+ * after SM removal.\n+ *\n@@ -42,4 +44,7 @@\n- * instance.  In both cases, this will only work if the class can be downloaded\n- * based on the codebase that we have set to the temporary directory.  We also\n- * test that it does *not* work when the codebase is not set, in case the test\n- * is succeeding for some other reason.\n+ * instance.\n+ *\n+ * This used to only work if the class can be downloaded based on the codebase\n+ * that we have set to the temporary directory.\n+ *\n+ * Post SM removal, we test that it does *not* work either when the codebase\n+ * is set, or is not.\n@@ -135,2 +140,0 @@\n-        System.setSecurityManager(new LaidBackSecurityManager());\n-\n@@ -162,1 +165,1 @@\n-            \/\/ Test with the codebase property.  Downloading should work.\n+            \/\/ Test with the codebase property.  Downloading should NOT work (after SM removal).\n@@ -165,1 +168,1 @@\n-            System.out.println(\"Testing with codebase, should work\");\n+            System.out.println(\"Testing with codebase, should NOT work\");\n@@ -168,1 +171,1 @@\n-            test(send, true);\n+            test(send, false);\n@@ -249,6 +252,0 @@\n-\n-    public static class LaidBackSecurityManager extends SecurityManager {\n-        public void checkPermission(Permission perm) {\n-            \/\/ OK, dude\n-        }\n-    }\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/loading\/RMIDownloadTest.java","additions":19,"deletions":22,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1,187 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n- \/*\n- * @test\n- * @bug 6515161\n- * @summary checks the behaviour of  mbeanServerConnection.removeNotificationListener\n- * operation when there is a exception thrown during removal\n- * @modules java.management\n- * @run main\/othervm -Djava.security.manager=allow NoPermToRemoveTest\n- *\/\n-\n-import java.lang.management.ManagementFactory;\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.util.concurrent.Semaphore;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import javax.management.ListenerNotFoundException;\n-import javax.management.MBeanPermission;\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerConnection;\n-import javax.management.Notification;\n-import javax.management.NotificationBroadcasterSupport;\n-import javax.management.NotificationFilter;\n-import javax.management.NotificationListener;\n-import javax.management.ObjectName;\n-import javax.management.remote.JMXConnector;\n-import javax.management.remote.JMXConnectorFactory;\n-import javax.management.remote.JMXConnectorServer;\n-import javax.management.remote.JMXConnectorServerFactory;\n-import javax.management.remote.JMXServiceURL;\n-\n-public class NoPermToRemoveTest {\n-    public static void main(String[] args) throws Exception {\n-        Policy.setPolicy(new NoRemovePolicy());\n-        System.setSecurityManager(new SecurityManager());\n-\n-        JMXServiceURL url = new JMXServiceURL(\"service:jmx:rmi:\/\/\/\");\n-        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n-        ObjectName name = new ObjectName(\"foo:type=Sender\");\n-        mbs.registerMBean(new Sender(), name);\n-        JMXConnectorServer cs = JMXConnectorServerFactory.newJMXConnectorServer(\n-                url, null, mbs);\n-        cs.start();\n-        try {\n-            JMXServiceURL addr = cs.getAddress();\n-            JMXConnector cc = JMXConnectorFactory.connect(addr);\n-            MBeanServerConnection mbsc = cc.getMBeanServerConnection();\n-            SnoopListener listener = new SnoopListener();\n-            mbsc.addNotificationListener(name, listener, null, null);\n-            mbsc.invoke(name, \"send\", null, null);\n-            if (!listener.waitForNotification(60))\n-                throw new Exception(\"Did not receive expected notification\");\n-\n-            try {\n-                mbsc.removeNotificationListener(name, listener);\n-                throw new Exception(\"RemoveNL did not get SecurityException\");\n-            } catch (SecurityException e) {\n-                System.out.println(\"removeNL got expected exception: \" + e);\n-            }\n-            mbsc.invoke(name, \"send\", null, null);\n-            if (!listener.waitForNotification(60)) {\n-                int listenerCount =\n-                        (Integer) mbsc.getAttribute(name, \"ListenerCount\");\n-                System.out.println(\"Listener count: \" + listenerCount);\n-                if (listenerCount != 0)\n-                    throw new Exception(\"TEST FAILED\");\n-                    \/* We did not receive the notification, but the MBean still\n-                     * has a listener coming from the connector server, which\n-                     * means the connector server still thinks there is a\n-                     * listener.  If we retained the listener after the failing\n-                     * removeNL that would be OK, and if the listener were\n-                     * dropped by both client and server that would be OK too,\n-                     * but the inconsistency is not OK.\n-                     *\/\n-            }\n-            cc.close();\n-        } finally {\n-            cs.stop();\n-        }\n-    }\n-\n-    private static class SnoopListener implements NotificationListener {\n-        private Semaphore sema = new Semaphore(0);\n-\n-        public void handleNotification(Notification notification, Object handback) {\n-            System.out.println(\"Listener got: \" + notification);\n-            sema.release();\n-        }\n-\n-        boolean waitForNotification(int seconds) throws InterruptedException {\n-            return sema.tryAcquire(seconds, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    private static class NoRemovePolicy extends Policy {\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            PermissionCollection pc = new Permissions();\n-            pc.add(new AllPermission());\n-            return pc;\n-        }\n-\n-        public void refresh() {\n-        }\n-\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (!(permission instanceof MBeanPermission))\n-                return true;\n-            MBeanPermission jmxp = (MBeanPermission) permission;\n-            if (jmxp.getActions().contains(\"removeNotificationListener\")) {\n-                System.out.println(\"DENIED\");\n-                return false;\n-            }\n-            return true;\n-        }\n-    }\n-\n-    public static interface SenderMBean {\n-        public void send();\n-        public int getListenerCount();\n-    }\n-\n-    public static class Sender extends NotificationBroadcasterSupport\n-            implements SenderMBean {\n-        private AtomicInteger listenerCount = new AtomicInteger();\n-\n-        public void send() {\n-            System.out.println(\"Sending notif\");\n-            sendNotification(new Notification(\"type\", this, 0L));\n-        }\n-\n-        public synchronized int getListenerCount() {\n-            return listenerCount.get();\n-        }\n-\n-        public void removeNotificationListener(\n-                NotificationListener listener,\n-                NotificationFilter filter,\n-                Object handback) throws ListenerNotFoundException {\n-            System.out.println(\"Sender.removeNL(3)\");\n-            super.removeNotificationListener(listener, filter, handback);\n-            listenerCount.decrementAndGet();\n-        }\n-\n-        public void addNotificationListener(\n-                NotificationListener listener,\n-                NotificationFilter filter,\n-                Object handback) {\n-            System.out.println(\"Sender.addNL(3)\");\n-            super.addNotificationListener(listener, filter, handback);\n-            listenerCount.incrementAndGet();\n-        }\n-\n-        public void removeNotificationListener(NotificationListener listener)\n-        throws ListenerNotFoundException {\n-            System.out.println(\"Sender.removeNL(1)\");\n-            super.removeNotificationListener(listener);\n-            listenerCount.decrementAndGet();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/notif\/NoPermToRemoveTest.java","additions":0,"deletions":187,"binary":false,"changes":187,"status":"deleted"},{"patch":"@@ -35,1 +35,0 @@\n- * @run main\/othervm -Djava.security.manager=allow NotificationAccessControllerTest\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/notif\/NotificationAccessControllerTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,5 +36,0 @@\n- * @run main\/othervm -Djava.security.manager=allow NotificationEmissionTest 1\n- * @run main\/othervm -Djava.security.manager=allow NotificationEmissionTest 2\n- * @run main\/othervm -Djava.security.manager=allow NotificationEmissionTest 3\n- * @run main\/othervm -Djava.security.manager=allow NotificationEmissionTest 4\n- * @run main\/othervm -Djava.security.manager=allow NotificationEmissionTest 5\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/notif\/NotificationEmissionTest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-grant {\n-    permission java.net.SocketPermission \"*:*\", \"accept,connect,listen,resolve\";\n-    permission javax.management.MBeanServerPermission \"*\";\n-    permission javax.management.MBeanPermission \"*\", \"invoke\";\n-    permission javax.management.MBeanPermission \"[domain:type=NB,name=2]\", \"addNotificationListener\";\n-    permission javax.management.MBeanPermission \"*\", \"removeNotificationListener\";\n-};\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/notif\/policy.negative","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-grant {\n-    permission java.net.SocketPermission \"*:*\", \"accept,connect,listen,resolve\";\n-    permission javax.management.MBeanServerPermission \"*\";\n-    permission javax.management.MBeanPermission \"*\", \"invoke\";\n-    permission javax.management.MBeanPermission \"*\", \"addNotificationListener\";\n-    permission javax.management.MBeanPermission \"*\", \"removeNotificationListener\";\n-};\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/notif\/policy.positive","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -34,1 +34,0 @@\n- * @run main\/othervm -Djava.security.manager=allow NonJMXPrincipalsTest\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAccessFile\/NonJMXPrincipalsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @run main\/othervm -Djava.security.manager=allow PasswordAccessFileTest\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAccessFile\/PasswordAccessFileTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n- * @run main\/othervm -Djava.security.manager=allow RMIAltAuthTest\n- * @run main\/othervm -Djava.security.manager=allow -DSimpleStandard.useGetSubjectACC=true RMIAltAuthTest\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAuthenticator\/RMIAltAuthTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n- * @run main\/othervm -Djava.security.manager=allow RMIPasswdAuthTest\n- * @run main\/othervm -Djava.security.manager=allow -DSimpleStandard.useGetSubjectACC=true RMIPasswdAuthTest\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAuthenticator\/RMIPasswdAuthTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -155,2 +153,1 @@\n-        Subject subject = Boolean.getBoolean(\"SimpleStandard.useGetSubjectACC\") ?\n-                          Subject.getSubject(AccessController.getContext()) : Subject.current();\n+        Subject subject = Subject.current();\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/passwordAuthenticator\/SimpleStandard.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,4 +27,1 @@\n- * @summary Test that RMIServer.getVersion() reflects the JDK version when\n- * the Java platform and the application is run with a security manager and the\n- * test codebase has the java permission to read the \"java.runtime.version\"\n- * system property.\n+ * @summary Test that RMIServer.getVersion() reflects the JDK version.\n@@ -56,2 +53,0 @@\n-            \"-Djava.security.manager\",\n-            \"-Djava.security.policy==\" + testSrc + File.separator + \"policy\",\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/version\/ImplVersionTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant codebase \"file:${test.classes}\" {\n-  permission java.util.PropertyPermission \"java.runtime.version\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/version\/policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -36,14 +36,0 @@\n- *\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow -DDEBUG_STANDARD -Dusername=username1 -Dpassword=password1 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow -DDEBUG_STANDARD -Dusername=username2 -Dpassword=password2 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials -expectedCreateException -expectedSetException -expectedInvokeException\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow -DDEBUG_STANDARD -Dusername=username6 -Dpassword=password6 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials -expectedCreateException -expectedGetException -expectedSetException -expectedInvokeException\n- *\n- * @run main\/othervm\/timeout=300\/policy=java.policy.authorization -DDEBUG_STANDARD -Dusername=username1 -Dpassword=password1 AuthorizationTest -server -mapType x.password.file -populate -client -mapType credentials\n- * @run main\/othervm\/timeout=300\/policy=java.policy.authorization -DDEBUG_STANDARD -Dusername=username3 -Dpassword=password3 AuthorizationTest -server -mapType x.password.file -populate -client -mapType credentials -expectedGetException\n- * @run main\/othervm\/timeout=300\/policy=java.policy.authorization -DDEBUG_STANDARD -Dusername=username5 -Dpassword=password5 AuthorizationTest -server -mapType x.password.file -populate -client -mapType credentials -expectedCreateException -expectedGetException -expectedSetException -expectedInvokeException\n- * @run main\/othervm\/timeout=300\/policy=java.policy.authorization -DDEBUG_STANDARD -Dusername=username6 -Dpassword=password6 AuthorizationTest -server -mapType x.password.file -populate -client -mapType credentials -expectedCreateException -expectedGetException -expectedSetException -expectedInvokeException\n- * @run main\/othervm\/timeout=300\/policy=java.policy.authorization -DDEBUG_STANDARD -Dusername=username1 -Dpassword=password1 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials\n- * @run main\/othervm\/timeout=300\/policy=java.policy.authorization -DDEBUG_STANDARD -Dusername=username2 -Dpassword=password2 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials -expectedCreateException -expectedSetException -expectedInvokeException\n- * @run main\/othervm\/timeout=300\/policy=java.policy.authorization -DDEBUG_STANDARD -Dusername=username3 -Dpassword=password3 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials -expectedCreateException -expectedGetException -expectedSetException -expectedInvokeException\n- * @run main\/othervm\/timeout=300\/policy=java.policy.authorization -DDEBUG_STANDARD -Dusername=username4 -Dpassword=password4 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials -expectedGetException -expectedSetException\n- * @run main\/othervm\/timeout=300\/policy=java.policy.authorization -DDEBUG_STANDARD -Dusername=username5 -Dpassword=password5 AuthorizationTest -server -mapType x.access.file;x.password.file -populate -client -mapType credentials -expectedCreateException -expectedGetException -expectedSetException -expectedInvokeException\n","filename":"test\/jdk\/javax\/management\/security\/AuthorizationTest.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,88 +0,0 @@\n-\/\/ Standard extensions get all permissions by default\n-\n-grant codeBase \"file:${java.home}\/lib\/ext\/*\" {\n-\tpermission java.security.AllPermission;\n-};\n-\n-\/\/ default permissions granted to all domains\n-grant { \n-\t\/\/ allows anyone to listen on un-privileged ports\n-\tpermission java.net.SocketPermission \"localhost:1024-\", \"listen\";\n-\n-\t\/\/ \"standard\" properies that can be read by anyone\n-\n-\tpermission java.util.PropertyPermission \"java.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vendor.url\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.class.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.arch\", \"read\";\n-\tpermission java.util.PropertyPermission \"file.separator\", \"read\";\n-\tpermission java.util.PropertyPermission \"path.separator\", \"read\";\n-\tpermission java.util.PropertyPermission \"line.separator\", \"read\";\n-\n-\tpermission java.util.PropertyPermission \"java.specification.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.specification.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.specification.name\", \"read\";\n-\n-\tpermission java.util.PropertyPermission \"java.vm.specification.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.specification.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.specification.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.name\", \"read\";\n-\n-       permission java.io.FilePermission \"*\",\"read,write\";\n-\n-};\n-\n-grant codeBase \"file:\/-\" {\n-\tpermission java.security.AllPermission;\n-       permission java.io.FilePermission \"*\",\"read,write\";\n-};\n-\n-grant principal javax.management.remote.JMXPrincipal \"SQE_username\" {\n-    permission javax.management.MBeanServerPermission \"*\";\n-    permission javax.management.MBeanPermission \"Simple\", \"instantiate\";\n-    permission javax.management.MBeanPermission \"Simple\", \"registerMBean\";\n-};\n-\n-grant principal javax.management.remote.JMXPrincipal \"username1\" {\n-    \/\/\n-    \/\/ JMXPrincipals \"username1\" has all permissions.\n-    \/\/\n-    permission java.security.AllPermission;\n-};\n-\n-grant principal javax.management.remote.JMXPrincipal \"username2\" {\n-    \/\/\n-    \/\/ JMXPrincipals \"username2\" has all permissions.\n-    \/\/\n-    permission java.security.AllPermission;\n-};\n-\n-grant principal javax.management.remote.JMXPrincipal \"username3\" {\n-    \/\/\n-    \/\/ JMXPrincipals \"username3\" has some permissions.\n-    \/\/\n-    permission javax.management.MBeanPermission \"Simple\", \"instantiate\";\n-    permission javax.management.MBeanPermission \"Simple\", \"registerMBean\";\n-    permission javax.management.MBeanPermission \"Simple\", \"setAttribute\";\n-    permission javax.management.MBeanPermission \"Simple\", \"invoke\";\n-};\n-\n-grant principal javax.management.remote.JMXPrincipal \"username4\" {\n-    \/\/\n-    \/\/ JMXPrincipals \"username4\" has all permissions.\n-    \/\/\n-    permission javax.management.MBeanPermission \"Simple\", \"instantiate\";\n-    permission javax.management.MBeanPermission \"Simple\", \"registerMBean\";\n-    permission javax.management.MBeanPermission \"Simple\", \"invoke\";\n-};\n-\n-grant principal javax.management.remote.JMXPrincipal \"username5\" {\n-    \/\/\n-    \/\/ JMXPrincipals \"username5\" has no permissions.\n-    \/\/\n-};\n","filename":"test\/jdk\/javax\/management\/security\/java.policy.authorization","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @run main\/othervm\/policy=security.policy  SSLSessionFinalizeTest\n","filename":"test\/jdk\/javax\/net\/ssl\/finalize\/SSLSessionFinalizeTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,13 +0,0 @@\n-\/*\n- * \n- *\/\n-grant {\n-\n-    \/\/ used by TestLibrary to determine test environment\n-    permission java.util.PropertyPermission \"test.*\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-    permission java.util.PropertyPermission \"javax.net.ssl.*\", \"write\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.security.ssl\";\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/javax\/net\/ssl\/finalize\/security.policy","additions":0,"deletions":13,"binary":false,"changes":13,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n- * @run junit\/othervm -Djava.security.manager=allow BadFactoryTest\n","filename":"test\/jdk\/javax\/script\/JDK_8196959\/BadFactoryTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,5 +46,0 @@\n-echo \"Running test with security manager ...\"\n-$JAVA ${TESTVMOPTS} -Djava.security.manager -classpath \\\n-  \"${TESTCLASSES}${PS}${TESTCLASSES}\/dummy.jar\" \\\n-  ProviderTest\n-\n@@ -57,1 +52,1 @@\n-echo \"Running test without security manager ...\"\n+echo \"Running test ...\"\n","filename":"test\/jdk\/javax\/script\/ProviderTest.sh","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import com.sun.security.auth.NTUserPrincipal;\n-import com.sun.security.auth.UnixPrincipal;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import javax.security.auth.Subject;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-\/*\n- * @test\n- * @bug 8050409\n- * @modules jdk.security.auth\n- * @summary Tests with Subject.getPrivateCredentials to check permission checks with one or more principals.\n- * @run testng\/othervm\/policy=MoreThenOnePrincipals.policy MoreThenOnePrincipals\n- *\/\n-public class MoreThenOnePrincipals {\n-    private static final String[] CRED_VALUES =\n-            new String[]{\"testPrivateCredential-1\", \"testPrivateCredentials-2\"};\n-    private static final HashSet CREDS = new HashSet<>(Arrays.asList(CRED_VALUES));\n-\n-    \/**\n-     * Policy file grants access to the private Credential,belonging to a\n-     * Subject with at least two associated Principals:\"com.sun.security.auth\n-     * .NTUserPrincipal\", with the name,\"NTUserPrincipal-1\", and\n-     * \"com.sun.security.auth.UnixPrincipal\", with the name, \"UnixPrincipals-1\".\n-     *\n-     * For test1 and test2, subjects are associated with none or only one of\n-     * principals mentioned above, SecurityException is expected.\n-     * For test 3 and test 4, subjects are associated with two or more\n-     * Principals (above principals are included), no exception is expected.\n-     *\n-     *\/\n-\n-    @Test(dataProvider = \"Provider1\", expectedExceptions = SecurityException.class)\n-    public void test1(Subject s) {\n-        s.getPrivateCredentials(String.class);\n-    }\n-\n-    @Test(dataProvider = \"Provider1\", expectedExceptions = SecurityException.class)\n-    public void test2(Subject s) {\n-        s.getPrivateCredentials().iterator().next();\n-    }\n-\n-    @Test(dataProvider = \"Provider2\")\n-    public void test3(Subject s) {\n-        s.getPrivateCredentials(String.class);\n-    }\n-\n-    @Test(dataProvider = \"Provider2\")\n-    public void test4(Subject s) {\n-        s.getPrivateCredentials().iterator().next();\n-    }\n-\n-    @DataProvider\n-    public Object[][] Provider1() {\n-        Subject s1 = new Subject(false, Collections.EMPTY_SET, Collections.EMPTY_SET, CREDS);\n-        s1.getPrincipals().add(new NTUserPrincipal(\"NTUserPrincipal-2\"));\n-        Subject s2 = new Subject(false, Collections.EMPTY_SET, Collections.EMPTY_SET, CREDS);\n-        s2.getPrincipals().add(new NTUserPrincipal(\"NTUserPrincipal-1\"));\n-        return new Object[][]{{s1}, {s2}};\n-    }\n-\n-    @DataProvider\n-    public Object[][] Provider2() {\n-        Subject s3 = new Subject(false, Collections.EMPTY_SET, Collections.EMPTY_SET, CREDS);\n-        s3.getPrincipals().add(new NTUserPrincipal(\"NTUserPrincipal-1\"));\n-        s3.getPrincipals().add(new UnixPrincipal(\"UnixPrincipals-1\"));\n-        Subject s4 = new Subject(false, Collections.EMPTY_SET, Collections.EMPTY_SET, CREDS);\n-        s4.getPrincipals().add(new NTUserPrincipal(\"NTUserPrincipal-1\"));\n-        s4.getPrincipals().add(new UnixPrincipal(\"UnixPrincipals-1\"));\n-        s4.getPrincipals().add(new UnixPrincipal(\"UnixPrincipals-2\"));\n-        return new Object[][]{{s3}, {s4}};\n-    }\n-\n-}\n","filename":"test\/jdk\/javax\/security\/auth\/PrivateCredentialPermission\/MoreThenOnePrincipals.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -1,10 +0,0 @@\n-grant{\n-\/\/ permissions for TestNG execution\n-permission java.io.FilePermission \"*\",\"read,write\";\n-permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n-permission java.util.PropertyPermission \"*\",\"read\";\n-permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n-\/\/ permissions for test itself\n-permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-permission javax.security.auth.PrivateCredentialPermission \"* com.sun.security.auth.NTUserPrincipal \\\"NTUserPrincipal-1\\\" com.sun.security.auth.UnixPrincipal \\\"UnixPrincipals-1\\\"\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/PrivateCredentialPermission\/MoreThenOnePrincipals.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run main\/othervm\/policy=Serial.policy Serial\n","filename":"test\/jdk\/javax\/security\/auth\/PrivateCredentialPermission\/Serial.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"serial.tmp\", \"read,write\";\n-    permission java.io.FilePermission \"serial2.tmp\", \"read,write\";\n-    permission javax.security.auth.AuthPermission \"modifyPrivateCredentials\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/PrivateCredentialPermission\/Serial.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,612 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @author  Ram Marti\n- * @bug 4326852\n- * @modules jdk.security.auth\n- * @summary Retrive a subset of private credentials can be accessed\n- * @run main\/othervm\/policy=Subset.policy Subset\n- *\/\n-\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.Set;\n-import com.sun.security.auth.UnixPrincipal;\n-import javax.security.auth.Subject;\n-\n-\/*\n- * Author : Ram Marti\n- * This is a test program to verify the fix for Bug 4326852\n- * (impossible to extract a subset of private credentials)\n- * The policy file used allows read access only to String classes.\n- * grant {\n- *    permission javax.security.auth.AuthPermission \\\n- *              \"modifyPrivateCredentials\";\n- *    permission javax.security.auth.PrivateCredentialPermission \\\n- * \"java.lang.String com.sun.security.auth.UnixPrincipal \\\"user\"\", \"read\";\n- * };\n-\n- * The test verifies the following:\n- *      - String class creds can be retrieved by using\n- *        getPrivateCredentials(String.class)\n- *      - The above set is not backed internally\n- *      - getPrivateCredentials(Boolean or Integer) returns an empty set\n- *      - Set is returned by getPrivateCredentials() throws\n- *        security exception when trying to access non-String\n- *        class credentials\n- *      - The above set is internally backed up and any changes in\n- *        internal private creds are reflected in the set returned\n- *      - When the above set throws security exception the iterator\n- *      - is advanced to the next item in the list of creds.\n- *      - equals,contains,containsAll,add,remove operations work correctly\n- *\/\n-\n-public class Subset {\n-    public static void main(String[] args) throws Exception {\n-        int exceptionCounter =0;\n-        Iterator iter1;\n-        HashSet creds = new HashSet();\n-        Subject emptys =\n-            new Subject(false,  \/\/readOnly\n-                        Collections.singleton(new UnixPrincipal(\"user\")),\n-                        Collections.EMPTY_SET,\n-                        creds);\n-        \/* Test principals *\/\n-\n-        Set princ= emptys.getPrincipals();\n-        HashSet collp= new HashSet();\n-        collp.add(new String(\"abc\"));\n-        collp.add(new String(\"def\"));\n-        collp.add(new String(\"Exists\"));\n-        collp.add(new String(\"Does not Exist\"));\n-        try {\n-            if (princ.containsAll(collp)) {\n-                throw new Exception (\"Error: Contains the collection\");\n-            } else\n-                System.out.println (\"Does not Contain the collection\");\n-        } catch (SecurityException e) {\n-            throw new Exception (\"Error: Exception in containsAll (string coll)!!\");\n-        }\n-\n-\n-        Set p1 = emptys.getPrivateCredentials();\n-\n-        if (p1.size() != 0) {\n-              throw new Exception(\"Error:p1 size should have been 6 and was \" +\n-                         p1.size());\n-        }\n-\n-        creds.add(\"abc\");\n-        creds.add(new Integer(3));\n-        creds.add(Boolean.TRUE);\n-        Subject sremove =\n-            new Subject(false,  \/\/readOnly\n-                        Collections.singleton(new UnixPrincipal(\"user\")),\n-                        Collections.EMPTY_SET,\n-                        creds);\n-        Set p2 = sremove.getPrivateCredentials();\n-\n-        if (p2.size() !=3){\n-              throw new Exception(\"Error: p2 size should have been 3 and was \" +\n-                         p2.size());\n-        }\n-        iter1 = p2.iterator();\n-        exceptionCounter=0;\n-        while (iter1.hasNext()) {\n-            try {\n-                Object o = iter1.next();\n-                System.out.println(\" private creds of class \" +\n-                        o.getClass() + \"value is \" + o.toString());\n-            } catch (SecurityException e) {\n-                System.out.println(\"Expected Exception occured\");\n-                exceptionCounter++;\n-            }\n-        }\n-        if (exceptionCounter != 2) {\n-            throw new Exception(\"Expected number of exceptions was 2 \" +\n-                        \"The actual number was \" + exceptionCounter);\n-        }\n-\n-        \/\/ Verify that remove op was successful\n-\n-        iter1.remove();\n-        if (p2.size() !=2) {\n-           throw new RuntimeException(\"Error: p2 size should have been 2 and was \" +\n-                               p2.size());\n-        }\n-        System.out.println (\"Checking the value after removal\");\n-        p2 = sremove.getPrivateCredentials();\n-        try {\n-                if (!p2.add(new String(\"XYZ\"))) {\n-\n-                        throw new RuntimeException(\"Error in adding string\");\n-                }\n-                if (!p2.add(new Integer(99))) {\n-\n-                        throw new RuntimeException(\"Error in adding Integer\");\n-                }\n-                HashSet coll1 = new HashSet();\n-                coll1.add(new String(\"RST\"));\n-                coll1.add(new Integer(1));\n-                if (!p2.addAll(coll1)) {\n-\n-                        throw new RuntimeException(\"Error in addAll\");\n-                }\n-\n-        } catch (Exception e){\n-                e.printStackTrace();\n-                throw new RuntimeException(\"Unexpected exception in add\");\n-\n-        }\n-        iter1 = p2.iterator();\n-\n-        while (iter1.hasNext()) {\n-            try {\n-                Object o = iter1.next();\n-                System.out.println(\" private creds of class \" +\n-                        o.getClass() + \"value is \" + o.toString());\n-            } catch (SecurityException e) {\n-                \/\/ System.out.println(\"Exception!!\");\n-            }\n-        }\n-        iter1 = p2.iterator();\n-\n-        System.out.println (\"Checked the value after removal\");\n-\n-        HashSet creds1 = new HashSet();\n-        creds1.add(\"abc\");\n-        creds1.add(\"def\");\n-        creds1.add(Boolean.TRUE);\n-        creds1.add(new Integer(1));\n-        creds1.add(new String(\"Exists\"));\n-        Subject scontain =\n-            new Subject(false,  \/\/readOnly\n-                        Collections.singleton(new UnixPrincipal(\"user\")),\n-                        Collections.EMPTY_SET,\n-                        creds1);\n-        p2 = scontain.getPrivateCredentials();\n-        try {\n-            Object ObjAr = p2.toArray();\n-        } catch (SecurityException e) {\n-                System.out.println(\"Should get an Exception in toArray()\");\n-        }\n-\n-        HashSet creds3 = new HashSet();\n-        creds3.add (new String(\"abc\"));\n-        p2 = scontain.getPrivateCredentials();\n-\n-        try {\n-            Object ObjCred = (Object)creds3.clone();\n-            System.out.println (\"Size of p2 is \" + p2.size() +\n-                                \"Size of ObjCred is \" +\n-                                        ((HashSet)ObjCred).size()\n-                                );\n-            if (p2.equals(ObjCred))\n-                throw new RuntimeException(\"Error:Equals ObjCred  *** \");\n-            else\n-                System.out.println (\"Does not Equal Objcred\");\n-        } catch (SecurityException e) {\n-            throw new RuntimeException(\"Error:Should not get an Exception in equals of creds3\");\n-\n-\n-        }\n-\n-        try {\n-            Object ObjCred = (Object)creds1.clone();\n-            System.out.println (\"Size of p2 is \" + p2.size() +\n-                                \"Size of ObjCred is \" +\n-                                        ((HashSet)ObjCred).size()\n-                                );\n-            if (p2.equals(ObjCred))\n-                throw new RuntimeException (\"Error: Equals ObjCred\");\n-            else\n-                throw new RuntimeException (\"Error: Does not Equal Objcred\");\n-        } catch (SecurityException e) {\n-            System.out.println(\"Should get an Exception in equals of creds1\");\n-        }\n-        \/* We can store only string types of creds\n-         * Let us create a subject with only string type of creds\n-         *\/\n-\n-        HashSet creds2 = new HashSet();\n-        creds2.add(\"abc\");\n-        creds2.add(\"def\");\n-        creds2.add(\"ghi\");\n-        Subject sstring =\n-            new Subject(false,  \/\/readOnly\n-                        Collections.singleton(new UnixPrincipal(\"user\")),\n-                        Collections.EMPTY_SET,\n-                        creds2);\n-        p2 = sstring.getPrivateCredentials();\n-        try {\n-            String[] selectArray = { \"exits\", \"Does not exist\"};\n-            Object ObjAr = p2.toArray(selectArray);\n-            System.out.println(\" No Exception in ObjAr- String\");\n-\n-        } catch (SecurityException e) {\n-                throw new RuntimeException(\" Error:  Exception in ObjAr- String!!\");\n-        }\n-        \/*\n-         * New subject scontain1, set p3, creds4\n-         *\/\n-\n-\n-        HashSet creds4 = new HashSet();\n-        creds4.add(\"abc\");\n-        creds4.add(\"def\");\n-        creds4.add(\"ghi\");\n-        creds4.add(new Integer(1));\n-        creds4.add(\"Exists\");\n-        Subject scontain1 =\n-            new Subject(false,  \/\/readOnly\n-                        Collections.singleton(new UnixPrincipal(\"user\")),\n-                        Collections.EMPTY_SET,\n-                        creds4);\n-        Set p3 = scontain1.getPrivateCredentials();\n-        try {\n-            Object Obj = new String(\"Exists\");\n-            if (p3.contains(Obj))\n-                System.out.println (\"Contains String cred\");\n-            else\n-                throw new RuntimeException (\"Error Does not Contain the stringcred exists\");\n-        } catch (SecurityException e) {\n-            throw new RuntimeException(\"Error:Exception!!\");\n-\n-        }\n-        try {\n-            Object ObjCred = (Object)creds4.clone();\n-            if (p3.equals(ObjCred))\n-                throw new RuntimeException (\"Error:Equals ObjCred\");\n-            else\n-                throw new RuntimeException (\"Error:Does not Equal Objcred\");\n-        } catch (SecurityException e) {\n-            System.out.println(\"Should  get an Exception in equals\");\n-        }\n-\n-        try {\n-            Object Obj = new Integer(1);\n-            if (p3.contains(Obj))\n-                throw new RuntimeException (\"Error:Contains integer cred\");\n-            else\n-                throw new RuntimeException (\"Error:Does not Contain integer cred\");\n-        } catch (SecurityException e) {\n-            System.out.println(\"Should get an Exception in contains Integer cred\");\n-        }\n-\n-\n-\n-        HashSet coll = new HashSet();\n-        coll.add(new String(\"abc\"));\n-        coll.add(new String(\"def\"));\n-        coll.add(new String(\"Exists\"));\n-        coll.add(new String(\"Does not Exist\"));\n-        try {\n-        if (p3.containsAll(coll))\n-                throw new RuntimeException (\"Error: Contains the collection\");\n-        else\n-                System.out.println (\"Does not Contain the collection\");\n-        } catch (SecurityException e) {\n-                throw new RuntimeException(\"Error: Exception in containsAll (string coll)!!\");\n-\n-        }\n-        coll.remove(new String(\"Exists\"));\n-        coll.remove(new String(\"Does not Exist\"));\n-        try {\n-        if (p3.containsAll(coll))\n-                System.out.println (\"Contains the collection\");\n-        else\n-                throw new RuntimeException (\"Error:Does not Contain the collection\");\n-        } catch (SecurityException e) {\n-                throw new RuntimeException(\"Error: Exception in containsAll (string coll)!!\");\n-        }\n-\n-        Object Obj = new String(\"Exists\");\n-        try {\n-        if (p3.contains(Obj))\n-                System.out.println (\"Contains String cred exists\");\n-        else\n-                System.out.println (\"Does not Contain String cred exists\");\n-        } catch (SecurityException e) {\n-                System.out.println(\"Exception in String cred!!\");\n-        }\n-\n-        Obj = new String(\"Does not exist\");\n-        try {\n-        if (p3.contains(Obj))\n-                throw new RuntimeException (\"Error: Contains the String does not exist\");\n-        else\n-                System.out.println (\"Does not Contain the String cred Does not exist\");\n-        } catch (SecurityException e) {\n-                throw new RuntimeException(\"Error: Exception in Contains!!\");\n-        }\n-        p3.add(new Integer(2));\n-        coll.add(new Integer(2));\n-        p3.add(\"XYZ\");\n-\n-        System.out.println (\"Testing Retainall \");\n-        exceptionCounter =0;\n-        iter1 = p3.iterator();\n-        while (iter1.hasNext())\n-            {\n-                try {\n-                    Object o = iter1.next();\n-                    System.out.println(\" private creds of class \" +\n-                                       o.getClass() + \"value is \" + o.toString());\n-                } catch (SecurityException e) {\n-                    System.out.println(\" We should get exception\");\n-                    System.out.println(\"Exception!!\");\n-                    exceptionCounter++;\n-                }\n-            }\n-        System.out.println(\" After the retainall Operation\");\n-        try {\n-            if (p3.retainAll(coll))\n-                System.out.println (\"Retained the collection\");\n-            else\n-                throw new RuntimeException (\"Error: RetainAll did not succeed\");\n-        } catch (SecurityException e) {\n-                e.printStackTrace();\n-                throw new RuntimeException(\"Error: Unexpected Exception in retainAll!\");\n-        }\n-        iter1 = p3.iterator();\n-        while (iter1.hasNext())\n-            {\n-                try {\n-                    Object o = iter1.next();\n-                    System.out.println(\" private creds of class \" +\n-                                       o.getClass() + \"value is \" + o.toString());\n-                } catch (SecurityException e) {\n-                    exceptionCounter++;\n-                }\n-            }\n-        System.out.println (\"Retainall collection\");\n-        p3.add(new Integer (3));\n-        iter1 = p3.iterator();\n-        while (iter1.hasNext()) {\n-            try {\n-                Object o = iter1.next();\n-                System.out.println(\" private creds of class \" +\n-                                   o.getClass() + \"value is \" + o.toString());\n-            } catch (SecurityException e) {\n-                System.out.println(\"Should get Exception \");\n-            }\n-        }\n-        exceptionCounter=0;\n-        HashSet coll2 = new HashSet();\n-        coll2.add(new String(\"abc\"));\n-        coll2.add(new Integer (3));\n-        System.out.println(\" before removeall\");\n-        iter1 = p3.iterator();\n-        exceptionCounter =0;\n-        while (iter1.hasNext()) {\n-            try {\n-                Object o = iter1.next();\n-                System.out.println(\" private creds of class \" +\n-                                   o.getClass() + \"value is \" + o.toString());\n-            } catch (SecurityException e) {\n-                System.out.println(\"Expected Exception thrown \");\n-                exceptionCounter++;\n-            }\n-        }\n-        \/\/ We added two integer creds so there must be two exceptions only\n-\n-        if (exceptionCounter != 2) {\n-                throw new RuntimeException(\"Expected 2 Exceptions; received \" +\n-                                   exceptionCounter + \"exceptions \");\n-        }\n-\n-        try {\n-        p3.removeAll(coll2);\n-        System.out.println(\" removeall successful! \");\n-        } catch (SecurityException e) {\n-                throw new RuntimeException(\" Error: removeAll Security Exception!!\");\n-        }\n-\n-        iter1 = p3.iterator();\n-        System.out.println(\" After removeall\");\n-        exceptionCounter = 0;\n-        while (iter1.hasNext()) {\n-            try {\n-                Object o = iter1.next();\n-                System.out.println (\" private creds of class \" +\n-                                   o.getClass() + \"value is \" + o.toString());\n-            } catch (SecurityException e) {\n-                System.out.println(\"Expected Exception thrown \");\n-                exceptionCounter++;\n-            }\n-        }\n-        \/\/ We had two integer creds; removed one as  a part of coll2; so\n-        \/\/ only one exception must have been thrown\n-        if (exceptionCounter != 1) {\n-                throw new RuntimeException(\"Expected 1 Exceptions; received \" +\n-                                   exceptionCounter + \"exceptions \");\n-        }\n-        try {\n-        p3.clear();\n-        System.out.println(\" Clear() successful! \");\n-        } catch (SecurityException e) {\n-                throw new RuntimeException(\" Error: Clear Security Exception!!\");\n-        }\n-\n-\n-         \/*   New subject s with creds and privCredSet\n-          *\n-          *\/\n-        creds.clear();\n-        creds.add(\"abc\");\n-        creds.add(\"def\");\n-        creds.add(\"ghi\");\n-        creds.add(new Integer(1));\n-        Subject s =\n-            new Subject(false,  \/\/readOnly\n-                        Collections.singleton(new UnixPrincipal(\"user\")),\n-                        Collections.EMPTY_SET,\n-                        creds);\n-        try {\n-           Set privCredSet = s.getPrivateCredentials(char.class);\n-           if (privCredSet.size() != 0) {\n-              throw new RuntimeException(\"Error:String Privcred size should have been 0 and was \" +\n-                                 privCredSet.size());\n-            }\n-\n-        } catch (Exception e) {\n-            throw new RuntimeException (\"Error \" + e.toString());\n-        }\n-\n-\n-        try {\n-           Set privCredSet = s.getPrivateCredentials(String.class);\n-           if (privCredSet.size() != 3) {\n-              throw new RuntimeException(\"Error:String Privcred size should have been 2 and was \" +\n-                         privCredSet.size());\n-           }\n-           s.getPrivateCredentials().add(\"XYZ\");\n-           \/*\n-            * Since the privCredSet is not backed by internal private\n-            * creds adding to it should not make any difference to\n-            * privCredSet and theize should still be 3\n-            *\/\n-\n-           if (privCredSet.size() != 3) {\n-              throw new RuntimeException(\"Error:String Privcred size should have been 2 and was \" +\n-                         privCredSet.size());\n-           }\n-           s.getPrivateCredentials().remove(\"XYZ\");\n-                \/*\n-                 * Let us try to get the elements\n-                 * No exception should occur\n-                 *\/\n-\n-           Iterator iter = privCredSet.iterator();\n-           while (iter.hasNext()) {\n-             try {\n-                Object o = iter.next();\n-                System.out.println(\" private creds of class \" +\n-                        o.getClass() + \"value is \" + o.toString());\n-             } catch (SecurityException e) {\n-             }\n-           }\n-        } catch (Exception e) {\n-                e.printStackTrace();\n-                throw new RuntimeException(\"Unexcpected Exception\");\n-        }\n-\n-        \/*\n-         * Can we add and remove the creds\n-         *\/\n-        s.getPrivateCredentials().add(\"XYZ\");\n-        s.getPrivateCredentials().remove(\"XYZ\");\n-        s.getPrivateCredentials().add(new Integer(2));\n-        s.getPrivateCredentials().remove(new Integer(2));\n-\n-\n-        \/\/ We don't have permission to read Boolean creds\n-        \/\/ SInce the creds have no boolean creds we should get an empty\n-        \/\/ set\n-        try {\n-            Set privCredSet1 = s.getPrivateCredentials(Boolean.class);\n-            if (privCredSet1.size() != 0){\n-                  throw new RuntimeException(\"Error:String PrivcredSet1 of Boolean size should have been 0 and was \" +\n-                         privCredSet1.size());\n-            }\n-        } catch (SecurityException e) {\n-                e.printStackTrace();\n-                throw new RuntimeException(\"Unexcpected Exception\");\n-        }\n-        System.out.println (\"Checked Boolean Creds \");\n-\n-        \/*\n-         * We don't have permission to read Integer creds\n-         * We should get an empty set even though the private creds\n-         * has an integer cred. No security exception either !\n-         *\/\n-\n-        try {\n-            Set privCredSet1 = s.getPrivateCredentials(Integer.class);\n-            if (privCredSet1.size() != 0){\n-                  throw new RuntimeException(\"Error:String PrivcredSet1 of Integer size should have been 0 and was \" +\n-                         privCredSet1.size());\n-            }\n-        } catch (SecurityException e) {\n-                System.out.println (\"Expected exception\");\n-        }\n-        System.out.println (\"Checked Integer Creds \");\n-\n-        Set privCredSet2 = s.getPrivateCredentials();\n-\n-        if (privCredSet2.size() != 4){\n-              throw new RuntimeException(\"Error:String PrivcredSet1 size should have been 4 and was \" +\n-                         privCredSet2.size());\n-        }\n-\n-        \/*\n-         * Since the returned privCredSet2 is internally backed by the\n-         * private creds, any additions to it should be reflected in\n-         * privcredSet2\n-         *\/\n-        s.getPrivateCredentials().add(\"XYZ\");\n-        if (privCredSet2.size() != 5) {\n-              throw new RuntimeException(\"Error:String PrivcredSet1 size should have been 5 and was \" +\n-                         privCredSet2.size());\n-        }\n-        s.getPrivateCredentials().remove(\"XYZ\");\n-        if (privCredSet2.size() != 4) {\n-              throw new RuntimeException(\"String privCredSet2 size should have been  5 and was \" +\n-                         privCredSet2.size());\n-        }\n-        System.out.println(\"Checked remove(String) operation\");\n-        \/* Let us add a couple of Boolean creds *\/\n-        s.getPrivateCredentials().add(Boolean.TRUE);\n-        s.getPrivateCredentials().add(new Integer(2));\n-\n-        exceptionCounter =0;\n-        iter1 = privCredSet2.iterator();\n-        while (iter1.hasNext())\n-            {\n-                try {\n-                    Object o = iter1.next();\n-                    System.out.println(\" private creds of class \" +\n-                                       o.getClass() + \"value is \" + o.toString());\n-                } catch (SecurityException e) {\n-                    System.out.println(\" We should get exception\");\n-                    System.out.println(\"Exception!!\");\n-                    exceptionCounter++;\n-                }\n-            }\n-        if (exceptionCounter != 3) {\n-            throw new RuntimeException(\"Expected number of exception was 3 \" +\n-                        \"The actual number was \" + exceptionCounter);\n-        }\n-        privCredSet2.add (new Integer(3));\n-        try {\n-        int hashCode = privCredSet2.hashCode();\n-        } catch (SecurityException e) {\n-                System.out.println (\"hashCode Expected exception\");\n-        }\n-        System.out.println (\"Tests completed\");\n-    }\n-\n-}\n","filename":"test\/jdk\/javax\/security\/auth\/PrivateCredentialPermission\/Subset.java","additions":0,"deletions":612,"binary":false,"changes":612,"status":"deleted"},{"patch":"@@ -1,10 +0,0 @@\n-grant {\n-     permission java.security.SecurityPermission \"getProperty.combiner.provider\";\n-     permission java.util.PropertyPermission \"*\", \"read\";\n-     permission java.lang.RuntimePermission \"*\";\n-};\n-grant {\n-     permission javax.security.auth.AuthPermission \"modifyPrivateCredentials\";\n-     permission javax.security.auth.AuthPermission \"modifyPublicCredentials\";\n-     permission\tjavax.security.auth.PrivateCredentialPermission \"java.lang.String com.sun.security.auth.UnixPrincipal \\\"user\\\"\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/PrivateCredentialPermission\/Subset.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -30,2 +30,1 @@\n- * @run main\/othervm -Djava.security.manager=allow CallAsWithScopedValue false\n- * @run main\/othervm -Djava.security.manager=disallow CallAsWithScopedValue true\n+ * @run main\/othervm CallAsWithScopedValue true\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/CallAsWithScopedValue.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import com.sun.security.auth.UserPrincipal;\n-\n-import javax.security.auth.Subject;\n-import javax.security.auth.SubjectDomainCombiner;\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.Objects;\n-\n-\/*\n- * @test\n- * @bug 8296244\n- * @run main\/othervm -Djava.security.manager=allow Compat\n- * @summary ensures the old implementation still works when SM is allowed\n- *\/\n-public class Compat {\n-\n-    static PrivilegedExceptionAction<AccessControlContext> action\n-            = () -> AccessController.getContext();\n-\n-    static boolean failed = false;\n-\n-    public static void main(String[] args) throws Exception {\n-        main0(null);\n-        var t = new Thread(() -> {\n-            try {\n-                main0(null);\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n-        t.start();\n-        t.join();\n-    }\n-    public static void main0(String[] args) throws Exception {\n-        System.out.println(\">>> bare run\");\n-        run(null);\n-        System.out.println(\">>> run inside\");\n-        Subject subject = makeSubject(\"three\");\n-        Subject.doAs(subject, (PrivilegedExceptionAction<? extends Object>)\n-                () -> run(\"three\"));\n-        if (failed) {\n-            throw new RuntimeException();\n-        }\n-    }\n-\n-    public static Void run(String from) throws Exception {\n-        Subject subject = makeSubject(\"one\");\n-        var a1 = Subject.doAs(subject, action);\n-        Subject subject2 = makeSubject(\"two\");\n-        var a2 = Subject.doAs(subject2, action);\n-\n-        test(\"from ether\", AccessController.getContext(), from);\n-        test(\"from a1\", a1, \"one\");\n-        test(\"from a2\", a2, \"two\");\n-\n-        var a3 = Subject.doAsPrivileged(subject, action, a1);\n-        test(\"doAsPriv with one and a1\", a3, \"one\");\n-\n-        var a4 = Subject.doAsPrivileged(subject, action, a2);\n-        test(\"doAsPriv with one and a2\", a4, \"one\");\n-\n-        var a5 = Subject.doAsPrivileged(null, action, a2);\n-        test(\"doAsPriv with null and a2\", a5, null);\n-\n-        var a6 = Subject.doAs(null, action);\n-        test(\"doAsPriv with null and this\", a6, null);\n-\n-        var ax = new AccessControlContext(a2, new SubjectDomainCombiner(subject));\n-        test(\"a2 plus subject\", ax, \"one\");\n-\n-            ax = AccessController.doPrivileged(action, a2);\n-            test(\"doPriv on a2\", ax, \"two\");\n-\n-        ax = AccessController.doPrivilegedWithCombiner(action);\n-        test(\"doPrivWC\", ax, from == null ? null : from);\n-\n-        ax = AccessController.doPrivilegedWithCombiner(action, a2);\n-        test(\"doPrivWC on a2\", ax, from == null ? \"two\" : from);\n-        return null;\n-    }\n-\n-    static Subject makeSubject(String name) {\n-        Subject subject = new Subject();\n-        subject.getPrincipals().add(new UserPrincipal(name));\n-        return subject;\n-    }\n-\n-    static String getSubject(AccessControlContext acc) {\n-        var subj = Subject.getSubject(acc);\n-        if (subj == null) return null;\n-        var princ = subj.getPrincipals(UserPrincipal.class);\n-        return (princ == null || princ.isEmpty())\n-                ? null\n-                : princ.iterator().next().getName();\n-    }\n-\n-    static void test(String label, AccessControlContext acc, String expected) {\n-        var actual = getSubject(acc);\n-        System.out.println(label + \": \" + actual);\n-        if (!Objects.equals(actual, expected)) {\n-            System.out.println(\"    Expect \" + expected + \", but see \" + actual);\n-            failed = true;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/Compat.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -33,2 +33,1 @@\n- * @run main\/othervm -Djava.security.manager=allow CurrentSubject\n- * @run main\/othervm -Djava.security.manager=disallow CurrentSubject\n+ * @run main\/othervm CurrentSubject\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/CurrentSubject.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.security.manager=allow Exceptions\n+ * @run main\/othervm Exceptions\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/Exceptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.security.auth.Subject;\n-import javax.security.auth.x500.X500Principal;\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n-\/*\n- * @test\n- * @bug 8267108\n- * @summary confirm current installed subject specification\n- * @run main\/othervm -Djava.security.manager=allow FromACC\n- *\/\n-public class FromACC {\n-    public static void main(String[] args) throws Exception {\n-        var n = Subject.doAs(from(\"a\"), (PrivilegedAction<AccessControlContext>)\n-                () -> AccessController.getContext());\n-        if (!get(Subject.getSubject(n)).equals(\"CN=a\")) {\n-            throw new RuntimeException();\n-        }\n-    }\n-\n-    static Subject from(String name) {\n-        Subject s = new Subject();\n-        s.getPrincipals().add(new X500Principal(\"CN=\" + name));\n-        return s;\n-    }\n-\n-    static String get(Subject s) {\n-        if (s == null) {\n-            return \"none\";\n-        }\n-        var v = s.getPrincipals(X500Principal.class);\n-        if (v == null || v.isEmpty()) {\n-            return \"none\";\n-        } else {\n-            return v.iterator().next().getName();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/FromACC.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm\/policy=Serial.policy Serial\n@@ -78,19 +77,0 @@\n-            \/\/ make sure private credentials are not serializable\n-            \/\/ without permissions\n-\n-            Set privateCredentials = s.getPrivateCredentials();\n-            privateCredentials.add(new Serial());\n-\n-            fos = new FileOutputStream(\"serial2.tmp\");\n-            oos = new ObjectOutputStream(fos);\n-            try {\n-                oos.writeObject(privateCredentials);\n-                oos.flush();\n-                fos.close();\n-                throw new RuntimeException(\"Serial test failed: \" +\n-                        \"allowed to serialize private credential set\");\n-            } catch (SecurityException se) {\n-                \/\/ good\n-                se.printStackTrace();\n-            }\n-\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/Serial.java","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"serial.tmp\", \"read,write\";\n-    permission java.io.FilePermission \"serial2.tmp\", \"read,write\";\n-    permission javax.security.auth.AuthPermission \"modifyPrivateCredentials\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/Serial.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run main\/othervm\/policy=Synch2.policy Synch2\n@@ -40,1 +39,0 @@\n-        System.setSecurityManager(new SecurityManager());\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/Synch2.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/Synch2.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8296244\n- * @library \/test\/lib\n- * @summary Implement Subject.current and Subject.callAs using scoped values\n- * @run main\/othervm -Djava.security.manager=disallow UnsupportedSV t1\n- * @run main\/othervm -Djava.security.manager=allow UnsupportedSV t2\n- *\/\n-import com.sun.security.auth.UserPrincipal;\n-import jdk.test.lib.Utils;\n-\n-import javax.security.auth.Subject;\n-import javax.security.auth.SubjectDomainCombiner;\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n-public class UnsupportedSV {\n-    public static void main(String[] args) throws Exception {\n-        switch (args[0]) {\n-            case \"t1\" -> t1();\n-            case \"t2\" -> t2();\n-        }\n-    }\n-\n-    \/\/ ScopedValue-based implementation is used\n-    static void t1() throws Exception {\n-        AccessControlContext acc = AccessController.getContext();\n-        Utils.runAndCheckException(() -> Subject.getSubject(acc),\n-                UnsupportedOperationException.class);\n-\n-        Subject s = new Subject();\n-        s.getPrincipals().add(new UserPrincipal(\"Duke\"));\n-\n-        \/\/ TODO: Still has no way to reject the following code.\n-        \/\/ Here, AccessController::getContext returns a plain ACC without\n-        \/\/ the subject inside.\n-        AccessControlContext acc2 = Subject.callAs(s, AccessController::getContext);\n-        Subject ns = AccessController.doPrivileged(\n-                (PrivilegedAction<Subject>) Subject::current, acc2);\n-        System.out.println(ns);\n-    }\n-\n-    \/\/ When a security manager is set, ScopedValue-based implementation\n-    \/\/ will not be used\n-    static void t2() {\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject.getSubject(acc);\n-    }\n-}\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/UnsupportedSV.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,542 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.BufferedOutputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.security.AccessControlContext;\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.jar.JarEntry;\n-import java.util.jar.JarOutputStream;\n-import java.util.jar.Manifest;\n-import javax.security.auth.Subject;\n-import javax.security.auth.x500.X500Principal;\n-import jdk.test.lib.process.ProcessTools;\n-\n-\/**\n- * @test\n- * @bug 8048147\n- * @summary Check if proper AccessControlException is thrown\n- *          in case of nested Subject.doAs() invocations\n- *          when one of protection domains doesn't have permissions\n- *\n- * @library \/test\/lib\n- *\n- * @run main NestedActions jar NestedActionsACE.jar\n- *              NestedActionsACE.class Utils.class\n- * @run main NestedActions jar NestedActionsPAE.jar\n- *              NestedActionsPAE.class Utils.class\n- * @run main NestedActions jar NestedActionsOnePrincipal.jar\n- *              NestedActionsOnePrincipal.class Utils.class\n- * @run main NestedActions jar NestedActionsTwoPrincipals.jar\n- *              NestedActionsTwoPrincipals.class Utils.class\n- * @run main NestedActions jar WriteToFileAction.jar\n- *              WriteToFileAction.class\n- * @run main NestedActions jar WriteToFileNegativeAction.jar\n- *              WriteToFileNegativeAction.class\n- * @run main NestedActions jar WriteToFileExceptionAction.jar\n- *              WriteToFileExceptionAction.class\n- * @run main NestedActions jar ReadFromFileAction.jar\n- *              ReadFromFileAction.class\n- * @run main NestedActions jar ReadFromFileNegativeAction.jar\n- *              ReadFromFileNegativeAction.class\n- * @run main NestedActions jar ReadFromFileExceptionAction.jar\n- *              ReadFromFileExceptionAction.class\n- * @run main NestedActions jar ReadPropertyAction.jar\n- *              ReadPropertyAction.class\n- * @run main NestedActions jar ReadPropertyNegativeAction.jar\n- *              ReadPropertyNegativeAction.class\n- * @run main NestedActions jar ReadPropertyExceptionAction.jar\n- *              ReadPropertyExceptionAction.class ReadPropertyException.class\n- *\n- * @run main NestedActions NestedActionsACE policy.expect.ace\n- *              NestedActionsACE.jar WriteToFileNegativeAction.jar\n- *              ReadFromFileNegativeAction.jar ReadPropertyNegativeAction.jar\n- * @run main NestedActions NestedActionsPAE policy.expect.pae\n- *              NestedActionsPAE.jar WriteToFileExceptionAction.jar\n- *              ReadFromFileExceptionAction.jar ReadPropertyExceptionAction.jar\n- * @run main NestedActions NestedActionsOnePrincipal policy.one.principal\n- *              NestedActionsOnePrincipal.jar WriteToFileAction.jar\n- *              ReadFromFileAction.jar ReadPropertyAction.jar\n- * @run main NestedActions NestedActionsTwoPrincipals policy.two.principals\n- *              NestedActionsTwoPrincipals.jar WriteToFileAction.jar\n- *              ReadFromFileAction.jar ReadPropertyAction.jar\n- *\/\n-public class NestedActions {\n-\n-    static final String file = \"NestedActions.tmp\";\n-    static final String PS = System.getProperty(\"path.separator\");\n-    static final String FS = System.getProperty(\"file.separator\");\n-    static final String TEST_CLASSES = System.getProperty(\"test.classes\");\n-    static final String TEST_SOURCES = System.getProperty(\"test.src\");\n-    static final String JAVA_OPTS = System.getProperty(\"test.java.opts\");\n-    static final String JAVA = System.getProperty(\"java.home\")\n-            + FS + \"bin\" + FS + \"java\";\n-\n-    public static void main(String[] args) throws IOException {\n-        if (args.length > 0) {\n-            if (\"jar\".equals(args[0]) && args.length > 2) {\n-                createJar(args[1],\n-                    Arrays.copyOfRange(args, 2, args.length));\n-            } else {\n-                runJava(args);\n-            }\n-        } else {\n-            throw new RuntimeException(\"Wrong parameters\");\n-        }\n-    }\n-\n-    static void createJar(String dest, String... files) throws IOException {\n-        System.out.println(\"Create \" + dest + \" with the following content:\");\n-        try (JarOutputStream jos = new JarOutputStream(\n-                new FileOutputStream(dest), new Manifest())) {\n-            for (String file : files) {\n-                System.out.println(\"  \" + file);\n-                jos.putNextEntry(new JarEntry(file));\n-                try (FileInputStream fis = new FileInputStream(\n-                        TEST_CLASSES + FS + file)) {\n-                    fis.transferTo(jos);\n-                }\n-            }\n-        }\n-    }\n-\n-    static void runJava(String[] args) {\n-        if (args == null || args.length < 3) {\n-            throw new IllegalArgumentException(\"wrong parameters\");\n-        }\n-\n-        List<String> cmds = new ArrayList<>();\n-        cmds.add(JAVA);\n-        StringBuilder sb = new StringBuilder();\n-        cmds.add(\"-classpath\");\n-        for (int i=2; i<args.length; i++) {\n-            sb.append(args[i]).append(PS);\n-        }\n-        cmds.add(sb.toString());\n-        if (JAVA_OPTS != null && !JAVA_OPTS.isEmpty()) {\n-            Collections.addAll(cmds, JAVA_OPTS.trim().split(\"\\\\s+\"));\n-        }\n-        cmds.add(\"-Djava.security.manager\");\n-        cmds.add(\"-Djava.security.policy=\" + TEST_SOURCES + FS + args[1]);\n-        cmds.add(args[0]);\n-        try {\n-            ProcessTools.executeCommand(cmds.toArray(new String[cmds.size()]))\n-                    .shouldHaveExitValue(0);\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-}\n-\n-\/**\n- * Test for nested Subject.doAs() invocation:\n- *\n- * WriteToFileAction (CN=Duke principal) ->\n- *      ReadFromFileAction (CN=Duke principal) ->\n- *          ReadPropertyAction (CN=Duke principal)\n- *\n- * The test expects AccessControllException.\n- *\/\n-class NestedActionsACE {\n-\n-    public static void main(String args[]) {\n-        Subject subject = new Subject();\n-        subject.getPrincipals().add(new X500Principal(\"CN=Duke\"));\n-        WriteToFileNegativeAction writeToFile\n-                = new WriteToFileNegativeAction(NestedActions.file);\n-        Subject.doAs(subject, writeToFile);\n-    }\n-}\n-\n-\/**\n- * Test for nested Subject.doAs() invocation:\n- *\n- * WriteToFileAction (CN=Duke principal) ->\n- *      ReadFromFileAction (CN=Duke principal) ->\n- *          ReadPropertyAction (CN=Duke principal)\n- *\n- * The test expects PrivilegedActionException\n- * that caused by AccessControlEception.\n- *\/\n-class NestedActionsPAE {\n-\n-    public static void main(String args[]) {\n-        Subject subject = new Subject();\n-        subject.getPrincipals().add(new X500Principal(\"CN=Duke\"));\n-        try {\n-            WriteToFileExceptionAction writeToFile =\n-                    new WriteToFileExceptionAction(NestedActions.file);\n-            Subject.doAs(subject, writeToFile);\n-            throw new RuntimeException(\n-                    \"Test failed: no PrivilegedActionException thrown\");\n-        } catch (PrivilegedActionException pae) {\n-            System.out.println(\n-                    \"PrivilegedActionException thrown as expected: \"\n-                    + pae);\n-\n-            \/\/ check if AccessControlException caused PrivilegedActionException\n-            Throwable exception = pae.getException();\n-            do {\n-                if (!(exception instanceof PrivilegedActionException)) {\n-                    break;\n-                }\n-                exception = ((PrivilegedActionException) exception).\n-                        getException();\n-            } while (true);\n-\n-            if (!(exception instanceof ReadPropertyException)) {\n-                throw new RuntimeException(\n-                        \"Test failed: PrivilegedActionException \"\n-                        + \"was not caused by ReadPropertyException\");\n-            }\n-\n-            exception = exception.getCause();\n-            if (!(exception instanceof AccessControlException)) {\n-                throw new RuntimeException(\n-                        \"Test failed: PrivilegedActionException \"\n-                        + \"was not caused by ReadPropertyException\");\n-            }\n-\n-            System.out.println(\n-                    \"Test passed: PrivilegedActionException \"\n-                    + \"was caused by AccessControlException\");\n-        }\n-    }\n-}\n-\n-\/**\n- * Test for nested Subject.doAs() invocation:\n- *\n- * WriteToFileAction (CN=Duke principal) ->\n- *      ReadFromFileAction (CN=Duke principal) ->\n- *          ReadPropertyAction (CN=Duke principal)\n- *\/\n-class NestedActionsOnePrincipal {\n-\n-    public static void main(String args[]) {\n-        Subject subject = new Subject();\n-        subject.getPrincipals().add(new X500Principal(\"CN=Duke\"));\n-        WriteToFileAction writeToFile =\n-                new WriteToFileAction(NestedActions.file);\n-        Subject.doAs(subject, writeToFile);\n-    }\n-}\n-\n-\/**\n- * Test for nested Subject.doAs() invocation:\n- *\n- * WriteToFileAction (CN=Duke principal) ->\n- *      ReadFromFileAction (CN=Duke principal) ->\n- *          ReadPropertyAction (CN=Java principal)\n- *\/\n-class NestedActionsTwoPrincipals {\n-\n-    public static void main(String args[]) {\n-        Subject subject = new Subject();\n-        subject.getPrincipals().add(new X500Principal(\"CN=Duke\"));\n-        Subject anotherSubject = new Subject();\n-        anotherSubject.getPrincipals().add(new X500Principal(\"CN=Java\"));\n-        ReadFromFileAction readFromFile\n-                = new ReadFromFileAction(NestedActions.file, anotherSubject);\n-        WriteToFileAction writeToFile\n-                = new WriteToFileAction(NestedActions.file, readFromFile);\n-        Subject.doAs(subject, writeToFile);\n-    }\n-}\n-\n-\/**\n- * Helper class.\n- *\/\n-class Utils {\n-\n-    static void readFile(String filename) {\n-        System.out.println(\"ReadFromFileAction: try to read \" + filename);\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject subject = Subject.getSubject(acc);\n-        System.out.println(\"principals = \" + subject.getPrincipals());\n-        try (FileInputStream fis = new FileInputStream(filename)) {\n-            \/\/ do nothing\n-        } catch (IOException e) {\n-            throw new RuntimeException(\"Unexpected IOException\", e);\n-        }\n-    }\n-\n-    static void writeFile(String filename) {\n-        System.out.println(\"WriteToFileAction: try to write to \" + filename);\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject subject = Subject.getSubject(acc);\n-        System.out.println(\"principals = \" + subject.getPrincipals());\n-        try (BufferedOutputStream bos = new BufferedOutputStream(\n-                new FileOutputStream(filename))) {\n-            bos.write(0);\n-            bos.flush();\n-        } catch (IOException e) {\n-            throw new RuntimeException(\"Unexpected IOException\", e);\n-        }\n-    }\n-\n-}\n-\n-class WriteToFileAction implements PrivilegedAction {\n-\n-    private final String filename;\n-    private final PrivilegedAction nextAction;\n-\n-    WriteToFileAction(String filename, PrivilegedAction nextAction) {\n-        this.filename = filename;\n-        this.nextAction = nextAction;\n-    }\n-\n-    WriteToFileAction(String filename) {\n-        this(filename, new ReadFromFileAction(filename));\n-    }\n-\n-    @Override\n-    public Object run() {\n-        Utils.writeFile(filename);\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject subject = Subject.getSubject(acc);\n-        return Subject.doAs(subject, nextAction);\n-    }\n-\n-}\n-\n-class ReadFromFileAction implements PrivilegedAction {\n-\n-    private final String filename;\n-    private final Subject anotherSubject;\n-\n-    ReadFromFileAction(String filename) {\n-        this(filename, null);\n-    }\n-\n-    ReadFromFileAction(String filename, Subject anotherSubject) {\n-        this.filename = filename;\n-        this.anotherSubject = anotherSubject;\n-    }\n-\n-    @Override\n-    public Object run() {\n-        Utils.readFile(filename);\n-\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject subject = Subject.getSubject(acc);\n-        ReadPropertyAction readProperty = new ReadPropertyAction();\n-        if (anotherSubject != null) {\n-            return Subject.doAs(anotherSubject, readProperty);\n-        } else {\n-            return Subject.doAs(subject, readProperty);\n-        }\n-    }\n-\n-}\n-\n-class ReadPropertyAction implements PrivilegedAction {\n-\n-    @Override\n-    public java.lang.Object run() {\n-        System.out.println(\"ReadPropertyAction: \"\n-                + \"try to read 'java.class.path' property\");\n-\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject s = Subject.getSubject(acc);\n-        System.out.println(\"principals = \" + s.getPrincipals());\n-        System.out.println(\"java.class.path = \"\n-                + System.getProperty(\"java.class.path\"));\n-\n-        return null;\n-    }\n-\n-}\n-\n-class WriteToFileNegativeAction implements PrivilegedAction {\n-\n-    private final String filename;\n-\n-    public WriteToFileNegativeAction(String filename) {\n-        this.filename = filename;\n-    }\n-\n-    @Override\n-    public Object run() {\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject subject = Subject.getSubject(acc);\n-        System.out.println(\"principals = \" + subject.getPrincipals());\n-\n-        try {\n-            Utils.writeFile(filename);\n-            new File(filename).delete();\n-            throw new RuntimeException(\n-                    \"Test failed: no AccessControlException thrown\");\n-        } catch (AccessControlException ace) {\n-            System.out.println(\n-                    \"AccessControlException thrown as expected: \"\n-                    + ace.getMessage());\n-        }\n-\n-        ReadFromFileNegativeAction readFromFile\n-                = new ReadFromFileNegativeAction(filename);\n-        return Subject.doAs(subject, readFromFile);\n-    }\n-\n-}\n-\n-class ReadFromFileNegativeAction implements PrivilegedAction {\n-\n-    private final String filename;\n-\n-    public ReadFromFileNegativeAction(String filename) {\n-        this.filename = filename;\n-    }\n-\n-    @Override\n-    public Object run() {\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject subject = Subject.getSubject(acc);\n-        System.out.println(\"principals = \" + subject.getPrincipals());\n-\n-        try {\n-            Utils.readFile(filename);\n-            throw new RuntimeException(\n-                    \"Test failed: no AccessControlException thrown\");\n-        } catch (AccessControlException ace) {\n-            System.out.println(\n-                    \"AccessControlException thrown as expected: \"\n-                    + ace.getMessage());\n-        }\n-\n-        ReadPropertyNegativeAction readProperty =\n-                new ReadPropertyNegativeAction();\n-        return Subject.doAs(subject, readProperty);\n-    }\n-\n-}\n-\n-class ReadPropertyNegativeAction implements PrivilegedAction {\n-\n-    @Override\n-    public java.lang.Object run() {\n-        System.out.println(\"Try to read 'java.class.path' property\");\n-\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject s = Subject.getSubject(acc);\n-        System.out.println(\"principals = \" + s.getPrincipals());\n-\n-        try {\n-            System.out.println(\"java.class.path = \"\n-                    + System.getProperty(\"java.class.path\"));\n-            throw new RuntimeException(\n-                    \"Test failed: no AccessControlException thrown\");\n-        } catch (AccessControlException ace) {\n-            System.out.println(\n-                    \"AccessControlException thrown as expected: \"\n-                    + ace.getMessage());\n-        }\n-\n-        return null;\n-    }\n-\n-}\n-\n-class WriteToFileExceptionAction implements PrivilegedExceptionAction {\n-\n-    private final String filename;\n-\n-    WriteToFileExceptionAction(String filename) {\n-        this.filename = filename;\n-    }\n-\n-    @Override\n-    public Object run() throws Exception {\n-        Utils.writeFile(filename);\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject subject = Subject.getSubject(acc);\n-        ReadFromFileExceptionAction readFromFile =\n-                new ReadFromFileExceptionAction(filename);\n-        return Subject.doAs(subject, readFromFile);\n-    }\n-\n-}\n-\n-class ReadFromFileExceptionAction implements PrivilegedExceptionAction {\n-\n-    private final String filename;\n-\n-    ReadFromFileExceptionAction(String filename) {\n-        this.filename = filename;\n-    }\n-\n-    @Override\n-    public Object run() throws Exception {\n-        Utils.readFile(filename);\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject subject = Subject.getSubject(acc);\n-        ReadPropertyExceptionAction readProperty =\n-                new ReadPropertyExceptionAction();\n-        return Subject.doAs(subject, readProperty);\n-    }\n-\n-}\n-\n-class ReadPropertyExceptionAction implements PrivilegedExceptionAction {\n-\n-    @Override\n-    public java.lang.Object run() throws Exception {\n-        System.out.println(\"Try to read 'java.class.path' property\");\n-\n-        AccessControlContext acc = AccessController.getContext();\n-        Subject s = Subject.getSubject(acc);\n-        System.out.println(\"principals = \" + s.getPrincipals());\n-\n-        try {\n-            System.out.println(\"java.class.path = \"\n-                    + System.getProperty(\"java.class.path\"));\n-            throw new RuntimeException(\n-                    \"Test failed: no AccessControlException thrown\");\n-        } catch (AccessControlException ace) {\n-            System.out.println(\n-                    \"AccessControlException thrown as expected: \"\n-                    + ace.getMessage());\n-            throw new ReadPropertyException(ace);\n-        }\n-    }\n-\n-}\n-\n-class ReadPropertyException extends Exception {\n-\n-    ReadPropertyException(Throwable cause) {\n-        super(cause);\n-    }\n-}\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/doAs\/NestedActions.java","additions":0,"deletions":542,"binary":false,"changes":542,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n- \/*\n- * @test\n- * @bug 4399067 8179880\n- * @summary Subject.doAs(null, action) does not clear the executing subject\n- * @run main\/othervm\/policy=policy Test\n- *\/\n-import javax.security.auth.Subject;\n-import javax.security.auth.x500.X500Principal;\n-import java.security.*;\n-import java.util.*;\n-\n-public class Test {\n-\n-    public static Subject get(String name) {\n-\n-        return new Subject(true,\n-                Collections.singleton(new X500Principal(name)),\n-                new HashSet(),\n-                Collections.singleton(Boolean.TRUE));\n-    }\n-\n-    public static void main(String[] args) {\n-\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            Subject.doAsPrivileged(get(\"CN=joe\"), new PrivilegedAction() {\n-                public Object run() {\n-                    return Subject.doAs(null, new PrivilegedAction() {\n-                        public Object run() {\n-                            return System.getProperty(\"foobar\");\n-                        }\n-                    });\n-                }\n-            }, null);\n-            throw new RuntimeException(\n-                    \"AccessControlException should have occcured\");\n-        } catch (java.security.AccessControlException e) {\n-            \/\/ Expected exception occurred\n-            e.printStackTrace(System.out);\n-            System.out.println(\"Expected exception occurred\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/doAs\/Test.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,10 +0,0 @@\n-grant {\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission javax.security.auth.AuthPermission \"doAsPrivileged\";\n-    permission java.lang.RuntimePermission \"createSecurityManager\";\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-};\n-\n-grant principal javax.security.auth.x500.X500Principal \"CN=joe\" {\n-    permission java.util.PropertyPermission \"foobar\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/doAs\/policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/\/ this code has limited permissions that should cause ACE\n-grant codeBase \"file:NestedActionsACE.jar\" {\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-    permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission java.util.PropertyPermission \"path.separator\", \"read\";\n-    permission java.util.PropertyPermission \"file.separator\", \"read\";\n-    permission java.util.PropertyPermission \"test.classes\", \"read\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.util.PropertyPermission \"test.java.opts\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-};\n-\n-grant codeBase \"file:WriteToFileNegativeAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"file:ReadFromFileNegativeAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"file:ReadPropertyNegativeAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/doAs\/policy.expect.ace","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-grant codeBase \"file:NestedActionsPAE.jar\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"file:WriteToFileExceptionAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant codeBase \"file:ReadFromFileExceptionAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n-    permission java.security.AllPermission;\n-};\n-\n-\/\/ this code has limited permissions that should cause ACE\n-grant codeBase \"file:ReadPropertyExceptionAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/doAs\/policy.expect.pae","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,36 +0,0 @@\n-grant codeBase \"file:NestedActionsOnePrincipal.jar\" {\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-    permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission java.util.PropertyPermission \"path.separator\", \"read\";\n-    permission java.util.PropertyPermission \"file.separator\", \"read\";\n-    permission java.util.PropertyPermission \"test.classes\", \"read\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.util.PropertyPermission \"test.java.opts\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-    permission java.util.PropertyPermission \"java.class.path\", \"read\";\n-    permission java.io.FilePermission \"NestedActions.tmp\", \"read,write\";\n-};\n-\n-grant codeBase \"file:WriteToFileAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission java.util.PropertyPermission \"java.class.path\", \"read\";\n-    permission java.io.FilePermission \"NestedActions.tmp\", \"read,write\";\n-};\n-\n-grant codeBase \"file:ReadFromFileAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission java.util.PropertyPermission \"java.class.path\", \"read\";\n-    permission java.io.FilePermission \"NestedActions.tmp\", \"read\";\n-};\n-\n-grant codeBase \"file:ReadPropertyAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission java.util.PropertyPermission \"java.class.path\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/doAs\/policy.one.principal","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-grant codeBase \"file:NestedActionsTwoPrincipals.jar\" {\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-    permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission java.util.PropertyPermission \"path.separator\", \"read\";\n-    permission java.util.PropertyPermission \"file.separator\", \"read\";\n-    permission java.util.PropertyPermission \"test.classes\", \"read\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.util.PropertyPermission \"test.java.opts\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-    permission java.util.PropertyPermission \"java.class.path\", \"read\";\n-    permission java.io.FilePermission \"NestedActions.tmp\", \"read,write,delete\";\n-};\n-\n-grant codeBase \"file:WriteToFileAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\" {\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-    permission java.util.PropertyPermission \"java.class.path\", \"read\";\n-    permission java.io.FilePermission \"NestedActions.tmp\", \"read,write\";\n-};\n-\n-grant codeBase \"file:ReadFromFileAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Duke\"{\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission java.util.PropertyPermission \"java.class.path\", \"read\";\n-    permission java.io.FilePermission \"NestedActions.tmp\", \"read\";\n-};\n-\n-grant codeBase \"file:ReadPropertyAction.jar\"\n-        Principal javax.security.auth.x500.X500Principal \"cn=Java\" {\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission java.util.PropertyPermission \"java.class.path\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/doAs\/policy.two.principals","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm\/policy=Regression.policy -Djava.security.auth.debug=combiner Regression\n+ * @run main\/othervm -Djava.security.auth.debug=combiner Regression\n@@ -104,2 +104,1 @@\n-            domains1[3] != d4 ||\n-            !domains1[0].implies(new RuntimePermission(\"queuePrintJob\"))) {\n+            domains1[3] != d4) {\n@@ -120,2 +119,1 @@\n-            domains2[3] != domains1[3] ||\n-            !domains2[0].implies(new RuntimePermission(\"queuePrintJob\"))) {\n+            domains2[3] != domains1[3]) {\n@@ -138,3 +136,1 @@\n-            domains3[3] != domains1[3] ||\n-            !domains3[0].implies(new RuntimePermission(\"createClassLoader\")) ||\n-            domains3[0].implies(new RuntimePermission(\"queuePrintJob\"))) {\n+            domains3[3] != domains1[3]) {\n","filename":"test\/jdk\/javax\/security\/auth\/SubjectDomainCombiner\/Regression.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,12 +0,0 @@\n-grant {\n-    permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-};\n-\n-grant principal com.sun.security.auth.NTUserPrincipal \"test1\" {\n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-};\n-\n-grant principal com.sun.security.auth.NTUserPrincipal \"test1\",\n-      principal com.sun.security.auth.NTUserPrincipal \"test2\" {\n-    permission java.lang.RuntimePermission \"queuePrintJob\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/SubjectDomainCombiner\/Regression.policy","additions":0,"deletions":12,"binary":false,"changes":12,"status":"deleted"},{"patch":"@@ -1,8 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"test.provider.name\", \"read\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.io.FilePermission \"${test.src}${\/}*\", \"read\";\n-\n-    permission javax.security.auth.AuthPermission\n-\t\t\"createLoginConfiguration.JavaLoginConfig\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/login\/Configuration\/GetInstanceSecurity.grantedPolicy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6268315\n- * @modules jdk.security.auth\n- * @summary Configuration should be provider-based\n- * @build GetInstanceConfigSpi GetInstanceProvider\n- * @run main\/othervm\/policy=GetInstanceSecurity.policy GetInstanceSecurity\n- *\/\n-\n-import java.io.File;\n-import java.net.URI;\n-import java.security.Policy;\n-import java.security.Security;\n-import java.security.URIParameter;\n-import javax.security.auth.login.Configuration;\n-\n-public class GetInstanceSecurity {\n-\n-    private static final String JAVA_CONFIG = \"JavaLoginConfig\";\n-\n-    public static void main(String[] args) throws Exception {\n-        try {\n-            Configuration c = Configuration.getInstance(JAVA_CONFIG, null);\n-            throw new RuntimeException(\"did not catch security exception\");\n-        } catch (SecurityException se) {\n-            \/\/ good\n-        }\n-\n-        try {\n-            Configuration c = Configuration.getInstance\n-                        (JAVA_CONFIG, null, System.getProperty(\"test.provider.name\",\"SUN\"));\n-            throw new RuntimeException(\"did not catch security exception\");\n-        } catch (SecurityException se) {\n-            \/\/ good\n-        }\n-\n-        try {\n-            Configuration c = Configuration.getInstance\n-                        (JAVA_CONFIG, null, Security.getProvider(\n-                                System.getProperty(\"test.provider.name\",\"SUN\")));\n-            throw new RuntimeException(\"did not catch security exception\");\n-        } catch (SecurityException se) {\n-            \/\/ good\n-        }\n-\n-        \/\/ set a new policy that grants the perms, and then re-check perms\n-\n-        File file = new File(System.getProperty(\"test.src\", \".\"),\n-                                \"GetInstanceSecurity.grantedPolicy\");\n-        URI uri = file.toURI();\n-        URIParameter param = new URIParameter(uri);\n-        Policy p = Policy.getInstance(\"JavaPolicy\", param,\n-                System.getProperty(\"test.provider.name\",\"SUN\"));\n-        Policy.setPolicy(p);\n-\n-        \/\/ retry operations\n-\n-        file = new File(System.getProperty(\"test.src\", \".\"),\n-                        \"GetInstance.config\");\n-        URIParameter uriParam = new URIParameter(file.toURI());\n-\n-        try {\n-            Configuration c = Configuration.getInstance(JAVA_CONFIG, uriParam);\n-        } catch (SecurityException se) {\n-            throw new RuntimeException(\"unexpected SecurityException\");\n-        }\n-\n-        try {\n-            Configuration c = Configuration.getInstance\n-                        (JAVA_CONFIG, uriParam, System.getProperty(\"test.provider.name\",\"SUN\"));\n-            \/\/ good\n-        } catch (SecurityException se) {\n-            throw new RuntimeException(\"unexpected SecurityException\");\n-        }\n-\n-        try {\n-            Configuration c = Configuration.getInstance\n-                        (JAVA_CONFIG, uriParam, Security.getProvider(\n-                                System.getProperty(\"test.provider.name\",\"SUN\")));\n-            \/\/ good\n-        } catch (SecurityException se) {\n-            throw new RuntimeException(\"unexpected SecurityException\");\n-        }\n-\n-        System.out.println(\"test passed\");\n-    }\n-}\n","filename":"test\/jdk\/javax\/security\/auth\/login\/Configuration\/GetInstanceSecurity.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-\n-grant {\n-    permission java.util.PropertyPermission \"test.provider.name\", \"read\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www\";\n-    permission java.io.FilePermission\n-\t\"${test.src}${\/}GetInstanceSecurity.grantedPolicy\", \"read\";\n-    permission java.security.SecurityPermission \"createPolicy.JavaPolicy\";\n-    permission java.security.SecurityPermission \"setPolicy\";\n-\n-    \/\/ do not grant this:\n-    \/\/\n-    \/\/ permission javax.security.auth.AuthPermission\n-    \/\/\t\t\t\"createLoginConfiguration.JavaLoginConfig\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/login\/Configuration\/GetInstanceSecurity.policy","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm\/policy=ConfigConstructor.policy -Djava.security.auth.login.config=file:${test.src}\/ConfigConstructor.config ConfigConstructor\n+ * @run main\/othervm -Djava.security.auth.login.config=file:${test.src}\/ConfigConstructor.config ConfigConstructor\n@@ -94,18 +94,7 @@\n-        \/\/ test security (without permission)\n-        try {\n-            LoginContext lc5 = new LoginContext\n-                        (\"module5\",\n-                        null,\n-                        null,\n-                        c);\n-            lc5.login();\n-            throw new SecurityException(\"test failed - security check failed\");\n-        } catch (LoginException le) {\n-            if (le.getCause() instanceof SecurityException) {\n-                \/\/ test passed\n-            } else {\n-                le.printStackTrace();\n-                throw new SecurityException(\"test failed: \" +\n-                    \"LoginException did not have chained SecurityException\");\n-            }\n-        }\n+        \/\/ general test\n+        LoginContext lc5 = new LoginContext\n+                    (\"module5\",\n+                    null,\n+                    null,\n+                    c);\n+        lc5.login();\n@@ -114,1 +103,1 @@\n-        \/\/ test security (with permission)\n+        \/\/ test other\n@@ -116,1 +105,1 @@\n-                        (\"module6\",\n+                        (\"goToOther\",\n@@ -123,1 +112,1 @@\n-        \/\/ test other\n+        \/\/ test other old constructor\n@@ -125,4 +114,1 @@\n-                        (\"goToOther\",\n-                        null,\n-                        null,\n-                        c);\n+                        (\"goToOther\");\n@@ -131,6 +117,0 @@\n-\n-        \/\/ test other old constructor\n-        LoginContext lc8 = new LoginContext\n-                        (\"goToOther\");\n-        lc8.login();\n-        System.out.println(\"Test 8 Passed\");\n@@ -175,6 +155,0 @@\n-            } else if (name.equals(\"module6\")) {\n-                AppConfigurationEntry entry = new AppConfigurationEntry\n-                    (\"ConfigConstructor$MyModule6\",\n-                    AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,\n-                    map);\n-                entries[0] = entry;\n@@ -276,19 +250,0 @@\n-            \/\/ do something security-sensitive\n-            System.out.println(System.getProperty(\"user.name\"));\n-            return true;\n-        }\n-        public boolean commit() throws LoginException { return true; }\n-        public boolean abort() throws LoginException { return true; }\n-        public boolean logout() throws LoginException { return true; }\n-    }\n-\n-    public static class MyModule6 implements LoginModule {\n-\n-        public MyModule6() { }\n-\n-        public void initialize(Subject s, CallbackHandler ch,\n-                Map<String,?> state, Map<String,?> options) { }\n-\n-        public boolean login() throws LoginException {\n-            \/\/ do something security-sensitive\n-            System.out.println(System.getProperty(\"user.home\"));\n","filename":"test\/jdk\/javax\/security\/auth\/login\/LoginContext\/ConfigConstructor.java","additions":13,"deletions":58,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"user.home\", \"read\";\n-    permission javax.security.auth.AuthPermission \"createLoginContext.module3\";\n-    permission javax.security.auth.AuthPermission \"createLoginContext.module4\";\n-    permission javax.security.auth.AuthPermission \"createLoginContext.goToOther\";\n-    permission javax.security.auth.AuthPermission \"createLoginContext.other\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/login\/LoginContext\/ConfigConstructor.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4703361\n- * @modules jdk.security.auth\n- * @summary can not specify Configuration to LoginContext constructor\n- *\n- * @run main\/othervm\/policy=ConfigConstructorNoPerm.policy -Djava.security.auth.login.config=file:${test.src}\/ConfigConstructor.config ConfigConstructorNoPerm\n- *\/\n-\n-\/**\n- * This test shares the login config with ConfigConstructor.\n- * This test has no configured permissions\n- * (ConfigConstructor tests code with perms configured).\n- *\/\n-\n-import java.util.Map;\n-import javax.security.auth.Subject;\n-import javax.security.auth.login.AppConfigurationEntry;\n-import javax.security.auth.login.Configuration;\n-import javax.security.auth.login.LoginContext;\n-import javax.security.auth.callback.CallbackHandler;\n-\n-public class ConfigConstructorNoPerm {\n-\n-    private static Subject s = new Subject();\n-    private static CallbackHandler ch =\n-                new com.sun.security.auth.callback.TextCallbackHandler();\n-    private static Configuration c = new MyConfig();\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ test old constructor with no permission\n-        try {\n-            LoginContext lc1 = new LoginContext\n-                        (\"module1\",\n-                        s,\n-                        ch);\n-            throw new RuntimeException(\"Test 1 Failed\");\n-        } catch (SecurityException se) {\n-            \/\/ test passed\n-        }\n-        System.out.println(\"Test 1 Succeeded\");\n-\n-        \/\/ test new constructor (null config) with no permission\n-        try {\n-            LoginContext lc2 = new LoginContext\n-                        (\"module1\",\n-                        s,\n-                        ch,\n-                        null);\n-            throw new RuntimeException(\"Test 2 Failed\");\n-        } catch (SecurityException se) {\n-            \/\/ test passed\n-        }\n-        System.out.println(\"Test 2 Succeeded\");\n-\n-        \/\/ test new constructor (config) - no permission needed\n-        \/\/ (and none configured)\n-        LoginContext lc3 = new LoginContext\n-                        (\"module1\",\n-                        s,\n-                        ch,\n-                        c);\n-        System.out.println(\"Test 3 Succeeded\");\n-\n-        \/\/ test old constructor with no permission for other\n-        try {\n-            LoginContext lc4 = new LoginContext\n-                        (\"goToOther\",\n-                        s,\n-                        ch);\n-            throw new RuntimeException(\"Test 4 Failed\");\n-        } catch (SecurityException se) {\n-            \/\/ test passed\n-        }\n-        System.out.println(\"Test 4 Succeeded\");\n-\n-        \/\/ test new constructor with no permission for other\n-        try {\n-            LoginContext lc5 = new LoginContext\n-                        (\"goToOther\",\n-                        s,\n-                        ch,\n-                        null);\n-            throw new RuntimeException(\"Test 5 Failed\");\n-        } catch (SecurityException se) {\n-            \/\/ test passed\n-        }\n-        System.out.println(\"Test 5 Succeeded\");\n-    }\n-\n-    private static class MyConfig extends Configuration {\n-        public MyConfig() { }\n-        public AppConfigurationEntry[] getAppConfigurationEntry(String name) {\n-            java.util.HashMap map = new java.util.HashMap();\n-            AppConfigurationEntry[] entries = new AppConfigurationEntry[1];\n-\n-            if (name.equals(\"module1\")) {\n-                AppConfigurationEntry entry = new AppConfigurationEntry\n-                        (\"ConfigConstructor$MyModule1\",\n-                        AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,\n-                        map);\n-                entries[0] = entry;\n-            } else {\n-                entries = null;\n-            }\n-            return entries;\n-        }\n-        public void refresh() { }\n-    }\n-}\n","filename":"test\/jdk\/javax\/security\/auth\/login\/LoginContext\/ConfigConstructorNoPerm.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission javax.security.auth.AuthPermission \"createLoginContext.goToOther\";\n-};\n","filename":"test\/jdk\/javax\/security\/auth\/login\/LoginContext\/ConfigConstructorNoPerm.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm\/java.security.policy=policy TerminalFactorySpiTest\n+ * @run main TerminalFactorySpiTest\n","filename":"test\/jdk\/javax\/smartcardio\/TerminalFactorySpiTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-        permission java.security.SecurityPermission \"insertProvider.MyProvider\";\n-        permission java.security.SecurityPermission \"putProviderProperty.MyProvider\";\n-};\n","filename":"test\/jdk\/javax\/smartcardio\/policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n- * @run main\/othervm DefaultProperties\n- * @run main\/othervm\/policy=java.policy DefaultProperties\n@@ -36,0 +34,1 @@\n+ * @run main\/othervm DefaultProperties\n","filename":"test\/jdk\/javax\/sound\/midi\/MidiSystem\/DefaultProperties\/DefaultProperties.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.nio.file.Paths;\n-\n-import com.sun.media.sound.JDK13Services;\n-\n-\/**\n- * @test\n- * @bug 8201279\n- * @summary this test checks that \"javax.sound.config.file\" will be ignored if\n- *          the user has no access to the properties file\n- * @run main\/othervm\/policy=negative.policy DefaultPropertiesNegative\n- * @modules java.desktop\/com.sun.media.sound\n- *\/\n-public class DefaultPropertiesNegative {\n-\n-    private static final Class[] lineTypeClasses = {\n-        javax.sound.midi.Receiver.class,\n-        javax.sound.midi.Transmitter.class,\n-        javax.sound.midi.Sequencer.class,\n-        javax.sound.midi.Synthesizer.class,\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-        boolean allOk = true;\n-        String path = Paths.get(System.getProperty(\"test.src\", \".\"),\n-                                \"testdata\", \"conf\", \"sound.properties\")\n-                           .toAbsolutePath().normalize().toString();\n-        System.setProperty(\"javax.sound.config.file\", path);\n-\n-        for (int i = 0; i < lineTypeClasses.length; i++) {\n-            Class cls = lineTypeClasses[i];\n-            \/\/ properties file, both provider class name and instance name\n-            String result = JDK13Services.getDefaultProviderClassName(cls);\n-            if (result != null) {\n-                out(\"type \" + cls + \" failed: provider class should be 'null' \"\n-                            + \"but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-            result = JDK13Services.getDefaultInstanceName(cls);\n-            if (result != null) {\n-                out(\"type \" + cls + \" failed: instance name should be 'null' \"\n-                            + \"but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-        }\n-        if (! allOk) {\n-            throw new Exception(\"Test failed\");\n-        } else {\n-            out(\"Test passed\");\n-        }\n-    }\n-\n-    private static void out(String message) {\n-        System.out.println(message);\n-    }\n-}\n-\n","filename":"test\/jdk\/javax\/sound\/midi\/MidiSystem\/DefaultProperties\/DefaultPropertiesNegative.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,10 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"javax.sound.config.file\", \"write\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.util.PropertyPermission \"javax.sound.midi.Receiver\", \"write\";\n-    permission java.util.PropertyPermission \"javax.sound.midi.Transmitter\", \"write\";\n-    permission java.util.PropertyPermission \"javax.sound.midi.Sequencer\", \"write\";\n-    permission java.util.PropertyPermission \"javax.sound.midi.Synthesizer\", \"write\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.com.sun.media.sound\";\n-    permission java.io.FilePermission \"${test.src}\/testdata\/conf\/sound.properties\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/sound\/midi\/MidiSystem\/DefaultProperties\/java.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"javax.sound.config.file\", \"write\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.com.sun.media.sound\";\n-};\n","filename":"test\/jdk\/javax\/sound\/midi\/MidiSystem\/DefaultProperties\/negative.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+import javax.sound.midi.InvalidMidiDataException;\n+import javax.sound.midi.MidiSystem;\n+\n+\/**\n+ * @test\n+ * @bug 8312535\n+ * @summary Check if MidiSystem.getSoundbank() throws\n+ *          InvalidMidiDataException when provided with invalid soundbank data\n+ * @run main EmptySoundBankTest\n+ *\/\n+public final class EmptySoundBankTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        File tempFile = new File(\"sound.bank\");\n+        tempFile.createNewFile();\n+        try {\n+            MidiSystem.getSoundbank(tempFile);\n+            throw new RuntimeException(\"InvalidMidiDataException is expected\");\n+        } catch (InvalidMidiDataException ignore) {\n+        } finally {\n+            Files.delete(Paths.get(tempFile.getAbsolutePath()));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/sound\/midi\/Soundbanks\/EmptySoundBankTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-\n-import javax.sound.midi.InvalidMidiDataException;\n-import javax.sound.midi.MidiSystem;\n-\n-\/**\n- * @test\n- * @bug 8312535\n- * @summary MidiSystem.getSoundbank() throws unexpected SecurityException\n- * @run main\/othervm\/policy=security.policy GetSoundBankSecurityException\n- *\/\n-public final class GetSoundBankSecurityException {\n-\n-    public static void main(String[] args) throws Exception {\n-        File tempFile = new File(\"sound.bank\");\n-        tempFile.createNewFile();\n-        try {\n-            MidiSystem.getSoundbank(tempFile);\n-            throw new RuntimeException(\"InvalidMidiDataException is expected\");\n-        } catch (InvalidMidiDataException ignore) {\n-        } finally {\n-            Files.delete(Paths.get(tempFile.getAbsolutePath()));\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/sound\/midi\/Soundbanks\/GetSoundBankSecurityException\/GetSoundBankSecurityException.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"*\", \"read,write,delete\";\n-    permission java.util.PropertyPermission  \"user.dir\",  \"read\";\n-};\n","filename":"test\/jdk\/javax\/sound\/midi\/Soundbanks\/GetSoundBankSecurityException\/security.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,166 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.nio.file.Paths;\n-\n-import com.sun.media.sound.JDK13Services;\n-\n-\/**\n- * @test\n- * @bug 4776511 8201279\n- * @run main\/othervm DefaultProperties\n- * @run main\/othervm\/policy=java.policy DefaultProperties\n- * @summary RFE: Setting the default MixerProvider. Test the retrieving and\n- *          parsing of properties.\n- * @modules java.desktop\/com.sun.media.sound\n- *\/\n-public class DefaultProperties {\n-\n-    private static final Class[] lineTypeClasses = {\n-        javax.sound.sampled.SourceDataLine.class,\n-        javax.sound.sampled.TargetDataLine.class,\n-        javax.sound.sampled.Clip.class,\n-        javax.sound.sampled.Port.class,\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-        boolean allOk = true;\n-        String path = Paths.get(System.getProperty(\"test.src\", \".\"),\n-                                \"testdata\", \"conf\", \"sound.properties\")\n-                           .toAbsolutePath().normalize().toString();\n-        System.setProperty(\"javax.sound.config.file\", path);\n-\n-        for (int i = 0; i < lineTypeClasses.length; i++) {\n-            Class cls = lineTypeClasses[i];\n-            String propertyName = cls.getName();\n-            String result;\n-            String provClassName;\n-            String instanceName;\n-\n-            \/\/ properties file, both provider class name and instance name\n-            provClassName = \"xyz\";\n-            instanceName = \"123\";\n-            result = JDK13Services.getDefaultProviderClassName(cls);\n-            if (! provClassName.equals(result)) {\n-                out(\"type \" + cls + \" failed: provider class should be '\" +\n-                    provClassName + \"' but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-            result = JDK13Services.getDefaultInstanceName(cls);\n-            if (! instanceName.equals(result)) {\n-                out(\"type \" + cls + \" failed: instance name should be '\" +\n-                    instanceName + \"' but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-\n-            \/\/ system property, provider class name only, no trailing hash\n-            provClassName = \"abc\";\n-            System.setProperty(propertyName, provClassName);\n-            result = JDK13Services.getDefaultProviderClassName(cls);\n-            if (! provClassName.equals(result)) {\n-                out(\"type \" + cls + \" failed: provider class should be '\" +\n-                    provClassName + \"' but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-            result = JDK13Services.getDefaultInstanceName(cls);\n-            if (result != null) {\n-                out(\"type \" + cls + \" failed: instance name should be \" +\n-                    \"null but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-\n-            \/\/ system property, provider class name only, trailing hash\n-            provClassName = \"def\";\n-            System.setProperty(propertyName, provClassName + \"#\");\n-            result = JDK13Services.getDefaultProviderClassName(cls);\n-            if (! provClassName.equals(result)) {\n-                out(\"type \" + cls + \" failed: provider class should be '\" +\n-                    provClassName + \"' but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-            result = JDK13Services.getDefaultInstanceName(cls);\n-            if (result != null) {\n-                out(\"type \" + cls + \" failed: instance name should be \" +\n-                    \"null but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-\n-            \/\/ system property, instance name only\n-            instanceName = \"ghi\";\n-            System.setProperty(propertyName, \"#\" + instanceName);\n-            result = JDK13Services.getDefaultProviderClassName(cls);\n-            if (result != null) {\n-                out(\"type \" + cls + \" failed: provider class should be \" +\n-                    \"null but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-            result = JDK13Services.getDefaultInstanceName(cls);\n-            if (! instanceName.equals(result)) {\n-                out(\"type \" + cls + \" failed: instance name should be '\" +\n-                    instanceName + \"' but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-\n-            \/\/ system property, both provider class and instance name\n-            provClassName = \"jkl\";\n-            instanceName = \"mno\";\n-            System.setProperty(propertyName, provClassName + \"#\" + instanceName);\n-            result = JDK13Services.getDefaultProviderClassName(cls);\n-            if (! provClassName.equals(result)) {\n-                out(\"type \" + cls + \" failed: provider class should be '\" +\n-                    provClassName + \"' but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-            result = JDK13Services.getDefaultInstanceName(cls);\n-            if (! instanceName.equals(result)) {\n-                out(\"type \" + cls + \" failed: instance name should be '\" +\n-                    instanceName + \"' but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-\n-            \/\/ system property, empty\n-            System.setProperty(propertyName, \"\");\n-            result = JDK13Services.getDefaultProviderClassName(cls);\n-            if (result != null) {\n-                out(\"type \" + cls + \" failed: provider class should be \" +\n-                    \"null but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-            result = JDK13Services.getDefaultInstanceName(cls);\n-            if (result != null) {\n-                out(\"type \" + cls + \" failed: instance name should be \" +\n-                    \"null but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-        }\n-        if (! allOk) {\n-            throw new Exception(\"Test failed\");\n-        } else {\n-            out(\"Test passed\");\n-        }\n-    }\n-\n-    private static void out(String message) {\n-        System.out.println(message);\n-    }\n-}\n","filename":"test\/jdk\/javax\/sound\/sampled\/AudioSystem\/DefaultProperties\/DefaultProperties.java","additions":0,"deletions":166,"binary":false,"changes":166,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.nio.file.Paths;\n-\n-import com.sun.media.sound.JDK13Services;\n-\n-\/**\n- * @test\n- * @bug 8201279\n- * @run main\/othervm\/policy=negative.policy DefaultPropertiesNegative\n- * @summary this test checks that \"javax.sound.config.file\" will be ignored if\n- *          the user has no access to the properties file\n- * @modules java.desktop\/com.sun.media.sound\n- *\/\n-public class DefaultPropertiesNegative {\n-\n-    private static final Class[] lineTypeClasses = {\n-        javax.sound.sampled.SourceDataLine.class,\n-        javax.sound.sampled.TargetDataLine.class,\n-        javax.sound.sampled.Clip.class,\n-        javax.sound.sampled.Port.class,\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-        boolean allOk = true;\n-        String path = Paths.get(System.getProperty(\"test.src\", \".\"),\n-                                \"testdata\", \"conf\", \"sound.properties\")\n-                           .toAbsolutePath().normalize().toString();\n-        System.setProperty(\"javax.sound.config.file\", path);\n-\n-        for (int i = 0; i < lineTypeClasses.length; i++) {\n-            Class cls = lineTypeClasses[i];\n-            \/\/ properties file, both provider class name and instance name\n-            String result = JDK13Services.getDefaultProviderClassName(cls);\n-            if (result != null) {\n-                out(\"type \" + cls + \" failed: provider class should be 'null' \"\n-                            + \"but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-            result = JDK13Services.getDefaultInstanceName(cls);\n-            if (result != null) {\n-                out(\"type \" + cls + \" failed: instance name should be 'null' \"\n-                            + \"but is '\" + result + \"'!\");\n-                allOk = false;\n-            }\n-        }\n-        if (! allOk) {\n-            throw new Exception(\"Test failed\");\n-        } else {\n-            out(\"Test passed\");\n-        }\n-    }\n-\n-    private static void out(String message) {\n-        System.out.println(message);\n-    }\n-}\n","filename":"test\/jdk\/javax\/sound\/sampled\/AudioSystem\/DefaultProperties\/DefaultPropertiesNegative.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,10 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"javax.sound.config.file\", \"write\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.util.PropertyPermission \"javax.sound.sampled.SourceDataLine\", \"write\";\n-    permission java.util.PropertyPermission \"javax.sound.sampled.TargetDataLine\", \"write\";\n-    permission java.util.PropertyPermission \"javax.sound.sampled.Clip\", \"write\";\n-    permission java.util.PropertyPermission \"javax.sound.sampled.Port\", \"write\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.com.sun.media.sound\";\n-    permission java.io.FilePermission \"${test.src}\/testdata\/conf\/sound.properties\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/sound\/sampled\/AudioSystem\/DefaultProperties\/java.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"javax.sound.config.file\", \"write\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.com.sun.media.sound\";\n-};\n","filename":"test\/jdk\/javax\/sound\/sampled\/AudioSystem\/DefaultProperties\/negative.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-#\n-# Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-javax.sound.sampled.SourceDataLine=xyz#123\n-javax.sound.sampled.TargetDataLine=xyz#123\n-javax.sound.sampled.Clip=xyz#123\n-javax.sound.sampled.Port=xyz#123\n","filename":"test\/jdk\/javax\/sound\/sampled\/AudioSystem\/DefaultProperties\/testdata\/conf\/sound.properties","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,183 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import java.security.AccessControlException;\n-import java.security.Policy;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import javax.naming.Context;\n-import javax.sql.rowset.spi.SyncFactory;\n-import javax.sql.rowset.spi.SyncFactoryException;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-import util.BaseTest;\n-import util.StubContext;\n-import util.TestPolicy;\n-\/*\n- * @test\n- * @library \/java\/sql\/testng\n- * @library \/javax\/sql\/testng\n- * @run testng\/othervm -Djava.security.manager=allow SyncFactoryPermissionsTests\n- * @summary Tests SyncFactory permissions.\n- *\/\n-public class SyncFactoryPermissionsTests extends BaseTest {\n-\n-    Context ctx;\n-    private static Policy policy;\n-    private static SecurityManager sm;\n-    private final Logger alogger = Logger.getLogger(this.getClass().getName());\n-\n-    \/*\n-     * Install a SeeurityManager along with a base Policy to allow testNG to run\n-     *\/\n-    @BeforeClass\n-    public static void setUpClass() throws Exception {\n-        setPolicy(new TestPolicy());\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-\n-    \/*\n-     * Install the original Policy and SecurityManager\n-     *\/\n-    @AfterClass\n-    public static void tearDownClass() throws Exception {\n-        System.setSecurityManager(sm);\n-        setPolicy(policy);\n-    }\n-\n-    \/*\n-     * Initialize a Context to be used in our tests.\n-     * Save off the original Policy and SecurityManager\n-     *\/\n-    public SyncFactoryPermissionsTests() {\n-        policy = Policy.getPolicy();\n-        sm = System.getSecurityManager();\n-        ctx = new StubContext();\n-    }\n-\n-    \/*\n-     * Validate that AccessControlException is thrown if\n-     * SQLPermission(\"setSyncFactory\") has not been granted\n-     *\/\n-    @Test(expectedExceptions = AccessControlException.class)\n-    public void test() throws Exception {\n-        setPolicy(new TestPolicy());\n-        SyncFactory.setJNDIContext(ctx);\n-    }\n-\n-    \/*\n-     * Validate that a SyncFactoryException is thrown if the Logger is null\n-     *\/\n-    @Test(expectedExceptions = SyncFactoryException.class)\n-    public void test00() throws SyncFactoryException {\n-        Logger l = SyncFactory.getLogger();\n-    }\n-\n-    \/*\n-     * Validate that setJNDIContext succeeds if SQLPermission(\"setSyncFactory\")\n-     * has been granted\n-     *\/\n-    @Test\n-    public void test01() throws Exception {\n-        setPolicy(new TestPolicy(\"setSyncFactory\"));\n-        SyncFactory.setJNDIContext(ctx);\n-    }\n-\n-    \/*\n-     * Validate that setJNDIContext succeeds if AllPermissions has been granted\n-     *\/\n-    @Test\n-    public void test02() throws Exception {\n-        setPolicy(new TestPolicy(\"all\"));\n-        SyncFactory.setJNDIContext(ctx);\n-    }\n-\n-    \/*\n-     * Validate that AccessControlException is thrown if\n-     * SQLPermission(\"setSyncFactory\") has not been granted\n-     *\/\n-    @Test(expectedExceptions = AccessControlException.class)\n-    public void test03() throws Exception {\n-        setPolicy(new TestPolicy());\n-        SyncFactory.setLogger(alogger);\n-    }\n-\n-    \/*\n-     * Validate that setLogger succeeds if SQLPermission(\"setSyncFactory\")\n-     * has been granted\n-     *\/\n-    @Test\n-    public void test04() throws Exception {\n-        setPolicy(new TestPolicy(\"setSyncFactory\"));\n-        SyncFactory.setLogger(alogger);\n-    }\n-\n-    \/*\n-     * Validate that setLogger succeeds if AllPermissions has been granted\n-     *\/\n-    @Test\n-    public void test05() throws Exception {\n-        setPolicy(new TestPolicy(\"all\"));\n-        SyncFactory.setLogger(alogger);\n-    }\n-\n-    \/*\n-     * Validate that AccessControlException is thrown if\n-     * SQLPermission(\"setSyncFactory\") has not been granted\n-     *\/\n-    @Test(expectedExceptions = AccessControlException.class)\n-    public void test06() throws Exception {\n-        setPolicy(new TestPolicy());\n-        SyncFactory.setLogger(alogger, Level.INFO);\n-    }\n-\n-    \/*\n-     * Validate that AccessControlException is thrown if\n-     * SQLPermission(\"setSyncFactory\")  and LoggingPermission(\"control\", null)\n-     * have not been granted\n-     *\/\n-    @Test(expectedExceptions = AccessControlException.class)\n-    public void test07() throws Exception {\n-        setPolicy(new TestPolicy(\"setSyncFactory\"));\n-        SyncFactory.setLogger(alogger, Level.INFO);\n-    }\n-\n-    \/*\n-     * Validate that setLogger succeeds if SQLPermission(\"setSyncFactory\")\n-     * has been granted\n-     *\/\n-    @Test\n-    public void test08() throws Exception {\n-        setPolicy(new TestPolicy(\"setSyncFactoryLogger\"));\n-        SyncFactory.setLogger(alogger, Level.INFO);\n-    }\n-\n-    \/*\n-     * Validate that setLogger succeeds if AllPermissions has been granted\n-     *\/\n-    @Test\n-    public void test09() throws Exception {\n-        setPolicy(new TestPolicy(\"all\"));\n-        SyncFactory.setLogger(alogger, Level.INFO);\n-    }\n-}\n","filename":"test\/jdk\/javax\/sql\/permissionTests\/SyncFactoryPermissionsTests.java","additions":0,"deletions":183,"binary":false,"changes":183,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.security.manager=allow TestBasicComboBoxEditor\n+ * @run main TestBasicComboBoxEditor\n@@ -32,1 +32,0 @@\n- * @author Alexander Scherbatiy\n@@ -39,2 +38,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-        SwingUtilities.invokeAndWait(TestBasicComboBoxEditor::testBasicComboBoxEditor);\n@@ -53,1 +50,1 @@\n-            throw new RuntimeException(\"Wrong itme value!\");\n+            throw new RuntimeException(\"Wrong item value!\");\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/8080972\/TestBasicComboBoxEditor.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 5076514 8025430 8198321\n-   @summary Tests if SecurityManager.checkPermission()\n-                  used for clipboard access with permission 'accessClipboard'\n-   @run main\/othervm -Djava.security.manager=allow bug5076514\n-   @run main\/othervm -Djava.security.manager=allow -Djava.awt.headless=true bug5076514\n-*\/\n-\n-import java.awt.GraphicsEnvironment;\n-import java.security.Permission;\n-\n-import javax.swing.JEditorPane;\n-\n-public class bug5076514 {\n-    private final static String ACCESS_CLIPBOARD = \"accessClipboard\";\n-    private static boolean isCheckPermissionCalled = false;\n-\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new MySecurityManager());\n-\n-        \/\/ no system clipboard in the headless mode\n-        boolean expected  = !GraphicsEnvironment.isHeadless();\n-\n-        JEditorPane editor = new JEditorPane();\n-        editor.copy();\n-        if (isCheckPermissionCalled != expected) {\n-            throw new RuntimeException(\"JEditorPane's clipboard operations \"\n-                    + \"didn't call SecurityManager.checkPermission() with \"\n-                    + \"permission 'accessClipboard' when there is a security\"\n-                    + \" manager installed\");\n-        }\n-    }\n-\n-    private static class MySecurityManager extends SecurityManager {\n-        @Override\n-        public void checkPermission(Permission perm) {\n-            if (ACCESS_CLIPBOARD.equals(perm.getName())) {\n-                isCheckPermissionCalled = true;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JEditorPane\/5076514\/bug5076514.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -42,2 +43,1 @@\n- * @author Alexander Scherbatiy\n- * @run main\/othervm -Djava.security.manager=allow TestJEditor\n+ * @run main TestJEditor\n@@ -48,3 +48,0 @@\n-\n-        SwingUtilities.invokeAndWait(TestJEditor::testJEditorPane);\n-        System.setSecurityManager(new SecurityManager());\n@@ -55,0 +52,2 @@\n+        JEditorPane.registerEditorKitForContentType(\"text\/html\", UserEditorKit.class.getName());\n+        EditorKit editorKit = JEditorPane.createEditorKitForContentType(\"text\/html\");\n@@ -56,10 +55,2 @@\n-        try {\n-\n-            JEditorPane.registerEditorKitForContentType(\"text\/html\", UserEditorKit.class.getName());\n-            EditorKit editorKit = JEditorPane.createEditorKitForContentType(\"text\/html\");\n-\n-            if (!(editorKit instanceof UserEditorKit)) {\n-                throw new RuntimeException(\"Editor kit is not UserEditorKit!\");\n-            }\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n+        if (!(editorKit instanceof UserEditorKit)) {\n+            throw new RuntimeException(\"Editor kit is not UserEditorKit!\");\n","filename":"test\/jdk\/javax\/swing\/JEditorPane\/8080972\/TestJEditor.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 6484091\n- * @summary FileSystemView leaks directory info\n- * @author Pavel Porvatov\n-   @run main\/othervm -Djava.security.manager=allow bug6484091\n- *\/\n-\n-import javax.swing.filechooser.FileSystemView;\n-import java.io.File;\n-import java.security.AccessControlException;\n-\n-public class bug6484091 {\n-    public static void main(String[] args) {\n-        File dir = FileSystemView.getFileSystemView().getDefaultDirectory();\n-\n-        printDirContent(dir);\n-\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ The next test cases use 'dir' obtained without SecurityManager\n-\n-        try {\n-            printDirContent(dir);\n-\n-            throw new RuntimeException(\"Dir content was derived bypass SecurityManager\");\n-        } catch (AccessControlException e) {\n-            \/\/ It's a successful situation\n-        }\n-    }\n-\n-    private static void printDirContent(File dir) {\n-        System.out.println(\"Files in \" + dir.getAbsolutePath() + \":\");\n-\n-        for (File file : dir.listFiles()) {\n-            System.out.println(file.getName());\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/6484091\/bug6484091.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6570445\n- * @run main\/othervm -Djava.security.manager=allow  bug6570445\n- * @summary Checks if Win32ShellFolder2's COM-using methods work under a security manager\n- * @author Leonid Popov\n- *\/\n-\n-import javax.swing.filechooser.FileSystemView;\n-\n-public class bug6570445 {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ The next line of code forces FileSystemView to request data from Win32ShellFolder2,\n-        \/\/ what causes an exception if a security manager installed (see the bug 6570445 description)\n-        FileSystemView.getFileSystemView().getRoots();\n-\n-        System.out.println(\"Passed.\");\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/6570445\/bug6570445.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2009,2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @key headful\n-   @bug 6738668 6962725\n-   @summary JFileChooser cannot be created under SecurityManager\n-   @author Pavel Porvatov\n-   @run main\/othervm\/policy=security.policy bug6738668\n-*\/\n-\n-import java.io.File;\n-import javax.swing.JFileChooser;\n-import javax.swing.UIManager;\n-import javax.swing.UnsupportedLookAndFeelException;\n-\n-public class bug6738668 {\n-    public static void main(String[] args) throws Exception {\n-        for (UIManager.LookAndFeelInfo lookAndFeelInfo : UIManager.getInstalledLookAndFeels()) {\n-            try {\n-                UIManager.setLookAndFeel(lookAndFeelInfo.getClassName());\n-            } catch (UnsupportedLookAndFeelException ignored) {\n-                System.out.println(\"Unsupported L&F: \" + lookAndFeelInfo.getClassName());\n-                continue;\n-            } catch (ClassNotFoundException | InstantiationException\n-                 | IllegalAccessException e) {\n-                throw new RuntimeException(e);\n-            }\n-\n-            String tmpdir = System.getProperty(\"java.io.tmpdir\");\n-            System.out.println(\"tmp dir \" + tmpdir);\n-            new JFileChooser(new File(tmpdir+\"\/temp\"));\n-\n-\n-            System.out.println(\"Test passed for LookAndFeel \" + lookAndFeelInfo.getClassName());\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/6738668\/bug6738668.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\r\n-    permission java.io.FilePermission \"${java.io.tmpdir}${\/}temp${\/}*\", \"read\";\r\n-    permission java.io.FilePermission \"${java.io.tmpdir}${\/}temp\", \"read\";\r\n-    permission java.util.PropertyPermission \"*\", \"read\";\r\n-};\r\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/6738668\/security.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 7036025\n-   @summary java.security.AccessControlException when creating JFileChooser in signed applet\n-   @author Pavel Porvatov\n-   @run main\/othervm\/policy=security.policy bug7036025\n-*\/\n-\n-import javax.swing.*;\n-import java.io.File;\n-\n-public class bug7036025 {\n-    public static final String DIR = \"c:\/temp\";\n-\n-    public static void main(String[] args) throws Exception {\n-        String systemLookAndFeelClassName = UIManager.getSystemLookAndFeelClassName();\n-\n-        if (!systemLookAndFeelClassName.toLowerCase().contains(\"windows\")) {\n-            System.out.println(\"The test is only for Windows OS.\");\n-\n-            return;\n-        }\n-\n-        File file = new File(DIR);\n-\n-        if (!file.exists()) {\n-            if (!file.mkdir()) {\n-                throw new RuntimeException(\"Cannot create \" + DIR);\n-            }\n-\n-            file.deleteOnExit();\n-        }\n-\n-        UIManager.setLookAndFeel(systemLookAndFeelClassName);\n-\n-        new JFileChooser(file);\n-\n-        System.out.println(\"Test passed for LookAndFeel \" + UIManager.getLookAndFeel().getName());\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/7036025\/bug7036025.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"C:\\\\temp\\\\*\", \"read\";\n-    permission java.io.FilePermission \"C:\\\\temp\", \"read,write,delete\";\n-    permission java.util.PropertyPermission \"*\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/7036025\/security.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,215 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.Platform;\n-import java.awt.Robot;\n-import java.awt.event.KeyEvent;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PrintWriter;\n-import java.util.concurrent.TimeUnit;\n-import javax.swing.JFileChooser;\n-import javax.swing.SwingUtilities;\n-import javax.swing.filechooser.FileSystemView;\n-\n-\/**\n- * @test\n- * @bug 8062561\n- * @key headful\n- * @requires (os.family == \"windows\")\n- * @summary File system view returns null default directory\n- * @library \/test\/lib\n- * @modules java.desktop\/sun.awt\n- * @build jdk.test.lib.Platform\n- * @run main\/othervm bug8062561 GENERATE_POLICY\n- * @run main\/othervm\/policy=security.policy bug8062561 CHECK_DEFAULT_DIR run\n- *\/\n-public class bug8062561 {\n-\n-    private static final String POLICY_FILE = \"security2.policy\";\n-    private static volatile boolean fileChooserIsShown = false;\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        String test = args[0];\n-\n-        switch (test) {\n-            case \"GENERATE_POLICY\":\n-                generatePolicyFile();\n-                break;\n-            case \"CHECK_DEFAULT_DIR\":\n-                checkDefaultDirectory();\n-                break;\n-            case \"CHECK_FILE_CHOOSER\":\n-                checkFileChooser();\n-                break;\n-            default:\n-                throw new RuntimeException(\"Wrong argument!\");\n-        }\n-    }\n-\n-    private static void checkDefaultDirectory() {\n-        if (System.getSecurityManager() == null) {\n-            throw new RuntimeException(\"Security manager is not set!\");\n-        }\n-\n-        File defaultDirectory = FileSystemView.getFileSystemView().\n-                getDefaultDirectory();\n-        if (defaultDirectory != null) {\n-            throw new RuntimeException(\"File system default directory must be null! (FilePermission has not been granted in our policy file).\");\n-        }\n-    }\n-    private static volatile JFileChooser fileChooser;\n-\n-    private static void checkFileChooser() throws Exception {\n-        if (System.getSecurityManager() == null) {\n-            throw new RuntimeException(\"Security manager is not set!\");\n-        }\n-\n-        Robot robot = new Robot();\n-        robot.setAutoDelay(50);\n-\n-        SwingUtilities.invokeLater(new Runnable() {\n-\n-            public void run() {\n-                fileChooser = new JFileChooser();\n-                fileChooser.showOpenDialog(null);\n-                fileChooserIsShown = true;\n-                System.out.println(\"Start file chooser: \" + fileChooserIsShown);\n-            }\n-        });\n-\n-        long time = System.currentTimeMillis();\n-        while (fileChooser == null) {\n-            if (System.currentTimeMillis() - time >= 10000) {\n-                throw new RuntimeException(\"FileChoser is not shown!\");\n-            }\n-            Thread.sleep(500);\n-        }\n-\n-        Thread.sleep(500);\n-        robot.keyPress(KeyEvent.VK_ESCAPE);\n-        robot.keyRelease(KeyEvent.VK_ESCAPE);\n-        System.exit(0);\n-    }\n-\n-    private static void generatePolicyFile() throws Exception {\n-        if (System.getSecurityManager() != null) {\n-            throw new RuntimeException(\"Security manager should be null!\");\n-        }\n-\n-        if (!Platform.isWindows()) {\n-            return;\n-        }\n-\n-        File defaultDirectory = FileSystemView.getFileSystemView().\n-                getDefaultDirectory();\n-\n-        if (defaultDirectory == null) {\n-            throw new RuntimeException(\"Default directory is null!\");\n-        }\n-\n-        File policyFile = new File(POLICY_FILE);\n-        if (!policyFile.exists()) {\n-            policyFile.createNewFile();\n-        }\n-\n-        try (PrintWriter writer = new PrintWriter(policyFile, \"UTF-8\")) {\n-            writer.println(\"grant {\");\n-            String documents = defaultDirectory.getCanonicalPath();\n-            documents = documents.replace('\\\\', '\/');\n-            \/\/ Documents permission\n-            writer.print(\"  permission java.io.FilePermission\");\n-            writer.print(\" \\\"\" + documents + \"\\\",\");\n-            writer.println(\" \\\"read\\\";\");\n-            \/\/ Desktop permission\n-            writer.print(\"  permission java.io.FilePermission\");\n-            writer.print(\" \\\"\" + documents.replace(\"Documents\", \"Desktop\") + \"\\\",\");\n-            writer.println(\" \\\"read\\\";\");\n-            \/\/ robot permission \/\/ \"java.awt.AWTPermission\" \"createRobot\"\n-            writer.print(\"  permission java.awt.AWTPermission\");\n-            writer.println(\" \\\"createRobot\\\";\");\n-            writer.println(\"};\");\n-        }\n-\n-        performTest();\n-    }\n-\n-    private static void performTest() throws Exception {\n-        String javaPath = System.getProperty(\"java.home\", \"\");\n-        String command = javaPath + File.separator + \"bin\" + File.separator + \"java\"\n-                + \"  -Djava.security.manager -Djava.security.policy=\" + POLICY_FILE\n-                + \" bug8062561 CHECK_FILE_CHOOSER\";\n-        System.out.println(command);\n-        boolean processExit = false;\n-\n-        Process process = Runtime.getRuntime().exec(command);\n-\n-        try {\n-            processExit = process.waitFor(20, TimeUnit.SECONDS);\n-        } catch (IllegalThreadStateException e) {\n-            throw new RuntimeException(e);\n-        }\n-        System.out.println(\"[RESULT] : \"\n-                + \"The sub process has cleanly exited : PASS\");\n-\n-        InputStream errorStream = process.getErrorStream();\n-        System.out.println(\"========= Child process stderr ========\");\n-        boolean exception = dumpStream(errorStream);\n-        if (exception) {\n-            throw new RuntimeException(\"[RESULT] :\"\n-                    + \" Exception in child process : FAIL\");\n-        }\n-        System.out.println(\"=======================================\");\n-\n-        InputStream processInputStream = process.getInputStream();\n-        System.out.println(\"========= Child process output ========\");\n-        dumpStream(processInputStream);\n-        System.out.println(\"=======================================\");\n-\n-        if (!processExit) {\n-            process.destroy();\n-            throw new RuntimeException(\"[RESULT] : \"\n-                    + \"The sub process has not exited : FAIL\");\n-        }\n-    }\n-\n-    public static boolean dumpStream(InputStream in) throws IOException {\n-        String tempString;\n-        int count = in.available();\n-        boolean exception = false;\n-        while (count > 0) {\n-            byte[] b = new byte[count];\n-            in.read(b);\n-            tempString = new String(b);\n-            if (!exception) {\n-                exception = tempString.indexOf(\"Exception\") != -1;\n-            }\n-            System.out.println(tempString);\n-            count = in.available();\n-        }\n-\n-        return exception;\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/8062561\/bug8062561.java","additions":0,"deletions":215,"binary":false,"changes":215,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-\n-    permission java.util.PropertyPermission  \"user.home\", \"read\";\n-    permission java.util.PropertyPermission  \"user.dir\",  \"read\";\n-};\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/8062561\/security.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-\/\/ Autogenerated file\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/8062561\/security2.policy","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8182041\n- * @summary Tests if the files(Shortcut Panle files, FileChooser ComboBox files)\n- * are filtered out when run with SecurityManager enabled.\n- * @run main\/othervm\/policy=shellfolderqueries.policy ShellFolderQueriesSecurityManagerTest\n- *\/\n-\n-import javax.swing.filechooser.FileSystemView;\n-import java.io.File;\n-import java.util.Arrays;\n-\n-public class ShellFolderQueriesSecurityManagerTest {\n-    static final FileSystemView fsv = FileSystemView.getFileSystemView();\n-\n-    public static void main(String[] args) throws Exception {\n-        try {\n-            File[] shortcuts = fsv.getChooserShortcutPanelFiles();\n-            Arrays.asList(shortcuts).forEach(System.out::println);\n-\n-            if (shortcuts.length != 0) {\n-                throw new RuntimeException(\"Shortcut panel files leaked from SecurityManager.\");\n-            }\n-\n-            File[] cbFiles = fsv.getChooserComboBoxFiles();\n-            Arrays.asList(cbFiles).forEach(System.out::println);\n-            if (cbFiles.length != 0) {\n-                throw new RuntimeException(\"Combobox Files leaked from SecurityManager.\");\n-            }\n-\n-            System.out.println(\"ok\");\n-        } catch (SecurityException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/ShellFolderQueries\/ShellFolderQueriesSecurityManagerTest.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"user.home\", \"read\";\n-    permission java.util.PropertyPermission \"os.name\", \"read\";\n-    permission java.util.PropertyPermission \"os.version\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/ShellFolderQueries\/shellfolderqueries.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -Djava.security.manager=allow  TestDefaultFormatter\n+ * @run main TestDefaultFormatter\n@@ -32,1 +32,0 @@\n- * @author Alexander Scherbatiy\n@@ -39,2 +38,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-        SwingUtilities.invokeAndWait(TestDefaultFormatter::testDefaultFormatter);\n","filename":"test\/jdk\/javax\/swing\/JFormattedTextField\/8080972\/TestDefaultFormatter.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n- * @author Alexandr Scherbatiy\n@@ -60,2 +59,1 @@\n-    private static void runTest() throws Exception {\n-        System.setSecurityManager(new SecurityManager());\n+    private static void runTest() {\n@@ -71,1 +69,1 @@\n-                + \" -Djava.security.manager=allow \" + bug8081019.class.getName() + \" \" + RUN_TEST;\n+                + \" \" + bug8081019.class.getName() + \" \" + RUN_TEST;\n@@ -96,2 +94,2 @@\n-                exception = tempString.indexOf(\"Exception\") != -1\n-                        || tempString.indexOf(\"Error\") != -1;\n+                exception = tempString.contains(\"Exception\")\n+                            || tempString.contains(\"Error\");\n","filename":"test\/jdk\/javax\/swing\/JOptionPane\/8081019\/bug8081019.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6675802\n- * @summary Checks that there is no AccessControlException when\n- * a heaviweight popup menu is shown from an applet.\n- * @author Mikhail Lapshin\n- * @run main\/othervm -Djava.security.manager=allow  bug6675802\n- *\/\n-\n-import javax.swing.*;\n-\n-public class bug6675802 {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        final JPopupMenu popupMenu = new JPopupMenu();\n-        popupMenu.add(new JMenuItem(\"Click\"));\n-        popupMenu.show(null, 0, 0);\n-        System.out.println(\"Test passed\");\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/6675802\/bug6675802.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,116 +0,0 @@\n-\/*\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 6691503\n- * @summary Checks that there is no opportunity for a malicious applet\n- * to show a popup menu which has whole screen size.\n- * a heaviweight popup menu is shown from an applet.\n- * @author Mikhail Lapshin\n- * @run main\/othervm -Djava.security.manager=allow bug6691503\n- *\/\n-\n-import javax.swing.*;\n-import java.awt.*;\n-\n-public class bug6691503 {\n-    private JPopupMenu popupMenu;\n-    private JFrame frame;\n-    private boolean isAlwaysOnTop1 = false;\n-    private boolean isAlwaysOnTop2 = true;\n-\n-    public static void main(String[] args) {\n-        bug6691503 test = new bug6691503();\n-        test.setupUI();\n-        test.testApplication();\n-        test.testApplet();\n-        test.checkResult();\n-        test.stopEDT();\n-    }\n-\n-    private void setupUI() {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            public void run() {\n-                frame = new JFrame();\n-                frame.setVisible(true);\n-                popupMenu = new JPopupMenu();\n-                JMenuItem click = new JMenuItem(\"Click\");\n-                popupMenu.add(click);\n-            }\n-        });\n-    }\n-\n-    private void testApplication() {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            public void run() {\n-                popupMenu.show(frame, 0, 0);\n-                Window popupWindow = (Window)\n-                        (popupMenu.getParent().getParent().getParent().getParent());\n-                isAlwaysOnTop1 = popupWindow.isAlwaysOnTop();\n-                System.out.println(\n-                        \"Application: popupWindow.isAlwaysOnTop() = \" + isAlwaysOnTop1);\n-                popupMenu.setVisible(false);\n-            }\n-        });\n-    }\n-\n-    private void testApplet() {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            public void run() {\n-                System.setSecurityManager(new SecurityManager());\n-                popupMenu.show(frame, 0, 0);\n-                Window popupWindow = (Window)\n-                        (popupMenu.getParent().getParent().getParent().getParent());\n-                isAlwaysOnTop2 = popupWindow.isAlwaysOnTop();\n-                System.out.println(\n-                        \"Applet: popupWindow.isAlwaysOnTop() = \" + isAlwaysOnTop2);\n-                popupMenu.setVisible(false);\n-            }\n-        });\n-    }\n-\n-    private void checkResult() {\n-        try {\n-            Robot robot = new Robot();\n-            robot.waitForIdle();\n-        }catch(Exception ex) {\n-            ex.printStackTrace();\n-            throw new RuntimeException(\"Unexpected failure\");\n-        }\n-        if (!isAlwaysOnTop1 || isAlwaysOnTop2) {\n-            throw new RuntimeException(\"Malicious applet can show always-on-top \" +\n-                    \"popup menu which has whole screen size\");\n-        }\n-        System.out.println(\"Test passed\");\n-    }\n-\n-    private void stopEDT() {\n-        SwingUtilities.invokeLater(new Runnable() {\n-            public void run() {\n-                frame.dispose();\n-            }\n-        });\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/6691503\/bug6691503.java","additions":0,"deletions":116,"binary":false,"changes":116,"status":"deleted"},{"patch":"@@ -1,135 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 6694823\n- * @summary Checks that popup menu cannot be partially hidden\n- * by the task bar in applets.\n- * @author Mikhail Lapshin\n- * @run main\/othervm -Djava.security.manager=allow bug6694823\n- *\/\n-\n-import javax.swing.*;\n-import java.awt.*;\n-import java.security.Permission;\n-\n-public class bug6694823 {\n-    private static JFrame frame;\n-    private static JPopupMenu popup;\n-    private static Toolkit toolkit;\n-    private static Insets screenInsets;\n-    private static Robot robot;\n-\n-    public static void main(String[] args) throws Exception {\n-        robot = new Robot();\n-        toolkit = Toolkit.getDefaultToolkit();\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                createGui();\n-            }\n-        });\n-\n-        robot.waitForIdle();\n-\n-        \/\/ Get screen insets\n-        screenInsets = toolkit.getScreenInsets(frame.getGraphicsConfiguration());\n-        if (screenInsets.bottom == 0) {\n-            \/\/ This test is only for configurations with taskbar on the bottom\n-            return;\n-        }\n-\n-        System.setSecurityManager(new SecurityManager(){\n-\n-            @Override\n-            public void checkPermission(Permission perm) {\n-                if (perm.getName().equals(\"setWindowAlwaysOnTop\") ) {\n-                    throw new SecurityException();\n-                }\n-            }\n-\n-        });\n-\n-        \/\/ Show popup as if from an applet\n-        \/\/ The popup shouldn't overlap the task bar. It should be shifted up.\n-        checkPopup();\n-\n-    }\n-\n-    private static void createGui() {\n-        frame = new JFrame();\n-        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n-        frame.setUndecorated(true);\n-\n-        popup = new JPopupMenu(\"Menu\");\n-        for (int i = 0; i < 7; i++) {\n-            popup.add(new JMenuItem(\"MenuItem\"));\n-        }\n-        JPanel panel = new JPanel();\n-        panel.setComponentPopupMenu(popup);\n-        frame.add(panel);\n-\n-        frame.setSize(200, 200);\n-    }\n-\n-    private static void checkPopup() throws Exception {\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                \/\/ Place frame just above the task bar\n-                Dimension screenSize = toolkit.getScreenSize();\n-                frame.setLocation(screenSize.width \/ 2,\n-                        screenSize.height - frame.getHeight() - screenInsets.bottom);\n-                frame.setVisible(true);\n-            }\n-        });\n-\n-        \/\/ Ensure frame is visible\n-        robot.waitForIdle();\n-\n-        final Point point = new Point();\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                \/\/ Place popup over the task bar\n-                point.x = 0;\n-                point.y = frame.getHeight() - popup.getPreferredSize().height + screenInsets.bottom;\n-                popup.show(frame, point.x, point.y);\n-            }\n-        });\n-\n-        \/\/ Ensure popup is visible\n-        robot.waitForIdle();\n-\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-\n-            public void run() {\n-                Point frameLoc = frame.getLocationOnScreen();\n-                if (popup.getLocationOnScreen().equals(new Point(frameLoc.x, frameLoc.y + point.y))) {\n-                    throw new RuntimeException(\"Popup is not shifted\");\n-                }\n-                popup.setVisible(false);\n-                frame.dispose();\n-            }\n-        });\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/6694823\/bug6694823.java","additions":0,"deletions":135,"binary":false,"changes":135,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestJTableCellEditor\n-\n@@ -34,1 +32,1 @@\n- * @author Alexander Scherbatiy\n+ * @run main TestJTableCellEditor\n@@ -41,2 +39,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-        SwingUtilities.invokeAndWait(TestJTableCellEditor::testJTableCellEditor);\n","filename":"test\/jdk\/javax\/swing\/JTable\/8080972\/TestJTableCellEditor.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,3 @@\n-\/**\n+import javax.swing.UIDefaults;\n+\n+\/*\n@@ -27,1 +29,0 @@\n- * @author Alexander Potochkin\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Djava.security.manager=allow bug6622002\n+ * @run main bug6622002\n@@ -32,2 +33,0 @@\n-import javax.swing.*;\n-\n@@ -37,14 +36,0 @@\n-         if (createPrivateValue() == null) {\n-             throw new RuntimeException(\"The private value unexpectedly wasn't created\");\n-         }\n-\n-         if (createPublicValue() == null) {\n-             throw new RuntimeException(\"The public value unexpectedly wasn't created\");\n-         }\n-\n-         System.setSecurityManager(new SecurityManager());\n-\n-         if (createPrivateValue() != null) {\n-             throw new RuntimeException(\"The private value was unexpectedly created\");\n-         }\n-\n@@ -56,5 +41,0 @@\n-    private static Object createPrivateValue() {\n-        return new UIDefaults.ProxyLazyValue(\n-            \"javax.swing.MultiUIDefaults\").createValue(null);\n-    }\n-\n","filename":"test\/jdk\/javax\/swing\/UIDefaults\/6622002\/bug6622002.java","additions":5,"deletions":25,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @author Alexander Potochkin\n- * @run main\/othervm -Djava.security.manager=allow TableTest\n+ * @run main TableTest\n@@ -32,1 +31,2 @@\n-import javax.swing.*;\n+import java.awt.KeyboardFocusManager;\n+import javax.swing.JTable;\n@@ -34,1 +34,0 @@\n-import java.awt.*;\n@@ -39,1 +38,0 @@\n-\n@@ -41,1 +39,0 @@\n-        System.setSecurityManager(new SecurityManager());\n@@ -50,1 +47,0 @@\n-\n","filename":"test\/jdk\/javax\/swing\/UIDefaults\/6795356\/TableTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n- * @author Alexander Scherbatiy\n- * @run main\/othervm -Djava.security.manager=allow TestProxyLazyValue\n+ * @run main TestProxyLazyValue\n@@ -39,3 +38,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-        SwingUtilities.invokeAndWait(TestProxyLazyValue::testUserProxyLazyValue);\n-        SwingUtilities.invokeAndWait(TestProxyLazyValue::testProxyLazyValue);\n","filename":"test\/jdk\/javax\/swing\/UIDefaults\/8080972\/TestProxyLazyValue.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestTransferHandler\n@@ -34,1 +33,1 @@\n- * @author Alexander Scherbatiy\n+ * @run main TestTransferHandler\n@@ -41,2 +40,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-        SwingUtilities.invokeAndWait(TestTransferHandler::testTransferHandler);\n","filename":"test\/jdk\/javax\/swing\/dnd\/8080972\/TestTransferHandler.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestAbstractRegionPainter\n@@ -34,1 +33,1 @@\n- * @author Alexander Scherbatiy\n+ * @run main TestAbstractRegionPainter\n@@ -41,2 +40,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-        SwingUtilities.invokeAndWait(TestAbstractRegionPainter::testAbstractRegionPainter);\n","filename":"test\/jdk\/javax\/swing\/plaf\/nimbus\/8080972\/TestAbstractRegionPainter.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.swing.JButton;\n-import javax.swing.plaf.synth.SynthButtonUI;\n-\n-\/*\n- * @test\n- * @bug 8043627\n- * @run main\/othervm -Djava.security.manager=allow Test8043627\n- * @summary Tests that SynthContext can be created with SecurityManager installed\n- * @author Sergey Malenkov\n- *\/\n-\n-public class Test8043627 {\n-    public static void main(String[] args) {\n-        System.setSecurityManager(new SecurityManager());\n-        new SynthButtonUI().getContext(new JButton());\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/plaf\/synth\/Test8043627.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,1 @@\n- * @author Alexander Scherbatiy\n- * @run main\/othervm -Djava.security.manager=allow TestObjectView\n+ * @run main TestObjectView\n@@ -46,2 +45,0 @@\n-        System.setSecurityManager(new SecurityManager());\n-        SwingUtilities.invokeAndWait(TestObjectView::testObjectView);\n","filename":"test\/jdk\/javax\/swing\/text\/View\/8080972\/TestObjectView.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4178276\n- * @key headful\n- * @summary  RTFEditorkit.write(...) doesn't throw NPE when used in SecurityManager\n- * @run main\/othervm\/secure=allow bug4178276\n- *\/\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.nio.charset.StandardCharsets;\n-import javax.swing.text.Document;\n-import javax.swing.text.rtf.RTFEditorKit;\n-\n-public class bug4178276 {\n-\n-    public static void main(String[] argv) throws Exception {\n-        System.setSecurityManager(new SecurityManager());\n-\n-        String test=\"{\\\\rtf1\\\\ansi\\\\deff0\\\\deftab720{\\\\fonttbl{\\\\f0\\\\f swiss MS Sans Serif;}}{\\\\colortbl\\\\red0\\\\green0\\\\blue0;}\\\\qc\\\\plain\\\\f0 Test 1 \\\\par \\\\ql\\\\plain\\\\f0 Test 2 \\\\par \\\\qr\\\\plain\\\\f0 Test 3 \\\\par \\\\qj\\\\plain\\\\f0 Test 4}\";\n-        RTFEditorKit c = new RTFEditorKit();\n-        Document doc = c.createDefaultDocument();\n-        try {\n-            c.read(new ByteArrayInputStream(test.getBytes(\n-                                        StandardCharsets.ISO_8859_1)), doc, 0);\n-            ByteArrayOutputStream sw = new ByteArrayOutputStream();\n-            c.write(sw, doc, 0, 0);\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Unexpected NPE exception...\", e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/text\/rtf\/bug4178276.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,119 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.security.KeyFactory;\n-import java.security.PublicKey;\n-import java.security.spec.X509EncodedKeySpec;\n-import java.util.Base64;\n-import javax.xml.XMLConstants;\n-import javax.xml.crypto.Data;\n-import javax.xml.crypto.KeySelector;\n-import javax.xml.crypto.OctetStreamData;\n-import javax.xml.crypto.URIDereferencer;\n-import javax.xml.crypto.URIReference;\n-import javax.xml.crypto.URIReferenceException;\n-import javax.xml.crypto.XMLCryptoContext;\n-import javax.xml.crypto.dsig.XMLSignature;\n-import javax.xml.crypto.dsig.XMLSignatureFactory;\n-import javax.xml.crypto.dsig.dom.DOMValidateContext;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.NodeList;\n-\n-\/**\n- * @test\n- * @bug 8079140\n- * @summary Check if IgnoreAllErrorHandler doesn't require additional permission\n- * @run main\/othervm\/java.security.policy=ErrorHandlerPermissions.policy\n- *                                                      ErrorHandlerPermissions\n- *\/\n-public class ErrorHandlerPermissions {\n-\n-    private final static String FS = System.getProperty(\"file.separator\");\n-    private final static String DIR = System.getProperty(\"test.src\", \".\");\n-    private final static String DATA_DIR = DIR + FS + \"data\";\n-    private final static String SIGNATURE = DATA_DIR + FS +\n-            \"signature-external-rsa.xml\";\n-\n-    private static final String validationKey =\n-        \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCnx4TdvPSA5vcsPi0OJZi9Ox0Z\" +\n-        \"2FRz2oeUCtuWoyEg0kUCeFd+jJZMstDJUiZNSOeuCO3FWSpdJgAwI4zlveHvuU\/o\" +\n-        \"qHSa1eYTObOCvxfVYGGflWsSvGXyiANtRWVUrYODBeyL+2pWxDYh+Fi5EKizPfTG\" +\n-        \"wRjBVRSkRZKTnSjnQwIDAQAB\";\n-\n-    private static final URIDereferencer dereferencer =\n-            new DummyURIDereferencer();\n-\n-    public static void main(String[] args) throws Exception {\n-        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n-        dbf.setNamespaceAware(true);\n-        dbf.setValidating(false);\n-        dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);\n-        Document doc = dbf.newDocumentBuilder().parse(new File(SIGNATURE));\n-        NodeList nl = doc.getElementsByTagNameNS(XMLSignature.XMLNS,\n-                \"Signature\");\n-        if (nl.getLength() == 0) {\n-            throw new RuntimeException(\"Couldn't find 'Signature' element\");\n-        }\n-        Element element = (Element) nl.item(0);\n-\n-        byte[] keyBytes = Base64.getDecoder().decode(validationKey);\n-        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);\n-        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-        PublicKey key = kf.generatePublic(spec);\n-        KeySelector ks = KeySelector.singletonKeySelector(key);\n-\n-        DOMValidateContext vc = new DOMValidateContext(ks, element);\n-\n-        \/\/ disable secure validation mode\n-        vc.setProperty(\"org.jcp.xml.dsig.secureValidation\", Boolean.FALSE);\n-\n-        \/\/ set a dummy dereferencer to be able to get content by references\n-        vc.setURIDereferencer(dereferencer);\n-\n-        XMLSignatureFactory factory = XMLSignatureFactory.getInstance();\n-        XMLSignature signature = factory.unmarshalXMLSignature(vc);\n-\n-        \/\/ run validation\n-        signature.validate(vc);\n-    }\n-\n-    \/**\n-     * This URIDereferencer returns a static XML document.\n-     *\/\n-    private static class DummyURIDereferencer implements URIDereferencer {\n-\n-        @Override\n-        public Data dereference(final URIReference ref, XMLCryptoContext ctx)\n-                throws URIReferenceException {\n-            \/\/ return static content\n-            return new OctetStreamData(new ByteArrayInputStream(\n-                    \"<test>test<\/test>\".getBytes()), ref.getURI(),\n-                    ref.getType());\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/ErrorHandlerPermissions.java","additions":0,"deletions":119,"binary":false,"changes":119,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.util.PropertyPermission \"file.separator\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/-\", \"read\";\n-};\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/ErrorHandlerPermissions.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,138 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8264277\n- * @library \/test\/lib\n- * @modules jdk.httpserver\n- *          java.base\/jdk.internal.misc\n- * @requires os.family != \"windows\"\n- * @summary check permissions for XML signature\n- *\/\n-\n-import com.sun.net.httpserver.HttpServer;\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.process.Proc;\n-import jdk.test.lib.security.XMLUtils;\n-\n-import java.io.File;\n-import java.io.FilePermission;\n-import java.net.InetSocketAddress;\n-import java.net.SocketPermission;\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.security.KeyPair;\n-import java.security.KeyPairGenerator;\n-\n-\/\/ Note: This test does not run fine on Windows because the format by\n-\/\/ Path.toUri.toString (file:\/\/\/c:\/path\/to\/file) is not supported by\n-\/\/ ResolverLocalFilesystem.translateUriToFilename.\n-public class FileSocketPermissions    {\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 0) {\n-            Path plain = Files.writeString(\n-                    Path.of(System.getProperty(\"user.dir\"), \"a.xml\"), \"<a>x<\/a>\");\n-            HttpServer server = HttpServer.create(new InetSocketAddress(0), 0);\n-            server.createContext(\"\/\", ex -> {\n-                ex.sendResponseHeaders(200, 0);\n-                ex.getResponseBody().write(\"<a>x<\/a>\".getBytes(StandardCharsets.UTF_8));\n-                ex.close();\n-            });\n-            server.start();\n-            try {\n-                String httpDoc = \"http:\/\/localhost:\" + server.getAddress().getPort() + \"\/b.xml\";\n-                System.out.println(httpDoc);\n-\n-                \/\/ No permission granted.\n-                Proc p0 = Proc.create(\"FileSocketPermissions\")\n-                        .prop(\"java.security.manager\", \"\")\n-                        .debug(\"S\")\n-                        .args(\"sign\", plain.toUri().toString(), httpDoc)\n-                        .start();\n-                Asserts.assertEQ(p0.readData(), \"Error\");\n-                Asserts.assertEQ(p0.readData(), \"Error\");\n-\n-                \/\/ Permission to file and socket granted.\n-                Proc p = Proc.create(\"FileSocketPermissions\")\n-                        .prop(\"java.security.manager\", \"\")\n-                        .grant(new File(System.getProperty(\"test.classes\")))\n-                        .perm(new FilePermission(plain.toString(), \"read\"))\n-                        .perm(new SocketPermission(\"localhost\", \"resolve,connect\"))\n-                        .debug(\"S2\")\n-                        .args(\"sign\", plain.toUri().toString(), httpDoc)\n-                        .start();\n-\n-                Proc p2 = Proc.create(\"FileSocketPermissions\")\n-                        .prop(\"java.security.manager\", \"\")\n-                        .grant(new File(System.getProperty(\"test.classes\")))\n-                        .perm(new FilePermission(plain.toString(), \"read\"))\n-                        .perm(new SocketPermission(\"localhost\", \"resolve,connect\"))\n-                        .debug(\"V\")\n-                        .args(\"validate\")\n-                        .start();\n-\n-                while (true) {\n-                    String in = p.readData(); \/\/ read signed XML from signer\n-                    p2.println(in); \/\/ send signed XML to validator\n-                    if (in.equals(\"Over\")) {\n-                        break;\n-                    }\n-                    if (!p2.readData().equals(\"true\")) { \/\/ read validator result\n-                        throw new Exception(\"Validation error\");\n-                    }\n-                }\n-            } finally {\n-                server.stop(0);\n-            }\n-        } else if (args[0].equals(\"sign\")) {\n-            KeyPairGenerator g = KeyPairGenerator.getInstance(\"EC\");\n-            KeyPair p = g.generateKeyPair();\n-            var signer = XMLUtils.signer(p.getPrivate(), p.getPublic());\n-            for (int i = 1; i < args.length; i++) {\n-                try {\n-                    \/\/ Multiple line XML. Send as raw bytes (in Base64)\n-                    Proc.binOut(XMLUtils.doc2string(signer.sign(new URI(args[i])))\n-                            .getBytes(StandardCharsets.UTF_8));\n-                } catch (Exception se) {\n-                    se.printStackTrace();\n-                    Proc.textOut(\"Error\");\n-                }\n-            }\n-            Proc.textOut(\"Over\");\n-        } else if (args[0].equals(\"validate\")) {\n-            \/\/ Turn secureValidation off. Will read external data\n-            var validator = XMLUtils.validator().secureValidation(false);\n-            while (true) {\n-                String in = new String(Proc.binIn());\n-                if (in.equals(\"Over\")) {\n-                    Proc.textOut(\"Over\");\n-                    break;\n-                }\n-                Proc.textOut(Boolean.toString(validator.validate(XMLUtils.string2doc(in))));\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/FileSocketPermissions.java","additions":0,"deletions":138,"binary":false,"changes":138,"status":"deleted"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8264277\n+ * @library \/test\/lib\n+ * @modules jdk.httpserver\n+ *          java.base\/jdk.internal.misc\n+ * @requires os.family != \"windows\"\n+ * @summary check reference resolving for XML signature\n+ *\/\n+\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.Proc;\n+import jdk.test.lib.security.XMLUtils;\n+\n+import java.io.File;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+\n+\/\/ Note: This test does not run fine on Windows because the format by\n+\/\/ Path.toUri.toString (file:\/\/\/c:\/path\/to\/file) is not supported by\n+\/\/ ResolverLocalFilesystem.translateUriToFilename.\n+public class ResolveReferenceURIs    {\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            Path plain = Files.writeString(\n+                    Path.of(System.getProperty(\"user.dir\"), \"a.xml\"), \"<a>x<\/a>\");\n+            HttpServer server = HttpServer.create(new InetSocketAddress(0), 0);\n+            server.createContext(\"\/\", ex -> {\n+                ex.sendResponseHeaders(200, 0);\n+                ex.getResponseBody().write(\"<a>x<\/a>\".getBytes(StandardCharsets.UTF_8));\n+                ex.close();\n+            });\n+            server.start();\n+            try {\n+                String httpDoc = \"http:\/\/localhost:\" + server.getAddress().getPort() + \"\/b.xml\";\n+                System.out.println(httpDoc);\n+\n+                Proc p = Proc.create(\"ResolveReferenceURIs\")\n+                        .debug(\"S2\")\n+                        .args(\"sign\", plain.toUri().toString(), httpDoc)\n+                        .start();\n+\n+                Proc p2 = Proc.create(\"ResolveReferenceURIs\")\n+                        .debug(\"V\")\n+                        .args(\"validate\")\n+                        .start();\n+\n+                while (true) {\n+                    String in = p.readData(); \/\/ read signed XML from signer\n+                    p2.println(in); \/\/ send signed XML to validator\n+                    if (in.equals(\"Over\")) {\n+                        break;\n+                    }\n+                    if (!p2.readData().equals(\"true\")) { \/\/ read validator result\n+                        throw new Exception(\"Validation error\");\n+                    }\n+                }\n+            } finally {\n+                server.stop(0);\n+            }\n+        } else if (args[0].equals(\"sign\")) {\n+            KeyPairGenerator g = KeyPairGenerator.getInstance(\"EC\");\n+            KeyPair p = g.generateKeyPair();\n+            var signer = XMLUtils.signer(p.getPrivate(), p.getPublic());\n+            for (int i = 1; i < args.length; i++) {\n+                try {\n+                    \/\/ Multiple line XML. Send as raw bytes (in Base64)\n+                    Proc.binOut(XMLUtils.doc2string(signer.sign(new URI(args[i])))\n+                            .getBytes(StandardCharsets.UTF_8));\n+                } catch (Exception se) {\n+                    se.printStackTrace();\n+                    Proc.textOut(\"Error\");\n+                }\n+            }\n+            Proc.textOut(\"Over\");\n+        } else if (args[0].equals(\"validate\")) {\n+            \/\/ Turn secureValidation off. Will read external data\n+            var validator = XMLUtils.validator().secureValidation(false);\n+            while (true) {\n+                String in = new String(Proc.binIn());\n+                if (in.equals(\"Over\")) {\n+                    Proc.textOut(\"Over\");\n+                    break;\n+                }\n+                Proc.textOut(Boolean.toString(validator.validate(XMLUtils.string2doc(in))));\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/ResolveReferenceURIs.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -1,157 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 6436919 6460930\n- * @summary check that XML Signatures can be generated and validated with\n- *  SecurityManager enabled and default policy\n- * @run main\/othervm -Djava.security.manager=allow XMLDSigWithSecMgr\n- * @author Sean Mullan\n- *\/\n-import java.io.*;\n-import java.net.*;\n-import java.security.KeyPair;\n-import java.security.KeyPairGenerator;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import javax.xml.crypto.dsig.*;\n-import javax.xml.crypto.dsig.dom.DOMSignContext;\n-import javax.xml.crypto.dsig.dom.DOMValidateContext;\n-import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;\n-import javax.xml.crypto.dsig.spec.TransformParameterSpec;\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-\n-public class XMLDSigWithSecMgr implements Runnable {\n-\n-    private XMLSignatureFactory fac;\n-    private DigestMethod sha1;\n-    private CanonicalizationMethod withoutComments;\n-    private DocumentBuilder db;\n-\n-    private ServerSocket ss;\n-\n-    private void setup() throws Exception {\n-        ss = new ServerSocket(0);\n-        Thread thr = new Thread(this);\n-        thr.start();\n-\n-        fac = XMLSignatureFactory.getInstance();\n-        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n-        dbf.setNamespaceAware(true);\n-        db = dbf.newDocumentBuilder();\n-        sha1 = fac.newDigestMethod(DigestMethod.SHA1, null);\n-        withoutComments = fac.newCanonicalizationMethod\n-            (CanonicalizationMethod.INCLUSIVE, (C14NMethodParameterSpec)null);\n-    }\n-\n-    public void run() {\n-        try {\n-\n-        for (int i=0; i<2; i++) {\n-            Socket s = ss.accept();\n-            s.setTcpNoDelay(true);\n-\n-            PrintStream out = new PrintStream(\n-                                 new BufferedOutputStream(\n-                                    s.getOutputStream() ));\n-\n-            out.print(\"HTTP\/1.1 200 OK\\r\\n\");\n-            out.print(\"Content-Length: 11\\r\\n\");\n-            out.print(\"Content-Type: text\/plain\\r\\n\");\n-            out.print(\"\\r\\n\");\n-            out.print(\"l;ajfdjafd\\n\");\n-            out.flush();\n-\n-            \/\/ don't close the connection immediately as otherwise\n-            \/\/ the http headers may not have been received and the\n-            \/\/ http client will re-connect.\n-            Thread.currentThread().sleep(2000);\n-\n-            s.close();\n-        }\n-\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    XMLDSigWithSecMgr() throws Exception {\n-        setup();\n-        Document doc = db.newDocument();\n-        Element envelope = doc.createElementNS\n-            (\"http:\/\/example.org\/envelope\", \"Envelope\");\n-        envelope.setAttributeNS(\"http:\/\/www.w3.org\/2000\/xmlns\/\",\n-            \"xmlns\", \"http:\/\/example.org\/envelope\");\n-        doc.appendChild(envelope);\n-\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n-        KeyPair kp = kpg.genKeyPair();\n-\n-        \/\/ the policy only grants this test SocketPermission to accept, resolve\n-        \/\/ and connect to localhost so that it can dereference 2nd reference\n-        System.setProperty(\"java.security.policy\",\n-                System.getProperty(\"test.src\", \".\") + File.separator + \"policy\");\n-        System.setSecurityManager(new SecurityManager());\n-\n-        try {\n-            \/\/ generate a signature with SecurityManager enabled\n-            ArrayList refs = new ArrayList();\n-            refs.add(fac.newReference\n-                (\"\", sha1,\n-                 Collections.singletonList\n-                    (fac.newTransform(Transform.ENVELOPED,\n-                     (TransformParameterSpec) null)), null, null));\n-            refs.add(fac.newReference(\"http:\/\/localhost:\" + ss.getLocalPort()\n-                + \"\/anything.txt\", sha1));\n-            SignedInfo si = fac.newSignedInfo(withoutComments,\n-                fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), refs);\n-            XMLSignature sig = fac.newXMLSignature(si, null);\n-            DOMSignContext dsc = new DOMSignContext(kp.getPrivate(), envelope);\n-            sig.sign(dsc);\n-\n-            \/\/ validate a signature with SecurityManager enabled\n-            DOMValidateContext dvc = new DOMValidateContext\n-                (kp.getPublic(), envelope.getFirstChild());\n-\n-            \/\/ disable secure validation mode so that http reference will work\n-            dvc.setProperty(\"org.jcp.xml.dsig.secureValidation\", Boolean.FALSE);\n-\n-            sig = fac.unmarshalXMLSignature(dvc);\n-            if (!sig.validate(dvc)) {\n-                throw new Exception\n-                    (\"XMLDSigWithSecMgr signature validation FAILED\");\n-            }\n-        } catch (SecurityException se) {\n-            throw new Exception(\"XMLDSigWithSecMgr FAILED\", se);\n-        }\n-        ss.close();\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        new XMLDSigWithSecMgr();\n-    }\n-}\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/SecurityManager\/XMLDSigWithSecMgr.java","additions":0,"deletions":157,"binary":false,"changes":157,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.net.SocketPermission \"localhost\", \"accept,connect,resolve\";\n-};\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/SecurityManager\/policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @run main\/othervm\/java.security.policy==test.policy NullParent\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/TransformService\/NullParent.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-\n-};\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/TransformService\/test.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n- * @compile -XDignore.symbol.file Marshal.java\n- * @run main\/othervm\/java.security.policy==test.policy Marshal\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/keyinfo\/KeyInfo\/Marshal.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"accessClassInPackage.org.jcp.xml.dsig.internal.dom\";\n-};\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/keyinfo\/KeyInfo\/test.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,3 @@\n+import javax.xml.stream.XMLOutputFactory;\n+import org.testng.annotations.Test;\n+\n@@ -28,1 +31,1 @@\n- * @run main\/othervm JAXP15RegTest\n+ * @run testng JAXP15RegTest\n@@ -30,15 +33,1 @@\n-import java.security.Policy;\n-import javax.xml.stream.XMLOutputFactory;\n-\n-\/**\n- * @author huizhe.wang@oracle.com\n- *\/\n-public class JAXP15RegTest extends TestBase {\n-\n-    public JAXP15RegTest(String name) {\n-        super(name);\n-    }\n-\n-    private boolean hasSM;\n-    private Policy _orig;\n-\n+public class JAXP15RegTest {\n@@ -47,1 +36,2 @@\n-     * @param args the command line arguments\n+     * Verifies no Exception is thrown with the setProperty method.\n+     * @throws Exception if the test fails\n@@ -49,9 +39,2 @@\n-    public static void main(String[] args) {\n-        JAXP15RegTest test = new JAXP15RegTest(\"JAXP 1.5 regression\");\n-        test.setUp();\n-        test.testXMLOutputFactory();\n-        test.tearDown();\n-    }\n-\n-\n-    public void testXMLOutputFactory() {\n+    @Test\n+    public void testXMLOutputFactory() throws Exception {\n@@ -60,1 +43,0 @@\n-        success(\"testXMLOutputFactory passed\");\n@@ -62,1 +44,0 @@\n-\n","filename":"test\/jdk\/javax\/xml\/jaxp\/common\/8020430\/JAXP15RegTest.java","additions":10,"deletions":29,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.Policy;\n-\n-\/**\n- *\n- *\n- * @author huizhe.wang@oracle.com\n- *\/\n-public class TestBase {\n-    String filePath;\n-    boolean hasSM;\n-    String curDir;\n-    Policy origPolicy;\n-\n-    String testName;\n-    static String errMessage;\n-\n-    int passed = 0, failed = 0;\n-\n-    \/**\n-     * Creates a new instance of StreamReader\n-     *\/\n-    public TestBase(String name) {\n-        testName = name;\n-    }\n-\n-    \/\/junit @Override\n-    protected void setUp() {\n-        if (System.getSecurityManager() != null) {\n-            hasSM = true;\n-            System.setSecurityManager(null);\n-        }\n-\n-        filePath = System.getProperty(\"test.src\");\n-        if (filePath == null) {\n-            \/\/current directory\n-            filePath = System.getProperty(\"user.dir\");\n-        }\n-        origPolicy = Policy.getPolicy();\n-\n-    }\n-\n-    \/\/junit @Override\n-    public void tearDown() {\n-        \/\/ turn off security manager and restore policy\n-        System.setSecurityManager(null);\n-        Policy.setPolicy(origPolicy);\n-        if (hasSM) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-        System.out.println(\"\\nNumber of tests passed: \" + passed);\n-        System.out.println(\"Number of tests failed: \" + failed + \"\\n\");\n-\n-        if (errMessage != null ) {\n-            throw new RuntimeException(errMessage);\n-        }\n-    }\n-\n-    void fail(String errMsg) {\n-        if (errMessage == null) {\n-            errMessage = errMsg;\n-        } else {\n-            errMessage = errMessage + \"\\n\" + errMsg;\n-        }\n-        failed++;\n-    }\n-\n-    void success(String msg) {\n-        passed++;\n-        System.out.println(msg);\n-    }\n-\n-}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/common\/8020430\/TestBase.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,6 +24,0 @@\n-\/**\n- * @test\n- * @bug 8021148\n- * @summary test that JAXPSAXParser works even if referenced directly\n- * @run main\/othervm JAXPSAXParserTest\n- *\/\n@@ -37,0 +31,1 @@\n+import org.testng.annotations.Test;\n@@ -39,1 +34,4 @@\n- * test that JAXPSAXParser works even if referenced directly as\n+ * @test\n+ * @bug 8021148\n+ * @run testng\/othervm JAXPSAXParserTest\n+ * @summary test that JAXPSAXParser works even if referenced directly as\n@@ -42,2 +40,0 @@\n- *\n- * @author huizhe.wang@oracle.com\n@@ -45,5 +41,1 @@\n-public class JAXPSAXParserTest extends TestBase {\n-\n-    public JAXPSAXParserTest(String name) {\n-        super(name);\n-    }\n+public class JAXPSAXParserTest {\n@@ -52,1 +44,2 @@\n-     * @param args the command line arguments\n+     * Verifies that JAXPSAXParser can be directly instantiated.\n+     * @throws Exception if the test fails\n@@ -54,8 +47,2 @@\n-    public static void main(String[] args) {\n-        JAXPSAXParserTest test = new JAXPSAXParserTest(\"JAXP 1.5 regression\");\n-        test.setUp();\n-        test.testTransform();\n-        test.tearDown();\n-    }\n-\n-    public final void testTransform() {\n+    @Test\n+    public final void testTransform() throws Exception {\n@@ -88,1 +75,0 @@\n-            success(\"JAXPSAXParserTest passed\");\n@@ -95,1 +81,1 @@\n-            fail(e.toString());\n+            throw e;\n","filename":"test\/jdk\/javax\/xml\/jaxp\/parsers\/8021148\/JAXPSAXParserTest.java","additions":12,"deletions":26,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.Policy;\n-\n-\/**\n- *\n- *\n- * @author huizhe.wang@oracle.com\n- *\/\n-public class TestBase {\n-    String filePath;\n-    boolean hasSM;\n-    String curDir;\n-    Policy origPolicy;\n-\n-    String testName;\n-    static String errMessage;\n-\n-    int passed = 0, failed = 0;\n-\n-    \/**\n-     * Creates a new instance of StreamReader\n-     *\/\n-    public TestBase(String name) {\n-        testName = name;\n-    }\n-\n-    \/\/junit @Override\n-    protected void setUp() {\n-        if (System.getSecurityManager() != null) {\n-            hasSM = true;\n-            System.setSecurityManager(null);\n-        }\n-\n-        filePath = System.getProperty(\"test.src\");\n-        if (filePath == null) {\n-            \/\/current directory\n-            filePath = System.getProperty(\"user.dir\");\n-        }\n-        origPolicy = Policy.getPolicy();\n-\n-    }\n-\n-    \/\/junit @Override\n-    public void tearDown() {\n-        \/\/ turn off security manager and restore policy\n-        System.setSecurityManager(null);\n-        Policy.setPolicy(origPolicy);\n-        if (hasSM) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-        System.out.println(\"\\nNumber of tests passed: \" + passed);\n-        System.out.println(\"Number of tests failed: \" + failed + \"\\n\");\n-\n-        if (errMessage != null ) {\n-            throw new RuntimeException(errMessage);\n-        }\n-    }\n-\n-    void fail(String errMsg) {\n-        if (errMessage == null) {\n-            errMessage = errMsg;\n-        } else {\n-            errMessage = errMessage + \"\\n\" + errMsg;\n-        }\n-        failed++;\n-    }\n-\n-    void success(String msg) {\n-        passed++;\n-        System.out.println(msg);\n-    }\n-\n-}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/parsers\/8021148\/TestBase.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\n-import java.security.Policy;\n-\n-\/**\n- *\n- *\n- * @author huizhe.wang@oracle.com\n- *\/\n-public class TestBase {\n-    public String filePath;\n-    boolean hasSM;\n-    String curdir;\n-    Policy origPolicy;\n-\n-    String testName;\n-    String errMsg;\n-\n-    int passed = 0, failed = 0;\n-\n-    \/**\n-     * Creates a new instance of StreamReader\n-     *\/\n-    public TestBase(String name) {\n-        testName = name;\n-    }\n-\n-    \/\/junit @Override\n-    protected void setUp() {\n-        if (System.getSecurityManager() != null) {\n-            hasSM = true;\n-            System.setSecurityManager(null);\n-        }\n-\n-        filePath = System.getProperty(\"test.src\");\n-        if (filePath == null) {\n-            \/\/current directory\n-            filePath = System.getProperty(\"user.dir\");\n-        }\n-        origPolicy = Policy.getPolicy();\n-\n-    }\n-\n-    \/\/junit @Override\n-    public void tearDown() {\n-        \/\/ turn off security manager and restore policy\n-        System.setSecurityManager(null);\n-        Policy.setPolicy(origPolicy);\n-        if (hasSM) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-        System.out.println(\"\\nNumber of tests passed: \" + passed);\n-        System.out.println(\"Number of tests failed: \" + failed + \"\\n\");\n-\n-        if (errMsg != null ) {\n-            throw new RuntimeException(errMsg);\n-        }\n-    }\n-\n-    void fail(String msg) {\n-        if (errMsg == null) {\n-            errMsg = msg;\n-        } else {\n-            errMsg = errMsg + \"\\n\" + msg;\n-        }\n-        failed++;\n-    }\n-\n-    void success(String msg) {\n-        passed++;\n-        System.out.println(msg);\n-    }\n-\n-}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/parsers\/8022548\/TestBase.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,10 +24,0 @@\n-\/**\n- * @test\n- * @bug 8022548\n- * @summary test that a parser can use DTDConfiguration\n- * @modules java.xml\/com.sun.org.apache.xerces.internal.impl\n- *          java.xml\/com.sun.org.apache.xerces.internal.parsers\n- *          java.xml\/com.sun.org.apache.xerces.internal.util\n- *          java.xml\/com.sun.org.apache.xerces.internal.xni.parser\n- * @run main XOMParserTest\n- *\/\n@@ -40,0 +30,1 @@\n+import org.testng.annotations.Test;\n@@ -43,7 +34,8 @@\n- * <p>Test {@link javax.xml.transform.Transformer} for JDK-8022548: SPECJVM2008\n- * has errors introduced in 7u40-b34\n- *\n- * Test XOM is supported after jaxp 1.5 <\/p>\n- *\n- * @author Joe Wang <huizhe.wang@oracle.com>\n- *\n+ * @test\n+ * @bug 8022548\n+ * @modules java.xml\/com.sun.org.apache.xerces.internal.impl\n+ *          java.xml\/com.sun.org.apache.xerces.internal.parsers\n+ *          java.xml\/com.sun.org.apache.xerces.internal.util\n+ *          java.xml\/com.sun.org.apache.xerces.internal.xni.parser\n+ * @summary tests that a parser can use DTDConfiguration; XOM is supported after jaxp 1.5.\n+ * @run testng XOMParserTest\n@@ -51,6 +43,1 @@\n-public class XOMParserTest extends TestBase {\n-\n-    public XOMParserTest(String name) {\n-        super(name);\n-    }\n-\n+public class XOMParserTest {\n@@ -58,1 +45,2 @@\n-     * @param args the command line arguments\n+     * Verifies that a parser can use DTDConfiguration.\n+     * @throws Exception if the test fails\n@@ -60,8 +48,3 @@\n-    public static void main(String[] args) {\n-        XOMParserTest test = new XOMParserTest(\"XOM parser test\");\n-        test.setUp();\n-        test.testTransform();\n-        test.tearDown();\n-    }\n-\n-    public final void testTransform() {\n+    @Test\n+    public final void testTransform() throws Exception {\n+        String filePath = System.getProperty(\"test.src\");\n@@ -99,3 +82,0 @@\n-        } catch (Exception e) {\n-            \/\/ unexpected failure\n-            fail(e.getMessage());\n@@ -105,1 +85,1 @@\n-    public void canonicalize(String inName, String outName) {\n+    public void canonicalize(String inName, String outName) throws Exception {\n@@ -110,3 +90,0 @@\n-            success(\"test passed\");\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n@@ -114,1 +91,0 @@\n-\n","filename":"test\/jdk\/javax\/xml\/jaxp\/parsers\/8022548\/XOMParserTest.java","additions":17,"deletions":41,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -3,1 +26,7 @@\n-import java.io.File;\n+import com.sun.org.apache.xerces.internal.dom.PSVIElementNSImpl;\n+import com.sun.org.apache.xerces.internal.impl.Constants;\n+import com.sun.org.apache.xerces.internal.impl.xs.SchemaGrammar;\n+import com.sun.org.apache.xerces.internal.xs.ElementPSVI;\n+import com.sun.org.apache.xerces.internal.xs.ItemPSVI;\n+import com.sun.org.apache.xerces.internal.xs.XSElementDeclaration;\n+import com.sun.org.apache.xerces.internal.xs.XSTypeDefinition;\n@@ -6,1 +35,0 @@\n-\n@@ -17,11 +45,0 @@\n-\n-\n-import com.sun.org.apache.xerces.internal.dom.PSVIElementNSImpl;\n-import com.sun.org.apache.xerces.internal.impl.Constants;\n-import com.sun.org.apache.xerces.internal.impl.xs.SchemaGrammar;\n-import com.sun.org.apache.xerces.internal.xs.ElementPSVI;\n-import com.sun.org.apache.xerces.internal.xs.ItemPSVI;\n-import com.sun.org.apache.xerces.internal.xs.XSElementDeclaration;\n-import com.sun.org.apache.xerces.internal.xs.XSTypeDefinition;\n-import java.security.Policy;\n-import javax.xml.transform.stream.StreamSource;\n@@ -78,2 +95,0 @@\n-    private boolean hasSM;\n-    private Policy orig;\n@@ -90,6 +105,0 @@\n-        if (System.getSecurityManager() != null) {\n-            hasSM = true;\n-            System.setSecurityManager(null);\n-        }\n-\n-        orig = Policy.getPolicy();\n@@ -135,6 +144,0 @@\n-        System.setSecurityManager(null);\n-        Policy.setPolicy(orig);\n-        if (hasSM) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n","filename":"test\/jdk\/javax\/xml\/jaxp\/testng\/validation\/BaseTest.java","additions":30,"deletions":27,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.security.Policy;\n@@ -27,3 +26,1 @@\n- *\n- *\n- * @author huizhe.wang@oracle.com\n+ * Test base for the Extension Function tests.\n@@ -40,1 +37,0 @@\n-    boolean hasSM;\n@@ -42,1 +38,0 @@\n-    Policy origPolicy;\n@@ -57,5 +52,0 @@\n-        if (System.getSecurityManager() != null) {\n-            hasSM = true;\n-            System.setSecurityManager(null);\n-        }\n-\n@@ -67,2 +57,0 @@\n-        origPolicy = Policy.getPolicy();\n-\n@@ -73,6 +61,0 @@\n-        \/\/ turn off security manager and restore policy\n-        System.setSecurityManager(null);\n-        Policy.setPolicy(origPolicy);\n-        if (hasSM) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n","filename":"test\/jdk\/javax\/xml\/jaxp\/transform\/8004476\/TestBase.java","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,6 +23,1 @@\n-\/**\n- * @test\n- * @bug 8004476\n- * @summary test XPath extension functions\n- * @run main\/othervm -Djava.security.manager=allow XPathExFuncTest\n- *\/\n+\n@@ -31,7 +26,0 @@\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -55,3 +43,4 @@\n- * test XPath extension functions\n- *\n- * @author huizhe.wang@oracle.com\n+ * @test\n+ * @bug 8004476\n+ * @summary test XPath extension functions\n+ * @run main\/othervm XPathExFuncTest\n@@ -71,1 +60,1 @@\n-    boolean hasSM;\n+\n@@ -101,1 +90,1 @@\n-            evaluate(false);\n+            evaluate(false, false);\n@@ -111,1 +100,2 @@\n-     * Security is enabled, extension function not allowed\n+     * Security is enabled, extension function not allowed.\n+     * Note: removing Security Manager, use FEATURE_SECURE_PROCESSING instead.\n@@ -114,4 +104,0 @@\n-        Policy p = new SimplePolicy(new AllPermission());\n-        Policy.setPolicy(p);\n-        System.setSecurityManager(new SecurityManager());\n-\n@@ -119,1 +105,1 @@\n-            evaluate(false);\n+            evaluate(true, false);\n@@ -125,2 +111,0 @@\n-        } finally {\n-            System.setSecurityManager(null);\n@@ -131,1 +115,2 @@\n-     * Security is enabled, use new feature: enableExtensionFunctions\n+     * Security is enabled, use new feature: enableExtensionFunctions.\n+     * Note: removing Security Manager, use FEATURE_SECURE_PROCESSING instead.\n@@ -134,5 +119,0 @@\n-        Policy p = new SimplePolicy(new AllPermission());\n-        Policy.setPolicy(p);\n-        System.setSecurityManager(new SecurityManager());\n-\n-\n@@ -140,1 +120,1 @@\n-            evaluate(true);\n+            evaluate(true, true);\n@@ -146,2 +126,0 @@\n-        } finally {\n-            System.setSecurityManager(null);\n@@ -167,1 +145,2 @@\n-    void evaluate(boolean enableExt) throws XPathFactoryConfigurationException, XPathExpressionException {\n+    void evaluate(boolean secureMode, boolean enableExt)\n+            throws XPathFactoryConfigurationException, XPathExpressionException {\n@@ -171,0 +150,6 @@\n+        if (secureMode) {\n+            xPathFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        } else {\n+            xPathFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, false);\n+        }\n+\n@@ -181,3 +166,0 @@\n-        if (System.getSecurityManager() == null) {\n-            xPathFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, false);\n-        }\n@@ -255,32 +237,0 @@\n-\n-    class SimplePolicy extends Policy {\n-\n-        private final Permissions perms;\n-\n-        public SimplePolicy(Permission... permissions) {\n-            perms = new Permissions();\n-            for (Permission permission : permissions) {\n-                perms.add(permission);\n-            }\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource cs) {\n-            return perms;\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain pd) {\n-            return perms;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain pd, Permission p) {\n-            return perms.implies(p);\n-        }\n-\n-        \/\/for older jdk\n-        @Override\n-        public void refresh() {\n-        }\n-    }\n","filename":"test\/jdk\/javax\/xml\/jaxp\/transform\/8004476\/XPathExFuncTest.java","additions":22,"deletions":72,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,6 +23,0 @@\n-\/**\n- * @test\n- * @bug 8004476\n- * @summary test XSLT extension functions\n- * @run main\/othervm -Djava.security.manager=allow XSLTExFuncTest\n- *\/\n@@ -31,7 +25,1 @@\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n+import javax.xml.XMLConstants;\n@@ -44,3 +32,4 @@\n- * test XSLT extension functions\n- *\n- * @author huizhe.wang@oracle.com\n+ * @test\n+ * @bug 8004476\n+ * @summary test XSLT extension functions\n+ * @run main\/othervm XSLTExFuncTest\n@@ -59,1 +48,1 @@\n-    boolean hasSM;\n+\n@@ -107,1 +96,2 @@\n-     * Security is enabled, extension function not allowed\n+     * Security is enabled, extension function not allowed.\n+     * Note: removing Security Manager, use FEATURE_SECURE_PROCESSING instead.\n@@ -110,3 +100,1 @@\n-        Policy p = new SimplePolicy(new AllPermission());\n-        Policy.setPolicy(p);\n-        System.setSecurityManager(new SecurityManager());\n+\n@@ -116,0 +104,1 @@\n+            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n@@ -122,2 +111,0 @@\n-        } finally {\n-            System.setSecurityManager(null);\n@@ -128,1 +115,2 @@\n-     * Security is enabled, use new feature: enableExtensionFunctions\n+     * Security is enabled, use new feature: enableExtensionFunctions.\n+     * Note: removing Security Manager, use FEATURE_SECURE_PROCESSING instead.\n@@ -131,3 +119,0 @@\n-        Policy p = new SimplePolicy(new AllPermission());\n-        Policy.setPolicy(p);\n-        System.setSecurityManager(new SecurityManager());\n@@ -150,2 +135,0 @@\n-        } finally {\n-            System.setSecurityManager(null);\n@@ -168,3 +151,0 @@\n-        Policy p = new SimplePolicy(new AllPermission());\n-        Policy.setPolicy(p);\n-        System.setSecurityManager(new SecurityManager());\n@@ -193,2 +173,0 @@\n-        } finally {\n-            System.setSecurityManager(null);\n@@ -201,0 +179,1 @@\n+            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n@@ -216,32 +195,0 @@\n-\n-    class SimplePolicy extends Policy {\n-\n-        private final Permissions perms;\n-\n-        public SimplePolicy(Permission... permissions) {\n-            perms = new Permissions();\n-            for (Permission permission : permissions) {\n-                perms.add(permission);\n-            }\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource cs) {\n-            return perms;\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain pd) {\n-            return perms;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain pd, Permission p) {\n-            return perms.implies(p);\n-        }\n-\n-        \/\/for older jdk\n-        @Override\n-        public void refresh() {\n-        }\n-    }\n","filename":"test\/jdk\/javax\/xml\/jaxp\/transform\/8004476\/XSLTExFuncTest.java","additions":14,"deletions":67,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import java.security.AccessControlException;\n@@ -60,1 +59,1 @@\n- * @run testng\/othervm\/java.security.policy=untrusted.security.policy BeanLinkerTest\n+ * @run testng\/othervm BeanLinkerTest\n@@ -500,49 +499,0 @@\n-    \/\/ try calling System.getenv and expect security exception\n-    @Test(dataProvider = \"flags\")\n-    public void systemGetenvTest(final boolean publicLookup) {\n-        final CallSite cs1 = createGetMethodCallSite(publicLookup, \"getenv\");\n-        final CallSite cs2 = createCallSite(publicLookup, CALL, MethodType.methodType(Object.class, Object.class, Object.class));\n-\n-        try {\n-            final Object method = cs1.getTarget().invoke(StaticClass.forClass(System.class));\n-            cs2.getTarget().invoke(method, StaticClass.forClass(System.class));\n-            throw new RuntimeException(\"should not reach here in any case!\");\n-        } catch (final Throwable th) {\n-            Assert.assertTrue(th instanceof SecurityException);\n-        }\n-    }\n-\n-    \/\/ try getting a specific sensitive System property and expect security exception\n-    @Test(dataProvider = \"flags\")\n-    public void systemGetPropertyTest(final boolean publicLookup) {\n-        final CallSite cs1 = createGetMethodCallSite(publicLookup, \"getProperty\");\n-        final CallSite cs2 = createCallSite(publicLookup, CALL, MethodType.methodType(String.class, Object.class, Object.class, String.class));\n-\n-        try {\n-            final Object method = cs1.getTarget().invoke(StaticClass.forClass(System.class));\n-            cs2.getTarget().invoke(method, StaticClass.forClass(System.class), \"java.home\");\n-            throw new RuntimeException(\"should not reach here in any case!\");\n-        } catch (final Throwable th) {\n-            Assert.assertTrue(th instanceof SecurityException);\n-        }\n-    }\n-\n-    \/\/ check a @CallerSensitive API and expect appropriate access check exception\n-    @Test(dataProvider = \"flags\")\n-    public void systemLoadLibraryTest(final boolean publicLookup) {\n-        final CallSite cs1 = createGetMethodCallSite(publicLookup, \"loadLibrary\");\n-        final CallSite cs2 = createCallSite(publicLookup, CALL, MethodType.methodType(void.class, Object.class, Object.class, String.class));\n-\n-        try {\n-            final Object method = cs1.getTarget().invoke(StaticClass.forClass(System.class));\n-            cs2.getTarget().invoke(method, StaticClass.forClass(System.class), \"foo\");\n-            throw new RuntimeException(\"should not reach here in any case!\");\n-        } catch (final Throwable th) {\n-            if (publicLookup) {\n-                Assert.assertTrue(th instanceof IllegalAccessError);\n-            } else {\n-                Assert.assertTrue(th instanceof AccessControlException, \"Expected AccessControlException, got \" + th.getClass().getName());\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/dynalink\/BeanLinkerTest.java","additions":2,"deletions":52,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n- * @run testng\/othervm\/java.security.policy=trusted.security.policy TrustedDynamicLinkerFactoryTest\n+ * @run testng\/othervm TrustedDynamicLinkerFactoryTest\n","filename":"test\/jdk\/jdk\/dynalink\/TrustedDynamicLinkerFactoryTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import java.util.List;\n-import java.util.ServiceConfigurationError;\n-import jdk.dynalink.DynamicLinkerFactory;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-\/**\n- * @test\n- * @build TestGuardingDynamicLinkerExporter\n- * @run testng\/othervm\/java.security.policy=untrusted.security.policy UntrustedDynamicLinkerFactoryTest\n- *\/\n-public class UntrustedDynamicLinkerFactoryTest {\n-    @Test\n-    public void autoLoadedLinkerNegativeTest() {\n-        final DynamicLinkerFactory factory = new DynamicLinkerFactory();\n-        factory.createLinker();\n-        \/\/ expect one error as we have one untrusted linker exporter in META-INF\/services\n-        final List<ServiceConfigurationError> autoLoadingErrors = factory.getAutoLoadingErrors();\n-        \/\/ single error ...\n-        Assert.assertEquals(autoLoadingErrors.size(), 1);\n-        autoLoadingErrors.get(0).printStackTrace();\n-        final Throwable cause = autoLoadingErrors.get(0).getCause();\n-        \/\/ ..  due to permission check..\n-        Assert.assertTrue(cause.toString().contains(\"dynalink.exportLinkersAutomatically\"));\n-    }\n-}\n","filename":"test\/jdk\/jdk\/dynalink\/UntrustedDynamicLinkerFactoryTest.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-grant {\n-  permission java.io.FilePermission \"${user.home}\/-\", \"read\";\n-};\n-\n-grant codeBase \"file:${test.classes}\/-\" {\n-  permission java.lang.RuntimePermission \"dynalink.exportLinkersAutomatically\";\n-};\n","filename":"test\/jdk\/jdk\/dynalink\/trusted.security.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-  permission java.io.FilePermission \"${user.home}\/-\", \"read\";\n-};\n","filename":"test\/jdk\/jdk\/dynalink\/untrusted.security.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm\/java.security.policy=empty_security.policy VectorRuns\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorRuns.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,25 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-\/\/ This policy is used by tests not requiring permissions, to assert that the\n-\/\/ JDK implementation has the correct privileged blocks.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/empty_security.policy","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager allow\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager deny\n- *\/\n-\n-import java.net.URI;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Collections;\n-\n-public class WithSecurityManager {\n-    public static void main(String[] args) throws Exception {\n-        Path modulesPath = Paths.get(System.getProperty(\"java.home\"),\n-                \"lib\", \"modules\");\n-        if (Files.notExists(modulesPath)) {\n-            System.out.printf(\"%s doesn't exist.\", modulesPath.toString());\n-            System.out.println();\n-            System.out.println(\"It is most probably an exploded build.\"\n-                    + \" Skip the test.\");\n-            return;\n-        }\n-\n-        boolean allow = args[0].equals(\"allow\");\n-\n-        \/\/ set security policy to allow access\n-        if (allow) {\n-\n-            String testSrc = System.getProperty(\"test.src\");\n-            if (testSrc == null)\n-                testSrc = \".\";\n-            Path policyFile = Paths.get(testSrc, \"java.policy\");\n-            System.setProperty(\"java.security.policy\", policyFile.toString());\n-        }\n-\n-        \/\/ make sure that jrt:\/ has been created before we have a security manager\n-        FileSystems.getFileSystem(URI.create(\"jrt:\/\"));\n-\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ check FileSystems.getFileSystem\n-        try {\n-            FileSystems.getFileSystem(URI.create(\"jrt:\/\"));\n-            if (!allow) throw new RuntimeException(\"access not expected\");\n-        } catch (SecurityException se) {\n-            if (allow)\n-                throw se;\n-        }\n-\n-        \/\/ check FileSystems.newFileSystem\n-        try {\n-            FileSystems.newFileSystem(URI.create(\"jrt:\/\"), Collections.emptyMap());\n-            if (!allow) throw new RuntimeException(\"access not expected\");\n-        } catch (SecurityException se) {\n-            if (allow)\n-                throw se;\n-        }\n-\n-        \/\/ check Paths.get\n-        try {\n-            Paths.get(URI.create(\"jrt:\/java.base\/java\/lang\/Object.class\"));\n-            if (!allow) throw new RuntimeException(\"access not expected\");\n-        } catch (SecurityException se) {\n-            if (allow)\n-                throw se;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/jdk\/internal\/jrtfs\/WithSecurityManager.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"accessSystemModules\";\n-};\n","filename":"test\/jdk\/jdk\/internal\/jrtfs\/java.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -54,1 +52,1 @@\n-    \/\/ Must call in separate thread because JTREG uses reflection\n+    \/\/ Must emit events in separate threads, because JTREG uses reflection\n@@ -56,18 +54,0 @@\n-    public static class TestThread extends Thread {\n-        public void run() {\n-            \/\/ doPrivileged calls a method that has the @Hidden\n-            \/\/ annotation\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                @Override\n-                public Void run() {\n-                    MyEvent event = new MyEvent();\n-                    event.commit();\n-                    return null;\n-                }\n-            });\n-\n-            MyEvent event = new MyEvent();\n-            event.commit();\n-        }\n-    }\n-\n@@ -78,3 +58,17 @@\n-            Thread t = new TestThread();\n-            t.start();\n-            t.join();\n+            Thread t1 = new Thread(() -> {\n+                \/\/ Runs in hidden lambda frame\n+                MyEvent event = new MyEvent();\n+                event.hidden = true;\n+                event.commit();\n+            });\n+            t1.start();\n+            t1.join();\n+            Thread t2 = new Thread() {\n+                public void run() {\n+                    MyEvent event = new MyEvent();\n+                    event.hidden = false;\n+                    event.commit();\n+                }\n+            };\n+            t2.start();\n+            t2.join();\n@@ -85,0 +79,5 @@\n+            \/\/ Swap events if they come out of order.\n+            boolean hidden = events.get(0).getBoolean(\"hidden\");\n+            if (!hidden) {\n+                events = events.reversed();\n+            }\n@@ -109,0 +108,1 @@\n+        public boolean hidden;\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestHiddenMethod.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.jfr.Event;\n@@ -32,1 +33,0 @@\n-import jdk.jfr.api.consumer.security.TestStreamingRemote.TestEvent;\n@@ -45,0 +45,2 @@\n+    private static class TestEvent extends Event {\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/recordingstream\/TestOnErrorAsync.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.jfr.Event;\n@@ -33,1 +34,0 @@\n-import jdk.jfr.api.consumer.security.TestStreamingRemote.TestEvent;\n@@ -45,0 +45,2 @@\n+    private static class TestEvent extends Event {\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/recordingstream\/TestOnErrorSync.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.api.consumer.security;\n-\n-import java.nio.file.Paths;\n-\n-import jdk.jfr.Recording;\n-import jdk.test.lib.jfr.EventNames;\n-\n-\/**\n- * Driver that dumps a recording with a JVMInformation event\n- *\n- * Usage:\n- *\n- * @run driver jdk.jfr.api.consumer.security.RecordingDumper <filename>\n- *\/\n-public class DriverRecordingDumper {\n-    public static void main(String... args) throws Exception {\n-        try (Recording r = new Recording()) {\n-            r.enable(EventNames.JVMInformation);\n-            r.start();\n-            r.stop();\n-            r.dump(Paths.get(args[0]));\n-        }\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/security\/DriverRecordingDumper.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.api.consumer.security;\n-\n-import java.io.IOException;\n-\n-import jdk.jfr.consumer.EventStream;\n-import jdk.jfr.consumer.RecordingStream;\n-\n-\/**\n- * @test\n- * @summary Tests that streaming doesn't work if\n- *          FlightRecordingPermission(\"accessFlightRecorder\") is missing\n- * @key jfr\n- * @requires vm.hasJFR\n- * @library \/test\/lib\n- *\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/java.security.policy=no-permission.policy\n- *      jdk.jfr.api.consumer.security.TestMissingPermission\n- *\/\n-public class TestMissingPermission {\n-\n-    public static void main(String... args) throws Exception {\n-        testOpenRepository();\n-        testRecordingStream();\n-    }\n-\n-    private static void testRecordingStream() throws IOException {\n-        try {\n-            try (EventStream es = EventStream.openRepository()) {\n-                throw new AssertionError(\"Should not be able to create EventStream without FlightRecorderPermission\");\n-            }\n-        } catch (SecurityException se) {\n-            \/\/ OK, as expected\n-        }\n-    }\n-\n-    private static void testOpenRepository() throws IOException {\n-        try {\n-            try (RecordingStream es = new RecordingStream()) {\n-                throw new AssertionError(\"Should not be able to create RecordingStream without FlightRecorderPermission\");\n-            }\n-        } catch (SecurityException se) {\n-            \/\/ OK, as expected\n-        }\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/security\/TestMissingPermission.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.api.consumer.security;\n-\n-import java.nio.file.Paths;\n-\n-import jdk.jfr.consumer.RecordingFile;\n-\n-\/**\n- * @test\n- * @summary Test that a recording file can't be opened without permissions\n- * @key jfr\n- * @requires vm.hasJFR\n- * @library \/test\/lib\n- *\n- * @run driver jdk.jfr.api.consumer.security.DriverRecordingDumper\n- *      test-recording-file.jfr\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/java.security.policy=no-permission.policy\n- *      jdk.jfr.api.consumer.security.TestRecordingFile\n- *      test-recording-file.jfr\n- *\/\n-public class TestRecordingFile {\n-    public static void main(String... args) throws Exception {\n-        try {\n-            RecordingFile.readAllEvents(Paths.get(args[0]));\n-            throw new AssertionError(\"Expected SecurityException\");\n-        } catch (SecurityException se) {\n-            \/\/ OK, as expected\n-            return;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/security\/TestRecordingFile.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.api.consumer.security;\n-\n-import java.time.Instant;\n-import java.util.concurrent.CountDownLatch;\n-\n-import jdk.jfr.consumer.RecordingStream;\n-import jdk.test.lib.jfr.EventNames;\n-\n-\/**\n- * @test\n- * @summary Tests that a RecordingStream works using only\n- *          FlightRecordingPermission(\"accessFlightRecorder\")\n- * @key jfr\n- * @requires vm.hasJFR\n- * @library \/test\/lib\n- *\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/java.security.policy=local-streaming.policy\n- *      jdk.jfr.api.consumer.security.TestStreamingLocal\n- *\/\n-public class TestRecordingStream {\n-\n-    public static void main(String... args) throws Exception {\n-        CountDownLatch latch = new CountDownLatch(1);\n-        try (RecordingStream r = new RecordingStream()) {\n-            \/\/ Enable JVM event, no write permission needed\n-            r.enable(EventNames.JVMInformation);\n-            r.setStartTime(Instant.EPOCH);\n-            r.onEvent(EventNames.JVMInformation, e -> {\n-                latch.countDown();\n-            });\n-            r.startAsync();\n-            latch.await();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/security\/TestRecordingStream.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.api.consumer.security;\n-\n-import java.nio.file.Paths;\n-\n-import jdk.jfr.consumer.EventStream;\n-\n-\/**\n- * @test\n- * @summary Test that an event file stream can't be opened without permissions\n- * @key jfr\n- * @requires vm.hasJFR\n- * @library \/test\/lib\n- *\n- * @run driver jdk.jfr.api.consumer.security.DriverRecordingDumper\n- *      test-streaming-file.jfr\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/java.security.policy=no-permission.policy\n- *      jdk.jfr.api.consumer.security.TestStreamingFile\n- *      test-streaming-file.jfr\n- *\/\n-public class TestStreamingFile {\n-\n-    public static void main(String... args) throws Exception {\n-        try (EventStream es = EventStream.openFile(Paths.get(args[0]))) {\n-            throw new AssertionError(\"Expected SecurityException\");\n-        } catch (SecurityException se) {\n-            \/\/ OK, as expected\n-            return;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/security\/TestStreamingFile.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.api.consumer.security;\n-\n-import java.time.Instant;\n-import java.util.concurrent.CountDownLatch;\n-\n-import jdk.jfr.Recording;\n-import jdk.jfr.consumer.EventStream;\n-import jdk.test.lib.jfr.EventNames;\n-\n-\/**\n- * @test\n- * @summary Tests that local streaming works using only\n- *          FlightRecordingPermission(\"accessFlightRecorder\")\n- * @key jfr\n- * @requires vm.hasJFR\n- * @library \/test\/lib\n- *\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/java.security.policy=local-streaming.policy\n- *      jdk.jfr.api.consumer.security.TestStreamingLocal\n- *\/\n-public class TestStreamingLocal {\n-\n-    public static void main(String... args) throws Exception {\n-        CountDownLatch latch = new CountDownLatch(1);\n-        try (Recording r = new Recording()) {\n-            \/\/ Enable JVM event, no write permission needed\n-            r.enable(EventNames.JVMInformation);\n-            r.start();\n-            try (Recording r2 = new Recording()){\n-                r2.start();\n-                r2.stop();\n-            }\n-            r.stop();\n-            try (EventStream es = EventStream.openRepository()) {\n-                es.setStartTime(Instant.EPOCH);\n-                es.onEvent(\"jdk.JVMInformation\", e -> {\n-                    latch.countDown();\n-                });\n-                es.startAsync();\n-                latch.await();\n-            }\n-        }\n-\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/security\/TestStreamingLocal.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.api.consumer.security;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.time.Instant;\n-\n-import jdk.jfr.Event;\n-import jdk.jfr.Recording;\n-import jdk.jfr.consumer.EventStream;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-\/**\n- * @test\n- * @summary Test that a stream can be opened against a remote repository using\n- *          only file permission\n- * @key jfr\n- * @requires vm.hasJFR\n- * @library \/test\/lib\n- *\n- * @run main\/othervm jdk.jfr.api.consumer.security.TestStreamingRemote\n- *\/\n-public class TestStreamingRemote {\n-\n-    private static final String SUCCESS = \"Success!\";\n-\n-    public static class TestEvent extends Event {\n-    }\n-\n-    public static class Test {\n-        public static void main(String... args) throws Exception {\n-            Path repo = Paths.get(args[0]);\n-            System.out.println(\"Repository: \" + repo);\n-            try (EventStream es = EventStream.openRepository(repo)) {\n-                es.setStartTime(Instant.EPOCH);\n-                es.onEvent(e -> {\n-                    System.out.println(SUCCESS);\n-                    es.close();\n-                });\n-                es.start();\n-            }\n-        }\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        try (Recording r = new Recording()) {\n-            r.start();\n-            String repository = System.getProperty(\"jdk.jfr.repository\");\n-            Path policy = createPolicyFile(repository);\n-            TestEvent e = new TestEvent();\n-            e.commit();\n-            String[] c = new String[4];\n-            c[0] = \"-Djava.security.manager\";\n-            c[1] = \"-Djava.security.policy=\" + escapeBackslashes(policy.toString());\n-            c[2] = Test.class.getName();\n-            c[3] = repository;\n-            OutputAnalyzer oa = ProcessTools.executeTestJava(c);\n-            oa.shouldContain(SUCCESS);\n-        }\n-    }\n-\n-    private static Path createPolicyFile(String repository) throws IOException {\n-        Path policy = Paths.get(\"permission.policy\").toAbsolutePath();\n-        try (PrintWriter pw = new PrintWriter(policy.toFile())) {\n-            pw.println(\"grant {\");\n-            \/\/ All the files and directories the contained in path\n-            String dir = escapeBackslashes(repository);\n-            String contents = escapeBackslashes(repository + File.separatorChar + \"-\");\n-            pw.println(\"  permission java.io.FilePermission \\\"\" + dir + \"\\\", \\\"read\\\";\");\n-            pw.println(\"  permission java.io.FilePermission \\\"\" + contents + \"\\\", \\\"read\\\";\");\n-            pw.println(\"};\");\n-            pw.println();\n-        }\n-        System.out.println(\"Permission file: \" + policy);\n-        for (String line : Files.readAllLines(policy)) {\n-            System.out.println(line);\n-        }\n-        System.out.println();\n-        return policy;\n-    }\n-\n-    \/\/ Needed for Windows\n-    private static String escapeBackslashes(String text) {\n-        return text.replace(\"\\\\\", \"\\\\\\\\\");\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/security\/TestStreamingRemote.java","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-\/\/ Minimum policy to stream locally\n-grant {\n-permission jdk.jfr.FlightRecorderPermission \"accessFlightRecorder\";\n-};\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/security\/local-streaming.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-\/\/ No permission\n-grant {\n-};\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/security\/no-permission.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,103 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.jmx.security;\n-\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.List;\n-\n-import jdk.jfr.jmx.JmxHelper;\n-\n-import jdk.management.jfr.ConfigurationInfo;\n-import jdk.management.jfr.FlightRecorderMXBean;\n-import jdk.test.lib.Asserts;\n-\n-\/**\n- * @test\n- * @key jfr\n- * @summary Test with minimal needed permissions. All functions should work.\n- * @requires vm.hasJFR\n- * @library \/test\/lib \/test\/jdk\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/java.security.policy=enough.policy jdk.jfr.jmx.security.TestEnoughPermission\n- *\/\n-public class TestEnoughPermission {\n-\n-    public static void main(String[] args) throws Throwable {\n-        try {\n-            FlightRecorderMXBean bean = JmxHelper.getFlighteRecorderMXBean();\n-\n-            System.out.println(\"AAAAAAAAAAAAAAAAAA\");\n-            Asserts.assertFalse(bean.getEventTypes().isEmpty(), \"No EventTypes\");\n-            System.out.println(\"BBBBBBBBBBBBBBB\");\n-            List<ConfigurationInfo> configs = bean.getConfigurations();\n-            System.out.println(\"CCCCCCCCCCCCCCCCC\");\n-            for (ConfigurationInfo config : configs) {\n-                System.out.println(\"config.name=\" + config.getName() + \": \" + config.getContents());\n-            }\n-\n-            long recId = testRecording(bean);\n-            testStream(bean, recId);\n-            bean.closeRecording(recId);\n-\n-            \/\/*************** verifySecurityException(() -> bean.getRecordingOptions(dummyId), \"getRecordingOptions()\");\n-            \/\/*************** verifySecurityException(() -> bean.getRecordingSettings(dummyId), \"getRecordingSettings()\");\n-            \/\/*********** verifySecurityException(() -> bean.setConfiguration(dummyId, \"<>\"), \"setConfiguration()\");\n-            \/\/************* verifySecurityException(() -> bean.setRecordingSettings(dummyId, dummyMap), \"setRecordingSettings()\");\n-            \/\/************* verifySecurityException(() -> bean.setRecordingOptions(dummyId, dummyMap), \"setRecordingOptions()\");\n-        } catch (Throwable t) {\n-            t.printStackTrace();\n-            throw t;\n-        }\n-    }\n-\n-    private static long testRecording(FlightRecorderMXBean bean) throws Exception {\n-        System.out.println(\"A\");\n-        long recId = bean.newRecording();\n-        System.out.println(\"B\");\n-        bean.setPredefinedConfiguration(recId, \"profile\");\n-        System.out.println(\"C\");\n-        bean.startRecording(recId);\n-        System.out.println(\"D\");\n-        Asserts.assertTrue(bean.getRecordings().stream().anyMatch(r -> { return r.getId() == recId; }), \"recId not found\");\n-        System.out.println(\"E\");\n-        bean.stopRecording(recId);\n-\n-        final Path path = Paths.get(\".\", \"rec\" + recId + \".jfr\");\n-        bean.copyTo(recId, path.toString());\n-        \/\/EventSet events = EventSet.fromFile(path);\n-        return recId;\n-    }\n-\n-    private static void testStream(FlightRecorderMXBean bean, long recId) throws Exception {\n-        long streamId = bean.openStream(recId, null);\n-        byte[] buff = bean.readStream(streamId);\n-        Asserts.assertNotNull(buff, \"Stream data was empty\");\n-        while (buff != null) {\n-            \/\/ TODO: write to file and parse.\n-            System.out.println(\"buff.length=\" + buff.length);\n-            buff = bean.readStream(streamId);\n-        }\n-        bean.closeStream(streamId);\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/security\/TestEnoughPermission.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.jmx.security;\n-\n-import jdk.jfr.jmx.JmxHelper;\n-\n-import jdk.management.jfr.FlightRecorderMXBean;\n-import jdk.test.lib.jfr.CommonHelper;\n-import jdk.test.lib.jfr.VoidFunction;\n-\n-\/**\n- * @test\n- * @key jfr\n- * @summary Verify we get SecurityExceptions when missing management permission \"control\".\n- * @requires vm.hasJFR\n- * @library \/test\/lib \/test\/jdk\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/java.security.policy=nocontrol.policy jdk.jfr.jmx.security.TestNoControlPermission\n- *\/\n-public class TestNoControlPermission {\n-\n-    public static void main(String[] args) throws Throwable {\n-        try {\n-            FlightRecorderMXBean bean = JmxHelper.getFlighteRecorderMXBean();\n-\n-            int dummyId = 1;\n-            java.util.Map<String, String> dummyMap = new java.util.HashMap<>();\n-\n-            verifySecurityException(() -> bean.takeSnapshot(), \"takeSnapshot()\");\n-            verifySecurityException(() -> bean.newRecording(), \"newRecording()\");\n-            verifySecurityException(() -> bean.startRecording(dummyId), \"startRecording()\");\n-            verifySecurityException(() -> bean.stopRecording(dummyId), \"stopRecording()\");\n-            verifySecurityException(() -> bean.closeRecording(dummyId), \"closeRecording()\");\n-            verifySecurityException(() -> bean.openStream(dummyId, null), \"openStream()\");\n-            verifySecurityException(() -> bean.closeStream(dummyId), \"closeStream()\");\n-            verifySecurityException(() -> bean.setConfiguration(dummyId, \"dummy\"), \"setConfiguration()\");\n-            verifySecurityException(() -> bean.setPredefinedConfiguration(dummyId, \"dummy\"), \"setPredefinedConfiguration()\");\n-            verifySecurityException(() -> bean.setRecordingSettings(dummyId, dummyMap), \"setRecordingSettings()\");\n-            verifySecurityException(() -> bean.setRecordingOptions(dummyId, dummyMap), \"setRecordingOptions()\");\n-            verifySecurityException(() -> bean.copyTo(dummyId, \".\"), \"dumpRecording()\");\n-        } catch (Throwable t) {\n-            t.printStackTrace();\n-            throw t;\n-        }\n-    }\n-\n-\n-    private static void verifySecurityException(VoidFunction f, String msg) throws Throwable {\n-        CommonHelper.verifyException(f, msg, java.lang.SecurityException.class);\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/security\/TestNoControlPermission.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.jmx.security;\n-\n-import jdk.jfr.jmx.JmxHelper;\n-\n-import jdk.management.jfr.FlightRecorderMXBean;\n-import jdk.test.lib.jfr.CommonHelper;\n-import jdk.test.lib.jfr.VoidFunction;\n-\n-\/**\n- * @test\n- * @key jfr\n- * @summary Verify we get SecurityExceptions when missing management permission \"monitor\".\n- * @requires vm.hasJFR\n- * @library \/test\/lib \/test\/jdk\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/java.security.policy=nomonitor.policy jdk.jfr.jmx.security.TestNoMonitorPermission\n- *\/\n-public class TestNoMonitorPermission {\n-\n-    public static void main(String[] args) throws Throwable {\n-        try {\n-            FlightRecorderMXBean bean = JmxHelper.getFlighteRecorderMXBean();\n-\n-            int dummyId = 1;\n-            verifySecurityException(() -> bean.getRecordings(), \"getRecordings()\");\n-            verifySecurityException(() -> bean.getConfigurations(), \"getConfigurations()\");\n-            verifySecurityException(() -> bean.getEventTypes(), \"getEventTypes()\");\n-            verifySecurityException(() -> bean.getRecordingOptions(dummyId), \"getRecordingOptions()\");\n-            verifySecurityException(() -> bean.getRecordingSettings(dummyId), \"getRecordingSettings()\");\n-            verifySecurityException(() -> bean.readStream(dummyId), \"readStream()\");\n-        } catch (Throwable t) {\n-            t.printStackTrace();\n-            throw t;\n-        }\n-    }\n-\n-\n-    private static void verifySecurityException(VoidFunction f, String msg) throws Throwable {\n-        CommonHelper.verifyException(f, msg, java.lang.SecurityException.class);\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/security\/TestNoMonitorPermission.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.jmx.security;\n-\n-import java.lang.management.ManagementFactory;\n-import java.util.concurrent.CountDownLatch;\n-\n-import javax.management.Notification;\n-import javax.management.NotificationListener;\n-import javax.management.ObjectName;\n-\n-import jdk.management.jfr.FlightRecorderMXBean;\n-import jdk.test.lib.Asserts;\n-\n-import jdk.jfr.jmx.JmxHelper;\n-\n-\/**\n- * @test\n- * @key jfr\n- * @summary Test with minimal needed permissions. All functions should work.\n- * @requires vm.hasJFR\n- * @library \/test\/lib \/test\/jdk\n- * @run main\/othervm\/secure=java.lang.SecurityManager\/java.security.policy=listener.policy jdk.jfr.jmx.security.TestNotificationListenerPermission\n- *\/\n-public class TestNotificationListenerPermission {\n-    private static boolean gotSecurityException;\n-\n-    static class TestListener implements NotificationListener {\n-        private final CountDownLatch latch = new CountDownLatch(1);\n-\n-        @Override\n-        public void handleNotification(Notification arg0, Object arg1) {\n-            try {\n-                System.getProperty(\"user.name\");\n-            } catch (SecurityException se) {\n-                se.printStackTrace();\n-                gotSecurityException = true;\n-            }\n-            latch.countDown();\n-        }\n-\n-        public void awaitNotication() throws InterruptedException {\n-            latch.await();\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        try {\n-            System.getProperty(\"user.name\");\n-            Asserts.fail(\"Didn't get security exception. Test not configured propertly?\");\n-        } catch (SecurityException se) {\n-            \/\/ as expected\n-        }\n-        FlightRecorderMXBean bean = JmxHelper.getFlighteRecorderMXBean();\n-        TestListener testListener = new TestListener();\n-        ManagementFactory.getPlatformMBeanServer().addNotificationListener(new ObjectName(FlightRecorderMXBean.MXBEAN_NAME), testListener, null, null);\n-        long id = bean.newRecording();\n-        bean.startRecording(id);\n-        testListener.awaitNotication();\n-        Asserts.assertTrue(gotSecurityException, \"Should not get elevated privileges in notification handler!\");\n-        bean.stopRecording(id);\n-        bean.closeRecording(id);\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/security\/TestNotificationListenerPermission.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-\/\/ Minimum policy for JMX to activate JFR and create a recording.\n-\n-grant {\n-\n-permission java.lang.management.ManagementPermission \"control\";\n-permission java.lang.management.ManagementPermission \"monitor\";\r\n-\r\n-\/\/ in order for the test to accomplish dump\/copyto on a user defined recording\r\n-permission \"java.io.FilePermission\" \"<<ALL FILES>>\", \"read,write,delete\";\r\n-permission \"java.util.PropertyPermission\" \"user.dir\", \"read\";\n-permission \"javax.management.MBeanPermission\" \"jdk.management.jfr.FlightRecorderMXBeanImpl#-[jdk.jfr.management:type=FlightRecorder]\", \"addNotificationListener\";\n-\n-permission \"javax.management.MBeanServerPermission\" \"createMBeanServer\";\n-permission \"javax.management.MBeanPermission\" \"jdk.management.jfr.FlightRecorderMXBeanImpl#Recordings[jdk.jfr:type=FlightRecorder]\", \"getAttribute\";\n-permission \"javax.management.MBeanPermission\" \"jdk.management.jfr.FlightRecorderMXBeanImpl#EventTypes[jdk.jfr:type=FlightRecorder]\", \"getAttribute\";\n-permission \"javax.management.MBeanPermission\" \"jdk.management.jfr.FlightRecorderMXBeanImpl#Configurations[jdk.jfr:type=FlightRecorder]\", \"getAttribute\";\n-permission \"javax.management.MBeanPermission\" \"jdk.management.jfr.FlightRecorderMXBeanImpl#newRecording[jdk.jfr:type=FlightRecorder]\", \"invoke\";\n-\n-};\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/security\/enough.policy","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,11 +0,0 @@\n-\/\/ Minimum policy for JMX to activate JFR and create a recording.\n-\n-grant {\n-\n-permission java.lang.management.ManagementPermission \"control\";\n-permission java.lang.management.ManagementPermission \"monitor\";\r\n-permission \"javax.management.MBeanPermission\" \"*\", \"addNotificationListener\";\n-permission \"javax.management.MBeanPermission\" \"*\", \"invoke\";\n-permission \"javax.management.MBeanServerPermission\" \"createMBeanServer\";\n-\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/security\/listener.policy","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -1,11 +0,0 @@\n-\/\/ Removed security \"ManagementPermission control\". Should cause SecurityExceptions.\n-\n-grant {\n-\n-\/\/ Removed permission: permission java.lang.management.ManagementPermission \"control\";\n-permission java.lang.management.ManagementPermission \"monitor\";\n-\n-permission javax.management.MBeanServerPermission \"createMBeanServer\";\n-permission \"javax.management.MBeanPermission\" \"jdk.management.jfr.FlightRecorderMXBeanImpl#Recordings[jdk.jfr:type=FlightRecorder]\", \"getAttribute\";\n-\n-};\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/security\/nocontrol.policy","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -1,11 +0,0 @@\n-\/\/ Removed security \"ManagementPermission monitor\". Should cause SecurityExceptions.\n-\n-grant {\n-\n-permission java.lang.management.ManagementPermission \"control\";\n-\/\/ Removed permission: permission java.lang.management.ManagementPermission \"monitor\";\n-\n-permission javax.management.MBeanServerPermission \"createMBeanServer\";\n-permission \"javax.management.MBeanPermission\" \"jdk.management.jfr.FlightRecorderMXBeanImpl#Recordings[jdk.jfr:type=FlightRecorder]\", \"getAttribute\";\n-\n-};\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/security\/nomonitor.policy","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        \/\/ Test without security manager and a file name relative to current directory\n+        \/\/ Test with file name relative to current directory\n@@ -58,1 +58,1 @@\n-        \/\/ Test a memory recording without a security manager\n+        \/\/ Test a memory recording\n@@ -64,15 +64,0 @@\n-\n-        \/\/ Test with security manager and a file name relative to current directory\n-        testDumponExit(() -> dumpPath,\n-                \"-Xlog:jfr=trace\",\n-                \"-XX:StartFlightRecording:filename=.\/dumped.jfr,dumponexit=true,settings=profile\",\n-                \"-Djava.security.manager\",\n-                \"jdk.jfr.startupargs.TestDumpOnExit$TestMain\"\n-        );\n-        \/\/ Test with security manager but without a name\n-        testDumponExit(() -> findJFRFileInCurrentDirectory(),\n-                \"-Xlog:jfr=trace\",\n-                \"-XX:StartFlightRecording:dumponexit=true,settings=profile\",\n-                \"-Djava.security.manager\",\n-                \"jdk.jfr.startupargs.TestDumpOnExit$TestMain\"\n-        );\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestDumpOnExit.java","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n- * @run main\/othervm\/java.security.policy=test.policy Basic\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/Basic.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n- * @run testng\/othervm\/java.security.policy=test.policy  DirectoryStreamTests\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/DirectoryStreamTests.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n- * @run testng\/othervm\/java.security.policy=test.policy  InvalidZipHeaderTests\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/InvalidZipHeaderTests.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n- * @run testng\/othervm\/java.security.policy=test.policy  NewFileSystemTests\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/NewFileSystemTests.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n- * @run main\/othervm\/java.security.policy=test.policy PathOps\n+ * @run main\/othervm PathOps\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/PathOps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n- * @run testng\/othervm\/java.security.policy=PropertyPermissions.policy  PropertyPermissionTests\n+ * @run testng\/othervm PropertyPermissionTests\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/PropertyPermissionTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"<<ALL FILES>>\",\"read,write,delete\";\n-\n-};\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/PropertyPermissions.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -69,1 +69,1 @@\n- * @run junit\/othervm\/java.security.policy=test.policy.posix TestPosix\n+ * @run junit\/othervm TestPosix\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm\/java.security.policy=test.policy ZFSTests\n+ * @run main\/othervm ZFSTests\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/ZFSTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n- * @run testng\/othervm\/java.security.policy=ZipFSPermissionsTest.policy ZipFSPermissionsTest\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/ZipFSPermissionsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"<<ALL FILES>>\",\"read,write,delete\";\n-    permission java.util.PropertyPermission \"user.dir\",\"read\";\n-    permission java.lang.RuntimePermission \"accessUserInformation\";\n-};\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/ZipFSPermissionsTest.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n- * @run main\/othervm\/java.security.policy=test.policy ZipFSTester\n+ * @run main\/othervm ZipFSTester\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/ZipFSTester.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"<<ALL FILES>>\",\"read,write,delete\";\n-    permission java.util.PropertyPermission \"test.jdk\",\"read\";\n-    permission java.util.PropertyPermission \"test.src\",\"read\";\n-    permission java.util.PropertyPermission \"user.dir\",\"read\";\n-    permission java.lang.RuntimePermission \"accessUserInformation\";\n-};\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/test.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"<<ALL FILES>>\",\"read,write,delete\";\n-    permission java.util.PropertyPermission \"sun.tools.jar.useExtractionTime\",\"read\";\n-    permission java.util.PropertyPermission \"test.jdk\",\"read\";\n-    permission java.util.PropertyPermission \"test.src\",\"read\";\n-    permission java.util.PropertyPermission \"user.dir\",\"read\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.module\";\n-    permission java.lang.RuntimePermission \"accessUserInformation\";\n-};\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/test.policy.posix","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"<<ALL FILES>>\",\"read\";\n-    permission java.util.PropertyPermission \"test.jdk\",\"read\";\n-    permission java.util.PropertyPermission \"test.src\",\"read\";\n-    permission java.util.PropertyPermission \"user.dir\",\"read\";\n-};\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/test.policy.readonly","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -65,1 +65,0 @@\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow RmiBootstrapTest .*_test.*.in\n@@ -77,1 +76,0 @@\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow RmiBootstrapTest .*_ssltest.*.in\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiBootstrapTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test 1.5 99\/07\/29\n- * @bug 4277155\n- * @summary Make sure HttpClient.getHttpKeepAliveSet() has\n- *    doPrivileged() call at appropriate places.\n- * @modules java.base\/sun.net\n- *          java.base\/sun.net.www.http\n- * @library \/test\/lib\n- * @run main\/othervm\/policy=IsKeepingAlive.policy IsKeepingAlive\n- *\/\n-\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.URL;\n-import java.net.ServerSocket;\n-import sun.net.www.http.HttpClient;\n-import java.security.*;\n-import jdk.test.lib.net.URIBuilder;\n-\n-public class IsKeepingAlive {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        ServerSocket ss = new ServerSocket();\n-        InetAddress loopback = InetAddress.getLoopbackAddress();\n-        ss.bind(new InetSocketAddress(loopback, 0));\n-\n-        try (ServerSocket toClose = ss) {\n-            SecurityManager security = System.getSecurityManager();\n-            if (security == null) {\n-                security = new SecurityManager();\n-                System.setSecurityManager(security);\n-            }\n-\n-            URL url1 = URIBuilder.newBuilder()\n-                .scheme(\"http\")\n-                .loopback()\n-                .port(ss.getLocalPort())\n-                .toURL();\n-\n-            HttpClient c1 = HttpClient.New(url1);\n-\n-            boolean keepAlive = c1.isKeepingAlive();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/IsKeepingAlive.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/\/ Permissions need to the test\n-grant {\n-\tpermission java.net.SocketPermission \"localhost\", \"resolve\";\n-\tpermission java.net.SocketPermission \"localhost\", \"connect\";\n-\tpermission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-};\n-\n-\/\/ default permissions granted to all domains\n-\n-grant { \n-\t\/\/ allows anyone to listen on un-privileged ports\n-\tpermission java.net.SocketPermission \"localhost:1024-\", \"listen\";\n-\n-\t\/\/ \"standard\" properies that can be read by anyone\n-\n-\tpermission java.util.PropertyPermission \"java.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vendor.url\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.class.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.arch\", \"read\";\n-\tpermission java.util.PropertyPermission \"file.separator\", \"read\";\n-\tpermission java.util.PropertyPermission \"path.separator\", \"read\";\n-\tpermission java.util.PropertyPermission \"line.separator\", \"read\";\n-\n-\tpermission java.util.PropertyPermission \"java.specification.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.specification.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.specification.name\", \"read\";\n-\n-\tpermission java.util.PropertyPermission \"java.vm.specification.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.specification.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.specification.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.name\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/IsKeepingAlive.policy","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4154481\n- * @summary Make sure HttpClient has\n- *    doPrivileged() calls at appropriate places.\n- * @modules java.base\/sun.net.www.http\n- * @library \/test\/lib\n- * @run main\/othervm\/policy=OpenServer.policy OpenServer\n- *\/\n-\n-import java.net.*;\n-import sun.net.www.http.HttpClient;\n-import jdk.test.lib.net.URIBuilder;\n-\n-public class OpenServer {\n-\n-    OpenServer() throws Exception {\n-\n-        ServerSocket ss = new ServerSocket();\n-        InetAddress loopback = InetAddress.getLoopbackAddress();\n-        ss.bind(new InetSocketAddress(loopback, 0));\n-\n-        try (ServerSocket toClose = ss) {\n-            URL myURL = URIBuilder.newBuilder()\n-                .scheme(\"http\")\n-                .loopback()\n-                .port(ss.getLocalPort())\n-                .toURL();\n-\n-            HttpClient httpC = new HttpClient(myURL, null, -1);\n-        }\n-    }\n-\n-    public static void main(String [] args) throws Exception {\n-        SecurityManager security = System.getSecurityManager();\n-        if (security == null) {\n-            security = new SecurityManager();\n-            System.setSecurityManager(security);\n-        }\n-        \/\/ Note: we need to have some\n-        \/\/ permissions in place for this\n-        \/\/ test.\n-        new OpenServer();\n-    }\n-}\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/OpenServer.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/\/ Permissions need to the test\n-grant {\n-\tpermission java.net.SocketPermission \"localhost\", \"resolve\";\n-\tpermission java.net.SocketPermission \"localhost\", \"connect\";\n-\tpermission java.lang.RuntimePermission \"accessClassInPackage.sun.net.www.http\";\n-};\n-\n-\/\/ default permissions granted to all domains\n-\n-grant { \n-\t\/\/ allows anyone to listen on un-privileged ports\n-\tpermission java.net.SocketPermission \"localhost:1024-\", \"listen\";\n-\n-\t\/\/ \"standard\" properies that can be read by anyone\n-\n-\tpermission java.util.PropertyPermission \"java.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vendor.url\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.class.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"os.arch\", \"read\";\n-\tpermission java.util.PropertyPermission \"file.separator\", \"read\";\n-\tpermission java.util.PropertyPermission \"path.separator\", \"read\";\n-\tpermission java.util.PropertyPermission \"line.separator\", \"read\";\n-\n-\tpermission java.util.PropertyPermission \"java.specification.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.specification.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.specification.name\", \"read\";\n-\n-\tpermission java.util.PropertyPermission \"java.vm.specification.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.specification.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.specification.name\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.version\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.vendor\", \"read\";\n-\tpermission java.util.PropertyPermission \"java.vm.name\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/OpenServer.policy","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,2 @@\n- * @summary Checks if NTLM auth works fine if security manager set\n- * @run main\/othervm\/java.security.policy=NTLMAuthWithSM.policy NTLMAuthWithSM\n+ * @summary Basic test for NTLM auth\n+ * @run main\/othervm BasicNTLMAuthTest\n@@ -48,1 +48,1 @@\n-public class NTLMAuthWithSM {\n+public class BasicNTLMAuthTest {\n@@ -51,4 +51,0 @@\n-        \/\/ security manager is required\n-        if (System.getSecurityManager() == null) {\n-            throw new RuntimeException(\"Security manager not specified\");\n-        }\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpURLConnection\/BasicNTLMAuthTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"previous_filename":"test\/jdk\/sun\/net\/www\/http\/HttpURLConnection\/NTLMAuthWithSM.java","status":"renamed"},{"patch":"@@ -1,7 +0,0 @@\n-grant {\n-    permission java.net.NetPermission \"setDefaultAuthenticator\";\n-    permission java.net.SocketPermission \"localhost:*\",\n-            \"connect,resolve,listen,accept\";\n-    permission java.lang.RuntimePermission\n-            \"accessClassInPackage.sun.net.www.protocol.http.ntlm\";\n-};\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpURLConnection\/NTLMAuthWithSM.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test that the jimage protocol handler works with a security manager\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager allow\n- * @run main\/othervm -Djava.security.manager=allow WithSecurityManager deny\n- *\/\n-\n-import java.io.InputStream;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-public class WithSecurityManager {\n-    public static void main(String[] args) throws Exception {\n-        String home = System.getProperty(\"java.home\");\n-        Path modules = Paths.get(home, \"lib\", \"modules\");\n-        if (!Files.isRegularFile(modules)) {\n-            System.out.println(\"This runtime is not jimage, test skipped\");\n-            return;\n-        }\n-\n-        boolean allow = args[0].equals(\"allow\");\n-\n-        \/\/ set security policy to allow access\n-        if (allow) {\n-            String testSrc = System.getProperty(\"test.src\");\n-            if (testSrc == null)\n-                testSrc = \".\";\n-            Path policyFile = Paths.get(testSrc, \"java.policy\");\n-            System.setProperty(\"java.security.policy\", policyFile.toString());\n-        }\n-\n-        System.setSecurityManager(new SecurityManager());\n-\n-        InputStream in = null;\n-        URL url = new URL(\"jrt:\/java.base\/java\/lang\/Object.class\");\n-        if (url != null) {\n-            try {\n-                in = url.openStream();\n-            } catch (IOException ignore) { }\n-        }\n-        if (in == null && allow)\n-            throw new RuntimeException(\"access expected\");\n-        if (in != null && !allow)\n-            throw new RuntimeException(\"access not expected\");\n-    }\n-}\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jrt\/WithSecurityManager.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"accessSystemModules\";\n-};\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jrt\/java.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * [-Dfilter=REGEXP] [-DSecurityManager=true]\n+ * [-Dfilter=REGEXP]\n@@ -129,5 +129,0 @@\n-    static class PermissiveSecurityManger extends SecurityManager {\n-        @Override public void checkPermission(java.security.Permission p) {\n-        }\n-    }\n-\n@@ -141,3 +136,0 @@\n-        final boolean useSecurityManager = Boolean.getBoolean(\"SecurityManager\");\n-        if (useSecurityManager)\n-            System.setSecurityManager(new PermissiveSecurityManger());\n","filename":"test\/jdk\/sun\/nio\/cs\/StrCodingBenchmark.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,0 @@\n-        final boolean useSecurityManager = Boolean.getBoolean(\"SecurityManager\");\n-        if (useSecurityManager)\n-            System.setSecurityManager(new PermissiveSecurityManger());\n","filename":"test\/jdk\/sun\/nio\/cs\/StrCodingBenchmarkDB.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 7152690\n- * @summary Initialize SJIS_0213 charset with SecurityManager enabled\n- * @modules jdk.charsets\n- * @run main\/othervm -Djava.security.manager=allow TestSJIS0213_SM\n- *\/\n-public class TestSJIS0213_SM {\n-    public static void main(String[] args) throws Throwable {\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-        java.nio.charset.Charset.forName(\"SJIS_0213\");\n-    }\n-}\n","filename":"test\/jdk\/sun\/nio\/cs\/TestSJIS0213_SM.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm\/timeout=2000 -Djava.security.manager=allow TestStringCoding\n+ * @run main\/othervm\/timeout=2000 TestStringCoding\n@@ -53,39 +53,25 @@\n-        for (Boolean hasSM: new boolean[] { false, true }) {\n-            if (hasSM) {\n-                System.setSecurityManager(new PermissiveSecurityManger());\n-            }\n-            for (Charset cs:  Charset.availableCharsets().values()) {\n-                if (\"ISO-2022-CN\".equals(cs.name()) ||\n-                    \"x-COMPOUND_TEXT\".equals(cs.name()) ||\n-                    \"x-JISAutoDetect\".equals(cs.name()))\n-                    continue;\n-                System.out.printf(\"Testing(sm=%b) \" + cs.name() + \"....\", hasSM);\n-\n-                testNewString(cs, testGetBytes(cs, new String(bmp)));\n-                testNewString(cs, testGetBytes(cs, new String(latin)));\n-                testNewString(cs, testGetBytes(cs, new String(ascii)));\n-                testGetBytes(cs, testNewString(cs, latinBA));\n-                testGetBytes(cs, testNewString(cs, asciiBA));\n-\n-                \/\/ \"randomed\" sizes\n-                Random rnd = new Random();\n-                for (int i = 0; i < 10; i++) {\n-                    \/\/System.out.printf(\"    blen=%d, clen=%d%n\", blen, clen);\n-                    char[] bmp0 = Arrays.copyOf(bmp, rnd.nextInt(0x10000));\n-                    testNewString(cs, testGetBytes(cs, new String(bmp0)));\n-                    \/\/add a pair of surrogates\n-                    int pos = bmp0.length \/ 2;\n-                    if ((pos + 1) < bmp0.length) {\n-                        bmp0[pos] = '\\uD800';\n-                        bmp0[pos+1] = '\\uDC00';\n-                    }\n-                    testNewString(cs, testGetBytes(cs, new String(bmp0)));\n-\n-                    char[] latin0 = Arrays.copyOf(latin, rnd.nextInt(0x100));\n-                    char[] ascii0 = Arrays.copyOf(ascii, rnd.nextInt(0x80));\n-                    byte[] latinBA0 = Arrays.copyOf(latinBA, rnd.nextInt(0x100));\n-                    byte[] asciiBA0 = Arrays.copyOf(asciiBA, rnd.nextInt(0x80));\n-                    testNewString(cs, testGetBytes(cs, new String(latin0)));\n-                    testNewString(cs, testGetBytes(cs, new String(ascii0)));\n-                    testGetBytes(cs, testNewString(cs, latinBA0));\n-                    testGetBytes(cs, testNewString(cs, asciiBA0));\n+\n+        for (Charset cs:  Charset.availableCharsets().values()) {\n+            if (\"ISO-2022-CN\".equals(cs.name()) ||\n+                \"x-COMPOUND_TEXT\".equals(cs.name()) ||\n+                \"x-JISAutoDetect\".equals(cs.name()))\n+                continue;\n+            System.out.println(\"Testing \" + cs.name() + \"....\");\n+\n+            testNewString(cs, testGetBytes(cs, new String(bmp)));\n+            testNewString(cs, testGetBytes(cs, new String(latin)));\n+            testNewString(cs, testGetBytes(cs, new String(ascii)));\n+            testGetBytes(cs, testNewString(cs, latinBA));\n+            testGetBytes(cs, testNewString(cs, asciiBA));\n+\n+            \/\/ \"randomed\" sizes\n+            Random rnd = new Random();\n+            for (int i = 0; i < 10; i++) {\n+                \/\/System.out.printf(\"    blen=%d, clen=%d%n\", blen, clen);\n+                char[] bmp0 = Arrays.copyOf(bmp, rnd.nextInt(0x10000));\n+                testNewString(cs, testGetBytes(cs, new String(bmp0)));\n+                \/\/add a pair of surrogates\n+                int pos = bmp0.length \/ 2;\n+                if ((pos + 1) < bmp0.length) {\n+                    bmp0[pos] = '\\uD800';\n+                    bmp0[pos+1] = '\\uDC00';\n@@ -93,3 +79,10 @@\n-                testSurrogates(cs);\n-                testMixed(cs);\n-                System.out.println(\"done!\");\n+                testNewString(cs, testGetBytes(cs, new String(bmp0)));\n+\n+                char[] latin0 = Arrays.copyOf(latin, rnd.nextInt(0x100));\n+                char[] ascii0 = Arrays.copyOf(ascii, rnd.nextInt(0x80));\n+                byte[] latinBA0 = Arrays.copyOf(latinBA, rnd.nextInt(0x100));\n+                byte[] asciiBA0 = Arrays.copyOf(asciiBA, rnd.nextInt(0x80));\n+                testNewString(cs, testGetBytes(cs, new String(latin0)));\n+                testNewString(cs, testGetBytes(cs, new String(ascii0)));\n+                testGetBytes(cs, testNewString(cs, latinBA0));\n+                testGetBytes(cs, testNewString(cs, asciiBA0));\n@@ -97,0 +90,3 @@\n+            testSurrogates(cs);\n+            testMixed(cs);\n+            System.out.println(\"done!\");\n@@ -249,4 +245,0 @@\n-\n-    static class PermissiveSecurityManger extends SecurityManager {\n-        @Override public void checkPermission(java.security.Permission p) {}\n-    }\n","filename":"test\/jdk\/sun\/nio\/cs\/TestStringCoding.java","additions":40,"deletions":48,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @run main\/othervm\/timeout=2000 -Djava.security.manager=allow TestStringCodingUTF8\n+ * @run main\/othervm\/timeout=2000 TestStringCodingUTF8\n@@ -39,4 +39,0 @@\n-        \/\/ security manager on\n-        System.setSecurityManager(new PermissiveSecurityManger());\n-        test(\"UTF-8\");\n-        test(\"CESU-8\");\n@@ -177,4 +173,0 @@\n-\n-    static class PermissiveSecurityManger extends SecurityManager {\n-        @Override public void checkPermission(java.security.Permission p) {}\n-    }\n","filename":"test\/jdk\/sun\/nio\/cs\/TestStringCodingUTF8.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n- * @run testng\/othervm\/policy=security.policy ReflectionFactoryTest\n","filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,11 +0,0 @@\n-\/\/ Individual Permissions for ReflectionFactoryTest\n-grant {\n-        \/\/ Permissions needed to run the test\n-        permission java.util.PropertyPermission \"*\", \"read\";\n-        permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write,delete,execute\";\n-\n-        permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n-        permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n-        permission java.lang.RuntimePermission \"accessClassInPackage.sun.reflect\";\n-        permission java.lang.RuntimePermission \"reflectionFactoryAccess\";\n-};\n","filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/security.policy","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * @run main\/othervm -Djava.security.manager=allow CheckLogging\n+ * @run main\/othervm CheckLogging\n@@ -195,14 +195,0 @@\n-    private static void checkPermissions() {\n-        SecurityException ex = null;\n-        try {\n-            \/\/ should fail for lack of LoggingPermission \"control\"\n-            RemoteServer.setLog(System.err);\n-        } catch (SecurityException e) {\n-            System.err.println(\"security excepton caught correctly\");\n-            ex = e;\n-        }\n-        if (ex == null) {\n-            TestLibrary.bomb(\"able to set log without permission\");\n-        }\n-    }\n-\n@@ -215,2 +201,0 @@\n-                System.setSecurityManager(new java.lang.SecurityManager());\n-                checkPermissions();\n","filename":"test\/jdk\/sun\/rmi\/runtime\/Log\/checkLogging\/CheckLogging.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * @run main\/othervm\/policy=security.policy MarshalForeignStub\n+ * @run main\/othervm MarshalForeignStub\n@@ -65,2 +65,0 @@\n-        TestLibrary.suggestSecurityManager(null);\n-\n","filename":"test\/jdk\/sun\/rmi\/server\/MarshalOutputStream\/marshalForeignStub\/MarshalForeignStub.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,14 +0,0 @@\n-\/*\n- * security policy used by MarshalForeignStub test\n- *\/\n-\n-grant {\n-\n-    \/\/ used by TestLibrary to determine test environment\n-    permission java.util.PropertyPermission \"test.*\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-\n-    \/\/ allow exporting of remote objects on an arbitrary port\n-    permission java.net.SocketPermission \"*:1024-\", \"connect,accept,listen\";\n-};\n","filename":"test\/jdk\/sun\/rmi\/server\/MarshalOutputStream\/marshalForeignStub\/security.policy","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4183204\n- * @summary The RMI runtime should fail to export a remote object on a TCP\n- * port for an application that does not have permission to listen\n- * on that port, rather than engage in the deprecated \"multiplexing protocol\".\n- * @author Peter Jones\n- *\n- * @build DisableMultiplexing_Stub\n- * @run main\/othervm -Djava.security.manager=allow DisableMultiplexing\n- *\/\n-\n-import java.rmi.*;\n-import java.rmi.server.*;\n-\n-public class DisableMultiplexing implements Remote {\n-\n-    public static void main(String[] args) {\n-\n-        System.err.println(\"\\nRegression test for bug 4183204\\n\");\n-\n-        System.err.println(\"Setting draconian security manager.\");\n-        System.setSecurityManager(new SecurityManager() {\n-            public void checkListen(int port) {\n-                throw new SecurityException(\"THOU SHALT NOT LISTEN\");\n-            }\n-        });\n-\n-        System.err.println(\"Creating remote object.\");\n-        DisableMultiplexing obj = new DisableMultiplexing();\n-\n-        try {\n-            System.err.println(\"Attempting to export remote object.\");\n-            UnicastRemoteObject.exportObject(obj);\n-            try {\n-                UnicastRemoteObject.unexportObject(obj, true);\n-            } catch (NoSuchObjectException e) {\n-            }\n-            throw new RuntimeException(\n-                \"TEST FAILED: remote object successfully exported\");\n-        } catch (SecurityException e) {\n-            System.err.println(\"TEST PASSED: \");\n-            e.printStackTrace();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(\"TEST FAILED: \" + e.toString());\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/rmi\/transport\/tcp\/disableMultiplexing\/DisableMultiplexing.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ Stub class generated by rmic, do not edit.\n-\/\/ Contents subject to change without notice.\n-\n-public final class DisableMultiplexing_Stub\n-    extends java.rmi.server.RemoteStub\n-    implements java.rmi.Remote\n-{\n-    private static final long serialVersionUID = 2;\n-\n-    \/\/ constructors\n-    public DisableMultiplexing_Stub(java.rmi.server.RemoteRef ref) {\n-        super(ref);\n-    }\n-\n-}\n","filename":"test\/jdk\/sun\/rmi\/transport\/tcp\/disableMultiplexing\/DisableMultiplexing_Stub.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -41,2 +41,0 @@\n- * @run main\/othervm -Djava.security.policy=TestEC.policy\n- *    -Djdk.tls.namedGroups=\"secp256r1\" TestEC\n","filename":"test\/jdk\/sun\/security\/ec\/TestEC.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant codebase \"file:${test.classes}\/*\" {\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/sun\/security\/ec\/TestEC.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,155 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8005447 8194486\n- * @summary default principal can act as anyone\n- * @library \/test\/lib\n- * @compile -XDignore.symbol.file AcceptPermissions.java\n- * @run main jdk.test.lib.FileInstaller TestHosts TestHosts\n- * @run main\/othervm -Djava.security.manager=allow -Djdk.net.hosts.file=TestHosts AcceptPermissions two\n- * @run main\/othervm -Djava.security.manager=allow -Djdk.net.hosts.file=TestHosts AcceptPermissions unbound\n- *\/\n-\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardOpenOption;\n-import java.security.Permission;\n-import javax.security.auth.kerberos.ServicePermission;\n-import sun.security.jgss.GSSUtil;\n-import java.util.*;\n-\n-public class AcceptPermissions extends SecurityManager {\n-\n-    private static Map<Permission,String> perms = new HashMap<>();\n-    @Override\n-    public void checkPermission(Permission perm) {\n-        if (!(perm instanceof ServicePermission)) {\n-            return;\n-        }\n-        ServicePermission sp = (ServicePermission)perm;\n-        if (!sp.getActions().equals(\"accept\")) {\n-            return;\n-        }\n-        \/\/ We only care about accept ServicePermission in this test\n-        try {\n-            super.checkPermission(sp);\n-        } catch (SecurityException se) {\n-            if (perms.containsKey(sp)) {\n-                perms.put(sp, \"checked\");\n-            } else {\n-                throw se;   \/\/ We didn't expect this is needed\n-            }\n-        }\n-    }\n-\n-    \/\/ Fills in permissions we are expecting\n-    private static void initPerms(String... names) {\n-        perms.clear();\n-        for (String name: names) {\n-            perms.put(new ServicePermission(\n-                    name + \"@\" + OneKDC.REALM, \"accept\"), \"expected\");\n-        }\n-    }\n-\n-    \/\/ Checks if they are all checked\n-    private static void checkPerms() {\n-        for (Map.Entry<Permission,String> entry: perms.entrySet()) {\n-            if (entry.getValue().equals(\"expected\")) {\n-                throw new RuntimeException(\n-                        \"Expected but not used: \" + entry.getKey());\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        System.setSecurityManager(new AcceptPermissions());\n-        new OneKDC(null).writeJAASConf();\n-        String moreEntries = \"two {\\n\"\n-                + \" com.sun.security.auth.module.Krb5LoginModule required\"\n-                + \"     principal=\\\"\" + OneKDC.SERVER + \"\\\" useKeyTab=true\"\n-                + \"     isInitiator=false storeKey=true;\\n\"\n-                + \" com.sun.security.auth.module.Krb5LoginModule required\"\n-                + \"     principal=\\\"\" + OneKDC.BACKEND + \"\\\" useKeyTab=true\"\n-                + \"     isInitiator=false storeKey=true;\\n\"\n-                + \"};\\n\"\n-                + \"unbound {\"\n-                + \" com.sun.security.auth.module.Krb5LoginModule required\"\n-                + \"     principal=* useKeyTab=true\"\n-                + \"     isInitiator=false storeKey=true;\\n\"\n-                + \"};\\n\";\n-        Files.write(Paths.get(OneKDC.JAAS_CONF), moreEntries.getBytes(),\n-                StandardOpenOption.APPEND);\n-\n-        Context c, s;\n-\n-        \/\/ In all cases, a ServicePermission on the acceptor name is needed\n-        \/\/ for a handshake. For default principal with no predictable name,\n-        \/\/ permission not needed (yet) for credentials creation.\n-\n-        \/\/ Named principal\n-        initPerms(OneKDC.SERVER);\n-        c = Context.fromJAAS(\"client\");\n-        s = Context.fromJAAS(\"server\");\n-        c.startAsClient(OneKDC.SERVER, GSSUtil.GSS_KRB5_MECH_OID);\n-        s.startAsServer(OneKDC.SERVER, GSSUtil.GSS_KRB5_MECH_OID);\n-        checkPerms();\n-        initPerms(OneKDC.SERVER);\n-        Context.handshake(c, s);\n-        checkPerms();\n-\n-        \/\/ Named principal (even if there are 2 JAAS modules)\n-        initPerms(OneKDC.SERVER);\n-        c = Context.fromJAAS(\"client\");\n-        s = Context.fromJAAS(args[0]);\n-        c.startAsClient(OneKDC.SERVER, GSSUtil.GSS_KRB5_MECH_OID);\n-        s.startAsServer(OneKDC.SERVER, GSSUtil.GSS_KRB5_MECH_OID);\n-        checkPerms();\n-        initPerms(OneKDC.SERVER);\n-        Context.handshake(c, s);\n-        checkPerms();\n-\n-        \/\/ Default principal with a predictable name\n-        initPerms(OneKDC.SERVER);\n-        c = Context.fromJAAS(\"client\");\n-        s = Context.fromJAAS(\"server\");\n-        c.startAsClient(OneKDC.SERVER, GSSUtil.GSS_KRB5_MECH_OID);\n-        s.startAsServer(GSSUtil.GSS_KRB5_MECH_OID);\n-        checkPerms();\n-        initPerms(OneKDC.SERVER);\n-        Context.handshake(c, s);\n-        checkPerms();\n-\n-        \/\/ Default principal with no predictable name\n-        initPerms();    \/\/ permission not needed for cred !!!\n-        c = Context.fromJAAS(\"client\");\n-        s = Context.fromJAAS(args[0]);\n-        c.startAsClient(OneKDC.SERVER, GSSUtil.GSS_KRB5_MECH_OID);\n-        s.startAsServer(GSSUtil.GSS_KRB5_MECH_OID);\n-        checkPerms();\n-        initPerms(OneKDC.SERVER);   \/\/ still needed for handshake !!!\n-        Context.handshake(c, s);\n-        checkPerms();\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/AcceptPermissions.java","additions":0,"deletions":155,"binary":false,"changes":155,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.util.PropertyPermission;\n@@ -48,2 +47,0 @@\n-import javax.security.auth.PrivateCredentialPermission;\n-\n@@ -220,7 +217,0 @@\n-                .perm(new javax.security.auth.kerberos.ServicePermission(\n-                        \"krbtgt\/\" + REALM + \"@\" + REALM, \"initiate\"))\n-                .perm(new javax.security.auth.kerberos.ServicePermission(\n-                        SERVER + \"@\" + REALM, \"initiate\"))\n-                .perm(new javax.security.auth.kerberos.DelegationPermission(\n-                        \"\\\"\" + SERVER + \"@\" + REALM + \"\\\" \" +\n-                                \"\\\"krbtgt\/\" + REALM + \"@\" + REALM + \"\\\"\"))\n@@ -228,4 +218,1 @@\n-        if (lc == null) {\n-            \/\/ for Krb5LoginModule::promptForName\n-            pc.perm(new PropertyPermission(\"user.name\", \"read\"));\n-        } else {\n+        if (lc != null) {\n@@ -246,4 +233,0 @@\n-                .perm(new javax.security.auth.kerberos.ServicePermission(\n-                        SERVER + \"@\" + REALM, \"accept\"))\n-                .perm(new javax.security.auth.kerberos.ServicePermission(\n-                        BACKEND + \"@\" + REALM, \"initiate\"))\n@@ -251,5 +234,1 @@\n-        if (ls == null) {\n-            ps.perm(new PrivateCredentialPermission(\n-                    \"javax.security.auth.kerberos.KeyTab * \\\"*\\\"\", \"read\"))\n-                .perm(new java.io.FilePermission(KTAB_S, \"read\"));\n-        } else {\n+        if (ls != null) {\n@@ -262,2 +241,0 @@\n-                .perm(new javax.security.auth.kerberos.ServicePermission(\n-                        BACKEND + \"@\" + REALM, \"accept\"))\n@@ -265,5 +242,1 @@\n-        if (lb == null) {\n-            pb.perm(new PrivateCredentialPermission(\n-                    \"javax.security.auth.kerberos.KeyTab * \\\"*\\\"\", \"read\"))\n-                .perm(new java.io.FilePermission(KTAB_B, \"read\"));\n-        } else {\n+        if (lb != null) {\n@@ -299,3 +272,1 @@\n-                .inheritProp(\"jdk.net.hosts.file\")\n-                .prop(\"java.security.manager\", \"\")\n-                .perm(new javax.security.auth.AuthPermission(\"doAs\"));\n+                .inheritProp(\"jdk.net.hosts.file\");\n@@ -314,8 +285,1 @@\n-            p.perm(new java.util.PropertyPermission(\n-                            \"sun.security.krb5.principal\", \"read\"))\n-                            \/\/ For Krb5LoginModule::login.\n-                    .perm(new javax.security.auth.AuthPermission(\n-                            \"modifyPrincipals\"))\n-                    .perm(new javax.security.auth.AuthPermission(\n-                            \"modifyPrivateCredentials\"))\n-                    .prop(\"sun.security.krb5.debug\", \"true\")\n+            p.prop(\"sun.security.krb5.debug\", \"true\")\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/BasicProc.java","additions":6,"deletions":42,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n- * @run main\/othervm -Djava.security.manager=allow -Djdk.net.hosts.file=TestHosts HttpNegotiateServer\n+ * @run main\/othervm -Djdk.net.hosts.file=TestHosts HttpNegotiateServer\n@@ -320,4 +320,0 @@\n-        SecurityManager security = new SecurityManager();\n-        Policy.setPolicy(new SecurityPolicy());\n-        System.setSecurityManager(security);\n-\n@@ -522,19 +518,0 @@\n-\n-class SecurityPolicy extends Policy {\n-\n-    private static Permissions perms;\n-\n-    public SecurityPolicy() {\n-        super();\n-        if (perms == null) {\n-            perms = new Permissions();\n-            perms.add(new AllPermission());\n-        }\n-    }\n-\n-    @Override\n-    public PermissionCollection getPermissions(CodeSource codesource) {\n-        return perms;\n-    }\n-\n-}\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/HttpNegotiateServer.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8004488 8194486\n- * @summary wrong permissions checked in krb5\n- * @library \/test\/lib\n- * @compile -XDignore.symbol.file KeyPermissions.java\n- * @run main jdk.test.lib.FileInstaller TestHosts TestHosts\n- * @run main\/othervm -Djava.security.manager=allow -Djdk.net.hosts.file=TestHosts KeyPermissions\n- *\/\n-\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-import javax.security.auth.PrivateCredentialPermission;\n-import sun.security.jgss.GSSUtil;\n-\n-public class KeyPermissions extends SecurityManager {\n-\n-    @Override\n-    public void checkPermission(Permission perm) {\n-        if (perm instanceof PrivateCredentialPermission) {\n-            if (!perm.getName().startsWith(\"javax.security.auth.kerberos.\")) {\n-                throw new AccessControlException(\n-                        \"I don't like this\", perm);\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        System.setSecurityManager(new KeyPermissions());\n-        new OneKDC(null).writeJAASConf();\n-        Context s = Context.fromJAAS(\"server\");\n-        s.startAsServer(GSSUtil.GSS_KRB5_MECH_OID);\n-    }\n-}\n-\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/KeyPermissions.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,1 @@\n- * @run main\/othervm\/java.security.policy=principalSystemPropTest.policy\n- * PrincipalSystemPropTest\n+ * @run main\/othervm PrincipalSystemPropTest\n@@ -36,1 +35,0 @@\n-import java.io.File;\n@@ -38,2 +36,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/principalProperty\/PrincipalSystemPropTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,22 +0,0 @@\n-grant {\r\n-  \tpermission javax.security.auth.AuthPermission\r\n-    \t\"createLoginContext.ValidPrincipalSystemPropTest\";\r\n-    \tpermission javax.security.auth.AuthPermission\r\n-    \t\"createLoginContext.InvalidPrincipalSystemPropTest\";\r\n-    \tpermission javax.security.auth.AuthPermission\r\n-    \t\"createLoginContext.NoPrincipalSystemPropTest\";\r\n-    \tpermission javax.security.auth.AuthPermission\r\n-    \t\"createLoginContext.SelfPrincipalSystemPropTest\";\r\n-  \tpermission javax.security.auth.AuthPermission \"doAs\";\r\n-  \tpermission javax.security.auth.AuthPermission \"modifyPrincipals\";\r\n-  \tpermission javax.security.auth.AuthPermission \"getSubject\";\r\n-  \tpermission java.util.PropertyPermission \"*\", \"read,write\";\r\n-  \tpermission java.io.FilePermission \"\/-\", \"read,write,delete\";\n-  \tpermission java.io.FilePermission \"*\", \"read,write,delete\";\r\n-  \tpermission java.lang.RuntimePermission \"accessDeclaredMembers\";\r\n-  \tpermission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\r\n-  \tpermission java.lang.RuntimePermission \"accessClassInPackage.*\";\r\n-  \tpermission java.net.SocketPermission \"*:*\", \r\n-  \t\t\"listen,resolve,accept,connect\";\r\n-}; \r\n-\r\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/principalProperty\/principalSystemPropTest.policy","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,151 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 6324295 6931562 8154113\n- * @modules jdk.crypto.mscapi\n- * @run main\/othervm\/java.security.policy==access.policy AccessKeyStore pass\n- * @run main\/othervm\/java.security.policy==noaccess.policy AccessKeyStore fail\n- * @summary Confirm that right permissions are granted to access keystores.\n- *\/\n-\n-import java.security.Provider;\n-import java.security.*;\n-import java.security.cert.*;\n-import java.security.cert.Certificate;\n-import java.security.interfaces.RSAKey;\n-import java.util.Enumeration;\n-\n-public class AccessKeyStore {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ Check for security manager and required arg(s)\n-        if (System.getSecurityManager() == null) {\n-            throw new Exception(\"Missing security manager\");\n-        }\n-        if (args.length <= 0) {\n-            throw new Exception(\"Missing expected test status\");\n-        }\n-        boolean shouldPass = args[0].equalsIgnoreCase(\"pass\");\n-\n-        Provider p = Security.getProvider(\"SunMSCAPI\");\n-        System.out.println(\"SunMSCAPI provider classname is \" +\n-            p.getClass().getName());\n-\n-        KeyStore keyStore = KeyStore.getInstance(\"Windows-MY\", p);\n-\n-        \/*\n-         * If a SecurityManager exists then this will trigger a\n-         * SecurityException if the following permission has not\n-         * been granted:\n-         *\n-         *     SecurityPermission(\"authProvider.SunMSCAPI\")\n-         *\/\n-        try {\n-            keyStore.load(null, null);\n-            if (!shouldPass) {\n-                throw new Exception(\n-                    \"Expected KeyStore.load to throw a SecurityException\");\n-            }\n-        } catch (SecurityException se) {\n-            if (!shouldPass) {\n-                System.out.println(\"Expected exception thrown: \" + se);\n-                return;\n-            } else {\n-                throw se;\n-            }\n-        }\n-\n-        int i = 0;\n-        for (Enumeration<String> e = keyStore.aliases(); e.hasMoreElements(); ) {\n-            String alias = e.nextElement();\n-            displayEntry(keyStore, alias, i++);\n-        }\n-    }\n-\n-    private static void displayEntry(KeyStore keyStore, String alias,\n-        int index) throws KeyStoreException, NoSuchAlgorithmException  {\n-\n-        if (keyStore.isKeyEntry(alias)) {\n-            System.out.println(\"[\" + index + \"]\\n    \" + alias +\n-                \" [key-entry]\\n\");\n-\n-            try {\n-\n-                Key key = keyStore.getKey(alias, null);\n-\n-                if (key instanceof RSAKey) {\n-                    System.out.println(\"    Key type: \" + key.getAlgorithm() +\n-                        \" (\" + ((RSAKey)key).getModulus().bitLength() +\n-                        \" bit)\\n\");\n-                } else {\n-                    System.out.println(\"    Key type: \" + key.getAlgorithm() +\n-                        \"\\n\");\n-                }\n-\n-            } catch (UnrecoverableKeyException e) {\n-                System.out.println(\"    Key type: Unknown\\n\");\n-            }\n-\n-            Certificate[] chain = keyStore.getCertificateChain(alias);\n-            if (chain != null) {\n-                System.out.println(\"    Certificate chain: \");\n-                for (int i = 0; i < chain.length; i ++) {\n-                    System.out.println(\"        [\"+ (i + 1) + \"]\");\n-                    displayCert(chain[i], \"            \");\n-                }\n-            }\n-\n-        } else {\n-            System.out.println(\"[\" + index + \"]\\n    \" + alias +\n-                \" [trusted-cert-entry]\\n\");\n-            Certificate[] chain = keyStore.getCertificateChain(alias);\n-            if (chain != null) {\n-                System.out.println(\"    Certificate chain: \");\n-                for (int i = 0; i < chain.length; i ++) {\n-                    System.out.println(\"        [\"+ (i + 1) + \"]\");\n-                    displayCert(chain[i], \"            \");\n-                }\n-            }\n-        }\n-        System.out.println(\"-------------------------------------------------\");\n-    }\n-\n-    private static void displayCert(Certificate cert, String tab) {\n-        if (cert instanceof X509Certificate) {\n-            X509Certificate x = (X509Certificate) cert;\n-            System.out.println(\n-                tab + \"Owner: \" + x.getSubjectDN().toString() + \"\\n\" +\n-                tab + \"Issuer: \" + x.getIssuerDN().toString() + \"\\n\" +\n-                tab + \"Serial number: \" + x.getSerialNumber().toString(16) +\n-                \"\\n\"+\n-                tab + \"Valid from: \" + x.getNotBefore().toString() + \"\\n\" +\n-                tab + \"     until: \" + x.getNotAfter().toString());\n-        } else {\n-            System.out.println(tab + \"[unknown certificate format]\");\n-        }\n-        System.out.println();\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/mscapi\/AccessKeyStore.java","additions":0,"deletions":151,"binary":false,"changes":151,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    \/\/ This permission is required for the test to run to completion\n-    permission java.security.SecurityPermission \"authProvider.SunMSCAPI\";\n-};\n","filename":"test\/jdk\/sun\/security\/mscapi\/access.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    \/\/ This permission is required for the test to run to completion\n-    \/\/permission java.security.SecurityPermission \"authProvider.SunMSCAPI\";\n-};\n","filename":"test\/jdk\/sun\/security\/mscapi\/noaccess.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow ReinitCipher sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/ReinitCipher.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestPKCS5PaddingError sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestPKCS5PaddingError.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestRSACipher sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRSACipher.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestRSACipherWrap sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRSACipherWrap.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestRawRSACipher sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestRawRSACipher.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestSymmCiphers sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestSymmCiphers.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestSymmCiphersNoPad sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestSymmCiphersNoPad.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.AllPermission;\n-import java.security.KeyFactory;\n-import java.security.KeyPair;\n-import java.security.KeyPairGenerator;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.security.Provider;\n-import java.security.Security;\n-import java.security.spec.X509EncodedKeySpec;\n-\n-\/*\n- * @test\n- * @bug 8259319\n- * @library \/test\/lib ..\n- * @run main\/othervm -Djava.security.manager=allow IllegalPackageAccess\n- *\/\n-\n-public class IllegalPackageAccess extends PKCS11Test {\n-\n-    private static Policy policy = Policy.getPolicy();\n-    private static RuntimePermission accessPerm =\n-            new RuntimePermission(\"accessClassInPackage.com.sun.crypto.provider\");\n-\n-    private static class MyPolicy extends Policy {\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            PermissionCollection perms = new Permissions();\n-            perms.add(new AllPermission());\n-            return perms;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (permission.equals(accessPerm)) {\n-                return policy.implies(domain, permission);\n-            }\n-            return super.implies(domain, permission);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        main(new IllegalPackageAccess(), args);\n-        System.out.println(\"TEST PASS - OK\");\n-    }\n-\n-    @Override\n-    public void main(Provider p) throws Exception {\n-        Policy.setPolicy(null);\n-        Policy.setPolicy(new MyPolicy());\n-        System.setSecurityManager(new SecurityManager());\n-\n-        \/\/ Remove all security providers so a fallback scheme\n-        \/\/ that creates class instances is forced.\n-        for (Provider provider : Security.getProviders()) {\n-            Security.removeProvider(provider.getName());\n-        }\n-\n-        KeyPair kp = KeyPairGenerator.getInstance(\"DH\", p)\n-                .generateKeyPair();\n-        byte[] encPubKey = kp.getPublic().getEncoded();\n-        KeyFactory kf = KeyFactory.getInstance(\"DH\", p);\n-\n-        \/\/ Requires access to a SunJCE class that parses\n-        \/\/ the encoded key.\n-        kf.generatePublic(new X509EncodedKeySpec(encPubKey));\n-\n-        System.setSecurityManager(null);\n-        Policy.setPolicy(policy);\n-    }\n-\n-}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyAgreement\/IllegalPackageAccess.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm -Djava.security.manager=allow SupportedDHKeys sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyAgreement\/SupportedDHKeys.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow -Djdk.crypto.KeyAgreement.legacyKDF=true TestDH sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyAgreement\/TestDH.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestInterop sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyAgreement\/TestInterop.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestShort sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyAgreement\/TestShort.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm -Djava.security.manager=allow UnsupportedDHKeys sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyAgreement\/UnsupportedDHKeys.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow DESParity sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyGenerator\/DESParity.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm -Djava.security.manager=allow HmacDefKeySizeTest sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyGenerator\/HmacDefKeySizeTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestKeyGenerator sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyGenerator\/TestKeyGenerator.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestDH2048 sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyPairGenerator\/TestDH2048.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run testng\/othervm -Djava.security.manager=allow Basic\n+ * @run testng\/othervm Basic\n@@ -117,1 +117,0 @@\n-        String[] args = {\"sm\", \"Basic.policy\"};\n@@ -119,1 +118,1 @@\n-            main(new Basic(), args);\n+            main(new Basic(), new String[0]);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/Basic.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,23 +0,0 @@\n-grant codebase \"file:${user.dir}${\/}loader.jar\" {\n-    permission java.security.AllPermission;\n-};\n-\n-grant {\n-    permission java.util.PropertyPermission \"*\", \"read,write\";\n-    permission java.lang.RuntimePermission \"loadLibrary.*\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.*\";\n-    permission java.lang.RuntimePermission \"getProtectionDomain\";\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.security.SecurityPermission \"putProviderProperty.*\";\n-\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n-    permission java.security.SecurityPermission \"setProperty.auth.login.defaultCallbackHandler\";\n-    permission java.security.SecurityPermission \"authProvider.SunPKCS11-nss\";\n-\n-    \/\/ for 'module' test\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.*\";\n-    permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-    permission javax.security.auth.AuthPermission \"modifyPublicCredentials\";\n-    permission javax.security.auth.AuthPermission \"modifyPrivateCredentials\";\n-    permission javax.security.auth.PrivateCredentialPermission \"javax.security.auth.x500.X500PrivateCredential * \\\"*\\\"\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/Basic.policy","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow MacKAT sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Mac\/MacKAT.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow MacSameTest sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Mac\/MacSameTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow ReinitMac sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Mac\/ReinitMac.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow DigestKAT sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/MessageDigest\/DigestKAT.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow ReinitDigest sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/MessageDigest\/ReinitDigest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestCloning sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/MessageDigest\/TestCloning.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-    private static final String DEFAULT_POLICY = BASE + SEP + \"..\" + SEP + \"policy\";\n@@ -114,3 +113,0 @@\n-\n-        \/\/ set it as a system property to make it available in policy file\n-        System.setProperty(\"closed.base\", CLOSED_BASE);\n@@ -127,2 +123,0 @@\n-    private boolean enableSM = false;\n-\n@@ -175,16 +169,0 @@\n-        if (args != null) {\n-            if (args.length > 0) {\n-                if (\"sm\".equals(args[0])) {\n-                    test.enableSM = true;\n-                } else {\n-                    throw new RuntimeException(\"Unknown Command, use 'sm' as \"\n-                            + \"first argument to enable security manager\");\n-                }\n-            }\n-            if (test.enableSM) {\n-                System.setProperty(\"java.security.policy\",\n-                        (args.length > 1) ? BASE + SEP + args[1]\n-                                : DEFAULT_POLICY);\n-            }\n-        }\n-\n@@ -786,1 +764,0 @@\n-        Policy.setPolicy(null); \/\/ Clear the policy created by JIB if any\n@@ -836,19 +813,7 @@\n-        \/\/ set a security manager and policy before a test case runs,\n-        \/\/ and disable them after the test case finished\n-        try {\n-            if (enableSM) {\n-                System.setSecurityManager(new SecurityManager());\n-            }\n-            long start = System.currentTimeMillis();\n-            System.out.printf(\n-                    \"Running test with provider %s (security manager %s) ...%n\",\n-                    p.getName(), enableSM ? \"enabled\" : \"disabled\");\n-            main(p);\n-            long stop = System.currentTimeMillis();\n-            System.out.println(\"Completed test with provider \" + p.getName() +\n-                    \" (\" + (stop - start) + \" ms).\");\n-        } finally {\n-            if (enableSM) {\n-                System.setSecurityManager(null);\n-            }\n-        }\n+        long start = System.currentTimeMillis();\n+        System.out.printf(\n+                \"Running test with provider %s...%n\", p.getName());\n+        main(p);\n+        long stop = System.currentTimeMillis();\n+        System.out.println(\"Completed test with provider \" + p.getName() +\n+                \" (\" + (stop - start) + \" ms).\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java","additions":7,"deletions":42,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Djava.security.manager=allow Login\n+ * @run testng\/othervm Login\n@@ -59,1 +59,0 @@\n-        String[] args = new String[]{ \"sm\", \"Login.policy\"};\n@@ -61,1 +60,1 @@\n-            main(new Login(), args);\n+            main(new Login(), new String[0]);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/Login.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,14 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"*\", \"read, write\";\n-    permission java.lang.RuntimePermission \"loadLibrary.*\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.apple.*\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.*\";\n-    permission java.lang.RuntimePermission \"getProtectionDomain\";\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.security.SecurityPermission \"putProviderProperty.*\";\n-\n-\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n-    permission java.security.SecurityPermission \"setProperty.auth.login.defaultCallbackHandler\";\n-    permission java.security.SecurityPermission \"authProvider.SunPKCS11-NSS\";\n-};\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/Login.policy","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.util.PropertyPermission;\n@@ -45,1 +44,0 @@\n-    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n@@ -66,5 +64,0 @@\n-        if (args.length > 0) {\n-            Policy.setPolicy(new SimplePolicy());\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n@@ -130,17 +123,0 @@\n-    static final class SimplePolicy extends Policy {\n-\n-        final Permissions perms = new Permissions();\n-        SimplePolicy() {\n-            perms.add(new PropertyPermission(\"*\", \"read, write\"));\n-            perms.add(new SecurityPermission(\"authProvider.*\"));\n-            perms.add(new SecurityPermission(\"insertProvider.*\"));\n-            perms.add(new SecurityPermission(\"removeProvider.*\"));\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return perms.implies(permission) ||\n-                    DEFAULT_POLICY.implies(domain, permission);\n-        }\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -138,3 +138,0 @@\n-# run test with security manager\n-${TESTJAVA}${FS}bin${FS}java ${TEST_ARGS} -Djava.security.manager=allow MultipleLogins useSimplePolicy || exit 11\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.sh","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow AddPrivateKey sm policy\n@@ -66,5 +65,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setProperty(\"java.security.policy\",\n-                    BASE + File.separator + args[1]);\n-        }\n-\n@@ -84,4 +78,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/AddPrivateKey.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow AddTrustedCert sm policy\n@@ -51,5 +50,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setProperty(\"java.security.policy\",\n-                    BASE + File.separator + args[1]);\n-        }\n-\n@@ -80,6 +74,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setProperty(\"java.security.policy\",\n-                    BASE + File.separator + args[1]);\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow Crypto sm policy\n@@ -51,6 +50,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setProperty(\"java.security.policy\",\n-                    BASE + File.separator + args[1]);\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/Crypto.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow GetPrivateKey sm policy\n@@ -50,5 +49,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setProperty(\"java.security.policy\",\n-                    BASE + File.separator + args[1]);\n-        }\n-\n@@ -65,4 +59,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/GetPrivateKey.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow JksSetPrivateKey sm policy\n@@ -49,5 +48,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setProperty(\"java.security.policy\",\n-                    BASE + File.separator + args[1]);\n-        }\n-\n@@ -64,4 +58,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/JksSetPrivateKey.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm -Djava.security.manager=allow LoadKeystore sm policy\n@@ -46,5 +45,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setProperty(\"java.security.policy\",\n-                    BASE + File.separator + args[1]);\n-        }\n-\n@@ -62,4 +56,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/LoadKeystore.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TrustAnchors sm policy\n@@ -66,6 +65,0 @@\n-        if (args.length > 1 && \"sm\".equals(args[0])) {\n-            System.setProperty(\"java.security.policy\",\n-                    BASE + File.separator + args[1]);\n-            System.setSecurityManager(new SecurityManager());\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/TrustAnchors.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,6 +0,0 @@\n-grant {\n-    permission java.security.SecurityPermission \"authProvider.*\";\n-    permission java.io.FilePermission \"${test.src}\/-\", \"read\";\n-    permission java.io.FilePermission \"${pkcs11test.nss.db}\/-\", \"read\";\n-    permission java.io.FilePermission \"${pkcs11test.nss.libdir}\/-\", \"read\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/policy","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow Basic sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/SecureRandom\/Basic.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow ByteBuffers sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/ByteBuffers.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestDSA sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/TestDSA.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestDSAKeyLength sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/TestDSAKeyLength.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestRSAKeyLength sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/TestRSAKeyLength.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n- * @run main\/othervm -Djava.security.manager=allow ReadCertificates sm policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/ReadCertificates.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n- * @run main\/othervm -Djava.security.manager=allow ReadPKCS12 sm policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/ReadPKCS12.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestCurves sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/TestCurves.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestECDH sm policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/TestECDH.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestECDH2 sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/TestECDH2.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestECDSA sm policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/TestECDSA.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestECDSA2 sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/TestECDSA2.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestECGenSpec sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/TestECGenSpec.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestKeyFactory sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/TestKeyFactory.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.security.SecurityPermission \"insertProvider.*\";   \n-    permission java.security.SecurityPermission \"removeProvider.*\";\n-    permission java.io.FilePermission \"${test.src}\/-\", \"read\";\n-    permission java.io.FilePermission \"${closed.base}\/-\", \"read\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.util.PropertyPermission \"test.provider.name\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/pkcs11\/policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow KeyWrap sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/KeyWrap.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestCACerts sm TestCACerts.policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestCACerts.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.security.SecurityPermission \"insertProvider.*\";\n-    permission java.security.SecurityPermission \"removeProvider.*\";\n-    permission java.util.PropertyPermission \"java.home\", \"read\";\n-    permission java.io.FilePermission \"${java.home}\/lib\/security\/cacerts\", \"read\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestCACerts.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestKeyFactory sm rsakeys.ks.policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestKeyFactory.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n- * @run main\/othervm -Djava.security.manager=allow -Djava.security.debug=sunpkcs11 TestKeyPairGenerator\n- *                                                   sm TestKeyPairGenerator.policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestKeyPairGenerator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.util.PropertyPermission \"seed\", \"read\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestKeyPairGenerator.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestP11KeyFactoryGetRSAKeySpec sm rsakeys.ks.policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestP11KeyFactoryGetRSAKeySpec.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestSignatures sm rsakeys.ks.policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/TestSignatures.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.io.FilePermission \"${test.src}\/rsakeys.ks\", \"read\";\n-    permission java.util.PropertyPermission \"test.provider.name\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/pkcs11\/rsa\/rsakeys.ks.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,0 @@\n- * @run main\/othervm -Djdk.tls.namedGroups=\"secp256r1,sect193r1\"\n- *      -Djava.security.manager=allow ClientJSSEServerJSSE sm policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/sslecc\/ClientJSSEServerJSSE.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,9 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.security.SecurityPermission \"insertProvider.*\";\n-    permission java.security.SecurityPermission \"removeProvider.*\";\n-    permission java.util.PropertyPermission \"test.src\", \"read\";\n-    permission java.util.PropertyPermission \"numThreads\", \"read\";\n-    permission java.io.FilePermission \"${test.src}\/*\", \"read\";\n-    permission java.net.SocketPermission \"127.0.0.1:*\", \"listen,resolve,accept,connect\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs11\/sslecc\/policy","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestKeyMaterial sm policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/tls\/TestKeyMaterial.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestLeadingZeroesP11 sm\n","filename":"test\/jdk\/sun\/security\/pkcs11\/tls\/TestLeadingZeroesP11.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestMasterSecret sm TestMasterSecret.policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/tls\/TestMasterSecret.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,8 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.io.FilePermission \"${test.src}\/*\", \"read\";\n-    permission java.lang.RuntimePermission\n-        \"accessClassInPackage.sun.security.internal.spec\";\n-    permission java.lang.RuntimePermission\n-        \"accessClassInPackage.sun.security.internal.interfaces\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs11\/tls\/TestMasterSecret.policy","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestPRF sm policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/tls\/TestPRF.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djava.security.manager=allow TestPremaster sm policy\n","filename":"test\/jdk\/sun\/security\/pkcs11\/tls\/TestPremaster.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-grant {\n-    permission java.lang.RuntimePermission \"setSecurityManager\";\n-    permission java.io.FilePermission \"${test.src}\/*\", \"read\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.security.internal.spec\";\n-};\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs11\/tls\/policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4337761\n- * @summary add principal \"alias\" grant syntax to policy file\n- *\n- * Note: the keystore password is \"Alias.password\".\n- * Note: this test also covers 4501853 as well.\n- *\n- * @run main\/othervm\/policy=Alias.policy Alias\n- *\/\n-\n-import java.security.*;\n-import java.util.*;\n-\n-public class Alias {\n-\n-    public static void main(String[] args) {\n-\n-        Principal[] principals = new Principal[3];\n-        principals[0] = new com.sun.security.auth.UnixPrincipal(\"unix\");\n-        principals[1] = new javax.security.auth.x500.X500Principal(\"cn=x509\");\n-        principals[2] = new javax.security.auth.x500.X500Principal\n-                                        (\"emailaddress=duke@sun\");\n-\n-        java.net.URL url = null;\n-        try {\n-            url = new java.net.URL(\"http:\/\/alias\");\n-        } catch (java.net.MalformedURLException mue) {\n-            System.out.println(\"test 1 failed\");\n-            throw new SecurityException(mue.getMessage());\n-        }\n-        CodeSource cs =\n-            new CodeSource(url, (java.security.cert.Certificate[]) null);\n-\n-        ProtectionDomain pd = new ProtectionDomain\n-                (cs,\n-                null,\n-                null,\n-                principals);\n-\n-        PermissionCollection perms = Policy.getPolicy().getPermissions(pd);\n-\n-        if (perms.implies(new SecurityPermission(\"ALIAS\"))) {\n-            System.out.println(\"test succeeded\");\n-        } else {\n-            System.out.println(\"test 2 failed\");\n-            throw new SecurityException(\"test failed\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/Alias.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,12 +0,0 @@\n-keystore \"file:${test.src}\/Alias.keystore\";\n-\n-grant {\n-    permission java.security.SecurityPermission \"getPolicy\";\n-};\n-\n-grant\tcodebase \"http:\/\/alias\",\n-\tprincipal \"x509test person\",\n-\tprincipal \"duke\",\n-\tprincipal com.sun.security.auth.UnixPrincipal \"unix\" {\n-    permission java.security.SecurityPermission \"ALIAS\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/Alias.policy","additions":0,"deletions":12,"binary":false,"changes":12,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4503866\n- * @summary generalized permission name expansion in policy files\n- *\n- * Note: the keystore used is Alias.keystore - password is \"Alias.password\".\n- *\n- * @run main\/othervm\/policy=AliasExpansion.policy AliasExpansion\n- *\/\n-\n-import javax.security.auth.*;\n-\n-public class AliasExpansion {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        PrivateCredentialPermission pcp = new PrivateCredentialPermission\n-                (\"java.lang.String javax.security.auth.x500.X500Principal \" +\n-                \"\\\"CN=x509\\\"\", \"read\");\n-        SecurityManager sm = System.getSecurityManager();\n-        sm.checkPermission(pcp);\n-\n-        java.security.SecurityPermission sp =\n-                new java.security.SecurityPermission\n-                        (\"abcde javax.security.auth.x500.X500Principal \" +\n-                        \"\\\"CN=x509\\\" fghij \" +\n-                        \"javax.security.auth.x500.X500Principal \" +\n-                        \"\\\"CN=x509\\\"\");\n-        sm.checkPermission(sp);\n-\n-        sp = new java.security.SecurityPermission\n-                (\"javax.security.auth.x500.X500Principal \\\"CN=x509\\\"\");\n-        sm.checkPermission(sp);\n-\n-        sp = new java.security.SecurityPermission\n-                (\"javax.security.auth.x500.X500Principal \\\"CN=x509\\\" abc\");\n-        sm.checkPermission(sp);\n-\n-        System.out.println(\"test passed\");\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/AliasExpansion.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,22 +0,0 @@\n-keystore \"file:${test.src}\/Alias.keystore\";\n-\n-grant {\n-    permission javax.security.auth.PrivateCredentialPermission\n-\t\"java.lang.String ${{alias:x509test person}}\", \"read\";\n-    permission java.security.SecurityPermission\n-\t\"abcde ${{alias:x509test person}} fghij ${{alias:x509test person}}\";\n-    permission java.security.SecurityPermission\n-\t\"${{alias:x509test person}}\";\n-    permission java.security.SecurityPermission\n-\t\"${{alias:x509test person}} abc\";\n-\n-    \/\/ these three are erroneous but should not cause the\n-    \/\/ test to fail.  they should simply cause notification output to be\n-    \/\/ dumped to stderr.\n-    permission java.security.SecurityPermission\n-\t\"${{alias:notthere}}\";\n-    permission java.security.SecurityPermission\n-\t\"${{unsupported}}\";\n-    permission java.security.SecurityPermission\n-\t\"${{alias}}\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/AliasExpansion.policy","additions":0,"deletions":22,"binary":false,"changes":22,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8150468\n- * @summary check that a badly formatted policy file is handled correctly\n- * @run main\/othervm -Djava.security.manager=allow BadPolicyFile\n- *\/\n-\n-import java.io.File;\n-import java.net.URI;\n-import java.security.AccessControlException;\n-import java.security.Policy;\n-import java.security.URIParameter;\n-\n-public class BadPolicyFile {\n-\n-    public static void main(String[] args) throws Exception {\n-        URI uri = new File(System.getProperty(\"test.src\", \".\"),\n-                           \"BadPolicyFile.policy\").toURI();\n-        Policy.setPolicy(Policy.getInstance(\"JavaPolicy\", new URIParameter(uri)));\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            String javahome = System.getProperty(\"java.home\");\n-            throw new Exception(\"Expected AccessControlException\");\n-        } catch (AccessControlException ace) {\n-            System.out.println(\"Test PASSED\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/BadPolicyFile.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    \/\/ permission statement is missing trailing semi-colon\n-    permission \"java.util.PropertyPermission\" \"java.home\", \"read\"\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/BadPolicyFile.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4495188\n- * @summary static and policy permissions should not be checked separately\n- *\n- * @run main\/othervm\/policy=CombinedPerms.policy CombinedPerms\n- *\/\n-\n-import java.security.*;\n-import java.net.*;\n-import java.util.*;\n-\n-public class CombinedPerms {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        String host = \"localhost\";\n-\n-        URL u = new URL(\"file:\/tmp\/duke\");\n-        CodeSource cs =\n-            new CodeSource(u, (java.security.cert.Certificate[]) null);\n-        Permissions p = new Permissions();\n-        p.add(new SocketPermission(host, \"connect\"));\n-        ProtectionDomain pd = new ProtectionDomain(cs, p, null, null);\n-\n-        if (pd.implies(new SocketPermission(host, \"connect,accept\"))) {\n-            System.out.println(\"Test Passed\");\n-        } else {\n-            throw new SecurityException(\"Test Failed\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/CombinedPerms.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant codebase \"file:\/tmp\/duke\" {\n-    permission java.net.SocketPermission \"localhost\", \"accept\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/CombinedPerms.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8159752\n- * @summary Test that default policy permissions are always granted\n- * @run main\/othervm DefaultPolicy\n- *\/\n-\n-import java.net.URI;\n-import java.net.URL;\n-import java.nio.file.Paths;\n-import java.security.AllPermission;\n-import java.security.CodeSigner;\n-import java.security.CodeSource;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-import java.security.URIParameter;\n-\n-public class DefaultPolicy {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ Check policy with no java.security.policy property set\n-        Policy p = Policy.getPolicy();\n-        checkPolicy(p);\n-\n-        \/\/ Check policy with java.security.policy '=' option\n-        System.setProperty(\"java.security.policy\", \"Extra.policy\");\n-        p.refresh();\n-        checkPolicy(p);\n-\n-        \/\/ Check policy with java.security.policy override '==' option\n-        System.setProperty(\"java.security.policy\", \"=Extra.policy\");\n-        p.refresh();\n-        checkPolicy(p);\n-\n-        \/\/ Check Policy.getInstance\n-        URI policyURI = Paths.get(System.getProperty(\"test.src\"),\n-                                  \"Extra.policy\").toUri();\n-        p = Policy.getInstance(\"JavaPolicy\", new URIParameter(policyURI));\n-        checkPolicy(p);\n-    }\n-\n-    private static void checkPolicy(Policy p) throws Exception {\n-        \/\/ check if jdk.crypto.cryptoki module has been de-privileged\n-        CodeSource cs =\n-            new CodeSource(new URL(\"jrt:\/jdk.crypto.cryptoki\"), (CodeSigner[])null);\n-        ProtectionDomain pd = new ProtectionDomain(cs, null, null, null);\n-        if (p.implies(pd, new AllPermission())) {\n-            throw new Exception(\"module should not be granted AllPermission\");\n-        }\n-        if (!p.implies(pd, new RuntimePermission(\"loadLibrary.j2pkcs11\"))) {\n-            throw new Exception(\"module should be granted RuntimePermission\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/DefaultPolicy.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4702543\n- * @summary X500Principal encodes EmailAddress incorrectly -\n- *\n- *      fix has compatibility ramifications for policy.\n- *\n- *      this test is related to the Alias.java test in the same directory.\n- *      the email address encoding in EmailAddress.policy is the one\n- *      taken from the persistent certificate stored in Alias.keystore,\n- *      and which has the incorrect encoding.  the alias is 'duke',\n- *      and the DN is:  \"emailaddress=duke@sun\".  the cert was generated\n- *      by a 1.4 JDK, so it has the wrong encoding for \"duke@sun\"\n- *      (UTF-8 string instead of IA5String, i believe).\n- *\n- *      administrators would have placed an incorrectly encoded DN entry\n- *      like this in their policies.  the fix for the above bug\n- *      would have broken their policy because the incorrect\n- *      encoding would be compared to a properly encoded DN from\n- *      the current call thread.  if you run this test without\n- *      a fix for the compatibility issue, the debug output will\n- *      show the differences in the encodings.\n- *\n- *      so in addition to fixing the encoding,\n- *      the policy implementation was updated to read the\n- *      incorrectly encoded DN strings, generate new X500Principals,\n- *      and dump out new DN strings that had the correct encoding.\n- *      thus access control checks would no longer fail.\n- *\n- * @run main\/othervm\/policy=EmailAddress.policy -Djava.security.debug=policy EmailAddress\n- *\/\n-\n-import java.security.*;\n-import java.util.*;\n-\n-public class EmailAddress {\n-\n-    public static void main(String[] args) {\n-\n-        Principal[] principals = new Principal[1];\n-        principals[0] = new javax.security.auth.x500.X500Principal\n-                                        (\"emailaddress=duke@sun\");\n-\n-        java.net.URL url = null;\n-        try {\n-            url = new java.net.URL(\"http:\/\/emailaddress\");\n-        } catch (java.net.MalformedURLException mue) {\n-            System.out.println(\"test 1 failed\");\n-            throw new SecurityException(mue.getMessage());\n-        }\n-        CodeSource cs =\n-            new CodeSource(url, (java.security.cert.Certificate[]) null);\n-\n-        ProtectionDomain pd = new ProtectionDomain\n-                (cs,\n-                null,\n-                null,\n-                principals);\n-\n-        PermissionCollection perms = Policy.getPolicy().getPermissions(pd);\n-\n-        if (perms.implies(new SecurityPermission(\"EMAILADDRESS\"))) {\n-            System.out.println(\"test succeeded\");\n-        } else {\n-            System.out.println(\"test 2 failed\");\n-            throw new SecurityException(\"test failed\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/EmailAddress.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-grant {\n-    permission java.security.SecurityPermission \"getPolicy\";\n-};\n-\n-grant\tcodebase \"http:\/\/emailaddress\",\n-\tprincipal javax.security.auth.x500.X500Principal\n-                \"1.2.840.113549.1.9.1=#0c0864756b654073756e\" {\n-    permission java.security.SecurityPermission \"EMAILADDRESS\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/EmailAddress.policy","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.net.SocketPermission \"localhost:0\", \"listen\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/Extra.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4231980 4233913\n- * @summary Make sure that when no system policy and user policy files exist,\n- * the built-in default policy will be used, which - amongst other things -\n- * grants standard extensions the AllPermission. This regression is for 2\n- * bugs (listed above). This test is ignored for now, because it temporarily\n- * removes the system policy file, which is not a safe thing to do (may\n- * affect other tests that are run concurrently).\n- *\n- * @build SomeExtensionClass\n- * @build GrantAllPermToExtWhenNoPolicy\n- * @run shell\/manual GrantAllPermToExtWhenNoPolicy.sh\n- *\/\n-\n-import java.security.*;\n-\n-public class GrantAllPermToExtWhenNoPolicy {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        SomeExtensionClass sec = new SomeExtensionClass();\n-        try {\n-            sec.getUserName();\n-        } catch (AccessControlException ace) {\n-            throw new Exception(\"Cannot read user name\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/GrantAllPermToExtWhenNoPolicy.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,98 +0,0 @@\n-#! \/bin\/sh\n-\n-#\n-# Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-   TESTSRC=\".\"\n-fi\n-\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-   TESTCLASSES=\".\"\n-fi\n-\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-   echo \"TESTJAVA not set.  Test cannot execute.\"\n-   echo \"FAILED!!!\"\n-   exit 1\n-fi\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-   COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux )\n-    PATHSEP=\":\"\n-    FILESEP=\"\/\"\n-    ;;\n-  Windows* )\n-    PATHSEP=\";\"\n-    FILESEP=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-# compile the test program\n-cd ${TESTSRC}${FILESEP}\n-rm GrantAllPermToExtWhenNoPolicy.class\n-${COMPILEJAVA}${FILESEP}bin${FILESEP}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-    -d ${TESTSRC}${FILESEP} ${TESTSRC}${FILESEP}SomeExtensionClass.java\n-${COMPILEJAVA}${FILESEP}bin${FILESEP}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-    -d ${TESTSRC}${FILESEP} ${TESTSRC}${FILESEP}GrantAllPermToExtWhenNoPolicy.java\n-\n-# create the extension JAR file\n-cd ${TESTCLASSES}\n-${COMPILEJAVA}${FILESEP}bin${FILESEP}jar cvf SomeExt.jar SomeExtensionClass*.class\n-rm SomeExtensionClass.class\n-\n-# move the extension JAR file to the extension directory\n-mv SomeExt.jar ${TESTJAVA}${FILESEP}jre${FILESEP}lib${FILESEP}ext\n-\n-# remove the system policy file\n-mv \\\n- ${TESTJAVA}${FILESEP}jre${FILESEP}lib${FILESEP}security${FILESEP}java.policy \\\n- ${TESTJAVA}${FILESEP}jre${FILESEP}lib${FILESEP}security${FILESEP}tmp_pol\n-\n-# run the test program\n-${TESTJAVA}${FILESEP}bin${FILESEP}java ${TESTVMOPTS} -Djava.security.manager \\\n- GrantAllPermToExtWhenNoPolicy\n-\n-# save error status\n-status=$?\n-\n-# restore system policy and remove extension JAR file\n-mv ${TESTJAVA}${FILESEP}jre${FILESEP}lib${FILESEP}security${FILESEP}tmp_pol \\\n- ${TESTJAVA}${FILESEP}jre${FILESEP}lib${FILESEP}security${FILESEP}java.policy\n-rm ${TESTJAVA}${FILESEP}jre${FILESEP}lib${FILESEP}ext${FILESEP}SomeExt.jar\n-\n-exit $status\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/GrantAllPermToExtWhenNoPolicy.sh","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -1,123 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8047771\n- * @summary check permissions and principals from various modules\n- * @modules java.desktop\n- *          java.logging\n- *          java.management\n- *          java.security.jgss\n- *          java.smartcardio\n- *          java.sql\n- *          java.xml\n- *          jdk.attach\n- *          jdk.jdi\n- *          jdk.net\n- *          jdk.security.auth\n- *          jdk.security.jgss\n- * @run main\/othervm\/java.security.policy==modules.policy Modules\n- *\/\n-\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.Principal;\n-import java.security.PrivilegedAction;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n-import javax.security.auth.Subject;\n-\n-public class Modules {\n-\n-    private final static Permission[] perms = new Permission[] {\n-        \/\/ java.base module\n-        new java.io.SerializablePermission(\"enableSubstitution\"),\n-        new java.lang.reflect.ReflectPermission(\"suppressAccessChecks\"),\n-        new java.nio.file.LinkPermission(\"hard\"),\n-        new javax.net.ssl.SSLPermission(\"getSSLSessionContext\"),\n-        new javax.security.auth.AuthPermission(\"doAsPrivileged\"),\n-        new javax.security.auth.PrivateCredentialPermission(\"* * \\\"*\\\"\",\n-                                                            \"read\"),\n-        \/\/ java.desktop module\n-        new java.awt.AWTPermission(\"createRobot\"),\n-        new javax.sound.sampled.AudioPermission(\"play\"),\n-        \/\/ java.logging module\n-        new java.util.logging.LoggingPermission(\"control\", \"\"),\n-        \/\/ java.management module\n-        new java.lang.management.ManagementPermission(\"control\"),\n-        new javax.management.MBeanPermission(\"*\", \"getAttribute\"),\n-        new javax.management.MBeanServerPermission(\"createMBeanServer\"),\n-        new javax.management.MBeanTrustPermission(\"register\"),\n-        new javax.management.remote.SubjectDelegationPermission(\"*\"),\n-        \/\/ java.security.jgss module\n-        new javax.security.auth.kerberos.DelegationPermission(\"\\\"*\\\" \\\"*\\\"\"),\n-        new javax.security.auth.kerberos.ServicePermission(\"*\", \"accept\"),\n-        \/\/ java.sql module\n-        new java.sql.SQLPermission(\"setLog\"),\n-        \/\/ java.smartcardio module\n-        new javax.smartcardio.CardPermission(\"*\", \"*\"),\n-        \/\/ jdk.attach module (@jdk.Exported Permissions)\n-        new com.sun.tools.attach.AttachPermission(\"attachVirtualMachine\"),\n-        \/\/ jdk.jdi module (@jdk.Exported Permissions)\n-        new com.sun.jdi.JDIPermission(\"virtualMachineManager\"),\n-        \/\/ jdk.security.jgss module (@jdk.Exported Permissions)\n-        new com.sun.security.jgss.InquireSecContextPermission(\"*\"),\n-    };\n-\n-    private final static Principal[] princs = new Principal[] {\n-        \/\/ java.base module\n-        new javax.security.auth.x500.X500Principal(\"CN=Duke\"),\n-        \/\/ java.management module\n-        new javax.management.remote.JMXPrincipal(\"Duke\"),\n-        \/\/ java.security.jgss module\n-        new javax.security.auth.kerberos.KerberosPrincipal(\"duke@openjdk.org\"),\n-        new com.sun.security.auth.UserPrincipal(\"Duke\"),\n-        new com.sun.security.auth.NTDomainPrincipal(\"openjdk.org\"),\n-        new com.sun.security.auth.NTSid(\n-            \"S-1-5-21-3623811015-3361044348-30300820-1013\"),\n-        new com.sun.security.auth.NTUserPrincipal(\"Duke\"),\n-        new com.sun.security.auth.UnixNumericUserPrincipal(\"0\"),\n-        new com.sun.security.auth.UnixPrincipal(\"duke\"),\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        for (Permission perm : perms) {\n-            AccessController.checkPermission(perm);\n-        }\n-\n-        Permission princPerm = new java.util.PropertyPermission(\"user.home\",\n-                                                                \"read\");\n-        Set<Principal> princSet = new HashSet<>(Arrays.asList(princs));\n-        Subject subject = new Subject(true, princSet, Collections.emptySet(),\n-                                      Collections.emptySet());\n-        PrivilegedAction<Void> pa = () -> {\n-            AccessController.checkPermission(princPerm);\n-            return null;\n-        };\n-        Subject.doAsPrivileged(subject, pa, null);\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/Modules.java","additions":0,"deletions":123,"binary":false,"changes":123,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @author  Ram Marti\n- * @bug 4350951\n- *\n- * @summary generalized \"self\" expansion in JAAS policy files\n- *\n- * @run main\/othervm\/policy=SelfExpansion.policy SelfExpansion\n- *\/\n-\n-import java.security.*;\n-import javax.security.auth.Subject;\n-\n-public class SelfExpansion {\n-    public static void main(String[] args) throws Exception {\n-        Subject s = new Subject();\n-        s.getPrincipals().add\n-                (new javax.security.auth.x500.X500Principal(\"CN=test\"));\n-        s.getPrivateCredentials().add(new String(\"test\"));\n-        try {\n-            Subject.doAsPrivileged(s, new PrivilegedAction() {\n-                public Object run() {\n-                    java.util.Iterator i = Subject.getSubject\n-                                (AccessController.getContext\n-                                ()).getPrivateCredentials().iterator();\n-                    return i.next();\n-                }\n-            }, null);\n-            System.out.println(\"Test succeeded\");\n-        } catch (Exception e) {\n-            System.out.println(\"Test failed\");\n-            e.printStackTrace();\n-            throw e;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/SelfExpansion.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,10 +0,0 @@\n-grant {\n-    permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-    permission javax.security.auth.AuthPermission \"modifyPrivateCredentials\";\n-    permission javax.security.auth.AuthPermission \"doAsPrivileged\";\n-    permission javax.security.auth.AuthPermission \"getSubject\";\n-};\n-\n-grant principal javax.security.auth.x500.X500Principal \"CN=test\" {\n-    permission javax.security.auth.PrivateCredentialPermission \"java.lang.String ${{self}}\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/SelfExpansion.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4510424\n- * @summary ${{self}} expansion fails for grants with wildcard principal names\n- *\/\n-\n-import java.util.*;\n-import java.security.*;\n-import javax.security.auth.Subject.*;\n-import javax.security.auth.x500.*;\n-\n-public class SelfWildcard {\n-\n-    private static final String SELF_ONE =\n-        \"javax.security.auth.x500.X500Principal \\\"CN=foo\\\"\";\n-    private static final String SELF_TWOTHREE =\n-        \"javax.security.auth.x500.X500Principal \\\"CN=foo\\\", \" +\n-        \"javax.security.auth.x500.X500Principal \\\"CN=bar\\\"\";\n-    private static final String SELF_FOURFIVE =\n-        \"javax.security.auth.x500.X500Principal \\\"CN=foo\\\", \" +\n-        \"javax.security.auth.x500.X500Principal \\\"CN=bar\\\", \" +\n-        \"com.sun.security.auth.UnixPrincipal \\\"foobar\\\"\";\n-\n-    public static void main(String[] args) throws Exception {\n-        if (System.getProperty(\"test.src\") == null) {\n-            System.setProperty(\"test.src\", \".\");\n-        }\n-        System.setProperty(\"java.security.policy\",\n-                \"file:${test.src}\/SelfWildcard.policy\");\n-\n-        Principal[] ps = {\n-                new X500Principal(\"CN=foo\"),\n-                new X500Principal(\"CN=bar\"),\n-                new com.sun.security.auth.UnixPrincipal(\"foobar\") };\n-        ProtectionDomain pd = new ProtectionDomain\n-                (new CodeSource(null, (java.security.cert.Certificate[]) null),\n-                    null, null, ps);\n-        PermissionCollection perms = Policy.getPolicy().getPermissions(pd);\n-        System.out.println(\"perms = \" + perms);\n-        System.out.println();\n-\n-        Enumeration e = perms.elements();\n-        while (e.hasMoreElements()) {\n-            Permission p = (Permission)e.nextElement();\n-            if (p instanceof UnresolvedPermission &&\n-                p.toString().indexOf(SELF_ONE) < 0 &&\n-                p.toString().indexOf(SELF_TWOTHREE) < 0 &&\n-                p.toString().indexOf(SELF_FOURFIVE) < 0) {\n-                throw new SecurityException(\"Test Failed\");\n-            }\n-        }\n-\n-        System.out.println(\"Test Succeeded\");\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/SelfWildcard.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-\n-grant principal javax.security.auth.x500.X500Principal \"CN=foo\" {\n-  permission OnePermission \"${{self}}\";\n-};\n-\n-grant principal javax.security.auth.x500.X500Principal \"CN=foo\",\n-    principal javax.security.auth.x500.X500Principal \"CN=bar\" {\n-  permission TwoPermission \"${{self}}\";\n-};\n-\n-grant principal javax.security.auth.x500.X500Principal * {\n-  permission ThreePermission \"${{self}}\";\n-};\n-\n-grant principal * * {\n-  permission FourPermission \"${{self}}\";\n-};\n-\n-grant principal javax.security.auth.x500.X500Principal *,\n-    principal com.sun.security.auth.UnixPrincipal \"foobar\" {\n-  permission FivePermission \"${{self}}\";\n-};\n-\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/SelfWildcard.policy","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.*;\n-\n-public class SomeExtensionClass {\n-\n-    public String getUserName() {\n-        String user = (String) AccessController.doPrivileged(\n-                new PrivilegedAction() {\n-            public Object run() {\n-                return System.getProperty(\"user.name\");\n-            }\n-        }\n-        );\n-        return user;\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/SomeExtensionClass.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-keystore \"TokenStore.keystore\", \"JKS\", \"SUN\";\n-keystorePasswordURL \"TokenStore.pwd\";\n-\n-grant signedby \"POLICY_URL_T_P\" {\n-    permission java.security.AllPermission;\n-};                                            \n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/TokenStore.RelPassPolicy","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -1,262 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4919147\n- * @summary Support for token-based KeyStores\n- * @modules java.base\/sun.security.provider\n- *\/\n-\n-import java.io.*;\n-import java.util.*;\n-import java.net.*;\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.ProtectionDomain;\n-import java.security.Permission;\n-import java.security.KeyStore;\n-import java.security.cert.*;\n-import sun.security.provider.*;\n-\n-public class TokenStore {\n-\n-    private static String DIR =\n-                System.getProperty(\"test.classes\", \".\") + File.separatorChar;\n-    private static final char[] storePassword = new char[]\n-                { 'T', 'o', 'k', 'e', 'n', 'S', 't', 'o', 'r', 'e' };\n-\n-\n-    \/\/ policy files that will get written\n-    private static String NO_STORE_FILE =       DIR + \"TokenStore.NoStore\";\n-    private static String URL_FILE =            DIR + \"TokenStore.Url\";\n-    private static String URL_T_FILE =          DIR + \"TokenStore.UrlT\";\n-    private static String URL_T_P_FILE =        DIR + \"TokenStore.UrlTP\";\n-    private static String URL_PWD_FILE =        DIR + \"TokenStore.UrlPwd\";\n-    private static String URL_T_P_PWD_FILE =    DIR + \"TokenStore.UrlTPPwd\";\n-    private static String BADPASS_FILE =        DIR + \"TokenStore.BadPass\";\n-\n-    private static String RELPASS_FILE =\n-                System.getProperty(\"test.src\", \".\") + File.separatorChar +\n-                \"TokenStore.RelPassPolicy\";\n-\n-    \/\/ protection domains\n-    private static ProtectionDomain NO_STORE_DOMAIN;\n-    private static ProtectionDomain URL_DOMAIN;\n-    private static ProtectionDomain URL_T_DOMAIN;\n-    private static ProtectionDomain URL_T_P_DOMAIN;\n-\n-    \/\/ policy contents written to files\n-    private static final String POLICY_NO_STORE =\n-        \"grant { permission java.security.AllPermission; };\";\n-\n-    private static final String POLICY_URL =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\";\"         +\n-        \"grant signedby \\\"POLICY_URL\\\" {\"                               +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static final String POLICY_URL_T =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\", \\\"JKS\\\";\"+\n-        \"grant signedby \\\"POLICY_URL_T\\\" {\"                             +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static final String POLICY_URL_T_P =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\",\"         +\n-        \"               \\\"JKS\\\", \\\"SUN\\\";\"                              +\n-        \"grant signedby \\\"POLICY_URL_T_P\\\" {\"                           +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static final String POLICY_URL_PWD =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\";\"         +\n-        \"keystorePasswordURL \\\"file:${test.src}${\/}TokenStore.pwd\\\";\"   +\n-        \"grant signedby \\\"POLICY_URL\\\" {\"                               +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static final String POLICY_URL_T_P_PWD =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\",\"         +\n-        \"               \\\"JKS\\\", \\\"SUN\\\";\"                              +\n-        \"keystorePasswordURL \\\"file:${test.src}${\/}TokenStore.pwd\\\";\"   +\n-        \"grant signedby \\\"POLICY_URL_T_P\\\" {\"                           +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static final String POLICY_BADPASS =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\",\"         +\n-        \"               \\\"JKS\\\", \\\"SUN\\\";\"                              +\n-        \"keystorePasswordURL \\\"file:${test.src}${\/}TokenStore.java\\\";\"  +\n-        \"grant signedby \\\"POLICY_URL_T_P\\\" {\"                           +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static void init() throws Exception {\n-\n-        \/\/ first write policy files\n-\n-        PolicyParser pp = new PolicyParser();\n-        pp.read(new StringReader(POLICY_NO_STORE));\n-        pp.write(new FileWriter(NO_STORE_FILE, false));\n-\n-        pp = new PolicyParser();\n-        pp.read(new StringReader(POLICY_URL));\n-        pp.write(new FileWriter(URL_FILE, false));\n-\n-        pp = new PolicyParser();\n-        pp.read(new StringReader(POLICY_URL_T));\n-        pp.write(new FileWriter(URL_T_FILE, false));\n-\n-        pp = new PolicyParser();\n-        pp.read(new StringReader(POLICY_URL_T_P));\n-        pp.write(new FileWriter(URL_T_P_FILE, false));\n-\n-        pp = new PolicyParser();\n-        pp.read(new StringReader(POLICY_URL_PWD));\n-        pp.write(new FileWriter(URL_PWD_FILE, false));\n-\n-        pp = new PolicyParser();\n-        pp.read(new StringReader(POLICY_URL_T_P_PWD));\n-        pp.write(new FileWriter(URL_T_P_PWD_FILE, false));\n-\n-        pp = new PolicyParser();\n-        pp.read(new StringReader(POLICY_BADPASS));\n-        pp.write(new FileWriter(BADPASS_FILE, false));\n-\n-        \/\/ next load keystore data to build PD's\n-\n-        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n-        ks.load(new FileInputStream\n-                        (System.getProperty(\"test.src\", \".\") +\n-                        File.separatorChar +\n-                        \"TokenStore.keystore\"),\n-                storePassword);\n-\n-        NO_STORE_DOMAIN = new ProtectionDomain\n-                        (new CodeSource(new URL(\"file:\/foo\"),\n-                            (java.security.cert.Certificate[]) null),\n-                        null,  \/\/ perms\n-                        null,  \/\/ class loader\n-                        null);  \/\/ principals\n-\n-        Certificate[] chain = (Certificate[])\n-                        ks.getCertificateChain(\"POLICY_URL\");\n-        URL_DOMAIN = new ProtectionDomain\n-                        (new CodeSource(new URL(\"file:\/foo\"), chain),\n-                        null,  \/\/ perms\n-                        null,  \/\/ class loader\n-                        null);  \/\/ principals\n-\n-        chain = (Certificate[])\n-                        ks.getCertificateChain(\"POLICY_URL_T\");\n-        URL_T_DOMAIN = new ProtectionDomain\n-                        (new CodeSource(new URL(\"file:\/foo\"), chain),\n-                        null,  \/\/ perms\n-                        null,  \/\/ class loader\n-                        null);  \/\/ principals\n-\n-        chain = (Certificate[])\n-                        ks.getCertificateChain(\"POLICY_URL_T_P\");\n-        URL_T_P_DOMAIN = new ProtectionDomain\n-                        (new CodeSource(new URL(\"file:\/foo\"), chain),\n-                        null,  \/\/ perms\n-                        null,  \/\/ class loader\n-                        null);  \/\/ principals\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        init();\n-\n-        \/\/ test no key store in policy\n-\n-        System.setProperty(\"java.security.policy\", \"=\" + NO_STORE_FILE);\n-        PolicyFile p = new PolicyFile();\n-        checkPerm(p, NO_STORE_DOMAIN);\n-\n-        \/\/ test policy keystore + URL\n-\n-        System.setProperty(\"java.security.policy\", \"=\" + URL_FILE);\n-        p = new PolicyFile();\n-        checkPerm(p, URL_DOMAIN);\n-\n-        \/\/ test policy keystore + URL + type\n-\n-        System.setProperty(\"java.security.policy\", \"=\" + URL_T_FILE);\n-        p = new PolicyFile();\n-        checkPerm(p, URL_T_DOMAIN);\n-\n-        \/\/ test policy keystore + URL + type + provider\n-\n-        System.setProperty(\"java.security.policy\", \"=\" + URL_T_P_FILE);\n-        p = new PolicyFile();\n-        checkPerm(p, URL_T_P_DOMAIN);\n-\n-        \/\/ test policy keystore + URL + password\n-\n-        System.setProperty(\"java.security.policy\", \"=\" + URL_FILE);\n-        p = new PolicyFile();\n-        checkPerm(p, URL_DOMAIN);\n-\n-        \/\/ test policy keystore + URL + type + provider + password\n-\n-        System.setProperty(\"java.security.policy\", \"=\" + URL_T_P_FILE);\n-        p = new PolicyFile();\n-        checkPerm(p, URL_T_P_DOMAIN);\n-\n-        \/\/ test policy keystore + URL + type + provider + BAD password\n-\n-        System.setProperty(\"java.security.policy\", \"=\" + BADPASS_FILE);\n-        p = new PolicyFile();\n-        try {\n-            checkPerm(p, URL_T_P_DOMAIN);\n-            throw new RuntimeException(\"expected SecurityException\");\n-        } catch (SecurityException se) {\n-            \/\/ good\n-            \/\/se.printStackTrace();\n-        }\n-\n-        \/\/ test policy keystore + URL + type + provider + RELATIVE password\n-\n-        System.setProperty(\"java.security.policy\", \"=\" + RELPASS_FILE);\n-        p = new PolicyFile();\n-        checkPerm(p, URL_T_P_DOMAIN);\n-    }\n-\n-    private static void checkPerm(PolicyFile p, ProtectionDomain pd)\n-                throws Exception {\n-        boolean foundIt = false;\n-        Enumeration perms = p.getPermissions(pd).elements();\n-        while (perms.hasMoreElements()) {\n-            Permission perm = (Permission)perms.nextElement();\n-            if (perm instanceof AllPermission) {\n-                foundIt = true;\n-                break;\n-            }\n-        }\n-        if (!foundIt) {\n-            throw new SecurityException(\"expected AllPermission\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/TokenStore.java","additions":0,"deletions":262,"binary":false,"changes":262,"status":"deleted"},{"filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/TokenStore.keystore","binary":true,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-TokenStore\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/TokenStore.pwd","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4409615\n- * @summary KeyStore alias principal grant fails for trusted certificate entry\n- *\n- * this should always work:\n- *              main\/othervm\/policy=TrustedCert.policy \\\n- *              -Dkeystore=TrustedCert.keystore1 -Dfoo=bar TrustedCert\n- *\n- * @run main\/othervm\/policy=TrustedCert.policy -Dkeystore=TrustedCert.keystore1 -Dfoo=bar TrustedCert\n- *\/\n-\n-import java.security.PrivilegedAction;\n-import java.util.Collections;\n-import javax.security.auth.Subject;\n-import javax.security.auth.x500.X500Principal;\n-\n-public class TrustedCert {\n-\n-    public static void main(String[] args) {\n-        System.out.println(\n-            Subject.doAsPrivileged(\n-                new Subject(true,\n-                            Collections.singleton(new X500Principal(\"CN=Tim\")),\n-                            Collections.EMPTY_SET,\n-                            Collections.EMPTY_SET),\n-                new PrivilegedAction() {\n-                    public Object run() {\n-                        return System.getProperty(\"foo\");\n-                    }\n-                },\n-                null));\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/TrustedCert.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/TrustedCert.keystore","binary":true,"status":"deleted"},{"filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/TrustedCert.keystore1","binary":true,"status":"deleted"},{"patch":"@@ -1,11 +0,0 @@\n-keystore \"file:${test.src}\/${keystore}\";\n-\n-grant {\n-    permission javax.security.auth.AuthPermission \"doAsPrivileged\";\n-    permission java.util.PropertyPermission \"keystore\", \"read\";\n-};\n-\n-grant principal \"Tim\" {\n-    permission java.util.PropertyPermission \"foo\", \"read\";\n-};\n-\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/TrustedCert.policy","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4667175\n- * @summary Cannot parsing java.policy which includes some 2 bytes char\n- *\n- * @run main\/othervm\/policy=Utf8.policy -Dsun.security.policy.utf8=false Utf8\n- *\/\n-\n-public class Utf8 {\n-    public static void main(String[] args) throws Exception {\n-        System.out.println(\"user name = \" + System.getProperty(\"user.name\"));\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/Utf8.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"user.name\", \"read\"; \n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/Utf8.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8008908\n- * @summary wildcard principal names are not processed correctly\n- * @run main\/othervm\/policy=wildcard.policy WildcardPrincipalName\n- *\/\n-\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.Principal;\n-import java.security.PrivilegedAction;\n-import java.util.HashSet;\n-import java.util.PropertyPermission;\n-import java.util.Set;\n-import javax.security.auth.Subject;\n-import javax.security.auth.x500.X500Principal;\n-\n-public class WildcardPrincipalName {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        X500Principal duke = new X500Principal(\"CN=Duke\");\n-        PropertyPermission pp = new PropertyPermission(\"user.home\", \"read\");\n-        RunAsPrivilegedUserAction runAsPrivilegedUserAction\n-            = new RunAsPrivilegedUserAction(duke,\n-                                            new CheckPermissionAction(pp));\n-        AccessController.doPrivileged(runAsPrivilegedUserAction);\n-        System.out.println(\"test PASSED\");\n-    }\n-\n-    private static class RunAsPrivilegedUserAction\n-        implements PrivilegedAction<Void> {\n-        private final PrivilegedAction<Void> action;\n-        private final Principal principal;\n-\n-        RunAsPrivilegedUserAction(Principal principal,\n-                                  PrivilegedAction<Void> action) {\n-            this.principal = principal;\n-            this.action = action;\n-        }\n-\n-        @Override public Void run() {\n-            Set<Principal> principals = new HashSet<>();\n-            Set<Object> publicCredentials = new HashSet<>();\n-            Set<Object> privateCredentials = new HashSet<>();\n-\n-            principals.add(principal);\n-            Subject subject = new Subject(true,\n-                                          principals,\n-                                          publicCredentials,\n-                                          privateCredentials);\n-\n-            Subject.doAsPrivileged(subject, action, null);\n-            return null;\n-        }\n-    }\n-\n-    private static class CheckPermissionAction\n-        implements PrivilegedAction<Void> {\n-        private final Permission permission;\n-\n-        CheckPermissionAction(Permission permission) {\n-            this.permission = permission;\n-        }\n-\n-        @Override public Void run() {\n-            AccessController.checkPermission(permission);\n-            return null;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/WildcardPrincipalName.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class GetInstance {\n-    public static void main(String[] args) {\n-        SecurityManager sm = System.getSecurityManager();\n-        try {\n-            sm.checkPermission(new NoArgPermission());\n-            sm.checkPermission(new OneArgPermission(\"one\"));\n-            sm.checkPermission(new TwoArgPermission(\"two\", \"two\"));\n-            sm.checkPermission(new TwoArgNullActionsPermission\n-                                                (\"two\",\n-                                                (String)null));\n-        } catch (Exception e) {\n-            System.out.println(\"Test Failed\");\n-            e.printStackTrace();\n-            throw new SecurityException(\"Test Failed\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/getinstance\/GetInstance.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-grant {\n-    permission NoArgPermission;\n-    permission OneArgPermission \"one\";\n-    permission TwoArgPermission \"two\", \"two\";\n-    permission TwoArgNullActionsPermission \"two\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/getinstance\/GetInstance.policy","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class NoArgPermission extends java.security.BasicPermission {\n-    public NoArgPermission() { super(\"none\"); }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/getinstance\/NoArgPermission.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class OneArgPermission extends java.security.BasicPermission {\n-    public OneArgPermission(String arg) { super(arg); }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/getinstance\/OneArgPermission.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class TwoArgNullActionsPermission extends java.security.BasicPermission {\n-    public TwoArgNullActionsPermission(String arg, String arg2) {\n-        super(arg, null);\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/getinstance\/TwoArgNullActionsPermission.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class TwoArgPermission extends java.security.BasicPermission {\n-    public TwoArgPermission(String arg, String arg2) { super(arg, arg2); }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/getinstance\/TwoArgPermission.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,136 +0,0 @@\n-#! \/bin\/sh\n-\n-#\n-# Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @author  Ram Marti\n-# @bug 4350951\n-# @summary 4350951 assumes permission constructor with 2 string params\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-   TESTSRC=\".\"\n-fi\n-\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-   TESTCLASSES=\".\"\n-fi\n-\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-   echo \"TESTJAVA not set.  Test cannot execute.\"\n-   echo \"FAILED!!!\"\n-   exit 1\n-fi\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-    COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux )\n-    PS=\":\"\n-    FS=\"\/\"\n-    ;;\n-  Darwin )\n-    PS=\":\"\n-    FS=\"\/\"\n-    ;;\n-  AIX )\n-    PS=\":\"\n-    FS=\"\/\"\n-    ;;\n-  CYGWIN* )\n-    PS=\";\"\n-    FS=\"\/\"\n-    ;;\n-  Windows* )\n-    PS=\";\"\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-if [ ! -d ${TESTCLASSES}${FS}boot ]; then\n-        mkdir -p ${TESTCLASSES}${FS}boot\n-fi\n-if [ ! -d ${TESTCLASSES}${FS}app ]; then\n-        mkdir -p ${TESTCLASSES}${FS}app\n-fi\n-\n-cd ${TESTSRC}${FS}\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d ${TESTCLASSES}${FS}boot \\\n-        ${TESTSRC}${FS}NoArgPermission.java\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d ${TESTCLASSES}${FS}boot \\\n-        ${TESTSRC}${FS}OneArgPermission.java\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d ${TESTCLASSES}${FS}boot \\\n-        ${TESTSRC}${FS}TwoArgPermission.java\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d ${TESTCLASSES}${FS}boot \\\n-        ${TESTSRC}${FS}TwoArgNullActionsPermission.java\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d ${TESTCLASSES}${FS}app \\\n-        ${TESTSRC}${FS}GetInstance.java\n-\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS}  \\\n--Xbootclasspath\/a:\"${TESTCLASSES}${FS}boot\" \\\n--classpath \"${TESTCLASSES}${FS}app\" -Djava.security.manager \\\n--Djava.security.policy=GetInstance.policy \\\n-GetInstance\n-\n-# Save error status\n-status1=$?\n-\n-# print error message\n-if [ $status1 -ne 0 ]; then\n-     echo \"Failed on first test\"\n-fi\n-\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS}  \\\n--classpath \"${TESTCLASSES}${FS}boot${PS}${TESTCLASSES}${FS}app\" \\\n--Djava.security.manager \\\n--Djava.security.policy=GetInstance.policy \\\n-GetInstance\n-\n-# Save error status\n-status2=$?\n-\n-# print error message\n-if [ $status2 -ne 0 ]; then\n-     echo \"Failed on second test\"\n-fi\n-\n-#\n-# Exit ok?\n-#\n-if [ $status1 -ne 0 ]; then\n-     exit $status1\n-fi\n-\n-if [ $status2 -ne 0 ]; then\n-     exit $status2\n-fi\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/getinstance\/getinstance.sh","additions":0,"deletions":136,"binary":false,"changes":136,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-grant {\n-    \/\/ java.base module\n-    permission java.io.SerializablePermission \"enableSubstitution\";\n-    permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n-    permission java.nio.file.LinkPermission \"hard\";\n-    permission javax.net.ssl.SSLPermission \"getSSLSessionContext\";\n-    permission javax.security.auth.AuthPermission \"doAsPrivileged\";\n-    permission javax.security.auth.PrivateCredentialPermission \"* * \\\"*\\\"\",\n-                                                               \"read\";\n-    \/\/ java.desktop module\n-    permission java.awt.AWTPermission \"createRobot\";\n-    permission javax.sound.sampled.AudioPermission \"play\";\n-    \/\/ java.logging module\n-    permission java.util.logging.LoggingPermission \"control\", \"\";\n-    \/\/ java.management module\n-    permission java.lang.management.ManagementPermission \"control\";\n-    permission javax.management.MBeanPermission \"*\", \"getAttribute\";\n-    permission javax.management.MBeanServerPermission \"createMBeanServer\";\n-    permission javax.management.MBeanTrustPermission \"register\";\n-    permission javax.management.remote.SubjectDelegationPermission \"*\";\n-    \/\/ java.security.jgss module\n-    permission javax.security.auth.kerberos.DelegationPermission \"\\\"*\\\" \\\"*\\\"\";\n-    permission javax.security.auth.kerberos.ServicePermission \"*\", \"accept\";\n-    \/\/ java.sql module\n-    permission java.sql.SQLPermission \"setLog\";\n-    \/\/ java.smartcardio module\n-    permission javax.smartcardio.CardPermission \"*\", \"*\";\n-    \/\/ jdk.attach module (@jdk.Exported Permissions)\n-    permission com.sun.tools.attach.AttachPermission \"attachVirtualMachine\";\n-    \/\/ jdk.jdi module (@jdk.Exported Permissions)\n-    permission com.sun.jdi.JDIPermission \"virtualMachineManager\";\n-    \/\/ jdk.security.jgss module (@jdk.Exported Permissions)\n-    permission com.sun.security.jgss.InquireSecContextPermission \"*\"; \n-};\n-\n-grant\n-    \/\/ java.base module\n-    principal javax.security.auth.x500.X500Principal \"CN=Duke\",\n-    \/\/ java.management module\n-    principal javax.management.remote.JMXPrincipal \"Duke\",\n-    \/\/ java.security.jgss module\n-    principal javax.security.auth.kerberos.KerberosPrincipal \"duke@openjdk.org\",\n-    \/\/ jdk.security.auth module (@jdk.Exported Principals)\n-    principal com.sun.security.auth.UserPrincipal \"Duke\",\n-    principal com.sun.security.auth.NTDomainPrincipal \"openjdk.org\",\n-    principal com.sun.security.auth.NTSid\n-        \"S-1-5-21-3623811015-3361044348-30300820-1013\",\n-    principal com.sun.security.auth.NTUserPrincipal \"Duke\",\n-    principal com.sun.security.auth.UnixNumericUserPrincipal \"0\",\n-    principal com.sun.security.auth.UnixPrincipal \"duke\" {\n-    permission java.util.PropertyPermission \"user.home\", \"read\";\n-};\n-\n-grant\n-    \/\/ java.security.jgss module\n-    principal javax.security.auth.kerberos.KerberosPrincipal \"duke@openjdk.org\"\n-{\n-    \/\/ test that ${{self}} expansion works \n-    permission javax.security.auth.kerberos.ServicePermission \"${{self}}\",\n-                                                              \"accept\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/modules.policy","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-grant principal javax.security.auth.x500.X500Principal * {\n-  permission java.util.PropertyPermission \"user.home\", \"read\";\n-};\n-\n-grant {\n-  permission javax.security.auth.AuthPermission \"doAsPrivileged\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/wildcard.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @author Gary Ellison\n- * @bug 4219343\n- * @summary Property Expansion error test\n- * @run main\/othervm\/policy=UnresolvedProperty.policy AvoidPropertyExpansionExceptions\n- *\/\n-\n-import java.util.*;\n-import java.security.*;\n-\n-public class AvoidPropertyExpansionExceptions {\n-\n-    public static void main(String[] args) throws Exception {\n-      Policy p = Policy.getPolicy();\n-      PermissionCollection pc = p.getPermissions(\n-        new CodeSource(null, (java.security.cert.Certificate[]) null));\n-      Enumeration e = pc.elements();\n-      if (!e.hasMoreElements()) {\n-        throw new Exception(\"Permission incorrectly ignored\");\n-      }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/AvoidPropertyExpansionExceptions.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2002, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @author Gary Ellison\n- * @bug 4233900\n- * @summary Catch anomalies in Policy parsing\n- * @modules java.base\/sun.security.provider\n- * @run main BogusGrants p001.policy p002.policy p003.policy p004.policy\n- *\/\n-\n-import java.io.*;\n-import java.util.Enumeration;\n-import sun.security.provider.*;\n-\n-public class BogusGrants {\n-\n-   public static void main(String args[]) throws Exception {\n-       String dir = System.getProperty(\"test.src\", \".\");\n-       for (int i=0; i < args.length; i++) {\n-           try {\n-               PolicyParser pp = new PolicyParser(true);\n-               String pfile =  new File(dir, args[i]).getPath();\n-\n-               pp.read(new FileReader(pfile));\n-               Enumeration ge = pp.grantElements();\n-               if (ge.hasMoreElements()) {\n-                   throw new Exception(\"PolicyFile \" + pfile + \" grant entry should not parse but it did\");\n-               }\n-           } catch\n-               (sun.security.provider.PolicyParser.ParsingException p) {\n-               System.out.println(\"Passed test \" + i +\n-                                  \": Bogus grant entry caught \" +\n-                                  p.getMessage());\n-           }\n-       }\n-   }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/BogusGrants.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4797850\n- * @modules java.base\/sun.security.provider\n- * @summary Security policy file does not grok hash mark in pathnames\n- *\/\n-\n-import java.io.*;\n-import java.util.*;\n-import sun.security.provider.*;\n-\n-public class EncodeURL {\n-\n-    \/\/ java.ext.dirs input and encoding\n-    private static final String extInput = \"foo bar\";\n-    private static final String extAnswer = \"foo%20bar\";\n-    private static final String policy0 =\n-        \"grant codebase \\\"${java.ext.dirs}\\\" { permission java.security.AllPermission; };\";\n-\n-    \/\/ keystore inputs and encodings\n-    private static final String prop1 = \"http:\/\/foobar\";\n-    private static final String answer1 = \"http:\/\/foobar\/foo\";\n-    private static final String policy1 =\n-        \"keystore \\\"${prop1}\/foo\\\"; grant { permission java.security.AllPermission; };\";\n-\n-    private static final String prop2 = \"foo#bar\";\n-    private static final String answer2 = \"http:\/\/foo%23bar\/foo\";\n-    private static final String policy2 =\n-        \"keystore \\\"http:\/\/${prop2}\/foo\\\"; grant { permission java.security.AllPermission; };\";\n-\n-    private static final String prop3 = \"goofy:foo#bar\";\n-    private static final String answer3 = \"http:\/\/goofy:foo%23bar\/foo\";\n-    private static final String policy3 =\n-        \"keystore \\\"http:\/\/${prop3}\/foo\\\"; grant { permission java.security.AllPermission; };\";\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ make sure 'file' URLs created from java.ext.dirs\n-        \/\/ are encoded\n-\n-        System.setProperty(\"java.ext.dirs\", extInput);\n-        PolicyParser pp = new PolicyParser(true);\n-        pp.read(new StringReader(policy0));\n-        Enumeration e = pp.grantElements();\n-        while (e.hasMoreElements()) {\n-            PolicyParser.GrantEntry ge =\n-                                (PolicyParser.GrantEntry)e.nextElement();\n-            if (ge.codeBase.indexOf(\"foo\") >= 0 &&\n-                ge.codeBase.indexOf(extAnswer) < 0) {\n-                throw new SecurityException(\"test 0 failed: \" +\n-                        \"expected \" + extAnswer +\n-                        \" inside \" + ge.codeBase);\n-            }\n-        }\n-\n-        \/\/ make sure keystore URL is properly encoded (or not)\n-\n-        System.setProperty(\"prop1\", prop1);\n-        pp = new PolicyParser(true);\n-        pp.read(new StringReader(policy1));\n-        if (!pp.getKeyStoreUrl().equals(answer1)) {\n-            throw new SecurityException(\"test 1 failed: \" +\n-                \"expected \" + answer1 +\n-                \", and got \" + pp.getKeyStoreUrl());\n-        }\n-\n-        System.setProperty(\"prop2\", prop2);\n-        pp = new PolicyParser(true);\n-        pp.read(new StringReader(policy2));\n-        if (!pp.getKeyStoreUrl().equals(answer2)) {\n-            throw new SecurityException(\"test 2 failed: \" +\n-                \"expected \" + answer2 +\n-                \", and got \" + pp.getKeyStoreUrl());\n-        }\n-\n-        System.setProperty(\"prop3\", prop3);\n-        pp = new PolicyParser(true);\n-        pp.read(new StringReader(policy3));\n-        if (!pp.getKeyStoreUrl().equals(answer3)) {\n-            throw new SecurityException(\"test 3 failed: \" +\n-                \"expected \" + answer3 +\n-                \", and got \" + pp.getKeyStoreUrl());\n-        }\n-\n-        System.out.println(\"test passed\");\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/EncodeURL.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4308389\n- * @summary Misleading (non-useful) error message while parsing\n- *              security policy file if property expansion fails\n- *              for an undefined property\n- *\n- * This test needs to be verified by reading the debug output.\n- * It should output that the PolicyParser could not expand\n- * the system property, \"undefined\".\n- *\n- * @run main\/othervm\/policy=ExpansionErrorMisleading.policy -Djava.security.debug=parser ExpansionErrorMisleading\n- *\/\n-\n-public class ExpansionErrorMisleading {\n-\n-    public static void main(String[] args) {\n-        \/\/ trigger a security check\n-        try {\n-            java.io.FileInputStream fis = new java.io.FileInputStream\n-                (\"\/tmp\/hello\");\n-        } catch (java.io.FileNotFoundException fnfe) {\n-            \/\/ bad\n-            System.out.println(\"Test Failed\");\n-            throw new SecurityException(fnfe.getMessage());\n-        } catch (SecurityException se) {\n-            \/\/ good\n-            System.out.println(\"Test Succeeded\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExpansionErrorMisleading.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"\/${undefined}\/hello\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExpansionErrorMisleading.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4215035\n- * @summary standard extensions path is hard-coded in default\n- *      system policy file\n- * @run main ExtDirs\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4215035\n- * @summary standard extensions path is hard-coded in default\n- *      system policy file\n- * @run main\/othervm\/policy=ExtDirs.policy ExtDirs\n- *\/\n-\n-public class ExtDirs {\n-    public static void main(String args[]) throws Exception {\n-        try {\n-            ExtDirsA a = new ExtDirsA();\n-            a.go();\n-            System.out.println(\"Test Succeeded\");\n-        } catch (SecurityException se) {\n-            se.printStackTrace();\n-            System.out.println(\"Test Failed\");\n-            throw se;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirs.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant codebase \"file:${test.classes}\" {\n-    permission java.util.PropertyPermission \"user.name\", \"read\";\n-    permission java.util.PropertyPermission \"user.home\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirs.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant codebase \"file:${test.classes}\" {\n-    permission java.util.PropertyPermission \"user.name\", \"read\";\n-    permission java.util.PropertyPermission \"user.home\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirs1.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant codebase \"file:${test.classes}\/*\" {\n-    permission java.util.PropertyPermission \"user.name\", \"read\";\n-    permission java.util.PropertyPermission \"user.home\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirs2.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant codebase \"file:${test.classes}\/-\" {\n-    permission java.util.PropertyPermission \"user.name\", \"read\";\n-    permission java.util.PropertyPermission \"user.home\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirs3.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class ExtDirsA {\n-    public void go() {\n-        java.security.AccessController.doPrivileged\n-                (new java.security.PrivilegedAction() {\n-                public Object run() {\n-                    System.out.println\n-                        (\"user.name = \" + System.getProperty(\"user.name\"));\n-                    ExtDirsB b = new ExtDirsB();\n-                    b.go();\n-                    return null;\n-                }\n-        });\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirsA.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirsA\/a.jar","binary":true,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class ExtDirsB {\n-    public void go() {\n-        System.out.println(\"user.home = \" + System.getProperty(\"user.home\"));\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirsB.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirsB\/b.jar","binary":true,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4993819\n- * @summary standard extensions path is hard-coded in default\n- *      system policy file\n- * @run main\/othervm\/policy=ExtDirsChange.policy ExtDirsChange\n- *\/\n-\n-import java.security.*;\n-\n-public class ExtDirsChange {\n-    public static void main(String args[]) throws Exception {\n-        System.out.println(\"java.policy.dirs: \" +\n-                System.getProperty(\"java.policy.dirs\"));\n-\n-        \/\/ Uses default security policy and java.policy.dirs\n-        try {\n-            ExtDirsA a = new ExtDirsA();\n-            a.go();\n-            throw new Exception(\"Test Failed (Setup problem)\");\n-        } catch (SecurityException se) {\n-            System.out.println(\"Setup OK\");\n-        }\n-\n-        \/\/ Change java.policy.dirs and refresh policy\n-        AccessController.doPrivileged(new PrivilegedAction() {\n-            public Object run() {\n-                \/\/ Change java.policy.dirs\n-                System.setProperty(\"java.policy.dirs\",\n-                        System.getProperty(\"test.classes\"));\n-                System.out.println(\"java.policy.dirs: \" +\n-                        System.getProperty(\"java.policy.dirs\"));\n-                return null;\n-            }\n-        });\n-\n-        \/\/ Continue to use default security policy\n-        try {\n-            ExtDirsA a = new ExtDirsA();\n-            a.go();\n-            throw new Exception(\"Test Failed (Setup before refresh problem)\");\n-        } catch (SecurityException se) {\n-            System.out.println(\"Setup before refresh OK\");\n-        }\n-\n-        \/\/ Refresh policy using updated java.policy.dirs\n-        AccessController.doPrivileged(new PrivilegedAction() {\n-            public Object run() {\n-                Policy.getPolicy().refresh();\n-                return null;\n-            }\n-        });\n-\n-        \/\/ Test should now succeed\n-        try {\n-            ExtDirsA a = new ExtDirsA();\n-            a.go();\n-            System.out.println(\"Test Succeeded\");\n-        } catch (SecurityException se) {\n-            se.printStackTrace();\n-            System.out.println(\"Test Failed\");\n-            throw se;\n-        }\n-\n-        \/\/ Test with blank java.ext.dir\n-        \/\/ Change java.policy.dirs and refresh policy\n-        AccessController.doPrivileged(new PrivilegedAction() {\n-            public Object run() {\n-                \/\/ Change java.policy.dirs\n-                System.setProperty(\"java.policy.dirs\", \" \");\n-                System.out.println(\"java.policy.dirs: \" +\n-                        System.getProperty(\"java.policy.dirs\"));\n-                Policy.getPolicy().refresh();\n-                return null;\n-            }\n-        });\n-\n-        \/\/ Test with blank java.ext.dir\n-        try {\n-            ExtDirsA a = new ExtDirsA();\n-            a.go();\n-            throw new Exception(\"Blank Test Failed\");\n-        } catch (SecurityException se) {\n-            System.out.println(\"Blank Test OK\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirsChange.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,17 +0,0 @@\n-grant {\n-    permission java.util.PropertyPermission \"test.classes\", \"read\";\n-    permission java.security.SecurityPermission \"getPolicy\";\n-    permission java.security.SecurityPermission \"setPolicy\";\n-};\n-\n-grant codebase \"file:${test.classes}\/*\" {\n-    permission java.util.PropertyPermission \"java.policy.dirs\", \"read, write\";\n-    permission java.util.PropertyPermission \"user.name\", \"write\";\n-    permission java.util.PropertyPermission \"user.home\", \"write\";\n-};\n-\n-grant codebase \"file:${java.policy.dirs}\" {\n-    permission java.util.PropertyPermission \"user.name\", \"read\";\n-    permission java.util.PropertyPermission \"user.home\", \"read\";\n-};\n-\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirsChange.policy","additions":0,"deletions":17,"binary":false,"changes":17,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4993819\n- * @summary standard extensions path is hard-coded in default\n- *      system policy file\n- * @run main ExtDirsDefaultPolicy\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4993819\n- * @summary standard extensions path is hard-coded in default\n- *      system policy file\n- *\n- * @run main\/othervm\/policy=ExtDirs1.policy ExtDirsDefaultPolicy\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4993819\n- * @summary standard extensions path is hard-coded in default\n- *      system policy file\n- *\n- * @run main\/othervm\/policy=ExtDirs2.policy ExtDirsDefaultPolicy\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4993819\n- * @summary standard extensions path is hard-coded in default\n- *      system policy file\n- *\n- * @run main\/othervm\/policy=ExtDirs3.policy ExtDirsDefaultPolicy\n- *\/\n-\n-public class ExtDirsDefaultPolicy {\n-    public static void main(String args[]) throws Exception {\n-        try {\n-            ExtDirsA a = new ExtDirsA();\n-            a.go();\n-            System.out.println(\"Test Succeeded\");\n-        } catch (SecurityException se) {\n-            se.printStackTrace();\n-            System.out.println(\"Test Failed\");\n-            throw se;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/ExtDirsDefaultPolicy.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,126 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4373996\n- * @summary parser incorrectly ignores a principal if the principal name\n- *      expands to nothing.\n- * @run main\/manual PrincipalExpansionError\n- *\/\n-\n-\/*\n- * This test is a bit complicated.\n- * 1) PrincipalExpansionError.java\n- *         the test itself.  this test creates a Subject with a\n- *         UnixPrincipal(\"TestPrincipal\") and calls doAs\n- *         with a PrincipalExpansionErrorAction.\n- * 2) PrincipalExpansionErrorAction\n- *         this action tries to read the file, \/testfile\n- * 3) to run the test:\n- *         a) jtreg -verbose:all -testjdk:<your_jdk>\/build\/sparc\n- *                 PrincipalExpansionError.java\n- *         b) PrincipalExpansionError is compiled and put into\n- *                 the \"test.classes\" directory\n- *         c) PrincipalExpansionErrorAction is compiled and put into\n- *                 the \"test.classes\"\/apackage directory\n- *                 (since it belongs to the 'apackage' package\n- *         d) the PrincipalExpansionError shell script moves\n- *                 test.classes\/apackage to test.src\/apackage.\n- *                 this guarantees that the test will run\n- *                 with codebase test.classes, and the action\n- *                 will run with codebase test.src.\n- *         e) the test is executed.  permissions to read the file,\n- *                 \/testfile, were granted to the PrincipalExpansionError.\n- *                 the policy entry for PrincipalExpansionErrorAction\n- *                 running as UnixPrincipal(\"TestPrincipal\")\n- *                 was also granted the file permission,\n- *                 but it has a bogus second UnixPrincipal with\n- *                 a name that can't be property-expanded.\n- *\n- *                 the old behavior of the code would ignore the\n- *                 bogus entry and incorrectly grants the file permission\n- *                 to UnixPrincipal(\"TestPrincipal\").\n- *                 the new behavior correctly ignores the entire\n- *                 policy entry.\n- *                 Please note that the jtreg needs to be granted\n- *                 allpermissions for this test to succeed. If the codebase\n- *                 for jtreg changes, the PrincipalExpansionError.policy\n- *                 needs to be updated.\n- *         f) original @ tags:\n- *                 compile PrincipalExpansionErrorAction.java\n- *                 run shell PrincipalExpansionError.sh\n- *                 run main\/othervm\/policy=PrincipalExpansionError.policy\n- *                         -Djava.security.debug=access,domain,failure\n- *                         PrincipalExpansionError\n- *\/\n-\n-import javax.security.auth.*;\n-import com.sun.security.auth.*;\n-import java.util.Set;\n-import apackage.PrincipalExpansionErrorAction;\n-\n-public class PrincipalExpansionError {\n-\n-    public static void main(String[] args) {\n-\n-        Subject s = new Subject();\n-\n-        try {\n-            Set principals = s.getPrincipals();\n-            principals.add(new UnixPrincipal(\"TestPrincipal\"));\n-        } catch (SecurityException se) {\n-            \/\/ test incorrectly set up\n-            throw new SecurityException\n-                (\"PrincipalExpansionError test incorrectly set up:\" + se);\n-        }\n-\n-        try {\n-            Subject.doAs(s, new PrincipalExpansionErrorAction());\n-\n-            \/\/ test failed\n-            System.out.println(\"PrincipalExpansionError test failed\");\n-            throw new SecurityException(\"PrincipalExpansionError test failed\");\n-\n-        } catch (java.security.PrivilegedActionException pae) {\n-            Exception e = pae.getException();\n-\n-            if (e instanceof java.io.FileNotFoundException) {\n-                System.out.println\n-                    (\"PrincipalExpansionError test failed (file not found)\");\n-                java.io.FileNotFoundException fnfe =\n-                        (java.io.FileNotFoundException)e;\n-                throw new SecurityException(\"PrincipalExpansionError \" +\n-                        \"test failed (file not found)\");\n-            } else {\n-                \/\/ i don't know???\n-                System.out.println(\"what happened?\");\n-                pae.printStackTrace();\n-            }\n-        } catch (SecurityException se) {\n-                \/\/ good!  test succeeded\n-                System.out.println(\"PrincipalExpansionError test succeeded\");\n-                se.printStackTrace();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/PrincipalExpansionError.java","additions":0,"deletions":126,"binary":false,"changes":126,"status":"deleted"},{"patch":"@@ -1,21 +0,0 @@\n-\/\/ granted to jtreg\n-grant codebase \"file:\/net\/koori.sfbay\/-\" {\n-    permission java.security.AllPermission;\n-};\n-\n-\/\/ granted to the test class\n-grant codebase \"file:${test.classes}\/\" {\n-    permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n-    permission javax.security.auth.AuthPermission \"doAs\";\n-    permission java.io.FilePermission \"\/testFile\", \"read\";\n-};\n-\n-\/\/ granted to the test action\n-\/\/ -- the test moves the compiled action into the src directory\n-\/\/ -- via the shell script.  this way we can ensure different\n-\/\/ -- codebases for the test and the action\n-grant codebase \"file:${test.src}\/\",\n-      principal com.sun.security.auth.UnixPrincipal \"TestPrincipal\",\n-      principal com.sun.security.auth.UnixPrincipal \"${bad.property}\" {\n-    permission java.io.FilePermission \"\/testFile\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/PrincipalExpansionError.policy","additions":0,"deletions":21,"binary":false,"changes":21,"status":"deleted"},{"patch":"@@ -1,25 +0,0 @@\n-#\n-# Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-\/bin\/rm -rf ${TESTSRC}\/apackage\n-\/bin\/mv ${TESTCLASSES}\/apackage ${TESTSRC}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/PrincipalExpansionError.sh","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package apackage;\n-\n-public class PrincipalExpansionErrorAction implements\n-        java.security.PrivilegedExceptionAction {\n-\n-    public Object run() throws Exception {\n-\n-        \/\/ try something that will trigger a security check\n-        java.io.FileInputStream fis = new java.io.FileInputStream (\"\/testFile\");\n-        return fis;\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/PrincipalExpansionErrorAction.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,247 +0,0 @@\n-\/*\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4919147\n- * @summary Support for token-based KeyStores\n- * @modules java.base\/sun.security.provider\n- *\/\n-\n-import java.io.*;\n-import java.util.*;\n-import sun.security.provider.*;\n-\n-public class TokenStore {\n-\n-    private static final String POLICY_NO_STORE =\n-        \"grant { permission java.security.AllPermission; };\";\n-\n-    private static final String POLICY_URL =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\";\"         +\n-        \"grant signedby \\\"POLICY_URL\\\" {\"                               +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static final String POLICY_URL_T =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\", \\\"JKS\\\";\"+\n-        \"grant signedby \\\"POLICY_URL_T\\\" {\"                             +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static final String POLICY_URL_T_P =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\",\"         +\n-        \"               \\\"JKS\\\", \\\"SUN\\\";\"                              +\n-        \"grant signedby \\\"POLICY_URL_T_P\\\" {\"                           +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static final String POLICY_URL_PWD =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\";\"         +\n-        \"keystorePasswordURL \\\"file:${test.src}${\/}TokenStore.pwd\\\";\"   +\n-        \"grant signedby \\\"POLICY_URL\\\" {\"                               +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static final String POLICY_URL_T_P_PWD =\n-        \"keystore \\\"file:${test.src}${\/}TokenStore.keystore\\\",\"         +\n-        \"               \\\"JKS\\\", \\\"SUN\\\";\"                              +\n-        \"keystorePasswordURL \\\"file:${test.src}${\/}TokenStore.pwd\\\";\"   +\n-        \"grant signedby \\\"POLICY_URL_T_P\\\" {\"                           +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    private static final String POLICY_PASS_NO_STORE =\n-        \"keystorePasswordURL \\\"file:${test.src}${\/}TokenStore.pwd\\\";\"   +\n-        \"grant signedby \\\"POLICY_URL_T_P\\\" {\"                           +\n-        \"    permission java.security.AllPermission;\"                   +\n-        \"};\"                                                            ;\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ test no key store in policy\n-\n-        PolicyParser p = new PolicyParser();\n-        p.read(new StringReader(POLICY_NO_STORE));\n-        doNoStore(p);\n-        StringWriter sw = new StringWriter();\n-        p.write(sw);\n-        PolicyParser newP = new PolicyParser();\n-        newP.read(new StringReader(sw.toString()));\n-        doNoStore(p);\n-\n-        \/\/ test policy keystore + URL\n-\n-        p = new PolicyParser();\n-        p.read(new StringReader(POLICY_URL));\n-        doURL(p, true);\n-        sw = new StringWriter();\n-        p.write(sw);\n-        newP = new PolicyParser();\n-        newP.read(new StringReader(sw.toString()));\n-        doURL(p, true);\n-\n-        \/\/ test policy keystore + URL + type\n-\n-        p = new PolicyParser();\n-        p.read(new StringReader(POLICY_URL_T));\n-        doURL_T(p, true);\n-        sw = new StringWriter();\n-        p.write(sw);\n-        newP = new PolicyParser();\n-        newP.read(new StringReader(sw.toString()));\n-        doURL_T(p, true);\n-\n-        \/\/ test policy keystore + URL + type + provider\n-\n-        p = new PolicyParser();\n-        p.read(new StringReader(POLICY_URL_T_P));\n-        doURL_T_P(p, true);\n-        sw = new StringWriter();\n-        p.write(sw);\n-        newP = new PolicyParser();\n-        newP.read(new StringReader(sw.toString()));\n-        doURL_T_P(p, true);\n-\n-        \/\/ test policy keystore + URL + password\n-\n-        p = new PolicyParser();\n-        p.read(new StringReader(POLICY_URL_PWD));\n-        doURL(p, false);\n-        doPwd(p);\n-        sw = new StringWriter();\n-        p.write(sw);\n-        newP = new PolicyParser();\n-        newP.read(new StringReader(sw.toString()));\n-        doURL(p, false);\n-        doPwd(p);\n-\n-        \/\/ test policy keystore + URL + type + provider + password\n-\n-        p = new PolicyParser();\n-        p.read(new StringReader(POLICY_URL_T_P_PWD));\n-        doURL_T_P(p, false);\n-        doPwd(p);\n-        sw = new StringWriter();\n-        p.write(sw);\n-        newP = new PolicyParser();\n-        newP.read(new StringReader(sw.toString()));\n-        doURL_T_P(p, false);\n-        doPwd(p);\n-\n-        \/\/ test policy password with no keystore\n-        p = new PolicyParser();\n-        try {\n-            p.read(new StringReader(POLICY_PASS_NO_STORE));\n-            throw new SecurityException(\"expected parsing exception\");\n-        } catch (PolicyParser.ParsingException pe) {\n-            \/\/ good\n-        }\n-\n-    }\n-\n-    private static void checkPerm(PolicyParser p) throws Exception {\n-        Enumeration e = p.grantElements();\n-        boolean foundOne = false;\n-        while (e.hasMoreElements()) {\n-            PolicyParser.GrantEntry ge = (PolicyParser.GrantEntry)\n-                                        e.nextElement();\n-            if (ge.permissionEntries == null) {\n-                throw new SecurityException(\"expected non-null perms\");\n-            } else {\n-                foundOne = true;\n-            }\n-        }\n-        if (!foundOne) {\n-            throw new SecurityException(\"expected non-null grant entries\");\n-        }\n-    }\n-\n-    private static void doNoStore(PolicyParser p) throws Exception {\n-        if (p.getKeyStoreUrl() != null ||\n-            p.getKeyStoreType() != null ||\n-            p.getKeyStoreProvider() != null ||\n-            p.getStorePassURL() != null) {\n-            throw new SecurityException(\"expected null keystore\");\n-        }\n-        checkPerm(p);\n-    }\n-\n-    private static void doURL(PolicyParser p, boolean checkPwd)\n-                throws  Exception {\n-        if (p.getKeyStoreUrl() == null ||\n-            !(p.getKeyStoreUrl().endsWith(\"TokenStore.keystore\")) ||\n-            p.getKeyStoreType() != null ||\n-            p.getKeyStoreProvider() != null) {\n-            throw new SecurityException(\"invalid keystore values\");\n-        }\n-        if (checkPwd) {\n-            if (p.getStorePassURL() != null) {\n-                throw new SecurityException(\"invalid keystore values\");\n-            }\n-        }\n-        checkPerm(p);\n-    }\n-\n-    private static void doURL_T(PolicyParser p, boolean checkPwd)\n-                throws Exception {\n-        if (p.getKeyStoreUrl() == null ||\n-            !(p.getKeyStoreUrl().endsWith(\"TokenStore.keystore\")) ||\n-            p.getKeyStoreType() == null ||\n-            !(p.getKeyStoreType().equals(\"JKS\")) ||\n-            p.getKeyStoreProvider() != null) {\n-            throw new SecurityException(\"invalid keystore values\");\n-        }\n-        if (checkPwd) {\n-            if (p.getStorePassURL() != null) {\n-                throw new SecurityException(\"invalid keystore values\");\n-            }\n-        }\n-        checkPerm(p);\n-    }\n-\n-    private static void doURL_T_P(PolicyParser p, boolean checkPwd)\n-                throws Exception {\n-        if (p.getKeyStoreUrl() == null ||\n-            !(p.getKeyStoreUrl().endsWith(\"TokenStore.keystore\")) ||\n-            p.getKeyStoreType() == null ||\n-            !(p.getKeyStoreType().equals(\"JKS\")) ||\n-            p.getKeyStoreProvider() == null ||\n-            !(p.getKeyStoreProvider().equals(\"SUN\"))) {\n-            throw new SecurityException(\"invalid keystore values\");\n-        }\n-        if (checkPwd) {\n-            if (p.getStorePassURL() != null) {\n-                throw new SecurityException(\"invalid keystore values\");\n-            }\n-        }\n-        checkPerm(p);\n-    }\n-\n-    private static void doPwd(PolicyParser p) throws Exception {\n-        if (p.getStorePassURL() == null ||\n-            !(p.getStorePassURL().endsWith(\"TokenStore.pwd\"))) {\n-            throw new SecurityException(\"invalid password values\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/TokenStore.java","additions":0,"deletions":247,"binary":false,"changes":247,"status":"deleted"},{"patch":"@@ -1,10 +0,0 @@\n-\/\/ @test\n-\/\/ @author Gary Ellison\n-\/\/ @bug 4219343\n-\/\/ @summary Property Expansion error test\n-\/\/\n-\n-grant {\n-    permission java.security.SecurityPermission \"getPolicy\";\n-    permission java.io.FilePermission \"${bogus.propertyName}\/-\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/UnresolvedProperty.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant Codebase \"http:\/\/java.sun.com\/dupcb.jar\" Codebase \"http:\/\/java.sun.com\/dupcb.jar\" {\n-      permission java.security.SecurityPermission \"bogusPolicyParser\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/p001.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant Codebase \"http:\/\/java.sun.com\/dupsb.jar\" SignedBy \"gfe\" SignedBy \"garysign\" {\n-      permission java.security.SecurityPermission \"bogusPolicyParser\";\n-};\n-\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/p002.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant Codebase \"http:\/\/java.sun.com\/bogussb0.jar\" SignedBy \"gfe, ,garysign\" {\n-      permission java.security.SecurityPermission \"bogusPolicyParser\";\n-};\n-\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/p003.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant Codebase \"http:\/\/java.sun.com\/bogussb1.jar\" SignedBy \"gfe,,garysign\" {\n-      permission java.security.SecurityPermission \"bogusPolicyParser\";\n-};\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyParser\/p004.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -44,1 +44,0 @@\n-        \/\/ No SecurityManager installed.\n","filename":"test\/jdk\/sun\/security\/provider\/SecureRandom\/StrongSecureRandom.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm\/manual\/java.security.policy==test.policy TestChannel\n","filename":"test\/jdk\/sun\/security\/smartcardio\/TestChannel.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm\/manual\/java.security.policy==test.policy TestControl\n","filename":"test\/jdk\/sun\/security\/smartcardio\/TestControl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm\/manual\/java.security.policy==test.policy TestDefault\n","filename":"test\/jdk\/sun\/security\/smartcardio\/TestDefault.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm\/manual\/java.security.policy==test.policy TestDirect\n","filename":"test\/jdk\/sun\/security\/smartcardio\/TestDirect.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant codebase \"file:${test.classes}\/*\" {\n-    permission javax.smartcardio.CardPermission \"*\", \"connect,getBasicChannel,reset,transmitControl\";\n-};\n","filename":"test\/jdk\/sun\/security\/smartcardio\/test.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,192 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * This class may have some race conditions that I haven't\n- * accounted for.  I've tried to put in sufficient sleeps and triggers\n- * that should cause everything to run correctly.\n- *\n- * This was hackish, but to make sure that there were no problems\n- * with permissions.\n- *\n- * Create a client, server, and interested party thread.  The\n- * client and interested threads should receive the same\n- * session notification.\n- *\/\n-package com;\n-\n-import java.net.*;\n-import java.io.*;\n-import javax.net.ssl.*;\n-import java.security.cert.*;\n-import java.security.*;\n-\n-public class NotifyHandshakeTest implements HandshakeCompletedListener {\n-\n-    static String pathToStores = \"..\/..\/..\/..\/javax\/net\/ssl\/etc\";\n-    static String keyStoreFile = \"keystore\";\n-    static String trustStoreFile = \"truststore\";\n-    static String passwd = \"passphrase\";\n-    volatile static int serverPort = 0;\n-\n-    public boolean set;\n-    SSLSession sess;\n-\n-    static public int triggerState = 0;\n-\n-    static public void trigger() {\n-        triggerState++;\n-    }\n-\n-    public void handshakeCompleted(HandshakeCompletedEvent event) {\n-        set = true;\n-        sess = event.getSession();\n-        trigger();\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        String keyFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-            \"\/\" + keyStoreFile;\n-        String trustFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-            \"\/\" + trustStoreFile;\n-\n-        System.setProperty(\"javax.net.ssl.keyStore\", keyFilename);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", passwd);\n-        System.setProperty(\"javax.net.ssl.trustStore\", trustFilename);\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", passwd);\n-\n-        SSLSocketFactory sslsf =\n-                (SSLSocketFactory)SSLSocketFactory.getDefault();\n-        SSLServerSocketFactory sslssf =\n-                (SSLServerSocketFactory)SSLServerSocketFactory.getDefault();\n-\n-        \/*\n-         * Start off the Server, give time to initialize.\n-         *\/\n-        SSLServerSocket sslss =\n-            (SSLServerSocket)sslssf.createServerSocket(serverPort);\n-        sslss.setSoTimeout(30000);  \/\/ 30 seconds\n-        serverPort = sslss.getLocalPort();\n-        Server server = new Server(sslss);\n-        server.start();\n-\n-        System.out.println(\"Server started...\");\n-\n-        \/*\n-         * Create the socket.\n-         *\/\n-        SSLSocket socket =\n-            (SSLSocket)sslsf.createSocket(\"localhost\", serverPort);\n-\n-        \/*\n-         * Create a second thread also interested in this socket\n-         *\/\n-        edu.NotifyHandshakeTestHeyYou heyYou =\n-            new edu.NotifyHandshakeTestHeyYou(socket);\n-        heyYou.start();\n-        while (triggerState < 1) {\n-            Thread.sleep(500);\n-        }\n-        System.out.println(\"HeyYou thread ready...\");\n-\n-        NotifyHandshakeTest listener = new NotifyHandshakeTest();\n-        socket.addHandshakeCompletedListener(listener);\n-\n-        System.out.println(\"Client starting handshake...\");\n-        socket.startHandshake();\n-        System.out.println(\"Client done handshaking...\");\n-\n-        InputStream is = socket.getInputStream();\n-        if ((byte)is.read() != (byte)0x77) {\n-            throw new Exception(\"problem reading byte\");\n-        }\n-\n-        \/*\n-         * Wait for HeyYou and the client to get a slice, so\n-         * they can receive their SSLSessions.\n-         *\/\n-        while (triggerState < 3) {\n-            Thread.sleep(500);\n-        }\n-\n-        \/*\n-         * Grab the variables before reaping the thread.\n-         *\/\n-        boolean heyYouSet = heyYou.set;\n-        AccessControlContext heyYouACC = heyYou.acc;\n-        SSLSession  heyYouSess = heyYou.ssls;\n-\n-        heyYou.interrupt();\n-        heyYou.join();\n-        server.join();\n-\n-        socket.close();\n-\n-        if (!heyYouSet) {\n-            throw new Exception(\"HeyYou's wasn't set\");\n-        }\n-        if (!listener.set) {\n-            throw new Exception(\"This' wasn't set\");\n-        }\n-\n-        if (heyYouACC.equals(AccessController.getContext())) {\n-            throw new Exception(\"Access Control Contexts were the same\");\n-        }\n-\n-        if (!heyYouSess.equals(listener.sess)) {\n-            throw new Exception(\"SSLSessions were not equal\");\n-        }\n-\n-        System.out.println(\"Everything Passed\");\n-    }\n-\n-    static class Server extends Thread {\n-\n-        SSLServerSocket ss;\n-\n-        Server(SSLServerSocket ss) {\n-            this.ss = ss;\n-        }\n-\n-        public void run() {\n-            try {\n-                System.out.println(\"Server accepting socket...\");\n-                SSLSocket s = (SSLSocket) ss.accept();\n-                System.out.println(\n-                    \"Server accepted socket...starting handshake\");\n-                s.startHandshake();\n-                System.out.println(\"Server done handshaking\");\n-                OutputStream os = s.getOutputStream();\n-                os.write(0x77);\n-                os.flush();\n-                System.out.println(\"Server returning\");\n-            } catch (Exception e) {\n-                System.out.println(\"Server died\");\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/NotifyHandshakeTest.java","additions":0,"deletions":192,"binary":false,"changes":192,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/\/\n-\/\/ Copyright (c) 2002, 2007, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\/\/\n-\/\/ This code is free software; you can redistribute it and\/or modify it\n-\/\/ under the terms of the GNU General Public License version 2 only, as\n-\/\/ published by the Free Software Foundation.\n-\/\/\n-\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n-\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-\/\/ version 2 for more details (a copy is included in the LICENSE file that\n-\/\/ accompanied this code).\n-\/\/\n-\/\/ You should have received a copy of the GNU General Public License version\n-\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n-\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\/\/\n-\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-\/\/ or visit www.oracle.com if you need additional information or have any\n-\/\/ questions.\n-\/\/\n-\n-grant codeBase \"file:com.jar\" {\n-    permission java.net.SocketPermission \"localhost\", \"accept, resolve,connect\";\n-    permission java.util.PropertyPermission\n-\t\"test.src\", \"read\";\n-    permission java.util.PropertyPermission\n-\t\"javax.net.ssl.keyStore\", \"write\";\n-    permission java.util.PropertyPermission\n-\t\"javax.net.ssl.keyStorePassword\", \"write\";\n-    permission java.util.PropertyPermission\n-\t\"javax.net.ssl.trustStore\", \"write\";\n-    permission java.util.PropertyPermission\n-\t\"javax.net.ssl.trustStorePassword\", \"write\";\n-};\n-\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/NotifyHandshakeTest.policy","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-#\n-# Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4673442\n-# @summary remove doPrivileged when creatingting the NotifyHandshakeThread\n-# @run shell NotifyHandshakeTest.sh\n-# @author Brad Wetmore\n-#\n-# To run independently:  sh NotifyHandshakeTest.sh\n-\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-        echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-        exit 1\n-fi\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-        COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-        TESTSRC=\".\"\n-fi\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-    Linux | Darwin | AIX )\n-        FILESEP=\"\/\"\n-        PATHSEP=\":\"\n-        ;;\n-\n-    CYGWIN* )\n-        FILESEP=\"\/\"\n-        PATHSEP=\";\"\n-        ;;\n-\n-    Windows* )\n-        FILESEP=\"\\\\\"\n-        PATHSEP=\";\"\n-        ;;\n-esac\n-\n-set -ex\n-\n-#\n-# Compile the tests, package into their respective jars\n-#\n-${COMPILEJAVA}${FILESEP}bin${FILESEP}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . \\\n-    ${TESTSRC}${FILESEP}NotifyHandshakeTest.java \\\n-    ${TESTSRC}${FILESEP}NotifyHandshakeTestHeyYou.java\n-${COMPILEJAVA}${FILESEP}bin${FILESEP}jar ${TESTTOOLVMOPTS} -cvf com.jar \\\n-    com${FILESEP}NotifyHandshakeTest*.class\n-${COMPILEJAVA}${FILESEP}bin${FILESEP}jar ${TESTTOOLVMOPTS} -cvf edu.jar \\\n-    edu${FILESEP}NotifyHandshakeTestHeyYou.class\n-\n-#\n-# Don't want the original class files to be used, because\n-# we want the jar files with the associated contexts to\n-# be used.\n-#\n-rm -rf com edu\n-\n-#\n-# This is the only thing we really care about as far as\n-# test status goes.\n-#\n-${TESTJAVA}${FILESEP}bin${FILESEP}java ${TESTVMOPTS} \\\n-    -Dtest.src=${TESTSRC} \\\n-    -classpath \"com.jar${PATHSEP}edu.jar\" \\\n-    -Djava.security.manager \\\n-    -Djava.security.policy=${TESTSRC}${FILESEP}NotifyHandshakeTest.policy \\\n-    com.NotifyHandshakeTest\n-retval=$?\n-\n-rm com.jar edu.jar\n-\n-exit $retval\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/NotifyHandshakeTest.sh","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package edu;\n-\n-import javax.net.ssl.*;\n-import java.security.*;\n-\n-public class NotifyHandshakeTestHeyYou extends Thread\n-        implements HandshakeCompletedListener {\n-\n-    public AccessControlContext acc;\n-    public SSLSession ssls;\n-\n-    SSLSocket socket;\n-\n-    public boolean set;\n-\n-    public NotifyHandshakeTestHeyYou(SSLSocket socket) {\n-        this.socket = socket;\n-        socket.addHandshakeCompletedListener(this);\n-        acc = AccessController.getContext();\n-        com.NotifyHandshakeTest.trigger();\n-    }\n-\n-    public void handshakeCompleted(HandshakeCompletedEvent event) {\n-        set = true;\n-        ssls = event.getSession();\n-        com.NotifyHandshakeTest.trigger();\n-    }\n-\n-\n-    public void run() {\n-        try {\n-            System.out.println(\"Going to sleep for 1000 seconds...\");\n-            Thread.sleep(100000);\n-        } catch (InterruptedException e) {\n-            \/\/ swallow\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/NotifyHandshakeTestHeyYou.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,1 @@\n-        \/\/ test Permission granted\n+        \/\/ test version.Main output\n@@ -119,3 +119,0 @@\n-                \"-Djava.security.manager\",\n-                \"-Djava.security.policy=\" +\n-                TEST_SRC + File.separator + POLICY_FILE,\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/multiRelease\/MVJarSigningTest.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,10 +0,0 @@\n-keystore \"file:keystore.jks\";\n-keystorePasswordURL \"file:keypass\";\n-\n-grant signedBy \"JavaTest\" {\n-    permission java.lang.RuntimePermission \"setIO\";\n-};\n-\n-grant signedBy \"other\" {\n-    permission java.lang.RuntimePermission \"setFactory\";\n-};\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/multiRelease\/SignedJar.policy","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,11 +0,0 @@\n-grant { \n-    \/\/ \"standard\" properies that can be read by anyone\n-    \/\/ Needed to get access to package private constructor and\n-    \/\/ to be able to call it.\n-\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.security.x509\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.security.util\";\n-    permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n-    permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n-\n-};\n","filename":"test\/jdk\/sun\/security\/util\/DerInputBuffer\/Allow.policy","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -1,277 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8164705 8168410\n- * @summary check compatibility after FilePermission change\n- * @library \/test\/lib\n- * @run main CompatImpact prepare\n- * @run main CompatImpact builtin\n- * @run main\/othervm -Djdk.security.filePermCompat=true CompatImpact mine\n- * @run main\/fail CompatImpact mine\n- * @run main CompatImpact dopriv\n- *\/\n-\n-import jdk.test.lib.process.Proc;\n-\n-import java.io.File;\n-import java.io.FilePermission;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.security.AccessController;\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Policy;\n-import java.security.PrivilegedAction;\n-import java.security.ProtectionDomain;\n-import java.security.SecurityPermission;\n-\n-public class CompatImpact {\n-\n-    public static void main(String[] args) throws Exception {\n-        switch (args[0]) {\n-            \/\/ copy class files to future classpath\n-            case \"prepare\":\n-                \/\/ cp in .\n-                String cp = System.getProperty(\"test.classes\");\n-                Files.copy(Paths.get(cp, \"CompatImpact.class\"),\n-                        Paths.get(\"CompatImpact.class\"));\n-                Files.copy(Paths.get(cp, \"CompatImpact$MP.class\"),\n-                        Paths.get(\"CompatImpact$MP.class\"));\n-                Files.write(Paths.get(\"f\"), new byte[10]);\n-                \/\/ cp in .\/sub\n-                Files.createDirectory(Paths.get(\"sub\"));\n-                Files.copy(Paths.get(cp, \"CompatImpact.class\"),\n-                        Paths.get(\"sub\", \"CompatImpact.class\"));\n-                Files.copy(Paths.get(cp, \"CompatImpact$MP.class\"),\n-                        Paths.get(\"sub\", \"CompatImpact$MP.class\"));\n-                Files.write(Paths.get(\"sub\", \"f\"), new byte[10]);\n-                \/\/ cp in .\/inner\n-                Files.createDirectory(Paths.get(\"inner\"));\n-                Files.copy(Paths.get(cp, \"CompatImpact$DoPrivInner.class\"),\n-                        Paths.get(\"inner\", \"CompatImpact$DoPrivInner.class\"));\n-                break;\n-            \/\/ default policy always covered, user-defined depends on\n-            \/\/ system property jdk.security.filePermCompact.\n-            case \"builtin\":\n-            case \"mine\":\n-                cp = System.getProperty(\"test.classes\");\n-                Proc p;\n-                String failed = \"\";\n-                String testcase = \"\";\n-                String cwd = System.getProperty(\"user.dir\");\n-\n-                \/\/ Granting a FilePermission on an absolute path\n-                testcase = \"PonA\";\n-                p = p(args[0], cwd + \"\/f\")\n-                        .args(\"f\", cwd + \"\/f\")\n-                        .debug(testcase)\n-                        .start();\n-                if (p.waitFor() != 0) {\n-                    Files.copy(Paths.get(testcase + \".stderr\"), System.out);\n-                    failed += testcase + \" \";\n-                }\n-\n-                \/\/ Granting a FilePermission on a relative path\n-                testcase = \"PonR\";\n-                p = p(args[0], \"f\")\n-                        .args(\"f\", cwd + \"\/f\")\n-                        .debug(testcase)\n-                        .start();\n-                if (p.waitFor() != 0) {\n-                    Files.copy(Paths.get(testcase + \".stderr\"), System.out);\n-                    failed += testcase + \" \";\n-                }\n-\n-                \/\/ Reading file on classpath, not cwd\n-                testcase = \"cp\";\n-                String cprel = Paths.get(cwd).relativize(Paths.get(cp))\n-                        .normalize().toString();\n-                p = p(args[0], \"x\")\n-                        .args(cp + \"\/f\", cprel + \"\/f\")\n-                        .debug(testcase)\n-                        .start();\n-                if (p.waitFor() != 0) {\n-                    Files.copy(Paths.get(testcase + \".stderr\"), System.out);\n-                    failed += testcase + \" \";\n-                }\n-\n-                \/\/ Reading file on classpath, cwd\n-                testcase = \"cpHere\";\n-                p = p(args[0], \"x\")\n-                        .args(cwd + \"\/f\", \"f\", \"RES\")\n-                        .cp(\".\")   \/\/ Must! cancel the old CLASSPATH.\n-                        .debug(testcase)\n-                        .start();\n-                if (p.waitFor() != 0) {\n-                    Files.copy(Paths.get(testcase + \".stderr\"), System.out);\n-                    failed += testcase + \" \";\n-                }\n-\n-                \/\/ Reading file on classpath, cwd\n-                testcase = \"cpSub\";\n-                p = p(args[0], \"x\")\n-                        .args(cwd + \"\/sub\/f\", \"sub\/f\", \"RES\")\n-                        .cp(\"sub\")   \/\/ Must! There's CLASSPATH.\n-                        .debug(testcase)\n-                        .start();\n-                if (p.waitFor() != 0) {\n-                    Files.copy(Paths.get(testcase + \".stderr\"), System.out);\n-                    failed += testcase + \" \";\n-                }\n-\n-                if (!failed.isEmpty()) {\n-                    throw new Exception(failed + \"failed\");\n-                }\n-                break;\n-            \/\/ test <policy_type> <grant> <read...>\n-            case \"test\":\n-                if (args[1].equals(\"mine\")) {\n-                    Policy.setPolicy(new MP(args[2]));\n-                }\n-                Exception e = null;\n-                for (int i = 3; i < args.length; i++) {\n-                    try {\n-                        System.out.println(args[i]);\n-                        if (args[i].equals(\"RES\")) {\n-                            CompatImpact.class.getResourceAsStream(\"f\")\n-                                    .close();\n-                        } else {\n-                            new File(args[i]).exists();\n-                        }\n-                    } catch (Exception e2) {\n-                        e = e2;\n-                        e2.printStackTrace(System.out);\n-                    }\n-                }\n-                if (e != null) {\n-                    System.err.println(\"====================\");\n-                    throw e;\n-                }\n-                break;\n-            \/\/ doPrivWithPerm test launcher\n-            case \"dopriv\":\n-                cwd = System.getProperty(\"user.dir\");\n-                \/\/ caller (CompatImpact doprivouter, no permission) in sub,\n-                \/\/ executor (DoPrivInner, AllPermission) in inner.\n-                p = Proc.create(\"CompatImpact\")\n-                        .args(\"doprivouter\")\n-                        .prop(\"java.security.manager\", \"\")\n-                        .grant(new File(\"inner\"))\n-                        .perm(new AllPermission())\n-                        .cp(\"sub\", \"inner\")\n-                        .debug(\"doPriv\")\n-                        .args(cwd)\n-                        .start();\n-                if (p.waitFor() != 0) {\n-                    throw new Exception(\"dopriv test fails\");\n-                }\n-                break;\n-            \/\/ doprivouter <cwd>\n-            case \"doprivouter\":\n-                DoPrivInner.main(args);\n-                break;\n-            default:\n-                throw new Exception(\"unknown \" + args[0]);\n-        }\n-    }\n-\n-    \/\/ Call by CompatImpact doprivouter, with AllPermission\n-    public static class DoPrivInner {\n-        public static void main(String[] args) throws Exception {\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>)\n-                            () -> new File(\"x\").exists(),\n-                    null,\n-                    new FilePermission(args[1] + \"\/x\", \"read\"));\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>)\n-                            () -> new File(args[1] + \"\/x\").exists(),\n-                    null,\n-                    new FilePermission(\"x\", \"read\"));\n-            try {\n-                AccessController.doPrivileged((PrivilegedAction<Boolean>)\n-                                () -> new File(\"x\").exists(),\n-                        null,\n-                        new FilePermission(\"y\", \"read\"));\n-                throw new Exception(\"Should not read\");\n-            } catch (SecurityException se) {\n-                \/\/ Expected\n-            }\n-        }\n-    }\n-\n-    \/\/ Return a Proc object for different policy types\n-    private static Proc p(String type, String f) throws Exception {\n-        Proc p = Proc.create(\"CompatImpact\")\n-                .prop(\"java.security.manager\", \"\")\n-                .inheritProp(\"jdk.security.filePermCompat\");\n-        p.args(\"test\", type);\n-        switch (type) {\n-            case \"builtin\":\n-                \/\/ For builtin policy, reading access to f can be\n-                \/\/ granted as a permission\n-                p.perm(new FilePermission(f, \"read\"));\n-                p.args(\"-\");\n-                break;\n-            case \"mine\":\n-                \/\/ For my policy, f is passed into test and new MP(f)\n-                \/\/ will be set as new policy\n-                p.perm(new SecurityPermission(\"setPolicy\"));\n-                p.perm(new SecurityPermission(\"getPolicy\"));\n-                p.args(f);\n-                break;\n-            default:\n-                throw new Exception(\"unknown \" + type);\n-        }\n-        return p;\n-    }\n-\n-    \/\/ My own Policy impl, with only one granted permission, also not smart\n-    \/\/ enough to know whether ProtectionDomain grants any permission\n-    static class MP extends Policy {\n-        static final Policy DEFAULT_POLICY = Policy.getPolicy();\n-        final PermissionCollection pc;\n-\n-        MP(String f) {\n-            FilePermission p = new FilePermission(f, \"read\");\n-            pc = p.newPermissionCollection();\n-            pc.add(p);\n-        }\n-        @Override\n-        public PermissionCollection getPermissions(CodeSource codesource) {\n-            return pc;\n-        }\n-\n-        @Override\n-        public PermissionCollection getPermissions(ProtectionDomain domain) {\n-            return pc;\n-        }\n-\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            return pc.implies(permission) || DEFAULT_POLICY.implies(domain, permission);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/util\/FilePermCompat\/CompatImpact.java","additions":0,"deletions":277,"binary":false,"changes":277,"status":"deleted"},{"patch":"@@ -1,125 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8164705 8209901\n- * @library \/test\/lib\n- * @summary check jdk.filepermission.canonicalize\n- *\/\n-\n-import jdk.test.lib.process.Proc;\n-import java.io.File;\n-import java.io.FilePermission;\n-import java.lang.*;\n-import java.nio.file.Path;\n-\n-public class Flag {\n-    public static void main(String[] args) throws Exception {\n-\n-        if (args.length == 0) {\n-            String policy = Path.of(\n-                    System.getProperty(\"test.src\"), \"flag.policy\").toString();\n-\n-            \/\/ effectively true\n-            Proc.create(\"Flag\")\n-                    .prop(\"java.security.manager\", \"\")\n-                    .prop(\"java.security.policy\", policy)\n-                    .prop(\"jdk.io.permissionsUseCanonicalPath\", \"true\")\n-                    .args(\"run\", \"true\", \"true\")\n-                    .start()\n-                    .waitFor(0);\n-            Proc.create(\"Flag\")\n-                    .prop(\"java.security.manager\", \"\")\n-                    .prop(\"java.security.policy\", policy)\n-                    .secprop(\"jdk.io.permissionsUseCanonicalPath\", \"true\")\n-                    .args(\"run\", \"true\", \"true\")\n-                    .start()\n-                    .waitFor(0);\n-            Proc.create(\"Flag\")\n-                    .prop(\"java.security.manager\", \"\")\n-                    .prop(\"java.security.policy\", policy)\n-                    .secprop(\"jdk.io.permissionsUseCanonicalPath\", \"false\")\n-                    .prop(\"jdk.io.permissionsUseCanonicalPath\", \"true\")\n-                    .args(\"run\", \"true\", \"true\")\n-                    .start()\n-                    .waitFor(0);\n-\n-            \/\/ effectively false\n-            Proc.create(\"Flag\")\n-                    .prop(\"java.security.manager\", \"\")\n-                    .prop(\"java.security.policy\", policy)\n-                    .prop(\"jdk.io.permissionsUseCanonicalPath\", \"false\")\n-                    .args(\"run\", \"false\", \"true\")\n-                    .start()\n-                    .waitFor(0);\n-            Proc.create(\"Flag\")\n-                    .prop(\"java.security.manager\", \"\")\n-                    .prop(\"java.security.policy\", policy)\n-                    .secprop(\"jdk.io.permissionsUseCanonicalPath\", \"false\")\n-                    .args(\"run\", \"false\", \"true\")\n-                    .start()\n-                    .waitFor(0);\n-            Proc.create(\"Flag\")\n-                    .prop(\"java.security.manager\", \"\")\n-                    .prop(\"java.security.policy\", policy)\n-                    .secprop(\"jdk.io.permissionsUseCanonicalPath\", \"true\")\n-                    .prop(\"jdk.io.permissionsUseCanonicalPath\", \"false\")\n-                    .args(\"run\", \"false\", \"true\")\n-                    .start()\n-                    .waitFor(0);\n-            Proc.create(\"Flag\")\n-                    .prop(\"java.security.manager\", \"\")\n-                    .prop(\"java.security.policy\", policy)\n-                    .args(\"run\", \"false\", \"true\")\n-                    .start()\n-                    .waitFor(0);\n-        } else {\n-            run(args);\n-        }\n-    }\n-\n-    static void run(String[] args) throws Exception {\n-\n-        boolean test1;\n-        boolean test2;\n-\n-        String here = System.getProperty(\"user.dir\");\n-        File abs = new File(here, \"x\");\n-        FilePermission fp1 = new FilePermission(\"x\", \"read\");\n-        FilePermission fp2 = new FilePermission(abs.toString(), \"read\");\n-        test1 = fp1.equals(fp2);\n-\n-        try {\n-            System.getSecurityManager().checkPermission(fp2);\n-            test2 = true;\n-        } catch (SecurityException se) {\n-            test2 = false;\n-        }\n-\n-        if (test1 != Boolean.parseBoolean(args[1]) ||\n-                test2 != Boolean.parseBoolean(args[2])) {\n-            throw new Exception(\"Test failed: \" + test1 + \" \" + test2);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/util\/FilePermCompat\/Flag.java","additions":0,"deletions":125,"binary":false,"changes":125,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant {\n-    permission java.io.FilePermission \"x\", \"read\";\n-    permission java.util.PropertyPermission \"user.dir\", \"read\";\n-};\n","filename":"test\/jdk\/sun\/security\/util\/FilePermCompat\/flag.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm\/policy=Format.policy -Djava.security.auth.login.config=file:${test.src}\/Format.config Format\n+ * @run main\/othervm -Djava.security.auth.login.config=file:${test.src}\/Format.config Format\n@@ -120,7 +120,1 @@\n-        try {\n-            Subject.getSubject(null);\n-            throw new SecurityException(\"test 9 failed\");\n-        } catch (NullPointerException npe) {\n-            \/\/ good\n-            System.out.println(\"Test 9: \" + npe.getMessage());\n-        }\n+        \/\/ test 9 was on Subject.getSubject(null);\n","filename":"test\/jdk\/sun\/security\/util\/Resources\/Format.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    permission java.security.AllPermission;\n-};\n","filename":"test\/jdk\/sun\/security\/util\/Resources\/Format.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,2 +133,0 @@\n-                    new Pair(\"java.base\/share\/classes\/sun\/security\/provider\/PolicyFile.java\",\n-                            List.of(MGR_GETSTRING, LOC_GETNONLOC, LOC_GETNONLOC_POLICY)),\n@@ -173,5 +171,0 @@\n-                                        \/\/ Special case in PolicyFile.java:\n-                                        if (arg.startsWith(\"POLICY + \\\"\")) {\n-                                            arg = \"java.security.policy\"\n-                                                    + arg.substring(10);\n-                                        }\n","filename":"test\/jdk\/sun\/security\/util\/Resources\/Usages.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm\/java.security.policy=error.policy -Djava.security.manager -Djava.system.class.loader=CustomClassLoader BootMessages\n+ * @run main\/othervm -Djava.system.class.loader=CustomClassLoader BootMessages\n","filename":"test\/jdk\/sun\/security\/util\/Resources\/customSysClassLoader\/BootMessages.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-grant { \n-    permission java.lang.RuntimePermission \"createClassLoader\";\n-    permission java.lang.RuntimePermission \"\";\n-};\n-\n","filename":"test\/jdk\/sun\/security\/util\/Resources\/customSysClassLoader\/error.policy","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 8194251\n- * @summary Ensure that messages can be formatted before resources are loaded\n- * @library \/test\/lib\n- * @build jdk.test.lib.process.*\n- * @run main EarlyResources\n- *\/\n-\n-import java.io.*;\n-import java.nio.file.*;\n-import java.util.*;\n-import jdk.test.lib.process.*;\n-\n-public class EarlyResources {\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        String testSrc = System.getProperty(\"test.src\");\n-        String fs = File.separator;\n-        String policyPath = testSrc + fs + \"malformed.policy\";\n-\n-        OutputAnalyzer out = ProcessTools.executeTestJava(\n-            \"-Djava.security.manager\",\n-            \"-Djava.security.policy=\" + policyPath,\n-            \"EarlyResources$TestMain\");\n-\n-        out.shouldHaveExitValue(0);\n-    }\n-\n-    public static class TestMain {\n-        public static void main(String[] args) {\n-            System.out.println(new Date().toString());\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/util\/Resources\/early\/EarlyResources.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-grant {\n-    xyz;\n-}\n","filename":"test\/jdk\/sun\/security\/util\/Resources\/early\/malformed.policy","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm\/policy=Allow.policy AVAEqualsHashCode\n","filename":"test\/jdk\/sun\/security\/x509\/AVA\/AVAEqualsHashCode.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,11 +0,0 @@\n-grant { \n-    \/\/ \"standard\" properies that can be read by anyone\n-    \/\/ Needed to get access to package private constructor and\n-    \/\/ to be able to call it.\n-\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.security.x509\";\n-    permission java.lang.RuntimePermission \"accessClassInPackage.sun.security.util\";\n-    permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n-    permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n-\n-};\n","filename":"test\/jdk\/sun\/security\/x509\/AVA\/Allow.policy","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8152817 8174269\n- * @summary Make sure that resource bundles in the jdk.localedata module are\n- *          loaded under a security manager.\n- * @modules jdk.localedata\n- * @run main\/othervm -Djava.security.manager=allow\n- *      -Djava.security.debug=access,failure,codebase=jrt:\/jdk.localedata Bug8152817\n- *\/\n-\n-import java.text.DateFormatSymbols;\n-import java.time.chrono.HijrahChronology;\n-import java.time.format.TextStyle;\n-import java.util.Calendar;\n-import java.util.Locale;\n-\n-public class Bug8152817 {\n-    public static void main(String[] args) throws Exception {\n-        System.setSecurityManager(new SecurityManager());\n-\n-        DateFormatSymbols syms = DateFormatSymbols.getInstance(Locale.GERMAN);\n-        String s = syms.getMonths()[Calendar.OCTOBER];\n-        if (!\"Oktober\".equals(s)) {\n-            throw new RuntimeException(\"Test failed: \" + s);\n-        }\n-\n-        s = HijrahChronology.INSTANCE.getDisplayName(TextStyle.FULL, Locale.GERMAN);\n-        if (!s.contains(\"Hidschri-Kalender (Umm al-Qura)\")) {\n-            throw new RuntimeException(\"Test failed: \" + s);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/util\/locale\/provider\/Bug8152817.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import java.security.AccessControlException;\n@@ -32,2 +31,1 @@\n- * @build JLinkToolProviderTest\n- * @run main\/othervm\/java.security.policy=toolprovider.policy JLinkToolProviderTest\n+ * @run main JLinkToolProviderTest\n@@ -44,9 +42,1 @@\n-\n-        try {\n-            JLINK_TOOL.run(pw, pw, options);\n-            throw new AssertionError(\"SecurityException should have been thrown!\");\n-        } catch (AccessControlException ace) {\n-            if (! ace.getPermission().getClass().getName().contains(\"JlinkPermission\")) {\n-                throw new AssertionError(\"expected JlinkPermission check failure\");\n-            }\n-        }\n+        JLINK_TOOL.run(pw, pw, options);\n","filename":"test\/jdk\/tools\/jlink\/JLinkToolProviderTest.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Test JlinkPermission\n- * @author Jean-Francois Denise\n- * @modules jdk.jlink\/jdk.tools.jlink.internal\n- * @run main\/othervm -Djava.security.manager=allow SecurityTest\n- *\/\n-\n-import java.security.AccessControlException;\n-import jdk.tools.jlink.internal.Jlink;\n-\n-public class SecurityTest {\n-\n-    public static void main(String[] args) throws Exception {\n-        new Jlink();\n-        System.setSecurityManager(new SecurityManager());\n-        try {\n-            new Jlink();\n-            throw new Exception(\"Call should have failed\");\n-        } catch (AccessControlException ex) {\n-            \/\/ expected exception\n-        }\n-    }\n-}\n","filename":"test\/jdk\/tools\/jlink\/SecurityTest.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-grant {\n-};\n","filename":"test\/jdk\/tools\/jlink\/toolprovider.policy","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,62 +88,0 @@\n-    @Test\n-    void testFailToInitializeMainClass() throws Exception {\n-        if (!isEnglishLocale()) {\n-            return;\n-        }\n-\n-        File cwd = new File(\".\");\n-        File srcDir = new File(cwd, \"src\");\n-        if (srcDir.exists()) {\n-            recursiveDelete(srcDir);\n-        }\n-        srcDir.mkdirs();\n-\n-        \/* we want to generate class C that will resolve additional class\n-         *\/\n-        ArrayList<String> scratchpad = new ArrayList<>();\n-        scratchpad.add(\"public class C {\");\n-        scratchpad.add(\"    public static void main(String... args) {\");\n-        scratchpad.add(\"        try {\");\n-        scratchpad.add(\"            System.out.println(\\\"loading of restricted class\\\");\");\n-        scratchpad.add(\"        } catch (Exception e) {\");\n-        scratchpad.add(\"            java.security.Provider p = new com.sun.crypto.provider.SunJCE();\");\n-        scratchpad.add(\"            p.toString();\");\n-        scratchpad.add(\"        }\");\n-        scratchpad.add(\"    }\");\n-        scratchpad.add(\"}\");\n-        createFile(new File(srcDir, \"C.java\"), scratchpad);\n-\n-\n-        \/\/ Compile and execute C should succeed\n-        TestResult trCompilation = doExec(javacCmd,\n-            \"--add-exports\", \"java.base\/com.sun.crypto.provider=ALL-UNNAMED\",\n-            \"-d\", \"out\",\n-            new File(srcDir, \"C.java\").toString());\n-        if (!trCompilation.isOK()) {\n-            System.err.println(trCompilation);\n-            throw new RuntimeException(\"Error: compiling\");\n-        }\n-\n-        TestResult trExecution = doExec(javaCmd,\n-            \"--add-exports\", \"java.base\/com.sun.crypto.provider=ALL-UNNAMED\",\n-            \"-cp\", \"out\", \"C\");\n-        if (!trExecution.isOK()) {\n-            System.err.println(trExecution);\n-            throw new RuntimeException(\"Error: executing\");\n-        }\n-\n-        \/\/ Execute C with security manager will fail with AccessControlException\n-        trExecution = doExec(javaCmd,\n-            \"-Djava.security.manager\",\n-            \"--add-exports\", \"java.base\/com.sun.crypto.provider=ALL-UNNAMED\",\n-            \"-cp\", \"out\", \"C\");\n-\n-        \/\/ then this error message should be generated\n-        trExecution.contains(\"Error: Unable to initialize main class C\");\n-        trExecution.contains(\"Caused by: java.security.AccessControlException: \" +\n-            \"access denied (\\\"java.lang.RuntimePermission\\\"\" +\n-            \" \\\"accessClassInPackage.com.sun.crypto.provider\\\")\");\n-        if (!trExecution.testStatus)\n-            System.err.println(trExecution);\n-    }\n-\n","filename":"test\/jdk\/tools\/launcher\/MainClassCantBeLoadedTest.java","additions":1,"deletions":63,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6856415 8154212 8154470\n+ * @bug 8154212 8154470\n@@ -68,39 +68,0 @@\n-    \/**\n-     * 6856415: Checks to ensure that proper exceptions are thrown by java\n-     *\/\n-    static void test6856415() throws IOException {\n-\n-        final String mainClass = \"Foo6856415\";\n-\n-        List<String> scratch = new ArrayList<>();\n-        scratch.add(\"public class Foo6856415 {\");\n-        scratch.add(\"public static void main(String... args) {\");\n-        scratch.add(\"java.security.Provider p = new sun.security.pkcs11.SunPKCS11();\");\n-        scratch.add(\"java.security.Security.insertProviderAt(p, 1);\");\n-        scratch.add(\"}\");\n-        scratch.add(\"}\");\n-        createFile(new File(mainClass + \".java\"), scratch);\n-\n-        compile(mainClass + \".java\",\n-                \"--add-modules=jdk.crypto.cryptoki\",\n-                \"--add-exports=jdk.crypto.cryptoki\/sun.security.pkcs11=ALL-UNNAMED\");\n-\n-        File testJar = new File(\"Foo.jar\");\n-        testJar.delete();\n-        String jarArgs[] = {\n-            (debug) ? \"cvfe\" : \"cfe\",\n-            testJar.getAbsolutePath(),\n-            mainClass,\n-            mainClass + \".class\"\n-        };\n-        createJar(jarArgs);\n-\n-        TestResult tr = doExec(javaCmd,\n-                \"-Djava.security.manager\", \"-jar\", testJar.getName(), \"foo.bak\");\n-        if (!tr.contains(\"java.security.AccessControlException:\" +\n-                \" access denied (\\\"java.lang.RuntimePermission\\\"\" +\n-                \" \\\"accessClassInPackage.sun.security.pkcs11\\\")\")) {\n-            System.out.println(tr);\n-        }\n-    }\n-\n@@ -126,1 +87,0 @@\n-        test6856415();\n","filename":"test\/jdk\/tools\/launcher\/MiscTests.java","additions":2,"deletions":42,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-     * Run jdk.test2.Main without security manager.\n+     * Launch java using --module and expect the launched main to succeed.\n@@ -73,1 +73,1 @@\n-    public void test() throws Exception {\n+    public void testNoFailure() throws Exception {\n@@ -84,2 +84,3 @@\n-     * Run jdk.test2.Main with security manager such that main class will\n-     * fail to initialize.\n+     * Launch java using --module but pass a main class name that doesn't\n+     * belong to the module being launched. Expect the launch to fail\n+     * with an expected exception.\n@@ -90,1 +91,2 @@\n-        String mid = TEST_MODULE + \"\/\" + MAIN_CLASS;\n+        String wrongMainClass = MAIN_CLASS + \"IntentionallyWrong\";\n+        String mid = TEST_MODULE + \"\/\" + wrongMainClass;\n@@ -92,1 +94,1 @@\n-        ProcessTools.executeTestJava(\"-Djava.security.manager\", \"--module-path\", dir, \"--module\", mid)\n+        ProcessTools.executeTestJava(\"--module-path\", dir, \"--module\", mid)\n@@ -95,2 +97,2 @@\n-                    .shouldContain(\"Error: Unable to load main class \" + MAIN_CLASS + \" in module \" + TEST_MODULE)\n-                    .shouldContain(\"Caused by: java.security.AccessControlException\")\n+                    .shouldContain(\"Error: Could not find or load main class \" + wrongMainClass\n+                            + \" in module \" + TEST_MODULE)\n","filename":"test\/jdk\/tools\/launcher\/modules\/basic\/LauncherErrors.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,1 @@\n-        try {\n-            System.out.println(\"Hello world\");\n-        } catch (Exception e) {\n-            \/\/ verifier loads SunJCE class\n-            java.security.Provider p = new com.sun.crypto.provider.SunJCE();\n-            System.out.println(p.toString());\n-        }\n+        System.out.println(\"Hello world\");\n","filename":"test\/jdk\/tools\/launcher\/modules\/basic\/src\/test2\/jdk\/test2\/Main.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @run main\/othervm -Djava.security.manager=allow RunTest\n+ * @library \/test\/lib\n+ * @run main\/othervm RunTest\n@@ -39,1 +40,0 @@\n-import java.security.Permission;\n@@ -52,11 +52,2 @@\n-public class RunTest {\n-    static class SimpleSecurityManager extends SecurityManager {\n-        boolean allowExit = false;\n-\n-        @Override\n-        public void checkExit(int status) {\n-            if (!allowExit)\n-                throw new SecurityException(\"System.exit(\" + status + \")\");\n-        }\n-        @Override\n-        public void checkPermission(Permission perm) { }\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -64,1 +55,1 @@\n-    }\n+public class RunTest {\n@@ -67,13 +58,1 @@\n-        \/\/ if no security manager already installed, install one to\n-        \/\/ prevent System.exit\n-        SimpleSecurityManager secmgr = null;\n-        if (System.getSecurityManager() == null) {\n-            System.setSecurityManager(secmgr = new SimpleSecurityManager() { });\n-        }\n-\n-        try {\n-            new RunTest().run();\n-        } finally {\n-            if (secmgr != null)\n-                secmgr.allowExit = true;\n-        }\n+        new RunTest().run();\n@@ -94,2 +73,2 @@\n-        testMain(true, \"-help\");\n-        testMain(false, \"-unknownOption\");\n+        testMain(0, \"-help\");\n+        testMain(1, \"-unknownOption\");\n@@ -98,1 +77,5 @@\n-    void testMain(boolean expectOK, String... args) {\n+    void testMain(int expectExitValue, String option) {\n+        List<String> args = List.of(\n+                \"--add-exports=jdk.javadoc\/jdk.javadoc.internal.doclint=ALL-UNNAMED\",\n+                DocLint.class.getName(),\n+                option);\n@@ -100,7 +83,7 @@\n-            DocLint.main(args);\n-            if (!expectOK)\n-                error(\"expected SecurityException (from System.exit) not thrown\");\n-        } catch (SecurityException e) {\n-            System.err.println(e);\n-            if (expectOK)\n-                error(\"unexpected SecurityException caught\");\n+            OutputAnalyzer oa = ProcessTools.executeTestJava(args);\n+            oa.reportDiagnosticSummary();\n+            if (oa.getExitValue() != expectExitValue) {\n+                error(\"unexpected exit value: \" + oa.getExitValue());\n+            }\n+        } catch (Exception e) {\n+            error(\"unexpected Exception caught: \" + e);\n","filename":"test\/langtools\/tools\/doclint\/tool\/RunTest.java","additions":20,"deletions":37,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Objects;\n-import javax.tools.ToolProvider;\n-\n-\/**\n- * @test\n- * @bug 8154190\n- * @summary Test javax.tools.ToolProvider running with security manager\n- * @modules java.compiler\n- *          jdk.compiler\n- * @run main\/othervm -Djava.security.manager=allow ToolProviderTest\n- *\/\n-\n-\/\/ run in other vm to ensure the initialization code path is exercised.\n-public class ToolProviderTest {\n-    public static void main(String... args) {\n-        \/\/ The following code allows the test to be skipped when run on\n-        \/\/ an exploded image.\n-        \/\/ See https:\/\/bugs.openjdk.org\/browse\/JDK-8155858\n-        Path javaHome = Paths.get(System.getProperty(\"java.home\"));\n-        Path image = javaHome.resolve(\"lib\").resolve(\"modules\");\n-        Path modules = javaHome.resolve(\"modules\");\n-        if (!Files.exists(image) && Files.exists(modules)) {\n-            System.err.println(\"Test running on exploded image\");\n-            System.err.println(\"Test skipped!\");\n-            return;\n-        }\n-\n-        System.setSecurityManager(new SecurityManager());\n-\n-        Objects.requireNonNull(ToolProvider.getSystemDocumentationTool());\n-        Objects.requireNonNull(ToolProvider.getSystemJavaCompiler());\n-        if (ToolProvider.getSystemToolClassLoader() != null) {\n-            throw new AssertionError(\"unexpected value for getSystemToolClassLoader\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/api\/ToolProvider\/ToolProviderTest.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -243,19 +243,0 @@\n-    @Test\n-    public void testSecurityManager(Path base) throws IOException {\n-        Path sourceFile = base.resolve(\"HelloWorld.java\");\n-        tb.writeJavaFiles(base,\n-                \"class HelloWorld {\\n\" +\n-                        \"    public static void main(String... args) {\\n\" +\n-                        \"        System.out.println(\\\"Hello World!\\\");\\n\" +\n-                        \"    }\\n\" +\n-                        \"}\");\n-\n-        String log = new JavaTask(tb)\n-                .vmOptions(\"-Djava.security.manager=default\")\n-                .className(sourceFile.toString())\n-                .run(Task.Expect.FAIL)\n-                .getOutput(Task.OutputKind.STDERR);\n-        checkContains(\"stderr\", log,\n-                \"error: cannot use source-code launcher with a security manager enabled\");\n-    }\n-\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Djava.security.manager=allow T6348193\n+ * @run main\/othervm T6348193\n@@ -36,1 +36,0 @@\n-import java.security.*;\n@@ -54,2 +53,0 @@\n-        if (System.getSecurityManager() != null)\n-            throw new AssertionError(\"unexpected security manager\");\n@@ -57,4 +54,3 @@\n-        for (NoYes secMgr: EnumSet.allOf(NoYes.class))\n-            for (NoGoodBad config: EnumSet.allOf(NoGoodBad.class))\n-                for (NoYes proc: EnumSet.allOf(NoYes.class))\n-                    test(secMgr, config, proc);\n+        for (NoGoodBad config: EnumSet.allOf(NoGoodBad.class))\n+            for (NoYes proc: EnumSet.allOf(NoYes.class))\n+                test(config, proc);\n@@ -65,1 +61,1 @@\n-    public static void test(NoYes secMgr, NoGoodBad config, NoYes proc) throws IOException {\n+    public static void test(NoGoodBad config, NoYes proc) throws IOException {\n@@ -67,4 +63,1 @@\n-            System.err.println(\"secMgr:\" + secMgr + \" config:\" + config + \" proc:\" + proc);\n-\n-        if (secMgr == NoYes.YES && System.getSecurityManager() == null)\n-            System.setSecurityManager(new NoLoaderSecurityManager());\n+            System.err.println(\"config:\" + config + \" proc:\" + proc);\n@@ -98,10 +91,3 @@\n-                if (secMgr == NoYes.YES) {\n-                    if (dl.last == null)\n-                        throw new AssertionError(\"Security manager installed, and processors present, \"\n-                                                 + \" but no diagnostic received\");\n-                }\n-                else {\n-                    if (!processed.exists())\n-                        throw new AssertionError(\"No security manager installed, and processors present, \"\n-                                                 + \" but no processing occurred\");\n-                }\n+                if (!processed.exists())\n+                    throw new AssertionError(\"Processors present, \"\n+                                             + \" but no processing occurred\");\n@@ -172,17 +158,0 @@\n-\n-    static class NoLoaderSecurityManager extends SecurityManager\n-    {\n-        public void checkCreateClassLoader() {\n-            throw new SecurityException(\"Not today, thanks you!\");\n-        }\n-\n-        public void checkPropertyAccess(String key) { \/*OK*\/ }\n-\n-        public void checkDelete(String file) { \/*OK*\/ }\n-        public void checkPermission(Permission perm) { \/*OK*\/ }\n-        public void checkRead(FileDescriptor fd) { \/*OK*\/ }\n-        public void checkRead(String file) { \/*OK*\/ }\n-        public void checkRead(String file, Object context) { \/*OK*\/ }\n-        public void checkWrite(String file) { \/*OK*\/ }\n-\n-    }\n","filename":"test\/langtools\/tools\/javac\/processing\/6348193\/T6348193.java","additions":10,"deletions":41,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,3 +37,0 @@\n-import java.nio.file.Paths;\n-import java.security.Permission;\n-import java.security.Principal;\n@@ -60,2 +57,0 @@\n- *        .grant(file)          \/\/ grant codes in this codebase\n- *        .perm(perm)           \/\/ with the permission\n@@ -64,1 +59,1 @@\n- * create\/start must be called, args\/env\/prop\/perm can be called zero or\n+ * create\/start must be called, args\/env\/prop can be called zero or\n@@ -136,5 +131,0 @@\n-    \/\/ policy file\n-    final private StringBuilder perms = new StringBuilder();\n-    \/\/ temporary saving the grant line in a policy file\n-    final private StringBuilder grant = new StringBuilder();\n-\n@@ -218,34 +208,0 @@\n-    \/\/ Adds a permission to policy. Can be called multiple times.\n-    \/\/ All perm() calls after a series of grant() calls are grouped into\n-    \/\/ a single grant block. perm() calls before any grant() call are grouped\n-    \/\/ into a grant block with no restriction.\n-    \/\/ Please note that in order to make permissions effective, also call\n-    \/\/ prop(\"java.security.manager\", \"\").\n-    public Proc perm(Permission p) {\n-        if (grant.length() != 0) {      \/\/ Right after grant(s)\n-            if (perms.length() != 0) {  \/\/ Not first block\n-                perms.append(\"};\\n\");\n-            }\n-            perms.append(\"grant \").append(grant).append(\" {\\n\");\n-            grant.setLength(0);\n-        } else {\n-            if (perms.length() == 0) {  \/\/ First block w\/o restriction\n-                perms.append(\"grant {\\n\");\n-            }\n-        }\n-        if (p.getActions().isEmpty()) {\n-            String s = String.format(\"%s \\\"%s\\\"\",\n-                    p.getClass().getCanonicalName(),\n-                    p.getName()\n-                            .replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\\\\\"\"));\n-            perms.append(\"    permission \").append(s).append(\";\\n\");\n-        } else {\n-            String s = String.format(\"%s \\\"%s\\\", \\\"%s\\\"\",\n-                    p.getClass().getCanonicalName(),\n-                    p.getName()\n-                            .replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\\\\\"\"),\n-                    p.getActions());\n-            perms.append(\"    permission \").append(s).append(\";\\n\");\n-        }\n-        return this;\n-    }\n@@ -253,20 +209,0 @@\n-    \/\/ Adds a grant option to policy. If called in a row, a single grant block\n-    \/\/ with all options will be created. If there are perm() call(s) between\n-    \/\/ grant() calls, they belong to different grant blocks\n-\n-    \/\/ grant on a principal\n-    public Proc grant(Principal p) {\n-        grant.append(\"principal \").append(p.getClass().getName())\n-                .append(\" \\\"\").append(p.getName()).append(\"\\\", \");\n-        return this;\n-    }\n-    \/\/ grant on a codebase\n-    public Proc grant(File f) {\n-        grant.append(\"codebase \\\"\").append(f.toURI()).append(\"\\\", \");\n-        return this;\n-    }\n-    \/\/ arbitrary grant\n-    public Proc grant(String v) {\n-        grant.append(v).append(\", \");\n-        return this;\n-    }\n@@ -358,6 +294,0 @@\n-        if (perms.length() > 0) {\n-            Path p = Paths.get(getId(\"policy\")).toAbsolutePath();\n-            perms.append(\"};\\n\");\n-            Files.write(p, perms.toString().getBytes());\n-            cmd.add(\"-Djava.security.policy=\" + p.toString());\n-        }\n","filename":"test\/lib\/jdk\/test\/lib\/process\/Proc.java","additions":2,"deletions":72,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -58,5 +58,0 @@\n-    @SuppressWarnings(\"removal\")\n-    SecurityManager sm = System.getSecurityManager();\n-    if (sm != null) {\n-      sm.checkPermission(new WhiteBoxPermission(\"getInstance\"));\n-    }\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.lang.reflect;\n-\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.Policy;\n-import java.security.URIParameter;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-\/**\n- * Reflection benchmark\n- *\/\n-@State(Scope.Benchmark)\n-@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n-@Fork(3)\n-public class ClazzWithSecurityManager extends Clazz {\n-\n-    @SuppressWarnings(\"removal\")\n-    @Setup\n-    public void setup() throws IOException, NoSuchAlgorithmException, URISyntaxException {\n-        URI policyFile = ClazzWithSecurityManager.class.getResource(\"\/jmh-security.policy\").toURI();\n-        Policy.setPolicy(Policy.getInstance(\"JavaPolicy\", new URIParameter(policyFile)));\n-        System.setSecurityManager(new SecurityManager());\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/ClazzWithSecurityManager.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,6 +125,0 @@\n-    @Benchmark\n-    @Fork(value = 3, jvmArgs={\"-Djava.security.manager=allow\"})\n-    public void withSecurityManager()  throws ClassNotFoundException {\n-        work();\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/ProtectionDomainBench.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}