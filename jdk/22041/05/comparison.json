{"files":[{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -633,1 +631,0 @@\n-            @SuppressWarnings(\"removal\")\n@@ -636,2 +633,1 @@\n-                    : AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                        Security.getProperty(SERIAL_FILTER_FACTORY_PROPNAME));\n+                    : Security.getProperty(SERIAL_FILTER_FACTORY_PROPNAME);\n@@ -639,1 +635,0 @@\n-            @SuppressWarnings(\"removal\")\n@@ -642,2 +637,1 @@\n-                    : AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                        Security.getProperty(SERIAL_FILTER_PROPNAME));\n+                    : Security.getProperty(SERIAL_FILTER_PROPNAME);\n@@ -737,5 +731,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(ObjectStreamConstants.SERIAL_FILTER_PERMISSION);\n-            }\n@@ -834,5 +823,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(ObjectStreamConstants.SERIAL_FILTER_PERMISSION);\n-            }\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -37,5 +37,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -43,1 +38,0 @@\n-import java.util.Map;\n@@ -52,2 +46,0 @@\n-import sun.security.action.GetBooleanAction;\n-import sun.security.action.GetIntegerAction;\n@@ -281,2 +273,1 @@\n-        static final boolean SET_FILTER_AFTER_READ = GetBooleanAction\n-                .privilegedGetProperty(\"jdk.serialSetFilterAfterRead\");\n+        static final boolean SET_FILTER_AFTER_READ = Boolean.getBoolean(\"jdk.serialSetFilterAfterRead\");\n@@ -290,2 +281,1 @@\n-        private static final boolean GETFIELD_CNFE_RETURNS_NULL = GetBooleanAction\n-                .privilegedGetProperty(\"jdk.serialGetFieldCnfeReturnsNull\");\n+        private static final boolean GETFIELD_CNFE_RETURNS_NULL = Boolean.getBoolean(\"jdk.serialGetFieldCnfeReturnsNull\");\n@@ -299,2 +289,2 @@\n-        static final int PROXY_INTERFACE_LIMIT = Math.clamp(GetIntegerAction\n-                .privilegedGetProperty(\"jdk.serialProxyInterfaceLimit\", 65535), 0, 65535);\n+        static final int PROXY_INTERFACE_LIMIT =\n+                Math.clamp(Integer.getInteger(\"jdk.serialProxyInterfaceLimit\", 65535), 0, 65535);\n@@ -389,1 +379,0 @@\n-        verifySubclass();\n@@ -419,5 +408,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n-        }\n@@ -910,7 +894,0 @@\n-        if (enable) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(SUBSTITUTION_PERMISSION);\n-            }\n-        }\n@@ -1312,5 +1289,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(ObjectStreamConstants.SERIAL_FILTER_PERMISSION);\n-        }\n@@ -1574,22 +1546,0 @@\n-    \/**\n-     * Verifies that this (possibly subclass) instance can be constructed\n-     * without violating security constraints: the subclass must not override\n-     * security-sensitive non-final methods, or else the\n-     * \"enableSubclassImplementation\" SerializablePermission is checked.\n-     *\/\n-    private void verifySubclass() {\n-        Class<?> cl = getClass();\n-        if (cl == ObjectInputStream.class) {\n-            return;\n-        }\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            return;\n-        }\n-        boolean result = Caches.subclassAudits.get(cl);\n-        if (!result) {\n-            sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n-        }\n-    }\n-\n@@ -1601,1 +1551,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1603,21 +1552,9 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<Boolean>() {\n-                public Boolean run() {\n-                    for (Class<?> cl = subcl;\n-                         cl != ObjectInputStream.class;\n-                         cl = cl.getSuperclass())\n-                    {\n-                        try {\n-                            cl.getDeclaredMethod(\n-                                \"readUnshared\", (Class[]) null);\n-                            return Boolean.FALSE;\n-                        } catch (NoSuchMethodException ex) {\n-                        }\n-                        try {\n-                            cl.getDeclaredMethod(\"readFields\", (Class[]) null);\n-                            return Boolean.FALSE;\n-                        } catch (NoSuchMethodException ex) {\n-                        }\n-                    }\n-                    return Boolean.TRUE;\n-                }\n+        for (Class<?> cl = subcl;\n+             cl != ObjectInputStream.class;\n+             cl = cl.getSuperclass())\n+        {\n+            try {\n+                cl.getDeclaredMethod(\n+                    \"readUnshared\", (Class[]) null);\n+                return Boolean.FALSE;\n+            } catch (NoSuchMethodException ex) {\n@@ -1625,1 +1562,7 @@\n-        );\n+            try {\n+                cl.getDeclaredMethod(\"readFields\", (Class[]) null);\n+                return Boolean.FALSE;\n+            } catch (NoSuchMethodException ex) {\n+            }\n+        }\n+        return Boolean.TRUE;\n@@ -2705,2 +2648,0 @@\n-            @SuppressWarnings(\"removal\")\n-            final AccessControlContext acc;\n@@ -2708,3 +2649,1 @@\n-            Callback(ObjectInputValidation obj, int priority, Callback next,\n-                @SuppressWarnings(\"removal\") AccessControlContext acc)\n-            {\n+            Callback(ObjectInputValidation obj, int priority, Callback next) {\n@@ -2714,1 +2653,0 @@\n-                this.acc = acc;\n@@ -2743,2 +2681,0 @@\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext acc = AccessController.getContext();\n@@ -2746,1 +2682,1 @@\n-                prev.next = new Callback(obj, priority, cur, acc);\n+                prev.next = new Callback(obj, priority, cur);\n@@ -2748,1 +2684,1 @@\n-                list = new Callback(obj, priority, list, acc);\n+                list = new Callback(obj, priority, list);\n@@ -2759,1 +2695,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -2763,8 +2698,1 @@\n-                    AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Void>()\n-                    {\n-                        public Void run() throws InvalidObjectException {\n-                            list.obj.validateObject();\n-                            return null;\n-                        }\n-                    }, list.acc);\n+                    list.obj.validateObject();\n@@ -2773,1 +2701,1 @@\n-            } catch (PrivilegedActionException ex) {\n+            } catch (InvalidObjectException ex) {\n@@ -2775,1 +2703,1 @@\n-                throw (InvalidObjectException) ex.getException();\n+                throw ex;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":26,"deletions":98,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -227,5 +225,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean extendedDebugInfo =\n-        java.security.AccessController.doPrivileged(\n-            new sun.security.action.GetBooleanAction(\n-                \"sun.io.serialization.extendedDebugInfo\")).booleanValue();\n+    private static final boolean extendedDebugInfo = Boolean.getBoolean(\"sun.io.serialization.extendedDebugInfo\");\n@@ -250,1 +244,0 @@\n-        verifySubclass();\n@@ -272,5 +265,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n-        }\n@@ -598,7 +586,0 @@\n-        if (enable) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(SUBSTITUTION_PERMISSION);\n-            }\n-        }\n@@ -1025,22 +1006,0 @@\n-    \/**\n-     * Verifies that this (possibly subclass) instance can be constructed\n-     * without violating security constraints: the subclass must not override\n-     * security-sensitive non-final methods, or else the\n-     * \"enableSubclassImplementation\" SerializablePermission is checked.\n-     *\/\n-    private void verifySubclass() {\n-        Class<?> cl = getClass();\n-        if (cl == ObjectOutputStream.class) {\n-            return;\n-        }\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            return;\n-        }\n-        boolean result = Caches.subclassAudits.get(cl);\n-        if (!result) {\n-            sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n-        }\n-    }\n-\n@@ -1052,1 +1011,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1054,21 +1012,14 @@\n-        return AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public Boolean run() {\n-                    for (Class<?> cl = subcl;\n-                         cl != ObjectOutputStream.class;\n-                         cl = cl.getSuperclass())\n-                    {\n-                        try {\n-                            cl.getDeclaredMethod(\n-                                \"writeUnshared\", new Class<?>[] { Object.class });\n-                            return Boolean.FALSE;\n-                        } catch (NoSuchMethodException ex) {\n-                        }\n-                        try {\n-                            cl.getDeclaredMethod(\"putFields\", (Class<?>[]) null);\n-                            return Boolean.FALSE;\n-                        } catch (NoSuchMethodException ex) {\n-                        }\n-                    }\n-                    return Boolean.TRUE;\n-                }\n+        for (Class<?> cl = subcl;\n+             cl != ObjectOutputStream.class;\n+             cl = cl.getSuperclass())\n+        {\n+            try {\n+                cl.getDeclaredMethod(\n+                    \"writeUnshared\", new Class<?>[] { Object.class });\n+                return Boolean.FALSE;\n+            } catch (NoSuchMethodException ex) {\n+            }\n+            try {\n+                cl.getDeclaredMethod(\"putFields\", (Class<?>[]) null);\n+                return Boolean.FALSE;\n+            } catch (NoSuchMethodException ex) {\n@@ -1076,1 +1027,2 @@\n-        );\n+        }\n+        return Boolean.TRUE;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectOutputStream.java","additions":17,"deletions":65,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.lang.reflect.UndeclaredThrowableException;\n@@ -40,2 +39,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -44,6 +41,0 @@\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.ProtectionDomain;\n@@ -61,2 +52,0 @@\n-import jdk.internal.reflect.CallerSensitive;\n-import jdk.internal.reflect.Reflection;\n@@ -64,2 +53,0 @@\n-import jdk.internal.access.SharedSecrets;\n-import jdk.internal.access.JavaSecurityAccess;\n@@ -67,1 +54,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -101,6 +87,0 @@\n-    \/** reflection factory for obtaining serialization constructors *\/\n-    @SuppressWarnings(\"removal\")\n-    private static final ReflectionFactory reflFactory =\n-        AccessController.doPrivileged(\n-            new ReflectionFactory.GetReflectionFactoryAction());\n-\n@@ -209,2 +189,0 @@\n-    \/** protection domains that need to be checked when calling the constructor *\/\n-    private ProtectionDomain[] domains;\n@@ -283,1 +261,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -290,7 +267,1 @@\n-            suid = AccessController.doPrivileged(\n-                new PrivilegedAction<Long>() {\n-                    public Long run() {\n-                        return computeDefaultSUID(cl);\n-                    }\n-                }\n-            );\n+            suid = computeDefaultSUID(cl);\n@@ -307,2 +278,0 @@\n-    @SuppressWarnings(\"removal\")\n-    @CallerSensitive\n@@ -314,6 +283,0 @@\n-        if (System.getSecurityManager() != null) {\n-            Class<?> caller = Reflection.getCallerClass();\n-            if (ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(), cl.getClassLoader())) {\n-                ReflectUtil.checkPackageAccess(cl);\n-            }\n-        }\n@@ -372,1 +335,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -387,18 +349,12 @@\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                public Void run() {\n-                    if (isEnum) {\n-                        suid = 0L;\n-                        fields = NO_FIELDS;\n-                        return null;\n-                    }\n-                    if (cl.isArray()) {\n-                        fields = NO_FIELDS;\n-                        return null;\n-                    }\n-\n-                    suid = getDeclaredSUID(cl);\n-                    try {\n-                        fields = getSerialFields(cl);\n-                        computeFieldOffsets();\n-                    } catch (InvalidClassException e) {\n-                        serializeEx = deserializeEx =\n+            if (isEnum) {\n+                suid = 0L;\n+                fields = NO_FIELDS;\n+            } else if (cl.isArray()) {\n+                fields = NO_FIELDS;\n+            } else {\n+                suid = getDeclaredSUID(cl);\n+                try {\n+                    fields = getSerialFields(cl);\n+                    computeFieldOffsets();\n+                } catch (InvalidClassException e) {\n+                    serializeEx = deserializeEx =\n@@ -406,2 +362,2 @@\n-                        fields = NO_FIELDS;\n-                    }\n+                    fields = NO_FIELDS;\n+                }\n@@ -409,9 +365,9 @@\n-                    if (isRecord) {\n-                        canonicalCtr = canonicalRecordCtr(cl);\n-                        deserializationCtrs = new DeserializationConstructorsCache();\n-                    } else if (externalizable) {\n-                        cons = getExternalizableConstructor(cl);\n-                    } else {\n-                        cons = getSerializableConstructor(cl);\n-                        writeObjectMethod = getPrivateMethod(cl, \"writeObject\",\n-                            new Class<?>[] { ObjectOutputStream.class },\n+                if (isRecord) {\n+                    canonicalCtr = canonicalRecordCtr(cl);\n+                    deserializationCtrs = new DeserializationConstructorsCache();\n+                } else if (externalizable) {\n+                    cons = getExternalizableConstructor(cl);\n+                } else {\n+                    cons = getSerializableConstructor(cl);\n+                    writeObjectMethod = getPrivateMethod(cl, \"writeObject\",\n+                            new Class<?>[]{ObjectOutputStream.class},\n@@ -419,2 +375,2 @@\n-                        readObjectMethod = getPrivateMethod(cl, \"readObject\",\n-                            new Class<?>[] { ObjectInputStream.class },\n+                    readObjectMethod = getPrivateMethod(cl, \"readObject\",\n+                            new Class<?>[]{ObjectInputStream.class},\n@@ -422,1 +378,1 @@\n-                        readObjectNoDataMethod = getPrivateMethod(\n+                    readObjectNoDataMethod = getPrivateMethod(\n@@ -424,4 +380,3 @@\n-                        hasWriteObjectData = (writeObjectMethod != null);\n-                    }\n-                    domains = getProtectionDomains(cons, cl);\n-                    writeReplaceMethod = getInheritableMethod(\n+                    hasWriteObjectData = (writeObjectMethod != null);\n+                }\n+                writeReplaceMethod = getInheritableMethod(\n@@ -429,1 +384,1 @@\n-                    readResolveMethod = getInheritableMethod(\n+                readResolveMethod = getInheritableMethod(\n@@ -431,3 +386,1 @@\n-                    return null;\n-                }\n-            });\n+            }\n@@ -477,60 +430,0 @@\n-    \/**\n-     * Creates a PermissionDomain that grants no permission.\n-     *\/\n-    private ProtectionDomain noPermissionsDomain() {\n-        PermissionCollection perms = new Permissions();\n-        perms.setReadOnly();\n-        return new ProtectionDomain(null, perms);\n-    }\n-\n-    \/**\n-     * Aggregate the ProtectionDomains of all the classes that separate\n-     * a concrete class {@code cl} from its ancestor's class declaring\n-     * a constructor {@code cons}.\n-     *\n-     * If {@code cl} is defined by the boot loader, or the constructor\n-     * {@code cons} is declared by {@code cl}, or if there is no security\n-     * manager, then this method does nothing and {@code null} is returned.\n-     *\n-     * @param cons A constructor declared by {@code cl} or one of its\n-     *             ancestors.\n-     * @param cl A concrete class, which is either the class declaring\n-     *           the constructor {@code cons}, or a serializable subclass\n-     *           of that class.\n-     * @return An array of ProtectionDomain representing the set of\n-     *         ProtectionDomain that separate the concrete class {@code cl}\n-     *         from its ancestor's declaring {@code cons}, or {@code null}.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private ProtectionDomain[] getProtectionDomains(Constructor<?> cons,\n-                                                    Class<?> cl) {\n-        ProtectionDomain[] domains = null;\n-        if (cons != null && cl.getClassLoader() != null\n-                && System.getSecurityManager() != null) {\n-            Class<?> cls = cl;\n-            Class<?> fnscl = cons.getDeclaringClass();\n-            Set<ProtectionDomain> pds = null;\n-            while (cls != fnscl) {\n-                ProtectionDomain pd = cls.getProtectionDomain();\n-                if (pd != null) {\n-                    if (pds == null) pds = new HashSet<>();\n-                    pds.add(pd);\n-                }\n-                cls = cls.getSuperclass();\n-                if (cls == null) {\n-                    \/\/ that's not supposed to happen\n-                    \/\/ make a ProtectionDomain with no permission.\n-                    \/\/ should we throw instead?\n-                    if (pds == null) pds = new HashSet<>();\n-                    else pds.clear();\n-                    pds.add(noPermissionsDomain());\n-                    break;\n-                }\n-            }\n-            if (pds != null) {\n-                domains = pds.toArray(new ProtectionDomain[0]);\n-            }\n-        }\n-        return domains;\n-    }\n-\n@@ -567,1 +460,0 @@\n-            domains = localDesc.domains;\n@@ -659,1 +551,0 @@\n-            domains = localDesc.domains;\n@@ -1016,1 +907,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1024,29 +914,1 @@\n-                if (domains == null || domains.length == 0) {\n-                    return cons.newInstance();\n-                } else {\n-                    JavaSecurityAccess jsa = SharedSecrets.getJavaSecurityAccess();\n-                    PrivilegedAction<?> pea = () -> {\n-                        try {\n-                            return cons.newInstance();\n-                        } catch (InstantiationException\n-                                 | InvocationTargetException\n-                                 | IllegalAccessException x) {\n-                            throw new UndeclaredThrowableException(x);\n-                        }\n-                    }; \/\/ Can't use PrivilegedExceptionAction with jsa\n-                    try {\n-                        return jsa.doIntersectionPrivilege(pea,\n-                                   AccessController.getContext(),\n-                                   new AccessControlContext(domains));\n-                    } catch (UndeclaredThrowableException x) {\n-                        Throwable cause = x.getCause();\n-                        if (cause instanceof InstantiationException ie)\n-                            throw ie;\n-                        if (cause instanceof InvocationTargetException ite)\n-                            throw ite;\n-                        if (cause instanceof IllegalAccessException iae)\n-                            throw iae;\n-                        \/\/ not supposed to happen\n-                        throw x;\n-                    }\n-                }\n+                return cons.newInstance();\n@@ -1457,1 +1319,1 @@\n-        return reflFactory.newConstructorForSerialization(cl);\n+        return ReflectionFactory.getReflectionFactory().newConstructorForSerialization(cl);\n@@ -1465,1 +1327,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1468,13 +1329,10 @@\n-        PrivilegedAction<MethodHandle> pa = () -> {\n-            Class<?>[] paramTypes = Arrays.stream(cls.getRecordComponents())\n-                                          .map(RecordComponent::getType)\n-                                          .toArray(Class<?>[]::new);\n-            try {\n-                Constructor<?> ctr = cls.getDeclaredConstructor(paramTypes);\n-                ctr.setAccessible(true);\n-                return MethodHandles.lookup().unreflectConstructor(ctr);\n-            } catch (IllegalAccessException | NoSuchMethodException e) {\n-                return null;\n-            }\n-        };\n-        return AccessController.doPrivileged(pa);\n+        Class<?>[] paramTypes = Arrays.stream(cls.getRecordComponents())\n+                                      .map(RecordComponent::getType)\n+                                      .toArray(Class<?>[]::new);\n+        try {\n+            Constructor<?> ctr = cls.getDeclaredConstructor(paramTypes);\n+            ctr.setAccessible(true);\n+            return MethodHandles.lookup().unreflectConstructor(ctr);\n+        } catch (IllegalAccessException | NoSuchMethodException e) {\n+            return null;\n+        }\n@@ -2361,1 +2219,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -2370,8 +2227,1 @@\n-            RecordComponent[] recordComponents;\n-            try {\n-                Class<?> cls = desc.forClass();\n-                PrivilegedExceptionAction<RecordComponent[]> pa = cls::getRecordComponents;\n-                recordComponents = AccessController.doPrivileged(pa);\n-            } catch (PrivilegedActionException e) {\n-                throw new InternalError(e.getCause());\n-            }\n+            RecordComponent[] recordComponents = desc.forClass().getRecordComponents();\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":46,"deletions":196,"binary":false,"changes":242,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import jdk.internal.reflect.CallerSensitive;\n-import jdk.internal.reflect.Reflection;\n-import sun.reflect.misc.ReflectUtil;\n@@ -164,2 +161,0 @@\n-    @SuppressWarnings(\"removal\")\n-    @CallerSensitive\n@@ -167,6 +162,0 @@\n-        if (System.getSecurityManager() != null) {\n-            Class<?> caller = Reflection.getCallerClass();\n-            if (ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(), type.getClassLoader())) {\n-                ReflectUtil.checkPackageAccess(type);\n-            }\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamField.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -78,1 +76,1 @@\n-        Field f = privilegedDeclaredField(cl, SUID_NAME);\n+        Field f = declaredField(cl, SUID_NAME);\n@@ -104,1 +102,1 @@\n-        Field f = privilegedDeclaredField(cl, SERIAL_PERSISTENT_FIELDS_NAME);\n+        Field f = declaredField(cl, SERIAL_PERSISTENT_FIELDS_NAME);\n@@ -145,1 +143,1 @@\n-        for (Method m : privilegedDeclaredMethods(cl)) {\n+        for (Method m : cl.getDeclaredMethods()) {\n@@ -176,1 +174,1 @@\n-            for (Method m : privilegedDeclaredMethods(superCl)) {\n+            for (Method m : superCl.getDeclaredMethods()) {\n@@ -239,8 +237,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static Field privilegedDeclaredField(Class<?> cl, String name) {\n-        if (System.getSecurityManager() == null) {\n-            return declaredField(cl, name);\n-        }\n-        return AccessController.doPrivileged((PrivilegedAction<Field>) () ->\n-                declaredField(cl, name));\n-    }\n@@ -256,8 +246,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static Method[] privilegedDeclaredMethods(Class<?> cl) {\n-        if (System.getSecurityManager() == null) {\n-            return cl.getDeclaredMethods();\n-        }\n-        return AccessController.doPrivileged(\n-                (PrivilegedAction<Method[]>) cl::getDeclaredMethods);\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/io\/SerializationMisdeclarationChecker.java","additions":4,"deletions":22,"binary":false,"changes":26,"status":"modified"}]}