{"files":[{"patch":"@@ -99,2 +99,5 @@\n-\/\/ is an IfTrue projection. This code is also used to clone predicates to cloned loops.\n-IfTrueNode* PhaseIdealLoop::create_new_if_for_predicate(ParsePredicateSuccessProj* parse_predicate_success_proj,\n+\/\/ is an IfTrue projection. This code is also used to clone predicates to\n+\/\/ cloned loops. 'rewire_uncommon_proj_phi_inputs' should be set to the\n+\/\/ non-default value 'true' when called for a false-path loop during\n+\/\/ Loop Unswitching.\n+IfTrueNode* PhaseIdealLoop::create_new_if_for_predicate(const ParsePredicateSuccessProj* parse_predicate_success_proj,\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1361,3 +1361,3 @@\n-  IfTrueNode* create_new_if_for_predicate(\n-    ParsePredicateSuccessProj* parse_predicate_proj, Node* new_entry, Deoptimization::DeoptReason reason, int opcode,\n-    bool rewire_uncommon_proj_phi_inputs = false);\n+  IfTrueNode* create_new_if_for_predicate(const ParsePredicateSuccessProj* parse_predicate_proj, Node* new_entry,\n+                                          Deoptimization::DeoptReason reason, int opcode,\n+                                          bool rewire_uncommon_proj_phi_inputs = false);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-ParsePredicate ParsePredicate::clone_to_unswitched_loop(Node* new_control, const bool is_true_path_loop,\n+ParsePredicate ParsePredicate::clone_to_unswitched_loop(Node* new_control, const bool is_false_path_loop,\n@@ -88,2 +88,2 @@\n-                                                                               Op_ParsePredicate, is_true_path_loop);\n-  NOT_PRODUCT(trace_cloned_parse_predicate(is_true_path_loop, success_proj));\n+                                                                               Op_ParsePredicate, is_false_path_loop);\n+  NOT_PRODUCT(trace_cloned_parse_predicate(is_false_path_loop, success_proj));\n@@ -94,1 +94,1 @@\n-void ParsePredicate::trace_cloned_parse_predicate(const bool is_true_path_loop,\n+void ParsePredicate::trace_cloned_parse_predicate(const bool is_false_path_loop,\n@@ -97,1 +97,1 @@\n-    tty->print(\"Parse Predicate cloned to %s path loop: \", is_true_path_loop ? \"true\" : \"false\");\n+    tty->print(\"Parse Predicate cloned to %s path loop: \", is_false_path_loop ? \"false\" : \"true\");\n@@ -1069,2 +1069,2 @@\n-  _clone_predicate_to_true_path_loop.clone_parse_predicate(parse_predicate, true);\n-  _clone_predicate_to_false_path_loop.clone_parse_predicate(parse_predicate, false);\n+  _clone_predicate_to_true_path_loop.clone_parse_predicate(parse_predicate, false);\n+  _clone_predicate_to_false_path_loop.clone_parse_predicate(parse_predicate, true);\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-  NOT_PRODUCT(static void trace_cloned_parse_predicate(bool is_true_path_loop,\n+  NOT_PRODUCT(static void trace_cloned_parse_predicate(bool is_false_path_loop,\n@@ -330,1 +330,1 @@\n-  ParsePredicate clone_to_unswitched_loop(Node* new_control, bool is_true_path_loop,\n+  ParsePredicate clone_to_unswitched_loop(Node* new_control, bool is_false_path_loop,\n@@ -1109,1 +1109,1 @@\n-  void clone_parse_predicate(const ParsePredicate& parse_predicate, bool is_true_path_loop) {\n+  void clone_parse_predicate(const ParsePredicate& parse_predicate, bool is_false_path_loop) {\n@@ -1111,1 +1111,1 @@\n-                                                                                     is_true_path_loop, _phase);\n+                                                                                     is_false_path_loop, _phase);\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8349032\n+ * @summary Test that UCT for a Parse Predicate with a Phi does not incorrectly have a top input after Loop Unswitching.\n+ * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,*TestParsePredicateUCTWithPhi*::test\n+ *                   compiler.predicates.TestParsePredicateUCTWithPhi\n+ *\/\n+\n+package compiler.predicates;\n+\n+public class TestParsePredicateUCTWithPhi {\n+    static int iFld;\n+    static int[][] iArrFld = new int[100][100];\n+    static int[] iArr = new int[100];\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10; i++) {\n+            test();\n+        }\n+    }\n+\n+    static void test() {\n+        int i1 = 3;\n+        for (int i = 7; i < 28; i++) {\n+            int i20 = 4;\n+            try {\n+                iArr[3] = i1 \/ i;\n+            } catch (ArithmeticException a_e) {\n+            }\n+            try {\n+                i1 = 6 \/ iArrFld[i][i];\n+            } catch (ArithmeticException a_e) {\n+            }\n+            int i22 = 1;\n+            while (++i22 < 7) {\n+                try {\n+                    i20 = i20 \/ iArrFld[i][i];\n+                    i1 = 0;\n+                    i1 = iArr[1] \/ i;\n+                } catch (ArithmeticException a_e) {\n+                }\n+                iFld = i20;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/TestParsePredicateUCTWithPhi.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}