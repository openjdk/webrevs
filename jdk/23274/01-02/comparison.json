{"files":[{"patch":"@@ -168,21 +168,21 @@\n-      && tak != TypeInstKlassPtr::OBJECT) {\n-    \/\/ Regarding the fourth condition in the if-statement from above:\n-    \/\/\n-    \/\/ If the compiler has determined that the type of array 'ary' (represented\n-    \/\/ by 'array_klass') is java\/lang\/Object, the compiler must not assume that\n-    \/\/ the array 'ary' is monomorphic.\n-    \/\/\n-    \/\/ If 'ary' were of type java\/lang\/Object, this arraystore would have to fail,\n-    \/\/ because it is not possible to perform a arraystore into an object that is not\n-    \/\/ a \"proper\" array.\n-    \/\/\n-    \/\/ Therefore, let's obtain at runtime the type of 'ary' and check if we can still\n-    \/\/ successfully perform the store.\n-    \/\/\n-    \/\/ The implementation reasons for the condition are the following:\n-    \/\/\n-    \/\/ java\/lang\/Object is the superclass of all arrays, but it is represented by the VM\n-    \/\/ as an InstanceKlass. The checks generated by gen_checkcast() (see below) expect\n-    \/\/ 'array_klass' to be ObjArrayKlass, which can result in invalid memory accesses.\n-    \/\/\n-    \/\/ See issue JDK-8057622 for details.\n+      && tak->isa_aryklassptr()) {\n+      \/\/ Regarding the fourth condition in the if-statement from above:\n+      \/\/\n+      \/\/ If the compiler has determined that the type of array 'ary' (represented\n+      \/\/ by 'array_klass') is java\/lang\/Object, the compiler must not assume that\n+      \/\/ the array 'ary' is monomorphic.\n+      \/\/\n+      \/\/ If 'ary' were of type java\/lang\/Object, this arraystore would have to fail,\n+      \/\/ because it is not possible to perform a arraystore into an object that is not\n+      \/\/ a \"proper\" array.\n+      \/\/\n+      \/\/ Therefore, let's obtain at runtime the type of 'ary' and check if we can still\n+      \/\/ successfully perform the store.\n+      \/\/\n+      \/\/ The implementation reasons for the condition are the following:\n+      \/\/\n+      \/\/ java\/lang\/Object is the superclass of all arrays, but it is represented by the VM\n+      \/\/ as an InstanceKlass. The checks generated by gen_checkcast() (see below) expect\n+      \/\/ 'array_klass' to be ObjArrayKlass, which can result in invalid memory accesses.\n+      \/\/\n+      \/\/ See issue JDK-8057622 for details.\n@@ -223,0 +223,1 @@\n+  assert(StressReflectiveCode || array_klass->is_Con() == a_e_klass->is_Con(), \"a constant array type must come with a constant element type\");\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"}]}