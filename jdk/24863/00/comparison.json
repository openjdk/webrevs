{"files":[{"patch":"@@ -28,3 +28,0 @@\n-import org.openjdk.jmh.infra.Blackhole;\n-import java.security.GeneralSecurityException;\n-import org.openjdk.jmh.annotations.Fork;\n@@ -42,1 +39,0 @@\n-@Fork(jvmArgs = {\"-Xms20g\", \"-Xmx20g\", \"-XX:+UseZGC\"})\n@@ -45,1 +41,1 @@\n-    public static final int SET_SIZE = 8;\n+    public static final int SET_SIZE = 128;\n@@ -58,3 +54,2 @@\n-    private Cipher encryptCipher;\n-    private Cipher decryptCipher;\n-    private byte[] outBuffer;\n+    Cipher encryptCipher;\n+    Cipher decryptCipher;\n@@ -74,1 +69,0 @@\n-        outBuffer = new byte[dataSize + 128]; \/\/ extra space for tag, etc\n@@ -84,7 +78,0 @@\n-    @Benchmark\n-    public void encrypt2(Blackhole bh) throws GeneralSecurityException {\n-        byte[] d = data[index];\n-        index = (index +1) % SET_SIZE;\n-        bh.consume(encryptCipher.doFinal(d, 0, d.length, outBuffer));\n-    }\n-\n@@ -97,8 +84,0 @@\n-\n-    @Benchmark\n-    public void decrypt2(Blackhole bh) throws GeneralSecurityException {\n-        byte[] e = encryptedData[index];\n-        index = (index +1) % SET_SIZE;\n-        bh.consume(decryptCipher.doFinal(e, 0, e.length, outBuffer));\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/AESBench.java","additions":3,"deletions":24,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.crypto.full;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.security.GeneralSecurityException;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidParameterSpecException;\n+\n+public class AESExtraBench extends AESBench {\n+\n+    public static final int SET_SIZE = 8;\n+\n+    @Param({\"AES\/CBC\/NoPadding\"})\n+    private String algorithm;\n+\n+    @Param({\"128\", \"192\", \"256\"})\n+    private int keyLength;\n+\n+    @Param({\"\" + 16 * 1024})\n+    private int dataSize;\n+\n+    private byte[] outBuffer;\n+    int index = 0;\n+\n+    @Setup\n+    public void setup() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidParameterSpecException {\n+        super.setup();\n+        outBuffer = new byte[dataSize + 128]; \/\/ extra space for tag, etc\n+    }\n+\n+\/\/    @Benchmark\n+\/\/    public byte[] encrypt() throws BadPaddingException, IllegalBlockSizeException {\n+\/\/        byte[] d = data[index];\n+\/\/        index = (index +1) % SET_SIZE;\n+\/\/        return encryptCipher.doFinal(d);\n+\/\/    }\n+\n+    @Benchmark\n+    public int encrypt2() throws GeneralSecurityException {\n+        byte[] d = data[index];\n+        index = (index +1) % SET_SIZE;\n+        return encryptCipher.doFinal(d, 0, d.length, outBuffer);\n+    }\n+\/\/\n+\/\/    @Benchmark\n+\/\/    public byte[] decrypt() throws BadPaddingException, IllegalBlockSizeException {\n+\/\/        byte[] e = encryptedData[index];\n+\/\/        index = (index +1) % SET_SIZE;\n+\/\/        return decryptCipher.doFinal(e);\n+\/\/    }\n+\n+    @Benchmark\n+    public int decrypt2() throws GeneralSecurityException {\n+        byte[] e = encryptedData[index];\n+        index = (index +1) % SET_SIZE;\n+        return decryptCipher.doFinal(e, 0, e.length, outBuffer);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/AESExtraBench.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}