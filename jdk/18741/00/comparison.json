{"files":[{"patch":"@@ -1399,2 +1399,1 @@\n-  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n-  return callee_method->verified_code_entry();\n+  return get_resolved_entry(current, callee_method);\n@@ -1453,2 +1452,1 @@\n-  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n-  return callee_method->verified_code_entry();\n+  return get_resolved_entry(current, callee_method);\n@@ -1491,0 +1489,11 @@\n+\/\/ return verified_code_entry if interp_only_mode is not set for the current thread;\n+\/\/ otherwise return c2i entry.\n+address SharedRuntime::get_resolved_entry(JavaThread* current, methodHandle callee_method) {\n+  if (current->is_interp_only_mode()) {\n+    \/\/ In interp_only_mode we need to go to the interpreted entry\n+    \/\/ The c2i won't patch in this mode -- see fixup_callers_callsite\n+    return callee_method->get_c2i_entry();\n+  }\n+  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n+  return callee_method->verified_code_entry();\n+}\n@@ -1499,12 +1508,0 @@\n-\n-    if (current->is_interp_only_mode()) {\n-      RegisterMap reg_map(current,\n-                          RegisterMap::UpdateMap::skip,\n-                          RegisterMap::ProcessFrames::include,\n-                          RegisterMap::WalkContinuation::skip);\n-      frame stub_frame = current->last_frame();\n-      assert(stub_frame.is_runtime_frame(), \"must be a runtimeStub\");\n-      frame caller = stub_frame.sender(&reg_map);\n-      enter_special = caller.cb() != nullptr && caller.cb()->is_nmethod()\n-        && caller.cb()->as_nmethod()->method()->is_continuation_enter_intrinsic();\n-    }\n@@ -1512,12 +1509,0 @@\n-\n-  if (current->is_interp_only_mode() && enter_special) {\n-    \/\/ enterSpecial is compiled and calls this method to resolve the call to Continuation::enter\n-    \/\/ but in interp_only_mode we need to go to the interpreted entry\n-    \/\/ The c2i won't patch in this mode -- see fixup_callers_callsite\n-    \/\/\n-    \/\/ This should probably be done in all cases, not just enterSpecial (see JDK-8218403),\n-    \/\/ but that's part of a larger fix, and the situation is worse for enterSpecial, as it has no\n-    \/\/ interpreted version.\n-    return callee_method->get_c2i_entry();\n-  }\n-\n@@ -1525,2 +1510,1 @@\n-  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n-  return callee_method->verified_code_entry();\n+  return get_resolved_entry(current, callee_method);\n@@ -1529,1 +1513,0 @@\n-\n@@ -1538,2 +1521,1 @@\n-  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n-  return callee_method->verified_code_entry();\n+  return get_resolved_entry(current, callee_method);\n@@ -1552,2 +1534,1 @@\n-  assert(callee_method->verified_code_entry() != nullptr, \" Jump to zero!\");\n-  return callee_method->verified_code_entry();\n+  return get_resolved_entry(current, callee_method);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":16,"deletions":35,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -499,0 +499,1 @@\n+  static address get_resolved_entry        (JavaThread* current, methodHandle callee_method);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}