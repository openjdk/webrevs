{"files":[{"patch":"@@ -609,3 +609,3 @@\n-    default MemorySegment buildToMemorySegment(SegmentAllocator allocator,\n-                                               ClassDesc thisClass,\n-                                               Consumer<? super ClassBuilder> handler) {\n+    default MemorySegment build(SegmentAllocator allocator,\n+                                ClassDesc thisClass,\n+                                Consumer<? super ClassBuilder> handler) {\n@@ -613,1 +613,1 @@\n-        return buildToMemorySegment(allocator, pool.classEntry(thisClass), pool, handler);\n+        return build(allocator, pool.classEntry(thisClass), pool, handler);\n@@ -627,4 +627,4 @@\n-    MemorySegment buildToMemorySegment(SegmentAllocator allocator,\n-                                       ClassEntry thisClassEntry,\n-                                       ConstantPoolBuilder constantPool,\n-                                       Consumer<? super ClassBuilder> handler);\n+    MemorySegment build(SegmentAllocator allocator,\n+                        ClassEntry thisClassEntry,\n+                        ConstantPoolBuilder constantPool,\n+                        Consumer<? super ClassBuilder> handler);\n@@ -701,3 +701,3 @@\n-    default MemorySegment buildModuleToMemorySegment(SegmentAllocator allocator,\n-                                                     ModuleAttribute moduleAttribute) {\n-        return buildModuleToMemorySegment(allocator, moduleAttribute, clb -> {});\n+    default MemorySegment buildModule(SegmentAllocator allocator,\n+                                      ModuleAttribute moduleAttribute) {\n+        return buildModule(allocator, moduleAttribute, clb -> {});\n@@ -715,4 +715,4 @@\n-    default MemorySegment buildModuleToMemorySegment(SegmentAllocator allocator,\n-                                                     ModuleAttribute moduleAttribute,\n-                                                     Consumer<? super ClassBuilder> handler) {\n-        return buildToMemorySegment(allocator, CD_module_info, clb -> {\n+    default MemorySegment buildModule(SegmentAllocator allocator,\n+                                      ModuleAttribute moduleAttribute,\n+                                      Consumer<? super ClassBuilder> handler) {\n+        return build(allocator, CD_module_info, clb -> {\n@@ -875,2 +875,2 @@\n-    default MemorySegment transformClassToMemorySegment(SegmentAllocator allocator, ClassModel model, ClassTransform transform) {\n-        return transformClassToMemorySegment(allocator, model, model.thisClass(), transform);\n+    default MemorySegment transformClass(SegmentAllocator allocator, ClassModel model, ClassTransform transform) {\n+        return transformClass(allocator, model, model.thisClass(), transform);\n@@ -899,1 +899,1 @@\n-     * @param allocator the buffer allocator function\n+     * @param allocator the segment allocator function\n@@ -907,2 +907,2 @@\n-    default MemorySegment transformClassToMemorySegment(SegmentAllocator allocator, ClassModel model, ClassDesc newClassName, ClassTransform transform) {\n-        return transformClassToMemorySegment(allocator, model, TemporaryConstantPool.INSTANCE.classEntry(newClassName), transform);\n+    default MemorySegment transformClass(SegmentAllocator allocator, ClassModel model, ClassDesc newClassName, ClassTransform transform) {\n+        return transformClass(allocator, model, TemporaryConstantPool.INSTANCE.classEntry(newClassName), transform);\n@@ -938,1 +938,1 @@\n-     * @param allocator the buffer allocator function\n+     * @param allocator the segment allocator function\n@@ -946,1 +946,1 @@\n-    MemorySegment transformClassToMemorySegment(SegmentAllocator allocator, ClassModel model, ClassEntry newClassName, ClassTransform transform);\n+    MemorySegment transformClass(SegmentAllocator allocator, ClassModel model, ClassEntry newClassName, ClassTransform transform);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-    public MemorySegment buildToMemorySegment(SegmentAllocator allocator,\n+    public MemorySegment build(SegmentAllocator allocator,\n@@ -183,1 +183,1 @@\n-    public MemorySegment transformClassToMemorySegment(SegmentAllocator allocator, ClassModel model, ClassEntry newClassName, ClassTransform transform) {\n+    public MemorySegment transformClass(SegmentAllocator allocator, ClassModel model, ClassEntry newClassName, ClassTransform transform) {\n@@ -186,1 +186,1 @@\n-        return buildToMemorySegment(allocator, newClassName, constantPool, transformationHandler((ClassImpl) model, transform));\n+        return build(allocator, newClassName, constantPool, transformationHandler((ClassImpl) model, transform));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassFileImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.nio.ByteBuffer;\n@@ -67,1 +66,1 @@\n-            MemorySegment asSegment = classFile.transformClassToMemorySegment(arena, model, ClassTransform.ACCEPT_ALL);\n+            MemorySegment asSegment = classFile.transformClass(arena, model, ClassTransform.ACCEPT_ALL);\n","filename":"test\/jdk\/jdk\/classfile\/BuildAndParseBuffersAndSegments.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}