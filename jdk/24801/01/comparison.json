{"files":[{"patch":"@@ -161,0 +161,1 @@\n+    EXTRA_HEADER_DIRS := java.base:libjava, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,5 @@\n+#include <jni.h>\n+#include \"jni_util.h\"\n+\n+DEF_STATIC_JNI_OnLoad\n+\n","filename":"src\/java.base\/aix\/native\/libsyslookup\/syslookup.c","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.loader.NativeLibraries;\n@@ -69,1 +70,1 @@\n-                return libLookup(libs -> libs.load(jdkLibraryPath(\"syslookup\")));\n+                return sysLookup();\n@@ -87,1 +88,1 @@\n-        SymbolLookup lookup = libLookup(libs -> libs.load(stdLib));\n+        SymbolLookup lookup = stdLibLookup(libs -> libs.load(stdLib));\n@@ -92,2 +93,1 @@\n-            SymbolLookup fallbackLibLookup =\n-                    libLookup(libs -> libs.load(jdkLibraryPath(\"syslookup\")));\n+            SymbolLookup fallbackLibLookup = sysLookup();\n@@ -113,2 +113,1 @@\n-    private static SymbolLookup libLookup(Function<RawNativeLibraries, NativeLibrary> loader) {\n-        NativeLibrary lib = loader.apply(RawNativeLibraries.newInstance(MethodHandles.lookup()));\n+    private static SymbolLookup lookup(NativeLibrary lib) {\n@@ -129,8 +128,3 @@\n-    \/*\n-     * Returns the path of the given library name from JDK\n-     *\/\n-    private static Path jdkLibraryPath(String name) {\n-        Path javahome = Path.of(StaticProperty.javaHome());\n-        String lib = OperatingSystem.isWindows() ? \"bin\" : \"lib\";\n-        String libname = System.mapLibraryName(name);\n-        return javahome.resolve(lib).resolve(libname);\n+    private static SymbolLookup stdLibLookup(Function<RawNativeLibraries, NativeLibrary> loader) {\n+        NativeLibrary lib = loader.apply(RawNativeLibraries.newInstance(MethodHandles.lookup()));\n+        return lookup(lib);\n@@ -139,0 +133,6 @@\n+    @SuppressWarnings(\"restricted\")\n+    private static SymbolLookup sysLookup() {\n+        NativeLibraries libs = NativeLibraries.newInstance(null);\n+        NativeLibrary lib = libs.loadLibrary(SymbolLookup.class, \"syslookup\");\n+        return lookup(lib);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,5 @@\n+#include <jni.h>\n+#include \"jni_util.h\"\n+\n+DEF_STATIC_JNI_OnLoad\n+\n","filename":"src\/java.base\/share\/native\/libsyslookup\/syslookup.c","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,5 @@\n+#include <jni.h>\n+#include \"jni_util.h\"\n+\n+DEF_STATIC_JNI_OnLoad\n+\n","filename":"src\/java.base\/windows\/native\/libsyslookup\/syslookup.c","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}