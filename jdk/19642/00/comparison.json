{"files":[{"patch":"@@ -504,1 +504,0 @@\n-  { \"RegisterFinalizersAtInit\",     JDK_Version::jdk(22), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n@@ -517,26 +516,0 @@\n-  { \"G1ConcRefinementGreenZone\",    JDK_Version::undefined(), JDK_Version::jdk(20), JDK_Version::jdk(24) },\n-  { \"G1ConcRefinementYellowZone\",   JDK_Version::undefined(), JDK_Version::jdk(20), JDK_Version::jdk(24) },\n-  { \"G1ConcRefinementRedZone\",      JDK_Version::undefined(), JDK_Version::jdk(20), JDK_Version::jdk(24) },\n-  { \"G1ConcRefinementThresholdStep\", JDK_Version::undefined(), JDK_Version::jdk(20), JDK_Version::jdk(24) },\n-  { \"G1UseAdaptiveConcRefinement\",  JDK_Version::undefined(), JDK_Version::jdk(20), JDK_Version::jdk(24) },\n-  { \"G1ConcRefinementServiceIntervalMillis\", JDK_Version::undefined(), JDK_Version::jdk(20), JDK_Version::jdk(24) },\n-\n-  { \"G1ConcRSLogCacheSize\",         JDK_Version::undefined(), JDK_Version::jdk(21), JDK_Version::jdk(24) },\n-  { \"G1ConcRSHotCardLimit\",         JDK_Version::undefined(), JDK_Version::jdk(21), JDK_Version::jdk(24) },\n-  { \"RefDiscoveryPolicy\",           JDK_Version::undefined(), JDK_Version::jdk(21), JDK_Version::jdk(24) },\n-\n-  { \"AdaptiveSizePolicyCollectionCostMargin\",   JDK_Version::undefined(), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"MaxGCMinorPauseMillis\",        JDK_Version::jdk(8), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"MaxRAMFraction\",               JDK_Version::jdk(10),  JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"MinRAMFraction\",               JDK_Version::jdk(10),  JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"InitialRAMFraction\",           JDK_Version::jdk(10),  JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"DefaultMaxRAMFraction\",        JDK_Version::jdk(8),  JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"TLABStats\",                    JDK_Version::jdk(12), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"GCLockerEdenExpansionPercent\", JDK_Version::undefined(), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"NUMAPageScanRate\",             JDK_Version::undefined(), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"ProcessDistributionStride\",    JDK_Version::undefined(), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-\n-  { \"ParallelOldDeadWoodLimiterMean\",   JDK_Version::undefined(), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"ParallelOldDeadWoodLimiterStdDev\", JDK_Version::undefined(), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"UseNeon\",                      JDK_Version::undefined(), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n-  { \"ScavengeBeforeFullGC\",         JDK_Version::undefined(), JDK_Version::jdk(23), JDK_Version::jdk(24) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -3741,61 +3741,0 @@\n-\\f[V]-XX:InitialRAMFraction=\\f[R]\\f[I]ratio\\f[R]\n-Sets the initial amount of memory that the JVM may use for the Java heap\n-before applying ergonomics heuristics as a ratio of the maximum amount\n-determined as described in the \\f[V]-XX:MaxRAM\\f[R] option.\n-The default value is 64.\n-.RS\n-.PP\n-Use the option \\f[V]-XX:InitialRAMPercentage\\f[R] instead.\n-.RE\n-.TP\n-\\f[V]-XX:MaxRAMFraction=\\f[R]\\f[I]ratio\\f[R]\n-Sets the maximum amount of memory that the JVM may use for the Java heap\n-before applying ergonomics heuristics as a fraction of the maximum\n-amount determined as described in the \\f[V]-XX:MaxRAM\\f[R] option.\n-The default value is 4.\n-.RS\n-.PP\n-Specifying this option disables automatic use of compressed oops if the\n-combined result of this and other options influencing the maximum amount\n-of memory is larger than the range of memory addressable by compressed\n-oops.\n-See \\f[V]-XX:UseCompressedOops\\f[R] for further information about\n-compressed oops.\n-.PP\n-Use the option \\f[V]-XX:MaxRAMPercentage\\f[R] instead.\n-.RE\n-.TP\n-\\f[V]-XX:MinRAMFraction=\\f[R]\\f[I]ratio\\f[R]\n-Sets the maximum amount of memory that the JVM may use for the Java heap\n-before applying ergonomics heuristics as a fraction of the maximum\n-amount determined as described in the \\f[V]-XX:MaxRAM\\f[R] option for\n-small heaps.\n-A small heap is a heap of approximately 125 MB.\n-The default value is 2.\n-.RS\n-.PP\n-Use the option \\f[V]-XX:MinRAMPercentage\\f[R] instead.\n-.RE\n-.SH OBSOLETE JAVA OPTIONS\n-.PP\n-These \\f[V]java\\f[R] options are still accepted but ignored, and a\n-warning is issued when they\\[aq]re used.\n-.TP\n-\\f[V]--illegal-access=\\f[R]\\f[I]parameter\\f[R]\n-Controlled \\f[I]relaxed strong encapsulation\\f[R], as defined in\n-\\f[B]JEP 261\\f[R]\n-[https:\/\/openjdk.org\/jeps\/261#Relaxed-strong-encapsulation].\n-This option was deprecated in JDK 16 by \\f[B]JEP 396\\f[R]\n-[https:\/\/openjdk.org\/jeps\/396] and made obsolete in JDK 17 by \\f[B]JEP\n-403\\f[R] [https:\/\/openjdk.org\/jeps\/403].\n-.TP\n-\\f[V]-XX:+ScavengeBeforeFullGC\\f[R]\n-Enables GC of the young generation before each full GC.\n-This option is enabled by default.\n-It is recommended that you \\f[I]don\\[aq]t\\f[R] disable it, because\n-scavenging the young generation before a full GC can reduce the number\n-of objects reachable from the old generation space into the young\n-generation space.\n-To disable GC of the young generation before each full GC, specify the\n-option \\f[V]-XX:-ScavengeBeforeFullGC\\f[R].\n-.TP\n@@ -3878,0 +3817,12 @@\n+.SH OBSOLETE JAVA OPTIONS\n+.PP\n+These \\f[V]java\\f[R] options are still accepted but ignored, and a\n+warning is issued when they\\[aq]re used.\n+.TP\n+\\f[V]--illegal-access=\\f[R]\\f[I]parameter\\f[R]\n+Controlled \\f[I]relaxed strong encapsulation\\f[R], as defined in\n+\\f[B]JEP 261\\f[R]\n+[https:\/\/openjdk.org\/jeps\/261#Relaxed-strong-encapsulation].\n+This option was deprecated in JDK 16 by \\f[B]JEP 396\\f[R]\n+[https:\/\/openjdk.org\/jeps\/396] and made obsolete in JDK 17 by \\f[B]JEP\n+403\\f[R] [https:\/\/openjdk.org\/jeps\/403].\n@@ -3887,8 +3838,9 @@\n-\\f[V]-XX:+UseHugeTLBFS\\f[R]\n-\\f[B]Linux only:\\f[R] This option is the equivalent of specifying\n-\\f[V]-XX:+UseLargePages\\f[R].\n-This option is disabled by default.\n-This option pre-allocates all large pages up-front, when memory is\n-reserved; consequently the JVM can\\[aq]t dynamically grow or shrink\n-large pages memory areas; see \\f[V]-XX:UseTransparentHugePages\\f[R] if\n-you want this behavior.\n+\\f[V]-XX:InitialRAMFraction=\\f[R]\\f[I]ratio\\f[R]\n+Sets the initial amount of memory that the JVM may use for the Java heap\n+before applying ergonomics heuristics as a ratio of the maximum amount\n+determined as described in the \\f[V]-XX:MaxRAM\\f[R] option.\n+The default value is 64.\n+.RS\n+.PP\n+Use the option \\f[V]-XX:InitialRAMPercentage\\f[R] instead.\n+.RE\n@@ -3896,3 +3848,38 @@\n-\\f[V]-XX:+UseSHM\\f[R]\n-\\f[B]Linux only:\\f[R] Enables the JVM to use shared memory to set up\n-large pages.\n+\\f[V]-XX:MaxRAMFraction=\\f[R]\\f[I]ratio\\f[R]\n+Sets the maximum amount of memory that the JVM may use for the Java heap\n+before applying ergonomics heuristics as a fraction of the maximum\n+amount determined as described in the \\f[V]-XX:MaxRAM\\f[R] option.\n+The default value is 4.\n+.RS\n+.PP\n+Specifying this option disables automatic use of compressed oops if the\n+combined result of this and other options influencing the maximum amount\n+of memory is larger than the range of memory addressable by compressed\n+oops.\n+See \\f[V]-XX:UseCompressedOops\\f[R] for further information about\n+compressed oops.\n+.PP\n+Use the option \\f[V]-XX:MaxRAMPercentage\\f[R] instead.\n+.RE\n+.TP\n+\\f[V]-XX:MinRAMFraction=\\f[R]\\f[I]ratio\\f[R]\n+Sets the maximum amount of memory that the JVM may use for the Java heap\n+before applying ergonomics heuristics as a fraction of the maximum\n+amount determined as described in the \\f[V]-XX:MaxRAM\\f[R] option for\n+small heaps.\n+A small heap is a heap of approximately 125 MB.\n+The default value is 2.\n+.RS\n+.PP\n+Use the option \\f[V]-XX:MinRAMPercentage\\f[R] instead.\n+.RE\n+.TP\n+\\f[V]-XX:+ScavengeBeforeFullGC\\f[R]\n+Enables GC of the young generation before each full GC.\n+This option is enabled by default.\n+It is recommended that you \\f[I]don\\[aq]t\\f[R] disable it, because\n+scavenging the young generation before a full GC can reduce the number\n+of objects reachable from the old generation space into the young\n+generation space.\n+To disable GC of the young generation before each full GC, specify the\n+option \\f[V]-XX:-ScavengeBeforeFullGC\\f[R].\n@@ -3903,0 +3890,3 @@\n+\\f[B]The \\f[VB]java\\f[B] Command, Release 23\\f[R]\n+[https:\/\/docs.oracle.com\/en\/java\/javase\/23\/docs\/specs\/man\/java.html]\n+.IP \\[bu] 2\n","filename":"src\/java.base\/share\/man\/java.1","additions":62,"deletions":72,"binary":false,"changes":134,"status":"modified"}]}