{"files":[{"patch":"@@ -44,0 +44,41 @@\n+    \/**\n+     * Converts a bit mask of CPU features to enum constants.\n+     *\n+     * @param <CPUFeatureType> CPU feature enum type\n+     * @param enumType the class of {@code CPUFeatureType}\n+     * @param constants VM constants. Each entry whose key starts with {@code \"VM_Version::CPU_\"}\n+     *            specifies a CPU feature and its value is a mask for a bit in {@code features}\n+     * @param features bits specifying CPU features\n+     * @param renaming maps from VM feature names to enum constant names where the two differ\n+     * @throws IllegalArgumentException if any VM CPU feature constant cannot be converted to an\n+     *             enum value\n+     * @return the set of converted values\n+     *\/\n+    static <CPUFeatureType extends Enum<CPUFeatureType>> EnumSet<CPUFeatureType> convertFeaturesViaConstantMasks(\n+            Class<CPUFeatureType> enumType,\n+            Map<String, Long> constants,\n+            long features,\n+            Map<String, String> renaming) {\n+        EnumSet<CPUFeatureType> outFeatures = EnumSet.noneOf(enumType);\n+        List<String> missing = new ArrayList<>();\n+        for (Entry<String, Long> e : constants.entrySet()) {\n+            long bitMask = e.getValue();\n+            String key = e.getKey();\n+            if (key.startsWith(\"VM_Version::CPU_\")) {\n+                String name = key.substring(\"VM_Version::CPU_\".length());\n+                try {\n+                    CPUFeatureType feature = Enum.valueOf(enumType, renaming.getOrDefault(name, name));\n+                    if ((features & bitMask) != 0) {\n+                        outFeatures.add(feature);\n+                    }\n+                } catch (IllegalArgumentException iae) {\n+                    missing.add(name);\n+                }\n+            }\n+        }\n+        if (!missing.isEmpty()) {\n+            throw new JVMCIError(\"Missing CPU feature constants: %s\", missing);\n+        }\n+        return outFeatures;\n+    }\n+\n@@ -65,1 +106,2 @@\n-            long bitMask = e.getValue();\n+            long bitIndex = e.getValue();\n+            long bitMask = 1L << bitIndex;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIBackendFactory.java","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        return HotSpotJVMCIBackendFactory.convertFeatures(CPUFeature.class, constants, config.vmVersionFeatures, emptyMap());\n+        return HotSpotJVMCIBackendFactory.convertFeaturesViaConstantMasks(CPUFeature.class, constants, config.vmVersionFeatures, emptyMap());\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/riscv64\/RISCV64HotSpotJVMCIBackendFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}