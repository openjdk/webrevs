{"files":[{"patch":"@@ -789,1 +789,4 @@\n-            var tzLink = tzdbLinks.get(tzKey);\n+            String tzLink = null;\n+            for (var k = tzKey; tzdbLinks.containsKey(k);) {\n+                k = tzLink = tzdbLinks.get(k);\n+            }\n@@ -1216,0 +1219,1 @@\n+        assert tzdbLinks != null;\n@@ -1219,0 +1223,1 @@\n+            AVAILABLE_TZIDS.addAll(tzdbLinks.keySet());\n@@ -1493,0 +1498,1 @@\n+     * Returning null results in generating the GMT format at runtime.\n@@ -1496,4 +1502,4 @@\n-            \/\/ Should pre-fill GMT format once COMPAT is gone.\n-            \/\/ Till then, fall back to GMT format at runtime, after COMPAT short\n-            \/\/ names are populated\n-            ZoneOffset.of(f);\n+            if (!f.equals(\"%z\")) {\n+                \/\/ Validate if the format is an offset\n+                ZoneOffset.of(f);\n+            }\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/CLDRConverter.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -267,1 +267,7 @@\n-        var zr = ZoneInfoFile.getZoneInfo(id).toZoneId().getRules();\n+        LocaleResources lr = LocaleProviderAdapter.forType(Type.CLDR).getLocaleResources(l);\n+        ResourceBundle fd = lr.getJavaTimeFormatData();\n+        var zi = ZoneInfoFile.getZoneInfo(id);\n+        if (zi == null) {\n+            return fd.getString(\"timezone.gmtZeroFormat\");\n+        }\n+        var zr = zi.toZoneId().getRules();\n@@ -279,2 +285,0 @@\n-        LocaleResources lr = LocaleProviderAdapter.forType(Type.CLDR).getLocaleResources(l);\n-        ResourceBundle fd = lr.getJavaTimeFormatData();\n","filename":"src\/java.base\/share\/classes\/sun\/util\/cldr\/CLDRTimeZoneNameProviderImpl.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}