{"files":[{"patch":"@@ -394,1 +394,2 @@\n-  for (int i = 0; i < chunk->length(); i++) {\n+  \/\/ Start locking from outermost\/oldest frame\n+  for (int i = (chunk->length() - 1); i >= 0 ; i--) {\n@@ -1727,1 +1728,2 @@\n-      for (int j = 0; j < monitors->number_of_monitors(); j++) {\n+      \/\/ Unlock in reverse order starting from most nested monitor.\n+      for (int j = (monitors->number_of_monitors() - 1); j >= 0; j--) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8324174\n+ * @summary During deoptimization locking and unlocking for nested locks are executed in incorrect order.\n+ * @requires vm.compMode != \"Xint\"\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -Xmx128M\n+ *                   -XX:CompileCommand=exclude,TestNestedRelockAtDeopt::main TestNestedRelockAtDeopt\n+ *\/\n+\n+import java.util.ArrayList;\n+public class TestNestedRelockAtDeopt {\n+\n+    static final int CHUNK = 1000;\n+    static ArrayList<Object> arr = null;\n+\n+    public static void main(String[] args) {\n+        arr = new ArrayList<>();\n+        try {\n+            while (true) {\n+                test1();\n+            }\n+        } catch (OutOfMemoryError oom) {\n+            arr = null; \/\/ Free memory\n+            System.out.println(\"OOM caught in test1\");\n+        }\n+        arr = new ArrayList<>();\n+        try {\n+            while (true) {\n+                test2();\n+            }\n+        } catch (OutOfMemoryError oom) {\n+            arr = null; \/\/ Free memory\n+            System.out.println(\"OOM caught in test2\");\n+        }\n+        arr = new ArrayList<>();\n+        TestNestedRelockAtDeopt obj = new TestNestedRelockAtDeopt();\n+        try {\n+            while (true) {\n+                test3(obj);\n+            }\n+        } catch (OutOfMemoryError oom) {\n+            arr = null; \/\/ Free memory\n+            System.out.println(\"OOM caught in test3\");\n+        }\n+        arr = new ArrayList<>();\n+        try {\n+            while (true) {\n+                test4(obj);\n+            }\n+        } catch (OutOfMemoryError oom) {\n+            arr = null; \/\/ Free memory\n+            System.out.println(\"OOM caught in test4\");\n+        }\n+    }\n+\n+    \/\/ Nested locks in one method\n+    static void test1() { \/\/ Nested lock in one method\n+        synchronized (TestNestedRelockAtDeopt.class) {\n+            synchronized (new TestNestedRelockAtDeopt()) { \/\/ lock eliminated - not escaped allocation\n+                synchronized (TestNestedRelockAtDeopt.class) { \/\/ nested lock eliminated\n+                    synchronized (new TestNestedRelockAtDeopt()) { \/\/ lock eliminated - not escaped allocation\n+                        synchronized (TestNestedRelockAtDeopt.class) { \/\/ nested lock eliminated\n+                            arr.add(new byte[CHUNK]);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    \/\/ Nested locks in inlined method\n+    static void foo() {\n+        synchronized (new TestNestedRelockAtDeopt()) {  \/\/ lock eliminated - not escaped allocation\n+            synchronized (TestNestedRelockAtDeopt.class) {  \/\/ nested lock eliminated when inlined\n+                arr.add(new byte[CHUNK]);\n+            }\n+        }\n+    }\n+\n+    static void test2() {\n+        synchronized (TestNestedRelockAtDeopt.class) {\n+            synchronized (new TestNestedRelockAtDeopt()) {  \/\/ lock eliminated - not escaped allocation\n+                synchronized (TestNestedRelockAtDeopt.class) { \/\/ nested lock eliminated\n+                    foo(); \/\/ Inline\n+                }\n+            }\n+        }\n+    }\n+\n+    \/\/ Nested locks in one method\n+    static void test3(TestNestedRelockAtDeopt obj) {\n+        synchronized (TestNestedRelockAtDeopt.class) {\n+            synchronized (obj) { \/\/ lock not eliminated - external object\n+                synchronized (TestNestedRelockAtDeopt.class) { \/\/ nested lock eliminated\n+                    synchronized (obj) { \/\/ nested lock eliminated\n+                        synchronized (TestNestedRelockAtDeopt.class) { \/\/ nested lock eliminated\n+                            arr.add(new byte[CHUNK]);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    \/\/ Nested locks with different objects in inlined method\n+    static void bar(TestNestedRelockAtDeopt obj) {\n+        synchronized (obj) {  \/\/ nested lock eliminated when inlined\n+            synchronized (TestNestedRelockAtDeopt.class) {  \/\/ nested lock eliminated when inlined\n+                arr.add(new byte[CHUNK]);\n+            }\n+        }\n+    }\n+\n+    static void test4(TestNestedRelockAtDeopt obj) {\n+        synchronized (TestNestedRelockAtDeopt.class) {\n+            synchronized (obj) {  \/\/ lock not eliminated - external object\n+                synchronized (TestNestedRelockAtDeopt.class) { \/\/ nested lock eliminated\n+                    bar(obj); \/\/ Inline\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestNestedRelockAtDeopt.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}