{"files":[{"patch":"@@ -44,0 +44,1 @@\n+import java.util.stream.Collectors;\n@@ -55,0 +56,1 @@\n+import jdk.javadoc.internal.html.HtmlId;\n@@ -56,1 +58,0 @@\n-import jdk.javadoc.internal.html.HtmlTag;\n@@ -58,0 +59,1 @@\n+import jdk.javadoc.internal.html.RawHtml;\n@@ -585,4 +587,44 @@\n-                String aepText = resources.getText(\"doclet.Indirect_Exports_Summary\");\n-                var aepTable = getTable2(Text.of(aepText), indirectPackagesHeader);\n-                addIndirectPackages(aepTable, indirectPackages);\n-                section.add(aepTable);\n+                ModuleElement javaBase = this.utils.elementUtils.getModuleElement(\"java.base\");\n+                if (javaBase != null && indirectPackages.keySet().contains(javaBase)) {\n+                    Map<ModuleElement, SortedSet<PackageElement>> filteredIndirectPackages =\n+                            indirectPackages.entrySet()\n+                                            .stream()\n+                                            .filter(e -> !e.getKey().equals(javaBase))\n+                                            .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n+                    String aepText = resources.getText(\"doclet.Indirect_Exports_Summary\");\n+                    var aepTable = getTable2(Text.of(aepText), indirectPackagesHeader);\n+                    addIndirectPackages(aepTable, filteredIndirectPackages);\n+                    section.add(aepTable);\n+                    \/\/add the preview box:\n+                    section.add(HtmlTree.DIV(HtmlTree.BR()));\n+                    section.add(HtmlTree.DIV(HtmlTree.BR()));\n+                    HtmlId previewRequiresTransitiveId = HtmlId.of(\"preview-requires-transitive-java.base\");\n+                    var previewDiv = HtmlTree.DIV(HtmlStyles.previewBlock);\n+                    previewDiv.setId(previewRequiresTransitiveId);\n+\n+                    Content note =\n+                            RawHtml.of(resources.getText(\"doclet.PreviewJavaSERequiresTransitiveJavaBase\"));\n+\n+                    previewDiv.add(HtmlTree.DIV(HtmlStyles.previewComment, note));\n+                    section.add(previewDiv);\n+\n+                    \/\/add the Indirect Exports\n+                    filteredIndirectPackages =\n+                            indirectPackages.entrySet()\n+                                            .stream()\n+                                            .filter(e -> e.getKey().equals(javaBase))\n+                                            .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n+                    String aepPreviewText = resources.getText(\"doclet.Indirect_Exports_Summary\");\n+                    ContentBuilder tableCaption = new ContentBuilder(\n+                            Text.of(aepPreviewText),\n+                            HtmlTree.SUP(links.createLink(previewRequiresTransitiveId,\n+                                         contents.previewMark)));\n+                    var aepPreviewTable = getTable2(tableCaption, indirectPackagesHeader);\n+                    addIndirectPackages(aepPreviewTable, filteredIndirectPackages);\n+                    section.add(aepPreviewTable);\n+                } else {\n+                    String aepText = resources.getText(\"doclet.Indirect_Exports_Summary\");\n+                    var aepTable = getTable2(Text.of(aepText), indirectPackagesHeader);\n+                    addIndirectPackages(aepTable, indirectPackages);\n+                    section.add(aepTable);\n+                }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleWriter.java","additions":47,"deletions":5,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -427,0 +427,8 @@\n+doclet.PreviewJavaSERequiresTransitiveJavaBase=\\\n+<div>Indirect exports from the <code>java.base<\/code> module are associated \\\n+with the <code>requires transitive java.base<\/code> directive, which is \\\n+a preview feature of the Java language.<\/div>\\\n+<div>Programs can only use <code>requires transitive java.base<\/code> when \\\n+preview features are enabled.<\/div>\\\n+<div>Preview features may be removed in a future release, or upgraded \\\n+to permanent features of the Java Platform.<\/div>\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.nio.file.Path;\n@@ -212,0 +213,14 @@\n+\n+    @Test\n+    public void testRequiresTransitiveJavaBase() {\n+        Path src = Paths.get(testSrc, \"requiresTransitiveJavaBase\");\n+        javadoc(\"-d\", \"out-requires-transitive-java-base\",\n+                \"-XDforcePreview\", \"--enable-preview\", \"-source\", System.getProperty(\"java.specification.version\"),\n+                \"--module-source-path\", src.toString(),\n+                \"--module\", \"m\",\n+                \"--expand-requires\", \"transitive\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"m\/module-summary.html\", true,\n+                    \"Indirect exports from the <code>java.base<\/code> module are\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/TestPreview.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}