{"files":[{"patch":"@@ -982,1 +982,1 @@\n-void *os::Bsd::dlopen_helper(const char *filename, int mode) {\n+void *os::Bsd::dlopen_helper(const char *filename, int mode, char *ebuf, int ebuflen) {\n@@ -1008,2 +1008,18 @@\n-  void * result= ::dlopen(filename, RTLD_LAZY);\n-\n+  void* result;\n+  JFR_ONLY(NativeLibraryLoadEvent load_event(filename, &result);)\n+  result = ::dlopen(filename, RTLD_LAZY);\n+  if (result == nullptr) {\n+    const char* error_report = ::dlerror();\n+    if (error_report == nullptr) {\n+      error_report = \"dlerror returned no error description\";\n+    }\n+    if (ebuf != nullptr && ebuflen > 0) {\n+      ::strncpy(ebuf, error_report, ebuflen-1);\n+      ebuf[ebuflen-1]='\\0';\n+    }\n+    Events::log_dll_message(nullptr, \"Loading shared library %s failed, %s\", filename, error_report);\n+    log_info(os)(\"shared library load of %s failed, %s\", filename, error_report);\n+    JFR_ONLY(load_event.set_error_msg(error_report);)\n+  } else {\n+    Events::log_dll_message(nullptr, \"Loaded shared library %s\", filename);\n+    log_info(os)(\"shared library load of %s was successful\", filename);\n@@ -1011,13 +1027,16 @@\n-  if (result  != nullptr && ! IEEE_subnormal_handling_OK()) {\n-    \/\/ We just dlopen()ed a library that mangled the floating-point\n-    \/\/ flags. Silently fix things now.\n-    int rtn = fesetenv(&default_fenv);\n-    assert(rtn == 0, \"fesetenv must succeed\");\n-    bool ieee_handling_after_issue = IEEE_subnormal_handling_OK();\n-\n-    if (ieee_handling_after_issue) {\n-      Events::log_dll_message(nullptr, \"IEEE subnormal handling had to be corrected after loading %s\", filename);\n-      log_info(os)(\"IEEE subnormal handling had to be corrected after loading %s\", filename);\n-    } else {\n-      Events::log_dll_message(nullptr, \"IEEE subnormal handling could not be corrected after loading %s\", filename);\n-      log_info(os)(\"IEEE subnormal handling could not be corrected after loading %s\", filename);\n+    if (! IEEE_subnormal_handling_OK()) {\n+      \/\/ We just dlopen()ed a library that mangled the floating-point\n+      \/\/ flags. Silently fix things now.\n+      JFR_ONLY(load_event.set_fp_env_correction_attempt(true);)\n+      int rtn = fesetenv(&default_fenv);\n+      assert(rtn == 0, \"fesetenv must succeed\");\n+\n+      if (IEEE_subnormal_handling_OK()) {\n+        Events::log_dll_message(nullptr, \"IEEE subnormal handling had to be corrected after loading %s\", filename);\n+        log_info(os)(\"IEEE subnormal handling had to be corrected after loading %s\", filename);\n+        JFR_ONLY(load_event.set_fp_env_correction_success(true);)\n+      } else {\n+        Events::log_dll_message(nullptr, \"IEEE subnormal handling could not be corrected after loading %s\", filename);\n+        log_info(os)(\"IEEE subnormal handling could not be corrected after loading %s\", filename);\n+        assert(false, \"fesetenv didn't work\");\n+      }\n@@ -1025,3 +1044,0 @@\n-\n-    assert(ieee_handling_after_issue, \"fesetenv didn't work\");\n-  }\n@@ -1029,0 +1045,1 @@\n+  }\n@@ -1040,24 +1057,1 @@\n-  void* result;\n-  JFR_ONLY(NativeLibraryLoadEvent load_event(filename, &result);)\n-  result = os::Bsd::dlopen_helper(filename, RTLD_LAZY);\n-  if (result != nullptr) {\n-    Events::log_dll_message(nullptr, \"Loaded shared library %s\", filename);\n-    \/\/ Successful loading\n-    log_info(os)(\"shared library load of %s was successful\", filename);\n-    return result;\n-  }\n-\n-  const char* error_report = ::dlerror();\n-  if (error_report == nullptr) {\n-    error_report = \"dlerror returned no error description\";\n-  }\n-  if (ebuf != nullptr && ebuflen > 0) {\n-    \/\/ Read system error message into ebuf\n-    ::strncpy(ebuf, error_report, ebuflen-1);\n-    ebuf[ebuflen-1]='\\0';\n-  }\n-  Events::log_dll_message(nullptr, \"Loading shared library %s failed, %s\", filename, error_report);\n-  log_info(os)(\"shared library load of %s failed, %s\", filename, error_report);\n-  JFR_ONLY(load_event.set_error_msg(error_report);)\n-\n-  return nullptr;\n+  return os::Bsd::dlopen_helper(filename, RTLD_LAZY, ebuf, ebuflen);\n@@ -1074,2 +1068,1 @@\n-  JFR_ONLY(NativeLibraryLoadEvent load_event(filename, &result);)\n-  result = os::Bsd::dlopen_helper(filename, RTLD_LAZY);\n+  result = os::Bsd::dlopen_helper(filename, RTLD_LAZY, ebuf, ebuflen);\n@@ -1077,3 +1070,0 @@\n-    Events::log_dll_message(nullptr, \"Loaded shared library %s\", filename);\n-    \/\/ Successful loading\n-    log_info(os)(\"shared library load of %s was successful\", filename);\n@@ -1083,11 +1073,0 @@\n-  Elf32_Ehdr elf_head;\n-\n-  const char* const error_report = ::dlerror();\n-  if (error_report == nullptr) {\n-    error_report = \"dlerror returned no error description\";\n-  }\n-  if (ebuf != nullptr && ebuflen > 0) {\n-    \/\/ Read system error message into ebuf\n-    ::strncpy(ebuf, error_report, ebuflen-1);\n-    ebuf[ebuflen-1]='\\0';\n-  }\n@@ -1096,1 +1075,0 @@\n-  JFR_ONLY(load_event.set_error_msg(error_report);)\n@@ -1105,1 +1083,0 @@\n-\n@@ -1113,0 +1090,1 @@\n+  Elf32_Ehdr elf_head;\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":39,"deletions":61,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  static void *dlopen_helper(const char *path, int mode);\n+  static void *dlopen_helper(const char *path, int mode, char *ebuf, int ebuflen);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1857,0 +1857,1 @@\n+      JFR_ONLY(load_event.set_fp_env_correction_attempt(true);)\n@@ -1859,1 +1860,0 @@\n-      bool ieee_handling_after_issue = IEEE_subnormal_handling_OK();\n@@ -1861,1 +1861,1 @@\n-      if (ieee_handling_after_issue) {\n+      if (IEEE_subnormal_handling_OK()) {\n@@ -1864,0 +1864,1 @@\n+        JFR_ONLY(load_event.set_fp_env_correction_success(true);)\n@@ -1867,0 +1868,1 @@\n+        assert(false, \"fesetenv didn't work\");\n@@ -1868,1 +1870,0 @@\n-      assert(ieee_handling_after_issue, \"fesetenv didn't work\");\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -960,0 +960,2 @@\n+    <Field type=\"boolean\" name=\"fpEnvCorrectionAttempt\" label=\"FPU Environment correction\" description=\"In case of IEEE conformance issues we might reset the FP environment\" \/>\n+    <Field type=\"boolean\" name=\"fpEnvCorrectionSuccess\" label=\"FPU Environment correction result\" description=\"Stores result in case FP environment correction\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-NativeLibraryLoadEvent::NativeLibraryLoadEvent(const char* name, void** result) : JfrNativeLibraryEventBase(name), _result(result) {\n+NativeLibraryLoadEvent::NativeLibraryLoadEvent(const char* name, void** result) : JfrNativeLibraryEventBase(name), _result(result), _fp_env_correction_attempt(false), _fp_env_correction_success(false) {\n@@ -91,0 +91,9 @@\n+static void set_additional_data(EventNativeLibraryLoad& event, const NativeLibraryLoadEvent& helper) {\n+  event.set_fpEnvCorrectionAttempt(helper.get_fp_env_correction_attempt());\n+  event.set_fpEnvCorrectionSuccess(helper.get_fp_env_correction_success());\n+}\n+\n+static void set_additional_data(EventNativeLibraryUnload& event, const NativeLibraryUnloadEvent& helper) {\n+  \/\/ no additional entries atm. for the unload event\n+}\n+\n@@ -92,1 +101,1 @@\n-static void commit(HelperType& helper) {\n+static void commit(const HelperType& helper) {\n@@ -102,0 +111,1 @@\n+  set_additional_data(event, helper);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrNativeLibraryLoadEvent.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+  bool _fp_env_correction_attempt;\n+  bool _fp_env_correction_success;\n@@ -59,0 +61,4 @@\n+  bool get_fp_env_correction_attempt() const { return _fp_env_correction_attempt; }\n+  bool get_fp_env_correction_success() const { return _fp_env_correction_success; }\n+  void set_fp_env_correction_attempt(bool v) { _fp_env_correction_attempt = v; }\n+  void set_fp_env_correction_success(bool v) { _fp_env_correction_success = v; }\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrNativeLibraryLoadEvent.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}