{"files":[{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Robot;\n+\n+\/*\n+ * @test\n+ * @bug 4082078\n+ * @summary Test for bug(s): 4082078, Multiple calls to Choice.insert cause core dump\n+ * @key headful\n+ * @run main ChoiceInsertTest\n+ *\/\n+\n+public class ChoiceInsertTest extends Frame {\n+    Choice c;\n+    Label  l;\n+\n+    private static ChoiceInsertTest choiceInsertTest;\n+\n+    public ChoiceInsertTest() {\n+        c = new Choice();\n+        l = new Label(\"If you see this, the choice insert bug is fixed!\");\n+        c.add(\"Initial choice\");\n+        add(c);\n+    }\n+\n+    public void testInsertion() {\n+        \/\/ inserting 30 or so items aborts Solaris VM\n+        \/\/ in JDK's before 1.1.5\n+        for (int nchoice = 0; nchoice < 30; nchoice++) {\n+            c.insert(\"new choice\", 0);\n+        }\n+        \/\/ if you made it to here the bug is not there anymore...\n+        remove(l);\n+        add(l);\n+        validate();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(() ->{\n+                choiceInsertTest = new ChoiceInsertTest();\n+                choiceInsertTest.setTitle(\"ChoiceInsertTest\");\n+                choiceInsertTest.setLocationRelativeTo(null);\n+                choiceInsertTest.setSize(500, 300);\n+                choiceInsertTest.setLayout(new GridLayout());\n+                choiceInsertTest.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            EventQueue.invokeAndWait(choiceInsertTest::testInsertion);\n+            robot.delay(1000);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (choiceInsertTest != null) {\n+                    choiceInsertTest.dispose();\n+                }\n+            });\n+        }\n+\n+        System.err.println(\"ChoiceInsertTest: Didn't abort VM inserting 30 items, so we passed!\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceInsertTest\/ChoiceInsertTest.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4328557\n+ * @summary Tests that MouseDragged and MouseReleased are triggered on choice\n+ * @library \/open\/test\/jdk\/lib\/client\n+ * @build ExtendedRobot\n+ * @key headful\n+ * @run main ChoiceMouseDragTest\n+ *\/\n+\n+\n+public class ChoiceMouseDragTest extends Frame {\n+    private static final Choice choice = new Choice();\n+\n+    private static ExtendedRobot robot;\n+    private volatile boolean isDragged;\n+    private volatile boolean isReleased;\n+\n+    private static volatile ChoiceMouseDragTest choiceMouseDragTest;\n+\n+    public ChoiceMouseDragTest() {\n+        super(\"ChoiceMouseDragTest\");\n+        this.setLayout(new BorderLayout());\n+        choice.add(\"item-1\");\n+        choice.add(\"item-2\");\n+        choice.add(\"item-3\");\n+        choice.add(\"item-4\");\n+        add(\"Center\", choice);\n+        choice.addMouseListener(new MouseEventHandler());\n+        choice.addMouseMotionListener(new MouseMotionEventHandler());\n+        setSize(400, 200);\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() ->\n+                    choiceMouseDragTest = new ChoiceMouseDragTest());\n+\n+            robot = new ExtendedRobot();\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Point pointToDrag = choice.getLocationOnScreen();\n+            pointToDrag.x += choice.getWidth() - 10;\n+            pointToDrag.y += choice.getHeight() \/ 2 ;\n+\n+            choiceMouseDragTest.test(InputEvent.BUTTON3_DOWN_MASK, pointToDrag);\n+            choiceMouseDragTest.test(InputEvent.BUTTON1_DOWN_MASK, pointToDrag);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (choiceMouseDragTest != null) {\n+                    choiceMouseDragTest.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    void test(int buttonToTest, Point pointToDrag) {\n+        isDragged = false;\n+        isReleased = false;\n+\n+        robot.mouseMove(pointToDrag.x, pointToDrag.y);\n+        robot.waitForIdle();\n+\n+        robot.mousePress(buttonToTest);\n+\n+        robot.glide(pointToDrag.x + 100, pointToDrag.y);\n+        robot.waitForIdle();\n+\n+        robot.mouseRelease(buttonToTest);\n+        robot.waitForIdle();\n+\n+        if (!isReleased || !isDragged) {\n+            throw new RuntimeException((\"Test failed: button %d dragged(received %b) or \" +\n+                    \"released(received %b)\")\n+                    .formatted(buttonToTest, isDragged, isReleased));\n+        }\n+\n+        robot.delay(500);\n+    }\n+\n+    class MouseEventHandler extends MouseAdapter {\n+        public void mousePressed(MouseEvent me) {\n+            System.out.println(me.paramString());\n+        }\n+\n+        public void mouseReleased(MouseEvent me) {\n+            System.out.println(me.paramString());\n+            isReleased = true;\n+        }\n+\n+        public void mouseClicked(MouseEvent me) {\n+            System.out.println(me.paramString());\n+        }\n+    }\n+\n+    class MouseMotionEventHandler extends MouseAdapter {\n+        public void mouseDragged(MouseEvent me) {\n+            System.out.println(me.paramString());\n+            isDragged = true;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceMouseDragTest\/ChoiceMouseDragTest.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseWheelEvent;\n+import java.awt.event.MouseWheelListener;\n+\n+\/*\n+ * @test\n+ * @bug 6253211\n+ * @summary PIT: MouseWheel events not triggered for Choice drop down in XAWT\n+ * @requires (os.family == \"linux\")\n+ * @key headful\n+ * @run main WheelEventsConsumed\n+ *\/\n+\n+public class WheelEventsConsumed extends Frame implements MouseWheelListener\n+{\n+    Robot robot;\n+    Choice choice1 = new Choice();\n+    Point pt;\n+    final static int delay = 100;\n+    boolean mouseWheeled = false;\n+    final static int OUTSIDE_CHOICE = 1;\n+    final static int INSIDE_LIST_OF_CHOICE = 2;\n+    final static int INSIDE_CHOICE_COMPONENT = 3;\n+    static String toolkit;\n+\n+    private static volatile WheelEventsConsumed frame = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        toolkit = Toolkit.getDefaultToolkit().getClass().getName();\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new WheelEventsConsumed();\n+                frame.initAndShow();\n+            });\n+            frame.test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void mouseWheelMoved(MouseWheelEvent me) {\n+        mouseWheeled = true;\n+        System.out.println(me);\n+    }\n+\n+    public void initAndShow() {\n+        setTitle(\"WheelEventsConsumed test\");\n+        for (int i = 1; i < 10; i++) {\n+            choice1.add(\"item-0\" + i);\n+        }\n+\n+        choice1.addMouseWheelListener(this);\n+        add(choice1);\n+        setLayout(new FlowLayout());\n+        setSize(200, 200);\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+        validate();\n+    }\n+\n+    public void test() {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+            robot.waitForIdle();\n+            robot.delay(delay * 5);\n+            testMouseWheel(1, OUTSIDE_CHOICE);\n+            robot.delay(delay);\n+            testMouseWheel(-1, INSIDE_LIST_OF_CHOICE);\n+            robot.delay(delay);\n+            testMouseWheel(1, INSIDE_CHOICE_COMPONENT);\n+            robot.delay(delay);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(\"Test failed. Exception thrown: \" + e);\n+        }\n+    }\n+\n+    public void testMouseWheel(int amt, int mousePosition) {\n+        pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth() \/ 2, pt.y + choice1.getHeight() \/ 2);\n+\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(50);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(50);\n+\n+        switch (mousePosition) {\n+            case OUTSIDE_CHOICE:\n+                robot.mouseMove(pt.x + choice1.getWidth() * 3 \/ 2, pt.y + choice1.getHeight() \/ 2);\n+                break;\n+            case INSIDE_LIST_OF_CHOICE:\n+                robot.mouseMove(pt.x + choice1.getWidth() \/ 2, pt.y + choice1.getHeight() * 4);\n+                break;\n+            case INSIDE_CHOICE_COMPONENT:\n+                robot.mouseMove(pt.x + choice1.getWidth() \/ 2, pt.y + choice1.getHeight() \/ 2);\n+                break;\n+        }\n+\n+        robot.delay(delay);\n+        for (int i = 0; i < 10; i++) {\n+            robot.mouseWheel(amt);\n+            robot.delay(delay);\n+        }\n+\n+        if (!mouseWheeled) {\n+            if (toolkit.equals(\"sun.awt.windows.WToolkit\") && mousePosition == OUTSIDE_CHOICE) {\n+                System.out.println(\"Passed. Separate case on Win32. Choice generated MouseWheel events\" + mousePosition);\n+            } else {\n+                throw new RuntimeException(\"Test failed. Choice should generate MOUSE_WHEEL events.\" + mousePosition);\n+            }\n+        } else {\n+            System.out.println(\"Passed. Choice generated MouseWheel events\" + mousePosition);\n+        }\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.delay(10);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+        mouseWheeled = false;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/WheelEventsConsumed\/WheelEventsConsumed.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"}]}