{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -738,1 +738,1 @@\n-            });\n+            }, false);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Analyzer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,0 +137,1 @@\n+        private final boolean passOnNonDeferrable;\n@@ -142,1 +143,0 @@\n-        @SuppressWarnings(\"this-escape\")\n@@ -144,0 +144,5 @@\n+            this(log, filter, true);\n+        }\n+\n+        @SuppressWarnings(\"this-escape\")\n+        public DeferredDiagnosticHandler(Log log, Predicate<JCDiagnostic> filter, boolean passOnNonDeferrable) {\n@@ -145,0 +150,1 @@\n+            this.passOnNonDeferrable = passOnNonDeferrable;\n@@ -150,1 +156,3 @@\n-            if (!diag.isFlagSet(JCDiagnostic.DiagnosticFlag.NON_DEFERRABLE) &&\n+            boolean deferrable = !passOnNonDeferrable ||\n+                                 !diag.isFlagSet(JCDiagnostic.DiagnosticFlag.NON_DEFERRABLE);\n+            if (deferrable &&\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8349132\n+ * @summary Check behavior of the diamond analyzer\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main Diamond\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class Diamond extends TestRunner {\n+\n+    private final ToolBox tb;\n+\n+    public static void main(String... args) throws Exception {\n+        new Diamond().runTests();\n+    }\n+\n+    Diamond() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test \/\/JDK-8349132:\n+    public void testMissingClassfileForConstructorParamType(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path lib = current.resolve(\"lib\");\n+        Path libSrc = lib.resolve(\"src\");\n+        Path libClasses = lib.resolve(\"classes\");\n+        tb.writeJavaFiles(libSrc,\n+                          \"\"\"\n+                          package test;\n+                          public class Utils {\n+                              public static void run(Task<Param> uat) {\n+                              }\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public interface Task<T> {\n+                              public void run(T t) throws Exception;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class Param {\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(libClasses);\n+\n+        new JavacTask(tb)\n+            .outdir(libClasses)\n+            .files(tb.findJavaFiles(libSrc))\n+            .run(Task.Expect.SUCCESS)\n+            .writeAll();\n+\n+        Files.delete(libClasses.resolve(\"test\").resolve(\"Param.class\"));\n+\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          package test;\n+                          public class Test {\n+                              private static void test() {\n+                                  Utils.run(new Task<Param>() {\n+                                      @Override\n+                                      public void run(Param parameter) throws Exception {\n+                                      }\n+                                  });\n+                              }\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        var out = new JavacTask(tb)\n+            .options(\"-XDfind=diamond\",\n+                     \"-XDshould-stop.at=FLOW\",\n+                     \"-XDrawDiagnostics\")\n+            .classpath(libClasses)\n+            .outdir(classes)\n+            .files(tb.findJavaFiles(src))\n+            .run(Task.Expect.FAIL)\n+            .writeAll()\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        var expectedOut = List.of(\n+            \"Test.java:4:28: compiler.err.cant.resolve.location: kindname.class, Param, , , (compiler.misc.location: kindname.class, test.Test, null)\",\n+            \"Test.java:6:29: compiler.err.cant.resolve: kindname.class, Param, , \",\n+            \"2 errors\"\n+        );\n+\n+        if (!Objects.equals(expectedOut, out)) {\n+            throw new AssertionError(\"Incorrect Output, expected: \" + expectedOut +\n+                                      \", actual: \" + out);\n+\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/analyzer\/Diamond.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"}]}