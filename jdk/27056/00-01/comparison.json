{"files":[{"patch":"@@ -154,2 +154,2 @@\n-  const int  sopc = prototype.scalar_opcode();\n-  const uint vlen = prototype.vector_length();\n+  const int sopc     = prototype.scalar_opcode();\n+  const uint vlen    = prototype.vector_length();\n","filename":"src\/hotspot\/share\/opto\/superwordVTransformBuilder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -749,1 +749,1 @@\n-  return VTransformApplyResult::make_vector(vn, _vlen, vn->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn);\n@@ -771,1 +771,1 @@\n-  return VTransformApplyResult::make_vector(vn, _vlen, vn->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn);\n@@ -783,1 +783,1 @@\n-  return VTransformApplyResult::make_vector(vn, _vlen, vn->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn);\n@@ -787,4 +787,1 @@\n-  uint    vlen = vector_length();\n-  int     vopc = _vector_opcode;\n-  BasicType bt = element_basic_type();\n-  const TypeVect* vt = TypeVect::make(bt, vlen);\n+  const TypeVect* vt = TypeVect::make(element_basic_type(), vector_length());\n@@ -799,1 +796,1 @@\n-    vn = VectorNode::make(vopc, in1, in2, vt); \/\/ unary and binary\n+    vn = VectorNode::make(_vector_opcode, in1, in2, vt); \/\/ unary and binary\n@@ -801,1 +798,1 @@\n-    vn = VectorNode::make(vopc, in1, in2, in3, vt); \/\/ ternary\n+    vn = VectorNode::make(_vector_opcode, in1, in2, in3, vt); \/\/ ternary\n@@ -805,1 +802,1 @@\n-  return VTransformApplyResult::make_vector(vn, vlen, vn->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn);\n@@ -810,1 +807,1 @@\n-  int  sopc = scalar_opcode();\n+  int sopc  = scalar_opcode();\n@@ -820,1 +817,1 @@\n-  return VTransformApplyResult::make_vector(vn, vlen, vn->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn);\n@@ -824,5 +821,3 @@\n-  uint    vlen = vector_length();\n-  int     sopc = scalar_opcode();\n-  BasicType bt = element_basic_type();\n-  const TypeVect* vt = TypeVect::make(bt, vlen);\n-  assert(VectorNode::is_reinterpret_opcode(sopc), \"scalar opcode must be reinterpret\");\n+  const TypeVect* dst_vt = TypeVect::make(element_basic_type(), vector_length());\n+  const TypeVect* src_vt = TypeVect::make(_src_bt,              vector_length());\n+  assert(VectorNode::is_reinterpret_opcode(scalar_opcode()), \"scalar opcode must be reinterpret\");\n@@ -831,2 +826,1 @@\n-  const TypeVect* src_vt = TypeVect::make(_src_bt, vlen);\n-  VectorNode* vn = new VectorReinterpretNode(in1, src_vt, vt);\n+  VectorNode* vn = new VectorReinterpretNode(in1, src_vt, dst_vt);\n@@ -835,1 +829,1 @@\n-  return VTransformApplyResult::make_vector(vn, vlen, vn->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn);\n@@ -839,2 +833,1 @@\n-  uint    vlen = vector_length();\n-  BasicType bt = element_basic_type();\n+  const TypeVect* vt = TypeVect::make(element_basic_type(), vector_length());\n@@ -853,1 +846,0 @@\n-  const TypeVect* vt = TypeVect::make(bt, vlen);\n@@ -856,1 +848,1 @@\n-  return VTransformApplyResult::make_vector(vn, vlen, vn->vect_type()->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn);\n@@ -860,4 +852,0 @@\n-  int     sopc = scalar_opcode();\n-  uint    vlen = vector_length();\n-  BasicType bt = element_basic_type();\n-\n@@ -867,1 +855,1 @@\n-  ReductionNode* vn = ReductionNode::make(sopc, nullptr, init, vec, bt);\n+  ReductionNode* vn = ReductionNode::make(scalar_opcode(), nullptr, init, vec, element_basic_type());\n@@ -869,1 +857,1 @@\n-  return VTransformApplyResult::make_vector(vn, vlen, vn->vect_type()->length_in_bytes());\n+  return VTransformApplyResult::make_vector(vn, vn->vect_type());\n@@ -873,2 +861,2 @@\n-  int     sopc = scalar_opcode();\n-  uint    vlen = vector_length();\n+  int sopc     = scalar_opcode();\n+  uint vlen    = vector_length();\n@@ -876,0 +864,1 @@\n+\n@@ -899,1 +888,1 @@\n-  return VTransformApplyResult::make_vector(vn, vlen, vn->memory_size());\n+  return VTransformApplyResult::make_vector(vn, vn->vect_type());\n@@ -903,2 +892,3 @@\n-  int     sopc = scalar_opcode();\n-  uint    vlen = vector_length();\n+  int sopc  = scalar_opcode();\n+  uint vlen = vector_length();\n+\n@@ -915,1 +905,1 @@\n-  return VTransformApplyResult::make_vector(vn, vlen, vn->memory_size());\n+  return VTransformApplyResult::make_vector(vn, vn->vect_type());\n@@ -930,1 +920,2 @@\n-  \/\/ The control is not always correct, but we set major_progress anyway.\n+  \/\/ Using the cl is sometimes not the most accurate, but still correct. We do not have to be\n+  \/\/ perfectly accurate, because we will set major_progress anyway.\n","filename":"src\/hotspot\/share\/opto\/vtransform.cpp","additions":28,"deletions":37,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"opto\/vectornode.hpp\"\n@@ -94,3 +95,6 @@\n-  static VTransformApplyResult make_vector(Node* n, uint vector_length, uint vector_width) {\n-    assert(vector_length > 0 && vector_width > 0, \"must have nonzero size\");\n-    return VTransformApplyResult(n, vector_length, vector_width);\n+  static VTransformApplyResult make_vector(VectorNode* vn) {\n+    return VTransformApplyResult(vn, vn->length(), vn->length_in_bytes());\n+  }\n+\n+  static VTransformApplyResult make_vector(Node* n, const TypeVect* vt) {\n+    return VTransformApplyResult(n, vt->length(), vt->length_in_bytes());\n","filename":"src\/hotspot\/share\/opto\/vtransform.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}