{"files":[{"patch":"@@ -358,0 +358,1 @@\n+  _previous_gc_allocated(0),\n@@ -367,6 +368,6 @@\n-    if (allocated >= _last_sample_value) {\n-      rate = instantaneous_rate(now, allocated);\n-      _rate.add(rate);\n-      _rate_avg.add(_rate.avg());\n-    }\n-\n+    \/\/ _previous_gc_allocated will be non-zero only on the first sample added since the start of the current GC.  In the\n+    \/\/ event that no data was sampled during the preceding cycle, _previous_gc_allocated will represent the accumalation\n+    \/\/ of multiple GCs.\n+    rate = instantaneous_rate(now, _previous_gc_allocated + allocated);\n+    _rate.add(rate);\n+    _rate_avg.add(_rate.avg());\n@@ -375,0 +376,1 @@\n+    _previous_gc_allocated = 0;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,0 +44,8 @@\n+\n+  void recalibrate(size_t bytes_allocated) {\n+    \/\/ Under normal conditions, _previous_gc_allocated equals zero on entry to this function.  It will only be non-zero\n+    \/\/ if allocation rate was never sampled during previous GC cycle.\n+    _previous_gc_allocated += bytes_allocated - _last_sample_value;\n+    _last_sample_value = 0;\n+  }\n+\n@@ -50,0 +58,1 @@\n+  size_t _previous_gc_allocated;\n@@ -153,0 +162,5 @@\n+\n+public:\n+  virtual void recalibrate_alloc_rate_last_sample(size_t bytes_allocated) override {\n+    _allocation_rate.recalibrate(bytes_allocated);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -242,0 +242,4 @@\n+  virtual void recalibrate_alloc_rate_last_sample(size_t bytes_allocated) {\n+    \/\/ do nothing\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2323,0 +2323,1 @@\n+    size_t bytes_allocated = young_generation()->bytes_allocated_since_gc_start();\n@@ -2325,0 +2326,4 @@\n+    young_generation()->heuristics()->recalibrate_alloc_rate_last_sample(bytes_allocated);\n+  } else {\n+    size_t bytes_allocated = global_generation()->bytes_allocated_since_gc_start();\n+    heuristics()->recalibrate_alloc_rate_last_sample(bytes_allocated);\n@@ -2326,1 +2331,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}