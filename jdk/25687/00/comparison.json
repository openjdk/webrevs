{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,3 +38,0 @@\n-  product(bool, UseOprofile, false,                                     \\\n-        \"(Deprecated) enable support for Oprofile profiler\")            \\\n-                                                                        \\\n","filename":"src\/hotspot\/os\/linux\/globals_linux.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2823,38 +2823,0 @@\n-\/\/ Rationale behind this function:\n-\/\/  current (Mon Apr 25 20:12:18 MSD 2005) oprofile drops samples without executable\n-\/\/  mapping for address (see lookup_dcookie() in the kernel module), thus we cannot get\n-\/\/  samples for JITted code. Here we create private executable mapping over the code cache\n-\/\/  and then we can use standard (well, almost, as mapping can change) way to provide\n-\/\/  info for the reporting script by storing timestamp and location of symbol\n-void linux_wrap_code(char* base, size_t size) {\n-  static volatile jint cnt = 0;\n-\n-  static_assert(sizeof(off_t) == 8, \"Expected Large File Support in this file\");\n-\n-  if (!UseOprofile) {\n-    return;\n-  }\n-\n-  char buf[PATH_MAX+1];\n-  int num = Atomic::add(&cnt, 1);\n-\n-  snprintf(buf, sizeof(buf), \"%s\/hs-vm-%d-%d\",\n-           os::get_temp_directory(), os::current_process_id(), num);\n-  unlink(buf);\n-\n-  int fd = ::open(buf, O_CREAT | O_RDWR, S_IRWXU);\n-\n-  if (fd != -1) {\n-    off_t rv = ::lseek(fd, size-2, SEEK_SET);\n-    if (rv != (off_t)-1) {\n-      if (::write(fd, \"\", 1) == 1) {\n-        mmap(base, size,\n-             PROT_READ|PROT_WRITE|PROT_EXEC,\n-             MAP_PRIVATE|MAP_FIXED|MAP_NORESERVE, fd, 0);\n-      }\n-    }\n-    ::close(fd);\n-    unlink(buf);\n-  }\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -192,8 +192,0 @@\n-void CodeHeap::on_code_mapping(char* base, size_t size) {\n-#ifdef LINUX\n-  extern void linux_wrap_code(char* base, size_t size);\n-  linux_wrap_code(base, size);\n-#endif\n-}\n-\n-\n@@ -216,1 +208,0 @@\n-  on_code_mapping(_memory.low(), _memory.committed_size());\n@@ -253,1 +244,0 @@\n-    on_code_mapping(base, dm);\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,3 +149,0 @@\n-  \/\/ to perform additional actions on creation of executable code\n-  void on_code_mapping(char* base, size_t size);\n-\n","filename":"src\/hotspot\/share\/memory\/heap.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -533,1 +533,0 @@\n-  { \"UseOprofile\",                  JDK_Version::jdk(25), JDK_Version::jdk(26), JDK_Version::jdk(27) },\n@@ -545,0 +544,3 @@\n+#ifdef LINUX\n+  { \"UseOprofile\",                  JDK_Version::jdk(25), JDK_Version::jdk(26), JDK_Version::jdk(27) },\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}