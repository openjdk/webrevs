{"files":[{"patch":"@@ -2670,1 +2670,1 @@\n-                return loader.nameAndId();\n+                return loader != null ? loader.nameAndId() : \"null\";\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4227192 8004928 8072656\n+ * @bug 4227192 8004928 8072656 8319436\n@@ -31,1 +31,1 @@\n- * @run main ClassRestrictions\n+ * @run junit ClassRestrictions\n@@ -40,0 +40,6 @@\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -55,3 +61,16 @@\n-    public static final String nonPublicIntrfaceName = \"java.util.zip.ZipConstants\";\n-\n-    public static void main(String[] args) {\n+    static Stream<Arguments> proxyInterfaces() {\n+        return Stream.of(\n+                \/*\n+                 * All of the Class objects in the interfaces array must represent\n+                 * interfaces, not classes or primitive types.\n+                 *\/\n+                Arguments.of(new Class<?>[] { Object.class }, \"proxy class created with java.lang.Object as interface\"),\n+                Arguments.of(new Class<?>[] { Integer.TYPE }, \"proxy class created with int.class as interface\"),\n+                Arguments.of(new Class<?>[] { Bar.class, Bar.class }, \"proxy class created with repeated interfaces\"),\n+                \/*\n+                 * No two interfaces may each have a method with the same name and\n+                 * parameter signature but different return type.\n+                 *\/\n+                Arguments.of(new Class<?>[] { Bar.class, Baz.class }, \"proxy class created with conflicting methods\")\n+        );\n+    }\n@@ -59,2 +78,15 @@\n-        System.err.println(\n-            \"\\nTest of restrictions on parameters to Proxy.getProxyClass\\n\");\n+    \/*\n+     * Test valid interfaces\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"proxyInterfaces\")\n+    void testForName(Class<?>[] interfaces, String message) {\n+        ClassLoader loader = ClassRestrictions.class.getClassLoader();\n+        try {\n+            var proxyClass = Proxy.getProxyClass(loader, interfaces);\n+            throw new Error(message);\n+        } catch (IllegalArgumentException e) {\n+            System.err.println(e.getMessage());\n+            \/\/ assume exception is for intended failure\n+        }\n+    }\n@@ -62,0 +94,13 @@\n+    private static final String nonPublicIntrfaceName = \"java.util.zip.ZipConstants\";\n+\n+    \/*\n+     * All non-public interfaces must be in the same package.\n+     *\/\n+    @Test\n+    void testNonPublicIntfs() throws Exception {\n+        Class<?> nonPublic1 = Bashful.class;\n+        Class<?> nonPublic2 = Class.forName(nonPublicIntrfaceName);\n+        if (Modifier.isPublic(nonPublic2.getModifiers())) {\n+            throw new Error(\"Interface \" + nonPublicIntrfaceName +\n+                            \" is public and need to be changed!\");\n+        }\n@@ -64,104 +109,8 @@\n-            Class<?>[] interfaces;\n-            Class<?> proxyClass;\n-\n-            \/*\n-             * All of the Class objects in the interfaces array must represent\n-             * interfaces, not classes or primitive types.\n-             *\/\n-            try {\n-                interfaces = new Class<?>[] { Object.class };\n-                proxyClass = Proxy.getProxyClass(loader, interfaces);\n-                throw new Error(\n-                    \"proxy class created with java.lang.Object as interface\");\n-            } catch (IllegalArgumentException e) {\n-                e.printStackTrace();\n-                System.err.println();\n-                \/\/ assume exception is for intended failure\n-            }\n-            try {\n-                interfaces = new Class<?>[] { Integer.TYPE };\n-                proxyClass = Proxy.getProxyClass(loader, interfaces);\n-                throw new Error(\n-                    \"proxy class created with int.class as interface\");\n-            } catch (IllegalArgumentException e) {\n-                e.printStackTrace();\n-                System.err.println();\n-                \/\/ assume exception is for intended failure\n-            }\n-\n-            \/*\n-             * No two elements in the interfaces array may refer to identical\n-             * Class objects.\n-             *\/\n-            try {\n-                interfaces = new Class<?>[] { Bar.class, Bar.class };\n-                proxyClass = Proxy.getProxyClass(loader, interfaces);\n-                throw new Error(\n-                    \"proxy class created with repeated interfaces\");\n-            } catch (IllegalArgumentException e) {\n-                e.printStackTrace();\n-                System.err.println();\n-                \/\/ assume exception is for intended failure\n-            }\n-\n-            \/*\n-             * All of the interfaces types must be visible by name though the\n-             * specified class loader.\n-             *\/\n-            String[] cpaths = System.getProperty(\"test.classes\", \".\")\n-                                    .split(File.pathSeparator);\n-            URL[] urls = new URL[cpaths.length];\n-            for (int i=0; i < cpaths.length; i++) {\n-                urls[i] = Paths.get(cpaths[i]).toUri().toURL();\n-            }\n-            ClassLoader altLoader = new URLClassLoader(urls, null);\n-            Class altBarClass;\n-            altBarClass = Class.forName(Bar.class.getName(), false, altLoader);\n-            try {\n-                interfaces = new Class<?>[] { altBarClass };\n-                proxyClass = Proxy.getProxyClass(loader, interfaces);\n-                throw new Error(\n-                    \"proxy class created with interface \" +\n-                    \"not visible to class loader\");\n-            } catch (IllegalArgumentException e) {\n-                e.printStackTrace();\n-                System.err.println();\n-                \/\/ assume exception is for intended failure\n-            }\n-\n-            \/*\n-             * All non-public interfaces must be in the same package.\n-             *\/\n-            Class<?> nonPublic1 = Bashful.class;\n-            Class<?> nonPublic2 = Class.forName(nonPublicIntrfaceName);\n-            if (Modifier.isPublic(nonPublic2.getModifiers())) {\n-                throw new Error(\n-                    \"Interface \" + nonPublicIntrfaceName +\n-                    \" is public and need to be changed!\");\n-            }\n-            try {\n-                interfaces = new Class<?>[] { nonPublic1, nonPublic2 };\n-                proxyClass = Proxy.getProxyClass(loader, interfaces);\n-                throw new Error(\n-                    \"proxy class created with two non-public interfaces \" +\n-                    \"in different packages\");\n-            } catch (IllegalArgumentException e) {\n-                e.printStackTrace();\n-                System.err.println();\n-                \/\/ assume exception is for intended failure\n-            }\n-\n-            \/*\n-             * No two interfaces may each have a method with the same name and\n-             * parameter signature but different return type.\n-             *\/\n-            try {\n-                interfaces = new Class<?>[] { Bar.class, Baz.class };\n-                proxyClass = Proxy.getProxyClass(loader, interfaces);\n-                throw new Error(\n-                    \"proxy class created with conflicting methods\");\n-            } catch (IllegalArgumentException e) {\n-                e.printStackTrace();\n-                System.err.println();\n-                \/\/ assume exception is for intended failure\n-            }\n+            var interfaces = new Class<?>[] { nonPublic1, nonPublic2 };\n+            var proxyClass = Proxy.getProxyClass(loader, interfaces);\n+            throw new Error(\"proxy class created with two non-public interfaces \" +\n+                            \"in different packages\");\n+        } catch (IllegalArgumentException e) {\n+            System.err.println(e.getMessage());\n+        }\n+    }\n@@ -169,4 +118,5 @@\n-            \/*\n-             * All components of this test have passed.\n-             *\/\n-            System.err.println(\"\\nTEST PASSED\");\n+    static Stream<ClassLoader> loaders() {\n+        return Stream.of(null,\n+                         ClassLoader.getPlatformClassLoader(),\n+                         ClassLoader.getSystemClassLoader());\n+    }\n@@ -174,4 +124,21 @@\n-        } catch (Throwable e) {\n-            System.err.println(\"\\nTEST FAILED:\");\n-            e.printStackTrace();\n-            throw new Error(\"TEST FAILED: \", e);\n+    private static final String[] CPATHS = System.getProperty(\"test.classes\", \".\")\n+                                                 .split(File.pathSeparator);\n+    \/*\n+     * All of the interfaces types must be visible by name though the\n+     * specified class loader.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"loaders\")\n+    void testNonVisibleInterface(ClassLoader loader) throws Exception {\n+        URL[] urls = new URL[CPATHS.length];\n+        for (int i = 0; i < CPATHS.length; i++) {\n+            urls[i] = Paths.get(CPATHS[i]).toUri().toURL();\n+        }\n+        ClassLoader altLoader = new URLClassLoader(urls, null);\n+        Class<?> altBarClass = Class.forName(Bar.class.getName(), false, altLoader);\n+        try {\n+            var interfaces = new Class<?>[]{ altBarClass };\n+            var proxyClass = Proxy.getProxyClass(loader, interfaces);\n+            throw new Error(\"proxy class created with interface not visible to class loader\");\n+        } catch (IllegalArgumentException e) {\n+            System.err.println(e.getMessage());\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/ClassRestrictions.java","additions":87,"deletions":120,"binary":false,"changes":207,"status":"modified"}]}