{"files":[{"patch":"@@ -117,1 +117,1 @@\n-  typedef RBTree<K, V, COMPARATOR, ALLOCATOR>::RBNode NodeType;\n+  typedef TreeType::RBNode NodeType;\n@@ -281,1 +281,1 @@\n-  \/\/ If COMPARATOR::cmp(a, b) behaves canonically (\"1\" for a < b), this will the smallest key value.\n+  \/\/ If COMPARATOR::cmp(a, b) behaves canonically (positive value for a > b), this will the smallest key value.\n@@ -292,1 +292,1 @@\n-  \/\/ If COMPARATOR::cmp(a, b) behaves canonically (\"1\" for a < b), this will the largest key value.\n+  \/\/ If COMPARATOR::cmp(a, b) behaves canonically (positive value for a > b), this will the largest key value.\n@@ -303,2 +303,0 @@\n-\n-  \/\/ Returns rightmost node (smallest key). Returns nullptr if tree is empty.\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -490,0 +490,1 @@\n+      assert(stack_idx <= (int)(sizeof(to_visit)\/sizeof(to_visit[0])), \"stack too deep\");\n@@ -572,1 +573,1 @@\n-  depth ++;\n+  depth++;\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -549,1 +549,5 @@\n-  static int cmp(const void* a, const void* b) { return a == b ? 0 : (a > b ? 1 : -1); }\n+  static int cmp(const void* a, const void* b) {\n+    const uintptr_t ai = p2u(a);\n+    const uintptr_t bi = p2u(b);\n+    return ai == bi ? 0 : (ai > bi ? 1 : -1);\n+  }\n@@ -575,1 +579,0 @@\n-  \/\/ tty->print_cr(\"%s\", ss.base());\n@@ -600,1 +603,0 @@\n-    \/\/ tty->print_cr(\"%s\", ss.base());\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}