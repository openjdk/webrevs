{"files":[{"patch":"@@ -33,0 +33,2 @@\n+class outputStream;\n+\n@@ -46,1 +48,1 @@\n-\n+  typedef RBTree<K, V, COMPARATOR, ALLOCATOR> TreeType;\n@@ -64,1 +66,1 @@\n-    DEBUG_ONLY(bool _visited);\n+    DEBUG_ONLY(mutable bool _visited);\n@@ -70,0 +72,1 @@\n+    void set_val(const V& v) { _value = v; }\n@@ -103,1 +106,1 @@\n-    RBNode* prev();\n+    const RBNode* prev() const;\n@@ -105,1 +108,1 @@\n-    RBNode* next();\n+    const RBNode* next() const;\n@@ -110,3 +113,5 @@\n-                size_t& tree_depth, bool expect_visited);\n-#endif \/\/ ASSERT\n-  };\n+                size_t& tree_depth, bool expect_visited) const;\n+  #endif \/\/ ASSERT\n+  }; \/\/ End: RBNode\n+\n+  typedef TreeType::RBNode NodeType;\n@@ -116,1 +121,1 @@\n-  DEBUG_ONLY(bool _expected_visited);\n+  DEBUG_ONLY(mutable bool _expected_visited);\n@@ -151,0 +156,2 @@\n+  void print_node_on(outputStream* st, int depth, const NodeType* n) const;\n+\n@@ -159,1 +166,1 @@\n-  size_t size() { return _num_nodes; }\n+  size_t size() const { return _num_nodes; }\n@@ -260,1 +267,1 @@\n-        static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->closest_leq(key));\n+        static_cast<const TreeType*>(this)->closest_leq(key));\n@@ -265,1 +272,1 @@\n-        static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->closest_gt(key));\n+        static_cast<const TreeType*>(this)->closest_gt(key));\n@@ -270,1 +277,1 @@\n-        static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->closest_geq(key));\n+        static_cast<const TreeType*>(this)->closest_geq(key));\n@@ -273,0 +280,25 @@\n+  \/\/ Returns leftmost node, nullptr if tree is empty.\n+  \/\/ If COMPARATOR::cmp(a, b) behaves canonically (positive value for a > b), this will the smallest key value.\n+  const RBNode* leftmost() const {\n+    RBNode* n = _root, *n2 = nullptr;\n+    while (n != nullptr) {\n+      n2 = n;\n+      n = n->_left;\n+    }\n+    return n2;\n+  }\n+\n+  \/\/ Returns rightmost node, nullptr if tree is empty.\n+  \/\/ If COMPARATOR::cmp(a, b) behaves canonically (positive value for a > b), this will the largest key value.\n+  const RBNode* rightmost() const {\n+    RBNode* n = _root, *n2 = nullptr;\n+    while (n != nullptr) {\n+      n2 = n;\n+      n = n->_right;\n+    }\n+    return n2;\n+  }\n+\n+  RBNode* leftmost()  { return const_cast<NodeType*>(static_cast<const TreeType*>(this)->leftmost()); }\n+  RBNode* rightmost() { return const_cast<NodeType*>(static_cast<const TreeType*>(this)->rightmost()); }\n+\n@@ -283,1 +315,1 @@\n-  Range find_enclosing_range(K key) {\n+  Range find_enclosing_range(K key) const {\n@@ -294,1 +326,1 @@\n-        static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->find_node(key));\n+        static_cast<const TreeType*>(this)->find_node(key));\n@@ -314,1 +346,1 @@\n-  void visit_range_in_order(const K& from, const K& to, F f);\n+  void visit_range_in_order(const K& from, const K& to, F f) const;\n@@ -316,1 +348,0 @@\n-#ifdef ASSERT\n@@ -318,2 +349,3 @@\n-  void verify_self();\n-#endif \/\/ ASSERT\n+  void verify_self() const NOT_DEBUG({});\n+\n+  void print_on(outputStream* st) const;\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":50,"deletions":18,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -30,0 +31,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -90,3 +92,3 @@\n-inline typename RBTree<K, V, COMPARATOR, ALLOCATOR>::RBNode*\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::RBNode::prev() {\n-  RBNode* node = this;\n+inline const typename RBTree<K, V, COMPARATOR, ALLOCATOR>::RBNode*\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::RBNode::prev() const {\n+  const RBNode* node = this;\n@@ -108,3 +110,3 @@\n-inline typename RBTree<K, V, COMPARATOR, ALLOCATOR>::RBNode*\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::RBNode::next() {\n-  RBNode* node = this;\n+inline const typename RBTree<K, V, COMPARATOR, ALLOCATOR>::RBNode*\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::RBNode::next() const {\n+  const RBNode* node = this;\n@@ -129,1 +131,1 @@\n-    size_t& tree_depth, bool expect_visited) {\n+    size_t& tree_depth, bool expect_visited) const {\n@@ -482,1 +484,1 @@\n-  RBNode* to_visit[64];\n+  const RBNode* to_visit[64];\n@@ -484,1 +486,1 @@\n-  RBNode* head = _root;\n+  const RBNode* head = _root;\n@@ -488,0 +490,1 @@\n+      assert(stack_idx <= (int)(sizeof(to_visit)\/sizeof(to_visit[0])), \"stack too deep\");\n@@ -498,1 +501,1 @@\n-inline void RBTree<K, V, COMPARATOR, ALLOCATOR>::visit_range_in_order(const K& from, const K& to, F f) {\n+inline void RBTree<K, V, COMPARATOR, ALLOCATOR>::visit_range_in_order(const K& from, const K& to, F f) const {\n@@ -500,1 +503,1 @@\n-  RBNode* curr = closest_geq(from);\n+  const RBNode* curr = closest_geq(from);\n@@ -502,1 +505,1 @@\n-  RBNode* end = closest_geq(to);\n+  const RBNode* const end = closest_geq(to);\n@@ -512,1 +515,1 @@\n-inline void RBTree<K, V, COMPARATOR, ALLOCATOR>::verify_self() {\n+inline void RBTree<K, V, COMPARATOR, ALLOCATOR>::verify_self() const {\n@@ -541,0 +544,45 @@\n+template <typename T,\n+          ENABLE_IF(std::is_integral<T>::value),\n+          ENABLE_IF(std::is_signed<T>::value)>\n+void print_T(outputStream* st, T x) {\n+  st->print(INT64_FORMAT, (int64_t)x);\n+}\n+\n+template <typename T,\n+          ENABLE_IF(std::is_integral<T>::value),\n+          ENABLE_IF(std::is_unsigned<T>::value)>\n+void print_T(outputStream* st, T x) {\n+  st->print(UINT64_FORMAT, (uint64_t)x);\n+}\n+\n+template <typename T,\n+          ENABLE_IF(std::is_pointer<T>::value)>\n+void print_T(outputStream* st, T x) {\n+  st->print(PTR_FORMAT, p2i(x));\n+}\n+\n+template <typename K, typename V, typename COMPARATOR, typename ALLOCATOR>\n+void RBTree<K, V, COMPARATOR, ALLOCATOR>::print_node_on(outputStream* st, int depth, const NodeType* n) const {\n+  st->print(\"(%d)\", depth);\n+  st->sp(1 + depth * 2);\n+  st->print(\"@\" PTR_FORMAT \": [\", p2i(n));\n+  print_T<K>(st, n->key());\n+  st->print(\"] = \");\n+  print_T<V>(st, n->val());\n+  st->cr();\n+  depth++;\n+  if (n->_right != nullptr) {\n+    print_node_on(st, depth, n->_right);\n+  }\n+  if (n->_left != nullptr) {\n+    print_node_on(st, depth, n->_left);\n+  }\n+}\n+\n+template <typename K, typename V, typename COMPARATOR, typename ALLOCATOR>\n+void RBTree<K, V, COMPARATOR, ALLOCATOR>::print_on(outputStream* st) const {\n+  if (_root != nullptr) {\n+    print_node_on(st, 0, _root);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":61,"deletions":13,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -75,7 +75,0 @@\n-#ifdef ASSERT\n-  template<typename K, typename V, typename CMP, typename ALLOC>\n-  void verify_it(RBTree<K, V, CMP, ALLOC>& t) {\n-    t.verify_self();\n-  }\n-#endif \/\/ ASSERT\n-\n@@ -89,0 +82,1 @@\n+    const RBTreeInt& rbtree_const = rbtree;\n@@ -98,1 +92,1 @@\n-    rbtree.visit_in_order([&](RBTreeInt::RBNode* node) {\n+    rbtree_const.visit_in_order([&](const RBTreeInt::RBNode* node) {\n@@ -176,0 +170,1 @@\n+      const RBTreeInt& rbtree_const = rbtree;\n@@ -178,1 +173,1 @@\n-      rbtree.visit_range_in_order(0, 100, [&](Node* x) {\n+      rbtree_const.visit_range_in_order(0, 100, [&](const Node* x) {\n@@ -185,1 +180,1 @@\n-      rbtree.visit_range_in_order(0, 100, [&](Node* x) {\n+      rbtree_const.visit_range_in_order(0, 100, [&](const Node* x) {\n@@ -191,1 +186,1 @@\n-      rbtree.visit_in_order([&](Node* x) {\n+      rbtree_const.visit_in_order([&](const Node* x) {\n@@ -201,1 +196,1 @@\n-      rbtree.visit_range_in_order(0, 100, [&](Node* x) {\n+      rbtree_const.visit_range_in_order(0, 100, [&](const Node* x) {\n@@ -207,1 +202,1 @@\n-      rbtree.visit_in_order([&](Node* x) {\n+      rbtree_const.visit_in_order([&](const Node* x) {\n@@ -214,1 +209,1 @@\n-      rbtree.visit_range_in_order(0, 0, [&](Node* x) {\n+      rbtree_const.visit_range_in_order(0, 0, [&](const Node* x) {\n@@ -225,1 +220,1 @@\n-      rbtree.visit_range_in_order(0, 10, [&](Node* x) {\n+      rbtree_const.visit_range_in_order(0, 10, [&](const Node* x) {\n@@ -234,1 +229,1 @@\n-      rbtree.visit_in_order([&](Node* x) {\n+      rbtree_const.visit_in_order([&](const Node* x) {\n@@ -243,1 +238,1 @@\n-      rbtree.visit_range_in_order(10, 12, [&](Node* x) {\n+      rbtree_const.visit_range_in_order(10, 12, [&](const Node* x) {\n@@ -251,0 +246,1 @@\n+      const RBTreeCHeap<int, int, CmpInverse, mtOther>& rbtree_const = rbtree;\n@@ -258,1 +254,1 @@\n-      rbtree.visit_range_in_order(9, -1, [&](Node* x) {\n+      rbtree_const.visit_range_in_order(9, -1, [&](const Node* x) {\n@@ -267,1 +263,1 @@\n-      rbtree.visit_in_order([&](Node* x) {\n+      rbtree_const.visit_in_order([&](const Node* x) {\n@@ -281,1 +277,2 @@\n-      Node* n = rbtree.closest_leq(0);\n+      const RBTreeInt& rbtree_const = rbtree;\n+      const Node* n = rbtree_const.closest_leq(0);\n@@ -285,1 +282,1 @@\n-      n = rbtree.closest_leq(0);\n+      n = rbtree_const.closest_leq(0);\n@@ -289,1 +286,1 @@\n-      n = rbtree.closest_leq(0);\n+      n = rbtree_const.closest_leq(0);\n@@ -293,1 +290,1 @@\n-      n = rbtree.closest_leq(6);\n+      n = rbtree_const.closest_leq(6);\n@@ -296,1 +293,1 @@\n-      n = rbtree.closest_leq(-2);\n+      n = rbtree_const.closest_leq(-2);\n@@ -302,1 +299,2 @@\n-    RBTreeInt _tree;\n+    RBTreeInt rbtree;\n+    const RBTreeInt& rbtree_const = rbtree;\n@@ -307,1 +305,1 @@\n-      _tree.upsert(i, i);\n+      rbtree.upsert(i, i);\n@@ -310,1 +308,1 @@\n-    Node* node = _tree.find_node(num_nodes);\n+    const Node* node = rbtree_const.find_node(num_nodes);\n@@ -321,2 +319,3 @@\n-    void test_node_next() {\n-    RBTreeInt _tree;\n+  void test_node_next() {\n+    RBTreeInt rbtree;\n+    const RBTreeInt& rbtree_const = rbtree;\n@@ -327,1 +326,1 @@\n-      _tree.upsert(i, i);\n+      rbtree.upsert(i, i);\n@@ -330,1 +329,1 @@\n-    Node* node = _tree.find_node(0);\n+    const Node* node = rbtree_const.find_node(0);\n@@ -342,1 +341,0 @@\n-    using Node = RBTreeInt::RBNode;\n@@ -344,0 +342,2 @@\n+    const RBTreeInt& rbtree_const = rbtree;\n+    using Node = RBTreeInt::RBNode;\n@@ -362,1 +362,1 @@\n-      const Node* n = rbtree.find_node(i);\n+      const Node* n = rbtree_const.find_node(i);\n@@ -389,1 +389,1 @@\n-    rbtree.visit_in_order([&](Node* node) {\n+    rbtree.visit_in_order([&](const Node* node) {\n@@ -394,0 +394,33 @@\n+  void test_leftmost_rightmost() {\n+    using Node = RBTreeInt::RBNode;\n+    for (int i = 0; i < 10; i++) {\n+      RBTreeInt rbtree;\n+      const RBTreeInt& rbtree_const = rbtree;\n+      int max = 0, min = INT_MAX;\n+      for (int j = 0; j < 10; j++) {\n+        if (j == 0) {\n+          ASSERT_EQ(rbtree_const.leftmost(), (const Node*)nullptr);\n+          ASSERT_EQ(rbtree_const.rightmost(), (const Node*)nullptr);\n+        } else {\n+          ASSERT_EQ(rbtree_const.rightmost()->key(), max);\n+          ASSERT_EQ(rbtree_const.rightmost()->val(), max);\n+          ASSERT_EQ(rbtree_const.leftmost()->key(), min);\n+          ASSERT_EQ(rbtree_const.leftmost()->val(), min);\n+          ASSERT_EQ(rbtree_const.rightmost(), rbtree.rightmost());\n+          ASSERT_EQ(rbtree_const.leftmost(), rbtree.leftmost());\n+        }\n+        const int r = os::random();\n+        rbtree.upsert(r, r);\n+        min = MIN2(min, r);\n+        max = MAX2(max, r);\n+      }\n+      \/\/ Explicitly test non-const variants\n+      Node* n = rbtree.rightmost();\n+      ASSERT_EQ(n->key(), max);\n+      n->set_val(1);\n+      n = rbtree.leftmost();\n+      ASSERT_EQ(n->key(), min);\n+      n->set_val(1);\n+    }\n+  }\n+\n@@ -397,1 +430,1 @@\n-\n+    const RBTreeInt& rbtree_const = rbtree;\n@@ -415,1 +448,1 @@\n-        verify_it(rbtree);\n+        rbtree_const.verify_self();\n@@ -428,1 +461,1 @@\n-        verify_it(rbtree);\n+        rbtree_const.verify_self();\n@@ -437,2 +470,2 @@\n-    verify_it(rbtree);\n-    EXPECT_EQ(rbtree.size(), 0UL);\n+    rbtree.verify_self();\n+    EXPECT_EQ(rbtree_const.size(), 0UL);\n@@ -461,1 +494,1 @@\n-    verify_it(tree);\n+    tree.verify_self();\n@@ -510,0 +543,65 @@\n+TEST_VM_F(RBTreeTest, LeftMostRightMost) {\n+  this->test_leftmost_rightmost();\n+}\n+\n+struct PtrCmp {\n+  static int cmp(const void* a, const void* b) {\n+    const uintptr_t ai = p2u(a);\n+    const uintptr_t bi = p2u(b);\n+    return ai == bi ? 0 : (ai > bi ? 1 : -1);\n+  }\n+};\n+\n+TEST_VM(RBTreeTestNonFixture, TestPrintPointerTree) {\n+  typedef RBTreeCHeap<const void*, unsigned, PtrCmp, mtTest> TreeType;\n+  TreeType tree;\n+#ifdef _LP64\n+  const void* const p1 = (const void*) 0x800000000ULL;\n+  const char* const s1 = \"[0x0000000800000000] = 1\";\n+  const void* const p2 = (const void*) 0xDEADBEEF0ULL;\n+  const char* const s2 = \"[0x0000000deadbeef0] = 2\";\n+  const void* const p3 = (const void*) 0x7f223fba0ULL;\n+  const char* const s3 = \"[0x00000007f223fba0] = 3\";\n+#else\n+  const void* const p1 = (const void*) 0x80000000ULL;\n+  const char* const s1 = \"[0x80000000] = 1\";\n+  const void* const p2 = (const void*) 0xDEADBEEFLL;\n+  const char* const s2 = \"[0xdeadbeef] = 2\";\n+  const void* const p3 = (const void*) 0x7f223fbaULL;\n+  const char* const s3 = \"[0x7f223fba] = 3\";\n+#endif\n+  tree.upsert(p1, 1);\n+  tree.upsert(p2, 2);\n+  tree.upsert(p3, 3);\n+  stringStream ss;\n+  tree.print_on(&ss);\n+  const char* const N = nullptr;\n+  ASSERT_NE(strstr(ss.base(), s1), N);\n+  ASSERT_NE(strstr(ss.base(), s2), N);\n+  ASSERT_NE(strstr(ss.base(), s3), N);\n+}\n+\n+struct IntCmp {\n+  static int cmp(int a, int b) { return a == b ? 0 : (a > b ? 1 : -1); }\n+};\n+\n+TEST_VM(RBTreeTestNonFixture, TestPrintIntegerTree) {\n+  typedef RBTree<int, unsigned, IntCmp, RBTreeCHeapAllocator<mtTest> > TreeType;\n+    TreeType tree;\n+    const int i1 = 82924;\n+    const char* const s1 = \"[82924] = 1\";\n+    const int i2 = -13591;\n+    const char* const s2 = \"[-13591] = 2\";\n+    const int i3 = 0;\n+    const char* const s3 = \"[0] = 3\";\n+    tree.upsert(i1, 1);\n+    tree.upsert(i2, 2);\n+    tree.upsert(i3, 3);\n+    stringStream ss;\n+    tree.print_on(&ss);\n+    const char* const N = nullptr;\n+    ASSERT_NE(strstr(ss.base(), s1), N);\n+    ASSERT_NE(strstr(ss.base(), s2), N);\n+    ASSERT_NE(strstr(ss.base(), s3), N);\n+}\n+\n@@ -530,1 +628,1 @@\n-      verify_it(tree);\n+      tree.verify_self();\n@@ -547,1 +645,1 @@\n-        verify_it(rbtree);\n+        rbtree.verify_self();\n@@ -558,1 +656,1 @@\n-        verify_it(rbtree);\n+        rbtree.verify_self();\n@@ -569,1 +667,1 @@\n-    verify_it(rbtree);\n+    rbtree.verify_self();\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":142,"deletions":44,"binary":false,"changes":186,"status":"modified"}]}