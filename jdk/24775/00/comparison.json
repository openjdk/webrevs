{"files":[{"patch":"@@ -716,1 +716,1 @@\n-        return ty == null ? null : ty.stripMetadataIfNeeded();\n+        return ty;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.annotation.Annotation;\n@@ -33,1 +32,0 @@\n-import java.util.Optional;\n@@ -248,6 +246,1 @@\n-            else return new ClassType(outer1, typarams1, t.tsym, t.metadata) {\n-                @Override\n-                protected boolean needsStripping() {\n-                    return true;\n-                }\n-            };\n+            else return new ClassType(outer1, typarams1, t.tsym, t.metadata);\n@@ -264,6 +257,1 @@\n-                return new WildcardType(t, wt.kind, wt.tsym, wt.bound, wt.metadata) {\n-                    @Override\n-                    protected boolean needsStripping() {\n-                        return true;\n-                    }\n-                };\n+                return new WildcardType(t, wt.kind, wt.tsym, wt.bound, wt.metadata);\n@@ -277,6 +265,1 @@\n-            else return new ArrayType(elemtype1, t.tsym, t.metadata) {\n-                @Override\n-                protected boolean needsStripping() {\n-                    return true;\n-                }\n-            };\n+            else return new ArrayType(elemtype1, t.tsym, t.metadata);\n@@ -296,6 +279,1 @@\n-            else return new MethodType(argtypes1, restype1, thrown1, t.tsym) {\n-                @Override\n-                protected boolean needsStripping() {\n-                    return true;\n-                }\n-            };\n+            else return new MethodType(argtypes1, restype1, thrown1, t.tsym);\n@@ -405,19 +383,0 @@\n-    \/**\n-     * Does this type require annotation stripping for API clients?\n-     *\/\n-    protected boolean needsStripping() {\n-        return false;\n-    }\n-\n-    \/**\n-     * Strip all metadata associated with this type - this could return a new clone of the type.\n-     * This routine is only used to present the correct annotated types back to the users when types\n-     * are accessed through compiler APIs; it should not be used anywhere in the compiler internals\n-     * as doing so might result in performance penalties.\n-     *\/\n-    public Type stripMetadataIfNeeded() {\n-        return needsStripping() ?\n-                accept(stripMetadata, null) :\n-                this;\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":4,"deletions":45,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -276,6 +276,1 @@\n-                else return new ClassType(outer1, typarams1.toList(), t.tsym, t.getMetadata()) {\n-                    @Override\n-                    protected boolean needsStripping() {\n-                        return true;\n-                    }\n-                };\n+                else return new ClassType(outer1, typarams1.toList(), t.tsym, t.getMetadata());\n@@ -295,6 +290,1 @@\n-                return new ArrayType(elemtype1, t.tsym, t.metadata) {\n-                    @Override\n-                    protected boolean needsStripping() {\n-                        return true;\n-                    }\n-                };\n+                return new ArrayType(elemtype1, t.tsym, t.metadata);\n@@ -404,6 +394,1 @@\n-                return new WildcardType(bound, bk, syms.boundClass) {\n-                    @Override\n-                    protected boolean needsStripping() {\n-                        return true;\n-                    }\n-                };\n+                return new WildcardType(bound, bk, syms.boundClass);\n@@ -3415,6 +3400,1 @@\n-                return new ForAll(tvars1, qtype1) {\n-                    @Override\n-                    public boolean needsStripping() {\n-                        return true;\n-                    }\n-                };\n+                return new ForAll(tvars1, qtype1);\n@@ -3422,6 +3402,1 @@\n-                return new ForAll(tvars1, Types.this.subst(qtype1, t.tvars, tvars1)) {\n-                    @Override\n-                    public boolean needsStripping() {\n-                        return true;\n-                    }\n-                };\n+                return new ForAll(tvars1, Types.this.subst(qtype1, t.tvars, tvars1));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":5,"deletions":30,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -127,3 +127,1 @@\n-        return types.directSupertypes(ty).stream()\n-                .map(Type::stripMetadataIfNeeded)\n-                .toList();\n+        return List.copyOf(types.directSupertypes(ty));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacTypes.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -449,1 +449,1 @@\n-            scan(types.directSupertypes(t), p);\n+            \/\/ don't scan super types\n@@ -648,1 +648,1 @@\n-    @Test(posn=7, annoType=TA.class, expect=\"17\")\n+    @Test(posn=6, annoType=TA.class, expect=\"17\")\n@@ -737,1 +737,1 @@\n-    @Test(posn=23, annoType=TA.class, expect=\"131\")\n+    @Test(posn=2, annoType=TA.class, expect=\"131\")\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/type\/BasicAnnoTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}