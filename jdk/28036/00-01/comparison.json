{"files":[{"patch":"@@ -769,1 +769,5 @@\n-HeapWord* ShenandoahFreeSet::allocate_with_affiliation(Iter& iterator, ShenandoahAffiliation affiliation, ShenandoahAllocRequest& req, bool& in_new_region) {\n+HeapWord* ShenandoahFreeSet::allocate_with_affiliation(Iter& iterator,\n+                                                       ShenandoahAffiliation affiliation,\n+                                                       ShenandoahAllocRequest& req,\n+                                                       bool& in_new_region,\n+                                                       bool& allow_new_region) {\n@@ -779,2 +783,1 @@\n-    } else if (free_region == nullptr && r->affiliation() == FREE &&\n-               (!r->is_trash() || !_heap->is_concurrent_weak_root_in_progress())) {\n+    } else if (free_region == nullptr && r->affiliation() == FREE) {\n@@ -785,1 +788,1 @@\n-  if (free_region != nullptr) {\n+  if (free_region != nullptr && (allow_new_region = can_allocate_in_new_region(req)) == true) {\n@@ -894,0 +897,1 @@\n+  bool allow_new_region = false;\n@@ -896,1 +900,1 @@\n-    result = allocate_with_affiliation(iterator, req.affiliation(), req, in_new_region);\n+    result = allocate_with_affiliation(iterator, req.affiliation(), req, in_new_region, allow_new_region);\n@@ -899,1 +903,1 @@\n-    result = allocate_with_affiliation(iterator, req.affiliation(), req, in_new_region);\n+    result = allocate_with_affiliation(iterator, req.affiliation(), req, in_new_region, allow_new_region);\n@@ -911,2 +915,1 @@\n-  if (!_heap->mode()->is_generational() ||\n-      _heap->young_generation()->free_unaffiliated_regions() > 0) {\n+  if (allow_new_region || (req.is_old() && _heap->young_generation()->free_unaffiliated_regions() > 0)) {\n@@ -922,0 +925,10 @@\n+bool ShenandoahFreeSet::can_allocate_in_new_region(const ShenandoahAllocRequest& req) {\n+  if (!_heap->mode()->is_generational()) {\n+    return true;\n+  }\n+\n+  assert(req.is_old() || req.is_young(), \"Should request affiliation\");\n+  return (req.is_old() && _heap->old_generation()->free_unaffiliated_regions() > 0)\n+         || (req.is_young() && _heap->young_generation()->free_unaffiliated_regions() > 0);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -373,1 +373,8 @@\n-  HeapWord* allocate_with_affiliation(Iter& iterator, ShenandoahAffiliation affiliation, ShenandoahAllocRequest& req, bool& in_new_region);\n+  HeapWord* allocate_with_affiliation(Iter& iterator,\n+                                      ShenandoahAffiliation affiliation,\n+                                      ShenandoahAllocRequest& req,\n+                                      bool& in_new_region,\n+                                      bool& allow_new_region);\n+\n+  \/\/ Return true if the respective generation for this request has free regions.\n+  bool can_allocate_in_new_region(const ShenandoahAllocRequest& req);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}