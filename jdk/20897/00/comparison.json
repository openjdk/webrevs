{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import jdk.test.lib.thread.TestThreadFactory;\n+\n@@ -61,1 +63,1 @@\n-        clrfldw001b t_b = new clrfldw001b();\n+        Thread t_b = TestThreadFactory.newThread(new clrfldw001b());\n@@ -94,1 +96,1 @@\n-class clrfldw001b extends Thread {\n+class clrfldw001b implements Runnable {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ClearFieldAccessWatch\/clrfldw001.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import jdk.test.lib.thread.TestThreadFactory;\n+\n@@ -61,1 +63,1 @@\n-        clrfmodw001b t_b = new clrfmodw001b();\n+        Thread t_b = TestThreadFactory.newThread(new clrfmodw001b());\n@@ -94,1 +96,1 @@\n-class clrfmodw001b extends Thread {\n+class clrfmodw001b implements Runnable {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ClearFieldModificationWatch\/clrfmodw001.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import jdk.test.lib.thread.TestThreadFactory;\n+\n@@ -65,1 +67,1 @@\n-        setfldw001b t_b = new setfldw001b();\n+        Thread t_b = TestThreadFactory.newThread(new setfldw001b());\n@@ -114,1 +116,1 @@\n-class setfldw001b extends Thread {\n+class setfldw001b implements Runnable  {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/SetFieldAccessWatch\/setfldw001.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import jdk.test.lib.thread.TestThreadFactory;\n+\n@@ -65,1 +67,1 @@\n-        setfmodw001b t_b = new setfmodw001b();\n+        Thread t_b = TestThreadFactory.newThread(new setfmodw001b());\n@@ -114,1 +116,1 @@\n-class setfmodw001b extends Thread {\n+class setfmodw001b implements Runnable  {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/SetFieldModificationWatch\/setfmodw001.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.thread;\n+\n+import java.util.concurrent.ThreadFactory;\n+\n+\/*\n+    This factory is used to start new threads in tests.\n+    It supports creation of virtual threads when jtreg test.thread.factory plugin is enabled.\n+*\/\n+\n+public class TestThreadFactory {\n+\n+    private static ThreadFactory threadFactory = \"Virtual\".equals(System.getProperty(\"test.thread.factory\"))\n+            ? virtualThreadFactory() : platformThreadFactory();\n+\n+    public static Thread newThread(Runnable task) {\n+        return threadFactory.newThread(task);\n+    }\n+\n+    public static Thread newThread(Runnable task, String name) {\n+        Thread t = threadFactory.newThread(task);\n+        t.setName(name);\n+        return t;\n+    }\n+\n+    private static ThreadFactory platformThreadFactory() {\n+        return Thread.ofPlatform().factory();\n+    }\n+\n+    private static ThreadFactory virtualThreadFactory() {\n+        return Thread.ofVirtual().factory();\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/TestThreadFactory.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}