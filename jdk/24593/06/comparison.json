{"files":[{"patch":"@@ -40,0 +40,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -300,1 +301,1 @@\n-void EpsilonHeap::print_on(outputStream *st) const {\n+void EpsilonHeap::print_heap_on(outputStream *st) const {\n@@ -303,0 +304,2 @@\n+  StreamAutoIndentor indentor(st, 1);\n+\n@@ -307,2 +310,0 @@\n-    _space->print_on(st);\n-  }\n@@ -310,10 +311,2 @@\n-  MetaspaceUtils::print_on(st);\n-}\n-\n-void EpsilonHeap::print_on_error(outputStream *st) const {\n-  print_on(st);\n-  st->cr();\n-\n-  BarrierSet* bs = BarrierSet::barrier_set();\n-  if (bs != nullptr) {\n-    bs->print_on(st);\n+    StreamAutoIndentor indentor(st, 1);\n+    _space->print_on(st);\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -134,2 +134,2 @@\n-  void print_on(outputStream* st) const override;\n-  void print_on_error(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override {}\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2115,1 +2115,1 @@\n-void G1CollectedHeap::print_on(outputStream* st) const {\n+void G1CollectedHeap::print_heap_on(outputStream* st) const {\n@@ -2117,1 +2117,1 @@\n-  st->print(\" %-20s\", \"garbage-first heap\");\n+  st->print(\"%-20s\", \"garbage-first heap\");\n@@ -2124,1 +2124,3 @@\n-  st->print(\"  region size %zuK, \", G1HeapRegion::GrainBytes \/ K);\n+\n+  StreamAutoIndentor indentor(st, 1);\n+  st->print(\"region size %zuK, \", G1HeapRegion::GrainBytes \/ K);\n@@ -2134,1 +2136,1 @@\n-    st->print(\"  remaining free region(s) on each NUMA node: \");\n+    st->print(\"remaining free region(s) on each NUMA node: \");\n@@ -2142,1 +2144,0 @@\n-  MetaspaceUtils::print_on(st);\n@@ -2156,1 +2157,1 @@\n-  print_on(st);\n+  print_heap_on(st);\n@@ -2163,2 +2164,3 @@\n-void G1CollectedHeap::print_on_error(outputStream* st) const {\n-  print_extended_on(st);\n+void G1CollectedHeap::print_gc_on(outputStream* st) const {\n+  \/\/ Print the per-region information.\n+  print_regions_on(st);\n@@ -2174,1 +2176,1 @@\n-    _cm->print_on_error(st);\n+    _cm->print_on(st);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1315,1 +1315,1 @@\n-  void print_on(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n@@ -1317,1 +1317,1 @@\n-  void print_on_error(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2129,1 +2129,1 @@\n-void G1ConcurrentMark::print_on_error(outputStream* st) const {\n+void G1ConcurrentMark::print_on(outputStream* st) const {\n@@ -2131,1 +2131,1 @@\n-  _mark_bitmap.print_on_error(st, \" Bits: \");\n+  _mark_bitmap.print_on(st, \" Bits: \");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -710,1 +710,1 @@\n-  void print_on_error(outputStream* st) const;\n+  void print_on(outputStream* st) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-  st->print(\" space %zuK, %d%% used\", capacity_in_bytes() \/ K,\n+  st->print(\"space %zuK, %d%% used\", capacity_in_bytes() \/ K,\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  void print_on_error(outputStream* st) const {\n+  void print_on(outputStream* st) const {\n@@ -63,1 +63,3 @@\n-    _beg_bits.print_on_error(st, \" Begin Bits: \");\n+\n+    StreamAutoIndentor indentor(st, 1);\n+    _beg_bits.print_range_on(st, \"Begin Bits: \");\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -665,1 +665,1 @@\n-void ParallelScavengeHeap::print_on(outputStream* st) const {\n+void ParallelScavengeHeap::print_heap_on(outputStream* st) const {\n@@ -672,1 +672,0 @@\n-  MetaspaceUtils::print_on(st);\n@@ -675,4 +674,1 @@\n-void ParallelScavengeHeap::print_on_error(outputStream* st) const {\n-  print_on(st);\n-  st->cr();\n-\n+void ParallelScavengeHeap::print_gc_on(outputStream* st) const {\n@@ -683,1 +679,0 @@\n-\n@@ -685,1 +680,2 @@\n-  PSParallelCompact::print_on_error(st);\n+\n+  PSParallelCompact::print_on(st);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -217,2 +217,2 @@\n-  void print_on(outputStream* st) const override;\n-  void print_on_error(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -361,2 +361,2 @@\n-  st->print(\" %-15s\", name());\n-  st->print(\" total %zuK, used %zuK\",\n+  st->print(\"%-15s\", name());\n+  st->print(\" total %zuK, used %zuK \",\n@@ -364,4 +364,1 @@\n-  st->print_cr(\" [\" PTR_FORMAT \", \" PTR_FORMAT \", \" PTR_FORMAT \")\",\n-                p2i(virtual_space()->low_boundary()),\n-                p2i(virtual_space()->high()),\n-                p2i(virtual_space()->high_boundary()));\n+  virtual_space()->print_space_boundaries_on(st);\n@@ -369,1 +366,2 @@\n-  st->print(\"  object\"); object_space()->print_on(st);\n+  StreamAutoIndentor indentor(st, 1);\n+  st->print(\"object \"); object_space()->print_on(st);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -213,2 +213,2 @@\n-void PSParallelCompact::print_on_error(outputStream* st) {\n-  _mark_bitmap.print_on_error(st);\n+void PSParallelCompact::print_on(outputStream* st) {\n+  _mark_bitmap.print_on(st);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -849,1 +849,1 @@\n-  static void print_on_error(outputStream* st);\n+  static void print_on(outputStream* st);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-  st->print_cr(\" [\" PTR_FORMAT \", \" PTR_FORMAT \", \" PTR_FORMAT \")\",\n+  st->print_cr(\"[\" PTR_FORMAT \", \" PTR_FORMAT \", \" PTR_FORMAT \")\",\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -703,2 +703,2 @@\n-  st->print(\" %-15s\", \"PSYoungGen\");\n-  st->print(\" total %zuK, used %zuK\",\n+  st->print(\"%-15s\", name());\n+  st->print(\" total %zuK, used %zuK \",\n@@ -707,3 +707,5 @@\n-  st->print(\"  eden\"); eden_space()->print_on(st);\n-  st->print(\"  from\"); from_space()->print_on(st);\n-  st->print(\"  to  \"); to_space()->print_on(st);\n+\n+  StreamAutoIndentor indentor(st, 1);\n+  st->print(\"eden \"); eden_space()->print_on(st);\n+  st->print(\"from \"); from_space()->print_on(st);\n+  st->print(\"to   \"); to_space()->print_on(st);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -828,1 +828,1 @@\n-  st->print(\" %-10s\", name());\n+  st->print(\"%-10s\", name());\n@@ -830,1 +830,1 @@\n-  st->print(\" total %zuK, used %zuK\",\n+  st->print(\" total %zuK, used %zuK \",\n@@ -832,11 +832,6 @@\n-  st->print_cr(\" [\" PTR_FORMAT \", \" PTR_FORMAT \", \" PTR_FORMAT \")\",\n-               p2i(_virtual_space.low_boundary()),\n-               p2i(_virtual_space.high()),\n-               p2i(_virtual_space.high_boundary()));\n-\n-  st->print(\"  eden\");\n-  eden()->print_on(st);\n-  st->print(\"  from\");\n-  from()->print_on(st);\n-  st->print(\"  to  \");\n-  to()->print_on(st);\n+  _virtual_space.print_space_boundaries_on(st);\n+\n+  StreamAutoIndentor indentor(st, 1);\n+  st->print(\"eden \"); eden()->print_on(st);\n+  st->print(\"from \"); from()->print_on(st);\n+  st->print(\"to   \"); to()->print_on(st);\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -803,1 +803,1 @@\n-void SerialHeap::print_on(outputStream* st) const {\n+void SerialHeap::print_heap_on(outputStream* st) const {\n@@ -809,2 +809,0 @@\n-\n-  MetaspaceUtils::print_on(st);\n@@ -813,4 +811,1 @@\n-void SerialHeap::print_on_error(outputStream* st) const {\n-  print_on(st);\n-  st->cr();\n-\n+void SerialHeap::print_gc_on(outputStream* st) const {\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -209,2 +209,2 @@\n-  void print_on(outputStream* st) const override;\n-  void print_on_error(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -442,1 +442,1 @@\n-  st->print(\" %-10s\", name());\n+  st->print(\"%-10s\", name());\n@@ -444,1 +444,1 @@\n-  st->print(\" total %zuK, used %zuK\",\n+  st->print(\" total %zuK, used %zuK \",\n@@ -446,4 +446,1 @@\n-  st->print_cr(\" [\" PTR_FORMAT \", \" PTR_FORMAT \", \" PTR_FORMAT \")\",\n-               p2i(_virtual_space.low_boundary()),\n-               p2i(_virtual_space.high()),\n-               p2i(_virtual_space.high_boundary()));\n+  _virtual_space.print_space_boundaries_on(st);\n@@ -451,2 +448,2 @@\n-  st->print(\"   the\");\n-  _the_space->print_on(st);\n+  StreamAutoIndentor indentor(st, 1);\n+  st->print(\"the  \"); _the_space->print_on(st);\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-#include \"memory\/resourceArea.hpp\"\n@@ -62,0 +61,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -114,1 +114,6 @@\n-  heap->print_on(&st);\n+  {\n+    StreamAutoIndentor indentor(&st, 1);\n+    heap->print_heap_on(&st);\n+    MetaspaceUtils::print_on(&st);\n+  }\n+\n@@ -166,2 +171,4 @@\n-    ResourceMark rm;\n-    print_on(&ls);\n+\n+    StreamAutoIndentor indentor(&ls, 1);\n+    print_heap_on(&ls);\n+    MetaspaceUtils::print_on(&ls);\n@@ -180,2 +187,4 @@\n-    ResourceMark rm;\n-    print_on(&ls);\n+\n+    StreamAutoIndentor indentor(&ls, 1);\n+    print_heap_on(&ls);\n+    MetaspaceUtils::print_on(&ls);\n@@ -189,1 +198,4 @@\n-void CollectedHeap::print() const { print_on(tty); }\n+void CollectedHeap::print() const {\n+  print_heap_on(tty);\n+  print_gc_on(tty);\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -438,4 +438,6 @@\n-  \/\/ Print heap information on the given outputStream.\n-  virtual void print_on(outputStream* st) const = 0;\n-  \/\/ The default behavior is to call print_on() on tty.\n-  virtual void print() const;\n+  \/\/ Print heap information.\n+  virtual void print_heap_on(outputStream* st) const = 0;\n+\n+  \/\/ Print additional information about the GC that is not included in print_heap_on().\n+  \/\/ Generally used for printing information in case of a fatal error.\n+  virtual void print_gc_on(outputStream* st) const = 0;\n@@ -443,1 +445,2 @@\n-  virtual void print_on_error(outputStream* st) const = 0;\n+  \/\/ The default behavior is to call print_heap_on() and print_gc_on() on tty.\n+  virtual void print() const;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-void MarkBitMap::print_on_error(outputStream* st, const char* prefix) const {\n-  _bm.print_on_error(st, prefix);\n+void MarkBitMap::print_on(outputStream* st, const char* prefix) const {\n+  _bm.print_range_on(st, prefix);\n","filename":"src\/hotspot\/share\/gc\/shared\/markBitMap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  void print_on_error(outputStream* st, const char* prefix) const;\n+  void print_on(outputStream* st, const char* prefix) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/markBitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  st->print_cr(\" space %zuK, %3d%% used [\" PTR_FORMAT \", \" PTR_FORMAT \", \" PTR_FORMAT \")\",\n+  st->print_cr(\"space %zuK, %3d%% used [\" PTR_FORMAT \", \" PTR_FORMAT \", \" PTR_FORMAT \")\",\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -591,1 +591,1 @@\n-void ShenandoahHeap::print_on(outputStream* st) const {\n+void ShenandoahHeap::print_heap_on(outputStream* st) const {\n@@ -642,1 +642,0 @@\n-  MetaspaceUtils::print_on(st);\n@@ -650,3 +649,1 @@\n-void ShenandoahHeap::print_on_error(outputStream* st) const {\n-  print_on(st);\n-  st->cr();\n+void ShenandoahHeap::print_gc_on(outputStream* st) const {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -205,2 +205,2 @@\n-  void print_on(outputStream* st)              const override;\n-  void print_on_error(outputStream *st)        const override;\n+  void print_heap_on(outputStream* st)         const override;\n+  void print_gc_on(outputStream *st)           const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -358,4 +358,2 @@\n-void ZCollectedHeap::print_on(outputStream* st) const {\n-  StreamAutoIndentor auto_indentor(st);\n-\n-  _heap.print_on(st);\n+void ZCollectedHeap::print_heap_on(outputStream* st) const {\n+  _heap.print_usage_on(st);\n@@ -364,4 +362,2 @@\n-void ZCollectedHeap::print_on_error(outputStream* st) const {\n-  StreamAutoIndentor auto_indentor(st);\n-\n-  _heap.print_on_error(st);\n+void ZCollectedHeap::print_gc_on(outputStream* st) const {\n+  _heap.print_gc_on(st);\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -118,2 +118,2 @@\n-  void print_on(outputStream* st) const override;\n-  void print_on_error(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -317,7 +317,2 @@\n-void ZHeap::print_on(outputStream* st) const {\n-  streamIndentor indentor(st, 1);\n-  _page_allocator.print_on(st);\n-\n-  \/\/ Metaspace printing prepends spaces instead of using outputStream indentation\n-  streamIndentor indentor_back(st, -1);\n-  MetaspaceUtils::print_on(st);\n+void ZHeap::print_usage_on(outputStream* st) const {\n+  _page_allocator.print_usage_on(st);\n@@ -326,11 +321,1 @@\n-void ZHeap::print_on_error(outputStream* st) const {\n-  {\n-    streamIndentor indentor(st, 1);\n-    _page_allocator.print_on_error(st);\n-\n-    \/\/ Metaspace printing prepends spaces instead of using outputStream indentation\n-    streamIndentor indentor_back(st, -1);\n-    MetaspaceUtils::print_on(st);\n-  }\n-  st->cr();\n-\n+void ZHeap::print_gc_on(outputStream* st) const {\n@@ -343,1 +328,1 @@\n-  _page_allocator.print_extended_on_error(st);\n+  _page_allocator.print_extended_cache_on(st);\n@@ -376,6 +361,6 @@\n-  {\n-    streamIndentor indentor(st, 1);\n-    ZPageTableIterator iter(&_page_table);\n-    for (ZPage* page; iter.next(&page);) {\n-      page->print_on(st);\n-    }\n+\n+  StreamAutoIndentor indentor(st, 1);\n+\n+  ZPageTableIterator iter(&_page_table);\n+  for (ZPage* page; iter.next(&page);) {\n+    page->print_on(st);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":10,"deletions":25,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -133,2 +133,2 @@\n-  void print_on(outputStream* st) const;\n-  void print_on_error(outputStream* st) const;\n+  void print_usage_on(outputStream* st) const;\n+  void print_gc_on(outputStream* st) const;\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -578,1 +579,1 @@\n-  st->print(\"Cache\");\n+  st->print(\"Cache \");\n@@ -594,1 +595,1 @@\n-  streamIndentor indentor(st, 1);\n+  StreamAutoIndentor indentor(st, 1);\n@@ -596,1 +597,1 @@\n-  st->print(\"size classes\");\n+  st->print(\"size classes \");\n","filename":"src\/hotspot\/share\/gc\/z\/zMappedCache.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1158,1 +1158,1 @@\n-  st->print(\"Partition %u\", _numa_id);\n+  st->print(\"Partition %u \", _numa_id);\n@@ -1163,1 +1163,1 @@\n-  streamIndentor indentor(st, 1);\n+  StreamAutoIndentor indentor(st, 1);\n@@ -1171,1 +1171,1 @@\n-void ZPartition::print_extended_on_error(outputStream* st) const {\n+void ZPartition::print_extended_cache_on(outputStream* st) const {\n@@ -1174,2 +1174,1 @@\n-  streamIndentor indentor(st, 1);\n-\n+  StreamAutoIndentor indentor(st, 1);\n@@ -2394,5 +2393,0 @@\n-void ZPageAllocator::print_on(outputStream* st) const {\n-  ZLocker<ZLock> lock(&_lock);\n-  print_on_inner(st);\n-}\n-\n@@ -2409,24 +2403,1 @@\n-void ZPageAllocator::print_extended_on_error(outputStream* st) const {\n-  st->print_cr(\"ZMappedCache:\");\n-\n-  streamIndentor indentor(st, 1);\n-\n-  if (!try_lock_on_error(&_lock)) {\n-    \/\/ We can't print without taking the lock since printing the contents of\n-    \/\/ the cache requires iterating over the nodes in the cache's tree, which\n-    \/\/ is not thread-safe.\n-    st->print_cr(\"<Skipped>\");\n-\n-    return;\n-  }\n-\n-  \/\/ Print each partition's cache content\n-  ZPartitionConstIterator iter = partition_iterator();\n-  for (const ZPartition* partition; iter.next(&partition);) {\n-    partition->print_extended_on_error(st);\n-  }\n-\n-  _lock.unlock();\n-}\n-\n-void ZPageAllocator::print_on_error(outputStream* st) const {\n+void ZPageAllocator::print_usage_on(outputStream* st) const {\n@@ -2439,1 +2410,1 @@\n-  \/\/ Print information even though we have not successfully taken the lock.\n+  \/\/ Print information even though we may not have successfully taken the lock.\n@@ -2441,1 +2412,5 @@\n-  print_on_inner(st);\n+\n+  print_total_usage_on(st);\n+\n+  StreamAutoIndentor indentor(st, 1);\n+  print_partition_usage_on(st);\n@@ -2448,3 +2423,2 @@\n-void ZPageAllocator::print_on_inner(outputStream* st) const {\n-  \/\/ Print total usage\n-  st->print(\"ZHeap\");\n+void ZPageAllocator::print_total_usage_on(outputStream* st) const {\n+  st->print(\"ZHeap \");\n@@ -2454,0 +2428,1 @@\n+}\n@@ -2455,4 +2430,1 @@\n-  \/\/ Print per-partition\n-\n-  streamIndentor indentor(st, 1);\n-\n+void ZPageAllocator::print_partition_usage_on(outputStream* st) const {\n@@ -2460,1 +2432,2 @@\n-    \/\/ The summary printing is redundant if we only have one partition\n+    \/\/ Partition usage is redundant if we only have one partition. Only\n+    \/\/ print the cache.\n@@ -2465,0 +2438,1 @@\n+  \/\/ Print all partitions\n@@ -2470,0 +2444,23 @@\n+\n+void ZPageAllocator::print_extended_cache_on(outputStream* st) const {\n+  st->print_cr(\"ZMappedCache:\");\n+\n+  StreamAutoIndentor indentor(st, 1);\n+\n+  if (!try_lock_on_error(&_lock)) {\n+    \/\/ We can't print without taking the lock since printing the contents of\n+    \/\/ the cache requires iterating over the nodes in the cache's tree, which\n+    \/\/ is not thread-safe.\n+    st->print_cr(\"<Skipped>\");\n+\n+    return;\n+  }\n+\n+  \/\/ Print each partition's cache content\n+  ZPartitionConstIterator iter = partition_iterator();\n+  for (const ZPartition* partition; iter.next(&partition);) {\n+    partition->print_extended_cache_on(st);\n+  }\n+\n+  _lock.unlock();\n+}\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":41,"deletions":44,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  void print_extended_on_error(outputStream* st) const;\n+  void print_extended_cache_on(outputStream* st) const;\n@@ -238,2 +238,0 @@\n-  void print_on_inner(outputStream* st) const;\n-\n@@ -286,3 +284,4 @@\n-  void print_on(outputStream* st) const;\n-  void print_extended_on_error(outputStream* st) const;\n-  void print_on_error(outputStream* st) const;\n+  void print_usage_on(outputStream* st) const;\n+  void print_total_usage_on(outputStream* st) const;\n+  void print_partition_usage_on(outputStream* st) const;\n+  void print_extended_cache_on(outputStream* st) const;\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -217,1 +218,1 @@\n-  \/\/ Used from all GCs. It first prints out totals, then, separately, the class space portion.\n+  \/\/ First prints out totals, then, separately, the class space portion.\n@@ -219,2 +220,3 @@\n-  out->print_cr(\" Metaspace       \"\n-                \"used %zuK, \"\n+  out->print(\"Metaspace \");\n+  out->fill_to(17);\n+  out->print_cr(\"used %zuK, \"\n@@ -228,2 +230,4 @@\n-    out->print_cr(\"  class space    \"\n-                  \"used %zuK, \"\n+    StreamAutoIndentor indentor(out, 1);\n+    out->print(\"class space \");\n+    out->fill_to(17);\n+    out->print_cr(\"used %zuK, \"\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1162,1 +1162,4 @@\n-  heap()->print_on(st);\n+\n+  StreamAutoIndentor indentor(st, 1);\n+  heap()->print_heap_on(st);\n+  MetaspaceUtils::print_on(st);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -425,1 +425,1 @@\n-  out->print   (\"Virtual space:\");\n+  out->print(\"Virtual space:\");\n@@ -428,4 +428,6 @@\n-  out->print_cr(\" - committed: %zu\", committed_size());\n-  out->print_cr(\" - reserved:  %zu\", reserved_size());\n-  out->print_cr(\" - [low, high]:     [\" PTR_FORMAT \", \" PTR_FORMAT \"]\",  p2i(low()), p2i(high()));\n-  out->print_cr(\" - [low_b, high_b]: [\" PTR_FORMAT \", \" PTR_FORMAT \"]\",  p2i(low_boundary()), p2i(high_boundary()));\n+\n+  StreamAutoIndentor indentor(out, 1);\n+  out->print_cr(\"- committed: %zu\", committed_size());\n+  out->print_cr(\"- reserved:  %zu\", reserved_size());\n+  out->print_cr(\"- [low, high]:     [\" PTR_FORMAT \", \" PTR_FORMAT \"]\",  p2i(low()), p2i(high()));\n+  out->print_cr(\"- [low_b, high_b]: [\" PTR_FORMAT \", \" PTR_FORMAT \"]\",  p2i(low_boundary()), p2i(high_boundary()));\n@@ -439,0 +441,5 @@\n+\n+void VirtualSpace::print_space_boundaries_on(outputStream* out) const {\n+  out->print_cr(\"[\" PTR_FORMAT \", \" PTR_FORMAT \", \" PTR_FORMAT \")\",\n+                p2i(low_boundary()), p2i(high()), p2i(high_boundary()));\n+}\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -127,0 +127,2 @@\n+\n+  void print_space_boundaries_on(outputStream* out) const;\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n@@ -414,1 +415,2 @@\n-  Universe::heap()->print_on(output());\n+  Universe::heap()->print_heap_on(output());\n+  MetaspaceUtils::print_on(output());\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -691,1 +691,1 @@\n-void BitMap::print_on_error(outputStream* st, const char* prefix) const {\n+void BitMap::print_range_on(outputStream* st, const char* prefix) const {\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-  void print_on_error(outputStream* st, const char* prefix) const;\n+  void print_range_on(outputStream* st, const char* prefix) const;\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,0 +179,1 @@\n+protected:\n@@ -189,2 +190,1 @@\n-class StreamAutoIndentor : public StackObj {\n-  outputStream* const _os;\n+class StreamAutoIndentor : public streamIndentor {\n@@ -194,3 +194,3 @@\n-  StreamAutoIndentor(outputStream* os) :\n-    _os(os), _old(os->set_autoindent(true)) {}\n-  ~StreamAutoIndentor() { _os->set_autoindent(_old); }\n+  StreamAutoIndentor(outputStream* os, int indentation = 0) :\n+    streamIndentor(os, indentation), _old(os->set_autoindent(true)) {}\n+  ~StreamAutoIndentor() { _str->set_autoindent(_old); }\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1203,1 +1203,9 @@\n-      Universe::heap()->print_on_error(st);\n+      StreamAutoIndentor indentor(st, 1);\n+      Universe::heap()->print_heap_on(st);\n+      MetaspaceUtils::print_on(st);\n+      st->cr();\n+    }\n+\n+  STEP_IF(\"printing GC information\", _verbose)\n+    if (Universe::heap() != nullptr) {\n+      Universe::heap()->print_gc_on(st);\n@@ -1385,0 +1393,4 @@\n+  \/\/ Take heap lock over both heap and GC printing so that information is\n+  \/\/ consistent.\n+  Heap_lock->lock();\n+\n@@ -1388,1 +1400,0 @@\n-    MutexLocker hl(Heap_lock);\n@@ -1390,0 +1401,1 @@\n+\n@@ -1391,1 +1403,3 @@\n-    Universe::heap()->print_on_error(st);\n+    StreamAutoIndentor indentor(st, 1);\n+    Universe::heap()->print_heap_on(st);\n+    MetaspaceUtils::print_on(st);\n@@ -1393,0 +1407,8 @@\n+  }\n+\n+  \/\/ STEP(\"printing GC information\")\n+\n+  if (Universe::is_fully_initialized()) {\n+    Universe::heap()->print_gc_on(st);\n+    st->cr();\n+\n@@ -1397,0 +1419,2 @@\n+  Heap_lock->unlock();\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"}]}