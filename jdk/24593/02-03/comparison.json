{"files":[{"patch":"@@ -301,1 +301,1 @@\n-void EpsilonHeap::print_on(outputStream *st) const {\n+void EpsilonHeap::print_heap_on(outputStream *st) const {\n@@ -316,3 +316,0 @@\n-void EpsilonHeap::print_on_error(outputStream *st) const {\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -134,2 +134,2 @@\n-  void print_on(outputStream* st) const override;\n-  void print_on_error(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override {}\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2115,1 +2115,1 @@\n-void G1CollectedHeap::print_on(outputStream* st) const {\n+void G1CollectedHeap::print_heap_on(outputStream* st) const {\n@@ -2157,1 +2157,1 @@\n-  print_on(st);\n+  print_heap_on(st);\n@@ -2164,1 +2164,1 @@\n-void G1CollectedHeap::print_on_error(outputStream* st) const {\n+void G1CollectedHeap::print_gc_on(outputStream* st) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1315,1 +1315,1 @@\n-  void print_on(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n@@ -1317,1 +1317,1 @@\n-  void print_on_error(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -665,1 +665,1 @@\n-void ParallelScavengeHeap::print_on(outputStream* st) const {\n+void ParallelScavengeHeap::print_heap_on(outputStream* st) const {\n@@ -674,1 +674,1 @@\n-void ParallelScavengeHeap::print_on_error(outputStream* st) const {\n+void ParallelScavengeHeap::print_gc_on(outputStream* st) const {\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -217,2 +217,2 @@\n-  void print_on(outputStream* st) const override;\n-  void print_on_error(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -803,1 +803,1 @@\n-void SerialHeap::print_on(outputStream* st) const {\n+void SerialHeap::print_heap_on(outputStream* st) const {\n@@ -811,1 +811,1 @@\n-void SerialHeap::print_on_error(outputStream* st) const {\n+void SerialHeap::print_gc_on(outputStream* st) const {\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -209,2 +209,2 @@\n-  void print_on(outputStream* st) const override;\n-  void print_on_error(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-    heap->print_on(&st);\n+    heap->print_heap_on(&st);\n@@ -173,1 +173,1 @@\n-    print_on(&ls);\n+    print_heap_on(&ls);\n@@ -189,1 +189,1 @@\n-    print_on(&ls);\n+    print_heap_on(&ls);\n@@ -198,1 +198,4 @@\n-void CollectedHeap::print() const { print_on(tty); }\n+void CollectedHeap::print() const {\n+  print_heap_on(tty);\n+  print_gc_on(tty);\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -438,4 +438,2 @@\n-  \/\/ Print heap information on the given outputStream.\n-  virtual void print_on(outputStream* st) const = 0;\n-  \/\/ The default behavior is to call print_on() on tty.\n-  virtual void print() const;\n+  \/\/ Print heap information.\n+  virtual void print_heap_on(outputStream* st) const = 0;\n@@ -443,1 +441,1 @@\n-  \/\/ Print additional information about the GC that is not included in print_on().\n+  \/\/ Print additional information about the GC that is not included in print_heap_on().\n@@ -445,1 +443,4 @@\n-  virtual void print_on_error(outputStream* st) const = 0;\n+  virtual void print_gc_on(outputStream* st) const = 0;\n+\n+  \/\/ The default behavior is to call print_heap_on() and print_gc_on() on tty.\n+  virtual void print() const;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -358,1 +358,1 @@\n-void ZCollectedHeap::print_on(outputStream* st) const {\n+void ZCollectedHeap::print_heap_on(outputStream* st) const {\n@@ -362,1 +362,1 @@\n-void ZCollectedHeap::print_on_error(outputStream* st) const {\n+void ZCollectedHeap::print_gc_on(outputStream* st) const {\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,2 +118,2 @@\n-  void print_on(outputStream* st) const override;\n-  void print_on_error(outputStream* st) const override;\n+  void print_heap_on(outputStream* st) const override;\n+  void print_gc_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1164,1 +1164,1 @@\n-  heap()->print_on(st);\n+  heap()->print_heap_on(st);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -415,1 +415,1 @@\n-  Universe::heap()->print_on(output());\n+  Universe::heap()->print_heap_on(output());\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1202,8 +1202,10 @@\n-      {\n-        st->print_cr(\"Heap:\");\n-        StreamAutoIndentor indentor(st, 1);\n-        Universe::heap()->print_on(st);\n-        MetaspaceUtils::print_on(st);\n-        st->cr();\n-      }\n-      Universe::heap()->print_on_error(st);\n+      st->print_cr(\"Heap:\");\n+      StreamAutoIndentor indentor(st, 1);\n+      Universe::heap()->print_heap_on(st);\n+      MetaspaceUtils::print_on(st);\n+      st->cr();\n+    }\n+\n+  STEP_IF(\"printing GC information\", _verbose)\n+    if (Universe::heap() != nullptr) {\n+      Universe::heap()->print_gc_on(st);\n@@ -1391,0 +1393,4 @@\n+  \/\/ Take heap lock over both heap and GC printing so that information is\n+  \/\/ consistent.\n+  Heap_lock->lock();\n+\n@@ -1394,1 +1400,0 @@\n-    MutexLocker hl(Heap_lock);\n@@ -1396,8 +1401,12 @@\n-    {\n-      st->print_cr(\"Heap:\");\n-      StreamAutoIndentor indentor(st, 1);\n-      Universe::heap()->print_on(st);\n-      MetaspaceUtils::print_on(st);\n-      st->cr();\n-    }\n-    Universe::heap()->print_on_error(st);\n+\n+    st->print_cr(\"Heap:\");\n+    StreamAutoIndentor indentor(st, 1);\n+    Universe::heap()->print_heap_on(st);\n+    MetaspaceUtils::print_on(st);\n+    st->cr();\n+  }\n+\n+  \/\/ STEP(\"printing GC information\")\n+\n+  if (Universe::is_fully_initialized()) {\n+    Universe::heap()->print_gc_on(st);\n@@ -1405,0 +1414,1 @@\n+\n@@ -1409,0 +1419,2 @@\n+  Heap_lock->unlock();\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":29,"deletions":17,"binary":false,"changes":46,"status":"modified"}]}