{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -758,0 +758,4 @@\n+    \/\/ The dominating control should not have any pinned nodes (e.g. stores),\n+    \/\/ otherwise these would be re-pinned to earlier control after folding the\n+    \/\/ ifs, and could be scheduled too early.\n+    ctrl->outcnt() == 1 &&\n@@ -1331,1 +1335,1 @@\n-    if (is_ctrl_folds(ctrl, igvn) && ctrl->outcnt() == 1) {\n+    if (is_ctrl_folds(ctrl, igvn)) {\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @bug 8255763 8258894\n+ * @bug 8255763 8258894 8320718\n@@ -40,0 +40,3 @@\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement::testOsrReducible3 compiler.codegen.TestGCMStorePlacement osrReducible3\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement::testOsrReducible3 -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM compiler.codegen.TestGCMStorePlacement osrReducible3\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement::testOsrReducible4 -XX:Tier4BackEdgeThreshold=1000 -XX:LoopMaxUnroll=0 compiler.codegen.TestGCMStorePlacement osrReducible4\n@@ -47,0 +50,2 @@\n+    static boolean alwaysFalse = false;\n+    static boolean bailout = false;\n@@ -157,0 +162,29 @@\n+    static void testOsrReducible3() {\n+        \/\/ Trigger OSR compilation.\n+        for (int i = 0; i < 50_000; i++) {\n+            intCounter++;\n+            if (alwaysFalse) { return; }\n+            for (int j = 0; j > i;) { break; }\n+            for (int j = 0; j < 100; ++j) { }\n+            if (bailout) { return; }\n+        }\n+    }\n+\n+    static void testOsrReducible4() {\n+        \/\/ Trigger OSR compilation.\n+        int i = 0;\n+        while (i < 2049) {\n+            \/\/ On OSR entry, i == intCounter == 2048. This test checks that\n+            \/\/ intCounter is not incremented once too often in a single run of\n+            \/\/ the pre-loop, which could happen if the outer and inner loop\n+            \/\/ conditions were treated as explicit range checks and\n+            \/\/ (erroneously) fused. See also\n+            \/\/ compiler.rangechecks.TestRangeChecksWithInterleavedStores.\n+            intCounter++;\n+            if (alwaysFalse) { return; }\n+            for (int j = 0; j > i;) { break; }\n+            if (bailout) { return; }\n+            i++;\n+        }\n+    }\n+\n@@ -218,0 +252,23 @@\n+        case \"osrReducible3\":\n+            \/\/ Warmup to make sure invocation counter is set and loop opts are\n+            \/\/ executed during OSR compilation of 'testOsrReducible3'\n+            \/\/ (workaround for JDK-8280320).\n+            bailout = true;\n+            for (int i = 0; i < 100; ++i) {\n+                testOsrReducible3();\n+            }\n+            intCounter = 0;\n+            bailout = false;\n+            \/\/ Trigger OSR compilation.\n+            testOsrReducible3();\n+            Asserts.assertEQ(intCounter, 50_000);\n+        case \"osrReducible4\":\n+            \/\/ Warmup and run similarly to the osrReducible3 case above.\n+            bailout = true;\n+            for (int i = 0; i < 100; ++i) {\n+                testOsrReducible4();\n+            }\n+            intCounter = 0;\n+            bailout = false;\n+            testOsrReducible4();\n+            Asserts.assertEQ(intCounter, 2049);\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestGCMStorePlacement.java","additions":59,"deletions":2,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -1537,0 +1537,5 @@\n+    public static final String UNSTABLE_FUSED_IF_TRAP = PREFIX + \"UNSTABLE_FUSED_IF_TRAP\" + POSTFIX;\n+    static {\n+        trapNodes(UNSTABLE_FUSED_IF_TRAP, \"unstable_fused_if\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.rangechecks;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/**\n+ * @test\n+ * @bug 8320718\n+ * @summary Test that range check-like pairs of checks are not folded into\n+ *          single checks in the presence of interleaved stores. Doing so would\n+ *          risk illegally hoisting the stores above their corresponding checks.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.rangechecks.TestRangeChecksWithInterleavedStores\n+ *\/\n+\n+public class TestRangeChecksWithInterleavedStores {\n+\n+    static int sum = 0;\n+    static boolean alwaysFalse = false;\n+\n+    public static void main(String[] args) {\n+        TestFramework testFramework = new TestFramework();\n+        testFramework.addScenarios(new Scenario(1),\n+                                   new Scenario(2, \"-XX:+StressGCM\"));\n+        testFramework.start();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.UNSTABLE_IF_TRAP, \"2\"})\n+    @IR(failOn = IRNode.UNSTABLE_FUSED_IF_TRAP)\n+    static boolean testTwoChecksWithPinnedStore(int i) {\n+        if (i < 0) {\n+            return false;\n+        }\n+        \/\/ This store is pinned to the above if-check. If the above if-check was\n+        \/\/ fused with the one below, the store would be free to be scheduled on\n+        \/\/ method entry, incrementing 'sum' even if i < 0.\n+        sum++;\n+        if (i >= 10) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Run(test = {\"testTwoChecksWithPinnedStore\"}, mode = RunMode.STANDALONE)\n+    public void runTestTwoChecksWithPinnedStore(RunInfo info) {\n+        sum = 0;\n+        for (int i = 0; i < 10_000; ++i) {\n+            testTwoChecksWithPinnedStore(5);\n+        }\n+        TestFramework.assertCompiledByC2(info.getTest());\n+        Asserts.assertEQ(10_000, sum);\n+        sum = 0;\n+        testTwoChecksWithPinnedStore(-1);\n+        TestFramework.assertDeoptimizedByC2(info.getTest());\n+        Asserts.assertEQ(0, sum);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.UNSTABLE_IF_TRAP, \"3\"})\n+    @IR(failOn = IRNode.UNSTABLE_FUSED_IF_TRAP)\n+    static boolean testThreeChecksWithPinnedStore(int i) {\n+        if (i < 0) {\n+            return false;\n+        }\n+        \/\/ This store is pinned to the above if-check. If the above if-check was\n+        \/\/ fused with the one below (i >= 10), the store would be free to be\n+        \/\/ scheduled on method entry, incrementing 'sum' even if i < 0.\n+        sum++;\n+        if (alwaysFalse) {\n+            return false;\n+        }\n+        if (i >= 10) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Run(test = {\"testThreeChecksWithPinnedStore\"}, mode = RunMode.STANDALONE)\n+    public void runTestThreeChecksWithPinnedStore(RunInfo info) {\n+        sum = 0;\n+        for (int i = 0; i < 10_000; ++i) {\n+            testThreeChecksWithPinnedStore(5);\n+        }\n+        TestFramework.assertCompiledByC2(info.getTest());\n+        Asserts.assertEQ(10_000, sum);\n+        sum = 0;\n+        testThreeChecksWithPinnedStore(-1);\n+        TestFramework.assertDeoptimizedByC2(info.getTest());\n+        Asserts.assertEQ(0, sum);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeChecksWithInterleavedStores.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}