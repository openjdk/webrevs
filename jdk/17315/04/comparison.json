{"files":[{"patch":"@@ -1092,1 +1092,2 @@\n-  assert_different_registers(a, b, tmp, atmp, btmp);\n+  assert_different_registers(a, tmp, atmp, btmp);\n+  assert_different_registers(b, tmp, atmp, btmp);\n@@ -1179,1 +1180,2 @@\n-  assert_different_registers(dst, a, b, atmp, btmp);\n+  assert_different_registers(dst, a, atmp, btmp);\n+  assert_different_registers(dst, b, atmp, btmp);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,0 +241,11 @@\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\"},\n+        counts = {IRNode.MAX_VD, \">0\"})\n+    public double[] vectorMax_8322090() {\n+        double[] res = new double[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = Math.max(d[i], d[i]);\n+        }\n+        return res;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicDoubleOpTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}