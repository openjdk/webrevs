{"files":[{"patch":"@@ -48,2 +48,3 @@\n- * The {@code Integer} class wraps a value of the primitive type\n- * {@code int} in an object. An object of type {@code Integer}\n+ * The {@code Integer} class is the {@linkplain\n+ * java.lang##wrapperClass wrapper class} for values of the primitive\n+ * type {@code int}. An object of type {@code Integer}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * programming language. The most important classes are {@code\n- * Object}, which is the root of the class hierarchy, and {@code\n+ * programming language. The most important classes are {@link\n+ * Object}, which is the root of the class hierarchy, and {@link\n@@ -33,4 +33,5 @@\n- * type as if it were an object. The wrapper classes {@code Boolean},\n- * {@code Character}, {@code Integer}, {@code Long}, {@code Float},\n- * and {@code Double} serve this purpose.  An object of type {@code\n- * Double}, for example, contains a field whose type is double,\n+ * type as if it were an object.<a id=\"wrapperClasses\"><\/a>\n+ * The <dfn>{@index \"wrapper classes\"}<\/dfn> {@link Boolean},\n+ * {@link Character}, {@link Short}, {@link Integer}, {@link Long}, {@link Float},\n+ * and {@link Double} serve this purpose.  An object of type {@code\n+ * Double}, for example, contains a field whose type is {@code double},\n@@ -38,1 +39,5 @@\n- * stored in a variable of reference type.  These classes also provide\n+ * stored in a variable of reference type.\n+ * As discussed in <cite>The Java Language Specification<\/cite>, the\n+ * wrapper classes are involved in boxing (JLS {@jls 5.1.7}) and\n+ * unboxing (JLS {@jls 5.1.8}) conversions.\n+ * These classes also provide\n@@ -40,3 +45,3 @@\n- * as supporting such standard methods as equals and hashCode.  The\n- * {@code Void} class is a non-instantiable class that holds a\n- * reference to a {@code Class} object representing the type void.\n+ * as supporting such standard methods as {@code equals} and {@code hashCode}.  The\n+ * {@link Void} class is a non-instantiable class that holds a\n+ * reference to a {@link Class} object representing the type {@code void}.\n@@ -44,3 +49,5 @@\n- * <p>The class {@code Math} provides commonly used mathematical\n- * functions such as sine, cosine, and square root. The classes {@code\n- * String}, {@code StringBuffer}, and {@code StringBuilder} similarly\n+ * <p>The class {@link Math} provides commonly used mathematical\n+ * functions such as {@linkplain Math#sin(double) sine},\n+ * {@linkplain Math#cos(double) cosine}, and\n+ * {@linkplain Math#sqrt(double) square root}. The classes {@link\n+ * String}, {@link StringBuffer}, and {@link StringBuilder} similarly\n@@ -49,3 +56,3 @@\n- * <p>Classes {@code ClassLoader}, {@code Process}, {@code\n- * ProcessBuilder}, {@code Runtime}, {@code SecurityManager}, and\n- * {@code System} provide \"system operations\" that manage the dynamic\n+ * <p>Classes {@link ClassLoader}, {@link Process}, {@link\n+ * ProcessBuilder}, {@link Runtime}, {@link SecurityManager}, and\n+ * {@link System} provide \"system operations\" that manage the dynamic\n@@ -56,1 +63,1 @@\n- * <p>Class {@code Throwable} encompasses objects that may be thrown\n+ * <p>Class {@link Throwable} encompasses objects that may be thrown\n","filename":"src\/java.base\/share\/classes\/java\/lang\/package-info.java","additions":25,"deletions":18,"binary":false,"changes":43,"status":"modified"}]}