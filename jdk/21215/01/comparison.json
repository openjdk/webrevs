{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,4 +40,4 @@\n- * The Boolean class wraps a value of the primitive type\n- * {@code boolean} in an object. An object of type\n- * {@code Boolean} contains a single field whose type is\n- * {@code boolean}.\n+ * The {@code Boolean} class is the {@linkplain\n+ * java.lang##wrapperClass wrapper class} for values of the primitive\n+ * type {@code boolean}. An object of type {@code Boolean} contains a\n+ * single field whose type is {@code boolean}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Boolean.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,4 +42,4 @@\n- *\n- * The {@code Byte} class wraps a value of primitive type {@code byte}\n- * in an object.  An object of type {@code Byte} contains a single\n- * field whose type is {@code byte}.\n+ * The {@code Byte} class is the {@linkplain\n+ * java.lang##wrapperClass wrapper class} for values of the primitive\n+ * type {@code byte}. An object of type {@code Byte} contains a\n+ * single field whose type is {@code byte}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Byte.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,6 +46,6 @@\n- * The {@code Character} class wraps a value of the primitive\n- * type {@code char} in an object. An object of class\n- * {@code Character} contains a single field whose type is\n- * {@code char}.\n- * <p>\n- * In addition, this class provides a large number of static methods for\n+ * The {@code Character} class is the {@linkplain\n+ * java.lang##wrapperClass wrapper class} for values of the primitive\n+ * type {@code char}. An object of type {@code Character} contains a\n+ * single field whose type is {@code char}.\n+ *\n+ * <p>In addition, this class provides a large number of static methods for\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,4 +39,4 @@\n- * The {@code Double} class wraps a value of the primitive type\n- * {@code double} in an object. An object of type\n- * {@code Double} contains a single field whose type is\n- * {@code double}.\n+ * The {@code Double} class is the {@linkplain\n+ * java.lang##wrapperClass wrapper class} for values of the primitive\n+ * type {@code double}. An object of type {@code Double} contains a\n+ * single field whose type is {@code double}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,4 +39,4 @@\n- * The {@code Float} class wraps a value of primitive type\n- * {@code float} in an object. An object of type\n- * {@code Float} contains a single field whose type is\n- * {@code float}.\n+ * The {@code Float} class is the {@linkplain\n+ * java.lang##wrapperClass wrapper class} for values of the primitive\n+ * type {@code float}. An object of type {@code Float} contains a\n+ * single field whose type is {@code float}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,3 +48,4 @@\n- * The {@code Integer} class wraps a value of the primitive type\n- * {@code int} in an object. An object of type {@code Integer}\n- * contains a single field whose type is {@code int}.\n+ * The {@code Integer} class is the {@linkplain\n+ * java.lang##wrapperClass wrapper class} for values of the primitive\n+ * type {@code int}. An object of type {@code Integer} contains a\n+ * single field whose type is {@code int}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,2 +48,3 @@\n- * The {@code Long} class wraps a value of the primitive type {@code\n- * long} in an object. An object of type {@code Long} contains a\n+ * The {@code Long} class is the {@linkplain\n+ * java.lang##wrapperClass wrapper class} for values of the primitive\n+ * type {@code long}. An object of type {@code Long} contains a\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,3 @@\n- * The {@code Short} class wraps a value of primitive type {@code\n- * short} in an object.  An object of type {@code Short} contains a\n+ * The {@code Short} class is the {@linkplain\n+ * java.lang##wrapperClass wrapper class} for values of the primitive\n+ * type {@code short}. An object of type {@code Short} contains a\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Short.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * programming language. The most important classes are {@code\n- * Object}, which is the root of the class hierarchy, and {@code\n+ * programming language. The most important classes are {@link\n+ * Object}, which is the root of the class hierarchy, and {@link\n@@ -33,10 +33,15 @@\n- * type as if it were an object. The wrapper classes {@code Boolean},\n- * {@code Character}, {@code Integer}, {@code Long}, {@code Float},\n- * and {@code Double} serve this purpose.  An object of type {@code\n- * Double}, for example, contains a field whose type is double,\n- * representing that value in such a way that a reference to it can be\n- * stored in a variable of reference type.  These classes also provide\n- * a number of methods for converting among primitive values, as well\n- * as supporting such standard methods as equals and hashCode.  The\n- * {@code Void} class is a non-instantiable class that holds a\n- * reference to a {@code Class} object representing the type void.\n+ * type as if it were an object.<a id=\"wrapperClasses\"><\/a> The\n+ * <dfn>{@index \"wrapper classes\"}<\/dfn> {@link Boolean}, {@link\n+ * Byte}, {@link Character}, {@link Short}, {@link Integer}, {@link\n+ * Long}, {@link Float}, and {@link Double} serve this purpose.  An\n+ * object of type {@code Double}, for example, contains a field whose\n+ * type is {@code double}, representing that value in such a way that\n+ * a reference to it can be stored in a variable of reference type.\n+ * As discussed in <cite>The Java Language Specification<\/cite>, the\n+ * wrapper classes are involved in boxing (JLS {@jls 5.1.7}) and\n+ * unboxing (JLS {@jls 5.1.8}) conversions.  These classes provide a\n+ * number of methods for converting among primitive values, as well as\n+ * methods supporting such standard functionality as {@code equals}\n+ * and {@code hashCode}.  The {@link Void} class is a non-instantiable\n+ * class that holds a reference to a {@link Class} object representing\n+ * the type {@code void}.\n@@ -44,4 +49,6 @@\n- * <p>The class {@code Math} provides commonly used mathematical\n- * functions such as sine, cosine, and square root. The classes {@code\n- * String}, {@code StringBuffer}, and {@code StringBuilder} similarly\n- * provide commonly used operations on character strings.\n+ * <p>The class {@link Math} provides commonly used mathematical\n+ * functions such as {@linkplain Math#sin(double) sine}, {@linkplain\n+ * Math#cos(double) cosine}, and {@linkplain Math#sqrt(double) square\n+ * root}. The classes {@link String}, {@link StringBuffer}, and {@link\n+ * StringBuilder} similarly provide commonly used operations on\n+ * character strings.\n@@ -49,3 +56,3 @@\n- * <p>Classes {@code ClassLoader}, {@code Process}, {@code\n- * ProcessBuilder}, {@code Runtime}, {@code SecurityManager}, and\n- * {@code System} provide \"system operations\" that manage the dynamic\n+ * <p>Classes {@link ClassLoader}, {@link Process}, {@link\n+ * ProcessBuilder}, {@link Runtime}, {@link SecurityManager}, and\n+ * {@link System} provide \"system operations\" that manage the dynamic\n@@ -56,1 +63,1 @@\n- * <p>Class {@code Throwable} encompasses objects that may be thrown\n+ * <p>Class {@link Throwable} encompasses objects that may be thrown\n","filename":"src\/java.base\/share\/classes\/java\/lang\/package-info.java","additions":28,"deletions":21,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -208,2 +208,3 @@\n-     *         unboxing conversion. Only types for the wrapper classes\n-     *         have an unboxing conversion.\n+     *         unboxing conversion. Only types for the {@linkplain\n+     *         java.lang##wrapperClasses wrapper classes} have an\n+     *         unboxing conversion.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Types.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}