{"files":[{"patch":"@@ -1300,3 +1300,0 @@\n-  if (t2 == TypeInt::INT)\n-    return TypeInt::INT;\n-\n@@ -1308,1 +1305,1 @@\n-  if (r2->is_con()) {\n+  if (!r1->is_con() && r2->is_con()) {\n@@ -1330,1 +1327,11 @@\n-  if( !r1->is_con() || !r2->is_con() )\n+  if (!r1->is_con() || !r2->is_con()) {\n+    \/\/ If the left input is non-negative the result must also be non-negative, regardless of what the right input is.\n+    if (r1->_lo >= 0) {\n+      return TypeInt::make(0, r1->_hi, MAX2(r1->_widen, r2->_widen));\n+    }\n+\n+    \/\/ Conversely, if the left input is negative then the result must be negative.\n+    if (r1->_hi <= -1) {\n+      return TypeInt::make(r1->_lo, -1, MAX2(r1->_widen, r2->_widen));\n+    }\n+\n@@ -1332,0 +1339,1 @@\n+  }\n@@ -1334,1 +1342,1 @@\n-  return TypeInt::make( r1->get_con() >> (r2->get_con()&31) );\n+  return TypeInt::make(r1->get_con() >> (r2->get_con() & 31));\n@@ -1362,3 +1370,0 @@\n-  if (t2 == TypeInt::INT)\n-    return TypeLong::LONG;\n-\n@@ -1370,1 +1375,1 @@\n-  if (r2->is_con()) {\n+  if (!r1->is_con() && r2->is_con()) {\n@@ -1392,1 +1397,15 @@\n-  return TypeLong::LONG;                \/\/ Give up\n+  if (!r1->is_con() || !r2->is_con()) {\n+    \/\/ If the left input is non-negative the result must also be non-negative, regardless of what the right input is.\n+    if (r1->_lo >= 0) {\n+      return TypeLong::make(0, r1->_hi, MAX2(r1->_widen, r2->_widen));\n+    }\n+\n+    \/\/ Conversely, if the left input is negative then the result must be negative.\n+    if (r1->_hi <= -1) {\n+      return TypeLong::make(r1->_lo, -1, MAX2(r1->_widen, r2->_widen));\n+    }\n+\n+    return TypeLong::LONG;\n+  }\n+\n+  return TypeLong::make(r1->get_con() >> (r2->get_con() & 63));\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":30,"deletions":11,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8320330\n+ * @summary Test that RShiftINode optimizations are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.RShiftINodeIdealizationTests\n+ *\/\n+public class RShiftINodeIdealizationTests {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\", \"test2\", \"test3\", \"test4\" })\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+        int b = RunInfo.getRandom().nextInt();\n+        int c = RunInfo.getRandom().nextInt();\n+        int d = RunInfo.getRandom().nextInt();\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(a, 0);\n+        assertResult(a, b);\n+        assertResult(b, a);\n+        assertResult(c, d);\n+        assertResult(d, c);\n+        assertResult(min, max);\n+        assertResult(max, min);\n+        assertResult(min, min);\n+        assertResult(max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int x, int y) {\n+        Asserts.assertEQ((x >> y) >= 0 ? 0 : 1, test1(x, y));\n+        Asserts.assertEQ(((x & 127) >> y) >= 0 ? 0 : 1, test2(x, y));\n+        Asserts.assertEQ(((-(x & 127) - 1) >> y) >= 0 ? 0 : 1, test3(x, y));\n+        Asserts.assertEQ((x >> 30) > 4 ? 0 : 1, test4(x, y));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.RSHIFT, \"1\" })\n+    public int test1(int x, int y) {\n+        return (x >> y) >= 0 ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.RSHIFT })\n+    public int test2(int x, int y) {\n+        return ((x & 127) >> y) >= 0 ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.RSHIFT })\n+    public int test3(int x, int y) {\n+        return ((-(x & 127) - 1) >> y) >= 0 ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.RSHIFT })\n+    public int test4(int x, int y) {\n+        return (x >> 30) > 4 ? 0 : 1;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/RShiftINodeIdealizationTests.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8320330\n+ * @summary Test that RShiftLNode optimizations are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.RShiftLNodeIdealizationTests\n+ *\/\n+public class RShiftLNodeIdealizationTests {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\", \"test2\", \"test3\", \"test4\" })\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextLong();\n+        long b = RunInfo.getRandom().nextLong();\n+        long c = RunInfo.getRandom().nextLong();\n+        long d = RunInfo.getRandom().nextLong();\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(a, 0);\n+        assertResult(a, b);\n+        assertResult(b, a);\n+        assertResult(c, d);\n+        assertResult(d, c);\n+        assertResult(min, max);\n+        assertResult(max, min);\n+        assertResult(min, min);\n+        assertResult(max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long x, long y) {\n+        Asserts.assertEQ((x >> y) >= 0 ? 0L : 1L, test1(x, y));\n+        Asserts.assertEQ(((x & 127) >> y) >= 0 ? 0L : 1L, test2(x, y));\n+        Asserts.assertEQ(((-(x & 127) - 1) >> y) >= 0 ? 0L : 1L, test3(x, y));\n+        Asserts.assertEQ((x >> 62) > 4 ? 0L : 1L, test4(x, y));\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.RSHIFT, \"1\" })\n+    public long test1(long x, long y) {\n+        return (x >> y) >= 0 ? 0 : 1;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.RSHIFT })\n+    public long test2(long x, long y) {\n+        return ((x & 127) >> y) >= 0 ? 0L : 1L;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.RSHIFT })\n+    public long test3(long x, long y) {\n+        return ((-(x & 127) - 1) >> y) >= 0 ? 0L : 1L;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.RSHIFT })\n+    public long test4(long x, long y) {\n+        return (x >> 62) > 4 ? 0L : 1L;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/RShiftLNodeIdealizationTests.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}