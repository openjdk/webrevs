{"files":[{"patch":"@@ -227,0 +227,7 @@\n+      case Bytecodes::_getstatic:\n+      case Bytecodes::_putstatic:\n+        maybe_resolve_fmi_ref(ik, m, raw_bc, bcs.get_index_u2(), preresolve_list, THREAD);\n+        if (HAS_PENDING_EXCEPTION) {\n+          CLEAR_PENDING_EXCEPTION; \/\/ just ignore\n+        }\n+        break;\n@@ -269,0 +276,1 @@\n+      case Bytecodes::_invokestatic:\n@@ -305,0 +313,1 @@\n+  const char* is_static = \"\";\n@@ -307,0 +316,9 @@\n+  case Bytecodes::_getstatic:\n+  case Bytecodes::_putstatic:\n+    if (!VM_Version::supports_fast_class_init_checks()) {\n+      return; \/\/ Do not resolve since interpreter lacks fast clinit barriers support\n+    }\n+    InterpreterRuntime::resolve_get_put(bc, raw_index, mh, cp, false \/*initialize_holder*\/, CHECK);\n+    is_static = \" *** static\";\n+    break;\n+\n@@ -312,0 +330,8 @@\n+  case Bytecodes::_invokestatic:\n+    if (!VM_Version::supports_fast_class_init_checks()) {\n+      return; \/\/ Do not resolve since interpreter lacks fast clinit barriers support\n+    }\n+    InterpreterRuntime::cds_resolve_invoke(bc, raw_index, cp, CHECK);\n+    is_static = \" *** static\";\n+    break;\n+\n@@ -331,1 +357,1 @@\n-    log_trace(aot, resolve)(\"%s %s [%3d] %s -> %s.%s:%s\",\n+    log_trace(aot, resolve)(\"%s %s [%3d] %s -> %s.%s:%s%s\",\n@@ -335,1 +361,1 @@\n-                            name->as_C_string(), signature->as_C_string());\n+                            name->as_C_string(), signature->as_C_string(), is_static);\n","filename":"src\/hotspot\/share\/cds\/aotConstantPoolResolver.cpp","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -280,1 +280,3 @@\n-        if (rfe->is_resolved(Bytecodes::_getfield) ||\n+        if (rfe->is_resolved(Bytecodes::_getstatic) ||\n+            rfe->is_resolved(Bytecodes::_putstatic) ||\n+            rfe->is_resolved(Bytecodes::_getfield) ||\n@@ -295,0 +297,1 @@\n+            rme->is_resolved(Bytecodes::_invokestatic) ||\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -92,1 +92,3 @@\n-            if (rfe->is_resolved(Bytecodes::_getfield) ||\n+            if (rfe->is_resolved(Bytecodes::_getstatic) ||\n+                rfe->is_resolved(Bytecodes::_putstatic) ||\n+                rfe->is_resolved(Bytecodes::_getfield) ||\n","filename":"src\/hotspot\/share\/cds\/finalImageRecipes.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -915,0 +915,1 @@\n+      case Bytecodes::_invokestatic:    LinkResolver::cds_resolve_static_call   (call_info, link_info, CHECK); break;\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1129,0 +1129,4 @@\n+void LinkResolver::cds_resolve_static_call(CallInfo& result, const LinkInfo& link_info, TRAPS) {\n+  resolve_static_call(result, link_info, \/*initialize_class*\/false, CHECK);\n+}\n+\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -331,0 +331,1 @@\n+  static void cds_resolve_static_call(CallInfo& result, const LinkInfo& link_info, TRAPS);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -178,1 +178,2 @@\n-             method->method_holder()->is_reentrant_initialization(JavaThread::current()),\n+             method->method_holder()->is_reentrant_initialization(JavaThread::current()) ||\n+             (CDSConfig::is_dumping_archive() && VM_Version::supports_fast_class_init_checks()),\n@@ -431,2 +432,7 @@\n-    bool resolved = rfi->is_resolved(Bytecodes::_getfield)  ||\n-                    rfi->is_resolved(Bytecodes::_putfield);\n+    bool resolved = false;\n+\n+    if (rfi->is_resolved(Bytecodes::_getfield) || rfi->is_resolved(Bytecodes::_putfield) ||\n+        ((rfi->is_resolved(Bytecodes::_getstatic) || rfi->is_resolved(Bytecodes::_putstatic)) && VM_Version::supports_fast_class_init_checks())) {\n+      resolved = true;\n+    }\n+\n@@ -447,1 +453,1 @@\n-      log.print(\"%s field  CP entry [%3d]: %s => %s.%s:%s\",\n+      log.print(\"%s field  CP entry [%3d]: %s => %s.%s:%s%s\",\n@@ -451,1 +457,2 @@\n-                klass_name->as_C_string(), name->as_C_string(), signature->as_C_string());\n+                klass_name->as_C_string(), name->as_C_string(), signature->as_C_string(),\n+                rfi->is_resolved(Bytecodes::_getstatic) || rfi->is_resolved(Bytecodes::_putstatic) ? \" *** static\" : \"\");\n@@ -466,0 +473,1 @@\n+                    rme->is_resolved(Bytecodes::_invokestatic)    ||\n@@ -469,3 +477,0 @@\n-    \/\/ Just for safety -- this should not happen, but do not archive if we ever see this.\n-    resolved &= !(rme->is_resolved(Bytecodes::_invokestatic));\n-\n@@ -498,1 +503,0 @@\n-      ArchiveBuilder::alloc_stats()->record_method_cp_entry(archived, resolved && !archived);\n@@ -500,0 +504,1 @@\n+    ArchiveBuilder::alloc_stats()->record_method_cp_entry(archived, resolved && !archived);\n@@ -537,0 +542,1 @@\n+  LogStreamHandle(Trace, aot, resolve) log;\n@@ -557,0 +563,9 @@\n+    if (method_entry->is_resolved(Bytecodes::_invokehandle) && !CDSConfig::is_dumping_method_handles()) {\n+      return false;\n+    }\n+    if (method_entry->method()->is_method_handle_intrinsic() && !CDSConfig::is_dumping_method_handles()) {\n+      return false;\n+    }\n+    if (method_entry->is_resolved(Bytecodes::_invokestatic) && !VM_Version::supports_fast_class_init_checks()) {\n+      return false;\n+    }\n@@ -565,15 +580,1 @@\n-\n-  if (method_entry->is_resolved(Bytecodes::_invokeinterface) ||\n-      method_entry->is_resolved(Bytecodes::_invokevirtual) ||\n-      method_entry->is_resolved(Bytecodes::_invokespecial)) {\n-    return true;\n-  } else if (method_entry->is_resolved(Bytecodes::_invokehandle)) {\n-    if (CDSConfig::is_dumping_method_handles()) {\n-      \/\/ invokehandle depends on archived MethodType and LambdaForms.\n-      return true;\n-    } else {\n-      return false;\n-    }\n-  } else {\n-    return false;\n-  }\n+  return true;\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":25,"deletions":24,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -61,0 +61,16 @@\n+\/*\n+ * @test id=aot\n+ * @summary Dump time resolution of constant pool entries (AOT workflow).\n+ * @requires vm.cds\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @requires vm.compMode != \"Xcomp\"\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/\n+ * @build OldProvider OldClass OldConsumer StringConcatTestOld\n+ * @build ResolvedConstants\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar\n+ *                 ResolvedConstantsApp ResolvedConstantsFoo ResolvedConstantsBar\n+ *                 MyInterface InterfaceWithClinit NormalClass\n+ *                 OldProvider OldClass OldConsumer SubOfOldClass\n+ *                 StringConcatTest StringConcatTestOld\n+ * @run driver ResolvedConstants AOT --two-step-training\n+ *\/\n@@ -125,0 +141,1 @@\n+            .shouldMatch(ALWAYS(\"field.* ResolvedConstantsApp => ResolvedConstantsApp.static_i:I\"))\n@@ -127,0 +144,1 @@\n+            .shouldMatch(AOTLINK_ONLY(\"field.* ResolvedConstantsFoo => ResolvedConstantsBar.static_b:I\"))\n@@ -131,0 +149,1 @@\n+            .shouldMatch(AOTLINK_ONLY(\"field.* ResolvedConstantsApp => ResolvedConstantsBar.static_b:I\"))\n@@ -153,2 +172,2 @@\n-            \/\/ Should not resolve references to static method\n-            .shouldNotMatch(ALWAYS(\"method.*: ResolvedConstantsApp ResolvedConstantsApp.staticCall:\"))\n+            \/\/ Should resolve references to static method\n+            .shouldMatch(ALWAYS(\"method.*: ResolvedConstantsApp ResolvedConstantsApp.staticCall:\"))\n@@ -167,1 +186,6 @@\n-            \/\/ Resole resolve methods in unrelated classes ONLY when using -XX:+AOTClassLinking\n+            \/\/ Resolve method references to child classes ONLY when using -XX:+AOTClassLinking\n+            .shouldMatch(AOTLINK_ONLY(\"method.* ResolvedConstantsFoo ResolvedConstantsBar.static_doit\"))\n+            .shouldMatch(AOTLINK_ONLY(\"method.* ResolvedConstantsFoo ResolvedConstantsBar.doit2\"))\n+\n+            \/\/ Resolve methods in unrelated classes ONLY when using -XX:+AOTClassLinking\n+            .shouldMatch(AOTLINK_ONLY(\"method.*: ResolvedConstantsApp ResolvedConstantsBar.static_doit:\"))\n@@ -206,0 +230,1 @@\n+        ResolvedConstantsApp.static_i ++;\n@@ -211,0 +236,2 @@\n+        ResolvedConstantsBar.static_b += 10;\n+        ResolvedConstantsBar.static_doit();\n@@ -221,0 +248,1 @@\n+    private static int static_i = 10;\n@@ -316,0 +344,3 @@\n+        ResolvedConstantsBar.static_b += 1;\n+        ResolvedConstantsBar.static_doit();\n+\n@@ -318,0 +349,1 @@\n+        bar.doit2();\n@@ -322,0 +354,1 @@\n+    public static int static_b = 10;\n@@ -323,0 +356,3 @@\n+    public static void static_doit() {\n+    }\n+\n@@ -333,0 +369,4 @@\n+\n+    void doit2() {\n+\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/resolvedConstants\/ResolvedConstants.java","additions":43,"deletions":3,"binary":false,"changes":46,"status":"modified"}]}