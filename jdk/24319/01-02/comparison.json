{"files":[{"patch":"@@ -656,1 +656,1 @@\n-    assert(!r->has_live(), \"Region %zu should have no live data\", r->index());\n+    assert(!r->has_marked(), \"Region %zu should have no marked data\", r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -928,0 +928,1 @@\n+  ShenandoahMarkingContext* _mark_context;\n@@ -934,0 +935,1 @@\n+                                   _mark_context(_heap->complete_marking_context()),\n@@ -987,0 +989,6 @@\n+#ifdef ASSERT\n+    \/\/ Verification and assert enforcement requires TAMS to equal top() at moment live data is set and requires\n+    \/\/ UWM >= TAMS\n+    _mark_context->capture_top_at_mark_start(r);\n+    r->set_update_watermark_at_safepoint(r->top());\n+#endif\n@@ -1096,1 +1104,1 @@\n-      if (heap->is_bitmap_slice_committed(region) && !region->is_pinned() && region->has_live()) {\n+      if (heap->is_bitmap_slice_committed(region) && !region->is_pinned() && region->has_marked()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -381,0 +381,2 @@\n+  inline bool has_marked() const;\n+\n@@ -383,1 +385,5 @@\n-  \/\/ Returns bytes identified as live at time of most recent mark. Does not include allocations subsequent to last mark.\n+  \/\/ Returns bytes identified as live by most recently completed marking effort.  Can only be called during safepoints.\n+  inline size_t get_marked_data_bytes() const;\n+\n+  \/\/ Returns bytes identified as live by most recently completed marking effort, plus allocations above TAMS.\n+  \/\/ Can only be called during safepoints.\n@@ -386,1 +392,2 @@\n-  \/\/ Returns words identified as live at time of most recent mark.  Can only be called during final mark safepoints.\n+  \/\/ Returns words identified as live by most recently completed marking effort, plus allocations above TAMS.\n+  \/\/ Can only be called during safepoints.\n@@ -395,2 +402,2 @@\n-  \/\/ Returns garbage by calculating difference between used and get_live_data_words.  Can only be called during final\n-  \/\/ meark safepoints. Allocations above TAMS are considered live.\n+  \/\/ Returns garbage by calculating difference between used and get_live_data_words.  Can only be called at\n+  \/\/ safepoints. Allocations above TAMS are considered live.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -152,0 +152,4 @@\n+inline size_t ShenandoahHeapRegion::get_marked_data_bytes() const {\n+  return Atomic::load(&_live_data) * HeapWordSize;\n+}\n+\n@@ -182,0 +186,4 @@\n+inline bool ShenandoahHeapRegion::has_marked() const {\n+  return Atomic::load(&_live_data) != 0;\n+}\n+\n@@ -197,1 +205,1 @@\n-  assert(used_before_promote >= get_live_data_bytes(),\n+  assert(used_before_promote >= get_marked_data_bytes(),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}