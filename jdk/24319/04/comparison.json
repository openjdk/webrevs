{"files":[{"patch":"@@ -132,0 +132,7 @@\n+    inline void update_livedata(size_t live) {\n+      _region_union._live_data = live;\n+#ifdef ASSERT\n+      _union_tag = is_live_data;\n+#endif\n+    }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -91,0 +91,11 @@\n+  \/\/ Between consecutive mixed-evacuation cycles, the live data within each candidate region may change due to\n+  \/\/ promotions and old-gen evacuations.  Re-sort the candidate regions in order to first evacuate regions that have\n+  \/\/ the smallest amount of live data.  These are easiest to evacuate with least effort.  Doing these first allows\n+  \/\/ us to more quickly replenish free memory with empty regions.\n+  for (uint i = _next_old_collection_candidate; i < _last_old_collection_candidate; i++) {\n+    ShenandoahHeapRegion* r = _region_data[i].get_region();\n+    _region_data[i].update_livedata(r->get_live_data_bytes());\n+  }\n+  QuickSort::sort<RegionData>(_region_data + _next_old_collection_candidate, unprocessed_old_collection_candidates(),\n+                              compare_by_live);\n+\n@@ -406,0 +417,4 @@\n+\n+#ifdef KELVIN_DEPRECATE\n+    r->capture_mixed_candidate_garbage();\n+#endif\n@@ -448,0 +463,4 @@\n+\n+#ifdef KELVIN_DEPRECATE\n+      r->capture_mixed_candidate_garbage();\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -656,1 +656,1 @@\n-    assert(!r->has_live(), \"Region %zu should have no live data\", r->index());\n+    assert(!r->has_marked(), \"Region %zu should have no marked data\", r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -928,0 +928,1 @@\n+  ShenandoahMarkingContext* _mark_context;\n@@ -934,0 +935,1 @@\n+                                   _mark_context(_heap->complete_marking_context()),\n@@ -986,1 +988,1 @@\n-    r->set_live_data(live);\n+    r->set_live_data_after_fullgc(live);\n@@ -1096,1 +1098,1 @@\n-      if (heap->is_bitmap_slice_committed(region) && !region->is_pinned() && region->has_live()) {\n+      if (heap->is_bitmap_slice_committed(region) && !region->is_pinned() && region->has_marked()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+  _mixed_candidate_garbage_words(0),\n@@ -394,1 +395,1 @@\n-void ShenandoahHeapRegion::set_live_data(size_t s) {\n+void ShenandoahHeapRegion::set_live_data_after_fullgc(size_t s) {\n@@ -396,1 +397,3 @@\n-  _live_data = (s >> LogHeapWordSize);\n+  ShenandoahMarkingContext* marking_context = ShenandoahHeap::heap()->complete_marking_context();\n+  size_t words_allocated_above_tams = pointer_delta(top(), marking_context->top_at_mark_start(this));\n+  _live_data = (s >> LogHeapWordSize) - words_allocated_above_tams;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -262,0 +262,2 @@\n+  size_t _mixed_candidate_garbage_words;\n+\n@@ -370,1 +372,1 @@\n-  void set_live_data(size_t s);\n+  void set_live_data_after_fullgc(size_t s);\n@@ -372,0 +374,1 @@\n+#ifdef KELVIN_DEPRECATE\n@@ -374,0 +377,1 @@\n+#endif\n@@ -378,0 +382,2 @@\n+  inline bool has_marked() const;\n+\n@@ -379,0 +385,6 @@\n+\n+  \/\/ Returns bytes identified as live by most recently completed marking effort.  Can only be called during safepoints.\n+  inline size_t get_marked_data_bytes() const;\n+\n+  \/\/ Returns bytes identified as live by most recently completed marking effort, plus allocations above TAMS.\n+  \/\/ Can only be called during safepoints.\n@@ -380,0 +392,3 @@\n+\n+  \/\/ Returns words identified as live by most recently completed marking effort, plus allocations above TAMS.\n+  \/\/ Can only be called during safepoints.\n@@ -381,0 +396,6 @@\n+#ifdef KELVIN_DEPRECATE\n+  inline size_t get_mixed_candidate_live_data_bytes() const;\n+  inline size_t get_mixed_candidate_live_data_words() const;\n+\n+  inline void capture_mixed_candidate_garbage();\n+#endif\n@@ -382,0 +403,2 @@\n+  \/\/ Returns garbage by calculating difference between used and get_live_data_words.  Can only be called at\n+  \/\/ safepoints. Allocations above TAMS are considered live.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+#ifdef KELVIN_DEPRECATE\n@@ -134,0 +135,1 @@\n+#endif\n@@ -150,0 +152,4 @@\n+inline size_t ShenandoahHeapRegion::get_marked_data_bytes() const {\n+  return Atomic::load(&_live_data) * HeapWordSize;\n+}\n+\n@@ -151,1 +157,4 @@\n-  return Atomic::load(&_live_data);\n+  ShenandoahMarkingContext *ctx = ShenandoahHeap::heap()->complete_marking_context();\n+  HeapWord* tams = ctx->top_at_mark_start(this);\n+  size_t words_above_tams = pointer_delta(top(), tams);\n+  return Atomic::load(&_live_data) + words_above_tams;\n@@ -158,0 +167,23 @@\n+#ifdef KELVIN_DEPRECATE\n+inline size_t ShenandoahHeapRegion::get_mixed_candidate_live_data_bytes() const {\n+  shenandoah_assert_safepoint();\n+  assert(used() >= _mixed_candidate_garbage_words * HeapWordSize, \"used must exceed garbage\");\n+  return used() - _mixed_candidate_garbage_words * HeapWordSize;\n+}\n+\n+inline size_t ShenandoahHeapRegion::get_mixed_candidate_live_data_words() const {\n+  shenandoah_assert_safepoint();\n+  assert(used() >= _mixed_candidate_garbage_words * HeapWordSize, \"used must exceed garbage\");\n+  return used() \/ HeapWordSize - _mixed_candidate_garbage_words;\n+}\n+\n+inline void ShenandoahHeapRegion::capture_mixed_candidate_garbage() {\n+  shenandoah_assert_safepoint();\n+  _mixed_candidate_garbage_words = garbage() \/ HeapWordSize;\n+}\n+#endif\n+\n+inline bool ShenandoahHeapRegion::has_marked() const {\n+  return Atomic::load(&_live_data) != 0;\n+}\n+\n@@ -166,1 +198,0 @@\n-\n@@ -174,1 +205,1 @@\n-  assert(used_before_promote >= get_live_data_bytes(),\n+  assert(used_before_promote >= get_marked_data_bytes(),\n@@ -176,2 +207,5 @@\n-         get_live_data_bytes(), used_before_promote);\n-  size_t result = used_before_promote - get_live_data_bytes();\n+         get_marked_data_bytes(), used_before_promote);\n+  ShenandoahMarkingContext *ctx = ShenandoahHeap::heap()->complete_marking_context();\n+  HeapWord* tams = ctx->top_at_mark_start(this);\n+  size_t bytes_allocated_during_mark = pointer_delta(get_top_before_promote(), tams) * HeapWordSize;\n+  size_t result = used_before_promote - (get_marked_data_bytes() + bytes_allocated_during_mark);\n@@ -179,1 +213,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp","additions":39,"deletions":6,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+#ifdef KELVIN_DEPRECATE\n@@ -74,0 +75,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionClosures.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    region->increase_live_data_alloc_words(live_bytes \/ HeapWordSize);\n+    region->increase_live_data_gc_words(live_bytes \/ HeapWordSize);\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahOldHeuristic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}