{"files":[{"patch":"@@ -988,7 +988,1 @@\n-    r->set_live_data(live);\n-#ifdef ASSERT\n-    \/\/ Verification and assert enforcement requires TAMS to equal top() at moment live data is set and requires\n-    \/\/ UWM >= TAMS\n-    _mark_context->capture_top_at_mark_start(r);\n-    r->set_update_watermark_at_safepoint(r->top());\n-#endif\n+    r->set_live_data_after_fullgc(live);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -395,1 +395,1 @@\n-void ShenandoahHeapRegion::set_live_data(size_t s) {\n+void ShenandoahHeapRegion::set_live_data_after_fullgc(size_t s) {\n@@ -397,1 +397,3 @@\n-  _live_data = (s >> LogHeapWordSize);\n+  ShenandoahMarkingContext* marking_context = ShenandoahHeap::heap()->complete_marking_context();\n+  size_t words_allocated_above_tams = pointer_delta(top(), marking_context->top_at_mark_start(this));\n+  _live_data = (s >> LogHeapWordSize) - words_allocated_above_tams;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -372,1 +372,2 @@\n-  void set_live_data(size_t s);\n+  void set_live_data_after_fullgc(size_t s);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}