{"files":[{"patch":"@@ -620,2 +620,1 @@\n-    isStaticMainField =\n-        (*env)->GetStaticFieldID(env, helperClass, \"isStaticMain\", \"Z\");\n+    isStaticMainField = (*env)->GetStaticFieldID(env, helperClass, \"isStaticMain\", \"Z\");\n@@ -623,2 +622,1 @@\n-    isStaticMain =\n-        (*env)->GetStaticBooleanField(env, helperClass, isStaticMainField);\n+    isStaticMain = (*env)->GetStaticBooleanField(env, helperClass, isStaticMainField);\n@@ -626,2 +624,1 @@\n-    noArgMainField =\n-        (*env)->GetStaticFieldID(env, helperClass, \"noArgMain\", \"Z\");\n+    noArgMainField = (*env)->GetStaticFieldID(env, helperClass, \"noArgMain\", \"Z\");\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+\n+\/**\n+ * @test\n+ * @bug 8329581\n+ * @summary verifies launcher prints stack trace when main class can't be loaded\n+ * @compile LauncherExceptionTest.java\n+ * @run main LauncherExceptionTest\n+ *\/\n+\n+public class LauncherExceptionTest extends TestHelper {\n+\n+    @Test\n+    void testLauncherReportsException() throws Exception {\n+        if (!isEnglishLocale()) {\n+            return;\n+        }\n+\n+        File cwd = new File(\".\");\n+        File srcDir = new File(cwd, \"src\");\n+        if (srcDir.exists()) {\n+            recursiveDelete(srcDir);\n+        }\n+        srcDir.mkdirs();\n+\n+        \/\/ Generate class Test.java\n+        ArrayList<String> scratchPad = new ArrayList<>();\n+        scratchPad.add(\"public class Test {\");\n+        scratchPad.add(\"    static class SomeDependency {}\");\n+        scratchPad.add(\"    private static final SomeDependency X = new SomeDependency();\");\n+        scratchPad.add(\"    public static void main(String... args) {\");\n+        scratchPad.add(\"        System.out.println(\\\"X=\\\" + X);\");\n+        scratchPad.add(\"    }\");\n+        scratchPad.add(\"}\");\n+        createFile(new File(srcDir, \"Test.java\"), scratchPad);\n+\n+\n+        \/\/ Compile and execute Test should succeed\n+        TestResult trCompilation = doExec(javacCmd,\n+                \"-d\", \"classes\",\n+                new File(srcDir, \"Test.java\").toString());\n+        if (!trCompilation.isOK()) {\n+            System.err.println(trCompilation);\n+            throw new RuntimeException(\"Error: compiling\");\n+        }\n+\n+        TestResult trExecution = doExec(javaCmd, \"-cp\", \"classes\", \"Test\");\n+        if (!trExecution.isOK()) {\n+            System.err.println(trExecution);\n+            throw new RuntimeException(\"Error: executing\");\n+        }\n+\n+        \/\/ Delete dependency\n+        trExecution = doExec(\"rm\", \"classes\/Test$SomeDependency.class\");\n+        if (!trExecution.isOK()) {\n+            System.err.println(trExecution);\n+            throw new RuntimeException(\"Error: deleting dependency\");\n+        }\n+\n+        \/\/ Executing Test should report exception description\n+        trExecution = doExec(javaCmd, \"-cp\", \"classes\", \"Test\");\n+        trExecution.contains(\"Exception in thread \\\"main\\\" java.lang.NoClassDefFoundError: \" +\n+                \"Test$SomeDependency\");\n+        trExecution.contains(\"Caused by: java.lang.ClassNotFoundException: \" +\n+                \"Test$SomeDependency\");\n+        if (!trExecution.testStatus)\n+            System.err.println(trExecution);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        LauncherExceptionTest a = new LauncherExceptionTest();\n+        a.run(args);\n+        if (testExitValue > 0) {\n+            System.out.println(\"Total of \" + testExitValue + \" failed\");\n+            throw new RuntimeException(\"Test failed\");\n+        } else {\n+            System.out.println(\"Test passed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/LauncherExceptionTest.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}