{"files":[{"patch":"@@ -907,21 +907,2 @@\n-    \/*\n-     * main type flags\n-     *\/\n-    private static final int MAIN_WITHOUT_ARGS = 1;\n-    private static final int MAIN_NONSTATIC = 2;\n-    private static int mainType = 0;\n-\n-    \/*\n-     * Return type so that launcher invokes the correct main\n-     *\/\n-    public static int getMainType() {\n-        return mainType;\n-    }\n-\n-    private static void setMainType(Method mainMethod) {\n-        int mods = mainMethod.getModifiers();\n-        boolean isStatic = Modifier.isStatic(mods);\n-        boolean noArgs = mainMethod.getParameterCount() == 0;\n-        mainType = (isStatic ? 0 : MAIN_NONSTATIC) | (noArgs ? MAIN_WITHOUT_ARGS : 0);\n-    }\n-\n+    private static boolean isStatic = false;\n+    private static boolean noArgs = false;\n@@ -951,2 +932,0 @@\n-        setMainType(mainMethod);\n-\n@@ -954,1 +933,1 @@\n-        boolean isStatic = Modifier.isStatic(mods);\n+        isStatic = Modifier.isStatic(mods);\n@@ -956,1 +935,1 @@\n-        boolean noArgs = mainMethod.getParameterCount() == 0;\n+        noArgs = mainMethod.getParameterCount() == 0;\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":4,"deletions":25,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -390,17 +390,0 @@\n-#define CHECK_EXCEPTION_FAIL() \\\n-    do { \\\n-        if ((*env)->ExceptionOccurred(env)) { \\\n-            return 0; \\\n-        } \\\n-    } while (JNI_FALSE)\n-\n-\n-#define CHECK_EXCEPTION_NULL_FAIL(mainObject) \\\n-    do { \\\n-        if ((*env)->ExceptionOccurred(env)) { \\\n-            return 0; \\\n-        } else if (mainObject == NULL) { \\\n-            return 0; \\\n-        } \\\n-    } while (JNI_FALSE)\n-\n@@ -408,2 +391,2 @@\n- * Invoke a static main with arguments. Returns 1 (true) if successful otherwise\n- * processes the pending exception from GetStaticMethodID and returns 0 (false).\n+ * Invoke a static main with arguments. Returns 0 if successful otherwise\n+ * processes the pending exception from GetStaticMethodID and returns 1.\n@@ -412,1 +395,2 @@\n-invokeStaticMainWithArgs(JNIEnv *env, jclass mainClass, jobjectArray mainArgs) {\n+invokeStaticMainWithArgs(JNIEnv *env, jclass mainClass, jobjectArray mainArgs,\n+        JavaVM *vm, int ret) {\n@@ -415,1 +399,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_LEAVE(1);\n@@ -417,1 +401,1 @@\n-    return 1;\n+    return 0;\n@@ -421,2 +405,2 @@\n- * Invoke an instance main with arguments. Returns 1 (true) if successful otherwise\n- * processes the pending exception from GetMethodID and returns 0 (false).\n+ * Invoke an instance main with arguments. Returns 0 if successful otherwise\n+ * processes the pending exception from GetMethodID and returns 1.\n@@ -425,1 +409,2 @@\n-invokeInstanceMainWithArgs(JNIEnv *env, jclass mainClass, jobjectArray mainArgs) {\n+invokeInstanceMainWithArgs(JNIEnv *env, jclass mainClass, jobjectArray mainArgs,\n+        JavaVM *vm, int ret) {\n@@ -427,1 +412,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_LEAVE(1);\n@@ -429,1 +414,1 @@\n-    CHECK_EXCEPTION_NULL_FAIL(mainObject);\n+    CHECK_EXCEPTION_NULL_LEAVE(mainObject);\n@@ -432,1 +417,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_LEAVE(1);\n@@ -434,2 +419,2 @@\n-    return 1;\n- }\n+    return 0;\n+}\n@@ -438,2 +423,2 @@\n- * Invoke a static main without arguments. Returns 1 (true) if successful otherwise\n- * processes the pending exception from GetStaticMethodID and returns 0 (false).\n+ * Invoke a static main without arguments. Returns 0 if successful otherwise\n+ * processes the pending exception from GetStaticMethodID and returns 1.\n@@ -442,1 +427,2 @@\n-invokeStaticMainWithoutArgs(JNIEnv *env, jclass mainClass) {\n+invokeStaticMainWithoutArgs(JNIEnv *env, jclass mainClass,\n+        JavaVM *vm, int ret) {\n@@ -445,1 +431,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_LEAVE(1);\n@@ -447,1 +433,1 @@\n-    return 1;\n+    return 0;\n@@ -451,2 +437,2 @@\n- * Invoke an instance main without arguments. Returns 1 (true) if successful otherwise\n- * processes the pending exception from GetMethodID and returns 0 (false).\n+ * Invoke an instance main without arguments. Returns 0 if successful otherwise\n+ * processes the pending exception from GetMethodID and returns 1.\n@@ -455,1 +441,2 @@\n-invokeInstanceMainWithoutArgs(JNIEnv *env, jclass mainClass) {\n+invokeInstanceMainWithoutArgs(JNIEnv *env, jclass mainClass,\n+        JavaVM *vm, int ret) {\n@@ -457,1 +444,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_LEAVE(1);\n@@ -459,1 +446,1 @@\n-    CHECK_EXCEPTION_NULL_FAIL(mainObject);\n+    CHECK_EXCEPTION_NULL_LEAVE(mainObject);\n@@ -462,1 +449,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_LEAVE(1);\n@@ -464,1 +451,1 @@\n-    return 1;\n+    return 0;\n@@ -622,3 +609,0 @@\n-#define MAIN_WITH_ARGS 0\n-#define MAIN_WITHOUT_ARGS 1\n-#define MAIN_NONSTATIC 2\n@@ -627,18 +611,22 @@\n-    jmethodID getMainType =\n-        (*env)->GetStaticMethodID(env, helperClass, \"getMainType\", \"()I\");\n-\n-    int mainType = (*env)->CallStaticIntMethod(env, helperClass, getMainType);\n-    int res = 0;\n-    switch (mainType) {\n-    case MAIN_WITH_ARGS:\n-        res = invokeStaticMainWithArgs(env, mainClass, mainArgs);\n-        break;\n-    case MAIN_WITHOUT_ARGS:\n-        res = invokeStaticMainWithoutArgs(env, mainClass);\n-        break;\n-    case MAIN_NONSTATIC:\n-        res = invokeInstanceMainWithArgs(env, mainClass, mainArgs);\n-        break;\n-    case MAIN_NONSTATIC | MAIN_WITHOUT_ARGS:\n-        res = invokeInstanceMainWithoutArgs(env, mainClass);\n-        break;\n+    jfieldID isStaticField =\n+        (*env)->GetStaticFieldID(env, helperClass, \"isStatic\", \"Z\");\n+    jboolean isStatic =\n+        (*env)->GetStaticBooleanField(env, helperClass, isStaticField);\n+\n+    jfieldID noArgsField =\n+        (*env)->GetStaticFieldID(env, helperClass, \"noArgs\", \"Z\");\n+    jboolean noArgs =\n+        (*env)->GetStaticBooleanField(env, helperClass, noArgsField);\n+\n+    if (isStatic) {\n+        if (noArgs) {\n+          ret = invokeStaticMainWithoutArgs(env, mainClass, vm, ret);\n+        } else {\n+          ret = invokeStaticMainWithArgs(env, mainClass, mainArgs, vm, ret);\n+        }\n+    } else {\n+       if (noArgs) {\n+         ret = invokeInstanceMainWithoutArgs(env, mainClass, vm, ret);\n+       } else {\n+         ret = invokeInstanceMainWithArgs(env, mainClass, mainArgs, vm, ret);\n+       }\n@@ -646,2 +634,3 @@\n-    if (!res) {\n-        CHECK_EXCEPTION_LEAVE(1);\n+\n+    if (ret) {\n+        return ret;\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":54,"deletions":65,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,3 @@\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n@@ -28,1 +31,2 @@\n- * @summary test execution priority of main methods\n+ * @bug 8329420\n+ * @summary test execution priority and behavior of main methods\n@@ -178,1 +182,1 @@\n-    public static void main(String... args) throws Exception {\n+    private static void testMethodOrder() throws Exception {\n@@ -180,8 +184,14 @@\n-            Files.writeString(Path.of(\"MainClass.java\"), source);\n-            var version = System.getProperty(\"java.specification.version\");\n-            var tr = doExec(javaCmd, \"--enable-preview\", \"--source\", version, \"MainClass.java\");\n-            if (!tr.isOK()) {\n-                System.err.println(source);\n-                System.err.println(tr);\n-                throw new AssertionError();\n-            }\n+            performTest(source, true, tr -> {\n+                if (!tr.isOK()) {\n+                    System.err.println(source);\n+                    System.err.println(tr);\n+                    throw new AssertionError();\n+                }\n+            });\n+        }\n+    }\n+\n+    record TestCase(String sourceCode, boolean enablePreview, List<String> expectedOutput) {\n+\n+        public TestCase(String sourceCode, List<String> expectedOutput) {\n+            this(sourceCode, true, expectedOutput);\n@@ -189,0 +199,169 @@\n+\n+    }\n+\n+    private static final TestCase[] EXECUTION_ORDER = new TestCase[] {\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                         }\n+                         public static void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    List.of(\"main called!\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                         }\n+                         public void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    List.of(\"Constructor called!\", \"main called!\"))\n+    };\n+\n+    private static void testExecutionOrder() throws Exception {\n+        for (TestCase testCase : EXECUTION_ORDER) {\n+            performTest(testCase.sourceCode, testCase.enablePreview(), tr -> {\n+                if (!Objects.equals(testCase.expectedOutput, tr.testOutput)) {\n+                    throw new AssertionError(\"Unexpected output, \" +\n+                            \"expected: \" + testCase.expectedOutput +\n+                            \", actual: \" + tr.testOutput);\n+                }\n+            });\n+        }\n+    }\n+\n+    private static final TestCase[] EXECUTION_ERRORS = new TestCase[] {\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    List.of(\"Constructor called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<init>(MainClass.java:4)\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    List.of(\"Constructor called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<init>(MainClass.java:4)\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static int idx;\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                             if (idx++ == 0) throw new Error();\n+                         }\n+                         public void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                         public void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    List.of(\"Constructor called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<init>(MainClass.java:5)\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static {\n+                             System.out.println(\"static init called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public static void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    false,\n+                    List.of(\"static init called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<clinit>(MainClass.java:4)\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static {\n+                             System.out.println(\"static init called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public static void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    true,\n+                    List.of(\"static init called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<clinit>(MainClass.java:4)\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static {\n+                             System.out.println(\"static init called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    true,\n+                    List.of(\"static init called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<clinit>(MainClass.java:4)\")),\n+    };\n+\n+    private static void testExecutionErrors() throws Exception {\n+        for (TestCase testCase : EXECUTION_ERRORS) {\n+            performTest(testCase.sourceCode, testCase.enablePreview(), tr -> {\n+                for (int i = 0; i < testCase.expectedOutput.size(); i++) {\n+                    if (i >= tr.testOutput.size() ||\n+                            !Objects.equals(testCase.expectedOutput.get(i),\n+                                    tr.testOutput.get(i))) {\n+                        throw new AssertionError(\"Unexpected output, \" +\n+                                \"expected: \" + testCase.expectedOutput +\n+                                \", actual: \" + tr.testOutput +\n+                                \", failed comparison at index: \" + i);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void performTest(String source, boolean enablePreview, Consumer<TestResult> validator) throws Exception {\n+        Path mainClass = Path.of(\"MainClass.java\");\n+        Files.writeString(mainClass, source);\n+        var version = System.getProperty(\"java.specification.version\");\n+        var previewRuntime = enablePreview ? \"--enable-preview\" : \"-DtestNoPreview\";\n+        var previewCompile = enablePreview ? \"--enable-preview\" : \"-XDtestNoPreview\";\n+        var trSource = doExec(javaCmd, previewRuntime, \"--source\", version, \"MainClass.java\");\n+        validator.accept(trSource);\n+        compile(previewCompile, \"--source\", version, \"MainClass.java\");\n+        String cp = mainClass.toAbsolutePath().getParent().toString();\n+        var trCompile = doExec(javaCmd, previewRuntime, \"--class-path\", cp, \"MainClass\");\n+        validator.accept(trCompile);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        testMethodOrder();\n+        testExecutionOrder();\n+        testExecutionErrors();\n","filename":"test\/jdk\/tools\/launcher\/InstanceMainTest.java","additions":190,"deletions":11,"binary":false,"changes":201,"status":"modified"}]}