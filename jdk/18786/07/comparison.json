{"files":[{"patch":"@@ -907,0 +907,3 @@\n+    private static boolean isStaticMain = false;\n+    private static boolean noArgMain = false;\n+\n@@ -930,1 +933,1 @@\n-        boolean isStatic = Modifier.isStatic(mods);\n+        isStaticMain = Modifier.isStatic(mods);\n@@ -932,1 +935,1 @@\n-        boolean noArgs = mainMethod.getParameterCount() == 0;\n+        noArgMain = mainMethod.getParameterCount() == 0;\n@@ -935,1 +938,1 @@\n-            if (!isStatic || !isPublic || noArgs) {\n+            if (!isStaticMain || !isPublic || noArgMain) {\n@@ -942,1 +945,1 @@\n-        if (!isStatic) {\n+        if (!isStaticMain) {\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -390,1 +390,1 @@\n-#define CHECK_EXCEPTION_FAIL() \\\n+#define CHECK_EXCEPTION_NULL_FAIL(obj) \\\n@@ -393,1 +393,0 @@\n-            (*env)->ExceptionClear(env); \\\n@@ -395,10 +394,1 @@\n-        } \\\n-    } while (JNI_FALSE)\n-\n-\n-#define CHECK_EXCEPTION_NULL_FAIL(mainObject) \\\n-    do { \\\n-        if ((*env)->ExceptionOccurred(env)) { \\\n-            (*env)->ExceptionClear(env); \\\n-            return 0; \\\n-        } else if (mainObject == NULL) { \\\n+        } else if (obj == NULL) { \\\n@@ -417,1 +407,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_NULL_FAIL(mainID);\n@@ -428,0 +418,3 @@\n+    jmethodID mainID =\n+        (*env)->GetMethodID(env, mainClass, \"main\", \"([Ljava\/lang\/String;)V\");\n+    CHECK_EXCEPTION_NULL_FAIL(mainID);\n@@ -429,1 +422,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_NULL_FAIL(constructor);\n@@ -432,3 +425,0 @@\n-    jmethodID mainID = (*env)->GetMethodID(env, mainClass, \"main\",\n-                                 \"([Ljava\/lang\/String;)V\");\n-    CHECK_EXCEPTION_FAIL();\n@@ -437,1 +427,1 @@\n- }\n+}\n@@ -447,1 +437,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_NULL_FAIL(mainID);\n@@ -459,1 +449,1 @@\n-    CHECK_EXCEPTION_FAIL();\n+    CHECK_EXCEPTION_NULL_FAIL(constructor);\n@@ -462,3 +452,2 @@\n-    jmethodID mainID = (*env)->GetMethodID(env, mainClass, \"main\",\n-                                 \"()V\");\n-    CHECK_EXCEPTION_FAIL();\n+    jmethodID mainID = (*env)->GetMethodID(env, mainClass, \"main\", \"()V\");\n+    CHECK_EXCEPTION_NULL_FAIL(mainID);\n@@ -486,0 +475,5 @@\n+    jclass helperClass;\n+    jfieldID isStaticMainField;\n+    jboolean isStaticMain;\n+    jfieldID noArgMainField;\n+    jboolean noArgMain;\n@@ -623,6 +617,26 @@\n-    if (!invokeStaticMainWithArgs(env, mainClass, mainArgs) &&\n-        !invokeInstanceMainWithArgs(env, mainClass, mainArgs) &&\n-        !invokeStaticMainWithoutArgs(env, mainClass) &&\n-        !invokeInstanceMainWithoutArgs(env, mainClass)) {\n-        ret = 1;\n-        LEAVE();\n+\n+\n+    helperClass = GetLauncherHelperClass(env);\n+    isStaticMainField = (*env)->GetStaticFieldID(env, helperClass, \"isStaticMain\", \"Z\");\n+    CHECK_EXCEPTION_NULL_LEAVE(isStaticMainField);\n+    isStaticMain = (*env)->GetStaticBooleanField(env, helperClass, isStaticMainField);\n+\n+    noArgMainField = (*env)->GetStaticFieldID(env, helperClass, \"noArgMain\", \"Z\");\n+    CHECK_EXCEPTION_NULL_LEAVE(noArgMainField);\n+    noArgMain = (*env)->GetStaticBooleanField(env, helperClass, noArgMainField);\n+\n+    if (isStaticMain) {\n+        if (noArgMain) {\n+            ret = invokeStaticMainWithoutArgs(env, mainClass);\n+        } else {\n+            ret = invokeStaticMainWithArgs(env, mainClass, mainArgs);\n+        }\n+    } else {\n+       if (noArgMain) {\n+            ret = invokeInstanceMainWithoutArgs(env, mainClass);\n+       } else {\n+            ret = invokeInstanceMainWithArgs(env, mainClass, mainArgs);\n+       }\n+    }\n+    if (!ret) {\n+        CHECK_EXCEPTION_LEAVE(1);\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":43,"deletions":29,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,3 @@\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n@@ -28,1 +31,2 @@\n- * @summary test execution priority of main methods\n+ * @bug 8329420\n+ * @summary test execution priority and behavior of main methods\n@@ -178,1 +182,1 @@\n-    public static void main(String... args) throws Exception {\n+    private static void testMethodOrder() throws Exception {\n@@ -180,8 +184,14 @@\n-            Files.writeString(Path.of(\"MainClass.java\"), source);\n-            var version = System.getProperty(\"java.specification.version\");\n-            var tr = doExec(javaCmd, \"--enable-preview\", \"--source\", version, \"MainClass.java\");\n-            if (!tr.isOK()) {\n-                System.err.println(source);\n-                System.err.println(tr);\n-                throw new AssertionError();\n-            }\n+            performTest(source, true, tr -> {\n+                if (!tr.isOK()) {\n+                    System.err.println(source);\n+                    System.err.println(tr);\n+                    throw new AssertionError();\n+                }\n+            });\n+        }\n+    }\n+\n+    record TestCase(String sourceCode, boolean enablePreview, List<String> expectedOutput) {\n+\n+        public TestCase(String sourceCode, List<String> expectedOutput) {\n+            this(sourceCode, true, expectedOutput);\n@@ -189,0 +199,169 @@\n+\n+    }\n+\n+    private static final TestCase[] EXECUTION_ORDER = new TestCase[] {\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                         }\n+                         public static void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    List.of(\"main called!\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                         }\n+                         public void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    List.of(\"Constructor called!\", \"main called!\"))\n+    };\n+\n+    private static void testExecutionOrder() throws Exception {\n+        for (TestCase testCase : EXECUTION_ORDER) {\n+            performTest(testCase.sourceCode, testCase.enablePreview(), tr -> {\n+                if (!Objects.equals(testCase.expectedOutput, tr.testOutput)) {\n+                    throw new AssertionError(\"Unexpected output, \" +\n+                            \"expected: \" + testCase.expectedOutput +\n+                            \", actual: \" + tr.testOutput);\n+                }\n+            });\n+        }\n+    }\n+\n+    private static final TestCase[] EXECUTION_ERRORS = new TestCase[] {\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    List.of(\"Constructor called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<init>(MainClass.java:4)\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    List.of(\"Constructor called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<init>(MainClass.java:4)\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static int idx;\n+                         public MainClass() {\n+                             System.out.println(\"Constructor called!\");\n+                             if (idx++ == 0) throw new Error();\n+                         }\n+                         public void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                         public void main() {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    List.of(\"Constructor called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<init>(MainClass.java:5)\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static {\n+                             System.out.println(\"static init called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public static void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    false,\n+                    List.of(\"static init called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<clinit>(MainClass.java:4)\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static {\n+                             System.out.println(\"static init called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public static void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    true,\n+                    List.of(\"static init called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<clinit>(MainClass.java:4)\")),\n+            new TestCase(\"\"\"\n+                     public class MainClass {\n+                         static {\n+                             System.out.println(\"static init called!\");\n+                             if (true) throw new Error();\n+                         }\n+                         public void main(String... args) {\n+                             System.out.println(\"main called!\");\n+                         }\n+                     }\n+                     \"\"\",\n+                    true,\n+                    List.of(\"static init called!\",\n+                            \"Exception in thread \\\"main\\\" java.lang.Error\",\n+                            \"\\tat MainClass.<clinit>(MainClass.java:4)\")),\n+    };\n+\n+    private static void testExecutionErrors() throws Exception {\n+        for (TestCase testCase : EXECUTION_ERRORS) {\n+            performTest(testCase.sourceCode, testCase.enablePreview(), tr -> {\n+                for (int i = 0; i < testCase.expectedOutput.size(); i++) {\n+                    if (i >= tr.testOutput.size() ||\n+                            !Objects.equals(testCase.expectedOutput.get(i),\n+                                    tr.testOutput.get(i))) {\n+                        throw new AssertionError(\"Unexpected output, \" +\n+                                \"expected: \" + testCase.expectedOutput +\n+                                \", actual: \" + tr.testOutput +\n+                                \", failed comparison at index: \" + i);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void performTest(String source, boolean enablePreview, Consumer<TestResult> validator) throws Exception {\n+        Path mainClass = Path.of(\"MainClass.java\");\n+        Files.writeString(mainClass, source);\n+        var version = System.getProperty(\"java.specification.version\");\n+        var previewRuntime = enablePreview ? \"--enable-preview\" : \"-DtestNoPreview\";\n+        var previewCompile = enablePreview ? \"--enable-preview\" : \"-XDtestNoPreview\";\n+        var trSource = doExec(javaCmd, previewRuntime, \"--source\", version, \"MainClass.java\");\n+        validator.accept(trSource);\n+        compile(previewCompile, \"--source\", version, \"MainClass.java\");\n+        String cp = mainClass.toAbsolutePath().getParent().toString();\n+        var trCompile = doExec(javaCmd, previewRuntime, \"--class-path\", cp, \"MainClass\");\n+        validator.accept(trCompile);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        testMethodOrder();\n+        testExecutionOrder();\n+        testExecutionErrors();\n","filename":"test\/jdk\/tools\/launcher\/InstanceMainTest.java","additions":190,"deletions":11,"binary":false,"changes":201,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+\n+\/**\n+ * @test\n+ * @bug 8329581\n+ * @summary verifies launcher prints stack trace when main class can't be loaded\n+ * @compile LauncherExceptionTest.java\n+ * @run main LauncherExceptionTest\n+ *\/\n+\n+public class LauncherExceptionTest extends TestHelper {\n+\n+    @Test\n+    void testLauncherReportsException() throws Exception {\n+        if (!isEnglishLocale()) {\n+            return;\n+        }\n+\n+        File cwd = new File(\".\");\n+        File srcDir = new File(cwd, \"src\");\n+        if (srcDir.exists()) {\n+            recursiveDelete(srcDir);\n+        }\n+        srcDir.mkdirs();\n+\n+        \/\/ Generate class Test.java\n+        ArrayList<String> scratchPad = new ArrayList<>();\n+        scratchPad.add(\"public class Test {\");\n+        scratchPad.add(\"    static class SomeDependency {}\");\n+        scratchPad.add(\"    private static final SomeDependency X = new SomeDependency();\");\n+        scratchPad.add(\"    public static void main(String... args) {\");\n+        scratchPad.add(\"        System.out.println(\\\"X=\\\" + X);\");\n+        scratchPad.add(\"    }\");\n+        scratchPad.add(\"}\");\n+        createFile(new File(srcDir, \"Test.java\"), scratchPad);\n+\n+\n+        \/\/ Compile and execute Test should succeed\n+        TestResult trCompilation = doExec(javacCmd,\n+                \"-d\", \"classes\",\n+                new File(srcDir, \"Test.java\").toString());\n+        if (!trCompilation.isOK()) {\n+            System.err.println(trCompilation);\n+            throw new RuntimeException(\"Error: compiling\");\n+        }\n+\n+        TestResult trExecution = doExec(javaCmd, \"-cp\", \"classes\", \"Test\");\n+        if (!trExecution.isOK()) {\n+            System.err.println(trExecution);\n+            throw new RuntimeException(\"Error: executing\");\n+        }\n+\n+        \/\/ Delete dependency\n+        File dependency = new File(\"classes\/Test$SomeDependency.class\");\n+        recursiveDelete(dependency);\n+\n+        \/\/ Executing Test should report exception description\n+        trExecution = doExec(javaCmd, \"-cp\", \"classes\", \"Test\");\n+        trExecution.contains(\"Exception in thread \\\"main\\\" java.lang.NoClassDefFoundError: \" +\n+                \"Test$SomeDependency\");\n+        trExecution.contains(\"Caused by: java.lang.ClassNotFoundException: \" +\n+                \"Test$SomeDependency\");\n+        if (!trExecution.testStatus)\n+            System.err.println(trExecution);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        LauncherExceptionTest a = new LauncherExceptionTest();\n+        a.run(args);\n+        if (testExitValue > 0) {\n+            System.out.println(\"Total of \" + testExitValue + \" failed\");\n+            throw new RuntimeException(\"Test failed\");\n+        } else {\n+            System.out.println(\"Test passed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/LauncherExceptionTest.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}