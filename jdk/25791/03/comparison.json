{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,5 +46,5 @@\n-define_pd_global(intx, InitialCodeCacheSize,         160*K);\n-define_pd_global(intx, ReservedCodeCacheSize,        32*M );\n-define_pd_global(intx, NonProfiledCodeHeapSize,      13*M );\n-define_pd_global(intx, ProfiledCodeHeapSize,         14*M );\n-define_pd_global(intx, NonNMethodCodeHeapSize,       5*M  );\n+define_pd_global(size_t, InitialCodeCacheSize,       160*K);\n+define_pd_global(size_t, ReservedCodeCacheSize,      32*M );\n+define_pd_global(size_t, NonProfiledCodeHeapSize,    13*M );\n+define_pd_global(size_t, ProfiledCodeHeapSize,       14*M );\n+define_pd_global(size_t, NonNMethodCodeHeapSize,     5*M  );\n@@ -52,3 +52,3 @@\n-define_pd_global(intx, CodeCacheExpansionSize,       32*K );\n-define_pd_global(uintx, CodeCacheMinBlockLength,     1);\n-define_pd_global(uintx, CodeCacheMinimumUseSpace,    400*K);\n+define_pd_global(size_t, CodeCacheExpansionSize,     32*K );\n+define_pd_global(size_t, CodeCacheMinBlockLength,    1);\n+define_pd_global(size_t, CodeCacheMinimumUseSpace,   400*K);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_globals_aarch64.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,2 +54,2 @@\n-define_pd_global(intx, InitialCodeCacheSize,         2496*K); \/\/ Integral multiple of CodeCacheExpansionSize\n-define_pd_global(intx, CodeCacheExpansionSize,       64*K);\n+define_pd_global(size_t, InitialCodeCacheSize,       2496*K); \/\/ Integral multiple of CodeCacheExpansionSize\n+define_pd_global(size_t, CodeCacheExpansionSize,     64*K);\n@@ -72,6 +72,6 @@\n-define_pd_global(intx, ReservedCodeCacheSize,        48*M);\n-define_pd_global(intx, NonProfiledCodeHeapSize,      21*M);\n-define_pd_global(intx, ProfiledCodeHeapSize,         22*M);\n-define_pd_global(intx, NonNMethodCodeHeapSize,       5*M );\n-define_pd_global(uintx, CodeCacheMinBlockLength,     6);\n-define_pd_global(uintx, CodeCacheMinimumUseSpace,    400*K);\n+define_pd_global(size_t, ReservedCodeCacheSize,      48*M);\n+define_pd_global(size_t, NonProfiledCodeHeapSize,    21*M);\n+define_pd_global(size_t, ProfiledCodeHeapSize,       22*M);\n+define_pd_global(size_t, NonNMethodCodeHeapSize,     5*M );\n+define_pd_global(size_t, CodeCacheMinBlockLength,    6);\n+define_pd_global(size_t, CodeCacheMinimumUseSpace,   400*K);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_globals_aarch64.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-define_pd_global(uintx, CodeCacheSegmentSize,    64);\n+define_pd_global(size_t, CodeCacheSegmentSize,   64);\n","filename":"src\/hotspot\/cpu\/aarch64\/globals_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-define_pd_global(uintx, CodeCacheMinBlockLength,     1);\n+define_pd_global(size_t, CodeCacheMinBlockLength,    1);\n","filename":"src\/hotspot\/cpu\/arm\/c1_globals_arm.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,1 @@\n-define_pd_global(uintx, CodeCacheMinBlockLength,     6);\n+define_pd_global(size_t, CodeCacheMinBlockLength,    6);\n","filename":"src\/hotspot\/cpu\/arm\/c2_globals_arm.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,3 +39,3 @@\n-define_pd_global(uintx, CodeCacheSegmentSize,     64);\n-define_pd_global(intx,  CodeEntryAlignment,       16);\n-define_pd_global(intx,  OptoLoopAlignment,        16);\n+define_pd_global(size_t, CodeCacheSegmentSize,     64);\n+define_pd_global(intx,   CodeEntryAlignment,       16);\n+define_pd_global(intx,   OptoLoopAlignment,        16);\n","filename":"src\/hotspot\/cpu\/arm\/globals_arm.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,7 +47,7 @@\n-define_pd_global(uintx,    ReservedCodeCacheSize,        32*M);\n-define_pd_global(uintx,    NonProfiledCodeHeapSize,      13*M );\n-define_pd_global(uintx,    ProfiledCodeHeapSize,         14*M );\n-define_pd_global(uintx,    NonNMethodCodeHeapSize,       5*M );\n-define_pd_global(uintx,    CodeCacheExpansionSize,       32*K);\n-define_pd_global(uintx,    CodeCacheMinBlockLength,      1);\n-define_pd_global(uintx,    CodeCacheMinimumUseSpace,     400*K);\n+define_pd_global(size_t,   ReservedCodeCacheSize,        32*M);\n+define_pd_global(size_t,   NonProfiledCodeHeapSize,      13*M );\n+define_pd_global(size_t,   ProfiledCodeHeapSize,         14*M );\n+define_pd_global(size_t,   NonNMethodCodeHeapSize,       5*M );\n+define_pd_global(size_t,   CodeCacheExpansionSize,       32*K);\n+define_pd_global(size_t,   CodeCacheMinBlockLength,      1);\n+define_pd_global(size_t,   CodeCacheMinimumUseSpace,     400*K);\n@@ -57,1 +57,1 @@\n-define_pd_global(uintx,    InitialCodeCacheSize,         160*K);\n+define_pd_global(size_t,   InitialCodeCacheSize,         160*K);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_globals_ppc.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,6 +81,6 @@\n-define_pd_global(uintx,    InitialCodeCacheSize,         2048*K); \/\/ Integral multiple of CodeCacheExpansionSize\n-define_pd_global(uintx,    ReservedCodeCacheSize,        48*M);\n-define_pd_global(uintx,    NonProfiledCodeHeapSize,      21*M);\n-define_pd_global(uintx,    ProfiledCodeHeapSize,         22*M);\n-define_pd_global(uintx,    NonNMethodCodeHeapSize,       5*M  );\n-define_pd_global(uintx,    CodeCacheExpansionSize,       64*K);\n+define_pd_global(size_t,   InitialCodeCacheSize,         2048*K); \/\/ Integral multiple of CodeCacheExpansionSize\n+define_pd_global(size_t,   ReservedCodeCacheSize,        48*M);\n+define_pd_global(size_t,   NonProfiledCodeHeapSize,      21*M);\n+define_pd_global(size_t,   ProfiledCodeHeapSize,         22*M);\n+define_pd_global(size_t,   NonNMethodCodeHeapSize,       5*M  );\n+define_pd_global(size_t,   CodeCacheExpansionSize,       64*K);\n@@ -90,2 +90,2 @@\n-define_pd_global(uintx,    CodeCacheMinBlockLength,      6);\n-define_pd_global(uintx,    CodeCacheMinimumUseSpace,     400*K);\n+define_pd_global(size_t,   CodeCacheMinBlockLength,      6);\n+define_pd_global(size_t,   CodeCacheMinimumUseSpace,     400*K);\n","filename":"src\/hotspot\/cpu\/ppc\/c2_globals_ppc.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,4 +62,4 @@\n-define_pd_global(uintx, CodeCacheSegmentSize,  128);\n-define_pd_global(intx,  CodeEntryAlignment,    64);\n-define_pd_global(intx,  OptoLoopAlignment,     16);\n-define_pd_global(intx,  InlineSmallCode,       1500);\n+define_pd_global(size_t, CodeCacheSegmentSize,  128);\n+define_pd_global(intx,   CodeEntryAlignment,    64);\n+define_pd_global(intx,   OptoLoopAlignment,     16);\n+define_pd_global(intx,   InlineSmallCode,       1500);\n","filename":"src\/hotspot\/cpu\/ppc\/globals_ppc.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,5 +46,5 @@\n-define_pd_global(intx, InitialCodeCacheSize,         160*K);\n-define_pd_global(intx, ReservedCodeCacheSize,        32*M );\n-define_pd_global(intx, NonProfiledCodeHeapSize,      13*M );\n-define_pd_global(intx, ProfiledCodeHeapSize,         14*M );\n-define_pd_global(intx, NonNMethodCodeHeapSize,       5*M  );\n+define_pd_global(size_t, InitialCodeCacheSize,       160*K);\n+define_pd_global(size_t, ReservedCodeCacheSize,      32*M );\n+define_pd_global(size_t, NonProfiledCodeHeapSize,    13*M );\n+define_pd_global(size_t, ProfiledCodeHeapSize,       14*M );\n+define_pd_global(size_t, NonNMethodCodeHeapSize,     5*M  );\n@@ -52,3 +52,3 @@\n-define_pd_global(intx, CodeCacheExpansionSize,       32*K );\n-define_pd_global(uintx, CodeCacheMinBlockLength,     1);\n-define_pd_global(uintx, CodeCacheMinimumUseSpace,    400*K);\n+define_pd_global(size_t, CodeCacheExpansionSize,     32*K );\n+define_pd_global(size_t, CodeCacheMinBlockLength,    1);\n+define_pd_global(size_t, CodeCacheMinimumUseSpace,   400*K);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_globals_riscv.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,2 +54,2 @@\n-define_pd_global(intx, InitialCodeCacheSize,         2496*K); \/\/ Integral multiple of CodeCacheExpansionSize\n-define_pd_global(intx, CodeCacheExpansionSize,       64*K);\n+define_pd_global(size_t, InitialCodeCacheSize,       2496*K); \/\/ Integral multiple of CodeCacheExpansionSize\n+define_pd_global(size_t, CodeCacheExpansionSize,     64*K);\n@@ -72,6 +72,6 @@\n-define_pd_global(intx, ReservedCodeCacheSize,        48*M);\n-define_pd_global(intx, NonProfiledCodeHeapSize,      21*M);\n-define_pd_global(intx, ProfiledCodeHeapSize,         22*M);\n-define_pd_global(intx, NonNMethodCodeHeapSize,       5*M );\n-define_pd_global(uintx, CodeCacheMinBlockLength,     6);\n-define_pd_global(uintx, CodeCacheMinimumUseSpace,    400*K);\n+define_pd_global(size_t, ReservedCodeCacheSize,      48*M);\n+define_pd_global(size_t, NonProfiledCodeHeapSize,    21*M);\n+define_pd_global(size_t, ProfiledCodeHeapSize,       22*M);\n+define_pd_global(size_t, NonNMethodCodeHeapSize,     5*M );\n+define_pd_global(size_t, CodeCacheMinBlockLength,    6);\n+define_pd_global(size_t, CodeCacheMinimumUseSpace,   400*K);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_globals_riscv.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-define_pd_global(uintx, CodeCacheSegmentSize,    64 COMPILER1_AND_COMPILER2_PRESENT(+64)); \/\/ Tiered compilation has large code-entry alignment.\n+define_pd_global(size_t, CodeCacheSegmentSize,   64 COMPILER1_AND_COMPILER2_PRESENT(+64)); \/\/ Tiered compilation has large code-entry alignment.\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,7 +47,7 @@\n-define_pd_global(uintx,    ReservedCodeCacheSize,        32*M);\n-define_pd_global(uintx,    NonProfiledCodeHeapSize,      13*M);\n-define_pd_global(uintx,    ProfiledCodeHeapSize,         14*M);\n-define_pd_global(uintx,    NonNMethodCodeHeapSize,       5*M);\n-define_pd_global(uintx,    CodeCacheExpansionSize,       32*K);\n-define_pd_global(uintx,    CodeCacheMinBlockLength,      1);\n-define_pd_global(uintx,    CodeCacheMinimumUseSpace,     400*K);\n+define_pd_global(size_t,   ReservedCodeCacheSize,        32*M);\n+define_pd_global(size_t,   NonProfiledCodeHeapSize,      13*M);\n+define_pd_global(size_t,   ProfiledCodeHeapSize,         14*M);\n+define_pd_global(size_t,   NonNMethodCodeHeapSize,       5*M);\n+define_pd_global(size_t,   CodeCacheExpansionSize,       32*K);\n+define_pd_global(size_t,   CodeCacheMinBlockLength,      1);\n+define_pd_global(size_t,   CodeCacheMinimumUseSpace,     400*K);\n@@ -57,1 +57,1 @@\n-define_pd_global(uintx,    InitialCodeCacheSize,         160*K);\n+define_pd_global(size_t,   InitialCodeCacheSize,         160*K);\n","filename":"src\/hotspot\/cpu\/s390\/c1_globals_s390.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,6 +70,6 @@\n-define_pd_global(uintx, InitialCodeCacheSize,        2048*K); \/\/ Integral multiple of CodeCacheExpansionSize\n-define_pd_global(uintx, ReservedCodeCacheSize,       48*M);\n-define_pd_global(uintx, NonProfiledCodeHeapSize,     21*M);\n-define_pd_global(uintx, ProfiledCodeHeapSize,        22*M);\n-define_pd_global(uintx, NonNMethodCodeHeapSize,      5*M);\n-define_pd_global(uintx, CodeCacheExpansionSize,      64*K);\n+define_pd_global(size_t, InitialCodeCacheSize,       2048*K); \/\/ Integral multiple of CodeCacheExpansionSize\n+define_pd_global(size_t, ReservedCodeCacheSize,      48*M);\n+define_pd_global(size_t, NonProfiledCodeHeapSize,    21*M);\n+define_pd_global(size_t, ProfiledCodeHeapSize,       22*M);\n+define_pd_global(size_t, NonNMethodCodeHeapSize,     5*M);\n+define_pd_global(size_t, CodeCacheExpansionSize,     64*K);\n@@ -79,2 +79,2 @@\n-define_pd_global(uintx, CodeCacheMinBlockLength,     4);\n-define_pd_global(uintx, CodeCacheMinimumUseSpace,    400*K);\n+define_pd_global(size_t, CodeCacheMinBlockLength,    4);\n+define_pd_global(size_t, CodeCacheMinimumUseSpace,   400*K);\n","filename":"src\/hotspot\/cpu\/s390\/c2_globals_s390.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-define_pd_global(uintx, CodeCacheSegmentSize,        256);\n+define_pd_global(size_t, CodeCacheSegmentSize,       256);\n","filename":"src\/hotspot\/cpu\/s390\/globals_s390.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,5 +45,5 @@\n-define_pd_global(uintx,  InitialCodeCacheSize,         160*K);\n-define_pd_global(uintx,  ReservedCodeCacheSize,        32*M );\n-define_pd_global(uintx,  NonProfiledCodeHeapSize,      13*M );\n-define_pd_global(uintx,  ProfiledCodeHeapSize,         14*M );\n-define_pd_global(uintx,  NonNMethodCodeHeapSize,       5*M  );\n+define_pd_global(size_t, InitialCodeCacheSize,         160*K);\n+define_pd_global(size_t, ReservedCodeCacheSize,        32*M );\n+define_pd_global(size_t, NonProfiledCodeHeapSize,      13*M );\n+define_pd_global(size_t, ProfiledCodeHeapSize,         14*M );\n+define_pd_global(size_t, NonNMethodCodeHeapSize,       5*M  );\n@@ -51,3 +51,3 @@\n-define_pd_global(uintx,  CodeCacheExpansionSize,       32*K );\n-define_pd_global(uintx,  CodeCacheMinBlockLength,      1    );\n-define_pd_global(uintx,  CodeCacheMinimumUseSpace,     400*K);\n+define_pd_global(size_t, CodeCacheExpansionSize,       32*K );\n+define_pd_global(size_t, CodeCacheMinBlockLength,      1    );\n+define_pd_global(size_t, CodeCacheMinimumUseSpace,     400*K);\n","filename":"src\/hotspot\/cpu\/x86\/c1_globals_x86.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,2 @@\n-define_pd_global(uintx, InitialCodeCacheSize,        2496*K); \/\/ Integral multiple of CodeCacheExpansionSize\n-define_pd_global(uintx, CodeCacheExpansionSize,      64*K);\n+define_pd_global(size_t, InitialCodeCacheSize,       2496*K); \/\/ Integral multiple of CodeCacheExpansionSize\n+define_pd_global(size_t, CodeCacheExpansionSize,     64*K);\n@@ -63,2 +63,2 @@\n-define_pd_global(uintx, InitialCodeCacheSize,        2304*K); \/\/ Integral multiple of CodeCacheExpansionSize\n-define_pd_global(uintx, CodeCacheExpansionSize,      32*K);\n+define_pd_global(size_t, InitialCodeCacheSize,       2304*K); \/\/ Integral multiple of CodeCacheExpansionSize\n+define_pd_global(size_t, CodeCacheExpansionSize,     32*K);\n@@ -82,6 +82,6 @@\n-define_pd_global(uintx, ReservedCodeCacheSize,       48*M);\n-define_pd_global(uintx, NonProfiledCodeHeapSize,     21*M);\n-define_pd_global(uintx, ProfiledCodeHeapSize,        22*M);\n-define_pd_global(uintx, NonNMethodCodeHeapSize,      5*M );\n-define_pd_global(uintx, CodeCacheMinBlockLength,     6);\n-define_pd_global(uintx, CodeCacheMinimumUseSpace,    400*K);\n+define_pd_global(size_t, ReservedCodeCacheSize,      48*M);\n+define_pd_global(size_t, NonProfiledCodeHeapSize,    21*M);\n+define_pd_global(size_t, ProfiledCodeHeapSize,       22*M);\n+define_pd_global(size_t, NonNMethodCodeHeapSize,     5*M );\n+define_pd_global(size_t, CodeCacheMinBlockLength,    6);\n+define_pd_global(size_t, CodeCacheMinimumUseSpace,   400*K);\n","filename":"src\/hotspot\/cpu\/x86\/c2_globals_x86.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-define_pd_global(uintx, CodeCacheSegmentSize,    64 COMPILER1_AND_COMPILER2_PRESENT(+64)); \/\/ Tiered compilation has large code-entry alignment.\n+define_pd_global(size_t, CodeCacheSegmentSize,   64 COMPILER1_AND_COMPILER2_PRESENT(+64)); \/\/ Tiered compilation has large code-entry alignment.\n","filename":"src\/hotspot\/cpu\/x86\/globals_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,4 +41,4 @@\n-define_pd_global(uintx, CodeCacheSegmentSize, 64 COMPILER1_AND_COMPILER2_PRESENT(+64)); \/\/ Tiered compilation has large code-entry alignment.\n-define_pd_global(intx,  CodeEntryAlignment,   32);\n-define_pd_global(intx,  OptoLoopAlignment,    16);\n-define_pd_global(intx,  InlineSmallCode,      1000);\n+define_pd_global(size_t, CodeCacheSegmentSize, 64 COMPILER1_AND_COMPILER2_PRESENT(+64)); \/\/ Tiered compilation has large code-entry alignment.\n+define_pd_global(intx,   CodeEntryAlignment,   32);\n+define_pd_global(intx,   OptoLoopAlignment,    16);\n+define_pd_global(intx,   InlineSmallCode,      1000);\n","filename":"src\/hotspot\/cpu\/zero\/globals_zero.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -436,1 +436,1 @@\n-  size_t size_initial = MIN2((size_t)InitialCodeCacheSize, rs.size());\n+  size_t size_initial = MIN2(InitialCodeCacheSize, rs.size());\n@@ -1109,1 +1109,1 @@\n-  assert(CodeCacheSegmentSize >= (uintx)CodeEntryAlignment, \"CodeCacheSegmentSize must be large enough to align entry points\");\n+  assert(CodeCacheSegmentSize >= (size_t)CodeEntryAlignment, \"CodeCacheSegmentSize must be large enough to align entry points\");\n@@ -1111,1 +1111,1 @@\n-  assert(CodeCacheSegmentSize >= (uintx)OptoLoopAlignment,  \"CodeCacheSegmentSize must be large enough to align inner loops\");\n+  assert(CodeCacheSegmentSize >= (size_t)OptoLoopAlignment,  \"CodeCacheSegmentSize must be large enough to align inner loops\");\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -575,2 +575,2 @@\n-      int max_count = (ReservedCodeCacheSize - (CodeCacheMinimumUseSpace DEBUG_ONLY(* 3))) \/ (int)buffer_size;\n-      if (count > max_count) {\n+      size_t max_count = (ReservedCodeCacheSize - (CodeCacheMinimumUseSpace DEBUG_ONLY(* 3))) \/ buffer_size;\n+      if ((size_t)count > max_count) {\n@@ -578,1 +578,1 @@\n-        count = MAX2(max_count, min_count);\n+        count = MAX2((int)max_count, min_count);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -316,1 +316,1 @@\n-                    MIN2(CODE_CACHE_DEFAULT_LIMIT, (size_t)ReservedCodeCacheSize * 5));\n+                    MIN2(CODE_CACHE_DEFAULT_LIMIT, ReservedCodeCacheSize * 5));\n@@ -478,1 +478,1 @@\n-  uint min_code_cache_size = CodeCacheMinimumUseSpace DEBUG_ONLY(* 3);\n+  size_t min_code_cache_size = CodeCacheMinimumUseSpace DEBUG_ONLY(* 3);\n@@ -481,1 +481,1 @@\n-                \"Invalid ReservedCodeCacheSize: %dK. Must be at least InitialCodeCacheSize=%dK.\\n\",\n+                \"Invalid ReservedCodeCacheSize: %zuK. Must be at least InitialCodeCacheSize=%zuK.\\n\",\n@@ -486,1 +486,1 @@\n-                \"Invalid ReservedCodeCacheSize=%dK. Must be at least %uK.\\n\", ReservedCodeCacheSize\/K,\n+                \"Invalid ReservedCodeCacheSize=%zuK. Must be at least %zuK.\\n\", ReservedCodeCacheSize\/K,\n@@ -492,1 +492,1 @@\n-                \"Invalid ReservedCodeCacheSize=%dM. Must be at most %uM.\\n\", ReservedCodeCacheSize\/M,\n+                \"Invalid ReservedCodeCacheSize=%zuM. Must be at most %zuM.\\n\", ReservedCodeCacheSize\/M,\n@@ -497,1 +497,1 @@\n-                \"Invalid NonNMethodCodeHeapSize=%dK. Must be at least %uK.\\n\", NonNMethodCodeHeapSize\/K,\n+                \"Invalid NonNMethodCodeHeapSize=%zuK. Must be at least %zuK.\\n\", NonNMethodCodeHeapSize\/K,\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,5 +64,5 @@\n-define_pd_global(uintx,  InitialCodeCacheSize,       160*K);\n-define_pd_global(uintx,  ReservedCodeCacheSize,      32*M);\n-define_pd_global(uintx,  NonProfiledCodeHeapSize,    0);\n-define_pd_global(uintx,  ProfiledCodeHeapSize,       0);\n-define_pd_global(uintx,  NonNMethodCodeHeapSize,     32*M);\n+define_pd_global(size_t, InitialCodeCacheSize,       160*K);\n+define_pd_global(size_t, ReservedCodeCacheSize,      32*M);\n+define_pd_global(size_t, NonProfiledCodeHeapSize,    0);\n+define_pd_global(size_t, ProfiledCodeHeapSize,       0);\n+define_pd_global(size_t, NonNMethodCodeHeapSize,     32*M);\n@@ -70,3 +70,3 @@\n-define_pd_global(uintx,  CodeCacheExpansionSize,     32*K);\n-define_pd_global(uintx,  CodeCacheMinBlockLength,    1);\n-define_pd_global(uintx,  CodeCacheMinimumUseSpace,   200*K);\n+define_pd_global(size_t, CodeCacheExpansionSize,     32*K);\n+define_pd_global(size_t, CodeCacheMinBlockLength,    1);\n+define_pd_global(size_t, CodeCacheMinimumUseSpace,   200*K);\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals_pd.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-#define PREDEFINED_CONFIG_FLAGS(do_bool_flag, do_int_flag, do_intx_flag, do_uintx_flag) \\\n+#define PREDEFINED_CONFIG_FLAGS(do_bool_flag, do_int_flag, do_size_t_flag, do_intx_flag, do_uintx_flag) \\\n@@ -357,1 +357,1 @@\n-  do_uintx_flag(CodeCacheSegmentSize)                                      \\\n+  do_size_t_flag(CodeCacheSegmentSize)                                     \\\n@@ -544,4 +544,5 @@\n-#define ADD_BOOL_FLAG(name)  ADD_FLAG(bool, name, BOXED_BOOLEAN)\n-#define ADD_INT_FLAG(name)   ADD_FLAG(int, name, BOXED_LONG)\n-#define ADD_INTX_FLAG(name)  ADD_FLAG(intx, name, BOXED_LONG)\n-#define ADD_UINTX_FLAG(name) ADD_FLAG(uintx, name, BOXED_LONG)\n+#define ADD_BOOL_FLAG(name)   ADD_FLAG(bool, name, BOXED_BOOLEAN)\n+#define ADD_INT_FLAG(name)    ADD_FLAG(int, name, BOXED_LONG)\n+#define ADD_SIZE_T_FLAG(name) ADD_FLAG(size_t, name, BOXED_LONG)\n+#define ADD_INTX_FLAG(name)   ADD_FLAG(intx, name, BOXED_LONG)\n+#define ADD_UINTX_FLAG(name)  ADD_FLAG(uintx, name, BOXED_LONG)\n@@ -549,1 +550,1 @@\n-  len = 0 + PREDEFINED_CONFIG_FLAGS(COUNT_FLAG, COUNT_FLAG, COUNT_FLAG, COUNT_FLAG);\n+  len = 0 + PREDEFINED_CONFIG_FLAGS(COUNT_FLAG, COUNT_FLAG, COUNT_FLAG, COUNT_FLAG, COUNT_FLAG);\n@@ -553,1 +554,1 @@\n-  PREDEFINED_CONFIG_FLAGS(ADD_BOOL_FLAG, ADD_INT_FLAG, ADD_INTX_FLAG, ADD_UINTX_FLAG)\n+  PREDEFINED_CONFIG_FLAGS(ADD_BOOL_FLAG, ADD_INT_FLAG, ADD_SIZE_T_FLAG, ADD_INTX_FLAG, ADD_UINTX_FLAG)\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -283,1 +283,1 @@\n-  number_of_segments = MAX2((int)CodeCacheMinBlockLength, (int)number_of_segments);\n+  number_of_segments = MAX2(CodeCacheMinBlockLength, number_of_segments);\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2451,1 +2451,1 @@\n-      if (FLAG_SET_CMDLINE(ReservedCodeCacheSize, (uintx)long_ReservedCodeCacheSize) != JVMFlag::SUCCESS) {\n+      if (FLAG_SET_CMDLINE(ReservedCodeCacheSize, (size_t)long_ReservedCodeCacheSize) != JVMFlag::SUCCESS) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,2 +158,2 @@\n-JVMFlag::Error CodeCacheSegmentSizeConstraintFunc(uintx value, bool verbose) {\n-  if (CodeCacheSegmentSize < (uintx)CodeEntryAlignment) {\n+JVMFlag::Error CodeCacheSegmentSizeConstraintFunc(size_t value, bool verbose) {\n+  if (CodeCacheSegmentSize < (size_t)CodeEntryAlignment) {\n@@ -177,1 +177,1 @@\n-  if (CodeCacheSegmentSize < (uintx)OptoLoopAlignment) {\n+  if (CodeCacheSegmentSize < (size_t)OptoLoopAlignment) {\n@@ -206,1 +206,1 @@\n-  if ((uintx)CodeEntryAlignment > CodeCacheSegmentSize) {\n+  if ((size_t)CodeEntryAlignment > CodeCacheSegmentSize) {\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  f(uintx, CodeCacheSegmentSizeConstraintFunc)          \\\n+  f(size_t, CodeCacheSegmentSizeConstraintFunc)         \\\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -102,2 +102,2 @@\n-JVMFlag::Error VMPageSizeConstraintFunc(uintx value, bool verbose) {\n-  uintx min = (uintx)os::vm_page_size();\n+JVMFlag::Error VMPageSizeConstraintFunc(size_t value, bool verbose) {\n+  size_t min = os::vm_page_size();\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  f(uintx,  VMPageSizeConstraintFunc)                 \\\n+  f(size_t, VMPageSizeConstraintFunc)                 \\\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1504,1 +1504,1 @@\n-  product_pd(uintx, CodeCacheSegmentSize, EXPERIMENTAL,                     \\\n+  product_pd(size_t, CodeCacheSegmentSize, EXPERIMENTAL,                    \\\n@@ -1519,1 +1519,1 @@\n-  product_pd(uintx, InitialCodeCacheSize,                                   \\\n+  product_pd(size_t, InitialCodeCacheSize,                                  \\\n@@ -1523,1 +1523,1 @@\n-  develop_pd(uintx, CodeCacheMinimumUseSpace,                               \\\n+  develop_pd(size_t, CodeCacheMinimumUseSpace,                              \\\n@@ -1525,1 +1525,1 @@\n-          range(0, max_uintx)                                               \\\n+          range(0, SIZE_MAX)                                                \\\n@@ -1530,1 +1530,1 @@\n-  product_pd(uintx, ReservedCodeCacheSize,                                  \\\n+  product_pd(size_t, ReservedCodeCacheSize,                                 \\\n@@ -1534,1 +1534,1 @@\n-  product_pd(uintx, NonProfiledCodeHeapSize,                                \\\n+  product_pd(size_t, NonProfiledCodeHeapSize,                               \\\n@@ -1536,1 +1536,1 @@\n-          range(0, max_uintx)                                               \\\n+          range(0, SIZE_MAX)                                                \\\n@@ -1538,1 +1538,1 @@\n-  product_pd(uintx, ProfiledCodeHeapSize,                                   \\\n+  product_pd(size_t, ProfiledCodeHeapSize,                                  \\\n@@ -1540,1 +1540,1 @@\n-          range(0, max_uintx)                                               \\\n+          range(0, SIZE_MAX)                                                \\\n@@ -1542,1 +1542,1 @@\n-  product_pd(uintx, NonNMethodCodeHeapSize,                                 \\\n+  product_pd(size_t, NonNMethodCodeHeapSize,                                \\\n@@ -1546,1 +1546,1 @@\n-  product_pd(uintx, CodeCacheExpansionSize,                                 \\\n+  product_pd(size_t, CodeCacheExpansionSize,                                \\\n@@ -1548,1 +1548,1 @@\n-          range(32*K, max_uintx)                                            \\\n+          range(32*K, SIZE_MAX)                                             \\\n@@ -1550,1 +1550,1 @@\n-  product_pd(uintx, CodeCacheMinBlockLength, DIAGNOSTIC,                    \\\n+  product_pd(size_t, CodeCacheMinBlockLength, DIAGNOSTIC,                   \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-        long minUseSpace = WHITE_BOX.getUintxVMFlag(\"CodeCacheMinimumUseSpace\");\n+        long minUseSpace = WHITE_BOX.getSizeTVMFlag(\"CodeCacheMinimumUseSpace\");\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/CheckSegmentedCodeCache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-            = WhiteBox.getWhiteBox().getUintxVMFlag(\"CodeCacheSegmentSize\");\n+            = WhiteBox.getWhiteBox().getSizeTVMFlag(\"CodeCacheSegmentSize\");\n@@ -46,1 +46,1 @@\n-            = WhiteBox.getWhiteBox().getUintxVMFlag(\"CodeCacheMinBlockLength\");\n+            = WhiteBox.getWhiteBox().getSizeTVMFlag(\"CodeCacheMinBlockLength\");\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/jmx\/CodeCacheUtils.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-            = Helper.WHITE_BOX.getUintxVMFlag(\"ReservedCodeCacheSize\");\n+            = Helper.WHITE_BOX.getSizeTVMFlag(\"ReservedCodeCacheSize\");\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/stress\/RandomAllocationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,2 @@\n-    private static final long largeBlobSize = Helper.WHITE_BOX.getUintxVMFlag(\"ReservedCodeCacheSize\") >> 6;\n-    private static final long codeCacheMinBlockLength = Helper.WHITE_BOX.getUintxVMFlag(\"CodeCacheMinBlockLength\");\n+    private static final long largeBlobSize = Helper.WHITE_BOX.getSizeTVMFlag(\"ReservedCodeCacheSize\") >> 6;\n+    private static final long codeCacheMinBlockLength = Helper.WHITE_BOX.getSizeTVMFlag(\"CodeCacheMinBlockLength\");\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/stress\/ReturnBlobToWrongHeapTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-            = WHITE_BOX.getUintxVMFlag(\"ReservedCodeCacheSize\");\n+            = WHITE_BOX.getSizeTVMFlag(\"ReservedCodeCacheSize\");\n","filename":"test\/hotspot\/jtreg\/compiler\/whitebox\/AllocationCodeBlobTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    private static final long CodeCacheExpectedSize = WhiteBox.getWhiteBox().getUintxVMFlag(\"ReservedCodeCacheSize\");\n+    private static final long CodeCacheExpectedSize = WhiteBox.getWhiteBox().getSizeTVMFlag(\"ReservedCodeCacheSize\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCodeCacheConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-    public static final long SEGMENT_SIZE = WhiteBox.getWhiteBox().getUintxVMFlag(\"CodeCacheSegmentSize\");\n-    public static final long MIN_BLOCK_LENGTH = WhiteBox.getWhiteBox().getUintxVMFlag(\"CodeCacheMinBlockLength\");\n+    public static final long SEGMENT_SIZE = WhiteBox.getWhiteBox().getSizeTVMFlag(\"CodeCacheSegmentSize\");\n+    public static final long MIN_BLOCK_LENGTH = WhiteBox.getWhiteBox().getSizeTVMFlag(\"CodeCacheMinBlockLength\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCodeSweeper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    private static final String FLAG_DEBUG_NAME = \"CodeCacheMinimumUseSpace\";\n+    private static final String FLAG_DEBUG_NAME = \"StopInterpreterAt\";\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/UintxTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,1 +106,1 @@\n-        return WhiteBox.getWhiteBox().getUintxVMFlag(sizeOptionName);\n+        return WhiteBox.getWhiteBox().getSizeTVMFlag(sizeOptionName);\n","filename":"test\/lib\/jdk\/test\/whitebox\/code\/BlobType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}