{"files":[{"patch":"@@ -119,0 +119,10 @@\n+  <Event name=\"JavaMonitorDeflate\" category=\"Java Application\" label=\"Java Monitor Deflated\">\n+    <Field type=\"Class\" name=\"monitorClass\" label=\"Monitor Class\" \/>\n+    <Field type=\"ulong\" contentType=\"address\" name=\"address\" label=\"Monitor Address\" relation=\"JavaMonitorAddress\" \/>\n+  <\/Event>\n+\n+  <Event name=\"JavaMonitorStatistics\" category=\"Java Application\" label=\"Java Monitor Statistics\" startTime=\"false\">\n+    <Field type=\"ulong\" name=\"totalCount\" label=\"Monitors In Use\" description=\"Number of in-use monitors\"\/>\n+    <Field type=\"ulong\" name=\"deflatedCount\" label=\"Deflated Monitors\" description=\"Number of deflated monitors\"\/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -660,0 +660,8 @@\n+static void post_monitor_deflate_event(EventJavaMonitorDeflate* event,\n+                                       const oop obj) {\n+  assert(event != nullptr, \"invariant\");\n+  event->set_monitorClass(obj->klass());\n+  event->set_address((uintptr_t)(void*)obj);\n+  event->commit();\n+}\n+\n@@ -679,0 +687,2 @@\n+  EventJavaMonitorDeflate event;\n+\n@@ -753,0 +763,4 @@\n+  if (event.should_commit()) {\n+    post_monitor_deflate_event(&event, obj);\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1810,0 +1810,2 @@\n+  EventJavaMonitorStatistics event;\n+\n@@ -1871,0 +1873,6 @@\n+  if (event.should_commit()) {\n+    event.set_totalCount(_in_use_list.count());\n+    event.set_deflatedCount(deflated_count);\n+    event.commit();\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -104,0 +104,9 @@\n+    <event name=\"jdk.JavaMonitorDeflate\">\n+      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"threshold\">0 ms<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.JavaMonitorStatistics\">\n+      <setting name=\"enabled\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -104,0 +104,9 @@\n+    <event name=\"jdk.JavaMonitorDeflate\">\n+      <setting name=\"enabled\">false<\/setting>\n+      <setting name=\"threshold\">0 ms<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.JavaMonitorStatistics\">\n+      <setting name=\"enabled\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.runtime;\n+\n+import static jdk.test.lib.Asserts.assertTrue;\n+\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.concurrent.CountDownLatch;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+import jdk.test.lib.thread.TestThread;\n+import jdk.test.lib.thread.XRun;\n+\n+\/**\n+ * @test TestJavaMonitorDeflateEvent\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:GuaranteedAsyncDeflationInterval=100 jdk.jfr.event.runtime.TestJavaMonitorDeflateEvent\n+ *\/\n+public class TestJavaMonitorDeflateEvent {\n+\n+    private static final String FIELD_KLASS_NAME = \"monitorClass.name\";\n+    private static final String FIELD_ADDRESS    = \"address\";\n+\n+    private static final String EVENT_NAME = EventNames.JavaMonitorDeflate;\n+    private static final long WAIT_TIME = 123456;\n+\n+    static class Lock {\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Recording recording = new Recording();\n+        recording.enable(EVENT_NAME).withThreshold(Duration.ofMillis(0));\n+        final Lock lock = new Lock();\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        \/\/ create a thread that waits\n+        TestThread waitThread = new TestThread(new XRun() {\n+            @Override\n+            public void xrun() throws Throwable {\n+                synchronized (lock) {\n+                    latch.countDown();\n+                    lock.wait(WAIT_TIME);\n+                }\n+            }\n+        });\n+        try {\n+            recording.start();\n+            waitThread.start();\n+            latch.await();\n+            synchronized (lock) {\n+                lock.notifyAll();\n+            }\n+        } finally {\n+            waitThread.join();\n+            \/\/ Let deflater thread run.\n+            Thread.sleep(3000);\n+            recording.stop();\n+        }\n+        final String lockClassName = lock.getClass().getName().replace('.', '\/');\n+        boolean isAnyFound = false;\n+        try {\n+            \/\/ Find at least one event with the correct monitor class and check the other fields\n+            for (RecordedEvent event : Events.fromRecording(recording)) {\n+                assertTrue(EVENT_NAME.equals(event.getEventType().getName()), \"mismatched event types?\");\n+                \/\/ Check recorded inflation event is associated with the Lock class used in the test\n+                final String recordedMonitorClassName = Events.assertField(event, FIELD_KLASS_NAME).getValue();\n+                if (!lockClassName.equals(recordedMonitorClassName)) {\n+                    continue;\n+                }\n+                \/\/ Check recorded thread matches one of the threads in the test\n+                Events.assertField(event, FIELD_ADDRESS).notEqual(0L);\n+                isAnyFound = true;\n+                break;\n+            }\n+            assertTrue(isAnyFound, \"Expected an deflation event from test\");\n+        } catch (Throwable e) {\n+            recording.dump(Paths.get(\"failed.jfr\"));\n+            throw e;\n+        } finally {\n+            recording.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestJavaMonitorDeflateEvent.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.runtime;\n+\n+import static jdk.test.lib.Asserts.assertTrue;\n+\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.concurrent.CountDownLatch;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+import jdk.test.lib.thread.TestThread;\n+import jdk.test.lib.thread.XRun;\n+\n+\/**\n+ * @test TestJavaMonitorStatisticsEvent\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:GuaranteedAsyncDeflationInterval=100 jdk.jfr.event.runtime.TestJavaMonitorStatisticsEvent\n+ *\/\n+public class TestJavaMonitorStatisticsEvent {\n+\n+    private static final String FIELD_TOTAL_COUNT = \"totalCount\";\n+    private static final String FIELD_DEFLATED_COUNT = \"deflatedCount\";\n+\n+    private static final String EVENT_NAME = EventNames.JavaMonitorStatistics;\n+    private static final long WAIT_TIME = 123456;\n+\n+    static class Lock {\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Recording recording = new Recording();\n+        recording.enable(EVENT_NAME).withThreshold(Duration.ofMillis(0));\n+        final Lock lock = new Lock();\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        \/\/ create a thread that waits\n+        TestThread waitThread = new TestThread(new XRun() {\n+            @Override\n+            public void xrun() throws Throwable {\n+                synchronized (lock) {\n+                    latch.countDown();\n+                    lock.wait(WAIT_TIME);\n+                }\n+            }\n+        });\n+        try {\n+            recording.start();\n+            waitThread.start();\n+            latch.await();\n+            synchronized (lock) {\n+                lock.notifyAll();\n+            }\n+        } finally {\n+            waitThread.join();\n+            \/\/ Let deflater thread run.\n+            Thread.sleep(3000);\n+            recording.stop();\n+        }\n+        boolean isAnyFound = false;\n+        try {\n+            \/\/ Find at least one event with the correct monitor class and check the other fields\n+            for (RecordedEvent event : Events.fromRecording(recording)) {\n+                assertTrue(EVENT_NAME.equals(event.getEventType().getName()), \"mismatched event types?\");\n+                long totalCount = Events.assertField(event, FIELD_TOTAL_COUNT).getValue();\n+                long deflatedCount = Events.assertField(event, FIELD_DEFLATED_COUNT).getValue();\n+                assertTrue(totalCount >= 0, \"Should be positive\");\n+                assertTrue(deflatedCount >= 0, \"Should be positive\");\n+                assertTrue(totalCount + deflatedCount > 0, \"Should be non-zero\");\n+                isAnyFound = true;\n+                break;\n+            }\n+            assertTrue(isAnyFound, \"Expected a statistics event from test\");\n+        } catch (Throwable e) {\n+            recording.dump(Paths.get(\"failed.jfr\"));\n+            throw e;\n+        } finally {\n+            recording.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestJavaMonitorStatisticsEvent.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -62,0 +62,2 @@\n+    public static final String JavaMonitorDeflate = PREFIX + \"JavaMonitorDeflate\";\n+    public static final String JavaMonitorStatistics = PREFIX + \"JavaMonitorStatistics\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}