{"files":[{"patch":"@@ -28,3 +28,0 @@\n-import jdk.internal.misc.Unsafe;\n-\n-import java.lang.reflect.Field;\n@@ -35,2 +32,0 @@\n-import java.util.function.Function;\n-import java.util.function.ToIntFunction;\n@@ -104,8 +99,0 @@\n-    \/\/ This method is not annotated with @ForceInline as it is always called\n-    \/\/ in a slow path.\n-    static void preventReentry(Object obj) {\n-        if (Thread.holdsLock(obj)) {\n-            throw new IllegalStateException(\"Recursive initialization of a stable value is illegal\");\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableUtil.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        StableUtil.preventReentry(this);\n+        preventReentry();\n@@ -135,1 +135,1 @@\n-        StableUtil.preventReentry(this);\n+        preventReentry();\n@@ -171,0 +171,8 @@\n+    \/\/ This method is not annotated with @ForceInline as it is always called\n+    \/\/ in a slow path.\n+    private void preventReentry() {\n+        if (Thread.holdsLock(this)) {\n+            throw new IllegalStateException(\"Recursive initialization of a stable value is illegal\");\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableValueImpl.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"}]}