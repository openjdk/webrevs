{"files":[{"patch":"@@ -29,2 +29,0 @@\n-import jdk.internal.lang.stable.StableFieldUpdater;\n-import jdk.internal.misc.Unsafe;\n@@ -52,1 +50,0 @@\n-import java.util.function.ToIntFunction;\n@@ -99,9 +96,0 @@\n-\n-    private static final ToIntFunction<Method> HASH_UPDATER =\n-            StableFieldUpdater.Raw.ofInt(Method.class, Unsafe.getUnsafe().objectFieldOffset(Method.class, \"hash\"), new ToIntFunction<Method>() {\n-                @Override\n-                public int applyAsInt(Method method) {\n-                    return method.getDeclaringClass().getName().hashCode() ^\n-                            method.getName().hashCode();\n-                }\n-            }, 0); \/\/ The `hashCode()` is specified so, zeroReplacement is 0\n@@ -109,3 +97,0 @@\n-\n-    \/\/ Used reflectively via HASH_UPDATER\n-    @Stable\n@@ -378,1 +363,7 @@\n-        return HASH_UPDATER.applyAsInt(this);\n+        int hc = hash;\n+\n+        if (hc == 0) {\n+            hc = hash = getDeclaringClass().getName().hashCode() ^ getName()\n+                .hashCode();\n+        }\n+        return hc;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n-import java.util.function.ToIntFunction;\n-\n@@ -47,3 +45,0 @@\n-import jdk.internal.lang.stable.StableFieldUpdater;\n-import jdk.internal.vm.annotation.ForceInline;\n-import jdk.internal.vm.annotation.Stable;\n@@ -552,7 +547,0 @@\n-\n-    private static final ToIntFunction<URI> HASH_UPDATER = StableFieldUpdater.ofInt(\n-            URI.class, \"hash\", new ToIntFunction<>() {\n-                @ForceInline @Override public int applyAsInt(URI uri) { return uri.hashCode0(); }}, -1);\n-\n-    \/\/ Used reflectively by HASH_UPDATER\n-    @Stable\n@@ -1590,16 +1578,6 @@\n-        return HASH_UPDATER.applyAsInt(this);\n-    }\n-\n-    private int hashCode0() {\n-        int h = 0;\n-        h = hashIgnoringCase(0, scheme);\n-        h = hash(h, fragment);\n-        if (isOpaque()) {\n-            h = hash(h, schemeSpecificPart);\n-        } else {\n-            h = hash(h, path);\n-            h = hash(h, query);\n-            if (host != null) {\n-                h = hash(h, userInfo);\n-                h = hashIgnoringCase(h, host);\n-                h += 1949 * port;\n+        int h = hash;\n+        if (h == 0) {\n+            h = hashIgnoringCase(0, scheme);\n+            h = hash(h, fragment);\n+            if (isOpaque()) {\n+                h = hash(h, schemeSpecificPart);\n@@ -1607,1 +1585,12 @@\n-                h = hash(h, authority);\n+                h = hash(h, path);\n+                h = hash(h, query);\n+                if (host != null) {\n+                    h = hash(h, userInfo);\n+                    h = hashIgnoringCase(h, host);\n+                    h += 1949 * port;\n+                } else {\n+                    h = hash(h, authority);\n+                }\n+            }\n+            if (h != 0) {\n+                hash = h;\n","filename":"src\/java.base\/share\/classes\/java\/net\/URI.java","additions":18,"deletions":29,"binary":false,"changes":47,"status":"modified"}]}