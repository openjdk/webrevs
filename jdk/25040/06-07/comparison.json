{"files":[{"patch":"@@ -36,0 +36,2 @@\n+import java.lang.invoke.CallSite;\n+import java.lang.invoke.ConstantCallSite;\n@@ -220,0 +222,1 @@\n+    private static final MethodHandles.Lookup LOCAL_LOOKUP = MethodHandles.lookup();\n@@ -256,1 +259,0 @@\n-        Objects.requireNonNull(underlying);\n@@ -310,1 +312,0 @@\n-        Objects.requireNonNull(underlying);\n@@ -329,0 +330,24 @@\n+    public static CallSite lazyOfInt(MethodHandles.Lookup lookup,\n+                                     String unused,\n+                                     VarHandle accessor,\n+                                     MethodHandle underlying,\n+                                     int zeroReplacement) {\n+        check(accessor, int.class);\n+        var adaptedUnderlying = checkAndAdapt(underlying, int.class);\n+        var handle = MhUtil.findStatic(LOCAL_LOOKUP,\n+                \"ofInt\", MethodType.methodType(ToIntFunction.class, VarHandle.class, MethodHandle.class, int.class));\n+        return new ConstantCallSite(MethodHandles.insertArguments(handle, 0, accessor, adaptedUnderlying, zeroReplacement));\n+    }\n+\n+    public static CallSite lazyOfLong(MethodHandles.Lookup lookup,\n+                                      String unused,\n+                                      VarHandle accessor,\n+                                      MethodHandle underlying,\n+                                      long zeroReplacement) {\n+        check(accessor, long.class);\n+        var adaptedUnderlying = checkAndAdapt(underlying, long.class);\n+        var handle = MhUtil.findStatic(LOCAL_LOOKUP,\n+                \"makeLong\", MethodType.methodType(ToLongFunction.class, VarHandle.class, MethodHandle.class, long.class));\n+        return new ConstantCallSite(MethodHandles.insertArguments(handle, 0, accessor, adaptedUnderlying, zeroReplacement));\n+    }\n+\n@@ -588,0 +613,1 @@\n+        \/\/ Implicit null check\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableFieldUpdater.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import java.lang.invoke.CallSite;\n+import java.lang.invoke.ConstantCallSite;\n@@ -90,0 +92,32 @@\n+    @Test\n+    void lazyOfInt() throws Throwable {\n+        var lookup = MethodHandles.lookup();\n+        CallSite callSite = StableFieldUpdater.lazyOfInt(lookup, \"\",\n+                MhUtil.findVarHandle(lookup, SimpleMhFoo.class, \"hash\", int.class),\n+                MhUtil.findStatic(lookup,SimpleMhFoo.class, \"computeHash\", MethodType.methodType(int.class, SimpleMhFoo.class))\n+                , -1);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        ToIntFunction<SimpleMhFoo> hasher = (ToIntFunction<SimpleMhFoo>) callSite.getTarget().invoke();\n+\n+        var foo = new SimpleMhFoo(STRING);\n+        int hash = hasher.applyAsInt(foo);\n+        assertEquals(STRING.hashCode(), hash);\n+    }\n+\n+    @Test\n+    void lazyOfLong() throws Throwable {\n+        var lookup = MethodHandles.lookup();\n+        CallSite callSite = StableFieldUpdater.lazyOfLong(lookup, \"\",\n+                MhUtil.findVarHandle(lookup, LongMhFoo.class, \"hash\", long.class),\n+                MhUtil.findVirtual(lookup, LongMhFoo.class, \"hash0\", MethodType.methodType(long.class))\n+                , -1);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        ToLongFunction<LongMhFoo> hasher = (ToLongFunction<LongMhFoo>) callSite.getTarget().invoke();\n+\n+        var foo = new LongMhFoo(STRING);\n+        long hash = hasher.applyAsLong(foo);\n+        assertEquals(STRING.hashCode(), hash);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StableValue\/StableFieldUpdaterTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"}]}