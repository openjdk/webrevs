{"files":[{"patch":"@@ -178,7 +178,1 @@\n-        if (Architecture.is64bit()) {\n-            \/\/ We are also relying on the fact that the VM will not place 64-bit\n-            \/\/ instance fields that can cross cache lines.\n-            return new StableLongFieldUpdater<>(holderType, offset, underlying, zeroReplacement);\n-        } else {\n-            return new TearingStableLongFieldUpdater<>(holderType, offset, underlying, zeroReplacement);\n-        }\n+        return makeLong(holderType, offset, underlying, zeroReplacement);\n@@ -187,1 +181,0 @@\n-\n@@ -214,1 +207,1 @@\n-            return new StableLongFieldUpdater<>(holderType, offset, underlying, zeroReplacement);\n+            return makeLong(holderType, offset, underlying, zeroReplacement);\n@@ -219,0 +212,12 @@\n+    private static <T> ToLongFunction<T> makeLong(Class<T> holderType,\n+                                                  long offset,\n+                                                  ToLongFunction<? super T> underlying,\n+                                                  long zeroReplacement) {\n+        if (Architecture.is64bit()) {\n+            \/\/ We are also relying on the fact that the VM will not place 64-bit\n+            \/\/ instance fields that can cross cache lines.\n+            return new StableLongFieldUpdater<>(holderType, offset, underlying, zeroReplacement);\n+        } else {\n+            return new TearingStableLongFieldUpdater<>(holderType, offset, underlying, zeroReplacement);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/StableFieldUpdater.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"}]}