{"files":[{"patch":"@@ -666,2 +666,1 @@\n-\/\/------------------------raise_above_anti_dependences---------------------------\n-\/\/ Enforce a scheduling of the argument load that ensures anti-dependent stores\n+\/\/ Enforce a scheduling of the given 'load' that ensures anti-dependent stores\n@@ -670,1 +669,1 @@\n-\/\/ The argument load has a current scheduling range in the dominator tree that\n+\/\/ The given 'load' has a current scheduling range in the dominator tree that\n@@ -672,3 +671,3 @@\n-\/\/ the argument LCA block. However, there may still exist anti-dependent stores\n-\/\/ in between the early block and the LCA that overwrite memory that the load\n-\/\/ must witness. For such stores, we must\n+\/\/ the given 'LCA' block for the load. However, there may still exist\n+\/\/ anti-dependent stores between the early block and the LCA that overwrite\n+\/\/ memory that the load must witness. For such stores, we must\n@@ -679,2 +678,3 @@\n-\/\/      an anti-dependence edge from the load to the store to ensure LCM\n-\/\/      schedules the load before the store within the block.\n+\/\/      an anti-dependence edge (i.e., precedence edge) from the load to the\n+\/\/      store to ensure LCM schedules the load before the store within the\n+\/\/      block.\n@@ -721,5 +721,6 @@\n-\/\/ there are no anti-dependent stores between the load's early block and the\n-\/\/ updated LCA. Any stores in the updated LCA will have new anti-dependence\n-\/\/ edges back to the load. The caller may schedule the load in the LCA, or it\n-\/\/ may hoist the load above the LCA, if it is not the early block.\n-Block* PhaseCFG::raise_above_anti_dependences(Block* LCA, Node* load, bool verify) {\n+\/\/ there are no anti-dependent stores in any block between the load's early\n+\/\/ block and the updated LCA. Any stores in the updated LCA will have new\n+\/\/ anti-dependence edges back to the load. The caller may schedule the load in\n+\/\/ the updated LCA, or it may hoist the load above the updated LCA, if the\n+\/\/ updated LCA is not the early block.\n+Block* PhaseCFG::raise_above_anti_dependences(Block* LCA, Node* load, const bool verify) {\n@@ -758,5 +759,5 @@\n-  \/\/ Note the earliest legal placement of 'load', as determined by\n-  \/\/ the unique point in the dominator tree where all memory effects\n-  \/\/ and other inputs are first available.  (Computed by schedule_early.)\n-  \/\/ For normal loads, 'early' is the shallowest place (dom graph wise)\n-  \/\/ to look for anti-deps between this load and any store.\n+  \/\/ Record the earliest legal placement of 'load', as determined by the unique\n+  \/\/ point in the dominator tree where all memory effects and other inputs are\n+  \/\/ first available (computed by schedule_early). For normal loads, 'early' is\n+  \/\/ the shallowest place (dominator-tree wise) to look for anti-dependences\n+  \/\/ between this load and any store.\n@@ -766,2 +767,2 @@\n-  \/\/ memory or address inputs. This block may be different than the\n-  \/\/ schedule_early block in that it could be at an even shallower depth in the\n+  \/\/ memory or address inputs. This block may be different from the\n+  \/\/ schedule_early block when it is at an even shallower depth in the\n@@ -780,1 +781,1 @@\n-  \/\/ Bookkeeping of possibly anti-dependent stores that we find outside of the\n+  \/\/ Bookkeeping of possibly anti-dependent stores that we find outside the\n@@ -854,1 +855,1 @@\n-               def_mem_state->is_MergeMem(),\n+           def_mem_state->is_MergeMem(),\n@@ -857,1 +858,1 @@\n-    uint op = use_mem_state->Opcode();\n+    const uint op = use_mem_state->Opcode();\n@@ -894,1 +895,1 @@\n-        \"use_mem_state should be either a store or a memory Phi\");\n+           \"use_mem_state should be either a store or a memory Phi\");\n@@ -971,3 +972,3 @@\n-      \/\/          |??\n-      \/\/          |||\n-      \/\/          Phi\n+      \/\/          | ? ?\n+      \/\/          \\ | \/\n+      \/\/           Phi\n@@ -1025,2 +1026,2 @@\n-      \/\/ We found an anti-dependent store outside the load's 'early' block.\n-      \/\/ The store may be between the current LCA and earliest possible block\n+      \/\/ We found an anti-dependent store outside the load's 'early' block. The\n+      \/\/ store may be between the current LCA and the earliest possible block\n@@ -1058,1 +1059,1 @@\n-  \/\/ precedence edges.\n+  \/\/ anti-dependence edges.\n@@ -1083,1 +1084,1 @@\n-\n+  \/\/\n@@ -1087,1 +1088,1 @@\n-\n+  \/\/\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":33,"deletions":32,"binary":false,"changes":65,"status":"modified"}]}