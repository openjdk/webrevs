{"files":[{"patch":"@@ -372,12 +372,26 @@\n-     * <li>If {@code dstType} is a reference type, a reference cast\n-     *     is applied to {@code value} as if by calling {@code dstType.cast(value)}.\n-     * <li>If {@code dstType} is a primitive type, then, if the runtime type\n-     *     of {@code value} is a primitive wrapper type (such as {@link Integer}),\n-     *     a Java unboxing conversion is applied (JLS {@jls 5.1.8}) followed by a\n-     *     Java casting conversion (JLS {@jls 5.5}) converting either directly to\n-     *     {@code dstType}, or, if {@code dstType} is {@code boolean},\n-     *     to {@code int}, which is then converted to either {@code true}\n-     *     or {@code false} depending on whether the least-significant-bit\n-     *     is 1 or 0 respectively.  If {@code value} is null, the zero value for\n-     *     the {@code dstType} is returned.  Otherwise, a {@link ClassCastException}\n-     *     is thrown.\n+     * <li>If {@code dstType} is a reference type, a reference cast is applied\n+     *     to {@code value} as if by calling {@link Class#cast(Object)\n+     *     dstType.cast(value)}.\n+     * <li>Otherwise, {@code dstType} is a primitive type:\n+     *     <ol>\n+     *     <li>If {@code value} is null, the default value (JVMS {@jvms 2.3})\n+     *         of {@code dstType} is returned.\n+     *     <li>If the runtime type of {@code value} is a primitive wrapper type\n+     *         (such as {@link Integer}), a Java unboxing conversion is applied\n+     *         (JLS {@jls 5.1.8}).\n+     *         <ul>\n+     *         <li>If the runtime type is {@link Boolean}, the unboxing result\n+     *             is then converted to {@code int}, where {@code true} becomes\n+     *             {@code 1} and {@code false} becomes {@code 0}.\n+     *         <\/ul>\n+     *         Followed by a Java casting conversion (JLS {@jls 5.5}):\n+     *         <ul>\n+     *         <li>If {@code dstType} is not {@code boolean}, the cast converts\n+     *             directly to {@code dstType}.\n+     *         <li>If {@code dstType} is {@code boolean}, the cast converts to\n+     *             {@code int}, and the resulting {@code boolean} is produced\n+     *             by testing whether the least significant bit of the cast\n+     *             {@code int} is 1.\n+     *         <\/ul>\n+     *     <li>Otherwise, a {@link ClassCastException} is thrown.\n+     *     <\/ol>\n@@ -397,1 +411,1 @@\n-     * @param value the value to be converted\n+     * @param value the value to be converted, may be null\n@@ -399,5 +413,2 @@\n-     * @throws ClassCastException when {@code dstType} is {@code void},\n-     *         when a cast per (1) fails, or when {@code dstType} is a primitive type\n-     *         and {@code value} is not null and its runtime type is not a primitive\n-     *         wrapper type (such as {@link Integer})\n-     *\n+     * @throws ClassCastException when {@code dstType} is {@code void}, when\n+     *         a cast per (1) fails, or according to (2).(3)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ConstantBootstraps.java","additions":29,"deletions":18,"binary":false,"changes":47,"status":"modified"}]}