{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -372,11 +372,26 @@\n-     * <li>If {@code dstType} is a reference type, a reference cast\n-     *     is applied to {@code value} as if by calling {@code dstType.cast(value)}.\n-     * <li>If {@code dstType} is a primitive type, then, if the runtime type\n-     *     of {@code value} is a primitive wrapper type (such as {@link Integer}),\n-     *     a Java unboxing conversion is applied {@jls 5.1.8} followed by a\n-     *     Java casting conversion {@jls 5.5} converting either directly to\n-     *     {@code dstType}, or, if {@code dstType} is {@code boolean},\n-     *     to {@code int}, which is then converted to either {@code true}\n-     *     or {@code false} depending on whether the least-significant-bit\n-     *     is 1 or 0 respectively. If the runtime type of {@code value} is\n-     *     not a primitive wrapper type a {@link ClassCastException} is thrown.\n+     * <li>If {@code dstType} is a reference type, a reference cast is applied\n+     *     to {@code value} as if by calling {@link Class#cast(Object)\n+     *     dstType.cast(value)}.\n+     * <li>Otherwise, {@code dstType} is a primitive type:\n+     *     <ol>\n+     *     <li>If {@code value} is null, the default value (JVMS {@jvms 2.3})\n+     *         of {@code dstType} is returned.\n+     *     <li>If the runtime type of {@code value} is a primitive wrapper type\n+     *         (such as {@link Integer}), a Java unboxing conversion is applied\n+     *         (JLS {@jls 5.1.8}).\n+     *         <ul>\n+     *         <li>If the runtime type is {@link Boolean}, the unboxing result\n+     *             is then converted to {@code int}, where {@code true} becomes\n+     *             {@code 1} and {@code false} becomes {@code 0}.\n+     *         <\/ul>\n+     *         Followed by a Java casting conversion (JLS {@jls 5.5}):\n+     *         <ul>\n+     *         <li>If {@code dstType} is not {@code boolean}, the cast converts\n+     *             directly to {@code dstType}.\n+     *         <li>If {@code dstType} is {@code boolean}, the cast converts to\n+     *             {@code int}, and the resulting {@code boolean} is produced\n+     *             by testing whether the least significant bit of the cast\n+     *             {@code int} is 1.\n+     *         <\/ul>\n+     *     <li>Otherwise, a {@link ClassCastException} is thrown.\n+     *     <\/ol>\n@@ -396,1 +411,1 @@\n-     * @param value the value to be converted\n+     * @param value the value to be converted, may be null\n@@ -398,5 +413,4 @@\n-     * @throws ClassCastException when {@code dstType} is {@code void},\n-     *         when a cast per (1) fails, or when {@code dstType} is a primitive type\n-     *         and the runtime type of {@code value} is not a primitive wrapper type\n-     *         (such as {@link Integer})\n-     *\n+     * @throws ClassCastException when {@code dstType} is {@code void}; when\n+     *         {@code dstType} is reference, and the reference cast fails; or\n+     *         when {@code dstType} is primitive, and {@code value} is an\n+     *         instance of a reference type that is not a wrapper class\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ConstantBootstraps.java","additions":32,"deletions":18,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @run testng ConvertTest\n- *\/\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.ConstantBootstraps;\n-import java.math.BigInteger;\n-\n-import static org.testng.Assert.assertEquals;\n-\n-public class ConvertTest {\n-\n-    @DataProvider\n-    public static Object[][] cceInputs() {\n-        return new Object[][]{\n-            { void.class, null },\n-            { Integer.class, \"a\" },\n-            { int.class, BigInteger.ZERO },\n-        };\n-    }\n-\n-    @Test(dataProvider = \"cceInputs\", expectedExceptions = ClassCastException.class)\n-    public void testBadConversion(Class<?> dstType, Object value) {\n-        ConstantBootstraps.explicitCast(null, null, dstType, value);\n-    }\n-\n-    @DataProvider\n-    public static Object[][] goodInputs() {\n-        Object o = new Object();\n-        return new Object[][]{\n-            { Object.class, null, null },\n-            { Object.class, o, o },\n-            { String.class, \"abc\", \"abc\" },\n-            { short.class, 10, (short) 10 },\n-            { int.class, (short) 10, 10 },\n-            { boolean.class, 1, true },\n-            { boolean.class, 2, false },\n-            { int.class, true, 1 },\n-            { int.class, false, 0 },\n-            { int.class, 10, 10 },\n-            { Integer.class, 10, 10 },\n-            { Object.class, 10, 10 },\n-            { Number.class, 10, 10 },\n-        };\n-    }\n-\n-    @Test(dataProvider = \"goodInputs\")\n-    public void testSuccess(Class<?> dstType, Object value, Object expected) {\n-        Object actual = ConstantBootstraps.explicitCast(null, null, dstType, value);\n-        assertEquals(actual, expected);\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/constant\/ConvertTest.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8186046 8195694\n+ * @bug 8186046 8195694 8241100 8364751\n@@ -34,0 +34,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -244,0 +245,41 @@\n+\n+    @DataProvider\n+    public static Object[][] cceCasts() {\n+        return new Object[][]{\n+                { void.class, null },\n+                { Integer.class, \"a\" },\n+                { int.class, BigInteger.ZERO },\n+        };\n+    }\n+\n+    @Test(dataProvider = \"cceCasts\", expectedExceptions = ClassCastException.class)\n+    public void testBadCasts(Class<?> dstType, Object value) {\n+        ConstantBootstraps.explicitCast(null, null, dstType, value);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] validCasts() {\n+        Object o = new Object();\n+        return new Object[][]{\n+                { Object.class, null, null },\n+                { Object.class, o, o },\n+                { String.class, \"abc\", \"abc\" },\n+                { short.class, 10, (short) 10 },\n+                { int.class, (short) 10, 10 },\n+                { boolean.class, 1, true },\n+                { boolean.class, 2, false },\n+                { int.class, true, 1 },\n+                { int.class, false, 0 },\n+                { int.class, 10, 10 },\n+                { Integer.class, 10, 10 },\n+                { Object.class, 10, 10 },\n+                { Number.class, 10, 10 },\n+                { char.class, null, (char) 0 }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"validCasts\")\n+    public void testSuccessfulCasts(Class<?> dstType, Object value, Object expected) {\n+        Object actual = ConstantBootstraps.explicitCast(null, null, dstType, value);\n+        assertEquals(actual, expected);\n+    }\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/ConstantBootstrapsTest.java","additions":44,"deletions":2,"binary":false,"changes":46,"status":"modified"}]}