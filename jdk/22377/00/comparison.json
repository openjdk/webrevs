{"files":[{"patch":"@@ -989,2 +989,0 @@\n-We believe this is less intrusive than requiring client code to pass\n-a security check before installing a <code>PropertyChangeListener<\/code>.\n@@ -1198,20 +1196,0 @@\n-First note that, because unhindered access to Components in other\n-contexts represents a security hole, the SecurityManager must grant a\n-new permission, \"replaceKeyboardFocusManager\", before client code is\n-permitted to replace the <code>KeyboardFocusManager<\/code> with an arbitrary\n-subclass instance. Because of the security check, replacing the\n-<code>KeyboardFocusManager<\/code> is not an option for applications that will be\n-deployed in environments with a SecurityManager, such as applets in a\n-browser.\n-<p>\n-Once installed, a <code>KeyboardFocusManager<\/code> instance has\n-access to the global focus state via a set of protected functions.\n-The <code>KeyboardFocusManager<\/code> can only call these functions\n-if it is installed in the calling thread's context. This ensures\n-that malicious code cannot circumvent the security check in\n-<code>KeyboardFocusManager.setCurrentFocusManager<\/code>.\n-A <code>KeyboardFocusManager<\/code> should always work with\n-the global focus state instead of the context focus state.\n-Failure to do this will lead to incorrect behavior of the\n-<code>KeyboardFocusManager<\/code>.\n-<p>\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/doc-files\/FocusSpec.html","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"}]}