{"files":[{"patch":"@@ -537,22 +537,3 @@\n- *\n- * <p>For backwards compatible behavior, the system property\n- * {@systemProperty java.locale.useOldISOCodes} reverts the behavior\n- * back to that of before Java SE 17. If the system property is set to\n- * {@code true}, those three current language codes are mapped to their\n- * backward compatible forms. The property is only read at Java runtime\n- * startup and subsequent calls to {@code System.setProperty()} will\n- * have no effect. <b>As of Java SE 25, the use of the\n- * {@code java.locale.useOldISOCodes} system property is deprecated.\n- * This backwards compatible behavior will be removed in a future release\n- * of the JDK.<\/b>\n- *\n- * <p>The APIs added in Java SE 7 map between the old and new language codes,\n- * maintaining the mapped codes internal to Locale (so that\n- * {@code getLanguage} and {@code toString} reflect the mapped\n- * code, which depends on the {@code java.locale.useOldISOCodes} system\n- * property), but using the new codes in the BCP 47 language tag APIs (so\n- * that {@code toLanguageTag} reflects the new one). This\n- * preserves the equivalence between Locales no matter which code or\n- * API is used to construct them. Java's default resource bundle\n- * lookup mechanism also implements this mapping, so that resources\n- * can be named using either convention, see {@link ResourceBundle.Control}.\n+ * <p>The default resource bundle lookup mechanism also implements\n+ * this mapping, so that resources can be named using either convention,\n+ * see {@link ResourceBundle.Control}.\n@@ -2520,2 +2501,1 @@\n-        \/\/ codes have changed, but we always store the NEW code, unless the property\n-        \/\/ java.locale.useOldISOCodes is set to \"true\"\n+        \/\/ codes have changed, but we always store the NEW code\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-    private static final String JAVA_LOCALE_USE_OLD_ISO_CODES;\n@@ -97,1 +96,0 @@\n-        JAVA_LOCALE_USE_OLD_ISO_CODES = getProperty(props, \"java.locale.useOldISOCodes\", \"\");\n@@ -261,7 +259,0 @@\n-    \/**\n-     * {@return the {@code java.locale.useOldISOCodes} system property}\n-     *\/\n-    public static String javaLocaleUseOldISOCodes() {\n-        return JAVA_LOCALE_USE_OLD_ISO_CODES;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import jdk.internal.util.StaticProperty;\n@@ -113,3 +112,2 @@\n-     * Boolean for the old ISO language code compatibility.\n-     * The system property \"java.locale.useOldISOCodes\" is not security sensitive,\n-     * so no need to ensure privileged access here.\n+     * Emit the warning message if the system property \"java.locale.useOldISOCodes\" is\n+     * specified.\n@@ -117,2 +115,0 @@\n-    private static final boolean OLD_ISO_CODES = StaticProperty.javaLocaleUseOldISOCodes()\n-            .equalsIgnoreCase(\"true\");\n@@ -120,3 +116,4 @@\n-        if (OLD_ISO_CODES) {\n-            System.err.println(\"WARNING: The use of the system property \\\"java.locale.useOldISOCodes\\\"\" +\n-                \" is deprecated. It will be removed in a future release of the JDK.\");\n+        if (!System.getProperty(\"java.locale.useOldISOCodes\", \"\").isEmpty()) {\n+            System.err.println(\"WARNING: The system property\" +\n+                \" \\\"java.locale.useOldISOCodes\\\" is no longer supported.\" +\n+                \" Any specified value will be ignored.\");\n@@ -186,3 +183,3 @@\n-            case \"he\", \"iw\" -> OLD_ISO_CODES ? \"iw\" : \"he\";\n-            case \"id\", \"in\" -> OLD_ISO_CODES ? \"in\" : \"id\";\n-            case \"yi\", \"ji\" -> OLD_ISO_CODES ? \"ji\" : \"yi\";\n+            case \"iw\" -> \"he\";\n+            case \"in\" -> \"id\";\n+            case \"ji\" -> \"yi\";\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/BaseLocale.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-import jdk.internal.util.StaticProperty;\n@@ -291,10 +290,0 @@\n-        \/\/ Get names for old ISO codes with new ISO code resources\n-        if (StaticProperty.javaLocaleUseOldISOCodes().equalsIgnoreCase(\"true\")) {\n-            key = switch (key) {\n-                case \"iw\" -> \"he\";\n-                case \"in\" -> \"id\";\n-                case \"ji\" -> \"yi\";\n-                default -> key;\n-            };\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/LocaleResources.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * 8337603\n+ * 8337603 8355522\n@@ -712,26 +712,11 @@\n-        if (\"true\".equalsIgnoreCase(System.getProperty(\"java.locale.useOldISOCodes\"))) {\n-            if (!hebrewNew.getLanguage().equals(\"iw\")) {\n-                fail(\"Got back wrong language code for new Hebrew: expected \\\"iw\\\", got \\\"\"\n-                        + hebrewNew.getLanguage() + \"\\\"\");\n-            }\n-            if (!yiddishNew.getLanguage().equals(\"ji\")) {\n-                fail(\"Got back wrong language code for new Yiddish: expected \\\"ji\\\", got \\\"\"\n-                        + yiddishNew.getLanguage() + \"\\\"\");\n-            }\n-            if (!indonesianNew.getLanguage().equals(\"in\")) {\n-                fail(\"Got back wrong language code for new Indonesian: expected \\\"in\\\", got \\\"\"\n-                        + indonesianNew.getLanguage() + \"\\\"\");\n-            }\n-        } else {\n-            if (!hebrewOld.getLanguage().equals(\"he\")) {\n-                fail(\"Got back wrong language code for old Hebrew: expected \\\"he\\\", got \\\"\"\n-                        + hebrewNew.getLanguage() + \"\\\"\");\n-            }\n-            if (!yiddishOld.getLanguage().equals(\"yi\")) {\n-                fail(\"Got back wrong language code for old Yiddish: expected \\\"yi\\\", got \\\"\"\n-                        + yiddishNew.getLanguage() + \"\\\"\");\n-            }\n-            if (!indonesianOld.getLanguage().equals(\"id\")) {\n-                fail(\"Got back wrong language code for old Indonesian: expected \\\"id\\\", got \\\"\"\n-                        + indonesianNew.getLanguage() + \"\\\"\");\n-            }\n+        if (!hebrewOld.getLanguage().equals(\"he\")) {\n+            fail(\"Got back wrong language code for old Hebrew: expected \\\"he\\\", got \\\"\"\n+                    + hebrewNew.getLanguage() + \"\\\"\");\n+        }\n+        if (!yiddishOld.getLanguage().equals(\"yi\")) {\n+            fail(\"Got back wrong language code for old Yiddish: expected \\\"yi\\\", got \\\"\"\n+                    + yiddishNew.getLanguage() + \"\\\"\");\n+        }\n+        if (!indonesianOld.getLanguage().equals(\"id\")) {\n+            fail(\"Got back wrong language code for old Indonesian: expected \\\"id\\\", got \\\"\"\n+                    + indonesianNew.getLanguage() + \"\\\"\");\n@@ -739,1 +724,0 @@\n-\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleTest.java","additions":13,"deletions":29,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8295232 8353118\n+ * @bug 8295232 8353118 8355522\n@@ -37,1 +37,1 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n@@ -47,1 +47,1 @@\n-        oa.stderrShouldMatch(\"WARNING: The use of the system property \\\"java.locale.useOldISOCodes\\\" is deprecated. It will be removed in a future release of the JDK.\");\n+        oa.stderrShouldMatch(\"WARNING: The system property \\\"java.locale.useOldISOCodes\\\" is no longer supported. Any specified value will be ignored.\");\n@@ -55,6 +55,3 @@\n-            \/\/ Ensure java.locale.useOldISOCodes is only interpreted at runtime startup\n-            \/\/ Should have no effect\n-            System.setProperty(\"java.locale.useOldISOCodes\", \"false\");\n-            Locale locale = Locale.of(newCode);\n-            assertEquals(obsoleteCode, locale.getLanguage(),\n-                    \"newCode 'he' was not mapped to 'iw' with useOldISOCodes=true\");\n+            \/\/ Ensure java.locale.useOldISOCodes should have no effect\n+            assertNotEquals(obsoleteCode, Locale.of(newCode).getLanguage(),\n+                    \"newCode 'he' was mapped to 'iw' with useOldISOCodes=true\");\n","filename":"test\/jdk\/java\/util\/Locale\/UseOldISOCodesTest.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"}]}