{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include <pthread.h>\n@@ -35,4 +36,0 @@\n-perfstat_process_t prev_stats = {0};\n-static unsigned long long prev_timebase = 0;\n-static int initialized = 0;\n-\n@@ -41,7 +38,3 @@\n-static perfstat_cpu_total_t cpu_total_old;\n-static time_t last_sample_time = 0;\n-static double last_cpu_load = -1.0;\n-JNIEXPORT jdouble JNICALL\n-Java_com_sun_management_internal_OperatingSystemImpl_getCpuLoad0\n-(JNIEnv *env, jobject dummy)\n-{\n+static struct perfMetrics{\n+    unsigned long long timebase;\n+    perfstat_process_t stats;\n@@ -49,6 +42,1 @@\n-    int ret;\n-\n-    time_t now = time(NULL);\n-    if (initialized && (now - last_sample_time < 5)) {\n-        return last_cpu_load; \/\/ Return cached value if less than 5s\n-    }\n+} counters;\n@@ -56,4 +44,1 @@\n-    ret = perfstat_cpu_total(NULL, &cpu_total, sizeof(perfstat_cpu_total_t), 1);\n-    if (ret < 0) {\n-        return -1.0;\n-    }\n+static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;\n@@ -61,0 +46,2 @@\n+int perfInit() {\n+    static int initialized = 0;\n@@ -62,1 +49,13 @@\n-        cpu_total_old = cpu_total;\n+\n+        perfstat_id_t id;\n+        counters.stats = (perfstat_process_t){0};\n+        counters.timebase = 0;\n+        int rc = perfstat_cpu_total(NULL, &counters.cpu_total, sizeof(perfstat_cpu_total_t), 1);\n+        if (rc < 0) {\n+            return -1;\n+        }\n+        rc = perfstat_process(&id, &counters.stats, sizeof(perfstat_process_t), 1);\n+        if (rc < 0) {\n+            return -1;\n+        }\n+        counters.timebase = counters.stats.last_timebase;\n@@ -64,2 +63,0 @@\n-        last_sample_time = now;\n-        return -1.0;\n@@ -67,0 +64,2 @@\n+    return initialized ? 0 : -1;\n+}\n@@ -68,8 +67,30 @@\n-    long long user_diff = cpu_total.user - cpu_total_old.user;\n-    long long sys_diff = cpu_total.sys - cpu_total_old.sys;\n-    long long idle_diff = cpu_total.idle - cpu_total_old.idle;\n-    long long wait_diff = cpu_total.wait - cpu_total_old.wait;\n-    long long total = user_diff + sys_diff + idle_diff + wait_diff;\n-\n-    if (total == 0) {\n-        return -1.0;\n+JNIEXPORT jdouble JNICALL\n+Java_com_sun_management_internal_OperatingSystemImpl_getCpuLoad0\n+(JNIEnv *env, jobject dummy)\n+{\n+    double load = -1.0;\n+    pthread_mutex_lock(&lock);\n+    if (perfInit() == 0) {\n+        int ret;\n+        perfstat_cpu_total_t cpu_total;\n+        ret = perfstat_cpu_total(NULL, &cpu_total, sizeof(perfstat_cpu_total_t), 1);\n+        if (ret < 0) {\n+            return -1.0;\n+        }\n+        long long user_diff = cpu_total.user - counters.cpu_total.user;\n+        long long sys_diff = cpu_total.sys - counters.cpu_total.sys;\n+        long long idle_diff = cpu_total.idle - counters.cpu_total.idle;\n+        long long wait_diff = cpu_total.wait - counters.cpu_total.wait;\n+        long long total = user_diff + sys_diff + idle_diff + wait_diff;\n+        if (total < (user_diff + sys_diff)) {\n+            total = user_diff + sys_diff;\n+        }\n+        if (total == 0) {\n+            load = 0.0;\n+        }\n+        else {\n+            load = (double)(user_diff + sys_diff) \/ total;\n+            load = MAX(load, 0.0);\n+            load = MIN(load, 1.0);\n+        }\n+        counters.cpu_total = cpu_total;\n@@ -77,6 +98,1 @@\n-\n-    double load = (double)(user_diff + sys_diff) \/ total;\n-    last_cpu_load = load;\n-    last_sample_time = now;\n-    cpu_total_old = cpu_total;\n-\n+    pthread_mutex_unlock(&lock);\n@@ -94,3 +110,26 @@\n-\n-    if (perfstat_process(&id, &curr_stats, sizeof(perfstat_process_t), 1) < 0) {\n-        return -1.0;\n+    double cpu_load = -1.0;\n+    pthread_mutex_lock(&lock);\n+    if (perfInit() == 0) {\n+        int ret;\n+        ret = perfstat_process(&id, &curr_stats, sizeof(perfstat_process_t), 1);\n+        if (ret < 0) {\n+            return -1.0;\n+        }\n+        curr_timebase = curr_stats.last_timebase;\n+        timebase_diff = curr_timebase - counters.timebase;\n+        if ((long long)timebase_diff < 0 || XINTFRAC == 0) {\n+            return -1.0;\n+        }\n+        delta_time = HTIC2SEC(timebase_diff);\n+        user_diff = (double)(curr_stats.ucpu_time - counters.stats.ucpu_time);\n+        sys_diff  = (double)(curr_stats.scpu_time - counters.stats.scpu_time);\n+        counters.stats = curr_stats;\n+        counters.timebase = curr_timebase;\n+        if(delta_time == 0) {\n+            cpu_load = 0.0;\n+        }\n+        else {\n+            cpu_load = MAX(cpu_load, 0.0);\n+            cpu_load = MIN(cpu_load, 1.0);\n+            cpu_load = (user_diff + sys_diff) \/ delta_time;\n+        }\n@@ -98,18 +137,1 @@\n-    if (!initialized) {\n-        prev_stats = curr_stats;\n-        prev_timebase = curr_stats.last_timebase;\n-        initialized = 1;\n-        return -1.0;\n-    }\n-    curr_timebase = curr_stats.last_timebase;\n-    timebase_diff = curr_timebase - prev_timebase;\n-    if ((long long)timebase_diff <= 0 || XINTFRAC == 0) {\n-        return -1.0;\n-    }\n-\n-    delta_time = HTIC2SEC(timebase_diff);\n-    user_diff = (double)(curr_stats.ucpu_time - prev_stats.ucpu_time);\n-    sys_diff  = (double)(curr_stats.scpu_time - prev_stats.scpu_time);\n-    prev_stats = curr_stats;\n-    prev_timebase = curr_timebase;\n-    double cpu_load = (user_diff + sys_diff) \/ delta_time;\n+    pthread_mutex_unlock(&lock);\n","filename":"src\/jdk.management\/aix\/native\/libmanagement_ext\/UnixOperatingSystem.c","additions":81,"deletions":59,"binary":false,"changes":140,"status":"modified"}]}