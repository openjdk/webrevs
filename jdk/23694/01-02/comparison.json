{"files":[{"patch":"@@ -439,0 +439,3 @@\n+        if (child->Opcode() == Op_Proj && static_cast<ProjNode*>(child)->_con == TypeFunc::Parms && n->is_pure_function()) {\n+          worklist.push(n);\n+        }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1455,0 +1455,2 @@\n+          } else if (dead->Opcode() == Op_Proj && static_cast<ProjNode*>(dead)->_con == TypeFunc::Parms && n->is_pure_function()) {\n+            igvn->_worklist.push(n);\n@@ -2934,0 +2936,10 @@\n+bool Node::is_pure_function() const {\n+  switch (Opcode()) {\n+  case Op_ModD:\n+  case Op_ModF:\n+    return true;\n+  default:\n+    return false;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1284,0 +1284,2 @@\n+  bool is_pure_function() const;\n+\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1345,0 +1345,2 @@\n+            } else if (dead->Opcode() == Op_Proj && static_cast<ProjNode*>(dead)->_con == TypeFunc::Parms && in->is_pure_function()) {\n+              _worklist.push(in);\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-            \"unusedResult\", \"repeatedlyUnused\"})\n+            \"unusedResult\", \"repeatedlyUnused\", \"unusedResultAfterLoopOpt1\", \"unusedResultAfterLoopOpt2\"})\n@@ -55,0 +55,2 @@\n+        Asserts.assertEQ(unusedResultAfterLoopOpt1(1.1d, 2.2d), 0.d);\n+        Asserts.assertEQ(unusedResultAfterLoopOpt2(1.1d, 2.2d), 0.d);\n@@ -135,0 +137,34 @@\n+\n+    @Test\n+    @IR(failOn = {\"drem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    public double unusedResultAfterLoopOpt1(double x, double y) {\n+        double unused = x % y;\n+\n+        int a = 77;\n+        int b = 0;\n+        do {\n+            a--;\n+            b++;\n+        } while (a > 0);\n+\n+        if (b == 78) { \/\/ dead\n+            return unused;\n+        }\n+        return 0.d;\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"drem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    public double unusedResultAfterLoopOpt2(double x, double y) {\n+        double unused = x % y;\n+\n+        int a = 77;\n+        int b = 0;\n+        do {\n+            a--;\n+            b++;\n+        } while (a > 0);\n+\n+        int other = (b - 77) * (int)(x % y % 1.d);\n+        return (double)other;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModDNodeTests.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-    @Run(test = {\"constant\", \"notConstant\", \"veryNotConstant\", \"unusedResult\",\n-            \"repeatedlyUnused\"})\n+    @Run(test = {\"constant\", \"notConstant\", \"veryNotConstant\",\n+            \"unusedResult\", \"repeatedlyUnused\", \"unusedResultAfterLoopOpt1\", \"unusedResultAfterLoopOpt2\"})\n@@ -55,0 +55,2 @@\n+        Asserts.assertEQ(unusedResultAfterLoopOpt1(1.1f, 2.2f), 0.f);\n+        Asserts.assertEQ(unusedResultAfterLoopOpt2(1.1f, 2.2f), 0.f);\n@@ -135,0 +137,34 @@\n+\n+    @Test\n+    @IR(failOn = {\"drem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    public float unusedResultAfterLoopOpt1(float x, float y) {\n+        float unused = x % y;\n+\n+        int a = 77;\n+        int b = 0;\n+        do {\n+            a--;\n+            b++;\n+        } while (a > 0);\n+\n+        if (b == 78) { \/\/ dead\n+            return unused;\n+        }\n+        return 0.f;\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"drem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    public float unusedResultAfterLoopOpt2(float x, float y) {\n+        float unused = x % y;\n+\n+        int a = 77;\n+        int b = 0;\n+        do {\n+            a--;\n+            b++;\n+        } while (a > 0);\n+\n+        int other = (b - 77) * (int)(x % y % 1.f);\n+        return (float)other;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModFNodeTests.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"}]}