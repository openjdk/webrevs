{"files":[{"patch":"@@ -1519,0 +1519,5 @@\n+  Node* dummy_node = remove(phase);\n+  if (dummy_node != nullptr) {\n+    return dummy_node;\n+  }\n+\n@@ -1564,0 +1569,5 @@\n+  Node* dummy_node = remove(phase);\n+  if (dummy_node != nullptr) {\n+    return dummy_node;\n+  }\n+\n@@ -1633,0 +1643,23 @@\n+\/\/ Will remove the node if the result is not used, rewiring input to output directly.\n+\/\/ Returns a dummy constant node if removal happens, and nullptr if nothing is changed.\n+Node* ModFloatingNode::remove(PhaseGVN* phase) {\n+  PhaseIterGVN* igvn = phase->is_IterGVN();\n+  bool result_is_ignored = proj_out_or_null(TypeFunc::Parms) == nullptr;\n+  if (igvn != nullptr && result_is_ignored) {\n+    int projections[] = {\n+        TypeFunc::Control,\n+        TypeFunc::I_O,\n+        TypeFunc::Memory,\n+        TypeFunc::FramePtr,\n+        TypeFunc::ReturnAdr,\n+    };\n+    for (int projection : projections) {\n+      if (proj_out_or_null(projection) != nullptr) {\n+        igvn->replace_node(proj_out(projection), in(projection));\n+      }\n+    }\n+    return new ConINode(TypeInt::ZERO);\n+  }\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -162,0 +162,1 @@\n+  Node* remove(PhaseGVN* phase);\n","filename":"src\/hotspot\/share\/opto\/divnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,2 @@\n-    @Run(test = {\"constant\", \"notConstant\", \"veryNotConstant\"})\n+    @Run(test = {\"constant\", \"notConstant\", \"veryNotConstant\",\n+            \"unusedResult\", \"repeatedlyUnused\"})\n@@ -52,0 +53,2 @@\n+        unusedResult(1.1d, 2.2d);\n+        repeatedlyUnused(1.1d, 2.2d);\n@@ -117,0 +120,15 @@\n+\n+    @Test\n+    @IR(failOn = {\"drem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    public void unusedResult(double x, double y) {\n+        double unused = x % y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"drem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    public void repeatedlyUnused(double x, double y) {\n+        double unused = 1.d;\n+        for (int i = 0; i < 100_000; i++) {\n+            unused = x % y;\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModDNodeTests.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -44,1 +44,2 @@\n-    @Run(test = {\"constant\", \"notConstant\", \"veryNotConstant\"})\n+    @Run(test = {\"constant\", \"notConstant\", \"veryNotConstant\", \"unusedResult\",\n+            \"repeatedlyUnused\"})\n@@ -52,0 +53,2 @@\n+        unusedResult(1.1f, 2.2f);\n+        repeatedlyUnused(1.1f, 2.2f);\n@@ -117,0 +120,15 @@\n+\n+    @Test\n+    @IR(failOn = {\"frem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    public void unusedResult(float x, float y) {\n+        float unused = x % y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"frem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    public void repeatedlyUnused(float x, float y) {\n+        float unused = 1.f;\n+        for (int i = 0; i < 100_000; i++) {\n+            unused = x % y;\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModFNodeTests.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"}]}