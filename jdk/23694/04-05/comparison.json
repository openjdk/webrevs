{"files":[{"patch":"@@ -125,0 +125,2 @@\n+    @IR(failOn = IRNode.MOD_D, phase = CompilePhase.ITER_GVN1)\n+    @IR(counts = {IRNode.MOD_D, \"1\"}, phase = CompilePhase.AFTER_PARSING)\n@@ -131,0 +133,2 @@\n+    @IR(failOn = IRNode.MOD_D, phase = CompilePhase.ITER_GVN1)\n+    @IR(counts = {IRNode.MOD_D, \"1\"}, phase = CompilePhase.AFTER_PARSING)\n@@ -140,0 +144,2 @@\n+    @IR(counts = {IRNode.MOD_D, \"1\"}, phase = CompilePhase.ITER_GVN2)\n+    @IR(failOn = IRNode.MOD_D, phase = CompilePhase.BEFORE_MACRO_EXPANSION)\n@@ -158,0 +164,2 @@\n+    @IR(counts = {IRNode.MOD_D, \"2\"}, phase = CompilePhase.AFTER_CLOOPS)\n+    @IR(failOn = IRNode.MOD_D, phase = CompilePhase.PHASEIDEALLOOP1)\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModDNodeTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -125,0 +125,2 @@\n+    @IR(failOn = IRNode.MOD_F, phase = CompilePhase.ITER_GVN1)\n+    @IR(counts = {IRNode.MOD_F, \"1\"}, phase = CompilePhase.AFTER_PARSING)\n@@ -131,0 +133,2 @@\n+    @IR(failOn = IRNode.MOD_F, phase = CompilePhase.ITER_GVN1)\n+    @IR(counts = {IRNode.MOD_F, \"1\"}, phase = CompilePhase.AFTER_PARSING)\n@@ -140,0 +144,2 @@\n+    @IR(counts = {IRNode.MOD_F, \"1\"}, phase = CompilePhase.ITER_GVN2)\n+    @IR(failOn = IRNode.MOD_F, phase = CompilePhase.BEFORE_MACRO_EXPANSION)\n@@ -158,0 +164,2 @@\n+    @IR(counts = {IRNode.MOD_F, \"2\"}, phase = CompilePhase.AFTER_CLOOPS)\n+    @IR(failOn = IRNode.MOD_F, phase = CompilePhase.PHASEIDEALLOOP1)\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModFNodeTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2534,0 +2534,10 @@\n+    public static final String MOD_F = PREFIX + \"MOD_F\" + POSTFIX;\n+    static {\n+        macroNodes(MOD_F, \"ModF\");\n+    }\n+\n+    public static final String MOD_D = PREFIX + \"MOD_D\" + POSTFIX;\n+    static {\n+        macroNodes(MOD_D, \"ModD\");\n+    }\n+\n@@ -2579,0 +2589,10 @@\n+    \/**\n+     * Apply {@code regex} on all ideal graph phases up to and including {@link CompilePhase#BEFORE_MACRO_EXPANSION}.\n+     *\/\n+    private static void macroNodes(String irNodePlaceholder, String irNodeRegex) {\n+        String regex = START + irNodeRegex + MID + END;\n+        IR_NODE_MAPPINGS.put(irNodePlaceholder, new SinglePhaseRangeEntry(CompilePhase.BEFORE_MACRO_EXPANSION, regex,\n+                CompilePhase.BEFORE_STRINGOPTS,\n+                CompilePhase.BEFORE_MACRO_EXPANSION));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}