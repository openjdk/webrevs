{"files":[{"patch":"@@ -84,1 +84,1 @@\n- * {@linkplain #decode(InputStream, Class)} methods take a Class parameter\n+ * {@linkplain #decode(InputStream, Class)} methods take a class parameter\n@@ -88,1 +88,1 @@\n- * Class parameter can specify which to return. Use\n+ * class parameter can specify which to return. Use\n@@ -90,1 +90,1 @@\n- * If the Class parameter is set to {@code X509EncodedKeySpec.class}, the\n+ * If the class parameter is set to {@code X509EncodedKeySpec.class}, the\n@@ -93,2 +93,2 @@\n- * If the Class parameter doesn't match the PEM content, an\n- * {@code IllegalArgumentException} will be thrown.\n+ * If the class parameter doesn't match the PEM content, a\n+ * {@linkplain ClassCastException} will be thrown.\n@@ -101,1 +101,1 @@\n- * {@link#withDecryption(char[])} configures the decoder to decrypt all\n+ * {@linkplain #withDecryption(char[])} configures the decoder to decrypt all\n@@ -120,1 +120,1 @@\n- *     PEMDecoder pe = PEMDecoder.of().withDecryption(password).\n+ *     PEMDecoder pd = PEMDecoder.of().withDecryption(password).\n@@ -122,1 +122,1 @@\n- *     byte[] pemData = pe.decode(privKey);\n+ *     byte[] pemData = pd.decode(privKey);\n@@ -126,3 +126,3 @@\n- * {@code DEREncodables}. This implementation additionally supports PEM types:\n- * {@code X509 CERTIFICATE}, {@code X.509 CERTIFICATE}, {@code CRL},\n- * and {@code RSA PRIVATE KEY}.\n+ * {@code DEREncodable} objects. This implementation additionally supports\n+ * the following PEM types:  {@code X509 CERTIFICATE},\n+ * {@code X.509 CERTIFICATE}, {@code CRL}, and {@code RSA PRIVATE KEY}.\n@@ -182,1 +182,1 @@\n-                        new X509EncodedKeySpec(decoder.decode(pem.pem()));\n+                        new X509EncodedKeySpec(decoder.decode(pem.content()));\n@@ -188,1 +188,1 @@\n-                    PKCS8Key p8key = new PKCS8Key(decoder.decode(pem.pem()));\n+                    PKCS8Key p8key = new PKCS8Key(decoder.decode(pem.content()));\n@@ -219,1 +219,1 @@\n-                            pem.pem()));\n+                            pem.content()));\n@@ -221,1 +221,1 @@\n-                    yield new EncryptedPrivateKeyInfo(decoder.decode(pem.pem())).\n+                    yield new EncryptedPrivateKeyInfo(decoder.decode(pem.content())).\n@@ -228,1 +228,1 @@\n-                        new ByteArrayInputStream(decoder.decode(pem.pem())));\n+                        new ByteArrayInputStream(decoder.decode(pem.content())));\n@@ -233,1 +233,1 @@\n-                        new ByteArrayInputStream(decoder.decode(pem.pem())));\n+                        new ByteArrayInputStream(decoder.decode(pem.content())));\n@@ -239,1 +239,1 @@\n-                            pem.pem())));\n+                            pem.content())));\n@@ -274,1 +274,0 @@\n-        DEREncodable de;\n@@ -486,3 +485,0 @@\n-     * <p>If {@code provider} is {@code null}, a new instance is returned with\n-     * the default provider configuration.\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMDecoder.java","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n- * {@linkplain PEMRecord#pem()} with the PEM header and footer\n+ * {@linkplain PEMRecord#content()} with the PEM header and footer\n@@ -111,1 +111,2 @@\n- * @implNote An implementation may support other PEM types and DEREncodables.\n+ * @implNote An implementation may support other PEM types and\n+ * {@code DEREncodable} objects.\n@@ -290,1 +291,1 @@\n-        \/\/ Setting a `key' prevents repeated key generations operations.\n+        \/\/ Setting a `key` prevents repeated key generation operations.\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMEncoder.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Base64;\n@@ -42,1 +41,1 @@\n- * <p> {@code type} and {@code pem} may not be {@code null}.\n+ * <p> {@code type} and {@code content} may not be {@code null}.\n@@ -48,4 +47,4 @@\n- * {@code type} conforms to {@code RFC 7468}, that {@code pem} is valid Base64,\n- * or that {@code pem} matches the {@code type}.  {@code leadingData} is not\n- * defensively copied and does not return a clone when\n- * {@linkplain #leadingData()} is called.\n+ * {@code type} conforms to {@code RFC 7468}, that {@code content} is valid\n+ * Base64, or that {@code content} matches the {@code type}.\n+ * {@code leadingData} is not defensively copied and does not return a\n+ * clone when {@linkplain #leadingData()} is called.\n@@ -55,1 +54,1 @@\n- * @param pem any data between the PEM header and footer.\n+ * @param content the Base64-encoded data, excluding the PEM header and footer\n@@ -67,1 +66,1 @@\n-public record PEMRecord(String type, String pem, byte[] leadingData)\n+public record PEMRecord(String type, String content, byte[] leadingData)\n@@ -74,2 +73,2 @@\n-     * @param pem the Base64-encoded data encapsulated by the PEM header and\n-     *           footer.\n+     * @param content the Base64-encoded data, excluding the PEM header and\n+     *               footer\n@@ -78,1 +77,1 @@\n-     * @throws IllegalArgumentException if the {@code type} is incorrectly\n+     * @throws IllegalArgumentException if {@code type} is incorrectly\n@@ -80,1 +79,1 @@\n-     * @throws NullPointerException if {@code type} and\/or {@code pem} are\n+     * @throws NullPointerException if {@code type} and\/or {@code content} are\n@@ -83,1 +82,1 @@\n-    public PEMRecord(String type, String pem, byte[] leadingData) {\n+    public PEMRecord {\n@@ -85,1 +84,1 @@\n-        Objects.requireNonNull(pem, \"\\\"pem\\\" cannot be null.\");\n+        Objects.requireNonNull(content, \"\\\"content\\\" cannot be null.\");\n@@ -95,3 +94,0 @@\n-        this.type = type;\n-        this.pem = pem;\n-        this.leadingData = leadingData;\n@@ -102,1 +98,1 @@\n-     * {@code pem} data in String form.  {@code leadingData} is set to null.\n+     * {@code content} data in String form.  {@code leadingData} is set to null.\n@@ -105,3 +101,3 @@\n-     * @param pem the Base64-encoded data encapsulated by the PEM header and\n-     *           footer.\n-     * @throws IllegalArgumentException if the {@code type} is incorrectly\n+     * @param content the Base64-encoded data, excluding the PEM header and\n+     *               footer\n+     * @throws IllegalArgumentException if {@code type} is incorrectly\n@@ -109,1 +105,1 @@\n-     * @throws NullPointerException if {@code type} and\/or {@code pem} are\n+     * @throws NullPointerException if {@code type} and\/or {@code content} are\n@@ -112,14 +108,2 @@\n-    public PEMRecord(String type, String pem) {\n-        this(type, pem, null);\n-    }\n-\n-    \/**\n-     * Returns the binary encoding from the Base64 data contained in\n-     * {@code pem}.\n-     *\n-     * @throws IllegalArgumentException if {@code pem} cannot be decoded.\n-     * @return a new array of the binary encoding each time this\n-     * method is called.\n-     *\/\n-    public byte[] getEncoded() {\n-        return Base64.getMimeDecoder().decode(pem);\n+    public PEMRecord(String type, String content) {\n+        this(type, content, null);\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMRecord.java","additions":20,"deletions":36,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-                return Base64.getDecoder().decode(rec.pem());\n+                return Base64.getDecoder().decode(rec.content());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/X509Factory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-        String p = pem.pem().replaceAll(\"(.{64})\", \"$1\\r\\n\");\n+        String p = pem.content().replaceAll(\"(.{64})\", \"$1\\r\\n\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Pem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,2 +110,2 @@\n-            if (rec.pem().lastIndexOf(\"F\") > rec.pem().length() - 5) {\n-                System.err.println(\"received: \" + rec.pem());\n+            if (rec.content().lastIndexOf(\"F\") > rec.content().length() - 5) {\n+                System.err.println(\"received: \" + rec.content());\n@@ -238,1 +238,1 @@\n-            PEMData.checkResults(expected, r.pem());\n+            PEMData.checkResults(expected, r.content());\n@@ -241,1 +241,1 @@\n-            System.err.println(\"received:\\n\" + r.pem());\n+            System.err.println(\"received:\\n\" + r.content());\n","filename":"test\/jdk\/java\/security\/PEM\/PEMDecoderTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}