{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import jdk.internal.constant.PrimitiveClassDescImpl;\n@@ -953,14 +954,7 @@\n-            return switch (desc.descriptorString().charAt(0)) {\n-                case 'J' ->\n-                    pushStack(Type.LONG_TYPE, Type.LONG2_TYPE);\n-                case 'D' ->\n-                    pushStack(Type.DOUBLE_TYPE, Type.DOUBLE2_TYPE);\n-                case 'I', 'Z', 'B', 'C', 'S' ->\n-                    pushStack(Type.INTEGER_TYPE);\n-                case 'F' ->\n-                    pushStack(Type.FLOAT_TYPE);\n-                case 'V' ->\n-                    this;\n-                default ->\n-                    pushStack(Type.referenceType(desc));\n-            };\n+            if (desc == CD_long)   return pushStack(Type.LONG_TYPE, Type.LONG2_TYPE);\n+            if (desc == CD_double) return pushStack(Type.DOUBLE_TYPE, Type.DOUBLE2_TYPE);\n+            return desc == CD_void ? this\n+                 : pushStack(\n+                         desc instanceof PrimitiveClassDescImpl\n+                                 ? (desc == CD_float ? Type.FLOAT_TYPE : Type.INTEGER_TYPE)\n+                                 : Type.referenceType(desc));\n@@ -970,0 +964,1 @@\n+            int stackSize = this.stackSize;\n@@ -971,1 +966,2 @@\n-            stack[stackSize++] = type;\n+            stack[stackSize] = type;\n+            this.stackSize = stackSize + 1;\n@@ -976,0 +972,1 @@\n+            int stackSize = this.stackSize;\n@@ -977,2 +974,3 @@\n-            stack[stackSize++] = type1;\n-            stack[stackSize++] = type2;\n+            stack[stackSize] = type1;\n+            stack[stackSize + 1] = type2;\n+            this.stackSize = stackSize + 2;\n@@ -1061,6 +1059,8 @@\n-                if (!desc.isPrimitive()) {\n-                    setLocalRawInternal(localsSize++, Type.referenceType(desc));\n-                } else switch (desc.descriptorString().charAt(0)) {\n-                    case 'J' -> {\n-                        setLocalRawInternal(localsSize++, Type.LONG_TYPE);\n-                        setLocalRawInternal(localsSize++, Type.LONG2_TYPE);\n+                assert desc != CD_void;\n+                Type type;\n+                if (desc instanceof PrimitiveClassDescImpl) {\n+                    if (desc == CD_long) {\n+                        setLocalRawInternal(localsSize, Type.LONG_TYPE);\n+                        setLocalRawInternal(localsSize + 1, Type.LONG2_TYPE);\n+                        localsSize += 2;\n+                        continue;\n@@ -1068,3 +1068,5 @@\n-                    case 'D' -> {\n-                        setLocalRawInternal(localsSize++, Type.DOUBLE_TYPE);\n-                        setLocalRawInternal(localsSize++, Type.DOUBLE2_TYPE);\n+                    if (desc == CD_double) {\n+                        setLocalRawInternal(localsSize, Type.DOUBLE_TYPE);\n+                        setLocalRawInternal(localsSize + 1, Type.DOUBLE2_TYPE);\n+                        localsSize += 2;\n+                        continue;\n@@ -1072,5 +1074,3 @@\n-                    case 'I', 'Z', 'B', 'C', 'S' ->\n-                        setLocalRawInternal(localsSize++, Type.INTEGER_TYPE);\n-                    case 'F' ->\n-                        setLocalRawInternal(localsSize++, Type.FLOAT_TYPE);\n-                    default -> throw new AssertionError(\"Should not reach here\");\n+                    type = desc == CD_float ? Type.FLOAT_TYPE : Type.INTEGER_TYPE;\n+                } else {\n+                    type = Type.referenceType(desc);\n@@ -1078,0 +1078,1 @@\n+                setLocalRawInternal(localsSize++, type);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":32,"deletions":31,"binary":false,"changes":63,"status":"modified"}]}