{"files":[{"patch":"@@ -2897,1 +2897,1 @@\n-      new_limit_ctrl = dominated_node(new_limit_ctrl, offset_ctrl, limit_ctrl);\n+      Node* next_limit_ctrl = dominated_node(new_limit_ctrl, offset_ctrl, limit_ctrl);\n@@ -2918,1 +2918,1 @@\n-      register_new_node(offset, new_limit_ctrl);\n+      register_new_node(offset, next_limit_ctrl);\n@@ -2921,1 +2921,1 @@\n-      register_new_node(limit, new_limit_ctrl);\n+      register_new_node(limit, next_limit_ctrl);\n@@ -2927,1 +2927,1 @@\n-          add_constraint(stride_con, lscale_con, offset, zero, limit, new_limit_ctrl, &pre_limit, &main_limit);\n+          add_constraint(stride_con, lscale_con, offset, zero, limit, next_limit_ctrl, &pre_limit, &main_limit);\n@@ -2980,1 +2980,1 @@\n-          register_new_node(offset, new_limit_ctrl);\n+          register_new_node(offset, next_limit_ctrl);\n@@ -2982,1 +2982,1 @@\n-          register_new_node(limit, new_limit_ctrl);\n+          register_new_node(limit, next_limit_ctrl);\n@@ -2988,1 +2988,1 @@\n-            register_new_node(limit, new_limit_ctrl);\n+            register_new_node(limit, next_limit_ctrl);\n@@ -2995,1 +2995,1 @@\n-          add_constraint(stride_con, lscale_con, offset, mini, limit, new_limit_ctrl, &pre_limit, &main_limit);\n+          add_constraint(stride_con, lscale_con, offset, mini, limit, next_limit_ctrl, &pre_limit, &main_limit);\n@@ -3004,0 +3004,3 @@\n+      \/\/ Only updated variable tracking control for new nodes if it's indeed a range check that can be eliminated (and\n+      \/\/ limits are updated)\n+      new_limit_ctrl = next_limit_ctrl;\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8341407\n+ * @summary C2: assert(main_limit == cl->limit() || get_ctrl(main_limit) == new_limit_ctrl) failed: wrong control for added limit\n+ *\n+ * @run main\/othervm -XX:CompileCommand=compileonly,TestLimitControlWhenNoRCEliminated::* -Xcomp TestLimitControlWhenNoRCEliminated\n+ *\n+ *\/\n+\n+public class TestLimitControlWhenNoRCEliminated {\n+    static long[] lArr;\n+    static int iFld;\n+\n+    public static void main(String[] strArr) {\n+        try {\n+            test();\n+        } catch (NullPointerException npe) {}\n+    }\n+\n+    static void test() {\n+        int x = iFld;\n+        int i = 1;\n+        do {\n+            lArr[i - 1] = 9;\n+            x += 1;\n+            iFld += x;\n+            if (x != 0) {\n+                A.foo();\n+            }\n+        } while (++i < 23);\n+    }\n+}\n+\n+class A {\n+    static void foo() {\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestLimitControlWhenNoRCEliminated.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}