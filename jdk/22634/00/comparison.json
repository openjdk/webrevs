{"files":[{"patch":"@@ -37,0 +37,2 @@\n+import jdk.internal.classfile.components.ClassPrinter;\n+\n@@ -95,0 +97,8 @@\n+    \/**\n+     * {@return a debug printout of the compound element}\n+     *\/\n+    default String toDebugString() {\n+        StringBuilder text = new StringBuilder();\n+        ClassPrinter.toYaml(this, ClassPrinter.Verbosity.TRACE_ALL, text::append);\n+        return text.toString();\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CompoundElement.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -224,0 +224,4 @@\n+    private interface LabelResolver {\n+        int labelToBci(Label l);\n+    }\n+\n@@ -545,1 +549,1 @@\n-    private static Stream<ConstantDesc> convertVTIs(CodeAttribute lr, List<VerificationTypeInfo> vtis) {\n+    private static Stream<ConstantDesc> convertVTIs(LabelResolver lr, List<VerificationTypeInfo> vtis) {\n@@ -583,1 +587,1 @@\n-            case CodeModel com -> codeToTree((CodeAttribute)com, verbosity);\n+            case CodeModel com -> codeToTree(com, verbosity);\n@@ -679,1 +683,1 @@\n-    private static Node frameToTree(ConstantDesc name, CodeAttribute lr, StackMapFrameInfo f) {\n+    private static Node frameToTree(ConstantDesc name, LabelResolver lr, StackMapFrameInfo f) {\n@@ -708,1 +712,1 @@\n-    private static MapNode codeToTree(CodeAttribute com, Verbosity verbosity) {\n+    private static MapNode codeToTree(CodeModel com, Verbosity verbosity) {\n@@ -711,2 +715,17 @@\n-            codeNode.with(leaf(\"max stack\", com.maxStack()));\n-            codeNode.with(leaf(\"max locals\", com.maxLocals()));\n+            LabelResolver lr;\n+            if (com instanceof CodeAttribute ca) {\n+                codeNode.with(leaf(\"max stack\", ca.maxStack()));\n+                codeNode.with(leaf(\"max locals\", ca.maxLocals()));\n+                lr = ca::labelToBci;\n+            } else {\n+                var bciMap = new HashMap<Label, Integer>();\n+                int bci = 0;\n+                for (var e : com) {\n+                    switch (e) {\n+                        case Label l -> bciMap.put(l, bci);\n+                        case Instruction i -> bci += i.sizeInBytes();\n+                        default -> {}\n+                    }\n+                }\n+                lr = l -> bciMap.getOrDefault(l, -1);\n+            }\n@@ -723,1 +742,1 @@\n-                        stackMap.with(frameToTree(com.labelToBci(smf.target()), com, smf));\n+                        stackMap.with(frameToTree(lr.labelToBci(smf.target()), lr, smf));\n@@ -773,1 +792,1 @@\n-                        rvtaa.annotations().forEach(a -> forEachOffset(a, com, (off, an) ->\n+                        rvtaa.annotations().forEach(a -> forEachOffset(a, lr, (off, an) ->\n@@ -776,1 +795,1 @@\n-                        ritaa.annotations().forEach(a -> forEachOffset(a, com, (off, an) ->\n+                        ritaa.annotations().forEach(a -> forEachOffset(a, lr, (off, an) ->\n@@ -784,1 +803,1 @@\n-                    list(\"locals\", \"item\", convertVTIs(com, StackMapDecoder.initFrameLocals(com.parent().get()))),\n+                    list(\"locals\", \"item\", convertVTIs(lr, StackMapDecoder.initFrameLocals(com.parent().get()))),\n@@ -788,3 +807,3 @@\n-                    com.labelToBci(exc.tryStart()),\n-                    com.labelToBci(exc.tryEnd()),\n-                    com.labelToBci(exc.handler()),\n+                    lr.labelToBci(exc.tryStart()),\n+                    lr.labelToBci(exc.tryEnd()),\n+                    lr.labelToBci(exc.handler()),\n@@ -878,1 +897,1 @@\n-                                \"target\", com.labelToBci(br.target())));\n+                                \"target\", lr.labelToBci(br.target())));\n@@ -881,2 +900,2 @@\n-                                        .map(com::labelToBci), si.cases().stream()\n-                                                .map(sc -> com.labelToBci(sc.target())))));\n+                                        .map(lr::labelToBci), si.cases().stream()\n+                                                .map(sc -> lr.labelToBci(sc.target())))));\n@@ -885,2 +904,2 @@\n-                                        .map(com::labelToBci), si.cases().stream()\n-                                                .map(sc -> com.labelToBci(sc.target())))));\n+                                        .map(lr::labelToBci), si.cases().stream()\n+                                                .map(sc -> lr.labelToBci(sc.target())))));\n@@ -888,1 +907,1 @@\n-                                \"target\", com.labelToBci(jsr.target())));\n+                                \"target\", lr.labelToBci(jsr.target())));\n@@ -1085,1 +1104,1 @@\n-    private static void forEachOffset(TypeAnnotation ta, CodeAttribute lr, BiConsumer<Integer, TypeAnnotation> consumer) {\n+    private static void forEachOffset(TypeAnnotation ta, LabelResolver lr, BiConsumer<Integer, TypeAnnotation> consumer) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":39,"deletions":20,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8335927\n+ * @bug 8335927 8345773\n@@ -125,2 +125,1 @@\n-        var out = new StringBuilder();\n-        ClassPrinter.toYaml(getClassModel(), ClassPrinter.Verbosity.TRACE_ALL, out::append);\n+        var out = getClassModel().toDebugString();\n@@ -907,1 +906,1 @@\n-    private static void assertOut(StringBuilder out, String expected) {\n+    private static void assertOut(CharSequence out, String expected) {\n","filename":"test\/jdk\/jdk\/classfile\/ClassPrinterTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}