{"files":[{"patch":"@@ -49,1 +49,1 @@\n-\/\/ NativeFarCall\n+\/\/ RelocCall\n@@ -53,1 +53,1 @@\n-class NativeFarCall: public NativeInstruction {\n+class RelocCall: public NativeInstruction {\n@@ -62,0 +62,1 @@\n+  \/\/ return target address of the reloc call\n@@ -63,0 +64,1 @@\n+  \/\/ return stub address\n@@ -65,1 +67,0 @@\n-  void set_destination(address dest);\n@@ -69,0 +70,1 @@\n+  \/\/ patch stub to target address of the reloc call\n@@ -70,0 +72,1 @@\n+  \/\/ patch reloc call to stub address\n@@ -73,1 +76,2 @@\n-  address stub_address();\n+  \/\/ return stub address, without checking stub address in locs\n+  address reloc_destination_without_check();\n@@ -75,0 +79,1 @@\n+  \/\/ set target address at stub\n@@ -76,0 +81,1 @@\n+  \/\/ return target address at stub\n@@ -79,1 +85,1 @@\n-  static NativeFarCall* at(address addr);\n+  static RelocCall* at(address addr);\n@@ -84,1 +90,1 @@\n-address NativeFarCall::destination() const {\n+address RelocCall::destination() const {\n@@ -86,1 +92,1 @@\n-  assert(NativeFarCall::is_at(addr), \"unexpected code at call site\");\n+  assert(RelocCall::is_at(addr), \"unexpected code at call site\");\n@@ -99,1 +105,1 @@\n-address NativeFarCall::reloc_destination() {\n+address RelocCall::reloc_destination() {\n@@ -101,1 +107,1 @@\n-  assert(NativeFarCall::is_at(call_addr), \"unexpected code at call site\");\n+  assert(RelocCall::is_at(call_addr), \"unexpected code at call site\");\n@@ -118,8 +124,2 @@\n-void NativeFarCall::set_destination(address dest) {\n-  address addr = instruction_address();\n-  assert(NativeFarCall::is_at(addr), \"unexpected code at call site\");\n-  Unimplemented();\n-}\n-\n-void NativeFarCall::verify() {\n-  assert(NativeFarCall::is_at(instruction_address()), \"unexpected code at call site\");\n+void RelocCall::verify() {\n+  assert(RelocCall::is_at(instruction_address()), \"unexpected code at call site\");\n@@ -128,3 +128,3 @@\n-void NativeFarCall::print() {\n-  assert(NativeFarCall::is_at(instruction_address()), \"unexpected code at call site\");\n-  tty->print_cr(PTR_FORMAT \": auipc,ld,jalr x1, offset\/reg, \", p2i(addr_at(0)));\n+void RelocCall::print() {\n+  assert(RelocCall::is_at(instruction_address()), \"unexpected code at call site\");\n+  tty->print_cr(PTR_FORMAT \": auipc,ld,jalr x1, offset\/reg, \", p2i(instruction_address()));\n@@ -133,2 +133,2 @@\n-bool NativeFarCall::set_destination_mt_safe(address dest) {\n-  assert(NativeFarCall::is_at(addr_at(0)), \"unexpected code at call site\");\n+bool RelocCall::set_destination_mt_safe(address dest) {\n+  assert(RelocCall::is_at(instruction_address()), \"unexpected code at call site\");\n@@ -136,1 +136,1 @@\n-         CompiledICLocker::is_safe(addr_at(0)),\n+         CompiledICLocker::is_safe(instruction_address()),\n@@ -139,1 +139,1 @@\n-  address stub_addr = stub_address();\n+  address stub_addr = reloc_destination_without_check();\n@@ -148,3 +148,3 @@\n-bool NativeFarCall::reloc_set_destination(address dest) {\n-  address call_addr = addr_at(0);\n-  assert(NativeFarCall::is_at(call_addr), \"unexpected code at call site\");\n+bool RelocCall::reloc_set_destination(address dest) {\n+  address call_addr = instruction_address();\n+  assert(RelocCall::is_at(call_addr), \"unexpected code at call site\");\n@@ -166,1 +166,1 @@\n-void NativeFarCall::set_stub_address_destination_at(address dest, address value) {\n+void RelocCall::set_stub_address_destination_at(address dest, address value) {\n@@ -174,1 +174,1 @@\n-address NativeFarCall::stub_address_destination_at(address src) {\n+address RelocCall::stub_address_destination_at(address src) {\n@@ -180,2 +180,2 @@\n-address NativeFarCall::stub_address() {\n-  address call_addr = addr_at(0);\n+address RelocCall::reloc_destination_without_check() {\n+  address call_addr = instruction_address();\n@@ -186,1 +186,1 @@\n-  address dest = MacroAssembler::pd_call_destination(call_addr);\n+  address dest = MacroAssembler::target_addr_for_insn(call_addr);\n@@ -191,1 +191,1 @@\n-NativeFarCall* NativeFarCall::at(address addr) {\n+RelocCall* RelocCall::at(address addr) {\n@@ -193,2 +193,2 @@\n-  assert(NativeFarCall::is_at(addr), \"unexpected code at call site: %p\", addr);\n-  NativeFarCall* call = (NativeFarCall*)(addr);\n+  assert(RelocCall::is_at(addr), \"unexpected code at call site: %p\", addr);\n+  RelocCall* call = (RelocCall*)(addr);\n@@ -198,1 +198,1 @@\n-bool NativeFarCall::is_at(address addr) {\n+bool RelocCall::is_at(address addr) {\n@@ -214,2 +214,2 @@\n-bool NativeFarCall::is_call_before(address return_address) {\n-  return NativeFarCall::is_at(return_address - return_address_offset);\n+bool RelocCall::is_call_before(address return_address) {\n+  return RelocCall::is_at(return_address - return_address_offset);\n@@ -222,1 +222,1 @@\n-  return NativeFarCall::at(addr_at(0))->instruction_address();\n+  return RelocCall::at(addr_at(0))->instruction_address();\n@@ -226,1 +226,1 @@\n-  return NativeFarCall::at(addr_at(0))->next_instruction_address();\n+  return RelocCall::at(addr_at(0))->next_instruction_address();\n@@ -230,1 +230,1 @@\n-  return NativeFarCall::at(addr_at(0))->return_address();\n+  return RelocCall::at(addr_at(0))->return_address();\n@@ -234,1 +234,1 @@\n-  return NativeFarCall::at(addr_at(0))->destination();\n+  return RelocCall::at(addr_at(0))->destination();\n@@ -238,1 +238,1 @@\n-  return NativeFarCall::at(addr_at(0))->reloc_destination();\n+  return RelocCall::at(addr_at(0))->reloc_destination();\n@@ -242,1 +242,1 @@\n-  NativeFarCall::at(addr_at(0))->set_destination(dest);\n+  Unimplemented();\n@@ -246,1 +246,1 @@\n-  NativeFarCall::at(addr_at(0))->verify();;\n+  RelocCall::at(addr_at(0))->verify();;\n@@ -250,1 +250,1 @@\n-  NativeFarCall::at(addr_at(0))->print();;\n+  RelocCall::at(addr_at(0))->print();;\n@@ -254,1 +254,1 @@\n-  return NativeFarCall::at(addr_at(0))->set_destination_mt_safe(dest);\n+  return RelocCall::at(addr_at(0))->set_destination_mt_safe(dest);\n@@ -258,1 +258,1 @@\n-  return NativeFarCall::at(addr_at(0))->reloc_set_destination(dest);\n+  return RelocCall::at(addr_at(0))->reloc_set_destination(dest);\n@@ -262,1 +262,1 @@\n-  return NativeFarCall::is_at(addr);\n+  return RelocCall::is_at(addr);\n@@ -266,1 +266,1 @@\n-  return NativeFarCall::is_call_before(return_address);\n+  return RelocCall::is_call_before(return_address);\n@@ -279,1 +279,1 @@\n-  call = (NativeCall*)(return_address - NativeFarCall::return_address_offset);\n+  call = (NativeCall*)(return_address - RelocCall::return_address_offset);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":51,"deletions":51,"binary":false,"changes":102,"status":"modified"}]}