{"files":[{"patch":"@@ -49,1 +49,1 @@\n-\/\/ RelocCall\n+\/\/ NativeCall\n@@ -52,39 +52,1 @@\n-\n-class RelocCall: public NativeInstruction {\n- public:\n-  enum RISCV_specific_constants {\n-    return_address_offset       =    3 * NativeInstruction::instruction_size, \/\/ auipc + ld + jalr\n-  };\n-\n-  address instruction_address() const       { return addr_at(0); }\n-  address next_instruction_address() const  { return addr_at(return_address_offset); }\n-  address return_address() const            { return addr_at(return_address_offset); }\n-  \/\/ return target address of the reloc call\n-  address destination() const;\n-  \/\/ return stub address\n-  address reloc_destination();\n-\n-  void verify();\n-  void print();\n-\n-  \/\/ patch stub to target address of the reloc call\n-  bool set_destination_mt_safe(address dest);\n-  \/\/ patch reloc call to stub address\n-  bool reloc_set_destination(address dest);\n-\n- private:\n-  \/\/ return stub address, without checking stub address in locs\n-  address reloc_destination_without_check();\n-\n-  \/\/ set target address at stub\n-  static void set_stub_address_destination_at(address dest, address value);\n-  \/\/ return target address at stub\n-  static address stub_address_destination_at(address src);\n- public:\n-\n-  static RelocCall* at(address addr);\n-  static bool is_at(address addr);\n-  static bool is_call_before(address return_address);\n-};\n-\n-address RelocCall::destination() const {\n+address NativeCall::destination() const {\n@@ -92,1 +54,1 @@\n-  assert(RelocCall::is_at(addr), \"unexpected code at call site\");\n+  assert(NativeCall::is_at(addr), \"unexpected code at call site\");\n@@ -105,1 +67,1 @@\n-address RelocCall::reloc_destination() {\n+address NativeCall::reloc_destination() {\n@@ -107,1 +69,1 @@\n-  assert(RelocCall::is_at(call_addr), \"unexpected code at call site\");\n+  assert(NativeCall::is_at(call_addr), \"unexpected code at call site\");\n@@ -124,2 +86,2 @@\n-void RelocCall::verify() {\n-  assert(RelocCall::is_at(instruction_address()), \"unexpected code at call site\");\n+void NativeCall::verify() {\n+  assert(NativeCall::is_at(instruction_address()), \"unexpected code at call site\");\n@@ -128,2 +90,2 @@\n-void RelocCall::print() {\n-  assert(RelocCall::is_at(instruction_address()), \"unexpected code at call site\");\n+void NativeCall::print() {\n+  assert(NativeCall::is_at(instruction_address()), \"unexpected code at call site\");\n@@ -133,2 +95,2 @@\n-bool RelocCall::set_destination_mt_safe(address dest) {\n-  assert(RelocCall::is_at(instruction_address()), \"unexpected code at call site\");\n+bool NativeCall::set_destination_mt_safe(address dest) {\n+  assert(NativeCall::is_at(instruction_address()), \"unexpected code at call site\");\n@@ -139,1 +101,1 @@\n-  address stub_addr = reloc_destination_without_check();\n+  address stub_addr = stub_address();\n@@ -148,1 +110,1 @@\n-bool RelocCall::reloc_set_destination(address dest) {\n+bool NativeCall::reloc_set_destination(address dest) {\n@@ -150,1 +112,1 @@\n-  assert(RelocCall::is_at(call_addr), \"unexpected code at call site\");\n+  assert(NativeCall::is_at(call_addr), \"unexpected code at call site\");\n@@ -166,1 +128,1 @@\n-void RelocCall::set_stub_address_destination_at(address dest, address value) {\n+void NativeCall::set_stub_address_destination_at(address dest, address value) {\n@@ -174,1 +136,1 @@\n-address RelocCall::stub_address_destination_at(address src) {\n+address NativeCall::stub_address_destination_at(address src) {\n@@ -180,1 +142,1 @@\n-address RelocCall::reloc_destination_without_check() {\n+address NativeCall::stub_address() {\n@@ -191,8 +153,1 @@\n-RelocCall* RelocCall::at(address addr) {\n-  assert_cond(addr != nullptr);\n-  assert(RelocCall::is_at(addr), \"unexpected code at call site: %p\", addr);\n-  RelocCall* call = (RelocCall*)(addr);\n-  return call;\n-}\n-\n-bool RelocCall::is_at(address addr) {\n+bool NativeCall::is_at(address addr) {\n@@ -214,51 +169,0 @@\n-bool RelocCall::is_call_before(address return_address) {\n-  return RelocCall::is_at(return_address - return_address_offset);\n-}\n-\n-\/\/-----------------------------------------------------------------------------\n-\/\/ NativeCall\n-\n-address NativeCall::instruction_address() const {\n-  return RelocCall::at(addr_at(0))->instruction_address();\n-}\n-\n-address NativeCall::next_instruction_address() const {\n-  return RelocCall::at(addr_at(0))->next_instruction_address();\n-}\n-\n-address NativeCall::return_address() const {\n-  return RelocCall::at(addr_at(0))->return_address();\n-}\n-\n-address NativeCall::destination() const {\n-  return RelocCall::at(addr_at(0))->destination();\n-}\n-\n-address NativeCall::reloc_destination() {\n-  return RelocCall::at(addr_at(0))->reloc_destination();\n-}\n-\n-void NativeCall::set_destination(address dest) {\n-  Unimplemented();\n-}\n-\n-void NativeCall::verify() {\n-  RelocCall::at(addr_at(0))->verify();;\n-}\n-\n-void NativeCall::print() {\n-  RelocCall::at(addr_at(0))->print();;\n-}\n-\n-bool NativeCall::set_destination_mt_safe(address dest) {\n-  return RelocCall::at(addr_at(0))->set_destination_mt_safe(dest);\n-}\n-\n-bool NativeCall::reloc_set_destination(address dest) {\n-  return RelocCall::at(addr_at(0))->reloc_set_destination(dest);\n-}\n-\n-bool NativeCall::is_at(address addr) {\n-  return RelocCall::is_at(addr);\n-}\n-\n@@ -266,1 +170,1 @@\n-  return RelocCall::is_call_before(return_address);\n+  return NativeCall::is_at(return_address - NativeCall::instruction_size);\n@@ -279,1 +183,1 @@\n-  call = (NativeCall*)(return_address - RelocCall::return_address_offset);\n+  call = (NativeCall*)(return_address - NativeCall::instruction_size);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":20,"deletions":116,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+\/\/ On riscv, NativeCall is a reloc call.\n@@ -121,1 +122,1 @@\n-    instruction_size = 3 * Assembler::instruction_size \/\/ auipc + ld + jalr\n+    instruction_size = 3 * NativeInstruction::instruction_size \/\/ auipc + ld + jalr\n@@ -126,1 +127,1 @@\n-    return 3 * NativeInstruction::instruction_size; \/\/ auipc + ld + jalr\n+    return NativeCall::instruction_size; \/\/ auipc + ld + jalr\n@@ -133,3 +134,3 @@\n-  address instruction_address() const;\n-  address next_instruction_address() const;\n-  address return_address() const;\n+  address instruction_address() const      { return addr_at(0); }\n+  address next_instruction_address() const { return addr_at(NativeCall::instruction_size); }\n+  address return_address() const           { return addr_at(NativeCall::instruction_size); }\n@@ -143,1 +144,2 @@\n-  void set_destination(address dest);\n+  void set_destination(address dest) { Unimplemented(); }\n+  \/\/ patch stub to target address of the reloc call\n@@ -145,0 +147,1 @@\n+  \/\/ patch reloc call to stub address\n@@ -149,0 +152,8 @@\n+\n+ private:\n+  \/\/ return stub address, without checking stub address in locs\n+  address stub_address();\n+  \/\/ set target address at stub\n+  static void set_stub_address_destination_at(address dest, address value);\n+  \/\/ return target address at stub\n+  static address stub_address_destination_at(address src);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"}]}