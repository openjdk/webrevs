{"files":[{"patch":"@@ -49,36 +49,3 @@\n-\/\/ NativeFarCall\n-\/\/\n-\/\/ Implements direct far calling loading an address from the stub section version of reloc call.\n-\n-class NativeFarCall: public NativeInstruction {\n- public:\n-  enum RISCV_specific_constants {\n-    return_address_offset       =    3 * NativeInstruction::instruction_size, \/\/ auipc + ld + jalr\n-  };\n-\n-  address instruction_address() const       { return addr_at(0); }\n-  address next_instruction_address() const  { return addr_at(return_address_offset); }\n-  address return_address() const            { return addr_at(return_address_offset); }\n-  address destination() const;\n-  address reloc_destination();\n-\n-  void set_destination(address dest);\n-  void verify();\n-  void print();\n-\n-  bool set_destination_mt_safe(address dest);\n-  bool reloc_set_destination(address dest);\n-\n- private:\n-  address stub_address();\n-\n-  static void set_stub_address_destination_at(address dest, address value);\n-  static address stub_address_destination_at(address src);\n- public:\n-\n-  static NativeFarCall* at(address addr);\n-  static bool is_at(address addr);\n-  static bool is_call_before(address return_address);\n-};\n-\n-address NativeFarCall::destination() const {\n+\/\/ NativeCall\n+\n+address NativeCall::destination() const {\n@@ -86,1 +53,1 @@\n-  assert(NativeFarCall::is_at(addr), \"unexpected code at call site\");\n+  assert(NativeCall::is_at(addr), \"unexpected code at call site\");\n@@ -99,1 +66,1 @@\n-address NativeFarCall::reloc_destination() {\n+address NativeCall::reloc_destination() {\n@@ -101,1 +68,1 @@\n-  assert(NativeFarCall::is_at(call_addr), \"unexpected code at call site\");\n+  assert(NativeCall::is_at(call_addr), \"unexpected code at call site\");\n@@ -118,8 +85,2 @@\n-void NativeFarCall::set_destination(address dest) {\n-  address addr = instruction_address();\n-  assert(NativeFarCall::is_at(addr), \"unexpected code at call site\");\n-  Unimplemented();\n-}\n-\n-void NativeFarCall::verify() {\n-  assert(NativeFarCall::is_at(instruction_address()), \"unexpected code at call site\");\n+void NativeCall::verify() {\n+  assert(NativeCall::is_at(instruction_address()), \"unexpected code at call site\");\n@@ -128,3 +89,3 @@\n-void NativeFarCall::print() {\n-  assert(NativeFarCall::is_at(instruction_address()), \"unexpected code at call site\");\n-  tty->print_cr(PTR_FORMAT \": auipc,ld,jalr x1, offset\/reg, \", p2i(addr_at(0)));\n+void NativeCall::print() {\n+  assert(NativeCall::is_at(instruction_address()), \"unexpected code at call site\");\n+  tty->print_cr(PTR_FORMAT \": auipc,ld,jalr x1, offset\/reg, \", p2i(instruction_address()));\n@@ -133,2 +94,2 @@\n-bool NativeFarCall::set_destination_mt_safe(address dest) {\n-  assert(NativeFarCall::is_at(addr_at(0)), \"unexpected code at call site\");\n+bool NativeCall::set_destination_mt_safe(address dest) {\n+  assert(NativeCall::is_at(instruction_address()), \"unexpected code at call site\");\n@@ -136,1 +97,1 @@\n-         CompiledICLocker::is_safe(addr_at(0)),\n+         CompiledICLocker::is_safe(instruction_address()),\n@@ -148,3 +109,3 @@\n-bool NativeFarCall::reloc_set_destination(address dest) {\n-  address call_addr = addr_at(0);\n-  assert(NativeFarCall::is_at(call_addr), \"unexpected code at call site\");\n+bool NativeCall::reloc_set_destination(address dest) {\n+  address call_addr = instruction_address();\n+  assert(NativeCall::is_at(call_addr), \"unexpected code at call site\");\n@@ -166,1 +127,1 @@\n-void NativeFarCall::set_stub_address_destination_at(address dest, address value) {\n+void NativeCall::set_stub_address_destination_at(address dest, address value) {\n@@ -174,1 +135,1 @@\n-address NativeFarCall::stub_address_destination_at(address src) {\n+address NativeCall::stub_address_destination_at(address src) {\n@@ -180,2 +141,2 @@\n-address NativeFarCall::stub_address() {\n-  address call_addr = addr_at(0);\n+address NativeCall::stub_address() {\n+  address call_addr = instruction_address();\n@@ -186,1 +147,1 @@\n-  address dest = MacroAssembler::pd_call_destination(call_addr);\n+  address dest = MacroAssembler::target_addr_for_insn(call_addr);\n@@ -191,8 +152,1 @@\n-NativeFarCall* NativeFarCall::at(address addr) {\n-  assert_cond(addr != nullptr);\n-  assert(NativeFarCall::is_at(addr), \"unexpected code at call site: %p\", addr);\n-  NativeFarCall* call = (NativeFarCall*)(addr);\n-  return call;\n-}\n-\n-bool NativeFarCall::is_at(address addr) {\n+bool NativeCall::is_at(address addr) {\n@@ -214,51 +168,0 @@\n-bool NativeFarCall::is_call_before(address return_address) {\n-  return NativeFarCall::is_at(return_address - return_address_offset);\n-}\n-\n-\/\/-----------------------------------------------------------------------------\n-\/\/ NativeCall\n-\n-address NativeCall::instruction_address() const {\n-  return NativeFarCall::at(addr_at(0))->instruction_address();\n-}\n-\n-address NativeCall::next_instruction_address() const {\n-  return NativeFarCall::at(addr_at(0))->next_instruction_address();\n-}\n-\n-address NativeCall::return_address() const {\n-  return NativeFarCall::at(addr_at(0))->return_address();\n-}\n-\n-address NativeCall::destination() const {\n-  return NativeFarCall::at(addr_at(0))->destination();\n-}\n-\n-address NativeCall::reloc_destination() {\n-  return NativeFarCall::at(addr_at(0))->reloc_destination();\n-}\n-\n-void NativeCall::set_destination(address dest) {\n-  NativeFarCall::at(addr_at(0))->set_destination(dest);\n-}\n-\n-void NativeCall::verify() {\n-  NativeFarCall::at(addr_at(0))->verify();;\n-}\n-\n-void NativeCall::print() {\n-  NativeFarCall::at(addr_at(0))->print();;\n-}\n-\n-bool NativeCall::set_destination_mt_safe(address dest) {\n-  return NativeFarCall::at(addr_at(0))->set_destination_mt_safe(dest);\n-}\n-\n-bool NativeCall::reloc_set_destination(address dest) {\n-  return NativeFarCall::at(addr_at(0))->reloc_set_destination(dest);\n-}\n-\n-bool NativeCall::is_at(address addr) {\n-  return NativeFarCall::is_at(addr);\n-}\n-\n@@ -266,1 +169,1 @@\n-  return NativeFarCall::is_call_before(return_address);\n+  return NativeCall::is_at(return_address - NativeCall::instruction_size);\n@@ -279,1 +182,1 @@\n-  call = (NativeCall*)(return_address - NativeFarCall::return_address_offset);\n+  call = (NativeCall*)(return_address - NativeCall::instruction_size);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":25,"deletions":122,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+\/\/ NativeCall is reloc call on RISC-V. See MacroAssembler::reloc_call.\n@@ -121,1 +122,1 @@\n-    instruction_size = 3 * Assembler::instruction_size \/\/ auipc + ld + jalr\n+    instruction_size = 3 * NativeInstruction::instruction_size \/\/ auipc + ld + jalr\n@@ -126,1 +127,1 @@\n-    return 3 * NativeInstruction::instruction_size; \/\/ auipc + ld + jalr\n+    return NativeCall::instruction_size; \/\/ auipc + ld + jalr\n@@ -133,3 +134,3 @@\n-  address instruction_address() const;\n-  address next_instruction_address() const;\n-  address return_address() const;\n+  address instruction_address() const      { return addr_at(0); }\n+  address next_instruction_address() const { return addr_at(NativeCall::instruction_size); }\n+  address return_address() const           { return addr_at(NativeCall::instruction_size); }\n@@ -143,1 +144,2 @@\n-  void set_destination(address dest);\n+  void set_destination(address dest) { Unimplemented(); }\n+  \/\/ patch stub to target address of the reloc call\n@@ -145,0 +147,1 @@\n+  \/\/ patch reloc call to stub address\n@@ -149,0 +152,8 @@\n+\n+ private:\n+  \/\/ return stub address, without checking stub address in locs\n+  address stub_address();\n+  \/\/ set target address at stub\n+  static void set_stub_address_destination_at(address dest, address value);\n+  \/\/ return target address at stub\n+  static address stub_address_destination_at(address src);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"}]}