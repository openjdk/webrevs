{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -225,8 +225,0 @@\n-\/\/ 10.9 SDK does not include the NSOperatingSystemVersion struct.\n-\/\/ For now, create our own\n-typedef struct {\n-        NSInteger majorVersion;\n-        NSInteger minorVersion;\n-        NSInteger patchVersion;\n-} OSVerStruct;\n-\n@@ -239,22 +231,8 @@\n-    \/\/ Mac OS 10.9 includes the [NSProcessInfo operatingSystemVersion] function,\n-    \/\/ but it's not in the 10.9 SDK.  So, call it via NSInvocation.\n-    if ([[NSProcessInfo processInfo] respondsToSelector:@selector(operatingSystemVersion)]) {\n-        OSVerStruct osVer;\n-        NSMethodSignature *sig = [[NSProcessInfo processInfo] methodSignatureForSelector:\n-                @selector(operatingSystemVersion)];\n-        NSInvocation *invoke = [NSInvocation invocationWithMethodSignature:sig];\n-        invoke.selector = @selector(operatingSystemVersion);\n-        [invoke invokeWithTarget:[NSProcessInfo processInfo]];\n-        [invoke getReturnValue:&osVer];\n-\n-        \/\/ Copy out the char* if running on version other than 10.16 Mac OS (10.16 == 11.x)\n-        \/\/ or explicitly requesting version compatibility\n-        if (!((long)osVer.majorVersion == 10 && (long)osVer.minorVersion >= 16) ||\n-                (getenv(\"SYSTEM_VERSION_COMPAT\") != NULL)) {\n-            if (osVer.patchVersion == 0) { \/\/ Omit trailing \".0\"\n-                nsVerStr = [NSString stringWithFormat:@\"%ld.%ld\",\n-                        (long)osVer.majorVersion, (long)osVer.minorVersion];\n-            } else {\n-                nsVerStr = [NSString stringWithFormat:@\"%ld.%ld.%ld\",\n-                        (long)osVer.majorVersion, (long)osVer.minorVersion, (long)osVer.patchVersion];\n-            }\n+    NSOperatingSystemVersion osVer = [[NSProcessInfo processInfo] operatingSystemVersion];\n+    \/\/ Copy out the char* if running on version other than 10.16 Mac OS (10.16 == 11.x)\n+    \/\/ or explicitly requesting version compatibility\n+    if (!((long)osVer.majorVersion == 10 && (long)osVer.minorVersion >= 16) ||\n+            (getenv(\"SYSTEM_VERSION_COMPAT\") != NULL)) {\n+        if (osVer.patchVersion == 0) { \/\/ Omit trailing \".0\"\n+            nsVerStr = [NSString stringWithFormat:@\"%ld.%ld\",\n+                    (long)osVer.majorVersion, (long)osVer.minorVersion];\n@@ -262,8 +240,11 @@\n-            \/\/ Version 10.16, without explicit env setting of SYSTEM_VERSION_COMPAT\n-            \/\/ AKA 11+ Read the *real* ProductVersion from the hidden link to avoid SYSTEM_VERSION_COMPAT\n-            \/\/ If not found, fallback below to the SystemVersion.plist\n-            NSDictionary *version = [NSDictionary dictionaryWithContentsOfFile :\n-                             @\"\/System\/Library\/CoreServices\/.SystemVersionPlatform.plist\"];\n-            if (version != NULL) {\n-                nsVerStr = [version objectForKey : @\"ProductVersion\"];\n-            }\n+            nsVerStr = [NSString stringWithFormat:@\"%ld.%ld.%ld\",\n+                    (long)osVer.majorVersion, (long)osVer.minorVersion, (long)osVer.patchVersion];\n+        }\n+    } else {\n+        \/\/ Version 10.16, without explicit env setting of SYSTEM_VERSION_COMPAT\n+        \/\/ AKA 11+ Read the *real* ProductVersion from the hidden link to avoid SYSTEM_VERSION_COMPAT\n+        \/\/ If not found, fallback below to the SystemVersion.plist\n+        NSDictionary *version = [NSDictionary dictionaryWithContentsOfFile :\n+                         @\"\/System\/Library\/CoreServices\/.SystemVersionPlatform.plist\"];\n+        if (version != NULL) {\n+            nsVerStr = [version objectForKey : @\"ProductVersion\"];\n","filename":"src\/java.base\/macosx\/native\/libjava\/java_props_macosx.c","additions":20,"deletions":39,"binary":false,"changes":59,"status":"modified"}]}