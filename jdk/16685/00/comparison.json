{"files":[{"patch":"@@ -1137,0 +1137,3 @@\n+                if (stackSize != target.stackSize) {\n+                    generatorError(\"Stack size mismatch\");\n+                }\n@@ -1138,1 +1141,3 @@\n-                    merge(stack[i], target.stack, i, target);\n+                    if (merge(stack[i], target.stack, i, target) == Type.TOP_TYPE) {\n+                        generatorError(\"Stack content mismatch\");\n+                    }\n@@ -1186,1 +1191,1 @@\n-        private void merge(Type me, Type[] toTypes, int i, Frame target) {\n+        private Type merge(Type me, Type[] toTypes, int i, Frame target) {\n@@ -1193,0 +1198,1 @@\n+            return newTo;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8305990\n+ * @bug 8305990 8320222\n@@ -265,0 +265,40 @@\n+\n+    @Test\n+    void testInvalidStack() throws Exception {\n+        \/\/stack size mismatch\n+        assertThrows(IllegalArgumentException.class, () ->\n+                Classfile.of().build(ClassDesc.of(\"Test\"), clb ->\n+                    clb.withMethodBody(\"test\",\n+                                       MethodTypeDesc.ofDescriptor(\"(Z)V\"),\n+                                       Classfile.ACC_STATIC,\n+                                       cb -> {\n+                                           Label target = cb.newLabel();\n+                                           Label next = cb.newLabel();\n+                                           cb.iload(0);\n+                                           cb.ifeq(next);\n+                                           cb.constantInstruction(0.0d);\n+                                           cb.goto_(target);\n+                                           cb.labelBinding(next);\n+                                           cb.constantInstruction(0);\n+                                           cb.labelBinding(target);\n+                                           cb.pop();\n+                                       })));\n+        \/\/stack content mismatch\n+        assertThrows(IllegalArgumentException.class, () ->\n+                Classfile.of().build(ClassDesc.of(\"Test\"), clb ->\n+                    clb.withMethodBody(\"test\",\n+                                       MethodTypeDesc.ofDescriptor(\"(Z)V\"),\n+                                       Classfile.ACC_STATIC,\n+                                       cb -> {\n+                                           Label target = cb.newLabel();\n+                                           Label next = cb.newLabel();\n+                                           cb.iload(0);\n+                                           cb.ifeq(next);\n+                                           cb.constantInstruction(0.0f);\n+                                           cb.goto_(target);\n+                                           cb.labelBinding(next);\n+                                           cb.constantInstruction(0);\n+                                           cb.labelBinding(target);\n+                                           cb.pop();\n+                                       })));\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"}]}