{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,1 @@\n+import static com.sun.tools.javac.code.TypeTag.VOID;\n@@ -1263,1 +1264,5 @@\n-                        tree.body = make.Block(0, List.of(make.Return(value)));\n+                        if (value.type.hasTag(VOID)) {\n+                            tree.body = make.Block(0, List.of(make.Exec(value)));\n+                        } else {\n+                            tree.body = make.Block(0, List.of(make.Return(value)));\n+                        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8335817\n+ * @summary Verify synthetic catches for deconstruction patterns work properly in expression lambdas\n+ * @compile MatchExceptionLambdaExpression.java\n+ * @run main MatchExceptionLambdaExpression\n+ *\/\n+public class MatchExceptionLambdaExpression {\n+\n+    public static void main(String[] args) {\n+        try {\n+            doRunPrimitiveVoid(new A(\"\", true), o -> checkPrimitiveVoid(o instanceof A(String s, _), true));\n+            throw new AssertionError(\"Didn't gete the expected exception!\");\n+        } catch (MatchException ex) {\n+            if (ex.getCause() instanceof RequestedException) {\n+                \/\/correct\n+            } else {\n+                throw ex;\n+            }\n+        }\n+        try {\n+            doRunPrimitiveVoid(new A(\"\", true), o -> checkVoidBox(o instanceof A(String s, _), true));\n+            throw new AssertionError(\"Didn't gete the expected exception!\");\n+        } catch (MatchException ex) {\n+            if (ex.getCause() instanceof RequestedException) {\n+                \/\/correct\n+            } else {\n+                throw ex;\n+            }\n+        }\n+        try {\n+            doRunPrimitiveVoid(new A(\"\", true), o -> checkNonVoid(o instanceof A(String s, _), true));\n+            throw new AssertionError(\"Didn't gete the expected exception!\");\n+        } catch (MatchException ex) {\n+            if (ex.getCause() instanceof RequestedException) {\n+                \/\/correct\n+            } else {\n+                throw ex;\n+            }\n+        }\n+        try {\n+            doRunVoidBox(new A(\"\", true), o -> checkVoidBox(o instanceof A(String s, _), true));\n+            throw new AssertionError(\"Didn't gete the expected exception!\");\n+        } catch (MatchException ex) {\n+            if (ex.getCause() instanceof RequestedException) {\n+                \/\/correct\n+            } else {\n+                throw ex;\n+            }\n+        }\n+        try {\n+            doRunNonVoid(new A(\"\", true), o -> checkVoidBox(o instanceof A(String s, _), true));\n+            throw new AssertionError(\"Didn't gete the expected exception!\");\n+        } catch (MatchException ex) {\n+            if (ex.getCause() instanceof RequestedException) {\n+                \/\/correct\n+            } else {\n+                throw ex;\n+            }\n+        }\n+        try {\n+            doRunNonVoid(new A(\"\", true), o -> checkNonVoid(o instanceof A(String s, _), true));\n+            throw new AssertionError(\"Didn't gete the expected exception!\");\n+        } catch (MatchException ex) {\n+            if (ex.getCause() instanceof RequestedException) {\n+                \/\/correct\n+            } else {\n+                throw ex;\n+            }\n+        }\n+    }\n+\n+    static void doRunPrimitiveVoid(Object inp, PrimitiveVoidFI toRun) {\n+       toRun.run(inp);\n+    }\n+\n+    static void doRunVoidBox(Object inp, VoidBoxFI toRun) {\n+       toRun.run(inp);\n+    }\n+\n+    static void doRunNonVoid(Object inp, NonVoidFI toRun) {\n+       toRun.run(inp);\n+    }\n+\n+    static void checkPrimitiveVoid(boolean a, boolean shouldNotBeCalled) {\n+        if (shouldNotBeCalled) {\n+            throw new AssertionError(\"Should not be called.\");\n+        }\n+    }\n+\n+    static Void checkVoidBox(boolean a, boolean shouldNotBeCalled) {\n+        if (shouldNotBeCalled) {\n+            throw new AssertionError(\"Should not be called.\");\n+        }\n+        return null;\n+    }\n+\n+    static Object checkNonVoid(boolean a, boolean shouldNotBeCalled) {\n+        if (shouldNotBeCalled) {\n+            throw new AssertionError(\"Should not be called.\");\n+        }\n+        return null;\n+    }\n+\n+    interface PrimitiveVoidFI {\n+        public void run(Object o);\n+    }\n+\n+    interface VoidBoxFI {\n+        public Void run(Object o);\n+    }\n+\n+    interface NonVoidFI {\n+        public Object run(Object o);\n+    }\n+\n+    record A(String s, boolean fail) {\n+        public String s() {\n+            if (fail) {\n+                throw new RequestedException();\n+            }\n+            return s;\n+        }\n+    }\n+\n+    static class RequestedException extends RuntimeException {}\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/MatchExceptionLambdaExpression.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"}]}