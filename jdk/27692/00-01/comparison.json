{"files":[{"patch":"@@ -1186,1 +1186,1 @@\n-                    log.error(tree.pos(), Errors.MissingMethBodyOrDeclAbstract);\n+                    log.error(tree.pos(), Errors.MissingMethBodyOrDeclAbstract(tree.sym, owner));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2083,1 +2083,1 @@\n-                      explicitOverride ? (m.isStatic() ? Errors.StaticMethodsCannotBeAnnotatedWithOverride : Errors.MethodDoesNotOverrideSuperclass(m)) :\n+                      explicitOverride ? (m.isStatic() ? Errors.StaticMethodsCannotBeAnnotatedWithOverride(m, m.enclClass()) : Errors.MethodDoesNotOverrideSuperclass(m, m.enclClass())) :\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -908,1 +908,1 @@\n-# 0: symbol\n+# 0: symbol, 1: symbol\n@@ -910,1 +910,1 @@\n-    {0} does not override or implement a method from a supertype\n+    {0} in {1} does not override or implement a method from a supertype\n@@ -912,0 +912,1 @@\n+# 0: symbol, 1: symbol\n@@ -913,1 +914,1 @@\n-    static methods cannot be annotated with @Override\n+    static method {0} in {1} cannot be annotated with @Override\n@@ -915,0 +916,1 @@\n+# 0: symbol, 1: symbol\n@@ -916,1 +918,1 @@\n-    missing method body, or declare abstract\n+    method {0} in {1} is missing a method body, or should be declared abstract\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-Private.java:14:5: compiler.err.method.does.not.override.superclass: m()\n+Private.java:14:5: compiler.err.method.does.not.override.superclass: m(), Bar\n","filename":"test\/langtools\/tools\/javac\/OverrideChecks\/Private.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-T6359949a.java:15:5: compiler.err.static.methods.cannot.be.annotated.with.override\n+T6359949a.java:15:5: compiler.err.static.methods.cannot.be.annotated.with.override: example(), Test\n","filename":"test\/langtools\/tools\/javac\/annotations\/6359949\/T6359949a.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-            \"E.java:3: error: missing method body, or declare abstract\",\n+            \"E.java:3: error: method E(String) in E is missing a method body, or should be declared abstract\",\n","filename":"test\/langtools\/tools\/javac\/annotations\/crash_empty_enum_const\/CrashEmptyEnumConstructorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-OverrideNo.java:16:5: compiler.err.method.does.not.override.superclass: f()\n+OverrideNo.java:16:5: compiler.err.method.does.not.override.superclass: f(), overrideNo.B\n","filename":"test\/langtools\/tools\/javac\/annotations\/neg\/OverrideNo.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-Private02.java:12:22: compiler.err.missing.meth.body.or.decl.abstract\n+Private02.java:12:22: compiler.err.missing.meth.body.or.decl.abstract: foo(java.lang.String), Private02.I\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/private\/Private02.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-Private08.java:17:22: compiler.err.missing.meth.body.or.decl.abstract\n+Private08.java:17:22: compiler.err.missing.meth.body.or.decl.abstract: missingBody(), Private08.I\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/private\/Private08.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-BadLocalVarInferenceTest.java:26:13: compiler.err.method.does.not.override.superclass: m(java.lang.String)\n+BadLocalVarInferenceTest.java:26:13: compiler.err.method.does.not.override.superclass: m(java.lang.String), compiler.misc.anonymous.class: BadLocalVarInferenceTest$1\n","filename":"test\/langtools\/tools\/javac\/lvti\/BadLocalVarInferenceTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}