{"files":[{"patch":"@@ -614,5 +614,7 @@\n-  if (in(1)->Opcode() == Op_XorI\n-      && phase->type(in(1)->in(2)) == TypeInt::MINUS_1\n-      && in(2)->Opcode() == Op_XorI\n-      && in(1)->in(2) == in(2)->in(2)) {\n-    return new XorINode(phase->transform(new OrINode(in(1)->in(1), in(2)->in(1))), in(1)->in(2));\n+  if (in(1)->Opcode() == Op_XorI &&\n+      phase->type(in(1)->in(2)) == TypeInt::MINUS_1 &&\n+      in(2)->Opcode() == Op_XorI &&\n+      phase->type(in(2)->in(2)) == TypeInt::MINUS_1) {\n+    Node *or_a_b = new OrINode(in(1)->in(1), in(2)->in(1));\n+    Node *t = phase->transform(or_a_b);\n+    return new XorINode(t, in(1)->in(2));\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        assertResult(a, a);\n+        assertResult(a, b);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AndINodeIdealizationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        assertResult(a, a);\n+        assertResult(a, b);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AndLNodeIdealizationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}