{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -613,0 +613,10 @@\n+  \/\/ Convert \"(~a) & (~b)\" into \"~(a | b)\"\n+  if (in(1)->Opcode() == Op_XorI &&\n+      phase->type(in(1)->in(2)) == TypeInt::MINUS_1 &&\n+      in(2)->Opcode() == Op_XorI &&\n+      phase->type(in(2)->in(2)) == TypeInt::MINUS_1) {\n+    Node *or_a_b = new OrINode(in(1)->in(1), in(2)->in(1));\n+    Node *t = phase->transform(or_a_b);\n+    return new XorINode(t, in(1)->in(2));\n+  }\n+\n@@ -753,0 +763,8 @@\n+  \/\/ Convert \"(~a) & (~b)\" into \"~(a | b)\"\n+  if (in(1)->Opcode() == Op_XorL\n+      && phase->type(in(1)->in(2)) == TypeLong::MINUS_1\n+      && in(2)->Opcode() == Op_XorL\n+      && in(1)->in(2) == in(2)->in(2)) {\n+    return new XorLNode(phase->transform(new OrLNode(in(1)->in(1), in(2)->in(1))), in(1)->in(2));\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    @Run(test = { \"test1\" })\n+    @Run(test = { \"test1\", \"test2\" })\n@@ -44,0 +44,1 @@\n+        int b = RunInfo.getRandom().nextInt();\n@@ -48,4 +49,4 @@\n-        assertResult(0);\n-        assertResult(a);\n-        assertResult(min);\n-        assertResult(max);\n+        assertResult(0, 0);\n+        assertResult(a, b);\n+        assertResult(min, min);\n+        assertResult(max, max);\n@@ -55,1 +56,1 @@\n-    public void assertResult(int a) {\n+    public void assertResult(int a, int b) {\n@@ -57,0 +58,1 @@\n+        Asserts.assertEQ((~a) & (~b), test2(a, b));\n@@ -66,0 +68,9 @@\n+\n+    @Test\n+    @IR(failOn = { IRNode.AND })\n+    @IR(counts = { IRNode.OR, \"1\",\n+                   IRNode.XOR, \"1\" })\n+    \/\/ Checks (~a) & (~b) => ~(a | b)\n+    public int test2(int a, int b) {\n+        return (~a) & (~b);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AndINodeIdealizationTests.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8322589\n+ * @summary Test that Ideal transformations of AndLNode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.AndLNodeIdealizationTests\n+ *\/\n+public class AndLNodeIdealizationTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\" })\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextLong();\n+        long b = RunInfo.getRandom().nextLong();\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(0, 0);\n+        assertResult(a, b);\n+        assertResult(min, min);\n+        assertResult(max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long a, long b) {\n+        Asserts.assertEQ((~a) & (~b), test1(a, b));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.AND })\n+    @IR(counts = { IRNode.OR, \"1\",\n+                   IRNode.XOR, \"1\" })\n+    \/\/ Checks (~a) & (~b) => ~(a | b)\n+    public long test1(long a, long b) {\n+        return (~a) & (~b);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AndLNodeIdealizationTests.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -301,0 +301,5 @@\n+    public static final String OR = PREFIX + \"OR\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(OR, \"Or(I|L)\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}