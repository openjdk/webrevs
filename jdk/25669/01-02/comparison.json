{"files":[{"patch":"@@ -2389,1 +2389,1 @@\n-  \/\/ Attempt to eliminate allocations and locks\n+  \/\/ First, attempt to eliminate locks\n@@ -2391,0 +2391,20 @@\n+  while (progress) {\n+    progress = false;\n+    for (int i = C->macro_count(); i > 0; i = MIN2(i - 1, C->macro_count())) { \/\/ more than 1 element can be eliminated at once\n+      Node* n = C->macro_node(i - 1);\n+      bool success = false;\n+      DEBUG_ONLY(int old_macro_count = C->macro_count();)\n+      if (n->is_AbstractLock()) {\n+        success = eliminate_locking_node(n->as_AbstractLock());\n+#ifndef PRODUCT\n+        if (success && PrintOptoStatistics) {\n+          Atomic::inc(&PhaseMacroExpand::_monitor_objects_removed_counter);\n+        }\n+#endif\n+      }\n+      assert(success == (C->macro_count() < old_macro_count), \"elimination reduces macro count\");\n+      progress = progress || success;\n+    }\n+  }\n+  \/\/ Next, attempt to eliminate allocations\n+  progress = true;\n@@ -2412,6 +2432,1 @@\n-          success = eliminate_locking_node(n->as_AbstractLock());\n-#ifndef PRODUCT\n-          if (success && PrintOptoStatistics) {\n-            Atomic::inc(&PhaseMacroExpand::_monitor_objects_removed_counter);\n-          }\n-#endif\n+        assert(!n->as_AbstractLock()->is_eliminated(), \"sanity\");\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"}]}