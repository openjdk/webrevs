{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,2 +105,10 @@\n-        if (defaultOnly && returnValue != null) {\n-            Log.info(I18N.getString(\"message.install-dir-ignored\"));\n+\n+        final String defaultInstallDir;\n+        if (StandardBundlerParam.isRuntimeInstaller(params)) {\n+            defaultInstallDir = \"\/Library\/Java\/JavaVirtualMachines\";\n+        } else {\n+            defaultInstallDir = \"\/Applications\";\n+        }\n+\n+        if (defaultOnly && returnValue != null && !Path.of(returnValue).equals(Path.of(defaultInstallDir))) {\n+            Log.info(MessageFormat.format(I18N.getString(\"message.install-dir-ignored\"), defaultInstallDir));\n@@ -110,5 +118,1 @@\n-            if (StandardBundlerParam.isRuntimeInstaller(params)) {\n-                returnValue = \"\/Library\/Java\/JavaVirtualMachines\";\n-            } else {\n-               returnValue = \"\/Applications\";\n-            }\n+            returnValue = defaultInstallDir;\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-message.install-dir-ignored=Warning: \"--install-dir\" is not supported by DMG and will be default to \/Applications.\n+message.install-dir-ignored=Warning: \"--install-dir\" is not supported by DMG and will be default to {0}.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+        dmgInstallDir = cmd.dmgInstallDir;\n@@ -504,1 +505,5 @@\n-            return MacHelper.getInstallationDirectory(this);\n+            if (packageType() == PackageType.MAC_DMG && dmgInstallDir != null) {\n+                return dmgInstallDir;\n+            } else {\n+                return MacHelper.getInstallationDirectory(this);\n+            }\n@@ -870,0 +875,1 @@\n+            copy.dmgInstallDir = cmd.appInstallationDirectory();\n@@ -1167,0 +1173,1 @@\n+    private Path dmgInstallDir;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import static java.util.stream.Collectors.toSet;\n+\n@@ -32,1 +34,0 @@\n-import java.util.List;\n@@ -34,0 +35,1 @@\n+import java.util.List;\n@@ -38,1 +40,0 @@\n-import static java.util.stream.Collectors.toSet;\n@@ -46,0 +47,2 @@\n+import jdk.jpackage.internal.RetryExecutor;\n+import jdk.jpackage.internal.util.PathUtils;\n@@ -49,3 +52,0 @@\n-import jdk.jpackage.internal.RetryExecutor;\n-import jdk.jpackage.internal.util.PathUtils;\n-import org.xml.sax.SAXException;\n@@ -53,0 +53,1 @@\n+import org.xml.sax.SAXException;\n@@ -301,3 +302,12 @@\n-        return Path.of(cmd.getArgumentValue(\"--install-dir\",\n-                () -> cmd.isRuntime() ? \"\/Library\/Java\/JavaVirtualMachines\" : \"\/Applications\")).resolve(\n-                        cmd.name() + (cmd.isRuntime() ? \"\" : \".app\"));\n+\n+        final var defaultInstallLocation = Path.of(\n+                cmd.isRuntime() ? \"\/Library\/Java\/JavaVirtualMachines\" : \"\/Applications\");\n+\n+        final Path installLocation;\n+        if (cmd.packageType() == PackageType.MAC_DMG) {\n+            installLocation = defaultInstallLocation;\n+        } else {\n+            installLocation = cmd.getArgumentValue(\"--install-dir\", () -> defaultInstallLocation, Path::of);\n+        }\n+\n+        return installLocation.resolve(cmd.name() + (cmd.isRuntime() ? \"\" : \".app\"));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n@@ -26,3 +29,0 @@\n-import jdk.jpackage.test.TKit;\n-import jdk.jpackage.test.PackageTest;\n-import jdk.jpackage.test.PackageType;\n@@ -30,0 +30,1 @@\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n@@ -31,0 +32,7 @@\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.JPackageStringBundle;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.RunnablePackageTest.Action;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.TKit.TextStreamVerifier;\n@@ -60,0 +68,1 @@\n+ * @requires (jpackage.test.SQETest != null)\n@@ -71,1 +80,0 @@\n- * @requires (os.family == \"linux\")\n@@ -73,2 +81,2 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n- *  --jpt-run=InstallDirTest.testLinuxInvalid\n+ * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=InstallDirTest\n@@ -95,5 +103,0 @@\n-        testLinuxBad(installDir, \"Invalid installation directory\");\n-    }\n-\n-    private static void testLinuxBad(String installDir,\n-            String errorMessageSubstring) {\n@@ -108,2 +111,1 @@\n-            TKit.assertTextStream(errorMessageSubstring).apply(\n-                    result.getOutput().stream());\n+            cmd.validateOutput(JPackageStringBundle.MAIN.cannedFormattedString(\"error.invalid-install-dir\"));\n@@ -113,0 +115,112 @@\n+\n+    record DmgTestSpec(Path installDir, boolean installDirIgnored, boolean runtimeInstaller) {\n+\n+        DmgTestSpec {\n+            Objects.requireNonNull(installDir);\n+        }\n+\n+        static Builder build() {\n+            return new Builder();\n+        }\n+\n+        static final class Builder {\n+\n+            Builder ignoredInstallDir(String v) {\n+                installDir = Path.of(v);\n+                installDirIgnored = true;\n+                return this;\n+            }\n+\n+            Builder acceptedInstallDir(String v) {\n+                installDir = Path.of(v);\n+                installDirIgnored = false;\n+                return this;\n+            }\n+\n+            Builder runtimeInstaller() {\n+                runtimeInstaller = true;\n+                return this;\n+            }\n+\n+            DmgTestSpec create() {\n+                return new DmgTestSpec(installDir, installDirIgnored, runtimeInstaller);\n+            }\n+\n+            private Path installDir;\n+            private boolean installDirIgnored;\n+            private boolean runtimeInstaller;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            final var sb = new StringBuilder();\n+            sb.append(installDir);\n+            if (installDirIgnored) {\n+                sb.append(\", ignore\");\n+            }\n+            if (runtimeInstaller) {\n+                sb.append(\", runtime\");\n+            }\n+            return sb.toString();\n+        }\n+\n+        void run() {\n+            final var test = new PackageTest().forTypes(PackageType.MAC_DMG).ignoreBundleOutputDir();\n+            if (runtimeInstaller) {\n+                test.addInitializer(cmd -> {\n+                    cmd.removeArgumentWithValue(\"--input\");\n+                });\n+            } else {\n+                test.configureHelloApp();\n+            }\n+\n+            test.addInitializer(JPackageCommand::setFakeRuntime).addInitializer(cmd -> {\n+                cmd.addArguments(\"--install-dir\", installDir);\n+                cmd.validateOutput(createInstallDirWarningVerifier());\n+            }).run(Action.CREATE_AND_UNPACK);\n+        }\n+\n+        private TextStreamVerifier createInstallDirWarningVerifier() {\n+            final var verifier = TKit.assertTextStream(\n+                    JPackageStringBundle.MAIN.cannedFormattedString(\"message.install-dir-ignored\", defaultDmgInstallDir()).getValue());\n+            if (installDirIgnored) {\n+                return verifier;\n+            } else {\n+                return verifier.negate();\n+            }\n+        }\n+\n+        private String defaultDmgInstallDir() {\n+            if (runtimeInstaller) {\n+                return \"\/Library\/Java\/JavaVirtualMachines\";\n+            } else {\n+                return \"\/Applications\";\n+            }\n+        }\n+    }\n+\n+    @Test(ifOS = OperatingSystem.MACOS)\n+    @ParameterSupplier\n+    public static void testDmg(DmgTestSpec testSpec) {\n+        testSpec.run();\n+    }\n+\n+    public static List<Object[]> testDmg() {\n+        return Stream.of(\n+                DmgTestSpec.build().ignoredInstallDir(\"\/foo\"),\n+                DmgTestSpec.build().ignoredInstallDir(\"\/foo\/bar\"),\n+                DmgTestSpec.build().ignoredInstallDir(\"\/foo\").runtimeInstaller(),\n+                DmgTestSpec.build().ignoredInstallDir(\"\/foo\/bar\").runtimeInstaller(),\n+\n+                DmgTestSpec.build().ignoredInstallDir(\"\/Library\/Java\/JavaVirtualMachines\"),\n+                DmgTestSpec.build().ignoredInstallDir(\"\/Applications\").runtimeInstaller(),\n+\n+                DmgTestSpec.build().acceptedInstallDir(\"\/Applications\"),\n+                DmgTestSpec.build().ignoredInstallDir(\"\/Applications\/foo\/bar\/buz\"),\n+\n+                DmgTestSpec.build().runtimeInstaller().acceptedInstallDir(\"\/Library\/Java\/JavaVirtualMachines\"),\n+                DmgTestSpec.build().runtimeInstaller().ignoredInstallDir(\"\/Library\/Java\/JavaVirtualMachines\/foo\/bar\/buz\")\n+        ).map(DmgTestSpec.Builder::create).map(testSpec -> {\n+            return new Object[] { testSpec };\n+        }).toList();\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/share\/InstallDirTest.java","additions":127,"deletions":13,"binary":false,"changes":140,"status":"modified"}]}