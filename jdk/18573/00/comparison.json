{"files":[{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary Test locking on shared strings\n- * @requires vm.cds.write.archived.java.heap\n- * @requires vm.gc == null\n- * @library \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/lib\n- * @compile LockStringTest.java LockStringValueTest.java\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run driver LockSharedStrings\n- *\/\n-\n-public class LockSharedStrings {\n-    public static void main(String[] args) throws Exception {\n-        SharedStringsUtils.run(args, LockSharedStrings::test);\n-    }\n-\n-    public static void test(String[] args) throws Exception {\n-        SharedStringsUtils.buildJarAndWhiteBox(\"LockStringTest\", \"LockStringValueTest\");\n-\n-        SharedStringsUtils.dumpWithWhiteBox(\n-            TestCommon.list(\"LockStringTest\", \"LockStringValueTest\"),\n-            \"ExtraSharedInput.txt\", \"-Xlog:cds,cds+hashtables\");\n-\n-        String[] extraMatch = new String[] {\"LockStringTest: PASS\"};\n-        SharedStringsUtils.runWithArchiveAndWhiteBox(extraMatch, \"LockStringTest\");\n-\n-        extraMatch = new String[] {\"LockStringValueTest: PASS\"};\n-        SharedStringsUtils.runWithArchiveAndWhiteBox(extraMatch, \"LockStringValueTest\",\n-            \"--add-opens=java.base\/java.lang=ALL-UNNAMED\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/LockSharedStrings.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-import jdk.test.whitebox.WhiteBox;\n-\n-public class LockStringTest extends Thread {\n-    static String lock;\n-    static boolean done;\n-    static WhiteBox wb = WhiteBox.getWhiteBox();\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        if (!wb.areSharedStringsMapped()) {\n-            System.out.println(\"The shared strings are not mapped\");\n-            System.out.println(\"LockStringTest: PASS\");\n-            return;\n-        }\n-\n-        if (!wb.isSharedClass(LockStringTest.class)) {\n-            throw new RuntimeException(\"Failed: LockStringTest class is not shared.\");\n-        }\n-\n-        \/\/ Note: This class is archived. All string literals (including the ones used in this class)\n-        \/\/ in all archived classes are interned into the CDS shared string table.\n-\n-        doTest(\"StringLock\", false);\n-        doTest(\"\", true);\n-\n-        \/\/ The following string has a 0 hashCode. Calling String.hashCode() could cause\n-        \/\/ the String.hash field to be written into, if so make sure we don't functionally\n-        \/\/ break.\n-        doTest(\"\\u0121\\u0151\\u00a2\\u0001\\u0001\\udbb2\", true);\n-    }\n-\n-    private static void doTest(String s, boolean hasZeroHashCode) throws Exception {\n-        lock = s;\n-        done = false;\n-\n-        if (!wb.isSharedInternedString(lock)) {\n-            throw new RuntimeException(\"Failed: String \\\"\" + lock + \"\\\" is not shared.\");\n-        }\n-\n-        if (hasZeroHashCode && lock.hashCode() != 0) {\n-            throw new RuntimeException(\"Shared string \\\"\" + lock + \"\\\" should have 0 hashCode, but is instead \" + lock.hashCode());\n-        }\n-\n-        String copy = new String(lock);\n-        if (lock.hashCode() != copy.hashCode()) {\n-            throw new RuntimeException(\"Shared string \\\"\" + lock + \"\\\" does not have the same hashCode as its non-shared copy\");\n-        }\n-\n-        new LockStringTest().start();\n-\n-        synchronized(lock) {\n-            while (!done) {\n-                lock.wait();\n-            }\n-        }\n-        System.gc();\n-        System.out.println(\"LockStringTest: PASS\");\n-    }\n-\n-    public void run() {\n-        String shared = \"LiveOak\";\n-        synchronized (lock) {\n-            for (int i = 0; i < 100; i++) {\n-                new String(shared);\n-                System.gc();\n-                try {\n-                    sleep(5);\n-                } catch (InterruptedException e) {}\n-            }\n-            done = true;\n-            lock.notify();\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/LockStringTest.java","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-import java.lang.reflect.*;\n-import jdk.test.whitebox.WhiteBox;\n-\n-\/*\n- * Lock the 'value' field of a known shared string, java.lang.Object\n- *\/\n-public class LockStringValueTest {\n-    public static void main(String args[]) {\n-        String s = \"LiveOak\";\n-        WhiteBox wb = WhiteBox.getWhiteBox();\n-\n-        if (!wb.areSharedStringsMapped()) {\n-            System.out.println(\"The shared strings are not mapped\");\n-            System.out.println(\"LockStringValueTest: PASS\");\n-            return;\n-        }\n-\n-        if (!wb.isSharedInternedString(s)) {\n-            throw new RuntimeException(\"LockStringValueTest Failed: String is not shared.\");\n-        }\n-\n-        Class c = s.getClass();\n-        try {\n-            Field f = c.getDeclaredField(\"value\");\n-            f.setAccessible(true);\n-            Object v = f.get(s);\n-            lock(v);\n-        } catch (NoSuchFieldException nfe) {\n-        } catch (IllegalAccessException iae) {}\n-    }\n-\n-    public static void lock(Object o) {\n-        synchronized (o) {\n-            System.out.println(\"LockStringValueTest: PASS\");\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/LockStringValueTest.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import jdk.test.lib.process.ProcessTools;\n@@ -72,3 +71,8 @@\n-        String test_cases[][] = {\n-            \/\/ default heap size\n-            {},\n+        OutputAnalyzer dumpOutput = TestCommon.dump(appJar, TestCommon.list(\"HelloString\"),\n+            TestCommon.concat(vmOptionsPrefix,\n+                \"-XX:SharedArchiveConfigFile=\" + sharedArchiveConfigFile,\n+                \"-Xlog:gc+region+cds\",\n+                \"-Xlog:gc+region=trace\"));\n+        TestCommon.checkDump(dumpOutput);\n+        dumpOutput.shouldContain(\"string table array (primary)\");\n+        dumpOutput.shouldContain(\"string table array (secondary)\");\n@@ -76,28 +80,3 @@\n-            \/\/ Test for handling of heap fragmentation. With sharedArchiveConfigFile, we will dump about\n-            \/\/ 18MB of shared objects on 64 bit VM (smaller on 32-bit).\n-            \/\/\n-            \/\/ During dump time, an extra copy of these objects are allocated,\n-            \/\/ so we need about 36MB, plus a few MB for other system data. So 64MB total heap\n-            \/\/ should be enough.\n-            \/\/\n-            \/\/ The VM should executed a full GC to maximize contiguous free space and\n-            \/\/ avoid fragmentation.\n-            {\"-Xmx64m\"},\n-        };\n-\n-        for (String[] extra_opts: test_cases) {\n-            vmOptionsPrefix = TestCommon.concat(vmOptionsPrefix, extra_opts);\n-\n-            OutputAnalyzer dumpOutput = TestCommon.dump(appJar, TestCommon.list(\"HelloString\"),\n-                TestCommon.concat(vmOptionsPrefix,\n-                    \"-XX:SharedArchiveConfigFile=\" + sharedArchiveConfigFile,\n-                    \"-Xlog:gc+region+cds\",\n-                    \"-Xlog:gc+region=trace\"));\n-            TestCommon.checkDump(dumpOutput);\n-            dumpOutput.shouldContain(\"string table array (primary)\");\n-            dumpOutput.shouldContain(\"string table array (secondary)\");\n-\n-            OutputAnalyzer execOutput = TestCommon.exec(appJar,\n-                TestCommon.concat(vmOptionsPrefix, \"-Xlog:cds\", \"HelloString\"));\n-            TestCommon.checkExec(execOutput);\n-        }\n+        OutputAnalyzer execOutput = TestCommon.exec(appJar,\n+            TestCommon.concat(vmOptionsPrefix, \"-Xlog:cds\", \"HelloString\"));\n+        TestCommon.checkExec(execOutput);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsStress.java","additions":12,"deletions":33,"binary":false,"changes":45,"status":"modified"}]}