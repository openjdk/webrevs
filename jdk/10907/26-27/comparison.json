{"files":[{"patch":"@@ -6220,1 +6220,1 @@\n-\/\/  - t1, t2, t3: temporary registers, will be destroyed\n+\/\/  - t1, t2: temporary registers, will be destroyed\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  __ subptr(Address(r15_thread, JavaThread::lock_stack_offset_offset()), oopSize);\n+  __ subl(Address(r15_thread, JavaThread::lock_stack_offset_offset()), oopSize);\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -661,1 +661,1 @@\n-  \/\/ Appears unlocked - try to swing _owner from null to curren thread.\n+  \/\/ Appears unlocked - try to swing _owner from null to current thread.\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -617,1 +617,1 @@\n-  __ verified_entry(framesize, C->output()->need_stack_bang(bangsize)?bangsize:0, C->in_24_bit_fp_mode(), C->stub_function() != nullptr);\n+  __ verified_entry(framesize, C->output()->need_stack_bang(bangsize)?bangsize:0, C->in_24_bit_fp_mode(), C->stub_function() != NULL);\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -925,1 +925,1 @@\n-  __ verified_entry(framesize, C->output()->need_stack_bang(bangsize)?bangsize:0, false, C->stub_function() != nullptr);\n+  __ verified_entry(framesize, C->output()->need_stack_bang(bangsize)?bangsize:0, false, C->stub_function() != NULL);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1996,1 +1996,3 @@\n-\n+  if (UseHeavyMonitors) {\n+    FLAG_SET_DEFAULT(UseFastLocking, false);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,4 +33,0 @@\n-int LockStack::end_offset() {\n-  return in_bytes(JavaThread::lock_stack_base_offset()) + CAPACITY * oopSize;\n-}\n-\n@@ -41,0 +37,4 @@\n+int LockStack::end_offset() {\n+  return in_bytes(JavaThread::lock_stack_base_offset()) + CAPACITY * oopSize;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-  static ByteSize offset_offset()    { return byte_offset_of(LockStack, _offset); }\n-  static ByteSize base_offset()    { return byte_offset_of(LockStack, _base); }\n+  static ByteSize offset_offset() { return byte_offset_of(LockStack, _offset); }\n+  static ByteSize base_offset()   { return byte_offset_of(LockStack, _base); }\n","filename":"src\/hotspot\/share\/runtime\/lockStack.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,0 @@\n-      validate(\"post-contains\");\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -514,0 +514,1 @@\n+      \/\/ No room on the lock_stack so fall-through to inflate-enter.\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -704,1 +704,1 @@\n-  nonstatic_field(LockStack,                   _base[0],                                      oop)                                 \\\n+  nonstatic_field(LockStack,                   _base[0],                                      oop)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}