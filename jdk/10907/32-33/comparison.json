{"files":[{"patch":"@@ -322,1 +322,1 @@\n-  LIR_Opr tmp = UseFastLocking ? new_register(T_INT) : LIR_OprFact::illegalOpr;\n+  LIR_Opr tmp = UseFastLocking ? new_register(T_ADDRESS) : LIR_OprFact::illegalOpr;\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -606,2 +606,1 @@\n-      Label slow;\n-      fast_lock_impl(objReg, tmpReg, thread, scrReg, slow);\n+      fast_lock_impl(objReg, tmpReg, thread, scrReg, NO_COUNT);\n@@ -609,3 +608,0 @@\n-      bind(slow);\n-      testptr(objReg, objReg); \/\/ force ZF=0 to indicate failure\n-      jmp(NO_COUNT);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -9680,0 +9680,8 @@\n+\/\/ Implements fast-locking.\n+\/\/ Branches to slow upon failure to lock the object, with ZF cleared.\n+\/\/ Falls through upon success with unspecified ZF.\n+\/\/\n+\/\/ obj: the object to be locked\n+\/\/ hdr: the (pre-loaded) header of the object, must be rax\n+\/\/ thread: the thread which attempts to lock obj\n+\/\/ tmp: a temporary register\n@@ -9685,2 +9693,5 @@\n-  cmpl(Address(thread, JavaThread::lock_stack_offset_offset()), LockStack::end_offset());\n-  jcc(Assembler::greaterEqual, slow);\n+  \/\/ Note: we subtract 1 from the end-offset so that we can do a 'greater' comparison, instead\n+  \/\/ of 'greaterEqual' below, which readily clears the ZF. This makes C2 code a little simpler and\n+  \/\/ avoids one branch.\n+  cmpl(Address(thread, JavaThread::lock_stack_offset_offset()), LockStack::end_offset() - 1);\n+  jcc(Assembler::greater, slow);\n@@ -9700,1 +9711,1 @@\n-  movptr(Address(thread, tmp, Address::times_1), obj);\n+  movptr(Address(thread, tmp), obj);\n@@ -9705,0 +9716,7 @@\n+\/\/ Implements fast-unlocking.\n+\/\/ Branches to slow upon failure, with ZF cleared.\n+\/\/ Falls through upon success, with unspecified ZF.\n+\/\/\n+\/\/ obj: the object to be unlocked\n+\/\/ hdr: the (pre-loaded) header of the object, must be rax\n+\/\/ tmp: a temporary register\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1714,1 +1714,1 @@\n-       __ jcc(Assembler::notEqual, slow_path_lock);\n+        __ jcc(Assembler::notEqual, slow_path_lock);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}