{"files":[{"patch":"@@ -334,7 +334,1 @@\n-    assert(patching_type == NMethodPatchingType::conc_data_patch, \"must be\");\n-    \/\/ Subsequent loads of oops must occur after load of guard value.\n-    \/\/ BarrierSetNMethod::disarm sets guard with release semantics.\n-    __ membar(__ LoadLoad);\n-    Address thread_disarmed_addr(rthread, in_bytes(bs_nm->thread_disarmed_guard_value_offset()));\n-    __ ldrw(rscratch2, thread_disarmed_addr);\n-    __ cmpw(rscratch1, rscratch2);\n+    ShouldNotReachHere();\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,2 +42,1 @@\n-  conc_instruction_and_data_patch,\n-  conc_data_patch\n+  conc_instruction_and_data_patch\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -61,2 +61,0 @@\n-  case NMethodPatchingType::conc_data_patch:\n-    return -4 * (5 + slow_path_size(nm));\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetNMethod_aarch64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  virtual NMethodPatchingType nmethod_patching_type() { return NMethodPatchingType::conc_data_patch; }\n+  virtual NMethodPatchingType nmethod_patching_type() { return NMethodPatchingType::conc_instruction_and_data_patch; }\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n-  conc_instruction_and_data_patch,\n-  conc_data_patch\n+  conc_instruction_and_data_patch\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  virtual NMethodPatchingType nmethod_patching_type() { return NMethodPatchingType::conc_data_patch; }\n+  virtual NMethodPatchingType nmethod_patching_type() { return NMethodPatchingType::conc_instruction_and_data_patch; }\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -244,4 +244,0 @@\n-    case NMethodPatchingType::conc_data_patch:\n-      \/\/ Subsequent loads of oops must occur after load of guard value.\n-      \/\/ BarrierSetNMethod::disarm sets guard with release semantics.\n-      __ membar(MacroAssembler::LoadLoad); \/\/ fall through to stw_instruction_and_data_patch\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n-  conc_instruction_and_data_patch,\n-  conc_data_patch\n+  conc_instruction_and_data_patch\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,2 +53,0 @@\n-    case NMethodPatchingType::conc_data_patch:\n-      return -4 * (5 + slow_path_size(nm));\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetNMethod_riscv.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  virtual NMethodPatchingType nmethod_patching_type() { return NMethodPatchingType::conc_data_patch; }\n+  virtual NMethodPatchingType nmethod_patching_type() { return NMethodPatchingType::conc_instruction_and_data_patch; }\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -836,1 +836,0 @@\n-  AARCH64_ONLY(declare_constant(NMethodPatchingType::conc_data_patch))                 \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -70,2 +70,1 @@\n-                int conc1 = getConstant(\"NMethodPatchingType::conc_data_patch\", Integer.class);\n-                int conc2 = getConstant(\"NMethodPatchingType::conc_instruction_and_data_patch\", Integer.class);\n+                int conc = getConstant(\"NMethodPatchingType::conc_instruction_and_data_patch\", Integer.class);\n@@ -74,1 +73,1 @@\n-                } else if (patchingType == conc1 || patchingType == conc2) {\n+                } else if (patchingType == conc) {\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/TestHotSpotVMConfig.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}