{"files":[{"patch":"@@ -37,0 +37,5 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n@@ -55,4 +60,5 @@\n-            \/\/ `args` and then exit.\n-            for (String arg : args) {\n-                System.out.printf(\"%s=%s%n\", arg, System.getProperty(arg));\n-            }\n+            \/\/ `args[1..]` to the file `args[0]` and then exit.\n+            Files.writeString(Path.of(args[0]),\n+                List.of(args).subList(1, args.length).stream()\n+                      .map(a -> \"%s=%s\".formatted(a, System.getProperty(a)))\n+                      .collect(Collectors.joining(\",\")));\n@@ -83,0 +89,2 @@\n+    static int id;\n+\n@@ -87,0 +95,1 @@\n+            Path propsPath = Path.of(\"props.\" + id++);\n@@ -92,1 +101,1 @@\n-                \"TestEnableJVMCIProduct\", \"jvmci.Compiler\");\n+                \"TestEnableJVMCIProduct\", propsPath.toString(), \"jvmci.Compiler\");\n@@ -106,1 +115,5 @@\n-                output.shouldContain(\"jvmci.Compiler=graal\");\n+                String props = Files.readString(propsPath);\n+                String expect = \"jvmci.Compiler=graal\";\n+                if (!props.contains(expect)) {\n+                    throw new RuntimeException(\"\\\"%s\\\" does not contain \\\"%s\\\"\".formatted(props, expect));\n+                }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestEnableJVMCIProduct.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"}]}