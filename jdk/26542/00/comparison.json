{"files":[{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package java.lang.constant;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-\n-import static java.lang.constant.ConstantDescs.BSM_INVOKE;\n-import static java.lang.constant.ConstantDescs.CD_MethodHandle;\n-import static java.util.Objects.requireNonNull;\n-\n-\/**\n- * A <a href=\"package-summary.html#nominal\">nominal descriptor<\/a> for a\n- * {@link MethodHandle} constant that performs a {@link MethodHandle#asType(MethodType)}\n- * adaptation on another {@link MethodHandle}.\n- *\/\n-final class AsTypeMethodHandleDesc extends DynamicConstantDesc<MethodHandle>\n-        implements MethodHandleDesc {\n-\n-    private final MethodHandleDesc underlying;\n-    private final MethodTypeDesc type;\n-\n-    AsTypeMethodHandleDesc(MethodHandleDesc underlying, MethodTypeDesc type) {\n-        super(BSM_INVOKE, ConstantDescs.DEFAULT_NAME, CD_MethodHandle,\n-              ConstantDescs.MHD_METHODHANDLE_ASTYPE, underlying, type);\n-        this.underlying = requireNonNull(underlying);\n-        this.type = requireNonNull(type);\n-    }\n-\n-    @Override\n-    public MethodTypeDesc invocationType() {\n-        return type;\n-    }\n-\n-    @Override\n-    public MethodHandle resolveConstantDesc(MethodHandles.Lookup lookup)\n-            throws ReflectiveOperationException {\n-        MethodHandle handle = underlying.resolveConstantDesc(lookup);\n-        MethodType methodType = type.resolveConstantDesc(lookup);\n-        return handle.asType(methodType);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return  String.format(\"%s.asType%s\", underlying.toString(), type.displayDescriptor());\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/AsTypeMethodHandleDesc.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import static java.lang.constant.DirectMethodHandleDesc.*;\n@@ -339,3 +338,0 @@\n-    static final DirectMethodHandleDesc MHD_METHODHANDLE_ASTYPE\n-            = MethodHandleDesc.ofMethod(Kind.VIRTUAL, CD_MethodHandle, \"asType\",\n-                                        MethodTypeDesc.of(CD_MethodHandle, CD_MethodType));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDescs.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.internal.constant.AsTypeMethodHandleDesc;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodHandleDesc.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.constant;\n+\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.DynamicConstantDesc;\n+import java.lang.constant.MethodHandleDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+import static java.lang.constant.ConstantDescs.BSM_INVOKE;\n+import static java.lang.constant.ConstantDescs.CD_MethodHandle;\n+import static java.util.Objects.requireNonNull;\n+\n+\/**\n+ * A <a href=\"package-summary.html#nominal\">nominal descriptor<\/a> for a\n+ * {@link MethodHandle} constant that performs a {@link MethodHandle#asType(MethodType)}\n+ * adaptation on another {@link MethodHandle}.\n+ *\/\n+public final class AsTypeMethodHandleDesc extends DynamicConstantDesc<MethodHandle>\n+        implements MethodHandleDesc {\n+\n+    private static final DirectMethodHandleDesc MHD_METHODHANDLE_ASTYPE\n+            = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.VIRTUAL, CD_MethodHandle, \"asType\",\n+                                        MethodTypeDesc.of(CD_MethodHandle, ConstantDescs.CD_MethodType));\n+\n+    private final MethodHandleDesc underlying;\n+    private final MethodTypeDesc type;\n+\n+    public AsTypeMethodHandleDesc(MethodHandleDesc underlying, MethodTypeDesc type) {\n+        super(BSM_INVOKE, ConstantDescs.DEFAULT_NAME, CD_MethodHandle,\n+              MHD_METHODHANDLE_ASTYPE, underlying, type);\n+        this.underlying = requireNonNull(underlying);\n+        this.type = requireNonNull(type);\n+    }\n+\n+    @Override\n+    public MethodTypeDesc invocationType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public MethodHandle resolveConstantDesc(MethodHandles.Lookup lookup)\n+            throws ReflectiveOperationException {\n+        MethodHandle handle = underlying.resolveConstantDesc(lookup);\n+        MethodType methodType = type.resolveConstantDesc(lookup);\n+        return handle.asType(methodType);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return  String.format(\"%s.asType%s\", underlying.toString(), type.displayDescriptor());\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/AsTypeMethodHandleDesc.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}