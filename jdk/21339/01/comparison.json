{"files":[{"patch":"@@ -1014,1 +1014,1 @@\n-            return in.readLine(prompt.replace(\"%\", \"%%\"), mask);\n+            return in.readLine(prompt, mask);\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/ConsoleIOContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+import java.util.function.UnaryOperator;\n@@ -807,1 +808,1 @@\n-     * Add normal prefixing\/postfixing to embedded newlines in a string,\n+     * Add normal prefixing\/postfixing to embedded newlines in a format string,\n@@ -810,2 +811,2 @@\n-     * @param s the string to prefix\n-     * @return the pre\/post-fixed and bracketed string\n+     * @param format the format string to prefix\/postfix\n+     * @return the pre\/post-fixed and bracketed format string\n@@ -813,2 +814,2 @@\n-    String prefix(String s) {\n-         return prefix(s, feedback.getPre(), feedback.getPost());\n+    String prefix(String format) {\n+         return prefix(format, feedback.getPre(), feedback.getPost());\n@@ -818,1 +819,1 @@\n-     * Add error prefixing\/postfixing to embedded newlines in a string,\n+     * Add error prefixing\/postfixing to embedded newlines in a format string,\n@@ -821,2 +822,2 @@\n-     * @param s the string to prefix\n-     * @return the pre\/post-fixed and bracketed string\n+     * @param format the format string to prefix\/postfix\n+     * @return the pre\/post-fixed and bracketed format string\n@@ -824,2 +825,2 @@\n-    String prefixError(String s) {\n-         return prefix(s, feedback.getErrorPre(), feedback.getErrorPost());\n+    String prefixError(String format) {\n+         return prefix(format, feedback.getErrorPre(), feedback.getErrorPost());\n@@ -829,1 +830,1 @@\n-     * Add prefixing\/postfixing to embedded newlines in a string,\n+     * Add prefixing\/postfixing to embedded newlines in a format string,\n@@ -831,1 +832,1 @@\n-     * Result is expected to be the format for a printf.\n+     * Both input and result strings are expected to be the format for a printf.\n@@ -833,4 +834,4 @@\n-     * @param s the string to prefix\n-     * @param pre the string to prepend to each line\n-     * @param post the string to append to each line (replacing newline)\n-     * @return the pre\/post-fixed and bracketed string\n+     * @param s the format string to prefix\n+     * @param pre the string to prepend to each line (printf safe)\n+     * @param post the string to append to each line (replacing newline; printf safe)\n+     * @return the pre\/post-fixed and bracketed format string\n@@ -861,1 +862,1 @@\n-        hard(getResourceString(key));\n+        hard(escape(getResourceString(key)));\n@@ -884,1 +885,1 @@\n-        hard(messageFormat(key, args));\n+        hard(escape(messageFormat(key, args)));\n@@ -914,1 +915,1 @@\n-        Map<String, String> a2b = stream.collect(toMap(a, b,\n+        Map<String, String> a2b = stream.collect(toMap(a, b.andThen(this::escape),\n@@ -923,0 +924,7 @@\n+    \/**\n+     * Escape '%' signs in a plain string to make it a valid format string.\n+     *\/\n+    String escape(Object s) {\n+        return s.toString().replaceAll(\"%\", \"%%\");\n+    }\n+\n@@ -2334,1 +2342,1 @@\n-        hard(sb.toString());\n+        hard(escape(sb));\n@@ -3264,1 +3272,1 @@\n-                hard(sb.toString());\n+                hard(escape(sb));\n@@ -3777,1 +3785,1 @@\n-                error(\"Unexpected status: \" + previousStatus.toString() + \"=>\" + status.toString());\n+                error(\"Unexpected status: %s=>%s\", previousStatus, status);\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellTool.java","additions":30,"deletions":22,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1055,1 +1055,1 @@\n-Both may optionally contain '%%s' which will be substituted with the next snippet ID --\\n\\\n+Both may optionally contain '%s' which will be substituted with the next snippet ID --\\n\\\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/resources\/l10n.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -309,1 +309,1 @@\n-help.set.prompt = Legt die Prompts fest. Es müssen sowohl der normale als auch der Fortsetzungs-Prompt festgelegt werden:\\n\\n\\t\/set prompt <mode> \"<Prompt>\" \"<Fortsetzungs-Prompt>\"\\n\\nZeigt den normalen und den Fortsetzungs-Prompt an:\\n\\n\\t\/set prompt [<Modus>]\\n\\nDabei gilt: <Modus> ist der Name eines zuvor definierten Feedbackmodus.\\n<Prompt> und <Fortsetzungs-Prompt> sind in Anführungszeichen gesetzte Zeichenfolgen, die als Eingabe-Prompts ausgegeben werden.\\nOptional können beide \"%%s\" enthalten. Dies wird durch die nächste Snippet-ID ersetzt.\\nDer Eingabe wird unter Umständen keine ID zugewiesen, wenn es sich z.B. um einen Fehler oder Befehl handelt.\\nDer Fortsetzungs-Prompt wird in einem mehrzeiligen Snippet in der zweiten und allen nachfolgenden Zeilen verwendet.\\n\\nBei fehlender Angabe von <Prompt> werden die aktuell festgelegten Prompts angezeigt.\\nBei Angabe des <Modus> werden nur die Prompts für diesen Modus angezeigt.\\nBeispiel:\\n\\t\/set prompt mymode\\nZeigt die für den Modus \"mymode\" festgelegten Prompts an\\n\n+help.set.prompt = Legt die Prompts fest. Es müssen sowohl der normale als auch der Fortsetzungs-Prompt festgelegt werden:\\n\\n\\t\/set prompt <mode> \"<Prompt>\" \"<Fortsetzungs-Prompt>\"\\n\\nZeigt den normalen und den Fortsetzungs-Prompt an:\\n\\n\\t\/set prompt [<Modus>]\\n\\nDabei gilt: <Modus> ist der Name eines zuvor definierten Feedbackmodus.\\n<Prompt> und <Fortsetzungs-Prompt> sind in Anführungszeichen gesetzte Zeichenfolgen, die als Eingabe-Prompts ausgegeben werden.\\nOptional können beide \"%s\" enthalten. Dies wird durch die nächste Snippet-ID ersetzt.\\nDer Eingabe wird unter Umständen keine ID zugewiesen, wenn es sich z.B. um einen Fehler oder Befehl handelt.\\nDer Fortsetzungs-Prompt wird in einem mehrzeiligen Snippet in der zweiten und allen nachfolgenden Zeilen verwendet.\\n\\nBei fehlender Angabe von <Prompt> werden die aktuell festgelegten Prompts angezeigt.\\nBei Angabe des <Modus> werden nur die Prompts für diesen Modus angezeigt.\\nBeispiel:\\n\\t\/set prompt mymode\\nZeigt die für den Modus \"mymode\" festgelegten Prompts an\\n\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/resources\/l10n_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -316,1 +316,1 @@\n-help.set.prompt = プロンプトを設定します。標準プロンプトと続行プロンプトの両方を設定する必要があります:\\n\\n\\t\/set prompt <mode> \"<prompt>\" \"<continuation-prompt>\"\\n\\n標準プロンプトと続行プロンプトを表示します:\\n\\n\\t\/set prompt [<mode>]\\n\\n<mode>は事前に定義されたフィードバック・モードの名前です。\\n<prompt>および<continuation-prompt>は入力プロンプトとして出力される引用符で囲まれた文字列です。\\nオプションで、両方とも、次のスニペットIDで置き換えられる'%%s'を含むことができます --\\n入力した内容がそのIDに割り当てられない場合があります。たとえば、エラーまたはコマンドである場合などです。\\n続行プロンプトは複数行スニペットの2行目以降で使用されます。\\n\\n<prompt>のない形式は、現在設定されているプロンプトを表示します。\\n<mode>が指定されている場合、そのモードのプロンプトのみが表示されます。\\n例:\\n\\t\/set prompt mymode\\nモードmymodeに設定されているプロンプトを表示します\\n\n+help.set.prompt = プロンプトを設定します。標準プロンプトと続行プロンプトの両方を設定する必要があります:\\n\\n\\t\/set prompt <mode> \"<prompt>\" \"<continuation-prompt>\"\\n\\n標準プロンプトと続行プロンプトを表示します:\\n\\n\\t\/set prompt [<mode>]\\n\\n<mode>は事前に定義されたフィードバック・モードの名前です。\\n<prompt>および<continuation-prompt>は入力プロンプトとして出力される引用符で囲まれた文字列です。\\nオプションで、両方とも、次のスニペットIDで置き換えられる'%s'を含むことができます --\\n入力した内容がそのIDに割り当てられない場合があります。たとえば、エラーまたはコマンドである場合などです。\\n続行プロンプトは複数行スニペットの2行目以降で使用されます。\\n\\n<prompt>のない形式は、現在設定されているプロンプトを表示します。\\n<mode>が指定されている場合、そのモードのプロンプトのみが表示されます。\\n例:\\n\\t\/set prompt mymode\\nモードmymodeに設定されているプロンプトを表示します\\n\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/resources\/l10n_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-help.set.prompt = 设置提示。必须同时设置正常提示和更多提示：\\n\\n\\t\/set prompt <模式> \"<提示>\" \"<更多提示>\"\\n\\n显示正常提示和更多提示：\\n\\n\\t\/set prompt [<模式>]\\n\\n其中 <模式> 是以前定义的反馈模式名称。\\n而 <提示> 和 <更多提示> 是作为输入提示输出的带引号的字符串；\\n它们均可选择性地包含 '%%s'，该变量将被替换为下一个片段 ID --\\n请注意，可能无法向所输入内容分配该 ID，例如这可能是一个错误或命令。\\n更多提示在多行片段的第二行以及后续行上使用。\\n\\n不带 <提示> 的格式显示当前设置的提示。\\n指定 <模式> 时，将仅显示该模式的提示。\\n示例：\\n\\t\/set prompt mymode\\n显示为模式 mymode 设置的提示\\n\n+help.set.prompt = 设置提示。必须同时设置正常提示和更多提示：\\n\\n\\t\/set prompt <模式> \"<提示>\" \"<更多提示>\"\\n\\n显示正常提示和更多提示：\\n\\n\\t\/set prompt [<模式>]\\n\\n其中 <模式> 是以前定义的反馈模式名称。\\n而 <提示> 和 <更多提示> 是作为输入提示输出的带引号的字符串；\\n它们均可选择性地包含 '%s'，该变量将被替换为下一个片段 ID --\\n请注意，可能无法向所输入内容分配该 ID，例如这可能是一个错误或命令。\\n更多提示在多行片段的第二行以及后续行上使用。\\n\\n不带 <提示> 的格式显示当前设置的提示。\\n指定 <模式> 时，将仅显示该模式的提示。\\n示例：\\n\\t\/set prompt mymode\\n显示为模式 mymode 设置的提示\\n\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/resources\/l10n_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341495\n+ * @summary Test for crash caused by format specifier in startup script\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jshell\/jdk.internal.jshell.tool\n+ * @library \/tools\/lib\n+ * @build toolbox.ToolBox\n+ * @build KullaTesting Compiler\n+ * @run testng StartupWithFormatSpecifierTest\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import org.testng.annotations.Test;\n+\n+@Test\n+public class StartupWithFormatSpecifierTest extends ReplToolTesting {\n+\n+    public void testStartupWithFormatSpecifier() {\n+        Compiler compiler = new Compiler();\n+        String startupScript = \"String.format(\\\"This is a %s.\\\", \\\"test\\\");\";\n+        Path startupFile = compiler.getPath(\"StartupFileOption\/startup.txt\");\n+        compiler.writeToFile(startupFile, startupScript);\n+        test(new String[] { \"--startup\", startupFile.toString() },\n+                (a) -> assertCommandOutputContains(a, \"\/set start\", startupScript)\n+        );\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/StartupWithFormatSpecifierTest.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}