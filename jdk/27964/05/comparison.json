{"files":[{"patch":"@@ -5527,0 +5527,3 @@\n+    \/\/ Check for overflow.  cp_size is a u2.\n+    assert(sizeof(cp_size) == sizeof(u2), \"this overflow test depends on this\");\n+    guarantee_property(cp_size > _orig_cp_size, \"Overflow in constant pool size for hidden class %s\", CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+* Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\/\n+\n+\/*\n+ * @test\n+ * @summary Test that parsing a hidden class with max constant pool entries\n+ *          doesn't crash the VM when adding an entry for the hidden class name.\n+ *          Instead throws ClassFormatError.\n+ * @bug 8364360\n+ * @modules java.base\/jdk.internal.access\n+ *          java.base\/jdk.internal.reflect\n+ * @library \/testlibrary\/asm\n+ * @run main HiddenClassesTest\n+ *\/\n+\n+import java.lang.invoke.MethodHandles;\n+\n+import org.objectweb.asm.ClassWriter;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.V17;\n+\n+public class HiddenClassesTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        var cw = new ClassWriter(0);\n+        cw.visit(V17, ACC_PUBLIC, \"Hidden\", null, \"java\/lang\/Object\", null);\n+        \/\/ This magic number causes a constant pool index overflow with this asm generated class.\n+        int i = 0;\n+        while (i < 65535-1) {\n+            i = cw.newUTF8(Integer.toString(i));\n+        }\n+        try {\n+            MethodHandles.lookup().defineHiddenClass(cw.toByteArray(), false);\n+            throw new RuntimeException(\"Test Failed: ClassFormatError expected.\");\n+        } catch (ClassFormatError cfe) {\n+            String message = cfe.getMessage();\n+            if (message == null || !message.contains(\"Overflow in constant pool size for hidden class\")) {\n+                throw new RuntimeException(\"Test Failed: wrong ClassFormatError \" + message);\n+            }\n+            System.out.println(\"ClassFormatError thrown as expected. Message: \" + cfe.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/HiddenClassesTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}