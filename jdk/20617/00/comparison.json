{"files":[{"patch":"@@ -746,0 +746,1 @@\n+jdk\/jfr\/event\/compiler\/TestCodeSweeper.java                     8338127 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Collections;\n@@ -33,2 +32,1 @@\n-import jdk.jfr.Event;\n-import jdk.jfr.consumer.RecordingStream;\n+import jdk.jfr.Recording;\n@@ -44,1 +42,1 @@\n- * Test for events: jdk.CodeCacheFull jdk.CompilationFailure\n+ * Test for events: vm\/code_cache\/full vm\/compiler\/failure\n@@ -63,2 +61,0 @@\n-    static class ProvocationEvent extends Event {\n-    }\n@@ -70,2 +66,2 @@\n-    private static final String EVENT_CODE_CACHE_FULL = EventNames.CodeCacheFull;\n-    private static final String EVENT_COMPILATION_FAILURE = EventNames.CompilationFailure;\n+    private static final String pathFull = EventNames.CodeCacheFull;\n+    private static final String pathFailure = EventNames.CompilationFailure;\n@@ -84,24 +80,7 @@\n-        List<RecordedEvent> events = Collections.synchronizedList(new ArrayList<>());\n-        try (RecordingStream rs = new RecordingStream()) {\n-            rs.setReuse(false);\n-            rs.enable(EVENT_CODE_CACHE_FULL);\n-            rs.enable(EVENT_COMPILATION_FAILURE);\n-            rs.onEvent(EVENT_CODE_CACHE_FULL, events::add);\n-            rs.onEvent(EVENT_COMPILATION_FAILURE, events::add);\n-            rs.onEvent(ProvocationEvent.class.getName(), e -> {\n-                if (!events.isEmpty()) {\n-                    rs.close();\n-                    return;\n-                }\n-                \/\/ Retry if CodeCacheFull or CompilationFailure events weren't provoked\n-                try {\n-                    provokeEvents();\n-                } catch (Exception ex) {\n-                    ex.printStackTrace();\n-                    rs.close();\n-                }\n-            });\n-            rs.startAsync();\n-            provokeEvents();\n-            rs.awaitTermination();\n-        }\n+\n+        Recording r = new Recording();\n+        r.enable(pathFull);\n+        r.enable(pathFailure);\n+        r.start();\n+        provokeEvents();\n+        r.stop();\n@@ -111,0 +90,2 @@\n+\n+        List<RecordedEvent> events = Events.fromRecording(r);\n@@ -112,1 +93,1 @@\n-        for (RecordedEvent event : new ArrayList<>(events)) {\n+        for (RecordedEvent event : events) {\n@@ -114,1 +95,1 @@\n-            case EVENT_CODE_CACHE_FULL:\n+            case pathFull:\n@@ -118,1 +99,1 @@\n-            case EVENT_COMPILATION_FAILURE:\n+            case pathFailure:\n@@ -137,2 +118,0 @@\n-        System.out.println(\"provokeEvents()\");\n-        ProvocationEvent provocationEvent = new ProvocationEvent();\n@@ -183,1 +162,0 @@\n-        provocationEvent.commit();\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCodeSweeper.java","additions":16,"deletions":38,"binary":false,"changes":54,"status":"modified"}]}