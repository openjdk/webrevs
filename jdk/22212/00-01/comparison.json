{"files":[{"patch":"@@ -602,2 +602,1 @@\n-        Objects.requireNonNull(p);\n-        assert nanos >= 0;\n+        assert Thread.holdsLock(p) && nanos >= 0;\n@@ -623,15 +622,12 @@\n-                synchronized (p) {\n-                    \/\/ p.bufLength is the maximum size of the datagram that can be received\n-                    int bufLength = DatagramPackets.getBufLength(p);\n-                    ByteBuffer dst = tryBlockingReceive(connected, bufLength, nanos);\n-                    if (dst != null) {\n-                        \/\/ copy to DatagramPacket, set length and sender\n-                        try {\n-                            int len = dst.limit();\n-                            dst.get(p.getData(), p.getOffset(), len);\n-                            DatagramPackets.setLength(p, len);\n-                            p.setSocketAddress(sourceSocketAddress());\n-                        } finally {\n-                            Util.offerFirstTemporaryDirectBuffer(dst);\n-                        }\n-                        completed = true;\n+                \/\/ p.bufLength is the maximum size of the datagram that can be received\n+                int bufLength = DatagramPackets.getBufLength(p);\n+                ByteBuffer dst = tryBlockingReceive(connected, bufLength, nanos);\n+                if (dst != null) {\n+                    \/\/ copy to DatagramPacket, set length and sender\n+                    try {\n+                        int len = dst.limit();\n+                        dst.get(p.getData(), p.getOffset(), len);\n+                        DatagramPackets.setLength(p, len);\n+                        p.setSocketAddress(sourceSocketAddress());\n+                    } finally {\n+                        Util.offerFirstTemporaryDirectBuffer(dst);\n@@ -639,0 +635,1 @@\n+                    completed = true;\n@@ -834,1 +831,1 @@\n-        Objects.requireNonNull(p);\n+        assert Thread.holdsLock(p);\n@@ -842,21 +839,13 @@\n-            synchronized (p) {\n-                int len = p.getLength();\n-                ByteBuffer src = Util.getTemporaryDirectBuffer(len);\n-                try {\n-                    \/\/ copy bytes to temporary direct buffer\n-                    src.put(p.getData(), p.getOffset(), len);\n-                    src.flip();\n-\n-                    \/\/ target address\n-                    InetSocketAddress target;\n-                    if (p.getAddress() == null) {\n-                        InetSocketAddress remote = remoteAddress();\n-                        if (remote == null) {\n-                            throw new IllegalArgumentException(\"Address not set\");\n-                        }\n-                        \/\/ set address\/port to be compatible with long-standing behavior\n-                        p.setAddress(remote.getAddress());\n-                        p.setPort(remote.getPort());\n-                        target = remote;\n-                    } else {\n-                        target = (InetSocketAddress) p.getSocketAddress();\n+            int len = p.getLength();\n+            ByteBuffer src = Util.getTemporaryDirectBuffer(len);\n+            try {\n+                \/\/ copy bytes to temporary direct buffer\n+                src.put(p.getData(), p.getOffset(), len);\n+                src.flip();\n+\n+                \/\/ target address\n+                InetSocketAddress target;\n+                if (p.getAddress() == null) {\n+                    InetSocketAddress remote = remoteAddress();\n+                    if (remote == null) {\n+                        throw new IllegalArgumentException(\"Address not set\");\n@@ -864,5 +853,6 @@\n-\n-                    \/\/ send the datagram (does not block)\n-                    send(src, target);\n-                } finally {\n-                    Util.offerFirstTemporaryDirectBuffer(src);\n+                    \/\/ set address\/port to be compatible with long-standing behavior\n+                    p.setAddress(remote.getAddress());\n+                    p.setPort(remote.getPort());\n+                    target = remote;\n+                } else {\n+                    target = (InetSocketAddress) p.getSocketAddress();\n@@ -870,0 +860,5 @@\n+\n+                \/\/ send the datagram (does not block)\n+                send(src, target);\n+            } finally {\n+                Util.offerFirstTemporaryDirectBuffer(src);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":39,"deletions":44,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -177,1 +177,3 @@\n-            dc.blockingSend(p);\n+            synchronized (p) {\n+                dc.blockingSend(p);\n+            }\n@@ -188,1 +190,3 @@\n-            dc.blockingReceive(p, MILLISECONDS.toNanos(timeout));\n+            synchronized (p) {\n+                dc.blockingReceive(p, MILLISECONDS.toNanos(timeout));\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramSocketAdaptor.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}