{"files":[{"patch":"@@ -602,2 +602,1 @@\n-        Objects.requireNonNull(p);\n-        assert nanos >= 0;\n+        assert Thread.holdsLock(p) && nanos >= 0;\n@@ -618,6 +617,0 @@\n-            \/\/ p.bufLength is the maximum size of the datagram that can be received\n-            int bufLength;\n-            synchronized (p) {\n-                bufLength = DatagramPackets.getBufLength(p);\n-            }\n-\n@@ -628,0 +621,3 @@\n+\n+                \/\/ p.bufLength is the maximum size of the datagram that can be received\n+                int bufLength = DatagramPackets.getBufLength(p);\n@@ -630,1 +626,1 @@\n-                    \/\/ if datagram received then get sender and copy to DatagramPacket\n+                    \/\/ copy to DatagramPacket, set length and sender\n@@ -632,9 +628,4 @@\n-                        SocketAddress sender = sourceSocketAddress();\n-                        synchronized (p) {\n-                            \/\/ copy bytes to the DatagramPacket, and set length and sender.\n-                            \/\/ Need to re-read p.bufLength in case DatagramPacket changed\n-                            int len = Math.min(dst.limit(), DatagramPackets.getBufLength(p));\n-                            dst.get(p.getData(), p.getOffset(), len);\n-                            DatagramPackets.setLength(p, len);\n-                            p.setSocketAddress(sender);\n-                        }\n+                        int len = dst.limit();\n+                        dst.get(p.getData(), p.getOffset(), len);\n+                        DatagramPackets.setLength(p, len);\n+                        p.setSocketAddress(sourceSocketAddress());\n@@ -646,0 +637,1 @@\n+\n@@ -649,0 +641,1 @@\n+\n@@ -838,1 +831,1 @@\n-        Objects.requireNonNull(p);\n+        assert Thread.holdsLock(p);\n@@ -846,1 +839,2 @@\n-            ByteBuffer src = null;\n+            int len = p.getLength();\n+            ByteBuffer src = Util.getTemporaryDirectBuffer(len);\n@@ -848,0 +842,5 @@\n+                \/\/ copy bytes to temporary direct buffer\n+                src.put(p.getData(), p.getOffset(), len);\n+                src.flip();\n+\n+                \/\/ target address\n@@ -849,20 +848,4 @@\n-                synchronized (p) {\n-                    int len = p.getLength();\n-                    src = Util.getTemporaryDirectBuffer(len);\n-\n-                    \/\/ copy bytes to temporary direct buffer\n-                    src.put(p.getData(), p.getOffset(), len);\n-                    src.flip();\n-\n-                    \/\/ target address\n-                    if (p.getAddress() == null) {\n-                        InetSocketAddress remote = remoteAddress();\n-                        if (remote == null) {\n-                            throw new IllegalArgumentException(\"Address not set\");\n-                        }\n-                        \/\/ set address\/port to be compatible with long standing behavior\n-                        p.setAddress(remote.getAddress());\n-                        p.setPort(remote.getPort());\n-                        target = remote;\n-                    } else {\n-                        target = (InetSocketAddress) p.getSocketAddress();\n+                if (p.getAddress() == null) {\n+                    InetSocketAddress remote = remoteAddress();\n+                    if (remote == null) {\n+                        throw new IllegalArgumentException(\"Address not set\");\n@@ -870,0 +853,6 @@\n+                    \/\/ set address\/port to be compatible with long-standing behavior\n+                    p.setAddress(remote.getAddress());\n+                    p.setPort(remote.getPort());\n+                    target = remote;\n+                } else {\n+                    target = (InetSocketAddress) p.getSocketAddress();\n@@ -874,1 +863,0 @@\n-\n@@ -876,1 +864,1 @@\n-                if (src != null) Util.offerFirstTemporaryDirectBuffer(src);\n+                Util.offerFirstTemporaryDirectBuffer(src);\n@@ -878,0 +866,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":31,"deletions":42,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -177,1 +177,3 @@\n-            dc.blockingSend(p);\n+            synchronized (p) {\n+                dc.blockingSend(p);\n+            }\n@@ -188,1 +190,3 @@\n-            dc.blockingReceive(p, MILLISECONDS.toNanos(timeout));\n+            synchronized (p) {\n+                dc.blockingReceive(p, MILLISECONDS.toNanos(timeout));\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramSocketAdaptor.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}