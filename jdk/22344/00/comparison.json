{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -198,1 +198,1 @@\n-                    ((AbstractMemorySegmentImpl)segment).sessionImpl() : null;\n+                    ((AbstractMemorySegmentImpl)segment).scope() : null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-        $rawType$ rawValue = SCOPED_MEMORY_ACCESS.get$RawType$Unaligned(bb.sessionImpl(),\n+        $rawType$ rawValue = SCOPED_MEMORY_ACCESS.get$RawType$Unaligned(bb.scope(),\n@@ -134,1 +134,1 @@\n-        return SCOPED_MEMORY_ACCESS.get$Type$(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.get$Type$(bb.scope(),\n@@ -138,1 +138,1 @@\n-        return SCOPED_MEMORY_ACCESS.get$Type$Unaligned(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.get$Type$Unaligned(bb.scope(),\n@@ -151,1 +151,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Unaligned(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Unaligned(bb.scope(),\n@@ -158,1 +158,1 @@\n-        SCOPED_MEMORY_ACCESS.put$Type$(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$Type$(bb.scope(),\n@@ -163,1 +163,1 @@\n-        SCOPED_MEMORY_ACCESS.put$Type$Unaligned(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$Type$Unaligned(bb.scope(),\n@@ -177,1 +177,1 @@\n-                          SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.scope(),\n@@ -186,1 +186,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Volatile(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Volatile(bb.scope(),\n@@ -197,1 +197,1 @@\n-                          SCOPED_MEMORY_ACCESS.get$RawType$Acquire(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Acquire(bb.scope(),\n@@ -206,1 +206,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Release(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Release(bb.scope(),\n@@ -217,1 +217,1 @@\n-                          SCOPED_MEMORY_ACCESS.get$RawType$Opaque(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Opaque(bb.scope(),\n@@ -226,1 +226,1 @@\n-        SCOPED_MEMORY_ACCESS.put$RawType$Opaque(bb.sessionImpl(),\n+        SCOPED_MEMORY_ACCESS.put$RawType$Opaque(bb.scope(),\n@@ -237,1 +237,1 @@\n-        return SCOPED_MEMORY_ACCESS.compareAndSet$RawType$(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.compareAndSet$RawType$(bb.scope(),\n@@ -248,1 +248,1 @@\n-                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$(bb.scope(),\n@@ -259,1 +259,1 @@\n-                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Acquire(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Acquire(bb.scope(),\n@@ -270,1 +270,1 @@\n-                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Release(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Release(bb.scope(),\n@@ -280,1 +280,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Plain(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Plain(bb.scope(),\n@@ -290,1 +290,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.scope(),\n@@ -300,1 +300,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Acquire(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Acquire(bb.scope(),\n@@ -310,1 +310,1 @@\n-        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Release(bb.sessionImpl(),\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Release(bb.scope(),\n@@ -321,1 +321,1 @@\n-                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$(bb.scope(),\n@@ -332,1 +332,1 @@\n-                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Acquire(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Acquire(bb.scope(),\n@@ -343,1 +343,1 @@\n-                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Release(bb.sessionImpl(),\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Release(bb.scope(),\n@@ -356,1 +356,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$(bb.scope(),\n@@ -370,1 +370,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Acquire(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Acquire(bb.scope(),\n@@ -384,1 +384,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Release(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Release(bb.scope(),\n@@ -398,1 +398,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.scope(), base, offset);\n@@ -400,1 +400,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.scope(), base, offset,\n@@ -412,1 +412,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$(bb.scope(),\n@@ -426,1 +426,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Release(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Release(bb.scope(),\n@@ -440,1 +440,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Acquire(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Acquire(bb.scope(),\n@@ -454,1 +454,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.scope(), base, offset);\n@@ -456,1 +456,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.scope(), base, offset,\n@@ -466,1 +466,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$(bb.scope(),\n@@ -480,1 +480,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Release(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Release(bb.scope(),\n@@ -494,1 +494,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Acquire(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Acquire(bb.scope(),\n@@ -508,1 +508,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.scope(), base, offset);\n@@ -510,1 +510,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.scope(), base, offset,\n@@ -521,1 +521,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$(bb.scope(),\n@@ -535,1 +535,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Release(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Release(bb.scope(),\n@@ -549,1 +549,1 @@\n-            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Acquire(bb.sessionImpl(),\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Acquire(bb.scope(),\n@@ -563,1 +563,1 @@\n-            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.scope(), base, offset);\n@@ -565,1 +565,1 @@\n-        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.scope(), base, offset,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleSegmentView.java.template","additions":43,"deletions":43,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -809,1 +809,1 @@\n-            return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n+            return ((AbstractMemorySegmentImpl)segment).scope();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-    public final MemorySegment reinterpret(long newSize, Arena arena, Consumer<MemorySegment> cleanup) {\n+    public final NativeMemorySegmentImpl reinterpret(long newSize, Arena arena, Consumer<MemorySegment> cleanup) {\n@@ -132,1 +132,1 @@\n-    public final MemorySegment reinterpret(long newSize) {\n+    public final NativeMemorySegmentImpl reinterpret(long newSize) {\n@@ -138,1 +138,1 @@\n-    public final MemorySegment reinterpret(Arena arena, Consumer<MemorySegment> cleanup) {\n+    public final NativeMemorySegmentImpl reinterpret(Arena arena, Consumer<MemorySegment> cleanup) {\n@@ -144,1 +144,1 @@\n-    public MemorySegment reinterpretInternal(Class<?> callerClass, long newSize, Scope scope, Consumer<MemorySegment> cleanup) {\n+    private NativeMemorySegmentImpl reinterpretInternal(Class<?> callerClass, long newSize, MemorySessionImpl scope, Consumer<MemorySegment> cleanup) {\n@@ -151,2 +151,1 @@\n-        return SegmentFactories.makeNativeSegmentUnchecked(address(), newSize,\n-                (MemorySessionImpl)scope, readOnly, action);\n+        return SegmentFactories.makeNativeSegmentUnchecked(address(), newSize, scope, readOnly, action);\n@@ -335,4 +334,0 @@\n-    public void checkValidState() {\n-        sessionImpl().checkValidState();\n-    }\n-\n@@ -397,1 +392,1 @@\n-    public Scope scope() {\n+    public MemorySessionImpl scope() {\n@@ -403,6 +398,1 @@\n-        return sessionImpl().isAccessibleBy(thread);\n-    }\n-\n-    @ForceInline\n-    public final MemorySessionImpl sessionImpl() {\n-        return scope;\n+        return scope().isAccessibleBy(thread);\n@@ -542,1 +532,1 @@\n-    private static AbstractMemorySegmentImpl nativeSegment(Buffer b, long offset, long length) {\n+    private static NativeMemorySegmentImpl nativeSegment(Buffer b, long offset, long length) {\n@@ -578,1 +568,1 @@\n-        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n+        Utils.checkNonNegativeArgument(elementCount, \"elementCount\");\n@@ -596,1 +586,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.sessionImpl(), dstImpl.sessionImpl(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.scope(), dstImpl.scope(),\n@@ -600,1 +590,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.sessionImpl(), dstImpl.sessionImpl(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.scope(), dstImpl.scope(),\n@@ -610,1 +600,1 @@\n-        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n+        Utils.checkNonNegativeArgument(elementCount, \"elementCount\");\n@@ -623,1 +613,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.sessionImpl(), null,\n+            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(srcImpl.scope(), null,\n@@ -627,1 +617,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.sessionImpl(), null,\n+            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(srcImpl.scope(), null,\n@@ -649,1 +639,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(null, destImpl.sessionImpl(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copyMemory(null, destImpl.scope(),\n@@ -653,1 +643,1 @@\n-            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(null, destImpl.sessionImpl(),\n+            ScopedMemoryAccess.getScopedMemoryAccess().copySwapMemory(null, destImpl.scope(),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":16,"deletions":26,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-    public MemorySegment allocateNoInit(long byteSize, long byteAlignment) {\n+    public NativeMemorySegmentImpl allocateNoInit(long byteSize, long byteAlignment) {\n@@ -59,3 +59,4 @@\n-    public MemorySegment allocate(long byteSize, long byteAlignment) {\n-        MemorySegment segment = allocateNoInit(byteSize, byteAlignment);\n-        return segment.fill((byte)0);\n+    public NativeMemorySegmentImpl allocate(long byteSize, long byteAlignment) {\n+        NativeMemorySegmentImpl segment = allocateNoInit(byteSize, byteAlignment);\n+        segment.fill((byte)0);\n+        return segment;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ArenaImpl.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-final class MappedMemorySegmentImpl extends NativeMemorySegmentImpl {\n+public final class MappedMemorySegmentImpl extends NativeMemorySegmentImpl {\n@@ -75,1 +75,1 @@\n-            SCOPED_MEMORY_ACCESS.load(sessionImpl(), NIO_ACCESS.mappedMemoryUtils(),\n+            SCOPED_MEMORY_ACCESS.load(scope(), NIO_ACCESS.mappedMemoryUtils(),\n@@ -82,1 +82,1 @@\n-            SCOPED_MEMORY_ACCESS.unload(sessionImpl(), NIO_ACCESS.mappedMemoryUtils(),\n+            SCOPED_MEMORY_ACCESS.unload(scope(), NIO_ACCESS.mappedMemoryUtils(),\n@@ -89,1 +89,1 @@\n-                SCOPED_MEMORY_ACCESS.isLoaded(sessionImpl(),\n+                SCOPED_MEMORY_ACCESS.isLoaded(scope(),\n@@ -95,1 +95,1 @@\n-            SCOPED_MEMORY_ACCESS.force(sessionImpl(), NIO_ACCESS.mappedMemoryUtils(),\n+            SCOPED_MEMORY_ACCESS.force(scope(), NIO_ACCESS.mappedMemoryUtils(),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    public Arena asArena() {\n+    public ArenaImpl asArena() {\n@@ -222,1 +222,1 @@\n-        ((AbstractMemorySegmentImpl)segment).sessionImpl().checkValidState();\n+        ((AbstractMemorySegmentImpl)segment).scope().checkValidState();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-sealed class NativeMemorySegmentImpl extends AbstractMemorySegmentImpl permits MappedMemorySegmentImpl {\n+public sealed class NativeMemorySegmentImpl extends AbstractMemorySegmentImpl permits MappedMemorySegmentImpl {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-            dst.checkValidState();\n+            dst.scope().checkValidState();\n@@ -77,1 +77,1 @@\n-                SCOPED_MEMORY_ACCESS.putLongUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + offset, longValue, !Architecture.isLittleEndian());\n+                SCOPED_MEMORY_ACCESS.putLongUnaligned(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + offset, longValue, !Architecture.isLittleEndian());\n@@ -82,1 +82,1 @@\n-                SCOPED_MEMORY_ACCESS.putIntUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + offset, (int) longValue, !Architecture.isLittleEndian());\n+                SCOPED_MEMORY_ACCESS.putIntUnaligned(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + offset, (int) longValue, !Architecture.isLittleEndian());\n@@ -88,1 +88,1 @@\n-                SCOPED_MEMORY_ACCESS.putShortUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + offset, (short) longValue, !Architecture.isLittleEndian());\n+                SCOPED_MEMORY_ACCESS.putShortUnaligned(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + offset, (short) longValue, !Architecture.isLittleEndian());\n@@ -94,1 +94,1 @@\n-                SCOPED_MEMORY_ACCESS.putByte(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + offset, value);\n+                SCOPED_MEMORY_ACCESS.putByte(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + offset, value);\n@@ -99,1 +99,1 @@\n-            SCOPED_MEMORY_ACCESS.setMemory(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset(), dst.length, value);\n+            SCOPED_MEMORY_ACCESS.setMemory(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset(), dst.length, value);\n@@ -109,1 +109,1 @@\n-        Utils.checkNonNegativeIndex(size, \"size\");\n+        Utils.checkNonNegativeArgument(size, \"size\");\n@@ -127,2 +127,2 @@\n-                final long v = SCOPED_MEMORY_ACCESS.getLongUnaligned(src.sessionImpl(), src.unsafeGetBase(), src.unsafeGetOffset() + srcOffset + offset, !Architecture.isLittleEndian());\n-                SCOPED_MEMORY_ACCESS.putLongUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstOffset + offset, v, !Architecture.isLittleEndian());\n+                final long v = SCOPED_MEMORY_ACCESS.getLongUnaligned(src.scope(), src.unsafeGetBase(), src.unsafeGetOffset() + srcOffset + offset, !Architecture.isLittleEndian());\n+                SCOPED_MEMORY_ACCESS.putLongUnaligned(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstOffset + offset, v, !Architecture.isLittleEndian());\n@@ -133,2 +133,2 @@\n-                final int v = SCOPED_MEMORY_ACCESS.getIntUnaligned(src.sessionImpl(), src.unsafeGetBase(),src.unsafeGetOffset() + srcOffset + offset, !Architecture.isLittleEndian());\n-                SCOPED_MEMORY_ACCESS.putIntUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstOffset + offset, v, !Architecture.isLittleEndian());\n+                final int v = SCOPED_MEMORY_ACCESS.getIntUnaligned(src.scope(), src.unsafeGetBase(),src.unsafeGetOffset() + srcOffset + offset, !Architecture.isLittleEndian());\n+                SCOPED_MEMORY_ACCESS.putIntUnaligned(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstOffset + offset, v, !Architecture.isLittleEndian());\n@@ -140,2 +140,2 @@\n-                final short v = SCOPED_MEMORY_ACCESS.getShortUnaligned(src.sessionImpl(), src.unsafeGetBase(), src.unsafeGetOffset() + srcOffset + offset, !Architecture.isLittleEndian());\n-                SCOPED_MEMORY_ACCESS.putShortUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstOffset + offset, v, !Architecture.isLittleEndian());\n+                final short v = SCOPED_MEMORY_ACCESS.getShortUnaligned(src.scope(), src.unsafeGetBase(), src.unsafeGetOffset() + srcOffset + offset, !Architecture.isLittleEndian());\n+                SCOPED_MEMORY_ACCESS.putShortUnaligned(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstOffset + offset, v, !Architecture.isLittleEndian());\n@@ -147,2 +147,2 @@\n-                final byte v = SCOPED_MEMORY_ACCESS.getByte(src.sessionImpl(), src.unsafeGetBase(), src.unsafeGetOffset() + srcOffset + offset);\n-                SCOPED_MEMORY_ACCESS.putByte(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstOffset + offset, v);\n+                final byte v = SCOPED_MEMORY_ACCESS.getByte(src.scope(), src.unsafeGetBase(), src.unsafeGetOffset() + srcOffset + offset);\n+                SCOPED_MEMORY_ACCESS.putByte(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstOffset + offset, v);\n@@ -153,1 +153,1 @@\n-            SCOPED_MEMORY_ACCESS.copyMemory(src.sessionImpl(), dst.sessionImpl(),\n+            SCOPED_MEMORY_ACCESS.copyMemory(src.scope(), dst.scope(),\n@@ -176,2 +176,2 @@\n-            if (SCOPED_MEMORY_ACCESS.getByte(src.sessionImpl(), src.unsafeGetBase(), src.unsafeGetOffset() + srcFromOffset) !=\n-                    SCOPED_MEMORY_ACCESS.getByte(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstFromOffset)) {\n+            if (SCOPED_MEMORY_ACCESS.getByte(src.scope(), src.unsafeGetBase(), src.unsafeGetOffset() + srcFromOffset) !=\n+                    SCOPED_MEMORY_ACCESS.getByte(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstFromOffset)) {\n@@ -180,1 +180,1 @@\n-            i = vectorizedMismatchLargeForBytes(src.sessionImpl(), dst.sessionImpl(),\n+            i = vectorizedMismatchLargeForBytes(src.scope(), dst.scope(),\n@@ -202,2 +202,2 @@\n-            final long s = SCOPED_MEMORY_ACCESS.getLongUnaligned(src.sessionImpl(), src.unsafeGetBase(), src.unsafeGetOffset() + srcFromOffset + offset, false);\n-            final long d = SCOPED_MEMORY_ACCESS.getLongUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstFromOffset + offset, false);\n+            final long s = SCOPED_MEMORY_ACCESS.getLongUnaligned(src.scope(), src.unsafeGetBase(), src.unsafeGetOffset() + srcFromOffset + offset, false);\n+            final long d = SCOPED_MEMORY_ACCESS.getLongUnaligned(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstFromOffset + offset, false);\n@@ -212,2 +212,2 @@\n-            final int s = SCOPED_MEMORY_ACCESS.getIntUnaligned(src.sessionImpl(), src.unsafeGetBase(), src.unsafeGetOffset() + srcFromOffset + offset, false);\n-            final int d = SCOPED_MEMORY_ACCESS.getIntUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstFromOffset + offset, false);\n+            final int s = SCOPED_MEMORY_ACCESS.getIntUnaligned(src.scope(), src.unsafeGetBase(), src.unsafeGetOffset() + srcFromOffset + offset, false);\n+            final int d = SCOPED_MEMORY_ACCESS.getIntUnaligned(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstFromOffset + offset, false);\n@@ -222,2 +222,2 @@\n-            final short s = SCOPED_MEMORY_ACCESS.getShortUnaligned(src.sessionImpl(), src.unsafeGetBase(), src.unsafeGetOffset() + srcFromOffset + offset, false);\n-            final short d = SCOPED_MEMORY_ACCESS.getShortUnaligned(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstFromOffset + offset, false);\n+            final short s = SCOPED_MEMORY_ACCESS.getShortUnaligned(src.scope(), src.unsafeGetBase(), src.unsafeGetOffset() + srcFromOffset + offset, false);\n+            final short d = SCOPED_MEMORY_ACCESS.getShortUnaligned(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstFromOffset + offset, false);\n@@ -232,2 +232,2 @@\n-            final byte s = SCOPED_MEMORY_ACCESS.getByte(src.sessionImpl(), src.unsafeGetBase(), src.unsafeGetOffset() + srcFromOffset + offset);\n-            final byte d = SCOPED_MEMORY_ACCESS.getByte(dst.sessionImpl(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstFromOffset + offset);\n+            final byte s = SCOPED_MEMORY_ACCESS.getByte(src.scope(), src.unsafeGetBase(), src.unsafeGetOffset() + srcFromOffset + offset);\n+            final byte d = SCOPED_MEMORY_ACCESS.getByte(dst.scope(), dst.unsafeGetBase(), dst.unsafeGetOffset() + dstFromOffset + offset);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentBulkOperations.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -60,5 +60,3 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min,\n-                                                           long byteSize,\n-                                                           MemorySessionImpl sessionImpl,\n-                                                           boolean readOnly,\n-                                                           Runnable action) {\n+    public static NativeMemorySegmentImpl makeNativeSegmentUnchecked(long min, long byteSize,\n+                                                                     MemorySessionImpl sessionImpl,\n+                                                                     boolean readOnly, Runnable action) {\n@@ -75,1 +73,1 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize, MemorySessionImpl sessionImpl) {\n+    public static NativeMemorySegmentImpl makeNativeSegmentUnchecked(long min, long byteSize, MemorySessionImpl sessionImpl) {\n@@ -82,1 +80,1 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize) {\n+    public static NativeMemorySegmentImpl makeNativeSegmentUnchecked(long min, long byteSize) {\n@@ -87,1 +85,1 @@\n-    public static MemorySegment fromArray(byte[] arr) {\n+    public static OfByte fromArray(byte[] arr) {\n@@ -95,1 +93,1 @@\n-    public static MemorySegment fromArray(short[] arr) {\n+    public static OfShort fromArray(short[] arr) {\n@@ -103,1 +101,1 @@\n-    public static MemorySegment fromArray(int[] arr) {\n+    public static OfInt fromArray(int[] arr) {\n@@ -111,1 +109,1 @@\n-    public static MemorySegment fromArray(char[] arr) {\n+    public static OfChar fromArray(char[] arr) {\n@@ -119,1 +117,1 @@\n-    public static MemorySegment fromArray(float[] arr) {\n+    public static OfFloat fromArray(float[] arr) {\n@@ -127,1 +125,1 @@\n-    public static MemorySegment fromArray(double[] arr) {\n+    public static OfDouble fromArray(double[] arr) {\n@@ -135,1 +133,1 @@\n-    public static MemorySegment fromArray(long[] arr) {\n+    public static OfLong fromArray(long[] arr) {\n@@ -145,6 +143,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfByteSegment(Object base,\n-                                                               long offset,\n-                                                               long length,\n-                                                               boolean readOnly,\n-                                                               MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfByte(offset, base, length, readOnly, bufferScope);\n+    public static OfByte arrayOfByteSegment(Object base, long offset, long length,\n+                                            boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfByte(offset, base, length, readOnly, bufferScope);\n@@ -153,6 +148,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfShortSegment(Object base,\n-                                                                long offset,\n-                                                                long length,\n-                                                                boolean readOnly,\n-                                                                MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfShort(offset, base, length, readOnly, bufferScope);\n+    public static OfShort arrayOfShortSegment(Object base, long offset, long length,\n+                                              boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfShort(offset, base, length, readOnly, bufferScope);\n@@ -161,6 +153,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfCharSegment(Object base,\n-                                                               long offset,\n-                                                               long length,\n-                                                               boolean readOnly,\n-                                                               MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfChar(offset, base, length, readOnly, bufferScope);\n+    public static OfChar arrayOfCharSegment(Object base, long offset, long length,\n+                                            boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfChar(offset, base, length, readOnly, bufferScope);\n@@ -169,6 +158,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfIntSegment(Object base,\n-                                                              long offset,\n-                                                              long length,\n-                                                              boolean readOnly,\n-                                                              MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfInt(offset, base, length, readOnly, bufferScope);\n+    public static OfInt arrayOfIntSegment(Object base, long offset, long length,\n+                                          boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfInt(offset, base, length, readOnly, bufferScope);\n@@ -177,6 +163,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfFloatSegment(Object base,\n-                                                                long offset,\n-                                                                long length,\n-                                                                boolean readOnly,\n-                                                                MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfFloat(offset, base, length, readOnly, bufferScope);\n+    public static OfFloat arrayOfFloatSegment(Object base, long offset, long length,\n+                                              boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfFloat(offset, base, length, readOnly, bufferScope);\n@@ -185,6 +168,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfLongSegment(Object base,\n-                                                               long offset,\n-                                                               long length,\n-                                                               boolean readOnly,\n-                                                               MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfLong(offset, base, length, readOnly, bufferScope);\n+    public static OfLong arrayOfLongSegment(Object base, long offset, long length,\n+                                            boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfLong(offset, base, length, readOnly, bufferScope);\n@@ -193,6 +173,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfDoubleSegment(Object base,\n-                                                                 long offset,\n-                                                                 long length,\n-                                                                 boolean readOnly,\n-                                                                 MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfDouble(offset, base, length, readOnly, bufferScope);\n+    public static OfDouble arrayOfDoubleSegment(Object base, long offset, long length,\n+                                                boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfDouble(offset, base, length, readOnly, bufferScope);\n@@ -201,2 +178,2 @@\n-    public static MemorySegment allocateSegment(long byteSize, long byteAlignment, MemorySessionImpl sessionImpl,\n-                                                  boolean shouldReserve) {\n+    public static NativeMemorySegmentImpl allocateSegment(long byteSize, long byteAlignment, MemorySessionImpl sessionImpl,\n+                                                          boolean shouldReserve) {\n@@ -218,1 +195,1 @@\n-        AbstractMemorySegmentImpl segment = new NativeMemorySegmentImpl(buf, alignedSize,\n+        NativeMemorySegmentImpl segment = new NativeMemorySegmentImpl(buf, alignedSize,\n@@ -231,1 +208,1 @@\n-            segment = segment.asSlice(delta, byteSize);\n+            segment = (NativeMemorySegmentImpl) segment.asSlice(delta, byteSize);\n@@ -244,1 +221,1 @@\n-    public static MemorySegment mapSegment(long size, UnmapperProxy unmapper, boolean readOnly, MemorySessionImpl sessionImpl) {\n+    public static MappedMemorySegmentImpl mapSegment(long size, UnmapperProxy unmapper, boolean readOnly, MemorySessionImpl sessionImpl) {\n@@ -247,1 +224,1 @@\n-            AbstractMemorySegmentImpl segment =\n+            MappedMemorySegmentImpl segment =\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentFactories.java","additions":39,"deletions":62,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -233,7 +233,0 @@\n-    @ForceInline\n-    public static void checkNonNegativeIndex(long value, String name) {\n-        if (value < 0) {\n-            throw new IndexOutOfBoundsException(\"The provided \" + name + \" is negative: \" + value);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-                    MemorySessionImpl sessionImpl = ((AbstractMemorySegmentImpl) arg).sessionImpl();\n+                    MemorySessionImpl sessionImpl = ((AbstractMemorySegmentImpl) arg).scope();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/DowncallLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import java.nio.ByteOrder;\n@@ -159,1 +158,1 @@\n-            MemorySessionImpl targetImpl = ((AbstractMemorySegmentImpl) target).sessionImpl();\n+            MemorySessionImpl targetImpl = ((AbstractMemorySegmentImpl) target).scope();\n@@ -166,1 +165,1 @@\n-                MemorySessionImpl capturedStateImpl = ((AbstractMemorySegmentImpl) capturedState).sessionImpl();\n+                MemorySessionImpl capturedStateImpl = ((AbstractMemorySegmentImpl) capturedState).scope();\n@@ -179,1 +178,1 @@\n-                    MemorySessionImpl sessionImpl = ms.sessionImpl();\n+                    MemorySessionImpl sessionImpl = ms.scope();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -336,1 +336,1 @@\n-                    msp.sessionImpl(),\n+                    msp.scope(),\n@@ -377,1 +377,1 @@\n-                    msp.sessionImpl(),\n+                    msp.scope(),\n@@ -419,1 +419,1 @@\n-                    msp.sessionImpl(),\n+                    msp.scope(),\n@@ -461,1 +461,1 @@\n-                    msp.sessionImpl(),\n+                    msp.scope(),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}