{"files":[{"patch":"@@ -124,1 +124,1 @@\n-    public final MemorySegment reinterpret(long newSize, Arena arena, Consumer<MemorySegment> cleanup) {\n+    public final NativeMemorySegmentImpl reinterpret(long newSize, Arena arena, Consumer<MemorySegment> cleanup) {\n@@ -132,1 +132,1 @@\n-    public final MemorySegment reinterpret(long newSize) {\n+    public final NativeMemorySegmentImpl reinterpret(long newSize) {\n@@ -138,1 +138,1 @@\n-    public final MemorySegment reinterpret(Arena arena, Consumer<MemorySegment> cleanup) {\n+    public final NativeMemorySegmentImpl reinterpret(Arena arena, Consumer<MemorySegment> cleanup) {\n@@ -144,1 +144,1 @@\n-    public MemorySegment reinterpretInternal(Class<?> callerClass, long newSize, Scope scope, Consumer<MemorySegment> cleanup) {\n+    private NativeMemorySegmentImpl reinterpretInternal(Class<?> callerClass, long newSize, MemorySessionImpl scope, Consumer<MemorySegment> cleanup) {\n@@ -151,2 +151,1 @@\n-        return SegmentFactories.makeNativeSegmentUnchecked(address(), newSize,\n-                (MemorySessionImpl)scope, readOnly, action);\n+        return SegmentFactories.makeNativeSegmentUnchecked(address(), newSize, scope, readOnly, action);\n@@ -335,4 +334,0 @@\n-    public void checkValidState() {\n-        sessionImpl().checkValidState();\n-    }\n-\n@@ -397,1 +392,1 @@\n-    public Scope scope() {\n+    public MemorySessionImpl scope() {\n@@ -542,1 +537,1 @@\n-    private static AbstractMemorySegmentImpl nativeSegment(Buffer b, long offset, long length) {\n+    private static NativeMemorySegmentImpl nativeSegment(Buffer b, long offset, long length) {\n@@ -578,1 +573,1 @@\n-        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n+        Utils.checkNonNegativeArgument(elementCount, \"elementCount\");\n@@ -610,1 +605,1 @@\n-        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n+        Utils.checkNonNegativeArgument(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-    public MemorySegment allocateNoInit(long byteSize, long byteAlignment) {\n+    public NativeMemorySegmentImpl allocateNoInit(long byteSize, long byteAlignment) {\n@@ -59,3 +59,4 @@\n-    public MemorySegment allocate(long byteSize, long byteAlignment) {\n-        MemorySegment segment = allocateNoInit(byteSize, byteAlignment);\n-        return segment.fill((byte)0);\n+    public NativeMemorySegmentImpl allocate(long byteSize, long byteAlignment) {\n+        NativeMemorySegmentImpl segment = allocateNoInit(byteSize, byteAlignment);\n+        segment.fill((byte)0);\n+        return segment;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ArenaImpl.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-final class MappedMemorySegmentImpl extends NativeMemorySegmentImpl {\n+public final class MappedMemorySegmentImpl extends NativeMemorySegmentImpl {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    public Arena asArena() {\n+    public ArenaImpl asArena() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-sealed class NativeMemorySegmentImpl extends AbstractMemorySegmentImpl permits MappedMemorySegmentImpl {\n+public sealed class NativeMemorySegmentImpl extends AbstractMemorySegmentImpl permits MappedMemorySegmentImpl {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-            dst.checkValidState();\n+            dst.sessionImpl().checkValidState();\n@@ -109,1 +109,1 @@\n-        Utils.checkNonNegativeIndex(size, \"size\");\n+        Utils.checkNonNegativeArgument(size, \"size\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentBulkOperations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,5 +60,3 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min,\n-                                                           long byteSize,\n-                                                           MemorySessionImpl sessionImpl,\n-                                                           boolean readOnly,\n-                                                           Runnable action) {\n+    public static NativeMemorySegmentImpl makeNativeSegmentUnchecked(long min, long byteSize,\n+                                                                     MemorySessionImpl sessionImpl,\n+                                                                     boolean readOnly, Runnable action) {\n@@ -75,1 +73,1 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize, MemorySessionImpl sessionImpl) {\n+    public static NativeMemorySegmentImpl makeNativeSegmentUnchecked(long min, long byteSize, MemorySessionImpl sessionImpl) {\n@@ -82,1 +80,1 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize) {\n+    public static NativeMemorySegmentImpl makeNativeSegmentUnchecked(long min, long byteSize) {\n@@ -87,1 +85,1 @@\n-    public static MemorySegment fromArray(byte[] arr) {\n+    public static OfByte fromArray(byte[] arr) {\n@@ -95,1 +93,1 @@\n-    public static MemorySegment fromArray(short[] arr) {\n+    public static OfShort fromArray(short[] arr) {\n@@ -103,1 +101,1 @@\n-    public static MemorySegment fromArray(int[] arr) {\n+    public static OfInt fromArray(int[] arr) {\n@@ -111,1 +109,1 @@\n-    public static MemorySegment fromArray(char[] arr) {\n+    public static OfChar fromArray(char[] arr) {\n@@ -119,1 +117,1 @@\n-    public static MemorySegment fromArray(float[] arr) {\n+    public static OfFloat fromArray(float[] arr) {\n@@ -127,1 +125,1 @@\n-    public static MemorySegment fromArray(double[] arr) {\n+    public static OfDouble fromArray(double[] arr) {\n@@ -135,1 +133,1 @@\n-    public static MemorySegment fromArray(long[] arr) {\n+    public static OfLong fromArray(long[] arr) {\n@@ -145,6 +143,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfByteSegment(Object base,\n-                                                               long offset,\n-                                                               long length,\n-                                                               boolean readOnly,\n-                                                               MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfByte(offset, base, length, readOnly, bufferScope);\n+    public static OfByte arrayOfByteSegment(Object base, long offset, long length,\n+                                            boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfByte(offset, base, length, readOnly, bufferScope);\n@@ -153,6 +148,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfShortSegment(Object base,\n-                                                                long offset,\n-                                                                long length,\n-                                                                boolean readOnly,\n-                                                                MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfShort(offset, base, length, readOnly, bufferScope);\n+    public static OfShort arrayOfShortSegment(Object base, long offset, long length,\n+                                              boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfShort(offset, base, length, readOnly, bufferScope);\n@@ -161,6 +153,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfCharSegment(Object base,\n-                                                               long offset,\n-                                                               long length,\n-                                                               boolean readOnly,\n-                                                               MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfChar(offset, base, length, readOnly, bufferScope);\n+    public static OfChar arrayOfCharSegment(Object base, long offset, long length,\n+                                            boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfChar(offset, base, length, readOnly, bufferScope);\n@@ -169,6 +158,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfIntSegment(Object base,\n-                                                              long offset,\n-                                                              long length,\n-                                                              boolean readOnly,\n-                                                              MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfInt(offset, base, length, readOnly, bufferScope);\n+    public static OfInt arrayOfIntSegment(Object base, long offset, long length,\n+                                          boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfInt(offset, base, length, readOnly, bufferScope);\n@@ -177,6 +163,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfFloatSegment(Object base,\n-                                                                long offset,\n-                                                                long length,\n-                                                                boolean readOnly,\n-                                                                MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfFloat(offset, base, length, readOnly, bufferScope);\n+    public static OfFloat arrayOfFloatSegment(Object base, long offset, long length,\n+                                              boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfFloat(offset, base, length, readOnly, bufferScope);\n@@ -185,6 +168,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfLongSegment(Object base,\n-                                                               long offset,\n-                                                               long length,\n-                                                               boolean readOnly,\n-                                                               MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfLong(offset, base, length, readOnly, bufferScope);\n+    public static OfLong arrayOfLongSegment(Object base, long offset, long length,\n+                                            boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfLong(offset, base, length, readOnly, bufferScope);\n@@ -193,6 +173,3 @@\n-    public static AbstractMemorySegmentImpl arrayOfDoubleSegment(Object base,\n-                                                                 long offset,\n-                                                                 long length,\n-                                                                 boolean readOnly,\n-                                                                 MemorySessionImpl bufferScope) {\n-        return new HeapMemorySegmentImpl.OfDouble(offset, base, length, readOnly, bufferScope);\n+    public static OfDouble arrayOfDoubleSegment(Object base, long offset, long length,\n+                                                boolean readOnly, MemorySessionImpl bufferScope) {\n+        return new OfDouble(offset, base, length, readOnly, bufferScope);\n@@ -201,2 +178,2 @@\n-    public static MemorySegment allocateSegment(long byteSize, long byteAlignment, MemorySessionImpl sessionImpl,\n-                                                  boolean shouldReserve) {\n+    public static NativeMemorySegmentImpl allocateSegment(long byteSize, long byteAlignment, MemorySessionImpl sessionImpl,\n+                                                          boolean shouldReserve) {\n@@ -218,1 +195,1 @@\n-        AbstractMemorySegmentImpl segment = new NativeMemorySegmentImpl(buf, alignedSize,\n+        NativeMemorySegmentImpl segment = new NativeMemorySegmentImpl(buf, alignedSize,\n@@ -231,1 +208,1 @@\n-            segment = segment.asSlice(delta, byteSize);\n+            segment = (NativeMemorySegmentImpl) segment.asSlice(delta, byteSize);\n@@ -244,1 +221,1 @@\n-    public static MemorySegment mapSegment(long size, UnmapperProxy unmapper, boolean readOnly, MemorySessionImpl sessionImpl) {\n+    public static MappedMemorySegmentImpl mapSegment(long size, UnmapperProxy unmapper, boolean readOnly, MemorySessionImpl sessionImpl) {\n@@ -247,1 +224,1 @@\n-            AbstractMemorySegmentImpl segment =\n+            MappedMemorySegmentImpl segment =\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentFactories.java","additions":39,"deletions":62,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -233,7 +233,0 @@\n-    @ForceInline\n-    public static void checkNonNegativeIndex(long value, String name) {\n-        if (value < 0) {\n-            throw new IndexOutOfBoundsException(\"The provided \" + name + \" is negative: \" + value);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import java.nio.ByteOrder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}