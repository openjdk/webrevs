{"files":[{"patch":"@@ -124,1 +124,1 @@\n-    public final NativeMemorySegmentImpl reinterpret(long newSize, Arena arena, Consumer<MemorySegment> cleanup) {\n+    public final MemorySegment reinterpret(long newSize, Arena arena, Consumer<MemorySegment> cleanup) {\n@@ -132,1 +132,1 @@\n-    public final NativeMemorySegmentImpl reinterpret(long newSize) {\n+    public final MemorySegment reinterpret(long newSize) {\n@@ -138,1 +138,1 @@\n-    public final NativeMemorySegmentImpl reinterpret(Arena arena, Consumer<MemorySegment> cleanup) {\n+    public final MemorySegment reinterpret(Arena arena, Consumer<MemorySegment> cleanup) {\n@@ -573,1 +573,1 @@\n-        Utils.checkNonNegativeArgument(elementCount, \"elementCount\");\n+        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n@@ -605,1 +605,1 @@\n-        Utils.checkNonNegativeArgument(elementCount, \"elementCount\");\n+        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-        Utils.checkNonNegativeArgument(size, \"size\");\n+        Utils.checkNonNegativeIndex(size, \"size\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentBulkOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -233,0 +233,7 @@\n+    @ForceInline\n+    public static void checkNonNegativeIndex(long value, String name) {\n+        if (value < 0) {\n+            throw new IndexOutOfBoundsException(\"The provided \" + name + \" is negative: \" + value);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}