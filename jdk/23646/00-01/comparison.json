{"files":[{"patch":"@@ -58,0 +58,1 @@\n+BUILD_JDK_JTREG_LIBRARIES_JDK_LIBS_libstringPlatformChars := java.base:libjava\n@@ -109,1 +110,0 @@\n-  BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libstringPlatformChars := -ldl\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @requires !jdk.static\n","filename":"test\/jdk\/java\/lang\/String\/nativeEncoding\/StringPlatformChars.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,5 +24,0 @@\n-#ifdef WINDOWS\n-#include <windows.h>\n-#else\n-#include <dlfcn.h>\n-#endif \/\/ WINDOWS\n@@ -33,50 +28,1 @@\n-\n-typedef jclass (JNICALL *ClassString_t)(JNIEnv *env);\n-typedef const char* (JNICALL *GetStringPlatformChars_t)(JNIEnv *env, jstring jstr, jboolean *isCopy);\n-typedef jstring (JNICALL *NewStringPlatform_t)(JNIEnv *env, const char *str);\n-\n-ClassString_t ClassString = NULL;\n-GetStringPlatformChars_t GetStringPlatformChars = NULL;\n-NewStringPlatform_t NewStringPlatform = NULL;\n-\n-JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void* reserved) {\n-#ifdef WINDOWS\n-#define FIND_FUNCTION(f) GetProcAddress(handle, f)\n-    HMODULE handle;\n-    \/\/ If we are running on dynamic (non-static) JDK, libjava.dll\n-    \/\/ is loaded during vm bootstrapping. Just use GetModuleHandle\n-    \/\/ to find the already loaded libjava.dll.\n-    handle = GetModuleHandle(\"java.dll\");\n-    if (handle == NULL) {\n-      \/\/ No loaded libjava.dll. Get the handle to the executable.\n-      handle = GetModuleHandle(NULL);\n-    }\n-#else\n-#define FIND_FUNCTION(f) dlsym(handle, f)\n-    void* handle = dlopen(\"libjava.so\", RTLD_LAZY | RTLD_NOLOAD);\n-    if (handle == NULL) {\n-        \/\/ It's probably a JDK static binary, let's try using the main executable.\n-        handle = dlopen(NULL, RTLD_LAZY);\n-    }\n-#endif\n-\n-    ClassString = (ClassString_t)FIND_FUNCTION(\"JNU_ClassString\");\n-    if (ClassString == NULL) {\n-        fprintf(stderr, \"Failed to find JNU_ClassString\");\n-        return JNI_ERR;\n-    }\n-\n-    GetStringPlatformChars = (GetStringPlatformChars_t)FIND_FUNCTION(\"JNU_GetStringPlatformChars\");\n-    if (GetStringPlatformChars == NULL) {\n-        fprintf(stderr, \"Failed to find JNU_GetStringPlatformChars\");\n-        return JNI_ERR;\n-    }\n-\n-    NewStringPlatform = (NewStringPlatform_t)FIND_FUNCTION(\"JNU_NewStringPlatform\");\n-    if (NewStringPlatform == NULL) {\n-        fprintf(stderr, \"Failed to find JNU_NewStringPlatform\");\n-        return JNI_ERR;\n-    }\n-\n-    return JNI_VERSION_1_8;\n-}\n+#include \"jni_util.h\"\n@@ -91,1 +37,1 @@\n-    str = (*GetStringPlatformChars)(env, value, NULL);\n+    str = JNU_GetStringPlatformChars(env, value, NULL);\n@@ -98,1 +44,1 @@\n-        jclass strClazz = (*ClassString)(env);\n+        jclass strClazz = JNU_ClassString(env);\n@@ -128,1 +74,1 @@\n-    return (*NewStringPlatform)(env, str);\n+    return JNU_NewStringPlatform(env, str);\n","filename":"test\/jdk\/java\/lang\/String\/nativeEncoding\/libstringPlatformChars.c","additions":5,"deletions":59,"binary":false,"changes":64,"status":"modified"}]}