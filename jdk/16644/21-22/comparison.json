{"files":[{"patch":"@@ -65,2 +65,4 @@\n- * object with a <em>reference queue<\/em> at the time the reference\n- * object is created.  Some time after the garbage collector\n+ * object with a <em>reference queue<\/em>.\n+ * This is done by providing the reference queue as\n+ * a constructor argument when creating the reference object.\n+ * Some time after the garbage collector\n@@ -70,1 +72,3 @@\n- * reference is considered to be <em>enqueued<\/em>.  The program may remove\n+ * reference is considered to be <em>enqueued<\/em>.  The program learns of the\n+ * object's change in reachability when the associated reference becomes\n+ * available on the queue. The program may remove\n@@ -72,2 +76,6 @@\n- * reference becomes available.  Reference queues are implemented by\n- * the {@link java.lang.ref.ReferenceQueue} class.\n+ * reference becomes available. Additional state needed to respond to a\n+ * referent's change in reachability can be stored in the fields of a custom\n+ * reference subclass, and accessed when the reference is returned from the\n+ * queue.\n+ * Reference queues are implemented by the {@link java.lang.ref.ReferenceQueue}\n+ * class.\n@@ -79,2 +87,2 @@\n- * the responsibility of the program using reference objects to ensure\n- * that the objects remain reachable for as long as the program is\n+ * the responsibility of the program to ensure\n+ * that reference objects remain reachable for as long as the program is\n@@ -96,0 +104,33 @@\n+ * <a id=\"reachability\"><\/a>\n+ * <h3>Reachability<\/h3>\n+ *\n+ * A <em>reachable<\/em> object is any object that can be accessed in any potential\n+ * continuing computation from any live thread (as stated in {@jls 12.6.1}).\n+ *\n+ * <p> Going from strongest to weakest, the different levels of\n+ * reachability reflect the life cycle of an object.  They are\n+ * operationally defined as follows:\n+ *\n+ * <ul>\n+ *\n+ * <li> An object is <em>strongly reachable<\/em> if it is reachable and if it\n+ * can be accessed without traversing the referent of a Reference object.\n+ *\n+ * <li> An object is <em>softly reachable<\/em> if it is not strongly\n+ * reachable but can be reached by traversing a soft reference.\n+ *\n+ * <li> An object is <em>weakly reachable<\/em> if it is neither\n+ * strongly nor softly reachable but can be reached by traversing a\n+ * weak reference.  When the weak references to a weakly-reachable\n+ * object are cleared, the object becomes eligible for finalization.\n+ *\n+ * <li> An object is <em>phantom reachable<\/em> if it is neither\n+ * strongly, softly, nor weakly reachable, it has been finalized, and\n+ * some phantom reference refers to it.\n+ *\n+ * <li> Finally, an object is <em>unreachable<\/em>, and therefore\n+ * eligible for reclamation, when it is not reachable in any of the\n+ * above ways.\n+ *\n+ * <\/ul>\n+ *\n@@ -132,33 +173,0 @@\n- * <a id=\"reachability\"><\/a>\n- * <h3>Reachability<\/h3>\n- *\n- * A <em>reachable<\/em> object is any object that can be accessed in any potential\n- * continuing computation from any live thread (as stated in {@jls 12.6.1}).\n- *\n- * <p> Going from strongest to weakest, the different levels of\n- * reachability reflect the life cycle of an object.  They are\n- * operationally defined as follows:\n- *\n- * <ul>\n- *\n- * <li> An object is <em>strongly reachable<\/em> if it is reachable and if it\n- * can be accessed without traversing the referent of a Reference object.\n- *\n- * <li> An object is <em>softly reachable<\/em> if it is not strongly\n- * reachable but can be reached by traversing a soft reference.\n- *\n- * <li> An object is <em>weakly reachable<\/em> if it is neither\n- * strongly nor softly reachable but can be reached by traversing a\n- * weak reference.  When the weak references to a weakly-reachable\n- * object are cleared, the object becomes eligible for finalization.\n- *\n- * <li> An object is <em>phantom reachable<\/em> if it is neither\n- * strongly, softly, nor weakly reachable, it has been finalized, and\n- * some phantom reference refers to it.\n- *\n- * <li> Finally, an object is <em>unreachable<\/em>, and therefore\n- * eligible for reclamation, when it is not reachable in any of the\n- * above ways.\n- *\n- * <\/ul>\n- *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/package-info.java","additions":48,"deletions":40,"binary":false,"changes":88,"status":"modified"}]}