{"files":[{"patch":"@@ -218,0 +218,8 @@\n+     * <p>The object being registered is kept strongly-reachable (and therefore not eligible\n+     * for cleaning) during the register() method.\n+     *\n+     * <p>Memory consistency effects: Actions in a thread prior to calling\n+     * Cleaner.register()\n+     * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+     * the cleaning action is run by the Cleaner's thread.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Cleaner.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -391,2 +391,11 @@\n-     * Clears this reference object.  Invoking this method will not cause this\n-     * object to be enqueued.\n+     * Clears this reference object. Invoking this method does not enqueue this\n+     * object, and the garbage collector will no longer enqueue this object once\n+     * the referent reaches the designated reachability level.\n+     * <p>\n+     * There is a potential race condition with the garbage collector. When this\n+     * method is called, the garbage collector may already be in the process of\n+     * (or already completed) clearing and\/or enqueueing this reference.\n+     *\n+     * Avoid this race by ensuring the referent remains strongly-reachable until\n+     * after the call to clear(), using {@link #reachabilityFence(Object)} if necessary.\n+     *\n@@ -395,1 +404,3 @@\n-     * clears references it does so directly, without invoking this method.\n+     * clears references it does so directly, without invoking this method. The\n+     * {@link #enqueue} method also clears references directly, without invoking\n+     * this method.\n@@ -473,2 +484,2 @@\n-     * Clears this reference object and adds it to the queue with which\n-     * it is registered, if any.\n+     * Clears this reference object, then attempts to add it to the queue with\n+     * which it is registered, if any.\n@@ -476,1 +487,11 @@\n-     * <p> This method is invoked only by Java code; when the garbage collector\n+     * <p>If this reference was already enqueued (by the garbage collector, or a\n+     * previous call to {@code enqueue}), this method is <b><i>not successful<\/i><\/b>,\n+     * and returns false.\n+     *\n+     * <p>Memory consistency effects: Actions in a thread prior to calling\n+     * {@code enqueue} <b><i>successfully<\/i><\/b>\n+     * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+     * the reference is removed from the queue by {@link ReferenceQueue#poll}\n+     * or {@link ReferenceQueue#remove}.\n+     *\n+     * <p>This method is invoked only by Java code; when the garbage collector\n@@ -478,0 +499,8 @@\n+     *\n+     * @apiNote\n+     * Use of this method allows the registered queue's\n+     * {@link ReferenceQueue#poll} and {@link ReferenceQueue#remove} methods\n+     * to return this reference even though the referent is still strongly\n+     * reachable. That is, before the referent has reached the expected\n+     * reachability level.\n+\n@@ -514,1 +543,1 @@\n-     * Ensures that the object referenced by the given reference remains\n+     * Ensures that the given object remains\n@@ -516,2 +545,2 @@\n-     * regardless of any prior actions of the program that might otherwise cause\n-     * the object to become unreachable; thus, the referenced object is not\n+     * regardless of any other actions of the program that might otherwise cause\n+     * the object to become unreachable; thus, the object is not\n@@ -519,2 +548,5 @@\n-     * this method.  Invocation of this method does not itself initiate garbage\n-     * collection or finalization.\n+     * this method. References to the given object will not be cleared (or\n+     * enqueued, if applicable) by the garbage collector until after invocation\n+     * of this method.\n+     * Invocation of this method does not itself initiate reference processing,\n+     * garbage collection, or finalization.\n@@ -525,9 +557,9 @@\n-     * triggering garbage collection.  This method is designed for use in\n-     * uncommon situations of premature finalization where using\n-     * {@code synchronized} blocks or methods, or using other synchronization\n-     * facilities are not possible or do not provide the desired control.  This\n-     * method is applicable only when reclamation may have visible effects,\n-     * which is possible for objects with finalizers (See Section {@jls 12.6}\n-     * of <cite>The Java Language Specification<\/cite>) that\n-     * are implemented in ways that rely on ordering control for\n-     * correctness.\n+     * triggering garbage collection.  This method is applicable only\n+     * when reclamation may have visible effects,\n+     * such as for objects with finalizers or that use Cleaner.\n+     *\n+     * <p>Memory consistency effects: Actions in a thread prior to calling\n+     * {@code reachabilityFence(x)}\n+     * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+     * the garbage collector clears any reference to {code x}.\n+\n@@ -536,1 +568,1 @@\n-     * Finalization may occur whenever the virtual machine detects that no\n+     * Reference processing or finalization may occur whenever the virtual machine detects that no\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":53,"deletions":21,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -37,0 +37,7 @@\n+ *\n+ * <p>Memory consistency effects: The enqueueing of a reference on a\n+ * queue (by the garbage collector, or by a successful call to {@link Reference#enqueue})\n+ * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happens-before<\/i><\/a>\n+ * the reference is removed from the queue by {@link ReferenceQueue#poll} or\n+ * {@link ReferenceQueue#remove}.\n+ *\n@@ -176,0 +183,6 @@\n+     * @apiNote\n+     * If the returned reference was added to this queue by a call to\n+     * {@link Reference#enqueue()} instead of by the garbage collector, its\n+     * former referent (which has since been cleared) could still be strongly\n+     * reachable.\n+     *\n@@ -197,0 +210,6 @@\n+     * @apiNote\n+     * If the returned reference was added to this queue by a call to\n+     * {@link Reference#enqueue()} instead of by the garbage collector, its\n+     * former referent (which has since been cleared) could still be strongly\n+     * reachable.\n+     *\n@@ -228,0 +247,6 @@\n+     * @apiNote\n+     * If the returned reference was added to this queue by a call to\n+     * {@link Reference#enqueue()} instead of by the garbage collector, its\n+     * former referent (which has since been cleared) could still be strongly\n+     * reachable.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/ReferenceQueue.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -96,0 +96,22 @@\n+ * <h3>Memory Consistency Properties<\/h3>\n+ * Certain interactions between the garbage collector, references, and reference\n+ * queues form\n+ * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happens-before<\/i><\/a>\n+ * relationships:\n+ *\n+ * <ul>\n+ *\n+ * <li> Actions in a thread prior to calling\n+ * {@link Reference#reachabilityFence Reference.reachabilityFence(x)}\n+ * <i>happen-before<\/i> the garbage collector clears any reference to {@code x}.<\/li>\n+ *\n+ * <li>The clearing of a reference by the garbage collector <i>happens-before<\/i>\n+ * the garbage collector enqueues the reference.<\/li>\n+ *\n+ * <li> The enqueueing of a reference (by the garbage collector, or\n+ * by a successful call to {@link Reference#enqueue}) <i>happens-before<\/i>\n+ * the reference is removed from the queue by {@link ReferenceQueue#poll} or\n+ * {@link ReferenceQueue#remove}.<\/li>\n+ *\n+ * <\/ul>\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/package-info.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}