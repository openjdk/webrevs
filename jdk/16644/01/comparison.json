{"files":[{"patch":"@@ -218,0 +218,8 @@\n+     * <p>The object being registered is kept strongly-reachable (and therefore not eligible\n+     * for cleaning) during the register() method.\n+     *\n+     * <p>Memory consistency effects: Actions in a thread prior to calling\n+     * Cleaner.register()\n+     * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+     * the cleaning action is run by the Cleaner's thread.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Cleaner.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -391,2 +391,3 @@\n-     * Clears this reference object.  Invoking this method will not cause this\n-     * object to be enqueued.\n+     * Clears this reference object. Invoking this method does not enqueue this\n+     * object, and the garbage collector will no longer clear or enqueue this\n+     * object.\n@@ -394,1 +395,1 @@\n-     * <p> This method is invoked only by Java code; when the garbage collector\n+     * <p>When the garbage collector\n@@ -396,0 +397,9 @@\n+     *\n+     * @apiNote\n+     * There is a potential race condition with the garbage collector. When this\n+     * method is called, the garbage collector may already be in the process of\n+     * (or already completed) clearing and\/or enqueueing this reference.\n+     *\n+     * Avoid this race by ensuring the referent remains strongly reachable until\n+     * after the call to clear(), using {@link #reachabilityFence(Object)} if\n+     * necessary.\n@@ -473,2 +483,20 @@\n-     * Clears this reference object and adds it to the queue with which\n-     * it is registered, if any.\n+     * Clears this reference object, then attempts to add it to the queue with\n+     * which it is registered, if any.\n+     *\n+     * <p>If this reference is registered with a queue but not yet enqueued,\n+     * the reference is added to the queue; this method is\n+     * <b><i>successful<\/i><\/b> and returns true.\n+     * If this reference is not registered with a queue, or was already enqueued\n+     * (by the garbage collector, or a previous call to {@code enqueue}), this\n+     * method is <b><i>unnsuccessful<\/i><\/b> and returns false.\n+     *\n+     * <p>Memory consistency effects: Actions in a thread prior to calling\n+     * {@code enqueue} <b><i>successfully<\/i><\/b>\n+     * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+     * the reference is removed from the queue by {@link ReferenceQueue#poll}\n+     * or {@link ReferenceQueue#remove}. An <b><i>unsuccessful<\/i><\/b>\n+     * {@code enqueue} call has no memory consistency effects.\n+     *\n+     * <p>When the garbage collector\n+     * clears and enqueues references it does so directly, without invoking this\n+     * method or the {@link #clear()} method.\n@@ -476,2 +504,5 @@\n-     * <p> This method is invoked only by Java code; when the garbage collector\n-     * enqueues references it does so directly, without invoking this method.\n+     * @apiNote\n+     * Use of this method allows the registered queue's\n+     * {@link ReferenceQueue#poll} and {@link ReferenceQueue#remove} methods\n+     * to return this reference even though the referent is still strongly\n+     * reachable.\n@@ -514,1 +545,1 @@\n-     * Ensures that the object referenced by the given reference remains\n+     * Ensures that the given object remains\n@@ -516,2 +547,2 @@\n-     * regardless of any prior actions of the program that might otherwise cause\n-     * the object to become unreachable; thus, the referenced object is not\n+     * regardless of any other actions of the program that might otherwise cause\n+     * the object to become unreachable; thus, the object is not\n@@ -519,2 +550,5 @@\n-     * this method.  Invocation of this method does not itself initiate garbage\n-     * collection or finalization.\n+     * this method. References to the given object will not be cleared (or\n+     * enqueued, if applicable) by the garbage collector until after invocation\n+     * of this method.\n+     * Invocation of this method does not itself initiate reference processing,\n+     * garbage collection, or finalization.\n@@ -525,9 +559,11 @@\n-     * triggering garbage collection.  This method is designed for use in\n-     * uncommon situations of premature finalization where using\n-     * {@code synchronized} blocks or methods, or using other synchronization\n-     * facilities are not possible or do not provide the desired control.  This\n-     * method is applicable only when reclamation may have visible effects,\n-     * which is possible for objects with finalizers (See Section {@jls 12.6}\n-     * of <cite>The Java Language Specification<\/cite>) that\n-     * are implemented in ways that rely on ordering control for\n-     * correctness.\n+     * triggering garbage collection.  This method is applicable only\n+     * when reclamation may have visible effects,\n+     * such as for objects that use finalizers or {@link Cleaner}, or code that\n+     * performs\n+     * <a href=\"{@docRoot}\/java.base\/java\/lang\/ref\/package-summary.html\">reference processing<\/a>.\n+     *\n+     * <p>Memory consistency effects: Actions in a thread prior to calling\n+     * {@code reachabilityFence(x)}\n+     * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+     * the garbage collector clears any reference to {code x}.\n+\n@@ -536,1 +572,1 @@\n-     * Finalization may occur whenever the virtual machine detects that no\n+     * Reference processing or finalization may occur whenever the virtual machine detects that no\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":58,"deletions":22,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -37,0 +37,7 @@\n+ *\n+ * <p>Memory consistency effects: The enqueueing of a reference on a\n+ * queue (by the garbage collector, or by a successful call to {@link Reference#enqueue})\n+ * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happens-before<\/i><\/a>\n+ * the reference is removed from the queue by {@link ReferenceQueue#poll} or\n+ * {@link ReferenceQueue#remove}.\n+ *\n@@ -178,0 +185,1 @@\n+     * @see java.lang.ref.Reference#enqueue()\n@@ -209,0 +217,2 @@\n+     *\n+     * @see java.lang.ref.Reference#enqueue()\n@@ -230,0 +240,1 @@\n+     * @see java.lang.ref.Reference#enqueue()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/ReferenceQueue.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -96,0 +96,22 @@\n+ * <h3>Memory Consistency Properties<\/h3>\n+ * Certain interactions between the garbage collector, references, and reference\n+ * queues form\n+ * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happens-before<\/i><\/a>\n+ * relationships:\n+ *\n+ * <ul>\n+ *\n+ * <li> Actions in a thread prior to calling\n+ * {@link Reference#reachabilityFence Reference.reachabilityFence(x)}\n+ * <i>happen-before<\/i> the garbage collector clears any reference to {@code x}.<\/li>\n+ *\n+ * <li>The clearing of a reference by the garbage collector <i>happens-before<\/i>\n+ * the garbage collector enqueues the reference.<\/li>\n+ *\n+ * <li> The enqueueing of a reference (by the garbage collector, or\n+ * by a successful call to {@link Reference#enqueue}) <i>happens-before<\/i>\n+ * the reference is removed from the queue by {@link ReferenceQueue#poll} or\n+ * {@link ReferenceQueue#remove}.<\/li>\n+ *\n+ * <\/ul>\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/package-info.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}