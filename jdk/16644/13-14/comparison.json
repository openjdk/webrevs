{"files":[{"patch":"@@ -573,6 +573,17 @@\n-     * Reference processing or finalization may occur whenever the virtual machine detects that no\n-     * reference to an object will ever be stored in the heap: The garbage\n-     * collector may reclaim an object even if the fields of that object are\n-     * still in use, so long as the object has otherwise become unreachable.\n-     * This may have surprising and undesirable effects in cases such as the\n-     * following example in which the bookkeeping associated with a class is\n+     * Reference processing or finalization may occur when the virtual machine\n+     * detects that there is no further need for an object. The garbage collector\n+     * may reclaim an object even if values from that object's fields are still\n+     * in use, or while a method on the object is still running, so long as the\n+     * object has otherwise become unreachable.\n+     * <p>\n+     * This may have surprising and undesirable effects, in particular when using\n+     * a Cleaner or finalizer for cleanup. If an object becomes unreachable while\n+     * a method on the object is running, it can lead to a race between the\n+     * program thread running the method and the cleanup thread running the\n+     * Cleaner or finalizer. For instance, the cleanup thread could cleanup the\n+     * resource, followed by the program thread (still running the method)\n+     * attempting to access the now-already-freed resource.\n+     * {@code reachabilityFence} can prevent this race by ensuring that the\n+     * object remains strongly reachable.\n+     * <p>\n+     * The following is an example in which the bookkeeping associated with a class is\n@@ -582,1 +593,1 @@\n-     * {@code ExternalResource} has been performed; in particular here, to\n+     * {@code ExternalResource} has been performed; specifically, to\n@@ -593,1 +604,1 @@\n-     *     myIndex = ...\n+     *     this.myIndex = ...\n@@ -598,1 +609,1 @@\n-     *     externalResourceArray[myIndex] = null;\n+     *     externalResourceArray[this.myIndex] = null;\n@@ -604,1 +615,1 @@\n-     *       int i = myIndex;\n+     *       int i = this.myIndex; \/\/ last use of 'this' Resource in action()\n@@ -615,1 +626,1 @@\n-     * Here, the invocation of {@code reachabilityFence} is nonintuitively\n+     * The invocation of {@code reachabilityFence} is\n@@ -619,1 +630,1 @@\n-     * object.  This might be the case if, for example a usage in a user program\n+     * object.  This might be the case if, for example, a usage in a user program\n@@ -621,5 +632,5 @@\n-     * reference to this {@code Resource}.  While probably overkill here,\n-     * {@code reachabilityFence} is placed in a {@code finally} block to ensure\n-     * that it is invoked across all paths in the method.  In a method with more\n-     * complex control paths, you might need further precautions to ensure that\n-     * {@code reachabilityFence} is encountered along all of them.\n+     * reference to this {@code Resource}.  The\n+     * {@code reachabilityFence} call is placed in a {@code finally} block to ensure\n+     * that it is invoked across all paths in the method. A more complex method\n+     * might need further precautions to ensure that\n+     * {@code reachabilityFence} is encountered along all code paths.\n@@ -652,1 +663,1 @@\n-     * remains a better option in cases where this approach is not as efficient,\n+     * remains a better option in cases where synchronization is not as efficient,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":29,"deletions":18,"binary":false,"changes":47,"status":"modified"}]}