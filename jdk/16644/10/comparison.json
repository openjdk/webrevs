{"files":[{"patch":"@@ -218,0 +218,8 @@\n+     * <p>The object being registered is kept strongly reachable (and therefore not eligible\n+     * for cleaning) during the register() method.\n+     *\n+     * <p><a href=\"{@docRoot}\/java.base\/java\/lang\/ref\/package-summary.html#MemoryConsistency\">Memory consistency effects<\/a>:\n+     * Actions in a thread prior to calling {@code Cleaner.register()}\n+     * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+     * the cleaning action is run by the Cleaner's thread.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Cleaner.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -391,2 +391,3 @@\n-     * Clears this reference object.  Invoking this method will not cause this\n-     * object to be enqueued.\n+     * Clears this reference object. Invoking this method does not enqueue this\n+     * object, and the garbage collector will no longer clear or enqueue this\n+     * object.\n@@ -394,2 +395,11 @@\n-     * <p> This method is invoked only by Java code; when the garbage collector\n-     * clears references it does so directly, without invoking this method.\n+     * <p>When the garbage collector or the {@link #enqueue()} method clear\n+     * references they do so directly, without invoking this method.\n+     *\n+     * @apiNote\n+     * There is a potential race condition with the garbage collector. When this\n+     * method is called, the garbage collector may already be in the process of\n+     * (or already completed) clearing and\/or enqueueing this reference.\n+     *\n+     * Avoid this race by ensuring the referent remains strongly reachable until\n+     * after the call to clear(), using {@link #reachabilityFence(Object)} if\n+     * necessary.\n@@ -473,2 +483,22 @@\n-     * Clears this reference object and adds it to the queue with which\n-     * it is registered, if any.\n+     * Clears this reference object, then attempts to add it to the queue with\n+     * which it is registered, if any.\n+     *\n+     * <p>If this reference is registered with a queue but not yet enqueued,\n+     * the reference is added to the queue; this method is\n+     * <b><i>successful<\/i><\/b> and returns true.\n+     * If this reference is not registered with a queue, or was already enqueued\n+     * (by the garbage collector, or a previous call to {@code enqueue}), this\n+     * method is <b><i>unsuccessful<\/i><\/b> and returns false.\n+     *\n+     * <p><a href=\"{@docRoot}\/java.base\/java\/lang\/ref\/package-summary.html#MemoryConsistency\">Memory consistency effects<\/a>:\n+     * Actions in a thread prior to calling\n+     * {@code enqueue} <b><i>successfully<\/i><\/b>\n+     * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+     * the reference is removed from the queue by {@link ReferenceQueue#poll}\n+     * or {@link ReferenceQueue#remove}. <b><i>Unsuccessful<\/i><\/b>\n+     * {@code enqueue} calls have no specified memory consistency effects.\n+     *\n+     * <p> When this method clears references it does so directly, without\n+     * invoking the {@link #clear()} method. When the garbage collector clears\n+     * and enqueues references it does so directly, without invoking the\n+     * {@link #clear()} method or this method.\n@@ -476,2 +506,5 @@\n-     * <p> This method is invoked only by Java code; when the garbage collector\n-     * enqueues references it does so directly, without invoking this method.\n+     * @apiNote\n+     * Use of this method allows the registered queue's\n+     * {@link ReferenceQueue#poll} and {@link ReferenceQueue#remove} methods\n+     * to return this reference even though the referent may still be strongly\n+     * reachable.\n@@ -514,4 +547,5 @@\n-     * Ensures that the object referenced by the given reference remains\n-     * <a href=\"package-summary.html#reachability\"><em>strongly reachable<\/em><\/a>,\n-     * regardless of any prior actions of the program that might otherwise cause\n-     * the object to become unreachable; thus, the referenced object is not\n+     * Ensures that the given object remains\n+     * <a href=\"package-summary.html#reachability\"><em>strongly reachable<\/em><\/a>.\n+     * This reachability is assured regardless of any optimizing transformations\n+     * the virtual machine may perform that might otherwise allow the object to\n+     * become unreachable (see {@jls 12.6.1}). Thus, the given object is not\n@@ -519,2 +553,5 @@\n-     * this method.  Invocation of this method does not itself initiate garbage\n-     * collection or finalization.\n+     * this method. References to the given object will not be cleared (or\n+     * enqueued, if applicable) by the garbage collector until after invocation\n+     * of this method.\n+     * Invocation of this method does not itself initiate reference processing,\n+     * garbage collection, or finalization.\n@@ -525,9 +562,11 @@\n-     * triggering garbage collection.  This method is designed for use in\n-     * uncommon situations of premature finalization where using\n-     * {@code synchronized} blocks or methods, or using other synchronization\n-     * facilities are not possible or do not provide the desired control.  This\n-     * method is applicable only when reclamation may have visible effects,\n-     * which is possible for objects with finalizers (See Section {@jls 12.6}\n-     * of <cite>The Java Language Specification<\/cite>) that\n-     * are implemented in ways that rely on ordering control for\n-     * correctness.\n+     * triggering garbage collection.  This method is applicable only\n+     * when reclamation may have visible effects,\n+     * such as for objects that use finalizers or {@link Cleaner}, or code that\n+     * performs\n+     * <a href=\"{@docRoot}\/java.base\/java\/lang\/ref\/package-summary.html\">reference processing<\/a>.\n+     *\n+     * <p><a href=\"{@docRoot}\/java.base\/java\/lang\/ref\/package-summary.html#MemoryConsistency\">Memory consistency effects<\/a>:\n+     * Actions in a thread prior to calling {@code reachabilityFence(x)}\n+     * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happen-before<\/i><\/a>\n+     * the garbage collector clears any reference to {@code x}.\n+\n@@ -536,1 +575,1 @@\n-     * Finalization may occur whenever the virtual machine detects that no\n+     * Reference processing or finalization may occur whenever the virtual machine detects that no\n@@ -618,1 +657,2 @@\n-     * @param ref the reference. If {@code null}, this method has no effect.\n+     * @param ref the reference to the object to keep strongly reachable. If\n+     * {@code null}, this method has no effect.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":65,"deletions":25,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -37,0 +37,8 @@\n+ *\n+ * <p><a href=\"{@docRoot}\/java.base\/java\/lang\/ref\/package-summary.html#MemoryConsistency\">Memory consistency effects<\/a>:\n+ * The enqueueing of a reference on a queue (by the garbage collector, or by a\n+ * successful call to {@link Reference#enqueue})\n+ * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happens-before<\/i><\/a>\n+ * the reference is removed from the queue by {@link ReferenceQueue#poll} or\n+ * {@link ReferenceQueue#remove}.\n+ *\n@@ -178,0 +186,1 @@\n+     * @see java.lang.ref.Reference#enqueue()\n@@ -209,0 +218,2 @@\n+     *\n+     * @see java.lang.ref.Reference#enqueue()\n@@ -230,0 +241,1 @@\n+     * @see java.lang.ref.Reference#enqueue()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/ReferenceQueue.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -96,0 +96,37 @@\n+ * <a id=\"MemoryConsistency\"><\/a>\n+ * <h3>Memory Consistency Properties<\/h3>\n+ * Certain interactions between the garbage collector, references, and reference\n+ * queues form\n+ * <a href=\"{@docRoot}\/java.base\/java\/util\/concurrent\/package-summary.html#MemoryVisibility\"><i>happens-before<\/i><\/a>\n+ * relationships:\n+ *\n+ * <ul>\n+ *\n+ * <li> Actions in a thread prior to calling\n+ * {@link Reference#reachabilityFence Reference.reachabilityFence(x)}\n+ * <i>happen-before<\/i> the garbage collector clears any reference to {@code x}.<\/li>\n+ *\n+ * <li>The clearing of a reference by the garbage collector <i>happens-before<\/i>\n+ * the garbage collector enqueues the reference.<\/li>\n+ *\n+ * <li> The enqueueing of a reference (by the garbage collector, or\n+ * by a successful call to {@link Reference#enqueue}) <i>happens-before<\/i>\n+ * the reference is removed from the queue (\"dequeued\") by {@link ReferenceQueue#poll} or\n+ * {@link ReferenceQueue#remove}.<\/li>\n+ *\n+ * <li>The dequeuing of a reference to a\n+ * {@linkplain Cleaner#register(Object object, Runnable action) registered}\n+ * object, by the Cleaner thread, <i>happens-before<\/i> the Cleaner thread runs\n+ * the cleaning action for that object.<\/li>\n+ *\n+ * <\/ul>\n+ *\n+ * The above chain of <i>happens-before<\/i> edges ensures that actions in a\n+ * thread prior to a {@link Reference#reachabilityFence Reference.reachabilityFence(x)}\n+ * <i>happen-before<\/i> cleanup code for {@code x} runs on the cleaner thread.\n+ *\n+ * In particular, changes to the state of {@code x} made before\n+ * {@code reachabilityFence(x)} will be visible to the cleanup code running on\n+ * the cleaner thread without additional synchronization.\n+ * See {@jls 17.4.5}.\n+ *\n@@ -106,1 +143,1 @@\n- * by some thread without traversing any reference objects.  A\n+ * by some thread without traversing any {@link Reference} objects.  A\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/package-info.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"}]}