{"files":[{"patch":"@@ -120,31 +120,19 @@\n-\n-\/*\n-Lemma 1: For a given known bits information, _lo and _hi bounds of the corresponding value\n-        range is computed using the following formulas:-\n-        - _hi = ~ZEROS\n-        - _lo = ONES\n-Proof:-\n-  - KnownBits.ZEROS and KnownBits.ONES are inferred out of the common prefix of the value range\n-    delimiting bounds.\n-\n-  - Thus, ~KnownBits.ZEROS not only includes set bits in the common prefix but also optimistically assumes\n-    that all other bits not included in the common prefix are also set.\n-\n-  - Consider the following illustration, which performs round-trip translation\n-    of a value range via knowbits information, e.g.\n-    A) Initial value range bounds to infer knownbits.\n-      _lo = 0b11000100\n-      _hi = 0b11000110\n-      _common_prefix      = 0b11000100\n-      _common_prefix_mask = 0b11111100\n-      _known_bits.ones    = _lo & _common_prefix_mask  = 0b11000100\n-      _known_bits.zeros   = ~_lo & _common_prefix_mask = 0b00111000\n-\n-    B) Now, transform the computed knownbits back to the value range.\n-      _new_lo = _known_bits.ones  = 0b11000100\n-      _new_hi = ~known_bits.zeros = 0b11000111\n-\n-  - We now know that ~KnownBits.ZEROS >= UB >= LB >= KnownBits.ONES\n-  - Therefore, popcount(ONES) and popcount(~ZEROS) can safely be assumed as the upper and lower\n-    bounds of the result value range.\n-*\/\n+\/\/ We use the KnownBits information from the integer types to derive how many one bits\n+\/\/ we have at least and at most.\n+\/\/ From the definition of KnownBits, we know:\n+\/\/   zeros: Indicates which bits must be 0: ones[i] =1 -> t[i]=0\n+\/\/   ones:  Indicates which bits must be 1: zeros[i]=1 -> t[i]=1\n+\/\/\n+\/\/ From this, we derive:\n+\/\/   numer_of_zeros_in_t >= pop_count(zeros)\n+\/\/   -> number_of_ones_in_t <= bits_per_type - pop_count(zeros) = pop_count(~zeros)\n+\/\/   number_of_ones_in_t >= pop_count(ones)\n+\/\/\n+\/\/ By definition:\n+\/\/   pop_count(t) = number_of_ones_in_t\n+\/\/\n+\/\/ It follows:\n+\/\/   pop_count(ones) <= pop_count(t) <= pop_count(~zeros)\n+\/\/\n+\/\/ Note: signed _lo and _hi, as well as unsigned _ulo and _uhi bounds of the integer types\n+\/\/       are already reflected in the KnownBits information, see TypeInt \/ TypeLong definitions.\n","filename":"src\/hotspot\/share\/opto\/countbitsnode.cpp","additions":19,"deletions":31,"binary":false,"changes":50,"status":"modified"}]}