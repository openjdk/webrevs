{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import jdk.test.lib.Utils;\n@@ -45,0 +44,14 @@\n+    static final int SIZE = 4096;\n+\n+    static int rand_numI = G.uniformInts(0, Integer.MAX_VALUE).next();\n+    static final int rand_bndI1 = G.uniformInts(0xF, Integer.MAX_VALUE).next();\n+    static final int rand_bndI2 = G.uniformInts(0xFF, Integer.MAX_VALUE).next();\n+    static final int rand_popcI1 = G.uniformInts(0, 2).next();\n+    static final int rand_popcI2 = G.uniformInts(10, 20).next();\n+\n+    static long rand_numL = G.uniformLongs(0, Long.MAX_VALUE).next();\n+    static final long rand_bndL1 = G.uniformLongs(0xFL, Long.MAX_VALUE).next();\n+    static final long rand_bndL2 = G.uniformLongs(0xFFL, Long.MAX_VALUE).next();\n+    static final long rand_popcL1 = G.uniformLongs(0, 3).next();\n+    static final long rand_popcL2 = G.uniformLongs(20, 40).next();\n+\n@@ -125,1 +138,45 @@\n-    static final int SIZE = 4096;\n+    @Test\n+    public int testPopCountRandomInt() {\n+        int num = Math.clamp(rand_numI, Math.min(rand_bndI1, rand_bndI2), Math.max(rand_bndI1, rand_bndI2));\n+        if (Integer.bitCount(num) >= rand_popcI1 && Integer.bitCount(num) < rand_popcI2) {\n+            return 1;\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    @Check(test = \"testPopCountRandomInt\")\n+    public void checkPopCountRandomInt(int res) {\n+        if (res == 1) {\n+            int exp = 0;\n+            int num = Math.clamp(rand_numI, Math.min(rand_bndI1, rand_bndI2), Math.max(rand_bndI1, rand_bndI2));\n+            while(num != 0) {\n+                num &= (num - 1);\n+                exp++;\n+            }\n+            Verify.checkEQ(exp >= rand_popcI1 && exp < rand_popcI2, true);\n+        }\n+    }\n+\n+    @Test\n+    public long testPopCountRandomLong() {\n+        long num = Math.clamp(rand_numL, Math.min(rand_bndL1, rand_bndL2), Math.max(rand_bndL1, rand_bndL2));\n+        if (Long.bitCount(num) >= rand_popcL1 && Long.bitCount(num) < rand_popcL2) {\n+            return 1L;\n+        } else {\n+            return -1L;\n+        }\n+    }\n+\n+    @Check(test = \"testPopCountRandomLong\")\n+    public void checkPopCountRandomLong(long res) {\n+        if (res == 1) {\n+            int exp = 0;\n+            long num = Math.clamp(rand_numL, Math.min(rand_bndL1, rand_bndL2), Math.max(rand_bndL1, rand_bndL2));\n+            while(num != 0) {\n+                num &= (num - 1L);\n+                exp++;\n+            }\n+            Verify.checkEQ(exp >= rand_popcL1 && exp < rand_popcL2, true);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestPopCountValueTransforms.java","additions":59,"deletions":2,"binary":false,"changes":61,"status":"modified"}]}