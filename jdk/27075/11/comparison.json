{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/population_count.hpp\"\n@@ -119,0 +120,39 @@\n+\/\/ We use the KnownBits information from the integer types to derive how many one bits\n+\/\/ we have at least and at most.\n+\/\/ From the definition of KnownBits, we know:\n+\/\/   zeros: Indicates which bits must be 0: zeros[i]=1 -> t[i]=0\n+\/\/   ones:  Indicates which bits must be 1: ones[i]=1 -> t[i]=1\n+\/\/\n+\/\/ From this, we derive:\n+\/\/   numer_of_zeros_in_t >= pop_count(zeros)\n+\/\/   -> number_of_ones_in_t <= bits_per_type - pop_count(zeros) = pop_count(~zeros)\n+\/\/   number_of_ones_in_t >= pop_count(ones)\n+\/\/\n+\/\/ By definition:\n+\/\/   pop_count(t) = number_of_ones_in_t\n+\/\/\n+\/\/ It follows:\n+\/\/   pop_count(ones) <= pop_count(t) <= pop_count(~zeros)\n+\/\/\n+\/\/ Note: signed _lo and _hi, as well as unsigned _ulo and _uhi bounds of the integer types\n+\/\/       are already reflected in the KnownBits information, see TypeInt \/ TypeLong definitions.\n+const Type* PopCountINode::Value(PhaseGVN* phase) const {\n+  const Type* t = phase->type(in(1));\n+  if (t == Type::TOP) {\n+    return Type::TOP;\n+  }\n+  const TypeInt* tint = t->isa_int();\n+  KnownBits<juint> bits = tint->_bits;\n+  return TypeInt::make(population_count(bits._ones), population_count(~bits._zeros), tint->_widen);\n+\n+}\n+\n+const Type* PopCountLNode::Value(PhaseGVN* phase) const {\n+  const Type* t = phase->type(in(1));\n+  if (t == Type::TOP) {\n+    return Type::TOP;\n+  }\n+  const TypeLong* tlong = t->isa_long();\n+  KnownBits<julong> bits = tlong->_bits;\n+  return TypeInt::make(population_count(bits._ones), population_count(~bits._zeros), tlong->_widen);\n+}\n","filename":"src\/hotspot\/share\/opto\/countbitsnode.cpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+  virtual const Type* Value(PhaseGVN* phase) const;\n@@ -91,0 +92,1 @@\n+  virtual const Type* Value(PhaseGVN* phase) const;\n","filename":"src\/hotspot\/share\/opto\/countbitsnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,214 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8365205\n+ * @summary C2: Optimize popcount value computation using knownbits\n+ * @library \/test\/lib \/\n+ * @run driver compiler.intrinsics.TestPopCountValueTransforms\n+ *\/\n+package compiler.intrinsics;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.generators.*;\n+import compiler.lib.verify.*;\n+import static compiler.lib.generators.Generators.*;\n+\n+public class TestPopCountValueTransforms {\n+    int  [] inI1;\n+    int  [] inI2;\n+    long [] inL1;\n+    long [] inL2;\n+\n+    static final int SIZE = 4096;\n+\n+    static final int rand_bndI1 = G.ints().next();\n+    static final int rand_bndI2 = G.ints().next();\n+    static final int rand_popcI1 = G.uniformInts(0, 32).next();\n+    static final int rand_popcI2 = G.uniformInts(0, 32).next();\n+\n+    static final long rand_bndL1 = G.longs().next();\n+    static final long rand_bndL2 = G.longs().next();\n+    static final long rand_popcL1 = G.uniformLongs(0, 64).next();\n+    static final long rand_popcL2 = G.uniformLongs(0, 64).next();\n+\n+    @Test\n+    @IR(counts = {IRNode.POPCOUNT_L, \" 0 \"})\n+    public long testPopCountElisionLong1(long num) {\n+        num = Math.clamp(num, 0xF000F000L, 0xF000F0FFL);\n+        \/\/ PopCount ValueRange = {lo:8, hi:16}\n+        if (Long.bitCount(num) < 8 || Long.bitCount(num) > 16) {\n+            return 0;\n+        }\n+        return 1;\n+    }\n+\n+    @Run(test = {\"testPopCountElisionLong1\"})\n+    public void runPopCountElisionLong1() {\n+        long res = 1;\n+        for (int i = 0; i < inL1.length; i++) {\n+            res &= testPopCountElisionLong1(inL1[i]);\n+        }\n+        Verify.checkEQ(res, 1L);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.POPCOUNT_L, \" 1 \"})\n+    public long testPopCountElisionLong2(long num) {\n+        num = Math.clamp(num, 0x3L, 0xFFFFL);\n+        \/\/ PopCount ValueRange = {lo:0, hi:16}\n+        if (Long.bitCount(num) >= 0 && Long.bitCount(num) <= 11) {\n+            return 0;\n+        }\n+        return 1;\n+    }\n+\n+    @Run(test = {\"testPopCountElisionLong2\"})\n+    public void runPopCountElisionLong2() {\n+        long res = 0;\n+        for (int i = 0; i < inL2.length; i++) {\n+            res |= testPopCountElisionLong2(inL2[i]);\n+        }\n+        Verify.checkEQ(res, 0L);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.POPCOUNT_I, \" 0 \"})\n+    public int testPopCountElisionInt1(int num) {\n+        \/\/ PopCount ValueRange = {lo:11, hi:15}\n+        num = Math.clamp(num, 0xFE00F000, 0xFE00F00F);\n+        if (Integer.bitCount(num) < 11 || Integer.bitCount(num) > 15) {\n+            return 0;\n+        }\n+        return 1;\n+    }\n+\n+    @Run(test = {\"testPopCountElisionInt1\"})\n+    public void runPopCountElisionInt1() {\n+        int res = 1;\n+        for (int i = 0; i < inI1.length; i++) {\n+            res &= testPopCountElisionInt1(inI1[i]);\n+        }\n+        Verify.checkEQ(res, 1);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.POPCOUNT_I, \" 1 \"})\n+    public int testPopCountElisionInt2(int num) {\n+        \/\/ PopCount ValueRange = {lo:0, hi:8}\n+        num = Math.clamp(num, 0x3, 0xFF);\n+        if (Integer.bitCount(num) >= 0 && Integer.bitCount(num) <= 5) {\n+            return 0;\n+        }\n+        return 1;\n+    }\n+\n+    @Run(test = {\"testPopCountElisionInt2\"})\n+    public void runPopCountElisionInt2() {\n+        int res = 0;\n+        for (int i = 0; i < inI2.length; i++) {\n+            res |= testPopCountElisionInt2(inI2[i]);\n+        }\n+        Verify.checkEQ(res, 0);\n+    }\n+\n+    @Test\n+    public void testPopCountRandomInt(int rand_numI) {\n+        int res = 0;\n+        int num = Math.clamp(rand_numI, Math.min(rand_bndI1, rand_bndI2), Math.max(rand_bndI1, rand_bndI2));\n+        if (Integer.bitCount(num) >= rand_popcI1 && Integer.bitCount(num) < rand_popcI2) {\n+            res = 1;\n+        } else {\n+            res = -1;\n+        }\n+        checkPopCountRandomInt(rand_numI, res);\n+    }\n+\n+    public void checkPopCountRandomInt(int rand_numI, int res) {\n+        int exp = 0;\n+        int num = Math.clamp(rand_numI, Math.min(rand_bndI1, rand_bndI2), Math.max(rand_bndI1, rand_bndI2));\n+        while(num != 0) {\n+            num &= (num - 1);\n+            exp++;\n+        }\n+        Verify.checkEQ(exp >= rand_popcI1 && exp < rand_popcI2 ? 1 : -1, res);\n+    }\n+\n+    @Run(test=\"testPopCountRandomInt\")\n+    public void runPopCountRandomInt() {\n+        testPopCountRandomInt(G.ints().next());\n+    }\n+\n+\n+    @Test\n+    public void testPopCountRandomLong(long rand_numL) {\n+        long res = 0;\n+        long num = Math.clamp(rand_numL, Math.min(rand_bndL1, rand_bndL2), Math.max(rand_bndL1, rand_bndL2));\n+        if (Long.bitCount(num) >= rand_popcL1 && Long.bitCount(num) < rand_popcL2) {\n+            res = 1L;\n+        } else {\n+            res = -1L;\n+        }\n+        checkPopCountRandomLong(rand_numL, res);\n+    }\n+\n+    public void checkPopCountRandomLong(long rand_numL, long res) {\n+        int exp = 0;\n+        long num = Math.clamp(rand_numL, Math.min(rand_bndL1, rand_bndL2), Math.max(rand_bndL1, rand_bndL2));\n+        while(num != 0) {\n+            num &= (num - 1L);\n+            exp++;\n+        }\n+        Verify.checkEQ(exp >= rand_popcL1 && exp < rand_popcL2 ? 1L : -1L, res);\n+    }\n+\n+    @Run(test=\"testPopCountRandomLong\")\n+    public void runPopCountRandomLong() {\n+        testPopCountRandomLong(G.longs().next());\n+    }\n+\n+    public TestPopCountValueTransforms() {\n+        inL1  = new long[SIZE];\n+        G.fill(G.longs(), inL1);\n+\n+        inL2  = new long[SIZE];\n+        Generator<Long> genL = G.uniformLongs(0x3L, 0xFFCL);\n+        for (int i = 0; i < SIZE; i++) {\n+            inL2[i] = genL.next();\n+        }\n+\n+        inI1  = new int[SIZE];\n+        G.fill(G.ints(), inI1);\n+\n+        inI2  = new int[SIZE];\n+        Generator<Integer> genI = G.uniformInts(0x3, 0x1F);\n+        for (int i = 0; i < SIZE; i++) {\n+            inI2[i] = genI.next();\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestPopCountValueTransforms.java","additions":214,"deletions":0,"binary":false,"changes":214,"status":"added"},{"patch":"@@ -1613,0 +1613,5 @@\n+    public static final String POPCOUNT_I = PREFIX + \"POPCOUNT_I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(POPCOUNT_I, \"PopCountI\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.*;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@State(Scope.Thread)\n+public class PopCountValueTransform {\n+    public int lower_bound = 0;\n+    public int upper_bound = 10000;\n+\n+    @Benchmark\n+    public int LogicFoldingKerenlInt() {\n+        int res = 0;\n+        for (int i = lower_bound; i < upper_bound; i++) {\n+            int constrained_i = i & 0xFFFF;\n+            if (Integer.bitCount(constrained_i) > 16) {\n+                throw new AssertionError(\"Uncommon trap\");\n+            }\n+            res += constrained_i;\n+        }\n+        return res;\n+    }\n+\n+    @Benchmark\n+    public long LogicFoldingKerenLong() {\n+        long res = 0;\n+        for (int i = lower_bound; i < upper_bound; i++) {\n+            long constrained_i = i & 0xFFFFFFL;\n+            if (Long.bitCount(constrained_i) > 24) {\n+                throw new AssertionError(\"Uncommon trap\");\n+            }\n+            res += constrained_i;\n+        }\n+        return res;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/PopCountValueTransform.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}