{"files":[{"patch":"@@ -130,3 +130,2 @@\n-  - Thus, ~ZEROS not only include set bits in the common prefix but optimistically assumes\n-    that all other bits not included in common prefix are also set, thereby implicitly covering\n-    the actual set bits at runtime.\n+  - Thus, ~KnownBits.ZEROS not only include set bits in the common prefix but optimistically assumes\n+    that all other bits not included in common prefix are also set.\n@@ -144,1 +143,1 @@\n-    B) Now transform computed knownbits back to value range.\n+    B) Now, transform computed knownbits back to value range.\n@@ -149,2 +148,2 @@\n-  - Therefore, popcount(~ZEROS) is guaranteed to be greater than popcount(ONES).\n-  - Also, popcount(~ZEROS) >= Res.UB >= Res.LB >= popcount(ONES)\n+  - Therefore, popcount(ONES) and popcount(~ZEROS) can safely be assumed as the upper and lower\n+    bounds of the result value range.\n","filename":"src\/hotspot\/share\/opto\/countbitsnode.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8365205\n+ * @summary C2: Optimize popcount value computation using knownbits\n+ * @library \/test\/lib \/\n+ * @run driver compiler.intrinsics.TestPopCountValueTransforms\n+ *\/\n+package compiler.intrinsics;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.generators.*;\n+import compiler.lib.verify.*;\n+import static compiler.lib.generators.Generators.*;\n+import jdk.test.lib.Utils;\n+\n+public class TestPopCountValueTransforms {\n+    int  [] inI1;\n+    int  [] inI2;\n+    long [] inL1;\n+    long [] inL2;\n+\n+    @Test\n+    @IR(counts = {IRNode.POPCOUNT_L, \" 0 \"})\n+    public long testPopCountElisionLong1(long num) {\n+        num = Math.clamp(num, 0xF000F000L, 0xF000F0FFL);\n+        \/\/ PopCount ValueRange = {lo:8, hi:16}\n+        if (Long.bitCount(num) < 8 || Long.bitCount(num) > 16) {\n+            return 0;\n+        }\n+        return 1;\n+    }\n+\n+    @Run(test = {\"testPopCountElisionLong1\"}, mode = RunMode.STANDALONE)\n+    public void runPopCountElisionLong1() {\n+        long res = 1;\n+        for (int i = 0; i < inL1.length; i++) {\n+            res &= testPopCountElisionLong1(inL1[i]);\n+        }\n+        Verify.checkEQ(res, 1L);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.POPCOUNT_L, \" >0 \"})\n+    public long testPopCountElisionLong2(long num) {\n+        num = Math.clamp(num, 0x3L, 0xFFFFL);\n+        \/\/ PopCount ValueRange = {lo:0, hi:16}\n+        if (Long.bitCount(num) >= 0 && Long.bitCount(num) <= 11) {\n+            return 0;\n+        }\n+        return 1;\n+    }\n+\n+    @Run(test = {\"testPopCountElisionLong2\"}, mode = RunMode.STANDALONE)\n+    public void runPopCountElisionLong2() {\n+        long res = 0;\n+        for (int i = 0; i < inL2.length; i++) {\n+            res |= testPopCountElisionLong2(inL2[i]);\n+        }\n+        Verify.checkEQ(res, 0L);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.POPCOUNT_I, \" 0 \"})\n+    public int testPopCountElisionInt1(int num) {\n+        \/\/ PopCount ValueRange = {lo:11, hi:15}\n+        num = Math.clamp(num, 0xFE00F000, 0xFE00F00F);\n+        if (Integer.bitCount(num) < 11 || Integer.bitCount(num) > 15) {\n+            return 0;\n+        }\n+        return 1;\n+    }\n+\n+    @Run(test = {\"testPopCountElisionInt1\"}, mode = RunMode.STANDALONE)\n+    public void runPopCountElisionInt1() {\n+        int res = 1;\n+        for (int i = 0; i < inI1.length; i++) {\n+            res &= testPopCountElisionInt1(inI1[i]);\n+        }\n+        Verify.checkEQ(res, 1);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.POPCOUNT_I, \" >0 \"})\n+    public int testPopCountElisionInt2(int num) {\n+        \/\/ PopCount ValueRange = {lo:0, hi:8}\n+        num = Math.clamp(num, 0x3, 0xFF);\n+        if (Integer.bitCount(num) >= 0 && Integer.bitCount(num) <= 5) {\n+            return 0;\n+        }\n+        return 1;\n+    }\n+\n+    @Run(test = {\"testPopCountElisionInt2\"}, mode = RunMode.STANDALONE)\n+    public void runPopCountElisionInt2() {\n+        int res = 0;\n+        for (int i = 0; i < inI2.length; i++) {\n+            res |= testPopCountElisionInt2(inI2[i]);\n+        }\n+        Verify.checkEQ(res, 0);\n+    }\n+\n+    static final int SIZE = 4096;\n+\n+    public TestPopCountValueTransforms() {\n+        inL1  = new long[SIZE];\n+        G.fill(G.longs(), inL1);\n+\n+        inL2  = new long[SIZE];\n+        Generator<Long> genL = G.uniformLongs(0x3L, 0xFFCL);\n+        for (int i = 0; i < SIZE; i++) {\n+            inL2[i] = genL.next();\n+        }\n+\n+        inI1  = new int[SIZE];\n+        G.fill(G.ints(), inI1);\n+\n+        inI2  = new int[SIZE];\n+        Generator<Integer> genI = G.uniformInts(0x3, 0x1F);\n+        for (int i = 0; i < SIZE; i++) {\n+            inI2[i] = genI.next();\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:-TieredCompilation\", \"-XX:CompileThresholdScaling=0.2\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestPopCountValueTransforms.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -1613,0 +1613,5 @@\n+    public static final String POPCOUNT_I = PREFIX + \"POPCOUNT_I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(POPCOUNT_I, \"PopCountI\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-\n@@ -33,1 +32,0 @@\n-\n@@ -35,1 +33,0 @@\n-\n@@ -42,1 +39,1 @@\n-            int constrained_i = Integer.min(1179, Integer.max(1169, i));\n+            int constrained_i = i & 0xFFFF;\n@@ -52,2 +49,2 @@\n-            int constrained_i = Integer.min(1179, Integer.max(1169, i));\n-            if (Integer.bitCount(constrained_i) > 20 || Integer.bitCount(constrained_i) < 3) {\n+            int constrained_i = i & 0xFFFF;\n+            if (Integer.bitCount(constrained_i) > 16) {\n@@ -65,1 +62,1 @@\n-            long constrained_i = Long.min(1179, Long.max(1169, i));\n+            long constrained_i = i & 0xFFFFFFL;\n@@ -75,2 +72,2 @@\n-            long constrained_i = Long.min(1179L, Long.max(1169L, i));\n-            if (Long.bitCount(constrained_i) > 20L || Long.bitCount(constrained_i) < 3L) {\n+            long constrained_i = i & 0xFFFFFFL;\n+            if (Long.bitCount(constrained_i) > 24) {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/PopCountValueTransform.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"}]}