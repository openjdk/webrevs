{"files":[{"patch":"@@ -2585,1 +2585,1 @@\n-bool is_valid_sve_arith_imm_pattern(Node* n, Node* m) {\n+static bool is_valid_sve_arith_imm_pattern(Node* n, Node* m) {\n@@ -2626,1 +2626,1 @@\n-bool is_vector_bitwise_not_pattern(Node* n, Node* m) {\n+static bool is_vector_bitwise_not_pattern(Node* n, Node* m) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -681,1 +681,1 @@\n-void internal_pf(uintptr_t sp, uintptr_t fp, uintptr_t pc, uintptr_t bcx) {\n+static void internal_pf(uintptr_t sp, uintptr_t fp, uintptr_t pc, uintptr_t bcx) {\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-int compare_immediate_pair(const void *i1, const void *i2)\n+static int compare_immediate_pair(const void *i1, const void *i2)\n@@ -145,1 +145,1 @@\n-uint64_t replicate(uint64_t bits, int nbits, int count)\n+static uint64_t replicate(uint64_t bits, int nbits, int count)\n@@ -234,1 +234,1 @@\n-int expandLogicalImmediate(uint32_t immN, uint32_t immr,\n+static int expandLogicalImmediate(uint32_t immN, uint32_t immr,\n@@ -449,1 +449,0 @@\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/immediate_aarch64.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1210,0 +1210,1 @@\n+#ifndef _LP64\n@@ -1212,1 +1213,1 @@\n-LIR_Opr fixed_register_for(BasicType type) {\n+static LIR_Opr fixed_register_for(BasicType type) {\n@@ -1221,0 +1222,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -4090,1 +4090,1 @@\n-int register_section_sizes(RegSet gp_registers, XMMRegSet xmm_registers, bool save_fpu,\n+static int register_section_sizes(RegSet gp_registers, XMMRegSet xmm_registers, bool save_fpu,\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-bool lea_coalesce_helper(Block* block, int block_index, PhaseCFG* cfg_, PhaseRegAlloc* ra_,\n+static bool lea_coalesce_helper(Block* block, int block_index, PhaseCFG* cfg_, PhaseRegAlloc* ra_,\n@@ -139,1 +139,1 @@\n-juint map_condition_to_required_test_flags(Assembler::Condition condition) {\n+static juint map_condition_to_required_test_flags(Assembler::Condition condition) {\n","filename":"src\/hotspot\/cpu\/x86\/peephole_x86_64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-uint32_t crc32c_multiply(uint32_t a, uint32_t b) {\n+static uint32_t crc32c_multiply(uint32_t a, uint32_t b) {\n@@ -306,1 +306,1 @@\n-void crc32c_init_pow_2k(void) {\n+static void crc32c_init_pow_2k(void) {\n@@ -321,1 +321,1 @@\n-uint32_t crc32c_f_pow_n(uint32_t n) {\n+static uint32_t crc32c_f_pow_n(uint32_t n) {\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1361,1 +1361,1 @@\n-Assembler::Width widthForType(BasicType bt) {\n+static Assembler::Width widthForType(BasicType bt) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -507,1 +507,1 @@\n-void emit_cmpfp3(MacroAssembler& _masm, Register dst) {\n+static void emit_cmpfp3(MacroAssembler& _masm, Register dst) {\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -522,1 +522,1 @@\n-void emit_cmpfp_fixup(MacroAssembler& _masm) {\n+static void emit_cmpfp_fixup(MacroAssembler& _masm) {\n@@ -542,1 +542,1 @@\n-void emit_cmpfp3(MacroAssembler& _masm, Register dst) {\n+static void emit_cmpfp3(MacroAssembler& _masm, Register dst) {\n@@ -561,1 +561,1 @@\n-void emit_fp_min_max(MacroAssembler& _masm, XMMRegister dst,\n+static void emit_fp_min_max(MacroAssembler& _masm, XMMRegister dst,\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1272,1 +1272,1 @@\n-int _print_dll_info_cb(const char * name, address base_address, address top_address, void * param) {\n+static int _print_dll_info_cb(const char * name, address base_address, address top_address, void * param) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -343,1 +343,1 @@\n-void jdk_misc_signal_init() {\n+static void jdk_misc_signal_init() {\n@@ -383,1 +383,1 @@\n-struct sigaction* get_chained_signal_action(int sig) {\n+static struct sigaction* get_chained_signal_action(int sig) {\n@@ -1248,1 +1248,1 @@\n-void set_signal_handler(int sig) {\n+static void set_signal_handler(int sig) {\n@@ -1295,1 +1295,1 @@\n-void install_signal_handlers() {\n+static void install_signal_handlers() {\n@@ -1726,1 +1726,1 @@\n-int SR_initialize() {\n+static int SR_initialize() {\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -354,1 +354,1 @@\n-intptr_t* _get_previous_fp() {\n+static intptr_t* _get_previous_fp() {\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,1 +168,1 @@\n-intptr_t* _get_previous_fp() {\n+static intptr_t* _get_previous_fp() {\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -526,1 +526,1 @@\n-int compare_depth_first(BlockBegin** a, BlockBegin** b) {\n+static int compare_depth_first(BlockBegin** a, BlockBegin** b) {\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1449,2 +1449,2 @@\n-#ifndef PRODUCT\n-int interval_cmp(Interval* const& l, Interval* const& r) {\n+#ifdef ASSERT\n+static int interval_cmp(Interval* const& l, Interval* const& r) {\n@@ -1454,1 +1454,1 @@\n-bool find_interval(Interval* interval, IntervalArray* intervals) {\n+static bool find_interval(Interval* interval, IntervalArray* intervals) {\n@@ -2306,1 +2306,1 @@\n-void assert_equal(Location l1, Location l2) {\n+static void assert_equal(Location l1, Location l2) {\n@@ -2310,1 +2310,1 @@\n-void assert_equal(ScopeValue* v1, ScopeValue* v2) {\n+static void assert_equal(ScopeValue* v1, ScopeValue* v2) {\n@@ -2331,1 +2331,1 @@\n-void assert_equal(MonitorValue* m1, MonitorValue* m2) {\n+static void assert_equal(MonitorValue* m1, MonitorValue* m2) {\n@@ -2336,1 +2336,1 @@\n-void assert_equal(IRScopeDebugInfo* d1, IRScopeDebugInfo* d2) {\n+static void assert_equal(IRScopeDebugInfo* d1, IRScopeDebugInfo* d2) {\n@@ -2378,1 +2378,1 @@\n-void check_stack_depth(CodeEmitInfo* info, int stack_end) {\n+static void check_stack_depth(CodeEmitInfo* info, int stack_end) {\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -338,1 +338,1 @@\n-void disconnect_from_graph(BlockBegin* block) {\n+static void disconnect_from_graph(BlockBegin* block) {\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1667,1 +1667,1 @@\n-char* map_memory(int fd, const char* file_name, size_t file_offset,\n+static char* map_memory(int fd, const char* file_name, size_t file_offset,\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-uint32_t halfsiphash_finish32(uint32_t v[4], int rounds) {\n+static uint32_t halfsiphash_finish32(uint32_t v[4], int rounds) {\n","filename":"src\/hotspot\/share\/classfile\/altHashing.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,1 +137,2 @@\n-bool string_starts_with(const char* str, const char* str_to_find) {\n+#if INCLUDE_CDS\n+static bool string_starts_with(const char* str, const char* str_to_find) {\n@@ -145,0 +146,1 @@\n+#endif\n@@ -1012,1 +1014,1 @@\n-ClassPathEntry* find_first_module_cpe(ModuleEntry* mod_entry,\n+static ClassPathEntry* find_first_module_cpe(ModuleEntry* mod_entry,\n@@ -1358,1 +1360,1 @@\n-char* lookup_vm_resource(JImageFile *jimage, const char *jimage_version, const char *path) {\n+static char* lookup_vm_resource(JImageFile *jimage, const char *jimage_version, const char *path) {\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-void log_ldr_constraint_msg(Symbol* class_name, const char* reason,\n+static void log_ldr_constraint_msg(Symbol* class_name, const char* reason,\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,1 +262,1 @@\n-void throw_dup_pkg_exception(const char* module_name, PackageEntry* package, TRAPS) {\n+static void throw_dup_pkg_exception(const char* module_name, PackageEntry* package, TRAPS) {\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -201,1 +201,1 @@\n-PlaceholderEntry* add_entry(Symbol* class_name, ClassLoaderData* loader_data,\n+static PlaceholderEntry* add_entry(Symbol* class_name, ClassLoaderData* loader_data,\n@@ -216,1 +216,1 @@\n-void remove_entry(Symbol* class_name, ClassLoaderData* loader_data) {\n+static void remove_entry(Symbol* class_name, ClassLoaderData* loader_data) {\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +125,1 @@\n-unsigned int hash_string(const jchar* s, int len, bool useAlt) {\n+static unsigned int hash_string(const jchar* s, int len, bool useAlt) {\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,1 +215,1 @@\n-bool is_parallelCapable(Handle class_loader) {\n+static bool is_parallelCapable(Handle class_loader) {\n@@ -221,1 +221,1 @@\n-bool is_parallelDefine(Handle class_loader) {\n+static bool is_parallelDefine(Handle class_loader) {\n@@ -283,1 +283,1 @@\n-void verify_dictionary_entry(Symbol* class_name, InstanceKlass* k) {\n+static void verify_dictionary_entry(Symbol* class_name, InstanceKlass* k) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1351,1 +1351,1 @@\n-const char* class_loader_name_for_shared(Klass* k) {\n+static const char* class_loader_name_for_shared(Klass* k) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -585,1 +585,1 @@\n-void register_jfr_phasetype_serializer(CompilerType compiler_type) {\n+static void register_jfr_phasetype_serializer(CompilerType compiler_type) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-const char* optiontype2name(enum OptionType type) {\n+static const char* optiontype2name(enum OptionType type) {\n@@ -61,1 +61,1 @@\n-enum OptionType option2type(enum CompileCommand option) {\n+static enum OptionType option2type(enum CompileCommand option) {\n@@ -71,1 +71,1 @@\n-const char* option2name(enum CompileCommand option) {\n+static const char* option2name(enum CompileCommand option) {\n@@ -111,1 +111,1 @@\n-void command_set_in_filter(enum CompileCommand option) {\n+static void command_set_in_filter(enum CompileCommand option) {\n@@ -123,1 +123,1 @@\n-bool has_command(enum CompileCommand option) {\n+static bool has_command(enum CompileCommand option) {\n@@ -550,1 +550,1 @@\n-void print_tip() { \/\/ CMH Update info\n+static void print_tip() { \/\/ CMH Update info\n@@ -558,1 +558,1 @@\n-void print_option(enum CompileCommand option, const char* name, enum OptionType type) {\n+static void print_option(enum CompileCommand option, const char* name, enum OptionType type) {\n@@ -564,1 +564,1 @@\n-void print_commands() {\n+static void print_commands() {\n@@ -624,1 +624,1 @@\n-int skip_whitespace(char* &line) {\n+static int skip_whitespace(char* &line) {\n@@ -632,1 +632,1 @@\n-void skip_comma(char* &line) {\n+static void skip_comma(char* &line) {\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,1 +249,1 @@\n-void skip_leading_spaces(char*& line, int* total_bytes_read ) {\n+static void skip_leading_spaces(char*& line, int* total_bytes_read ) {\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,1 +249,1 @@\n-void\n+static void\n@@ -315,1 +315,1 @@\n-void\n+static void\n@@ -396,1 +396,1 @@\n-void\n+static void\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-NamedThread* currentNamedthread() {\n+static NamedThread* currentNamedthread() {\n","filename":"src\/hotspot\/share\/gc\/shared\/gcId.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-void notify_jvmti_tagmaps() {\n+static void notify_jvmti_tagmaps() {\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,1 +171,1 @@\n-XDriverRequest rule_allocation_rate_dynamic() {\n+static XDriverRequest rule_allocation_rate_dynamic() {\n","filename":"src\/hotspot\/share\/gc\/x\/xDirector.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,1 +146,1 @@\n-ZDriverRequest rule_minor_allocation_rate_dynamic(const ZDirectorStats& stats,\n+static ZDriverRequest rule_minor_allocation_rate_dynamic(const ZDirectorStats& stats,\n@@ -217,1 +217,1 @@\n-ZDriverRequest rule_soft_minor_allocation_rate_dynamic(const ZDirectorStats& stats,\n+static ZDriverRequest rule_soft_minor_allocation_rate_dynamic(const ZDirectorStats& stats,\n@@ -227,1 +227,1 @@\n-ZDriverRequest rule_semi_hard_minor_allocation_rate_dynamic(const ZDirectorStats& stats,\n+static ZDriverRequest rule_semi_hard_minor_allocation_rate_dynamic(const ZDirectorStats& stats,\n@@ -237,1 +237,1 @@\n-ZDriverRequest rule_hard_minor_allocation_rate_dynamic(const ZDirectorStats& stats,\n+static ZDriverRequest rule_hard_minor_allocation_rate_dynamic(const ZDirectorStats& stats,\n","filename":"src\/hotspot\/share\/gc\/z\/zDirector.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,1 +202,1 @@\n-int __write_sample_info__(JfrCheckpointWriter* writer, const void* si) {\n+static int __write_sample_info__(JfrCheckpointWriter* writer, const void* si) {\n@@ -227,1 +227,1 @@\n-int __write_reference_info__(JfrCheckpointWriter* writer, const void* ri) {\n+static int __write_reference_info__(JfrCheckpointWriter* writer, const void* ri) {\n@@ -249,1 +249,1 @@\n-int __write_array_info__(JfrCheckpointWriter* writer, const void* ai) {\n+static int __write_array_info__(JfrCheckpointWriter* writer, const void* ai) {\n@@ -286,1 +286,1 @@\n-int __write_field_info__(JfrCheckpointWriter* writer, const void* fi) {\n+static int __write_field_info__(JfrCheckpointWriter* writer, const void* fi) {\n@@ -343,1 +343,1 @@\n-int __write_root_description_info__(JfrCheckpointWriter* writer, const void* di) {\n+static int __write_root_description_info__(JfrCheckpointWriter* writer, const void* di) {\n@@ -370,1 +370,1 @@\n-int _edge_reference_compare_(uintptr_t lhs, uintptr_t rhs) {\n+static int _edge_reference_compare_(uintptr_t lhs, uintptr_t rhs) {\n@@ -374,1 +374,1 @@\n-int _root_desc_compare_(const ObjectSampleRootDescriptionInfo*const & lhs, const ObjectSampleRootDescriptionInfo* const& rhs) {\n+static int _root_desc_compare_(const ObjectSampleRootDescriptionInfo*const & lhs, const ObjectSampleRootDescriptionInfo* const& rhs) {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleWriter.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -671,1 +671,1 @@\n-void assert_periods(const JfrThreadSampler* sampler, int64_t java_period_millis, int64_t native_period_millis) {\n+static void assert_periods(const JfrThreadSampler* sampler, int64_t java_period_millis, int64_t native_period_millis) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1095,1 +1095,1 @@\n-int write__symbol(JfrCheckpointWriter* writer, const void* e) {\n+static int write__symbol(JfrCheckpointWriter* writer, const void* e) {\n@@ -1102,1 +1102,1 @@\n-int write__symbol__leakp(JfrCheckpointWriter* writer, const void* e) {\n+static int write__symbol__leakp(JfrCheckpointWriter* writer, const void* e) {\n@@ -1116,1 +1116,1 @@\n-int write__string(JfrCheckpointWriter* writer, const void* e) {\n+static int write__string(JfrCheckpointWriter* writer, const void* e) {\n@@ -1123,1 +1123,1 @@\n-int write__string__leakp(JfrCheckpointWriter* writer, const void* e) {\n+static int write__string__leakp(JfrCheckpointWriter* writer, const void* e) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1383,1 +1383,1 @@\n-GrowableArray<Method*>* init_resolved_methods(jobjectArray methods, JVMCIEnv* JVMCIENV) {\n+static GrowableArray<Method*>* init_resolved_methods(jobjectArray methods, JVMCIEnv* JVMCIENV) {\n@@ -1402,1 +1402,1 @@\n-bool matches(jobjectArray methods, Method* method, GrowableArray<Method*>** resolved_methods_ref, Handle* matched_jvmci_method_ref, Thread* THREAD, JVMCIEnv* JVMCIENV) {\n+static bool matches(jobjectArray methods, Method* method, GrowableArray<Method*>** resolved_methods_ref, Handle* matched_jvmci_method_ref, Thread* THREAD, JVMCIEnv* JVMCIENV) {\n@@ -1423,1 +1423,1 @@\n-methodHandle resolve_interface_call(Klass* spec_klass, Symbol* name, Symbol* signature, JavaCallArguments* args, TRAPS) {\n+static methodHandle resolve_interface_call(Klass* spec_klass, Symbol* name, Symbol* signature, JavaCallArguments* args, TRAPS) {\n@@ -1438,1 +1438,1 @@\n-void resync_vframestream_to_compiled_frame(vframeStream& vfst, intptr_t* stack_pointer, int vframe_id, JavaThread* thread, TRAPS) {\n+static void resync_vframestream_to_compiled_frame(vframeStream& vfst, intptr_t* stack_pointer, int vframe_id, JavaThread* thread, TRAPS) {\n@@ -1461,1 +1461,1 @@\n-GrowableArray<ScopeValue*>* get_unallocated_objects_or_null(GrowableArray<ScopeValue*>* scope_objects) {\n+static GrowableArray<ScopeValue*>* get_unallocated_objects_or_null(GrowableArray<ScopeValue*>* scope_objects) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-void check_pointer_is_aligned_to_commit_granule(const MetaWord* p) {\n+static void check_pointer_is_aligned_to_commit_granule(const MetaWord* p) {\n@@ -64,1 +64,1 @@\n-void check_word_size_is_aligned_to_commit_granule(size_t word_size) {\n+static void check_word_size_is_aligned_to_commit_granule(size_t word_size) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -301,1 +301,1 @@\n-void initialize_basic_type_klass(Klass* k, TRAPS) {\n+static void initialize_basic_type_klass(Klass* k, TRAPS) {\n@@ -927,1 +927,1 @@\n-void initialize_known_method(LatestMethodCache* method_cache,\n+static void initialize_known_method(LatestMethodCache* method_cache,\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -323,1 +323,0 @@\n-\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -387,1 +387,1 @@\n-Array<u1>* copy_annotations(ClassLoaderData* loader_data, AnnotationArray* from, TRAPS) {\n+static Array<u1>* copy_annotations(ClassLoaderData* loader_data, AnnotationArray* from, TRAPS) {\n","filename":"src\/hotspot\/share\/oops\/constMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -456,1 +456,1 @@\n-void log_adjust(const char* entry_type, Method* old_method, Method* new_method, bool* trace_name_printed) {\n+static void log_adjust(const char* entry_type, Method* old_method, Method* new_method, bool* trace_name_printed) {\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1445,1 +1445,1 @@\n-void visit_all_interfaces(Array<InstanceKlass*>* transitive_intf, InterfaceVisiterClosure *blk) {\n+static void visit_all_interfaces(Array<InstanceKlass*>* transitive_intf, InterfaceVisiterClosure *blk) {\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -767,1 +767,1 @@\n-Node* rotate_shift(PhaseGVN* phase, Node* lshift, Node* rshift, int mask) {\n+static Node* rotate_shift(PhaseGVN* phase, Node* lshift, Node* rshift, int mask) {\n@@ -1083,1 +1083,1 @@\n-Node* build_min_max_int(Node* a, Node* b, bool is_max) {\n+static Node* build_min_max_int(Node* a, Node* b, bool is_max) {\n@@ -1315,1 +1315,1 @@\n-Node* fold_subI_no_underflow_pattern(Node* n, PhaseGVN* phase) {\n+static Node* fold_subI_no_underflow_pattern(Node* n, PhaseGVN* phase) {\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-void print_trace_type_profile(outputStream* out, int depth, ciKlass* prof_klass, int site_count, int receiver_count) {\n+static void print_trace_type_profile(outputStream* out, int depth, ciKlass* prof_klass, int site_count, int receiver_count) {\n@@ -60,1 +60,1 @@\n-void trace_type_profile(Compile* C, ciMethod* method, int depth, int bci, ciMethod* prof_method,\n+static void trace_type_profile(Compile* C, ciMethod* method, int depth, int bci, ciMethod* prof_method,\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -177,1 +177,1 @@\n-Node* compress_expand_identity(PhaseGVN* phase, Node* n) {\n+static Node* compress_expand_identity(PhaseGVN* phase, Node* n) {\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -5074,1 +5074,1 @@\n-int compare_tree(IdealLoopTree* const& a, IdealLoopTree* const& b) {\n+static int compare_tree(IdealLoopTree* const& a, IdealLoopTree* const& b) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1635,1 +1635,1 @@\n-Node* find_node_by_idx(Node* start, uint idx, bool traverse_output, bool only_ctrl) {\n+static Node* find_node_by_idx(Node* start, uint idx, bool traverse_output, bool only_ctrl) {\n@@ -1651,1 +1651,1 @@\n-int node_idx_cmp(const Node** n1, const Node** n2) {\n+static int node_idx_cmp(const Node** n1, const Node** n2) {\n@@ -1655,1 +1655,1 @@\n-void find_nodes_by_name(Node* start, const char* name) {\n+static void find_nodes_by_name(Node* start, const char* name) {\n@@ -1670,1 +1670,1 @@\n-void find_nodes_by_dump(Node* start, const char* pattern) {\n+static void find_nodes_by_dump(Node* start, const char* pattern) {\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -292,1 +292,1 @@\n-Node* clone_node(Node* def, Block *b, Compile* C) {\n+static Node* clone_node(Node* def, Block *b, Compile* C) {\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1275,1 +1275,1 @@\n-void print_con_or_idx(const Node* n) {\n+static void print_con_or_idx(const Node* n) {\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2440,1 +2440,1 @@\n-jvmtiCompiledMethodLoadInlineRecord* create_inline_record(nmethod* nm) {\n+static jvmtiCompiledMethodLoadInlineRecord* create_inline_record(nmethod* nm) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-unsigned int method_hash(const Method* method) {\n+static unsigned int method_hash(const Method* method) {\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1367,1 +1367,1 @@\n-void set_object_alignment() {\n+static void set_object_alignment() {\n@@ -2012,0 +2012,1 @@\n+#if !INCLUDE_JVMTI\n@@ -2016,1 +2017,1 @@\n-bool valid_jdwp_agent(char *name, bool is_path) {\n+static bool valid_jdwp_agent(char *name, bool is_path) {\n@@ -2056,0 +2057,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1451,1 +1451,1 @@\n-int compare(ReassignedField* left, ReassignedField* right) {\n+static int compare(ReassignedField* left, ReassignedField* right) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-void fill_to_pos(outputStream* st, unsigned int req_pos) {\n+static void fill_to_pos(outputStream* st, unsigned int req_pos) {\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-int compare_methods(Method** a, Method** b) {\n+static int compare_methods(Method** a, Method** b) {\n@@ -111,1 +111,1 @@\n-void collect_profiled_methods(Method* m) {\n+static void collect_profiled_methods(Method* m) {\n@@ -120,1 +120,1 @@\n-void print_method_profiling_data() {\n+static void print_method_profiling_data() {\n@@ -165,1 +165,1 @@\n-void collect_invoked_methods(Method* m) {\n+static void collect_invoked_methods(Method* m) {\n@@ -175,1 +175,1 @@\n-void print_method_invocation_histogram() {\n+static void print_method_invocation_histogram() {\n@@ -229,1 +229,1 @@\n-void print_bytecode_count() {\n+static void print_bytecode_count() {\n@@ -237,2 +237,2 @@\n-void print_method_invocation_histogram() {}\n-void print_bytecode_count() {}\n+static void print_method_invocation_histogram() {}\n+static void print_bytecode_count() {}\n@@ -573,1 +573,1 @@\n-void vm_perform_shutdown_actions() {\n+static void vm_perform_shutdown_actions() {\n@@ -608,1 +608,1 @@\n-void vm_notify_during_cds_dumping(const char* error, const char* message) {\n+static void vm_notify_during_cds_dumping(const char* error, const char* message) {\n@@ -628,1 +628,1 @@\n-void vm_notify_during_shutdown(const char* error, const char* message) {\n+static void vm_notify_during_shutdown(const char* error, const char* message) {\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -266,1 +266,1 @@\n-bool jvmci_counters_include(JavaThread* thread) {\n+static bool jvmci_counters_include(JavaThread* thread) {\n@@ -285,1 +285,1 @@\n-jlong* resize_counters_array(jlong* old_counters, int current_size, int new_size) {\n+static jlong* resize_counters_array(jlong* old_counters, int current_size, int new_size) {\n@@ -1459,1 +1459,1 @@\n-const char* _get_thread_state_name(JavaThreadState _thread_state) {\n+static const char* _get_thread_state_name(JavaThreadState _thread_state) {\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1292,1 +1292,1 @@\n-bool is_pointer_bad(intptr_t* ptr) {\n+static bool is_pointer_bad(intptr_t* ptr) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -443,1 +443,1 @@\n-double __ieee754_pow(double x, double y) {\n+static double __ieee754_pow(double x, double y) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntimeTrans.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-int dtrace_waited_probe(ObjectMonitor* monitor, Handle obj, JavaThread* thr) {\n+static int dtrace_waited_probe(ObjectMonitor* monitor, Handle obj, JavaThread* thr) {\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1114,1 +1114,1 @@\n-void assert_thread_claimed(const char* kind, Thread* t, uintx expected) {\n+static void assert_thread_claimed(const char* kind, Thread* t, uintx expected) {\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,1 +221,1 @@\n-jint dump_heap(AttachOperation* op, outputStream* out) {\n+static jint dump_heap(AttachOperation* op, outputStream* out) {\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1463,1 +1463,1 @@\n-bool add_global_entry(Handle name, jmmVMGlobal *global, JVMFlag *flag, TRAPS) {\n+static bool add_global_entry(Handle name, jmmVMGlobal *global, JVMFlag *flag, TRAPS) {\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -473,1 +473,1 @@\n-void print_oom_count(outputStream* st, const char *err, int count) {\n+static void print_oom_count(outputStream* st, const char *err, int count) {\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-BasicType char2type(int ch) {\n+static BasicType char2type(int ch) {\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-const char* strchrnul_(const char *s, int c) {\n+static const char* strchrnul_(const char *s, int c) {\n","filename":"src\/hotspot\/share\/utilities\/json.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -432,1 +432,1 @@\n-char* get_datetime_string(char *buf, size_t len) {\n+static char* get_datetime_string(char *buf, size_t len) {\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-TempNewSymbol stable_temp_symbol(Symbol* sym) {\n+static TempNewSymbol stable_temp_symbol(Symbol* sym) {\n","filename":"test\/hotspot\/gtest\/classfile\/test_symbolTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-oop fake_object() {\n+static oop fake_object() {\n","filename":"test\/hotspot\/gtest\/oops\/test_oop.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-bool file_exists(const char* filename) {\n+static bool file_exists(const char* filename) {\n@@ -42,1 +42,1 @@\n-char* temp_file(const char* prefix) {\n+static char* temp_file(const char* prefix) {\n@@ -52,1 +52,1 @@\n-void delete_file(const char* filename) {\n+static void delete_file(const char* filename) {\n@@ -69,1 +69,1 @@\n-void fill_file(const char* path, const char* content) {\n+static void fill_file(const char* path, const char* content) {\n","filename":"test\/hotspot\/gtest\/os\/linux\/test_cgroupSubsystem_linux.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-void test_safefetchN_positive() {\n+static void test_safefetchN_positive() {\n","filename":"test\/hotspot\/gtest\/runtime\/test_safefetch.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}