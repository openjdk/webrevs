{"files":[{"patch":"@@ -29,1 +29,6 @@\n-import java.util.Date;\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.function.BiFunction;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ArrayList;\n@@ -38,137 +43,0 @@\n- * <a name=\"classTable\"><h3>Type\/Class Table<\/h3><\/a>\n- * The following table shows the correspondence between\n- * PKCS9 attribute types and value component classes.\n- * For types not listed here, its name is the OID\n- * in string form, its value is a (single-valued)\n- * byte array that is the SET's encoding.\n- *\n- * <TABLE BORDER CELLPADDING=8 ALIGN=CENTER>\n- *\n- * <TR>\n- * <TH>Object Identifier<\/TH>\n- * <TH>Attribute Name<\/TH>\n- * <TH>Type<\/TH>\n- * <TH>Value Class<\/TH>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.1<\/TD>\n- * <TD>EmailAddress<\/TD>\n- * <TD>Multi-valued<\/TD>\n- * <TD><code>String[]<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.2<\/TD>\n- * <TD>UnstructuredName<\/TD>\n- * <TD>Multi-valued<\/TD>\n- * <TD><code>String[]<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.3<\/TD>\n- * <TD>ContentType<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD><code>ObjectIdentifier<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.4<\/TD>\n- * <TD>MessageDigest<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD><code>byte[]<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.5<\/TD>\n- * <TD>SigningTime<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD><code>Date<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.6<\/TD>\n- * <TD>Countersignature<\/TD>\n- * <TD>Multi-valued<\/TD>\n- * <TD><code>SignerInfo[]<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.7<\/TD>\n- * <TD>ChallengePassword<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD><code>String<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.8<\/TD>\n- * <TD>UnstructuredAddress<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD><code>String<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.9<\/TD>\n- * <TD>ExtendedCertificateAttributes<\/TD>\n- * <TD>Multi-valued<\/TD>\n- * <TD>(not supported)<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.10<\/TD>\n- * <TD>IssuerAndSerialNumber<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>(not supported)<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.{11,12}<\/TD>\n- * <TD>RSA DSI proprietary<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>(not supported)<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.13<\/TD>\n- * <TD>S\/MIME unused assignment<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>(not supported)<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.14<\/TD>\n- * <TD>ExtensionRequest<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>CertificateExtensions<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.15<\/TD>\n- * <TD>SMIMECapability<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>(not supported)<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.16.2.12<\/TD>\n- * <TD>SigningCertificate<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>SigningCertificateInfo<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.16.2.14<\/TD>\n- * <TD>SignatureTimestampToken<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>byte[]<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.16.2.52<\/TD>\n- * <TD>CMSAlgorithmProtection<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>byte[]<\/TD>\n- * <\/TR>\n- *\n- * <\/TABLE>\n- *\n@@ -182,31 +50,13 @@\n-    \/**\n-     * Array of attribute OIDs defined in PKCS9, by number.\n-     *\/\n-    static final ObjectIdentifier[] PKCS9_OIDS = new ObjectIdentifier[19];\n-\n-    private static final Class<?> BYTE_ARRAY_CLASS;\n-\n-    static {\n-        \/\/ set unused PKCS9_OIDS entries to null\n-        \/\/ rest are initialized with public constants\n-        PKCS9_OIDS[0] = PKCS9_OIDS[11] = PKCS9_OIDS[12] = PKCS9_OIDS[13] =\n-        PKCS9_OIDS[15] = null;\n-        try {\n-            BYTE_ARRAY_CLASS = Class.forName(\"[B\");\n-        } catch (ClassNotFoundException e) {\n-            throw new ExceptionInInitializerError(e.toString());\n-        }\n-    }\n-\n-    public static final ObjectIdentifier EMAIL_ADDRESS_OID = PKCS9_OIDS[1] =\n-            ObjectIdentifier.of(KnownOIDs.EmailAddress);\n-    public static final ObjectIdentifier UNSTRUCTURED_NAME_OID = PKCS9_OIDS[2] =\n-            ObjectIdentifier.of(KnownOIDs.UnstructuredName);\n-    public static final ObjectIdentifier CONTENT_TYPE_OID = PKCS9_OIDS[3] =\n-            ObjectIdentifier.of(KnownOIDs.ContentType);\n-    public static final ObjectIdentifier MESSAGE_DIGEST_OID = PKCS9_OIDS[4] =\n-            ObjectIdentifier.of(KnownOIDs.MessageDigest);\n-    public static final ObjectIdentifier SIGNING_TIME_OID = PKCS9_OIDS[5] =\n-            ObjectIdentifier.of(KnownOIDs.SigningTime);\n-    public static final ObjectIdentifier COUNTERSIGNATURE_OID = PKCS9_OIDS[6] =\n-            ObjectIdentifier.of(KnownOIDs.CounterSignature);\n+    \/* OID Constants *\/\n+    public static final ObjectIdentifier EMAIL_ADDRESS_OID =\n+        ObjectIdentifier.of(KnownOIDs.EmailAddress);\n+    public static final ObjectIdentifier UNSTRUCTURED_NAME_OID =\n+        ObjectIdentifier.of(KnownOIDs.UnstructuredName);\n+    public static final ObjectIdentifier CONTENT_TYPE_OID =\n+        ObjectIdentifier.of(KnownOIDs.ContentType);\n+    public static final ObjectIdentifier MESSAGE_DIGEST_OID =\n+        ObjectIdentifier.of(KnownOIDs.MessageDigest);\n+    public static final ObjectIdentifier SIGNING_TIME_OID =\n+        ObjectIdentifier.of(KnownOIDs.SigningTime);\n+    public static final ObjectIdentifier COUNTERSIGNATURE_OID =\n+        ObjectIdentifier.of(KnownOIDs.CounterSignature);\n@@ -214,1 +64,1 @@\n-            PKCS9_OIDS[7] = ObjectIdentifier.of(KnownOIDs.ChallengePassword);\n+        ObjectIdentifier.of(KnownOIDs.ChallengePassword);\n@@ -216,1 +66,1 @@\n-            PKCS9_OIDS[8] = ObjectIdentifier.of(KnownOIDs.UnstructuredAddress);\n+        ObjectIdentifier.of(KnownOIDs.UnstructuredAddress);\n@@ -218,2 +68,1 @@\n-            PKCS9_OIDS[9] =\n-            ObjectIdentifier.of(KnownOIDs.ExtendedCertificateAttributes);\n+        ObjectIdentifier.of(KnownOIDs.ExtendedCertificateAttributes);\n@@ -221,4 +70,1 @@\n-            PKCS9_OIDS[10] =\n-            ObjectIdentifier.of(KnownOIDs.IssuerAndSerialNumber);\n-    \/\/ [11], [12] are RSA DSI proprietary\n-    \/\/ [13] ==> signingDescription, S\/MIME, not used anymore\n+        ObjectIdentifier.of(KnownOIDs.IssuerAndSerialNumber);\n@@ -226,1 +72,1 @@\n-            PKCS9_OIDS[14] = ObjectIdentifier.of(KnownOIDs.ExtensionRequest);\n+        ObjectIdentifier.of(KnownOIDs.ExtensionRequest);\n@@ -228,1 +74,1 @@\n-            PKCS9_OIDS[16] = ObjectIdentifier.of(KnownOIDs.SigningCertificate);\n+        ObjectIdentifier.of(KnownOIDs.SigningCertificate);\n@@ -230,2 +76,1 @@\n-            PKCS9_OIDS[17] =\n-            ObjectIdentifier.of(KnownOIDs.SignatureTimestampToken);\n+        ObjectIdentifier.of(KnownOIDs.SignatureTimestampToken);\n@@ -233,2 +78,1 @@\n-            PKCS9_OIDS[18] =\n-            ObjectIdentifier.of(KnownOIDs.CMSAlgorithmProtection);\n+        ObjectIdentifier.of(KnownOIDs.CMSAlgorithmProtection);\n@@ -236,42 +80,40 @@\n-    \/**\n-     * Acceptable ASN.1 tags for DER encodings of values of PKCS9\n-     * attributes, by index in <code>PKCS9_OIDS<\/code>.\n-     * Sets of acceptable tags are represented as arrays.\n-     *\/\n-    private static final Byte[][] PKCS9_VALUE_TAGS = {\n-        null,\n-        {DerValue.tag_IA5String},   \/\/ EMailAddress\n-        {DerValue.tag_IA5String,\n-         DerValue.tag_PrintableString,\n-         DerValue.tag_T61String,\n-         DerValue.tag_BMPString,\n-         DerValue.tag_UniversalString,\n-         DerValue.tag_UTF8String},  \/\/ UnstructuredName\n-        {DerValue.tag_ObjectId},    \/\/ ContentType\n-        {DerValue.tag_OctetString}, \/\/ MessageDigest\n-        {DerValue.tag_UtcTime,\n-         DerValue.tag_GeneralizedTime}, \/\/ SigningTime\n-        {DerValue.tag_Sequence},    \/\/ Countersignature\n-        {DerValue.tag_PrintableString,\n-         DerValue.tag_T61String,\n-         DerValue.tag_BMPString,\n-         DerValue.tag_UniversalString,\n-         DerValue.tag_UTF8String},   \/\/ ChallengePassword\n-        {DerValue.tag_PrintableString,\n-         DerValue.tag_T61String,\n-         DerValue.tag_BMPString,\n-         DerValue.tag_UniversalString,\n-         DerValue.tag_UTF8String},   \/\/ UnstructuredAddress\n-        {DerValue.tag_SetOf},       \/\/ ExtendedCertificateAttributes\n-        {DerValue.tag_Sequence},    \/\/ issuerAndSerialNumber\n-        null,\n-        null,\n-        null,\n-        {DerValue.tag_Sequence},    \/\/ extensionRequest\n-        {DerValue.tag_Sequence},    \/\/ SMIMECapability\n-        {DerValue.tag_Sequence},    \/\/ SigningCertificate\n-        {DerValue.tag_Sequence},    \/\/ SignatureTimestampToken\n-        {DerValue.tag_Sequence}     \/\/ CMSAlgorithmProtection\n-    };\n-\n-    private static final Class<?>[] VALUE_CLASSES = new Class<?>[19];\n+    private record AttributeInfo(boolean singleValued, Class<?> valueClass,\n+                                 Function<DerValue[], Object> getValue,\n+                                 BiFunction<Object, DerOutputStream, DerOutputStream> encoder,\n+                                 byte... valueTags) {}\n+\n+    private static final Map<ObjectIdentifier, AttributeInfo> infoMap = new HashMap<>();\n+\n+    private static void add(ObjectIdentifier oid, boolean singleValued,\n+                            Class<?> valueClass, Function<DerValue[], Object> getValue,\n+                            BiFunction<Object, DerOutputStream, DerOutputStream> encoder,\n+                            byte... valueTags) {\n+\n+        AttributeInfo info =\n+            new AttributeInfo(singleValued, valueClass, getValue, encoder, valueTags);\n+\n+        if (infoMap.put(oid, info) != null) {\n+            throw new RuntimeException(\"Duplicate oid: \" + oid);\n+        }\n+    }\n+\n+    private static DerOutputStream mkDerStream(DerOutputStream t, DerOutputStream r) {\n+        return t.write(DerValue.tag_Set, r.toByteArray());\n+    }\n+\n+    @FunctionalInterface\n+    public interface Throws<T, R, E extends Throwable> {\n+        R apply(T t) throws E;\n+\n+        static <T, R, E extends Throwable> Function<T, R> unchecked(Throws<T, R, E> f) {\n+            return t -> {\n+                try {\n+                    return f.apply(t);\n+                } catch (Throwable e) {\n+                    throw new RuntimeException(e);\n+                }\n+            };\n+        }\n+    }\n+\n+    private static final Class<?> BYTE_ARRAY_CLASS;\n@@ -281,0 +123,1 @@\n+            BYTE_ARRAY_CLASS = Class.forName(\"[B\");\n@@ -283,23 +126,91 @@\n-            VALUE_CLASSES[0] = null;  \/\/ not used\n-            VALUE_CLASSES[1] = str;   \/\/ EMailAddress\n-            VALUE_CLASSES[2] = str;   \/\/ UnstructuredName\n-            VALUE_CLASSES[3] =        \/\/ ContentType\n-                Class.forName(\"sun.security.util.ObjectIdentifier\");\n-            VALUE_CLASSES[4] = BYTE_ARRAY_CLASS; \/\/ MessageDigest (byte[])\n-            VALUE_CLASSES[5] = Class.forName(\"java.util.Date\"); \/\/ SigningTime\n-            VALUE_CLASSES[6] =        \/\/ Countersignature\n-                Class.forName(\"[Lsun.security.pkcs.SignerInfo;\");\n-            VALUE_CLASSES[7] =        \/\/ ChallengePassword\n-                Class.forName(\"java.lang.String\");\n-            VALUE_CLASSES[8] = str;   \/\/ UnstructuredAddress\n-            VALUE_CLASSES[9] = null;  \/\/ ExtendedCertificateAttributes\n-            VALUE_CLASSES[10] = null;  \/\/ IssuerAndSerialNumber\n-            VALUE_CLASSES[11] = null;  \/\/ not used\n-            VALUE_CLASSES[12] = null;  \/\/ not used\n-            VALUE_CLASSES[13] = null;  \/\/ not used\n-            VALUE_CLASSES[14] =        \/\/ ExtensionRequest\n-                Class.forName(\"sun.security.x509.CertificateExtensions\");\n-            VALUE_CLASSES[15] = null;  \/\/ not supported yet\n-            VALUE_CLASSES[16] = null;  \/\/ not supported yet\n-            VALUE_CLASSES[17] = BYTE_ARRAY_CLASS;  \/\/ SignatureTimestampToken\n-            VALUE_CLASSES[18] = BYTE_ARRAY_CLASS;  \/\/ CMSAlgorithmProtection\n+            add(EMAIL_ADDRESS_OID, false, str,\n+                a -> Arrays.stream(a).map(\n+                    Throws.unchecked(DerValue::getAsString)).toArray(),\n+                (v,t) -> t.putIA5String((String) v),\n+                DerValue.tag_IA5String);\n+\n+            add(UNSTRUCTURED_NAME_OID, false, str,\n+                a -> Arrays.stream(a).map(\n+                    Throws.unchecked(DerValue::getAsString)).toArray(),\n+                (v,t) -> t.putIA5String((String) v),\n+                DerValue.tag_IA5String,\n+                DerValue.tag_PrintableString,\n+                DerValue.tag_T61String,\n+                DerValue.tag_BMPString,\n+                DerValue.tag_UniversalString,\n+                DerValue.tag_UTF8String);\n+\n+            add(CONTENT_TYPE_OID, true, Class.forName(\"sun.security.util.ObjectIdentifier\"),\n+                Throws.unchecked(a -> a[0].getOID()),\n+                (v,t) -> mkDerStream(t, new DerOutputStream().putOID((ObjectIdentifier) v)),\n+                DerValue.tag_ObjectId);\n+\n+            add(MESSAGE_DIGEST_OID, true, byte[].class,\n+                Throws.unchecked(a -> a[0].getOctetString()),\n+                (v,t) -> mkDerStream(t, new DerOutputStream().putOctetString((byte[]) v)),\n+                DerValue.tag_OctetString);\n+\n+            \/\/CHECK - Original converts to DerInputStream and back??\n+            add(SIGNING_TIME_OID, true, Class.forName(\"java.util.Date\"),\n+                Throws.unchecked(a -> a[0].getTime()),\n+                (v,t) -> mkDerStream(t, new DerOutputStream().putTime((Date) v)),\n+                DerValue.tag_UtcTime,\n+                DerValue.tag_GeneralizedTime);\n+\n+            add(COUNTERSIGNATURE_OID, false,\n+                Class.forName(\"[Lsun.security.pkcs.SignerInfo;\"),\n+                a -> Arrays.stream(a).map(Throws.unchecked(\n+                    e -> new SignerInfo(e.toDerInputStream()))).toArray(),\n+                (v,t) -> t.putOrderedSetOf(DerValue.tag_Set, (DerEncoder[]) v),\n+                DerValue.tag_Sequence);\n+\n+            add(CHALLENGE_PASSWORD_OID, true, Class.forName(\"java.lang.String\"),\n+                Throws.unchecked(a -> a[0].getAsString()),\n+                (v,t) -> mkDerStream(t, new DerOutputStream().putPrintableString((String) v)),\n+                DerValue.tag_PrintableString,\n+                DerValue.tag_T61String,\n+                DerValue.tag_BMPString,\n+                DerValue.tag_UniversalString,\n+                DerValue.tag_UTF8String);\n+\n+            add(UNSTRUCTURED_ADDRESS_OID, false, str,\n+                a -> Arrays.stream(a).map(\n+                    Throws.unchecked(DerValue::getAsString)).toArray(String[]::new),\n+                (v,t) -> t.putPrintableString((String) v),\n+                DerValue.tag_PrintableString,\n+                DerValue.tag_T61String,\n+                DerValue.tag_BMPString,\n+                DerValue.tag_UniversalString,\n+                DerValue.tag_UTF8String);\n+\n+            add(EXTENSION_REQUEST_OID, true,\n+                Class.forName(\"sun.security.x509.CertificateExtensions\"),\n+                Throws.unchecked(a -> new CertificateExtensions(\n+                    new DerInputStream(a[0].toByteArray()))),\n+                (v,t) -> {\n+                    DerOutputStream temp = new DerOutputStream();\n+                    CertificateExtensions exts = (CertificateExtensions) v;\n+                    exts.encode(temp, true);\n+                    return mkDerStream(t, temp);},\n+                DerValue.tag_Sequence);\n+\n+            add(SIGNING_CERTIFICATE_OID, true,\n+                Class.forName(\"sun.security.pkcs.SigningCertificateInfo\"),\n+                Throws.unchecked(a -> new SigningCertificateInfo(a[0].toByteArray())),\n+                (v,t) -> {\n+                    DerOutputStream temp = new DerOutputStream();\n+                    SigningCertificateInfo info = (SigningCertificateInfo) v;\n+                    temp.writeBytes(info.toByteArray());\n+                    return mkDerStream(t, temp);},\n+                DerValue.tag_Sequence);\n+\n+            add(SIGNATURE_TIMESTAMP_TOKEN_OID, true, byte[].class,\n+                a -> a[0].toByteArray(),\n+                (v,t) -> t.write(DerValue.tag_Set, (byte[]) v),\n+                DerValue.tag_Sequence);\n+\n+            add(CMS_ALGORITHM_PROTECTION_OID, true, byte[].class,\n+                a -> a[0].toByteArray(),\n+                (v,t) -> t.write(DerValue.tag_Set, (byte[]) v),\n+                DerValue.tag_Sequence);\n+\n@@ -311,26 +222,0 @@\n-    \/**\n-     * Array indicating which PKCS9 attributes are single-valued,\n-     * by index in <code>PKCS9_OIDS<\/code>.\n-     *\/\n-    private static final boolean[] SINGLE_VALUED = {\n-      false,\n-      false,   \/\/ EMailAddress\n-      false,   \/\/ UnstructuredName\n-      true,    \/\/ ContentType\n-      true,    \/\/ MessageDigest\n-      true,    \/\/ SigningTime\n-      false,   \/\/ Countersignature\n-      true,    \/\/ ChallengePassword\n-      false,   \/\/ UnstructuredAddress\n-      false,   \/\/ ExtendedCertificateAttributes\n-      true,    \/\/ IssuerAndSerialNumber - not supported yet\n-      false,   \/\/ not used\n-      false,   \/\/ not used\n-      false,   \/\/ not used\n-      true,    \/\/ ExtensionRequest\n-      true,    \/\/ SMIMECapability - not supported yet\n-      true,    \/\/ SigningCertificate\n-      true,    \/\/ SignatureTimestampToken\n-      true,    \/\/ CMSAlgorithmProtection\n-    };\n-\n@@ -340,1 +225,1 @@\n-    private ObjectIdentifier oid;\n+    private final ObjectIdentifier oid;\n@@ -343,2 +228,1 @@\n-     * The index of the OID of this attribute in <code>PKCS9_OIDS<\/code>,\n-     * or -1 if it's unknown.\n+     * The AttributeInfo of this attribute. Can be null if oid is unknown.\n@@ -346,1 +230,1 @@\n-    private int index;\n+    private final AttributeInfo info;\n@@ -350,1 +234,1 @@\n-     * <code>VALUE_CLASSES[index]<\/code>. The SET itself\n+     * <code>AttributeInfo.valueClass<\/code>. The SET itself\n@@ -353,1 +237,1 @@\n-    private Object value;\n+    private final Object value;\n@@ -370,5 +254,0 @@\n-    throws IllegalArgumentException {\n-        init(oid, value);\n-    }\n-\n-    private void init(ObjectIdentifier oid, Object value)\n@@ -378,8 +257,2 @@\n-        index = indexOf(oid, PKCS9_OIDS, 1);\n-        Class<?> clazz = index == -1 ? BYTE_ARRAY_CLASS: VALUE_CLASSES[index];\n-        if (clazz == null) {\n-            throw new IllegalArgumentException(\n-                    \"No value class supported \" +\n-                            \" for attribute \" + oid +\n-                            \" constructing PKCS9Attribute\");\n-        }\n+        this.info = infoMap.get(oid);\n+        Class<?> clazz = info == null ? BYTE_ARRAY_CLASS : info.valueClass();\n@@ -387,6 +260,6 @@\n-                throw new IllegalArgumentException(\n-                           \"Wrong value class \" +\n-                           \" for attribute \" + oid +\n-                           \" constructing PKCS9Attribute; was \" +\n-                           value.getClass().toString() + \", should be \" +\n-                           clazz.toString());\n+            throw new IllegalArgumentException(\n+                \"Wrong value class \" +\n+                    \" for attribute \" + oid +\n+                    \" constructing PKCS9Attribute; was \" +\n+                    value.getClass().toString() + \", should be \" +\n+                    clazz.toString());\n@@ -397,1 +270,0 @@\n-\n@@ -421,2 +293,2 @@\n-        index = indexOf(oid, PKCS9_OIDS, 1);\n-        if (index == -1) {\n+        info = infoMap.get(oid);\n+        if (info == null) {\n@@ -431,1 +303,1 @@\n-        if (SINGLE_VALUED[index] && elems.length > 1)\n+        if (info.singleValued() && elems.length > 1)\n@@ -435,1 +307,1 @@\n-        Byte tag;\n+        byte tag;\n@@ -438,1 +310,1 @@\n-            if (indexOf(tag, PKCS9_VALUE_TAGS[index], 0) == -1)\n+            if (indexOf(tag, info.valueTags(), 0) == -1)\n@@ -442,78 +314,1 @@\n-        switch (index) {\n-        case 1:     \/\/ email address\n-        case 2:     \/\/ unstructured name\n-        case 8:     \/\/ unstructured address\n-            { \/\/ open scope\n-                String[] values = new String[elems.length];\n-\n-                for (int i=0; i < elems.length; i++)\n-                    values[i] = elems[i].getAsString();\n-                value = values;\n-            } \/\/ close scope\n-            break;\n-\n-        case 3:     \/\/ content type\n-            value = elems[0].getOID();\n-            break;\n-\n-        case 4:     \/\/ message digest\n-            value = elems[0].getOctetString();\n-            break;\n-\n-        case 5:     \/\/ signing time\n-            byte elemTag = elems[0].getTag();\n-            DerInputStream dis = new DerInputStream(elems[0].toByteArray());\n-            value = dis.getTime();\n-            break;\n-\n-        case 6:     \/\/ countersignature\n-            { \/\/ open scope\n-                SignerInfo[] values = new SignerInfo[elems.length];\n-                for (int i=0; i < elems.length; i++)\n-                    values[i] =\n-                        new SignerInfo(elems[i].toDerInputStream());\n-                value = values;\n-            } \/\/ close scope\n-            break;\n-\n-        case 7:     \/\/ challenge password\n-            value = elems[0].getAsString();\n-            break;\n-\n-        case 9:     \/\/ extended-certificate attribute -- not supported\n-            throw new IOException(\"PKCS9 extended-certificate \" +\n-                                  \"attribute not supported.\");\n-            \/\/ break unnecessary\n-        case 10:    \/\/ issuerAndserialNumber attribute -- not supported\n-            throw new IOException(\"PKCS9 IssuerAndSerialNumber \" +\n-                                  \"attribute not supported.\");\n-            \/\/ break unnecessary\n-        case 11:    \/\/ RSA DSI proprietary\n-        case 12:    \/\/ RSA DSI proprietary\n-            throw new IOException(\"PKCS9 RSA DSI attributes \" +\n-                                  \"11 and 12, not supported.\");\n-            \/\/ break unnecessary\n-        case 13:    \/\/ S\/MIME unused attribute\n-            throw new IOException(\"PKCS9 attribute #13 not supported.\");\n-            \/\/ break unnecessary\n-\n-        case 14:     \/\/ ExtensionRequest\n-            value = new CertificateExtensions(\n-                       new DerInputStream(elems[0].toByteArray()));\n-            break;\n-\n-        case 15:     \/\/ SMIME-capability attribute -- not supported\n-            throw new IOException(\"PKCS9 SMIMECapability \" +\n-                                  \"attribute not supported.\");\n-            \/\/ break unnecessary\n-        case 16:     \/\/ SigningCertificate attribute\n-            value = new SigningCertificateInfo(elems[0].toByteArray());\n-            break;\n-\n-        case 17:     \/\/ SignatureTimestampToken attribute\n-        case 18:     \/\/ CMSAlgorithmProtection\n-            value = elems[0].toByteArray();\n-            break;\n-\n-        default: \/\/ can't happen\n-        }\n+        value = info.getValue.apply(elems);\n@@ -534,46 +329,0 @@\n-        switch (index) {\n-        case -1:    \/\/ Unknown\n-            temp.writeBytes((byte[])value);\n-            break;\n-        case 1:     \/\/ email address\n-        case 2:     \/\/ unstructured name\n-            { \/\/ open scope\n-                String[] values = (String[]) value;\n-                DerOutputStream[] temps = new\n-                    DerOutputStream[values.length];\n-\n-                for (int i=0; i < values.length; i++) {\n-                    temps[i] = new DerOutputStream();\n-                    temps[i].putIA5String( values[i]);\n-                }\n-                temp.putOrderedSetOf(DerValue.tag_Set, temps);\n-            } \/\/ close scope\n-            break;\n-\n-        case 3:     \/\/ content type\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                temp2.putOID((ObjectIdentifier) value);\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n-            }\n-            break;\n-\n-        case 4:     \/\/ message digest\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                temp2.putOctetString((byte[]) value);\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n-            }\n-            break;\n-\n-        case 5:     \/\/ signing time\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                temp2.putTime((Date) value);\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n-            }\n-            break;\n-\n-        case 6:     \/\/ countersignature\n-            temp.putOrderedSetOf(DerValue.tag_Set, (DerEncoder[]) value);\n-            break;\n@@ -581,7 +330,5 @@\n-        case 7:     \/\/ challenge password\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                temp2.putPrintableString((String) value);\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n-            }\n-            break;\n+        if (info == null) {\n+            temp.writeBytes((byte[])value);\n+            out.write(DerValue.tag_Sequence, temp.toByteArray());\n+            return;\n+        }\n@@ -589,5 +336,6 @@\n-        case 8:     \/\/ unstructured address\n-            { \/\/ open scope\n-                String[] values = (String[]) value;\n-                DerOutputStream[] temps = new\n-                    DerOutputStream[values.length];\n+        if (info.singleValued) {\n+            info.encoder.apply(value, temp);\n+        } else {\n+            Object[] values = (Object[]) value;\n+            DerOutputStream[] temps = new\n+                DerOutputStream[values.length];\n@@ -595,43 +343,3 @@\n-                for (int i=0; i < values.length; i++) {\n-                    temps[i] = new DerOutputStream();\n-                    temps[i].putPrintableString(values[i]);\n-                }\n-                temp.putOrderedSetOf(DerValue.tag_Set, temps);\n-            } \/\/ close scope\n-            break;\n-\n-        case 9:     \/\/ extended-certificate attribute -- not supported\n-            throw new IllegalArgumentException(\"PKCS9 extended-certificate \" +\n-                                  \"attribute not supported.\");\n-            \/\/ break unnecessary\n-        case 10:    \/\/ issuerAndserialNumber attribute -- not supported\n-            throw new IllegalArgumentException(\"PKCS9 IssuerAndSerialNumber \" +\n-                                  \"attribute not supported.\");\n-            \/\/ break unnecessary\n-        case 11:    \/\/ RSA DSI proprietary\n-        case 12:    \/\/ RSA DSI proprietary\n-            throw new IllegalArgumentException(\"PKCS9 RSA DSI attributes \" +\n-                                  \"11 and 12, not supported.\");\n-            \/\/ break unnecessary\n-        case 13:    \/\/ S\/MIME unused attribute\n-            throw new IllegalArgumentException(\"PKCS9 attribute #13 not supported.\");\n-            \/\/ break unnecessary\n-\n-        case 14:     \/\/ ExtensionRequest\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                CertificateExtensions exts = (CertificateExtensions)value;\n-                exts.encode(temp2, true);\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n-            }\n-            break;\n-        case 15:    \/\/ SMIMECapability\n-            throw new IllegalArgumentException(\"PKCS9 attribute #15 not supported.\");\n-            \/\/ break unnecessary\n-\n-        case 16:    \/\/ SigningCertificate\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                SigningCertificateInfo info = (SigningCertificateInfo)value;\n-                temp2.writeBytes(info.toByteArray());\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n+            for (int i=0; i < values.length; i++) {\n+                temps[i] = new DerOutputStream();\n+                info.encoder.apply((String) values[i], temps[i]);\n@@ -639,7 +347,1 @@\n-            break;\n-        case 17:    \/\/ SignatureTimestampToken\n-        case 18:    \/\/ CMSAlgorithmProtection\n-            temp.write(DerValue.tag_Set, (byte[])value);\n-            break;\n-\n-        default: \/\/ can't happen\n+            temp.putOrderedSetOf(DerValue.tag_Set, temps);\n@@ -656,1 +358,1 @@\n-        return index != -1;\n+        return info != null;\n@@ -677,1 +379,1 @@\n-        return index == -1 || SINGLE_VALUED[index];\n+        return info == null || info.singleValued();\n@@ -687,0 +389,2 @@\n+    public static Set<ObjectIdentifier> getOIDs() { return infoMap.keySet(); }\n+\n@@ -726,1 +430,1 @@\n-        if (index == -1) {\n+        if (info == null) {\n@@ -733,1 +437,1 @@\n-        if (index == -1 || SINGLE_VALUED[index]) {\n+        if (info == null || info.singleValued()) {\n@@ -762,3 +466,3 @@\n-    static int indexOf(Object obj, Object[] a, int start) {\n-        for (int i=start; i < a.length; i++) {\n-            if (obj.equals(a[i])) return i;\n+    static int indexOf(byte b, byte[] bs, int start) {\n+        for (int i=start; i < bs.length; i++) {\n+            if (b == bs[i]) return i;\n@@ -784,1 +488,1 @@\n-    private void throwTagException(Byte tag)\n+    private void throwTagException(byte tag)\n@@ -786,1 +490,1 @@\n-        Byte[] expectedTags = PKCS9_VALUE_TAGS[index];\n+        byte[] expectedTags = info.valueTags();\n@@ -793,1 +497,1 @@\n-        msg.append(tag.toString());\n+        msg.append(tag);\n@@ -796,1 +500,1 @@\n-        msg.append(expectedTags[0].toString());\n+        msg.append(expectedTags[0]);\n@@ -800,1 +504,1 @@\n-            msg.append(expectedTags[i].toString());\n+            msg.append(expectedTags[i]);\n@@ -805,1 +509,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attribute.java","additions":208,"deletions":504,"binary":false,"changes":712,"status":"modified"},{"patch":"@@ -270,21 +270,0 @@\n-\n-    \/**\n-     * Get an array of all attributes in this set, in order of OID.\n-     *\/\n-    public PKCS9Attribute[] getAttributes() {\n-        PKCS9Attribute[] attribs = new PKCS9Attribute[attributes.size()];\n-\n-        int j = 0;\n-        for (int i=1; i < PKCS9Attribute.PKCS9_OIDS.length &&\n-                      j < attribs.length; i++) {\n-            if (PKCS9Attribute.PKCS9_OIDS[i] == null) {\n-                continue;\n-            }\n-            attribs[j] = getAttribute(PKCS9Attribute.PKCS9_OIDS[i]);\n-\n-            if (attribs[j] != null)\n-                j++;\n-        }\n-        return attribs;\n-    }\n-\n@@ -321,0 +300,1 @@\n+    @Override\n@@ -328,5 +308,2 @@\n-        for (int i = 1; i < PKCS9Attribute.PKCS9_OIDS.length; i++) {\n-            if (PKCS9Attribute.PKCS9_OIDS[i] == null) {\n-                continue;\n-            }\n-            value = getAttribute(PKCS9Attribute.PKCS9_OIDS[i]);\n+        for (ObjectIdentifier oid : PKCS9Attribute.getOIDs()) {\n+            if (oid == null) continue;\n@@ -334,0 +311,1 @@\n+            value = getAttribute(oid);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attributes.java","additions":4,"deletions":26,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-        authed.getAttributes();\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/NonStandardNames.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}