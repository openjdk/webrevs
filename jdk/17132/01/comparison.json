{"files":[{"patch":"@@ -29,1 +29,1 @@\n-import java.util.Date;\n+import java.util.*;\n@@ -182,31 +182,13 @@\n-    \/**\n-     * Array of attribute OIDs defined in PKCS9, by number.\n-     *\/\n-    static final ObjectIdentifier[] PKCS9_OIDS = new ObjectIdentifier[19];\n-\n-    private static final Class<?> BYTE_ARRAY_CLASS;\n-\n-    static {\n-        \/\/ set unused PKCS9_OIDS entries to null\n-        \/\/ rest are initialized with public constants\n-        PKCS9_OIDS[0] = PKCS9_OIDS[11] = PKCS9_OIDS[12] = PKCS9_OIDS[13] =\n-        PKCS9_OIDS[15] = null;\n-        try {\n-            BYTE_ARRAY_CLASS = Class.forName(\"[B\");\n-        } catch (ClassNotFoundException e) {\n-            throw new ExceptionInInitializerError(e.toString());\n-        }\n-    }\n-\n-    public static final ObjectIdentifier EMAIL_ADDRESS_OID = PKCS9_OIDS[1] =\n-            ObjectIdentifier.of(KnownOIDs.EmailAddress);\n-    public static final ObjectIdentifier UNSTRUCTURED_NAME_OID = PKCS9_OIDS[2] =\n-            ObjectIdentifier.of(KnownOIDs.UnstructuredName);\n-    public static final ObjectIdentifier CONTENT_TYPE_OID = PKCS9_OIDS[3] =\n-            ObjectIdentifier.of(KnownOIDs.ContentType);\n-    public static final ObjectIdentifier MESSAGE_DIGEST_OID = PKCS9_OIDS[4] =\n-            ObjectIdentifier.of(KnownOIDs.MessageDigest);\n-    public static final ObjectIdentifier SIGNING_TIME_OID = PKCS9_OIDS[5] =\n-            ObjectIdentifier.of(KnownOIDs.SigningTime);\n-    public static final ObjectIdentifier COUNTERSIGNATURE_OID = PKCS9_OIDS[6] =\n-            ObjectIdentifier.of(KnownOIDs.CounterSignature);\n+    \/* OID Constants *\/\n+    public static final ObjectIdentifier EMAIL_ADDRESS_OID =\n+        ObjectIdentifier.of(KnownOIDs.EmailAddress);\n+    public static final ObjectIdentifier UNSTRUCTURED_NAME_OID =\n+        ObjectIdentifier.of(KnownOIDs.UnstructuredName);\n+    public static final ObjectIdentifier CONTENT_TYPE_OID =\n+        ObjectIdentifier.of(KnownOIDs.ContentType);\n+    public static final ObjectIdentifier MESSAGE_DIGEST_OID =\n+        ObjectIdentifier.of(KnownOIDs.MessageDigest);\n+    public static final ObjectIdentifier SIGNING_TIME_OID =\n+        ObjectIdentifier.of(KnownOIDs.SigningTime);\n+    public static final ObjectIdentifier COUNTERSIGNATURE_OID =\n+        ObjectIdentifier.of(KnownOIDs.CounterSignature);\n@@ -214,1 +196,1 @@\n-            PKCS9_OIDS[7] = ObjectIdentifier.of(KnownOIDs.ChallengePassword);\n+        ObjectIdentifier.of(KnownOIDs.ChallengePassword);\n@@ -216,1 +198,1 @@\n-            PKCS9_OIDS[8] = ObjectIdentifier.of(KnownOIDs.UnstructuredAddress);\n+        ObjectIdentifier.of(KnownOIDs.UnstructuredAddress);\n@@ -218,2 +200,1 @@\n-            PKCS9_OIDS[9] =\n-            ObjectIdentifier.of(KnownOIDs.ExtendedCertificateAttributes);\n+        ObjectIdentifier.of(KnownOIDs.ExtendedCertificateAttributes);\n@@ -221,4 +202,1 @@\n-            PKCS9_OIDS[10] =\n-            ObjectIdentifier.of(KnownOIDs.IssuerAndSerialNumber);\n-    \/\/ [11], [12] are RSA DSI proprietary\n-    \/\/ [13] ==> signingDescription, S\/MIME, not used anymore\n+        ObjectIdentifier.of(KnownOIDs.IssuerAndSerialNumber);\n@@ -226,1 +204,1 @@\n-            PKCS9_OIDS[14] = ObjectIdentifier.of(KnownOIDs.ExtensionRequest);\n+        ObjectIdentifier.of(KnownOIDs.ExtensionRequest);\n@@ -228,1 +206,1 @@\n-            PKCS9_OIDS[16] = ObjectIdentifier.of(KnownOIDs.SigningCertificate);\n+        ObjectIdentifier.of(KnownOIDs.SigningCertificate);\n@@ -230,2 +208,1 @@\n-            PKCS9_OIDS[17] =\n-            ObjectIdentifier.of(KnownOIDs.SignatureTimestampToken);\n+        ObjectIdentifier.of(KnownOIDs.SignatureTimestampToken);\n@@ -233,2 +210,1 @@\n-            PKCS9_OIDS[18] =\n-            ObjectIdentifier.of(KnownOIDs.CMSAlgorithmProtection);\n+        ObjectIdentifier.of(KnownOIDs.CMSAlgorithmProtection);\n@@ -236,42 +212,11 @@\n-    \/**\n-     * Acceptable ASN.1 tags for DER encodings of values of PKCS9\n-     * attributes, by index in <code>PKCS9_OIDS<\/code>.\n-     * Sets of acceptable tags are represented as arrays.\n-     *\/\n-    private static final Byte[][] PKCS9_VALUE_TAGS = {\n-        null,\n-        {DerValue.tag_IA5String},   \/\/ EMailAddress\n-        {DerValue.tag_IA5String,\n-         DerValue.tag_PrintableString,\n-         DerValue.tag_T61String,\n-         DerValue.tag_BMPString,\n-         DerValue.tag_UniversalString,\n-         DerValue.tag_UTF8String},  \/\/ UnstructuredName\n-        {DerValue.tag_ObjectId},    \/\/ ContentType\n-        {DerValue.tag_OctetString}, \/\/ MessageDigest\n-        {DerValue.tag_UtcTime,\n-         DerValue.tag_GeneralizedTime}, \/\/ SigningTime\n-        {DerValue.tag_Sequence},    \/\/ Countersignature\n-        {DerValue.tag_PrintableString,\n-         DerValue.tag_T61String,\n-         DerValue.tag_BMPString,\n-         DerValue.tag_UniversalString,\n-         DerValue.tag_UTF8String},   \/\/ ChallengePassword\n-        {DerValue.tag_PrintableString,\n-         DerValue.tag_T61String,\n-         DerValue.tag_BMPString,\n-         DerValue.tag_UniversalString,\n-         DerValue.tag_UTF8String},   \/\/ UnstructuredAddress\n-        {DerValue.tag_SetOf},       \/\/ ExtendedCertificateAttributes\n-        {DerValue.tag_Sequence},    \/\/ issuerAndSerialNumber\n-        null,\n-        null,\n-        null,\n-        {DerValue.tag_Sequence},    \/\/ extensionRequest\n-        {DerValue.tag_Sequence},    \/\/ SMIMECapability\n-        {DerValue.tag_Sequence},    \/\/ SigningCertificate\n-        {DerValue.tag_Sequence},    \/\/ SignatureTimestampToken\n-        {DerValue.tag_Sequence}     \/\/ CMSAlgorithmProtection\n-    };\n-\n-    private static final Class<?>[] VALUE_CLASSES = new Class<?>[19];\n+    private record AttributeInfo(byte[] valueTags, Class<?> valueClass, boolean singleValued) {}\n+\n+    private static final Map<ObjectIdentifier,AttributeInfo> oidMap = new HashMap<>();\n+\n+    private static void add(ObjectIdentifier oid, boolean singleValued,\n+                            Class<?> valueClass, byte... valueTags) {\n+        AttributeInfo info = new AttributeInfo(valueTags,valueClass,singleValued);\n+        if (oidMap.put(oid, info) != null) {\n+            throw new RuntimeException(\"Duplication oid: \" + oid);\n+        }\n+    }\n@@ -283,23 +228,53 @@\n-            VALUE_CLASSES[0] = null;  \/\/ not used\n-            VALUE_CLASSES[1] = str;   \/\/ EMailAddress\n-            VALUE_CLASSES[2] = str;   \/\/ UnstructuredName\n-            VALUE_CLASSES[3] =        \/\/ ContentType\n-                Class.forName(\"sun.security.util.ObjectIdentifier\");\n-            VALUE_CLASSES[4] = BYTE_ARRAY_CLASS; \/\/ MessageDigest (byte[])\n-            VALUE_CLASSES[5] = Class.forName(\"java.util.Date\"); \/\/ SigningTime\n-            VALUE_CLASSES[6] =        \/\/ Countersignature\n-                Class.forName(\"[Lsun.security.pkcs.SignerInfo;\");\n-            VALUE_CLASSES[7] =        \/\/ ChallengePassword\n-                Class.forName(\"java.lang.String\");\n-            VALUE_CLASSES[8] = str;   \/\/ UnstructuredAddress\n-            VALUE_CLASSES[9] = null;  \/\/ ExtendedCertificateAttributes\n-            VALUE_CLASSES[10] = null;  \/\/ IssuerAndSerialNumber\n-            VALUE_CLASSES[11] = null;  \/\/ not used\n-            VALUE_CLASSES[12] = null;  \/\/ not used\n-            VALUE_CLASSES[13] = null;  \/\/ not used\n-            VALUE_CLASSES[14] =        \/\/ ExtensionRequest\n-                Class.forName(\"sun.security.x509.CertificateExtensions\");\n-            VALUE_CLASSES[15] = null;  \/\/ not supported yet\n-            VALUE_CLASSES[16] = null;  \/\/ not supported yet\n-            VALUE_CLASSES[17] = BYTE_ARRAY_CLASS;  \/\/ SignatureTimestampToken\n-            VALUE_CLASSES[18] = BYTE_ARRAY_CLASS;  \/\/ CMSAlgorithmProtection\n+            add(EMAIL_ADDRESS_OID, false, str, DerValue.tag_IA5String);\n+\n+            add(UNSTRUCTURED_NAME_OID, false, str,\n+                DerValue.tag_IA5String,\n+                DerValue.tag_PrintableString,\n+                DerValue.tag_T61String,\n+                DerValue.tag_BMPString,\n+                DerValue.tag_UniversalString,\n+                DerValue.tag_UTF8String);\n+\n+            add(CONTENT_TYPE_OID, true,\n+                Class.forName(\"sun.security.util.ObjectIdentifier\"),\n+                DerValue.tag_ObjectId);\n+\n+            add(MESSAGE_DIGEST_OID, true, byte[].class,\n+                DerValue.tag_OctetString);\n+\n+            add(SIGNING_TIME_OID, true, Class.forName(\"java.util.Date\"),\n+                DerValue.tag_UtcTime, DerValue.tag_GeneralizedTime);\n+\n+            add(COUNTERSIGNATURE_OID, false,\n+                Class.forName(\"[Lsun.security.pkcs.SignerInfo;\"),\n+                DerValue.tag_Sequence);\n+\n+            add(CHALLENGE_PASSWORD_OID, true,\n+                Class.forName(\"java.lang.String\"),\n+                    DerValue.tag_PrintableString,\n+                    DerValue.tag_T61String,\n+                    DerValue.tag_BMPString,\n+                    DerValue.tag_UniversalString,\n+                    DerValue.tag_UTF8String);\n+\n+            add(UNSTRUCTURED_ADDRESS_OID, false, str,\n+                DerValue.tag_PrintableString,\n+                DerValue.tag_T61String,\n+                DerValue.tag_BMPString,\n+                DerValue.tag_UniversalString,\n+                DerValue.tag_UTF8String);\n+\n+            add(EXTENSION_REQUEST_OID, true,\n+                Class.forName(\"sun.security.x509.CertificateExtensions\"),\n+                DerValue.tag_Sequence);\n+\n+            add(SIGNING_CERTIFICATE_OID, true,\n+                Class.forName(\"sun.security.pkcs.SigningCertificateInfo\"),\n+                DerValue.tag_Sequence);\n+\n+            add(SIGNATURE_TIMESTAMP_TOKEN_OID, true, byte[].class,\n+                DerValue.tag_Sequence);\n+\n+            add(CMS_ALGORITHM_PROTECTION_OID, true, byte[].class,\n+                DerValue.tag_Sequence);\n+\n@@ -311,26 +286,0 @@\n-    \/**\n-     * Array indicating which PKCS9 attributes are single-valued,\n-     * by index in <code>PKCS9_OIDS<\/code>.\n-     *\/\n-    private static final boolean[] SINGLE_VALUED = {\n-      false,\n-      false,   \/\/ EMailAddress\n-      false,   \/\/ UnstructuredName\n-      true,    \/\/ ContentType\n-      true,    \/\/ MessageDigest\n-      true,    \/\/ SigningTime\n-      false,   \/\/ Countersignature\n-      true,    \/\/ ChallengePassword\n-      false,   \/\/ UnstructuredAddress\n-      false,   \/\/ ExtendedCertificateAttributes\n-      true,    \/\/ IssuerAndSerialNumber - not supported yet\n-      false,   \/\/ not used\n-      false,   \/\/ not used\n-      false,   \/\/ not used\n-      true,    \/\/ ExtensionRequest\n-      true,    \/\/ SMIMECapability - not supported yet\n-      true,    \/\/ SigningCertificate\n-      true,    \/\/ SignatureTimestampToken\n-      true,    \/\/ CMSAlgorithmProtection\n-    };\n-\n@@ -340,1 +289,1 @@\n-    private ObjectIdentifier oid;\n+    private final ObjectIdentifier oid;\n@@ -343,2 +292,1 @@\n-     * The index of the OID of this attribute in <code>PKCS9_OIDS<\/code>,\n-     * or -1 if it's unknown.\n+     * The AttributeInfo of this attribute\n@@ -346,1 +294,1 @@\n-    private int index;\n+    private final AttributeInfo info;\n@@ -350,1 +298,1 @@\n-     * <code>VALUE_CLASSES[index]<\/code>. The SET itself\n+     * <code>AttributeInfo.valueClass<\/code>. The SET itself\n@@ -353,1 +301,1 @@\n-    private Object value;\n+    private final Object value;\n@@ -370,5 +318,0 @@\n-    throws IllegalArgumentException {\n-        init(oid, value);\n-    }\n-\n-    private void init(ObjectIdentifier oid, Object value)\n@@ -378,2 +321,2 @@\n-        index = indexOf(oid, PKCS9_OIDS, 1);\n-        Class<?> clazz = index == -1 ? BYTE_ARRAY_CLASS: VALUE_CLASSES[index];\n+        info = oidMap.get(oid);\n+        Class<?> clazz = info.valueClass();\n@@ -382,3 +325,3 @@\n-                    \"No value class supported \" +\n-                            \" for attribute \" + oid +\n-                            \" constructing PKCS9Attribute\");\n+                \"No value class supported \" +\n+                    \" for attribute \" + oid +\n+                    \" constructing PKCS9Attribute\");\n@@ -387,6 +330,6 @@\n-                throw new IllegalArgumentException(\n-                           \"Wrong value class \" +\n-                           \" for attribute \" + oid +\n-                           \" constructing PKCS9Attribute; was \" +\n-                           value.getClass().toString() + \", should be \" +\n-                           clazz.toString());\n+            throw new IllegalArgumentException(\n+                \"Wrong value class \" +\n+                    \" for attribute \" + oid +\n+                    \" constructing PKCS9Attribute; was \" +\n+                    value.getClass().toString() + \", should be \" +\n+                    clazz.toString());\n@@ -397,1 +340,0 @@\n-\n@@ -421,2 +363,2 @@\n-        index = indexOf(oid, PKCS9_OIDS, 1);\n-        if (index == -1) {\n+        info = oidMap.get(oid);\n+        if (info == null) {\n@@ -431,1 +373,1 @@\n-        if (SINGLE_VALUED[index] && elems.length > 1)\n+        if (info.singleValued() && elems.length > 1)\n@@ -435,1 +377,1 @@\n-        Byte tag;\n+        byte tag;\n@@ -438,1 +380,1 @@\n-            if (indexOf(tag, PKCS9_VALUE_TAGS[index], 0) == -1)\n+            if (indexOf(tag, info.valueTags(), 0) == -1)\n@@ -442,4 +384,5 @@\n-        switch (index) {\n-        case 1:     \/\/ email address\n-        case 2:     \/\/ unstructured name\n-        case 8:     \/\/ unstructured address\n+        KnownOIDs knownOID = KnownOIDs.findMatch(oid.toString());\n+        switch (knownOID) {\n+        case KnownOIDs.EmailAddress:\n+        case KnownOIDs.UnstructuredName:\n+        case KnownOIDs.UnstructuredAddress:\n@@ -455,1 +398,1 @@\n-        case 3:     \/\/ content type\n+        case KnownOIDs.ContentType:\n@@ -459,1 +402,1 @@\n-        case 4:     \/\/ message digest\n+        case KnownOIDs.MessageDigest:\n@@ -463,1 +406,1 @@\n-        case 5:     \/\/ signing time\n+        case KnownOIDs.SigningTime:\n@@ -469,1 +412,1 @@\n-        case 6:     \/\/ countersignature\n+        case KnownOIDs.CounterSignature:\n@@ -479,1 +422,1 @@\n-        case 7:     \/\/ challenge password\n+        case KnownOIDs.ChallengePassword:\n@@ -483,18 +426,1 @@\n-        case 9:     \/\/ extended-certificate attribute -- not supported\n-            throw new IOException(\"PKCS9 extended-certificate \" +\n-                                  \"attribute not supported.\");\n-            \/\/ break unnecessary\n-        case 10:    \/\/ issuerAndserialNumber attribute -- not supported\n-            throw new IOException(\"PKCS9 IssuerAndSerialNumber \" +\n-                                  \"attribute not supported.\");\n-            \/\/ break unnecessary\n-        case 11:    \/\/ RSA DSI proprietary\n-        case 12:    \/\/ RSA DSI proprietary\n-            throw new IOException(\"PKCS9 RSA DSI attributes \" +\n-                                  \"11 and 12, not supported.\");\n-            \/\/ break unnecessary\n-        case 13:    \/\/ S\/MIME unused attribute\n-            throw new IOException(\"PKCS9 attribute #13 not supported.\");\n-            \/\/ break unnecessary\n-\n-        case 14:     \/\/ ExtensionRequest\n+        case KnownOIDs.ExtensionRequest:\n@@ -505,5 +431,1 @@\n-        case 15:     \/\/ SMIME-capability attribute -- not supported\n-            throw new IOException(\"PKCS9 SMIMECapability \" +\n-                                  \"attribute not supported.\");\n-            \/\/ break unnecessary\n-        case 16:     \/\/ SigningCertificate attribute\n+        case KnownOIDs.SigningCertificate:\n@@ -513,2 +435,2 @@\n-        case 17:     \/\/ SignatureTimestampToken attribute\n-        case 18:     \/\/ CMSAlgorithmProtection\n+        case KnownOIDs.SignatureTimestampToken:\n+        case KnownOIDs.CMSAlgorithmProtection:\n@@ -518,1 +440,2 @@\n-        default: \/\/ can't happen\n+        default:\n+            throw new IOException(\"Unsupported signer attribute: \" + oid);\n@@ -534,2 +457,2 @@\n-        switch (index) {\n-        case -1:    \/\/ Unknown\n+\n+        if (info == null) {\n@@ -537,3 +460,8 @@\n-            break;\n-        case 1:     \/\/ email address\n-        case 2:     \/\/ unstructured name\n+            out.write(DerValue.tag_Sequence, temp.toByteArray());\n+            return;\n+        }\n+\n+        KnownOIDs knownOID = KnownOIDs.findMatch(oid.toString());\n+        switch (knownOID) {\n+        case KnownOIDs.EmailAddress:\n+        case KnownOIDs.UnstructuredName:\n@@ -553,1 +481,1 @@\n-        case 3:     \/\/ content type\n+        case KnownOIDs.ContentType:\n@@ -561,1 +489,1 @@\n-        case 4:     \/\/ message digest\n+        case KnownOIDs.MessageDigest:\n@@ -569,1 +497,1 @@\n-        case 5:     \/\/ signing time\n+        case KnownOIDs.SigningTime:\n@@ -577,1 +505,1 @@\n-        case 6:     \/\/ countersignature\n+        case KnownOIDs.CounterSignature:\n@@ -581,1 +509,1 @@\n-        case 7:     \/\/ challenge password\n+        case KnownOIDs.ChallengePassword:\n@@ -589,1 +517,1 @@\n-        case 8:     \/\/ unstructured address\n+        case KnownOIDs.UnstructuredAddress:\n@@ -603,18 +531,1 @@\n-        case 9:     \/\/ extended-certificate attribute -- not supported\n-            throw new IllegalArgumentException(\"PKCS9 extended-certificate \" +\n-                                  \"attribute not supported.\");\n-            \/\/ break unnecessary\n-        case 10:    \/\/ issuerAndserialNumber attribute -- not supported\n-            throw new IllegalArgumentException(\"PKCS9 IssuerAndSerialNumber \" +\n-                                  \"attribute not supported.\");\n-            \/\/ break unnecessary\n-        case 11:    \/\/ RSA DSI proprietary\n-        case 12:    \/\/ RSA DSI proprietary\n-            throw new IllegalArgumentException(\"PKCS9 RSA DSI attributes \" +\n-                                  \"11 and 12, not supported.\");\n-            \/\/ break unnecessary\n-        case 13:    \/\/ S\/MIME unused attribute\n-            throw new IllegalArgumentException(\"PKCS9 attribute #13 not supported.\");\n-            \/\/ break unnecessary\n-\n-        case 14:     \/\/ ExtensionRequest\n+        case KnownOIDs.ExtensionRequest:\n@@ -628,3 +539,0 @@\n-        case 15:    \/\/ SMIMECapability\n-            throw new IllegalArgumentException(\"PKCS9 attribute #15 not supported.\");\n-            \/\/ break unnecessary\n@@ -632,1 +540,1 @@\n-        case 16:    \/\/ SigningCertificate\n+        case KnownOIDs.SigningCertificate:\n@@ -640,2 +548,2 @@\n-        case 17:    \/\/ SignatureTimestampToken\n-        case 18:    \/\/ CMSAlgorithmProtection\n+        case KnownOIDs.SignatureTimestampToken:\n+        case KnownOIDs.CMSAlgorithmProtection:\n@@ -645,1 +553,4 @@\n-        default: \/\/ can't happen\n+        default: \/\/Should never happen\n+            temp.writeBytes((byte[])value);\n+            out.write(DerValue.tag_Sequence, temp.toByteArray());\n+            return;\n@@ -656,1 +567,1 @@\n-        return index != -1;\n+        return info != null;\n@@ -677,1 +588,1 @@\n-        return index == -1 || SINGLE_VALUED[index];\n+        return info == null || info.singleValued();\n@@ -687,0 +598,2 @@\n+    public static Set<ObjectIdentifier> getOIDs() { return oidMap.keySet(); }\n+\n@@ -726,1 +639,1 @@\n-        if (index == -1) {\n+        if (info == null) {\n@@ -733,1 +646,1 @@\n-        if (index == -1 || SINGLE_VALUED[index]) {\n+        if (info == null || info.singleValued()) {\n@@ -762,3 +675,3 @@\n-    static int indexOf(Object obj, Object[] a, int start) {\n-        for (int i=start; i < a.length; i++) {\n-            if (obj.equals(a[i])) return i;\n+    static int indexOf(byte b, byte[] bs, int start) {\n+        for (int i=start; i < bs.length; i++) {\n+            if (b == bs[i]) return i;\n@@ -784,1 +697,1 @@\n-    private void throwTagException(Byte tag)\n+    private void throwTagException(byte tag)\n@@ -786,1 +699,1 @@\n-        Byte[] expectedTags = PKCS9_VALUE_TAGS[index];\n+        byte[] expectedTags = info.valueTags();\n@@ -793,1 +706,1 @@\n-        msg.append(tag.toString());\n+        msg.append(tag);\n@@ -796,1 +709,1 @@\n-        msg.append(expectedTags[0].toString());\n+        msg.append(expectedTags[0]);\n@@ -800,1 +713,1 @@\n-            msg.append(expectedTags[i].toString());\n+            msg.append(expectedTags[i]);\n@@ -805,1 +718,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attribute.java","additions":162,"deletions":249,"binary":false,"changes":411,"status":"modified"},{"patch":"@@ -270,21 +270,0 @@\n-\n-    \/**\n-     * Get an array of all attributes in this set, in order of OID.\n-     *\/\n-    public PKCS9Attribute[] getAttributes() {\n-        PKCS9Attribute[] attribs = new PKCS9Attribute[attributes.size()];\n-\n-        int j = 0;\n-        for (int i=1; i < PKCS9Attribute.PKCS9_OIDS.length &&\n-                      j < attribs.length; i++) {\n-            if (PKCS9Attribute.PKCS9_OIDS[i] == null) {\n-                continue;\n-            }\n-            attribs[j] = getAttribute(PKCS9Attribute.PKCS9_OIDS[i]);\n-\n-            if (attribs[j] != null)\n-                j++;\n-        }\n-        return attribs;\n-    }\n-\n@@ -328,5 +307,2 @@\n-        for (int i = 1; i < PKCS9Attribute.PKCS9_OIDS.length; i++) {\n-            if (PKCS9Attribute.PKCS9_OIDS[i] == null) {\n-                continue;\n-            }\n-            value = getAttribute(PKCS9Attribute.PKCS9_OIDS[i]);\n+        for (ObjectIdentifier oid : PKCS9Attribute.getOIDs()) {\n+            if (oid == null) continue;\n@@ -334,0 +310,1 @@\n+            value = getAttribute(oid);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attributes.java","additions":3,"deletions":26,"binary":false,"changes":29,"status":"modified"}]}