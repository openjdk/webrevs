{"files":[{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8265372\n+ * @summary checking PKCS#9 encoding and decoding\n+ * @modules java.base\/sun.security.pkcs:+open\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.x509\n+ *\/\n+import sun.security.pkcs.PKCS9Attribute;\n+import sun.security.pkcs.SignerInfo;\n+import sun.security.util.DerOutputStream;\n+import sun.security.util.DerValue;\n+import sun.security.util.KnownOIDs;\n+import sun.security.util.ObjectIdentifier;\n+import sun.security.x509.AlgorithmId;\n+import sun.security.x509.BasicConstraintsExtension;\n+import sun.security.x509.CertificateExtensions;\n+import sun.security.x509.X500Name;\n+\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HexFormat;\n+\n+import static sun.security.pkcs.PKCS9Attribute.*;\n+\n+public class EncodeDecode {\n+    public static void main(String[] args) throws Exception {\n+        test(EMAIL_ADDRESS_OID, new String[]{\"a@a.com\", \"b@b.org\"},\n+            \"301f06092a864886f70d010901311216076140612e636f6d16076240622e6f7267\");\n+        test(UNSTRUCTURED_NAME_OID, new String[]{\"a@a.com\", \"b@b.org\"},\n+            \"301f06092a864886f70d010902311216076140612e636f6d16076240622e6f7267\");\n+        test(CONTENT_TYPE_OID, CONTENT_TYPE_OID,\n+            \"301806092a864886f70d010903310b06092a864886f70d010903\");\n+        test(MESSAGE_DIGEST_OID, new byte[10],\n+            \"301906092a864886f70d010904310c040a00000000000000000000\");\n+        test(SIGNING_TIME_OID, new Date(0),\n+            \"301c06092a864886f70d010905310f170d3730303130313030303030305a\");\n+\n+        var sis = new SignerInfo[] {\n+            new SignerInfo(new X500Name(\"CN=x\"),\n+                BigInteger.ONE,\n+                AlgorithmId.get(\"SHA-256\"),\n+                AlgorithmId.get(\"Ed25519\"),\n+                new byte[10])\n+        };\n+        test(COUNTERSIGNATURE_OID, sis,\n+            \"304706092a864886f70d010906313a30380201013011300c310a30080603550403130178020101300d06096086480165030402010500300506032b6570040a00000000000000000000\");\n+\n+        test(CHALLENGE_PASSWORD_OID, \"password\",\n+            \"301706092a864886f70d010907310a130870617373776f7264\");\n+        test(UNSTRUCTURED_ADDRESS_OID, new String[]{\"a@a.com\", \"b@b.org\"},\n+            \"301f06092a864886f70d010908311213076140612e636f6d13076240622e6f7267\");\n+\n+        var exts = new CertificateExtensions();\n+        exts.setExtension(\"bc\", new BasicConstraintsExtension(true, true, 2));\n+        test(EXTENSION_REQUEST_OID, exts,\n+            \"302306092a864886f70d01090e3116301430120603551d130101ff040830060101ff020102\");\n+\n+        var c = Class.forName(\"sun.security.pkcs.SigningCertificateInfo\");\n+        var ctor = c.getDeclaredConstructor(byte[].class);\n+        ctor.setAccessible(true);\n+        \/\/ A SigningCertificateInfo with an empty ESSCertID\n+        var sci = ctor.newInstance((Object) new DerOutputStream()\n+            .write(DerValue.tag_Sequence, new DerOutputStream()\n+                .write(DerValue.tag_Sequence, new DerOutputStream()))\n+            .toByteArray());\n+        test(SIGNING_CERTIFICATE_OID, sci,\n+            \"3013060b2a864886f70d010910020c310430023000\");\n+\n+        var onev = new DerOutputStream().write(DerValue.tag_Sequence,\n+                new DerOutputStream().putOctetString(new byte[10]))\n+            .toByteArray();\n+\n+        test(SIGNATURE_TIMESTAMP_TOKEN_OID, onev,\n+            \"301d060b2a864886f70d010910020e310e300c040a00000000000000000000\");\n+        test(CMS_ALGORITHM_PROTECTION_OID, onev,\n+            \"301b06092a864886f70d010934310e300c040a00000000000000000000\");\n+\n+        test(AlgorithmId.SHA_oid,\n+            new DerOutputStream().write(DerValue.tag_Set, new DerOutputStream().putBoolean(true)).toByteArray(),\n+            \"300c06052b0e03021a31030101ff\");\n+    }\n+\n+    static void test(ObjectIdentifier oid, Object value, String expected) throws Exception {\n+        System.out.println(\"---------- \" + KnownOIDs.findMatch(oid.toString()).name());\n+        var p9 = new PKCS9Attribute(oid, value);\n+        var enc = new DerOutputStream().write(p9).toByteArray();\n+        if (!HexFormat.of().formatHex(enc).equals(expected)) {\n+            throw new RuntimeException(\"encode unmatch\");\n+        }\n+        var nv = new PKCS9Attribute(new DerValue(enc)).getValue();\n+        boolean equals;\n+        if (value instanceof SignerInfo[] si) {\n+            \/\/ equals not defined for SignerInfo\n+            equals = Arrays.toString(si).equals(Arrays.toString((SignerInfo[])nv));\n+        } else if (value instanceof byte[] bb) {\n+            equals = Arrays.equals(bb, (byte[]) nv);\n+        } else if (value.getClass().isArray()) {\n+            equals = Arrays.equals((Object[]) value, (Object[]) nv);\n+        } else if (value.getClass().getName().equals(\"sun.security.pkcs.SigningCertificateInfo\")) {\n+            \/\/ equals not defined for SigningCertificateInfo\n+            equals = value.toString().equals(nv.toString());\n+        } else {\n+            equals = nv.equals(value);\n+        }\n+        if (!equals) {\n+            throw new RuntimeException(\"decode unmatch\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/pkcs\/pkcs9\/EncodeDecode.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}