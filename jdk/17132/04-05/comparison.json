{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.lang.reflect.Array;\n@@ -30,1 +31,0 @@\n-import java.util.function.Function;\n@@ -32,3 +32,0 @@\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.ArrayList;\n@@ -84,4 +81,27 @@\n-    private record AttributeInfo(boolean singleValued, Class<?> valueClass,\n-                                 Function<DerValue[], Object> getValue,\n-                                 BiFunction<Object, DerOutputStream, DerOutputStream> encoder,\n-                                 byte... valueTags) {}\n+    private record AttributeInfo<T>(boolean singleValued, Class<?> valueClass,\n+                                 Decoder<T> decoder,\n+                                 Encoder<T> encoder,\n+                                 byte... valueTags) {\n+\n+        @SuppressWarnings(\"unchecked\")\n+        DerOutputStream encode(Object o) {\n+            var d = new DerOutputStream();\n+            \/\/This type is checked in the PKCS9Attribute constructor\n+            encoder.encode(d, (T)o);\n+            return d;\n+        }\n+\n+        T decode(DerValue d) throws IOException {\n+            return decoder.decode(d);\n+        }\n+    }\n+\n+    @FunctionalInterface\n+    public interface Decoder<R> {\n+        R decode(DerValue t) throws IOException;\n+    }\n+\n+    @FunctionalInterface\n+    public interface Encoder<R> {\n+        void encode(DerOutputStream t, R r);\n+    }\n@@ -92,1 +112,1 @@\n-    private static final Map<ObjectIdentifier, AttributeInfo> infoMap = new HashMap<>();\n+    private static final Map<ObjectIdentifier, AttributeInfo<?>> infoMap = new HashMap<>();\n@@ -95,4 +115,5 @@\n-    private static void add(ObjectIdentifier oid, boolean singleValued,\n-                            Class<?> valueClass, Function<DerValue[], Object> getValue,\n-                            BiFunction<Object, DerOutputStream, DerOutputStream> encoder,\n-                            byte... valueTags) {\n+    private static <T> void add(ObjectIdentifier oid, boolean singleValued,\n+                                Class<T> valueClass,\n+                                Decoder<T> decoder,\n+                                Encoder<T> encoder,\n+                                byte... valueTags) {\n@@ -100,2 +121,2 @@\n-        AttributeInfo info =\n-            new AttributeInfo(singleValued, valueClass, getValue, encoder, valueTags);\n+        AttributeInfo<T> info =\n+            new AttributeInfo<T>(singleValued, valueClass, decoder, encoder, valueTags);\n@@ -108,21 +129,0 @@\n-    \/* Interface for handling errors within lambda expression *\/\n-    @FunctionalInterface\n-    public interface Throws<T, R, E extends Throwable> {\n-        R apply(T t) throws E;\n-\n-        static <T, R, E extends Throwable> Function<T, R> unchecked(Throws<T, R, E> f) {\n-            return t -> {\n-                try {\n-                    return f.apply(t);\n-                } catch (Throwable e) {\n-                    throw new RuntimeException(e);\n-                }\n-            };\n-        }\n-    }\n-\n-    \/* Simplifies lambda expressions when setting AttributeInfo *\/\n-    private static DerOutputStream mkDerStream(DerOutputStream t, DerOutputStream r) {\n-        return t.write(DerValue.tag_Set, r.toByteArray());\n-    }\n-\n@@ -131,4 +131,3 @@\n-        add(EMAIL_ADDRESS_OID, false, String[].class,\n-            a -> Arrays.stream(a).map(\n-                Throws.unchecked(DerValue::getAsString)).toArray(),\n-            (v,t) -> t.putIA5String((String) v),\n+        add(EMAIL_ADDRESS_OID, false, String.class,\n+            DerValue::getAsString,\n+            DerOutputStream::putIA5String,\n@@ -137,4 +136,3 @@\n-        add(UNSTRUCTURED_NAME_OID, false, String[].class,\n-            a -> Arrays.stream(a).map(\n-                Throws.unchecked(DerValue::getAsString)).toArray(),\n-            (v,t) -> t.putIA5String((String) v),\n+        add(UNSTRUCTURED_NAME_OID, false, String.class,\n+            DerValue::getAsString,\n+            DerOutputStream::putIA5String,\n@@ -149,2 +147,2 @@\n-            Throws.unchecked(a -> a[0].getOID()),\n-            (v,t) -> mkDerStream(t, new DerOutputStream().putOID((ObjectIdentifier) v)),\n+            DerValue::getOID,\n+            DerOutputStream::putOID,\n@@ -154,2 +152,2 @@\n-            Throws.unchecked(a -> a[0].getOctetString()),\n-            (v,t) -> mkDerStream(t, new DerOutputStream().putOctetString((byte[]) v)),\n+            DerValue::getOctetString,\n+            DerOutputStream::putOctetString,\n@@ -159,2 +157,2 @@\n-            Throws.unchecked(a -> new DerInputStream(a[0].toByteArray()).getTime()),\n-            (v,t) -> mkDerStream(t, new DerOutputStream().putTime((Date) v)),\n+            DerValue::getTime,\n+            DerOutputStream::putTime,\n@@ -164,4 +162,3 @@\n-        add(COUNTERSIGNATURE_OID, false, sun.security.pkcs.SignerInfo[].class,\n-            a -> Arrays.stream(a).map(Throws.unchecked(\n-                e -> new SignerInfo(e.toDerInputStream()))).toArray(),\n-            (v,t) -> t.putOrderedSetOf(DerValue.tag_Set, (DerEncoder[]) v),\n+        add(COUNTERSIGNATURE_OID, false, sun.security.pkcs.SignerInfo.class,\n+            e -> new SignerInfo(e.toDerInputStream()),\n+            DerOutputStream::write,\n@@ -171,2 +168,2 @@\n-            Throws.unchecked(a -> a[0].getAsString()),\n-            (v,t) -> mkDerStream(t, new DerOutputStream().putPrintableString((String) v)),\n+            DerValue::getAsString,\n+            DerOutputStream::putPrintableString,\n@@ -179,4 +176,3 @@\n-        add(UNSTRUCTURED_ADDRESS_OID, false, String[].class,\n-            a -> Arrays.stream(a).map(\n-                Throws.unchecked(DerValue::getAsString)).toArray(String[]::new),\n-            (v,t) -> t.putPrintableString((String) v),\n+        add(UNSTRUCTURED_ADDRESS_OID, false, String.class,\n+            DerValue::getAsString,\n+            DerOutputStream::putPrintableString,\n@@ -190,7 +186,2 @@\n-            Throws.unchecked(a -> new CertificateExtensions(\n-                new DerInputStream(a[0].toByteArray()))),\n-            (v,t) -> {\n-                DerOutputStream temp = new DerOutputStream();\n-                CertificateExtensions exts = (CertificateExtensions) v;\n-                exts.encode(temp, true);\n-                return mkDerStream(t, temp);},\n+            a -> new CertificateExtensions(new DerInputStream(a.toByteArray())),\n+            (t, v) -> v.encode(t, true),\n@@ -200,6 +191,2 @@\n-            Throws.unchecked(a -> new SigningCertificateInfo(a[0].toByteArray())),\n-            (v,t) -> {\n-                DerOutputStream temp = new DerOutputStream();\n-                SigningCertificateInfo info = (SigningCertificateInfo) v;\n-                temp.writeBytes(info.toByteArray());\n-                return mkDerStream(t, temp);},\n+            a -> new SigningCertificateInfo(a.toByteArray()),\n+            (t, v) -> t.writeBytes(v.toByteArray()),\n@@ -209,2 +196,2 @@\n-            a -> a[0].toByteArray(),\n-            (v,t) -> t.write(DerValue.tag_Set, (byte[]) v),\n+            DerValue::toByteArray,\n+            (t, v) -> t.writeBytes(v),\n@@ -214,2 +201,2 @@\n-            a -> a[0].toByteArray(),\n-            (v,t) -> t.write(DerValue.tag_Set, (byte[]) v),\n+            DerValue::toByteArray,\n+            (t, v) -> t.writeBytes(v),\n@@ -227,1 +214,1 @@\n-    private final AttributeInfo info;\n+    private final AttributeInfo<?> info;\n@@ -255,1 +242,3 @@\n-        Class<?> clazz = info == null ? byte[].class : info.valueClass();\n+        Class<?> clazz = info == null\n+            ? byte[].class\n+            : info.singleValued ? info.valueClass() : info.valueClass.arrayType();\n@@ -311,1 +300,8 @@\n-        value = info.getValue.apply(elems);\n+        if (info.singleValued) {\n+            value = info.decode(elems[0]);\n+        } else {\n+            value = Array.newInstance(info.valueClass, elems.length);\n+            for (int i = 0; i < elems.length; i++) {\n+                Array.set(value, i, info.decode(elems[i]));\n+            }\n+        }\n@@ -334,1 +330,1 @@\n-            info.encoder.apply(value, temp);\n+            temp.write(DerValue.tag_Set, info.encode(value));\n@@ -341,2 +337,1 @@\n-                temps[i] = new DerOutputStream();\n-                info.encoder.apply((String) values[i], temps[i]);\n+                temps[i] = info.encode(values[i]);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attribute.java","additions":79,"deletions":84,"binary":false,"changes":163,"status":"modified"}]}