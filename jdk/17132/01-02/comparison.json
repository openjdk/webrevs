{"files":[{"patch":"@@ -30,0 +30,5 @@\n+import java.util.function.Function;\n+import java.util.function.BiFunction;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ArrayList;\n@@ -38,137 +43,0 @@\n- * <a name=\"classTable\"><h3>Type\/Class Table<\/h3><\/a>\n- * The following table shows the correspondence between\n- * PKCS9 attribute types and value component classes.\n- * For types not listed here, its name is the OID\n- * in string form, its value is a (single-valued)\n- * byte array that is the SET's encoding.\n- *\n- * <TABLE BORDER CELLPADDING=8 ALIGN=CENTER>\n- *\n- * <TR>\n- * <TH>Object Identifier<\/TH>\n- * <TH>Attribute Name<\/TH>\n- * <TH>Type<\/TH>\n- * <TH>Value Class<\/TH>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.1<\/TD>\n- * <TD>EmailAddress<\/TD>\n- * <TD>Multi-valued<\/TD>\n- * <TD><code>String[]<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.2<\/TD>\n- * <TD>UnstructuredName<\/TD>\n- * <TD>Multi-valued<\/TD>\n- * <TD><code>String[]<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.3<\/TD>\n- * <TD>ContentType<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD><code>ObjectIdentifier<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.4<\/TD>\n- * <TD>MessageDigest<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD><code>byte[]<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.5<\/TD>\n- * <TD>SigningTime<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD><code>Date<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.6<\/TD>\n- * <TD>Countersignature<\/TD>\n- * <TD>Multi-valued<\/TD>\n- * <TD><code>SignerInfo[]<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.7<\/TD>\n- * <TD>ChallengePassword<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD><code>String<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.8<\/TD>\n- * <TD>UnstructuredAddress<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD><code>String<\/code><\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.9<\/TD>\n- * <TD>ExtendedCertificateAttributes<\/TD>\n- * <TD>Multi-valued<\/TD>\n- * <TD>(not supported)<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.10<\/TD>\n- * <TD>IssuerAndSerialNumber<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>(not supported)<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.{11,12}<\/TD>\n- * <TD>RSA DSI proprietary<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>(not supported)<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.13<\/TD>\n- * <TD>S\/MIME unused assignment<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>(not supported)<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.14<\/TD>\n- * <TD>ExtensionRequest<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>CertificateExtensions<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.15<\/TD>\n- * <TD>SMIMECapability<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>(not supported)<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.16.2.12<\/TD>\n- * <TD>SigningCertificate<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>SigningCertificateInfo<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.16.2.14<\/TD>\n- * <TD>SignatureTimestampToken<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>byte[]<\/TD>\n- * <\/TR>\n- *\n- * <TR>\n- * <TD>1.2.840.113549.1.9.16.2.52<\/TD>\n- * <TD>CMSAlgorithmProtection<\/TD>\n- * <TD>Single-valued<\/TD>\n- * <TD>byte[]<\/TD>\n- * <\/TR>\n- *\n- * <\/TABLE>\n- *\n@@ -212,1 +80,4 @@\n-    private record AttributeInfo(byte[] valueTags, Class<?> valueClass, boolean singleValued) {}\n+    private record AttributeInfo(boolean singleValued, Class<?> valueClass,\n+                                 Function<DerValue[], Object> getValue,\n+                                 BiFunction<Object, DerOutputStream, DerOutputStream> encoder,\n+                                 byte... valueTags) {}\n@@ -214,1 +85,1 @@\n-    private static final Map<ObjectIdentifier,AttributeInfo> oidMap = new HashMap<>();\n+    private static final Map<ObjectIdentifier, AttributeInfo> infoMap = new HashMap<>();\n@@ -217,4 +88,28 @@\n-                            Class<?> valueClass, byte... valueTags) {\n-        AttributeInfo info = new AttributeInfo(valueTags,valueClass,singleValued);\n-        if (oidMap.put(oid, info) != null) {\n-            throw new RuntimeException(\"Duplication oid: \" + oid);\n+                            Class<?> valueClass, Function<DerValue[], Object> getValue,\n+                            BiFunction<Object, DerOutputStream, DerOutputStream> encoder,\n+                            byte... valueTags) {\n+\n+        AttributeInfo info =\n+            new AttributeInfo(singleValued, valueClass, getValue, encoder, valueTags);\n+\n+        if (infoMap.put(oid, info) != null) {\n+            throw new RuntimeException(\"Duplicate oid: \" + oid);\n+        }\n+    }\n+\n+    private static DerOutputStream mkDerStream(DerOutputStream t, DerOutputStream r) {\n+        return t.write(DerValue.tag_Set, r.toByteArray());\n+    }\n+\n+    @FunctionalInterface\n+    public interface Throws<T, R, E extends Throwable> {\n+        R apply(T t) throws E;\n+\n+        static <T, R, E extends Throwable> Function<T, R> unchecked(Throws<T, R, E> f) {\n+            return t -> {\n+                try {\n+                    return f.apply(t);\n+                } catch (Throwable e) {\n+                    throw new RuntimeException(e);\n+                }\n+            };\n@@ -224,0 +119,2 @@\n+    private static final Class<?> BYTE_ARRAY_CLASS;\n+\n@@ -226,0 +123,1 @@\n+            BYTE_ARRAY_CLASS = Class.forName(\"[B\");\n@@ -228,1 +126,5 @@\n-            add(EMAIL_ADDRESS_OID, false, str, DerValue.tag_IA5String);\n+            add(EMAIL_ADDRESS_OID, false, str,\n+                a -> Arrays.stream(a).map(\n+                    Throws.unchecked(DerValue::getAsString)).toArray(),\n+                (v,t) -> t.putIA5String((String) v),\n+                DerValue.tag_IA5String);\n@@ -231,0 +133,3 @@\n+                a -> Arrays.stream(a).map(\n+                    Throws.unchecked(DerValue::getAsString)).toArray(),\n+                (v,t) -> t.putIA5String((String) v),\n@@ -238,2 +143,3 @@\n-            add(CONTENT_TYPE_OID, true,\n-                Class.forName(\"sun.security.util.ObjectIdentifier\"),\n+            add(CONTENT_TYPE_OID, true, Class.forName(\"sun.security.util.ObjectIdentifier\"),\n+                Throws.unchecked(a -> a[0].getOID()),\n+                (v,t) -> mkDerStream(t, new DerOutputStream().putOID((ObjectIdentifier) v)),\n@@ -243,0 +149,2 @@\n+                Throws.unchecked(a -> a[0].getOctetString()),\n+                (v,t) -> mkDerStream(t, new DerOutputStream().putOctetString((byte[]) v)),\n@@ -245,0 +153,1 @@\n+            \/\/CHECK - Original converts to DerInputStream and back??\n@@ -246,1 +155,4 @@\n-                DerValue.tag_UtcTime, DerValue.tag_GeneralizedTime);\n+                Throws.unchecked(a -> a[0].getTime()),\n+                (v,t) -> mkDerStream(t, new DerOutputStream().putTime((Date) v)),\n+                DerValue.tag_UtcTime,\n+                DerValue.tag_GeneralizedTime);\n@@ -250,0 +162,3 @@\n+                a -> Arrays.stream(a).map(Throws.unchecked(\n+                    e -> new SignerInfo(e.toDerInputStream()))).toArray(),\n+                (v,t) -> t.putOrderedSetOf(DerValue.tag_Set, (DerEncoder[]) v),\n@@ -252,7 +167,8 @@\n-            add(CHALLENGE_PASSWORD_OID, true,\n-                Class.forName(\"java.lang.String\"),\n-                    DerValue.tag_PrintableString,\n-                    DerValue.tag_T61String,\n-                    DerValue.tag_BMPString,\n-                    DerValue.tag_UniversalString,\n-                    DerValue.tag_UTF8String);\n+            add(CHALLENGE_PASSWORD_OID, true, Class.forName(\"java.lang.String\"),\n+                Throws.unchecked(a -> a[0].getAsString()),\n+                (v,t) -> mkDerStream(t, new DerOutputStream().putPrintableString((String) v)),\n+                DerValue.tag_PrintableString,\n+                DerValue.tag_T61String,\n+                DerValue.tag_BMPString,\n+                DerValue.tag_UniversalString,\n+                DerValue.tag_UTF8String);\n@@ -261,0 +177,3 @@\n+                a -> Arrays.stream(a).map(\n+                    Throws.unchecked(DerValue::getAsString)).toArray(String[]::new),\n+                (v,t) -> t.putPrintableString((String) v),\n@@ -269,0 +188,7 @@\n+                Throws.unchecked(a -> new CertificateExtensions(\n+                    new DerInputStream(a[0].toByteArray()))),\n+                (v,t) -> {\n+                    DerOutputStream temp = new DerOutputStream();\n+                    CertificateExtensions exts = (CertificateExtensions) v;\n+                    exts.encode(temp, true);\n+                    return mkDerStream(t, temp);},\n@@ -273,0 +199,6 @@\n+                Throws.unchecked(a -> new SigningCertificateInfo(a[0].toByteArray())),\n+                (v,t) -> {\n+                    DerOutputStream temp = new DerOutputStream();\n+                    SigningCertificateInfo info = (SigningCertificateInfo) v;\n+                    temp.writeBytes(info.toByteArray());\n+                    return mkDerStream(t, temp);},\n@@ -276,0 +208,2 @@\n+                a -> a[0].toByteArray(),\n+                (v,t) -> t.write(DerValue.tag_Set, (byte[]) v),\n@@ -279,0 +213,2 @@\n+                a -> a[0].toByteArray(),\n+                (v,t) -> t.write(DerValue.tag_Set, (byte[]) v),\n@@ -292,1 +228,1 @@\n-     * The AttributeInfo of this attribute\n+     * The AttributeInfo of this attribute. Can be null if oid is unknown.\n@@ -321,8 +257,2 @@\n-        info = oidMap.get(oid);\n-        Class<?> clazz = info.valueClass();\n-        if (clazz == null) {\n-            throw new IllegalArgumentException(\n-                \"No value class supported \" +\n-                    \" for attribute \" + oid +\n-                    \" constructing PKCS9Attribute\");\n-        }\n+        this.info = infoMap.get(oid);\n+        Class<?> clazz = info == null ? BYTE_ARRAY_CLASS : info.valueClass();\n@@ -363,1 +293,1 @@\n-        info = oidMap.get(oid);\n+        info = infoMap.get(oid);\n@@ -384,59 +314,1 @@\n-        KnownOIDs knownOID = KnownOIDs.findMatch(oid.toString());\n-        switch (knownOID) {\n-        case KnownOIDs.EmailAddress:\n-        case KnownOIDs.UnstructuredName:\n-        case KnownOIDs.UnstructuredAddress:\n-            { \/\/ open scope\n-                String[] values = new String[elems.length];\n-\n-                for (int i=0; i < elems.length; i++)\n-                    values[i] = elems[i].getAsString();\n-                value = values;\n-            } \/\/ close scope\n-            break;\n-\n-        case KnownOIDs.ContentType:\n-            value = elems[0].getOID();\n-            break;\n-\n-        case KnownOIDs.MessageDigest:\n-            value = elems[0].getOctetString();\n-            break;\n-\n-        case KnownOIDs.SigningTime:\n-            byte elemTag = elems[0].getTag();\n-            DerInputStream dis = new DerInputStream(elems[0].toByteArray());\n-            value = dis.getTime();\n-            break;\n-\n-        case KnownOIDs.CounterSignature:\n-            { \/\/ open scope\n-                SignerInfo[] values = new SignerInfo[elems.length];\n-                for (int i=0; i < elems.length; i++)\n-                    values[i] =\n-                        new SignerInfo(elems[i].toDerInputStream());\n-                value = values;\n-            } \/\/ close scope\n-            break;\n-\n-        case KnownOIDs.ChallengePassword:\n-            value = elems[0].getAsString();\n-            break;\n-\n-        case KnownOIDs.ExtensionRequest:\n-            value = new CertificateExtensions(\n-                       new DerInputStream(elems[0].toByteArray()));\n-            break;\n-\n-        case KnownOIDs.SigningCertificate:\n-            value = new SigningCertificateInfo(elems[0].toByteArray());\n-            break;\n-\n-        case KnownOIDs.SignatureTimestampToken:\n-        case KnownOIDs.CMSAlgorithmProtection:\n-            value = elems[0].toByteArray();\n-            break;\n-\n-        default:\n-            throw new IOException(\"Unsupported signer attribute: \" + oid);\n-        }\n+        value = info.getValue.apply(elems);\n@@ -464,58 +336,6 @@\n-        KnownOIDs knownOID = KnownOIDs.findMatch(oid.toString());\n-        switch (knownOID) {\n-        case KnownOIDs.EmailAddress:\n-        case KnownOIDs.UnstructuredName:\n-            { \/\/ open scope\n-                String[] values = (String[]) value;\n-                DerOutputStream[] temps = new\n-                    DerOutputStream[values.length];\n-\n-                for (int i=0; i < values.length; i++) {\n-                    temps[i] = new DerOutputStream();\n-                    temps[i].putIA5String( values[i]);\n-                }\n-                temp.putOrderedSetOf(DerValue.tag_Set, temps);\n-            } \/\/ close scope\n-            break;\n-\n-        case KnownOIDs.ContentType:\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                temp2.putOID((ObjectIdentifier) value);\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n-            }\n-            break;\n-\n-        case KnownOIDs.MessageDigest:\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                temp2.putOctetString((byte[]) value);\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n-            }\n-            break;\n-\n-        case KnownOIDs.SigningTime:\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                temp2.putTime((Date) value);\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n-            }\n-            break;\n-\n-        case KnownOIDs.CounterSignature:\n-            temp.putOrderedSetOf(DerValue.tag_Set, (DerEncoder[]) value);\n-            break;\n-\n-        case KnownOIDs.ChallengePassword:\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                temp2.putPrintableString((String) value);\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n-            }\n-            break;\n-\n-        case KnownOIDs.UnstructuredAddress:\n-            { \/\/ open scope\n-                String[] values = (String[]) value;\n-                DerOutputStream[] temps = new\n-                    DerOutputStream[values.length];\n+        if (info.singleValued) {\n+            info.encoder.apply(value, temp);\n+        } else {\n+            Object[] values = (Object[]) value;\n+            DerOutputStream[] temps = new\n+                DerOutputStream[values.length];\n@@ -523,14 +343,3 @@\n-                for (int i=0; i < values.length; i++) {\n-                    temps[i] = new DerOutputStream();\n-                    temps[i].putPrintableString(values[i]);\n-                }\n-                temp.putOrderedSetOf(DerValue.tag_Set, temps);\n-            } \/\/ close scope\n-            break;\n-\n-        case KnownOIDs.ExtensionRequest:\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                CertificateExtensions exts = (CertificateExtensions)value;\n-                exts.encode(temp2, true);\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n+            for (int i=0; i < values.length; i++) {\n+                temps[i] = new DerOutputStream();\n+                info.encoder.apply((String) values[i], temps[i]);\n@@ -538,19 +347,1 @@\n-            break;\n-\n-        case KnownOIDs.SigningCertificate:\n-            {\n-                DerOutputStream temp2 = new DerOutputStream();\n-                SigningCertificateInfo info = (SigningCertificateInfo)value;\n-                temp2.writeBytes(info.toByteArray());\n-                temp.write(DerValue.tag_Set, temp2.toByteArray());\n-            }\n-            break;\n-        case KnownOIDs.SignatureTimestampToken:\n-        case KnownOIDs.CMSAlgorithmProtection:\n-            temp.write(DerValue.tag_Set, (byte[])value);\n-            break;\n-\n-        default: \/\/Should never happen\n-            temp.writeBytes((byte[])value);\n-            out.write(DerValue.tag_Sequence, temp.toByteArray());\n-            return;\n+            temp.putOrderedSetOf(DerValue.tag_Set, temps);\n@@ -598,1 +389,1 @@\n-    public static Set<ObjectIdentifier> getOIDs() { return oidMap.keySet(); }\n+    public static Set<ObjectIdentifier> getOIDs() { return infoMap.keySet(); }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attribute.java","additions":106,"deletions":315,"binary":false,"changes":421,"status":"modified"},{"patch":"@@ -300,0 +300,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attributes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-        authed.getAttributes();\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/NonStandardNames.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}