{"files":[{"patch":"@@ -1585,0 +1585,7 @@\n+\n+        @Override\n+        public void sort(Comparator<? super E> c) {\n+            checkForComodification();\n+            root.sortRange(c, offset, offset + size);\n+            updateSizeAndModCount(0);\n+        }\n@@ -1802,1 +1809,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -1804,0 +1810,5 @@\n+        sortRange(c, 0, size);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void sortRange(Comparator<? super E> c, int fromIndex, int toIndex) {\n@@ -1805,1 +1816,1 @@\n-        Arrays.sort((E[]) elementData, 0, size, c);\n+        Arrays.sort((E[]) elementData, fromIndex, toIndex, c);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ArrayList.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.Random;\n+\n+\/**\n+ * @test\n+ * @bug 8325679\n+ * @summary Optimize ArrayList subList sort\n+ *\/\n+\n+public class SubListSort {\n+    private static final int LENGTH = 10000;\n+    private static final int ROUNDS = 5000;\n+\n+    public static void main(String[] args) throws Exception {\n+        var r = new Random();\n+        var s = r.nextLong();\n+        System.out.println(\"Random seed is \" + s);\n+        r.setSeed(s);\n+\n+        var arr = new ArrayList<>(r.ints(LENGTH).boxed().toList());\n+        System.out.println(\"Sorting without a comparator\");\n+        testSubListSort(arr, null, r);\n+        System.out.println(\"Sorting with a comparator\");\n+        testSubListSort(arr, Comparator.reverseOrder(), r);\n+        System.out.println(\"Success!\");\n+    }\n+\n+    private static <T> void testSubListSort(ArrayList<T> arr, Comparator<T> c, Random r) {\n+        for (var i = 0; i < ROUNDS; i++) {\n+            var start = r.nextInt(LENGTH);\n+            var end = start + r.nextInt(LENGTH - start);\n+            var arr2 = cloneArrayList(arr);\n+            arr2.subList(start, end).sort(c);\n+            var arr3 = new ArrayList<>(arr.subList(start, end));\n+            arr3.sort(c);\n+            if (!arr2.subList(start, end).equals(arr3)) {\n+                throw new AssertionError(\"Failed sorting sublist no. \" + i + \" [\" + start + \", \" + end + \")\\n\" +\n+                                         arr2.subList(start, end) + \"\\n\" + arr3);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> ArrayList<T> cloneArrayList(ArrayList<T> a) {\n+        return (ArrayList<T>)a.clone();\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/ArrayList\/SubListSort.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}