{"files":[{"patch":"@@ -388,0 +388,10 @@\n+void G1CollectionSet::add_optional_group(G1CSetCandidateGroup* group,\n+                                         uint& num_optional_regions,\n+                                         double& predicted_optional_time_ms,\n+                                         double predicted_time_ms) {\n+  _optional_groups.append(group);\n+  prepare_optional_group(group, num_optional_regions);\n+  num_optional_regions += group->length();\n+  predicted_optional_time_ms += predicted_time_ms;\n+}\n+\n@@ -407,0 +417,4 @@\n+#ifdef ASSERT\n+  bool make_first_group_optional = G1ForceOptionalEvacuation;\n+#endif\n+\n@@ -424,0 +438,11 @@\n+#ifdef ASSERT\n+    if (make_first_group_optional) {\n+        make_first_group_optional = false;\n+        add_optional_group(group,\n+                           num_optional_regions,\n+                           predicted_optional_time_ms,\n+                           predicted_time_ms);\n+        continue;\n+    }\n+#endif\n+\n@@ -459,4 +484,4 @@\n-        _optional_groups.append(group);\n-        prepare_optional_group(group, num_optional_regions);\n-        num_optional_regions += group->length();\n-        predicted_optional_time_ms += predicted_time_ms;\n+        add_optional_group(group,\n+                           num_optional_regions,\n+                           predicted_optional_time_ms,\n+                           predicted_time_ms);\n@@ -563,4 +588,4 @@\n-      _optional_groups.append(group);\n-      prepare_optional_group(group, num_optional_regions);\n-      num_optional_regions += group->length();\n-      predicted_optional_time_ms += predicted_time_ms;\n+      add_optional_group(group,\n+                         num_optional_regions,\n+                         predicted_optional_time_ms,\n+                         predicted_time_ms);\n@@ -648,0 +673,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":34,"deletions":8,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -223,0 +223,7 @@\n+\n+  \/\/ Adds the given group to the optional groups list (_optional_groups)\n+  \/\/ and updates all related bookkeeping.\n+  void add_optional_group(G1CSetCandidateGroup* group,\n+                          uint& num_optional_regions,\n+                          double& predicted_optional_time_ms,\n+                          double predicted_time_ms);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -818,1 +818,6 @@\n-\n+  double target_pause_time_ms = MaxGCPauseMillis;\n+#ifdef ASSERT\n+  if (G1ForceOptionalEvacuation) {\n+    target_pause_time_ms = DBL_MAX;\n+  }\n+#endif\n@@ -822,1 +827,1 @@\n-    double time_left_ms = MaxGCPauseMillis - time_used_ms;\n+    double time_left_ms = target_pause_time_ms - time_used_ms;\n@@ -824,1 +829,1 @@\n-    if (time_left_ms < 0 ||\n+    if (time_left_ms <= 0 ||\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -373,0 +373,6 @@\n+  develop(bool, G1ForceOptionalEvacuation, false,                           \\\n+          \"Force optional evacuation for all GCs where there are old gen \"  \\\n+          \"collection set candidates.\"                                      \\\n+          \"Also schedule all available optional groups for evacuation \"     \\\n+          \"regardless of timing.\")                                          \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8352969\n+ * @summary Tests optional evacuation.\n+ * @requires vm.gc.G1\n+ * @requires vm.debug\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver gc.g1.TestOptionalRegionGC\n+ *\/\n+\n+package gc.g1;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.whitebox.WhiteBox;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class TestOptionalRegionGC {\n+\n+  private static OutputAnalyzer run() throws Exception {\n+    return ProcessTools.executeLimitedTestJava(\n+      \"-XX:+WhiteBoxAPI\",\n+      \"-Xbootclasspath\/a:.\",\n+      \"-Xmx300M\",\n+      \"-Xms300M\",\n+      \"-XX:G1HeapRegionSize=1M\",\n+      \"-XX:+UseG1GC\",\n+      \"-XX:MaxTenuringThreshold=1\",\n+      \"-Xlog:gc+ergo+cset=trace\",\n+      \"-XX:+G1ForceOptionalEvacuation\",\n+      \"-XX:+VerifyAfterGC\",\n+      TestOptionalRegionGC.Action.class.getName());\n+  }\n+\n+  public static void main(String args[]) throws Exception {\n+    OutputAnalyzer out = run();\n+    out.shouldHaveExitValue(0);\n+    Pattern pattern = Pattern.compile(\"Prepared (\\\\d+) regions out of (\\\\d+) for optional evacuation\");\n+    Matcher matcher = pattern.matcher(out.getOutput());\n+    Asserts.assertTrue(matcher.find());\n+    String selectedNum = matcher.group(1);\n+    String totalNum = matcher.group(2);\n+    Asserts.assertTrue(Objects.equals(selectedNum, totalNum), \"Error info: \" + selectedNum + \", \" + totalNum);\n+  }\n+\n+  public static class Action {\n+    private static final WhiteBox wb = WhiteBox.getWhiteBox();\n+    private static final int MIN_OBJECT_SIZE = 64 * 1024;\n+    private static final int MAX_OBJECT_SIZE = 120 * 1024;\n+    private static final int NUM_OBJECTS = 1200;\n+\n+    public static void main(String [] args) throws Exception {\n+      \/\/ Remove garbage from VM initialization.\n+      wb.fullGC();\n+      Random rand = new Random(42);\n+      List<byte[]> objectList = new ArrayList<>();\n+      for (int i = 0; i < NUM_OBJECTS; i++) {\n+        int objSize = MIN_OBJECT_SIZE + rand.nextInt(MAX_OBJECT_SIZE - MIN_OBJECT_SIZE);\n+        byte[] obj = new byte[objSize];\n+        objectList.add(obj);\n+      }\n+      \/\/ Young GC promotes some objects to the old generation.\n+      wb.youngGC();\n+      \/\/ Clear certain references for mixed GC.\n+      for (int i = 0; i < NUM_OBJECTS; i+=2) {\n+        objectList.set(i, null);\n+      }\n+      wb.g1RunConcurrentGC();\n+      \/\/ Perform the \"Prepare Mixed\" GC.\n+      wb.youngGC();\n+      \/\/ Perform the \"Mixed\" GC.\n+      wb.youngGC();\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestOptionalRegionGC.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}