{"files":[{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4546123\n+ * @summary CardLayout becomes unusable after deleting an element\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RemoveComponentTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.CardLayout;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Insets;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+\n+public class RemoveComponentTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                You should see a frame titled \"Test Frame For\n+                RemoveComponentTest\". Try to select a few different panels from\n+                the second menu. Make sure your last choice is the red panel.\n+                Then click close (in first menu). After that you should be able\n+                to select any panels except red one.\n+                If that is the case, the test passes. Otherwise, the test failed.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(RemoveComponentTest::createUI)\n+                .logArea(5)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI() {\n+        TestFrame frame = new TestFrame();\n+        frame.setSize(200, 200);\n+        return frame;\n+    }\n+}\n+\n+class TestFrame extends Frame implements ActionListener {\n+    public Panel aPanel;\n+    public TestPanel pageRed;\n+    public TestPanel pageGreen;\n+    public TestPanel pageBlue;\n+    public String currentSelection = \"\";\n+\n+    public MenuItem mi;\n+    public CardLayout theCardLayout;\n+\n+\n+    public TestFrame() {\n+        super(\"Test Frame For RemoveComponentTest\");\n+\n+        setBackground(Color.black);\n+        setLayout(new BorderLayout(5, 5));\n+\n+        MenuBar mb = new MenuBar();\n+\n+        Menu fileMenu = new Menu(\"File\");\n+        Menu pageMenu = new Menu(\"Pages\");\n+\n+        mi = new MenuItem(\"Close\");\n+        mi.addActionListener(this);\n+        fileMenu.add(mi);\n+\n+        mi = new MenuItem(\"Red\");\n+        mi.addActionListener(this);\n+        pageMenu.add(mi);\n+\n+        mi = new MenuItem(\"Green\");\n+        mi.addActionListener(this);\n+        pageMenu.add(mi);\n+\n+        mi = new MenuItem(\"Blue\");\n+        mi.addActionListener(this);\n+        pageMenu.add(mi);\n+\n+        mb.add(fileMenu);\n+        mb.add(pageMenu);\n+\n+        setMenuBar(mb);\n+\n+        aPanel = new Panel();\n+        theCardLayout = new CardLayout();\n+\n+        aPanel.setLayout(theCardLayout);\n+\n+        pageRed = new TestPanel(\"PageRed\", Color.red);\n+        pageGreen = new TestPanel(\"PageGreen\", Color.green);\n+        pageBlue = new TestPanel(\"PageBlue\", Color.blue);\n+\n+        aPanel.add(\"PageRed\", pageRed);\n+        aPanel.add(\"PageGreen\", pageGreen);\n+        aPanel.add(\"PageBlue\", pageBlue);\n+\n+        add(\"Center\", aPanel);\n+        setSize(getPreferredSize());\n+    }\n+\n+    public Insets getInsets() {\n+        return new Insets(47, 9, 9, 9);\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        if (e.getActionCommand().equals(\"Red\")) {\n+            theCardLayout.show(aPanel, \"PageRed\");\n+            currentSelection = \"PageRed\";\n+        } else if (e.getActionCommand().equals(\"Green\")) {\n+            theCardLayout.show(aPanel, \"PageGreen\");\n+        } else if (e.getActionCommand().equals(\"Blue\")) {\n+            theCardLayout.show(aPanel, \"PageBlue\");\n+        } else if (e.getActionCommand().equals(\"Close\")) {\n+            PassFailJFrame.log(\"Closing\");\n+\n+            if (currentSelection.equals(\"PageRed\")) {\n+                PassFailJFrame.log(\"Remove page red\");\n+                theCardLayout.removeLayoutComponent(pageRed);\n+            }\n+        }\n+    }\n+}\n+\n+class TestPanel extends JPanel {\n+    private String pageName;\n+\n+    TestPanel(String pageName, Color color) {\n+        setBackground(color);\n+        add(new JLabel(pageName));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/CardLayout\/RemoveComponentTest\/RemoveComponentTest.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4221201\n+ * @summary Test where the gradient drawn should remain in sync with the\n+ *          rotating rectangle.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual JerkyGradient\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.GradientPaint;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Paint;\n+import java.awt.Panel;\n+import java.awt.RenderingHints;\n+import java.awt.Shape;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.image.BufferedImage;\n+\n+public class JerkyGradient extends Panel implements Runnable {\n+    protected static Shape mShape;\n+    protected static Paint mPaint;\n+    protected static double mTheta;\n+    static Thread animatorThread;\n+    static BufferedImage mImg;\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Watch at least one full rotation of the rectangle. Check that\n+                the gradient drawn remains in sync with the rotating\n+                rectangle. If so, pass this test. Otherwise, fail this test.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(JerkyGradient::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI() {\n+        Frame f = new Frame(\"Rotating Gradient Test\");\n+        JerkyGradient jg = new JerkyGradient();\n+        f.add(jg);\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+\n+    public JerkyGradient() {\n+        mShape = new Rectangle2D.Double(60, 50, 80, 100);\n+        mPaint = new GradientPaint(0, 0, Color.red,\n+                25, 25, Color.yellow,\n+                true);\n+        mImg = new BufferedImage(200, 200, BufferedImage.TYPE_INT_RGB);\n+\n+        animatorThread = new Thread(this);\n+        animatorThread.setPriority(Thread.MIN_PRIORITY);\n+        animatorThread.start();\n+    }\n+\n+    public synchronized void run() {\n+        Thread me = Thread.currentThread();\n+        double increment = Math.PI \/ 36;\n+        double twoPI = Math.PI * 2;\n+\n+        while (animatorThread == me) {\n+            mTheta = (mTheta + increment) % twoPI;\n+            repaint();\n+            try {\n+                wait(50);\n+            } catch (InterruptedException ie) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    public void update(Graphics g) {\n+        Graphics2D g2 = mImg.createGraphics();\n+        g2.setColor(getBackground());\n+        g2.fillRect(0, 0, 200, 200);\n+        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                            RenderingHints.VALUE_ANTIALIAS_ON);\n+        g2.rotate(mTheta, 100, 100);\n+        g2.setPaint(Color.black);\n+        g2.drawLine(100, 30, 100, 55);\n+        g2.setPaint(mPaint);\n+        g2.fill(mShape);\n+        g2.setPaint(Color.black);\n+        g2.draw(mShape);\n+        paint(g);\n+        g2.dispose();\n+    }\n+\n+    public void paint(Graphics g) {\n+        g.drawImage(mImg, 0, 0, null);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/GradientPaint\/JerkyGradient.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4171820\n+ * @summary Checks that GradientPaint responds to shearing transforms correctly\n+ *          The gradients drawn should be parallel to the sides of the\n+ *          indicated anchor rectangle.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ShearTest\n+ *\/\n+\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GradientPaint;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.geom.AffineTransform;\n+\n+public class ShearTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                This test displays 2 rows each containing 4 gradient fills. Each\n+                gradient fill is labeled depending on whether the line or lines\n+                of the gradient should be truly vertical, truly horizontal, or\n+                some slanted diagonal direction. The test passes if the direction\n+                of each gradient matches its label.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ShearTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI() {\n+        Frame f = new Frame(\"Shear Gradient Test\");\n+        f.setLayout(new GridLayout(0, 1));\n+        f.add(getPanelSet(false), \"North\");\n+        f.add(getPanelSet(true), \"Center\");\n+        f.setSize(500, 300);\n+        return f;\n+    }\n+\n+    public static Panel getPanelSet(boolean horizontal) {\n+        String direven = horizontal ? \"Slanted\" : \"Vertical\";\n+        String dirodd = horizontal ? \"Horizontal\" : \"Slanted\";\n+\n+        Panel p = new Panel();\n+        p.setLayout(new GridLayout(0, 4));\n+        p.add(new ShearCanvas(direven, false, horizontal, false, true));\n+        p.add(new ShearCanvas(dirodd,  false, horizontal, true,  false));\n+        p.add(new ShearCanvas(direven, true,  horizontal, false, true));\n+        p.add(new ShearCanvas(dirodd,  true,  horizontal, true,  false));\n+\n+        return p;\n+    }\n+\n+    public static class ShearCanvas extends Canvas {\n+        public static final int GRADW = 30;\n+\n+        public static final Rectangle anchor =\n+            new Rectangle(-GRADW \/ 2, -GRADW \/ 2, GRADW, GRADW);\n+\n+        public static final Color faintblue = new Color(0f, 0f, 1.0f, 0.35f);\n+\n+        private AffineTransform txform;\n+        private GradientPaint grad;\n+        private String label;\n+\n+        public ShearCanvas(String label,\n+                           boolean cyclic, boolean horizontal,\n+                           boolean shearx, boolean sheary) {\n+            txform = new AffineTransform();\n+            if (shearx) {\n+                txform.shear(-.5, 0);\n+            }\n+            if (sheary) {\n+                txform.shear(0, -.5);\n+            }\n+            int relx = horizontal ? 0 : GRADW \/ 2;\n+            int rely = horizontal ? GRADW \/ 2 : 0;\n+            grad = new GradientPaint(-relx, -rely, Color.green,\n+                                     relx, rely, Color.yellow, cyclic);\n+            this.label = label;\n+        }\n+\n+        public void paint(Graphics g) {\n+            Graphics2D g2d = (Graphics2D) g;\n+\n+            AffineTransform at = g2d.getTransform();\n+            g2d.translate(75, 75);\n+            g2d.transform(txform);\n+            g2d.setPaint(grad);\n+            g2d.fill(g.getClip());\n+            g2d.setColor(faintblue);\n+            g2d.fill(anchor);\n+            g2d.setTransform(at);\n+\n+            Dimension d = getSize();\n+            g2d.setColor(Color.black);\n+            g2d.drawRect(0, 0, d.width - 1, d.height - 1);\n+            g2d.drawString(label, 5, d.height - 5);\n+            g2d.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/GradientPaint\/ShearTest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}