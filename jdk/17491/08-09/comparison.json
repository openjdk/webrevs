{"files":[{"patch":"@@ -4238,2 +4238,2 @@\n-     * @implNote Normally, unicode escapes are translated by the compiler before string\n-     * literals are translated. However, as a convenience for use with constructed\n+     * @implNote Unicode escapes are translated by the compiler before string\n+     * literals are translated. As a convenience for use with constructed\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,4 +94,4 @@\n-        verifyEscape(\"\\\\u0000\", \"\\u0000\");\n-        verifyEscape(\"\\\\u2022\", \"\\u2022\");\n-        verifyEscape(\"\\\\ud83c\\\\udf09\", \"\\ud83c\\udf09\");\n-        verifyEscape(\"\\\\uuuuu2022\", \"\\uuuuu2022\");\n+        verifyUnicodeEscape(\"\\\\u0000\", \"\\u0000\");\n+        verifyUnicodeEscape(\"\\\\u2022\", \"\\u2022\");\n+        verifyUnicodeEscape(\"\\\\ud83c\\\\udf09\", \"\\ud83c\\udf09\");\n+        verifyUnicodeEscape(\"\\\\uuuuu2022\", \"\\uuuuu2022\");\n@@ -99,5 +99,5 @@\n-        verifyUnicodeEscape(\"\\\\u000x\");\n-        verifyUnicodeEscape(\"\\\\u000\");\n-        verifyUnicodeEscape(\"\\\\u00\");\n-        verifyUnicodeEscape(\"\\\\u0\");\n-        verifyUnicodeEscape(\"\\\\u\");\n+        verifyIllegalUnicodeEscape(\"\\\\u000x\");\n+        verifyIllegalUnicodeEscape(\"\\\\u000\");\n+        verifyIllegalUnicodeEscape(\"\\\\u00\");\n+        verifyIllegalUnicodeEscape(\"\\\\u0\");\n+        verifyIllegalUnicodeEscape(\"\\\\u\");\n@@ -109,1 +109,1 @@\n-            System.err.format(\"\\\"%s\\\" not escape \\\"%s\\\"'%n\", string, escapes);\n+            System.err.format(\"\\\"%s\\\" does not escape \\\"%s\\\"'%n\", string, escapes);\n@@ -116,1 +116,1 @@\n-            System.err.format(\"\\\"%s\\\" not escaped \\\"%s\\\"%n\", string1, string2);\n+            System.err.format(\"\\\"%s\\\" does not escape \\\"%s\\\"%n\", string1, string2);\n@@ -121,1 +121,8 @@\n-    static void verifyUnicodeEscape(String string) {\n+    static void verifyUnicodeEscape(String string1, String string2) {\n+        if (!string1.translateEscapes().equals(string2)) {\n+            System.err.format(\"\\\"%s\\\" does not unicode escape \\\"%s\\\"%n\", string1, string2);\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    static void verifyIllegalUnicodeEscape(String string) {\n","filename":"test\/jdk\/java\/lang\/String\/TranslateEscapes.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"}]}