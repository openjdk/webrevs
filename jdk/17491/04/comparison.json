{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -4158,1 +4158,1 @@\n-     * translated as if in a string literal.\n+     * and unicode escape sequences translated as if in a string literal.\n@@ -4226,0 +4226,5 @@\n+     *   <tr>\n+     *     <th scope=\"row\">{@code \\u005CuXXXX}<\/th>\n+     *     <td>unicode escape<\/td>\n+     *     <td>unicode equivalent<\/td>\n+     *   <\/tr>\n@@ -4229,5 +4234,0 @@\n-     * @implNote\n-     * This method does <em>not<\/em> translate Unicode escapes such as \"{@code \\u005cu2022}\".\n-     * Unicode escapes are translated by the Java compiler when reading input characters and\n-     * are not part of the string literal specification.\n-     *\n@@ -4239,0 +4239,1 @@\n+     * @jls 3.3 Unicode Escapes\n@@ -4273,0 +4274,12 @@\n+                case 'u':\n+                    if (from <= length - 4) {\n+                        from += 4;\n+                        try {\n+                            ch = (char) Integer.parseInt(this, from - 4, from, 16);\n+                        } catch (NumberFormatException ex) {\n+                            throw new IllegalArgumentException(\"Invalid unicode sequence: \" + substring(from - 4, from));\n+                        }\n+                    } else {\n+                        throw new IllegalArgumentException(\"Invalid unicode sequence: \" + substring(from));\n+                    }\n+                    break;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8223780\n+ * @bug 8223780 8263261\n@@ -38,0 +38,1 @@\n+        test5();\n@@ -89,0 +90,15 @@\n+    \/*\n+     * Unicode escapes.\n+     *\/\n+    static void test5() {\n+        verifyEscape(\"\\\\u0000\", \"\\u0000\");\n+        verifyEscape(\"\\\\u2022\", \"\\u2022\");\n+        verifyEscape(\"\\\\ud83c\\\\udf09\", \"\\ud83c\\udf09\");\n+\n+        verifyUnicodeEscape(\"\\\\u000x\");\n+        verifyUnicodeEscape(\"\\\\u000\");\n+        verifyUnicodeEscape(\"\\\\u00\");\n+        verifyUnicodeEscape(\"\\\\u0\");\n+        verifyUnicodeEscape(\"\\\\u\");\n+    }\n+\n@@ -97,0 +113,16 @@\n+    static void verifyEscape(String string1, String string2) {\n+        if (!string1.translateEscapes().equals(string2)) {\n+            System.err.format(\"\\\"%s\\\" not escaped \\\"%s\\\"%n\", string1, string2);\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    static void verifyUnicodeEscape(String string) {\n+        try {\n+            string.translateEscapes();\n+            System.err.format(\"\\\"%s\\\" should be an error%n\", string);\n+            throw new RuntimeException();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/String\/TranslateEscapes.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"}]}