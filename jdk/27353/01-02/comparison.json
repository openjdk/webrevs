{"files":[{"patch":"@@ -252,1 +252,1 @@\n-    if (ctx->is_marked(left)) {\n+    if (ctx->is_marked_strong(left)) {\n@@ -259,0 +259,8 @@\n+      \/\/ Whether this region was previously marked as young and was subsequently promoted in place, or was marked as old.\n+      \/\/ In the case that this region was most recently marked as young, the fact that this region has been promoted\n+      \/\/ in place denotes that final mark (Young) has copmleted.  In the case that this region was most recently marked\n+      \/\/ as old, the fact that (ctx != nullptr) denotes that old marking has completed.  Otherwise, ctx would equal null.\n+      \/\/\n+      \/\/ Given that marking has completed, if this object is only marked weakly, then this object is dead.  Its memory will\n+      \/\/ be reclaimed momentarily.  Given that this object is dead, its class may also be reclaimed.  Therefore, we cannot\n+      \/\/ rely on its size() method, and we should not scan its pointers.\n@@ -260,1 +268,1 @@\n-      if (prev <= left) {\n+      if ((prev <= left) && ctx->is_marked_strong(prev)) {\n@@ -269,3 +277,4 @@\n-    \/\/ Either prev >= left (no previous object found), or the previous object that was found ends before my card range begins.\n-    \/\/ In eiher case, find the next marked object if any on this card\n-    assert(!ctx->is_marked(left), \"Was dealt with above\");\n+    \/\/ Either prev >= left (no previous object found), or the previous object that was found ends before my card range begins,\n+    \/\/ or the previously object that was found was only weakly marked, so it should not be scanned.  In all of these cases,\n+    \/\/ find the next strongly marked object if any on this card\n+    assert(!ctx->is_marked_strong(left), \"Was dealt with above\");\n@@ -274,1 +283,4 @@\n-    HeapWord* next = ctx->get_next_marked_addr(left, right);\n+    HeapWord* next = left;\n+    do {\n+      next = ctx->get_next_marked_addr(next, right);\n+    } while ((next <  right) && !ctx->is_marked_strong(next));\n@@ -281,1 +293,5 @@\n-    \/\/ Note: returned value may point beyond this card's range of memory, and may not point to an allocated object.\n+    \/\/ If top_at_mark_start(region) is within this card's range, we will return its value.  If the returned value\n+    \/\/ is less than region->top(), then the returned value represents an object that should be scanned.  Otherwise,\n+    \/\/ the returned value equals region->top() and will not be scanned.  There are no races with ongoing allocations\n+    \/\/ within old generation because this function is only called during concurrent marking and during concurrent\n+    \/\/ update references.\n@@ -291,2 +307,1 @@\n-    \/\/ This card contains a co-initial object; a fortiori, it covers\n-    \/\/ also the case of a card being the first in a region.\n+    \/\/ This card contains a co-initial object; a fortiori, it covers also the case of a card being the first in a region.\n@@ -314,1 +329,1 @@\n-    if (ctx->is_marked(p)) {\n+    if (ctx->is_marked_strong(p)) {\n@@ -321,1 +336,2 @@\n-      \/\/ Object that spans start of card is dead, so should not be scanned\n+      \/\/ Object that spans start of card is dead, so should not be scanned.\n+      \/\/ From above, we know that if (ctx != nullptr), left >= tams.  Therefore, left + offset >= tams.\n@@ -339,0 +355,3 @@\n+  \/\/ p points to first object that precedes the start of card card_index.  The object is \"alive\".\n+  assert((ctx == nullptr) || (p >= tams), \"Sanity\");\n+\n@@ -363,1 +382,1 @@\n-#define WALK_FORWARD_IN_BLOCK_START true\n+#define WALK_FORWARD_IN_BLOCK_START false\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":31,"deletions":12,"binary":false,"changes":43,"status":"modified"}]}