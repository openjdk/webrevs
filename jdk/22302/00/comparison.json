{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,5 +34,9 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.Rule;\n-import org.junit.rules.TemporaryFolder;\n-import org.junit.function.ThrowingRunnable;\n+import java.util.stream.Stream;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrowsExactly;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -40,1 +44,0 @@\n-public class AppImageFileTest {\n@@ -42,2 +45,1 @@\n-    @Rule\n-    public final TemporaryFolder tempFolder = new TemporaryFolder();\n+public class AppImageFileTest {\n@@ -54,1 +56,1 @@\n-        Assert.assertEquals(\"Foo\", aif.getLauncherName());\n+        assertEquals(\"Foo\", aif.getLauncherName());\n@@ -76,19 +78,6 @@\n-    @Test\n-    public void testInavlidXml() throws IOException {\n-        assertInvalid(() -> createFromXml(\"<foo\/>\"));\n-        assertInvalid(() -> createFromXml(\"<jpackage-state\/>\"));\n-        assertInvalid(() -> createFromXml(JPACKAGE_STATE_OPEN, \"<\/jpackage-state>\"));\n-        assertInvalid(() -> createFromXml(\n-                JPACKAGE_STATE_OPEN,\n-                    \"<main-launcher><\/main-launcher>\",\n-                \"<\/jpackage-state>\"));\n-        assertInvalid(() -> createFromXml(\n-                JPACKAGE_STATE_OPEN,\n-                    \"<main-launcher>Foo<\/main-launcher>\",\n-                    \"<main-class><\/main-class>\",\n-                \"<\/jpackage-state>\"));\n-        assertInvalid(() -> createFromXml(\n-                JPACKAGE_STATE_OPEN,\n-                    \"<launcher>A<\/launcher>\",\n-                    \"<launcher>B<\/launcher>\",\n-                \"<\/jpackage-state>\"));\n+    @ParameterizedTest\n+    @MethodSource\n+    public void testInavlidXml(String[] xmlData) throws IOException {\n+        Exception ex = assertThrowsExactly(RuntimeException.class, () -> createFromXml(xmlData));\n+        assertTrue(ex.getMessage().contains(\"generated by another jpackage version or malformed\"));\n+        assertTrue(ex.getMessage().endsWith(\".jpackage.xml\\\"\"));\n@@ -97,33 +86,65 @@\n-    @Test\n-    public void testValidXml() throws IOException {\n-        Assert.assertEquals(\"Foo\", (createFromXml(\n-                JPACKAGE_STATE_OPEN,\n-                    \"<app-version>1.0<\/app-version>\",\n-                    \"<main-launcher>Foo<\/main-launcher>\",\n-                    \"<main-class>main.Class<\/main-class>\",\n-                    \"<signed>false<\/signed>\",\n-                    \"<app-store>false<\/app-store>\",\n-                \"<\/jpackage-state>\")).getLauncherName());\n-\n-        Assert.assertEquals(\"Boo\", (createFromXml(\n-                JPACKAGE_STATE_OPEN,\n-                    \"<app-version>1.0<\/app-version>\",\n-                    \"<main-launcher>Boo<\/main-launcher>\",\n-                    \"<main-launcher>Bar<\/main-launcher>\",\n-                    \"<main-class>main.Class<\/main-class>\",\n-                    \"<signed>false<\/signed>\",\n-                    \"<app-store>false<\/app-store>\",\n-                \"<\/jpackage-state>\")).getLauncherName());\n-\n-        var file = createFromXml(\n-                JPACKAGE_STATE_OPEN,\n-                    \"<app-version>1.0<\/app-version>\",\n-                    \"<main-launcher>Foo<\/main-launcher>\",\n-                    \"<main-class>main.Class<\/main-class>\",\n-                    \"<signed>false<\/signed>\",\n-                    \"<app-store>false<\/app-store>\",\n-                    \"<launcher><\/launcher>\",\n-                \"<\/jpackage-state>\");\n-        Assert.assertEquals(\"Foo\", file.getLauncherName());\n-\n-        Assert.assertEquals(0, file.getAddLaunchers().size());\n+    private static Stream<org.junit.jupiter.params.provider.Arguments> testInavlidXml() {\n+        return Stream.of(\n+                makeArguments((Object)new String[] {\"<foo\/>\"}),\n+                makeArguments((Object)new String[] {\"<jpackage-state\/>\"}),\n+                makeArguments((Object)new String[] {JPACKAGE_STATE_OPEN, \"<\/jpackage-state>\"}),\n+                makeArguments((Object)new String[] {\n+                        JPACKAGE_STATE_OPEN,\n+                        \"<main-launcher><\/main-launcher>\",\n+                        \"<\/jpackage-state>\"\n+                }),\n+                makeArguments((Object)new String[] {\n+                        JPACKAGE_STATE_OPEN,\n+                        \"<main-launcher>Foo<\/main-launcher>\",\n+                        \"<main-class><\/main-class>\",\n+                        \"<\/jpackage-state>\"\n+                }),\n+                makeArguments((Object)new String[] {\n+                        JPACKAGE_STATE_OPEN,\n+                        \"<launcher>A<\/launcher>\",\n+                        \"<launcher>B<\/launcher>\",\n+                        \"<\/jpackage-state>\"\n+                })\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    public void testValidXml(String expectedLauncherName, String xmlData[]) throws IOException {\n+        var file = createFromXml(xmlData);\n+        assertEquals(expectedLauncherName, file.getLauncherName());\n+        assertTrue(file.getAddLaunchers().isEmpty());\n+    }\n+\n+    private static Stream<org.junit.jupiter.params.provider.Arguments> testValidXml() {\n+        return Stream.of(\n+                makeArguments(\"Foo\", List.of(\n+                        JPACKAGE_STATE_OPEN,\n+                                \"<app-version>1.0<\/app-version>\",\n+                                \"<main-launcher>Foo<\/main-launcher>\",\n+                                \"<main-class>main.Class<\/main-class>\",\n+                                \"<signed>false<\/signed>\",\n+                                \"<app-store>false<\/app-store>\",\n+                        \"<\/jpackage-state>\").toArray(String[]::new)\n+                ),\n+                makeArguments(\"Boo\", List.of(\n+                        JPACKAGE_STATE_OPEN,\n+                                \"<app-version>1.0<\/app-version>\",\n+                                \"<main-launcher>Boo<\/main-launcher>\",\n+                                \"<main-launcher>Bar<\/main-launcher>\",\n+                                \"<main-class>main.Class<\/main-class>\",\n+                                \"<signed>false<\/signed>\",\n+                                \"<app-store>false<\/app-store>\",\n+                            \"<\/jpackage-state>\").toArray(String[]::new)\n+                ),\n+                makeArguments(\"duke\", List.of(\n+                        JPACKAGE_STATE_OPEN,\n+                                \"<app-version>1.0<\/app-version>\",\n+                                \"<main-launcher>duke<\/main-launcher>\",\n+                                \"<main-class>main.Class<\/main-class>\",\n+                                \"<signed>false<\/signed>\",\n+                                \"<app-store>false<\/app-store>\",\n+                                \"<launcher><\/launcher>\",\n+                        \"<\/jpackage-state>\").toArray(String[]::new)\n+                )\n+        );\n@@ -140,1 +161,1 @@\n-        Assert.assertEquals(\"Foo\", aif.getLauncherName());\n+        assertEquals(\"Foo\", aif.getLauncherName());\n@@ -151,1 +172,1 @@\n-        Assert.assertEquals(\"main.Class\", aif.getMainClass());\n+        assertEquals(\"main.Class\", aif.getMainClass());\n@@ -163,1 +184,1 @@\n-        Assert.assertTrue(aif.isSigned());\n+        assertTrue(aif.isSigned());\n@@ -175,1 +196,1 @@\n-        Assert.assertFalse(aif.isSigned());\n+        assertFalse(aif.isSigned());\n@@ -178,1 +199,1 @@\n-        Assert.assertTrue(aif.isSigned());\n+        assertTrue(aif.isSigned());\n@@ -190,1 +211,1 @@\n-        Assert.assertTrue(aif.isAppStore());\n+        assertTrue(aif.isAppStore());\n@@ -213,1 +234,1 @@\n-        Assert.assertEquals(2, addLaunchers.size());\n+        assertEquals(2, addLaunchers.size());\n@@ -218,2 +239,2 @@\n-        Assert.assertTrue(names.contains(\"Launcher2Name\"));\n-        Assert.assertTrue(names.contains(\"Launcher3Name\"));\n+        assertTrue(names.contains(\"Launcher2Name\"));\n+        assertTrue(names.contains(\"Launcher3Name\"));\n@@ -223,11 +244,2 @@\n-        AppImageFile.save(tempFolder.getRoot().toPath(), params);\n-        return AppImageFile.load(tempFolder.getRoot().toPath());\n-    }\n-\n-    private void assertInvalid(ThrowingRunnable action) {\n-        Exception ex = Assert.assertThrows(RuntimeException.class, action);\n-        Assert.assertTrue(ex instanceof RuntimeException);\n-        Assert.assertTrue(ex.getMessage()\n-                .contains(\"generated by another jpackage version or malformed\"));\n-        Assert.assertTrue(ex.getMessage()\n-                .endsWith(\".jpackage.xml\\\"\"));\n+        AppImageFile.save(tempFolder, params);\n+        return AppImageFile.load(tempFolder);\n@@ -237,2 +249,1 @@\n-        Path directory = tempFolder.getRoot().toPath();\n-        Path path = AppImageFile.getPathInAppImage(directory);\n+        Path path = AppImageFile.getPathInAppImage(tempFolder);\n@@ -249,1 +260,1 @@\n-        AppImageFile image = AppImageFile.load(directory);\n+        AppImageFile image = AppImageFile.load(tempFolder);\n@@ -253,1 +264,8 @@\n-    private final static String JPACKAGE_STATE_OPEN = String.format(\n+    static org.junit.jupiter.params.provider.Arguments makeArguments(Object ... args) {\n+        return org.junit.jupiter.params.provider.Arguments.of(args);\n+    }\n+\n+    @TempDir\n+    private Path tempFolder;\n+\n+    private static final String JPACKAGE_STATE_OPEN = String.format(\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/AppImageFileTest.java","additions":104,"deletions":86,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,3 @@\n-import org.junit.Test;\n-import org.junit.Rule;\n-import org.junit.rules.TemporaryFolder;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,2 +36,16 @@\n-    @Rule\n-    public final TemporaryFolder tempFolder = new TemporaryFolder();\n+    private Path newFolder(Path folderName, String ... extraFolderNames) throws IOException {\n+        var path = tempFolder.resolve(folderName);\n+        Files.createDirectories(path);\n+        for (var extraFolderName : extraFolderNames) {\n+            path = path.resolve(extraFolderName);\n+            Files.createDirectories(path);\n+        }\n+        return path;\n+    }\n+\n+    private Path newFile(Path fileName) throws IOException {\n+        var path = tempFolder.resolve(fileName);\n+        Files.createDirectories(path.getParent());\n+        Files.createFile(path);\n+        return path;\n+    }\n@@ -41,1 +54,1 @@\n-        appImage = tempFolder.newFolder(\"Foo\").toPath();\n+        appImage = newFolder(Path.of(\"Foo\"));\n@@ -45,9 +58,9 @@\n-        tempFolder.newFolder(base.toString(), \"bin\");\n-        tempFolder.newFolder(base.toString(), \"lib\", \"app\", \"mods\");\n-        tempFolder.newFolder(base.toString(), \"lib\", \"runtime\", \"bin\");\n-        tempFolder.newFile(base.resolve(\"bin\/Foo\").toString());\n-        tempFolder.newFile(base.resolve(\"lib\/app\/Foo.cfg\").toString());\n-        tempFolder.newFile(base.resolve(\"lib\/app\/hello.jar\").toString());\n-        tempFolder.newFile(base.resolve(\"lib\/Foo.png\").toString());\n-        tempFolder.newFile(base.resolve(\"lib\/libapplauncher.so\").toString());\n-        tempFolder.newFile(base.resolve(\"lib\/runtime\/bin\/java\").toString());\n+        newFolder(base, \"bin\");\n+        newFolder(base, \"lib\", \"app\", \"mods\");\n+        newFolder(base, \"lib\", \"runtime\", \"bin\");\n+        newFile(base.resolve(\"bin\/Foo\"));\n+        newFile(base.resolve(\"lib\/app\/Foo.cfg\"));\n+        newFile(base.resolve(\"lib\/app\/hello.jar\"));\n+        newFile(base.resolve(\"lib\/Foo.png\"));\n+        newFile(base.resolve(\"lib\/libapplauncher.so\"));\n+        newFile(base.resolve(\"lib\/runtime\/bin\/java\"));\n@@ -87,0 +100,2 @@\n+    @TempDir\n+    private Path tempFolder;\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/ApplicationLayoutTest.java","additions":32,"deletions":17,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1,111 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jpackage.internal;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Function;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-import static org.junit.Assert.assertEquals;\n-\n-@RunWith(Parameterized.class)\n-public class CompareDottedVersionTest {\n-\n-    public CompareDottedVersionTest(boolean greedy, String version1,\n-            String version2, int result) {\n-        this.version1 = version1;\n-        this.version2 = version2;\n-        this.expectedResult = result;\n-\n-        if (greedy) {\n-            createTestee = DottedVersion::greedy;\n-        } else {\n-            createTestee = DottedVersion::lazy;\n-        }\n-    }\n-\n-    @Parameters\n-    public static List<Object[]> data() {\n-        List<Object[]> data = new ArrayList<>();\n-        for (var greedy : List.of(true, false)) {\n-            data.addAll(List.of(new Object[][] {\n-                { greedy, \"00.0.0\", \"0\", 0 },\n-                { greedy, \"00.0.0\", \"0.000\", 0 },\n-                { greedy, \"0.035\", \"0.0035\", 0 },\n-                { greedy, \"0.035\", \"0.0035.0\", 0 },\n-                { greedy, \"1\", \"1\", 0 },\n-                { greedy, \"2\", \"2.0\", 0 },\n-                { greedy, \"2.00\", \"2.0\", 0 },\n-                { greedy, \"1.2.3.4\", \"1.2.3.4.5\", -1 },\n-                { greedy, \"1.2.3.4\", \"1.2.3.4.0.1\", -1 },\n-                { greedy, \"34\", \"33\", 1 },\n-                { greedy, \"34.0.78\", \"34.1.78\", -1 }\n-            }));\n-        }\n-\n-        data.addAll(List.of(new Object[][] {\n-            { false, \"\", \"1\", -1 },\n-            { false, \"\", \"0\", 0 },\n-            { false, \"0\", \"\", 0 },\n-            { false, \"1.2.4-R4\", \"1.2.4-R5\", 0 },\n-            { false, \"1.2.4.-R4\", \"1.2.4.R5\", 0 },\n-            { false, \"7+1\", \"7+4\", 0 },\n-            { false, \"2+14\", \"2-14\", 0 },\n-            { false, \"23.4.RC4\", \"23.3.RC10\", 1 },\n-            { false, \"77.\"  + \"9\".repeat(1000), \"77.\" + \"9\".repeat(1000 -1) + \"8\", 1 },\n-        }));\n-\n-        return data;\n-    }\n-\n-    @Test\n-    public void testIt() {\n-        int actualResult = compare(version1, version2);\n-        assertEquals(expectedResult, actualResult);\n-\n-        int actualNegateResult = compare(version2, version1);\n-        assertEquals(actualResult, -1 * actualNegateResult);\n-    }\n-\n-    private int compare(String x, String y) {\n-        int result = DottedVersion.compareComponents(createTestee.apply(x), createTestee.apply(y));\n-\n-        if (result < 0) {\n-            return -1;\n-        }\n-\n-        if (result > 0) {\n-            return 1;\n-        }\n-\n-        return 0;\n-    }\n-\n-    private final String version1;\n-    private final String version2;\n-    private final int expectedResult;\n-    private final Function<String, DottedVersion> createTestee;\n-}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/CompareDottedVersionTest.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"deleted"},{"patch":"@@ -25,6 +25,5 @@\n-import org.hamcrest.BaseMatcher;\n-import org.hamcrest.Description;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.junit.rules.TemporaryFolder;\n+import static org.junit.jupiter.api.Assertions.assertThrowsExactly;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -32,4 +31,0 @@\n-public class DeployParamsTest {\n-\n-    @Rule\n-    public final TemporaryFolder tempFolder = new TemporaryFolder();\n@@ -37,2 +32,1 @@\n-    @Rule\n-    public final ExpectedException thrown = ExpectedException.none();\n+public class DeployParamsTest {\n@@ -51,3 +45,3 @@\n-    @Test\n-    public void testInvalidAppName() throws PackagerException {\n-        initForInvalidAppNamePackagerException();\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"Test\\nName\", \"Test\\rName\", \"TestName\\\\\", \"Test \\\" Name\"})\n+    public void testInvalidAppName(String appName) throws PackagerException {\n@@ -55,42 +49,1 @@\n-        setAppNameAndValidate(\"Test\\nName\");\n-    }\n-\n-    @Test\n-    public void testInvalidAppName2() throws PackagerException {\n-        initForInvalidAppNamePackagerException();\n-        initParamsAppName();\n-        setAppNameAndValidate(\"Test\\rName\");\n-    }\n-\n-    @Test\n-    public void testInvalidAppName3() throws PackagerException {\n-        initForInvalidAppNamePackagerException();\n-        initParamsAppName();\n-        setAppNameAndValidate(\"TestName\\\\\");\n-    }\n-\n-    @Test\n-    public void testInvalidAppName4() throws PackagerException {\n-        initForInvalidAppNamePackagerException();\n-        initParamsAppName();\n-        setAppNameAndValidate(\"Test \\\" Name\");\n-    }\n-\n-    private void initForInvalidAppNamePackagerException() {\n-        thrown.expect(PackagerException.class);\n-\n-        String msg = \"Error: Invalid Application name\";\n-\n-        \/\/ Unfortunately org.hamcrest.core.StringStartsWith is not available\n-        \/\/ with older junit, DIY\n-\n-        \/\/ thrown.expectMessage(startsWith(\"Error: Invalid Application name\"));\n-        thrown.expectMessage(new BaseMatcher() {\n-            @Override\n-            @SuppressWarnings(\"unchecked\")\n-            public boolean matches(Object o) {\n-                if (o instanceof String) {\n-                    return ((String) o).startsWith(msg);\n-                }\n-                return false;\n-            }\n+        var ex = assertThrowsExactly(PackagerException.class, () -> setAppNameAndValidate(appName));\n@@ -98,5 +51,1 @@\n-            @Override\n-            public void describeTo(Description d) {\n-                d.appendText(msg);\n-            }\n-        });\n+        assertTrue(ex.getMessage().startsWith(\"Error: Invalid Application name\"));\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/DeployParamsTest.java","additions":11,"deletions":62,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import java.util.Collections;\n+import java.util.ArrayList;\n@@ -29,25 +29,8 @@\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-@RunWith(Parameterized.class)\n-public class DottedVersionTest {\n-\n-    public DottedVersionTest(boolean greedy) {\n-        this.greedy = greedy;\n-        if (greedy) {\n-            createTestee = DottedVersion::greedy;\n-        } else {\n-            createTestee = DottedVersion::lazy;\n-        }\n-    }\n-\n-    @Parameterized.Parameters\n-    public static List<Object[]> data() {\n-        return List.of(new Object[] { true }, new Object[] { false });\n-    }\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrowsExactly;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -55,2 +38,1 @@\n-    @Rule\n-    public ExpectedException exceptionRule = ExpectedException.none();\n+public class DottedVersionTest {\n@@ -58,1 +40,3 @@\n-    private static class CtorTester {\n+    public record TestConfig(String input,\n+            Function<String, DottedVersion> createVersion, String expectedSuffix,\n+            int expectedComponentCount, String expectedToComponent) {\n@@ -60,7 +44,2 @@\n-        CtorTester(String input, boolean greedy, String expectedSuffix,\n-                int expectedComponentCount, String expectedToComponent) {\n-            this.input = input;\n-            this.greedy = greedy;\n-            this.expectedSuffix = expectedSuffix;\n-            this.expectedComponentCount = expectedComponentCount;\n-            this.expectedToComponent = expectedToComponent;\n+        TestConfig(String input, Type type, int expectedComponentCount, String expectedToComponent) {\n+            this(input, type.createVersion, \"\", expectedComponentCount, expectedToComponent);\n@@ -69,3 +48,2 @@\n-        CtorTester(String input, boolean greedy, int expectedComponentCount,\n-                String expectedToComponent) {\n-            this(input, greedy, \"\", expectedComponentCount, expectedToComponent);\n+        TestConfig(String input, Type type, int expectedComponentCount) {\n+            this(input, type.createVersion, \"\", expectedComponentCount, input);\n@@ -74,2 +52,2 @@\n-        CtorTester(String input, boolean greedy, int expectedComponentCount) {\n-            this(input, greedy, \"\", expectedComponentCount, input);\n+        static TestConfig greedy(String input, int expectedComponentCount, String expectedToComponent) {\n+            return new TestConfig(input, Type.GREEDY.createVersion, \"\", expectedComponentCount, expectedToComponent);\n@@ -78,3 +56,2 @@\n-        static CtorTester greedy(String input, int expectedComponentCount,\n-                String expectedToComponent) {\n-            return new CtorTester(input, true, \"\", expectedComponentCount, expectedToComponent);\n+        static TestConfig greedy(String input, int expectedComponentCount) {\n+            return new TestConfig(input, Type.GREEDY.createVersion, \"\", expectedComponentCount, input);\n@@ -83,2 +60,2 @@\n-        static CtorTester greedy(String input, int expectedComponentCount) {\n-            return new CtorTester(input, true, \"\", expectedComponentCount, input);\n+        static TestConfig lazy(String input, String expectedSuffix, int expectedComponentCount, String expectedToComponent) {\n+            return new TestConfig(input, Type.LAZY.createVersion, expectedSuffix, expectedComponentCount, expectedToComponent);\n@@ -86,0 +63,1 @@\n+    }\n@@ -87,5 +65,8 @@\n-        static CtorTester lazy(String input, String expectedSuffix, int expectedComponentCount,\n-                String expectedToComponent) {\n-            return new CtorTester(input, false, expectedSuffix, expectedComponentCount,\n-                    expectedToComponent);\n-        }\n+    @ParameterizedTest\n+    @MethodSource\n+    public void testValid(TestConfig cfg) {\n+        var dv = cfg.createVersion.apply(cfg.input());\n+        assertEquals(cfg.expectedSuffix(), dv.getUnprocessedSuffix());\n+        assertEquals(cfg.expectedComponentCount(), dv.getComponents().length);\n+        assertEquals(cfg.expectedToComponent(), dv.toComponentsString());\n+    }\n@@ -93,11 +74,13 @@\n-        void run() {\n-            DottedVersion dv;\n-            if (greedy) {\n-                dv = DottedVersion.greedy(input);\n-            } else {\n-                dv = DottedVersion.lazy(input);\n-            }\n-\n-            assertEquals(expectedSuffix, dv.getUnprocessedSuffix());\n-            assertEquals(expectedComponentCount, dv.getComponents().length);\n-            assertEquals(expectedToComponent, dv.toComponentsString());\n+    private static List<TestConfig> testValid() {\n+        List<TestConfig> data = new ArrayList<>();\n+        for (var type : Type.values()) {\n+            data.addAll(List.of(\n+                    new TestConfig(\"1.0\", type, 2),\n+                    new TestConfig(\"1\", type, 1),\n+                    new TestConfig(\"2.20034.045\", type, 3, \"2.20034.45\"),\n+                    new TestConfig(\"2.234.0\", type, 3),\n+                    new TestConfig(\"0\", type, 1),\n+                    new TestConfig(\"0.1\", type, 2),\n+                    new TestConfig(\"9\".repeat(1000), type, 1),\n+                    new TestConfig(\"00.0.0\", type, 3, \"0.0.0\")\n+            ));\n@@ -106,5 +89,24 @@\n-        private final String input;\n-        private final boolean greedy;\n-        private final String expectedSuffix;\n-        private final int expectedComponentCount;\n-        private final String expectedToComponent;\n+        data.addAll(List.of(\n+                TestConfig.lazy(\"1.-1\", \".-1\", 1, \"1\"),\n+                TestConfig.lazy(\"5.\", \".\", 1, \"5\"),\n+                TestConfig.lazy(\"4.2.\", \".\", 2, \"4.2\"),\n+                TestConfig.lazy(\"3..2\", \"..2\", 1, \"3\"),\n+                TestConfig.lazy(\"3......2\", \"......2\", 1, \"3\"),\n+                TestConfig.lazy(\"2.a\", \".a\", 1, \"2\"),\n+                TestConfig.lazy(\"a\", \"a\", 0, \"\"),\n+                TestConfig.lazy(\"2..a\", \"..a\", 1, \"2\"),\n+                TestConfig.lazy(\"0a\", \"a\", 1, \"0\"),\n+                TestConfig.lazy(\"120a\", \"a\", 1, \"120\"),\n+                TestConfig.lazy(\"120abc\", \"abc\", 1, \"120\"),\n+                TestConfig.lazy(\".\", \".\", 0, \"\"),\n+                TestConfig.lazy(\"....\", \"....\", 0, \"\"),\n+                TestConfig.lazy(\" \", \" \", 0, \"\"),\n+                TestConfig.lazy(\" 1\", \" 1\", 0, \"\"),\n+                TestConfig.lazy(\"678. 2\", \". 2\", 1, \"678\"),\n+                TestConfig.lazy(\"+1\", \"+1\", 0, \"\"),\n+                TestConfig.lazy(\"-1\", \"-1\", 0, \"\"),\n+                TestConfig.lazy(\"-0\", \"-0\", 0, \"\"),\n+                TestConfig.lazy(\"+0\", \"+0\", 0, \"\")\n+        ));\n+\n+        return data;\n@@ -113,12 +115,5 @@\n-    @Test\n-    public void testValid() {\n-        final List<CtorTester> validStrings = List.of(\n-                new CtorTester(\"1.0\", greedy, 2),\n-                new CtorTester(\"1\", greedy, 1),\n-                new CtorTester(\"2.20034.045\", greedy, 3, \"2.20034.45\"),\n-                new CtorTester(\"2.234.0\", greedy, 3),\n-                new CtorTester(\"0\", greedy, 1),\n-                new CtorTester(\"0.1\", greedy, 2),\n-                new CtorTester(\"9\".repeat(1000), greedy, 1),\n-                new CtorTester(\"00.0.0\", greedy, 3, \"0.0.0\")\n-        );\n+    @ParameterizedTest\n+    @MethodSource\n+    public void testInvalid(String str) {\n+        assertThrowsExactly(IllegalArgumentException.class, () -> new DottedVersion(str));\n+    }\n@@ -126,27 +121,18 @@\n-        final List<CtorTester> validLazyStrings;\n-        if (greedy) {\n-            validLazyStrings = Collections.emptyList();\n-        } else {\n-            validLazyStrings = List.of(\n-                    CtorTester.lazy(\"1.-1\", \".-1\", 1, \"1\"),\n-                    CtorTester.lazy(\"5.\", \".\", 1, \"5\"),\n-                    CtorTester.lazy(\"4.2.\", \".\", 2, \"4.2\"),\n-                    CtorTester.lazy(\"3..2\", \"..2\", 1, \"3\"),\n-                    CtorTester.lazy(\"3......2\", \"......2\", 1, \"3\"),\n-                    CtorTester.lazy(\"2.a\", \".a\", 1, \"2\"),\n-                    CtorTester.lazy(\"a\", \"a\", 0, \"\"),\n-                    CtorTester.lazy(\"2..a\", \"..a\", 1, \"2\"),\n-                    CtorTester.lazy(\"0a\", \"a\", 1, \"0\"),\n-                    CtorTester.lazy(\"120a\", \"a\", 1, \"120\"),\n-                    CtorTester.lazy(\"120abc\", \"abc\", 1, \"120\"),\n-                    CtorTester.lazy(\".\", \".\", 0, \"\"),\n-                    CtorTester.lazy(\"....\", \"....\", 0, \"\"),\n-                    CtorTester.lazy(\" \", \" \", 0, \"\"),\n-                    CtorTester.lazy(\" 1\", \" 1\", 0, \"\"),\n-                    CtorTester.lazy(\"678. 2\", \". 2\", 1, \"678\"),\n-                    CtorTester.lazy(\"+1\", \"+1\", 0, \"\"),\n-                    CtorTester.lazy(\"-1\", \"-1\", 0, \"\"),\n-                    CtorTester.lazy(\"-0\", \"-0\", 0, \"\"),\n-                    CtorTester.lazy(\"+0\", \"+0\", 0, \"\")\n-            );\n-        }\n+    private static Stream<String> testInvalid() {\n+        return Stream.of(\n+                \"1.-1\",\n+                \"5.\",\n+                \"4.2.\",\n+                \"3..2\",\n+                \"2.a\",\n+                \"0a\",\n+                \".\",\n+                \" \",\n+                \" 1\",\n+                \"1. 2\",\n+                \"+1\",\n+                \"-1\",\n+                \"-0\",\n+                \"+0\"\n+        );\n+    }\n@@ -154,1 +140,4 @@\n-        Stream.concat(validStrings.stream(), validLazyStrings.stream()).forEach(CtorTester::run);\n+    @ParameterizedTest\n+    @EnumSource(Type.class)\n+    public void testNull(Type type) {\n+        assertThrowsExactly(NullPointerException.class, () -> type.createVersion.apply(null));\n@@ -158,3 +147,2 @@\n-    public void testNull() {\n-        exceptionRule.expect(NullPointerException.class);\n-        createTestee.apply(null);\n+    public void testEmptyGreey() {\n+        assertThrowsExactly(IllegalArgumentException.class, () -> DottedVersion.greedy(\"\"), \"Version may not be empty string\");\n@@ -164,8 +152,2 @@\n-    public void testEmpty() {\n-        if (greedy) {\n-            exceptionRule.expect(IllegalArgumentException.class);\n-            exceptionRule.expectMessage(\"Version may not be empty string\");\n-            createTestee.apply(\"\");\n-        } else {\n-            assertEquals(0, createTestee.apply(\"\").getComponents().length);\n-        }\n+    public void testEmptyLazy() {\n+        assertEquals(0, DottedVersion.lazy(\"\").getComponents().length);\n@@ -174,3 +156,4 @@\n-    @Test\n-    public void testEquals() {\n-        DottedVersion dv = createTestee.apply(\"1.0\");\n+    @ParameterizedTest\n+    @EnumSource(Type.class)\n+    public void testEquals(Type type) {\n+        DottedVersion dv = type.createVersion.apply(\"1.0\");\n@@ -178,1 +161,2 @@\n-        assertFalse(dv.equals(Integer.valueOf(1)));\n+        assertFalse(dv.equals(1));\n+        assertFalse(dv.equals(dv.toString()));\n@@ -181,2 +165,2 @@\n-            DottedVersion a = createTestee.apply(ver);\n-            DottedVersion b = createTestee.apply(ver);\n+            DottedVersion a = type.createVersion.apply(ver);\n+            DottedVersion b = type.createVersion.apply(ver);\n@@ -186,0 +170,1 @@\n+    }\n@@ -187,3 +172,54 @@\n-        if (!greedy) {\n-            assertTrue(createTestee.apply(\"3.6+67\").equals(createTestee.apply(\"3.6+67\")));\n-            assertFalse(createTestee.apply(\"3.6+67\").equals(createTestee.apply(\"3.6+067\")));\n+    @Test\n+    public void testEqualsLaxy() {\n+        assertTrue(DottedVersion.lazy(\"3.6+67\").equals(DottedVersion.lazy(\"3.6+67\")));\n+        assertFalse(DottedVersion.lazy(\"3.6+67\").equals(DottedVersion.lazy(\"3.6+067\")));\n+    }\n+\n+    private static List<Object[]> testCompare() {\n+        List<Object[]> data = new ArrayList<>();\n+        for (var type : Type.values()) {\n+            data.addAll(List.of(new Object[][] {\n+                { type, \"00.0.0\", \"0\", 0 },\n+                { type, \"00.0.0\", \"0.000\", 0 },\n+                { type, \"0.035\", \"0.0035\", 0 },\n+                { type, \"0.035\", \"0.0035.0\", 0 },\n+                { type, \"1\", \"1\", 0 },\n+                { type, \"2\", \"2.0\", 0 },\n+                { type, \"2.00\", \"2.0\", 0 },\n+                { type, \"1.2.3.4\", \"1.2.3.4.5\", -1 },\n+                { type, \"1.2.3.4\", \"1.2.3.4.0.1\", -1 },\n+                { type, \"34\", \"33\", 1 },\n+                { type, \"34.0.78\", \"34.1.78\", -1 }\n+            }));\n+        }\n+\n+        data.addAll(List.of(new Object[][] {\n+            { Type.LAZY, \"\", \"1\", -1 },\n+            { Type.LAZY, \"\", \"0\", 0 },\n+            { Type.LAZY, \"0\", \"\", 0 },\n+            { Type.LAZY, \"1.2.4-R4\", \"1.2.4-R5\", 0 },\n+            { Type.LAZY, \"1.2.4.-R4\", \"1.2.4.R5\", 0 },\n+            { Type.LAZY, \"7+1\", \"7+4\", 0 },\n+            { Type.LAZY, \"2+14\", \"2-14\", 0 },\n+            { Type.LAZY, \"23.4.RC4\", \"23.3.RC10\", 1 },\n+            { Type.LAZY, \"77.\"  + \"9\".repeat(1000), \"77.\" + \"9\".repeat(1000 -1) + \"8\", 1 },\n+        }));\n+\n+        return data;\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    public void testCompare(Type type, String version1, String version2, int expectedResult) {\n+        final int actualResult = compare(type, version1, version2);\n+        assertEquals(expectedResult, actualResult);\n+\n+        final int actualNegateResult = compare(type, version2, version1);\n+        assertEquals(actualResult, -1 * actualNegateResult);\n+    }\n+\n+    private int compare(Type type, String x, String y) {\n+        int result = DottedVersion.compareComponents(type.createVersion.apply(x), type.createVersion.apply(y));\n+\n+        if (result < 0) {\n+            return -1;\n@@ -191,0 +227,6 @@\n+\n+        if (result > 0) {\n+            return 1;\n+        }\n+\n+        return 0;\n@@ -193,2 +235,10 @@\n-    private final boolean greedy;\n-    private final Function<String, DottedVersion> createTestee;\n+    public enum Type {\n+        GREEDY(DottedVersion::greedy),\n+        LAZY(DottedVersion::lazy);\n+\n+        Type(Function<String, DottedVersion> createVersion) {\n+            this.createVersion = createVersion;\n+        }\n+\n+        private final Function<String, DottedVersion> createVersion;\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/DottedVersionTest.java","additions":179,"deletions":129,"binary":false,"changes":308,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,5 @@\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Test;\n+import java.util.stream.Stream;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -31,3 +34,6 @@\n-    @Test\n-    public void testForShellLiterals() {\n-        var enquoter = Enquoter.forShellLiterals();\n+    @ParameterizedTest\n+    @MethodSource\n+    public void testForShellLiterals(String expected, String input) {\n+        var actual = Enquoter.forShellLiterals().applyTo(input);\n+        assertEquals(expected, actual);\n+    }\n@@ -35,5 +41,5 @@\n-        assertEquals(null, \"''\", enquoter.applyTo(\"\"));\n-        assertEquals(null, \"'foo'\", enquoter.applyTo(\"foo\"));\n-        assertEquals(null, \"' foo '\", enquoter.applyTo(\" foo \"));\n-        assertEquals(null, \"'foo bar'\", enquoter.applyTo(\"foo bar\"));\n-        assertEquals(null, \"'foo\\\\' bar'\", enquoter.applyTo(\"foo' bar\"));\n+    @ParameterizedTest\n+    @MethodSource\n+    public void testForPropertyValues(String expected, String input) {\n+        var actual = Enquoter.forPropertyValues().applyTo(input);\n+        assertEquals(expected, actual);\n@@ -42,3 +48,19 @@\n-    @Test\n-    public void testForPropertyValues() {\n-        var enquoter = Enquoter.forPropertyValues();\n+    private static Stream<org.junit.jupiter.params.provider.Arguments> testForShellLiterals() {\n+        return Stream.of(\n+                makeArguments(\"''\", \"\"),\n+                makeArguments(\"'foo'\", \"foo\"),\n+                makeArguments(\"' foo '\", \" foo \"),\n+                makeArguments(\"'foo bar'\", \"foo bar\"),\n+                makeArguments(\"'foo\\\\' bar'\", \"foo' bar\")\n+        );\n+    }\n+\n+    private static Stream<org.junit.jupiter.params.provider.Arguments> testForPropertyValues() {\n+        return Stream.of(\n+                makeArguments(\"\", \"\"),\n+                makeArguments(\"foo\", \"foo\"),\n+                makeArguments(\"\\\" foo \\\"\", \" foo \"),\n+                makeArguments(\"\\\"foo bar\\\"\", \"foo bar\"),\n+                makeArguments(\"\\\"foo' bar\\\"\", \"foo' bar\")\n+        );\n+    }\n@@ -46,5 +68,2 @@\n-        assertEquals(null, \"\", enquoter.applyTo(\"\"));\n-        assertEquals(null, \"foo\", enquoter.applyTo(\"foo\"));\n-        assertEquals(null, \"\\\" foo \\\"\", enquoter.applyTo(\" foo \"));\n-        assertEquals(null, \"\\\"foo bar\\\"\", enquoter.applyTo(\"foo bar\"));\n-        assertEquals(null, \"\\\"foo' bar\\\"\", enquoter.applyTo(\"foo' bar\"));\n+    static org.junit.jupiter.params.provider.Arguments makeArguments(Object ... args) {\n+        return org.junit.jupiter.params.provider.Arguments.of(args);\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/EnquoterTest.java","additions":38,"deletions":19,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jpackage.internal;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-@RunWith(Parameterized.class)\n-public class InvalidDottedVersionTest {\n-\n-    public InvalidDottedVersionTest(String version) {\n-        this.version = version;\n-    }\n-\n-    @Parameters\n-    public static List<Object[]> data() {\n-        return Stream.of(\n-            \"1.-1\",\n-            \"5.\",\n-            \"4.2.\",\n-            \"3..2\",\n-            \"2.a\",\n-            \"0a\",\n-            \".\",\n-            \" \",\n-            \" 1\",\n-            \"1. 2\",\n-            \"+1\",\n-            \"-1\",\n-            \"-0\",\n-            \"+0\"\n-        ).map(version -> new Object[] { version }).collect(Collectors.toList());\n-    }\n-\n-    @Rule\n-    public ExpectedException exceptionRule = ExpectedException.none();\n-\n-    @Test\n-    public void testIt() {\n-        exceptionRule.expect(IllegalArgumentException.class);\n-        new DottedVersion(version);\n-    }\n-\n-    private final String version;\n-}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/InvalidDottedVersionTest.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.io.BufferedReader;\n@@ -27,1 +28,1 @@\n-import java.io.InputStream;\n+import java.io.InputStreamReader;\n@@ -31,0 +32,1 @@\n+import java.util.ArrayList;\n@@ -35,0 +37,2 @@\n+import java.util.Objects;\n+import java.util.stream.Stream;\n@@ -37,0 +41,2 @@\n+import static jdk.jpackage.internal.OverridableResource.Source.DefaultResource;\n+import static jdk.jpackage.internal.OverridableResource.Source.ResourceDir;\n@@ -38,10 +44,12 @@\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertThat;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n@@ -51,2 +59,13 @@\n-    @Rule\n-    public final TemporaryFolder tempFolder = new TemporaryFolder();\n+    private static String[] saveResource(ResourceWriter resourceWriter, Path dstPath) throws IOException {\n+        switch (dstPath.getFileName().toString()) {\n+            case \"file\" -> {\n+                return resourceWriter.saveToFile(dstPath);\n+            }\n+            case \"dir\" -> {\n+                return resourceWriter.saveInDir(dstPath);\n+            }\n+            default -> {\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+    }\n@@ -54,3 +73,8 @@\n-    @Test\n-    public void testDefault() throws IOException {\n-        byte[] actualBytes = saveToFile(new OverridableResource(DEFAULT_NAME));\n+    private static String[] saveResource(\n+            OverridableResource resource, Path dstPath, boolean dstFileOverwrite)\n+            throws IOException {\n+        return saveResource(buildResourceWriter(resource).dstFileOverwrite(dstFileOverwrite), dstPath);\n+    }\n+\n+    private static List<Object[]> data() {\n+        List<Object[]> data = new ArrayList<>();\n@@ -58,3 +82,4 @@\n-        try (InputStream is = ResourceLocator.class.getResourceAsStream(\n-                DEFAULT_NAME)) {\n-            assertArrayEquals(is.readAllBytes(), actualBytes);\n+        for (var dstPath : List.of(\"file\", \"dir\")) {\n+            for (var dstFileOverwrite : List.of(true, false)) {\n+                data.add(new Object[]{Path.of(dstPath), dstFileOverwrite});\n+            }\n@@ -62,1 +87,0 @@\n-    }\n@@ -64,3 +88,6 @@\n-    @Test\n-    public void testDefaultWithSubstitution() throws IOException {\n-        OverridableResource resource = new OverridableResource(DEFAULT_NAME);\n+        for (var dstPath : List.of(\"dir\/file\", \"dir\/dir\")) {\n+            data.add(new Object[]{Path.of(dstPath), false});\n+        }\n+\n+        return data;\n+    }\n@@ -68,2 +95,14 @@\n-        List<String> linesBeforeSubstitution = convertToStringList(saveToFile(\n-                resource));\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testDefault(Path dstPath, boolean dstFileOverwrite,\n+            @TempDir Path tempFolder) throws IOException {\n+        final String[] content = saveResource(\n+                new OverridableResource(DEFAULT_NAME), tempFolder.resolve(\n+                        dstPath), dstFileOverwrite);\n+\n+        try (var resource = ResourceLocator.class.getResourceAsStream(DEFAULT_NAME);\n+                var isr = new InputStreamReader(resource, StandardCharsets.ISO_8859_1);\n+                var br = new BufferedReader(isr)) {\n+            assertArrayEquals(br.lines().toArray(String[]::new), content);\n+        }\n+    }\n@@ -71,0 +110,4 @@\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testDefaultWithSubstitution(Path dstPath, boolean dstFileOverwrite,\n+            @TempDir Path tempFolder) throws IOException {\n@@ -77,0 +120,4 @@\n+        OverridableResource resource = new OverridableResource(DEFAULT_NAME);\n+\n+        var linesBeforeSubstitution = List.of(saveResource(resource, tempFolder.resolve(dstPath), dstFileOverwrite));\n+\n@@ -78,2 +125,1 @@\n-        List<String> linesAfterSubstitution = convertToStringList(saveToFile(\n-                resource));\n+        var linesAfterSubstitution = List.of(saveResource(resource, tempFolder.resolve(dstPath), dstFileOverwrite));\n@@ -106,8 +152,9 @@\n-    @Test\n-    public void testCustom() throws IOException {\n-        testCustom(DEFAULT_NAME);\n-    }\n-\n-    @Test\n-    public void testCustomNoDefault() throws IOException {\n-        testCustom(null);\n+    private static Stream<Object[]> dataWithResourceName() {\n+        return data().stream().flatMap(origArgs -> {\n+            return Stream.of(ResourceName.values()).map(defaultName -> {\n+                Object[] args = new Object[origArgs.length + 1];\n+                args[0] = defaultName;\n+                System.arraycopy(origArgs, 0, args, 1, origArgs.length);\n+                return args;\n+            });\n+        });\n@@ -116,1 +163,4 @@\n-    private void testCustom(String defaultName) throws IOException {\n+    @ParameterizedTest\n+    @MethodSource(\"dataWithResourceName\")\n+    public void testResourceDir(ResourceName defaultName, Path dstPath,\n+            boolean dstFileOverwrite, @TempDir Path tempFolder) throws IOException {\n@@ -119,1 +169,2 @@\n-        Path customFile = createCustomFile(\"foo\", expectedResourceData);\n+        Path customFile = tempFolder.resolve(\"hello\");\n+        Files.write(customFile, expectedResourceData);\n@@ -121,2 +172,2 @@\n-        List<String> actualResourceData = convertToStringList(saveToFile(\n-                new OverridableResource(defaultName)\n+        final var actualResourceData = saveResource(buildResourceWriter(\n+                new OverridableResource(defaultName.value)\n@@ -124,1 +175,3 @@\n-                        .setResourceDir(customFile.getParent())));\n+                        .setResourceDir(customFile.getParent())\n+                ).dstFileOverwrite(dstFileOverwrite).expectedSource(ResourceDir),\n+                tempFolder.resolve(dstPath));\n@@ -126,2 +179,1 @@\n-        assertArrayEquals(expectedResourceData.toArray(String[]::new),\n-                actualResourceData.toArray(String[]::new));\n+        assertArrayEquals(expectedResourceData.toArray(String[]::new), actualResourceData);\n@@ -130,11 +182,4 @@\n-    @Test\n-    public void testCustomtWithSubstitution() throws IOException {\n-        testCustomtWithSubstitution(DEFAULT_NAME);\n-    }\n-\n-    @Test\n-    public void testCustomtWithSubstitutionNoDefault() throws IOException {\n-        testCustomtWithSubstitution(null);\n-    }\n-\n-    private void testCustomtWithSubstitution(String defaultName) throws IOException {\n+    @ParameterizedTest\n+    @MethodSource(\"dataWithResourceName\")\n+    public void testResourceDirWithSubstitution(ResourceName defaultName, Path dstPath,\n+            boolean dstFileOverwrite, @TempDir Path tempFolder) throws IOException {\n@@ -143,1 +188,0 @@\n-        final Path customFile = createCustomFile(\"foo\", resourceData);\n@@ -145,2 +189,7 @@\n-        final Map<String, String> substitutionData = new HashMap(Map.of(\"B\",\n-                \"Bar\", \"Foo\", \"B\", \"_B\", \"JJ\"));\n+        final Path customFile = tempFolder.resolve(\"hello\");\n+        Files.write(customFile, resourceData);\n+\n+        final Map<String, String> substitutionData = new HashMap<>(Map.of(\n+                \"B\", \"Bar\",\n+                \"Foo\", \"B\",\n+                \"_B\", \"JJ\"));\n@@ -152,3 +201,2 @@\n-        final List<String> actualResourceData = convertToStringList(saveToFile(\n-                new OverridableResource(defaultName)\n-                        .setPublicName(customFile.getFileName())\n+        final var actualResourceData = saveResource(buildResourceWriter(\n+                new OverridableResource(defaultName.value)\n@@ -156,3 +204,13 @@\n-                        .setResourceDir(customFile.getParent())));\n-        assertArrayEquals(expectedResourceData.toArray(String[]::new),\n-                actualResourceData.toArray(String[]::new));\n+                        .setPublicName(customFile.getFileName())\n+                        .setResourceDir(customFile.getParent())\n+                ).dstFileOverwrite(dstFileOverwrite).expectedSource(ResourceDir),\n+                tempFolder.resolve(dstPath));\n+\n+        assertArrayEquals(expectedResourceData.toArray(String[]::new), actualResourceData);\n+    }\n+\n+    \/\/ Test it can derive a file in the resource dir from the name of the output file if the public name is not set\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testPublicNameNotSet(boolean namesMatch, @TempDir Path tempFolder) throws IOException {\n+        final List<String> expectedResourceData = List.of(\"A\", \"B\", \"C\");\n@@ -160,3 +218,30 @@\n-        \/\/ Don't call setPublicName()\n-        final Path dstFile = tempFolder.newFolder().toPath().resolve(customFile.getFileName());\n-        new OverridableResource(defaultName)\n+        final Path customFile = tempFolder.resolve(\"hello\");\n+        Files.write(customFile, expectedResourceData);\n+\n+        final Path outputDir = tempFolder.resolve(\"output\");\n+\n+        var resourceWriter = buildResourceWriter(\n+                new OverridableResource(null).setResourceDir(customFile.getParent()));\n+\n+        if (namesMatch) {\n+            final var actualResourceData = resourceWriter\n+                    .expectedSource(ResourceDir)\n+                    .saveToFile(outputDir.resolve(customFile.getFileName()));\n+            assertArrayEquals(expectedResourceData.toArray(String[]::new), actualResourceData);\n+        } else {\n+            final var actualResourceData = resourceWriter\n+                    .expectedSource(null)\n+                    .saveToFile(outputDir.resolve(\"another\"));\n+            assertNull(actualResourceData);\n+        }\n+    }\n+\n+    \/\/ Test setSubstitutionData() stores a copy of passed in data\n+    @Test\n+    public void testSubstitutionDataCopied(@TempDir Path tempFolder) throws IOException {\n+        final Path customFile = tempFolder.resolve(\"hello\");\n+        Files.write(customFile, List.of(\"Hello\"));\n+\n+        final Map<String, String> substitutionData = new HashMap<>(Map.of(\"Hello\", \"Goodbye\"));\n+\n+        var resource = new OverridableResource(null)\n@@ -164,9 +249,1 @@\n-                .setResourceDir(customFile.getParent())\n-                .saveToFile(dstFile);\n-        assertArrayEquals(expectedResourceData.toArray(String[]::new),\n-                convertToStringList(Files.readAllBytes(dstFile)).toArray(\n-                        String[]::new));\n-\n-        \/\/ Verify setSubstitutionData() stores a copy of passed in data\n-        Map<String, String> substitutionData2 = new HashMap(substitutionData);\n-        var resource = new OverridableResource(defaultName)\n+                .setPublicName(customFile.getFileName())\n@@ -175,7 +252,12 @@\n-        resource.setSubstitutionData(substitutionData2);\n-        substitutionData2.clear();\n-        Files.delete(dstFile);\n-        resource.saveToFile(dstFile);\n-        assertArrayEquals(expectedResourceData.toArray(String[]::new),\n-                convertToStringList(Files.readAllBytes(dstFile)).toArray(\n-                        String[]::new));\n+        final var resourceWriter = buildResourceWriter(resource).expectedSource(ResourceDir);\n+\n+        var contents = resourceWriter.saveToFile(tempFolder.resolve(\"output\"));\n+        assertArrayEquals(new String[] { \"Goodbye\" }, contents);\n+\n+        substitutionData.put(\"Hello\", \"Ciao\");\n+        contents = resourceWriter.saveToFile(tempFolder.resolve(\"output\"));\n+        assertArrayEquals(new String[] { \"Goodbye\" }, contents);\n+\n+        resource.setSubstitutionData(substitutionData);\n+        contents = resourceWriter.saveToFile(tempFolder.resolve(\"output\"));\n+        assertArrayEquals(new String[] { \"Ciao\" }, contents);\n@@ -185,3 +267,3 @@\n-    public void testNoDefault() throws IOException {\n-        Path dstFolder = tempFolder.newFolder().toPath();\n-        Path dstFile = dstFolder.resolve(Path.of(\"foo\", \"bar\"));\n+    public void testNoDefault(@TempDir Path tempFolder) throws IOException {\n+        var resourceWriter = buildResourceWriter(new OverridableResource(null)).expectedSource(null);\n+        assertEquals(null, resourceWriter.saveInDir(tempFolder));\n@@ -189,1 +271,4 @@\n-        new OverridableResource(null).saveToFile(dstFile);\n+        var dstDir = tempFolder.resolve(\"foo\");\n+        assertEquals(null, resourceWriter.saveInDir(dstDir));\n+        assertFalse(Files.exists(dstDir));\n+    }\n@@ -191,1 +276,9 @@\n-        assertFalse(dstFile.toFile().exists());\n+    enum ResourceName {\n+        DEFAULT_NAME(OverridableResourceTest.DEFAULT_NAME),\n+        NULL_NAME(null);\n+\n+        ResourceName(String value) {\n+            this.value = value;\n+        }\n+\n+        private final String value;\n@@ -194,2 +287,2 @@\n-    private final static String DEFAULT_NAME;\n-    private final static Map<String, String> SUBSTITUTION_DATA;\n+    private static final String DEFAULT_NAME;\n+    private static final Map<String, String> SUBSTITUTION_DATA;\n@@ -197,11 +290,19 @@\n-        if (OperatingSystem.isWindows()) {\n-            DEFAULT_NAME = \"WinLauncher.template\";\n-            SUBSTITUTION_DATA = Map.of(\"COMPANY_NAME\", \"Foo9090345\");\n-        } else if (OperatingSystem.isLinux()) {\n-            DEFAULT_NAME = \"template.control\";\n-            SUBSTITUTION_DATA = Map.of(\"APPLICATION_PACKAGE\", \"Package1967\");\n-        } else if (OperatingSystem.isMacOS()) {\n-            DEFAULT_NAME = \"Info-lite.plist.template\";\n-            SUBSTITUTION_DATA = Map.of(\"DEPLOY_BUNDLE_IDENTIFIER\", \"12345\");\n-        } else {\n-            throw new IllegalArgumentException(\"Unknown platform: \" + OperatingSystem.current());\n+        switch (OperatingSystem.current()) {\n+            case WINDOWS -> {\n+                DEFAULT_NAME = \"WinLauncher.template\";\n+                SUBSTITUTION_DATA = Map.of(\"COMPANY_NAME\", \"Foo9090345\");\n+            }\n+\n+            case LINUX -> {\n+                DEFAULT_NAME = \"template.control\";\n+                SUBSTITUTION_DATA = Map.of(\"APPLICATION_PACKAGE\", \"Package1967\");\n+            }\n+\n+            case MACOS -> {\n+                DEFAULT_NAME = \"Info-lite.plist.template\";\n+                SUBSTITUTION_DATA = Map.of(\"DEPLOY_BUNDLE_IDENTIFIER\", \"12345\");\n+            }\n+\n+            default -> {\n+                throw new IllegalArgumentException(\"Unsupported platform: \" + OperatingSystem.current());\n+            }\n@@ -211,4 +312,1 @@\n-    private byte[] saveToFile(OverridableResource resource) throws IOException {\n-        Path dstFile = tempFolder.newFile().toPath();\n-        resource.saveToFile(dstFile);\n-        assertThat(0, is(not(dstFile.toFile().length())));\n+    static class ResourceWriter {\n@@ -216,2 +314,45 @@\n-        return Files.readAllBytes(dstFile);\n-    }\n+        ResourceWriter(OverridableResource resource) {\n+            this.resource = Objects.requireNonNull(resource);\n+        }\n+\n+        ResourceWriter expectedSource(OverridableResource.Source v) {\n+            expectedSource = v;\n+            return this;\n+        }\n+\n+        ResourceWriter dstFileOverwrite(boolean v) {\n+            dstFileOverwrite = v;\n+            return this;\n+        }\n+\n+        String[] saveInDir(Path dstDir) throws IOException {\n+            Path dstFile;\n+            if (expectedSource != null) {\n+                if (!Files.exists(dstDir)) {\n+                    Files.createDirectories(dstDir);\n+                }\n+                dstFile = Files.createTempFile(dstDir, null, null);\n+            } else if (!Files.exists(dstDir)) {\n+                dstFile = dstDir.resolve(\"nonexistant\");\n+            } else {\n+                dstFile = Files.createTempFile(dstDir, null, null);\n+                Files.delete(dstFile);\n+            }\n+            return saveToFile(dstFile);\n+        }\n+\n+        String[] saveToFile(Path dstFile) throws IOException {\n+            saveResource(dstFile);\n+            if (expectedSource == null) {\n+                return null;\n+            } else {\n+                return Files.readAllLines(dstFile).toArray(String[]::new);\n+            }\n+        }\n+\n+        private void saveResource(Path dstFile) throws IOException {\n+            if (dstFileOverwrite && !Files.exists(dstFile)) {\n+                Files.writeString(dstFile, \"abcABC\");\n+            } else if (!dstFileOverwrite && Files.exists(dstFile)) {\n+                Files.delete(dstFile);\n+            }\n@@ -219,4 +360,6 @@\n-    private Path createCustomFile(String publicName, List<String> data) throws\n-            IOException {\n-        Path resourceFolder = tempFolder.newFolder().toPath();\n-        Path customFile = resourceFolder.resolve(publicName);\n+            final byte[] dstFileContent;\n+            if (expectedSource == null && Files.exists(dstFile)) {\n+                dstFileContent = Files.readAllBytes(dstFile);\n+            } else {\n+                dstFileContent = null;\n+            }\n@@ -224,1 +367,11 @@\n-        Files.write(customFile, data);\n+            var actualSource = resource.saveToFile(dstFile);\n+            assertEquals(expectedSource, actualSource);\n+            if (actualSource != null) {\n+                assertNotEquals(0, Files.size(dstFile));\n+            } else if (dstFileContent == null) {\n+                assertFalse(Files.exists(dstFile));\n+            } else {\n+                var actualDstFileContent = Files.readAllBytes(dstFile);\n+                assertArrayEquals(dstFileContent, actualDstFileContent);\n+            }\n+        }\n@@ -226,1 +379,3 @@\n-        return customFile;\n+        final OverridableResource resource;\n+        OverridableResource.Source expectedSource = DefaultResource;\n+        boolean dstFileOverwrite;\n@@ -229,2 +384,2 @@\n-    private static List<String> convertToStringList(byte[] data) {\n-        return List.of(new String(data, StandardCharsets.UTF_8).split(\"\\\\R\"));\n+    private static ResourceWriter buildResourceWriter(OverridableResource resource) {\n+        return new ResourceWriter(resource);\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/OverridableResourceTest.java","additions":269,"deletions":114,"binary":false,"changes":383,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.stream.Collectors;\n@@ -37,11 +36,11 @@\n-import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertThat;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrowsExactly;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -52,4 +51,0 @@\n-    @Rule\n-    public final TemporaryFolder tempFolder = new TemporaryFolder();\n-\n-    @Test(expected = NullPointerException.class)\n@@ -57,1 +52,1 @@\n-         new PathGroup(Map.of()).getPath(null);\n+        assertThrowsExactly(NullPointerException.class, () -> new PathGroup(Map.of()).getPath(null));\n@@ -85,2 +80,4 @@\n-        final PathGroup pg = new PathGroup(Map.of(\"main\", PATH_FOO, \"another\",\n-                PATH_FOO, \"root\", PATH_EMPTY));\n+        final PathGroup pg = new PathGroup(Map.of(\n+                \"main\", PATH_FOO,\n+                \"another\", PATH_FOO,\n+                \"root\", PATH_EMPTY));\n@@ -103,2 +100,4 @@\n-        final PathGroup pg = new PathGroup(Map.of(1, Path.of(\"foo\"), 2, Path.of(\n-                \"foo\", \"bar\"), 3, Path.of(\"foo\", \"bar\", \"buz\")));\n+        final PathGroup pg = new PathGroup(Map.of(\n+                1, Path.of(\"foo\"),\n+                2, Path.of(\"foo\", \"bar\"),\n+                3, Path.of(\"foo\", \"bar\", \"buz\")));\n@@ -119,2 +118,4 @@\n-        final PathGroup pg = new PathGroup(Map.of(0, PATH_FOO, 1, PATH_BAR, 2,\n-                PATH_EMPTY));\n+        final PathGroup pg = new PathGroup(Map.of(\n+                0, PATH_FOO,\n+                1, PATH_BAR,\n+                2, PATH_EMPTY));\n@@ -125,1 +126,1 @@\n-        assertThat(pg, not(equalTo(pg2)));\n+        assertNotEquals(pg, pg2);\n@@ -142,6 +143,1 @@\n-    @Test\n-    public void testTransform() throws IOException {\n-        for (var transform : TransformType.values()) {\n-            testTransform(false, transform);\n-        }\n-    }\n+    enum TransformType { COPY, MOVE, HANDLER };\n@@ -149,5 +145,6 @@\n-    @Test\n-    public void testTransformWithExcludes() throws IOException {\n-        for (var transform : TransformType.values()) {\n-            testTransform(true, transform);\n-        }\n+    private static Stream<Object[]> testTransform() {\n+        return Stream.of(TransformType.values()).flatMap(transform -> {\n+            return Stream.of(true, false).map(withExcludes -> {\n+                return new Object[]{withExcludes,transform};\n+            });\n+        });\n@@ -156,1 +153,6 @@\n-    enum TransformType { Copy, Move, Handler };\n+    @ParameterizedTest\n+    @MethodSource(\"testTransform\")\n+    public void testTransform(boolean withExcludes, TransformType transform, @TempDir Path tempDir) throws IOException {\n+\n+        final Path srcDir = tempDir.resolve(\"src\");\n+        Files.createDirectories(srcDir);\n@@ -158,4 +160,2 @@\n-    private void testTransform(boolean withExcludes, TransformType transform)\n-            throws IOException {\n-        final PathGroup pg = new PathGroup(Map.of(0, PATH_FOO, 1, PATH_BAR, 2,\n-                PATH_EMPTY, 3, PATH_BAZ));\n+        final Path dstDir = tempDir.resolve(\"dst\");\n+        Files.createDirectories(dstDir);\n@@ -163,2 +163,5 @@\n-        final Path srcDir = tempFolder.newFolder().toPath();\n-        final Path dstDir = tempFolder.newFolder().toPath();\n+        final PathGroup pg = new PathGroup(Map.of(\n+                0, PATH_FOO,\n+                1, PATH_BAR,\n+                2, PATH_EMPTY,\n+                3, PATH_BAZ));\n@@ -184,1 +187,1 @@\n-        if (transform == TransformType.Handler) {\n+        if (transform == TransformType.HANDLER) {\n@@ -234,1 +237,1 @@\n-        if (transform == TransformType.Copy) {\n+        if (transform == TransformType.COPY) {\n@@ -236,1 +239,1 @@\n-        } else if (transform == TransformType.Move) {\n+        } else if (transform == TransformType.MOVE) {\n@@ -251,3 +254,2 @@\n-                    .filter(path -> !excludedPaths.stream().anyMatch(\n-                            path::startsWith))\n-                    .collect(Collectors.toList()).toArray(Path[]::new);\n+                    .filter(path -> !excludedPaths.stream().anyMatch(path::startsWith))\n+                    .toArray(Path[]::new);\n@@ -259,1 +261,1 @@\n-        if (transform == TransformType.Copy) {\n+        if (transform == TransformType.COPY) {\n@@ -261,1 +263,1 @@\n-        } else if (transform == TransformType.Move) {\n+        } else if (transform == TransformType.MOVE) {\n@@ -268,2 +270,1 @@\n-            return files.map(root::relativize).sorted().collect(\n-                    Collectors.toList()).toArray(Path[]::new);\n+            return files.map(root::relativize).sorted().toArray(Path[]::new);\n@@ -273,4 +274,4 @@\n-    private final static Path PATH_FOO = Path.of(\"foo\");\n-    private final static Path PATH_BAR = Path.of(\"bar\");\n-    private final static Path PATH_BAZ = Path.of(\"baz\");\n-    private final static Path PATH_EMPTY = Path.of(\"\");\n+    private static final Path PATH_FOO = Path.of(\"foo\");\n+    private static final Path PATH_BAR = Path.of(\"bar\");\n+    private static final Path PATH_BAZ = Path.of(\"baz\");\n+    private static final Path PATH_EMPTY = Path.of(\"\");\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/PathGroupTest.java","additions":58,"deletions":57,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -29,2 +27,0 @@\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n@@ -32,7 +28,5 @@\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrowsExactly;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n@@ -40,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -43,5 +36,11 @@\n-    public PlatformVersionTest(Function<String, DottedVersion> parser,\n-            String version, boolean valid) {\n-        this.parser = parser;\n-        this.version = version;\n-        this.valid = valid;\n+    @ParameterizedTest\n+    @ValueSource(strings = {\n+        \"0.0\",\n+        \"255.255\",\n+        \"0.0.0\",\n+        \"255.255.65535\",\n+        \"0.0.0.0\",\n+        \"255.255.65535.999999\"\n+    })\n+    public void testValidMsiProductVersion(String version) {\n+        testImpl(PlatformVersion.WIN_MSI_PRODUCT_VERSION_CLASS, version, true);\n@@ -50,33 +49,10 @@\n-    @Parameters\n-    public static List<Object[]> data() {\n-        List<Object[]> data = new ArrayList<>();\n-        addTo(data, WIN_MSI_PRODUCT_VERSION_PARSER, true,\n-            \"0.0\",\n-            \"255.255\",\n-            \"0.0.0\",\n-            \"255.255.65535\",\n-            \"0.0.0.0\",\n-            \"255.255.65535.999999\"\n-        );\n-\n-        addTo(data, WIN_MSI_PRODUCT_VERSION_PARSER, false,\n-            \"0\",\n-            \"256.01\",\n-            \"255.256\",\n-            \"255.255.65536\",\n-            \"1.2.3.4.5\"\n-        );\n-\n-        addTo(data, MAC_CFBUNDLE_VERSION_PARSER, true,\n-            \"1\",\n-            \"1.2\",\n-            \"1.2.3\"\n-        );\n-\n-        addTo(data, MAC_CFBUNDLE_VERSION_PARSER, false,\n-            \"0\",\n-            \"0.1\",\n-            \"1.2.3.4\"\n-        );\n-\n-        return data;\n+    @ParameterizedTest\n+    @ValueSource(strings = {\n+        \"0\",\n+        \"256.01\",\n+        \"255.256\",\n+        \"255.255.65536\",\n+        \"1.2.3.4.5\"\n+    })\n+    public void testInvalidMsiProductVersion(String version) {\n+        testImpl(PlatformVersion.WIN_MSI_PRODUCT_VERSION_CLASS, version, false);\n@@ -85,7 +61,4 @@\n-    private static void addTo(List<Object[]> data,\n-            Function<String, DottedVersion> parser, boolean valid,\n-            String... values) {\n-        if (parser != null) {\n-            data.addAll(Stream.of(values).map(version -> new Object[]{parser,\n-                version, valid}).collect(Collectors.toList()));\n-        }\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"1\", \"1.2\", \"1.2.3\"})\n+    public void testValidCfBundleVersion(String version) {\n+        testImpl(PlatformVersion.MAC_CFBUNDLE_VERSION_CLASS, version, true);\n@@ -94,2 +67,5 @@\n-    @Rule\n-    public ExpectedException exceptionRule = ExpectedException.none();\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"0\", \"0.1\", \"1.2.3.4\"})\n+    public void testInvalidCfBundleVersion(String version) {\n+        testImpl(PlatformVersion.MAC_CFBUNDLE_VERSION_CLASS, version, false);\n+    }\n@@ -97,2 +73,2 @@\n-    @Test\n-    public void testIt() {\n+    private static void testImpl(PlatformVersion parser, String version, boolean valid) {\n+        assumeTrue(parser.parser != null);\n@@ -100,1 +76,1 @@\n-            assertEquals(parser.apply(version).toString(), version);\n+            assertEquals(parser.parse(version).toString(), version);\n@@ -102,2 +78,1 @@\n-            exceptionRule.expect(IllegalArgumentException.class);\n-            parser.apply(version);\n+            assertThrowsExactly(IllegalArgumentException.class, () -> parser.parse(version));\n@@ -107,3 +82,3 @@\n-    private final Function<String, DottedVersion> parser;\n-    private final String version;\n-    private final boolean valid;\n+    enum PlatformVersion {\n+        MAC_CFBUNDLE_VERSION_CLASS(\"jdk.jpackage.internal.CFBundleVersion\"),\n+        WIN_MSI_PRODUCT_VERSION_CLASS(\"jdk.jpackage.internal.MsiVersion\");\n@@ -111,4 +86,10 @@\n-    private final static Function<String, DottedVersion> MAC_CFBUNDLE_VERSION_PARSER = findParser(\n-            \"jdk.jpackage.internal.CFBundleVersion\");\n-    private final static Function<String, DottedVersion> WIN_MSI_PRODUCT_VERSION_PARSER = findParser(\n-            \"jdk.jpackage.internal.MsiVersion\");\n+        PlatformVersion(String className) {\n+            parser = findParser(className);\n+        }\n+\n+        DottedVersion parse(String versionString) {\n+            return parser.apply(versionString);\n+        }\n+\n+        private Function<String, DottedVersion> parser;\n+    }\n@@ -127,2 +108,2 @@\n-                    if (causeEx instanceof RuntimeException) {\n-                        throw (RuntimeException)causeEx;\n+                    if (causeEx instanceof RuntimeException rtEx) {\n+                        throw rtEx;\n@@ -139,0 +120,1 @@\n+\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/PlatformVersionTest.java","additions":56,"deletions":74,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,4 @@\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertThat;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import org.junit.jupiter.api.Test;\n@@ -73,2 +71,1 @@\n-    private static void assertValidationFailure(ConfigException v,\n-            boolean withCause) {\n+    private static void assertValidationFailure(ConfigException v, boolean withCause) {\n@@ -76,2 +73,2 @@\n-        assertThat(\"\", is(not(v.getMessage().strip())));\n-        assertThat(\"\", is(not(v.advice.strip())));\n+        assertNotEquals(\"\", v.getMessage().strip());\n+        assertNotEquals(\"\", v.getAdvice().strip());\n@@ -85,2 +82,2 @@\n-    private final static String TOOL_JAVA;\n-    private final static String TOOL_UNKNOWN = Path.of(System.getProperty(\n+    private static final String TOOL_JAVA;\n+    private static final String TOOL_UNKNOWN = Path.of(System.getProperty(\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/ToolValidatorTest.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"}]}