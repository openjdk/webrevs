{"files":[{"patch":"@@ -90,0 +90,3 @@\n+JNIEXPORT jboolean JNICALL\n+JVM_AOTEndRecording(JNIEnv *env);\n+\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -231,0 +231,13 @@\n+JVM_ENTRY(jboolean, JVM_AOTEndRecording(JNIEnv *env))\n+#if INCLUDE_CDS\n+  if (CDSConfig::is_dumping_preimage_static_archive()) {\n+    if (AOTMetaspace::is_recording_preimage_static_archive()) {\n+      AOTMetaspace::dump_static_archive(THREAD);\n+      return JNI_TRUE;\n+    }\n+  }\n+  return JNI_FALSE;\n+#else\n+  return JNI_FALSE;\n+#endif \/\/ INCLUDE_CDS\n+JVM_END\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,3 @@\n+    \/\/ AOT Subsystem\n+    public boolean endAOTRecording();\n+\n","filename":"src\/java.management\/share\/classes\/sun\/management\/VMManagement.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,0 +120,3 @@\n+    \/\/ AOT Subsystem\n+    public native boolean endAOTRecording();\n+\n","filename":"src\/java.management\/share\/classes\/sun\/management\/VMManagementImpl.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -104,0 +104,7 @@\n+JNIEXPORT jboolean JNICALL\n+Java_sun_management_VMManagementImpl_endAOTRecording\n+  (JNIEnv *env, jobject dummy)\n+{\n+    return JVM_AOTEndRecording(env);\n+}\n+\n","filename":"src\/java.management\/share\/native\/libmanagement\/VMManagementImpl.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Microsoft, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.management.internal;\n+\n+import javax.management.ObjectName;\n+import jdk.management.HotSpotAOTCacheMXBean;\n+import sun.management.Util;\n+import sun.management.VMManagement;\n+\n+\/**\n+  * Implementation class for the AOT Cache subsystem.\n+  *\n+  * ManagementFactory.getRuntimeMXBean() returns an instance\n+  * of this class.\n+  *\/\n+public class HotSpotAOTCacheImpl implements HotSpotAOTCacheMXBean {\n+\n+    private final VMManagement jvm;\n+    \/**\n+      * Constructor of HotSpotAOTCacheImpl class.\n+      *\/\n+    HotSpotAOTCacheImpl(VMManagement vm) {\n+        this.jvm = vm;\n+    }\n+\n+    public boolean endRecording(){\n+        return jvm.endAOTRecording();\n+    }\n+\n+    public ObjectName getObjectName() {\n+        return Util.newObjectName(\"jdk.management:type=HotSpotAOTCache\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/HotSpotAOTCacheImpl.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import jdk.management.HotSpotAOTCacheMXBean;\n@@ -162,0 +163,35 @@\n+        \/**\n+        * HotSpotAOTCacheMXBean.\n+        *\/\n+        initMBeanList.add(new PlatformComponent<HotSpotAOTCacheMXBean>() {\n+            private final Set<Class<? extends HotSpotAOTCacheMXBean>> mbeanInterfaces =\n+                    Set.of(HotSpotAOTCacheMXBean.class);\n+            private final Set<String> mbeanInterfaceNames =\n+                    Set.of(HotSpotAOTCacheMXBean.class.getName());\n+            private HotSpotAOTCacheMXBean impl;\n+\n+            @Override\n+            public Set<Class<? extends HotSpotAOTCacheMXBean>> mbeanInterfaces() {\n+                return mbeanInterfaces;\n+            }\n+\n+            @Override\n+            public Set<String> mbeanInterfaceNames() {\n+                return mbeanInterfaceNames;\n+            }\n+\n+            @Override\n+            public String getObjectNamePattern() {\n+                return \"jdk.management:type=HotSpotAOTCache\";\n+            }\n+\n+            @Override\n+            public Map<String, HotSpotAOTCacheMXBean> nameToMBeanMap() {\n+                HotSpotAOTCacheMXBean impl = this.impl;\n+                if (impl == null) {\n+                    this.impl = impl = new HotSpotAOTCacheImpl(ManagementFactoryHelper.getVMManagement());\n+                }\n+                return Map.of(\"jdk.management:type=HotSpotAOTCache\", impl);\n+            }\n+        });\n+\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/PlatformMBeanProviderImpl.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025, Microsoft, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.management;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.PlatformManagedObject;\n+import java.util.concurrent.ForkJoinPool;\n+import javax.management.MBeanServer;\n+import javax.management.ObjectName;\n+\n+\/**\n+ * Management interface for the JDK's Ahead of Time (AOT) optimizations.\n+ *\n+ * Currently, {@code HotSpotAOTCacheMXBean} defines one operation at this time to end the AOT recording.\n+ * More operations and\/or properties may be added in a future release.\n+ *\n+ * <p> The management interface is registered with the platform {@link MBeanServer\n+ * MBeanServer}. The {@link ObjectName ObjectName} that uniquely identifies the management\n+ * interface within the {@code MBeanServer} is: \"jdk.management:type=HotSpotAOTCache\".\n+ *\n+ * <p> Direct access to the MXBean interface can be obtained with\n+ * {@link ManagementFactory#getPlatformMXBean(Class)}.\n+ *\n+ * @since 26\n+ *\/\n+public interface HotSpotAOTCacheMXBean extends PlatformManagedObject {\n+       \/**\n+       * If an AOT recording is in progress, ends the recording. This operation completes\n+       * after the AOT artifacts have been completely written.\n+       *\n+       * <p>The JVM will start recording AOT artifacts upon start-up if certain JVM options are\n+       *  supplied on the command-line. The recording will stop when the JVM exits, or when\n+       * the {@code endRecording} method is called. Examples:\n+       *\n+       * <p> java -XX:AOTCacheOutput=app.aot ....\n+       *\n+       * <blockquote>\n+       *       The JVM will record optimization information about the current application\n+       *       that will be used to generate the AOT cache file app.aot. In a future execution of this application,\n+       *       -XX:AOTCache=app.aot can be provided to improve the application's\n+       *       start-up and warm-up performance.\n+       * <\/blockquote>\n+       *\n+       * <p> java -XX:AOTMode=record -XX:AOTConfiguration=app.aotconfig ....\n+       *\n+       * <blockquote>\n+       *       The JVM will record optimization information about the current application\n+       *       into the AOT configuration file app.aotconfig. Subsequently, an AOT cache\n+       *       file can be created with the command:\n+       *\n+       *       <p>java -XX:AOTMode=create -XX:AOTConfiguration=app.aotconfig  -XX:AOTCache=app.aot ...\n+       * <blockquote>\n+       *\n+       * <p>For more information about creating and using the AOT artifacts, and detailed\n+       *  specification of the corresponding JVM command-line options, please refer\n+       * to https:\/\/openjdk.org\/jeps\/483 and https:\/\/openjdk.org\/jeps\/514.\n+       *\n+       * <p>Note: Currently there are no APIs to start an AOT recording. AOT recordings must be\n+       * started using JVM command-line options such as -XX:AOTCacheOutput.\n+       *\n+       * <p> There are also no APIs to querying whether the AOT recording is in progress, or what AOT\n+       * artifacts are being recorded. If such information is required by the application, it should be passed\n+       * to the application via system properties or command-line arguments. For example:\n+       *\n+       * <p> java -XX:AOTCacheOutput=app.aot -Dmyapp.cache.output=app.aot -jar myapp.jar MyApp\n+       *\n+       * <blockquote>\n+       *    The application can contain logic like the following. Note that it's possible\n+       *    to access the AOT cache file using regular file I\/O APIs after the endRecording() function\n+       *    has returned {@code true}.\n+       * <pre>\n+       * {@code\n+       * HotSpotAOTCacheMXBean bean = ....;\n+       * String aotCache = System.getProperty(\"myapp.cache.output\");\n+       * if (aotCache != null) {\n+       *     System.out.println(\"JVM is recording into \" + aotCache);\n+       *     performSomeActionsThatNeedsToBeRecorded();\n+       *     if (bean.endRecording()) {\n+       *          System.out.println(\"Recording is successfully finished: \" + aotCache);\n+       *     }\n+       * }<\/pre>\n+       * <\/blockquote>\n+       *\n+       * @return {@code true} if a recording was in progress and has been ended successfully; {@code false} otherwise.\n+       *\/\n+      public boolean endRecording();\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.management\/share\/classes\/jdk\/management\/HotSpotAOTCacheMXBean.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025, Microsoft, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @summary Sanity test for HotSpotAOTCache MXBean\n+ * @requires vm.cds.write.archived.java.heap\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/test-classes\n+ * @build HotSpotAOTCacheMXBeanTest\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar HotSpotAOTCacheMXBeanApp\n+ * @run driver HotSpotAOTCacheMXBeanTest\n+ *\/\n+\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import java.lang.management.ManagementFactory;\n+import jdk.management.HotSpotAOTCacheMXBean;\n+\n+public class HotSpotAOTCacheMXBeanTest {\n+    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    static final String mainClass = \"HotSpotAOTCacheMXBeanApp\";\n+    public static void main(String[] args) throws Exception {\n+        Tester tester = new Tester();\n+        tester.runAOTWorkflow();\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        public Tester() {\n+            super(mainClass);\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return appJar;\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            return new String[] {\n+               \"-Xlog:cds+class=trace\",\n+                \"--add-modules=jdk.management\"\n+            };\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                mainClass, runMode.name()\n+            };\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) {\n+            var name = runMode.name();\n+            if (runMode.isApplicationExecuted()) {\n+                if(runMode == RunMode.TRAINING) {\n+                    out.shouldContain(\"Hello Leyden \" + name);\n+                    out.shouldContain(\"Successfully stopped recording\");\n+                } else if (runMode == RunMode.ASSEMBLY) {\n+                    out.shouldNotContain(\"Hello Leyden \");\n+                } else if (runMode == RunMode.PRODUCTION) {\n+                    out.shouldContain(\"Hello Leyden \" + name);\n+                    out.shouldContain(\"Failed to stop recording\");\n+                }\n+                out.shouldNotContain(\"HotSpotAOTCacheMXBean is not available\");\n+            }\n+        }\n+    }\n+}\n+\n+class HotSpotAOTCacheMXBeanApp {\n+    public static void main(String[] args) {\n+        System.out.println(\"Hello Leyden \" + args[0]);\n+        var aotBean = ManagementFactory.getPlatformMXBean(HotSpotAOTCacheMXBean.class);\n+        if (aotBean == null) {\n+            System.out.println(\"HotSpotAOTCacheMXBean is not available\");\n+            return;\n+        }\n+        if (aotBean.endRecording()) {\n+            System.out.println(\"Successfully stopped recording\");\n+        } else {\n+            System.out.println(\"Failed to stop recording\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/HotSpotAOTCacheMXBeanTest.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}