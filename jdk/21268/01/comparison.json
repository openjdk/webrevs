{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.util.ArraysSupport;\n+\n@@ -308,4 +310,1 @@\n-     * The maximum size of array to allocate.\n-     * Some VMs reserve some header words in an array.\n-     * Attempts to allocate larger arrays may result in\n-     * OutOfMemoryError: Requested array size exceeds VM limit\n+     * The maximum size of array to allocate\n@@ -313,1 +312,1 @@\n-    private static final int MAX_BUFFER_SIZE = Integer.MAX_VALUE - 8;\n+    private static final int MAX_BUFFER_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStream.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -127,4 +128,1 @@\n-     * The maximum size of array to allocate.\n-     * Some VMs reserve some header words in an array.\n-     * Attempts to allocate larger arrays may result in\n-     * OutOfMemoryError: Requested array size exceeds VM limit\n+     * The maximum size of array to allocate\n@@ -132,1 +130,1 @@\n-    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n+    private static final int MAX_ARRAY_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n","filename":"src\/java.base\/share\/classes\/java\/util\/ArrayDeque.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1187,1 +1187,1 @@\n-        final int MAX_INITIAL_CAPACITY = Integer.MAX_VALUE - 8;\n+        final int MAX_INITIAL_CAPACITY = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n","filename":"src\/java.base\/share\/classes\/java\/util\/BitSet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -393,4 +394,1 @@\n-     * The maximum size of array to allocate.\n-     * Some VMs reserve some header words in an array.\n-     * Attempts to allocate larger arrays may result in\n-     * OutOfMemoryError: Requested array size exceeds VM limit\n+     * The maximum size of array to allocate\n@@ -398,1 +396,1 @@\n-    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n+    private static final int MAX_ARRAY_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n","filename":"src\/java.base\/share\/classes\/java\/util\/Hashtable.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -520,1 +521,1 @@\n-    static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n+    static final int MAX_ARRAY_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ConcurrentHashMap.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1505,2 +1505,2 @@\n-        lenHint = (lenHint < Integer.MAX_VALUE - 8 - lenHint) ?\n-                (lenHint << 1) : (Integer.MAX_VALUE - 8);\n+        lenHint = (lenHint < ArraysSupport.SOFT_MAX_ARRAY_LENGTH - lenHint) ?\n+                (lenHint << 1) : ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import jdk.internal.util.ArraysSupport;\n+\n@@ -60,1 +62,1 @@\n-    static final long MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n+    static final long MAX_ARRAY_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Nodes.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-        if (arraySize > (Integer.MAX_VALUE - 8)) { \/\/conservative check\n+        if (arraySize > ArraysSupport.SOFT_MAX_ARRAY_LENGTH) { \/\/conservative check\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -90,2 +91,2 @@\n-    \/\/ The maximum size of array to allocate. Some VMs reserve some header words in an array.\n-    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n+    \/\/ The maximum size of array to allocate\n+    private static final int MAX_ARRAY_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureFileVerifier.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+import jdk.internal.util.ArraysSupport;\n+\n@@ -29,0 +31,1 @@\n+ * @modules java.base\/jdk.internal.util\n@@ -46,1 +49,1 @@\n-            String str = \"Z\".repeat(Integer.MAX_VALUE - 8);\n+            String str = \"Z\".repeat(ArraysSupport.SOFT_MAX_ARRAY_LENGTH);\n","filename":"test\/jdk\/java\/lang\/StringBuffer\/HugeCapacity.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+import jdk.internal.util.ArraysSupport;\n+\n@@ -29,0 +31,1 @@\n+ * @modules java.base\/jdk.internal.util\n@@ -78,1 +81,1 @@\n-            String str = \"Z\".repeat(Integer.MAX_VALUE - 8);\n+            String str = \"Z\".repeat(ArraysSupport.SOFT_MAX_ARRAY_LENGTH);\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/HugeCapacity.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @modules java.base\/jdk.internal.util\n@@ -40,0 +41,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -47,2 +49,2 @@\n-            \/\/ SOFT_MAX_ARRAY_LENGTH: copied from ArraysSupport. No overflow; no OOME.\n-            Arguments.of(Integer.MAX_VALUE - 8),\n+            \/\/ No overflow; no OOME.\n+            Arguments.of(ArraysSupport.SOFT_MAX_ARRAY_LENGTH),\n","filename":"test\/jdk\/java\/nio\/charset\/CharsetDecoder\/XcodeOverflow.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -40,0 +41,1 @@\n+ * @modules java.base\/jdk.internal.util\n@@ -48,1 +50,1 @@\n-    private static final int LARGE_MEM_SIZE = Integer.MAX_VALUE - 8;\n+    private static final int LARGE_MEM_SIZE = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n","filename":"test\/jdk\/java\/util\/Base64\/TestEncodingDecodingLength.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -89,1 +90,1 @@\n-        final int maxArraySize = Integer.MAX_VALUE - 8;\n+        final int maxArraySize = ArraysSupport.SOFT_MAX_ARRAY_LENGTH;\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ArrayDeque8Test.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * @modules java.management\n+ * @modules java.management java.base\/jdk.internal.util\n@@ -50,1 +50,1 @@\n- * @modules java.management\n+ * @modules java.management java.base\/jdk.internal.util\n@@ -59,1 +59,1 @@\n- * @modules java.management\n+ * @modules java.management java.base\/jdk.internal.util\n@@ -81,1 +81,1 @@\n- * @modules java.management\n+ * @modules java.management java.base\/jdk.internal.util\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/JSR166TestCase.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}