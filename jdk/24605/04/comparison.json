{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n- * @LastModified: May 2022\n+ * @LastModified: Apr 2025\n@@ -189,6 +189,0 @@\n-    if (xctxt.isSecureProcessing())\n-      throw new javax.xml.transform.TransformerException(\n-        XPATHMessages.createXPATHMessage(\n-          XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,\n-          new Object[] {toString()}));\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/functions\/FuncExtFunction.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n- * @LastModified: Nov 2017\n+ * @LastModified: Apr 2025\n@@ -45,1 +45,0 @@\n-    private boolean extensionInvocationDisabled = false;\n@@ -49,1 +48,0 @@\n-        this.extensionInvocationDisabled = false;\n@@ -52,8 +50,0 @@\n-    public JAXPExtensionsProvider(XPathFunctionResolver resolver,\n-        boolean featureSecureProcessing, JdkXmlFeatures featureManager ) {\n-        this.resolver = resolver;\n-        if (featureSecureProcessing &&\n-                !featureManager.getFeature(JdkXmlFeatures.XmlFeature.ENABLE_EXTENSION_FUNCTION)) {\n-            this.extensionInvocationDisabled = true;\n-        }\n-    }\n@@ -114,10 +104,0 @@\n-            \/\/ JAXP 1.3 spec says When XMLConstants.FEATURE_SECURE_PROCESSING\n-            \/\/ feature is set then invocation of extension functions need to\n-            \/\/ throw XPathFunctionException\n-            if ( extensionInvocationDisabled ) {\n-                String fmsg = XSLMessages.createXPATHMessage(\n-                    XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,\n-                    new Object[] { myQName.toString() } );\n-                throw new XPathFunctionException ( fmsg );\n-            }\n-\n@@ -170,10 +150,0 @@\n-            \/\/ JAXP 1.3 spec says  When XMLConstants.FEATURE_SECURE_PROCESSING\n-            \/\/ feature is set then invocation of extension functions need to\n-            \/\/ throw XPathFunctionException\n-            if ( extensionInvocationDisabled ) {\n-                String fmsg = XSLMessages.createXPATHMessage(\n-                    XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,\n-                        new Object[] { myQName.toString() } );\n-                throw new XPathFunctionException ( fmsg );\n-            }\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/jaxp\/JAXPExtensionsProvider.java","additions":2,"deletions":32,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n- * @LastModified: Jan 2022\n+ * @LastModified: Apr 2025\n@@ -88,2 +88,1 @@\n-            JAXPExtensionsProvider jep = new JAXPExtensionsProvider(\n-                    functionResolver, featureSecureProcessing, featureManager);\n+            JAXPExtensionsProvider jep = new JAXPExtensionsProvider(functionResolver);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/jaxp\/XPathImplUtil.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @LastModified: Nov 2024\n+ * @LastModified: Apr 2025\n@@ -308,1 +308,0 @@\n-  public static final String ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED = \"ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED\";\n@@ -769,5 +768,0 @@\n-  \/** Field ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED                       *\/\n-\n-  { ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,\n-       \"Extension function: ''{0}'' can not be invoked when the XMLConstants.FEATURE_SECURE_PROCESSING feature is set to true.\"},\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/res\/XPATHErrorResources.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -871,1 +871,2 @@\n- * <td>Determines if XSLT and XPath extension functions are to be allowed.\n+ * <td>Determines whether extension functions in the Transform API are to be allowed.\n+ * The extension functions in the XPath API are not affected by this property.\n@@ -878,1 +879,1 @@\n- * <td style=\"text-align:center\">true<\/td>\n+ * <td style=\"text-align:center\">false<\/td>\n@@ -883,1 +884,0 @@\n- *     <a href=\"#XPATH\">XPath<\/a>\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,195 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package xpath;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import javax.xml.XMLConstants;\n-import javax.xml.namespace.NamespaceContext;\n-import javax.xml.namespace.QName;\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n-import javax.xml.xpath.XPathFactoryConfigurationException;\n-import javax.xml.xpath.XPathFunction;\n-import javax.xml.xpath.XPathFunctionException;\n-import javax.xml.xpath.XPathFunctionResolver;\n-\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-import org.w3c.dom.Document;\n-import org.xml.sax.SAXException;\n-\n-\/*\n- * @test\n- * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n- * @run testng\/othervm xpath.SecureProcessingTest\n- * @summary Test when FEATURE_SECURE_PROCESSING is true, calling an external function will cause XPathFunctionException.\n- *\/\n-@Test\n-public class SecureProcessingTest {\n-    public final void testSecureProcessing() {\n-        boolean _isSecureMode = System.getSecurityManager() != null;\n-\n-        final String XPATH_EXPRESSION = \"ext:helloWorld()\";\n-\n-        \/\/ the xml source\n-        InputStream xmlStream = this.getClass().getResourceAsStream(\"SecureProcessingTest.xml\");\n-\n-        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n-        DocumentBuilder documentBuilder = null;\n-        Document document = null;\n-\n-        try {\n-            documentBuilder = documentBuilderFactory.newDocumentBuilder();\n-            document = documentBuilder.parse(xmlStream);\n-        } catch (ParserConfigurationException parserConfigurationException) {\n-            parserConfigurationException.printStackTrace();\n-            Assert.fail(parserConfigurationException.toString());\n-        } catch (SAXException saxException) {\n-            saxException.printStackTrace();\n-            Assert.fail(saxException.toString());\n-        } catch (IOException ioException) {\n-            ioException.printStackTrace();\n-            Assert.fail(ioException.toString());\n-        }\n-\n-        \/\/ the XPath\n-        XPathFactory xPathFactory = null;\n-        XPath xPath = null;\n-        String xPathResult = null;\n-\n-        \/\/ SECURE_PROCESSING == false\n-        \/\/ evaluate an expression with a user defined function with a non-secure\n-        \/\/ XPath\n-        \/\/ expect success\n-        if (!_isSecureMode) { \/\/ jaxp secure feature can not be turned off when\n-                              \/\/ security manager is present\n-            try {\n-                xPathFactory = xPathFactory.newInstance();\n-                xPathFactory.setXPathFunctionResolver(new MyXPathFunctionResolver());\n-                xPathFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, false);\n-\n-                xPath = xPathFactory.newXPath();\n-                xPath.setNamespaceContext(new MyNamespaceContext());\n-\n-                xPathResult = xPath.evaluate(XPATH_EXPRESSION, document);\n-            } catch (XPathFactoryConfigurationException xPathFactoryConfigurationException) {\n-                xPathFactoryConfigurationException.printStackTrace();\n-                Assert.fail(xPathFactoryConfigurationException.toString());\n-            } catch (XPathExpressionException xPathExpressionException) {\n-                xPathExpressionException.printStackTrace();\n-                Assert.fail(xPathExpressionException.toString());\n-            }\n-\n-            \/\/ expected success\n-            System.out.println(\"XPath result (SECURE_PROCESSING == false) = \\\"\" + xPathResult + \"\\\"\");\n-        }\n-        \/\/ now try with SECURE_PROCESSING == true\n-        \/\/ evaluate an expression with a user defined function with a secure\n-        \/\/ XPath\n-        \/\/ expect Exception\n-        boolean securityException = false;\n-        try {\n-            xPathFactory = xPathFactory.newInstance();\n-            xPathFactory.setXPathFunctionResolver(new MyXPathFunctionResolver());\n-            xPathFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-\n-            xPath = xPathFactory.newXPath();\n-            xPath.setNamespaceContext(new MyNamespaceContext());\n-\n-            xPathResult = xPath.evaluate(XPATH_EXPRESSION, document);\n-        } catch (XPathFactoryConfigurationException xPathFactoryConfigurationException) {\n-            xPathFactoryConfigurationException.printStackTrace();\n-            Assert.fail(xPathFactoryConfigurationException.toString());\n-        } catch (XPathFunctionException xPathFunctionException) {\n-            \/\/ expected security exception\n-            securityException = true;\n-            xPathFunctionException.printStackTrace(System.out);\n-        } catch (XPathExpressionException xPathExpressionException) {\n-            xPathExpressionException.printStackTrace();\n-            Assert.fail(xPathExpressionException.toString());\n-        }\n-\n-        \/\/ expected Exception\n-        if (!securityException) {\n-            Assert.fail(\"XPath result (SECURE_PROCESSING == true) = \\\"\" + xPathResult + \"\\\"\");\n-        }\n-    }\n-\n-    private class MyXPathFunctionResolver implements XPathFunctionResolver {\n-\n-        public XPathFunction resolveFunction(QName functionName, int arity) {\n-\n-            \/\/ not a real ewsolver, always return a default XPathFunction\n-            return new MyXPathFunction();\n-        }\n-    }\n-\n-    private class MyXPathFunction implements XPathFunction {\n-\n-        public Object evaluate(List list) throws XPathFunctionException {\n-\n-            return \"Hello World\";\n-        }\n-    }\n-\n-    private class MyNamespaceContext implements NamespaceContext {\n-\n-        public String getNamespaceURI(String prefix) {\n-            if (prefix == null) {\n-                throw new IllegalArgumentException(\"The prefix cannot be null.\");\n-            }\n-\n-            if (prefix.equals(\"ext\")) {\n-                return \"http:\/\/ext.com\";\n-            } else {\n-                return null;\n-            }\n-        }\n-\n-        public String getPrefix(String namespace) {\n-\n-            if (namespace == null) {\n-                throw new IllegalArgumentException(\"The namespace uri cannot be null.\");\n-            }\n-\n-            if (namespace.equals(\"http:\/\/ext.com\")) {\n-                return \"ext\";\n-            } else {\n-                return null;\n-            }\n-        }\n-\n-        public Iterator getPrefixes(String namespace) {\n-            return null;\n-        }\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/SecureProcessingTest.java","additions":0,"deletions":195,"binary":false,"changes":195,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<helloWorld\/>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/SecureProcessingTest.xml","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -0,0 +1,198 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+import javax.xml.XMLConstants;\n+import javax.xml.namespace.QName;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.*;\n+import jaxp.library.JUnitTestUtil;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+\/*\n+ * @test\n+ * @bug 8354084\n+ * @summary Verifies that extensions to XPathFunction.\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest \/test\/lib\n+ * @run junit xpath.XPathFunctionTest\n+ *\/\n+public class XPathFunctionTest {\n+    \/*\n+     * Arguments for XPath Extension Function Test, refer to the test below.\n+     *\/\n+    private static Stream<Arguments> testData() {\n+        \/\/ expected result when a resolver is set properly\n+        String result = \"id=2 price=20\";\n+        return Stream.of(\n+                \/\/ cases where the result is as expected when a resolver is set\n+                Arguments.of(true, false, false, false, false, result, null),\n+                Arguments.of(true, true, false, false, false, result, null),\n+                Arguments.of(true, true, false, true, false, result, null),\n+                Arguments.of(true, true, false, true, true, result, null),\n+                Arguments.of(true, true, true, true, true, result, null),\n+                \/\/ cases XPathExpressionException was thrown before the change even though there's a resolver\n+                Arguments.of(true, true, true, false, false, result, null),\n+                Arguments.of(true, true, true, true, false, result, null),\n+                \/\/ XPathExpressionException will continue to be thrown due to missing resolver, though it was\n+                \/\/ thrown for a different reason (FSP is turned on) before the change\n+                Arguments.of(false, false, false, false, false, result, XPathExpressionException.class),\n+                Arguments.of(false, true, true, false, false, result, XPathExpressionException.class),\n+                Arguments.of(false, true, true, true, false, result, XPathExpressionException.class)\n+        );\n+    }\n+\n+    \/**\n+     * Verifies the control over XPath Extension Functions.\n+     * @param useResolver indicates whether there is a custom resolver\n+     * @param setFSP indicates whether FSP is to be set\n+     * @param FSPValue the FSP value\n+     * @param setProperty indicates whether the property {@code jdk.xml.enableExtensionFunctions}\n+     *                   is to be set\n+     * @param propertyValue the property value\n+     * @param expected the expected result\n+     * @param expectedType the expected throw type\n+     * @throws Exception if the test fails other than the expected Exception, which\n+     * would indicate an issue in configuring the test\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n+    public void test(boolean useResolver, boolean setFSP, boolean FSPValue,\n+            boolean setProperty, boolean propertyValue, String expected, Class<Throwable> expectedType) throws Exception {\n+        if (expectedType != null) {\n+            assertThrows(expectedType, () -> findToy(useResolver, setFSP, FSPValue, setProperty, propertyValue, expectedType));\n+        } else {\n+            String result = findToy(useResolver, setFSP, FSPValue, setProperty, propertyValue, expectedType);\n+            assertEquals(expected, result);\n+        }\n+    }\n+\n+    public String findToy(boolean useResolver, boolean setFSP, boolean FSPValue,\n+            boolean setProperty, boolean propertyValue, Class<Throwable> expectedType)\n+            throws Exception {\n+\n+            Document doc = getDocument(JUnitTestUtil.SRC_DIR + \"\/XPathFunctionTest.xml\");\n+            XPathFactory xpf = XPathFactory.newDefaultInstance();\n+            if (useResolver) {\n+                xpf.setXPathFunctionResolver(new FunctionResolver(doc));\n+            }\n+            if (setFSP) {\n+                xpf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, FSPValue);\n+            }\n+            if (setProperty) {\n+                xpf.setFeature(\"jdk.xml.enableExtensionFunctions\", propertyValue);\n+            }\n+\n+            XPath xPath = xpf.newXPath();\n+            XPathExpression exp = xPath.compile(\"ext:findToy('name', 'Another toy')\");\n+            Node toyNode = (Node)exp.evaluate(doc, XPathConstants.NODE);\n+            String id = \"\", price = \"\";\n+            if (toyNode != null && toyNode.getNodeType() == Node.ELEMENT_NODE) {\n+                Element toyElement = (Element)toyNode;\n+                id = toyElement.getAttribute(\"id\");\n+                price = toyElement.getElementsByTagName(\"price\").item(0).getTextContent();\n+\n+            }\n+            return \"id=\" + id + \" price=\" + price;\n+\n+    }\n+\n+    \/**\n+     * Returns a DOM Document.\n+     * @param xmlFile the XML document to be parsed\n+     * @return a DOM Document\n+     * @throws Exception if error occurs\n+     *\/\n+    Document getDocument(String xmlFile)\n+            throws Exception {\n+        try {\n+            DocumentBuilder builder = DocumentBuilderFactory.newDefaultInstance().newDocumentBuilder();\n+            Document out = builder.parse(xmlFile);\n+            return out;\n+        } catch (Exception e) {\n+            \/\/ won't happen, parsing a valid file\n+        }\n+        return null;\n+    }\n+\n+    \/\/ XPathFunctionResolver customized for the FindFunction\n+    class FunctionResolver implements XPathFunctionResolver {\n+        private final Document doc;\n+\n+        public FunctionResolver(Document doc) {\n+            this.doc = doc;\n+        }\n+\n+        @Override\n+        public XPathFunction resolveFunction(QName functionName, int arity) {\n+            if (\"findToy\".equals(functionName.getLocalPart()) && arity == 2) {\n+                return new FindFunction(doc);\n+            }\n+\n+            return null;\n+        }\n+    }\n+\n+    \/\/ The Find function\n+    class FindFunction implements XPathFunction {\n+        private final Document doc;\n+\n+        public FindFunction(Document doc) {\n+            this.doc = doc;\n+        }\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        public Object evaluate(List list) throws XPathFunctionException {\n+            if (list == null || list.size() != 2) {\n+                throw new XPathFunctionException(\"FindToy requires two args: name and value\");\n+            }\n+\n+            String eleName = (String)list.get(0);\n+            String eleValue = (String)list.get(1);\n+            NodeList toys = doc.getElementsByTagName(\"toy\");\n+\n+            for (int i = 0; i<toys.getLength(); i++) {\n+                Element toy = (Element)toys.item(i);\n+                NodeList children = toy.getElementsByTagName(eleName);\n+\n+                if (children.getLength() > 0) {\n+                    String text = children.item(0).getTextContent();\n+                    if (eleValue.equals(text)) {\n+                        return toy;\n+                    }\n+                }\n+            }\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathFunctionTest.java","additions":198,"deletions":0,"binary":false,"changes":198,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<toys>\n+    <toy id=\"1\">\n+        <name>Some toy<\/name>\n+        <price>10<\/price>\n+    <\/toy>\n+    <toy id=\"2\">\n+        <name>Another toy<\/name>\n+        <price>20<\/price>\n+    <\/toy>\n+<\/toys>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathFunctionTest.xml","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"}]}