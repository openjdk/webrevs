{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,1 +106,1 @@\n-        ++ bootcp;\n+        ++bootcp;\n@@ -733,1 +733,1 @@\n-    if (use_lcp_match) {\n+    if (use_lcp_match && _dumptime_lcp_len > 0) {\n@@ -739,1 +739,1 @@\n-    if (!cs->from_cpattr()) {\n+    if (!cs->from_cpattr() && file_exists(effective_dumptime_path)) {\n@@ -745,0 +745,3 @@\n+      while (!file_exists(runtime_path) && runtime_css.has_next()) {\n+        runtime_path = runtime_css.get_next();\n+      }\n@@ -770,1 +773,1 @@\n-bool AOTCodeSourceConfig::check_paths_existence(CodeSourceStream& runtime_css) const {\n+bool AOTCodeSourceConfig::file_exists(const char* filename) const{\n@@ -772,0 +775,4 @@\n+  return (os::stat(filename, &st) == 0 && st.st_size > 0);\n+}\n+\n+bool AOTCodeSourceConfig::check_paths_existence(CodeSourceStream& runtime_css) const {\n@@ -775,1 +782,1 @@\n-    if (os::stat(path, &st) == 0 && st.st_size > 0) {\n+    if (file_exists(path)) {\n","filename":"src\/hotspot\/share\/cds\/aotCodeSource.cpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,2 +124,2 @@\n-\/\/ Non-existent entries are recorded during AOTCache creation. Those non-existent entries\n-\/\/ must not exist during runtime.\n+\/\/ Non-existent entries are recorded during AOTCache creation. Those non-existent entries,\n+\/\/ if they are specified at runtime, must not exist.\n@@ -128,1 +128,1 @@\n-\/\/ - the boot classpath could be appended during runtime if there's no app classpath and\n+\/\/ - the boot classpath can be appended to at runtime if there's no app classpath and no\n@@ -130,2 +130,2 @@\n-\/\/ - the app classpath could be appended during runtime;\n-\/\/ - the module path during runtime could be a superset of the one specified during AOTCache creation.\n+\/\/ - the app classpath can be appended to at runtime;\n+\/\/ - the module path at runtime can be a superset of the one specified during AOTCache creation.\n@@ -165,0 +165,1 @@\n+  bool file_exists(const char* filename) const;\n","filename":"src\/hotspot\/share\/cds\/aotCodeSource.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"cds\/aotCodeSource.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-    \/* Arcchive contains Hello class with only hello.jar in bootclasspath at dump time.\n+    \/* Archive contains Hello class with only hello.jar in bootclasspath at dump time.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/BootClassPathMismatch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,0 +70,24 @@\n+        \/\/ Replace nonExistPath with another non-existent file in the CP, it should still work\n+        TestCommon.run(make_args(bootcp,\n+                                 nonExistPath + \".duh\"  + File.pathSeparator + appJar,\n+                                 \"-Xlog:class+path=trace\",\n+                                 \"Hello\"))\n+            .assertNormalExit();\n+\n+        \/\/ Add a few more non-existent files in the CP, it should still work\n+        TestCommon.run(make_args(bootcp,\n+                                 nonExistPath + \".duh\"  + File.pathSeparator +\n+                                 nonExistPath + \".daa\"  + File.pathSeparator +\n+                                 nonExistPath + \".boo\"  + File.pathSeparator +\n+                                 appJar,\n+                                 \"-Xlog:class+path=trace\",\n+                                 \"Hello\"))\n+            .assertNormalExit();\n+\n+        \/\/ Or, remove all non-existent paths from the CP, it should still work\n+        TestCommon.run(make_args(bootcp,\n+                                 appJar,\n+                                 \"-Xlog:class+path=trace\",\n+                                 \"Hello\"))\n+            .assertNormalExit();\n+\n@@ -140,1 +164,9 @@\n-        \/\/ Run with a different boot class path, test should fail.\n+        \/\/ Run with non-existent boot class path, test should pass.\n+        TestCommon.run(make_args(true,\n+                                 nonExistPath,\n+                                 \"-cp\", appJar,\n+                                 \"-Xlog:class+path=trace\",\n+                                 \"Hello\"))\n+            .assertNormalExit();\n+\n+        \/\/ Run with existent boot class path, test should fail.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/NonExistClasspath.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-      .ifNoMappingFailure(output -> check(output, 1, true, firstCheckShortMsg));\n+      .ifNoMappingFailure(output -> check(output, 0, true, firstCheckShortMsg));\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/PrintSharedArchiveAndExit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}