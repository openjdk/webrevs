{"files":[{"patch":"@@ -133,1 +133,6 @@\n-\/\/ are available to the application from -Xbootclasspath, -classpath and --module-path\n+\/\/ are available to the application from -Xbootclasspath, -classpath and --module-path.\n+\/\/ When creating an AOT cache, we store the contents from AllCodeSourceStreams\n+\/\/ into an array of AOTCodeSources. See AOTCodeSourceConfig::dumptime_init_helper().\n+\/\/ When loading the AOT cache in a production run, we compare the contents of the\n+\/\/ stored AOTCodeSources against the current AllCodeSourceStreams to determine whether\n+\/\/ the AOT cache is compatible with the current JVM. See AOTCodeSourceConfig::validate().\n@@ -610,1 +615,1 @@\n-        for (int i = boot_start(); i < tmp_array.length(); i++) {\n+        for (int i = boot_cp_start_index(); i < tmp_array.length(); i++) {\n@@ -648,1 +653,1 @@\n-  for (int i = module_start(); i < module_end(); i++) {\n+  for (int i = module_path_start_index(); i < module_path_end_index(); i++) {\n@@ -699,10 +704,0 @@\n-size_t AOTCodeSourceConfig::estimate_size_for_archive_helper() const {\n-  size_t size = ObjArrayKlass::header_size() * BytesPerWord;\n-  for (int i = 0; i < _code_sources->length(); i++) {\n-    size += _code_sources->at(i)->total_size();\n-  }\n-\n-  size = (size + 100) * 2;   \/\/ sanity\n-  return size;\n-}\n-\n@@ -762,0 +757,2 @@\n+  \/\/ Check if the runtime boot classpath has more entries than the one stored in the archive and if the app classpath\n+  \/\/ or the module path requires validation.\n@@ -763,0 +760,1 @@\n+    \/\/ the check passes if all the extra runtime boot classpath entries are non-existent\n@@ -775,1 +773,0 @@\n-  runtime_css.start();\n@@ -894,2 +891,3 @@\n-  if (!need_lcp_match_helper(boot_start(), boot_end(), all_css.boot_cp()) ||\n-      !need_lcp_match_helper(app_start(), app_end(), all_css.app_cp())) {\n+  if (app_cp_end_index() == boot_cp_start_index()) {\n+    \/\/ No need to use lcp-match when there are no boot\/app paths.\n+    \/\/ TODO: LCP-match not yet supported for modules.\n@@ -897,2 +895,0 @@\n-  } else {\n-    return true;\n@@ -900,1 +896,0 @@\n-}\n@@ -902,4 +897,4 @@\n-bool AOTCodeSourceConfig::need_lcp_match_helper(int start, int end, CodeSourceStream& css) const {\n-  if (app_end() == boot_start()) {\n-    \/\/ No need to use lcp-match when there are no boot\/app paths.\n-    \/\/ TODO: LCP-match not yet supported for modules.\n+  if (need_lcp_match_helper(boot_cp_start_index(), boot_cp_end_index(), all_css.boot_cp()) &&\n+      need_lcp_match_helper(app_cp_start_index(), app_cp_end_index(), all_css.app_cp())) {\n+    return true;\n+  } else {\n@@ -908,0 +903,1 @@\n+}\n@@ -909,0 +905,1 @@\n+bool AOTCodeSourceConfig::need_lcp_match_helper(int start, int end, CodeSourceStream& css) const {\n@@ -932,1 +929,1 @@\n-    if ((module_start() >= module_end()) && Arguments::get_property(\"jdk.module.path\") != nullptr) {\n+    if ((module_path_start_index() >= module_path_end_index()) && Arguments::get_property(\"jdk.module.path\") != nullptr) {\n@@ -952,1 +949,1 @@\n-    success = check_classpaths(true, has_aot_linked_classes, boot_start(), boot_end(), all_css.boot_cp(),\n+    success = check_classpaths(true, has_aot_linked_classes, boot_cp_start_index(), boot_cp_end_index(), all_css.boot_cp(),\n@@ -957,1 +954,1 @@\n-      success = check_classpaths(false, has_aot_linked_classes, app_start(), app_end(), all_css.app_cp(),\n+      success = check_classpaths(false, has_aot_linked_classes, app_cp_start_index(), app_cp_end_index(), all_css.app_cp(),\n@@ -963,1 +960,2 @@\n-      success = check_module_paths(has_aot_linked_classes, module_start(), module_end(), all_css.module_path(), has_extra_module_paths);\n+      success = check_module_paths(has_aot_linked_classes, module_path_start_index(), module_path_end_index(),\n+                                   all_css.module_path(), has_extra_module_paths);\n","filename":"src\/hotspot\/share\/cds\/aotCodeSource.cpp","additions":25,"deletions":27,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-\/\/ AOTCodeSources (subject to checks in AOTCodeSourceConfig::validate(bool&).\n+\/\/ AOTCodeSources (subjected to AOTCodeSourceConfig::validate()).\n@@ -122,3 +122,3 @@\n-\/\/ In general, validation is performed on AOTCodeSources to ensure the code sources used\n-\/\/ during AOTCache creation is the same as when the AOTCache is used during runtime.\n-\/\/ Non-existent entries are recored during AOTCache creation. Those non-existent entries\n+\/\/ In general, validation is performed on the AOTCodeSources to ensure the code sources used\n+\/\/ during AOTCache creation are the same as when the AOTCache is used during runtime.\n+\/\/ Non-existent entries are recorded during AOTCache creation. Those non-existent entries\n@@ -194,1 +194,1 @@\n-    return (num_app_classpaths() > 0) && (_max_used_index >= app_start()) && has_platform_or_app_classes();\n+    return (num_app_classpaths() > 0) && (_max_used_index >= app_cp_start_index()) && has_platform_or_app_classes();\n@@ -196,1 +196,0 @@\n-  size_t estimate_size_for_archive_helper() const;\n@@ -213,11 +212,11 @@\n-  int boot_start()                       const { return 1; }\n-  int boot_end()                         const { return _boot_classpath_end; }\n-  int app_start()                        const { return boot_end(); }\n-  int app_end()                          const { return _app_classpath_end; }\n-  int module_start()                     const { return app_end(); }\n-  int module_end()                       const { return _module_end; }\n-  bool has_platform_or_app_classes()     const { return _has_app_classes || _has_platform_classes; }\n-  bool has_non_jar_modules()             const { return _has_non_jar_modules; }\n-  int num_boot_classpaths()              const { return boot_end()   - boot_start();   }\n-  int num_app_classpaths()               const { return app_end()    - app_start();    }\n-  int num_module_paths()                 const { return module_end() - module_start(); }\n+  int boot_cp_start_index()          const { return 1; }\n+  int boot_cp_end_index()            const { return _boot_classpath_end; }\n+  int app_cp_start_index()           const { return boot_cp_end_index(); }\n+  int app_cp_end_index()             const { return _app_classpath_end; }\n+  int module_path_start_index()      const { return app_cp_end_index(); }\n+  int module_path_end_index()        const { return _module_end; }\n+  bool has_platform_or_app_classes() const { return _has_app_classes || _has_platform_classes; }\n+  bool has_non_jar_modules()         const { return _has_non_jar_modules; }\n+  int num_boot_classpaths()          const { return boot_cp_end_index() - boot_cp_start_index(); }\n+  int num_app_classpaths()           const { return app_cp_end_index() - app_cp_start_index(); }\n+  int num_module_paths()             const { return module_path_end_index() - module_path_start_index(); }\n@@ -234,3 +233,1 @@\n-  static size_t estimate_size_for_archive() {\n-    return _dumptime_instance->estimate_size_for_archive_helper();\n-  }\n+\n","filename":"src\/hotspot\/share\/cds\/aotCodeSource.hpp","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-    int index_offset = index - AOTCodeSourceConfig::runtime()->app_start();\n+    int index_offset = index - AOTCodeSourceConfig::runtime()->app_cp_start_index();\n","filename":"src\/hotspot\/share\/cds\/cdsProtectionDomain.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -318,1 +318,1 @@\n-    log_info(cds)(\"optimized module handling: disabled because of extra module path(s) are specified\");\n+    log_info(cds)(\"optimized module handling: disabled because extra module path(s) are specified\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1300,1 +1300,1 @@\n-      ik->set_shared_classpath_index(AOTCodeSourceConfig::dumptime()->app_start());\n+      ik->set_shared_classpath_index(AOTCodeSourceConfig::dumptime()->app_cp_start_index());\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}