{"files":[{"patch":"@@ -1150,7 +1150,0 @@\n-#define JNI_ONLOAD_SYMBOLS   {\"JNI_OnLoad\"}\n-#define JNI_ONUNLOAD_SYMBOLS {\"JNI_OnUnload\"}\n-#define JVM_ONLOAD_SYMBOLS      {\"JVM_OnLoad\"}\n-#define AGENT_ONLOAD_SYMBOLS    {\"Agent_OnLoad\"}\n-#define AGENT_ONUNLOAD_SYMBOLS  {\"Agent_OnUnload\"}\n-#define AGENT_ONATTACH_SYMBOLS  {\"Agent_OnAttach\"}\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"jvm.h\"\n@@ -271,1 +270,1 @@\n-static bool load_agent_from_executable(JvmtiAgent* agent, const char* on_load_symbols[], size_t num_symbol_entries) {\n+static bool load_agent_from_executable(JvmtiAgent* agent, const char* on_load_symbol) {\n@@ -273,2 +272,2 @@\n-  assert(on_load_symbols != nullptr, \"invariant\");\n-  return os::find_builtin_agent(agent, &on_load_symbols[0], num_symbol_entries);\n+  assert(on_load_symbol != nullptr, \"invariant\");\n+  return os::find_builtin_agent(agent, on_load_symbol);\n@@ -313,1 +312,1 @@\n-static void* load_library(JvmtiAgent* agent, const char* on_symbols[], size_t num_symbol_entries, bool vm_exit_on_error) {\n+static void* load_library(JvmtiAgent* agent, bool vm_exit_on_error) {\n@@ -324,2 +323,1 @@\n-\/\/ num_symbol_entries must be passed-in since only the caller knows the number of symbols in the array.\n-static OnLoadEntry_t lookup_On_Load_entry_point(JvmtiAgent* agent, const char* on_load_symbols[], size_t num_symbol_entries) {\n+static OnLoadEntry_t lookup_On_Load_entry_point(JvmtiAgent* agent, const char* on_load_symbol) {\n@@ -328,2 +326,2 @@\n-    if (!load_agent_from_executable(agent, on_load_symbols, num_symbol_entries)) {\n-      void* const library = load_library(agent, on_load_symbols, num_symbol_entries, \/* vm exit on error *\/ true);\n+    if (!load_agent_from_executable(agent, on_load_symbol)) {\n+      void* const library = load_library(agent, \/* vm exit on error *\/ true);\n@@ -337,1 +335,1 @@\n-  return CAST_TO_FN_PTR(OnLoadEntry_t, os::find_agent_function(agent, false, on_load_symbols, num_symbol_entries));\n+  return CAST_TO_FN_PTR(OnLoadEntry_t, os::find_agent_function(agent, false, on_load_symbol));\n@@ -341,2 +339,1 @@\n-  const char* on_load_symbols[] = JVM_ONLOAD_SYMBOLS;\n-  return lookup_On_Load_entry_point(lib, on_load_symbols, sizeof(on_load_symbols) \/ sizeof(char*));\n+  return lookup_On_Load_entry_point(lib, \"JVM_OnLoad\");\n@@ -346,2 +343,1 @@\n-  const char* on_load_symbols[] = AGENT_ONLOAD_SYMBOLS;\n-  return lookup_On_Load_entry_point(agent, on_load_symbols, sizeof(on_load_symbols) \/ sizeof(char*));\n+  return lookup_On_Load_entry_point(agent, \"Agent_OnLoad\");\n@@ -502,2 +498,1 @@\n-  const char* on_attach_symbols[] = AGENT_ONATTACH_SYMBOLS;\n-  const size_t num_symbol_entries = ARRAY_SIZE(on_attach_symbols);\n+  const char* on_attach_symbol = \"Agent_OnAttach\";\n@@ -506,1 +501,1 @@\n-  if (load_agent_from_executable(agent, &on_attach_symbols[0], num_symbol_entries)) {\n+  if (load_agent_from_executable(agent, on_attach_symbol)) {\n@@ -509,1 +504,1 @@\n-    library = load_library(agent, &on_attach_symbols[0], num_symbol_entries, \/* vm_exit_on_error *\/ false);\n+    library = load_library(agent, \/* vm_exit_on_error *\/ false);\n@@ -534,1 +529,1 @@\n-                                                   os::find_agent_function(agent, false, &on_attach_symbols[0], num_symbol_entries));\n+                                                   os::find_agent_function(agent, false, on_attach_symbol));\n@@ -537,1 +532,1 @@\n-    st->print_cr(\"%s is not available in %s\", on_attach_symbols[0], agent->name());\n+    st->print_cr(\"%s is not available in %s\", on_attach_symbol, agent->name());\n@@ -632,1 +627,1 @@\n-  const char* on_unload_symbols[] = AGENT_ONUNLOAD_SYMBOLS;\n+  const char* on_unload_symbol = \"Agent_OnUnload\";\n@@ -635,1 +630,1 @@\n-                                                 os::find_agent_function(this, false, &on_unload_symbols[0], ARRAY_SIZE(on_unload_symbols)));\n+                                                 os::find_agent_function(this, false, on_unload_symbol));\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgent.cpp","additions":17,"deletions":22,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -549,2 +549,1 @@\n-void* os::find_agent_function(JvmtiAgent *agent_lib, bool check_lib,\n-                              const char *syms[], size_t syms_len) {\n+void* os::find_agent_function(JvmtiAgent *agent_lib, bool check_lib, const char *sym) {\n@@ -552,1 +551,0 @@\n-  const char *lib_name;\n@@ -555,2 +553,0 @@\n-  char *agent_function_name;\n-  size_t i;\n@@ -560,6 +556,4 @@\n-  lib_name = ((check_lib || agent_lib->is_static_lib()) ? agent_lib->name() : nullptr);\n-  for (i = 0; i < syms_len; i++) {\n-    agent_function_name = build_agent_function_name(syms[i], lib_name, agent_lib->is_absolute_path());\n-    if (agent_function_name == nullptr) {\n-      break;\n-    }\n+  const char *lib_name = ((check_lib || agent_lib->is_static_lib()) ? agent_lib->name() : nullptr);\n+\n+  char* agent_function_name = build_agent_function_name(sym, lib_name, agent_lib->is_absolute_path());\n+  if (agent_function_name != nullptr) {\n@@ -568,3 +562,0 @@\n-    if (entryName != nullptr) {\n-      break;\n-    }\n@@ -576,6 +567,1 @@\n-bool os::find_builtin_agent(JvmtiAgent* agent, const char *syms[],\n-                            size_t syms_len) {\n-  void *ret;\n-  void *proc_handle;\n-  void *save_handle;\n-\n+bool os::find_builtin_agent(JvmtiAgent* agent, const char* sym) {\n@@ -586,1 +572,1 @@\n-  proc_handle = get_default_process_handle();\n+  void* proc_handle = get_default_process_handle();\n@@ -588,1 +574,1 @@\n-  save_handle = agent->os_lib();\n+  void* save_handle = agent->os_lib();\n@@ -591,1 +577,1 @@\n-  ret = find_agent_function(agent, true, syms, syms_len);\n+  void* ret = find_agent_function(agent, true, sym);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -776,2 +776,1 @@\n-  static bool find_builtin_agent(JvmtiAgent *agent_lib, const char *syms[],\n-                                 size_t syms_len);\n+  static bool find_builtin_agent(JvmtiAgent* agent_lib, const char* sym);\n@@ -780,2 +779,1 @@\n-  static void *find_agent_function(JvmtiAgent *agent_lib, bool check_lib,\n-                                   const char *syms[], size_t syms_len);\n+  static void* find_agent_function(JvmtiAgent* agent_lib, bool check_lib, const char* sym);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,4 +67,1 @@\n-    const char *onLoadSymbols[] = JNI_ONLOAD_SYMBOLS;\n-    const char *onUnloadSymbols[] = JNI_ONUNLOAD_SYMBOLS;\n-    const char **syms;\n-    int symsLen;\n+    const char *sym;\n@@ -73,1 +70,0 @@\n-    int i;\n@@ -77,6 +73,11 @@\n-    if (isLoad) {\n-        syms = onLoadSymbols;\n-        symsLen = sizeof(onLoadSymbols) \/ sizeof(char *);\n-    } else {\n-        syms = onUnloadSymbols;\n-        symsLen = sizeof(onUnloadSymbols) \/ sizeof(char *);\n+    sym = isLoad ? \"JNI_OnLoad\" : \"JNI_OnUnload\";\n+\n+    \/\/ sym + '_' + cname + '\\0'\n+    if ((len = (cname != NULL ? (strlen(cname) + 1) : 0) + strlen(sym) + 1) >\n+        FILENAME_MAX) {\n+      goto done;\n+    }\n+    jniFunctionName = malloc(len);\n+    if (jniFunctionName == NULL) {\n+      JNU_ThrowOutOfMemoryError(env, NULL);\n+      goto done;\n@@ -84,21 +85,4 @@\n-    for (i = 0; i < symsLen; i++) {\n-        \/\/ cname + sym + '_' + '\\0'\n-        if ((len = (cname != NULL ? strlen(cname) : 0) + strlen(syms[i]) + 2) >\n-            FILENAME_MAX) {\n-            goto done;\n-        }\n-        jniFunctionName = malloc(len);\n-        if (jniFunctionName == NULL) {\n-            JNU_ThrowOutOfMemoryError(env, NULL);\n-            goto done;\n-        }\n-        strcpy(jniFunctionName, syms[i]);\n-        if (cname != NULL) {\n-            strcat(jniFunctionName, \"_\");\n-            strcat(jniFunctionName, cname);\n-        }\n-        entryName = JVM_FindLibraryEntry(handle, jniFunctionName);\n-        free(jniFunctionName);\n-        if(entryName) {\n-            break;\n-        }\n+    strcpy(jniFunctionName, sym);\n+    if (cname != NULL) {\n+      strcat(jniFunctionName, \"_\");\n+      strcat(jniFunctionName, cname);\n@@ -106,0 +90,2 @@\n+    entryName = JVM_FindLibraryEntry(handle, jniFunctionName);\n+    free(jniFunctionName);\n","filename":"src\/java.base\/share\/native\/libjava\/NativeLibraries.c","additions":18,"deletions":32,"binary":false,"changes":50,"status":"modified"}]}