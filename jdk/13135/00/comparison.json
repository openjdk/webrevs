{"files":[{"patch":"@@ -72,2 +72,0 @@\n-compiler\/sharedstubs\/SharedStubToInterpTest.java 8304681 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @requires vm.debug\n@@ -39,1 +40,0 @@\n-import java.util.Iterator;\n@@ -41,0 +41,1 @@\n+import java.util.regex.Pattern;\n@@ -53,0 +54,1 @@\n+        command.add(\"-XX:+PrintRelocations\");\n@@ -85,10 +87,0 @@\n-    private static String skipTo(Iterator<String> iter, String substring) {\n-        while (iter.hasNext()) {\n-            String nextLine = iter.next();\n-            if (nextLine.contains(substring)) {\n-                return nextLine;\n-            }\n-        }\n-        return null;\n-    }\n-\n@@ -96,31 +88,6 @@\n-        Iterator<String> iter = output.asLines().listIterator();\n-\n-        String match = skipTo(iter, \"Compiled method\");\n-        while (match != null && !match.contains(\"Test::test\")) {\n-            match = skipTo(iter, \"Compiled method\");\n-        }\n-        if (match == null) {\n-            throw new RuntimeException(\"Missing compiler output for the method 'test'\");\n-        }\n-\n-        while (iter.hasNext()) {\n-            String nextLine = iter.next();\n-            if (nextLine.contains(\"{static_stub}\")) {\n-                \/\/ Static stubs must be created at the end of the Stub section.\n-                throw new RuntimeException(\"Found {static_stub} before Deopt Handler Code\");\n-            } else if (nextLine.contains(\"{runtime_call DeoptimizationBlob}\")) {\n-                \/\/ Shared static stubs are put after Deopt Handler Code.\n-                break;\n-            }\n-        }\n-\n-        int foundStaticStubs = 0;\n-        while (iter.hasNext()) {\n-            if (iter.next().contains(\"{static_stub}\")) {\n-                foundStaticStubs += 1;\n-            }\n-        }\n-\n-        final int expectedStaticStubs = 2;\n-        if (foundStaticStubs != expectedStaticStubs) {\n-            throw new RuntimeException(\"Found static stubs: \" + foundStaticStubs + \"; Expected static stubs: \" + expectedStaticStubs);\n+        List<String> addrs = Pattern.compile(\"\\\\(static_stub\\\\) addr=(\\\\w+) .*\\\\[static_call=\")\n+            .matcher(output.getStdout())\n+            .results()\n+            .map(m -> m.group(1)).toList();\n+        if (addrs.stream().distinct().count() >= addrs.size()) {\n+            throw new RuntimeException(\"No static stubs reused: distinct \" + addrs.stream().distinct().count() + \", in total \" + addrs.size());\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedStubToInterpTest.java","additions":9,"deletions":42,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -84,10 +84,0 @@\n-    private static String skipTo(Iterator<String> iter, String substring) {\n-        while (iter.hasNext()) {\n-            String nextLine = iter.next();\n-            if (nextLine.contains(substring)) {\n-                return nextLine;\n-            }\n-        }\n-        return null;\n-    }\n-\n@@ -98,2 +88,1 @@\n-            .map(m -> m.group(1))\n-            .collect(Collectors.toList());\n+            .map(m -> m.group(1)).toList();\n@@ -101,1 +90,1 @@\n-            throw new RuntimeException(\"No stubs reused\");\n+            throw new RuntimeException(\"No runtime trampoline stubs reused: distinct \" + addrs.stream().distinct().count() + \", in total \" + addrs.size());\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedTrampolineTest.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"}]}