{"files":[{"patch":"@@ -93,2 +93,2 @@\n-  virtual void update_all() {\n-    _current_size->set_value(_heap->capacity());\n+  void update_all() {\n+    GenerationCounters::update_all(_heap->capacity());\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonMonitoringSupport.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-class GenerationCounters;\n+class EpsilonGenerationCounters;\n@@ -36,1 +36,1 @@\n-  GenerationCounters*   _heap_counters;\n+  EpsilonGenerationCounters* _heap_counters;\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonMonitoringSupport.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  virtual void update_all() {\n+  void update_all() {\n@@ -65,1 +65,1 @@\n-    _current_size->set_value(committed);\n+    GenerationCounters::update_all(committed);\n@@ -84,1 +84,1 @@\n-  virtual void update_all() {\n+  void update_all() {\n@@ -86,1 +86,1 @@\n-    _current_size->set_value(committed);\n+    GenerationCounters::update_all(committed);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+class G1OldGenerationCounters;\n+class G1YoungGenerationCounters;\n@@ -149,1 +151,1 @@\n-  GenerationCounters*  _young_gen_counters;\n+  G1YoungGenerationCounters*  _young_gen_counters;\n@@ -152,1 +154,1 @@\n-  GenerationCounters*  _old_gen_counters;\n+  G1OldGenerationCounters*  _old_gen_counters;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,66 +0,0 @@\n-\n-\/*\n- * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"gc\/parallel\/psGenerationCounters.hpp\"\n-#include \"memory\/allocation.inline.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n-\n-PSGenerationCounters::PSGenerationCounters(const char* name,\n-                                       int ordinal, int spaces,\n-                                       size_t min_capacity,\n-                                       size_t max_capacity,\n-                                       PSVirtualSpace* v):\n-    _ps_virtual_space(v) {\n-\n-  if (UsePerfData) {\n-\n-    EXCEPTION_MARK;\n-    ResourceMark rm;\n-\n-    const char* cns = PerfDataManager::name_space(\"generation\", ordinal);\n-\n-    _name_space = NEW_C_HEAP_ARRAY(char, strlen(cns)+1, mtGC);\n-    strcpy(_name_space, cns);\n-\n-    const char* cname = PerfDataManager::counter_name(_name_space, \"name\");\n-    PerfDataManager::create_string_constant(SUN_GC, cname, name, CHECK);\n-\n-    cname = PerfDataManager::counter_name(_name_space, \"spaces\");\n-    PerfDataManager::create_constant(SUN_GC, cname, PerfData::U_None,\n-                                     spaces, CHECK);\n-\n-    cname = PerfDataManager::counter_name(_name_space, \"minCapacity\");\n-    PerfDataManager::create_constant(SUN_GC, cname, PerfData::U_Bytes,\n-      min_capacity, CHECK);\n-\n-    cname = PerfDataManager::counter_name(_name_space, \"maxCapacity\");\n-    PerfDataManager::create_constant(SUN_GC, cname, PerfData::U_Bytes,\n-      max_capacity, CHECK);\n-\n-    cname = PerfDataManager::counter_name(_name_space, \"capacity\");\n-    _current_size = PerfDataManager::create_variable(SUN_GC, cname,\n-       PerfData::U_Bytes, _ps_virtual_space->committed_size(), CHECK);\n-  }\n-}\n","filename":"src\/hotspot\/share\/gc\/parallel\/psGenerationCounters.cpp","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_PARALLEL_PSGENERATIONCOUNTERS_HPP\n-#define SHARE_GC_PARALLEL_PSGENERATIONCOUNTERS_HPP\n-\n-#include \"gc\/parallel\/psVirtualspace.hpp\"\n-#include \"gc\/shared\/generationCounters.hpp\"\n-#include \"runtime\/perfData.hpp\"\n-\n-\/\/ A PSGenerationCounter is a holder class for performance counters\n-\/\/ that track a generation\n-\n-class PSGenerationCounters: public GenerationCounters {\n-  friend class VMStructs;\n-\n- private:\n-  PSVirtualSpace*      _ps_virtual_space;\n-\n- public:\n-  PSGenerationCounters(const char* name, int ordinal, int spaces,\n-                       size_t min_capacity, size_t max_capacity, PSVirtualSpace* v);\n-\n-  void update_all() {\n-    assert(_virtual_space == nullptr, \"Only one should be in use\");\n-    _current_size->set_value(_ps_virtual_space->committed_size());\n-  }\n-};\n-\n-#endif \/\/ SHARE_GC_PARALLEL_PSGENERATIONCOUNTERS_HPP\n","filename":"src\/hotspot\/share\/gc\/parallel\/psGenerationCounters.hpp","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -116,2 +116,2 @@\n-  _gen_counters = new PSGenerationCounters(perf_data_name, level, 1, min_gen_size(),\n-                                           max_gen_size(), virtual_space());\n+  _gen_counters = new GenerationCounters(perf_data_name, level, 1, min_gen_size(),\n+                                         max_gen_size(), virtual_space()->committed_size());\n@@ -246,1 +246,1 @@\n-      _gen_counters->update_all();\n+      _gen_counters->update_all(_virtual_space->committed_size());\n@@ -382,1 +382,1 @@\n-    _gen_counters->update_all();\n+    _gen_counters->update_all(_virtual_space->committed_size());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/parallel\/psGenerationCounters.hpp\"\n@@ -46,1 +45,1 @@\n-  PSGenerationCounters*    _gen_counters;\n+  GenerationCounters*      _gen_counters;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -94,2 +94,2 @@\n-  _gen_counters = new PSGenerationCounters(\"new\", 0, 3, min_gen_size(),\n-                                           max_gen_size(), virtual_space());\n+  _gen_counters = new GenerationCounters(\"new\", 0, 3, min_gen_size(),\n+                                         max_gen_size(), virtual_space()->committed_size());\n@@ -812,1 +812,1 @@\n-    _gen_counters->update_all();\n+    _gen_counters->update_all(_virtual_space->committed_size());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/parallel\/psGenerationCounters.hpp\"\n@@ -54,1 +53,1 @@\n-  PSGenerationCounters* _gen_counters;\n+  GenerationCounters*   _gen_counters;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -253,1 +253,1 @@\n-      min_size, max_size, &_virtual_space);\n+      min_size, max_size, _virtual_space.committed_size());\n@@ -829,1 +829,1 @@\n-    _gen_counters->update_all();\n+    _gen_counters->update_all(_virtual_space.committed_size());\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-      min_byte_size, max_byte_size, &_virtual_space);\n+      min_byte_size, max_byte_size, _virtual_space.committed_size());\n@@ -374,1 +374,1 @@\n-    _gen_counters->update_all();\n+    _gen_counters->update_all(_virtual_space.committed_size());\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,3 +31,4 @@\n-void GenerationCounters::initialize(const char* name, int ordinal, int spaces,\n-                                    size_t min_capacity, size_t max_capacity,\n-                                    size_t curr_capacity) {\n+GenerationCounters::GenerationCounters(const char* name,\n+                                       int ordinal, int spaces,\n+                                       size_t min_capacity, size_t max_capacity,\n+                                       size_t curr_capacity) {\n@@ -65,18 +66,0 @@\n-GenerationCounters::GenerationCounters(const char* name,\n-                                       int ordinal, int spaces,\n-                                       size_t min_capacity, size_t max_capacity,\n-                                       VirtualSpace* v)\n-  : _virtual_space(v) {\n-  assert(v != nullptr, \"don't call this constructor if v == nullptr\");\n-  initialize(name, ordinal, spaces,\n-             min_capacity, max_capacity, v->committed_size());\n-}\n-\n-GenerationCounters::GenerationCounters(const char* name,\n-                                       int ordinal, int spaces,\n-                                       size_t min_capacity, size_t max_capacity,\n-                                       size_t curr_capacity)\n-  : _virtual_space(nullptr) {\n-  initialize(name, ordinal, spaces, min_capacity, max_capacity, curr_capacity);\n-}\n-\n@@ -87,3 +70,2 @@\n-void GenerationCounters::update_all() {\n-  assert(_virtual_space != nullptr, \"otherwise, override this method\");\n-  _current_size->set_value(_virtual_space->committed_size());\n+void GenerationCounters::update_all(size_t curr_capacity) {\n+  _current_size->set_value(curr_capacity);\n@@ -91,0 +73,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/generationCounters.cpp","additions":7,"deletions":24,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-class VirtualSpace;\n-\n@@ -39,6 +37,0 @@\n-private:\n-  void initialize(const char* name, int ordinal, int spaces,\n-                  size_t min_capacity, size_t max_capacity,\n-                  size_t curr_capacity);\n-\n- protected:\n@@ -46,1 +38,0 @@\n-  VirtualSpace*      _virtual_space;\n@@ -57,8 +48,1 @@\n-  \/\/ This constructor is only meant for use with the PSGenerationCounters\n-  \/\/ constructor. The need for such an constructor should be eliminated\n-  \/\/ when VirtualSpace and PSVirtualSpace are unified.\n-  GenerationCounters()\n-             : _current_size(nullptr), _virtual_space(nullptr), _name_space(nullptr) {}\n-\n-  \/\/ This constructor is used for subclasses that do not have a space\n-  \/\/ associated with them (e.g, in G1).\n+ public:\n@@ -69,4 +53,0 @@\n- public:\n-  GenerationCounters(const char* name, int ordinal, int spaces,\n-                     size_t min_capacity, size_t max_capacity, VirtualSpace* v);\n-\n@@ -75,1 +55,1 @@\n-  virtual void update_all();\n+  void update_all(size_t curr_capacity);\n@@ -78,1 +58,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/generationCounters.hpp","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  void update_all() override {\n+  void update_all() {\n@@ -53,2 +53,2 @@\n-  void update_all() override {\n-    _current_size->set_value(_heap->capacity());\n+  void update_all() {\n+    GenerationCounters::update_all(_heap->capacity());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMonitoringSupport.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-class GenerationCounters;\n@@ -38,0 +37,2 @@\n+class ShenandoahGenerationCounters;\n+class ShenandoahYoungGenerationCounters;\n@@ -63,2 +64,2 @@\n-  GenerationCounters* _young_counters;\n-  GenerationCounters* _heap_counters;\n+  ShenandoahYoungGenerationCounters* _young_counters;\n+  ShenandoahGenerationCounters*      _heap_counters;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMonitoringSupport.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    _current_size->set_value(capacity);\n+    update_all(capacity);\n","filename":"src\/hotspot\/share\/gc\/z\/zServiceability.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}