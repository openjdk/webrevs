{"files":[{"patch":"@@ -158,1 +158,1 @@\n-                    .setResourceDir(env.resourceDir().orElse(null))\n+                    .setResourceDir(env)\n@@ -283,9 +283,2 @@\n-            \/\/ Script root might be empty\n-            try (DirectoryStream<Path> ds = Files.newDirectoryStream(scriptsRoot)) {\n-                if (ds.iterator().hasNext()) {\n-                    args.add(\"--scripts\");\n-                    args.add(normalizedAbsolutePathString(scriptsRoot));\n-                }\n-            } catch (IOException ex) {\n-                throw new UncheckedIOException(ex);\n-            }\n+            args.add(\"--scripts\");\n+            args.add(normalizedAbsolutePathString(scriptsRoot));\n@@ -298,1 +291,2 @@\n-        if (pkg.app().appStore() || pkg.isRuntimeInstaller()) {\n+        if (pkg.app().appStore() || pkg.isRuntimeInstaller() ||\n+                MacPkgInstallerScripts.createAppScripts().setResourceDir(env).isEmpty()) {\n@@ -361,1 +355,1 @@\n-                .setResourceDir(env.resourceDir().orElse(null))\n+                .setResourceDir(env)\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgPackager.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.UncheckedIOException;\n@@ -66,1 +67,1 @@\n-    PackageScripts<T> setResourceDir(Path v) throws IOException {\n+    PackageScripts<T> setResourceDir(Path v) {\n@@ -73,0 +74,16 @@\n+    PackageScripts<T> setResourceDir(BuildEnv env) {\n+        env.resourceDir().ifPresent(this::setResourceDir);\n+        return this;\n+    }\n+\n+    boolean isEmpty() {\n+        return scripts.values().stream().map(\n+                ShellScriptResource::getResource).allMatch(overridableResource -> {\n+            try {\n+                return overridableResource.saveToStream(null) == null;\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        });\n+    }\n+\n@@ -91,7 +108,4 @@\n-            final OverridableResource resource;\n-            if (defaultName.isEmpty()) {\n-                resource = new OverridableResource().setCategory(category);\n-            } else {\n-                resource = new OverridableResource(defaultName.get(),\n-                        ResourceLocator.class).setCategory(category);\n-            }\n+            final var resource = defaultName.map(v -> {\n+                    return new OverridableResource(v, ResourceLocator.class);\n+                }).orElseGet(OverridableResource::new).setCategory(category);\n+\n@@ -103,1 +117,1 @@\n-            if (defaultName.isPresent()) {\n+            return defaultName.flatMap(v -> {\n@@ -105,3 +119,3 @@\n-                if (defaultName.get().endsWith(wellKnownSuffix)) {\n-                    return Optional.of(defaultName.get().substring(0,\n-                            defaultName.get().length() - wellKnownSuffix.length()));\n+                if (v.endsWith(wellKnownSuffix)) {\n+                    return Optional.of(v.substring(0,\n+                            v.length() - wellKnownSuffix.length()));\n@@ -109,2 +123,2 @@\n-            }\n-            return Optional.ofNullable(null);\n+                return Optional.empty();\n+            });\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/PackageScripts.java","additions":28,"deletions":14,"binary":false,"changes":42,"status":"modified"}]}