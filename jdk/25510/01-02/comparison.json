{"files":[{"patch":"@@ -37,1 +37,1 @@\n-                \"resource.pkg-preinstall-script\")),\n+                \"resource.pkg-preinstall-script\", true)),\n@@ -39,1 +39,1 @@\n-                \"resource.pkg-postinstall-script\"));\n+                \"resource.pkg-postinstall-script\", true));\n@@ -55,1 +55,1 @@\n-                \"resource.pkg-services-preinstall-script\")),\n+                \"resource.pkg-services-preinstall-script\", false)),\n@@ -57,1 +57,1 @@\n-                \"resource.pkg-services-postinstall-script\"));\n+                \"resource.pkg-services-postinstall-script\", false));\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgInstallerScripts.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.nio.file.DirectoryStream;\n@@ -282,2 +283,9 @@\n-            args.add(\"--scripts\");\n-            args.add(normalizedAbsolutePathString(scriptsRoot));\n+            \/\/ Script root might be empty\n+            try (DirectoryStream<Path> ds = Files.newDirectoryStream(scriptsRoot)) {\n+                if (ds.iterator().hasNext()) {\n+                    args.add(\"--scripts\");\n+                    args.add(normalizedAbsolutePathString(scriptsRoot));\n+                }\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgPackager.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-#!\/usr\/bin\/env sh\n-\n-exit 0\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/postinstall.template","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-#!\/usr\/bin\/env sh\n-\n-exit 0\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/preinstall.template","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -234,0 +234,4 @@\n+        if (consumer == null) {\n+            Log.verbose(I18N.format(\"message.no-default-resource\",\n+                    publicName, getPrintableCategory(), publicName));\n+        }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/OverridableResource.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-message.no-default-resource=no default package resource {0} {1} (add {2} to the resource-dir to customize).\n+message.no-default-resource=No default package resource {0} {1} (add {2} to the resource-dir to customize).\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        ResourceConfig(String defaultName, String categoryId) {\n+        ResourceConfig(String defaultName, String categoryId, boolean noDefault) {\n@@ -84,0 +84,1 @@\n+            this.noDefault = noDefault;\n@@ -87,2 +88,7 @@\n-            var resource = new OverridableResource(defaultName,\n-                    ResourceLocator.class).setCategory(category);\n+            final OverridableResource resource;\n+            if (noDefault) {\n+                resource = new OverridableResource().setCategory(category);\n+            } else {\n+                resource = new OverridableResource(defaultName,\n+                        ResourceLocator.class).setCategory(category);\n+            }\n@@ -104,0 +110,1 @@\n+        private final boolean noDefault;\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/PackageScripts.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -45,0 +45,5 @@\n+        \/\/ Shell scripts might not have default\n+        if (resource.saveToFile((Path)null) == null) {\n+            return;\n+        }\n+\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/ShellScriptResource.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @summary jpackage with --type pkg --resource-dir Scripts\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build PkgScriptsTest\n+ * @requires (os.family == \"mac\")\n+ * @run main\/othervm\/timeout=1440 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=PkgScriptsTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import jdk.jpackage.internal.util.PathUtils;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.Test;\n+\n+public class PkgScriptsTest {\n+\n+    @Test\n+    @Parameter(\"TRUE\")\n+    @Parameter(\"FALSE\")\n+    public void test(boolean provideScripts) {\n+        final Path resources;\n+        if (provideScripts) {\n+            resources = TKit.createTempDirectory(\"resources\");\n+            try {\n+                Files.createFile(resources.resolve(\"preinstall\"));\n+                Files.createFile(resources.resolve(\"postinstall\"));\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        } else {\n+            resources = null;\n+        }\n+\n+        new PackageTest()\n+                .forTypes(PackageType.MAC_PKG)\n+                .configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    if (resources != null) {\n+                        cmd.addArguments(\"--resource-dir\", resources.toString());\n+                    }\n+                })\n+                .addInstallVerifier(PkgScriptsTest::verifyPKG)\n+                .setExpectedExitCode(0)\n+                .run(PackageTest.Action.CREATE_AND_UNPACK);\n+    }\n+\n+    private static void verifyPKG(JPackageCommand cmd) {\n+        if (cmd.isPackageUnpacked()) {\n+            final boolean provideScripts = cmd.hasArgument(\"--resource-dir\");\n+            Path dataDir = cmd.pathToUnpackedPackageFile(Path.of(\"\/\"))\n+                    .toAbsolutePath()\n+                    .getParent()\n+                    .resolve(\"data\");\n+            try (var dataListing = Files.list(dataDir)) {\n+                dataListing.filter(file -> {\n+                    return \".pkg\".equals(PathUtils.getSuffix(file.getFileName()));\n+                }).forEach(ThrowingConsumer.toConsumer(pkgDir -> {\n+                    Path preinstall = pkgDir.resolve(\"Scripts\").resolve(\"preinstall\");\n+                    Path postinstall = pkgDir.resolve(\"Scripts\").resolve(\"postinstall\");\n+                    if (provideScripts) {\n+                        TKit.assertFileExists(preinstall);\n+                        TKit.assertFileExists(postinstall);\n+                    } else {\n+                        TKit.assertPathExists(preinstall, false);\n+                        TKit.assertPathExists(postinstall, false);\n+                    }\n+                }));\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/PkgScriptsTest.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}