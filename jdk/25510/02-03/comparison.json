{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Optional;\n@@ -36,4 +37,4 @@\n-        preinstall(new ResourceConfig(\"preinstall.template\",\n-                \"resource.pkg-preinstall-script\", true)),\n-        postinstall(new ResourceConfig(\"postinstall.template\",\n-                \"resource.pkg-postinstall-script\", true));\n+        preinstall(new ResourceConfig(Optional.empty(), Optional.of(\"preinstall\"),\n+                \"resource.pkg-preinstall-script\")),\n+        postinstall(new ResourceConfig(Optional.empty(), Optional.of(\"postinstall\"),\n+                \"resource.pkg-postinstall-script\"));\n@@ -55,1 +56,1 @@\n-                \"resource.pkg-services-preinstall-script\", false)),\n+                \"resource.pkg-services-preinstall-script\")),\n@@ -57,1 +58,1 @@\n-                \"resource.pkg-services-postinstall-script\", false));\n+                \"resource.pkg-services-postinstall-script\"));\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgInstallerScripts.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -234,4 +234,4 @@\n-        if (consumer == null) {\n-            Log.verbose(I18N.format(\"message.no-default-resource\",\n-                    publicName, getPrintableCategory(), publicName));\n-        }\n+\n+        Log.verbose(I18N.format(\"message.no-default-resource\",\n+                publicName, getPrintableCategory(), publicName));\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/OverridableResource.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,1 +81,6 @@\n-        ResourceConfig(String defaultName, String categoryId, boolean noDefault) {\n+        ResourceConfig(String defaultName, String categoryId) {\n+            this(Optional.of(defaultName), Optional.empty(), categoryId);\n+        }\n+\n+        ResourceConfig(Optional<String> defaultName, Optional<String> publicName,\n+                String categoryId) {\n@@ -83,0 +88,1 @@\n+            this.publicName = publicName;\n@@ -84,1 +90,0 @@\n-            this.noDefault = noDefault;\n@@ -89,1 +94,1 @@\n-            if (noDefault) {\n+            if (defaultName.isEmpty()) {\n@@ -92,1 +97,1 @@\n-                resource = new OverridableResource(defaultName,\n+                resource = new OverridableResource(defaultName.get(),\n@@ -100,4 +105,8 @@\n-            final String wellKnownSuffix = \".template\";\n-            if (defaultName.endsWith(wellKnownSuffix)) {\n-                return Optional.of(defaultName.substring(0, defaultName.length()\n-                        - wellKnownSuffix.length()));\n+            if (publicName.isPresent()) {\n+                return publicName;\n+            } else if (defaultName.isPresent()) {\n+                final String wellKnownSuffix = \".template\";\n+                if (defaultName.get().endsWith(wellKnownSuffix)) {\n+                    return Optional.of(defaultName.get().substring(0,\n+                            defaultName.get().length() - wellKnownSuffix.length()));\n+                }\n@@ -108,1 +117,2 @@\n-        private final String defaultName;\n+        private final Optional<String> defaultName;\n+        private final Optional<String> publicName;\n@@ -110,1 +120,0 @@\n-        private final boolean noDefault;\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/PackageScripts.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @requires (jpackage.test.SQETest == null)\n@@ -40,0 +41,3 @@\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n@@ -50,0 +54,1 @@\n+import jdk.jpackage.test.Executor;\n@@ -54,3 +59,5 @@\n-    @Parameter(\"TRUE\")\n-    @Parameter(\"FALSE\")\n-    public void test(boolean provideScripts) {\n+    @Parameter({\"TRUE\", \"TRUE\"})\n+    @Parameter({\"TRUE\", \"FALSE\"})\n+    @Parameter({\"FALSE\", \"TRUE\"})\n+    @Parameter({\"FALSE\", \"FALSE\"})\n+    public void test(boolean preinstall, boolean postinstall) {\n@@ -58,1 +65,1 @@\n-        if (provideScripts) {\n+        if (preinstall || postinstall) {\n@@ -60,5 +67,5 @@\n-            try {\n-                Files.createFile(resources.resolve(\"preinstall\"));\n-                Files.createFile(resources.resolve(\"postinstall\"));\n-            } catch (IOException ex) {\n-                throw new UncheckedIOException(ex);\n+            if (preinstall) {\n+                createScript(resources, \"preinstall\");\n+            }\n+            if (postinstall) {\n+                createScript(resources, \"postinstall\");\n@@ -83,0 +90,32 @@\n+    private static void createScript(Path resourcesDir, String name) {\n+        List<String> script = Stream.of(\"#!\/usr\/bin\/env sh\",\n+                                        String.format(\"echo \\\"%s\\\"\", name),\n+                                        \"exit 0\").toList();\n+        try {\n+            Files.write(resourcesDir.resolve(name), script);\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        }\n+    }\n+\n+    private static boolean isScriptExistsInResourceDir(JPackageCommand cmd, String name) {\n+        return Optional.ofNullable(cmd.getArgumentValue(\"--resource-dir\"))\n+                .map(resourceDir -> {\n+                    return Files.exists(Path.of(resourceDir).resolve(name));\n+                }).orElseGet(() -> {\n+                    return false;\n+                });\n+    }\n+\n+    private static void validateScript(boolean exists, Path scriptPath) {\n+        if (exists) {\n+            TKit.assertFileExists(scriptPath);\n+            String output = Executor.of(scriptPath.toString())\n+                    .executeAndGetFirstLineOfOutput();\n+            TKit.assertNotEquals(scriptPath.getFileName(), output,\n+                    \"Check script output\");\n+        } else {\n+            TKit.assertPathExists(scriptPath, false);\n+        }\n+    }\n+\n@@ -85,1 +124,3 @@\n-            final boolean provideScripts = cmd.hasArgument(\"--resource-dir\");\n+            final var preinstall = isScriptExistsInResourceDir(cmd, \"preinstall\");\n+            final var postinstall = isScriptExistsInResourceDir(cmd, \"postinstall\");\n+\n@@ -94,9 +135,6 @@\n-                    Path preinstall = pkgDir.resolve(\"Scripts\").resolve(\"preinstall\");\n-                    Path postinstall = pkgDir.resolve(\"Scripts\").resolve(\"postinstall\");\n-                    if (provideScripts) {\n-                        TKit.assertFileExists(preinstall);\n-                        TKit.assertFileExists(postinstall);\n-                    } else {\n-                        TKit.assertPathExists(preinstall, false);\n-                        TKit.assertPathExists(postinstall, false);\n-                    }\n+                    Path preinstallPath =\n+                            pkgDir.resolve(\"Scripts\").resolve(\"preinstall\");\n+                    Path postinstallPath =\n+                            pkgDir.resolve(\"Scripts\").resolve(\"postinstall\");\n+                    validateScript(preinstall, preinstallPath);\n+                    validateScript(postinstall, postinstallPath);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/PkgScriptsTest.java","additions":57,"deletions":19,"binary":false,"changes":76,"status":"modified"}]}