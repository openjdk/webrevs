{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Optional;\n@@ -36,1 +37,1 @@\n-        preinstall(new ResourceConfig(\"preinstall.template\",\n+        preinstall(new ResourceConfig(Optional.empty(),\n@@ -38,1 +39,1 @@\n-        postinstall(new ResourceConfig(\"postinstall.template\",\n+        postinstall(new ResourceConfig(Optional.empty(),\n@@ -47,1 +48,1 @@\n-            return cfg.createResource();\n+            return cfg.createResource().setPublicName(name());\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgInstallerScripts.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.nio.file.DirectoryStream;\n@@ -78,0 +79,1 @@\n+        LOG_NO_MAIN_SCRIPTS,\n@@ -157,1 +159,1 @@\n-                    .setResourceDir(env.resourceDir().orElse(null))\n+                    .setResourceDir(env)\n@@ -221,0 +223,4 @@\n+                .task(PkgPackageTaskID.LOG_NO_MAIN_SCRIPTS)\n+                        .action(this::logNoMainScripts)\n+                        .addDependent(PackageTaskID.RUN_POST_IMAGE_USER_SCRIPT)\n+                        .add()\n@@ -262,0 +268,2 @@\n+        } else {\n+            disabledTasks.add(PkgPackageTaskID.LOG_NO_MAIN_SCRIPTS);\n@@ -290,1 +298,2 @@\n-        if (pkg.app().appStore() || pkg.isRuntimeInstaller()) {\n+        if (pkg.app().appStore() || pkg.isRuntimeInstaller() ||\n+                MacPkgInstallerScripts.createAppScripts().setResourceDir(env).isEmpty()) {\n@@ -352,7 +361,0 @@\n-        final Map<String, String> data = new HashMap<>();\n-\n-        final var appLocation = pkg.asInstalledPackageApplicationLayout().orElseThrow().appDirectory();\n-\n-        data.put(\"INSTALL_LOCATION\", Path.of(\"\/\").resolve(pkg.relativeInstallDir()).toString());\n-        data.put(\"APP_LOCATION\", appLocation.toString());\n-\n@@ -360,2 +362,1 @@\n-                .setResourceDir(env.resourceDir().orElse(null))\n-                .setSubstitutionData(data)\n+                .setResourceDir(env)\n@@ -365,0 +366,7 @@\n+    private void logNoMainScripts() throws IOException {\n+        \/\/ Should not create any files, but merely log what files the user\n+        \/\/ should add to the resource directory to customize install scripts.\n+        MacPkgInstallerScripts.createAppScripts()\n+                .saveInFolder(env.configDir().resolve(\"scripts\"));\n+    }\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgPackager.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-#!\/usr\/bin\/env sh\n-\n-chown root:wheel \"INSTALL_LOCATION\"\n-chmod a+rX \"INSTALL_LOCATION\"\n-chmod +r \"APP_LOCATION\/\"*.jar\n-\n-exit 0\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/postinstall.template","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,8 +0,0 @@\n-#!\/usr\/bin\/env sh\n-\n-if [ ! -d \"INSTALL_LOCATION\" ]\n-then\n-    mkdir -p \"INSTALL_LOCATION\"\n-fi\n-\n-exit 0\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/preinstall.template","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -41,1 +41,1 @@\n-import java.util.List;\n+import java.util.LinkedHashMap;\n@@ -45,1 +45,1 @@\n-import java.util.function.Supplier;\n+import java.util.function.Function;\n@@ -75,1 +75,1 @@\n-        defaultResourceSupplier = null;\n+        defaultResourceGetter = null;\n@@ -80,1 +80,1 @@\n-            Supplier<InputStream> defaultResourceSupplier) {\n+            Function<String, InputStream> defaultResourceGetter) {\n@@ -82,1 +82,1 @@\n-        this.defaultResourceSupplier = Objects.requireNonNull(defaultResourceSupplier);\n+        this.defaultResourceGetter = Objects.requireNonNull(defaultResourceGetter);\n@@ -87,3 +87,1 @@\n-        this(defaultName, () -> {\n-            return resourceLocator.getResourceAsStream(defaultName);\n-        });\n+        this(defaultName, resourceLocator::getResourceAsStream);\n@@ -139,1 +137,1 @@\n-    enum Source { External, ResourceDir, DefaultResource };\n+    enum Source { External, ResourceDir, DefaultResource }\n@@ -142,3 +140,3 @@\n-        sources = Stream.of(v)\n-                .map(source -> Map.entry(source, getHandler(source)))\n-                .toList();\n+        sources = Stream.of(v).collect(Collectors.toMap(x -> x, this::getHandler, (a, b) -> {\n+            throw new IllegalStateException();\n+        }, LinkedHashMap::new));\n@@ -229,1 +227,1 @@\n-        for (var source: sources) {\n+        for (var source: sources.entrySet()) {\n@@ -234,0 +232,5 @@\n+\n+        if (!sources.containsKey(Source.DefaultResource)) {\n+            noDefault(consumer);\n+        }\n+\n@@ -265,2 +268,1 @@\n-        final Path resourceName = Optional.ofNullable(publicName).orElseGet(\n-                () -> dest.publicName());\n+        final Path resourceName = resourceName(dest);\n@@ -292,3 +294,3 @@\n-                    .orElse(Optional\n-                            .ofNullable(publicName)\n-                            .orElseGet(() -> dest.publicName()));\n+                    .orElseGet(() -> {\n+                        return resourceName(dest);\n+                    });\n@@ -298,1 +300,1 @@\n-            try (InputStream in = defaultResourceSupplier.get()) {\n+            try (InputStream in = defaultResourceGetter.apply(defaultName)) {\n@@ -305,0 +307,18 @@\n+    private void noDefault(ResourceConsumer dest) {\n+        if (dest != null) {\n+            final Path resourceName = Optional\n+                    .ofNullable(logPublicName)\n+                    .orElseGet(() -> {\n+                        return resourceName(dest);\n+                    });\n+            Log.verbose(I18N.format(\"message.no-default-resource\",\n+                    getPrintableCategory(), resourceName));\n+        }\n+    }\n+\n+    private Path resourceName(ResourceConsumer dest) {\n+        return Optional.ofNullable(publicName).orElseGet(() -> {\n+            return dest.publicName();\n+        });\n+    }\n+\n@@ -389,2 +409,2 @@\n-    private final Supplier<InputStream> defaultResourceSupplier;\n-    private List<Map.Entry<Source, SourceHandler>> sources;\n+    private final Function<String, InputStream> defaultResourceGetter;\n+    private Map<Source, SourceHandler> sources;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/OverridableResource.java","additions":41,"deletions":21,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-message.no-default-resource=no default package resource {0} {1} (add {2} to the resource-dir to customize).\n+message.no-default-resource=No default package resource {0} (add {1} to the resource-dir to customize).\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.UncheckedIOException;\n@@ -66,1 +67,1 @@\n-    PackageScripts<T> setResourceDir(Path v) throws IOException {\n+    PackageScripts<T> setResourceDir(Path v) {\n@@ -73,0 +74,16 @@\n+    PackageScripts<T> setResourceDir(BuildEnv env) {\n+        env.resourceDir().ifPresent(this::setResourceDir);\n+        return this;\n+    }\n+\n+    boolean isEmpty() {\n+        return scripts.values().stream().map(\n+                ShellScriptResource::getResource).allMatch(overridableResource -> {\n+            try {\n+                return overridableResource.saveToStream(null) == null;\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        });\n+    }\n+\n@@ -82,0 +99,4 @@\n+            this(Optional.of(defaultName), categoryId);\n+        }\n+\n+        ResourceConfig(Optional<String> defaultName, String categoryId) {\n@@ -87,2 +108,4 @@\n-            var resource = new OverridableResource(defaultName,\n-                    ResourceLocator.class).setCategory(category);\n+            final var resource = defaultName.map(v -> {\n+                    return new OverridableResource(v, ResourceLocator.class);\n+                }).orElseGet(OverridableResource::new).setCategory(category);\n+\n@@ -94,6 +117,8 @@\n-            final String wellKnownSuffix = \".template\";\n-            if (defaultName.endsWith(wellKnownSuffix)) {\n-                return Optional.of(defaultName.substring(0, defaultName.length()\n-                        - wellKnownSuffix.length()));\n-            }\n-            return Optional.ofNullable(null);\n+            return defaultName.flatMap(v -> {\n+                final String wellKnownSuffix = \".template\";\n+                if (v.endsWith(wellKnownSuffix)) {\n+                    return Optional.of(v.substring(0,\n+                            v.length() - wellKnownSuffix.length()));\n+                }\n+                return Optional.empty();\n+            });\n@@ -102,1 +127,1 @@\n-        private final String defaultName;\n+        private final Optional<String> defaultName;\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/PackageScripts.java","additions":35,"deletions":10,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,5 @@\n+        if (!Files.exists(dstFile)) {\n+            \/\/ No script file created.\n+            return;\n+        }\n+\n@@ -70,1 +75,1 @@\n-    final Path publicFileName;\n+    private final Path publicFileName;\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/ShellScriptResource.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.JPackageStringBundle;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.TKit;\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --type pkg --resource-dir Scripts\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build PkgScriptsTest\n+ * @requires (os.family == \"mac\")\n+ * @requires (jpackage.test.SQETest == null)\n+ * @run main\/othervm\/timeout=1440 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=PkgScriptsTest\n+ *\/\n+public class PkgScriptsTest {\n+\n+    public static Collection<?> input() {\n+        return List.of(new Object[][]{\n+            { new PkgInstallScript[]{\n+                    PkgInstallScript.PREINSTALL,\n+                    PkgInstallScript.POSTINSTALL },\n+            },\n+            { new PkgInstallScript[]{\n+                    PkgInstallScript.PREINSTALL },\n+            },\n+            { new PkgInstallScript[]{\n+                    PkgInstallScript.POSTINSTALL },\n+            },\n+        });\n+    }\n+\n+    @Test\n+    @ParameterSupplier(\"input\")\n+    public void test(PkgInstallScript[] customScriptRoles) {\n+        var responseDir = TKit.createTempDirectory(\"response\");\n+\n+        var customScripts = Stream.of(customScriptRoles).map(role -> {\n+            return new CustomInstallScript(responseDir, role);\n+        }).toList();\n+\n+        var noScriptRoles = noScriptRoles(customScripts);\n+\n+        new PackageTest()\n+            .forTypes(PackageType.MAC_PKG)\n+            .configureHelloApp()\n+            .addInitializer(cmd -> {\n+                cmd.addArguments(\"--resource-dir\", TKit.createTempDirectory(\"resources\"));\n+                customScripts.forEach(customScript -> {\n+                    customScript.createFor(cmd);\n+                });\n+                \/\/ Verify jpackage logs script resources user can customize.\n+                noScriptRoles.stream().map(role -> {\n+                    return JPackageStringBundle.MAIN.cannedFormattedString(\n+                            \"message.no-default-resource\",\n+                            String.format(\"[%s]\", role.resourceCategory()),\n+                            role.scriptName());\n+                }).forEach(cmd::validateOutput);\n+            }).addInstallVerifier(cmd -> {\n+                customScripts.forEach(customScript -> {\n+                    customScript.verify(cmd);\n+                });\n+                if (cmd.isPackageUnpacked()) {\n+                    noScriptRoles.forEach(role -> {\n+                        role.verifyExists(cmd, false);\n+                    });\n+                }\n+            }).run();\n+    }\n+\n+    enum PkgInstallScript {\n+        POSTINSTALL,\n+        PREINSTALL,\n+        ;\n+\n+        String scriptName() {\n+            return name().toLowerCase();\n+        }\n+\n+        String resourceCategory() {\n+            return JPackageStringBundle.MAIN.cannedFormattedString(\n+                    String.format(\"resource.pkg-%s-script\", scriptName())).getValue();\n+        }\n+\n+        Path pathInUnpackedPackage(JPackageCommand cmd) {\n+            cmd.verifyIsOfType(PackageType.MAC_PKG);\n+            if (!cmd.isPackageUnpacked()) {\n+                throw new UnsupportedOperationException();\n+            }\n+            \/\/ Internal unpacked pkg name will be \"PkgScriptsTest-app.pkg\" and not a\n+            \/\/ \"PkgScriptsTest-1.0.pkg\"\n+            return cmd.pathToUnpackedPackageFile(Path.of(\"\/\")).getParent()\n+                    .resolve(\"data\").resolve(cmd.name() + \"-app.pkg\")\n+                    .resolve(\"Scripts\");\n+        }\n+\n+        void verifyExists(JPackageCommand cmd, boolean exists) {\n+            var scriptPath = pathInUnpackedPackage(cmd).resolve(scriptName());\n+            if (exists) {\n+                TKit.assertExecutableFileExists(scriptPath);\n+            } else {\n+                TKit.assertPathExists(scriptPath, false);\n+            }\n+        }\n+    }\n+\n+    record CustomInstallScript(Path responseDir, PkgInstallScript role) {\n+        CustomInstallScript {\n+            Objects.requireNonNull(responseDir);\n+            Objects.requireNonNull(role);\n+        }\n+\n+        void createFor(JPackageCommand cmd) {\n+            var responseFile = responseFilePath(cmd);\n+            TKit.assertPathExists(responseFile, false);\n+            TKit.createTextFile(Path.of(cmd.getArgumentValue(\"--resource-dir\")).resolve(role.scriptName()), Stream.of(\n+                    \"#!\/usr\/bin\/env sh\",\n+                    String.format(\"touch \\\"%s\\\"\", responseFile.toAbsolutePath()),\n+                    \"exit 0\"\n+            ));\n+        }\n+\n+        void verify(JPackageCommand cmd) {\n+            if (cmd.isPackageUnpacked()) {\n+                role.verifyExists(cmd, true);\n+            } else {\n+                TKit.assertFileExists(responseFilePath(cmd));\n+            }\n+        }\n+\n+        private Path responseFilePath(JPackageCommand cmd) {\n+            return responseDir.resolve(role.scriptName());\n+        }\n+    }\n+\n+    private static Set<PkgInstallScript> noScriptRoles(Collection<CustomInstallScript> customScripts) {\n+        var noScriptRoles = new HashSet<>(Set.of(PkgInstallScript.values()));\n+        customScripts.stream().map(CustomInstallScript::role).forEach(noScriptRoles::remove);\n+        return noScriptRoles;\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/PkgScriptsTest.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"}]}