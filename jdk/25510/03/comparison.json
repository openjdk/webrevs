{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Optional;\n@@ -36,1 +37,1 @@\n-        preinstall(new ResourceConfig(\"preinstall.template\",\n+        preinstall(new ResourceConfig(Optional.empty(), Optional.of(\"preinstall\"),\n@@ -38,1 +39,1 @@\n-        postinstall(new ResourceConfig(\"postinstall.template\",\n+        postinstall(new ResourceConfig(Optional.empty(), Optional.of(\"postinstall\"),\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgInstallerScripts.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.nio.file.DirectoryStream;\n@@ -282,2 +283,9 @@\n-            args.add(\"--scripts\");\n-            args.add(normalizedAbsolutePathString(scriptsRoot));\n+            \/\/ Script root might be empty\n+            try (DirectoryStream<Path> ds = Files.newDirectoryStream(scriptsRoot)) {\n+                if (ds.iterator().hasNext()) {\n+                    args.add(\"--scripts\");\n+                    args.add(normalizedAbsolutePathString(scriptsRoot));\n+                }\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n@@ -352,7 +360,0 @@\n-        final Map<String, String> data = new HashMap<>();\n-\n-        final var appLocation = pkg.asInstalledPackageApplicationLayout().orElseThrow().appDirectory();\n-\n-        data.put(\"INSTALL_LOCATION\", Path.of(\"\/\").resolve(pkg.relativeInstallDir()).toString());\n-        data.put(\"APP_LOCATION\", appLocation.toString());\n-\n@@ -361,1 +362,0 @@\n-                .setSubstitutionData(data)\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgPackager.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-#!\/usr\/bin\/env sh\n-\n-chown root:wheel \"INSTALL_LOCATION\"\n-chmod a+rX \"INSTALL_LOCATION\"\n-chmod +r \"APP_LOCATION\/\"*.jar\n-\n-exit 0\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/postinstall.template","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,8 +0,0 @@\n-#!\/usr\/bin\/env sh\n-\n-if [ ! -d \"INSTALL_LOCATION\" ]\n-then\n-    mkdir -p \"INSTALL_LOCATION\"\n-fi\n-\n-exit 0\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/preinstall.template","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -234,0 +234,4 @@\n+\n+        Log.verbose(I18N.format(\"message.no-default-resource\",\n+                publicName, getPrintableCategory(), publicName));\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/OverridableResource.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-message.no-default-resource=no default package resource {0} {1} (add {2} to the resource-dir to customize).\n+message.no-default-resource=No default package resource {0} {1} (add {2} to the resource-dir to customize).\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,0 +82,5 @@\n+            this(Optional.of(defaultName), Optional.empty(), categoryId);\n+        }\n+\n+        ResourceConfig(Optional<String> defaultName, Optional<String> publicName,\n+                String categoryId) {\n@@ -83,0 +88,1 @@\n+            this.publicName = publicName;\n@@ -87,2 +93,7 @@\n-            var resource = new OverridableResource(defaultName,\n-                    ResourceLocator.class).setCategory(category);\n+            final OverridableResource resource;\n+            if (defaultName.isEmpty()) {\n+                resource = new OverridableResource().setCategory(category);\n+            } else {\n+                resource = new OverridableResource(defaultName.get(),\n+                        ResourceLocator.class).setCategory(category);\n+            }\n@@ -94,4 +105,8 @@\n-            final String wellKnownSuffix = \".template\";\n-            if (defaultName.endsWith(wellKnownSuffix)) {\n-                return Optional.of(defaultName.substring(0, defaultName.length()\n-                        - wellKnownSuffix.length()));\n+            if (publicName.isPresent()) {\n+                return publicName;\n+            } else if (defaultName.isPresent()) {\n+                final String wellKnownSuffix = \".template\";\n+                if (defaultName.get().endsWith(wellKnownSuffix)) {\n+                    return Optional.of(defaultName.get().substring(0,\n+                            defaultName.get().length() - wellKnownSuffix.length()));\n+                }\n@@ -102,1 +117,2 @@\n-        private final String defaultName;\n+        private final Optional<String> defaultName;\n+        private final Optional<String> publicName;\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/PackageScripts.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -45,0 +45,5 @@\n+        \/\/ Shell scripts might not have default\n+        if (resource.saveToFile((Path)null) == null) {\n+            return;\n+        }\n+\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/ShellScriptResource.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @summary jpackage with --type pkg --resource-dir Scripts\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build PkgScriptsTest\n+ * @requires (os.family == \"mac\")\n+ * @requires (jpackage.test.SQETest == null)\n+ * @run main\/othervm\/timeout=1440 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=PkgScriptsTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import jdk.jpackage.internal.util.PathUtils;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Executor;\n+\n+public class PkgScriptsTest {\n+\n+    @Test\n+    @Parameter({\"TRUE\", \"TRUE\"})\n+    @Parameter({\"TRUE\", \"FALSE\"})\n+    @Parameter({\"FALSE\", \"TRUE\"})\n+    @Parameter({\"FALSE\", \"FALSE\"})\n+    public void test(boolean preinstall, boolean postinstall) {\n+        final Path resources;\n+        if (preinstall || postinstall) {\n+            resources = TKit.createTempDirectory(\"resources\");\n+            if (preinstall) {\n+                createScript(resources, \"preinstall\");\n+            }\n+            if (postinstall) {\n+                createScript(resources, \"postinstall\");\n+            }\n+        } else {\n+            resources = null;\n+        }\n+\n+        new PackageTest()\n+                .forTypes(PackageType.MAC_PKG)\n+                .configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    if (resources != null) {\n+                        cmd.addArguments(\"--resource-dir\", resources.toString());\n+                    }\n+                })\n+                .addInstallVerifier(PkgScriptsTest::verifyPKG)\n+                .setExpectedExitCode(0)\n+                .run(PackageTest.Action.CREATE_AND_UNPACK);\n+    }\n+\n+    private static void createScript(Path resourcesDir, String name) {\n+        List<String> script = Stream.of(\"#!\/usr\/bin\/env sh\",\n+                                        String.format(\"echo \\\"%s\\\"\", name),\n+                                        \"exit 0\").toList();\n+        try {\n+            Files.write(resourcesDir.resolve(name), script);\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        }\n+    }\n+\n+    private static boolean isScriptExistsInResourceDir(JPackageCommand cmd, String name) {\n+        return Optional.ofNullable(cmd.getArgumentValue(\"--resource-dir\"))\n+                .map(resourceDir -> {\n+                    return Files.exists(Path.of(resourceDir).resolve(name));\n+                }).orElseGet(() -> {\n+                    return false;\n+                });\n+    }\n+\n+    private static void validateScript(boolean exists, Path scriptPath) {\n+        if (exists) {\n+            TKit.assertFileExists(scriptPath);\n+            String output = Executor.of(scriptPath.toString())\n+                    .executeAndGetFirstLineOfOutput();\n+            TKit.assertNotEquals(scriptPath.getFileName(), output,\n+                    \"Check script output\");\n+        } else {\n+            TKit.assertPathExists(scriptPath, false);\n+        }\n+    }\n+\n+    private static void verifyPKG(JPackageCommand cmd) {\n+        if (cmd.isPackageUnpacked()) {\n+            final var preinstall = isScriptExistsInResourceDir(cmd, \"preinstall\");\n+            final var postinstall = isScriptExistsInResourceDir(cmd, \"postinstall\");\n+\n+            Path dataDir = cmd.pathToUnpackedPackageFile(Path.of(\"\/\"))\n+                    .toAbsolutePath()\n+                    .getParent()\n+                    .resolve(\"data\");\n+            try (var dataListing = Files.list(dataDir)) {\n+                dataListing.filter(file -> {\n+                    return \".pkg\".equals(PathUtils.getSuffix(file.getFileName()));\n+                }).forEach(ThrowingConsumer.toConsumer(pkgDir -> {\n+                    Path preinstallPath =\n+                            pkgDir.resolve(\"Scripts\").resolve(\"preinstall\");\n+                    Path postinstallPath =\n+                            pkgDir.resolve(\"Scripts\").resolve(\"postinstall\");\n+                    validateScript(preinstall, preinstallPath);\n+                    validateScript(postinstall, postinstallPath);\n+                }));\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/PkgScriptsTest.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}