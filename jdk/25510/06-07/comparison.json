{"files":[{"patch":"@@ -41,0 +41,3 @@\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n@@ -42,0 +45,1 @@\n+import java.util.Objects;\n@@ -43,0 +47,1 @@\n+import java.util.Set;\n@@ -52,1 +57,1 @@\n-import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n@@ -58,0 +63,15 @@\n+    public static Collection<?> input() {\n+        return List.of(new Object[][]{\n+            { new PkgInstallScript[]{\n+                    PkgInstallScript.PREINSTALL,\n+                    PkgInstallScript.POSTINSTALL },\n+            },\n+            { new PkgInstallScript[]{\n+                    PkgInstallScript.PREINSTALL },\n+            },\n+            { new PkgInstallScript[]{\n+                    PkgInstallScript.POSTINSTALL },\n+            },\n+        });\n+    }\n+\n@@ -59,17 +79,7 @@\n-    @Parameter({\"TRUE\", \"TRUE\"})\n-    @Parameter({\"TRUE\", \"FALSE\"})\n-    @Parameter({\"FALSE\", \"TRUE\"})\n-    @Parameter({\"FALSE\", \"FALSE\"})\n-    public void test(boolean preinstall, boolean postinstall) {\n-        final Path resources;\n-        if (preinstall || postinstall) {\n-            resources = TKit.createTempDirectory(\"resources\");\n-            if (preinstall) {\n-                createScript(resources, \"preinstall\");\n-            }\n-            if (postinstall) {\n-                createScript(resources, \"postinstall\");\n-            }\n-        } else {\n-            resources = null;\n-        }\n+    @ParameterSupplier(\"input\")\n+    public void test(PkgInstallScript[] customScriptRoles) {\n+        var responseDir = TKit.createTempDirectory(\"response\");\n+\n+        var customScripts = Stream.of(customScriptRoles).map(role -> {\n+            return new CustomInstallScript(responseDir, role);\n+        }).toList();\n@@ -78,10 +88,19 @@\n-                .forTypes(PackageType.MAC_PKG)\n-                .configureHelloApp()\n-                .addInitializer(cmd -> {\n-                    if (resources != null) {\n-                        cmd.addArguments(\"--resource-dir\", resources.toString());\n-                    }\n-                })\n-                .addInstallVerifier(PkgScriptsTest::verifyPKG)\n-                .setExpectedExitCode(0)\n-                .run();\n+            .forTypes(PackageType.MAC_PKG)\n+            .configureHelloApp()\n+            .addInitializer(cmd -> {\n+                cmd.addArguments(\"--resource-dir\", TKit.createTempDirectory(\"resources\"));\n+                customScripts.forEach(customScript -> {\n+                    customScript.createFor(cmd);\n+                });\n+            }).addInstallVerifier(cmd -> {\n+                customScripts.forEach(customScript -> {\n+                    customScript.verify(cmd);\n+                });\n+                if (cmd.isPackageUnpacked()) {\n+                    var noScriptRoles = new HashSet<>(Set.of(customScriptRoles));\n+                    customScripts.stream().map(CustomInstallScript::role).forEach(noScriptRoles::remove);\n+                    noScriptRoles.forEach(role -> {\n+                        role.verifyExists(cmd, false);\n+                    });\n+                }\n+            }).run();\n@@ -90,9 +109,7 @@\n-    private static void createScript(Path resourcesDir, String name) {\n-        Path scriptOutputFile = TKit.workDir().resolve(name).toAbsolutePath();\n-        List<String> script = Stream.of(\"#!\/usr\/bin\/env sh\",\n-                                        String.format(\"touch \\\"%s\\\"\", scriptOutputFile.toString()),\n-                                        \"exit 0\").toList();\n-        try {\n-            Files.write(resourcesDir.resolve(name), script);\n-        } catch (IOException ex) {\n-            throw new UncheckedIOException(ex);\n+    enum PkgInstallScript {\n+        POSTINSTALL,\n+        PREINSTALL,\n+        ;\n+\n+        String scriptName() {\n+            return name().toLowerCase();\n@@ -100,1 +117,0 @@\n-    }\n@@ -102,8 +118,11 @@\n-    private static boolean isScriptExistsInResourceDir(JPackageCommand cmd, String name) {\n-        return Optional.ofNullable(cmd.getArgumentValue(\"--resource-dir\"))\n-                .map(resourceDir -> {\n-                    return Files.exists(Path.of(resourceDir).resolve(name));\n-                }).orElseGet(() -> {\n-                    return false;\n-                });\n-    }\n+        Path pathInUnpackedPackage(JPackageCommand cmd) {\n+            cmd.verifyIsOfType(PackageType.MAC_PKG);\n+            if (!cmd.isPackageUnpacked()) {\n+                throw new UnsupportedOperationException();\n+            }\n+            \/\/ Internal unpacked pkg name will be \"PkgScriptsTest-app.pkg\" and not a\n+            \/\/ \"PkgScriptsTest-1.0.pkg\"\n+            return cmd.pathToUnpackedPackageFile(Path.of(\"\/\")).getParent()\n+                    .resolve(\"data\").resolve(cmd.name() + \"-app.pkg\")\n+                    .resolve(\"Scripts\");\n+        }\n@@ -111,7 +130,7 @@\n-    private static void validateScriptUnpacked(boolean exists, Path scriptPath) {\n-        if (exists) {\n-            TKit.assertFileExists(scriptPath);\n-            TKit.assertTrue(Files.isExecutable(scriptPath), String.format\n-                    (\"Check [%s] is executable\", scriptPath));\n-        } else {\n-            TKit.assertPathExists(scriptPath, false);\n+        void verifyExists(JPackageCommand cmd, boolean exists) {\n+            var scriptPath = pathInUnpackedPackage(cmd).resolve(scriptName());\n+            if (exists) {\n+                TKit.assertExecutableFileExists(scriptPath);\n+            } else {\n+                TKit.assertPathExists(scriptPath, false);\n+            }\n@@ -121,5 +140,8 @@\n-    private static void validateScriptInstalled(boolean exists, String name) {\n-        Path scriptOutputFile = TKit.workDir().resolve(name).toAbsolutePath();\n-        if (exists) {\n-            TKit.assertFileExists(scriptOutputFile);\n-        } else {\n+    record CustomInstallScript(Path responseDir, PkgInstallScript role) {\n+        CustomInstallScript {\n+            Objects.requireNonNull(responseDir);\n+            Objects.requireNonNull(role);\n+        }\n+\n+        void createFor(JPackageCommand cmd) {\n+            Path scriptOutputFile = responseFilePath(cmd).toAbsolutePath();\n@@ -127,0 +149,5 @@\n+            TKit.createTextFile(scriptOutputFile, Stream.of(\n+                    \"#!\/usr\/bin\/env sh\",\n+                    String.format(\"touch \\\"%s\\\"\", scriptOutputFile),\n+                    \"exit 0\"\n+            ));\n@@ -128,1 +155,0 @@\n-    }\n@@ -130,22 +156,5 @@\n-    private static void verifyPKG(JPackageCommand cmd) {\n-        final var preinstall = isScriptExistsInResourceDir(cmd, \"preinstall\");\n-        final var postinstall = isScriptExistsInResourceDir(cmd, \"postinstall\");\n-\n-        if (cmd.isPackageUnpacked()) {\n-            Path dataDir = cmd.pathToUnpackedPackageFile(Path.of(\"\/\"))\n-                    .toAbsolutePath()\n-                    .getParent()\n-                    .resolve(\"data\");\n-            try (var dataListing = Files.list(dataDir)) {\n-                dataListing.filter(file -> {\n-                    return \".pkg\".equals(PathUtils.getSuffix(file.getFileName()));\n-                }).forEach(ThrowingConsumer.toConsumer(pkgDir -> {\n-                    Path preinstallPath =\n-                            pkgDir.resolve(\"Scripts\").resolve(\"preinstall\");\n-                    Path postinstallPath =\n-                            pkgDir.resolve(\"Scripts\").resolve(\"postinstall\");\n-                    validateScriptUnpacked(preinstall, preinstallPath);\n-                    validateScriptUnpacked(postinstall, postinstallPath);\n-                }));\n-            } catch (IOException ex) {\n-                throw new UncheckedIOException(ex);\n+        void verify(JPackageCommand cmd) {\n+            if (cmd.isPackageUnpacked()) {\n+                role.verifyExists(cmd, true);\n+            } else {\n+                TKit.assertFileExists(responseFilePath(cmd));\n@@ -153,3 +162,4 @@\n-        } else {\n-            validateScriptInstalled(preinstall, \"preinstall\");\n-            validateScriptInstalled(postinstall, \"postinstall\");\n+        }\n+\n+        private Path responseFilePath(JPackageCommand cmd) {\n+            return Path.of(cmd.getArgumentValue(\"--resource-dir\")).resolve(role.scriptName());\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/PkgScriptsTest.java","additions":94,"deletions":84,"binary":false,"changes":178,"status":"modified"}]}