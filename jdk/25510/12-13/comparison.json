{"files":[{"patch":"@@ -41,1 +41,1 @@\n-import java.util.List;\n+import java.util.LinkedHashMap;\n@@ -45,1 +45,1 @@\n-import java.util.function.Supplier;\n+import java.util.function.Function;\n@@ -75,1 +75,1 @@\n-        defaultResourceSupplier = null;\n+        defaultResourceGetter = null;\n@@ -80,1 +80,1 @@\n-            Supplier<InputStream> defaultResourceSupplier) {\n+            Function<String, InputStream> defaultResourceGetter) {\n@@ -82,1 +82,1 @@\n-        this.defaultResourceSupplier = Objects.requireNonNull(defaultResourceSupplier);\n+        this.defaultResourceGetter = Objects.requireNonNull(defaultResourceGetter);\n@@ -87,3 +87,1 @@\n-        this(defaultName, () -> {\n-            return resourceLocator.getResourceAsStream(defaultName);\n-        });\n+        this(defaultName, resourceLocator::getResourceAsStream);\n@@ -130,4 +128,0 @@\n-    String getCategory() {\n-        return category;\n-    }\n-\n@@ -143,1 +137,1 @@\n-    enum Source { External, ResourceDir, DefaultResource };\n+    enum Source { External, ResourceDir, DefaultResource }\n@@ -146,3 +140,3 @@\n-        sources = Stream.of(v)\n-                .map(source -> Map.entry(source, getHandler(source)))\n-                .toList();\n+        sources = Stream.of(v).collect(Collectors.toMap(x -> x, this::getHandler, (a, b) -> {\n+            throw new IllegalStateException();\n+        }, LinkedHashMap::new));\n@@ -233,1 +227,1 @@\n-        for (var source: sources) {\n+        for (var source: sources.entrySet()) {\n@@ -238,0 +232,5 @@\n+\n+        if (!sources.containsKey(Source.DefaultResource)) {\n+            noDefault(consumer);\n+        }\n+\n@@ -269,2 +268,1 @@\n-        final Path resourceName = Optional.ofNullable(publicName).orElseGet(\n-                () -> dest.publicName());\n+        final Path resourceName = resourceName(dest);\n@@ -296,3 +294,3 @@\n-                    .orElse(Optional\n-                            .ofNullable(publicName)\n-                            .orElseGet(() -> dest.publicName()));\n+                    .orElseGet(() -> {\n+                        return resourceName(dest);\n+                    });\n@@ -302,1 +300,1 @@\n-            try (InputStream in = defaultResourceSupplier.get()) {\n+            try (InputStream in = defaultResourceGetter.apply(defaultName)) {\n@@ -309,0 +307,18 @@\n+    private void noDefault(ResourceConsumer dest) {\n+        if (dest != null) {\n+            final Path resourceName = Optional\n+                    .ofNullable(logPublicName)\n+                    .orElseGet(() -> {\n+                        return resourceName(dest);\n+                    });\n+            Log.verbose(I18N.format(\"message.no-default-resource\", \n+                    getPrintableCategory(), resourceName));\n+        }\n+    }\n+\n+    private Path resourceName(ResourceConsumer dest) {\n+        return Optional.ofNullable(publicName).orElseGet(() -> {\n+            return dest.publicName();\n+        });\n+    }\n+\n@@ -393,2 +409,2 @@\n-    private final Supplier<InputStream> defaultResourceSupplier;\n-    private List<Map.Entry<Source, SourceHandler>> sources;\n+    private final Function<String, InputStream> defaultResourceGetter;\n+    private Map<Source, SourceHandler> sources;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/OverridableResource.java","additions":41,"deletions":25,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -81,1 +81,0 @@\n-                .setPublicName(scriptName)\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ScriptRunner.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-message.no-default-resource=No default package resource {0} {1} (add {2} to the resource-dir to customize).\n+message.no-default-resource=No default package resource {0} (add {1} to the resource-dir to customize).\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,8 +45,0 @@\n-        \/\/ Shell scripts might not have default\n-        if (resource.saveToFile((Path)null) == null) {\n-            Log.verbose(I18N.format(\"message.no-default-resource\",\n-                resource.getPublicName(), resource.getCategory(),\n-                resource.getPublicName()));\n-            return;\n-        }\n-\n@@ -56,0 +48,5 @@\n+        if (!Files.exists(dstFile)) {\n+            \/\/ No script file created.\n+            return;\n+        }\n+\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/ShellScriptResource.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -24,16 +24,0 @@\n- \/*\n- * @test\n- * @summary jpackage with --type pkg --resource-dir Scripts\n- * @library \/test\/jdk\/tools\/jpackage\/helpers\n- * @key jpackagePlatformPackage\n- * @build jdk.jpackage.test.*\n- * @build PkgScriptsTest\n- * @requires (os.family == \"mac\")\n- * @requires (jpackage.test.SQETest == null)\n- * @run main\/othervm\/timeout=1440 -Xmx512m jdk.jpackage.test.Main\n- *  --jpt-run=PkgScriptsTest\n- *\/\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.nio.file.Files;\n@@ -41,1 +25,0 @@\n-import java.util.ArrayList;\n@@ -46,1 +29,0 @@\n-import java.util.Optional;\n@@ -49,4 +31,2 @@\n-\n-import jdk.jpackage.internal.util.PathUtils;\n-import jdk.jpackage.internal.util.function.ThrowingConsumer;\n-\n+import jdk.jpackage.test.Annotations.ParameterSupplier;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -54,0 +34,1 @@\n+import jdk.jpackage.test.JPackageStringBundle;\n@@ -57,3 +38,0 @@\n-import jdk.jpackage.test.Annotations.ParameterSupplier;\n-import jdk.jpackage.test.Annotations.Test;\n-import jdk.jpackage.test.Executor;\n@@ -61,0 +39,12 @@\n+\/*\n+ * @test\n+ * @summary jpackage with --type pkg --resource-dir Scripts\n+ * @library \/test\/jdk\/tools\/jpackage\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build PkgScriptsTest\n+ * @requires (os.family == \"mac\")\n+ * @requires (jpackage.test.SQETest == null)\n+ * @run main\/othervm\/timeout=1440 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=PkgScriptsTest\n+ *\/\n@@ -87,0 +77,2 @@\n+        var noScriptRoles = noScriptRoles(customScripts);\n+\n@@ -95,0 +87,7 @@\n+                \/\/ Verify jpackage logs script resources user can customize.\n+                noScriptRoles.stream().map(role -> {\n+                    return JPackageStringBundle.MAIN.cannedFormattedString(\n+                            \"message.no-default-resource\",\n+                            String.format(\"[%s]\", role.resourceCategory()),\n+                            role.scriptName());\n+                }).forEach(cmd::validateOutput);\n@@ -100,2 +99,0 @@\n-                    var noScriptRoles = new HashSet<>(Set.of(customScriptRoles));\n-                    customScripts.stream().map(CustomInstallScript::role).forEach(noScriptRoles::remove);\n@@ -118,0 +115,5 @@\n+        String resourceCategory() {\n+            return JPackageStringBundle.MAIN.cannedFormattedString(\n+                    String.format(\"resource.pkg-%s-script\", scriptName())).getValue();\n+        }\n+\n@@ -168,0 +170,6 @@\n+\n+    private static Set<PkgInstallScript> noScriptRoles(Collection<CustomInstallScript> customScripts) {\n+        var noScriptRoles = new HashSet<>(Set.of(PkgInstallScript.values()));\n+        customScripts.stream().map(CustomInstallScript::role).forEach(noScriptRoles::remove);\n+        return noScriptRoles;\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/PkgScriptsTest.java","additions":35,"deletions":27,"binary":false,"changes":62,"status":"modified"}]}