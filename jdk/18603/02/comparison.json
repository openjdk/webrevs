{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-void CardTableRS::scan_old_to_young_refs(TenuredSpace* sp) {\n+void CardTableRS::scan_old_to_young_refs(TenuredSpace* sp, HeapWord* saved_mark_word) {\n@@ -36,1 +36,1 @@\n-  const MemRegion urasm = sp->used_region_at_save_marks();\n+  const MemRegion urasm = MemRegion(sp->bottom(), saved_mark_word);\n","filename":"src\/hotspot\/share\/gc\/serial\/cardTableRS.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-  void scan_old_to_young_refs(TenuredSpace* sp);\n+  void scan_old_to_young_refs(TenuredSpace* sp, HeapWord* saved_mark_word);\n","filename":"src\/hotspot\/share\/gc\/serial\/cardTableRS.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -904,3 +904,1 @@\n-  eden()->set_saved_mark();\n-  to()->set_saved_mark();\n-  from()->set_saved_mark();\n+  set_saved_mark_word();\n@@ -911,3 +909,1 @@\n-  assert(eden()->saved_mark_at_top(), \"Violated spec - alloc in eden\");\n-  assert(from()->saved_mark_at_top(), \"Violated spec - alloc in from\");\n-  return to()->saved_mark_at_top();\n+  return saved_mark_at_top();\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -142,0 +142,3 @@\n+  \/\/ Saved mark word, for to-space\n+  HeapWord* _saved_mark_word;\n+\n@@ -171,0 +174,4 @@\n+  HeapWord* saved_mark_word()   const    { return _saved_mark_word; }\n+  void set_saved_mark_word()             { _saved_mark_word = to()->top(); }\n+  bool saved_mark_at_top()               { return _saved_mark_word == _to_space->top(); }\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,5 +39,2 @@\n-  \/\/ No allocation in eden and from spaces, so no iteration required.\n-  assert(eden()->saved_mark_at_top(), \"inv\");\n-  assert(from()->saved_mark_at_top(), \"inv\");\n-\n-  to()->oop_since_save_marks_iterate(cl);\n+  Generation::oop_since_save_marks_iterate_impl(cl, to(), _saved_mark_word);\n+  set_saved_mark_word();\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.inline.hpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/space.inline.hpp\"\n@@ -36,0 +37,1 @@\n+#include \"runtime\/prefetch.inline.hpp\"\n@@ -202,0 +204,8 @@\n+  \/\/ Apply \"blk->do_oop\" to the addresses of all reference fields in objects\n+  \/\/ starting with the _saved_mark_word, which was noted during a generation's\n+  \/\/ save_marks and is required to denote the head of an object.\n+  \/\/ Fields in objects allocated by applications of the closure\n+  \/\/ *are* included in the iteration.\n+  \/\/ Updates saved_mark_word to point to just after the last object iterated over.\n+  template <typename OopClosureType>\n+  void oop_since_save_marks_iterate_impl(OopClosureType* blk, ContiguousSpace* space, HeapWord* saved_mark_word);\n@@ -204,0 +214,17 @@\n+template <typename OopClosureType>\n+void Generation::oop_since_save_marks_iterate_impl(OopClosureType* blk, ContiguousSpace* space, HeapWord* saved_mark_word) {\n+  HeapWord* t;\n+  HeapWord* p = saved_mark_word;\n+  assert(p != nullptr, \"expected saved mark\");\n+\n+  const intx interval = PrefetchScanIntervalInBytes;\n+  do {\n+    t = space->top();\n+    while (p < t) {\n+      Prefetch::write(p, interval);\n+      oop m = cast_to_oop(p);\n+      p += m->oop_iterate_size(blk);\n+    }\n+  } while (t < space->top());\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.hpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-  _rs->scan_old_to_young_refs(space());\n+  _rs->scan_old_to_young_refs(space(), saved_mark_word());\n@@ -495,1 +495,1 @@\n-  _the_space->set_saved_mark();\n+  set_saved_mark_word();\n@@ -499,1 +499,1 @@\n-  return _the_space->saved_mark_at_top();\n+  return saved_mark_at_top();\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+  HeapWord*           _saved_mark_word;\n@@ -91,0 +92,3 @@\n+  HeapWord* saved_mark_word() const { return _saved_mark_word; }\n+  void set_saved_mark_word() { _saved_mark_word = _the_space->top(); }\n+  bool saved_mark_at_top() { return _saved_mark_word == space()->top(); }\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,2 @@\n-  _the_space->oop_since_save_marks_iterate(blk);\n+  Generation::oop_since_save_marks_iterate_impl(blk, _the_space, _saved_mark_word);\n+  set_saved_mark_word();\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-  set_saved_mark();\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,3 +68,0 @@\n-  \/\/ Used in support of save_marks()\n-  HeapWord* _saved_mark_word;\n-\n@@ -93,14 +90,0 @@\n-  HeapWord* saved_mark_word() const  { return _saved_mark_word; }\n-\n-  \/\/ Returns a region that is guaranteed to contain (at least) all objects\n-  \/\/ allocated at the time of the last call to \"save_marks\".  If the space\n-  \/\/ initializes its DirtyCardToOopClosure's specifying the \"contig\" option\n-  \/\/ (that is, if the space is contiguous), then this region must contain only\n-  \/\/ such objects: the memregion will be from the bottom of the region to the\n-  \/\/ saved mark.  Otherwise, the \"obj_allocated_since_save_marks\" method of\n-  \/\/ the space must distinguish between objects in the region allocated before\n-  \/\/ and after the call to save marks.\n-  MemRegion used_region_at_save_marks() const {\n-    return MemRegion(bottom(), saved_mark_word());\n-  }\n-\n@@ -163,4 +146,0 @@\n-  void set_saved_mark()            { _saved_mark_word = top();    }\n-\n-  bool saved_mark_at_top() const { return saved_mark_word() == top(); }\n-\n@@ -197,10 +176,0 @@\n-  \/\/ Apply \"blk->do_oop\" to the addresses of all reference fields in objects\n-  \/\/ starting with the _saved_mark_word, which was noted during a generation's\n-  \/\/ save_marks and is required to denote the head of an object.\n-  \/\/ Fields in objects allocated by applications of the closure\n-  \/\/ *are* included in the iteration.\n-  \/\/ Updates _saved_mark_word to point to just after the last object\n-  \/\/ iterated over.\n-  template <typename OopClosureType>\n-  void oop_since_save_marks_iterate(OopClosureType* blk);\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -59,19 +59,0 @@\n-template <typename OopClosureType>\n-void ContiguousSpace::oop_since_save_marks_iterate(OopClosureType* blk) {\n-  HeapWord* t;\n-  HeapWord* p = saved_mark_word();\n-  assert(p != nullptr, \"expected saved mark\");\n-\n-  const intx interval = PrefetchScanIntervalInBytes;\n-  do {\n-    t = top();\n-    while (p < t) {\n-      Prefetch::write(p, interval);\n-      oop m = cast_to_oop(p);\n-      p += m->oop_iterate_size(blk);\n-    }\n-  } while (t < top());\n-\n-  set_saved_mark();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -103,1 +103,0 @@\n-  nonstatic_field(ContiguousSpace,             _saved_mark_word,                              HeapWord*)                             \\\n","filename":"src\/hotspot\/share\/gc\/shared\/vmStructs_gc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}