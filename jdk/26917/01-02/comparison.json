{"files":[{"patch":"@@ -6264,1 +6264,6 @@\n-  if (UseBlockZeroing && cnt > (uint64_t)BlockZeroingLowLimit \/ BytesPerWord) {\n+  \/\/ We do not check UseBlockZeroing here because this is delegated to the\n+  \/\/ zero_blocks stub function that wraps the core logic of zero_words\n+  \/\/ and necessary unrolled str\/stp expanding when the condition is not met.\n+  \/\/ This approach also helps prevent sudden increases in code cache size\n+  \/\/ when zeroing large memory areas in many places.\n+  if (cnt > (uint64_t)BlockZeroingLowLimit \/ BytesPerWord) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -457,1 +457,2 @@\n-    warning(\"BlockZeroingLowLimit will not work when UseBlockZeroing is false\");\n+    warning(\"BlockZeroingLowLimit has been ignored because UseBlockZeroing is disabled\");\n+    FLAG_SET_DEFAULT(BlockZeroingLowLimit, 4 * VM_Version::zva_length());\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}