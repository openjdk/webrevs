{"files":[{"patch":"@@ -314,1 +314,1 @@\n-            breakpointForCommunication();\n+            breakpointForCommunication(debuggeeName);\n@@ -330,24 +330,0 @@\n-    protected void breakpointForCommunication()\n-            throws JDITestRuntimeException {\n-        log2(\"breakpointForCommunication\");\n-\n-        do {\n-            getEventSet();\n-\n-            Event event = eventIterator.nextEvent();\n-            if (event instanceof BreakpointEvent)\n-                return;\n-\n-            log2(\"      received: \" + event);\n-\n-            if (EventFilters.filtered(event, debuggeeName)) {\n-                eventSet.resume();\n-            }\n-            else {\n-                break;\n-            }\n-        } while (true);\n-\n-        throw new JDITestRuntimeException(\"** event IS NOT a breakpoint **\");\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassPrepareRequest\/addClassExclusionFilter\/filter003.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-            breakpointForCommunication();\n+            breakpointForCommunication(debuggeeName);\n@@ -337,24 +337,0 @@\n-    protected void breakpointForCommunication()\n-            throws JDITestRuntimeException {\n-        log2(\"breakpointForCommunication\");\n-\n-        do {\n-            getEventSet();\n-\n-            Event event = eventIterator.nextEvent();\n-            if (event instanceof BreakpointEvent)\n-                return;\n-\n-            log2(\"      received: \" + event);\n-\n-            if (EventFilters.filtered(event, debuggeeName)) {\n-                eventSet.resume();\n-            }\n-            else {\n-                break;\n-            }\n-        } while (true);\n-\n-        throw new JDITestRuntimeException(\"** event IS NOT a breakpoint **\");\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassPrepareRequest\/addClassFilter_rt\/filter_rt002.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -270,1 +270,1 @@\n-            breakpointForCommunication();\n+            breakpointForCommunication(debuggeeName);\n@@ -335,23 +335,0 @@\n-    protected void breakpointForCommunication()\n-            throws JDITestRuntimeException {\n-        log2(\"breakpointForCommunication\");\n-\n-        do {\n-            getEventSet();\n-\n-            Event event = eventIterator.nextEvent();\n-            if (event instanceof BreakpointEvent)\n-                return;\n-\n-            log2(\"      received: \" + event);\n-\n-            if (EventFilters.filtered(event, debuggeeName)) {\n-                eventSet.resume();\n-            }\n-            else {\n-                break;\n-            }\n-        } while (true);\n-\n-        throw new JDITestRuntimeException(\"** event IS NOT a breakpoint **\");\n-    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ClassPrepareRequest\/addClassFilter_s\/filter_s002.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -263,1 +263,1 @@\n-            breakpointForCommunication();\n+            breakpointForCommunication(debuggeeName);\n@@ -369,24 +369,0 @@\n-    protected void breakpointForCommunication()\n-            throws JDITestRuntimeException {\n-        log2(\"breakpointForCommunication\");\n-\n-        do {\n-            getEventSet();\n-\n-            Event event = eventIterator.nextEvent();\n-            if (event instanceof BreakpointEvent)\n-                return;\n-\n-            log2(\"      received: \" + event);\n-\n-            if (EventFilters.filtered(event, debuggeeName)) {\n-                eventSet.resume();\n-            }\n-            else {\n-                break;\n-            }\n-        } while (true);\n-\n-        throw new JDITestRuntimeException(\"** event IS NOT a breakpoint **\");\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/classPrepareRequests\/clsprepreq002.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -262,1 +262,1 @@\n-            breakpointForCommunication();\n+            breakpointForCommunication(debuggeeName);\n@@ -363,24 +363,0 @@\n-    protected void breakpointForCommunication()\n-                 throws JDITestRuntimeException {\n-        log2(\"breakpointForCommunication\");\n-\n-        do {\n-            getEventSet();\n-\n-            Event event = eventIterator.nextEvent();\n-            if (event instanceof BreakpointEvent)\n-                return;\n-\n-            log2(\"      received: \" + event);\n-\n-            if (EventFilters.filtered(event, debuggeeName)) {\n-                eventSet.resume();\n-            }\n-            else {\n-                break;\n-            }\n-        } while (true);\n-\n-        throw new JDITestRuntimeException(\"** event IS NOT a breakpoint **\");\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/EventRequestManager\/methodExitRequests\/methexitreq002.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -266,1 +266,1 @@\n-            breakpointForCommunication();\n+            breakpointForCommunication(debuggeeName);\n@@ -334,26 +334,0 @@\n-    protected void breakpointForCommunication()\n-                 throws JDITestRuntimeException {\n-        log2(\"breakpointForCommunication\");\n-\n-        do {\n-            getEventSet();\n-\n-            Event event = eventIterator.nextEvent();\n-            if (event instanceof BreakpointEvent)\n-                return;\n-\n-            log2(\"      received: \" + event);\n-\n-            if (EventFilters.filtered(event, debuggeeName)) {\n-                eventSet.resume();\n-            }\n-            else {\n-                break;\n-            }\n-        } while (true);\n-\n-        throw new JDITestRuntimeException(\"** event IS NOT a breakpoint **\");\n-    }\n-\n-\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodEntryRequest\/addClassExclusionFilter\/filter002.java","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -266,1 +266,1 @@\n-            breakpointForCommunication();\n+            breakpointForCommunication(debuggeeName);\n@@ -334,24 +334,0 @@\n-    protected void breakpointForCommunication()\n-                   throws JDITestRuntimeException {\n-        log2(\"breakpointForCommunication\");\n-\n-        do {\n-            getEventSet();\n-\n-            Event event = eventIterator.nextEvent();\n-            if (event instanceof BreakpointEvent)\n-                return;\n-\n-            log2(\"      received: \" + event);\n-\n-            if (EventFilters.filtered(event, debuggeeName)) {\n-                eventSet.resume();\n-            }\n-            else {\n-                break;\n-            }\n-        } while (true);\n-\n-        throw new JDITestRuntimeException(\"** event IS NOT a breakpoint **\");\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/MethodExitRequest\/addClassExclusionFilter\/filter002.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"}]}