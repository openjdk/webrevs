{"files":[{"patch":"@@ -939,1 +939,1 @@\n-  \/\/ valid in the production run, so we don't need to verify aot-lined classes again.\n+  \/\/ valid in the production run, so we don't need to verify aot-linked classes again.\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    log_trace(aot, verification)(\"add old verification dependency: %s: %s must be also be archived\",\n+    log_trace(aot, verification)(\"added old verification dependency: %s: %s must be also be archived\",\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,2 +77,0 @@\n-\n-  regen_klass->set_shared_classpath_index(orig_klass->shared_classpath_index());\n","filename":"src\/hotspot\/share\/cds\/regeneratedClasses.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1195,2 +1195,4 @@\n-    \/\/ JFR classes, or other classes defined with JNI DefineClass()\n-    ik->set_shared_classpath_index(-1);\n+    if (loader == nullptr) {\n+      \/\/ JFR classes\n+      ik->set_shared_classpath_index(0);\n+    }\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -219,2 +219,1 @@\n-\/\/ - If <func> returns true for any name, this method terminates immediately.\n-\/\/ - If <func> never returns true, we will iterate over all the names.\n+\/\/ The return value indicates whether we want to keep on iterating or not.\n@@ -222,1 +221,1 @@\n-void SystemDictionaryShared::iterate_all_verification_dependency_names(InstanceKlass* k, DumpTimeClassInfo* info, Function func) {\n+void SystemDictionaryShared::iterate_verification_dependency_names(InstanceKlass* k, DumpTimeClassInfo* info, Function func) {\n@@ -224,0 +223,1 @@\n+  bool cont; \/\/ continue iterating?\n@@ -225,2 +225,3 @@\n-    if (func(info->verifier_constraint_name_at(i))) {\n-      return;\n+    cont = func(info->verifier_constraint_name_at(i));\n+    if (!cont) {\n+      return; \/\/ early termination\n@@ -228,2 +229,3 @@\n-    if (func(info->verifier_constraint_from_name_at(i))) {\n-      return;\n+    cont = func(info->verifier_constraint_from_name_at(i));\n+    if (!cont) {\n+      return; \/\/ early termination\n@@ -235,2 +237,3 @@\n-    if (func(info->old_verifier_dependency_at(i))) {\n-      return;\n+    cont = func(info->old_verifier_dependency_at(i));\n+    if (!cont) {\n+      return; \/\/ early termination\n@@ -241,1 +244,1 @@\n-\/\/ This is a table of classes that need to be check for exclusion.\n+\/\/ This is a table of classes that need to be checked for exclusion.\n@@ -243,1 +246,1 @@\n-  : public ResourceHashtable<InstanceKlass*, DumpTimeClassInfo*, 15889> {\n+  : public HashTable<InstanceKlass*, DumpTimeClassInfo*, 15889> {\n@@ -282,1 +285,1 @@\n-      SystemDictionaryShared::iterate_all_verification_dependency_names(k, info, [&] (Symbol* dependency_class_name) {\n+      SystemDictionaryShared::iterate_verification_dependency_names(k, info, [&] (Symbol* dependency_class_name) {\n@@ -287,1 +290,1 @@\n-        return false; \/\/ Keep iterating.\n+        return true; \/\/ Keep iterating.\n@@ -308,1 +311,1 @@\n-void SystemDictionaryShared::check_exclusion_for_self_and_dependencies(InstanceKlass *ik) {\n+void SystemDictionaryShared::check_exclusion_for_self_and_dependencies(InstanceKlass* ik) {\n@@ -312,1 +315,1 @@\n-  \/\/ This will recursive find ik and all of its exclusion dependencies that have not yet been checked.\n+  \/\/ This will recursively find ik and all of its exclusion dependencies that have not yet been checked.\n@@ -342,1 +345,1 @@\n-    \/\/ Hence, we keep doing a linear scan of the candidate until we stop finding\n+    \/\/ Hence, we keep doing a linear scan of the candidates until we stop finding\n@@ -489,1 +492,1 @@\n-    iterate_all_verification_dependency_names(k, info, [&] (Symbol* dependency_class_name) {\n+    iterate_verification_dependency_names(k, info, [&] (Symbol* dependency_class_name) {\n@@ -494,1 +497,1 @@\n-        return true; \/\/ terminate iteration; k will be excluded\n+        return false; \/\/ terminate iteration; k will be excluded\n@@ -496,1 +499,1 @@\n-        return false; \/\/ keep iterating\n+        return true; \/\/ keep iterating\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":22,"deletions":19,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-  static void iterate_all_verification_dependency_names(InstanceKlass* k, DumpTimeClassInfo* info, Function func);\n+  static void iterate_verification_dependency_names(InstanceKlass* k, DumpTimeClassInfo* info, Function func);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}