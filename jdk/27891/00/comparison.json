{"files":[{"patch":"@@ -1269,1 +1269,1 @@\n-    _ANY_REG32_mask = _ALL_REG32_mask;\n+    _ANY_REG32_mask.assignFrom(_ALL_REG32_mask);\n@@ -1272,1 +1272,1 @@\n-    _ANY_REG_mask = _ALL_REG_mask;\n+    _ANY_REG_mask.assignFrom(_ALL_REG_mask);\n@@ -1274,1 +1274,1 @@\n-    _PTR_REG_mask = _ALL_REG_mask;\n+    _PTR_REG_mask.assignFrom(_ALL_REG_mask);\n@@ -1276,1 +1276,1 @@\n-    _NO_SPECIAL_REG32_mask = _ALL_REG32_mask;\n+    _NO_SPECIAL_REG32_mask.assignFrom(_ALL_REG32_mask);\n@@ -1279,1 +1279,1 @@\n-    _NO_SPECIAL_REG_mask = _ALL_REG_mask;\n+    _NO_SPECIAL_REG_mask.assignFrom(_ALL_REG_mask);\n@@ -1282,1 +1282,1 @@\n-    _NO_SPECIAL_PTR_REG_mask = _ALL_REG_mask;\n+    _NO_SPECIAL_PTR_REG_mask.assignFrom(_ALL_REG_mask);\n@@ -1300,1 +1300,1 @@\n-    _NO_SPECIAL_NO_RFP_PTR_REG_mask = _NO_SPECIAL_PTR_REG_mask;\n+    _NO_SPECIAL_NO_RFP_PTR_REG_mask.assignFrom(_NO_SPECIAL_PTR_REG_mask);\n@@ -2548,1 +2548,1 @@\n-RegMask Matcher::divI_proj_mask() {\n+const RegMask& Matcher::divI_proj_mask() {\n@@ -2550,1 +2550,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -2554,1 +2554,1 @@\n-RegMask Matcher::modI_proj_mask() {\n+const RegMask& Matcher::modI_proj_mask() {\n@@ -2556,1 +2556,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -2560,1 +2560,1 @@\n-RegMask Matcher::divL_proj_mask() {\n+const RegMask& Matcher::divL_proj_mask() {\n@@ -2562,1 +2562,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -2566,1 +2566,1 @@\n-RegMask Matcher::modL_proj_mask() {\n+const RegMask& Matcher::modL_proj_mask() {\n@@ -2568,1 +2568,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1134,1 +1134,1 @@\n-RegMask Matcher::divI_proj_mask() {\n+const RegMask& Matcher::divI_proj_mask() {\n@@ -1136,1 +1136,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -1140,1 +1140,1 @@\n-RegMask Matcher::modI_proj_mask() {\n+const RegMask& Matcher::modI_proj_mask() {\n@@ -1142,1 +1142,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -1146,1 +1146,1 @@\n-RegMask Matcher::divL_proj_mask() {\n+const RegMask& Matcher::divL_proj_mask() {\n@@ -1148,1 +1148,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -1152,1 +1152,1 @@\n-RegMask Matcher::modL_proj_mask() {\n+const RegMask& Matcher::modL_proj_mask() {\n@@ -1154,1 +1154,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2453,1 +2453,1 @@\n-RegMask Matcher::divI_proj_mask() {\n+const RegMask& Matcher::divI_proj_mask() {\n@@ -2455,1 +2455,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -2459,1 +2459,1 @@\n-RegMask Matcher::modI_proj_mask() {\n+const RegMask& Matcher::modI_proj_mask() {\n@@ -2461,1 +2461,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -2465,1 +2465,1 @@\n-RegMask Matcher::divL_proj_mask() {\n+const RegMask& Matcher::divL_proj_mask() {\n@@ -2467,1 +2467,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -2471,1 +2471,1 @@\n-RegMask Matcher::modL_proj_mask() {\n+const RegMask& Matcher::modL_proj_mask() {\n@@ -2473,1 +2473,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1095,1 +1095,1 @@\n-  _ANY_REG32_mask = _ALL_REG32_mask;\n+  _ANY_REG32_mask.assignFrom(_ALL_REG32_mask);\n@@ -1098,1 +1098,1 @@\n-  _ANY_REG_mask = _ALL_REG_mask;\n+  _ANY_REG_mask.assignFrom(_ALL_REG_mask);\n@@ -1101,1 +1101,1 @@\n-  _PTR_REG_mask = _ALL_REG_mask;\n+  _PTR_REG_mask.assignFrom(_ALL_REG_mask);\n@@ -1104,1 +1104,1 @@\n-  _NO_SPECIAL_REG32_mask = _ALL_REG32_mask;\n+  _NO_SPECIAL_REG32_mask.assignFrom(_ALL_REG32_mask);\n@@ -1107,1 +1107,1 @@\n-  _NO_SPECIAL_REG_mask = _ALL_REG_mask;\n+  _NO_SPECIAL_REG_mask.assignFrom(_ALL_REG_mask);\n@@ -1110,1 +1110,1 @@\n-  _NO_SPECIAL_PTR_REG_mask = _ALL_REG_mask;\n+  _NO_SPECIAL_PTR_REG_mask.assignFrom(_ALL_REG_mask);\n@@ -1127,1 +1127,1 @@\n-  _NO_SPECIAL_NO_FP_PTR_REG_mask = _NO_SPECIAL_PTR_REG_mask;\n+  _NO_SPECIAL_NO_FP_PTR_REG_mask.assignFrom(_NO_SPECIAL_PTR_REG_mask);\n@@ -2132,1 +2132,1 @@\n-RegMask Matcher::divI_proj_mask() {\n+const RegMask& Matcher::divI_proj_mask() {\n@@ -2134,1 +2134,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -2138,1 +2138,1 @@\n-RegMask Matcher::modI_proj_mask() {\n+const RegMask& Matcher::modI_proj_mask() {\n@@ -2140,1 +2140,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -2144,1 +2144,1 @@\n-RegMask Matcher::divL_proj_mask() {\n+const RegMask& Matcher::divL_proj_mask() {\n@@ -2146,1 +2146,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n@@ -2150,1 +2150,1 @@\n-RegMask Matcher::modL_proj_mask() {\n+const RegMask& Matcher::modL_proj_mask() {\n@@ -2152,1 +2152,1 @@\n-  return RegMask();\n+  return RegMask::Empty;\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1964,1 +1964,1 @@\n-RegMask Matcher::divI_proj_mask() {\n+const RegMask& Matcher::divI_proj_mask() {\n@@ -1969,1 +1969,1 @@\n-RegMask Matcher::modI_proj_mask() {\n+const RegMask& Matcher::modI_proj_mask() {\n@@ -1974,1 +1974,1 @@\n-RegMask Matcher::divL_proj_mask() {\n+const RegMask& Matcher::divL_proj_mask() {\n@@ -1979,1 +1979,1 @@\n-RegMask Matcher::modL_proj_mask() {\n+const RegMask& Matcher::modL_proj_mask() {\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-  _ANY_REG_mask = _ALL_REG_mask;\n+  _ANY_REG_mask.assignFrom(_ALL_REG_mask);\n@@ -511,1 +511,1 @@\n-  _PTR_REG_mask = _ANY_REG_mask;\n+  _PTR_REG_mask.assignFrom(_ANY_REG_mask);\n@@ -523,1 +523,1 @@\n-  _STACK_OR_PTR_REG_mask = _PTR_REG_mask;\n+  _STACK_OR_PTR_REG_mask.assignFrom(_PTR_REG_mask);\n@@ -526,1 +526,1 @@\n-  _PTR_REG_NO_RBP_mask = _PTR_REG_mask;\n+  _PTR_REG_NO_RBP_mask.assignFrom(_PTR_REG_mask);\n@@ -530,1 +530,1 @@\n-  _PTR_NO_RAX_REG_mask = _PTR_REG_mask;\n+  _PTR_NO_RAX_REG_mask.assignFrom(_PTR_REG_mask);\n@@ -534,1 +534,1 @@\n-  _PTR_NO_RAX_RBX_REG_mask = _PTR_NO_RAX_REG_mask;\n+  _PTR_NO_RAX_RBX_REG_mask.assignFrom(_PTR_NO_RAX_REG_mask);\n@@ -539,2 +539,2 @@\n-  _LONG_REG_mask = _PTR_REG_mask;\n-  _STACK_OR_LONG_REG_mask = _LONG_REG_mask;\n+  _LONG_REG_mask.assignFrom(_PTR_REG_mask);\n+  _STACK_OR_LONG_REG_mask.assignFrom(_LONG_REG_mask);\n@@ -543,1 +543,1 @@\n-  _LONG_NO_RAX_RDX_REG_mask = _LONG_REG_mask;\n+  _LONG_NO_RAX_RDX_REG_mask.assignFrom(_LONG_REG_mask);\n@@ -549,1 +549,1 @@\n-  _LONG_NO_RCX_REG_mask = _LONG_REG_mask;\n+  _LONG_NO_RCX_REG_mask.assignFrom(_LONG_REG_mask);\n@@ -553,1 +553,1 @@\n-  _LONG_NO_RBP_R13_REG_mask = _LONG_REG_mask;\n+  _LONG_NO_RBP_R13_REG_mask.assignFrom(_LONG_REG_mask);\n@@ -559,1 +559,1 @@\n-  _INT_REG_mask = _ALL_INT_REG_mask;\n+  _INT_REG_mask.assignFrom(_ALL_INT_REG_mask);\n@@ -573,1 +573,1 @@\n-  _STACK_OR_INT_REG_mask = _INT_REG_mask;\n+  _STACK_OR_INT_REG_mask.assignFrom(_INT_REG_mask);\n@@ -576,1 +576,1 @@\n-  _INT_NO_RAX_RDX_REG_mask = _INT_REG_mask;\n+  _INT_NO_RAX_RDX_REG_mask.assignFrom(_INT_REG_mask);\n@@ -580,1 +580,1 @@\n-  _INT_NO_RCX_REG_mask = _INT_REG_mask;\n+  _INT_NO_RCX_REG_mask.assignFrom(_INT_REG_mask);\n@@ -583,1 +583,1 @@\n-  _INT_NO_RBP_R13_REG_mask = _INT_REG_mask;\n+  _INT_NO_RBP_R13_REG_mask.assignFrom(_INT_REG_mask);\n@@ -589,1 +589,1 @@\n-  _FLOAT_REG_mask = VM_Version::supports_evex() ? _FLOAT_REG_EVEX_mask : _FLOAT_REG_LEGACY_mask;\n+  _FLOAT_REG_mask.assignFrom(VM_Version::supports_evex() ? _FLOAT_REG_EVEX_mask : _FLOAT_REG_LEGACY_mask);\n@@ -1681,1 +1681,1 @@\n-RegMask Matcher::divI_proj_mask() {\n+const RegMask& Matcher::divI_proj_mask() {\n@@ -1686,1 +1686,1 @@\n-RegMask Matcher::modI_proj_mask() {\n+const RegMask& Matcher::modI_proj_mask() {\n@@ -1691,1 +1691,1 @@\n-RegMask Matcher::divL_proj_mask() {\n+const RegMask& Matcher::divL_proj_mask() {\n@@ -1696,1 +1696,1 @@\n-RegMask Matcher::modL_proj_mask() {\n+const RegMask& Matcher::modL_proj_mask() {\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-  void set_mask( const RegMask &rm ) { _mask = rm; DEBUG_ONLY(_msize_valid=0;)}\n+  void set_mask(const RegMask& rm) { _mask.assignFrom(rm); DEBUG_ONLY(_msize_valid = 0;) }\n","filename":"src\/hotspot\/share\/opto\/chaitin.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1671,1 +1671,1 @@\n-    rm = match->divI_proj_mask();\n+    rm.assignFrom(match->divI_proj_mask());\n@@ -1674,1 +1674,1 @@\n-    rm = match->modI_proj_mask();\n+    rm.assignFrom(match->modI_proj_mask());\n@@ -1686,1 +1686,1 @@\n-    rm = match->divL_proj_mask();\n+    rm.assignFrom(match->divL_proj_mask());\n@@ -1689,1 +1689,1 @@\n-    rm = match->modL_proj_mask();\n+    rm.assignFrom(match->modL_proj_mask());\n@@ -1724,1 +1724,1 @@\n-    rm = match->divI_proj_mask();\n+    rm.assignFrom(match->divI_proj_mask());\n@@ -1727,1 +1727,1 @@\n-    rm = match->modI_proj_mask();\n+    rm.assignFrom(match->modI_proj_mask());\n@@ -1739,1 +1739,1 @@\n-    rm = match->divL_proj_mask();\n+    rm.assignFrom(match->divL_proj_mask());\n@@ -1742,1 +1742,1 @@\n-    rm = match->modL_proj_mask();\n+    rm.assignFrom(match->modL_proj_mask());\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -732,1 +732,1 @@\n-    old = interfering_lrg.mask();\n+    old.assignFrom(interfering_lrg.mask());\n@@ -741,1 +741,1 @@\n-      r2mask = mask;\n+      r2mask.assignFrom(mask);\n","filename":"src\/hotspot\/share\/opto\/ifg.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-    _return_value_mask = RegMask(regs.first());\n+    _return_value_mask.assignFrom(RegMask(regs.first()));\n@@ -425,5 +425,5 @@\n-  rms[TypeFunc::Control  ] = RegMask::Empty;\n-  rms[TypeFunc::I_O      ] = RegMask::Empty;\n-  rms[TypeFunc::Memory   ] = RegMask::Empty;\n-  rms[TypeFunc::ReturnAdr] = ret_adr;\n-  rms[TypeFunc::FramePtr ] = fp;\n+  rms[TypeFunc::Control  ].assignFrom(RegMask::Empty);\n+  rms[TypeFunc::I_O      ].assignFrom(RegMask::Empty);\n+  rms[TypeFunc::Memory   ].assignFrom(RegMask::Empty);\n+  rms[TypeFunc::ReturnAdr].assignFrom(ret_adr);\n+  rms[TypeFunc::FramePtr ].assignFrom(fp);\n@@ -491,1 +491,1 @@\n-  *idealreg2spillmask[Op_RegP] = *idealreg2regmask[Op_RegP];\n+  idealreg2spillmask[Op_RegP]->assignFrom(*idealreg2regmask[Op_RegP]);\n@@ -493,3 +493,3 @@\n-  *idealreg2spillmask[Op_RegN] = *idealreg2regmask[Op_RegN];\n-   idealreg2spillmask[Op_RegN]->OR(C->FIRST_STACK_mask());\n-   idealreg2spillmask[Op_RegP]->OR(aligned_stack_mask);\n+  idealreg2spillmask[Op_RegN]->assignFrom(*idealreg2regmask[Op_RegN]);\n+  idealreg2spillmask[Op_RegN]->OR(C->FIRST_STACK_mask());\n+  idealreg2spillmask[Op_RegP]->OR(aligned_stack_mask);\n@@ -499,8 +499,8 @@\n-  *idealreg2spillmask[Op_RegI] = *idealreg2regmask[Op_RegI];\n-   idealreg2spillmask[Op_RegI]->OR(C->FIRST_STACK_mask());\n-  *idealreg2spillmask[Op_RegL] = *idealreg2regmask[Op_RegL];\n-   idealreg2spillmask[Op_RegL]->OR(aligned_stack_mask);\n-  *idealreg2spillmask[Op_RegF] = *idealreg2regmask[Op_RegF];\n-   idealreg2spillmask[Op_RegF]->OR(C->FIRST_STACK_mask());\n-  *idealreg2spillmask[Op_RegD] = *idealreg2regmask[Op_RegD];\n-   idealreg2spillmask[Op_RegD]->OR(aligned_stack_mask);\n+  idealreg2spillmask[Op_RegI]->assignFrom(*idealreg2regmask[Op_RegI]);\n+  idealreg2spillmask[Op_RegI]->OR(C->FIRST_STACK_mask());\n+  idealreg2spillmask[Op_RegL]->assignFrom(*idealreg2regmask[Op_RegL]);\n+  idealreg2spillmask[Op_RegL]->OR(aligned_stack_mask);\n+  idealreg2spillmask[Op_RegF]->assignFrom(*idealreg2regmask[Op_RegF]);\n+  idealreg2spillmask[Op_RegF]->OR(C->FIRST_STACK_mask());\n+  idealreg2spillmask[Op_RegD]->assignFrom(*idealreg2regmask[Op_RegD]);\n+  idealreg2spillmask[Op_RegD]->OR(aligned_stack_mask);\n@@ -509,2 +509,2 @@\n-    *idealreg2spillmask[Op_RegVectMask] = *idealreg2regmask[Op_RegVectMask];\n-     idealreg2spillmask[Op_RegVectMask]->OR(aligned_stack_mask);\n+    idealreg2spillmask[Op_RegVectMask]->assignFrom(*idealreg2regmask[Op_RegVectMask]);\n+    idealreg2spillmask[Op_RegVectMask]->OR(aligned_stack_mask);\n@@ -512,1 +512,1 @@\n-    *idealreg2spillmask[Op_RegVectMask] = RegMask::Empty;\n+    idealreg2spillmask[Op_RegVectMask]->assignFrom(RegMask::Empty);\n@@ -516,2 +516,2 @@\n-    *idealreg2spillmask[Op_VecS] = *idealreg2regmask[Op_VecS];\n-     idealreg2spillmask[Op_VecS]->OR(C->FIRST_STACK_mask());\n+    idealreg2spillmask[Op_VecS]->assignFrom(*idealreg2regmask[Op_VecS]);\n+    idealreg2spillmask[Op_VecS]->OR(C->FIRST_STACK_mask());\n@@ -519,1 +519,1 @@\n-    *idealreg2spillmask[Op_VecS] = RegMask::Empty;\n+    idealreg2spillmask[Op_VecS]->assignFrom(RegMask::Empty);\n@@ -525,2 +525,2 @@\n-    *idealreg2spillmask[Op_VecD] = *idealreg2regmask[Op_VecD];\n-     idealreg2spillmask[Op_VecD]->OR(aligned_stack_mask);\n+    idealreg2spillmask[Op_VecD]->assignFrom(*idealreg2regmask[Op_VecD]);\n+    idealreg2spillmask[Op_VecD]->OR(aligned_stack_mask);\n@@ -528,1 +528,1 @@\n-    *idealreg2spillmask[Op_VecD] = RegMask::Empty;\n+    idealreg2spillmask[Op_VecD]->assignFrom(RegMask::Empty);\n@@ -544,4 +544,4 @@\n-     aligned_stack_mask.clear_to_sets(RegMask::SlotsPerVecX);\n-     assert(aligned_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n-    *idealreg2spillmask[Op_VecX] = *idealreg2regmask[Op_VecX];\n-     idealreg2spillmask[Op_VecX]->OR(aligned_stack_mask);\n+    aligned_stack_mask.clear_to_sets(RegMask::SlotsPerVecX);\n+    assert(aligned_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n+    idealreg2spillmask[Op_VecX]->assignFrom(*idealreg2regmask[Op_VecX]);\n+    idealreg2spillmask[Op_VecX]->OR(aligned_stack_mask);\n@@ -549,1 +549,1 @@\n-    *idealreg2spillmask[Op_VecX] = RegMask::Empty;\n+    idealreg2spillmask[Op_VecX]->assignFrom(RegMask::Empty);\n@@ -559,4 +559,4 @@\n-     aligned_stack_mask.clear_to_sets(RegMask::SlotsPerVecY);\n-     assert(aligned_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n-    *idealreg2spillmask[Op_VecY] = *idealreg2regmask[Op_VecY];\n-     idealreg2spillmask[Op_VecY]->OR(aligned_stack_mask);\n+    aligned_stack_mask.clear_to_sets(RegMask::SlotsPerVecY);\n+    assert(aligned_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n+    idealreg2spillmask[Op_VecY]->assignFrom(*idealreg2regmask[Op_VecY]);\n+    idealreg2spillmask[Op_VecY]->OR(aligned_stack_mask);\n@@ -564,1 +564,1 @@\n-    *idealreg2spillmask[Op_VecY] = RegMask::Empty;\n+    idealreg2spillmask[Op_VecY]->assignFrom(RegMask::Empty);\n@@ -574,4 +574,4 @@\n-     aligned_stack_mask.clear_to_sets(RegMask::SlotsPerVecZ);\n-     assert(aligned_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n-    *idealreg2spillmask[Op_VecZ] = *idealreg2regmask[Op_VecZ];\n-     idealreg2spillmask[Op_VecZ]->OR(aligned_stack_mask);\n+    aligned_stack_mask.clear_to_sets(RegMask::SlotsPerVecZ);\n+    assert(aligned_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n+    idealreg2spillmask[Op_VecZ]->assignFrom(*idealreg2regmask[Op_VecZ]);\n+    idealreg2spillmask[Op_VecZ]->OR(aligned_stack_mask);\n@@ -579,1 +579,1 @@\n-    *idealreg2spillmask[Op_VecZ] = RegMask::Empty;\n+    idealreg2spillmask[Op_VecZ]->assignFrom(RegMask::Empty);\n@@ -596,1 +596,1 @@\n-      *idealreg2spillmask[Op_RegVectMask] = *idealreg2regmask[Op_RegVectMask];\n+      idealreg2spillmask[Op_RegVectMask]->assignFrom(*idealreg2regmask[Op_RegVectMask]);\n@@ -608,4 +608,4 @@\n-     scalable_stack_mask.clear_to_sets(RegMask::SlotsPerVecA);\n-     assert(scalable_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n-    *idealreg2spillmask[Op_VecA] = *idealreg2regmask[Op_VecA];\n-     idealreg2spillmask[Op_VecA]->OR(scalable_stack_mask);\n+    scalable_stack_mask.clear_to_sets(RegMask::SlotsPerVecA);\n+    assert(scalable_stack_mask.is_infinite_stack(), \"should be infinite stack\");\n+    idealreg2spillmask[Op_VecA]->assignFrom(*idealreg2regmask[Op_VecA]);\n+    idealreg2spillmask[Op_VecA]->OR(scalable_stack_mask);\n@@ -613,1 +613,1 @@\n-    *idealreg2spillmask[Op_VecA] = RegMask::Empty;\n+    idealreg2spillmask[Op_VecA]->assignFrom(RegMask::Empty);\n@@ -642,14 +642,14 @@\n-  *idealreg2debugmask  [Op_RegN] = *idealreg2spillmask[Op_RegN];\n-  *idealreg2debugmask  [Op_RegI] = *idealreg2spillmask[Op_RegI];\n-  *idealreg2debugmask  [Op_RegL] = *idealreg2spillmask[Op_RegL];\n-  *idealreg2debugmask  [Op_RegF] = *idealreg2spillmask[Op_RegF];\n-  *idealreg2debugmask  [Op_RegD] = *idealreg2spillmask[Op_RegD];\n-  *idealreg2debugmask  [Op_RegP] = *idealreg2spillmask[Op_RegP];\n-  *idealreg2debugmask  [Op_RegVectMask] = *idealreg2spillmask[Op_RegVectMask];\n-\n-  *idealreg2debugmask  [Op_VecA] = *idealreg2spillmask[Op_VecA];\n-  *idealreg2debugmask  [Op_VecS] = *idealreg2spillmask[Op_VecS];\n-  *idealreg2debugmask  [Op_VecD] = *idealreg2spillmask[Op_VecD];\n-  *idealreg2debugmask  [Op_VecX] = *idealreg2spillmask[Op_VecX];\n-  *idealreg2debugmask  [Op_VecY] = *idealreg2spillmask[Op_VecY];\n-  *idealreg2debugmask  [Op_VecZ] = *idealreg2spillmask[Op_VecZ];\n+  idealreg2debugmask[Op_RegN]->assignFrom(*idealreg2spillmask[Op_RegN]);\n+  idealreg2debugmask[Op_RegI]->assignFrom(*idealreg2spillmask[Op_RegI]);\n+  idealreg2debugmask[Op_RegL]->assignFrom(*idealreg2spillmask[Op_RegL]);\n+  idealreg2debugmask[Op_RegF]->assignFrom(*idealreg2spillmask[Op_RegF]);\n+  idealreg2debugmask[Op_RegD]->assignFrom(*idealreg2spillmask[Op_RegD]);\n+  idealreg2debugmask[Op_RegP]->assignFrom(*idealreg2spillmask[Op_RegP]);\n+  idealreg2debugmask[Op_RegVectMask]->assignFrom(*idealreg2spillmask[Op_RegVectMask]);\n+\n+  idealreg2debugmask[Op_VecA]->assignFrom(*idealreg2spillmask[Op_VecA]);\n+  idealreg2debugmask[Op_VecS]->assignFrom(*idealreg2spillmask[Op_VecS]);\n+  idealreg2debugmask[Op_VecD]->assignFrom(*idealreg2spillmask[Op_VecD]);\n+  idealreg2debugmask[Op_VecX]->assignFrom(*idealreg2spillmask[Op_VecX]);\n+  idealreg2debugmask[Op_VecY]->assignFrom(*idealreg2spillmask[Op_VecY]);\n+  idealreg2debugmask[Op_VecZ]->assignFrom(*idealreg2spillmask[Op_VecZ]);\n@@ -705,2 +705,3 @@\n-  if (ret_edge_cnt > TypeFunc::Parms)\n-    ret_rms[TypeFunc::Parms+0] = _return_value_mask;\n+  if (ret_edge_cnt > TypeFunc::Parms) {\n+    ret_rms[TypeFunc::Parms + 0].assignFrom(_return_value_mask);\n+  }\n@@ -718,1 +719,1 @@\n-    reth_rms[TypeFunc::Parms] = mreg2regmask[reg];\n+    reth_rms[TypeFunc::Parms].assignFrom(mreg2regmask[reg]);\n@@ -740,2 +741,2 @@\n-      tail_call_rms[TypeFunc::Parms+0] = m->MachNode::in_RegMask(TypeFunc::Parms+0);\n-      tail_call_rms[TypeFunc::Parms+1] = m->MachNode::in_RegMask(TypeFunc::Parms+1);\n+      tail_call_rms[TypeFunc::Parms + 0].assignFrom(m->MachNode::in_RegMask(TypeFunc::Parms + 0));\n+      tail_call_rms[TypeFunc::Parms + 1].assignFrom(m->MachNode::in_RegMask(TypeFunc::Parms + 1));\n@@ -753,2 +754,2 @@\n-      tail_jump_rms[TypeFunc::Parms+0] = m->MachNode::in_RegMask(TypeFunc::Parms+0);\n-      tail_jump_rms[TypeFunc::Parms+1] = m->MachNode::in_RegMask(TypeFunc::Parms+1);\n+      tail_jump_rms[TypeFunc::Parms + 0].assignFrom(m->MachNode::in_RegMask(TypeFunc::Parms + 0));\n+      tail_jump_rms[TypeFunc::Parms + 1].assignFrom(m->MachNode::in_RegMask(TypeFunc::Parms + 1));\n@@ -787,5 +788,5 @@\n-      ret_rms      [      ret_edge_cnt] = mreg2regmask[i];\n-      reth_rms     [     reth_edge_cnt] = mreg2regmask[i];\n-      tail_call_rms[tail_call_edge_cnt] = mreg2regmask[i];\n-      tail_jump_rms[tail_jump_edge_cnt] = mreg2regmask[i];\n-      forw_exc_rms [ forw_exc_edge_cnt] = mreg2regmask[i];\n+      ret_rms      [      ret_edge_cnt].assignFrom(mreg2regmask[i]);\n+      reth_rms     [     reth_edge_cnt].assignFrom(mreg2regmask[i]);\n+      tail_call_rms[tail_call_edge_cnt].assignFrom(mreg2regmask[i]);\n+      tail_jump_rms[tail_jump_edge_cnt].assignFrom(mreg2regmask[i]);\n+      forw_exc_rms [ forw_exc_edge_cnt].assignFrom(mreg2regmask[i]);\n@@ -794,1 +795,1 @@\n-      halt_rms     [     halt_edge_cnt] = *idealreg2spillmask[_register_save_type[i]];\n+      halt_rms     [     halt_edge_cnt].assignFrom(*idealreg2spillmask[_register_save_type[i]]);\n@@ -818,6 +819,6 @@\n-        ret_rms      [      ret_edge_cnt] = RegMask::Empty;\n-        reth_rms     [     reth_edge_cnt] = RegMask::Empty;\n-        tail_call_rms[tail_call_edge_cnt] = RegMask::Empty;\n-        tail_jump_rms[tail_jump_edge_cnt] = RegMask::Empty;\n-        forw_exc_rms [ forw_exc_edge_cnt] = RegMask::Empty;\n-        halt_rms     [     halt_edge_cnt] = RegMask::Empty;\n+        ret_rms      [      ret_edge_cnt].assignFrom(RegMask::Empty);\n+        reth_rms     [     reth_edge_cnt].assignFrom(RegMask::Empty);\n+        tail_call_rms[tail_call_edge_cnt].assignFrom(RegMask::Empty);\n+        tail_jump_rms[tail_jump_edge_cnt].assignFrom(RegMask::Empty);\n+        forw_exc_rms [ forw_exc_edge_cnt].assignFrom(RegMask::Empty);\n+        halt_rms     [     halt_edge_cnt].assignFrom(RegMask::Empty);\n@@ -846,6 +847,6 @@\n-        ret_rms      [      ret_edge_cnt] = RegMask::Empty;\n-        reth_rms     [     reth_edge_cnt] = RegMask::Empty;\n-        tail_call_rms[tail_call_edge_cnt] = RegMask::Empty;\n-        tail_jump_rms[tail_jump_edge_cnt] = RegMask::Empty;\n-        forw_exc_rms [ forw_exc_edge_cnt] = RegMask::Empty;\n-        halt_rms     [     halt_edge_cnt] = RegMask::Empty;\n+        ret_rms      [      ret_edge_cnt].assignFrom(RegMask::Empty);\n+        reth_rms     [     reth_edge_cnt].assignFrom(RegMask::Empty);\n+        tail_call_rms[tail_call_edge_cnt].assignFrom(RegMask::Empty);\n+        tail_jump_rms[tail_jump_edge_cnt].assignFrom(RegMask::Empty);\n+        forw_exc_rms [ forw_exc_edge_cnt].assignFrom(RegMask::Empty);\n+        halt_rms     [     halt_edge_cnt].assignFrom(RegMask::Empty);\n@@ -878,1 +879,1 @@\n-  c_frame_ptr_mask = RegMask(c_frame_pointer());\n+  c_frame_ptr_mask.assignFrom(RegMask(c_frame_pointer()));\n@@ -1243,2 +1244,2 @@\n-  msfpt->_in_rms[TypeFunc::ReturnAdr] = _return_addr_mask;\n-  msfpt->_in_rms[TypeFunc::FramePtr ] = c_frame_ptr_mask;\n+  msfpt->_in_rms[TypeFunc::ReturnAdr].assignFrom(_return_addr_mask);\n+  msfpt->_in_rms[TypeFunc::FramePtr ].assignFrom(c_frame_ptr_mask);\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":91,"deletions":90,"binary":false,"changes":181,"status":"modified"},{"patch":"@@ -411,1 +411,1 @@\n-  static RegMask divI_proj_mask();\n+  static const RegMask& divI_proj_mask();\n@@ -413,1 +413,1 @@\n-  static RegMask modI_proj_mask();\n+  static const RegMask& modI_proj_mask();\n@@ -416,1 +416,1 @@\n-  static RegMask divL_proj_mask();\n+  static const RegMask& divL_proj_mask();\n@@ -418,1 +418,1 @@\n-  static RegMask modL_proj_mask();\n+  static const RegMask& modL_proj_mask();\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -770,1 +770,1 @@\n-          RegMask tmp = lrgs(lidx).mask();\n+          RegMask tmp(lrgs(lidx).mask());\n","filename":"src\/hotspot\/share\/opto\/postaloc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -302,33 +302,0 @@\n-  \/\/ Make us a copy of src\n-  void copy(const RegMask& src) {\n-    assert(_offset == src._offset, \"offset mismatch\");\n-    _hwm = src._hwm;\n-    _lwm = src._lwm;\n-\n-    \/\/ Copy base mask\n-    memcpy(_rm_word, src._rm_word, sizeof(uintptr_t) * RM_SIZE_IN_WORDS);\n-    _infinite_stack = src._infinite_stack;\n-\n-    \/\/ Copy extension\n-    if (src._rm_word_ext != nullptr) {\n-      assert(src._rm_size_in_words > RM_SIZE_IN_WORDS, \"sanity\");\n-      assert(_original_ext_address == &_rm_word_ext, \"clone sanity check\");\n-      grow(src._rm_size_in_words, false);\n-      memcpy(_rm_word_ext, src._rm_word_ext,\n-             sizeof(uintptr_t) * (src._rm_size_in_words - RM_SIZE_IN_WORDS));\n-    }\n-\n-    \/\/ If the source is smaller than us, we need to set the gap according to\n-    \/\/ the sources infinite_stack flag.\n-    if (src._rm_size_in_words < _rm_size_in_words) {\n-      int value = 0;\n-      if (src.is_infinite_stack()) {\n-        value = 0xFF;\n-        _hwm = rm_word_max_index();\n-      }\n-      set_range(src._rm_size_in_words, value, _rm_size_in_words - src._rm_size_in_words);\n-    }\n-\n-    assert(valid_watermarks(), \"post-condition\");\n-  }\n-\n@@ -456,3 +423,18 @@\n-  \/\/ ----------------------------------------\n-  \/\/ Deep copying constructors and assignment\n-  \/\/ ----------------------------------------\n+  \/\/ Make us represent the same set of registers as src.\n+  void assignFrom(const RegMask& src) {\n+    assert(_offset == src._offset, \"offset mismatch\");\n+    _hwm = src._hwm;\n+    _lwm = src._lwm;\n+\n+    \/\/ Copy base mask\n+    memcpy(_rm_word, src._rm_word, sizeof(uintptr_t) * RM_SIZE_IN_WORDS);\n+    _infinite_stack = src._infinite_stack;\n+\n+    \/\/ Copy extension\n+    if (src._rm_word_ext != nullptr) {\n+      assert(src._rm_size_in_words > RM_SIZE_IN_WORDS, \"sanity\");\n+      assert(_original_ext_address == &_rm_word_ext, \"clone sanity check\");\n+      grow(src._rm_size_in_words, false);\n+      memcpy(_rm_word_ext, src._rm_word_ext,\n+             sizeof(uintptr_t) * (src._rm_size_in_words - RM_SIZE_IN_WORDS));\n+    }\n@@ -460,0 +442,17 @@\n+    \/\/ If the source is smaller than us, we need to set the gap according to\n+    \/\/ the sources infinite_stack flag.\n+    if (src._rm_size_in_words < _rm_size_in_words) {\n+      int value = 0;\n+      if (src.is_infinite_stack()) {\n+        value = 0xFF;\n+        _hwm = rm_word_max_index();\n+      }\n+      set_range(src._rm_size_in_words, value, _rm_size_in_words - src._rm_size_in_words);\n+    }\n+\n+    assert(valid_watermarks(), \"post-condition\");\n+  }\n+\n+  \/\/ Construct from other register mask (deep copy) and register an arena\n+  \/\/ for potential register mask extension. Passing nullptr as arena disables\n+  \/\/ extension.\n@@ -462,1 +461,1 @@\n-    copy(rm);\n+    assignFrom(rm);\n@@ -465,1 +464,2 @@\n-  RegMask(const RegMask& rm) : RegMask(rm, nullptr) {}\n+  \/\/ Copy constructor (deep copy). By default does not allow extension.\n+  explicit RegMask(const RegMask& rm) : RegMask(rm, nullptr) {}\n@@ -467,4 +467,2 @@\n-  RegMask& operator=(const RegMask& rm) {\n-    copy(rm);\n-    return *this;\n-  }\n+  \/\/ Disallow copy assignment (use assignFrom instead)\n+  RegMask& operator=(const RegMask&) = delete;\n","filename":"src\/hotspot\/share\/opto\/regmask.hpp","additions":40,"deletions":42,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -526,2 +526,2 @@\n-  \/\/ Cannot copy with different offsets\n-  rm2 = rm1;\n+  \/\/ Cannot assign with different offsets\n+  rm2.assignFrom(rm1);\n@@ -1244,2 +1244,2 @@\n-    \/\/ Copy source to destination\n-    dst = src;\n+    \/\/ Set destination to source\n+    dst.assignFrom(src);\n","filename":"test\/hotspot\/gtest\/opto\/test_regmask.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}