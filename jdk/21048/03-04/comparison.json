{"files":[{"patch":"@@ -936,0 +936,2 @@\n+  \/\/ module paths are stored in sorted order in the CDS archive.\n+  module_paths->sort(ClassLoaderExt::compare_module_path_by_name);\n@@ -955,2 +957,0 @@\n-  \/\/ module paths are stored in sorted order in the CDS archive.\n-  module_paths->sort(ClassLoaderExt::compare_module_path_by_name);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -878,2 +878,1 @@\n-  ResourceMark rm(THREAD);\n-  if ((strcmp(k->name()->as_C_string(), \"jdk\/internal\/module\/ArchivedModuleGraph\") == 0) &&\n+  if (k->name()->equals(\"jdk\/internal\/module\/ArchivedModuleGraph\") &&\n@@ -883,0 +882,2 @@\n+    \/\/ ArchivedModuleGraph was created with a --module-path that's different than the runtime --module-path.\n+    \/\/ Thus, it might contain references to modules that do not exist in runtime. We cannot use it.\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -582,0 +582,1 @@\n+    \/\/ ClassLoaderExt::process_module_table() filters out non-jar entries before calling this function.\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -154,9 +154,11 @@\n-    struct dirent* dentry;\n-    while ((dentry = os::readdir(dirp)) != nullptr) {\n-      const char* file_name = dentry->d_name;\n-      if (has_jar_suffix(file_name)) {\n-        size_t full_name_len = strlen(path) + strlen(file_name) + strlen(os::file_separator()) + 1;\n-        char* full_name = NEW_RESOURCE_ARRAY(char, full_name_len);\n-        int n = os::snprintf(full_name, full_name_len, \"%s%s%s\", path, os::file_separator(), file_name);\n-        assert((size_t)n == full_name_len - 1, \"Unexpected number of characters in string\");\n-        module_paths->append(full_name);\n+    if (dirp != nullptr) {\n+      struct dirent* dentry;\n+      while ((dentry = os::readdir(dirp)) != nullptr) {\n+        const char* file_name = dentry->d_name;\n+        if (has_jar_suffix(file_name)) {\n+          size_t full_name_len = strlen(path) + strlen(file_name) + strlen(os::file_separator()) + 1;\n+          char* full_name = NEW_RESOURCE_ARRAY(char, full_name_len);\n+          int n = os::snprintf(full_name, full_name_len, \"%s%s%s\", path, os::file_separator(), file_name);\n+          assert((size_t)n == full_name_len - 1, \"Unexpected number of characters in string\");\n+          module_paths->append(full_name);\n+        }\n@@ -164,0 +166,1 @@\n+      os::closedir(dirp);\n@@ -165,1 +168,0 @@\n-    os::closedir(dirp);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1092,1 +1092,3 @@\n-        if (!moduleToReader.isEmpty()) moduleToReader.clear();\n+        if (!moduleToReader.isEmpty()) {\n+            moduleToReader.clear();\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/BuiltinClassLoader.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}