{"files":[{"patch":"@@ -142,0 +142,2 @@\n+  \/\/ In jdk.internal.module.ModulePath.readModule(), it checks for the \".jar\" suffix.\n+  \/\/ Performing the same check here.\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -341,7 +341,1 @@\n-  if (strncmp(key, MODULE_PROPERTY_PREFIX, MODULE_PROPERTY_PREFIX_LEN) == 0) {\n-    const char* property_suffix = key + MODULE_PROPERTY_PREFIX_LEN;\n-    if (matches_property_suffix(property_suffix, PATH, PATH_LEN)) {\n-      return true;\n-    }\n-  }\n-  return false;\n+  return (strcmp(key, MODULE_PROPERTY_PREFIX PATH) == 0);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1085,5 +1085,0 @@\n-        resetArchivedStates(false);\n-    }\n-\n-    \/\/ Called from BuiltinClassLoaders.resetArchivedStates() and ClassLoaders.AppClassLoader.resetArchivedStates().\n-    void resetArchivedStates(boolean all) {\n@@ -1092,5 +1087,2 @@\n-        if (all) {\n-            setClassPath(null);\n-            if (!moduleToReader.isEmpty()) {\n-                moduleToReader.clear();\n-            }\n+        if (!moduleToReader.isEmpty()) {\n+            moduleToReader.clear();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/BuiltinClassLoader.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -213,7 +213,0 @@\n-\n-        \/**\n-         * Called by the VM, during -Xshare:dump\n-         *\/\n-        private void resetArchivedStates() {\n-            super.resetArchivedStates(true);\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/ClassLoaders.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import jdk.test.lib.process.ProcessTools;\n@@ -45,0 +46,1 @@\n+    private static final String JAVA_HOME = System.getProperty(\"java.home\");\n@@ -52,0 +54,1 @@\n+    private static final Path JMOD_DIR = Paths.get(\"jmod_dir\");\n@@ -66,0 +69,1 @@\n+    private static Path jmodDir = null;\n@@ -69,0 +73,1 @@\n+    private static Path badJar = null;\n@@ -72,0 +77,2 @@\n+    private static String FIND_EXCEPTION_MESSAGE = \"java.lang.module.FindException: Module com.foos not found, required by com.bars\";\n+    private static String MODULE_NOT_RECOGNIZED = \"Module format not recognized:.*modylibs.*com.bars.JAR\";\n@@ -114,0 +121,15 @@\n+\n+        badJar = libsDir.resolve(MAIN_MODULE + \".JAR\");\n+        Files.copy(mainJar, badJar, StandardCopyOption.REPLACE_EXISTING);\n+    }\n+\n+    public static void buildJmod() throws Exception {\n+        Path jmod = Paths.get(JAVA_HOME, \"bin\", \"jmod\");\n+        jmodDir = Files.createDirectory(Paths.get(USER_DIR.toString() + File.separator + JMOD_DIR.toString()));\n+        OutputAnalyzer output = ProcessTools.executeProcess(jmod.toString(),\n+                       \"create\",\n+                       \"--class-path\", Paths.get(USER_DIR.toString(), MODS_DIR.toString(), TEST_MODULE).toString(),\n+                       \"--module-version\", \"1.0\",\n+                       \"--main-class\", TEST_CLASS,\n+                       jmodDir.toString() + File.separator + TEST_MODULE + \".jmod\");\n+        output.shouldHaveExitValue(0);\n@@ -119,0 +141,1 @@\n+        runWithJmodAndBadJar();\n@@ -128,1 +151,1 @@\n-    public static void runWithModulePath(String... extraRuntimeArgs) throws Exception {\n+    public static void runWithModulePath() throws Exception {\n@@ -284,1 +307,1 @@\n-    public static void runWithExplodedModule(String... extraRuntimeArgs) throws Exception {\n+    public static void runWithExplodedModule() throws Exception {\n@@ -304,0 +327,58 @@\n+\n+    public static void runWithJmodAndBadJar() throws Exception {\n+        buildJmod();\n+\n+        final String modularJarPath = mainJar.toString() + PATH_SEPARATOR + testJar.toString();\n+        \/\/ create an archive with --module-path com.bars.jar:com.foos.jar\n+        OutputAnalyzer output = TestCommon.createArchive(\n+                                    null, appClasses,\n+                                    \"--module-path\",\n+                                    modularJarPath,\n+                                    \"-m\", MAIN_MODULE);\n+        TestCommon.checkDump(output);\n+\n+        String runModulePath = mainJar.toString() + PATH_SEPARATOR +\n+            jmodDir.toString() + TEST_MODULE + \".jmod\"; \n+        tty(\"11. run with CDS on, with module path com.bars.jar:com.foos.jmod\");\n+        TestCommon.runWithModules(prefix,\n+                                 null,               \/\/ --upgrade-module-path\n+                                 runModulePath, \/\/ --module-path\n+                                 MAIN_MODULE)        \/\/ -m\n+            .assertAbnormalExit(out -> {\n+                out.shouldContain(OPTIMIZE_DISABLED)\n+                   .shouldNotContain(OPTIMIZE_ENABLED)\n+                   .shouldContain(FMG_DISABLED)\n+                   .shouldNotContain(FMG_ENABLED)\n+                   .shouldContain(FIND_EXCEPTION_MESSAGE);\n+            });\n+\n+        runModulePath += PATH_SEPARATOR + testJar.toString();\n+        tty(\"12. run with CDS on, with module path com.bars.jar:com.foos.jmod:com.foos.jar\");\n+        TestCommon.runWithModules(prefix,\n+                                 null,               \/\/ --upgrade-module-path\n+                                 runModulePath, \/\/ --module-path\n+                                 MAIN_MODULE)        \/\/ -m\n+            .assertNormalExit(out -> {\n+                out.shouldNotContain(OPTIMIZE_DISABLED)\n+                   .shouldContain(OPTIMIZE_ENABLED)\n+                   .shouldNotContain(FMG_DISABLED)\n+                   .shouldContain(FMG_ENABLED)\n+                   .shouldMatch(TEST_FROM_CDS)\n+                   .shouldMatch(MAIN_FROM_CDS)\n+                   .shouldContain(CLASS_FOUND_MESSAGE);\n+            });\n+\n+        runModulePath = badJar.toString() + PATH_SEPARATOR + testJar.toString();\n+        tty(\"13. run with CDS on, with module path com.bars.JAR:com.foos.jar\");\n+        TestCommon.runWithModules(prefix,\n+                                 null,               \/\/ --upgrade-module-path\n+                                 runModulePath, \/\/ --module-path\n+                                 TEST_MODULE)        \/\/ -m\n+            .assertAbnormalExit(out -> {\n+                out.shouldContain(OPTIMIZE_DISABLED)\n+                   .shouldNotContain(OPTIMIZE_ENABLED)\n+                   .shouldContain(FMG_DISABLED)\n+                   .shouldNotContain(FMG_ENABLED)\n+                   .shouldMatch(MODULE_NOT_RECOGNIZED);\n+            });\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/ModulePathAndFMG.java","additions":83,"deletions":2,"binary":false,"changes":85,"status":"modified"}]}