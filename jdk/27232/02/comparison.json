{"files":[{"patch":"@@ -1245,0 +1245,2 @@\n+     * In other words, {@linkplain ##repEquivalence representation\n+     * equivalence} is used to compare the {@code double} values.\n@@ -1458,0 +1460,6 @@\n+     * @apiNote\n+     * One idiom to implement {@linkplain ##repEquivalence\n+     * representation equivalence} on {@code double} values is\n+     * {@snippet lang=\"java\" :\n+     * Double.compare(a, b) == 0\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -874,0 +874,3 @@\n+     * In other words, {@linkplain Double##repEquivalence\n+     * representation equivalence} is used to compare the {@code\n+     * float} values.\n@@ -1279,0 +1282,8 @@\n+     * @apiNote\n+     * One idiom to implement {@linkplain\n+     * Double##repEquivalence representation equivalence} on {@code\n+     * float} values is\n+     * {@snippet lang=\"java\" :\n+     * Float.compare(a, b) == 0\n+     * }\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,6 @@\n-     * Apart from the semantics described above, the precise algorithm\n+     * Note that these rules imply that {@linkplain\n+     * Double##repEquivalence representation equivalence} is used for\n+     * the equality comparison of both primitive floating-point values\n+     * and wrapped floating-point values.\n+     *\n+     * <p>Apart from the semantics described above, the precise algorithm\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Record.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}