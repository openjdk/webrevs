{"files":[{"patch":"@@ -2738,0 +2738,52 @@\n+void C2_MacroAssembler::reduce_mul_integer_v(Register dst, Register src1, VectorRegister src2,\n+                                             VectorRegister vtmp1, VectorRegister vtmp2,\n+                                             BasicType bt, uint vector_length) {\n+  assert(bt == T_INT || bt == T_LONG, \"unsupported element type\");\n+  uint len = vector_length\/type2aelembytes(bt);\n+  vsetvli_helper(bt, len);\n+\n+  len \/= 2;\n+  vslidedown_vi(vtmp1, src2, len);\n+  vsetvli_helper(bt, len);\n+  vmul_vv(vtmp1, vtmp1, src2);\n+  while (len > 1) {\n+    len \/= 2;\n+    vslidedown_vi(vtmp2, vtmp1, len);\n+    vsetvli_helper(bt, len);\n+    vmul_vv(vtmp1, vtmp1, vtmp2);\n+  }\n+\n+  vmv_x_s(dst, vtmp1);\n+  if (bt == T_INT) {\n+    mulw(dst, dst, src1);\n+  } else {\n+    mul(dst, dst, src1);\n+  }\n+}\n+\n+void C2_MacroAssembler::reduce_mul_fp_v(FloatRegister dst, FloatRegister src1, VectorRegister src2,\n+                                        VectorRegister vtmp1, VectorRegister vtmp2,\n+                                        BasicType bt, uint vector_length) {\n+  assert(bt == T_FLOAT || bt == T_DOUBLE, \"unsupported element type\");\n+  uint len = vector_length\/type2aelembytes(bt);\n+  vsetvli_helper(bt, len);\n+\n+  len \/= 2;\n+  vslidedown_vi(vtmp1, src2, len);\n+  vsetvli_helper(bt, len);\n+  vfmul_vv(vtmp1, vtmp1, src2);\n+  while (len > 1) {\n+    len \/= 2;\n+    vslidedown_vi(vtmp2, vtmp1, len);\n+    vsetvli_helper(bt, len);\n+    vfmul_vv(vtmp1, vtmp1, vtmp2);\n+  }\n+\n+  vfmv_f_s(dst, vtmp1);\n+  if (bt == T_FLOAT) {\n+    fmul_s(dst, dst, src1);\n+  } else {\n+    fmul_d(dst, dst, src1);\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -246,0 +246,8 @@\n+  void reduce_mul_integer_v(Register dst, Register src1, VectorRegister src2,\n+                            VectorRegister vtmp1, VectorRegister vtmp2, BasicType bt,\n+                            uint vector_length);\n+\n+  void reduce_mul_fp_v(FloatRegister dst, FloatRegister src1, VectorRegister src2,\n+                       VectorRegister vtmp1, VectorRegister vtmp2, BasicType bt,\n+                       uint vector_length);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2378,0 +2378,63 @@\n+\n+\/\/ ------------------------------ Vector reduction mul -------------------------\n+\n+instruct reduce_mulI(iRegINoSp dst, iRegIorL2I isrc, vReg vsrc,\n+                     vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVI isrc vsrc));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulI $dst, $isrc, $vsrc\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_integer_v($dst$$Register, $isrc$$Register, as_VectorRegister($vsrc$$reg),\n+                            as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg), bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulL(iRegLNoSp dst, iRegLNoSp isrc, vReg vsrc,\n+                     vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVL isrc vsrc));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulL $dst, $isrc, $vsrc\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_integer_v($dst$$Register, $isrc$$Register, as_VectorRegister($vsrc$$reg),\n+                            as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg), bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulF(fRegF dst, fRegF fsrc, vReg vsrc,\n+                     vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVF fsrc vsrc));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulF $dst, $fsrc, $vsrc\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_fp_v($dst$$FloatRegister, $fsrc$$FloatRegister, as_VectorRegister($vsrc$$reg),\n+                       as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg), bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_mulD(fRegD dst, fRegD fsrc, vReg vsrc,\n+                     vReg tmp1, vReg tmp2) %{\n+  match(Set dst (MulReductionVD fsrc vsrc));\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2);\n+  format %{ \"reduce_mulD $dst, $fsrc, $vsrc\\t\" %}\n+\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $vsrc);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $vsrc);\n+    __ reduce_mul_fp_v($dst$$FloatRegister, $fsrc$$FloatRegister, as_VectorRegister($vsrc$$reg),\n+                       as_VectorRegister($tmp1$$reg), as_VectorRegister($tmp2$$reg), bt, length_in_bytes);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":63,"deletions":0,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -91,0 +91,4 @@\n+    @IR(applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\" v \", \"true\"},\n+        counts = {IRNode.MUL_REDUCTION_VD, \">= 1\"})\n@@ -104,0 +108,4 @@\n+    @IR(applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\" v \", \"true\"},\n+        counts = {IRNode.MUL_REDUCTION_VD, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Double.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -89,0 +89,4 @@\n+    @IR(applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\" v \", \"true\"},\n+        counts = {IRNode.MUL_REDUCTION_VF, \">= 1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Float.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,0 +88,4 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\" v \", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VI, \">= 1\", IRNode.MUL_REDUCTION_VI, \"<= 2\"}) \/\/ one for main-loop, one for vector-post-loop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/ProdRed_Int.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -206,0 +206,4 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\" v \", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VI, \">= 1\", IRNode.MUL_REDUCTION_VI, \"<= 2\"}) \/\/ one for main-loop, one for vector-post-loop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_int.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -209,0 +209,4 @@\n+    @IR(applyIfPlatform = {\"riscv64\", \"true\"},\n+        applyIfCPUFeature = {\" v \", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+        counts = {IRNode.MUL_REDUCTION_VL, \">= 1\", IRNode.MUL_REDUCTION_VL, \"<= 2\"}) \/\/ one for main-loop, one for vector-post-loop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/RedTest_long.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}