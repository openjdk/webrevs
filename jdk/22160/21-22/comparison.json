{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import java.nio.channels.AlreadyConnectedException;\n@@ -169,0 +170,2 @@\n+        else if (x instanceof AlreadyConnectedException)\n+            nx = newSocketException(\"already connected\");\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Net.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import org.junit.jupiter.api.function.Executable;\n@@ -33,1 +32,0 @@\n-import java.io.UncheckedIOException;\n@@ -40,1 +38,1 @@\n-import java.nio.channels.AlreadyConnectedException;\n+import java.net.UnknownHostException;\n@@ -42,1 +40,0 @@\n-import java.util.ArrayList;\n@@ -46,2 +43,0 @@\n-import java.util.function.Consumer;\n-import java.util.function.Function;\n@@ -57,1 +52,2 @@\n- * @summary verifies the socket state after `connect()` failures\n+ * @summary verifies that `connect()` failures throw expected exception and leave both `Socket` and the underlying\n+ *          `SocketImpl` at the same expected state\n@@ -59,1 +55,1 @@\n- * @run junit\/othervm --add-opens java.base\/java.net=ALL-UNNAMED ConnectFailTest\n+ * @run junit ConnectFailTest\n@@ -77,1 +73,0 @@\n-     * @param socket an unbound socket\n@@ -80,2 +75,2 @@\n-    @MethodSource(\"boundSockets\")\n-    void testBoundSocket(Socket socket) throws IOException {\n+    @MethodSource(\"sockets\")\n+    void testUnboundSocket(Socket socket) throws IOException {\n@@ -83,1 +78,1 @@\n-            assertTrue(socket.isBound());\n+            assertFalse(socket.isBound());\n@@ -90,15 +85,13 @@\n-    @Test\n-    void testConnectedSocket() throws Throwable {\n-        testConnectedSocket(\n-                ConnectFailTest::createConnectedSocket,\n-                executable -> {\n-                    SocketException exception = assertThrows(SocketException.class, executable);\n-                    assertEquals(\"already connected\", exception.getMessage());\n-                });\n-    }\n-\n-    @Test\n-    void testConnectedNioSocket() throws Throwable {\n-        testConnectedSocket(\n-                ConnectFailTest::createConnectedNioSocket,\n-                executable -> assertThrows(AlreadyConnectedException.class, executable));\n+    \/**\n+     * Verifies socket is closed when {@code boundSocket.connect()} fails.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"sockets\")\n+    void testBoundSocket(Socket socket) throws IOException {\n+        try (socket) {\n+            socket.bind(new InetSocketAddress(0));\n+            assertTrue(socket.isBound());\n+            assertFalse(socket.isConnected());\n+            assertThrows(IOException.class, () -> socket.connect(REFUSING_SOCKET_ADDRESS));\n+            assertTrue(socket.isClosed());\n+        }\n@@ -109,2 +102,0 @@\n-     * @param connectedSocketFactory a connected socket factory\n-     * @param reconnectFailureVerifier a consumer verifying the thrown reconnect failure\n@@ -112,7 +103,7 @@\n-    private static void testConnectedSocket(\n-            Function<SocketAddress, Socket> connectedSocketFactory,\n-            Consumer<Executable> reconnectFailureVerifier)\n-            throws Throwable {\n-        withEphemeralServerSocket(serverSocket -> {\n-            SocketAddress serverSocketAddress = serverSocket.getLocalSocketAddress();\n-            try (Socket socket = connectedSocketFactory.apply(serverSocketAddress)) {\n+    @ParameterizedTest\n+    @MethodSource(\"sockets\")\n+    void testConnectedSocket(Socket socket) throws Throwable {\n+        try (socket) {\n+            withEphemeralServerSocket(serverSocket -> {\n+                SocketAddress serverSocketAddress = serverSocket.getLocalSocketAddress();\n+                socket.connect(serverSocketAddress);\n@@ -121,3 +112,4 @@\n-                \/\/ `Socket` and `SocketChannel` differ in how they fail on re-connection attempts on an already\n-                \/\/ connected socket. Hence, we delegate this particular check:\n-                reconnectFailureVerifier.accept(() -> socket.connect(REFUSING_SOCKET_ADDRESS));\n+                SocketException exception = assertThrows(\n+                        SocketException.class,\n+                        () -> socket.connect(REFUSING_SOCKET_ADDRESS));\n+                assertEquals(\"already connected\", exception.getMessage());\n@@ -125,2 +117,2 @@\n-            }\n-        });\n+            });\n+        }\n@@ -131,1 +123,0 @@\n-     * @param socket an unbound socket\n@@ -134,1 +125,1 @@\n-    @MethodSource(\"unboundSockets\")\n+    @MethodSource(\"sockets\")\n@@ -139,1 +130,1 @@\n-            assertThrows(IOException.class, () -> socket.connect(UNRESOLVED_ADDRESS));\n+            assertThrows(UnknownHostException.class, () -> socket.connect(UNRESOLVED_ADDRESS));\n@@ -144,7 +135,0 @@\n-    @SuppressWarnings(\"resource\")\n-    static List<Socket> unboundSockets() throws IOException {\n-        return List.of(\n-                new Socket(),\n-                SocketChannel.open().socket());\n-    }\n-\n@@ -153,1 +137,0 @@\n-     * @param socket a bound socket\n@@ -156,1 +139,1 @@\n-    @MethodSource(\"boundSockets\")\n+    @MethodSource(\"sockets\")\n@@ -159,0 +142,1 @@\n+            socket.bind(new InetSocketAddress(0));\n@@ -161,1 +145,1 @@\n-            assertThrows(IOException.class, () -> socket.connect(UNRESOLVED_ADDRESS));\n+            assertThrows(UnknownHostException.class, () -> socket.connect(UNRESOLVED_ADDRESS));\n@@ -166,18 +150,0 @@\n-    @SuppressWarnings(\"resource\")\n-    static List<Socket> boundSockets() throws IOException {\n-        List<Socket> sockets = new ArrayList<>();\n-        \/\/ Socket\n-        {\n-            Socket socket = new Socket();\n-            socket.bind(new InetSocketAddress(0));\n-            sockets.add(socket);\n-        }\n-        \/\/ NIO Socket\n-        {\n-            SocketChannel channel = SocketChannel.open();\n-            channel.bind(new InetSocketAddress(0));\n-            sockets.add(channel.socket());\n-        }\n-        return sockets;\n-    }\n-\n@@ -186,1 +152,0 @@\n-     * @param connectedSocketFactory a connected socket factory\n@@ -189,7 +154,6 @@\n-    @MethodSource(\"connectedSocketFactories\")\n-    void testConnectedSocketWithUnresolvedAddress(\n-            Function<SocketAddress, Socket> connectedSocketFactory)\n-            throws Throwable {\n-        withEphemeralServerSocket(serverSocket -> {\n-            SocketAddress serverSocketAddress = serverSocket.getLocalSocketAddress();\n-            try (Socket socket = connectedSocketFactory.apply(serverSocketAddress)) {\n+    @MethodSource(\"sockets\")\n+    void testConnectedSocketWithUnresolvedAddress(Socket socket) throws Throwable {\n+        try (socket) {\n+            withEphemeralServerSocket(serverSocket -> {\n+                SocketAddress serverSocketAddress = serverSocket.getLocalSocketAddress();\n+                socket.connect(serverSocketAddress);\n@@ -200,16 +164,1 @@\n-            }\n-        });\n-    }\n-\n-    static List<Function<SocketAddress, Socket>> connectedSocketFactories() {\n-        return List.of(\n-                ConnectFailTest::createConnectedSocket,\n-                ConnectFailTest::createConnectedNioSocket);\n-    }\n-\n-    private static Socket createConnectedSocket(SocketAddress address) {\n-        InetSocketAddress inetAddress = (InetSocketAddress) address;\n-        try {\n-            return new Socket(inetAddress.getAddress(), inetAddress.getPort());\n-        } catch (IOException exception) {\n-            throw new UncheckedIOException(exception);\n+            });\n@@ -219,7 +168,5 @@\n-    @SuppressWarnings(\"resource\")\n-    private static Socket createConnectedNioSocket(SocketAddress address) {\n-        try {\n-            return SocketChannel.open(address).socket();\n-        } catch (IOException exception) {\n-            throw new UncheckedIOException(exception);\n-        }\n+    static List<Socket> sockets() throws Exception {\n+        Socket socket = new Socket();\n+        @SuppressWarnings(\"resource\")\n+        Socket channelSocket = SocketChannel.open().socket();\n+        return List.of(socket, channelSocket);\n@@ -230,2 +177,3 @@\n-        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor();\n-             ServerSocket serverSocket = new ServerSocket(0, 0, InetAddress.getLoopbackAddress())) {\n+        @SuppressWarnings(\"resource\")   \/\/ We'll use `shutdownNow()`\n+        ExecutorService executorService = Executors.newSingleThreadExecutor();\n+        try (ServerSocket serverSocket = new ServerSocket(0, 0, InetAddress.getLoopbackAddress())) {\n@@ -233,1 +181,1 @@\n-            executorService.submit(() -> acceptConnections(serverSocket));\n+            executorService.submit(() -> continuouslyAcceptConnections(serverSocket));\n@@ -235,0 +183,2 @@\n+        } finally {\n+            executorService.shutdownNow();\n@@ -239,1 +189,1 @@\n-    private static void acceptConnections(ServerSocket serverSocket) {\n+    private static void continuouslyAcceptConnections(ServerSocket serverSocket) {\n","filename":"test\/jdk\/java\/net\/Socket\/ConnectFailTest.java","additions":57,"deletions":107,"binary":false,"changes":164,"status":"modified"}]}