{"files":[{"patch":"@@ -13574,1 +13574,1 @@\n-void Assembler::bt(Register dst, Register src) {\n+void Assembler::btq(Register dst, Register src) {\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1738,1 +1738,1 @@\n-  void bt(Register dst, Register src);\n+  void btq(Register dst, Register src);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1575,2 +1575,4 @@\n-void C2_MacroAssembler::vgather8b_masked(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n-                                          Register mask, Register midx, Register rtmp, int vlen_enc) {\n+void C2_MacroAssembler::vgather8b_masked(BasicType elem_bt, XMMRegister dst,\n+                                         Register base, Register idx_base,\n+                                         Register mask, Register midx,\n+                                         Register rtmp, int vlen_enc) {\n@@ -1580,1 +1582,1 @@\n-    Label* larr[] = { &case0, &case1, &case2, &case3 };\n+    Label *larr[] = {&case0, &case1, &case2, &case3};\n@@ -1582,1 +1584,2 @@\n-      bt(mask, midx);\n+      \/\/ dst[i] = mask ? src[index[i]] : 0\n+      btq(mask, midx);\n@@ -1584,1 +1587,1 @@\n-      movl(rtmp, Address(idx_base, i*4));\n+      movl(rtmp, Address(idx_base, i * 4));\n@@ -1592,1 +1595,2 @@\n-    Label* larr[] = { &case0, &case1, &case2, &case3, &case4, &case5, &case6, &case7 };\n+    Label *larr[] = {&case0, &case1, &case2, &case3,\n+                     &case4, &case5, &case6, &case7};\n@@ -1594,1 +1598,2 @@\n-      bt(mask, midx);\n+      \/\/ dst[i] = mask ? src[index[i]] : 0\n+      btq(mask, midx);\n@@ -1596,1 +1601,1 @@\n-      movl(rtmp, Address(idx_base, i*4));\n+      movl(rtmp, Address(idx_base, i * 4));\n@@ -1604,2 +1609,6 @@\n-void C2_MacroAssembler::vgather8b_masked_offset(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n-                                                 Register offset, Register mask, Register midx, Register rtmp, int vlen_enc) {\n+void C2_MacroAssembler::vgather8b_masked_offset(BasicType elem_bt,\n+                                                XMMRegister dst, Register base,\n+                                                Register idx_base,\n+                                                Register offset, Register mask,\n+                                                Register midx, Register rtmp,\n+                                                int vlen_enc) {\n@@ -1609,1 +1618,1 @@\n-    Label* larr[] = { &case0, &case1, &case2, &case3 };\n+    Label *larr[] = {&case0, &case1, &case2, &case3};\n@@ -1611,1 +1620,2 @@\n-      bt(mask, midx);\n+      \/\/ dst[i] = mask ? src[offset + index[i]] : 0\n+      btq(mask, midx);\n@@ -1613,1 +1623,1 @@\n-      movl(rtmp, Address(idx_base, i*4));\n+      movl(rtmp, Address(idx_base, i * 4));\n@@ -1622,1 +1632,2 @@\n-    Label* larr[] = { &case0, &case1, &case2, &case3, &case4, &case5, &case6, &case7 };\n+    Label *larr[] = {&case0, &case1, &case2, &case3,\n+                     &case4, &case5, &case6, &case7};\n@@ -1624,1 +1635,2 @@\n-      bt(mask, midx);\n+      \/\/ dst[i] = mask ? src[offset + index[i]] : 0\n+      btq(mask, midx);\n@@ -1626,1 +1638,1 @@\n-      movl(rtmp, Address(idx_base, i*4));\n+      movl(rtmp, Address(idx_base, i * 4));\n@@ -1636,1 +1648,3 @@\n-void C2_MacroAssembler::vgather8b(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base, Register rtmp, int vlen_enc) {\n+void C2_MacroAssembler::vgather8b(BasicType elem_bt, XMMRegister dst,\n+                                  Register base, Register idx_base,\n+                                  Register rtmp, int vlen_enc) {\n@@ -1640,1 +1654,2 @@\n-      movl(rtmp, Address(idx_base, i*4));\n+      \/\/ dst[i] = src[index[i]]\n+      movl(rtmp, Address(idx_base, i * 4));\n@@ -1646,1 +1661,2 @@\n-      movl(rtmp, Address(idx_base, i*4));\n+      \/\/ dst[i] = src[index[i]]\n+      movl(rtmp, Address(idx_base, i * 4));\n@@ -1652,2 +1668,4 @@\n-void C2_MacroAssembler::vgather8b_offset(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n-                                          Register offset, Register rtmp, int vlen_enc) {\n+void C2_MacroAssembler::vgather8b_offset(BasicType elem_bt, XMMRegister dst,\n+                                         Register base, Register idx_base,\n+                                         Register offset, Register rtmp,\n+                                         int vlen_enc) {\n@@ -1657,1 +1675,2 @@\n-      movl(rtmp, Address(idx_base, i*4));\n+      \/\/ dst[i] = src[offset + index[i]]\n+      movl(rtmp, Address(idx_base, i * 4));\n@@ -1664,1 +1683,2 @@\n-      movl(rtmp, Address(idx_base, i*4));\n+      \/\/ dst[i] = src[offset + index[i]]\n+      movl(rtmp, Address(idx_base, i * 4));\n@@ -1679,1 +1699,1 @@\n- * TWO_VEC = {2, 2, 2, 2, 2, 2, 2, 2..}\n+ * TWO_VEC    = {2, 2, 2, 2, 2, 2, 2, 2, 2..}\n@@ -1686,2 +1706,2 @@\n- * With each iteration permute index 0,1 holding assembled quadword\n- * gets right shifted by two lane position.\n+ * With each iteration, doubleword permute indices (0,1) corresponding\n+ * to assembled quadword gets right shifted by two lane position.\n@@ -1690,1 +1710,0 @@\n-\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":46,"deletions":27,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -4146,1 +4146,0 @@\n-  ins_cost(200);\n@@ -4163,1 +4162,0 @@\n-  ins_cost(200);\n@@ -4200,1 +4198,0 @@\n-  ins_cost(200);\n@@ -4238,1 +4235,0 @@\n-  ins_cost(200);\n@@ -4255,1 +4251,1 @@\n-instruct vgather_masked_subwordLE8B_avx2(vec dst, memory mem, rRegP idx, immI_0 offset, vec mask, rRegL midx, rRegP tmp, rRegI rtmp, rRegL rtmp2) %{\n+instruct vgather_masked_subwordLE8B_avx2(vec dst, memory mem, rRegP idx, immI_0 offset, vec mask, rRegI midx, rRegP tmp, rRegI rtmp, rRegI rtmp2, rFlagsReg cr) %{\n@@ -4258,1 +4254,1 @@\n-  effect(TEMP midx, TEMP tmp, TEMP rtmp, TEMP rtmp2);\n+  effect(TEMP midx, TEMP tmp, TEMP rtmp, TEMP rtmp2, KILL cr);\n@@ -4266,2 +4262,2 @@\n-      __ mov64($midx$$Register, 0x5555555555555555ULL);\n-      __ pextq($rtmp2$$Register, $rtmp2$$Register, $midx$$Register);\n+      __ movl($midx$$Register, 0x55555555);\n+      __ pextl($rtmp2$$Register, $rtmp2$$Register, $midx$$Register);\n@@ -4276,1 +4272,1 @@\n-                                         vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegL rtmp2, rRegL midx, rRegI length) %{\n+                                         vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegI rtmp2, rRegI midx, rRegI length, rFlagsReg cr) %{\n@@ -4279,2 +4275,1 @@\n-  ins_cost(200);\n-  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP rtmp2, TEMP midx, TEMP length);\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP rtmp2, TEMP midx, TEMP length, KILL cr);\n@@ -4290,2 +4285,2 @@\n-      __ mov64($midx$$Register, 0x5555555555555555ULL);\n-      __ pextq($rtmp2$$Register, $rtmp2$$Register, $midx$$Register);\n+      __ movl($midx$$Register, 0x55555555);\n+      __ pextl($rtmp2$$Register, $rtmp2$$Register, $midx$$Register);\n@@ -4300,1 +4295,1 @@\n-instruct vgather_masked_subwordLE8B_off_avx2(vec dst, memory mem, rRegP idx, rRegI offset, vec mask, rRegL midx, rRegP tmp, rRegI rtmp, rRegL rtmp2) %{\n+instruct vgather_masked_subwordLE8B_off_avx2(vec dst, memory mem, rRegP idx, rRegI offset, vec mask, rRegI midx, rRegP tmp, rRegI rtmp, rRegI rtmp2, rFlagsReg cr) %{\n@@ -4303,1 +4298,1 @@\n-  effect(TEMP midx, TEMP tmp, TEMP rtmp, TEMP rtmp2);\n+  effect(TEMP midx, TEMP tmp, TEMP rtmp, TEMP rtmp2, KILL cr);\n@@ -4311,2 +4306,2 @@\n-      __ mov64($midx$$Register, 0x5555555555555555ULL);\n-      __ pextq($rtmp2$$Register, $rtmp2$$Register, $midx$$Register);\n+      __ movl($midx$$Register, 0x55555555);\n+      __ pextl($rtmp2$$Register, $rtmp2$$Register, $midx$$Register);\n@@ -4322,1 +4317,1 @@\n-                                             vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegL rtmp2, rRegL midx, rRegI length) %{\n+                                             vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegI rtmp2, rRegI midx, rRegI length, rFlagsReg cr) %{\n@@ -4325,2 +4320,1 @@\n-  ins_cost(200);\n-  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP rtmp2, TEMP midx, TEMP length);\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP rtmp2, TEMP midx, TEMP length, KILL cr);\n@@ -4337,2 +4331,2 @@\n-      __ mov64($midx$$Register, 0x5555555555555555ULL);\n-      __ pextq($rtmp2$$Register, $rtmp2$$Register, $midx$$Register);\n+      __ movl($midx$$Register, 0x55555555);\n+      __ pextl($rtmp2$$Register, $rtmp2$$Register, $midx$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"}]}