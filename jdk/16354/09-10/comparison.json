{"files":[{"patch":"@@ -1587,0 +1587,5 @@\n+  int mask_shift = -1;\n+  int bitlevel_offset_shift = -1;\n+  int nomlarized_index_shift = -1;\n+  Address::ScaleFactor scale = Address::no_scale;\n+\n@@ -1588,19 +1593,4 @@\n-    evmovdquq(idx_vec, Address(idx_base, idx_off, Address::times_4), vlen_enc);\n-    if (offset != xnoreg) {\n-      vpaddd(idx_vec, idx_vec, offset, vlen_enc);\n-    }\n-    \/\/ Normalize the indices to multiple of 2.\n-    vpslld(xtmp, ones, 1, vlen_enc);\n-    vpand(xtmp, idx_vec, xtmp, vlen_enc);\n-    \/\/ Load double words from normalized indices.\n-    evpgatherdd(dst, gmask, Address(base, xtmp, Address::times_2), vlen_enc);\n-    \/\/ Compute bit level offset of actual short value with in each double word\n-    \/\/ lane.\n-    vpsrld(xtmp, ones, 31, vlen_enc);\n-    vpand(xtmp, idx_vec, xtmp, vlen_enc);\n-    vpslld(xtmp, xtmp, 4, vlen_enc);\n-    \/\/ Move the short value at respective bit offset to lower 16 bits of each\n-    \/\/ double word lane.\n-    vpsrlvd(dst, dst, xtmp, vlen_enc);\n-    \/\/ Pack double word vector into short vector.\n-    vpackI2X(T_SHORT, dst, ones, xtmp, vlen_enc);\n+    mask_shift = 31;\n+    scale = Address::times_2;\n+    bitlevel_offset_shift = 4;\n+    nomlarized_index_shift = 1;\n@@ -1609,20 +1599,25 @@\n-    evmovdquq(idx_vec, Address(idx_base, idx_off, Address::times_4), vlen_enc);\n-    if (offset != xnoreg) {\n-      vpaddd(idx_vec, idx_vec, offset, vlen_enc);\n-    }\n-    \/\/ Normalize the indices to multiple of 4.\n-    vpslld(xtmp, ones, 2, vlen_enc);\n-    vpand(xtmp, idx_vec, xtmp, vlen_enc);\n-    \/\/ Load double words from normalized indices.\n-    evpgatherdd(dst, gmask, Address(base, xtmp, Address::times_1), vlen_enc);\n-    \/\/ Compute bit level offset of actual byte value with in each double word\n-    \/\/ lane.\n-    vpsrld(xtmp, ones, 30, vlen_enc);\n-    vpand(xtmp, idx_vec, xtmp, vlen_enc);\n-    vpslld(xtmp, xtmp, 3, vlen_enc);\n-    \/\/ Move the byte value at respective bit offset to lower 8 bits of each\n-    \/\/ double word lane.\n-    vpsrlvd(dst, dst, xtmp, vlen_enc);\n-    \/\/ Pack double word vector into byte vector.\n-    vpackI2X(T_BYTE, dst, ones, xtmp, vlen_enc);\n-  }\n+    mask_shift = 30;\n+    scale = Address::times_1;\n+    bitlevel_offset_shift = 3;\n+    nomlarized_index_shift = 2;\n+  }\n+\n+  evmovdquq(idx_vec, Address(idx_base, idx_off, Address::times_4), vlen_enc);\n+  if (offset != xnoreg) {\n+    vpaddd(idx_vec, idx_vec, offset, vlen_enc);\n+  }\n+  \/\/ Normalize the indices to multiple of nomlarized_index_shift.\n+  vpslld(xtmp, ones, nomlarized_index_shift, vlen_enc);\n+  vpand(xtmp, idx_vec, xtmp, vlen_enc);\n+  \/\/ Load double words from normalized indices.\n+  evpgatherdd(dst, gmask, Address(base, xtmp, scale), vlen_enc);\n+  \/\/ Compute bit level offset of actual sub-word within each double word\n+  \/\/ lane.\n+  vpsrld(xtmp, ones, mask_shift, vlen_enc);\n+  vpand(xtmp, idx_vec, xtmp, vlen_enc);\n+  vpslld(xtmp, xtmp, bitlevel_offset_shift, vlen_enc);\n+  \/\/ Move the sub-word value at respective bit offset to lower\n+  \/\/ 16 bits(for short)\/8 bits(for byte) of each double word lane.\n+  vpsrlvd(dst, dst, xtmp, vlen_enc);\n+  \/\/ Pack double word vector into short vector.\n+  vpackI2X(elem_bt, dst, ones, xtmp, vlen_enc);\n@@ -1631,0 +1626,4 @@\n+\/\/ Gather sub-words from gather indices using integral gather instructions,\n+\/\/ because of the lane size mismatch b\/w int and sub-words, algorithm makes multiple\n+\/\/ calls to leaf level routine(vgather_subword_avx3) which performs actual gather\n+\/\/ operation.\n@@ -1651,1 +1650,1 @@\n-    \/\/ target capped by the gather count i.e. in order to gather 8 bytes over\n+    \/\/ target, capped by the gather count i.e. in order to gather 8 bytes over\n@@ -1756,0 +1755,1 @@\n+      \/\/ dst[i] = src[idx_base[i]]\n@@ -1762,0 +1762,1 @@\n+      \/\/ dst[i] = src[idx_base[i]]\n@@ -1775,0 +1776,1 @@\n+      \/\/ dst[i] = src[idx_base[i] + offset]\n@@ -1782,0 +1784,1 @@\n+      \/\/ dst[i] = src[idx_base[i] + offset]\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":43,"deletions":40,"binary":false,"changes":83,"status":"modified"}]}