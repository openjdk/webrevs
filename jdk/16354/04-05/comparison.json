{"files":[{"patch":"@@ -1529,0 +1529,1 @@\n+  vpxor(dst, dst, dst, vlen_enc);\n@@ -1557,0 +1558,1 @@\n+  vpxor(dst, dst, dst, vlen_enc);\n@@ -1587,0 +1589,1 @@\n+  vpxor(dst, dst, dst, vlen_enc);\n@@ -1603,0 +1606,1 @@\n+  vpxor(dst, dst, dst, vlen_enc);\n@@ -1619,0 +1623,19 @@\n+\/*\n+ * Gather loop first packs 4 short \/ 8 byte values from gather indices\n+ * into quadword lane and then permutes quadword lane into appropriate\n+ * location in destination vector. Following pseudo code describes the\n+ * algorithm in detail:-\n+ *\n+ * DST_VEC = ZERO_VEC\n+ * PERM_INDEX = {0, 1, 2, 3, 4, 5, 6, 7, 8..}\n+ * TWO_VEC = {2, 2, 2, 2, 2, 2, 2, 2..}\n+ * FOREACH_ITER:\n+ *     TMP_VEC_64 = PICK_SUB_WORDS_FROM_GATHER_INDICES\n+ *     TEMP_PERM_VEC = PERMUTE TMP_VEC_64 PERM_INDEX\n+ *     TEMP_PERM_VEC = TEMP_PERM_VEC - TWO_VEC\n+ *     DST_VEC = DST_VEC OR TEMP_PERM_VEC\n+ *\n+ * With each iteration permute index 0,1 holding assembled quadword\n+ * gets right shifted by two lane position.\n+ *\n+ *\/\n@@ -1632,1 +1655,0 @@\n-    vpxor(xtmp3, xtmp3, xtmp3, vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"}]}