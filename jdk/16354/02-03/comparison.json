{"files":[{"patch":"@@ -13565,1 +13565,1 @@\n-  emit_int24(0x0F, 0xA3, (encode | 0xC0));\n+  emit_int24(0x0F, (unsigned char)0xA3, (encode | 0xC0));\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1527,1 +1527,1 @@\n-void C2_MacroAssembler::vpgather8b_masked(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n+void C2_MacroAssembler::vgather8b_masked(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n@@ -1556,1 +1556,1 @@\n-void C2_MacroAssembler::vpgather8b_masked_offset(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n+void C2_MacroAssembler::vgather8b_masked_offset(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n@@ -1588,1 +1588,1 @@\n-void C2_MacroAssembler::vpgather8b(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base, Register rtmp, int vlen_enc) {\n+void C2_MacroAssembler::vgather8b(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base, Register rtmp, int vlen_enc) {\n@@ -1604,1 +1604,1 @@\n-void C2_MacroAssembler::vpgather8b_offset(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n+void C2_MacroAssembler::vgather8b_offset(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n@@ -1638,1 +1638,1 @@\n-        vpgather8b(elem_ty, xtmp3, base, idx_base, rtmp, vlen_enc);\n+        vgather8b(elem_ty, xtmp3, base, idx_base, rtmp, vlen_enc);\n@@ -1640,1 +1640,1 @@\n-        LP64_ONLY(vpgather8b_masked(elem_ty, xtmp3, base, idx_base, mask, midx, rtmp, vlen_enc));\n+        LP64_ONLY(vgather8b_masked(elem_ty, xtmp3, base, idx_base, mask, midx, rtmp, vlen_enc));\n@@ -1644,1 +1644,1 @@\n-        vpgather8b_offset(elem_ty, xtmp3, base, idx_base, offset, rtmp, vlen_enc);\n+        vgather8b_offset(elem_ty, xtmp3, base, idx_base, offset, rtmp, vlen_enc);\n@@ -1646,1 +1646,1 @@\n-        LP64_ONLY(vpgather8b_masked_offset(elem_ty, xtmp3, base, idx_base, offset, mask, midx, rtmp, vlen_enc));\n+        LP64_ONLY(vgather8b_masked_offset(elem_ty, xtmp3, base, idx_base, offset, mask, midx, rtmp, vlen_enc));\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-  void vpgather8b_masked(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n+  void vgather8b_masked(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n@@ -503,1 +503,1 @@\n-  void vpgather8b_masked_offset(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n+  void vgather8b_masked_offset(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n@@ -507,1 +507,1 @@\n-  void vpgather8b(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base, Register rtmp, int vlen_enc);\n+  void vgather8b(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base, Register rtmp, int vlen_enc);\n@@ -509,1 +509,1 @@\n-  void vpgather8b_offset(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n+  void vgather8b_offset(BasicType elem_bt, XMMRegister dst, Register base, Register idx_base,\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4128,1 +4128,1 @@\n-    __ vpgather8b(elem_bt, $dst$$XMMRegister, $tmp$$Register, $idx$$Register, $rtmp$$Register, vlen_enc);\n+    __ vgather8b(elem_bt, $dst$$XMMRegister, $tmp$$Register, $idx$$Register, $rtmp$$Register, vlen_enc);\n@@ -4134,1 +4134,1 @@\n-                             vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegI length) %{\n+                             vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegI length, rFlagsReg cr) %{\n@@ -4137,1 +4137,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP length);\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP length, KILL cr);\n@@ -4151,1 +4151,1 @@\n-instruct vgather_subwordLE8B_off(vec dst, memory mem, rRegP idx, rRegI offset, rRegP tmp, rRegI rtmp) %{\n+instruct vgather_subwordLE8B_off(vec dst, memory mem, rRegP idx, rRegI offset, rRegP tmp, rRegI rtmp, rFlagsReg cr) %{\n@@ -4155,1 +4155,1 @@\n-  effect(TEMP tmp, TEMP rtmp);\n+  effect(TEMP tmp, TEMP rtmp, KILL cr);\n@@ -4161,1 +4161,1 @@\n-    __ vpgather8b_offset(elem_bt, $dst$$XMMRegister, $tmp$$Register, $idx$$Register, $offset$$Register, $rtmp$$Register, vlen_enc);\n+    __ vgather8b_offset(elem_bt, $dst$$XMMRegister, $tmp$$Register, $idx$$Register, $offset$$Register, $rtmp$$Register, vlen_enc);\n@@ -4168,1 +4168,1 @@\n-                                 vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegI length) %{\n+                                 vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegI length, rFlagsReg cr) %{\n@@ -4172,1 +4172,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP length);\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP length, KILL cr);\n@@ -4188,1 +4188,1 @@\n-instruct vgather_masked_subwordLE8B_avx3(vec dst, memory mem, rRegP idx, immI_0 offset, kReg mask, rRegL midx, rRegP tmp, rRegI rtmp, rRegL rtmp2) %{\n+instruct vgather_masked_subwordLE8B_avx3(vec dst, memory mem, rRegP idx, immI_0 offset, kReg mask, rRegL midx, rRegP tmp, rRegI rtmp, rRegL rtmp2, rFlagsReg cr) %{\n@@ -4191,1 +4191,1 @@\n-  effect(TEMP midx, TEMP tmp, TEMP rtmp, TEMP rtmp2);\n+  effect(TEMP midx, TEMP tmp, TEMP rtmp, TEMP rtmp2, KILL cr);\n@@ -4196,1 +4196,1 @@\n-    __ xorl($midx$$Register, $midx$$Register);\n+    __ xorq($midx$$Register, $midx$$Register);\n@@ -4199,1 +4199,1 @@\n-    __ vpgather8b_masked(elem_bt, $dst$$XMMRegister, $tmp$$Register, $idx$$Register, $rtmp2$$Register, $midx$$Register, $rtmp$$Register, vlen_enc);\n+    __ vgather8b_masked(elem_bt, $dst$$XMMRegister, $tmp$$Register, $idx$$Register, $rtmp2$$Register, $midx$$Register, $rtmp$$Register, vlen_enc);\n@@ -4205,1 +4205,1 @@\n-                                         vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegL rtmp2, rRegI midx, rRegI length) %{\n+                                         vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegL rtmp2, rRegL midx, rRegI length, rFlagsReg cr) %{\n@@ -4209,1 +4209,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP rtmp2, TEMP midx, TEMP length);\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP rtmp2, TEMP midx, TEMP length, KILL cr);\n@@ -4215,1 +4215,1 @@\n-    __ xorl($midx$$Register, $midx$$Register);\n+    __ xorq($midx$$Register, $midx$$Register);\n@@ -4225,1 +4225,1 @@\n-instruct vgather_masked_subwordLE8B_off_avx3(vec dst, memory mem, rRegP idx, rRegI offset, kReg mask, rRegI midx, rRegP tmp, rRegI rtmp, rRegL rtmp2) %{\n+instruct vgather_masked_subwordLE8B_off_avx3(vec dst, memory mem, rRegP idx, rRegI offset, kReg mask, rRegL midx, rRegP tmp, rRegI rtmp, rRegL rtmp2, rFlagsReg cr) %{\n@@ -4228,1 +4228,1 @@\n-  effect(TEMP midx, TEMP tmp, TEMP rtmp, TEMP rtmp2);\n+  effect(TEMP midx, TEMP tmp, TEMP rtmp, TEMP rtmp2, KILL cr);\n@@ -4233,1 +4233,1 @@\n-    __ xorl($midx$$Register, $midx$$Register);\n+    __ xorq($midx$$Register, $midx$$Register);\n@@ -4236,1 +4236,1 @@\n-    __ vpgather8b_masked_offset(elem_bt, $dst$$XMMRegister, $tmp$$Register, $idx$$Register, $offset$$Register,\n+    __ vgather8b_masked_offset(elem_bt, $dst$$XMMRegister, $tmp$$Register, $idx$$Register, $offset$$Register,\n@@ -4243,1 +4243,1 @@\n-                                             vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegL rtmp2, rRegI midx, rRegI length) %{\n+                                             vec xtmp1, vec xtmp2, vec xtmp3, rRegI rtmp, rRegL rtmp2, rRegL midx, rRegI length, rFlagsReg cr) %{\n@@ -4247,1 +4247,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP rtmp2, TEMP midx, TEMP length);\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP idx_base_temp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, TEMP rtmp2, TEMP midx, TEMP length, KILL cr);\n@@ -4253,1 +4253,1 @@\n-    __ xorl($midx$$Register, $midx$$Register);\n+    __ xorq($midx$$Register, $midx$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2495,1 +2495,1 @@\n-      }\n+      } \/\/ fall-through\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1507,0 +1507,1 @@\n+  \/\/ For sub-word gathers expander receive index array.\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -886,0 +886,3 @@\n+    DEBUG_ONLY(bool is_subword = is_subword_type(vt->element_basic_type()));\n+    assert(is_subword || indices->bottom_type()->is_vect(), \"indices must be in vector\");\n+    assert(is_subword || !offset, \"\");\n@@ -888,1 +891,0 @@\n-      assert(is_subword_type(vect_type()->element_basic_type()), \"\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3057,1 +3057,0 @@\n-        int loopIncr = 0;\n@@ -3818,1 +3817,0 @@\n-        int loopIncr = 0;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2844,1 +2844,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2868,1 +2868,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3024,1 +3024,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2885,1 +2885,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3058,1 +3058,0 @@\n-        int loopIncr = 0;\n@@ -3804,1 +3803,0 @@\n-        int loopIncr = 0;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3630,1 +3630,0 @@\n-        int loopIncr = 0;\n@@ -3657,1 +3656,0 @@\n-\n@@ -4836,1 +4834,0 @@\n-        int loopIncr = 0;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}