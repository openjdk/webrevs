{"files":[{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8328481\n+ * @summary Verify the Trees model for module imports\n+ * @library \/tools\/lib\n+ * @modules java.logging\n+ *          java.sql\n+ *          jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main Imports\n+*\/\n+\n+import com.sun.source.tree.ImportTree;\n+import com.sun.source.util.TaskEvent;\n+import com.sun.source.util.TaskEvent.Kind;\n+import com.sun.source.util.TaskListener;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class Imports extends TestRunner {\n+\n+    private static final String SOURCE_VERSION = System.getProperty(\"java.specification.version\");\n+    private ToolBox tb;\n+\n+    public static void main(String... args) throws Exception {\n+        new Imports().runTests();\n+    }\n+\n+    Imports() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void testModuleImport(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          package test;\n+                          import module java.base;\n+                          public class Test {\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        AtomicInteger seenImports = new AtomicInteger(-1);\n+\n+        new JavacTask(tb)\n+            .options(\"--enable-preview\", \"--release\", SOURCE_VERSION)\n+            .outdir(classes)\n+            .files(tb.findJavaFiles(src))\n+            .callback(task -> {\n+                task.addTaskListener(new TaskListener() {\n+                    @Override\n+                    public void finished(TaskEvent e) {\n+                        if (e.getKind() != Kind.PARSE) {\n+                            return ;\n+                        }\n+\n+                        var imports = e.getCompilationUnit().getImports();\n+\n+                        seenImports.set(imports.size());\n+\n+                        if (imports.size() != 1) {\n+                            throw new AssertionError(\"Exception 1 import, \" +\n+                                                     \"but got: \" + imports.size());\n+                        }\n+\n+                        ImportTree it = imports.get(0);\n+\n+                        if (!it.isModule()) {\n+                            throw new AssertionError(\"Expected module import, but got ordinary one.\");\n+                        }\n+\n+                        if (!\"java.base\".equals(it.getQualifiedIdentifier().toString())) {\n+                            throw new AssertionError(\"Expected module import for java.base, \" +\n+                                                     \"but got: \" + it.getQualifiedIdentifier());\n+                        }\n+\n+                        String expectedImportToString = \"import module java.base;\\n\";\n+\n+                        if (!expectedImportToString.equals(it.toString())) {\n+                            throw new AssertionError(\"Expected '\" + expectedImportToString + \"', \" +\n+                                                     \"but got: '\" + it + \"'\");\n+                        }\n+                    }\n+                });\n+            })\n+            .run(Task.Expect.SUCCESS);\n+\n+        if (seenImports.get() == (-1)) {\n+            throw new AssertionError(\"Did not verify any imports!\");\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/tree\/Imports.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"}]}