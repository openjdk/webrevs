{"files":[{"patch":"@@ -486,1 +486,6 @@\n-                    log.error(tree.pos, Errors.ImportModuleDoesNotRead(module));\n+                    if (env.toplevel.modle.isUnnamed()) {\n+                        log.error(tree.pos, Errors.ImportModuleDoesNotReadUnnamed(module));\n+                    } else {\n+                        log.error(tree.pos, Errors.ImportModuleDoesNotRead(module,\n+                                                                           env.toplevel.modle));\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3552,0 +3552,4 @@\n+compiler.err.import.module.does.not.read.unnamed=\\\n+    unnamed module does not read: {0}\n+\n+# 0: symbol, 1: symbol\n@@ -3553,1 +3557,1 @@\n-    current modules does not read: {0}\n+    {1} module does not read: {0}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -439,1 +439,33 @@\n-                \"Test.java:2:1: compiler.err.import.module.does.not.read: lib\",\n+                \"Test.java:2:1: compiler.err.import.module.does.not.read.unnamed: lib\",\n+                \"Test.java:6:9: compiler.err.cant.resolve.location: kindname.class, Impl, , , (compiler.misc.location: kindname.class, test.Test, null)\",\n+                \"- compiler.note.preview.filename: Test.java, DEFAULT\",\n+                \"- compiler.note.preview.recompile\",\n+                \"2 errors\"\n+        );\n+\n+        if (!Objects.equals(expectedErrors, actualErrors)) {\n+            throw new AssertionError(\"Incorrect Output, expected: \" + expectedErrors +\n+                                      \", actual: \" + out);\n+\n+        }\n+\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          module test.module {\n+                          }\n+                          \"\"\");\n+\n+        actualErrors =\n+                new JavacTask(tb)\n+                    .options(\"--enable-preview\", \"--release\", SOURCE_VERSION,\n+                             \"-p\", libClasses.toString(),\n+                             \"-XDdev\",\n+                             \"-XDrawDiagnostics\")\n+                    .outdir(classes)\n+                    .files(tb.findJavaFiles(src))\n+                    .run(Task.Expect.FAIL)\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        expectedErrors = List.of(\n+                \"Test.java:2:1: compiler.err.import.module.does.not.read: lib, test.module\",\n","filename":"test\/langtools\/tools\/javac\/ImportModule.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.import.module.does.not.read.unnamed\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --release ${jdk.version} --enable-preview --limit-modules java.base\n+\n+import module java.compiler;\n+\n+public class ImportModuleDoesNotReadUnnamed {\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImportModuleDoesNotReadUnnamed.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"}]}