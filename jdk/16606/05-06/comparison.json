{"files":[{"patch":"@@ -502,11 +502,9 @@\n-          \/\/ Retry until a lock state change has been observed.  cas_set_mark() may collide with non lock bits modifications.\n-          \/\/ Try to swing into 'fast-locked' state.\n-          assert(!lock_stack.contains(obj()), \"thread must not already hold the lock\");\n-          const markWord locked_mark = mark.set_fast_locked();\n-          const markWord old_mark = obj()->cas_set_mark(locked_mark, mark);\n-          if (old_mark == mark) {\n-            \/\/ Successfully fast-locked, push object to lock-stack and return.\n-            lock_stack.push(obj());\n-            return;\n-          }\n-          mark = old_mark;\n+        \/\/ Retry until a lock state change has been observed.  cas_set_mark() may collide with non lock bits modifications.\n+        \/\/ Try to swing into 'fast-locked' state.\n+        assert(!lock_stack.contains(obj()), \"thread must not already hold the lock\");\n+        const markWord locked_mark = mark.set_fast_locked();\n+        const markWord old_mark = obj()->cas_set_mark(locked_mark, mark);\n+        if (old_mark == mark) {\n+          \/\/ Successfully fast-locked, push object to lock-stack and return.\n+          lock_stack.push(obj());\n+          return;\n@@ -514,0 +512,2 @@\n+        mark = old_mark;\n+      }\n@@ -515,1 +515,1 @@\n-        if (mark.is_fast_locked() && lock_stack.try_recursive_enter(obj())) {\n+      if (mark.is_fast_locked() && lock_stack.try_recursive_enter(obj())) {\n@@ -571,1 +571,3 @@\n-        \/\/ This lock is recursive but unstructured exit. Just inflate the lock.\n+        \/\/ This lock is recursive but is not at the top of the lock stack so we're\n+        \/\/ doing an unstructured exit. We have to fall thru to inflation below and\n+        \/\/ let ObjectMonitor::exit() do the unlock.\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-\n","filename":"test\/hotspot\/gtest\/runtime\/test_lockStack.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}