{"files":[{"patch":"@@ -142,0 +142,3 @@\n+\/\/ This assures that this thread waits for some other thread's handle_out_of_memory_during_evacuation() call to finish\n+\/\/ setting the OOM bit in all counters before this thread proceeds.\n+\/\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacOOMHandler.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,3 +70,22 @@\n- *     we will transition to STW full gc at the end of the evacuation cycle.  Full GC\n- *     marks and compacts the entire heap.  If we fail to evacuate a single cset object,\n- *     we will pay the price of a full GC.\n+ *     we will transition first to degenerated GC and if that fails, to full GC at\n+ *     the end of this canceeled concurrent evacuation phase.  To heal heap invariants\n+ *     that may be violated temporarily during the Evac-OOM protocol, degenerated GC\n+ *     overwrites the update_watermark field of every heap region with its current top\n+ *     (because a pointer to the cset may have been leaked through a failed LRB and\n+ *     written into the heap above the original value of update_watermark.  Furthermore,\n+ *     the degenerated GC restarts the evacuation effort, revisiting every region in\n+ *     the cset (because we have no assurance that cset regions already evacuated during\n+ *     the concurrent evacuation were fully evacuated; at least one object failed to\n+ *     properly evacuate).  Degen GC evacuation may succeed after concurrent evacuation\n+ *     failed in the case that degeneration is triggered by failure of a mutator thread's\n+ *     LRB if there is more memory available within the GCLABs of GC worker threads than\n+ *     was available in the failing mutator's GCLAB.  Note, however, that the failed\n+ *     mutator thread was unable to refresh its GCLAB, so it is now unlikely that any\n+ *     GC Worker threads will be able to further expand their GCLABs.  This combination\n+ *     of circumstances contributes to the likelihood that degenerated GC will find it\n+ *     necessary to upgrade to Full GC.  Full GC marks and compacts the entire heap,\n+ *     redundantly repeating the marking and evacuation work that had just been completed\n+ *     by the cancelled concurrent and degenerated GC efforts.  Full GC marking includes\n+ *     resolution of lingering forwarding pointers that may be scattered throughout\n+ *     the previously selected cset when evacuation is abandoned before it has been\n+ *     completed.\n@@ -175,7 +194,10 @@\n- *  3. Do not automatically upgrade to Full GC.  Continue with concurrent GC as long as possible.\n- *     There is already a mechanism in place to escalate to Full GC if the mutator experiences out-of-memory\n- *     and\/or if concurrent GC is not \"productive\".  Transitions to Full GC are very costly because (i) this\n- *     results in a very long STW pause during which mutator threads are unresponsive, and (ii) Full GC\n- *     redundantly repeats work that was already successfully performed concurrently.  When OOM-during-evac\n- *     transitions to Full GC, we throw away and repeat all of the previously completed work of marking and\n- *     evacuating.\n+ *  3. Do not automatically degenerate or upgrade to Full GC.  Continue with concurrent GC as long as possible.\n+ *     The desired result is that the next concurrent GC will start a bit sooner (given that we failed to\n+ *     reclaim all of the garbage in this cycle's cset so we will have less allocation runway to idle before\n+ *     the next concurrent GC is triggered).  In the ideal, the next concurrent GC will finish cleaning up\n+ *     the cset regions that were abandoned in this cycle.  There is already a mechanism in place to escalate\n+ *     to Full GC if the mutator experiences out-of-memory and\/or if concurrent GC is not \"productive\".\n+ *     Transitions to Full GC are very costly because (i) this results in a very long STW pause during which\n+ *     mutator threads are unresponsive, and (ii) Full GC redundantly repeats work that was already successfully\n+ *     performed concurrently and\/or by degenerated GC.  When OOM-during-evac transitions to Full GC, we throw\n+ *     away and repeat all of the previously completed work of marking and evacuating.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacOOMHandler.hpp","additions":32,"deletions":10,"binary":false,"changes":42,"status":"modified"}]}