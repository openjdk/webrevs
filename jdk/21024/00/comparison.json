{"files":[{"patch":"@@ -902,1 +902,0 @@\n-    int max;\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import org.testng.Assert;\n@@ -41,0 +42,3 @@\n+    \/\/ MAX should be less then number of actually recored events\n+    private static int MAX = 9;\n+\n@@ -67,0 +71,15 @@\n+    public void run_max(CommandExecutor executor) {\n+        OutputAnalyzer output = executor.execute(\"VM.events max=\" + MAX);\n+        long lines = output.asLines().stream().filter(x -> x.contains(\"Loading class\")).count();\n+        Assert.assertTrue(lines == MAX, \"There are should be \" + MAX + \" lines\");\n+    }\n+\n+    public void run_max_selected(CommandExecutor executor) {\n+        OutputAnalyzer output = executor.execute(\"VM.events log=load max=\" + MAX);\n+        long lines = output.asLines().stream().filter(x -> x.contains(\"Loading class\")).count();\n+        Assert.assertTrue(lines == MAX, \"There are should be \" + MAX + \" lines\");\n+        output.stdoutShouldNotMatch(buildHeaderPattern(\"Events\"));\n+        output.stdoutShouldNotMatch(buildHeaderPattern(\"Compilation\"));\n+    }\n+\n+\n@@ -71,0 +90,2 @@\n+        run_max(new JMXExecutor());\n+        run_max_selected(new JMXExecutor());\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/EventsTest.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}