{"files":[{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.Label;\n+import java.awt.Point;\n+import java.awt.Toolkit;\n+import java.awt.image.BaseMultiResolutionImage;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.JFrame;\n+\n+\/*\n+ * @test\n+ * @bug 8028212\n+ * @summary [macosx] Custom Cursor HiDPI support\n+ * @requires (os.family == \"mac\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MultiResolutionCursorTest\n+ *\/\n+public class MultiResolutionCursorTest {\n+    static final int sizes[] = {8, 16, 32, 128};\n+    static final Color colors[] = {Color.WHITE, Color.RED, Color.GREEN, Color.BLUE};\n+\n+    private static JFrame initialize() {\n+        final Image image = new BaseMultiResolutionImage(\n+                createResolutionVariant(0),\n+                createResolutionVariant(1),\n+                createResolutionVariant(2),\n+                createResolutionVariant(3)\n+        );\n+\n+        int center = sizes[0] \/ 2;\n+        Cursor cursor = Toolkit.getDefaultToolkit().createCustomCursor(\n+                image, new Point(center, center), \"multi-resolution cursor\");\n+\n+        JFrame frame = new JFrame(\"Multi-resolution Cursor Test Frame\");\n+        frame.setSize(300, 300);\n+        frame.add(new Label(\"Move cursor here\"));\n+        frame.setCursor(cursor);\n+        return frame;\n+    }\n+\n+    private static BufferedImage createResolutionVariant(int i) {\n+        BufferedImage resolutionVariant = new BufferedImage(sizes[i], sizes[i],\n+                BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g2 = resolutionVariant.createGraphics();\n+        g2.setColor(colors[i]);\n+        g2.fillRect(0, 0, sizes[i], sizes[i]);\n+        g2.dispose();\n+        return resolutionVariant;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        String instructions = \"\"\"\n+                   Verify that high resolution custom cursor is used\n+                   on HiDPI displays.\n+                   1) Run the test on Retina display or enable the Quartz Debug\n+                      and select the screen resolution with (HiDPI) label\n+                   2) Move the cursor to the Test Frame\n+                   3) Check that cursor has red, green or blue color\n+                   If so, press Pass, else press Fail.\n+                   \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Multi-resolution Cursor Test Instructions\")\n+                .instructions(instructions)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(40)\n+                .testUI(MultiResolutionCursorTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/MultiResolutionCursorTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -1,32 +0,0 @@\n-<!--\n- Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-    <head>\n-        <title>High resolution custom cursor test, bug ID 8028212<\/title>\n-    <\/head>\n-    <body>\n-    <applet CODE=\"MultiResolutionCursorTest.class\" WIDTH=300 HEIGHT=100><\/applet>\n-    <p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/Cursor\/MultiResolutionCursorTest\/MultiResolutionCursorTest.html","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,233 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import java.awt.BorderLayout;\n-import java.awt.Color;\n-import java.awt.Cursor;\n-import java.awt.Dialog;\n-import java.awt.Frame;\n-import java.awt.Graphics2D;\n-import java.awt.Image;\n-import java.awt.Label;\n-import java.awt.Point;\n-import java.awt.TextArea;\n-import java.awt.Toolkit;\n-import java.awt.image.BaseMultiResolutionImage;\n-import java.awt.image.BufferedImage;\n-import javax.swing.JApplet;\n-\n-import jdk.test.lib.Platform;\n-\n-\/**\n- * @test\n- * @bug 8028212\n- * @summary [macosx] Custom Cursor HiDPI support\n- * @author Alexander Scherbatiy\n- * @library \/test\/lib\n- * @modules java.desktop\/sun.awt.image\n- * @build jdk.test.lib.Platform\n- * @run applet\/manual=yesno MultiResolutionCursorTest.html\n- *\/\n-public class MultiResolutionCursorTest extends JApplet {\n-    \/\/Declare things used in the test, like buttons and labels here\n-\n-    static final int sizes[] = {8, 16, 32, 128};\n-    static final Color colors[] = {Color.WHITE, Color.RED, Color.GREEN, Color.BLUE};\n-\n-    public void init() {\n-        \/\/Create instructions for the user here, as well as set up\n-        \/\/ the environment -- set the layout manager, add buttons,\n-        \/\/ etc.\n-        this.setLayout(new BorderLayout());\n-\n-        if (Platform.isOSX()) {\n-            String[] instructions = {\n-                \"Verify that high resolution custom cursor is used\"\n-                + \" on HiDPI displays.\",\n-                \"1) Run the test on Retina display or enable the Quartz Debug\"\n-                + \" and select the screen resolution with (HiDPI) label\",\n-                \"2) Move the cursor to the Test Frame\",\n-                \"3) Check that cursor has red, green or blue color\",\n-                \"If so, press PASS, else press FAIL.\"\n-            };\n-            Sysout.createDialogWithInstructions(instructions);\n-\n-        } else {\n-            String[] instructions = {\n-                \"This test is not applicable to the current platform. Press PASS.\"\n-            };\n-            Sysout.createDialogWithInstructions(instructions);\n-        }\n-    }\/\/End  init()\n-\n-    public void start() {\n-        \/\/Get things going.  Request focus, set size, et cetera\n-        setSize(200, 200);\n-        setVisible(true);\n-        validate();\n-\n-        final Image image = new BaseMultiResolutionImage(\n-                createResolutionVariant(0),\n-                createResolutionVariant(1),\n-                createResolutionVariant(2),\n-                createResolutionVariant(3)\n-        );\n-\n-        int center = sizes[0] \/ 2;\n-        Cursor cursor = Toolkit.getDefaultToolkit().createCustomCursor(\n-                image, new Point(center, center), \"multi-resolution cursor\");\n-\n-        Frame frame = new Frame(\"Test Frame\");\n-        frame.setSize(300, 300);\n-        frame.setLocation(300, 50);\n-        frame.add(new Label(\"Move cursor here\"));\n-        frame.setCursor(cursor);\n-        frame.setVisible(true);\n-    }\/\/ start()\n-\n-    static BufferedImage createResolutionVariant(int i) {\n-        BufferedImage resolutionVariant = new BufferedImage(sizes[i], sizes[i],\n-                BufferedImage.TYPE_INT_RGB);\n-        Graphics2D g2 = resolutionVariant.createGraphics();\n-        g2.setColor(colors[i]);\n-        g2.fillRect(0, 0, sizes[i], sizes[i]);\n-        g2.dispose();\n-        return resolutionVariant;\n-    }\n-}\/\/ class BlockedWindowTest\n-\n-\/* Place other classes related to the test after this line *\/\n-\/**\n- * **************************************************\n- * Standard Test Machinery DO NOT modify anything below -- it's a standard chunk\n- * of code whose purpose is to make user interaction uniform, and thereby make\n- * it simpler to read and understand someone else's test.\n- * **************************************************\n- *\/\n-\/**\n- * This is part of the standard test machinery. It creates a dialog (with the\n- * instructions), and is the interface for sending text messages to the user. To\n- * print the instructions, send an array of strings to Sysout.createDialog\n- * WithInstructions method. Put one line of instructions per array entry. To\n- * display a message for the tester to see, simply call Sysout.println with the\n- * string to be displayed. This mimics System.out.println but works within the\n- * test harness as well as standalone.\n- *\/\n-class Sysout {\n-\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions(String[] instructions) {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        dialog.printInstructions(instructions);\n-        dialog.setVisible(true);\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void createDialog() {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        String[] defInstr = {\"Instructions will appear here. \", \"\"};\n-        dialog.printInstructions(defInstr);\n-        dialog.setVisible(true);\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void printInstructions(String[] instructions) {\n-        dialog.printInstructions(instructions);\n-    }\n-\n-    public static void println(String messageIn) {\n-        dialog.displayMessage(messageIn);\n-    }\n-}\/\/ Sysout  class\n-\n-\/**\n- * This is part of the standard test machinery. It provides a place for the test\n- * instructions to be displayed, and a place for interactive messages to the\n- * user to be displayed. To have the test instructions displayed, see Sysout. To\n- * have a message to the user be displayed, see Sysout. Do not call anything in\n- * this dialog directly.\n- *\/\n-class TestDialog extends Dialog {\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog(Frame frame, String name) {\n-        super(frame, name);\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea(\"\", 15, maxStringLength, scrollBoth);\n-        add(\"North\", instructionsText);\n-\n-        messageText = new TextArea(\"\", 5, maxStringLength, scrollBoth);\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions(String[] instructions) {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText(\"\");\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for (int i = 0; i < instructions.length; i++) {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i];\n-            while (remainingStr.length() > 0) {\n-                \/\/if longer than max then chop off first max chars to print\n-                if (remainingStr.length() >= maxStringLength) {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.lastIndexOf(' ', maxStringLength - 1);\n-\n-                    if (posOfSpace <= 0) {\n-                        posOfSpace = maxStringLength - 1;\n-                    }\n-\n-                    printStr = remainingStr.substring(0, posOfSpace + 1);\n-                    remainingStr = remainingStr.substring(posOfSpace + 1);\n-                } \/\/else just print\n-                else {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append(printStr + \"\\n\");\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage(String messageIn) {\n-        messageText.append(messageIn + \"\\n\");\n-        System.out.println(messageIn);\n-    }\n-}\/\/ Te\n","filename":"test\/jdk\/java\/awt\/Cursor\/MultiResolutionCursorTest\/MultiResolutionCursorTest.java","additions":0,"deletions":233,"binary":false,"changes":233,"status":"deleted"}]}