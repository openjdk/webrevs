{"files":[{"patch":"@@ -62,0 +62,1 @@\n+    private static final DateTimeFormatter TIME_FORMAT_EXACT = DateTimeFormatter.ofPattern(\"HH:mm:ss.SSSSSSSSS (yyyy-MM-dd)\");\n@@ -64,0 +65,1 @@\n+    private final boolean showExact;\n@@ -67,1 +69,1 @@\n-    public PrettyWriter(PrintWriter destination) {\n+    public PrettyWriter(PrintWriter destination, boolean showExact) {\n@@ -69,0 +71,5 @@\n+        this.showExact = showExact;\n+    }\n+\n+    public PrettyWriter(PrintWriter destination) {\n+        this(destination, false);\n@@ -511,1 +518,5 @@\n-            println(ValueFormatter.formatDuration(d));\n+            if (showExact) {\n+                println(String.format(\"%.9f s\", (double) d.toNanos() \/ 1_000_000_000));\n+            } else {\n+                println(ValueFormatter.formatDuration(d));\n+            }\n@@ -519,1 +530,5 @@\n-            println(TIME_FORMAT.format(odt));\n+            if (showExact) {\n+                println(TIME_FORMAT_EXACT.format(odt));\n+            } else {\n+                println(TIME_FORMAT.format(odt));\n+            }\n@@ -525,2 +540,6 @@\n-                double d = n.doubleValue();\n-                println(String.format(\"%.2f\", d * 100) + \"%\");\n+                double p = 100 * n.doubleValue();\n+                if (showExact) {\n+                    println(String.format(\"%.9f%%\", p));\n+                } else {\n+                    println(String.format(\"%.2f%%\", p));\n+                }\n@@ -531,22 +550,8 @@\n-        if (dataAmount != null) {\n-            if (value instanceof Number n) {\n-                long amount = n.longValue();\n-                if (field.getAnnotation(Frequency.class) != null) {\n-                    if (dataAmount.value().equals(DataAmount.BYTES)) {\n-                        println(ValueFormatter.formatBytesPerSecond(amount));\n-                        return true;\n-                    }\n-                    if (dataAmount.value().equals(DataAmount.BITS)) {\n-                        println(ValueFormatter.formatBitsPerSecond(amount));\n-                        return true;\n-                    }\n-                } else {\n-                    if (dataAmount.value().equals(DataAmount.BYTES)) {\n-                        println(ValueFormatter.formatBytes(amount));\n-                        return true;\n-                    }\n-                    if (dataAmount.value().equals(DataAmount.BITS)) {\n-                        println(ValueFormatter.formatBits(amount));\n-                        return true;\n-                    }\n-                }\n+        if (dataAmount != null && value instanceof Number number) {\n+            boolean frequency = field.getAnnotation(Frequency.class) != null;\n+            String unit = dataAmount.value();\n+            boolean bits = unit.equals(DataAmount.BITS);\n+            boolean bytes = unit.equals(DataAmount.BYTES);\n+            if (bits || bytes) {\n+                formatMemory(number.longValue(), bytes, frequency);\n+                return true;\n@@ -574,0 +579,29 @@\n+    private void formatMemory(long value, boolean bytesUnit, boolean frequency) {\n+        if (showExact) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(value);\n+            sb.append(bytesUnit ? \" byte\" : \" bit\");\n+            if (value > 1) {\n+                sb.append(\"s\");\n+            }\n+            if (frequency) {\n+                sb.append(\"\/s\");\n+            }\n+            println(sb.toString());\n+            return;\n+        }\n+        if (frequency) {\n+            if (bytesUnit) {\n+                println(ValueFormatter.formatBytesPerSecond(value));\n+            } else {\n+                println(ValueFormatter.formatBitsPerSecond(value));\n+            }\n+            return;\n+        }\n+        if (bytesUnit) {\n+            println(ValueFormatter.formatBytes(value));\n+        } else {\n+            println(ValueFormatter.formatBits(value));\n+        }\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/PrettyWriter.java","additions":61,"deletions":27,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        list.add(\"[--xml|--json]\");\n+        list.add(\"[--xml|--json|--exact]\");\n@@ -76,0 +76,2 @@\n+        stream.println(\"  --exact                 Pretty-print numbers and timestamps with full precision.\");\n+        stream.println();\n@@ -98,1 +100,1 @@\n-        stream.println(\" jfr print --events \"+ q + \"jdk.*\" + q +\" --stack-depth 64 recording.jfr\");\n+        stream.println(\" jfr print --exact --events \"+ q + \"jdk.*\" + q +\" --stack-depth 64 recording.jfr\");\n@@ -143,0 +145,3 @@\n+            if (acceptFormatterOption(options, eventWriter, \"--exact\")) {\n+                eventWriter = new PrettyWriter(pw, true);;\n+            }\n@@ -158,1 +163,1 @@\n-            eventWriter = new PrettyWriter(pw); \/\/ default to pretty printer\n+            eventWriter = new PrettyWriter(pw, false); \/\/ default to pretty printer\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Print.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-`jfr print` \\[`--xml`|`--json`\\]\n+`jfr print` \\[`--xml`|`--json`|`--exact`\\]\n@@ -123,0 +123,3 @@\n+<a id=\"print-option-exact\">`--exact`<\/a>\n+: Pretty-print numbers and timestamps with full precision.\n+\n","filename":"src\/jdk.jfr\/share\/man\/jfr.md","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.io.IOException;\n@@ -29,0 +30,1 @@\n+import java.util.List;\n@@ -30,0 +32,8 @@\n+import jdk.jfr.Recording;\n+import jdk.jfr.Event;\n+import jdk.jfr.Percentage;\n+import jdk.jfr.Timestamp;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Frequency;\n@@ -43,0 +53,39 @@\n+    static class ExactEvent extends Event {\n+        @DataAmount(DataAmount.BITS)\n+        long oneBit;\n+\n+        @DataAmount(DataAmount.BITS)\n+        long bits;\n+\n+        @Frequency\n+        @DataAmount(DataAmount.BITS)\n+        long oneBitPerSecond;\n+\n+        @Frequency\n+        @DataAmount(DataAmount.BITS)\n+        long bitsPerSecond;\n+\n+        @DataAmount(DataAmount.BYTES)\n+        long oneByte;\n+\n+        @DataAmount(DataAmount.BYTES)\n+        long bytes;\n+\n+        @Frequency\n+        @DataAmount(DataAmount.BYTES)\n+        long oneBytePerSecond;\n+\n+        @Frequency\n+        @DataAmount(DataAmount.BYTES)\n+        long bytesPerSecond;\n+\n+        @Percentage\n+        double percentage;\n+\n+        @Timestamp(Timestamp.MILLISECONDS_SINCE_EPOCH)\n+        long timestamp;\n+\n+        @Timespan(Timespan.NANOSECONDS)\n+        long timespan;\n+    }\n+\n@@ -44,0 +93,5 @@\n+        testNoFile();\n+        testMissingFile();\n+        testIncorrectOption();\n+        testExact();\n+    }\n@@ -45,0 +99,1 @@\n+    private static void testNoFile() throws Throwable {\n@@ -47,0 +102,1 @@\n+    }\n@@ -48,1 +104,2 @@\n-        output = ExecuteHelper.jfr(\"print\", \"missing.jfr\");\n+    private static void testMissingFile() throws Throwable {\n+        OutputAnalyzer output = ExecuteHelper.jfr(\"print\", \"missing.jfr\");\n@@ -50,0 +107,1 @@\n+    }\n@@ -51,1 +109,2 @@\n-        Path file = Utils.createTempFile(\"faked-print-file\",  \".jfr\");\n+    private static void testIncorrectOption() throws Throwable {\n+        Path file = Utils.createTempFile(\"faked-print-file\", \".jfr\");\n@@ -55,1 +114,1 @@\n-        output = ExecuteHelper.jfr(\"print\", \"--wrongOption\", file.toAbsolutePath().toString());\n+        OutputAnalyzer output = ExecuteHelper.jfr(\"print\", \"--wrongOption\", file.toAbsolutePath().toString());\n@@ -59,0 +118,36 @@\n+\n+    private static void testExact() throws Throwable{\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            ExactEvent e = new ExactEvent();\n+            e.begin();\n+            e.oneBit            = 1L;\n+            e.bits              = 222_222_222L;\n+            e.oneBitPerSecond   = 1L;\n+            e.bitsPerSecond     = 333_333_333L;\n+            e.oneByte           = 1L;\n+            e.bytes             = 444_444_444L;\n+            e.oneBytePerSecond  = 1L;\n+            e.bytesPerSecond    = 555_555_555L;\n+            e.percentage        = 0.666_666_666_66;\n+            e.timestamp         = 777;\n+            e.timespan          = 888_888_888L;\n+            e.commit();\n+            r.stop();\n+            Path file = Path.of(\"exact.jfr\");\n+            r.dump(file);\n+            OutputAnalyzer output = ExecuteHelper.jfr(\"print\", \"--exact\", file.toAbsolutePath().toString());\n+            output.shouldContain(\"oneBit = 1 bit\");\n+            output.shouldContain(\"bits = 222222222 bits\");\n+            output.shouldContain(\"oneBitPerSecond = 1 bit\/s\");\n+            output.shouldContain(\"bitsPerSecond = 333333333 bits\/s\");\n+            output.shouldContain(\"oneByte = 1 byte\");\n+            output.shouldContain(\"bytes = 444444444 bytes\");\n+            output.shouldContain(\"oneBytePerSecond = 1 byte\/s\");\n+            output.shouldContain(\"bytesPerSecond = 555555555 bytes\/s\");\n+            output.shouldContain(String.valueOf(100 * e.percentage) + \"%\");\n+            output.shouldContain(\"00.777000000 (19\");\n+            output.shouldContain(String.valueOf(e.timespan) + \" s\");\n+            Files.delete(file);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestPrint.java","additions":98,"deletions":3,"binary":false,"changes":101,"status":"modified"}]}