{"files":[{"patch":"@@ -813,3 +813,0 @@\n-        Type selsuper = types.supertype(tree.selector.type);\n-        boolean enumSwitch = selsuper != null &&\n-            selsuper.tsym == syms.enumSym;\n@@ -851,3 +848,0 @@\n-        Type selsuper = types.supertype(tree.selector.type);\n-        boolean enumSwitch = selsuper != null &&\n-            selsuper.tsym == syms.enumSym;\n@@ -855,1 +849,1 @@\n-        tree.cases = translate(tree.cases, tree.type);\n+        tree.cases = translate(tree.cases, erasure(tree.type));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8214031\n+ * @bug 8214031 8357361\n@@ -32,0 +32,2 @@\n+import java.util.Objects;\n+\n@@ -46,0 +48,2 @@\n+        new ExpressionSwitchBugsInGen().testSwitchExpressionTypeErased(0);\n+        new ExpressionSwitchBugsInGen().testSwitchExpressionTypeErased(1);\n@@ -94,0 +98,17 @@\n+    \/\/JDK-8357361:\n+    private void testSwitchExpressionTypeErased(int i) {\n+        interface Readable<R extends String> {\n+            R getReader();\n+        }\n+        Readable<?> readable = () -> \"\";\n+        var v = switch (i) {\n+            case 0 -> readable.getReader();\n+            default -> null;\n+        };\n+        var expected = i == 0 ? \"\" : null;\n+        if (!Objects.equals(v, expected)) {\n+            throw new IllegalStateException(\"Expected: \" + expected +\n+                                            \", got: \" + v);\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchBugsInGen.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"}]}