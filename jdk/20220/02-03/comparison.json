{"files":[{"patch":"@@ -460,2 +460,3 @@\n-        throws InterruptedException {\n-        Objects.requireNonNull(unit, \"unit\"); \/\/ throw NPE before other conditions\n+        throws InterruptedException\n+    {\n+        long remainingNanos = unit.toNanos(timeout); \/\/ throw NPE before other conditions\n@@ -468,1 +469,9 @@\n-        return waitForNanos(unit.toNanos(timeout));\n+        long deadline = System.nanoTime() + remainingNanos;\n+        do {\n+            Thread.sleep(Math.min(TimeUnit.NANOSECONDS.toMillis(remainingNanos) + 1, 100));\n+            if (hasExited())\n+                return true;\n+            remainingNanos = deadline - System.nanoTime();\n+        } while (remainingNanos > 0);\n+\n+        return false;\n@@ -495,22 +504,3 @@\n-    public boolean waitFor(Duration duration)\n-            throws InterruptedException {\n-        Objects.requireNonNull(duration, \"duration\"); \/\/ throw NPE before other conditions\n-\n-        if (hasExited())\n-            return true;\n-        if (!duration.isPositive())\n-            return false;\n-\n-        return waitForNanos(TimeUnit.NANOSECONDS.convert(duration));\n-    }\n-\n-    private boolean waitForNanos(long remainingNanos) throws InterruptedException {\n-        long deadline = System.nanoTime() + remainingNanos;\n-        do {\n-            Thread.sleep(Math.min(TimeUnit.NANOSECONDS.toMillis(remainingNanos) + 1, 100));\n-            if (hasExited())\n-                return true;\n-            remainingNanos = deadline - System.nanoTime();\n-        } while (remainingNanos > 0);\n-\n-        return false;\n+    public boolean waitFor(Duration duration) throws InterruptedException {\n+        Objects.requireNonNull(duration, \"duration\");\n+        return waitFor(TimeUnit.NANOSECONDS.convert(duration), TimeUnit.NANOSECONDS);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":15,"deletions":25,"binary":false,"changes":40,"status":"modified"}]}