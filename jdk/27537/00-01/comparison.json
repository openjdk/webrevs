{"files":[{"patch":"@@ -84,2 +84,2 @@\n-  JMM_GC_CPU_TIME                    = 11,   \/* Total accumulated GC CPU time *\/\n-  JMM_JVM_UPTIME_MS                  = 12,   \/* The JVM uptime in milliseconds *\/\n+  JMM_JVM_UPTIME_MS                  = 11,   \/* The JVM uptime in milliseconds *\/\n+  JMM_GC_CPU_TIME                    = 12,   \/* Total accumulated GC CPU time *\/\n","filename":"src\/hotspot\/share\/include\/jmm.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,18 +270,0 @@\n-    \/**\n-     * Returns the CPU time used by all garbage collection threads.\n-     *\n-     * <p> This include time since genesis, so the value can be\n-     * non-zero even if no garbage collection cycles occured. In\n-     * general this includes time for all driver threads,\n-     * workers, VM operations on the VM thread and the string\n-     * deduplication thread (if enabled). This method returns\n-     * {@code -1} if the platform does not support this operation\n-     * or if called during shutdown.\n-     *\n-     * @return the total CPU time for all garbage collection\n-     * threads in nanoseconds.\n-     *\n-     * @since 26\n-     *\/\n-    public long getGcCpuTime();\n-\n@@ -323,0 +305,1 @@\n+\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/MemoryMXBean.java","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-class MemoryImpl extends NotificationEmitterSupport\n+public class MemoryImpl extends NotificationEmitterSupport\n@@ -49,1 +49,1 @@\n-    private final VMManagement jvm;\n+    protected final VMManagement jvm;\n@@ -57,1 +57,1 @@\n-    MemoryImpl(VMManagement vm) {\n+    protected MemoryImpl(VMManagement vm) {\n@@ -70,4 +70,0 @@\n-    public long getGcCpuTime() {\n-        return jvm.getGcCpuTime();\n-    }\n-\n","filename":"src\/java.management\/share\/classes\/sun\/management\/MemoryImpl.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    public long    getGcCpuTime();\n+    public long    getTotalGcCpuTime();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/VMManagement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-    public native long getGcCpuTime();\n+    public native long getTotalGcCpuTime();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/VMManagementImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-Java_sun_management_VMManagementImpl_getGcCpuTime\n+Java_sun_management_VMManagementImpl_getTotalGcCpuTime\n","filename":"src\/java.management\/share\/native\/libmanagement\/VMManagementImpl.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.management;\n+\n+\/**\n+ * Platform-specific management interface for the memory\n+ * system on which the Java virtual machine is running.\n+ *\n+ * @since 26\n+ *\/\n+\n+public interface MemoryMXBean extends java.lang.management.MemoryMXBean {\n+    \/**\n+     * Returns the CPU time used by garbage collection.\n+     *\n+     * <p> CPU time used by all garbage collection. In\n+     * general this includes time for all driver threads,\n+     * workers, VM operations on the VM thread and the string\n+     * deduplication thread (if enabled). May be non-zero even if no\n+     * GC cycle occurred. This method returns {@code -1} if the\n+     * platform does not support this operation or if called during\n+     * shutdown.\n+     *\n+     * @return the total accumulated CPU time for garbage collection\n+     * in nanoseconds.\n+     *\n+     * @since 26\n+     *\/\n+    public long getTotalGcCpuTime();\n+}\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/MemoryMXBean.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.management.internal;\n+\n+import com.sun.management.MemoryMXBean;\n+import sun.management.ManagementFactoryHelper;\n+import sun.management.MemoryImpl;\n+import sun.management.VMManagement;\n+\n+\/**\n+ * Implementation of the Memory MBean for Hotspot VM.\n+ *\/\n+public class HotSpotMemoryImpl extends MemoryImpl implements MemoryMXBean {\n+    public HotSpotMemoryImpl(VMManagement vm) {\n+        super(ManagementFactoryHelper.getVMManagement());\n+    }\n+\n+    public long getTotalGcCpuTime() {\n+        return jvm.getTotalGcCpuTime();\n+    }\n+}\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/HotSpotMemoryImpl.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.management.MemoryMXBean;\n@@ -54,0 +55,1 @@\n+    private static MemoryMXBean memoryMBean = null;\n@@ -197,0 +199,35 @@\n+        \/**\n+         * MemoryMXBean\n+         *\/\n+        initMBeanList.add(new PlatformComponent<MemoryMXBean>() {\n+            private final Set<String> memoryMXBeanInterfaceNames\n+                    = Collections.unmodifiableSet(\n+                            Stream.of(\"java.lang.management.MemoryMXBean\",\n+                                    \"com.sun.management.MemoryMXBean\")\n+                            .collect(Collectors.toSet()));\n+\n+            @Override\n+            public Set<Class<? extends MemoryMXBean>> mbeanInterfaces() {\n+                return Stream.of(java.lang.management.MemoryMXBean.class,\n+                        com.sun.management.MemoryMXBean.class)\n+                        .collect(Collectors.toSet());\n+            }\n+\n+            @Override\n+            public Set<String> mbeanInterfaceNames() {\n+                return memoryMXBeanInterfaceNames;\n+            }\n+\n+            @Override\n+            public String getObjectNamePattern() {\n+                return ManagementFactory.MEMORY_MXBEAN_NAME;\n+            }\n+\n+            @Override\n+            public Map<String, java.lang.management.MemoryMXBean> nameToMBeanMap() {\n+                return Collections.<String, java.lang.management.MemoryMXBean>singletonMap(\n+                        ManagementFactory.MEMORY_MXBEAN_NAME,\n+                        getMemoryMXBean());\n+            }\n+        });\n+\n@@ -315,0 +352,7 @@\n+\n+    private static synchronized MemoryMXBean getMemoryMXBean() {\n+        if (memoryMBean == null) {\n+            memoryMBean = new HotSpotMemoryImpl(ManagementFactoryHelper.getVMManagement());\n+        }\n+        return memoryMBean;\n+    }\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/PlatformMBeanProviderImpl.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -61,4 +61,0 @@\n-        public long getGcCpuTime() {\n-                throw new UnsupportedOperationException(\"This method is not supported\");\n-        }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/share\/server\/ServerMemoryMXBean.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8368527\n+ * @library \/test\/lib\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ *\n+ * @run main\/othervm -XX:+UseSerialGC GetTotalGcCpuTime _\n+ * @run main\/othervm -XX:+UseParallelGC GetTotalGcCpuTime _\n+ * @run main\/othervm -XX:+UseG1GC GetTotalGcCpuTime _\n+ * @run main\/othervm -XX:+UseZGC GetTotalGcCpuTime _\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import static jdk.test.lib.process.ProcessTools.createTestJavaProcessBuilder;\n+import static jdk.test.lib.process.ProcessTools.executeProcess;\n+\n+import com.sun.management.MemoryMXBean;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadMXBean;\n+\n+public class GetTotalGcCpuTime {\n+    static final ThreadMXBean mxThreadBean = ManagementFactory.getThreadMXBean();\n+    static final MemoryMXBean mxMemoryBean = ManagementFactory.getPlatformMXBean(MemoryMXBean.class);\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length > 0) {\n+            ProcessBuilder pb = createTestJavaProcessBuilder(\"GetTotalGcCpuTime\");\n+            OutputAnalyzer output = executeProcess(pb);\n+            output.shouldNotContain(\"GC CPU time should\");\n+            output.shouldHaveExitValue(0);\n+            return;\n+        }\n+\n+        try {\n+            if (!mxThreadBean.isThreadCpuTimeEnabled()) {\n+                return;\n+            }\n+        } catch (UnsupportedOperationException e) {\n+            if (mxMemoryBean.getTotalGcCpuTime() != -1) {\n+                throw new Error(\"GC CPU time should be -1\");\n+            }\n+            return;\n+        }\n+\n+        final int numberOfThreads = Runtime.getRuntime().availableProcessors() * 8;\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            Thread t = new Thread(() -> {\n+                while (true) {\n+                    long gcCpuTimeFromThread = mxMemoryBean.getTotalGcCpuTime();\n+                    if (gcCpuTimeFromThread < -1) {\n+                        throw new Error(\"GC CPU time should never be less than -1 but was \" + gcCpuTimeFromThread);\n+                    }\n+                }\n+            });\n+            t.start();\n+        }\n+\n+        System.exit(0);\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/management\/MemoryMXBean\/GetTotalGcCpuTime.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug     8368527\n- * @library \/test\/lib\n- * @summary Stress MemoryMXBean.getGcCpuTime during shutdown\n- *\n- * @run main\/othervm -XX:+UseSerialGC GetGcCpuTime _\n- * @run main\/othervm -XX:+UseParallelGC GetGcCpuTime _\n- * @run main\/othervm -XX:+UseG1GC GetGcCpuTime _\n- * @run main\/othervm -XX:+UseZGC GetGcCpuTime _\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import static jdk.test.lib.process.ProcessTools.createTestJavaProcessBuilder;\n-import static jdk.test.lib.process.ProcessTools.executeProcess;\n-\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.MemoryMXBean;\n-import java.lang.management.ThreadMXBean;\n-\n-public class GetGcCpuTime {\n-    static final ThreadMXBean mxThreadBean = ManagementFactory.getThreadMXBean();\n-    static final MemoryMXBean mxMemoryBean = ManagementFactory.getMemoryMXBean();\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length > 0) {\n-            ProcessBuilder pb = createTestJavaProcessBuilder(\"GetGcCpuTime\");\n-            OutputAnalyzer output = executeProcess(pb);\n-            output.shouldNotContain(\"GC CPU time should\");\n-            output.shouldHaveExitValue(0);\n-            return;\n-        }\n-\n-        try {\n-            if (!mxThreadBean.isThreadCpuTimeEnabled()) {\n-                return;\n-            }\n-        } catch (UnsupportedOperationException e) {\n-            if (mxMemoryBean.getGcCpuTime() != -1) {\n-                throw new Error(\"GC CPU time should be -1\");\n-            }\n-            return;\n-        }\n-\n-        final int numberOfThreads = Runtime.getRuntime().availableProcessors() * 8;\n-        for (int i = 0; i < numberOfThreads; i++) {\n-            Thread t = new Thread(() -> {\n-                while (true) {\n-                    long gcCpuTimeFromThread = mxMemoryBean.getGcCpuTime();\n-                    if (gcCpuTimeFromThread < -1) {\n-                        throw new Error(\"GC CPU time should never be less than -1 but was \" + gcCpuTimeFromThread);\n-                    }\n-                }\n-            });\n-            t.start();\n-        }\n-\n-        System.exit(0);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/GetGcCpuTime.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -225,2 +225,0 @@\n-            System.out.println(\"getGcCpuTime\\t\\t\"\n-                    + memory.getGcCpuTime());\n","filename":"test\/jdk\/javax\/management\/mxbean\/MXBeanInteropTest1.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}