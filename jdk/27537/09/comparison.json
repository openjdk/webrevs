{"files":[{"patch":"@@ -56,1 +56,2 @@\n-  JMM_VERSION     = JMM_VERSION_4\n+  JMM_VERSION_5   = 0x20050000, \/\/ JDK 26\n+  JMM_VERSION     = JMM_VERSION_5\n@@ -84,0 +85,1 @@\n+  JMM_TOTAL_GC_CPU_TIME              = 12,   \/* Total accumulated GC CPU time *\/\n","filename":"src\/hotspot\/share\/include\/jmm.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  assert(!Universe::is_shutting_down(), \"Should not query during shutdown\");\n","filename":"src\/hotspot\/share\/services\/cpuTimeUsage.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+#include \"services\/cpuTimeUsage.hpp\"\n@@ -892,0 +893,15 @@\n+static jlong get_gc_cpu_time() {\n+  if (!os::is_thread_cpu_time_supported()) {\n+    return -1;\n+  }\n+\n+  {\n+    MutexLocker hl(Heap_lock);\n+    if (Universe::heap()->is_shutting_down()) {\n+      return -1;\n+    }\n+\n+    return CPUTimeUsage::GC::total();\n+  }\n+}\n+\n@@ -918,0 +934,3 @@\n+  case JMM_TOTAL_GC_CPU_TIME:\n+    return get_gc_cpu_time();\n+\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,0 +270,37 @@\n+    \/**\n+     * Returns the approximate accumulated time, in nanoseconds,\n+     * spent in garbage collection (GC).\n+     *\n+     * <p> The time spent in spent in GC is the CPU time used by\n+     * all GC activity, including any overhead, which means the\n+     * result may be non-zero even if no GC has occurred.\n+     *\n+     * This method returns {@code -1} if the platform does\n+     * not support this operation or the information is not\n+     * available.\n+     *\n+     * @apiNote\n+     * May be used in conjunction with {@link jdk.management\/com.sun.management.OperatingSystemMXBean#getProcessCpuTime()}\n+     * for calculating the GC's usage of CPU time as a whole.\n+     *\n+     * @implNote The specifics on what constitutes the time spent\n+     * in GC are highly implementation dependent. In the HotSpot\n+     * Virtual Machine, this time includes relevant\n+     * implementation-specific details such as driver threads,\n+     * workers, VM Operations and string deduplication (if\n+     * enabled). Driver threads may be created by a GC to\n+     * orchestrate its work. The return value can be -1 if called\n+     * when measurement is not possible, such as during shutdown.\n+     *\n+     * @implSpec The default implementation returns {@code -1}.\n+     *\n+     * @return the total accumulated CPU time for GC in\n+     * nanoseconds, or {@code -1}.\n+     *\n+     * @since 26\n+     *\/\n+    @SuppressWarnings(\"doclint:reference\")\n+    default public long getTotalGcCpuTime() {\n+        return -1;\n+    }\n+\n@@ -305,1 +342,0 @@\n-\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/MemoryMXBean.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    public long getTotalGcCpuTime() {\n+        return jvm.getTotalGcCpuTime();\n+    }\n+\n","filename":"src\/java.management\/share\/classes\/sun\/management\/MemoryImpl.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+    public long    getTotalGcCpuTime();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/VMManagement.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+    public native long getTotalGcCpuTime();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/VMManagementImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -124,0 +124,7 @@\n+JNIEXPORT jlong JNICALL\n+Java_sun_management_VMManagementImpl_getTotalGcCpuTime\n+  (JNIEnv *env, jobject dummy)\n+{\n+    return jmm_interface->GetLongAttribute(env, NULL, JMM_TOTAL_GC_CPU_TIME);\n+}\n+\n","filename":"src\/java.management\/share\/native\/libmanagement\/VMManagementImpl.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -61,0 +61,4 @@\n+        public long getTotalGcCpuTime() {\n+                throw new UnsupportedOperationException(\"This method is not supported\");\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/share\/server\/ServerMemoryMXBean.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=Epsilon\n+ * @requires vm.gc.Epsilon\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+\/*\n+ * @test id=Serial\n+ * @requires vm.gc.Serial\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseSerialGC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+\/*\n+ * @test id=Parallel\n+ * @requires vm.gc.Parallel\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseParallelGC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+\/*\n+ * @test id=G1\n+ * @requires vm.gc.G1\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseG1GC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+\/*\n+ * @test id=ZGC\n+ * @requires vm.gc.Z\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseZGC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+\/*\n+ * @test id=Shenandoah\n+ * @requires vm.gc.Shenandoah\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseShenandoahGC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.ThreadMXBean;\n+\n+public class StressGetTotalGcCpuTimeDuringShutdown {\n+    static final ThreadMXBean mxThreadBean = ManagementFactory.getThreadMXBean();\n+    static final MemoryMXBean mxMemoryBean = ManagementFactory.getMemoryMXBean();\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            if (!mxThreadBean.isThreadCpuTimeEnabled()) {\n+                return;\n+            }\n+        } catch (UnsupportedOperationException e) {\n+            if (mxMemoryBean.getTotalGcCpuTime() != -1) {\n+                throw new RuntimeException(\"GC CPU time should be -1\");\n+            }\n+            return;\n+        }\n+\n+        final int numberOfThreads = Runtime.getRuntime().availableProcessors() * 8;\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            Thread t = new Thread(() -> {\n+                while (true) {\n+                    long gcCpuTimeFromThread = mxMemoryBean.getTotalGcCpuTime();\n+                    if (gcCpuTimeFromThread < -1) {\n+                        throw new RuntimeException(\"GC CPU time should never be less than -1 but was \" + gcCpuTimeFromThread);\n+                    }\n+                }\n+            });\n+            t.setDaemon(true);\n+            t.start();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/StressGetTotalGcCpuTimeDuringShutdown.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=Epsilon\n+ * @requires vm.gc.Epsilon\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC TestGetTotalGcCpuTime\n+ *\/\n+\n+\/*\n+ * @test id=Serial\n+ * @requires vm.gc.Serial\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseSerialGC TestGetTotalGcCpuTime\n+ *\/\n+\n+\/*\n+ * @test id=Parallel\n+ * @requires vm.gc.Parallel\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseParallelGC TestGetTotalGcCpuTime\n+ *\/\n+\n+\/*\n+ * @test id=G1\n+ * @requires vm.gc.G1\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseG1GC TestGetTotalGcCpuTime\n+ *\/\n+\n+\/*\n+ * @test id=ZGC\n+ * @requires vm.gc.Z\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseZGC TestGetTotalGcCpuTime\n+ *\/\n+\n+\/*\n+ * @test id=Shenandoah\n+ * @requires vm.gc.Shenandoah\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseShenandoahGC TestGetTotalGcCpuTime\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.ThreadMXBean;\n+\n+public class TestGetTotalGcCpuTime {\n+    static final ThreadMXBean mxThreadBean = ManagementFactory.getThreadMXBean();\n+    static final MemoryMXBean mxMemoryBean = ManagementFactory.getMemoryMXBean();\n+    static final boolean usingEpsilonGC = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().anyMatch(p -> p.contains(\"-XX:+UseEpsilonGC\"));\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            if (!mxThreadBean.isThreadCpuTimeEnabled()) {\n+                return;\n+            }\n+        } catch (UnsupportedOperationException e) {\n+            if (mxMemoryBean.getTotalGcCpuTime() != -1) {\n+                throw new RuntimeException(\"GC CPU time should be -1\");\n+            }\n+            return;\n+        }\n+\n+        System.gc();\n+        long gcCpuTimeFromThread = mxMemoryBean.getTotalGcCpuTime();\n+\n+        if (usingEpsilonGC) {\n+            if (gcCpuTimeFromThread != 0) {\n+                throw new RuntimeException(\"Epsilon GC can't have any GC CPU time by definition\");\n+            }\n+        } else {\n+            if (gcCpuTimeFromThread <= 0) {\n+                throw new RuntimeException(\"Some GC CPU time must have been reported\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/TestGetTotalGcCpuTime.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -225,0 +225,2 @@\n+            System.out.println(\"getTotalGcCpuTime\\t\\t\"\n+                    + memory.getTotalGcCpuTime());\n","filename":"test\/jdk\/javax\/management\/mxbean\/MXBeanInteropTest1.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}