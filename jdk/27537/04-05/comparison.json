{"files":[{"patch":"@@ -271,1 +271,2 @@\n-     * Returns the CPU time used by garbage collection.\n+     * Returns the approximate accumulated time, in nanoseconds,\n+     * spent in garbage collection.\n@@ -281,5 +282,14 @@\n-     * @implNote Reported time will include relevant\n-     * implementation-specific details such as driver threads,\n-     * workers, VM Operations and string deduplication (if enabled).\n-     * The return value can be -1 if called when measurement is\n-     * not possible, such as during shutdown.\n+     * @apiNote\n+     * May be used in conjunction with com.sun.management.OperatingSystemMXBean.getProcessCpuTime()\n+     * for calculating the GC's usage of CPU time as a whole.\n+     *\n+     * @implNote  The specifics on what constitutes the time spent\n+     * in garbage collection is highly implementation dependent.\n+     * In the HotSpot Virtual Machine implementation reported\n+     * time will include relevant implementation-specific details such\n+     * as driver threads, workers, VM Operations and string\n+     * deduplication (if enabled). Driver threads may be created by a GC\n+     * to orchestrate its work. The return value can be -1 if\n+     * called when measurement is not possible, such as during shutdown.\n+     *\n+     * @implSpec The default implementation return {@code -1}.\n@@ -288,1 +298,1 @@\n-     * in nanoseconds, or -1\n+     * in nanoseconds, or {@code -1}.\n@@ -292,1 +302,3 @@\n-    public long getTotalGcCpuTime();\n+    default public long getTotalGcCpuTime() {\n+        return -1;\n+    };\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/MemoryMXBean.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"}]}