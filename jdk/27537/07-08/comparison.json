{"files":[{"patch":"@@ -305,1 +305,1 @@\n-    };\n+    }\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/MemoryMXBean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug     8368527\n- * @library \/test\/lib\n- * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n- *\n- * @run main\/othervm -XX:+UseSerialGC GetTotalGcCpuTime _\n- * @run main\/othervm -XX:+UseParallelGC GetTotalGcCpuTime _\n- * @run main\/othervm -XX:+UseG1GC GetTotalGcCpuTime _\n- * @run main\/othervm -XX:+UseZGC GetTotalGcCpuTime _\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import static jdk.test.lib.process.ProcessTools.createTestJavaProcessBuilder;\n-import static jdk.test.lib.process.ProcessTools.executeProcess;\n-\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.MemoryMXBean;\n-import java.lang.management.ThreadMXBean;\n-\n-public class GetTotalGcCpuTime {\n-    static final ThreadMXBean mxThreadBean = ManagementFactory.getThreadMXBean();\n-    static final MemoryMXBean mxMemoryBean = ManagementFactory.getMemoryMXBean();\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length > 0) {\n-            ProcessBuilder pb = createTestJavaProcessBuilder(\"GetTotalGcCpuTime\");\n-            OutputAnalyzer output = executeProcess(pb);\n-            output.shouldNotContain(\"GC CPU time should\");\n-            output.shouldHaveExitValue(0);\n-            return;\n-        }\n-\n-        try {\n-            if (!mxThreadBean.isThreadCpuTimeEnabled()) {\n-                return;\n-            }\n-        } catch (UnsupportedOperationException e) {\n-            if (mxMemoryBean.getTotalGcCpuTime() != -1) {\n-                throw new Error(\"GC CPU time should be -1\");\n-            }\n-            return;\n-        }\n-\n-        final int numberOfThreads = Runtime.getRuntime().availableProcessors() * 8;\n-        for (int i = 0; i < numberOfThreads; i++) {\n-            Thread t = new Thread(() -> {\n-                while (true) {\n-                    long gcCpuTimeFromThread = mxMemoryBean.getTotalGcCpuTime();\n-                    if (gcCpuTimeFromThread < -1) {\n-                        throw new Error(\"GC CPU time should never be less than -1 but was \" + gcCpuTimeFromThread);\n-                    }\n-                }\n-            });\n-            t.start();\n-        }\n-\n-        System.exit(0);\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/GetTotalGcCpuTime.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=Epsilon\n+ * @requires vm.gc.Epsilon\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+\/*\n+ * @test id=Serial\n+ * @requires vm.gc.Serial\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseSerialGC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+\/*\n+ * @test id=Parallel\n+ * @requires vm.gc.Parallel\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseParallelGC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+\/*\n+ * @test id=G1\n+ * @requires vm.gc.G1\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseG1GC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+\/*\n+ * @test id=ZGC\n+ * @requires vm.gc.Z\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseZGC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+\/*\n+ * @test id=Shenandoah\n+ * @requires vm.gc.Shenandoah\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseShenandoahGC StressGetTotalGcCpuTimeDuringShutdown\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.ThreadMXBean;\n+\n+public class StressGetTotalGcCpuTimeDuringShutdown {\n+    static final ThreadMXBean mxThreadBean = ManagementFactory.getThreadMXBean();\n+    static final MemoryMXBean mxMemoryBean = ManagementFactory.getMemoryMXBean();\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            if (!mxThreadBean.isThreadCpuTimeEnabled()) {\n+                return;\n+            }\n+        } catch (UnsupportedOperationException e) {\n+            if (mxMemoryBean.getTotalGcCpuTime() != -1) {\n+                throw new RuntimeException(\"GC CPU time should be -1\");\n+            }\n+            return;\n+        }\n+\n+        final int numberOfThreads = Runtime.getRuntime().availableProcessors() * 8;\n+        for (int i = 0; i < numberOfThreads; i++) {\n+            Thread t = new Thread(() -> {\n+                while (true) {\n+                    long gcCpuTimeFromThread = mxMemoryBean.getTotalGcCpuTime();\n+                    if (gcCpuTimeFromThread < -1) {\n+                        throw new RuntimeException(\"GC CPU time should never be less than -1 but was \" + gcCpuTimeFromThread);\n+                    }\n+                }\n+            });\n+            t.setDaemon(true);\n+            t.start();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/StressGetTotalGcCpuTimeDuringShutdown.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=Epsilon\n+ * @requires vm.gc.Epsilon\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC TestGetTotalGcCpuTime\n+ *\/\n+\n+\/*\n+ * @test id=Serial\n+ * @requires vm.gc.Serial\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseSerialGC TestGetTotalGcCpuTime\n+ *\/\n+\n+\/*\n+ * @test id=Parallel\n+ * @requires vm.gc.Parallel\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseParallelGC TestGetTotalGcCpuTime\n+ *\/\n+\n+\/*\n+ * @test id=G1\n+ * @requires vm.gc.G1\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseG1GC TestGetTotalGcCpuTime\n+ *\/\n+\n+\/*\n+ * @test id=ZGC\n+ * @requires vm.gc.Z\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseZGC TestGetTotalGcCpuTime\n+ *\/\n+\n+\/*\n+ * @test id=Shenandoah\n+ * @requires vm.gc.Shenandoah\n+ * @bug     8368527\n+ * @summary Stress MemoryMXBean.getTotalGcCpuTime during shutdown\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UseShenandoahGC TestGetTotalGcCpuTime\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.ThreadMXBean;\n+\n+public class TestGetTotalGcCpuTime {\n+    static final ThreadMXBean mxThreadBean = ManagementFactory.getThreadMXBean();\n+    static final MemoryMXBean mxMemoryBean = ManagementFactory.getMemoryMXBean();\n+    static final boolean usingEpsilonGC = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().anyMatch(p -> p.contains(\"-XX:+UseEpsilonGC\"));\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            if (!mxThreadBean.isThreadCpuTimeEnabled()) {\n+                return;\n+            }\n+        } catch (UnsupportedOperationException e) {\n+            if (mxMemoryBean.getTotalGcCpuTime() != -1) {\n+                throw new RuntimeException(\"GC CPU time should be -1\");\n+            }\n+            return;\n+        }\n+\n+        System.gc();\n+        long gcCpuTimeFromThread = mxMemoryBean.getTotalGcCpuTime();\n+\n+        if (usingEpsilonGC) {\n+            if (gcCpuTimeFromThread != 0) {\n+                throw new RuntimeException(\"Epsilon GC can't have any GC CPU time by definition\");\n+            }\n+        } else {\n+            if (gcCpuTimeFromThread <= 0) {\n+                throw new RuntimeException(\"Some GC CPU time must have been reported\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/TestGetTotalGcCpuTime.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}