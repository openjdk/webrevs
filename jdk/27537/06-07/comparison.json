{"files":[{"patch":"@@ -272,1 +272,1 @@\n-     * spent in garbage collection.\n+     * spent in garbage collection (GC).\n@@ -274,3 +274,3 @@\n-     * <p> This is the CPU time used by all garbage collection\n-     * activity, including any overhead, which means the result\n-     * may be non-zero even if no GC has occurred.\n+     * <p> The time spent in spent in GC is the CPU time used by\n+     * all GC activity, including any overhead, which means the\n+     * result may be non-zero even if no GC has occurred.\n@@ -286,8 +286,8 @@\n-     * @implNote  The specifics on what constitutes the time spent\n-     * in garbage collection is highly implementation dependent.\n-     * In the HotSpot Virtual Machine implementation reported\n-     * time will include relevant implementation-specific details such\n-     * as driver threads, workers, VM Operations and string\n-     * deduplication (if enabled). Driver threads may be created by a GC\n-     * to orchestrate its work. The return value can be -1 if\n-     * called when measurement is not possible, such as during shutdown.\n+     * @implNote The specifics on what constitutes the time spent\n+     * in GC is highly implementation dependent. In the HotSpot\n+     * Virtual Machine, this time includes relevant\n+     * implementation-specific details such as driver threads,\n+     * workers, VM Operations and string deduplication (if\n+     * enabled). Driver threads may be created by a GC to\n+     * orchestrate its work. The return value can be -1 if called\n+     * when measurement is not possible, such as during shutdown.\n@@ -297,2 +297,2 @@\n-     * @return the total accumulated CPU time for garbage collection\n-     * in nanoseconds, or {@code -1}.\n+     * @return the total accumulated CPU time for GC in\n+     * nanoseconds, or {@code -1}.\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/MemoryMXBean.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"}]}