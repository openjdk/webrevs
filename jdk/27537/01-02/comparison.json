{"files":[{"patch":"@@ -85,1 +85,1 @@\n-  JMM_GC_CPU_TIME                    = 12,   \/* Total accumulated GC CPU time *\/\n+  JMM_TOTAL_GC_CPU_TIME              = 12,   \/* Total accumulated GC CPU time *\/\n","filename":"src\/hotspot\/share\/include\/jmm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -934,1 +934,1 @@\n-  case JMM_GC_CPU_TIME:\n+  case JMM_TOTAL_GC_CPU_TIME:\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,0 +270,24 @@\n+    \/**\n+     * Returns the CPU time used by garbage collection.\n+     *\n+     * <p> This is the CPU time used by all garbage collection\n+     * activity, including any overhead, which means the result\n+     * may be non-zero even if no GC has occurred.\n+\t *\n+\t * This method return {@code -1} if the platform does\n+     * not support this operation or the information is not\n+     * available.\n+\t *\n+     * @implNote Reported time will include relevant\n+     * implementation-specific details such as driver threads,\n+     * workers, VM Operations and string deduplication (if enabled).\n+\t * The return value can be -1 if called when measurement is\n+     * not possible, such as during shutdown.\n+     *\n+\t * @return the total accumulated CPU time for garbage collection\n+     * in nanoseconds, or -1\n+     *\n+     * @since 26\n+     *\/\n+    public long getTotalGcCpuTime();\n+\n@@ -305,1 +329,0 @@\n-\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/MemoryMXBean.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-public class MemoryImpl extends NotificationEmitterSupport\n+class MemoryImpl extends NotificationEmitterSupport\n@@ -49,1 +49,1 @@\n-    protected final VMManagement jvm;\n+    private final VMManagement jvm;\n@@ -57,1 +57,1 @@\n-    protected MemoryImpl(VMManagement vm) {\n+    MemoryImpl(VMManagement vm) {\n@@ -70,0 +70,4 @@\n+    public long getTotalGcCpuTime() {\n+        return jvm.getTotalGcCpuTime();\n+    }\n+\n","filename":"src\/java.management\/share\/classes\/sun\/management\/MemoryImpl.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-    return jmm_interface->GetLongAttribute(env, NULL, JMM_GC_CPU_TIME);\n+    return jmm_interface->GetLongAttribute(env, NULL, JMM_TOTAL_GC_CPU_TIME);\n","filename":"src\/java.management\/share\/native\/libmanagement\/VMManagementImpl.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.management;\n-\n-\/**\n- * Platform-specific management interface for the memory\n- * system on which the Java virtual machine is running.\n- *\n- * @since 26\n- *\/\n-\n-public interface MemoryMXBean extends java.lang.management.MemoryMXBean {\n-    \/**\n-     * Returns the CPU time used by garbage collection.\n-     *\n-     * <p> CPU time used by all garbage collection. In\n-     * general this includes time for all driver threads,\n-     * workers, VM operations on the VM thread and the string\n-     * deduplication thread (if enabled). May be non-zero even if no\n-     * GC cycle occurred. This method returns {@code -1} if the\n-     * platform does not support this operation or if called during\n-     * shutdown.\n-     *\n-     * @return the total accumulated CPU time for garbage collection\n-     * in nanoseconds.\n-     *\n-     * @since 26\n-     *\/\n-    public long getTotalGcCpuTime();\n-}\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/MemoryMXBean.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.management.internal;\n-\n-import com.sun.management.MemoryMXBean;\n-import sun.management.ManagementFactoryHelper;\n-import sun.management.MemoryImpl;\n-import sun.management.VMManagement;\n-\n-\/**\n- * Implementation of the Memory MBean for Hotspot VM.\n- *\/\n-public class HotSpotMemoryImpl extends MemoryImpl implements MemoryMXBean {\n-    public HotSpotMemoryImpl(VMManagement vm) {\n-        super(ManagementFactoryHelper.getVMManagement());\n-    }\n-\n-    public long getTotalGcCpuTime() {\n-        return jvm.getTotalGcCpuTime();\n-    }\n-}\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/HotSpotMemoryImpl.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.management.MemoryMXBean;\n@@ -55,1 +54,0 @@\n-    private static MemoryMXBean memoryMBean = null;\n@@ -199,35 +197,0 @@\n-        \/**\n-         * MemoryMXBean\n-         *\/\n-        initMBeanList.add(new PlatformComponent<MemoryMXBean>() {\n-            private final Set<String> memoryMXBeanInterfaceNames\n-                    = Collections.unmodifiableSet(\n-                            Stream.of(\"java.lang.management.MemoryMXBean\",\n-                                    \"com.sun.management.MemoryMXBean\")\n-                            .collect(Collectors.toSet()));\n-\n-            @Override\n-            public Set<Class<? extends MemoryMXBean>> mbeanInterfaces() {\n-                return Stream.of(java.lang.management.MemoryMXBean.class,\n-                        com.sun.management.MemoryMXBean.class)\n-                        .collect(Collectors.toSet());\n-            }\n-\n-            @Override\n-            public Set<String> mbeanInterfaceNames() {\n-                return memoryMXBeanInterfaceNames;\n-            }\n-\n-            @Override\n-            public String getObjectNamePattern() {\n-                return ManagementFactory.MEMORY_MXBEAN_NAME;\n-            }\n-\n-            @Override\n-            public Map<String, java.lang.management.MemoryMXBean> nameToMBeanMap() {\n-                return Collections.<String, java.lang.management.MemoryMXBean>singletonMap(\n-                        ManagementFactory.MEMORY_MXBEAN_NAME,\n-                        getMemoryMXBean());\n-            }\n-        });\n-\n@@ -352,7 +315,0 @@\n-\n-    private static synchronized MemoryMXBean getMemoryMXBean() {\n-        if (memoryMBean == null) {\n-            memoryMBean = new HotSpotMemoryImpl(ManagementFactoryHelper.getVMManagement());\n-        }\n-        return memoryMBean;\n-    }\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/PlatformMBeanProviderImpl.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -61,0 +61,4 @@\n+        public long getTotalGcCpuTime() {\n+                throw new UnsupportedOperationException(\"This method is not supported\");\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/share\/server\/ServerMemoryMXBean.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,2 +40,0 @@\n-import com.sun.management.MemoryMXBean;\n-\n@@ -43,0 +41,1 @@\n+import java.lang.management.MemoryMXBean;\n@@ -47,1 +46,1 @@\n-    static final MemoryMXBean mxMemoryBean = ManagementFactory.getPlatformMXBean(MemoryMXBean.class);\n+    static final MemoryMXBean mxMemoryBean = ManagementFactory.getMemoryMXBean();\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/GetTotalGcCpuTime.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"test\/jdk\/com\/sun\/management\/MemoryMXBean\/GetTotalGcCpuTime.java","status":"renamed"},{"patch":"@@ -225,0 +225,2 @@\n+            System.out.println(\"getTotalGcCpuTime\\t\\t\"\n+                    + memory.getTotalGcCpuTime());\n","filename":"test\/jdk\/javax\/management\/mxbean\/MXBeanInteropTest1.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}