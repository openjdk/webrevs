{"files":[{"patch":"@@ -46,1 +46,16 @@\n-    \/\/ Used by SunJCE and SunPKCS11\n+    \/*\n+     * PBES2Params is an auxiliary class that represents the state needed for\n+     * PBES2 operations (iterations count, salt and IV) and its (re)\n+     * initialization logic. Users of this class are CipherSpi implementors that\n+     * support PBES2 cryptography (RFC #8018), such as PBES2Core (SunJCE) and\n+     * P11PBECipher (SunPKCS11).\n+     *\n+     * CipherSpi implementors must call ::getPBEKeySpec in every engine\n+     * initialization (CipherSpi::engineInit override) to reset the state and\n+     * get new values in a PBEKeySpec instance. These new values are taken\n+     * from parameters, defaults or generated randomly.\n+     *\n+     * After engine initialization, values in effect can be extracted with\n+     * ::getAlgorithmParameters (as AlgorithmParameters) or ::getIvSpec (as\n+     * IvParameterSpec).\n+     *\/\n@@ -55,0 +70,5 @@\n+        \/*\n+         * Obtain an IvParameterSpec for Cipher services. This method returns\n+         * null when the state is not initialized. Used by PBES2Core (SunJCE)\n+         * and P11PBECipher (SunPKCS11).\n+         *\/\n@@ -59,0 +79,6 @@\n+        \/*\n+         * Obtain AlgorithmParameters for Cipher services. If the state is not\n+         * initialized, this method will generate new values randomly or assign\n+         * from defaults. If the state is initialized, existing values will be\n+         * returned. Used by PBES2Core (SunJCE) and P11PBECipher (SunPKCS11).\n+         *\/\n@@ -91,0 +117,5 @@\n+        \/*\n+         * Obtain a PBEKeySpec for Cipher services, after key and parameters\n+         * validation, random generation or assignment from defaults. Used by\n+         * PBES2Core (SunJCE) and P11PBECipher (SunPKCS11).\n+         *\/\n@@ -172,0 +203,5 @@\n+        \/*\n+         * Obtain an AlgorithmParameterSpec from an AlgorithmParameters\n+         * instance, for Cipher services. Used by PBES2Core (SunJCE) and\n+         * P11PBECipher (SunPKCS11).\n+         *\/\n@@ -206,1 +242,4 @@\n-    \/\/ Used by SunJCE and SunPKCS11\n+    \/*\n+     * Obtain a PBEKeySpec for Mac services, after key and parameters\n+     * validation. Used by HmacPKCS12PBECore (SunJCE) and P11Mac (SunPKCS11).\n+     *\/\n@@ -284,1 +323,6 @@\n-    public static AlgorithmParameterSpec checkKeyParams(Key key,\n+    \/*\n+     * Check that the key implements the PBEKey interface. If params is an\n+     * instance of PBEParameterSpec, validate consistency with the key's\n+     * derivation data. Used by P11Mac and P11PBECipher (SunPKCS11).\n+     *\/\n+    public static void checkKeyAndParams(Key key,\n@@ -296,1 +340,0 @@\n-                return pbeParams.getParameterSpec();\n@@ -303,1 +346,0 @@\n-        return params;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PBEUtil.java","additions":47,"deletions":5,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import javax.crypto.spec.PBEParameterSpec;\n@@ -70,1 +71,1 @@\n-    \/\/ PBEKeyInfo if algorithm is PBE, otherwise null\n+    \/\/ PBEKeyInfo if algorithm is PBE-related, otherwise null\n@@ -202,0 +203,1 @@\n+        p11Key = null;\n@@ -204,1 +206,4 @@\n-                params = PBEUtil.checkKeyParams(key, params, algorithm);\n+                \/\/ If the key is a P11Key, it must come from a PBE derivation\n+                \/\/ because this is a PBE Mac service. In addition to checking\n+                \/\/ the key, check that params (if passed) are consistent.\n+                PBEUtil.checkKeyAndParams(key, params, algorithm);\n@@ -206,2 +211,5 @@\n-                \/\/ The key is a plain password. Use SunPKCS11's PBE\n-                \/\/ key derivation mechanism to obtain a P11Key.\n+                \/\/ If the key is not a P11Key, a derivation is needed. Data for\n+                \/\/ derivation has to be carried either as part of the key or\n+                \/\/ params. Use SunPKCS11 PBE key derivation to obtain a P11Key.\n+                \/\/ Assign the derived key to p11Key because conversion is never\n+                \/\/ needed for this case.\n@@ -209,3 +217,2 @@\n-                    p11Key = P11SecretKeyFactory.derivePBEKey(\n-                            token, PBEUtil.getPBAKeySpec(key, params),\n-                            svcPbeKi);\n+                    p11Key = P11SecretKeyFactory.derivePBEKey(token,\n+                            PBEUtil.getPBAKeySpec(key, params), svcPbeKi);\n@@ -216,5 +223,5 @@\n-        }\n-        if (svcPbeKi == null || key instanceof P11Key) {\n-            if (params != null) {\n-                throw new InvalidAlgorithmParameterException\n-                    (\"Parameters not supported\");\n+            if (params instanceof PBEParameterSpec pbeParams) {\n+                \/\/ For PBE services, reassign params to the underlying\n+                \/\/ service params. Notice that Mac services expect this\n+                \/\/ value to be null.\n+                params = pbeParams.getParameterSpec();\n@@ -222,0 +229,8 @@\n+        }\n+        if (params != null) {\n+            throw new InvalidAlgorithmParameterException(\n+                    \"Parameters not supported\");\n+        }\n+        \/\/ In non-PBE cases and PBE cases where we didn't derive,\n+        \/\/ a key conversion might be needed.\n+        if (p11Key == null) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Mac.java","additions":27,"deletions":12,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import javax.crypto.spec.PBEParameterSpec;\n@@ -133,1 +134,8 @@\n-            params = PBEUtil.checkKeyParams(key, params, pbeAlg);\n+            \/\/ If the key is a P11Key, it must come from a PBE derivation\n+            \/\/ because this is a PBE Cipher service. In addition to checking the\n+            \/\/ key, check that params (if passed) are consistent.\n+            PBEUtil.checkKeyAndParams(key, params, pbeAlg);\n+            if (params instanceof PBEParameterSpec pbeParams) {\n+                \/\/ Reassign params to the underlying service params.\n+                params = pbeParams.getParameterSpec();\n+            }\n@@ -135,2 +143,3 @@\n-            \/\/ The key is a plain password. Use SunPKCS11's PBE\n-            \/\/ key derivation mechanism to obtain a P11Key.\n+            \/\/ If the key is not a P11Key, a derivation is needed. Data for\n+            \/\/ derivation has to be carried either as part of the key or params.\n+            \/\/ Use SunPKCS11 PBE key derivation to obtain a P11Key.\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11PBECipher.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    \/\/ PBEKeyInfo if algorithm is PBE\n+    \/\/ PBEKeyInfo if algorithm is PBE-related, otherwise null\n@@ -108,0 +108,5 @@\n+        \/\/ The P11SecretKeyFactory::convertKey method needs to know if a service\n+        \/\/ type and a key are compatible. Trivial cases such as having the same\n+        \/\/ algorithm names are handled directly. KeyInfo::checkUse helps with\n+        \/\/ cases that require to retrieve the key's KeyInfo (ki), in addition to\n+        \/\/ the service's KeyInfo (si), to make a decision.\n@@ -118,0 +123,3 @@\n+            \/\/ This path handles non-PBE cases where aliases are used (i.e:\n+            \/\/ RC4 vs ARCFOUR) and mixed PBE - non-PBE cases (i.e.: a\n+            \/\/ PBE-derived AES key used in an AES Cipher service).\n@@ -230,4 +238,0 @@\n-        putKeyInfo(new P12MacPBEKeyInfo(\"HmacPBESHA512\/224\",\n-                CKM_NSS_PKCS12_PBE_SHA512_HMAC_KEY_GEN, 512));\n-        putKeyInfo(new P12MacPBEKeyInfo(\"HmacPBESHA512\/256\",\n-                CKM_NSS_PKCS12_PBE_SHA512_HMAC_KEY_GEN, 512));\n@@ -236,0 +240,1 @@\n+    \/\/ No pseudo key types\n@@ -239,1 +244,0 @@\n-            \/\/ Replace pseudo key type.\n@@ -391,1 +395,1 @@\n-                CK_VERSION p11Ver = token.p11.getInfo().cryptokiVersion;\n+                CK_VERSION p11Ver = token.p11.getVersion();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecretKeyFactory.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n@@ -77,1 +79,1 @@\n-         *     byte[] passwordBytes  => [ 0x00,   0x61,   0x00,   0x00 ]\n+         * ByteBuffer passwordBytes  => [ 0x00,   0x61,   0x00,   0x00 ]\n@@ -83,4 +85,7 @@\n-        byte[] passwordBytes = new String(password).getBytes(cs);\n-        char[] encPassword = new char[passwordBytes.length + nullTermBytes];\n-        for (int i = 0; i < passwordBytes.length; i++) {\n-            encPassword[i] = (char) (passwordBytes[i]);\n+        ByteBuffer passwordBytes = cs.encode(\n+                CharBuffer.allocate(password.length).put(password).rewind());\n+        char[] encPassword =\n+                new char[passwordBytes.remaining() + nullTermBytes];\n+        int i = 0;\n+        while (passwordBytes.hasRemaining()) {\n+            encPassword[i++] = (char) (passwordBytes.get() & 0xFF);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Util.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -356,1 +356,1 @@\n-                CK_INFO p11Info = p11.getInfo();\n+                CK_INFO p11Info = p11.C_GetInfo();\n@@ -487,0 +487,1 @@\n+\n@@ -488,1 +489,1 @@\n-                           int[] m, int[] requiredMechs) {\n+            int[] m) {\n@@ -490,1 +491,1 @@\n-                getAliases(algorithm), m, requiredMechs));\n+                getAliases(algorithm), m));\n@@ -494,1 +495,1 @@\n-            int[] m) {\n+            int[] m, int[] requiredMechs) {\n@@ -496,1 +497,1 @@\n-                getAliases(algorithm), m));\n+                getAliases(algorithm), m, requiredMechs));\n@@ -629,4 +630,0 @@\n-        d(MAC, \"HmacPBESHA512\/224\", P11Mac, m(CKM_SHA512_224_HMAC),\n-                m(CKM_NSS_PKCS12_PBE_SHA512_HMAC_KEY_GEN));\n-        d(MAC, \"HmacPBESHA512\/256\", P11Mac, m(CKM_SHA512_256_HMAC),\n-                m(CKM_NSS_PKCS12_PBE_SHA512_HMAC_KEY_GEN));\n@@ -772,4 +769,0 @@\n-        d(SKF, \"HmacPBESHA512\/224\", P11SecretKeyFactory,\n-                m(CKM_NSS_PKCS12_PBE_SHA512_HMAC_KEY_GEN));\n-        d(SKF, \"HmacPBESHA512\/256\", P11SecretKeyFactory,\n-                m(CKM_NSS_PKCS12_PBE_SHA512_HMAC_KEY_GEN));\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/SunPKCS11.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-        sb.append(mechanism);\n+        sb.append(Functions.getMechanismName(mechanism));\n@@ -212,1 +212,2 @@\n-        sb.append(\"pParameter: \");\n+        sb.append(\"pParameter:\");\n+        sb.append(Constants.NEWLINE);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/CK_MECHANISM.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-        sb.append(saltSource);\n+        sb.append(Functions.getParamSourcesName(saltSource));\n@@ -155,1 +155,1 @@\n-        sb.append(pSaltSourceData.length);\n+        sb.append(Functions.getLength(pSaltSourceData));\n@@ -165,1 +165,1 @@\n-        sb.append(prf);\n+        sb.append(Functions.getPrfName(prf));\n@@ -175,1 +175,1 @@\n-        sb.append(pPrfData.length);\n+        sb.append(Functions.getLength(pPrfData));\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/CK_PKCS5_PBKD2_PARAMS.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-        sb.append(saltSource);\n+        sb.append(Functions.getParamSourcesName(saltSource));\n@@ -131,1 +131,1 @@\n-        sb.append(pSaltSourceData.length);\n+        sb.append(Functions.getLength(pSaltSourceData));\n@@ -141,1 +141,1 @@\n-        sb.append(prf);\n+        sb.append(Functions.getPrfName(prf));\n@@ -151,1 +151,1 @@\n-        sb.append(pPrfData.length);\n+        sb.append(Functions.getLength(pPrfData));\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/CK_PKCS5_PBKD2_PARAMS2.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,0 +107,14 @@\n+    \/\/ Pseudo-random functions (CKP_*)\n+    private static final Map<Integer,String> prfNames =\n+            new HashMap<Integer,String>();\n+\n+    private static final Map<String,Integer> prfIds =\n+            new HashMap<String,Integer>();\n+\n+    \/\/ Salt\/Encoding parameter sources (CKZ_*)\n+    private static final Map<Integer,String> paramSourcesNames =\n+            new HashMap<Integer,String>();\n+\n+    private static final Map<String,Integer> paramSourcesIds =\n+            new HashMap<String,Integer>();\n+\n@@ -211,0 +225,10 @@\n+    \/**\n+     * get a byte array length as int\n+     *\n+     * @param value the byte array to get its length\n+     * @return the byte array length as int or 0 if null\n+     *\/\n+    public static int getLength(byte[] value) {\n+        return value == null ? 0 : value.length;\n+    }\n+\n@@ -486,0 +510,16 @@\n+    public static String getPrfName(long id) {\n+        return getName(prfNames, id);\n+    }\n+\n+    public static long getPrfId(String name) {\n+        return getId(prfIds, name);\n+    }\n+\n+    public static String getParamSourcesName(long id) {\n+        return getName(paramSourcesNames, id);\n+    }\n+\n+    public static long getParamSourcesId(String name) {\n+        return getId(paramSourcesIds, name);\n+    }\n+\n@@ -641,0 +681,8 @@\n+    private static void addPrf(long id, String name) {\n+        addMapping(prfNames, prfIds, id, name);\n+    }\n+\n+    private static void addParamSources(long id, String name) {\n+        addMapping(paramSourcesNames, paramSourcesIds, id, name);\n+    }\n+\n@@ -1101,0 +1149,8 @@\n+        addMech(CKM_NSS_PKCS12_PBE_SHA224_HMAC_KEY_GEN,\n+                                    \"CKM_NSS_PKCS12_PBE_SHA224_HMAC_KEY_GEN\");\n+        addMech(CKM_NSS_PKCS12_PBE_SHA256_HMAC_KEY_GEN,\n+                                    \"CKM_NSS_PKCS12_PBE_SHA256_HMAC_KEY_GEN\");\n+        addMech(CKM_NSS_PKCS12_PBE_SHA384_HMAC_KEY_GEN,\n+                                    \"CKM_NSS_PKCS12_PBE_SHA384_HMAC_KEY_GEN\");\n+        addMech(CKM_NSS_PKCS12_PBE_SHA512_HMAC_KEY_GEN,\n+                                    \"CKM_NSS_PKCS12_PBE_SHA512_HMAC_KEY_GEN\");\n@@ -1355,0 +1411,14 @@\n+\n+        addPrf(CKP_PKCS5_PBKD2_HMAC_SHA1,    \"CKP_PKCS5_PBKD2_HMAC_SHA1\");\n+        addPrf(CKP_PKCS5_PBKD2_HMAC_GOSTR3411,\n+                                             \"CKP_PKCS5_PBKD2_HMAC_GOSTR3411\");\n+        addPrf(CKP_PKCS5_PBKD2_HMAC_SHA224,  \"CKP_PKCS5_PBKD2_HMAC_SHA224\");\n+        addPrf(CKP_PKCS5_PBKD2_HMAC_SHA256,  \"CKP_PKCS5_PBKD2_HMAC_SHA256\");\n+        addPrf(CKP_PKCS5_PBKD2_HMAC_SHA384,  \"CKP_PKCS5_PBKD2_HMAC_SHA384\");\n+        addPrf(CKP_PKCS5_PBKD2_HMAC_SHA512,  \"CKP_PKCS5_PBKD2_HMAC_SHA512\");\n+        addPrf(CKP_PKCS5_PBKD2_HMAC_SHA512_224,\n+                                             \"CKP_PKCS5_PBKD2_HMAC_SHA512_224\");\n+        addPrf(CKP_PKCS5_PBKD2_HMAC_SHA512_256,\n+                                             \"CKP_PKCS5_PBKD2_HMAC_SHA512_256\");\n+\n+        addParamSources(CKZ_SALT_SPECIFIED,  \"CKZ_SALT_SPECIFIED\");\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/Functions.java","additions":71,"deletions":1,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -120,2 +120,0 @@\n-    private CK_INFO pInfo;\n-\n@@ -163,3 +161,3 @@\n-                getInfo();\n-                this.version.major = pInfo.cryptokiVersion.major;\n-                this.version.minor = pInfo.cryptokiVersion.minor;\n+                CK_INFO p11Info = C_GetInfo();\n+                this.version.major = p11Info.cryptokiVersion.major;\n+                this.version.minor = p11Info.cryptokiVersion.minor;\n@@ -216,11 +214,0 @@\n-    \/**\n-     * Returns the CK_INFO structure fetched at initialization with\n-     * C_GetInfo. This structure represent Cryptoki library information.\n-     *\/\n-    public CK_INFO getInfo() throws PKCS11Exception {\n-        if (pInfo == null) {\n-            pInfo = C_GetInfo();\n-        }\n-        return pInfo;\n-    }\n-\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/PKCS11.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1002,0 +1002,9 @@\n+    \/\/ Additional PKCS #12 PBE key derivation algorithms defined in NSS v3.29\n+    public static final long  CKM_NSS_PKCS12_PBE_SHA224_HMAC_KEY_GEN\n+                                        \/* (CKM_NSS + 29) *\/ = 0xCE53436DL;\n+    public static final long  CKM_NSS_PKCS12_PBE_SHA256_HMAC_KEY_GEN\n+                                        \/* (CKM_NSS + 30) *\/ = 0xCE53436EL;\n+    public static final long  CKM_NSS_PKCS12_PBE_SHA384_HMAC_KEY_GEN\n+                                        \/* (CKM_NSS + 31) *\/ = 0xCE53436FL;\n+    public static final long  CKM_NSS_PKCS12_PBE_SHA512_HMAC_KEY_GEN\n+                                        \/* (CKM_NSS + 32) *\/ = 0xCE534370L;\n@@ -1106,0 +1115,13 @@\n+    *\/\n+\n+    \/\/ PBKDF2 support, used in P11Util\n+    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA1        = 0x00000001L;\n+    public static final long  CKP_PKCS5_PBKD2_HMAC_GOSTR3411   = 0x00000002L;\n+    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA224      = 0x00000003L;\n+    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA256      = 0x00000004L;\n+    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA384      = 0x00000005L;\n+    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA512      = 0x00000006L;\n+    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA512_224  = 0x00000007L;\n+    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA512_256  = 0x00000008L;\n+\n+    public static final long  CKZ_SALT_SPECIFIED      = 0x00000001L;\n@@ -1107,0 +1129,1 @@\n+    \/*\n@@ -1142,11 +1165,0 @@\n-    \/\/ PBKDF2 support, used in P11Util\n-    public static final long  CKZ_SALT_SPECIFIED      = 0x00000001L;\n-    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA1        = 0x00000001L;\n-    public static final long  CKP_PKCS5_PBKD2_HMAC_GOSTR3411   = 0x00000002L;\n-    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA224      = 0x00000003L;\n-    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA256      = 0x00000004L;\n-    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA384      = 0x00000005L;\n-    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA512      = 0x00000006L;\n-    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA512_224  = 0x00000007L;\n-    public static final long  CKP_PKCS5_PBKD2_HMAC_SHA512_256  = 0x00000008L;\n-\n@@ -1156,3 +1168,3 @@\n-    \/\/ base number of NSS private attributes\n-    public static final long  CKA_NETSCAPE_BASE \/*0x80000000L + 0x4E534350L*\/\n-    \/*          now known as CKM_NSS ^        *\/      = 0xCE534350L;\n+    \/\/ base number of NSS private attributes. CKA_NETSCAPE_BASE is now known as\n+    \/\/ CKM_NSS = CKM_VENDOR_DEFINED | NSSCK_VENDOR_NSS = 0x80000000 | 0x4E534350\n+    public static final long  CKA_NETSCAPE_BASE       = 0xCE534350L;\n@@ -1183,10 +1195,0 @@\n-\n-    \/\/ Additional PKCS #12 PBE key derivation algorithms defined in NSS v3.29\n-    public static final long  CKM_NSS_PKCS12_PBE_SHA224_HMAC_KEY_GEN\n-                                        \/* (CKM_NSS + 29) *\/ = 0xCE53436DL;\n-    public static final long  CKM_NSS_PKCS12_PBE_SHA256_HMAC_KEY_GEN\n-                                        \/* (CKM_NSS + 30) *\/ = 0xCE53436EL;\n-    public static final long  CKM_NSS_PKCS12_PBE_SHA384_HMAC_KEY_GEN\n-                                        \/* (CKM_NSS + 31) *\/ = 0xCE53436FL;\n-    public static final long  CKM_NSS_PKCS12_PBE_SHA512_HMAC_KEY_GEN\n-                                        \/* (CKM_NSS + 32) *\/ = 0xCE534370L;\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/PKCS11Constants.java","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1515,2 +1515,0 @@\n-        case CKM_PBE_SHA1_DES3_EDE_CBC:\n-        case CKM_PBE_SHA1_DES2_EDE_CBC:\n@@ -1825,0 +1823,1 @@\n+        throwPKCS11RuntimeException(env, \"Unknown PBKD2 mechanism parameters class.\");\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/p11_convert.c","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+\/* CKA_NETSCAPE_BASE is now known as CKM_NSS (CKM_VENDOR_DEFINED | NSSCK_VENDOR_NSS) *\/\n@@ -71,1 +72,0 @@\n-\/*             ^ now known as CKM_NSS   (CKM_VENDOR_DEFINED | NSSCK_VENDOR_NSS) *\/\n@@ -75,1 +75,1 @@\n-#define CKA_NETSCAPE_TRUST_CODE_SIGNING (CKA_NETSCAPE_TRUST_BASE + 10)\n+#define CKA_NETSCAPE_TRUST_CODE_SIGNING         (CKA_NETSCAPE_TRUST_BASE + 10)\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/pkcs11wrapper.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,5 +90,2 @@\n-                \/\/ Test sanity check\n-                if (!expectedCiphertext.equals(staticExpectedCiphertext)) {\n-                    throw new Error(\"Static and SunJCE ciphertexts do not \" +\n-                            \"match.\");\n-                }\n+                checkAssertionValues(expectedCiphertext,\n+                        staticExpectedCiphertext);\n@@ -107,0 +104,9 @@\n+    private static void checkAssertionValues(BigInteger expectedValue,\n+            BigInteger staticExpectedValue) {\n+        if (!expectedValue.equals(staticExpectedValue)) {\n+            printHex(\"SunJCE value\", expectedValue);\n+            printHex(\"Static value\", staticExpectedValue);\n+            throw new Error(\"Static and SunJCE values do not match.\");\n+        }\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/PBECipher.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -81,5 +81,1 @@\n-                \/\/ Test sanity check\n-                if (!expectedMac.equals(staticExpectedMac)) {\n-                    throw new Error(\"Static and SunJCE macs do not \" +\n-                            \"match.\");\n-                }\n+                checkAssertionValues(expectedMac, staticExpectedMac);\n@@ -98,0 +94,9 @@\n+    private static void checkAssertionValues(BigInteger expectedValue,\n+            BigInteger staticExpectedValue) {\n+        if (!expectedValue.equals(staticExpectedValue)) {\n+            printHex(\"SunJCE value\", expectedValue);\n+            printHex(\"Static value\", staticExpectedValue);\n+            throw new Error(\"Static and SunJCE values do not match.\");\n+        }\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Mac\/PBAMac.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            String staticExpectedKey) {\n+            String staticExpectedKeyString) {\n@@ -80,0 +80,2 @@\n+        BigInteger staticExpectedKey = new BigInteger(staticExpectedKeyString,\n+                16);\n@@ -99,0 +101,1 @@\n+            checkAssertionValues(expectedKey, staticExpectedKey);\n@@ -100,1 +103,1 @@\n-            expectedKey = new BigInteger(staticExpectedKey, 16);\n+            expectedKey = staticExpectedKey;\n@@ -116,5 +119,1 @@\n-                \/\/ Test sanity check\n-                if (!expectedKey.equals(staticExpectedKey)) {\n-                    throw new Error(\"Static and SunJCE keys do not \" +\n-                            \"match.\");\n-                }\n+                checkAssertionValues(expectedKey, staticExpectedKey);\n@@ -133,0 +132,9 @@\n+    private static void checkAssertionValues(BigInteger expectedValue,\n+            BigInteger staticExpectedValue) {\n+        if (!expectedValue.equals(staticExpectedValue)) {\n+            printHex(\"SunJCE value\", expectedValue);\n+            printHex(\"Static value\", staticExpectedValue);\n+            throw new Error(\"Static and SunJCE values do not match.\");\n+        }\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/SecretKeyFactory\/TestPBKD.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"}]}