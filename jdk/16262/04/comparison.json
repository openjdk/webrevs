{"files":[{"patch":"@@ -62,0 +62,17 @@\n+void MallocMemorySnapshot::copy_to(MallocMemorySnapshot* s) {\n+  \/\/ Use ThreadCritical to make sure that mtChunks don't get deallocated while the\n+  \/\/ copy is going on, because their size is adjusted using this\n+  \/\/ buffer in make_adjustment().\n+  ThreadCritical tc;\n+  s->_all_mallocs = _all_mallocs;\n+  size_t total_size = 0;\n+  size_t total_count = 0;\n+  for (int index = 0; index < mt_number_of_types; index ++) {\n+    s->_malloc[index] = _malloc[index];\n+    total_size += s->_malloc[index].malloc_size();\n+    total_count += s->_malloc[index].malloc_count();\n+  }\n+  \/\/ malloc counters may be updated concurrently\n+  s->_all_mallocs.set_size_and_count(total_size, total_count);\n+}\n+\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+  inline void set_size_and_count(size_t size, size_t count) { _size = size; _count = count; }\n+\n@@ -179,10 +181,1 @@\n-  void copy_to(MallocMemorySnapshot* s) {\n-     \/\/ Need to make sure that mtChunks don't get deallocated while the\n-     \/\/ copy is going on, because their size is adjusted using this\n-     \/\/ buffer in make_adjustment().\n-     ThreadCritical tc;\n-     s->_all_mallocs = _all_mallocs;\n-     for (int index = 0; index < mt_number_of_types; index ++) {\n-       s->_malloc[index] = _malloc[index];\n-     }\n-   }\n+  void copy_to(MallocMemorySnapshot* s);\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.hpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"}]}