{"files":[{"patch":"@@ -606,5 +606,9 @@\n-        Graphics bsg = backingStoreImage.getGraphics();\n-        bsg.setColor(g.getColor());\n-        bsg.setFont(g.getFont());\n-        bsg.setClip(g.getClipBounds());\n-        return bsg;\n+        if (!SwingUtilities2.isPrinting(g)) {\n+            Graphics bsg = backingStoreImage.getGraphics();\n+            bsg.setColor(g.getColor());\n+            bsg.setFont(g.getFont());\n+            bsg.setClip(g.getClipBounds());\n+            return bsg;\n+        } else {\n+            return g;\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JViewport.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1320,1 +1320,1 @@\n-    static boolean isPrinting(Graphics g) {\n+    public static boolean isPrinting(Graphics g) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/SwingUtilities2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,184 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import javax.swing.BoxLayout;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.JViewport;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.DefaultTableModel;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8210807\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test to check if JTable can be printed when it is\n+ * added JScrollPane.\n+ * @run main\/manual JTableScrollPrintTest\n+ *\/\n+\n+public class JTableScrollPrintTest {\n+    public static JFrame frame;\n+    public static PassFailJFrame passFailJFrame;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                initialize();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    public static void initialize() throws Exception{\n+        final String INSTRUCTIONS = \"\"\"\n+                Instructions to Test:\n+                1. Print table onto Paper\/PDF, using the Print Dialog.\n+                2. If entire table is printed, then the Test is PASS.\n+                3. If table is partially printed without table cells,\n+                then the Test is FAIL.\n+                \"\"\";\n+        TestTable testTable = new TestTable(true);\n+        frame = new JFrame(\"JTable Print Test\");\n+        passFailJFrame = new PassFailJFrame(\"Test Instructions\", INSTRUCTIONS, 5L, 6, 35);\n+\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.VERTICAL);\n+        frame.add(testTable);\n+        frame.pack();\n+        frame.setVisible(true);\n+        PrintUtilities printerJob = new PrintUtilities(testTable);\n+        printerJob.print(\"Test BackingStore Image Print\");\n+    }\n+\n+    public static class TestTable extends JPanel {\n+        public TestTable(Boolean useScrollPane) {\n+\n+            setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n+\n+            DefaultTableModel model = new DefaultTableModel();\n+            model.addColumn(\"Column 1\");\n+            model.addColumn(\"Column 2\");\n+            model.addColumn(\"Column 3\");\n+            model.addColumn(\"Column 4\");\n+\n+            for (int row = 1; row <= 5; row++)\n+                model.addRow(new Object[] {\n+                        \"R\"+row+\" C1\", \"R\"+row+\" C2\", \"R\"+row+\" C3\", \"R\"+row+\" C4\" });\n+\n+            JTable table = new JTable(model);\n+\n+            if (useScrollPane == true) {\n+                JScrollPane sp = new JScrollPane(table,\n+                        JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n+                        JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n+                sp.getViewport().setScrollMode(JViewport.BACKINGSTORE_SCROLL_MODE);\n+                add(sp);\n+            } else {\n+                add(table.getTableHeader());\n+                add(table);\n+            }\n+        }\n+    }\n+\n+    static class PrintUtilities implements Printable {\n+        private Component componentToBePrinted;\n+        public void printComponent(Component c, String jobname) {\n+            new PrintUtilities(c).print(jobname);\n+        }\n+\n+        public PrintUtilities(Component componentToBePrinted) {\n+            this.componentToBePrinted = componentToBePrinted;\n+        }\n+\n+        public void print(String jobname) {\n+            PrinterJob printJob = PrinterJob.getPrinterJob();\n+            PageFormat pf = printJob.defaultPage();\n+            pf.setOrientation(PageFormat.PORTRAIT);\n+\n+            \/\/ set margins to 1\/2\"\n+            Paper p = new Paper();\n+            p.setImageableArea(36, 36, p.getWidth()-72, p.getHeight()-72);\n+            pf.setPaper(p);\n+\n+            printJob.setPrintable(this, pf);\n+            printJob.setJobName(jobname);\n+\n+            if (printJob.printDialog()) {\n+                try {\n+                    printJob.print();\n+                } catch(PrinterException pe) {\n+                    System.out.println(\"Error printing: \" + pe);\n+                }\n+            }\n+        }\n+\n+        public int print(Graphics g, PageFormat pageFormat, int pageIndex) {\n+            if (pageIndex > 0) {\n+                return(NO_SUCH_PAGE);\n+            } else {\n+                Graphics2D g2d = (Graphics2D)g;\n+                g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n+                Component c= componentToBePrinted;\n+                c.setSize(c.getPreferredSize());\n+\n+                double panelX= c.getWidth();\n+                double panelY= c.getHeight();\n+                float imageableX = (float) pageFormat.getImageableWidth()-1;\n+                float imageableY = (float) pageFormat.getImageableHeight()-1;\n+\n+                double xscale = imageableX\/panelX;\n+                double yscale = imageableY\/panelY;\n+                double optimalScale;\n+                if (xscale < yscale) {\n+                    optimalScale = xscale;\n+                } else {\n+                    optimalScale = yscale;\n+                }\n+\n+                if (optimalScale > 1) {\n+                    optimalScale = 1;\n+                }\n+\n+                g2d.scale(optimalScale, optimalScale);\n+                c.paint(g2d);\n+                return(PAGE_EXISTS);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/JTableScrollPrintTest.java","additions":184,"deletions":0,"binary":false,"changes":184,"status":"added"}]}