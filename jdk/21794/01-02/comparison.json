{"files":[{"patch":"@@ -1675,0 +1675,6 @@\n+            \/* there are three cases for ts and ss:\n+             *   - one is a class and the other one is an interface (case I)\n+             *   - both are classes                                 (case II)\n+             *   - both are interfaces                              (case III)\n+             * all those cases are covered in JLS 23, section: \"5.1.6.1 Allowed Narrowing Reference Conversion\"\n+             *\/\n@@ -1682,7 +1688,4 @@\n-                \/\/ if both are classes\n-                if (!ts.isInterface() && !ss.isInterface()) {\n-                    return !isSubtype(erasure(ss.type), erasure(ts.type)) && !isSubtype(erasure(ts.type), erasure(ss.type));\n-                } else if (ts.isInterface() && !ss.isInterface() || !ts.isInterface() && ss.isInterface()) {\n-                    \/* so one is an interface and the other one is a class\n-                     *\/\n-                    ClassSymbol isym = ts.isInterface() ? ts : ss;\n+\n+                if (ts.isInterface() && !ss.isInterface() || \/\/ case I: one is a class and the other one is an interface\n+                    !ts.isInterface() && ss.isInterface()) {\n+                    ClassSymbol isym = ts.isInterface() ? ts : ss; \/\/ isym is the interface and csym the class\n@@ -1690,3 +1693,1 @@\n-                    if (isSubtype(erasure(csym.type), erasure(isym.type))) {\n-                        return false;\n-                    } else {\n+                    if (!isSubtype(erasure(csym.type), erasure(isym.type))) {\n@@ -1695,4 +1696,4 @@\n-                        }\n-                        if (isClassFreelyExtensible(csym) && !isym.isSealed()) {\n-                            \/\/ here we can't determine if they are disjoint, bail out\n-                            return false;\n+                        } else if (csym.isSealed()) {\n+                            return areDisjoint(isym, csym.getPermittedSubclasses());\n+                        } else if (isClassFreelyExtensible(csym) && isym.isSealed()) {\n+                            return areDisjoint(csym, isym.getPermittedSubclasses());\n@@ -1701,3 +1702,10 @@\n-                } else { \/\/ both are interfaces\n-                    if (isSubtype(erasure(ts.type), erasure(ss.type)) || isSubtype(erasure(ss.type), erasure(ts.type))) {\n-                        return false;\n+                } else if (!ts.isInterface() &&              \/\/ case II: both are classes\n+                        !ss.isInterface()) {\n+                    return !isSubtype(erasure(ss.type), erasure(ts.type)) && !isSubtype(erasure(ts.type), erasure(ss.type));\n+                } else {                                     \/\/ case III: both are interfaces\n+                    if (!isSubtype(erasure(ts.type), erasure(ss.type)) && !isSubtype(erasure(ss.type), erasure(ts.type))) {\n+                        if (ts.isSealed()) {\n+                            return areDisjoint(ss, ts.getPermittedSubclasses());\n+                        } else if (ss.isSealed()) {\n+                            return areDisjoint(ts, ss.getPermittedSubclasses());\n+                        }\n@@ -1706,7 +1714,1 @@\n-                \/\/ if at least one is sealed\n-                if (ts.isSealed() || ss.isSealed()) {\n-                    \/\/ permitted subtypes have to be disjoint with the other symbol\n-                    ClassSymbol sealedOne = ts.isSealed() ? ts : ss;\n-                    ClassSymbol other = sealedOne == ts ? ss : ts;\n-                    return sealedOne.getPermittedSubclasses().stream().allMatch(type -> areDisjoint((ClassSymbol)type.tsym, other));\n-                }\n+                \/\/ at this point we haven't been able to prove that the classes or interfaces are disjoint so we bail out\n@@ -1724,0 +1726,4 @@\n+\n+            boolean areDisjoint(ClassSymbol csym, List<Type> permittedSubtypes) {\n+                return permittedSubtypes.stream().allMatch(psubtype -> areDisjoint(csym, (ClassSymbol) psubtype.tsym));\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":30,"deletions":24,"binary":false,"changes":54,"status":"modified"}]}