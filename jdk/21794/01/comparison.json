{"files":[{"patch":"@@ -1682,10 +1682,5 @@\n-                if (isSubtype(erasure(ts.type), erasure(ss.type))) {\n-                    return false;\n-                }\n-                \/\/ if both are classes or both are interfaces, shortcut\n-                if (ts.isInterface() == ss.isInterface() && isSubtype(erasure(ss.type), erasure(ts.type))) {\n-                    return false;\n-                }\n-                if (ts.isInterface() && !ss.isInterface()) {\n-                    \/* so ts is interface but ss is a class\n-                     * an interface is disjoint from a class if the class is disjoint form the interface\n+                \/\/ if both are classes\n+                if (!ts.isInterface() && !ss.isInterface()) {\n+                    return !isSubtype(erasure(ss.type), erasure(ts.type)) && !isSubtype(erasure(ts.type), erasure(ss.type));\n+                } else if (ts.isInterface() && !ss.isInterface() || !ts.isInterface() && ss.isInterface()) {\n+                    \/* so one is an interface and the other one is a class\n@@ -1693,5 +1688,17 @@\n-                    return areDisjoint(ss, ts);\n-                }\n-                \/\/ a final class that is not subtype of ss is disjoint\n-                if (!ts.isInterface() && ts.isFinal()) {\n-                    return true;\n+                    ClassSymbol isym = ts.isInterface() ? ts : ss;\n+                    ClassSymbol csym = isym == ts ? ss : ts;\n+                    if (isSubtype(erasure(csym.type), erasure(isym.type))) {\n+                        return false;\n+                    } else {\n+                        if (csym.isFinal()) {\n+                            return true;\n+                        }\n+                        if (isClassFreelyExtensible(csym) && !isym.isSealed()) {\n+                            \/\/ here we can't determine if they are disjoint, bail out\n+                            return false;\n+                        }\n+                    }\n+                } else { \/\/ both are interfaces\n+                    if (isSubtype(erasure(ts.type), erasure(ss.type)) || isSubtype(erasure(ss.type), erasure(ts.type))) {\n+                        return false;\n+                    }\n@@ -1708,0 +1715,9 @@\n+\n+            private boolean isClassFreelyExtensible(ClassSymbol csym) {\n+                boolean anySuperIsSealed = (csym.getSuperclass().tsym != null && csym.getSuperclass().tsym.isSealed()) || csym.getInterfaces().stream().anyMatch(i -> i.tsym.isSealed());\n+                if (anySuperIsSealed) {\n+                    return csym.isNonSealed();\n+                } else {\n+                    return !csym.isSealed() && !csym.isFinal();\n+                }\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":31,"deletions":15,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1181,0 +1181,33 @@\n+                \"\"\",\n+                \"\"\"\n+                class Test {\n+                    sealed interface I permits C1 {}\n+                    non-sealed class C1 implements I {}\n+                    class C2 extends C1 {}\n+                    class C3 {}\n+                    I m(int s, C3 c3) {\n+                        I i = (I)c3;\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                class Test {\n+                    sealed interface I permits C1 {}\n+                    non-sealed class C1 implements I {}\n+                    class C2 extends C1 {}\n+                    class C3 {}\n+                    I m(int s, C3 c3) {\n+                        I i = (C1)c3;\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                class Test {\n+                    sealed interface I permits C1 {}\n+                    non-sealed class C1 implements I {}\n+                    class C2 extends C1 {}\n+                    class C3 {}\n+                    I m(int s, C3 c3) {\n+                        I i = (C2)c3;\n+                    }\n+                }\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedCompilationTests.java","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"}]}