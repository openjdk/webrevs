{"files":[{"patch":"@@ -72,1 +72,1 @@\n-    result = os::attempt_reserve_memory_at((char*)immediate, size, false);\n+    result = os::attempt_reserve_memory_at((char*)immediate, size, false, mtMetaspace);\n@@ -115,1 +115,1 @@\n-    result = os::reserve_memory_aligned(size, alignment, false);\n+    result = os::reserve_memory_aligned(size, alignment, false, mtMetaspace);\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1851,1 +1851,1 @@\n-void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint) {\n+void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-  _base = (uintptr_t)os::reserve_memory(max_capacity);\n+  _base = (uintptr_t)os::reserve_memory(max_capacity, false, mtJavaHeap);\n","filename":"src\/hotspot\/os\/bsd\/gc\/x\/xPhysicalMemoryBacking_bsd.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-  _base = (uintptr_t)os::reserve_memory(max_capacity);\n+  _base = (uintptr_t)os::reserve_memory(max_capacity, false, mtJavaHeap);\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zPhysicalMemoryBacking_bsd.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1671,1 +1671,1 @@\n-void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint) {\n+void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag) {\n@@ -1769,1 +1769,1 @@\n-  return os::commit_memory(addr, size, !ExecMem);\n+  return os::commit_memory(addr, size, !ExecMem, mtThreadStack);\n@@ -1775,1 +1775,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, mtThreadStack);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3033,1 +3033,1 @@\n-void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint) {\n+void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag) {\n@@ -3040,1 +3040,1 @@\n-    commit_memory(addr, bytes, alignment_hint, !ExecMem);\n+    commit_memory(addr, bytes, alignment_hint, !ExecMem, flag);\n@@ -3647,1 +3647,1 @@\n-  return os::commit_memory(addr, size, !ExecMem);\n+  return os::commit_memory(addr, size, !ExecMem, mtThreadStack);\n@@ -3663,1 +3663,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, mtThreadStack);\n@@ -4684,1 +4684,1 @@\n-  char* codebuf = os::attempt_reserve_memory_at(hint, page_size);\n+  char* codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtInternal);\n@@ -4692,1 +4692,1 @@\n-    codebuf = os::attempt_reserve_memory_at(hint, page_size);\n+    codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtInternal);\n@@ -4695,1 +4695,1 @@\n-  if ((codebuf == nullptr) || (!os::commit_memory(codebuf, page_size, true))) {\n+  if ((codebuf == nullptr) || (!os::commit_memory(codebuf, page_size, true, mtInternal))) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -398,1 +398,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec, MEMFLAGS flag) {\n@@ -400,1 +400,1 @@\n-  char* extra_base = os::reserve_memory(extra_size, exec);\n+  char* extra_base = os::reserve_memory(extra_size, exec, flag);\n@@ -424,1 +424,1 @@\n-  MemTracker::record_virtual_memory_commit((address)aligned_base, size, CALLER_PC);\n+  MemTracker::record_virtual_memory_commit((address)aligned_base, size, CALLER_PC, flag);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-  char* mapAddress = os::reserve_memory(size);\n+  char* mapAddress = os::reserve_memory(size, false, mtInternal);\n@@ -75,1 +75,1 @@\n-  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n+  if (!os::commit_memory(mapAddress, size, !ExecMem, mtInternal)) {\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2750,1 +2750,1 @@\n-                            !ExecMem);\n+                            !ExecMem, mtThreadStack);\n@@ -3137,1 +3137,1 @@\n-  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC);\n+  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC, mtNone);\n@@ -3198,1 +3198,1 @@\n-                                                  bytes_to_release, CALLER_PC);\n+                                                  bytes_to_release, CALLER_PC, mtNone);\n@@ -3218,1 +3218,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC, mtNone);\n@@ -3385,1 +3385,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec, MEMFLAGS flag) {\n@@ -3716,1 +3716,1 @@\n-  return os::commit_memory(addr, size, !ExecMem);\n+  return os::commit_memory(addr, size, !ExecMem, mtThreadStack);\n@@ -3720,1 +3720,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, mtThreadStack);\n@@ -3771,1 +3771,1 @@\n-                          \"cannot commit protection page\");\n+                          \"cannot commit protection page\", mtNone);\n@@ -3811,1 +3811,1 @@\n-void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint) { }\n+void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag) { }\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-  char* mapAddress = os::reserve_memory(size);\n+  char* mapAddress = os::reserve_memory(size, false, mtInternal);\n@@ -65,1 +65,1 @@\n-  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n+  if (!os::commit_memory(mapAddress, size, !ExecMem, mtInternal)) {\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -314,1 +314,1 @@\n-  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(), os::vm_page_size());\n+  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(), os::vm_page_size(), mtClassShared);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1785,1 +1785,1 @@\n-    if (!os::commit_memory(base, size, r->allow_exec())) {\n+    if (!os::commit_memory(base, size, r->allow_exec(), mtClassShared)) {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-  _symbol_rs = ReservedSpace(symbol_rs_size);\n+  _symbol_rs = ReservedSpace(symbol_rs_size, mtClassShared);\n@@ -1273,1 +1273,1 @@\n-                                     os::vm_page_size(), (char*)base_address);\n+                                     os::vm_page_size(), mtClassShared, (char*)base_address);\n@@ -1277,2 +1277,0 @@\n-      \/\/ Register archive space with NMT.\n-      MemTracker::record_virtual_memory_type(archive_space_rs.base(), mtClassShared);\n@@ -1322,1 +1320,1 @@\n-                                       os::vm_page_size(), (char*)base_address);\n+                                       os::vm_page_size(), mtClassShared, (char*)base_address);\n@@ -1324,1 +1322,1 @@\n-                                       os::vm_page_size(), (char*)ccs_base);\n+                                       os::vm_page_size(), mtClass, (char*)ccs_base);\n@@ -1330,3 +1328,0 @@\n-    \/\/ NMT: fix up the space tags\n-    MemTracker::record_virtual_memory_type(archive_space_rs.base(), mtClassShared);\n-    MemTracker::record_virtual_memory_type(class_space_rs.base(), mtClass);\n@@ -1336,1 +1331,1 @@\n-                                     os::vm_page_size(), (char*) base_address);\n+                                     os::vm_page_size(), mtClassShared, (char*) base_address);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1216,1 +1216,1 @@\n-  ReservedSpace rs(size, preferred_page_size);\n+  ReservedSpace rs(size, preferred_page_size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,1 +138,1 @@\n-  os::commit_memory_or_exit(start_addr, size, _page_size, false, \"G1 virtual space\");\n+  os::commit_memory_or_exit(start_addr, size, _page_size, false, \"G1 virtual space\", mtGC);\n@@ -145,1 +145,1 @@\n-  os::commit_memory_or_exit(aligned_end_address, _tail_size, os::vm_page_size(), false, \"G1 virtual space\");\n+  os::commit_memory_or_exit(aligned_end_address, _tail_size, os::vm_page_size(), false, \"G1 virtual space\", mtGC);\n@@ -204,1 +204,1 @@\n-  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)));\n+  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)), mtGC);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-  _region_commit_map(rs.size() * commit_factor \/ region_granularity, mtGC),\n+  _region_commit_map(rs.size() * commit_factor \/ region_granularity, type),\n@@ -50,2 +50,0 @@\n-\n-  MemTracker::record_virtual_memory_type((address)rs.base(), type);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -230,1 +230,1 @@\n-    os::free_memory((char*)aligned_region.start(), aligned_region.byte_size(), os_align);\n+    os::free_memory((char*)aligned_region.start(), aligned_region.byte_size(), os_align, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-        os::free_memory((char*)start, size, page_size);\n+        os::free_memory((char*)start, size, page_size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  ReservedSpace backing_store(bytes_to_reserve);\n+  ReservedSpace backing_store(bytes_to_reserve, mtGC);\n@@ -54,1 +54,0 @@\n-  MemTracker::record_virtual_memory_type(backing_store.base(), mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n+  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz, mtGC);\n@@ -57,2 +57,0 @@\n-  MemTracker::record_virtual_memory_type((address)rs.base(), mtGC);\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -443,1 +443,1 @@\n-  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n+  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz, mtGC);\n@@ -447,2 +447,0 @@\n-  MemTracker::record_virtual_memory_type((address)rs.base(), mtGC);\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-         os::commit_memory(base_addr, bytes, alignment(), !ExecMem);\n+         os::commit_memory(base_addr, bytes, alignment(), !ExecMem, mtGC);\n@@ -98,1 +98,1 @@\n-  bool result = special() || os::uncommit_memory(base_addr, bytes);\n+  bool result = special() || os::uncommit_memory(base_addr, bytes, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  ReservedSpace rs(size);\n+  ReservedSpace rs(size, mtGC);\n@@ -45,2 +45,0 @@\n-  MemTracker::record_virtual_memory_type((address)rs.base(), mtGC);\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  ReservedSpace heap_rs(_byte_map_size, rs_align, _page_size);\n+  ReservedSpace heap_rs(_byte_map_size, rs_align, _page_size, mtGC);\n@@ -87,3 +87,1 @@\n-  MemTracker::record_virtual_memory_type((address)heap_rs.base(), mtGC);\n-\n-  os::trace_page_sizes(\"Card Table\", num_bytes, num_bytes,\n+    os::trace_page_sizes(\"Card Table\", num_bytes, num_bytes,\n@@ -169,1 +167,2 @@\n-                              \"card table expansion\");\n+                              \"card table expansion\",\n+                              mtGCCardSet);\n@@ -177,1 +176,1 @@\n-                                   delta.byte_size());\n+                                   delta.byte_size(), mtGCCardSet);\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -60,2 +60,0 @@\n-  MemTracker::record_virtual_memory_type(_map_space.base(), mtGC);\n-\n@@ -69,1 +67,1 @@\n-                              \"Unable to commit collection set bitmap: heap\");\n+                              \"Unable to commit collection set bitmap: heap\", mtGC);\n@@ -74,1 +72,1 @@\n-                                \"Unable to commit collection set bitmap: zero page\");\n+                                \"Unable to commit collection set bitmap: zero page\", mtGC);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-                              \"Cannot commit heap memory\");\n+                              \"Cannot commit heap memory\", mtGC);\n@@ -250,1 +250,1 @@\n-  ReservedSpace bitmap(_bitmap_size, bitmap_page_size);\n+  ReservedSpace bitmap(_bitmap_size, bitmap_page_size, mtGC);\n@@ -255,1 +255,0 @@\n-  MemTracker::record_virtual_memory_type(bitmap.base(), mtGC);\n@@ -264,1 +263,1 @@\n-                              \"Cannot commit bitmap memory\");\n+                              \"Cannot commit bitmap memory\", mtGC);\n@@ -270,1 +269,1 @@\n-    ReservedSpace verify_bitmap(_bitmap_size, bitmap_page_size);\n+    ReservedSpace verify_bitmap(_bitmap_size, bitmap_page_size, mtGC);\n@@ -277,1 +276,1 @@\n-                                \"Cannot commit verification bitmap memory\");\n+                                \"Cannot commit verification bitmap memory\", mtGC);\n@@ -295,1 +294,1 @@\n-  ReservedSpace aux_bitmap(_bitmap_size, aux_bitmap_page_size);\n+  ReservedSpace aux_bitmap(_bitmap_size, aux_bitmap_page_size, mtGC);\n@@ -300,1 +299,0 @@\n-  MemTracker::record_virtual_memory_type(aux_bitmap.base(), mtGC);\n@@ -313,1 +311,1 @@\n-  ReservedSpace region_storage(region_storage_size, region_page_size);\n+  ReservedSpace region_storage(region_storage_size, region_page_size, mtGC);\n@@ -318,1 +316,0 @@\n-  MemTracker::record_virtual_memory_type(region_storage.base(), mtGC);\n@@ -321,1 +318,1 @@\n-                              \"Cannot commit region memory\");\n+                              \"Cannot commit region memory\", mtGC);\n@@ -339,1 +336,1 @@\n-      cset_rs = ReservedSpace(cset_size, cset_align, cset_page_size, req_addr);\n+      cset_rs = ReservedSpace(cset_size, cset_align, cset_page_size, mtGC, req_addr);\n@@ -348,1 +345,1 @@\n-      cset_rs = ReservedSpace(cset_size, cset_align, os::vm_page_size());\n+      cset_rs = ReservedSpace(cset_size, cset_align, os::vm_page_size(), mtGC);\n@@ -1417,1 +1414,1 @@\n-  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), false)) {\n+  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), false, mtJavaHeap)) {\n@@ -1437,1 +1434,1 @@\n-  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n+  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), mtGC)) {\n@@ -2267,1 +2264,1 @@\n-  if (!os::commit_memory(start, len, false)) {\n+  if (!os::commit_memory(start, len, false, mtJavaHeap)) {\n@@ -2296,1 +2293,1 @@\n-  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len)) {\n+  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len, mtGC)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -623,1 +623,1 @@\n-  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes, false)) {\n+  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes, false, mtJavaHeap)) {\n@@ -637,1 +637,1 @@\n-  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes)) {\n+  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes, mtJavaHeap)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-  os::commit_memory_or_exit((char*)_end, expand_size, false \/* executable *\/, \"Mark stack space\");\n+  os::commit_memory_or_exit((char*)_end, expand_size, false \/* executable *\/, \"Mark stack space\", mtGC);\n@@ -108,1 +108,1 @@\n-    os::uncommit_memory((char*)shrink_start, shrink_size, false \/* executable *\/);\n+    os::uncommit_memory((char*)shrink_start, shrink_size, mtGC, false \/* executable *\/);\n","filename":"src\/hotspot\/share\/gc\/x\/xMarkStackAllocator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -282,1 +282,1 @@\n-  MemTracker::record_virtual_memory_commit((void*)addr, size, CALLER_PC);\n+  MemTracker::record_virtual_memory_commit((void*)addr, size, CALLER_PC, mtGC);\n@@ -288,1 +288,1 @@\n-  MemTracker::record_virtual_memory_uncommit((address)addr, size);\n+  MemTracker::record_virtual_memory_uncommit((address)addr, size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/x\/xPhysicalMemory.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,2 +184,1 @@\n-  MemTracker::record_virtual_memory_reserve((void*)start, size, CALLER_PC);\n-  MemTracker::record_virtual_memory_type((void*)start, mtJavaHeap);\n+  MemTracker::record_virtual_memory_reserve((void*)start, size, CALLER_PC, mtJavaHeap);\n","filename":"src\/hotspot\/share\/gc\/x\/xVirtualMemory.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-  os::commit_memory_or_exit((char*)_end, expand_size, false \/* executable *\/, \"Mark stack space\");\n+  os::commit_memory_or_exit((char*)_end, expand_size, false \/* executable *\/, \"Mark stack space\", mtGC);\n@@ -107,1 +107,1 @@\n-    os::uncommit_memory((char*)shrink_start, shrink_size, false \/* executable *\/);\n+    os::uncommit_memory((char*)shrink_start, shrink_size, mtGC, false \/* executable *\/);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-      MemTracker::record_virtual_memory_commit((void*)sub_range_addr, sub_range_size, CALLER_PC);\n+      MemTracker::record_virtual_memory_commit((void*)sub_range_addr, sub_range_size, CALLER_PC, mtGC);\n@@ -77,1 +77,1 @@\n-      MemTracker::record_virtual_memory_uncommit((address)sub_range_addr, sub_range_size);\n+      MemTracker::record_virtual_memory_uncommit((address)sub_range_addr, sub_range_size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMT.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-                      os::vm_page_size());\n+                      os::vm_page_size(), mtTracing);\n@@ -120,1 +120,0 @@\n-  MemTracker::record_virtual_memory_type((address)_rs.base(), mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-  if (os::commit_memory(addr, size, !ExecMem)) {\n+  if (os::commit_memory(addr, size, !ExecMem, flags)) {\n@@ -83,1 +83,1 @@\n-  os::commit_memory_or_exit(addr, size, !ExecMem, \"Allocator (commit)\");\n+  os::commit_memory_or_exit(addr, size, !ExecMem, \"Allocator (commit)\", flags);\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -230,1 +230,1 @@\n-  ReservedSpace seg_rs(reserved_segments_size);\n+  ReservedSpace seg_rs(reserved_segments_size, mtCode);\n@@ -235,2 +235,0 @@\n-  MemTracker::record_virtual_memory_type((address)_segmap.low_boundary(), mtCode);\n-\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -592,1 +592,1 @@\n-    result = os::reserve_memory_aligned(size, Metaspace::reserve_alignment(), false);\n+    result = os::reserve_memory_aligned(size, Metaspace::reserve_alignment(), false, mtMetaspace);\n@@ -601,1 +601,1 @@\n-                                                      os::vm_page_size(), false, false);\n+                                                      os::vm_page_size(), false, false, mtMetaspace);\n@@ -742,1 +742,1 @@\n-                         os::vm_page_size() \/* large *\/, (char*)base);\n+                         os::vm_page_size() \/* large *\/, mtMetaspace, (char*)base);\n@@ -770,3 +770,0 @@\n-    \/\/ Mark class space as such\n-    MemTracker::record_virtual_memory_type((address)rs.base(), mtClass);\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size());\n+    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size(), mtTest);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  if (os::commit_memory((char*)p, word_size * BytesPerWord, false) == false) {\n+  if (os::commit_memory((char*)p, word_size * BytesPerWord, false, _rs.nmt_flag()) == false) {\n@@ -191,1 +191,1 @@\n-  if (os::uncommit_memory((char*)p, word_size * BytesPerWord) == false) {\n+  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, _rs.nmt_flag()) == false) {\n@@ -258,1 +258,1 @@\n-                   os::vm_page_size());\n+                   os::vm_page_size(), mtMetaspace);\n@@ -262,1 +262,0 @@\n-  MemTracker::record_virtual_memory_type(rs.base(), mtMetaspace);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    _alignment(0), _special(false), _fd_for_heap(-1), _executable(false) {\n+    _alignment(0), _special(false), _fd_for_heap(-1), _nmt_flag(mtNone), _executable(false) {\n@@ -48,1 +48,1 @@\n-ReservedSpace::ReservedSpace(size_t size) : _fd_for_heap(-1) {\n+ReservedSpace::ReservedSpace(size_t size, MEMFLAGS flag) : _fd_for_heap(-1), _nmt_flag(flag) {\n@@ -57,1 +57,1 @@\n-ReservedSpace::ReservedSpace(size_t size, size_t preferred_page_size) : _fd_for_heap(-1) {\n+ReservedSpace::ReservedSpace(size_t size, size_t preferred_page_size, MEMFLAGS flag) : _fd_for_heap(-1), _nmt_flag(flag) {\n@@ -71,2 +71,2 @@\n-                             size_t page_size,\n-                             char* requested_address) : _fd_for_heap(-1) {\n+                             size_t page_size, MEMFLAGS flag,\n+                             char* requested_address) : _fd_for_heap(-1), _nmt_flag(flag) {\n@@ -77,1 +77,1 @@\n-                             bool special, bool executable) : _fd_for_heap(-1) {\n+                             bool special, bool executable, MEMFLAGS flag) : _fd_for_heap(-1), _nmt_flag(flag) {\n@@ -84,1 +84,1 @@\n-static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd, bool executable) {\n+static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd, bool executable, MEMFLAGS flag) {\n@@ -88,1 +88,1 @@\n-  return os::attempt_reserve_memory_at(base, size, executable);\n+  return os::attempt_reserve_memory_at(base, size, executable, flag);\n@@ -92,1 +92,1 @@\n-static char* map_or_reserve_memory(size_t size, int fd, bool executable) {\n+static char* map_or_reserve_memory(size_t size, int fd, bool executable, MEMFLAGS flag) {\n@@ -96,1 +96,1 @@\n-  return os::reserve_memory(size, executable);\n+  return os::reserve_memory(size, executable, flag);\n@@ -100,1 +100,1 @@\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd, bool executable) {\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd, bool executable, MEMFLAGS flag) {\n@@ -102,1 +102,1 @@\n-    return os::map_memory_to_file_aligned(size, alignment, fd);\n+    return os::map_memory_to_file_aligned(size, alignment, fd, flag);\n@@ -104,1 +104,1 @@\n-  return os::reserve_memory_aligned(size, alignment, executable);\n+  return os::reserve_memory_aligned(size, alignment, executable, flag);\n@@ -157,1 +157,1 @@\n-                            const size_t alignment, int fd, bool exec) {\n+                            const size_t alignment, int fd, bool exec, MEMFLAGS flag) {\n@@ -166,1 +166,1 @@\n-    base = attempt_map_or_reserve_memory_at(requested_address, size, fd, exec);\n+    base = attempt_map_or_reserve_memory_at(requested_address, size, fd, exec, flag);\n@@ -171,1 +171,1 @@\n-    base = map_or_reserve_memory(size, fd, exec);\n+    base = map_or_reserve_memory(size, fd, exec, flag);\n@@ -178,1 +178,1 @@\n-      base = map_or_reserve_memory_aligned(size, alignment, fd, exec);\n+      base = map_or_reserve_memory_aligned(size, alignment, fd, exec, flag);\n@@ -238,1 +238,1 @@\n-    char* base = reserve_memory(requested_address, size, alignment, _fd_for_heap, executable);\n+    char* base = reserve_memory(requested_address, size, alignment, _fd_for_heap, executable, _nmt_flag);\n@@ -269,1 +269,1 @@\n-  char* base = reserve_memory(requested_address, size, alignment, -1, executable);\n+  char* base = reserve_memory(requested_address, size, alignment, -1, executable, _nmt_flag);\n@@ -313,1 +313,1 @@\n-  ReservedSpace result(base(), partition_size, alignment, page_size(), special(), executable());\n+  ReservedSpace result(base(), partition_size, alignment, page_size(), special(), executable(), nmt_flag());\n@@ -322,1 +322,1 @@\n-                       alignment, page_size(), special(), executable());\n+                       alignment, page_size(), special(), executable(), nmt_flag());\n@@ -360,1 +360,1 @@\n-                                             size_t page_size, bool special, bool executable) {\n+                                             size_t page_size, bool special, bool executable, MEMFLAGS flag) {\n@@ -366,0 +366,1 @@\n+  space.set_nmt_flag(flag);\n@@ -613,1 +614,1 @@\n-\n+  set_nmt_flag(mtJavaHeap);\n@@ -670,0 +671,1 @@\n+  set_nmt_flag(mtCode);\n@@ -671,1 +673,0 @@\n-  MemTracker::record_virtual_memory_type((address)base(), mtCode);\n@@ -692,0 +693,1 @@\n+  _nmt_flag                = mtNone;\n@@ -705,0 +707,1 @@\n+  _nmt_flag = rs.nmt_flag();\n@@ -836,2 +839,2 @@\n-static bool commit_expanded(char* start, size_t size, size_t alignment, bool pre_touch, bool executable) {\n-  if (os::commit_memory(start, size, alignment, executable)) {\n+static bool commit_expanded(char* start, size_t size, size_t alignment, bool pre_touch, bool executable, MEMFLAGS flag) {\n+  if (os::commit_memory(start, size, alignment, executable, flag)) {\n@@ -926,1 +929,1 @@\n-    if (!commit_expanded(lower_high(), lower_needs, _lower_alignment, pre_touch, _executable)) {\n+    if (!commit_expanded(lower_high(), lower_needs, _lower_alignment, pre_touch, _executable, _nmt_flag)) {\n@@ -934,1 +937,1 @@\n-    if (!commit_expanded(middle_high(), middle_needs, _middle_alignment, pre_touch, _executable)) {\n+    if (!commit_expanded(middle_high(), middle_needs, _middle_alignment, pre_touch, _executable, _nmt_flag)) {\n@@ -942,1 +945,1 @@\n-    if (!commit_expanded(upper_high(), upper_needs, _upper_alignment, pre_touch, _executable)) {\n+    if (!commit_expanded(upper_high(), upper_needs, _upper_alignment, pre_touch, _executable, _nmt_flag)) {\n@@ -1014,1 +1017,1 @@\n-    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _executable)) {\n+    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _nmt_flag, _executable)) {\n@@ -1025,1 +1028,1 @@\n-    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _executable)) {\n+    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _nmt_flag, _executable)) {\n@@ -1036,1 +1039,1 @@\n-    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _executable)) {\n+    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _nmt_flag, _executable)) {\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":35,"deletions":32,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+  MEMFLAGS _nmt_flag;\n@@ -50,1 +51,1 @@\n-                size_t page_size, bool special, bool executable);\n+                size_t page_size, bool special, bool executable, MEMFLAGS flag);\n@@ -69,0 +70,4 @@\n+\n+  inline MEMFLAGS nmt_flag() { return _nmt_flag; }\n+  inline void set_nmt_flag(MEMFLAGS flag) { _nmt_flag = flag; }\n+\n@@ -73,1 +78,1 @@\n-  explicit ReservedSpace(size_t size);\n+  explicit ReservedSpace(size_t size, MEMFLAGS flag);\n@@ -78,2 +83,2 @@\n-  ReservedSpace(size_t size, size_t preferred_page_size);\n-  ReservedSpace(size_t size, size_t alignment, size_t page_size,\n+  ReservedSpace(size_t size, size_t preferred_page_size, MEMFLAGS flag);\n+  ReservedSpace(size_t size, size_t alignment, size_t page_size, MEMFLAGS flag,\n@@ -113,1 +118,1 @@\n-                                       size_t page_size, bool special, bool executable);\n+                                       size_t page_size, bool special, bool executable, MEMFLAGS flag);\n@@ -194,0 +199,2 @@\n+  MEMFLAGS _nmt_flag;\n+\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-    MEMFLAGS flag = mtNone) {\n+    MEMFLAGS flag) {\n@@ -140,1 +140,1 @@\n-  static inline void record_virtual_memory_uncommit(address addr, size_t size) {\n+  static inline void record_virtual_memory_uncommit(address addr, size_t size, MEMFLAGS flag) {\n@@ -144,1 +144,1 @@\n-      VirtualMemoryTracker::remove_uncommitted_region((address)addr, size);\n+      VirtualMemoryTracker::remove_uncommitted_region((address)addr, size, flag);\n@@ -155,1 +155,1 @@\n-      VirtualMemoryTracker::add_committed_region((address)addr, size, stack);\n+      VirtualMemoryTracker::add_committed_region((address)addr, size, stack, flag);\n@@ -160,1 +160,1 @@\n-    const NativeCallStack& stack) {\n+    const NativeCallStack& stack, MEMFLAGS flag) {\n@@ -165,1 +165,1 @@\n-      VirtualMemoryTracker::add_committed_region((address)addr, size, stack);\n+      VirtualMemoryTracker::add_committed_region((address)addr, size, stack, flag);\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -427,2 +427,2 @@\n-      assert(reserved_rgn->flag() == mtNone, \"Overwrite memory type (should be mtNone, is: \\\"%s\\\")\",\n-             NMTUtil::flag_to_name(reserved_rgn->flag()));\n+      assert(reserved_rgn->flag() == mtNone, \"Overwrite memory type (should be mtNone, is: \\\"%s\\\") wants to change to \\\"%s\\\"\",\n+             NMTUtil::flag_to_name(reserved_rgn->flag()), NMTUtil::flag_to_name(flag));\n@@ -435,1 +435,1 @@\n-  const NativeCallStack& stack) {\n+  const NativeCallStack& stack, MEMFLAGS flag) {\n@@ -440,1 +440,1 @@\n-  ReservedMemoryRegion  rgn(addr, size);\n+  ReservedMemoryRegion  rgn(addr, size, stack, flag);\n@@ -455,1 +455,1 @@\n-bool VirtualMemoryTracker::remove_uncommitted_region(address addr, size_t size) {\n+bool VirtualMemoryTracker::remove_uncommitted_region(address addr, size_t size, MEMFLAGS flag) {\n@@ -460,1 +460,1 @@\n-  ReservedMemoryRegion  rgn(addr, size);\n+  ReservedMemoryRegion  rgn(addr, size, NativeCallStack::empty_stack(), flag);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -384,2 +384,2 @@\n-  static bool add_committed_region      (address base_addr, size_t size, const NativeCallStack& stack);\n-  static bool remove_uncommitted_region (address base_addr, size_t size);\n+  static bool add_committed_region      (address base_addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag);\n+  static bool remove_uncommitted_region (address base_addr, size_t size, MEMFLAGS flag);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-  return os::attempt_reserve_memory_between((char*)from, (char*)to, size, alignment, aslr);\n+  return os::attempt_reserve_memory_between((char*)from, (char*)to, size, alignment, aslr, mtMetaspace);\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2399,1 +2399,1 @@\n-    bad_address = os::reserve_memory(size);\n+    bad_address = os::reserve_memory(size, false, mtInternal);\n@@ -2403,1 +2403,0 @@\n-      MemTracker::record_virtual_memory_type((void*)bad_address, mtInternal);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -699,4 +699,1 @@\n-\n-  addr = (jlong)(uintptr_t)os::reserve_memory(size);\n-  MemTracker::record_virtual_memory_type((address)addr, mtTest);\n-\n+  addr = (jlong)(uintptr_t)os::reserve_memory(size, false, mtTest);\n@@ -707,3 +704,1 @@\n-  addr = (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size);\n-  MemTracker::record_virtual_memory_type((address)addr, mtTest);\n-\n+  addr = (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size, false, mtTest);\n@@ -714,2 +709,1 @@\n-  os::commit_memory((char *)(uintptr_t)addr, size, !ExecMem);\n-  MemTracker::record_virtual_memory_type((address)(uintptr_t)addr, mtTest);\n+  os::commit_memory((char *)(uintptr_t)addr, size, !ExecMem, mtTest);\n@@ -719,1 +713,1 @@\n-  os::uncommit_memory((char *)(uintptr_t)addr, size);\n+  os::uncommit_memory((char *)(uintptr_t)addr, size, mtTest);\n@@ -1487,1 +1481,1 @@\n-  p = os::reserve_memory(os::vm_allocation_granularity());\n+  p = os::reserve_memory(os::vm_allocation_granularity(), false, mtTest);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1875,1 +1875,1 @@\n-char* os::attempt_reserve_memory_between(char* min, char* max, size_t bytes, size_t alignment, bool randomize) {\n+char* os::attempt_reserve_memory_between(char* min, char* max, size_t bytes, size_t alignment, bool randomize, MEMFLAGS flag) {\n@@ -2030,1 +2030,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC, flag);\n@@ -2046,1 +2046,1 @@\n-bool os::commit_memory(char* addr, size_t bytes, bool executable) {\n+bool os::commit_memory(char* addr, size_t bytes, bool executable, MEMFLAGS flag) {\n@@ -2050,1 +2050,1 @@\n-    MemTracker::record_virtual_memory_commit((address)addr, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_commit((address)addr, bytes, CALLER_PC, flag);\n@@ -2059,1 +2059,1 @@\n-                              bool executable) {\n+                              bool executable, MEMFLAGS flag) {\n@@ -2063,1 +2063,1 @@\n-    MemTracker::record_virtual_memory_commit((address)addr, size, CALLER_PC);\n+    MemTracker::record_virtual_memory_commit((address)addr, size, CALLER_PC, flag);\n@@ -2072,1 +2072,1 @@\n-                               const char* mesg) {\n+                               const char* mesg, MEMFLAGS flag) {\n@@ -2075,1 +2075,1 @@\n-  MemTracker::record_virtual_memory_commit((address)addr, bytes, CALLER_PC);\n+  MemTracker::record_virtual_memory_commit((address)addr, bytes, CALLER_PC, flag);\n@@ -2079,1 +2079,1 @@\n-                               bool executable, const char* mesg) {\n+                               bool executable, const char* mesg, MEMFLAGS flag) {\n@@ -2082,1 +2082,1 @@\n-  MemTracker::record_virtual_memory_commit((address)addr, size, CALLER_PC);\n+  MemTracker::record_virtual_memory_commit((address)addr, size, CALLER_PC, flag);\n@@ -2085,1 +2085,1 @@\n-bool os::uncommit_memory(char* addr, size_t bytes, bool executable) {\n+bool os::uncommit_memory(char* addr, size_t bytes, MEMFLAGS flag, bool executable) {\n@@ -2092,1 +2092,1 @@\n-      MemTracker::record_virtual_memory_uncommit((address)addr, bytes);\n+      MemTracker::record_virtual_memory_uncommit((address)addr, bytes, flag);\n@@ -2207,2 +2207,2 @@\n-void os::free_memory(char *addr, size_t bytes, size_t alignment_hint) {\n-  pd_free_memory(addr, bytes, alignment_hint);\n+void os::free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag) {\n+  pd_free_memory(addr, bytes, alignment_hint, flag);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-  static void   pd_free_memory(char *addr, size_t bytes, size_t alignment_hint);\n+  static void   pd_free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag);\n@@ -451,1 +451,1 @@\n-  static char*  reserve_memory(size_t bytes, bool executable = false, MEMFLAGS flags = mtNone);\n+  static char*  reserve_memory(size_t bytes, bool executable, MEMFLAGS flags);\n@@ -454,1 +454,1 @@\n-  static char*  reserve_memory_aligned(size_t size, size_t alignment, bool executable = false);\n+  static char*  reserve_memory_aligned(size_t size, size_t alignment, bool executable, MEMFLAGS flag);\n@@ -458,1 +458,1 @@\n-  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable = false, MEMFLAGS flag = mtNone);\n+  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable, MEMFLAGS flag);\n@@ -462,1 +462,1 @@\n-  static char* attempt_reserve_memory_between(char* min, char* max, size_t bytes, size_t alignment, bool randomize);\n+  static char* attempt_reserve_memory_between(char* min, char* max, size_t bytes, size_t alignment, bool randomize, MEMFLAGS flag);\n@@ -464,1 +464,1 @@\n-  static bool   commit_memory(char* addr, size_t bytes, bool executable);\n+  static bool   commit_memory(char* addr, size_t bytes, bool executable, MEMFLAGS flag);\n@@ -466,1 +466,1 @@\n-                              bool executable);\n+                              bool executable, MEMFLAGS flag);\n@@ -470,1 +470,1 @@\n-                                      bool executable, const char* mesg);\n+                                      bool executable, const char* mesg, MEMFLAGS flag);\n@@ -473,2 +473,2 @@\n-                                      bool executable, const char* mesg);\n-  static bool   uncommit_memory(char* addr, size_t bytes, bool executable = false);\n+                                      bool executable, const char* mesg, MEMFLAGS flag);\n+  static bool   uncommit_memory(char* addr, size_t bytes, MEMFLAGS flag, bool executable = false);\n@@ -511,1 +511,1 @@\n-  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MEMFLAGS flag = mtNone);\n+  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MEMFLAGS flag);\n@@ -521,1 +521,1 @@\n-  static void   free_memory(char *addr, size_t bytes, size_t alignment_hint);\n+  static void   free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,3 +61,2 @@\n-    char* polling_page = os::reserve_memory(allocation_size);\n-    os::commit_memory_or_exit(polling_page, allocation_size, false, \"Unable to commit Safepoint polling page\");\n-    MemTracker::record_virtual_memory_type((address)polling_page, mtSafepoint);\n+    char* polling_page = os::reserve_memory(allocation_size, false, mtSafepoint);\n+    os::commit_memory_or_exit(polling_page, allocation_size, false, \"Unable to commit Safepoint polling page\", mtSafepoint);\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -712,1 +712,1 @@\n-  char* page = os::reserve_memory(os::vm_page_size());\n+  char* page = os::reserve_memory(os::vm_page_size(), false, mtInternal);\n@@ -714,2 +714,1 @@\n-    MemTracker::record_virtual_memory_type(page, mtInternal);\n-    if (os::commit_memory(page, os::vm_page_size(), false) &&\n+    if (os::commit_memory(page, os::vm_page_size(), false, mtInternal) &&\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  ReservedSpace bot_rs(G1BlockOffsetTable::compute_size(heap.word_size()));\n+  ReservedSpace bot_rs(G1BlockOffsetTable::compute_size(heap.word_size()), mtGC);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  ReservedSpace rs(size, os::vm_page_size());\n+  ReservedSpace rs(size, os::vm_page_size(), mtTest);\n@@ -108,1 +108,1 @@\n-  ReservedSpace rs(size, page_size);\n+  ReservedSpace rs(size, page_size, mtTest);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_stressCommitUncommit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize, false \/* executable *\/);\n+      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize, false \/* executable *\/, mtTest);\n@@ -103,1 +103,1 @@\n-    os::commit_memory((char*)_reserved, ZGranuleSize, false \/* executable *\/);\n+    os::commit_memory((char*)_reserved, ZGranuleSize, false \/* executable *\/, mtGC);\n@@ -114,1 +114,1 @@\n-      os::uncommit_memory((char*)_reserved, ZGranuleSize, false \/* executable *\/);\n+      os::uncommit_memory((char*)_reserved, ZGranuleSize, mtGC, false \/* executable *\/);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -81,1 +81,1 @@\n-    ReservedSpace rs(size, alignment, page_size, (char *) nullptr);\n+    ReservedSpace rs(size, alignment, page_size, mtTest, (char *) nullptr);\n@@ -109,1 +109,1 @@\n-    ReservedSpace rs(size, alignment, page_size);\n+    ReservedSpace rs(size, alignment, page_size, mtTest);\n@@ -218,1 +218,1 @@\n-        return ReservedSpace(reserve_size_aligned);\n+        return ReservedSpace(reserve_size_aligned, mtTest);\n@@ -223,1 +223,1 @@\n-                             os::vm_page_size());\n+                             os::vm_page_size(), mtTest);\n@@ -302,1 +302,1 @@\n-  ReservedSpace reserved(large_page_size, large_page_size, large_page_size);\n+  ReservedSpace reserved(large_page_size, large_page_size, large_page_size, mtTest);\n@@ -372,0 +372,1 @@\n+                     mtTest, \/\/ NMT MEM Flag\n@@ -390,1 +391,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -415,1 +416,1 @@\n-    ReservedSpace rs(size, alignment, page_size);\n+    ReservedSpace rs(size, alignment, page_size, mtTest);\n@@ -519,1 +520,1 @@\n-      return ReservedSpace(reserve_size_aligned);\n+      return ReservedSpace(reserve_size_aligned, mtTest);\n@@ -524,1 +525,1 @@\n-                           os::vm_page_size());\n+                           os::vm_page_size(), mtTest);\n@@ -579,1 +580,1 @@\n-    ReservedSpace reserved(large_page_size, large_page_size, large_page_size);\n+    ReservedSpace reserved(large_page_size, large_page_size, large_page_size, mtTest);\n","filename":"test\/hotspot\/gtest\/memory\/test_virtualspace.cpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    bool result = os::commit_memory(base, size, !ExecMem);\n+    bool result = os::commit_memory(base, size, !ExecMem, mtThreadStack);\n@@ -135,1 +135,1 @@\n-    os::free_memory(base, size, page_sz);\n+    os::free_memory(base, size, page_sz, mtThreadStack);\n@@ -165,1 +165,1 @@\n-    result = os::commit_memory(base, size, !ExecMem);\n+    result = os::commit_memory(base, size, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_committed_virtualmemory.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-  char* p = os::reserve_memory(len, executable);\n+  char* p = os::reserve_memory(len, executable, mtTest);\n@@ -408,1 +408,1 @@\n-    p = (address)os::reserve_memory(total_range_len);\n+    p = (address)os::reserve_memory(total_range_len, false, mtTest);\n@@ -422,1 +422,1 @@\n-      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable);\n+      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable, mtTest);\n@@ -429,1 +429,1 @@\n-        EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, executable));\n+        EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, executable, mtTest));\n@@ -442,1 +442,1 @@\n-  address p = (address)os::reserve_memory(total_range_len);\n+  address p = (address)os::reserve_memory(total_range_len, false, mtTest);\n@@ -447,1 +447,1 @@\n-      EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, false));\n+      EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, false, mtTest));\n@@ -509,1 +509,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len, false, mtTest);\n@@ -532,1 +532,1 @@\n-  char* p = os::reserve_memory(4 * M);\n+  char* p = os::reserve_memory(4 * M, false, mtTest);\n@@ -567,1 +567,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len, false, mtTest);\n@@ -610,1 +610,1 @@\n-    if (os::commit_memory(p, 1 * M, false)) {\n+    if (os::commit_memory(p, 1 * M, false, mtTest)) {\n@@ -632,1 +632,1 @@\n-    address p = (address)os::reserve_memory(total_range_len);\n+    address p = (address)os::reserve_memory(total_range_len, false, mtTest);\n@@ -939,1 +939,1 @@\n-  char* p2 = os::attempt_reserve_memory_at(p1, M);\n+  char* p2 = os::attempt_reserve_memory_at(p1, M, false, mtTest);\n@@ -947,1 +947,1 @@\n-    char* p1 = os::reserve_memory_aligned(lpsz, lpsz, false);\n+    char* p1 = os::reserve_memory_aligned(lpsz, lpsz, false, mtTest);\n@@ -961,1 +961,1 @@\n-    char* p = os::attempt_reserve_memory_at((char*)0x1f00000, M);\n+    char* p = os::attempt_reserve_memory_at((char*)0x1f00000, M, false, mtTest);\n@@ -963,1 +963,1 @@\n-    p = os::attempt_reserve_memory_at((char*)((64 * G) + M), M);\n+    p = os::attempt_reserve_memory_at((char*)((64 * G) + M), M, false, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -360,1 +360,1 @@\n-  EXPECT_TRUE(os::commit_memory(heap, size, false));\n+  EXPECT_TRUE(os::commit_memory(heap, size, false, mtInternal));\n@@ -382,1 +382,1 @@\n-  EXPECT_TRUE(os::uncommit_memory(heap, size, false));\n+  EXPECT_TRUE(os::uncommit_memory(heap, size, mtInternal, false));\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-  char* const  addr = os::attempt_reserve_memory_between(min, max, bytes, alignment, randomized);\n+  char* const  addr = os::attempt_reserve_memory_between(min, max, bytes, alignment, randomized, mtTest);\n@@ -161,1 +161,1 @@\n-        _base = os::attempt_reserve_memory_at((char*)candidate, _len);\n+        _base = os::attempt_reserve_memory_at((char*)candidate, _len, false, mtTest);\n@@ -169,2 +169,2 @@\n-    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size);\n-    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size);\n+    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size, false, mtTest);\n+    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size, false, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_reserve_between.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -170,1 +170,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -257,1 +257,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -428,1 +428,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_virtualMemoryTracker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}