{"files":[{"patch":"@@ -72,1 +72,1 @@\n-    result = os::attempt_reserve_memory_at((char*)immediate, size, false, mtMetaspace);\n+    result = os::attempt_reserve_memory_at((char*)immediate, size, !ExecMem, mtClass);\n@@ -115,1 +115,1 @@\n-    result = os::reserve_memory_aligned(size, alignment, false, mtMetaspace);\n+    result = os::reserve_memory_aligned(size, alignment, !ExecMem, mtClass);\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  _base = (uintptr_t)os::reserve_memory(max_capacity, false, mtJavaHeap);\n+  _base = (uintptr_t)os::reserve_memory(max_capacity, !ExecMem, mtJavaHeap);\n","filename":"src\/hotspot\/os\/bsd\/gc\/x\/xPhysicalMemoryBacking_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  _base = (uintptr_t)os::reserve_memory(max_capacity, false, mtJavaHeap);\n+  _base = (uintptr_t)os::reserve_memory(max_capacity, !ExecMem, mtJavaHeap);\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zPhysicalMemoryBacking_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1775,1 +1775,1 @@\n-  return os::uncommit_memory(addr, size, mtThreadStack);\n+  return os::uncommit_memory(addr, size, !ExecMem, mtThreadStack);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3663,1 +3663,1 @@\n-  return os::uncommit_memory(addr, size, mtThreadStack);\n+  return os::uncommit_memory(addr, size, !ExecMem, mtThreadStack);\n@@ -4684,1 +4684,1 @@\n-  char* codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtInternal);\n+  char* codebuf = os::attempt_reserve_memory_at(hint, page_size, !ExecMem, mtInternal);\n@@ -4692,1 +4692,1 @@\n-    codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtInternal);\n+    codebuf = os::attempt_reserve_memory_at(hint, page_size, !ExecMem, mtInternal);\n@@ -4695,1 +4695,1 @@\n-  if ((codebuf == nullptr) || (!os::commit_memory(codebuf, page_size, true, mtInternal))) {\n+  if ((codebuf == nullptr) || (!os::commit_memory(codebuf, page_size, ExecMem, mtInternal))) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  char* mapAddress = os::reserve_memory(size, false, mtInternal);\n+  char* mapAddress = os::reserve_memory(size, !ExecMem, mtInternal);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3137,1 +3137,1 @@\n-  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC, mtNone);\n+  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC, mtInternal);\n@@ -3360,1 +3360,1 @@\n-                                         os::reserve_memory(extra_size, false, flag);\n+                                         os::reserve_memory(extra_size, !ExecMem, flag);\n@@ -3377,1 +3377,1 @@\n-                                     os::attempt_reserve_memory_at(aligned_base, size, false, flag);\n+                                     os::attempt_reserve_memory_at(aligned_base, size, !ExecMem, flag);\n@@ -3720,1 +3720,1 @@\n-  return os::uncommit_memory(addr, size, mtThreadStack);\n+  return os::uncommit_memory(addr, size, !ExecMem, mtThreadStack);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  char* mapAddress = os::reserve_memory(size, false, mtInternal);\n+  char* mapAddress = os::reserve_memory(size, !ExecMem, mtInternal);\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-  os::commit_memory_or_exit(start_addr, size, _page_size, false, \"G1 virtual space\", mtGC);\n+  os::commit_memory_or_exit(start_addr, size, _page_size, !ExecMem, \"G1 virtual space\", mtGC);\n@@ -145,1 +145,1 @@\n-  os::commit_memory_or_exit(aligned_end_address, _tail_size, os::vm_page_size(), false, \"G1 virtual space\", mtGC);\n+  os::commit_memory_or_exit(aligned_end_address, _tail_size, os::vm_page_size(), !ExecMem, \"G1 virtual space\", mtGC);\n@@ -204,1 +204,1 @@\n-  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)), mtGC);\n+  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)), !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-  bool result = special() || os::uncommit_memory(base_addr, bytes, mtGC);\n+  bool result = special() || os::uncommit_memory(base_addr, bytes, !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-                                   delta.byte_size(), mtGCCardSet);\n+                                   delta.byte_size(), !ExecMem, mtGCCardSet);\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    os::commit_memory_or_exit(bot_addr, pointer_delta(top_addr, bot_addr, 1), false,\n+    os::commit_memory_or_exit(bot_addr, pointer_delta(top_addr, bot_addr, 1), !ExecMem,\n@@ -71,1 +71,1 @@\n-      os::commit_memory_or_exit(_biased_cset_map, page_size, false,\n+      os::commit_memory_or_exit(_biased_cset_map, page_size, !ExecMem,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-    os::commit_memory_or_exit(sh_rs.base(), _initial_size, heap_alignment, false,\n+    os::commit_memory_or_exit(sh_rs.base(), _initial_size, heap_alignment, !ExecMem,\n@@ -262,1 +262,1 @@\n-    os::commit_memory_or_exit((char *) _bitmap_region.start(), bitmap_init_commit, bitmap_page_size, false,\n+    os::commit_memory_or_exit((char *) _bitmap_region.start(), bitmap_init_commit, bitmap_page_size, !ExecMem,\n@@ -275,1 +275,1 @@\n-      os::commit_memory_or_exit(verify_bitmap.base(), verify_bitmap.size(), bitmap_page_size, false,\n+      os::commit_memory_or_exit(verify_bitmap.base(), verify_bitmap.size(), bitmap_page_size, !ExecMem,\n@@ -317,1 +317,1 @@\n-    os::commit_memory_or_exit(region_storage.base(), region_storage_size, region_page_size, false,\n+    os::commit_memory_or_exit(region_storage.base(), region_storage_size, region_page_size, !ExecMem,\n@@ -1414,1 +1414,1 @@\n-  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), false, mtJavaHeap)) {\n+  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), !ExecMem, mtGC)) {\n@@ -1434,1 +1434,1 @@\n-  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), mtGC)) {\n+  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), !ExecMem, mtGC)) {\n@@ -2264,1 +2264,1 @@\n-  if (!os::commit_memory(start, len, false, mtJavaHeap)) {\n+  if (!os::commit_memory(start, len, !ExecMem, mtGC)) {\n@@ -2293,1 +2293,1 @@\n-  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len, mtGC)) {\n+  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len, !ExecMem, mtGC)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -623,1 +623,1 @@\n-  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes, false, mtJavaHeap)) {\n+  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes, !ExecMem, mtJavaHeap)) {\n@@ -637,1 +637,1 @@\n-  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes, mtJavaHeap)) {\n+  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes, !ExecMem, mtJavaHeap)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-  os::commit_memory_or_exit((char*)_end, expand_size, false \/* executable *\/, \"Mark stack space\", mtGC);\n+  os::commit_memory_or_exit((char*)_end, expand_size, !ExecMem \/* executable *\/, \"Mark stack space\", mtGC);\n@@ -108,1 +108,1 @@\n-    os::uncommit_memory((char*)shrink_start, shrink_size, mtGC, false \/* executable *\/);\n+    os::uncommit_memory((char*)shrink_start, shrink_size, !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/x\/xMarkStackAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  os::commit_memory_or_exit((char*)_end, expand_size, false \/* executable *\/, \"Mark stack space\", mtGC);\n+  os::commit_memory_or_exit((char*)_end, expand_size, !ExecMem \/* executable *\/, \"Mark stack space\", mtGC);\n@@ -107,1 +107,1 @@\n-    os::uncommit_memory((char*)shrink_start, shrink_size, mtGC, false \/* executable *\/);\n+    os::uncommit_memory((char*)shrink_start, shrink_size, !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -592,1 +592,1 @@\n-    result = os::reserve_memory_aligned(size, Metaspace::reserve_alignment(), false, mtMetaspace);\n+    result = os::reserve_memory_aligned(size, Metaspace::reserve_alignment(), !ExecMem, mtClass);\n@@ -601,1 +601,1 @@\n-                                                      os::vm_page_size(), false, false, mtMetaspace);\n+                                                      os::vm_page_size(), false, false, mtClass);\n@@ -742,1 +742,1 @@\n-                         os::vm_page_size() \/* large *\/, mtMetaspace, (char*)base);\n+                         os::vm_page_size() \/* large *\/, mtClass, (char*)base);\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  if (os::commit_memory((char*)p, word_size * BytesPerWord, false, _rs.nmt_flag()) == false) {\n+  if (os::commit_memory((char*)p, word_size * BytesPerWord, !ExecMem, _rs.nmt_flag()) == false) {\n@@ -191,1 +191,1 @@\n-  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, _rs.nmt_flag()) == false) {\n+  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, !ExecMem, _rs.nmt_flag()) == false) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,2 @@\n-                             size_t page_size, MEMFLAGS flag,\n+                             size_t page_size,\n+                             MEMFLAGS flag,\n@@ -80,1 +81,1 @@\n-  initialize_members(base, size, alignment, page_size, special, executable);\n+  initialize_members(base, size, alignment, page_size, special, executable, flag);\n@@ -186,1 +187,1 @@\n-                                    const size_t alignment, const size_t page_size, bool exec) {\n+                                    const size_t alignment, const size_t page_size, bool exec, MEMFLAGS flag) {\n@@ -193,1 +194,1 @@\n-  char* base = os::reserve_memory_special(size, alignment, page_size, requested_address, exec);\n+  char* base = os::reserve_memory_special(size, alignment, page_size, requested_address, exec, flag);\n@@ -205,1 +206,1 @@\n-  initialize_members(nullptr, 0, 0, 0, false, false);\n+  initialize_members(nullptr, 0, 0, 0, false, false, mtNone);\n@@ -209,1 +210,1 @@\n-                                       size_t page_size, bool special, bool executable) {\n+                                       size_t page_size, bool special, bool executable, MEMFLAGS flag) {\n@@ -217,0 +218,1 @@\n+  _nmt_flag = flag;\n@@ -240,1 +242,1 @@\n-      initialize_members(base, size, alignment, os::vm_page_size(), true, executable);\n+      initialize_members(base, size, alignment, os::vm_page_size(), true, executable, _nmt_flag);\n@@ -253,1 +255,1 @@\n-      char* base = reserve_memory_special(requested_address, size, alignment, page_size, executable);\n+      char* base = reserve_memory_special(requested_address, size, alignment, page_size, executable, _nmt_flag);\n@@ -256,1 +258,1 @@\n-        initialize_members(base, size, alignment, page_size, true, executable);\n+        initialize_members(base, size, alignment, page_size, true, executable, _nmt_flag);\n@@ -272,1 +274,1 @@\n-    initialize_members(base, size, alignment, page_size, false, executable);\n+    initialize_members(base, size, alignment, page_size, false, executable, _nmt_flag);\n@@ -365,2 +367,1 @@\n-  space.initialize_members(base, size, alignment, page_size, special, executable);\n-  space.set_nmt_flag(flag);\n+  space.initialize_members(base, size, alignment, page_size, special, executable, flag);\n@@ -1017,1 +1018,1 @@\n-    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _nmt_flag, _executable)) {\n+    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _executable, _nmt_flag)) {\n@@ -1028,1 +1029,1 @@\n-    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _nmt_flag, _executable)) {\n+    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _executable, _nmt_flag)) {\n@@ -1039,1 +1040,1 @@\n-    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _nmt_flag, _executable)) {\n+    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _executable, _nmt_flag)) {\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -38,7 +38,7 @@\n-  char*  _base;\n-  size_t _size;\n-  size_t _noaccess_prefix;\n-  size_t _alignment;\n-  size_t _page_size;\n-  bool   _special;\n-  int    _fd_for_heap;\n+  char*    _base;\n+  size_t   _size;\n+  size_t   _noaccess_prefix;\n+  size_t   _alignment;\n+  size_t   _page_size;\n+  bool     _special;\n+  int      _fd_for_heap;\n@@ -62,1 +62,1 @@\n-                          size_t page_size, bool special, bool executable);\n+                          size_t page_size, bool special, bool executable, MEMFLAGS flag);\n@@ -71,2 +71,2 @@\n-  inline MEMFLAGS nmt_flag() { return _nmt_flag; }\n-  inline void set_nmt_flag(MEMFLAGS flag) { _nmt_flag = flag; }\n+  MEMFLAGS nmt_flag() { return _nmt_flag; }\n+  void set_nmt_flag(MEMFLAGS flag) { _nmt_flag = flag; }\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -460,1 +460,1 @@\n-  ReservedMemoryRegion  rgn(addr, size, NativeCallStack::empty_stack(), flag);\n+  ReservedMemoryRegion  rgn(addr, size, flag);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -306,0 +306,3 @@\n+  ReservedMemoryRegion(address base, size_t size, MEMFLAGS flag) :\n+    VirtualMemoryRegion(base, size), _stack(NativeCallStack::empty_stack()), _flag(flag) { }\n+\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  return os::attempt_reserve_memory_between((char*)from, (char*)to, size, alignment, aslr, mtMetaspace);\n+  return os::attempt_reserve_memory_between((char*)from, (char*)to, size, alignment, aslr, mtClass);\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2399,1 +2399,1 @@\n-    bad_address = os::reserve_memory(size, false, mtInternal);\n+    bad_address = os::reserve_memory(size, !ExecMem, mtInternal);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -699,1 +699,1 @@\n-  addr = (jlong)(uintptr_t)os::reserve_memory(size, false, mtTest);\n+  addr = (jlong)(uintptr_t)os::reserve_memory(size, !ExecMem, mtTest);\n@@ -704,1 +704,1 @@\n-  addr = (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size, false, mtTest);\n+  addr = (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size, !ExecMem, mtTest);\n@@ -713,1 +713,1 @@\n-  os::uncommit_memory((char *)(uintptr_t)addr, size, mtTest);\n+  os::uncommit_memory((char *)(uintptr_t)addr, size, !ExecMem, mtTest);\n@@ -1481,1 +1481,1 @@\n-  p = os::reserve_memory(os::vm_allocation_granularity(), false, mtTest);\n+  p = os::reserve_memory(os::vm_allocation_granularity(), !ExecMem, mtTest);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2085,1 +2085,1 @@\n-bool os::uncommit_memory(char* addr, size_t bytes, MEMFLAGS flag, bool executable) {\n+bool os::uncommit_memory(char* addr, size_t bytes, bool executable, MEMFLAGS flag) {\n@@ -2216,1 +2216,1 @@\n-                                 char* addr, bool executable) {\n+                                 char* addr, bool executable, MEMFLAGS flag) {\n@@ -2223,1 +2223,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC, flag);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,1 +474,1 @@\n-  static bool   uncommit_memory(char* addr, size_t bytes, MEMFLAGS flag, bool executable = false);\n+  static bool   uncommit_memory(char* addr, size_t bytes, bool executable, MEMFLAGS flag);\n@@ -543,1 +543,1 @@\n-                                       char* addr, bool executable);\n+                                       char* addr, bool executable, MEMFLAGS flag);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-    char* polling_page = os::reserve_memory(allocation_size, false, mtSafepoint);\n-    os::commit_memory_or_exit(polling_page, allocation_size, false, \"Unable to commit Safepoint polling page\", mtSafepoint);\n+    char* polling_page = os::reserve_memory(allocation_size, !ExecMem, mtSafepoint);\n+    os::commit_memory_or_exit(polling_page, allocation_size, !ExecMem, \"Unable to commit Safepoint polling page\", mtSafepoint);\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -712,1 +712,1 @@\n-  char* page = os::reserve_memory(os::vm_page_size(), false, mtInternal);\n+  char* page = os::reserve_memory(os::vm_page_size(), !ExecMem, mtInternal);\n@@ -714,1 +714,1 @@\n-    if (os::commit_memory(page, os::vm_page_size(), false, mtInternal) &&\n+    if (os::commit_memory(page, os::vm_page_size(), !ExecMem, mtInternal) &&\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize, false \/* executable *\/, mtTest);\n+      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize, !ExecMem \/* executable *\/, mtTest);\n@@ -103,1 +103,1 @@\n-    os::commit_memory((char*)_reserved, ZGranuleSize, false \/* executable *\/, mtGC);\n+    os::commit_memory((char*)_reserved, ZGranuleSize, !ExecMem \/* executable *\/, mtGC);\n@@ -114,1 +114,1 @@\n-      os::uncommit_memory((char*)_reserved, ZGranuleSize, mtGC, false \/* executable *\/);\n+      os::uncommit_memory((char*)_reserved, ZGranuleSize, !ExecMem, mtGC);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-  char* addr = os::reserve_memory(sz, false, mtTest);\n+  char* addr = os::reserve_memory(sz, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_locationprinting.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -408,1 +408,1 @@\n-    p = (address)os::reserve_memory(total_range_len, false, mtTest);\n+    p = (address)os::reserve_memory(total_range_len, !ExecMem, mtTest);\n@@ -442,1 +442,1 @@\n-  address p = (address)os::reserve_memory(total_range_len, false, mtTest);\n+  address p = (address)os::reserve_memory(total_range_len, !ExecMem, mtTest);\n@@ -447,1 +447,1 @@\n-      EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, false, mtTest));\n+      EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, !ExecMem, mtTest));\n@@ -509,1 +509,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len, false, mtTest);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len, !ExecMem, mtTest);\n@@ -532,1 +532,1 @@\n-  char* p = os::reserve_memory(4 * M, false, mtTest);\n+  char* p = os::reserve_memory(4 * M, !ExecMem, mtTest);\n@@ -567,1 +567,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len, false, mtTest);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len, !ExecMem, mtTest);\n@@ -608,1 +608,1 @@\n-  char* p = os::reserve_memory(1 * M, false, mtInternal);\n+  char* p = os::reserve_memory(1 * M, !ExecMem, mtInternal);\n@@ -610,1 +610,1 @@\n-    if (os::commit_memory(p, 1 * M, false, mtTest)) {\n+    if (os::commit_memory(p, 1 * M, !ExecMem, mtTest)) {\n@@ -632,1 +632,1 @@\n-    address p = (address)os::reserve_memory(total_range_len, false, mtTest);\n+    address p = (address)os::reserve_memory(total_range_len, !ExecMem, mtTest);\n@@ -937,1 +937,1 @@\n-  char* p1 = os::reserve_memory(M, false, mtTest);\n+  char* p1 = os::reserve_memory(M, !ExecMem, mtTest);\n@@ -939,1 +939,1 @@\n-  char* p2 = os::attempt_reserve_memory_at(p1, M, false, mtTest);\n+  char* p2 = os::attempt_reserve_memory_at(p1, M, !ExecMem, mtTest);\n@@ -947,1 +947,1 @@\n-    char* p1 = os::reserve_memory_aligned(lpsz, lpsz, false, mtTest);\n+    char* p1 = os::reserve_memory_aligned(lpsz, lpsz, !ExecMem, mtTest);\n@@ -949,1 +949,1 @@\n-    char* p2 = os::reserve_memory_special(lpsz, lpsz, lpsz, p1, false);\n+    char* p2 = os::reserve_memory_special(lpsz, lpsz, lpsz, p1, !ExecMem, mtTest);\n@@ -961,1 +961,1 @@\n-    char* p = os::attempt_reserve_memory_at((char*)0x1f00000, M, false, mtTest);\n+    char* p = os::attempt_reserve_memory_at((char*)0x1f00000, M, !ExecMem, mtTest);\n@@ -963,1 +963,1 @@\n-    p = os::attempt_reserve_memory_at((char*)((64 * G) + M), M, false, mtTest);\n+    p = os::attempt_reserve_memory_at((char*)((64 * G) + M), M, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-      return os::reserve_memory_special(bytes, alignment, page_size, req_addr, exec);\n+      return os::reserve_memory_special(bytes, alignment, page_size, req_addr, exec, mtTest);\n@@ -227,1 +227,1 @@\n-    char* addr = os::reserve_memory_special(size, alignment, page_size, nullptr, false);\n+    char* addr = os::reserve_memory_special(size, alignment, page_size, nullptr, !ExecMem, mtTest);\n@@ -284,1 +284,1 @@\n-        char* p = os::reserve_memory_special(size, alignment, lp, nullptr, false);\n+        char* p = os::reserve_memory_special(size, alignment, lp, nullptr, !ExecMem, mtTest);\n@@ -299,1 +299,1 @@\n-        char* p = os::reserve_memory_special(size, alignment, lp, req_addr, false);\n+        char* p = os::reserve_memory_special(size, alignment, lp, req_addr, !ExecMem, mtTest);\n@@ -314,1 +314,1 @@\n-        char* p = os::reserve_memory_special(size, alignment, lp, req_addr, false);\n+        char* p = os::reserve_memory_special(size, alignment, lp, req_addr, !ExecMem, mtTest);\n@@ -358,1 +358,1 @@\n-  char* const heap = os::reserve_memory(size, false, mtInternal);\n+  char* const heap = os::reserve_memory(size, !ExecMem, mtInternal);\n@@ -360,1 +360,1 @@\n-  EXPECT_TRUE(os::commit_memory(heap, size, false, mtInternal));\n+  EXPECT_TRUE(os::commit_memory(heap, size, !ExecMem, mtInternal));\n@@ -382,1 +382,1 @@\n-  EXPECT_TRUE(os::uncommit_memory(heap, size, mtInternal, false));\n+  EXPECT_TRUE(os::uncommit_memory(heap, size, !ExecMem, mtInternal));\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-        _base = os::attempt_reserve_memory_at((char*)candidate, _len, false, mtTest);\n+        _base = os::attempt_reserve_memory_at((char*)candidate, _len, !ExecMem, mtTest);\n@@ -169,2 +169,2 @@\n-    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size, false, mtTest);\n-    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size, false, mtTest);\n+    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size, !ExecMem, mtTest);\n+    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_reserve_between.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  char* result = os::reserve_memory_special(large_allocation_size, os::large_page_size(), os::large_page_size(), nullptr, false);\n+  char* result = os::reserve_memory_special(large_allocation_size, os::large_page_size(), os::large_page_size(), nullptr, !ExecMem, mtTest);\n@@ -80,1 +80,1 @@\n-  char* actual_location = os::reserve_memory_special(expected_allocation_size, os::large_page_size(), os::large_page_size(), expected_location, false);\n+  char* actual_location = os::reserve_memory_special(expected_allocation_size, os::large_page_size(), os::large_page_size(), expected_location, !ExecMem, mtTest);\n@@ -85,1 +85,1 @@\n-  actual_location = os::reserve_memory_special(expected_allocation_size, os::large_page_size(), os::large_page_size(), expected_location, false);\n+  actual_location = os::reserve_memory_special(expected_allocation_size, os::large_page_size(), os::large_page_size(), expected_location, !ExecMem, mtTest);\n@@ -93,1 +93,1 @@\n-  char* aligned_request = os::reserve_memory_special(new_large_size, alignment, os::large_page_size(), nullptr, false);\n+  char* aligned_request = os::reserve_memory_special(new_large_size, alignment, os::large_page_size(), nullptr, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_windows.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}