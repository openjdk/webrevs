{"files":[{"patch":"@@ -4699,2 +4699,0 @@\n-  MemTracker::record_virtual_memory_type((address)codebuf, mtInternal);\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-        os::free_memory((char*)start, size, page_size, mtGC);\n+        os::free_memory((char*)start, size, page_size, mtJavaHeap);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -278,1 +278,0 @@\n-    MemTracker::record_virtual_memory_type(verify_bitmap.base(), mtGC);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size(), mtMetaspace);\n+    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size(), mtTest);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  if (os::commit_memory((char*)p, word_size * BytesPerWord, !ExecMem, mtMetaspace) == false) {\n+  if (os::commit_memory((char*)p, word_size * BytesPerWord, !ExecMem, _rs.nmt_flag()) == false) {\n@@ -191,1 +191,1 @@\n-  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, !ExecMem, mtMetaspace) == false) {\n+  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, !ExecMem, _rs.nmt_flag()) == false) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    _alignment(0), _fd_for_heap(-1), _special(false), _executable(false), _nmt_flag(mtNone) {\n+    _alignment(0), _fd_for_heap(-1), _special(false), _executable(false), _flag(mtNone) {\n@@ -48,1 +48,1 @@\n-ReservedSpace::ReservedSpace(size_t size, MEMFLAGS flag) : _fd_for_heap(-1), _nmt_flag(flag) {\n+ReservedSpace::ReservedSpace(size_t size, MEMFLAGS flag) : _fd_for_heap(-1), _flag(flag) {\n@@ -57,1 +57,1 @@\n-ReservedSpace::ReservedSpace(size_t size, size_t preferred_page_size, MEMFLAGS flag) : _fd_for_heap(-1), _nmt_flag(flag) {\n+ReservedSpace::ReservedSpace(size_t size, size_t preferred_page_size, MEMFLAGS flag) : _fd_for_heap(-1), _flag(flag) {\n@@ -73,1 +73,1 @@\n-                             char* requested_address) : _fd_for_heap(-1), _nmt_flag(flag) {\n+                             char* requested_address) : _fd_for_heap(-1), _flag(flag) {\n@@ -78,1 +78,1 @@\n-                             bool special, bool executable, MEMFLAGS flag) : _fd_for_heap(-1), _nmt_flag(flag) {\n+                             bool special, bool executable, MEMFLAGS flag) : _fd_for_heap(-1), _flag(flag) {\n@@ -218,1 +218,1 @@\n-  _nmt_flag = flag;\n+  _flag = flag;\n@@ -240,1 +240,1 @@\n-    char* base = reserve_memory(requested_address, size, alignment, _fd_for_heap, executable, _nmt_flag);\n+    char* base = reserve_memory(requested_address, size, alignment, _fd_for_heap, executable, _flag);\n@@ -242,1 +242,1 @@\n-      initialize_members(base, size, alignment, os::vm_page_size(), true, executable, _nmt_flag);\n+      initialize_members(base, size, alignment, os::vm_page_size(), true, executable, _flag);\n@@ -255,1 +255,1 @@\n-      char* base = reserve_memory_special(requested_address, size, alignment, page_size, executable, _nmt_flag);\n+      char* base = reserve_memory_special(requested_address, size, alignment, page_size, executable, _flag);\n@@ -258,1 +258,1 @@\n-        initialize_members(base, size, alignment, page_size, true, executable, _nmt_flag);\n+        initialize_members(base, size, alignment, page_size, true, executable, _flag);\n@@ -271,1 +271,1 @@\n-  char* base = reserve_memory(requested_address, size, alignment, -1, executable, _nmt_flag);\n+  char* base = reserve_memory(requested_address, size, alignment, -1, executable, _flag);\n@@ -274,1 +274,1 @@\n-    initialize_members(base, size, alignment, page_size, false, executable, _nmt_flag);\n+    initialize_members(base, size, alignment, page_size, false, executable, _flag);\n@@ -296,2 +296,2 @@\n-  \/\/ _nmt_flag is cleared in clear_members in above call\n-  _nmt_flag = flag;\n+  \/\/ _flag is cleared in clear_members in above call\n+  _flag = flag;\n@@ -622,2 +622,2 @@\n-  \/\/ _nmt_flag is used internally by initialize_compressed_heap\n-  _nmt_flag = mtJavaHeap;\n+  \/\/ _flag is used internally by initialize_compressed_heap\n+  _flag = mtJavaHeap;\n@@ -695,1 +695,1 @@\n-  _nmt_flag               = mtNone;\n+  _flag                   = mtNone;\n@@ -717,1 +717,1 @@\n-  _nmt_flag = rs.nmt_flag();\n+  _flag = rs.nmt_flag();\n@@ -776,1 +776,1 @@\n-  _nmt_flag               = mtNone;\n+  _flag                   = mtNone;\n@@ -932,1 +932,1 @@\n-    if (!commit_expanded(lower_high(), lower_needs, _lower_alignment, pre_touch, _executable, _nmt_flag)) {\n+    if (!commit_expanded(lower_high(), lower_needs, _lower_alignment, pre_touch, _executable, _flag)) {\n@@ -940,1 +940,1 @@\n-    if (!commit_expanded(middle_high(), middle_needs, _middle_alignment, pre_touch, _executable, _nmt_flag)) {\n+    if (!commit_expanded(middle_high(), middle_needs, _middle_alignment, pre_touch, _executable, _flag)) {\n@@ -948,1 +948,1 @@\n-    if (!commit_expanded(upper_high(), upper_needs, _upper_alignment, pre_touch, _executable, _nmt_flag)) {\n+    if (!commit_expanded(upper_high(), upper_needs, _upper_alignment, pre_touch, _executable, _flag)) {\n@@ -1020,1 +1020,1 @@\n-    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _executable, _nmt_flag)) {\n+    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _executable, _flag)) {\n@@ -1031,1 +1031,1 @@\n-    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _executable, _nmt_flag)) {\n+    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _executable, _flag)) {\n@@ -1042,1 +1042,1 @@\n-    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _executable, _nmt_flag)) {\n+    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _executable, _flag)) {\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  MEMFLAGS _nmt_flag;\n+  MEMFLAGS _flag;\n@@ -71,1 +71,1 @@\n-  MEMFLAGS nmt_flag() { return _nmt_flag; }\n+  MEMFLAGS nmt_flag() const { return _flag; }\n@@ -180,1 +180,1 @@\n-  MEMFLAGS _nmt_flag;\n+  MEMFLAGS _flag;\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -460,1 +460,1 @@\n-  ReservedMemoryRegion  rgn(addr, size, flag);\n+  ReservedMemoryRegion  rgn(addr, size);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}