{"files":[{"patch":"@@ -1893,1 +1893,1 @@\n-char* os::pd_reserve_memory(size_t bytes, bool exec) {\n+char* os::pd_reserve_memory(size_t bytes, bool exec, MEMFLAGS flag) {\n@@ -2042,1 +2042,1 @@\n-char* os::pd_reserve_memory_special(size_t bytes, size_t alignment, size_t page_size, char* req_addr, bool exec) {\n+char* os::pd_reserve_memory_special(size_t bytes, size_t alignment, size_t page_size, char* req_addr, bool exec, MEMFLAGS flag) {\n@@ -2061,1 +2061,1 @@\n-char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc, MEMFLAGS flag) {\n@@ -2079,1 +2079,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec, MEMFLAGS flag) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1812,1 +1812,1 @@\n-char* os::pd_reserve_memory(size_t bytes, bool exec) {\n+char* os::pd_reserve_memory(size_t bytes, bool exec, MEMFLAGS flag) {\n@@ -1872,1 +1872,1 @@\n-char* os::pd_reserve_memory_special(size_t bytes, size_t alignment, size_t page_size, char* req_addr, bool exec) {\n+char* os::pd_reserve_memory_special(size_t bytes, size_t alignment, size_t page_size, char* req_addr, bool exec, MEMFLAGS flag) {\n@@ -1891,1 +1891,1 @@\n-char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc, MEMFLAGS flag) {\n@@ -1893,1 +1893,1 @@\n-  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes, !ExecMem);\n+  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes, !ExecMem, flag);\n@@ -1905,1 +1905,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec, MEMFLAGS flag) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3767,1 +3767,1 @@\n-char* os::pd_reserve_memory(size_t bytes, bool exec) {\n+char* os::pd_reserve_memory(size_t bytes, bool exec, MEMFLAGS flag) {\n@@ -4224,1 +4224,1 @@\n-                                    char* req_addr, bool exec) {\n+                                    char* req_addr, bool exec, MEMFLAGS flag) {\n@@ -4259,1 +4259,1 @@\n-char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc, MEMFLAGS flag) {\n@@ -4261,1 +4261,1 @@\n-  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes, !ExecMem);\n+  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes, !ExecMem, flag);\n@@ -4273,1 +4273,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec, MEMFLAGS flag) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2055,0 +2055,1 @@\n+                        MEMFLAGS flag,\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3114,0 +3114,1 @@\n+                                         MEMFLAGS nmt_flag,\n@@ -3137,1 +3138,1 @@\n-  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC, mtInternal);\n+  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC, nmt_flag);\n@@ -3198,1 +3199,1 @@\n-                                                  bytes_to_release, CALLER_PC, mtNone);\n+                                                  bytes_to_release, CALLER_PC, nmt_flag);\n@@ -3216,1 +3217,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC, nmt_flag);\n@@ -3218,1 +3219,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC, mtNone);\n+    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC, nmt_flag);\n@@ -3346,1 +3347,1 @@\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc, MEMFLAGS flag = mtNone) {\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc, MEMFLAGS flag) {\n@@ -3387,1 +3388,1 @@\n-  return map_or_reserve_memory_aligned(size, alignment, -1 \/* file_desc *\/);\n+  return map_or_reserve_memory_aligned(size, alignment, -1 \/* file_desc *\/, flag);\n@@ -3394,2 +3395,2 @@\n-char* os::pd_reserve_memory(size_t bytes, bool exec) {\n-  return pd_attempt_reserve_memory_at(nullptr \/* addr *\/, bytes, exec);\n+char* os::pd_reserve_memory(size_t bytes, bool exec, MEMFLAGS flag) {\n+  return pd_attempt_reserve_memory_at(nullptr \/* addr *\/, bytes, exec, flag);\n@@ -3400,1 +3401,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* addr, size_t bytes, bool exec) {\n+char* os::pd_attempt_reserve_memory_at(char* addr, size_t bytes, bool exec, MEMFLAGS nmt_flag) {\n@@ -3415,1 +3416,1 @@\n-    res = allocate_pages_individually(bytes, addr, MEM_RESERVE, PAGE_READWRITE);\n+    res = allocate_pages_individually(bytes, addr, MEM_RESERVE, PAGE_READWRITE, nmt_flag);\n@@ -3436,1 +3437,1 @@\n-char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc, MEMFLAGS flag) {\n@@ -3452,1 +3453,1 @@\n-static char* reserve_large_pages_individually(size_t size, char* req_addr, bool exec) {\n+static char* reserve_large_pages_individually(size_t size, char* req_addr, bool exec, MEMFLAGS nmt_flag) {\n@@ -3458,1 +3459,1 @@\n-  char * p_buf = allocate_pages_individually(size, req_addr, flags, prot, LargePagesIndividualAllocationInjectError);\n+  char * p_buf = allocate_pages_individually(size, req_addr, flags, prot, nmt_flag, LargePagesIndividualAllocationInjectError);\n@@ -3482,1 +3483,1 @@\n-static char* reserve_large_pages(size_t size, char* req_addr, bool exec) {\n+static char* reserve_large_pages(size_t size, char* req_addr, bool exec, MEMFLAGS flag) {\n@@ -3487,1 +3488,1 @@\n-    return reserve_large_pages_individually(size, req_addr, exec);\n+    return reserve_large_pages_individually(size, req_addr, exec, flag);\n@@ -3504,1 +3505,1 @@\n-static char* reserve_large_pages_aligned(size_t size, size_t alignment, bool exec) {\n+static char* reserve_large_pages_aligned(size_t size, size_t alignment, bool exec, MEMFLAGS flag) {\n@@ -3517,1 +3518,1 @@\n-    aligned_address = reserve_large_pages(size, aligned_address, exec);\n+    aligned_address = reserve_large_pages(size, aligned_address, exec, flag);\n@@ -3530,1 +3531,1 @@\n-                                    bool exec) {\n+                                    bool exec, MEMFLAGS flag) {\n@@ -3546,1 +3547,1 @@\n-    return reserve_large_pages_aligned(bytes, alignment, exec);\n+    return reserve_large_pages_aligned(bytes, alignment, exec, flag);\n@@ -3550,1 +3551,1 @@\n-  return reserve_large_pages(bytes, addr, exec);\n+  return reserve_large_pages(bytes, addr, exec, flag);\n@@ -3771,1 +3772,1 @@\n-                          \"cannot commit protection page\", mtNone);\n+                          \"cannot commit protection page\", mtInternal);\n@@ -5066,1 +5067,3 @@\n-                        char *addr, size_t bytes, bool read_only,\n+                        char *addr, size_t bytes,\n+                        MEMFLAGS flag,\n+                        bool read_only,\n@@ -5107,1 +5110,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC, flag);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":26,"deletions":23,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1697,1 +1697,1 @@\n-                        bool allow_exec, MEMFLAGS flags = mtNone) {\n+                        bool allow_exec, MEMFLAGS flags) {\n@@ -1699,0 +1699,1 @@\n+                             flags,\n@@ -1700,1 +1701,1 @@\n-                             allow_exec, flags);\n+                             allow_exec);\n@@ -1725,1 +1726,2 @@\n-                              addr, size, false \/* !read_only *\/,\n+                              addr, size, mtClassShared,\n+                              false \/* !read_only *\/,\n@@ -2154,0 +2156,1 @@\n+  \/\/ So we pass the mtJavaHeap to tell MemTracker the type of the already tracked memory.\n@@ -2157,1 +2160,1 @@\n-                          r->allow_exec());\n+                          r->allow_exec(), mtJavaHeap);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,1 +243,1 @@\n-  _base = os::map_memory(_fd, filename, 0, nullptr, _size, true, false);\n+  _base = os::map_memory(_fd, filename, 0, nullptr, _size, mtInternal, true, false);\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,1 +107,2 @@\n-                      os::vm_page_size(), mtTracing);\n+                      os::vm_page_size(),\n+                      mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size(), mtTest);\n+    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size(), mtMetaspace);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  if (os::commit_memory((char*)p, word_size * BytesPerWord, !ExecMem, _rs.nmt_flag()) == false) {\n+  if (os::commit_memory((char*)p, word_size * BytesPerWord, !ExecMem, mtMetaspace) == false) {\n@@ -191,1 +191,1 @@\n-  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, !ExecMem, _rs.nmt_flag()) == false) {\n+  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, !ExecMem, mtMetaspace) == false) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    _alignment(0), _special(false), _fd_for_heap(-1), _nmt_flag(mtNone), _executable(false) {\n+    _alignment(0), _special(false), _fd_for_heap(-1), _executable(false), _nmt_flag(mtNone) {\n@@ -87,1 +87,1 @@\n-    return os::attempt_map_memory_to_file_at(base, size, fd);\n+    return os::attempt_map_memory_to_file_at(base, size, fd, flag);\n@@ -95,1 +95,1 @@\n-    return os::map_memory_to_file(size, fd);\n+    return os::map_memory_to_file(size, fd, flag);\n@@ -213,0 +213,1 @@\n+  _noaccess_prefix = 0;\n@@ -217,1 +218,0 @@\n-  _noaccess_prefix = 0;\n@@ -295,1 +295,3 @@\n-  set_nmt_flag(flag);\n+\n+  \/\/ _nmt_flag is cleared in clear_members in above call\n+  _nmt_flag = flag;\n@@ -611,1 +613,1 @@\n-      initialize(size + noaccess_prefix, alignment, page_size, nullptr, false, nmt_flag());\n+      initialize(size + noaccess_prefix, alignment, page_size, nullptr, !ExecMem, nmt_flag());\n@@ -617,1 +619,0 @@\n-  set_nmt_flag(mtJavaHeap);\n@@ -621,0 +622,2 @@\n+  \/\/ _nmt_flag is used internally by initialize_compressed_heap\n+  _nmt_flag = mtJavaHeap;\n@@ -656,3 +659,0 @@\n-  if (base() != nullptr) {\n-    MemTracker::record_virtual_memory_type((address)base(), mtJavaHeap);\n-  }\n@@ -674,1 +674,0 @@\n-  set_nmt_flag(mtCode);\n@@ -710,1 +709,1 @@\n-  _nmt_flag = rs.nmt_flag();\n+\n@@ -720,0 +719,2 @@\n+  _nmt_flag = rs.nmt_flag();\n+\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+  bool     _executable;\n@@ -47,1 +48,0 @@\n-  bool   _executable;\n@@ -72,1 +72,0 @@\n-  void set_nmt_flag(MEMFLAGS flag) { _nmt_flag = flag; }\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-    const NativeCallStack& stack, MEMFLAGS flag = mtNone) {\n+    const NativeCallStack& stack, MEMFLAGS flag) {\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-    MEMFLAGS flag = mtNone) :\n+    MEMFLAGS flag) :\n@@ -385,1 +385,1 @@\n-  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag = mtNone);\n+  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1817,1 +1817,1 @@\n-  char* result = pd_reserve_memory(bytes, executable);\n+  char* result = pd_reserve_memory(bytes, executable, flags);\n@@ -1828,1 +1828,1 @@\n-  char* result = SimulateFullAddressSpace ? nullptr : pd_attempt_reserve_memory_at(addr, bytes, executable);\n+  char* result = SimulateFullAddressSpace ? nullptr : pd_attempt_reserve_memory_at(addr, bytes, executable, flag);\n@@ -2013,1 +2013,1 @@\n-    result = SimulateFullAddressSpace ? nullptr : os::pd_attempt_reserve_memory_at(candidate, bytes, false);\n+    result = SimulateFullAddressSpace ? nullptr : os::pd_attempt_reserve_memory_at(candidate, bytes, !ExecMem, flag);\n@@ -2176,1 +2176,1 @@\n-  char* result = pd_attempt_map_memory_to_file_at(addr, bytes, file_desc);\n+  char* result = pd_attempt_map_memory_to_file_at(addr, bytes, file_desc, flag);\n@@ -2184,3 +2184,5 @@\n-                           char *addr, size_t bytes, bool read_only,\n-                           bool allow_exec, MEMFLAGS flags) {\n-  char* result = pd_map_memory(fd, file_name, file_offset, addr, bytes, read_only, allow_exec);\n+                     char *addr, size_t bytes,\n+                     MEMFLAGS flags,\n+                     bool read_only,\n+                     bool allow_exec) {\n+  char* result = pd_map_memory(fd, file_name, file_offset, addr, bytes, flags, read_only, allow_exec);\n@@ -2220,1 +2222,1 @@\n-  char* result = pd_reserve_memory_special(size, alignment, page_size, addr, executable);\n+  char* result = pd_reserve_memory_special(size, alignment, page_size, addr, executable, flag);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-  static char*  pd_reserve_memory(size_t bytes, bool executable);\n+  static char*  pd_reserve_memory(size_t bytes, bool executable, MEMFLAGS flag);\n@@ -213,1 +213,1 @@\n-  static char*  pd_attempt_reserve_memory_at(char* addr, size_t bytes, bool executable);\n+  static char*  pd_attempt_reserve_memory_at(char* addr, size_t bytes, bool executable, MEMFLAGS flag);\n@@ -228,1 +228,1 @@\n-  static char*  pd_attempt_map_memory_to_file_at(char* addr, size_t bytes, int file_desc);\n+  static char*  pd_attempt_map_memory_to_file_at(char* addr, size_t bytes, int file_desc, MEMFLAGS flag);\n@@ -231,1 +231,3 @@\n-                           char *addr, size_t bytes, bool read_only = false,\n+                           char *addr, size_t bytes,\n+                           MEMFLAGS flag,\n+                           bool read_only = false,\n@@ -242,2 +244,1 @@\n-\n-                                          char* addr, bool executable);\n+                                          char* addr, bool executable, MEMFLAGS flag);\n@@ -510,1 +511,1 @@\n-  static char* map_memory_to_file(size_t size, int fd, MEMFLAGS flag = mtNone);\n+  static char* map_memory_to_file(size_t size, int fd, MEMFLAGS flag);\n@@ -513,1 +514,1 @@\n-  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MEMFLAGS flag = mtNone);\n+  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MEMFLAGS flag);\n@@ -518,2 +519,4 @@\n-                           char *addr, size_t bytes, bool read_only = false,\n-                           bool allow_exec = false, MEMFLAGS flags = mtNone);\n+                           char *addr, size_t bytes,\n+                           MEMFLAGS flag,\n+                           bool read_only = false,\n+                           bool allow_exec = false);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  ReservedSpace bot_rs(G1BlockOffsetTable::compute_size(heap.word_size()), mtGC);\n+  ReservedSpace bot_rs(G1BlockOffsetTable::compute_size(heap.word_size()), mtTest);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    os::commit_memory((char*)_reserved, ZGranuleSize, !ExecMem \/* executable *\/, mtGC);\n+    os::commit_memory((char*)_reserved, ZGranuleSize, !ExecMem \/* executable *\/, mtTest);\n@@ -114,1 +114,1 @@\n-      os::uncommit_memory((char*)_reserved, ZGranuleSize, !ExecMem, mtGC);\n+      os::uncommit_memory((char*)_reserved, ZGranuleSize, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -223,1 +223,2 @@\n-                             os::vm_page_size(), mtTest);\n+                             os::vm_page_size(),\n+                             mtTest);\n","filename":"test\/hotspot\/gtest\/memory\/test_virtualspace.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}