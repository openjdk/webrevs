{"files":[{"patch":"@@ -2990,1 +2990,4 @@\n-        return StringConcatHelper.simpleConcat(this, str);\n+        if (isEmpty()) {\n+            return str;\n+        }\n+        return StringConcatHelper.doConcat(this, str);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -324,9 +324,18 @@\n-        \/\/ start \"mixing\" in length and coder or arguments, order is not\n-        \/\/ important\n-        long indexCoder = mix(initialCoder(), s1);\n-        indexCoder = mix(indexCoder, s2);\n-        byte[] buf = newArray(indexCoder);\n-        \/\/ prepend each argument in reverse order, since we prepending\n-        \/\/ from the end of the byte array\n-        indexCoder = prepend(indexCoder, buf, s2, s1);\n-        return newString(buf, indexCoder);\n+        return doConcat(s1, s2);\n+    }\n+\n+    \/**\n+     * Perform a simple concatenation between two non-empty strings.\n+     *\n+     * @param s1         first argument\n+     * @param s2         second argument\n+     * @return String    resulting string\n+     *\/\n+    @ForceInline\n+    static String doConcat(String s1, String s2) {\n+        byte coder = (byte) (s1.coder() | s2.coder());\n+        int newLength = (s1.length() + s2.length()) << coder;\n+        byte[] buf = newArray(newLength);\n+        s1.getBytes(buf, 0, coder);\n+        s2.getBytes(buf, s1.length(), coder);\n+        return new String(buf, coder);\n@@ -398,5 +407,13 @@\n-        int index = (int)indexCoder;\n-        if (indexCoder >= UTF16) {\n-            index <<= 1;\n-        }\n-        if (index < 0) {\n+        byte coder = (byte)(indexCoder >> 32);\n+        int index = ((int)indexCoder) << coder;\n+        return newArray(index);\n+    }\n+\n+    \/**\n+     * Allocates an uninitialized byte array based on the length\n+     * @param length\n+     * @return the newly allocated byte array\n+     *\/\n+    @ForceInline\n+    static byte[] newArray(int length) {\n+        if (length < 0) {\n@@ -405,1 +422,1 @@\n-        return (byte[]) UNSAFE.allocateUninitializedArray(byte.class, index);\n+        return (byte[]) UNSAFE.allocateUninitializedArray(byte.class, length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":32,"deletions":15,"binary":false,"changes":47,"status":"modified"}]}