{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -371,10 +371,6 @@\n-        \/\/ start \"mixing\" in length and coder or arguments, order is not\n-        \/\/ important\n-        long indexCoder = mix(initialCoder(), s1);\n-        indexCoder = mix(indexCoder, s2);\n-        byte[] buf = newArray(indexCoder);\n-        \/\/ prepend each argument in reverse order, since we prepending\n-        \/\/ from the end of the byte array\n-        indexCoder = prepend(indexCoder, buf, s2);\n-        indexCoder = prepend(indexCoder, buf, s1);\n-        return newString(buf, indexCoder);\n+        byte coder = (byte) (s1.coder() | s2.coder());\n+        int newLength = (s1.length() + s2.length()) << coder;\n+        byte[] buf = newArray(newLength);\n+        s1.getBytes(buf, 0, coder);\n+        s2.getBytes(buf, s1.length(), coder);\n+        return new String(buf, coder);\n@@ -448,1 +444,11 @@\n-        if (index < 0) {\n+        return newArray(index);\n+    }\n+\n+    \/**\n+     * Allocates an uninitialized byte array based on the length\n+     * @param length\n+     * @return the newly allocated byte array\n+     *\/\n+    @ForceInline\n+    static byte[] newArray(int length) {\n+        if (length < 0) {\n@@ -451,1 +457,1 @@\n-        return (byte[]) UNSAFE.allocateUninitializedArray(byte.class, index);\n+        return (byte[]) UNSAFE.allocateUninitializedArray(byte.class, length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"}]}