{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -236,5 +236,2 @@\n-     * Returns the attribute's value from this exchange's\n-     * {@linkplain HttpContext#getAttributes() context attributes}.\n-     *\n-     * @apiNote {@link Filter} modules may store arbitrary objects as attributes through\n-     * {@code HttpExchange} instances as an out-of-band communication mechanism. Other filters\n+     * {@link Filter} modules may store arbitrary objects with {@code HttpExchange}\n+     * instances as an out-of-band communication mechanism. Other filters\n@@ -247,2 +244,1 @@\n-     * @return the attribute's value or {@code null} if either the attribute isn't set\n-     *         or the attribute value is {@code null}\n+     * @return the attribute object, or {@code null} if it does not exist\n@@ -254,5 +250,2 @@\n-     * Sets an attribute with the given {@code name} and {@code value} in this exchange's\n-     * {@linkplain HttpContext#getAttributes() context attributes}.\n-     *\n-     * @apiNote {@link Filter} modules may store arbitrary objects as attributes through\n-     * {@code HttpExchange} instances as an out-of-band communication mechanism. Other filters\n+     * {@link Filter} modules may store arbitrary objects with {@code HttpExchange}\n+     * instances as an out-of-band communication mechanism. Other filters\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpExchange.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8288109 8235786\n+ * @bug 8288109\n@@ -32,2 +32,0 @@\n-import com.sun.net.httpserver.Filter;\n-import com.sun.net.httpserver.HttpContext;\n@@ -38,1 +36,0 @@\n-import org.junit.jupiter.api.AfterAll;\n@@ -59,5 +56,3 @@\n-    private static final InetAddress LOOPBACK_ADDR = InetAddress.getLoopbackAddress();\n-    private static final boolean ENABLE_LOGGING = true;\n-    private static final Logger logger = Logger.getLogger(\"com.sun.net.httpserver\");\n-\n-    private static HttpServer server;\n+    static final InetAddress LOOPBACK_ADDR = InetAddress.getLoopbackAddress();\n+    static final boolean ENABLE_LOGGING = true;\n+    static final Logger logger = Logger.getLogger(\"com.sun.net.httpserver\");\n@@ -66,1 +61,1 @@\n-    public static void setup() throws Exception {\n+    public static void setup() {\n@@ -73,14 +68,0 @@\n-        server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 10);\n-        server.createContext(\"\/normal\", new AttribHandler());\n-        final HttpContext filteredCtx = server.createContext(\"\/filtered\", new AttribHandler());\n-        filteredCtx.getFilters().add(new AttributeAddingFilter());\n-        server.start();\n-        System.out.println(\"Server started at \" + server.getAddress());\n-    }\n-\n-    @AfterAll\n-    public static void afterAll() {\n-        if (server != null) {\n-            System.out.println(\"Stopping server \" + server.getAddress());\n-            server.stop(0);\n-        }\n@@ -89,3 +70,0 @@\n-    \/*\n-     * Verifies that HttpExchange.setAttribute() allows for null value.\n-     *\/\n@@ -93,3 +71,8 @@\n-    public void testNullAttributeValue() throws Exception {\n-        try (var client = HttpClient.newBuilder().proxy(NO_PROXY).build()) {\n-            var request = HttpRequest.newBuilder(uri(server, \"\/normal\", null)).build();\n+    public void testExchangeAttributes() throws Exception {\n+        var handler = new AttribHandler();\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR,0), 10);\n+        server.createContext(\"\/\", handler);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n@@ -98,30 +81,2 @@\n-        }\n-    }\n-\n-    \/*\n-     * Verifies that an attribute set on one exchange is accessible to another exchange that\n-     * belongs to the same HttpContext.\n-     *\/\n-    @Test\n-    public void testSharedAttribute() throws Exception {\n-        try (var client = HttpClient.newBuilder().proxy(NO_PROXY).build()) {\n-            final var firstReq = HttpRequest.newBuilder(uri(server, \"\/filtered\", \"firstreq\"))\n-                    .build();\n-            System.out.println(\"issuing request \" + firstReq);\n-            final var firstResp = client.send(firstReq, HttpResponse.BodyHandlers.ofString());\n-            assertEquals(200, firstResp.statusCode());\n-\n-            \/\/ issue the second request\n-            final var secondReq = HttpRequest.newBuilder(uri(server, \"\/filtered\", \"secondreq\"))\n-                    .build();\n-            System.out.println(\"issuing request \" + secondReq);\n-            final var secondResp = client.send(secondReq, HttpResponse.BodyHandlers.ofString());\n-            assertEquals(200, secondResp.statusCode());\n-\n-            \/\/ verify that the filter was invoked for both the requests. the filter internally\n-            \/\/ does the setAttribute() and getAttribute() and asserts that the attribute value\n-            \/\/ set by the first exchange was available through the second exchange.\n-            assertTrue(AttributeAddingFilter.filteredFirstReq, \"Filter wasn't invoked for \"\n-                    + firstReq.uri());\n-            assertTrue(AttributeAddingFilter.filteredSecondReq, \"Filter wasn't invoked for \"\n-                    + secondReq.uri());\n+        } finally {\n+            server.stop(0);\n@@ -133,1 +88,1 @@\n-    static URI uri(HttpServer server, String path, String query) throws URISyntaxException {\n+    static URI uri(HttpServer server, String path) throws URISyntaxException {\n@@ -139,1 +94,0 @@\n-                .query(query)\n@@ -161,50 +115,0 @@\n-\n-    private static final class AttributeAddingFilter extends Filter {\n-\n-        private static final String ATTR_NAME =\"foo-bar\";\n-        private static final String ATTR_VAL =\"hello-world\";\n-        private static volatile boolean filteredFirstReq;\n-        private static volatile boolean filteredSecondReq;\n-\n-        @Override\n-        public void doFilter(final HttpExchange exchange, final Chain chain) throws IOException {\n-            if (exchange.getRequestURI().getQuery().contains(\"firstreq\")) {\n-                filteredFirstReq = true;\n-                \/\/ add a request attribute through the exchange, for this first request\n-                \/\/ and at the same time verify that the attribute doesn't already exist\n-                final Object attrVal = exchange.getAttribute(ATTR_NAME);\n-                if (attrVal != null) {\n-                    throw new IOException(\"attribute \" + ATTR_NAME + \" with value: \" + attrVal\n-                            + \" unexpectedly present in exchange: \" + exchange.getRequestURI());\n-                }\n-                \/\/ set the value\n-                exchange.setAttribute(ATTR_NAME, ATTR_VAL);\n-                System.out.println(exchange.getRequestURI() + \" set attribute \"\n-                        + ATTR_NAME + \"=\" + ATTR_VAL);\n-            } else if (exchange.getRequestURI().getQuery().contains(\"secondreq\")) {\n-                filteredSecondReq = true;\n-                \/\/ verify the attribute is already set and the value is the expected one.\n-                final Object attrVal = exchange.getAttribute(ATTR_NAME);\n-                if (attrVal == null) {\n-                    throw new IOException(\"attribute \" + ATTR_NAME + \" is missing in exchange: \"\n-                            + exchange.getRequestURI());\n-                }\n-                if (!ATTR_VAL.equals(attrVal)) {\n-                    throw new IOException(\"unexpected value: \" + attrVal + \" for attribute \"\n-                            + ATTR_NAME + \" in exchange: \" + exchange.getRequestURI());\n-                }\n-                System.out.println(exchange.getRequestURI() + \" found attribute \"\n-                        + ATTR_NAME + \"=\" + attrVal);\n-            } else {\n-                \/\/ unexpected request\n-                throw new IOException(\"unexpected request \" + exchange.getRequestURI());\n-            }\n-            \/\/ let the request proceed\n-            chain.doFilter(exchange);\n-        }\n-\n-        @Override\n-        public String description() {\n-            return \"AttributeAddingFilter\";\n-        }\n-    }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/ExchangeAttributeTest.java","additions":17,"deletions":113,"binary":false,"changes":130,"status":"modified"}]}