{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,1 +146,1 @@\n-        Thread snippetThread = new Thread(execThreadGroup, () -> {\n+        Thread snippetThread = new Thread(execThreadGroup, decorateExecution(() -> {\n@@ -160,1 +160,1 @@\n-        });\n+        }));\n@@ -227,0 +227,14 @@\n+    \/**\n+     * Decorate the task that executes the snippet within the execution thread.\n+     *\n+     * <p>\n+     * Subclasses may configure thread-specific context for snippet execution here.\n+     * The implementation in {@link LocalExecutionControl} just returns {@code task}.\n+     *\n+     * @param task the task to be performed in the snippet execution thread\n+     * @return the possibly decorated task\n+     * @since 25\n+     *\/\n+    protected Runnable decorateExecution(Runnable task) {\n+        return task;\n+    }\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8353487\n+ * @summary Verify local execution engine supports decorating the snippet execution\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask LocalExecutionTestSupport\n+ * @run testng\/othervm LocalDecorateExecutionTest\n+ *\/\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.nio.file.Files;\n+\n+import jdk.jshell.execution.LocalExecutionControl;\n+import jdk.jshell.execution.LocalExecutionControlProvider;\n+import jdk.jshell.spi.ExecutionControl;\n+import jdk.jshell.spi.ExecutionControlProvider;\n+import jdk.jshell.spi.ExecutionEnv;\n+\n+import java.util.Locale;\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.BeforeTest;\n+\n+public class LocalDecorateExecutionTest extends LocalExecutionTestSupport {\n+\n+    @BeforeTest\n+    public void installExecutionControlProvider() throws Exception {\n+        Path dir = createSubdir(classesDir, \"META-INF\/services\");\n+        Files.write(dir.resolve(ExecutionControlProvider.class.getName()),\n+          Arrays.asList(LocalDecorateExecutionControlProvider.class.getName()));\n+    }\n+\n+    @Override\n+    public void test(Locale locale, boolean defaultStartUp, String[] args, String startMsg, ReplTest... tests) {\n+\n+        \/\/ Make test classes visible to the context class loader\n+        final URL classesDirURL;\n+        try {\n+            classesDirURL = classesDir.toUri().toURL();\n+        } catch (MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+        Thread.currentThread().setContextClassLoader(new URLClassLoader(new URL[] { classesDirURL }));\n+\n+        \/\/ Proceed\n+        super.test(locale, defaultStartUp, args, startMsg, tests);\n+    }\n+\n+    @Test\n+    public void verifyDecoration() throws Exception {\n+\n+        \/\/ Configure an execution control that put \"foobar\" in context during snippet execution\n+        String spec = String.format(\"%s:%s(%s)\",\n+          LocalDecorateExecutionControlProvider.NAME, LocalDecorateExecutionControlProvider.CONTEXT_PARAM, \"foobar\");\n+\n+        \/\/ Verify the snippet can access that thread-local context\n+        test(new String[] { \"--no-startup\", \"--execution\", spec },\n+          a -> assertCommand(a,\n+            \"ThreadLocal.class.getMethod(\\\"get\\\").invoke(Class.forName(\\\"LocalDecorateExecutionTest$LocalDecorateExecutionControlProvider\\\").getField(\\\"CONTEXT_VALUE\\\").get(null))\",\n+            \"$1 ==> \\\"foobar\\\"\")\n+        );\n+    }\n+\n+\/\/ LocalDecorateExecutionControlProvider\n+\n+    public static class LocalDecorateExecutionControlProvider extends LocalExecutionControlProvider {\n+\n+        public static final String NAME = \"localDecorate\";\n+        public static final String CONTEXT_PARAM = \"context\";\n+        public static final ThreadLocal<String> CONTEXT_VALUE = new ThreadLocal<>();\n+\n+        @Override\n+        public Map<String, String> defaultParameters() {\n+            return Map.of(CONTEXT_PARAM, \"\");\n+        }\n+\n+        @Override\n+        public String name() {\n+            return NAME;\n+        }\n+\n+        @Override\n+        public ExecutionControl createExecutionControl(ExecutionEnv env, Map<String, String> parameters) {\n+            final String contextString = parameters.get(CONTEXT_PARAM);\n+            return new LocalExecutionControl(Thread.currentThread().getContextClassLoader()) {\n+                @Override\n+                protected Runnable decorateExecution(Runnable task) {\n+                    return () -> {\n+                        CONTEXT_VALUE.set(contextString);\n+                        try {\n+                            task.run();\n+                        } finally {\n+                            CONTEXT_VALUE.set(null);\n+                        }\n+                    };\n+                }\n+            };\n+        }\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/LocalDecorateExecutionTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}