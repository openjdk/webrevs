{"files":[{"patch":"@@ -146,1 +146,1 @@\n-        Thread snippetThread = new Thread(execThreadGroup, decorateExecution(() -> {\n+        Thread snippetThread = new Thread(execThreadGroup, () -> {\n@@ -148,1 +148,1 @@\n-                res[0] = doitMethod.invoke(null, new Object[0]);\n+                res[0] = doInvoke(doitMethod);\n@@ -160,1 +160,1 @@\n-        }));\n+        });\n@@ -228,1 +228,5 @@\n-     * Decorate the task that executes the snippet within the execution thread.\n+     * Execute the snippet.\n+     *\n+     * <p>\n+     * This method is invoked within the snippet execution thread to actually execute snippets.\n+     * The given method is a static method that takes zero parameters.\n@@ -231,2 +235,3 @@\n-     * Subclasses may configure thread-specific context for snippet execution here.\n-     * The implementation in {@link LocalExecutionControl} just returns {@code task}.\n+     * The implementation in {@link LocalExecutionControl} just invokes {@code method}.\n+     * Subclasses may override this method to configure thread-specific context during snippet\n+     * execution, etc.\n@@ -234,2 +239,4 @@\n-     * @param task the task to be performed in the snippet execution thread\n-     * @return the possibly decorated task\n+     * @param method static method to be invoked taking zero parameters\n+     * @return the return value from {@code method}, or null if {@code method} returns void\n+     * @throws IllegalAccessException if {@code method} is inaccessible\n+     * @throws InvocationTargetException if {@code method} itself throws an exception\n@@ -238,2 +245,2 @@\n-    protected Runnable decorateExecution(Runnable task) {\n-        return task;\n+    protected Object doInvoke(Method method) throws IllegalAccessException, InvocationTargetException {\n+        return method.invoke(null);\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n@@ -119,9 +121,7 @@\n-                protected Runnable decorateExecution(Runnable task) {\n-                    return () -> {\n-                        CONTEXT_VALUE.set(contextString);\n-                        try {\n-                            task.run();\n-                        } finally {\n-                            CONTEXT_VALUE.set(null);\n-                        }\n-                    };\n+                protected Object doInvoke(Method method) throws IllegalAccessException, InvocationTargetException {\n+                    CONTEXT_VALUE.set(contextString);\n+                    try {\n+                        return method.invoke(null);\n+                    } finally {\n+                        CONTEXT_VALUE.set(null);\n+                    }\n","filename":"test\/langtools\/jdk\/jshell\/LocalDecorateExecutionTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}