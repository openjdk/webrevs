{"files":[{"patch":"@@ -37,1 +37,0 @@\n-#include \"utilities\/singleWriterSynchronizer.hpp\"\n@@ -45,9 +44,1 @@\n-class NonJavaThread::List {\n-public:\n-  NonJavaThread* volatile _head;\n-  SingleWriterSynchronizer _protect;\n-\n-  List() : _head(nullptr), _protect() {}\n-};\n-\n-NonJavaThread::List NonJavaThread::_the_list;\n+DeferredStatic<NonJavaThread::List> NonJavaThread::_the_list;\n@@ -56,2 +47,2 @@\n-  _protect_enter(_the_list._protect.enter()),\n-  _current(AtomicAccess::load_acquire(&_the_list._head))\n+  _protect_enter(_the_list->_protect.enter()),\n+  _current(AtomicAccess::load_acquire(&_the_list->_head))\n@@ -61,1 +52,1 @@\n-  _the_list._protect.exit(_protect_enter);\n+  _the_list->_protect.exit(_protect_enter);\n@@ -79,2 +70,2 @@\n-  AtomicAccess::release_store(&_next, _the_list._head);\n-  AtomicAccess::release_store(&_the_list._head, this);\n+  AtomicAccess::release_store(&_next, _the_list->_head);\n+  AtomicAccess::release_store(&_the_list->_head, this);\n@@ -88,1 +79,1 @@\n-    NonJavaThread* volatile* p = &_the_list._head;\n+    NonJavaThread* volatile* p = &_the_list->_head;\n@@ -100,1 +91,1 @@\n-  _the_list._protect.synchronize();\n+  _the_list->_protect.synchronize();\n","filename":"src\/hotspot\/share\/runtime\/nonJavaThread.cpp","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+#include \"utilities\/deferredStatic.hpp\"\n+#include \"utilities\/singleWriterSynchronizer.hpp\"\n@@ -31,1 +33,10 @@\n-  NonJavaThread* volatile _next;\n+  friend class Threads;\n+  class List {\n+   public:\n+    NonJavaThread* volatile _head;\n+    SingleWriterSynchronizer _protect;\n+\n+    List() : _head(nullptr), _protect() {}\n+  };\n+\n+  static DeferredStatic<List> _the_list;\n@@ -33,2 +44,6 @@\n-  class List;\n-  static List _the_list;\n+  \/\/ Deferred static initialization\n+  static void init() {\n+    _the_list.initialize();\n+  }\n+\n+  NonJavaThread* volatile _next;\n","filename":"src\/hotspot\/share\/runtime\/nonJavaThread.hpp","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -449,0 +449,3 @@\n+  \/\/ Deferred \"static\" initialization\n+  NonJavaThread::init();\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}