{"files":[{"patch":"@@ -104,3 +104,0 @@\n-\n-import jdk.test.lib.Asserts;\n-\n@@ -119,0 +116,21 @@\n+    \/\/ This test tests the ability of the JVM to pretouch its java heap\n+    \/\/ for test purposes (AlwaysPreTouch). We start a JVM with -XX:+AlwaysPreTouch,\n+    \/\/ then observe RSS and expect to see RSS covering the entirety of the\n+    \/\/ java heap, since it should all be pre-touched now.\n+    \/\/\n+    \/\/ This test is important (we had pretouching break before) but inherently\n+    \/\/ shaky, since RSS of the JVM process is subject to host machine conditions.\n+    \/\/ If there is memory pressure, we may swap parts of the heap out, or parts\n+    \/\/ of the touched pages may be reassigned by the kernel to another process\n+    \/\/ after touching and before measuring.\n+    \/\/\n+    \/\/ Therefore this test requires enough breathing room - a sufficiently large\n+    \/\/ available memory reserve on the machine - to not produce false negatives.\n+    \/\/ We do this via:\n+    \/\/ - specifying @requires os.maxMemory > 2G\n+    \/\/ - the test itself first checks if the available memory is larger than a\n+    \/\/   certain required threshold A, only then it starts the testee JVM\n+    \/\/ - finally, in the testee JVM, if RSS is lower than expected and before\n+    \/\/   registering that as an error, we check available memory again. If it is lower\n+    \/\/   than threshold B, it again won't count as an error.\n+\n@@ -123,0 +141,1 @@\n+    \/\/ maximum size of non-heap memory we expect the testee JVM to have.\n@@ -124,0 +143,1 @@\n+    \/\/ How much memory we require the host to have available before even starting the test\n@@ -125,0 +145,3 @@\n+    \/\/ In the testee JVM, if RSS is lower than expected, how much memory should *still* be available now to\n+    \/\/ count the low RSS as a real error - an indication for a misfunctioning pretouch, not just a low-memory\n+    \/\/ condition on the system.\n@@ -134,1 +157,1 @@\n-        allOptions.add(\"-XX:+AlwaysPreTouch\"); \/\/ Stabilize RSS\n+        allOptions.add(\"-XX:+AlwaysPreTouch\");\n@@ -161,1 +184,1 @@\n-        if (args[0].equals(\"run\")) {\n+        if (args[0].equals(\"run\")) { \/\/ see prepareOptions()\n","filename":"test\/hotspot\/jtreg\/gc\/TestAlwaysPreTouchBehavior.java","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"}]}