{"files":[{"patch":"@@ -150,1 +150,1 @@\n-\/\/ available here means free\n+\/\/ available here means free.\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2458,0 +2458,5 @@\n+\/\/ Available memory of the host machine (container-aware)\n+WB_ENTRY(jlong, WB_HostAvailableMemory(JNIEnv* env, jobject o))\n+  return os::available_memory();\n+WB_END\n+\n@@ -2923,0 +2928,1 @@\n+  {CC\"hostAvailableMemory\",       CC\"()J\",            (void*)&WB_HostAvailableMemory },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -85,7 +85,0 @@\n-gc\/TestAlwaysPreTouchBehavior.java#ParallelCollector 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#SerialCollector 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#Shenandoah 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#G1 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#ZGenerational 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#ZSinglegen 8334513 generic-all\n-gc\/TestAlwaysPreTouchBehavior.java#Epsilon 8334513 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,2 +31,1 @@\n- * @requires os.maxMemory > 2G\n- * @requires os.family != \"aix\"\n+ * @requires os.maxMemory > 2G & vm.flagless & os.family != \"aix\"\n@@ -36,1 +35,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx512m -Xms512m -XX:+UseParallelGC -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx64m gc.TestAlwaysPreTouchBehavior -XX:+UseParallelGC\n@@ -43,2 +42,1 @@\n- * @requires os.maxMemory > 2G\n- * @requires os.family != \"aix\"\n+ * @requires os.maxMemory > 2G & vm.flagless & os.family != \"aix\"\n@@ -48,1 +46,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx512m -Xms512m -XX:+UseSerialGC -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx64m gc.TestAlwaysPreTouchBehavior -XX:+UseSerialGC\n@@ -55,2 +53,1 @@\n- * @requires os.maxMemory > 2G\n- * @requires os.family != \"aix\"\n+ * @requires os.maxMemory > 2G & vm.flagless & os.family != \"aix\"\n@@ -60,1 +57,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx512m -Xms512m -XX:+UseShenandoahGC  -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx64m gc.TestAlwaysPreTouchBehavior -XX:+UseShenandoahGC\n@@ -67,2 +64,1 @@\n- * @requires os.maxMemory > 2G\n- * @requires os.family != \"aix\"\n+ * @requires os.maxMemory > 2G & vm.flagless & os.family != \"aix\"\n@@ -72,1 +68,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx512m -Xms512m -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx64m gc.TestAlwaysPreTouchBehavior -XX:+UseG1GC\n@@ -79,2 +75,1 @@\n- * @requires os.maxMemory > 2G\n- * @requires os.family != \"aix\"\n+ * @requires os.maxMemory > 2G & vm.flagless & os.family != \"aix\"\n@@ -84,1 +79,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseZGC -XX:+ZGenerational -Xmx512m -Xms512m -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx64m gc.TestAlwaysPreTouchBehavior -XX:+UseZGC -XX:+ZGenerational\n@@ -91,2 +86,1 @@\n- * @requires os.maxMemory > 2G\n- * @requires os.family != \"aix\"\n+ * @requires os.maxMemory > 2G & vm.flagless & os.family != \"aix\"\n@@ -96,1 +90,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseZGC -XX:-ZGenerational -Xmx512m -Xms512m -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx64m gc.TestAlwaysPreTouchBehavior -XX:+UseZGC -XX:-ZGenerational\n@@ -103,2 +97,1 @@\n- * @requires os.maxMemory > 2G\n- * @requires os.family != \"aix\"\n+ * @requires os.maxMemory > 2G & vm.flagless & os.family != \"aix\"\n@@ -108,1 +101,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -Xmx512m -Xms512m -XX:+AlwaysPreTouch gc.TestAlwaysPreTouchBehavior\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xmx64m gc.TestAlwaysPreTouchBehavior -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC\n@@ -111,3 +104,2 @@\n-\n-import jdk.test.lib.Asserts;\n-\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -115,0 +107,6 @@\n+import jtreg.SkippedException;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n@@ -118,6 +116,85 @@\n-    public static void main(String [] args) {\n-    long rss = WhiteBox.getWhiteBox().rss();\n-    System.out.println(\"RSS: \" + rss);\n-    if (rss == 0) {\n-        System.out.println(\"cannot get RSS, just skip\");\n-        return; \/\/ Did not get available RSS, just ignore this test.\n+    \/\/ This test tests the ability of the JVM to pretouch its java heap\n+    \/\/ for test purposes (AlwaysPreTouch). We start a JVM with -XX:+AlwaysPreTouch,\n+    \/\/ then observe RSS and expect to see RSS covering the entirety of the\n+    \/\/ java heap, since it should all be pre-touched now.\n+    \/\/\n+    \/\/ This test is important (we had pretouching break before) but inherently\n+    \/\/ shaky, since RSS of the JVM process is subject to host machine conditions.\n+    \/\/ If there is memory pressure, we may swap parts of the heap out, or parts\n+    \/\/ of the touched pages may be reassigned by the kernel to another process\n+    \/\/ after touching and before measuring.\n+    \/\/\n+    \/\/ Therefore, this test requires enough breathing room - a sufficiently large\n+    \/\/ available memory reserve on the machine - to not produce false negatives.\n+    \/\/ We do this via:\n+    \/\/ - specifying @requires os.maxMemory > 2G\n+    \/\/ - the test itself first checks if the available memory is larger than a\n+    \/\/   certain required threshold A, only then it starts the testee JVM\n+    \/\/ - finally, in the testee JVM, if RSS is lower than expected and before\n+    \/\/   registering that as an error, we check available memory again. If it is lower\n+    \/\/   than threshold B, it again won't count as an error.\n+\n+    final static WhiteBox wb = WhiteBox.getWhiteBox();\n+\n+    final static long M = 1024 * 1024;\n+    final static long heapsize = M * 128;\n+    \/\/ maximum size of non-heap memory we expect the testee JVM to have.\n+    final static long expectedMaxNonHeapRSS = M * 256;\n+    \/\/ How much memory we require the host to have available before even starting the test\n+    final static long requiredAvailableBefore = heapsize * 2 + expectedMaxNonHeapRSS;\n+    \/\/ In the testee JVM, if RSS is lower than expected, how much memory should *still* be available now to\n+    \/\/ count the low RSS as a real error - an indication for a misfunctioning pretouch, not just a low-memory\n+    \/\/ condition on the system.\n+    final static long requiredAvailableDuring = expectedMaxNonHeapRSS;\n+\n+    private static String[] prepareOptions(String[] extraVMOptions) {\n+        List<String> allOptions = new ArrayList<String>();\n+        if (extraVMOptions != null) {\n+            allOptions.addAll(Arrays.asList(extraVMOptions));\n+        }\n+        allOptions.add(\"-Xmx\" + heapsize);\n+        allOptions.add(\"-Xms\" + heapsize);\n+        allOptions.add(\"-XX:+AlwaysPreTouch\");\n+        allOptions.add(\"-XX:+UnlockDiagnosticVMOptions\"); \/\/ For whitebox\n+        allOptions.add(\"-XX:+WhiteBoxAPI\");\n+        allOptions.add(\"-Xbootclasspath\/a:.\");\n+        allOptions.add(\"-XX:-ExplicitGCInvokesConcurrent\"); \/\/ Invoke explicit GC on System.gc\n+        allOptions.add(\"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+        allOptions.add(TestAlwaysPreTouchBehavior.class.getName());\n+        allOptions.add(\"run\");\n+        return allOptions.toArray(new String[0]);\n+    }\n+\n+    private static OutputAnalyzer runTestWithOptions(String[] extraOptions) throws IOException {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(prepareOptions(extraOptions));\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        output.reportDiagnosticSummary();\n+        return output;\n+    }\n+\n+    public static void main(String [] args) throws IOException {\n+\n+        Runtime runtime = Runtime.getRuntime();\n+        long committed = runtime.totalMemory();\n+        long avail = wb.hostAvailableMemory();\n+        long rss = wb.rss();\n+        System.out.println(\"RSS: \" + rss + \" available: \" + avail + \" committed \" + committed);\n+\n+        if (args[0].equals(\"run\")) { \/\/ see prepareOptions()\n+            if (rss < committed) {\n+                if (avail < requiredAvailableDuring) {\n+                    throw new SkippedException(\"Not enough memory for this  test (\" + avail + \")\");\n+                } else {\n+                    throw new RuntimeException(\"RSS of this process(\" + rss + \"b) should be bigger than or \" +\n+                                               \"equal to committed heap mem(\" + committed + \"b)\");\n+                }\n+            }\n+        } else {\n+            System.out.println(\" available: \" + avail + \"(required \" + requiredAvailableBefore + \")\");\n+            if (avail < requiredAvailableBefore) {\n+                throw new SkippedException(\"Not enough memory for this  test (\" + avail + \")\");\n+            }\n+            \/\/ pass options to the test\n+            runTestWithOptions(args);\n+        }\n@@ -125,4 +202,0 @@\n-    Runtime runtime = Runtime.getRuntime();\n-    long committedMemory = runtime.totalMemory();\n-    Asserts.assertGreaterThan(rss, committedMemory, \"RSS of this process(\" + rss + \"b) should be bigger than or equal to committed heap mem(\" + committedMemory + \"b)\");\n-   }\n","filename":"test\/hotspot\/jtreg\/gc\/TestAlwaysPreTouchBehavior.java","additions":107,"deletions":34,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -765,0 +765,1 @@\n+  public native long hostAvailableMemory();\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}