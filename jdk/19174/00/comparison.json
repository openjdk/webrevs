{"files":[{"patch":"@@ -2284,0 +2284,3 @@\n+    } else if (match_option(option, \"--sun-misc-unsafe-memory-access=\", &tail)) {\n+      PropertyList_unique_add(&_system_properties, \"sun.misc.unsafe.memory.access\", tail,\n+                              AddProperty, WriteableProperty, InternalProperty);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -215,1 +215,5 @@\n-\\                      Finalization is enabled by default.\\n\\n\\\n+\\                      Finalization is enabled by default.\\n\\\n+\\    --sun-misc-unsafe-memory-access=<value>\\n\\\n+\\                      allow or deny usage of unsupported API sun.misc.Unsafe\\n\\\n+\\                      <value> is one of \"allow\", \"warn\", \"debug\", or \"deny\".\\n\\\n+\\                      The default value is \"allow\".\\n\\n\\\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1197,0 +1197,23 @@\n+.TP\n+\\f[V]--sun-misc-unsafe-memory-acces=\\f[R] \\f[I]value\\f[R]\n+Allow or deny usage of unsupported API \\f[V]sun.misc.Unsafe\\f[R].\n+\\f[I]value\\f[R] is one of:\n+.RS\n+.TP\n+\\f[V]allow\\f[R]\n+Allow use of the memory-access methods with no warnings at run time.\n+.TP\n+\\f[V]warn\\f[R]\n+Allow use of the memory-access methods, but issues a warning on the\n+first occasion that any memory-access method is used.\n+.TP\n+\\f[V]debug\\f[R]\n+Allow use of the memory-access methods, but issue a one-line warning and\n+a stack trace when any memory-access method is used.\n+.TP\n+\\f[V]deny\\f[R]\n+Disallow use of the memory-access methods by throwing an\n+\\f[V]UnsupportedOperationException\\f[R] on every usage.\n+.PP\n+The default value when the option is not specified is \\f[V]allow\\f[R].\n+.RE\n","filename":"src\/java.base\/share\/man\/java.1","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,0 +28,14 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.VarHandle;\n+import java.lang.reflect.Field;\n+import java.net.URL;\n+import java.security.AccessController;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+import java.security.PrivilegedAction;\n+import java.util.List;\n+import java.util.Set;\n+\n@@ -29,0 +43,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -33,5 +48,0 @@\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Field;\n-import java.util.Set;\n-\n-\n@@ -52,0 +62,5 @@\n+ * @apiNote\n+ * This class pre-dates the introduction of {@link VarHandle}, low-level access to\n+ * memory with {@linkplain java.lang.foreign}, and other standard APIs. New code\n+ * should not use this API.\n+ *\n@@ -153,0 +168,3 @@\n+     * @deprecated Use {@link VarHandle#get(Object...)} or\n+     * {@link MemorySegment#get(ValueLayout.OfInt, long)} instead.\n+     *\n@@ -162,0 +180,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -164,0 +183,1 @@\n+        beforeMemoryAccess();\n@@ -178,0 +198,3 @@\n+     * @deprecated Use {@link VarHandle#set(Object...)} or\n+     * {@link MemorySegment#set(ValueLayout.OfInt, long, int)} instead.\n+     *\n@@ -187,0 +210,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -189,0 +213,1 @@\n+        beforeMemoryAccess();\n@@ -194,1 +219,2 @@\n-     * @see #getInt(Object, long)\n+     *\n+     * @deprecated Use {@link VarHandle#get(Object...)} instead.\n@@ -196,0 +222,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -198,0 +225,1 @@\n+        beforeMemoryAccess();\n@@ -209,1 +237,2 @@\n-     * @see #putInt(Object, long, int)\n+     *\n+     * @deprecated Use {@link VarHandle#set(Object...)} instead.\n@@ -211,0 +240,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -213,0 +243,1 @@\n+        beforeMemoryAccess();\n@@ -216,1 +247,7 @@\n-    \/** @see #getInt(Object, long) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#get(Object...)} or\n+     * {@link MemorySegment#get(ValueLayout.OfBoolean, long)} instead.\n+     *\n+     * @see #getInt(Object, long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -219,0 +256,1 @@\n+        beforeMemoryAccess();\n@@ -222,1 +260,7 @@\n-    \/** @see #putInt(Object, long, int) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#set(Object...)} or\n+     * {@link MemorySegment#set(ValueLayout.OfBoolean, long, boolean)} instead.\n+     *\n+     * @see #putInt(Object, long, int)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -225,0 +269,1 @@\n+        beforeMemoryAccess();\n@@ -228,1 +273,7 @@\n-    \/** @see #getInt(Object, long) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#get(Object...)} or\n+     * {@link MemorySegment#get(ValueLayout.OfByte, long)} instead.\n+     *\n+     * @see #getInt(Object, long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -231,0 +282,1 @@\n+        beforeMemoryAccess();\n@@ -234,1 +286,7 @@\n-    \/** @see #putInt(Object, long, int) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#set(Object...)} or\n+     * {@link MemorySegment#set(ValueLayout.OfByte, long, byte)} instead.\n+     *\n+     * @see #putInt(Object, long, int)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -237,0 +295,1 @@\n+        beforeMemoryAccess();\n@@ -240,1 +299,7 @@\n-    \/** @see #getInt(Object, long) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#get(Object...)} or\n+     * {@link MemorySegment#get(ValueLayout.OfShort, long)} instead.\n+     *\n+     * @see #getInt(Object, long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -243,0 +308,1 @@\n+        beforeMemoryAccess();\n@@ -246,1 +312,7 @@\n-    \/** @see #putInt(Object, long, int) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#set(Object...)} or\n+     * {@link MemorySegment#set(ValueLayout.OfShort, long, short)} instead.\n+     *\n+     * @see #putInt(Object, long, int)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -249,0 +321,1 @@\n+        beforeMemoryAccess();\n@@ -252,1 +325,7 @@\n-    \/** @see #getInt(Object, long) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#get(Object...)} or\n+     * {@link MemorySegment#get(ValueLayout.OfChar, long)} instead.\n+     *\n+     * @see #getInt(Object, long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -255,0 +334,1 @@\n+        beforeMemoryAccess();\n@@ -258,1 +338,7 @@\n-    \/** @see #putInt(Object, long, int) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#set(Object...)} or\n+     * {@link MemorySegment#set(ValueLayout.OfChar, long, char)} instead.\n+     *\n+     * @see #putInt(Object, long, int)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -261,0 +347,1 @@\n+        beforeMemoryAccess();\n@@ -264,1 +351,7 @@\n-    \/** @see #getInt(Object, long) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#get(Object...)} or\n+     * {@link MemorySegment#get(ValueLayout.OfLong, long)} instead.\n+     *\n+     * @see #getInt(Object, long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -267,0 +360,1 @@\n+        beforeMemoryAccess();\n@@ -270,1 +364,7 @@\n-    \/** @see #putInt(Object, long, int) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#set(Object...)} or\n+     * {@link MemorySegment#set(ValueLayout.OfLong, long, long)} instead.\n+     *\n+     * @see #putInt(Object, long, int)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -273,0 +373,1 @@\n+        beforeMemoryAccess();\n@@ -276,1 +377,7 @@\n-    \/** @see #getInt(Object, long) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#get(Object...)} or\n+     * {@link MemorySegment#get(ValueLayout.OfFloat, long)} instead.\n+     *\n+     * @see #getInt(Object, long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -279,0 +386,1 @@\n+        beforeMemoryAccess();\n@@ -282,1 +390,7 @@\n-    \/** @see #putInt(Object, long, int) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#set(Object...)} or\n+     * {@link MemorySegment#set(ValueLayout.OfFloat, long, float)} instead.\n+     *\n+     * @see #putInt(Object, long, int)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -285,0 +399,1 @@\n+        beforeMemoryAccess();\n@@ -288,1 +403,7 @@\n-    \/** @see #getInt(Object, long) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#get(Object...)} or\n+     * {@link MemorySegment#get(ValueLayout.OfDouble, long)} instead.\n+     *\n+     * @see #getInt(Object, long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -291,0 +412,1 @@\n+        beforeMemoryAccess();\n@@ -294,1 +416,7 @@\n-    \/** @see #putInt(Object, long, int) *\/\n+    \/**\n+     * @deprecated Use {@link VarHandle#set(Object...)} or\n+     * {@link MemorySegment#set(ValueLayout.OfDouble, long, double)} instead.\n+     *\n+     * @see #putInt(Object, long, int)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -297,0 +425,1 @@\n+        beforeMemoryAccess();\n@@ -307,0 +436,2 @@\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n@@ -309,0 +440,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -311,0 +443,1 @@\n+        beforeMemoryAccess();\n@@ -319,0 +452,2 @@\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n@@ -321,0 +456,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -323,0 +459,1 @@\n+        beforeMemoryAccess();\n@@ -326,1 +463,6 @@\n-    \/** @see #getByte(long) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #getByte(long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -329,0 +471,1 @@\n+        beforeMemoryAccess();\n@@ -332,1 +475,6 @@\n-    \/** @see #putByte(long, byte) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #putByte(long, byte)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -335,0 +483,1 @@\n+        beforeMemoryAccess();\n@@ -338,1 +487,6 @@\n-    \/** @see #getByte(long) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #getByte(long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -341,0 +495,1 @@\n+        beforeMemoryAccess();\n@@ -344,1 +499,6 @@\n-    \/** @see #putByte(long, byte) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #putByte(long, byte)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -347,0 +507,1 @@\n+        beforeMemoryAccess();\n@@ -350,1 +511,6 @@\n-    \/** @see #getByte(long) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #getByte(long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -353,0 +519,1 @@\n+        beforeMemoryAccess();\n@@ -356,1 +523,6 @@\n-    \/** @see #putByte(long, byte) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #putByte(long, byte)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -359,0 +531,1 @@\n+        beforeMemoryAccess();\n@@ -362,1 +535,6 @@\n-    \/** @see #getByte(long) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #getByte(long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -365,0 +543,1 @@\n+        beforeMemoryAccess();\n@@ -368,1 +547,6 @@\n-    \/** @see #putByte(long, byte) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #putByte(long, byte)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -371,0 +555,1 @@\n+        beforeMemoryAccess();\n@@ -374,1 +559,6 @@\n-    \/** @see #getByte(long) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #getByte(long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -377,0 +567,1 @@\n+        beforeMemoryAccess();\n@@ -380,1 +571,6 @@\n-    \/** @see #putByte(long, byte) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #putByte(long, byte)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -383,0 +579,1 @@\n+        beforeMemoryAccess();\n@@ -386,1 +583,6 @@\n-    \/** @see #getByte(long) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #getByte(long)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -389,0 +591,1 @@\n+        beforeMemoryAccess();\n@@ -392,1 +595,6 @@\n-    \/** @see #putByte(long, byte) *\/\n+    \/**\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n+     * @see #putByte(long, byte)\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -395,0 +603,1 @@\n+        beforeMemoryAccess();\n@@ -411,0 +620,2 @@\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n@@ -413,0 +624,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -415,0 +627,1 @@\n+        beforeMemoryAccess();\n@@ -426,0 +639,2 @@\n+     * @deprecated Use {@link java.lang.foreign} to access off-heap memory.\n+     *\n@@ -428,0 +643,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -430,0 +646,1 @@\n+        beforeMemoryAccess();\n@@ -453,0 +670,2 @@\n+     * @deprecated Use {@link java.lang.foreign} to allocate off-heap memory.\n+     *\n@@ -461,0 +680,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -463,0 +683,1 @@\n+        beforeMemoryAccess();\n@@ -485,0 +706,2 @@\n+     * @deprecated Use {@link java.lang.foreign} to allocate off-heap memory.\n+     *\n@@ -492,0 +715,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -494,0 +718,1 @@\n+        beforeMemoryAccess();\n@@ -521,0 +746,3 @@\n+     * @deprecated {@link MemorySegment#fill(byte)} fills the contents of a memory\n+     * segment with a given value.\n+     *\n@@ -525,0 +753,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -527,0 +756,1 @@\n+        beforeMemoryAccess();\n@@ -536,0 +766,5 @@\n+     *\n+     * @deprecated {@link MemorySegment#fill(byte)} fills the contents of a memory\n+     * segment with a given value.\n+     *\n+     * Use {@link MemorySegment} and its bulk copy methods instead.\n@@ -537,0 +772,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -539,0 +775,1 @@\n+        beforeMemoryAccess();\n@@ -566,0 +803,2 @@\n+     * @deprecated Use {@link MemorySegment} and its bulk copy methods instead.\n+     *\n@@ -570,0 +809,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -574,0 +814,1 @@\n+        beforeMemoryAccess();\n@@ -583,0 +824,2 @@\n+     *\n+     * @deprecated Use {@link MemorySegment} and its bulk copy methods instead.\n@@ -584,0 +827,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -586,0 +830,1 @@\n+        beforeMemoryAccess();\n@@ -603,0 +848,2 @@\n+     * @deprecated Use {@link java.lang.foreign} to allocate and free off-heap memory.\n+     *\n@@ -607,0 +854,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -609,0 +857,1 @@\n+        beforeMemoryAccess();\n@@ -618,0 +867,1 @@\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n@@ -619,0 +869,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -641,1 +892,1 @@\n-     * in a future release. Use {@link java.lang.invoke.VarHandle} instead.\n+     * in a future release. Use {@link VarHandle} instead.\n@@ -645,1 +896,1 @@\n-    @Deprecated(since=\"18\")\n+    @Deprecated(since=\"18\", forRemoval=true)\n@@ -658,0 +909,1 @@\n+        beforeMemoryAccess();\n@@ -680,1 +932,1 @@\n-     * in a future release. Use {@link java.lang.invoke.VarHandle} instead.\n+     * in a future release. Use {@link VarHandle} instead.\n@@ -684,1 +936,1 @@\n-    @Deprecated(since=\"18\")\n+    @Deprecated(since=\"18\", forRemoval=true)\n@@ -697,0 +949,1 @@\n+        beforeMemoryAccess();\n@@ -713,1 +966,1 @@\n-     * in a future release. Use {@link java.lang.invoke.VarHandle} instead.\n+     * in a future release. Use {@link VarHandle} instead.\n@@ -715,1 +968,1 @@\n-    @Deprecated(since=\"18\")\n+    @Deprecated(since=\"18\", forRemoval=true)\n@@ -728,0 +981,1 @@\n+        beforeMemoryAccess();\n@@ -738,0 +992,2 @@\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\n@@ -741,0 +997,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -743,0 +1000,1 @@\n+        beforeMemoryAccess();\n@@ -746,1 +1004,5 @@\n-    \/** The value of {@code arrayBaseOffset(boolean[].class)} *\/\n+    \/** The value of {@code arrayBaseOffset(boolean[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -749,1 +1011,5 @@\n-    \/** The value of {@code arrayBaseOffset(byte[].class)} *\/\n+    \/** The value of {@code arrayBaseOffset(byte[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -752,1 +1018,5 @@\n-    \/** The value of {@code arrayBaseOffset(short[].class)} *\/\n+    \/** The value of {@code arrayBaseOffset(short[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -755,1 +1025,5 @@\n-    \/** The value of {@code arrayBaseOffset(char[].class)} *\/\n+    \/** The value of {@code arrayBaseOffset(char[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -758,1 +1032,5 @@\n-    \/** The value of {@code arrayBaseOffset(int[].class)} *\/\n+    \/** The value of {@code arrayBaseOffset(int[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -761,1 +1039,5 @@\n-    \/** The value of {@code arrayBaseOffset(long[].class)} *\/\n+    \/** The value of {@code arrayBaseOffset(long[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -764,1 +1046,5 @@\n-    \/** The value of {@code arrayBaseOffset(float[].class)} *\/\n+    \/** The value of {@code arrayBaseOffset(float[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -767,1 +1053,5 @@\n-    \/** The value of {@code arrayBaseOffset(double[].class)} *\/\n+    \/** The value of {@code arrayBaseOffset(double[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -770,1 +1060,5 @@\n-    \/** The value of {@code arrayBaseOffset(Object[].class)} *\/\n+    \/** The value of {@code arrayBaseOffset(Object[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -780,0 +1074,2 @@\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\n@@ -784,0 +1080,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -789,1 +1086,5 @@\n-    \/** The value of {@code arrayIndexScale(boolean[].class)} *\/\n+    \/** The value of {@code arrayIndexScale(boolean[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -792,1 +1093,5 @@\n-    \/** The value of {@code arrayIndexScale(byte[].class)} *\/\n+    \/** The value of {@code arrayIndexScale(byte[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -795,1 +1100,5 @@\n-    \/** The value of {@code arrayIndexScale(short[].class)} *\/\n+    \/** The value of {@code arrayIndexScale(short[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -798,1 +1107,5 @@\n-    \/** The value of {@code arrayIndexScale(char[].class)} *\/\n+    \/** The value of {@code arrayIndexScale(char[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -801,1 +1114,5 @@\n-    \/** The value of {@code arrayIndexScale(int[].class)} *\/\n+    \/** The value of {@code arrayIndexScale(int[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -804,1 +1121,5 @@\n-    \/** The value of {@code arrayIndexScale(long[].class)} *\/\n+    \/** The value of {@code arrayIndexScale(long[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -807,1 +1128,5 @@\n-    \/** The value of {@code arrayIndexScale(float[].class)} *\/\n+    \/** The value of {@code arrayIndexScale(float[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -810,1 +1135,5 @@\n-    \/** The value of {@code arrayIndexScale(double[].class)} *\/\n+    \/** The value of {@code arrayIndexScale(double[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -813,1 +1142,5 @@\n-    \/** The value of {@code arrayIndexScale(Object[].class)} *\/\n+    \/** The value of {@code arrayIndexScale(Object[].class)}.\n+     *\n+     * @deprecated Not needed when using {@link VarHandle} or {@link java.lang.foreign}.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -821,0 +1154,2 @@\n+     *\n+     * @deprecated Use {@link ValueLayout#ADDRESS}.{@link MemoryLayout#byteSize()} instead.\n@@ -822,0 +1157,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -827,1 +1163,5 @@\n-    \/** The value of {@code addressSize()} *\/\n+    \/** The value of {@code addressSize()}.\n+     *\n+     * @deprecated Use {@link ValueLayout#ADDRESS}.{@link MemoryLayout#byteSize()} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -866,0 +1206,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#compareAndExchange(Object...)} instead.\n@@ -867,0 +1209,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -871,0 +1214,1 @@\n+        beforeMemoryAccess();\n@@ -882,0 +1226,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#compareAndExchange(Object...)} instead.\n@@ -883,0 +1229,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -887,0 +1234,1 @@\n+        beforeMemoryAccess();\n@@ -898,0 +1246,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#compareAndExchange(Object...)} instead.\n@@ -899,0 +1249,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -903,0 +1254,1 @@\n+        beforeMemoryAccess();\n@@ -909,0 +1261,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#getVolatile(Object...)} instead.\n@@ -910,0 +1264,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -912,0 +1267,1 @@\n+        beforeMemoryAccess();\n@@ -918,0 +1274,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#setVolatile(Object...)} instead.\n@@ -919,0 +1277,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -921,0 +1280,1 @@\n+        beforeMemoryAccess();\n@@ -924,1 +1284,5 @@\n-    \/** Volatile version of {@link #getInt(Object, long)}  *\/\n+    \/** Volatile version of {@link #getInt(Object, long)}.\n+     *\n+     * @deprecated Use {@link VarHandle#getVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -927,0 +1291,1 @@\n+        beforeMemoryAccess();\n@@ -930,1 +1295,5 @@\n-    \/** Volatile version of {@link #putInt(Object, long, int)}  *\/\n+    \/** Volatile version of {@link #putInt(Object, long, int)}.\n+     *\n+     * @deprecated Use {@link VarHandle#setVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -933,0 +1302,1 @@\n+        beforeMemoryAccess();\n@@ -936,1 +1306,5 @@\n-    \/** Volatile version of {@link #getBoolean(Object, long)}  *\/\n+    \/** Volatile version of {@link #getBoolean(Object, long)}.\n+     *\n+     * @deprecated Use {@link VarHandle#getVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -939,0 +1313,1 @@\n+        beforeMemoryAccess();\n@@ -942,1 +1317,5 @@\n-    \/** Volatile version of {@link #putBoolean(Object, long, boolean)}  *\/\n+    \/** Volatile version of {@link #putBoolean(Object, long, boolean)}.\n+     *\n+     * @deprecated Use {@link VarHandle#setVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -945,0 +1324,1 @@\n+        beforeMemoryAccess();\n@@ -948,1 +1328,6 @@\n-    \/** Volatile version of {@link #getByte(Object, long)}  *\/\n+    \/** Volatile version of {@link #getByte(Object, long)}.\n+     *\n+     * @deprecated Use {@link VarHandle#getVolatile(Object...)}\n+     * instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -951,0 +1336,1 @@\n+        beforeMemoryAccess();\n@@ -954,1 +1340,5 @@\n-    \/** Volatile version of {@link #putByte(Object, long, byte)}  *\/\n+    \/** Volatile version of {@link #putByte(Object, long, byte)}.\n+     *\n+     * @deprecated Use {@link VarHandle#setVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -957,0 +1347,1 @@\n+        beforeMemoryAccess();\n@@ -960,1 +1351,5 @@\n-    \/** Volatile version of {@link #getShort(Object, long)}  *\/\n+    \/** Volatile version of {@link #getShort(Object, long)}.\n+     *\n+     * @deprecated Use {@link VarHandle#getVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -963,0 +1358,1 @@\n+        beforeMemoryAccess();\n@@ -966,1 +1362,5 @@\n-    \/** Volatile version of {@link #putShort(Object, long, short)}  *\/\n+    \/** Volatile version of {@link #putShort(Object, long, short)}.\n+     *\n+     * @deprecated Use {@link VarHandle#setVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -969,0 +1369,1 @@\n+        beforeMemoryAccess();\n@@ -972,1 +1373,5 @@\n-    \/** Volatile version of {@link #getChar(Object, long)}  *\/\n+    \/** Volatile version of {@link #getChar(Object, long)}.\n+     *\n+     * @deprecated Use {@link VarHandle#getVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -975,0 +1380,1 @@\n+        beforeMemoryAccess();\n@@ -978,1 +1384,5 @@\n-    \/** Volatile version of {@link #putChar(Object, long, char)}  *\/\n+    \/** Volatile version of {@link #putChar(Object, long, char)}.\n+     *\n+     * @deprecated Use {@link VarHandle#setVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -981,0 +1391,1 @@\n+        beforeMemoryAccess();\n@@ -984,1 +1395,5 @@\n-    \/** Volatile version of {@link #getLong(Object, long)}  *\/\n+    \/** Volatile version of {@link #getLong(Object, long)}.\n+     *\n+     * @deprecated Use {@link VarHandle#getVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -987,0 +1402,1 @@\n+        beforeMemoryAccess();\n@@ -990,1 +1406,5 @@\n-    \/** Volatile version of {@link #putLong(Object, long, long)}  *\/\n+    \/** Volatile version of {@link #putLong(Object, long, long)}.\n+     *\n+     * @deprecated Use {@link VarHandle#setVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -993,0 +1413,1 @@\n+        beforeMemoryAccess();\n@@ -996,1 +1417,5 @@\n-    \/** Volatile version of {@link #getFloat(Object, long)}  *\/\n+    \/** Volatile version of {@link #getFloat(Object, long)}.\n+     *\n+     * @deprecated Use {@link VarHandle#getVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -999,0 +1424,1 @@\n+        beforeMemoryAccess();\n@@ -1002,1 +1428,5 @@\n-    \/** Volatile version of {@link #putFloat(Object, long, float)}  *\/\n+    \/** Volatile version of {@link #putFloat(Object, long, float)}.\n+     *\n+     * @deprecated Use {@link VarHandle#setVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1005,0 +1435,1 @@\n+        beforeMemoryAccess();\n@@ -1008,1 +1439,5 @@\n-    \/** Volatile version of {@link #getDouble(Object, long)}  *\/\n+    \/** Volatile version of {@link #getDouble(Object, long)}.\n+     *\n+     * @deprecated Use {@link VarHandle#getVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1011,0 +1446,1 @@\n+        beforeMemoryAccess();\n@@ -1014,1 +1450,5 @@\n-    \/** Volatile version of {@link #putDouble(Object, long, double)}  *\/\n+    \/** Volatile version of {@link #putDouble(Object, long, double)}.\n+     *\n+     * @deprecated Use {@link VarHandle#setVolatile(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1017,0 +1457,1 @@\n+        beforeMemoryAccess();\n@@ -1028,0 +1469,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#setRelease(Object...)} instead.\n@@ -1029,0 +1472,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1031,0 +1475,1 @@\n+        beforeMemoryAccess();\n@@ -1034,1 +1479,5 @@\n-    \/** Ordered\/Lazy version of {@link #putIntVolatile(Object, long, int)}  *\/\n+    \/** Ordered\/Lazy version of {@link #putIntVolatile(Object, long, int)}.\n+     *\n+     * @deprecated Use {@link VarHandle#setRelease(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1037,0 +1486,1 @@\n+        beforeMemoryAccess();\n@@ -1040,1 +1490,5 @@\n-    \/** Ordered\/Lazy version of {@link #putLongVolatile(Object, long, long)} *\/\n+    \/** Ordered\/Lazy version of {@link #putLongVolatile(Object, long, long)}.\n+     *\n+     * @deprecated Use {@link VarHandle#setRelease(Object...)} instead.\n+     *\/\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1043,0 +1497,1 @@\n+        beforeMemoryAccess();\n@@ -1101,1 +1556,1 @@\n-     * @deprecated Use {@link java.lang.management.OperatingSystemMXBean#getSystemLoadAverage()}\n+     * @deprecated Use {@link java.management\/java.lang.management.OperatingSystemMXBean#getSystemLoadAverage()}\n@@ -1104,0 +1559,1 @@\n+    @SuppressWarnings(\"doclint:reference\") \/\/ cross-module links\n@@ -1123,0 +1579,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#getAndAdd(Object...)} instead.\n@@ -1124,0 +1582,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1126,0 +1585,1 @@\n+        beforeMemoryAccess();\n@@ -1139,0 +1599,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#getAndAdd(Object...)} instead.\n@@ -1140,0 +1602,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1142,0 +1605,1 @@\n+        beforeMemoryAccess();\n@@ -1155,0 +1619,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#getAndAdd(Object...)} instead.\n@@ -1156,0 +1622,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1158,0 +1625,1 @@\n+        beforeMemoryAccess();\n@@ -1171,0 +1639,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#getAndAdd(Object...)} instead.\n@@ -1172,0 +1642,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1174,0 +1645,1 @@\n+        beforeMemoryAccess();\n@@ -1187,0 +1659,2 @@\n+     *\n+     * @deprecated Use {@link VarHandle#getAndAdd(Object...)} instead.\n@@ -1188,0 +1662,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1190,0 +1665,1 @@\n+        beforeMemoryAccess();\n@@ -1204,1 +1680,1 @@\n-     * @deprecated Use {@link java.lang.invoke.VarHandle#acquireFence()} instead.\n+     * @deprecated Use {@link VarHandle#acquireFence()} instead.\n@@ -1224,1 +1700,1 @@\n-     * @deprecated Use {@link java.lang.invoke.VarHandle#releaseFence()} instead.\n+     * @deprecated Use {@link VarHandle#releaseFence()} instead.\n@@ -1241,1 +1717,1 @@\n-     * @deprecated Use {@link java.lang.invoke.VarHandle#fullFence()} instead.\n+     * @deprecated Use {@link VarHandle#fullFence()} instead.\n@@ -1258,0 +1734,6 @@\n+     *\n+     * @deprecated Use a {@link MemorySegment} allocated in an {@link Arena} with the\n+     * appropriate temporal bounds. The {@link MemorySegment#asByteBuffer()} method\n+     * wraps a memory segment as a {@code ByteBuffer} to allow interop with existing\n+     * code.\n+     *\n@@ -1260,0 +1742,1 @@\n+    @Deprecated(since=\"23\", forRemoval=true)\n@@ -1262,2 +1745,2 @@\n-            throw new IllegalArgumentException(\"buffer is non-direct\");\n-\n+            throw new IllegalArgumentException(\"Not a direct buffer\");\n+        beforeMemoryAccess();\n@@ -1266,0 +1749,188 @@\n+\n+    \/\/ Instructure for --sun-misc-unsafe-memory-access=<value> command line option.\n+\n+    private static final Object MEMORY_ACCESS_WARNED_BASE;\n+    private static final long MEMORY_ACCESS_WARNED_OFFSET;\n+    static {\n+        try {\n+            Field field = Unsafe.class.getDeclaredField(\"memoryAccessWarned\");\n+            MEMORY_ACCESS_WARNED_BASE = theInternalUnsafe.staticFieldBase(field);\n+            MEMORY_ACCESS_WARNED_OFFSET = theInternalUnsafe.staticFieldOffset(field);\n+        } catch (Exception e) {\n+            throw new ExceptionInInitializerError(e);\n+        }\n+    }\n+    \/\/ set to true by first usage of memory-access method\n+    private static @Stable boolean memoryAccessWarned;\n+\n+    private static boolean isMemoryAccessWarned() {\n+        return theInternalUnsafe.getBooleanVolatile(MEMORY_ACCESS_WARNED_BASE, MEMORY_ACCESS_WARNED_OFFSET);\n+    }\n+\n+    private static boolean trySetMemoryAccessWarned() {\n+        return theInternalUnsafe.compareAndSetBoolean(MEMORY_ACCESS_WARNED_BASE, MEMORY_ACCESS_WARNED_OFFSET, false, true);\n+    }\n+\n+    private static final MemoryAccessOption MEMORY_ACCESS_OPTION = MemoryAccessOption.value();\n+\n+    \/**\n+     * Invoked by all memory-access methods.\n+     *\/\n+    @ForceInline\n+    private static void beforeMemoryAccess() {\n+        if (MEMORY_ACCESS_OPTION == MemoryAccessOption.ALLOW) {\n+            return;\n+        }\n+\n+        if (MEMORY_ACCESS_OPTION == MemoryAccessOption.WARN && isMemoryAccessWarned()) {\n+            \/\/ nothing to do if this is not the first usage\n+            return;\n+        }\n+\n+        \/\/ warn && first usage, debug, or deny\n+        beforeMemoryAccessSlow();\n+    }\n+\n+    private static void beforeMemoryAccessSlow() {\n+        assert MEMORY_ACCESS_OPTION != MemoryAccessOption.ALLOW;\n+\n+        \/\/ stack trace without the frames for the beforeMemoryAccess methods\n+        List<StackWalker.StackFrame> stack = StackWalkerHolder.INSTANCE.walk(s ->\n+                s.dropWhile(f -> (f.getDeclaringClass() == Unsafe.class)\n+                                && f.getMethodName().startsWith(\"beforeMemoryAccess\"))\n+                    .limit(32)\n+                    .toList()\n+        );\n+\n+        \/\/ callerClass -> Unsafe.methodName\n+        String methodName = stack.get(0).getMethodName();\n+        Class<?> callerClass = stack.get(1).getDeclaringClass();\n+\n+        switch (MEMORY_ACCESS_OPTION) {\n+            case WARN -> {\n+                if (trySetMemoryAccessWarned()) {\n+                    log(multiLineWarning(callerClass, methodName));\n+                }\n+            }\n+            case DEBUG -> {\n+                String warning = singleLineWarning(callerClass, methodName);\n+                StringBuilder sb = new StringBuilder(warning);\n+                stack.stream()\n+                        .skip(1)\n+                        .forEach(f ->\n+                                sb.append(System.lineSeparator()).append(\"\\tat \" + f)\n+                        );\n+                log(sb.toString());\n+            }\n+            case DENY -> {\n+                throw new UnsupportedOperationException(methodName);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Represents the options for the depreacted method-access methods.\n+     *\/\n+    private enum MemoryAccessOption {\n+        \/**\n+         * Allow use of the memory-access methods with no warnings.\n+         *\/\n+        ALLOW,\n+        \/**\n+         * Warning on the first use of a memory-access method.\n+         *\/\n+        WARN,\n+        \/**\n+         * One-line warning and a stack trace on every use of a memory-access method.\n+         *\/\n+        DEBUG,\n+        \/**\n+         * Deny use of the memory-access methods.\n+         *\/\n+        DENY;\n+\n+        private static MemoryAccessOption defaultValue() {\n+            return ALLOW;\n+        }\n+\n+        \/**\n+         * Return the value.\n+         *\/\n+        static MemoryAccessOption value() {\n+            String value = VM.getSavedProperty(\"sun.misc.unsafe.memory.access\");\n+            if (value != null) {\n+                return switch (value) {\n+                    case \"allow\" -> MemoryAccessOption.ALLOW;\n+                    case \"warn\"  -> MemoryAccessOption.WARN;\n+                    case \"debug\" -> MemoryAccessOption.DEBUG;\n+                    case \"deny\"  -> MemoryAccessOption.DENY;\n+                    default -> {\n+                        \/\/ emit warning\n+                        log(\"--sun-misc-unsafe-memory-access ignored, value '\" + value +\n+                                \"' is not a recognized value\");\n+                        yield defaultValue();\n+                    }\n+                };\n+            } else {\n+                return defaultValue();\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Holder for StackWalker that retains class references.\n+     *\/\n+    private static class StackWalkerHolder {\n+        static final StackWalker INSTANCE;\n+        static {\n+            PrivilegedAction<StackWalker> pa = () ->\n+                    StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n+            @SuppressWarnings(\"removal\")\n+            StackWalker walker = AccessController.doPrivileged(pa);\n+            INSTANCE = walker;\n+        }\n+    }\n+\n+    \/**\n+     * Return the multi-line warning message for when the given class invokes the\n+     * given the Unsafe method.\n+     *\/\n+    private static String multiLineWarning(Class<?> callerClass, String methodName) {\n+        return String.format(\n+                \"\"\"\n+                WARNING: A terminally deprecated method in sun.misc.Unsafe has been called\n+                WARNING: sun.misc.Unsafe::%s has been called by %s\n+                WARNING: Please consider reporting this to the maintainers of %s\n+                WARNING: sun.misc.Unsafe::%s will be removed in a future release\"\"\",\n+                methodName, callerAndLocation(callerClass), callerClass, methodName);\n+    }\n+\n+    \/**\n+     * Return the single-line warning message for when the given class invokes the\n+     * given the Unsafe method.\n+     *\/\n+    private static String singleLineWarning(Class<?> callerClass, String methodName) {\n+        return String.format(\"WARNING: sun.misc.Unsafe::%s called by %s\",\n+                methodName, callerAndLocation(callerClass));\n+    }\n+\n+    \/**\n+     * Returns a string with the caller class and the location URL from the CodeSource.\n+     *\/\n+    private static String callerAndLocation(Class<?> callerClass) {\n+        PrivilegedAction<ProtectionDomain> pa = callerClass::getProtectionDomain;\n+        @SuppressWarnings(\"removal\")\n+        CodeSource cs = AccessController.doPrivileged(pa).getCodeSource();\n+        String who = callerClass.getName();\n+        if (cs != null && cs.getLocation() != null) {\n+            who += \" (\" + cs.getLocation() + \")\";\n+        }\n+        return who;\n+    }\n+\n+    \/**\n+     * Prints the given message to the standard error.\n+     *\/\n+    private static void log(String message) {\n+        VM.initialErr().println(message);\n+    }\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java","additions":753,"deletions":82,"binary":false,"changes":835,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.nio.ByteBuffer;\n+import sun.misc.Unsafe;\n+\n+\/**\n+ * Launched by UnsafeMemoryAccessWarnings with a '+' delimited list of methods to invoke.\n+ *\/\n+@SuppressWarnings(\"removal\")\n+public class TryUnsafeMemoryAccess {\n+    private static final Unsafe UNSAFE;\n+    static {\n+        try {\n+            Field f = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+            f.setAccessible(true);\n+            UNSAFE = (Unsafe) f.get(null);\n+        } catch (Exception e) {\n+            throw new ExceptionInInitializerError(e);\n+        }\n+    }\n+    private static long address;\n+    private static long offset;\n+\n+    static class TestClass {\n+        long value;\n+        TestClass(long value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    \/**\n+     * The argument is a list of names of no-arg static methods in this class to invoke.\n+     * The names are separated with a '+'.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+        String[] methodNames = args[0].split(\"\\\\+\");\n+        for (String methodName : methodNames) {\n+            Method m = TryUnsafeMemoryAccess.class.getDeclaredMethod(methodName);\n+            try {\n+                m.invoke(null);\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    \/\/ a selection of Unsafe memory access methods to test\n+\n+    static void allocateMemory() {\n+        address = UNSAFE.allocateMemory(100);\n+    }\n+\n+    static void freeMemory() {\n+        if (address == 0)\n+            throw new RuntimeException(\"allocateMemory not called\");\n+        UNSAFE.freeMemory(address);\n+    }\n+\n+    static void objectFieldOffset() throws Exception {\n+        Field f = TestClass.class.getDeclaredField(\"value\");\n+        offset = UNSAFE.objectFieldOffset(f);\n+    }\n+\n+    static void getLong() {\n+        if (offset == 0)\n+            throw new RuntimeException(\"objectFieldOffset not called\");\n+        var obj = new TestClass(99);\n+        long value = UNSAFE.getLong(obj, offset);\n+        if (value != 99) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    static void putLong() {\n+        if (offset == 0)\n+            throw new RuntimeException(\"objectFieldOffset not called\");\n+        var obj = new TestClass(0);\n+        UNSAFE.putLong(obj, offset, 99);\n+        if (obj.value != 99) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    static void invokeCleaner() {\n+        var dbb = ByteBuffer.allocateDirect(1000);\n+        UNSAFE.invokeCleaner(dbb);\n+    }\n+\n+    \/**\n+     * Invoke Unsafe.allocateMemory reflectively.\n+     *\/\n+    static void reflectivelyAllocateMemory() throws Exception {\n+        Method allocateMemory = Unsafe.class.getMethod(\"allocateMemory\", long.class);\n+        address = (long) allocateMemory.invoke(UNSAFE, 100);\n+    }\n+\n+    \/**\n+     * Invoke Unsafe.freeMemory reflectively.\n+     *\/\n+    static void reflectivelyFreeMemory() throws Exception {\n+        if (address == 0)\n+            throw new RuntimeException(\"allocateMemory not called\");\n+        Method freeMemory = Unsafe.class.getMethod(\"freeMemory\", long.class);\n+        freeMemory.invoke(UNSAFE, address);\n+    }\n+\n+    \/**\n+     * Used to test that the property value from startup is used.\n+     *\/\n+    static void setSystemPropertyToAllow() {\n+        System.setProperty(\"sun.misc.unsafe.memory.access\", \"allow\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/misc\/TryUnsafeMemoryAccess.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331670\n+ * @summary Basic test for --sun-misc-unsafe-memory-access=<value>\n+ * @library \/test\/lib\n+ * @compile TryUnsafeMemoryAccess.java\n+ * @run junit UnsafeMemoryAccessWarnings\n+ *\/\n+\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+class UnsafeMemoryAccessWarnings {\n+\n+    \/**\n+     * Test default is \"allow\"\n+     *\/\n+    @Test\n+    void testDefault() throws Exception {\n+        test(\"allocateMemory+freeMemory+objectFieldOffset+putLong+getLong+invokeCleaner\")\n+            .shouldNotContain(\"WARNING: A terminally deprecated method in sun.misc.Unsafe has been called\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::allocateMemory\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::freeMemory\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::objectFieldOffset\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::putLong\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::getLong\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::invokeCleaner\");\n+    }\n+\n+    \/**\n+     * Test --sun-misc-unsafe-memory-access=allow\n+     *\/\n+    @Test\n+    void testAllow() throws Exception {\n+        test(\"allocateMemory+freeMemory+objectFieldOffset+putLong+getLong+invokeCleaner\",\n+                \"--sun-misc-unsafe-memory-access=allow\")\n+            .shouldNotContain(\"WARNING: A terminally deprecated method in sun.misc.Unsafe has been called\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::allocateMemory\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::freeMemory\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::objectFieldOffset\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::putLong\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::getLong\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::invokeCleaner\");\n+    }\n+\n+    \/**\n+     * Test --sun-misc-unsafe-memory-access=warn\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(strings = {\n+            \"allocateMemory+freeMemory\",\n+            \"objectFieldOffset+putLong+getLong\",\n+            \"invokeCleaner\"\n+    })\n+    void testWarn(String input) throws Exception {\n+        var output = test(input, \"--sun-misc-unsafe-memory-access=warn\");\n+\n+        \/\/ should be warning printed for the first memory access method\n+        String[] methodNames = input.split(\"\\\\+\");\n+        String firstMethodName = methodNames[0];\n+        output.shouldContain(\"WARNING: A terminally deprecated method in sun.misc.Unsafe has been called\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::\" + firstMethodName + \" has been called by\")\n+            .shouldContain(\"WARNING: Please consider reporting this to the maintainers of\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::\" + firstMethodName + \" will be removed in a future release\");\n+\n+        \/\/ should be no warning for the second\/subsequent memory access methods\n+        int index = 1;\n+        while (index < methodNames.length) {\n+            String methodName = methodNames[index++];\n+            output.shouldNotContain(\"WARNING: sun.misc.Unsafe::\" + methodName);\n+        }\n+    }\n+\n+    \/**\n+     * Test --sun-misc-unsafe-memory-access=debug\n+     *\/\n+    @Test\n+    void testDebug() throws Exception {\n+        test(\"allocateMemory+freeMemory+objectFieldOffset+putLong+getLong+invokeCleaner\",\n+                \"--sun-misc-unsafe-memory-access=debug\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::allocateMemory called\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::freeMemory called\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::objectFieldOffset called\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::putLong called\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::getLong called\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::invokeCleaner called\");\n+    }\n+\n+    \/**\n+     * Test --sun-misc-unsafe-memory-access=deny\n+     *\/\n+    @Test\n+    void testDeny() throws Exception {\n+        test(\"allocateMemory+objectFieldOffset+invokeCleaner\", \"--sun-misc-unsafe-memory-access=deny\")\n+            .shouldContain(\"java.lang.UnsupportedOperationException: allocateMemory\")\n+            .shouldContain(\"java.lang.UnsupportedOperationException: objectFieldOffset\")\n+            .shouldContain(\"java.lang.UnsupportedOperationException: invokeCleaner\");\n+    }\n+\n+    \/**\n+     * Test invoking Unsafe methods with core reflection.\n+     *\/\n+    @Test\n+    void testInvokeReflectively() throws Exception {\n+        test(\"reflectivelyAllocateMemory+reflectivelyFreeMemory\", \"--sun-misc-unsafe-memory-access=allow\")\n+            .shouldNotContain(\"WARNING: A terminally deprecated method in sun.misc.Unsafe has been called\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::allocateMemory\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::freeMemory\");\n+\n+        test(\"reflectivelyAllocateMemory+reflectivelyFreeMemory\", \"--sun-misc-unsafe-memory-access=warn\")\n+            .shouldContain(\"WARNING: A terminally deprecated method in sun.misc.Unsafe has been called\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::allocateMemory has been called by\")\n+            .shouldContain(\"WARNING: Please consider reporting this to the maintainers of\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::allocateMemory will be removed in a future release\")\n+            .shouldNotContain(\"WARNING: sun.misc.Unsafe::freeMemory\");\n+\n+        test(\"reflectivelyAllocateMemory+reflectivelyFreeMemory\", \"--sun-misc-unsafe-memory-access=debug\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::allocateMemory called\")\n+            .shouldContain(\"WARNING: sun.misc.Unsafe::freeMemory called\");\n+\n+        test(\"reflectivelyAllocateMemory\", \"--sun-misc-unsafe-memory-access=deny\")\n+            .shouldContain(\"java.lang.UnsupportedOperationException: allocateMemory\");\n+    }\n+\n+    \/**\n+     * If --sun-misc-unsafe-memory-access specified more than once then last one wins.\n+     *\/\n+    @Test\n+    void testLastOneWins() throws Exception {\n+        test(\"allocateMemory+objectFieldOffset+invokeCleaner\",\n+                \"--sun-misc-unsafe-memory-access=allow\",\n+                \"--sun-misc-unsafe-memory-access=deny\")\n+            .shouldContain(\"java.lang.UnsupportedOperationException: allocateMemory\")\n+            .shouldContain(\"java.lang.UnsupportedOperationException: objectFieldOffset\")\n+            .shouldContain(\"java.lang.UnsupportedOperationException: invokeCleaner\");\n+    }\n+\n+    \/**\n+     * Test --sun-misc-unsafe-memory-access with invalid values.\n+     *\/\n+    @ParameterizedTest\n+    @ValueSource(strings = { \"\", \"bad\" })\n+    void testInvalidValues(String value) throws Exception {\n+        test(\"allocateMemory\", \"--sun-misc-unsafe-memory-access=\" + value)\n+            .shouldContain(\"--sun-misc-unsafe-memory-access ignored\");\n+    }\n+\n+    \/**\n+     * Test System.setProperty(\"sun.misc.unsafe.memory.access\", \"allow\")\n+     * The saved value from startup should be used, not the system property set a run-time.\n+     *\/\n+    @Test\n+    void testSetPropertyToAllow() throws Exception {\n+        test(\"setSystemPropertyToAllow+objectFieldOffset\", \"--sun-misc-unsafe-memory-access=deny\")\n+            .shouldContain(\"java.lang.UnsupportedOperationException: objectFieldOffset\");\n+    }\n+\n+    \/**\n+     * Launch TryUnsafeMemoryAccess with the given arguments and VM options.\n+     *\/\n+    private OutputAnalyzer test(String action, String... vmopts) throws Exception {\n+        Stream<String> s1 = Stream.of(vmopts);\n+        Stream<String> s2 = Stream.of(\"TryUnsafeMemoryAccess\", action);\n+        String[] opts = Stream.concat(s1, s2).toArray(String[]::new);\n+        var outputAnalyzer = ProcessTools\n+                .executeTestJava(opts)\n+                .outputTo(System.err)\n+                .errorTo(System.err);\n+        assertEquals(0, outputAnalyzer.getExitValue());\n+        return outputAnalyzer;\n+    }\n+}\n","filename":"test\/jdk\/sun\/misc\/UnsafeMemoryAccessWarnings.java","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,0 +167,1 @@\n+        @SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocFromTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,0 +136,1 @@\n+        @SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/BulkOps.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverConstant.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNew.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNewHeap.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstant.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantFP.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantHeap.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantMapped.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantShared.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverPollutedBuffer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverPollutedSegments.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentCopyUnsafe.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentGetUnsafe.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentZeroUnsafe.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ParallelSum.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/UnrolledAccess.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -17,0 +17,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/GetArrayUnsafeXorOpImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.sun.misc;\n+\n+import java.lang.reflect.Field;\n+import java.util.concurrent.TimeUnit;\n+import sun.misc.Unsafe;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@SuppressWarnings(\"removal\")\n+public class UnsafeOps {\n+    static final Unsafe U;\n+    static {\n+        try {\n+            Field f = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+            f.setAccessible(true);\n+            U = (Unsafe) f.get(null);\n+        } catch (ReflectiveOperationException ex) {\n+            throw new IllegalStateException();\n+        }\n+    }\n+\n+    private static class TestClass {\n+        long value;\n+    }\n+\n+    private Object object;\n+    private long valueOffset;\n+    private long address;\n+\n+    @Setup\n+    public void setup() throws Exception {\n+        object = new TestClass();\n+        Field f = TestClass.class.getDeclaredField(\"value\");\n+        valueOffset = U.objectFieldOffset(f);\n+\n+        address = U.allocateMemory(1000);\n+    }\n+\n+    @TearDown\n+    public void finish() {\n+        U.freeMemory(address);\n+    }\n+\n+    @Benchmark\n+    public void putLongOnHeap() {\n+        U.putLong(object, 0, 99);\n+    }\n+\n+    @Benchmark\n+    public long getLongOnHeap() {\n+        return U.getLong(object, 0);\n+    }\n+\n+    @Benchmark\n+    public void putLongOffHeap() {\n+        U.putLong(null, address, 99);\n+    }\n+\n+    @Benchmark\n+    public long getLongOffHeap() {\n+        return U.getLong(null, address);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/sun\/misc\/UnsafeOps.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}