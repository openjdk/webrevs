{"files":[{"patch":"@@ -44,0 +44,1 @@\n+#include \"opto\/opcodes.hpp\"\n@@ -2734,0 +2735,15 @@\n+IfNode* CountedLoopNode::find_multiversion_if_from_multiversion_fast_main_loop() {\n+  assert(is_main_loop() && is_multiversion_fast_loop(), \"must be multiversion fast main loop\");\n+  CountedLoopEndNode* pre_end = find_pre_loop_end();\n+  if (pre_end == nullptr) { return nullptr; }\n+  Node* pre_entry = pre_end->loopnode()->in(LoopNode::EntryControl);\n+  const Predicates predicates(pre_entry);\n+  IfTrueNode* before_predicates = predicates.entry()->isa_IfTrue();\n+  if (before_predicates != nullptr &&\n+      before_predicates->in(0)->is_If() &&\n+      before_predicates->in(0)->in(1)->is_OpaqueMultiversioning()) {\n+    return before_predicates->in(0)->as_If();\n+  }\n+  return nullptr;\n+}\n+\n@@ -4539,0 +4555,35 @@\n+void PhaseIdealLoop::eliminate_useless_multiversion_if() {\n+  if (_multiversion_opaque_nodes.size() == 0) {\n+    return;\n+  }\n+\n+  ResourceMark rm;\n+  Unique_Node_List useful_multiversioning_opaque_nodes;\n+\n+  for (LoopTreeIterator iter(_ltree_root); !iter.done(); iter.next()) {\n+    IdealLoopTree* lpt = iter.current();\n+    if (lpt->_child == nullptr && lpt->is_counted()) {\n+      CountedLoopNode* head = lpt->_head->as_CountedLoop();\n+      if (head->is_main_loop() && head->is_multiversion_fast_loop()) {\n+        IfNode* multiversion_if = head->find_multiversion_if_from_multiversion_fast_main_loop();\n+        if (multiversion_if != nullptr) {\n+            useful_multiversioning_opaque_nodes.push(multiversion_if->in(1)->as_OpaqueMultiversioning());\n+        }\n+      }\n+    }\n+  }\n+\n+  for (uint i = 0; i < _multiversion_opaque_nodes.size(); i++) {\n+    OpaqueMultiversioningNode* opaque = _multiversion_opaque_nodes.at(i)->as_OpaqueMultiversioning();\n+    if (!useful_multiversioning_opaque_nodes.member(opaque)) {\n+      if (opaque->is_delayed_slow_loop()) {\n+        \/\/ We cannot hack the node directly, otherwise the slow_loop will complain that it cannot\n+        \/\/ find the multiversioning opaque node. Instead, we mark the opaque node as useless, and\n+        \/\/ it can be constant folded during IGVN.\n+        opaque->set_useless();\n+        _igvn._worklist.push(opaque);\n+      }\n+    }\n+  }\n+}\n+\n@@ -4808,0 +4859,1 @@\n+  eliminate_useless_multiversion_if();\n@@ -6599,0 +6651,3 @@\n+  if (!_verify_only && n->Opcode() == Op_OpaqueMultiversioning) {\n+    _multiversion_opaque_nodes.push(n);\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":55,"deletions":0,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -293,0 +293,2 @@\n+  IfNode* find_multiversion_if_from_multiversion_fast_main_loop();\n+\n@@ -935,0 +937,1 @@\n+  Node_List _multiversion_opaque_nodes;\n@@ -1456,0 +1459,1 @@\n+  void eliminate_useless_multiversion_if();\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -794,1 +794,4 @@\n-  assert(bol->Opcode() == Op_Bool, \"Unexpected node\");\n+  if (bol->Opcode() != Op_Bool) {\n+    assert(false, \"Expected Bool, but got %s\", NodeClassNames[bol->Opcode()]);\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -85,0 +85,11 @@\n+Node* OpaqueMultiversioningNode::Identity(PhaseGVN* phase) {\n+  \/\/ Constant fold the multiversion_if. Since the slow_loop is still delayed,\n+  \/\/ i.e. we have not yet added any possibly failing condition, we can just\n+  \/\/ take the true branch in all cases.\n+  if (!_is_useful) {\n+    assert(_is_delayed_slow_loop, \"the slow_loop should still be delayed\");\n+    return in(1);\n+  }\n+  return Opaque1Node::Identity(phase);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/opaquenode.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -104,0 +104,1 @@\n+  bool _is_useful;\n@@ -107,1 +108,1 @@\n-      Opaque1Node(C, n), _is_delayed_slow_loop(true)\n+      Opaque1Node(C, n), _is_delayed_slow_loop(true), _is_useful(true)\n@@ -114,1 +115,12 @@\n-  void notify_slow_loop_that_it_can_resume_optimizations() { _is_delayed_slow_loop = false; }\n+\n+  void notify_slow_loop_that_it_can_resume_optimizations() {\n+    assert(_is_useful, \"must still be useful\");\n+    _is_delayed_slow_loop = false;\n+  }\n+\n+  void set_useless() {\n+    assert(_is_delayed_slow_loop, \"must still be delayed\");\n+    _is_useful = false;\n+  }\n+\n+  virtual Node* Identity(PhaseGVN* phase);\n","filename":"src\/hotspot\/share\/opto\/opaquenode.hpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+\/*\n+ * @test\n+ * @bug 8350756\n+ * @summary Test case where the multiversion fast_loop disappears, and we should\n+ *          constant fold the multiversion_if, to remove the slow_loop.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestMultiversionRemoveUselessSlowLoop\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*Test*::test\n+ *                   -XX:-TieredCompilation -Xcomp -XX:PerMethodTrapLimit=0\n+ *                   compiler.loopopts.superword.TestMultiversionRemoveUselessSlowLoop\n+ *\/\n+\n+public class TestMultiversionRemoveUselessSlowLoop {\n+    static long instanceCount;\n+    static int iFld;\n+    static int iFld1;\n+\n+    \/\/ The inner loop is Multiversioned, then PreMainPost and Unroll.\n+    \/\/ Eventually, both the fast and slow loops (pre main and post) disappear,\n+    \/\/ and leave us with a simple if-diamond using the multiversion_if.\n+    \/\/\n+    \/\/ Verification code in PhaseIdealLoop::conditional_move finds this diamond\n+    \/\/ and expects a Bool but gets an OpaqueMultiversioning instead.\n+    \/\/\n+    \/\/ If we let the multiversion_if constant fold soon after the main fast loop\n+    \/\/ disappears, then this issue does not occur any more.\n+    static void test() {\n+        boolean b2 = true;\n+        for (int i = 0; i < 1000; i++) {\n+            for (int i21 = 82; i21 > 9; --i21) {\n+                if (b2)\n+                    break;\n+                iFld1 = iFld;\n+                b2 = true;\n+            }\n+            instanceCount = iFld1;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMultiversionRemoveUselessSlowLoop.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}