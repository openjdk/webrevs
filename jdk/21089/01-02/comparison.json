{"files":[{"patch":"@@ -141,1 +141,1 @@\n-      marking_stack()->push(PSMarkTask(state));\n+      marking_stack()->push(ScannerTask(state));\n@@ -171,1 +171,1 @@\n-  PSMarkTask task;\n+  ScannerTask task;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,33 +60,0 @@\n-class PSMarkTask {\n-private:\n-  void* _holder;\n-\n-  static const uintptr_t PartialArrayStateBit = 1;\n-  static const uintptr_t TagSize = 1;\n-  static const uintptr_t TagAlignment = 1 << TagSize;\n-public:\n-  PSMarkTask() : _holder(nullptr) { }\n-\n-  explicit PSMarkTask(oop obj) : _holder(obj) {\n-    assert(_holder != nullptr, \"Not allowed to set null task queue element\");\n-    assert(is_aligned(_holder, TagAlignment), \"Misaligned\");\n-  }\n-\n-  explicit PSMarkTask(PartialArrayState* p) : _holder((void*)((uintptr_t)p | PartialArrayStateBit)) {\n-    assert(is_aligned(p, TagAlignment), \"Misaligned\");\n-  }\n-\n-  oop obj() const {\n-    assert(is_oop(), \"Trying to read partial array state \" PTR_FORMAT \" as oop\", p2i(_holder));\n-    return cast_to_oop(_holder);\n-  }\n-\n-  PartialArrayState* to_partial_array_state() const {\n-    assert(is_partial_array_state(), \"Trying to read oop \" PTR_FORMAT \" as partial array state\", p2i(_holder));\n-    return static_cast<PartialArrayState*>(static_cast<void*>(static_cast<char*>(_holder) - PartialArrayStateBit));\n-  }\n-\n-  bool is_oop() const { return !is_partial_array_state(); }\n-  bool is_partial_array_state() const { return ((uintptr_t)_holder & PartialArrayStateBit) != 0; }\n-};\n-\n@@ -103,1 +70,1 @@\n-  typedef OverflowTaskQueue<PSMarkTask, mtGC>            PSMarkTaskQueue;\n+  typedef OverflowTaskQueue<ScannerTask, mtGC>           PSMarkTaskQueue;\n@@ -241,1 +208,1 @@\n-  static bool steal(int queue_num, PSMarkTask& t);\n+  static bool steal(int queue_num, ScannerTask& t);\n@@ -251,1 +218,1 @@\n-  inline void follow_contents(const PSMarkTask& task);\n+  inline void follow_contents(const ScannerTask& task);\n@@ -255,1 +222,1 @@\n-  TASKQUEUE_STATS_ONLY(inline void record_steal(PSMarkTask task);)\n+  TASKQUEUE_STATS_ONLY(inline void record_steal(ScannerTask task);)\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.hpp","additions":4,"deletions":37,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-inline bool ParCompactionManager::steal(int queue_num, PSMarkTask& t) {\n+inline bool ParCompactionManager::steal(int queue_num, ScannerTask& t) {\n@@ -60,1 +60,1 @@\n-  marking_stack()->push(PSMarkTask(obj));\n+  marking_stack()->push(ScannerTask(obj));\n@@ -64,1 +64,1 @@\n-  marking_stack()->push(PSMarkTask(stat));\n+  marking_stack()->push(ScannerTask(stat));\n@@ -129,1 +129,1 @@\n-inline void ParCompactionManager::follow_contents(const PSMarkTask& task) {\n+inline void ParCompactionManager::follow_contents(const ScannerTask& task) {\n@@ -134,1 +134,1 @@\n-    oop obj = task.obj();\n+    oop obj = task.to_oop();\n@@ -214,1 +214,1 @@\n-void ParCompactionManager::record_steal(PSMarkTask task) {\n+void ParCompactionManager::record_steal(ScannerTask task) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1204,1 +1204,1 @@\n-    PSMarkTask task;\n+    ScannerTask task;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -578,1 +578,1 @@\n-\/\/ Discriminated union over oop*, narrowOop*, and PartialArrayState.\n+\/\/ Discriminated union over oop\/oop*, narrowOop*, and PartialArrayState.\n@@ -580,0 +580,2 @@\n+\/\/ Oop\/oop* are overloaded using the same tag because they can not appear at the\n+\/\/ same time.\n@@ -612,0 +614,2 @@\n+  explicit ScannerTask(oop p) : _p(encode(p, OopTag)) {}\n+\n@@ -639,0 +643,4 @@\n+  oop to_oop() const {\n+    return cast_to_oop(decode(OopTag));\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}