{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shared\/partialArraySplitter.inline.hpp\"\n@@ -50,1 +51,1 @@\n-PartialArrayStateAllocator* ParCompactionManager::_partial_array_state_allocator = nullptr;\n+PartialArrayStateManager* ParCompactionManager::_partial_array_state_manager = nullptr;\n@@ -61,2 +62,2 @@\n-  : _partial_array_stepper(ParallelGCThreads, ObjArrayMarkingStride),\n-    _mark_and_push_closure(this, ref_processor) {\n+  :_partial_array_splitter(_partial_array_state_manager, ParallelGCThreads),\n+   _mark_and_push_closure(this, ref_processor) {\n@@ -71,5 +72,0 @@\n-\n- \/\/ Initialize to a bad value; fixed by initialize().\n-  _partial_array_state_allocator_index = UINT_MAX;\n-\n-  TASKQUEUE_STATS_ONLY(reset_stats());\n@@ -90,2 +86,3 @@\n-  assert(_partial_array_state_allocator == nullptr, \"Attempt to initialize twice\");\n-  _partial_array_state_allocator = new PartialArrayStateAllocator(ParallelGCThreads);\n+  assert(_partial_array_state_manager == nullptr, \"Attempt to initialize twice\");\n+  _partial_array_state_manager\n+    = new PartialArrayStateManager(parallel_gc_threads);\n@@ -104,1 +101,0 @@\n-    _manager_array[i]->_partial_array_state_allocator_index = i;\n@@ -130,33 +126,16 @@\n-  size_t array_length = objArrayOop(obj)->length();\n-  PartialArrayTaskStepper::Step step = _partial_array_stepper.start(array_length);\n-  if (step._ncreate > 0) {\n-    TASKQUEUE_STATS_ONLY(++_arrays_chunked);\n-    PartialArrayState* state =\n-    _partial_array_state_allocator->allocate(_partial_array_state_allocator_index,\n-                                             obj, nullptr,\n-                                             step._index,\n-                                             array_length,\n-                                             step._ncreate);\n-    for (uint i = 0; i < step._ncreate; ++i) {\n-      marking_stack()->push(ScannerTask(state));\n-    }\n-    TASKQUEUE_STATS_ONLY(_array_chunk_pushes += step._ncreate);\n-  }\n-  follow_array(objArrayOop(obj), 0, checked_cast<int>(step._index));\n-}\n-\n-void ParCompactionManager::process_array_chunk(PartialArrayState* state) {\n-  TASKQUEUE_STATS_ONLY(++_array_chunks_processed);\n-\n-  \/\/ Claim a chunk.  Push additional tasks before processing the claimed\n-  \/\/ chunk to allow other workers to steal while we're processing.\n-  PartialArrayTaskStepper::Step step = _partial_array_stepper.next(state);\n-  if (step._ncreate > 0) {\n-    state->add_references(step._ncreate);\n-    for (uint i = 0; i < step._ncreate; ++i) {\n-      push(state);\n-    }\n-    TASKQUEUE_STATS_ONLY(_array_chunk_pushes += step._ncreate);\n-  }\n-  int start = checked_cast<int>(step._index);\n-  int end = checked_cast<int>(step._index + _partial_array_stepper.chunk_size());\n+  objArrayOop obj_array = objArrayOop(obj);\n+  size_t array_length = obj_array->length();\n+  size_t initial_chunk_size =\n+    \/\/ The destination array is unused when processing states.\n+    _partial_array_splitter.start(&_marking_stack, obj_array, nullptr, array_length);\n+  int end = checked_cast<int>(initial_chunk_size);\n+  follow_array(obj_array, 0, end);\n+}\n+\n+void ParCompactionManager::process_array_chunk(PartialArrayState* state, bool stolen) {\n+  \/\/ Access before release by claim().\n+  oop obj = state->source();\n+  PartialArraySplitter::Claim claim =\n+    _partial_array_splitter.claim(state, &_marking_stack, stolen);\n+  int start = checked_cast<int>(claim._start);\n+  int end = checked_cast<int>(claim._end);\n@@ -164,4 +143,1 @@\n-  follow_array(objArrayOop(state->source()), start, end);\n-\n-  \/\/ Release reference to state, now that we're done with it.\n-  _partial_array_state_allocator->release(_partial_array_state_allocator_index, state);\n+  follow_array(objArrayOop(obj), start, end);\n@@ -177,1 +153,1 @@\n-        follow_contents(task);\n+        follow_contents(task, false);\n@@ -181,1 +157,1 @@\n-      follow_contents(task);\n+      follow_contents(task, false);\n@@ -234,14 +210,0 @@\n-void ParCompactionManager::print_local_stats(outputStream* const out, uint i) const {\n-  #define FMT \" \" SIZE_FORMAT_W(10)\n-  out->print_cr(\"%3u\" FMT FMT FMT FMT,\n-                i, _array_chunk_pushes, _array_chunk_steals,\n-                _arrays_chunked, _array_chunks_processed);\n-  #undef FMT\n-}\n-\n-static const char* const pm_stats_hdr[] = {\n-  \"    ----partial array----     arrays      array\",\n-  \"thr       push      steal    chunked     chunks\",\n-  \"--- ---------- ---------- ---------- ----------\"\n-};\n-\n@@ -249,7 +211,0 @@\n-  if (!log_is_enabled(Trace, gc, task, stats)) {\n-    return;\n-  }\n-  Log(gc, task, stats) log;\n-  ResourceMark rm;\n-  LogStream ls(log.trace());\n-\n@@ -258,5 +213,8 @@\n-  const uint hlines = sizeof(pm_stats_hdr) \/ sizeof(pm_stats_hdr[0]);\n-  for (uint i = 0; i < hlines; ++i) ls.print_cr(\"%s\", pm_stats_hdr[i]);\n-  for (uint i = 0; i < ParallelGCThreads; ++i) {\n-    _manager_array[i]->print_local_stats(&ls, i);\n-    _manager_array[i]->reset_stats();\n+  auto get_pa_stats = [&](uint i) {\n+    return _manager_array[i]->partial_array_task_stats();\n+  };\n+  PartialArrayTaskStats::log_set(ParallelGCThreads, get_pa_stats,\n+                                 \"Partial Array Task Stats\");\n+  uint parallel_gc_threads = ParallelScavengeHeap::heap()->workers().max_workers();\n+  for (uint i = 0; i < parallel_gc_threads; ++i) {\n+    get_pa_stats(i)->reset();\n@@ -266,3 +224,2 @@\n-void ParCompactionManager::reset_stats() {\n-  _array_chunk_pushes = _array_chunk_steals = 0;\n-  _arrays_chunked = _array_chunks_processed = 0;\n+PartialArrayTaskStats* ParCompactionManager::partial_array_task_stats() {\n+  return _partial_array_splitter.stats();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":36,"deletions":79,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -30,1 +30,3 @@\n-#include \"gc\/shared\/partialArrayTaskStepper.hpp\"\n+#include \"gc\/shared\/partialArraySplitter.hpp\"\n+#include \"gc\/shared\/partialArrayTaskStats.hpp\"\n+#include \"gc\/shared\/partialArrayState.hpp\"\n@@ -44,2 +46,0 @@\n-class PartialArrayState;\n-class PartialArrayStateAllocator;\n@@ -80,1 +80,0 @@\n-  static PartialArrayStateAllocator*  _partial_array_state_allocator;\n@@ -82,3 +81,2 @@\n-  PartialArrayTaskStepper       _partial_array_stepper;\n-  uint                          _partial_array_state_allocator_index;\n-  PSMarkTaskQueue               _marking_stack;\n+  static PartialArrayStateManager*  _partial_array_state_manager;\n+  PartialArraySplitter              _partial_array_splitter;\n@@ -86,6 +84,1 @@\n-#if TASKQUEUE_STATS\n-  size_t                        _array_chunk_pushes;\n-  size_t                        _array_chunk_steals;\n-  size_t                        _arrays_chunked;\n-  size_t                        _array_chunks_processed;\n-#endif \/\/ TASKQUEUE_STATS\n+  PSMarkTaskQueue               _marking_stack;\n@@ -162,2 +155,1 @@\n-  void print_local_stats(outputStream* const out, uint i) const;\n-  void reset_stats();\n+  PartialArrayTaskStats* partial_array_task_stats();\n@@ -218,1 +210,1 @@\n-  inline void follow_contents(const ScannerTask& task);\n+  inline void follow_contents(const ScannerTask& task, bool stolen);\n@@ -220,3 +212,1 @@\n-  void process_array_chunk(PartialArrayState* state);\n-\n-  TASKQUEUE_STATS_ONLY(inline void record_steal(ScannerTask task);)\n+  void process_array_chunk(PartialArrayState* state, bool stolen);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.hpp","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-inline void ParCompactionManager::follow_contents(const ScannerTask& task) {\n+inline void ParCompactionManager::follow_contents(const ScannerTask& task, bool stolen) {\n@@ -132,1 +132,1 @@\n-    process_array_chunk(task.to_partial_array_state());\n+    process_array_chunk(task.to_partial_array_state(), stolen);\n@@ -212,9 +212,0 @@\n-\n-#if TASKQUEUE_STATS\n-void ParCompactionManager::record_steal(ScannerTask task) {\n-  if (task.is_partial_array_state()) {\n-    ++_array_chunk_steals;\n-  }\n-}\n-#endif \/\/ TASKQUEUE_STATS\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.inline.hpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1215,2 +1215,1 @@\n-      TASKQUEUE_STATS_ONLY(cm->record_steal(task));\n-      cm->follow_contents(task);\n+      cm->follow_contents(task, true);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}