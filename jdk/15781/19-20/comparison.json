{"files":[{"patch":"@@ -377,0 +377,6 @@\n+static void *pthread_test_runnable(void *runnable) {\n+  TestRunnable* r = reinterpret_cast<TestRunnable*>(runnable);\n+  r->runUnitTest();\n+  return nullptr;\n+}\n+\n@@ -386,14 +392,10 @@\n-    PretouchMemoryRunnable prunnable(heap, 1 * G);\n-    UseMemoryRunnable urunnable(heap, 1 * G);\n-    const long testDurationMillis = 1000;\n-    const size_t nThreads = os::active_processor_count();\n-    Semaphore done(0);\n-    UnitTestThread** t = NEW_C_HEAP_ARRAY(UnitTestThread*, nThreads + 1, mtInternal);\n-    t[0] = new UnitTestThread(&urunnable, &done, testDurationMillis);\n-\n-    for (size_t i = 1; i <= nThreads; i++) {\n-      t[i] = new UnitTestThread(&prunnable, &done, testDurationMillis);\n-    }\n-\n-    for (size_t i = 0; i <= nThreads; i++) {\n-      t[i]->doit();\n+    UseMemoryRunnable use(heap, 1 * G);\n+    PretouchMemoryRunnable pretouch(heap, 1 * G);\n+    pthread_t threads[8];\n+    pthread_attr_t attributes[8];\n+    for (int i = 0; i < 8; i++) {\n+      pthread_attr_init(attributes + i);\n+      TestRunnable *runnable = &pretouch;\n+      if (i == 0) runnable = &use;\n+      pthread_create(threads + i, attributes + i, pthread_test_runnable, runnable);\n+      pthread_attr_destroy(attributes + i);\n@@ -401,3 +403,2 @@\n-\n-    for (size_t i = 0; i <= nThreads; i++) {\n-      done.wait();\n+    for (int i = 0; i < 8; i++) {\n+      pthread_join(threads[i], 0);\n@@ -405,2 +406,0 @@\n-\n-    FREE_C_HEAP_ARRAY(UnitTestThread**, t);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"}]}