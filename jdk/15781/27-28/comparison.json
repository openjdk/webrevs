{"files":[{"patch":"@@ -4402,1 +4402,1 @@\n-  UseMadvPopulateWrite = (::madvise(0, 0, MADV_POPULATE_WRITE) == 0);\n+  FLAG_SET_DEFAULT(UseMadvPopulateWrite, (::madvise(0, 0, MADV_POPULATE_WRITE) == 0));\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -353,30 +353,0 @@\n-class PretouchMemoryRunnable : public TestRunnable {\n-  char* addr;\n-  size_t byte;\n-public:\n-  PretouchMemoryRunnable(char* addr, size_t byte): addr(addr), byte(byte) {}\n-\n-  void runUnitTest() const {\n-    os::pretouch_memory(addr, addr + byte, os::vm_page_size());\n-  }\n-};\n-\n-class UseMemoryRunnable : public TestRunnable {\n-  char* addr;\n-  size_t byte;\n-public:\n-  UseMemoryRunnable(char* addr, size_t byte): addr(addr), byte(byte) {}\n-\n-  void runUnitTest() const {\n-    int* iptr = reinterpret_cast<int*>(addr);\n-    for (int i = 0; i < 1000 && (size_t)i < (byte \/ (sizeof(int))); i++)\n-      *iptr++ = i;\n-  }\n-};\n-\n-static void *pthread_test_runnable(void *runnable) {\n-  TestRunnable* r = reinterpret_cast<TestRunnable*>(runnable);\n-  r->runUnitTest();\n-  return nullptr;\n-}\n-\n@@ -385,1 +355,2 @@\n-  bool useThp = UseTransparentHugePages;\n+  const size_t size = 1 * G;\n+  const bool useThp = UseTransparentHugePages;\n@@ -387,1 +358,1 @@\n-  char* heap = os::reserve_memory(1 * G, false, mtInternal);\n+  char* const heap = os::reserve_memory(size, false, mtInternal);\n@@ -389,1 +360,1 @@\n-  EXPECT_TRUE(os::commit_memory(heap, 1 * G, false));\n+  EXPECT_TRUE(os::commit_memory(heap, size, false));\n@@ -392,14 +363,13 @@\n-    UseMemoryRunnable use(heap, 1 * G);\n-    PretouchMemoryRunnable pretouch(heap, 1 * G);\n-    pthread_t threads[8];\n-    pthread_attr_t attributes[8];\n-    for (int i = 0; i < 8; i++) {\n-      pthread_attr_init(attributes + i);\n-      TestRunnable *runnable = &pretouch;\n-      if (i == 0) runnable = &use;\n-      pthread_create(threads + i, attributes + i, pthread_test_runnable, runnable);\n-      pthread_attr_destroy(attributes + i);\n-    }\n-    for (int i = 0; i < 8; i++) {\n-      pthread_join(threads[i], 0);\n-    }\n+    auto pretouch = [heap, size](Thread*, int) {\n+      os::pretouch_memory(heap, heap + size, os::vm_page_size());\n+    };\n+    auto useMemory = [heap, size](Thread*, int) {\n+      int* iptr = reinterpret_cast<int*>(heap);\n+      for (int i = 0; i < 1000; i++) *iptr++ = i;\n+    };\n+    TestThreadGroup<decltype(pretouch)> pretouchThreads{pretouch, 4};\n+    TestThreadGroup<decltype(useMemory)> useMemoryThreads{useMemory, 4};\n+    useMemoryThreads.doit();\n+    pretouchThreads.doit();\n+    useMemoryThreads.join();\n+    pretouchThreads.join();\n@@ -412,2 +382,2 @@\n-  EXPECT_TRUE(os::uncommit_memory(heap, 1 * G, false));\n-  EXPECT_TRUE(os::release_memory(heap, 1 * G));\n+  EXPECT_TRUE(os::uncommit_memory(heap, size, false));\n+  EXPECT_TRUE(os::release_memory(heap, size));\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":19,"deletions":49,"binary":false,"changes":68,"status":"modified"}]}