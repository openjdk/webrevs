{"files":[{"patch":"@@ -364,1 +364,14 @@\n-TEST_VM(os_linux, pretouch_thp_concurrent) {\n+class UseMemoryRunnable : public TestRunnable {\n+  char* addr;\n+  size_t byte;\n+public:\n+  UseMemoryRunnable(char* addr, size_t byte): addr(addr), byte(byte) {}\n+\n+  void runUnitTest() const {\n+    int* iptr = reinterpret_cast<int*>(addr);\n+    for (int i = 0; i < 1000 && i < (byte \/ (sizeof(int))); i++)\n+      *iptr++ = i;\n+  }\n+};\n+\n+TEST_VM(os_linux, pretouch_thp_and_use_concurrent) {\n@@ -371,3 +384,33 @@\n-  PretouchMemoryRunnable runnable(heap, 1 * G);\n-  ConcurrentTestRunner testRunner(&runnable, os::active_processor_count(), 1000);\n-  testRunner.run();\n+\n+  {\n+    PretouchMemoryRunnable prunnable(heap, 1 * G);\n+    UseMemoryRunnable urunnable(heap, 1 * G);\n+    const long testDurationMillis = 1000;\n+    const size_t nThreads = os::active_processor_count();\n+    Semaphore done(0);\n+    UnitTestThread** t = NEW_C_HEAP_ARRAY(UnitTestThread*, nThreads + 1, mtInternal);\n+    t[0] = new UnitTestThread(urunnable, &done, testDurationMillis);\n+\n+    for (size_t i = 1; i <= nThreads; i++) {\n+      t[i] = new UnitTestThread(prunnable, &done, testDurationMillis);\n+    }\n+\n+    for (size_t i = 0; i <= nThreads; i++) {\n+      t[i]->doit();\n+    }\n+\n+    for (size_t i = 0; i <= nThreads; i++) {\n+      done.wait();\n+    }\n+\n+    for (size_t i = 0; i <= nThreads; i++) {\n+      delete t[i];\n+    }\n+\n+    FREE_C_HEAP_ARRAY(UnitTestThread**, t);\n+  }\n+\n+  int* iptr = reinterpret_cast<int*>(heap);\n+  for (int i = 0; i < 1000; i++)\n+    EXPECT_EQ(*iptr++, i);\n+\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":47,"deletions":4,"binary":false,"changes":51,"status":"modified"}]}