{"files":[{"patch":"@@ -2157,2 +2157,2 @@\n-      \/\/ If the Data use is an IF, that means we have an IF outside of the\n-      \/\/ loop that is switching on a condition that is set inside of the\n+      \/\/ If the Data use is an IF, that means we have an IF outside the\n+      \/\/ loop that is switching on a condition that is set inside the\n@@ -2160,1 +2160,1 @@\n-      \/\/ in the loop to break the loop, then test is again outside of the\n+      \/\/ in the loop to break the loop, then test is again outside the\n@@ -2162,1 +2162,0 @@\n-      \/\/ Loop predicate If node connects to Bool node through Opaque1 node.\n@@ -2164,3 +2163,5 @@\n-      \/\/ If the use is an AllocateArray through its ValidLengthTest input,\n-      \/\/ make sure the Bool\/Cmp input is cloned down to avoid a Phi between\n-      \/\/ the AllocateArray node and its ValidLengthTest input that could cause\n+      \/\/ For several uses we need to make sure that there is no phi between,\n+      \/\/ the use and the Bool\/Cmp. We therefore clone the Bool\/Cmp down here\n+      \/\/ to avoid such a phi in between.\n+      \/\/ For example, it is unexpected that there is a Phi between an\n+      \/\/ AllocateArray node and its ValidLengthTest input that could cause\n@@ -2168,1 +2169,1 @@\n-      if (use->is_If() || use->is_CMove() || use->is_Opaque4() ||\n+      if (use->is_If() || use->is_CMove() || use->is_Opaque4() || use->is_OpaqueInitializedAssertionPredicate() ||\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -57,0 +57,11 @@\n+\/*\n+ * @test id=clone_loop_handle_data_uses\n+ * @bug 8333644\n+ * @modules java.base\/jdk.internal.misc:+open\n+ * @summary Test that using OpaqueInitializedAssertionPredicate for Initialized Assertion Predicates instead of Opaque4\n+ *          nodes also work with clone_loop_handle_data_uses() which missed a case before.\n+ * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,*TestOpaqueInitializedAssertionPredicateNode::test*\n+ *                   -XX:CompileCommand=dontinline,*TestOpaqueInitializedAssertionPredicateNode::dontInline\n+ *                   compiler.predicates.assertion.TestOpaqueInitializedAssertionPredicateNode\n+ *\/\n+\n@@ -66,0 +77,1 @@\n+    static long lFld;\n@@ -98,0 +110,1 @@\n+            testOpaqueOutsideLoop8333644();\n@@ -353,0 +366,29 @@\n+    \/\/ Same as testOpaqueOutsideLoop() but we crash later when generating the Mach graph due to wrongly having an If\n+    \/\/ with a Phi input instead of: If <- Bool <- CmpU <- [x, Phi]. Found by fuzzing.\n+    static void testOpaqueOutsideLoop8333644() {\n+        int a = 3, b = 7;\n+        boolean bArr[] = new boolean[1];\n+        for (int i = 1; i < 122; i++) {\n+            float f = 1.729F;\n+            while (++a < 7) {\n+                iArr[a] *= lFld;\n+                switch (i) {\n+                    case 26:\n+                        for (; b < 1; ) {}\n+                    case 27:\n+                        iArr[1] = 9;\n+                    case 28:\n+                        break;\n+                    case 33:\n+                        iArr[1] = a;\n+                        break;\n+                    case 35:\n+                        lFld = b;\n+                        break;\n+                    default:\n+                        ;\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/assertion\/TestOpaqueInitializedAssertionPredicateNode.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"}]}