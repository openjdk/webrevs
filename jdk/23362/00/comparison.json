{"files":[{"patch":"@@ -240,1 +240,1 @@\n-    evacInfo.set_regions_freed(free_regions);\n+    evacInfo.set_free_regions(free_regions);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+  size_t _free_regions;\n@@ -42,1 +43,0 @@\n-  size_t _regions_freed;\n@@ -49,3 +49,3 @@\n-    _collected_old(0), _collected_promoted(0), _collected_young(0), _regions_promoted_humongous(0),\n-    _regions_promoted_regular(0), _regular_promoted_garbage(0), _regular_promoted_free(0),\n-    _regions_freed(0), _regions_immediate(0), _immediate_size(0) { }\n+    _collected_old(0), _collected_promoted(0), _collected_young(0), _free_regions(0),\n+    _regions_promoted_humongous(0), _regions_promoted_regular(0), _regular_promoted_garbage(0),\n+    _regular_promoted_free(0), _regions_immediate(0), _immediate_size(0) { }\n@@ -77,2 +77,2 @@\n-  void set_regions_freed(size_t freed) {\n-    _regions_freed = freed;\n+  void set_free_regions(size_t freed) {\n+    _free_regions = freed;\n@@ -115,1 +115,1 @@\n-  size_t regions_freed()              { return _regions_freed; }\n+  size_t free_regions()               { return _free_regions; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacInfo.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    e.set_regionsFreed(info->regions_freed());\n+    e.set_freeRegions(info->free_regions());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTrace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1223,1 +1223,1 @@\n-    <Field type=\"ulong\" name=\"regionsFreed\" label=\"Regions Freed\" description=\"Free regions prior to determining collection set\" \/>\n+    <Field type=\"ulong\" name=\"freeRegions\" label=\"Free Regions\" description=\"Free regions prior to collection\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+        final long shenandoahMaxHeapRegionCount = 64;\n@@ -66,1 +67,1 @@\n-            long setRegions = Events.assertField(event, \"cSetRegions\").atLeast(0L).getValue();\n+            long cSetRegions = Events.assertField(event, \"cSetRegions\").atLeast(0L).getValue();\n@@ -69,1 +70,1 @@\n-            long regionsFreed = Events.assertField(event, \"regionsFreed\").atLeast(0L).getValue();\n+            long freeRegions = Events.assertField(event, \"freeRegions\").atLeast(0L).getValue();\n@@ -73,1 +74,1 @@\n-            Asserts.assertGreaterThanOrEqual(setRegions, regionsFreed, \"setRegions >= regionsFreed\");\n+            Asserts.assertGreaterThanOrEqual(shenandoahMaxHeapRegionCount, freeRegions + cSetRegions, \"numRegions >= freeRegions + cSetRegions\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestShenandoahEvacuationInformationEvent.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}