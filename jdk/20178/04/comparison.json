{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -398,1 +398,1 @@\n-            names[arity] = zero.newIndex(arity);\n+            names[arity] = zero.withIndex(arity);\n@@ -498,1 +498,1 @@\n-        Name[] oldNames = null;\n+        Name[] oldNames = names.clone();\n@@ -500,1 +500,0 @@\n-        int changesStart = 0;\n@@ -503,7 +502,1 @@\n-            if (!n.initIndex(i)) {\n-                if (oldNames == null) {\n-                    oldNames = names.clone();\n-                    changesStart = i;\n-                }\n-                names[i] = n.cloneWithIndex(i);\n-            }\n+            names[i] = n.withIndex(i);\n@@ -514,6 +507,3 @@\n-            int startFixing = arity;\n-            if (startFixing <= changesStart)\n-                startFixing = changesStart+1;\n-            for (int i = startFixing; i < names.length; i++) {\n-                Name fixed = names[i].replaceNames(oldNames, names, changesStart, i);\n-                names[i] = fixed.newIndex(i);\n+            for (int i = Math.max(1, arity); i < names.length; i++) {\n+                Name fixed = names[i].replaceNames(oldNames, names, 0, i);\n+                names[i] = fixed.withIndex(i);\n@@ -1342,1 +1332,1 @@\n-        @Stable short index;\n+        final short index;\n@@ -1349,1 +1339,1 @@\n-        private Name(int index, BasicType type, NamedFunction function, Object[] arguments) {\n+        private Name(int index, BasicType type, NamedFunction function, Object[] arguments, Object constraint) {\n@@ -1354,8 +1344,0 @@\n-            this.constraint = null;\n-            assert(this.index == index && typesMatch(function, this.arguments));\n-        }\n-        private Name(Name that, Object constraint) {\n-            this.index = that.index;\n-            this.type = that.type;\n-            this.function = that.function;\n-            this.arguments = that.arguments;\n@@ -1363,0 +1345,1 @@\n+            assert(this.index == index && typesMatch(function, arguments));\n@@ -1366,0 +1349,1 @@\n+\n@@ -1377,1 +1361,1 @@\n-            this(-1, function.returnType(), function, EMPTY_ARGS);\n+            this(-1, function.returnType(), function, EMPTY_ARGS, null);\n@@ -1380,1 +1364,1 @@\n-            this(-1, function.returnType(), function, new Object[] { arg });\n+            this(-1, function.returnType(), function, new Object[] { arg }, null);\n@@ -1383,1 +1367,1 @@\n-            this(-1, function.returnType(), function, new Object[] { arg0, arg1 });\n+            this(-1, function.returnType(), function, new Object[] { arg0, arg1 }, null);\n@@ -1386,1 +1370,1 @@\n-            this(-1, function.returnType(), function, Arrays.copyOf(arguments, arguments.length, Object[].class));\n+            this(-1, function.returnType(), function, Arrays.copyOf(arguments, arguments.length, Object[].class), null);\n@@ -1390,1 +1374,1 @@\n-            this(index, type, null, null);\n+            this(index, type, null, null, null);\n@@ -1397,7 +1381,1 @@\n-        boolean initIndex(int i) {\n-            if (index != i) {\n-                if (index != -1)  return false;\n-                index = (short)i;\n-            }\n-            return true;\n-        }\n+\n@@ -1408,7 +1386,3 @@\n-        Name newIndex(int i) {\n-            if (initIndex(i))  return this;\n-            return cloneWithIndex(i);\n-        }\n-        Name cloneWithIndex(int i) {\n-            Object[] newArguments = (arguments == null) ? null : arguments.clone();\n-            return new Name(i, type, function, newArguments).withConstraint(constraint);\n+        Name withIndex(int i) {\n+            if (i == this.index) return this;\n+            return new Name(i, type, function, arguments, constraint);\n@@ -1416,0 +1390,1 @@\n+\n@@ -1418,1 +1393,1 @@\n-            return new Name(this, constraint);\n+            return new Name(index, type, function, arguments, constraint);\n@@ -1420,0 +1395,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":23,"deletions":47,"binary":false,"changes":70,"status":"modified"}]}