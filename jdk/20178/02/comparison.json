{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -570,1 +570,1 @@\n-                    int i2 = n2.index;\n+                    int i2 = n2.index();\n@@ -1342,1 +1342,1 @@\n-        @Stable short index;\n+        private @Stable short offsetIndex; \/\/ slot + 1, reserves 0 for unset\n@@ -1350,1 +1350,1 @@\n-            this.index = (short)index;\n+            this.offsetIndex = (short) (index + 1);\n@@ -1355,1 +1355,1 @@\n-            assert(this.index == index && typesMatch(function, this.arguments));\n+            assert(this.index() == index && typesMatch(function, this.arguments));\n@@ -1358,1 +1358,1 @@\n-            this.index = that.index;\n+            this.offsetIndex = that.offsetIndex;\n@@ -1396,1 +1396,1 @@\n-        int index() { return index; }\n+        int index() { return offsetIndex - 1; }\n@@ -1398,3 +1398,4 @@\n-            if (index != i) {\n-                if (index != -1)  return false;\n-                index = (short)i;\n+            short index = (short) (i + 1);\n+            if (offsetIndex != index) {\n+                if (offsetIndex != 0)  return false;\n+                offsetIndex = index;\n@@ -1449,1 +1450,1 @@\n-                    int check = n.index;\n+                    int check = n.index();\n@@ -1476,1 +1477,1 @@\n-                    if (n.isParam() && n.index < INTERNED_ARGUMENT_LIMIT)\n+                    if (n.isParam() && n.index() < INTERNED_ARGUMENT_LIMIT)\n@@ -1522,1 +1523,1 @@\n-            return (isParam()?\"a\":\"t\")+(index >= 0 ? index : System.identityHashCode(this))+\":\"+typeChar();\n+            return (isParam() ? \"a\" : \"t\") + (offsetIndex != 0 ? index() : System.identityHashCode(this)) + \":\" + typeChar();\n@@ -1622,1 +1623,1 @@\n-                return index | (type.ordinal() << 8);\n+                return index() | (type.ordinal() << 8);\n@@ -1631,1 +1632,1 @@\n-        int ni = n.index, nmax = names.length;\n+        int ni = n.index(), nmax = names.length;\n@@ -1643,2 +1644,2 @@\n-        int count = (result == n.index) ? 1 : 0;\n-        int i = Math.max(n.index + 1, arity);\n+        int count = (result == n.index()) ? 1 : 0;\n+        int i = Math.max(n.index() + 1, arity);\n@@ -1658,1 +1659,1 @@\n-        assert(n.index < INTERNED_ARGUMENT_LIMIT);\n+        assert(n.index() < INTERNED_ARGUMENT_LIMIT);\n@@ -1660,1 +1661,1 @@\n-        return argument(n.index, n.type);\n+        return argument(n.index(), n.type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -778,1 +778,1 @@\n-                return n1.index - n2.index;\n+                return n1.index() - n2.index();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaFormEditor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}