{"files":[{"patch":"@@ -398,1 +398,1 @@\n-            names[arity] = zero.newIndex(arity);\n+            names[arity] = zero.withIndex(arity);\n@@ -498,1 +498,1 @@\n-        Name[] oldNames = null;\n+        Name[] oldNames = names.clone();\n@@ -500,1 +500,0 @@\n-        int changesStart = 0;\n@@ -503,7 +502,1 @@\n-            if (!n.initIndex(i)) {\n-                if (oldNames == null) {\n-                    oldNames = names.clone();\n-                    changesStart = i;\n-                }\n-                names[i] = n.cloneWithIndex(i);\n-            }\n+            names[i] = n.withIndex(i);\n@@ -514,6 +507,3 @@\n-            int startFixing = arity;\n-            if (startFixing <= changesStart)\n-                startFixing = changesStart+1;\n-            for (int i = startFixing; i < names.length; i++) {\n-                Name fixed = names[i].replaceNames(oldNames, names, changesStart, i);\n-                names[i] = fixed.newIndex(i);\n+            for (int i = Math.max(1, arity); i < names.length; i++) {\n+                Name fixed = names[i].replaceNames(oldNames, names, 0, i);\n+                names[i] = fixed.withIndex(i);\n@@ -570,1 +560,1 @@\n-                    int i2 = n2.index();\n+                    int i2 = n2.index;\n@@ -1342,1 +1332,1 @@\n-        private @Stable short offsetIndex; \/\/ slot + 1, reserves 0 for unset\n+        final short index;\n@@ -1349,2 +1339,2 @@\n-        private Name(int index, BasicType type, NamedFunction function, Object[] arguments) {\n-            this.offsetIndex = (short) (index + 1);\n+        private Name(int index, BasicType type, NamedFunction function, Object[] arguments, Object constraint) {\n+            this.index = (short)index;\n@@ -1354,8 +1344,0 @@\n-            this.constraint = null;\n-            assert(this.index() == index && typesMatch(function, this.arguments));\n-        }\n-        private Name(Name that, Object constraint) {\n-            this.offsetIndex = that.offsetIndex;\n-            this.type = that.type;\n-            this.function = that.function;\n-            this.arguments = that.arguments;\n@@ -1363,0 +1345,1 @@\n+            assert(this.index == index && typesMatch(function, arguments));\n@@ -1366,0 +1349,1 @@\n+\n@@ -1377,1 +1361,1 @@\n-            this(-1, function.returnType(), function, EMPTY_ARGS);\n+            this(-1, function.returnType(), function, EMPTY_ARGS, null);\n@@ -1380,1 +1364,1 @@\n-            this(-1, function.returnType(), function, new Object[] { arg });\n+            this(-1, function.returnType(), function, new Object[] { arg }, null);\n@@ -1383,1 +1367,1 @@\n-            this(-1, function.returnType(), function, new Object[] { arg0, arg1 });\n+            this(-1, function.returnType(), function, new Object[] { arg0, arg1 }, null);\n@@ -1386,1 +1370,1 @@\n-            this(-1, function.returnType(), function, Arrays.copyOf(arguments, arguments.length, Object[].class));\n+            this(-1, function.returnType(), function, Arrays.copyOf(arguments, arguments.length, Object[].class), null);\n@@ -1390,1 +1374,1 @@\n-            this(index, type, null, null);\n+            this(index, type, null, null, null);\n@@ -1396,9 +1380,2 @@\n-        int index() { return offsetIndex - 1; }\n-        boolean initIndex(int i) {\n-            short index = (short) (i + 1);\n-            if (offsetIndex != index) {\n-                if (offsetIndex != 0)  return false;\n-                offsetIndex = index;\n-            }\n-            return true;\n-        }\n+        int index() { return index; }\n+\n@@ -1409,7 +1386,2 @@\n-        Name newIndex(int i) {\n-            if (initIndex(i))  return this;\n-            return cloneWithIndex(i);\n-        }\n-        Name cloneWithIndex(int i) {\n-            Object[] newArguments = (arguments == null) ? null : arguments.clone();\n-            return new Name(i, type, function, newArguments).withConstraint(constraint);\n+        Name withIndex(int i) {\n+            return new Name(i, type, function, arguments, constraint);\n@@ -1417,0 +1389,1 @@\n+\n@@ -1419,1 +1392,1 @@\n-            return new Name(this, constraint);\n+            return new Name(index, type, function, arguments, constraint);\n@@ -1421,0 +1394,1 @@\n+\n@@ -1450,1 +1424,1 @@\n-                    int check = n.index();\n+                    int check = n.index;\n@@ -1477,1 +1451,1 @@\n-                    if (n.isParam() && n.index() < INTERNED_ARGUMENT_LIMIT)\n+                    if (n.isParam() && n.index < INTERNED_ARGUMENT_LIMIT)\n@@ -1523,1 +1497,1 @@\n-            return (isParam() ? \"a\" : \"t\") + (offsetIndex != 0 ? index() : System.identityHashCode(this)) + \":\" + typeChar();\n+            return (isParam()?\"a\":\"t\")+(index >= 0 ? index : System.identityHashCode(this))+\":\"+typeChar();\n@@ -1623,1 +1597,1 @@\n-                return index() | (type.ordinal() << 8);\n+                return index | (type.ordinal() << 8);\n@@ -1632,1 +1606,1 @@\n-        int ni = n.index(), nmax = names.length;\n+        int ni = n.index, nmax = names.length;\n@@ -1644,2 +1618,2 @@\n-        int count = (result == n.index()) ? 1 : 0;\n-        int i = Math.max(n.index() + 1, arity);\n+        int count = (result == n.index) ? 1 : 0;\n+        int i = Math.max(n.index + 1, arity);\n@@ -1659,1 +1633,1 @@\n-        assert(n.index() < INTERNED_ARGUMENT_LIMIT);\n+        assert(n.index < INTERNED_ARGUMENT_LIMIT);\n@@ -1661,1 +1635,1 @@\n-        return argument(n.index(), n.type);\n+        return argument(n.index, n.type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":33,"deletions":59,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -778,1 +778,1 @@\n-                return n1.index() - n2.index();\n+                return n1.index - n2.index;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaFormEditor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}