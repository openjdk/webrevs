{"files":[{"patch":"@@ -768,0 +768,5 @@\n+  \/\/ Save ConstMethod* in x15_const_method for later use to avoid loading multiple times\n+  Register x15_const_method = x15;\n+  const Register x15 = noreg;\n+  __ ld(x15_const_method, Address(xmethod, Method::const_offset()));\n+\n@@ -778,2 +783,1 @@\n-    __ ld(t0, Address(xmethod, Method::const_offset()));     \/\/ get ConstMethod\n-    __ add(xbcp, t0, in_bytes(ConstMethod::codes_offset())); \/\/ get codebase\n+    __ add(xbcp, x15_const_method, in_bytes(ConstMethod::codes_offset())); \/\/ get codebase\n@@ -801,3 +805,5 @@\n-  __ ld(xcpool, Address(xmethod, Method::const_offset()));\n-  __ ld(xcpool, Address(xcpool, ConstMethod::constants_offset()));\n-  __ ld(xcpool, Address(xcpool, ConstantPool::cache_offset()));\n+  \/\/ Save ConstantPool* in t3_constants for later use to avoid loading multiple times\n+  Register t3_constants = t3;\n+  const Register t3 = noreg;\n+  __ ld(t3_constants, Address(x15_const_method, ConstMethod::constants_offset()));\n+  __ ld(xcpool, Address(t3_constants, ConstantPool::cache_offset()));\n@@ -815,2 +821,5 @@\n-  \/\/ Get mirror and store it in the frame as GC root for this Method*\n-  __ load_mirror(t2, xmethod, x15, t1);\n+  \/\/ Get mirror, Resolve ConstantPool* -> InstanceKlass* -> Java mirror\n+  \/\/ and store it in the frame as GC root for this Method*\n+  __ ld(t2, Address(t3_constants, ConstantPool::pool_holder_offset()));\n+  __ ld(t2, Address(t2, in_bytes(Klass::java_mirror_offset())));\n+  __ resolve_oop_handle(t2, t0, t1);\n@@ -820,2 +829,1 @@\n-    __ ld(t0, Address(xmethod, Method::const_offset()));\n-    __ lhu(t0, Address(t0, ConstMethod::max_stack_offset()));\n+    __ lhu(t0, Address(x15_const_method, ConstMethod::max_stack_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"}]}