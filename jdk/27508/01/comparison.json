{"files":[{"patch":"@@ -658,4 +658,2 @@\n-  int bytes = src_info->size_in_bytes();\n-  char* dest;\n-  char* oldtop;\n-  char* newtop;\n+  int bytes = src_info->size_in_bytes(); \/\/ word-aligned\n+  size_t alignment = SharedSpaceObjectAlignment; \/\/ alignment for the dest pointer\n@@ -663,1 +661,1 @@\n-  oldtop = dump_region->top();\n+  char* oldtop = dump_region->top();\n@@ -674,2 +672,0 @@\n-    \/\/ Allocate space for the future InstanceKlass with proper alignment\n-    const size_t alignment =\n@@ -677,5 +673,4 @@\n-      UseCompressedClassPointers ?\n-        nth_bit(ArchiveBuilder::precomputed_narrow_klass_shift()) :\n-        SharedSpaceObjectAlignment;\n-#else\n-      SharedSpaceObjectAlignment;\n+    \/\/ More strict alignments needed for UseCompressedClassPointers\n+    if (UseCompressedClassPointers) {\n+      alignment = nth_bit(ArchiveBuilder::precomputed_narrow_klass_shift());\n+    }\n@@ -683,3 +678,4 @@\n-    dest = dump_region->allocate(bytes, alignment);\n-  } else {\n-    dest = dump_region->allocate(bytes);\n+  } else if (src_info->msotype() == MetaspaceObj::SymbolType) {\n+    \/\/ Symbols may be allocated by using AllocateHeap, so their sizes\n+    \/\/ may be less than size_in_bytes() indicates.\n+    bytes = ((Symbol*)src)->byte_size();\n@@ -687,1 +683,0 @@\n-  newtop = dump_region->top();\n@@ -689,0 +684,1 @@\n+  char* dest = dump_region->allocate(bytes, alignment);\n@@ -716,0 +712,1 @@\n+  char* newtop = dump_region->top();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":13,"deletions":16,"binary":false,"changes":29,"status":"modified"}]}