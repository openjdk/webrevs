{"files":[{"patch":"@@ -658,4 +658,2 @@\n-  int bytes = src_info->size_in_bytes();\n-  char* dest;\n-  char* oldtop;\n-  char* newtop;\n+  int aligned_byte_size = src_info->size_in_bytes();\n+  precond(is_aligned(aligned_byte_size, SharedSpaceObjectAlignment));\n@@ -663,1 +661,2 @@\n-  oldtop = dump_region->top();\n+  char* dest;\n+  char* oldtop = dump_region->top();\n@@ -675,1 +674,1 @@\n-    const size_t alignment =\n+    const size_t klass_alignment =\n@@ -683,1 +682,1 @@\n-    dest = dump_region->allocate(bytes, alignment);\n+    dest = dump_region->allocate(aligned_byte_size, klass_alignment);\n@@ -685,1 +684,1 @@\n-    dest = dump_region->allocate(bytes);\n+    dest = dump_region->allocate(aligned_byte_size);\n@@ -687,1 +686,1 @@\n-  newtop = dump_region->top();\n+  char* newtop = dump_region->top();\n@@ -689,1 +688,10 @@\n-  memcpy(dest, src, bytes);\n+  \/\/ dest contains all zeros, so it's OK to copy fewer bytes than allocated from dump_region\n+  if (src_info->msotype() == MetaspaceObj::SymbolType) {\n+    \/\/ Symbols may be allocated using AllocateHeap, so their sizes may be less than aligned_byte_size\n+    int exact_byte_size = ((Symbol*)src)->byte_size();\n+    precond(exact_byte_size <= aligned_byte_size);\n+    memcpy(dest, src, exact_byte_size);\n+  } else {\n+    \/\/ For all other types, the memory for src was allocated with aligned_byte_size.\n+    memcpy(dest, src, aligned_byte_size);\n+  }\n@@ -713,1 +721,1 @@\n-  log_trace(aot)(\"Copy: \" PTR_FORMAT \" ==> \" PTR_FORMAT \" %d\", p2i(src), p2i(dest), bytes);\n+  log_trace(aot)(\"Copy: \" PTR_FORMAT \" ==> \" PTR_FORMAT \" %d\", p2i(src), p2i(dest), aligned_byte_size);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"}]}