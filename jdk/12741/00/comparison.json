{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,2 @@\n+  JFR_LOG_TAG(jfr, system, periodic) \\\n+  JFR_LOG_TAG(jfr, periodic) \\\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrLogTagSets.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,8 @@\n+    \/**\n+     *  Covers periodic task work (for Hotspot developer)\n+     *\/\n+    JFR_SYSTEM_PERIODIC(9),\n+    \/**\n+     *  Covers periodic event work (for users of the JDK)\n+     *\/\n+    JFR_PERIODIC(10),\n@@ -76,1 +84,1 @@\n-    JFR_METADATA(9),\n+    JFR_METADATA(11),\n@@ -80,1 +88,1 @@\n-    JFR_EVENT(10),\n+    JFR_EVENT(12),\n@@ -84,1 +92,1 @@\n-    JFR_SETTING(11),\n+    JFR_SETTING(13),\n@@ -88,1 +96,1 @@\n-    JFR_DCMD(12),\n+    JFR_DCMD(14),\n@@ -92,1 +100,1 @@\n-    JFR_START(13);\n+    JFR_START(15);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/LogTag.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+        Logger.log(LogTag.JFR_SYSTEM_PERIODIC, LogLevel.DEBUG, \"Grouping tasks into batches. Iteration \" + iteration);\n@@ -110,1 +111,1 @@\n-        if (!Logger.shouldLog(LogTag.JFR, LogLevel.TRACE)) {\n+        if (!Logger.shouldLog(LogTag.JFR_SYSTEM_PERIODIC, LogLevel.TRACE)) {\n@@ -113,1 +114,0 @@\n-        String prefix = \"Periodic task: settings iteration: \" + iteration + \", batch period: \";\n@@ -115,1 +115,0 @@\n-            String batchPrefix = prefix + batch.getPeriod();\n@@ -117,1 +116,1 @@\n-                logTrace(batchPrefix + \", period: \" + task.getPeriod() + \", task: \" + task.getName());\n+                logTrace(\"Batched task [0..\" + task.getPeriod() + \"] step \" + batch.getPeriod() + \" \" + task.getName());\n@@ -123,1 +122,1 @@\n-       Logger.log(LogTag.JFR_SYSTEM, LogLevel.TRACE, text);\n+       Logger.log(LogTag.JFR_SYSTEM_PERIODIC, LogLevel.DEBUG, text);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/BatchManager.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-        super(lookupKey, eventType.getLogName());\n+        super(lookupKey, \"event \" + eventType.getLogName());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/EventTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        super(new LookupKey(new Object()), \"JFR: Flush Task\");\n+        super(new LookupKey(new Object()), \"flush task\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/FlushTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,3 @@\n+import jdk.jfr.internal.LogLevel;\n+import jdk.jfr.internal.LogTag;\n+import jdk.jfr.internal.Logger;\n@@ -135,0 +138,1 @@\n+        Logger.log(LogTag.JFR_PERIODIC, LogLevel.DEBUG,\"Periodic work started\");\n@@ -181,0 +185,1 @@\n+        Logger.log(LogTag.JFR_PERIODIC, LogLevel.DEBUG,\"Periodic work ended\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/PeriodicEvents.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -92,0 +92,7 @@\n+            if (Logger.shouldLog(LogTag.JFR_PERIODIC, LogLevel.DEBUG)) {\n+                boolean trace = Logger.shouldLog(LogTag.JFR_PERIODIC, LogLevel.TRACE);\n+                boolean run = shouldRun();\n+                if (trace || run) {\n+                    logInterval(trace, run ? \"Run\" : \"Skip\");\n+                }\n+            }\n@@ -117,0 +124,3 @@\n+        if (periodicType != PeriodicType.INTERVAL) {\n+            logChunk(periodicType);\n+        }\n@@ -121,1 +131,9 @@\n-            Logger.log(LogTag.JFR_SYSTEM, LogLevel.WARN, \"Exception occurred during execution of period task for \" + name);\n+            Logger.log(LogTag.JFR_SYSTEM, LogLevel.WARN, \"Exception occurred during execution of \" + name);\n+        }\n+    }\n+\n+    private void logChunk(PeriodicType periodicType) {\n+        if (Logger.shouldLog(LogTag.JFR_PERIODIC, LogLevel.DEBUG)) {\n+            String action = periodicType == PeriodicType.BEGIN_CHUNK ? \"beginChunk\" : \"endChunk\";\n+            String message = \"Run \" + action + \" \" + getName();\n+            Logger.log(LogTag.JFR_PERIODIC, LogLevel.DEBUG, message);\n@@ -123,2 +141,10 @@\n-        if (Logger.shouldLog(LogTag.JFR_SYSTEM, LogLevel.DEBUG)) {\n-            Logger.log(LogTag.JFR_SYSTEM, LogLevel.DEBUG, \"Executed periodic task for \" + name);\n+    }\n+\n+    private void logInterval(boolean trace, String action) {\n+        String message = action + \" periodic \" + getName();\n+        if (trace) {\n+            \/\/ Makes the counter run on x\/x instead of 0\/x which looks strange.\n+            long a =  counter == 0 ? period : counter;\n+            Logger.log(LogTag.JFR_PERIODIC, LogLevel.TRACE, message + (\" \" + a + \"\/\" + period));\n+        } else {\n+            Logger.log(LogTag.JFR_PERIODIC, LogLevel.DEBUG, message);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/PeriodicTask.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"}]}