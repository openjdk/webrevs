{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import jdk.internal.foreign.NoInitSegmentAllocator;\n@@ -724,3 +723,3 @@\n-        return this instanceof NoInitSegmentAllocator noInit\n-                ? noInit.allocateNoInit(byteSize, 1)\n-                : allocate(byteSize);\n+        return this instanceof ArenaImpl arenaImpl ?\n+                arenaImpl.allocateNoInit(byteSize, 1) :\n+                allocate(byteSize);\n@@ -731,3 +730,3 @@\n-        return this instanceof NoInitSegmentAllocator noInit\n-                ? noInit.allocateNoInit(layout.byteSize(), layout.byteAlignment())\n-                : allocate(layout);\n+        return this instanceof ArenaImpl arenaImpl ?\n+                arenaImpl.allocateNoInit(layout.byteSize(), layout.byteAlignment()) :\n+                allocate(layout);\n@@ -738,3 +737,3 @@\n-        return this instanceof NoInitSegmentAllocator noInit\n-                ? noInit.allocateNoInit(layout.byteSize() * size, layout.byteAlignment())\n-                : allocate(layout, size);\n+        return this instanceof ArenaImpl arenaImpl ?\n+                arenaImpl.allocateNoInit(layout.byteSize() * size, layout.byteAlignment()) :\n+                allocate(layout, size);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import jdk.internal.vm.annotation.ForceInline;\n-\n@@ -33,1 +31,1 @@\n-public final class ArenaImpl implements Arena, NoInitSegmentAllocator {\n+public final class ArenaImpl implements Arena {\n@@ -52,2 +50,0 @@\n-    @ForceInline\n-    @Override\n@@ -58,1 +54,0 @@\n-    @ForceInline\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ArenaImpl.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-        private final class Frame implements Arena, NoInitSegmentAllocator {\n+        private final class Frame implements Arena {\n@@ -168,9 +168,1 @@\n-            public NativeMemorySegmentImpl allocate(long byteSize, long byteAlignment) {\n-                \/\/ Do not zero initialize, so override the default zeroing method\n-                \/\/ Todo: Maybe we could introduce a parameter that indicates zeroing\n-                return allocateNoInit(byteSize, byteAlignment);\n-            }\n-\n-            @ForceInline\n-            @Override\n-            public NativeMemorySegmentImpl allocateNoInit(long byteSize, long byteAlignment) {\n+            public MemorySegment allocate(long byteSize, long byteAlignment) {\n@@ -179,1 +171,1 @@\n-                return (NativeMemorySegmentImpl) frame.allocate(byteSize, byteAlignment);\n+                return frame.allocate(byteSize, byteAlignment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/BufferStack.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.internal.lang.stable.InternalStableFactories;\n@@ -40,1 +39,0 @@\n-import java.util.List;\n@@ -79,1 +77,1 @@\n-        BASIC_HANDLE_CACHE = InternalStableFactories.function(inputs, UNDERLYING_MAKE_BASIC_HANDLE);\n+        BASIC_HANDLE_CACHE = StableValue.function(inputs, UNDERLYING_MAKE_BASIC_HANDLE);\n@@ -357,1 +355,1 @@\n-            InternalStableFactories.intFunction(ARENA_CLOSE + 1, UNDERLYING_MAKE_HANDLE);\n+            StableValue.intFunction(ARENA_CLOSE + 1, UNDERLYING_MAKE_HANDLE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CaptureStateUtil.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.lang.stable;\n-\n-import jdk.internal.access.SharedSecrets;\n-\n-import java.util.EnumSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.function.Function;\n-import java.util.function.IntFunction;\n-\n-\/**\n- * Todo: Remove this class once stable value finalizes and becomes a permanent feature.\n- * <p>\n- * This class allows stable functions and collections to be used without concern\n- * for the {@code --enable-preview} flag. sTo use a StableValue without preview,\n- * declare a field as {@code StableValueImpl} and use the {@link StableValueImpl#of()}\n- * factory.\n- *\/\n-public final class InternalStableFactories {\n-\n-    private InternalStableFactories() {}\n-\n-    public static <R> IntFunction<R> intFunction(int size,\n-                                                 IntFunction<? extends R> underlying) {\n-        StableUtil.assertSizeNonNegative(size);\n-        Objects.requireNonNull(underlying);\n-        return StableIntFunction.of(size, underlying);\n-    }\n-\n-    public static <T, R> Function<T, R> function(Set<? extends T> inputs,\n-                                                 Function<? super T, ? extends R> underlying) {\n-        Objects.requireNonNull(inputs);\n-        \/\/ Checking that the Set of inputs does not contain a `null` value is made in the\n-        \/\/ implementing classes.\n-        Objects.requireNonNull(underlying);\n-        return inputs instanceof EnumSet<?> && !inputs.isEmpty()\n-                ? StableEnumFunction.of(inputs, underlying)\n-                : StableFunction.of(inputs, underlying);\n-    }\n-\n-    public static <E> List<E> list(int size,\n-                                   IntFunction<? extends E> mapper) {\n-        StableUtil.assertSizeNonNegative(size);\n-        Objects.requireNonNull(mapper);\n-        return SharedSecrets.getJavaUtilCollectionAccess().stableList(size, mapper);\n-    }\n-\n-    public static <K, V> Map<K, V> map(Set<K> keys,\n-                                       Function<? super K, ? extends V> mapper) {\n-        Objects.requireNonNull(keys);\n-        \/\/ Checking that the Set of keys does not contain a `null` value is made in the\n-        \/\/ implementing class.\n-        Objects.requireNonNull(mapper);\n-        return SharedSecrets.getJavaUtilCollectionAccess().stableMap(keys, mapper);\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/stable\/InternalStableFactories.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"}]}