{"files":[{"patch":"@@ -30,1 +30,1 @@\n- * @run main ClassnameCharTest\n+ * @run junit ClassnameCharTest\n@@ -43,0 +43,5 @@\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -44,0 +49,1 @@\n+\n@@ -45,1 +51,1 @@\n-    static HttpServer server;\n+    private static HttpServer server;\n@@ -47,1 +53,14 @@\n-    public static void realMain(String[] args) throws Exception {\n+    \/\/ Create the class file and write it to the testable jar\n+    @BeforeAll\n+    static void setup() throws IOException {\n+        var bytes = ClassFile.of().build(ClassDesc.of(\"fo o\"), _ -> {});\n+        try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(JAR_PATH.toFile()))) {\n+            jos.putNextEntry(new JarEntry(\"fo o.class\"));\n+            jos.write(bytes, 0, bytes.length);\n+            jos.closeEntry();\n+        }\n+    }\n+\n+    @Test\n+    void testClassName() throws Exception {\n+        \/\/ Build the server and set the context\n@@ -49,22 +68,18 @@\n-        server.createContext(\"\/\", new HttpHandler() {\n-            @Override\n-            public void handle(HttpExchange exchange) {\n-                try {\n-                    String filename = exchange.getRequestURI().getPath();\n-                    System.out.println(\"getRequestURI = \" + exchange.getRequestURI());\n-                    System.out.println(\"filename = \" + filename);\n-                    try (FileInputStream fis = new FileInputStream(JAR_PATH.toFile());\n-                         JarInputStream jis = new JarInputStream(fis)) {\n-                        JarEntry entry;\n-                        while ((entry = jis.getNextJarEntry()) != null) {\n-                            if (filename.endsWith(entry.getName())) {\n-                                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                                byte[] buf = new byte[8092];\n-                                int count = 0;\n-                                while ((count = jis.read(buf)) != -1)\n-                                    baos.write(buf, 0, count);\n-                                exchange.sendResponseHeaders(200, baos.size());\n-                                try (OutputStream os = exchange.getResponseBody()) {\n-                                    baos.writeTo(os);\n-                                }\n-                                return;\n+        server.createContext(\"\/\", exchange -> {\n+            try {\n+                String filename = exchange.getRequestURI().getPath();\n+                System.out.println(\"getRequestURI = \" + exchange.getRequestURI());\n+                System.out.println(\"filename = \" + filename);\n+                try (FileInputStream fis = new FileInputStream(JAR_PATH.toFile());\n+                     JarInputStream jis = new JarInputStream(fis)) {\n+                    JarEntry entry;\n+                    while ((entry = jis.getNextJarEntry()) != null) {\n+                        if (filename.endsWith(entry.getName())) {\n+                            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                            byte[] buf = new byte[8092];\n+                            int count = 0;\n+                            while ((count = jis.read(buf)) != -1)\n+                                baos.write(buf, 0, count);\n+                            exchange.sendResponseHeaders(200, baos.size());\n+                            try (OutputStream os = exchange.getResponseBody()) {\n+                                baos.writeTo(os);\n@@ -72,0 +87,1 @@\n+                            return; \/\/ success\n@@ -73,1 +89,0 @@\n-                        fail(\"Failed to find \" + filename);\n@@ -75,2 +90,1 @@\n-                } catch (IOException e) {\n-                    unexpected(e);\n+                    contextFail(\"Failed to find \" + filename);\n@@ -78,0 +92,2 @@\n+            } catch (IOException e) {\n+                unexpectedFail(e);\n@@ -87,1 +103,0 @@\n-            pass();\n@@ -136,1 +151,1 @@\n-                \/\/ protocol\/host\/port mismatch, fail with RuntimeExc\n+                \/\/ protocol\/host\/port mismatch, fail with RuntimeException\n@@ -173,10 +188,1 @@\n-    \/\/--------------------- Infrastructure ---------------------------\n-    static volatile int passed = 0, failed = 0;\n-\n-    static boolean pass() {\n-        passed++;\n-        return true;\n-    }\n-\n-    static boolean fail() {\n-        failed++;\n+    static void contextFail(String msg) {\n@@ -187,6 +193,1 @@\n-        return false;\n-    }\n-\n-    static boolean fail(String msg) {\n-        System.out.println(msg);\n-        return fail();\n+        fail(msg);\n@@ -195,2 +196,1 @@\n-    static void unexpected(Throwable t) {\n-        failed++;\n+    static void unexpectedFail(Throwable t) {\n@@ -201,40 +201,1 @@\n-    }\n-\n-    static boolean check(boolean cond) {\n-        if (cond) {\n-            pass();\n-        } else {\n-            fail();\n-        }\n-        return cond;\n-    }\n-\n-    static boolean equal(Object x, Object y) {\n-        if (x == null ? y == null : x.equals(y)) {\n-            return pass();\n-        } else {\n-            return fail(x + \" not equal to \" + y);\n-        }\n-    }\n-\n-    \/\/ Create the class file and write it to the testable jar\n-    static void buildJar() throws IOException {\n-        var bytes = ClassFile.of().build(ClassDesc.of(\"fo o\"), _ -> {});\n-        try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(JAR_PATH.toFile()))) {\n-            jos.putNextEntry(new JarEntry(\"fo o.class\"));\n-            jos.write(bytes, 0, bytes.length);\n-            jos.closeEntry();\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        try {\n-            buildJar();\n-            realMain(args);\n-        } catch (Throwable t) {\n-            unexpected(t);\n-        }\n-        System.out.println(\"\\nPassed = \" + passed + \" failed = \" + failed);\n-        if (failed > 0) {\n-            throw new AssertionError(\"Some tests failed\");\n-        }\n+        fail(\"Handler threw an unexpected IO Exception\");\n","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/ClassnameCharTest.java","additions":49,"deletions":88,"binary":false,"changes":137,"status":"modified"}]}