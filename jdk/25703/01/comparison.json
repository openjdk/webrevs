{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4957669 5017871\n+ * @bug 4957669 5017871 8358729\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,2 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n@@ -36,2 +39,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -39,2 +40,0 @@\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -43,0 +42,1 @@\n+import jdk.test.lib.Utils;\n@@ -46,2 +46,2 @@\n-    static String FNPrefix = System.getProperty(\"test.src\", \".\") + File.separator;\n-    static File classesJar = new File(FNPrefix + \"testclasses.jar\");\n+    private static final String JAR_PATH = Utils.TEST_CLASSES + Utils.FILE_SEPARATOR + \"testclasses.jar\";\n+    static File classesJar = new File(JAR_PATH);\n@@ -102,1 +102,0 @@\n-        private AccessControlContext acc;\n@@ -108,1 +107,0 @@\n-            acc = AccessController.getContext();\n@@ -131,22 +129,6 @@\n-                byte[] b = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<byte[]>() {\n-                            public byte[] run() throws IOException {\n-                                try {\n-                                    URL finalURL = new URL(base, path);\n-\n-                                    \/\/ Make sure the codebase won't be modified\n-                                    if (base.getProtocol().equals(finalURL.getProtocol()) &&\n-                                            base.getHost().equals(finalURL.getHost()) &&\n-                                            base.getPort() == finalURL.getPort()) {\n-                                        return getBytes(finalURL);\n-                                    }\n-                                    else {\n-                                        return null;\n-                                    }\n-                                } catch (Exception e) {\n-                                    return null;\n-                                }\n-                            }\n-                        }, acc);\n-\n-                if (b != null) {\n+                URL finalURL = new URL(base, path);\n+                \/\/ Make sure the codebase won't be modified\n+                if (base.getProtocol().equals(finalURL.getProtocol()) &&\n+                        base.getHost().equals(finalURL.getHost()) &&\n+                        base.getPort() == finalURL.getPort()) {\n+                    byte[] b = getBytes(finalURL);\n@@ -154,2 +136,0 @@\n-                } else {\n-                    throw new ClassNotFoundException(name);\n@@ -157,3 +137,2 @@\n-            } catch (PrivilegedActionException e) {\n-                throw new ClassNotFoundException(name, e.getException());\n-            }\n+            } catch (Exception _) {}\n+            throw new ClassNotFoundException(name);\n@@ -237,0 +216,10 @@\n+    \/\/ Create the class file and write it to the testable jar\n+    static void buildJar() throws IOException {\n+        var bytes = ClassFile.of().build(ClassDesc.of(\"fo o\"), _ -> {});\n+        try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(JAR_PATH))) {\n+            jos.putNextEntry(new JarEntry(\"fo o.class\"));\n+            jos.write(bytes, 0, bytes.length);\n+            jos.closeEntry();\n+        }\n+    }\n+\n@@ -239,0 +228,1 @@\n+            buildJar();\n","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/ClassnameCharTest.java","additions":27,"deletions":37,"binary":false,"changes":64,"status":"modified"},{"filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/testclasses.jar","binary":true,"status":"deleted"}]}