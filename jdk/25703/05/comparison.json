{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4957669 5017871\n+ * @bug 4957669 5017871 8358729\n@@ -30,2 +30,1 @@\n- * @compile -XDignore.symbol.file=true ClassnameCharTest.java\n- * @run main ClassnameCharTest\n+ * @run junit ClassnameCharTest\n@@ -35,0 +34,2 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n@@ -36,2 +37,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -39,3 +38,0 @@\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.jar.*;\n@@ -45,0 +41,2 @@\n+import org.junit.jupiter.api.Test;\n+\n@@ -46,3 +44,0 @@\n-    static String FNPrefix = System.getProperty(\"test.src\", \".\") + File.separator;\n-    static File classesJar = new File(FNPrefix + \"testclasses.jar\");\n-    static HttpServer server;\n@@ -50,1 +45,7 @@\n-    public static void realMain(String[] args) throws Exception {\n+    private static HttpServer server;\n+    private static final byte[] bytes =\n+            ClassFile.of().build(ClassDesc.of(\"fo o\"), _ -> {});\n+\n+    @Test\n+    void testClassName() throws IOException {\n+        \/\/ Build the server and set the context\n@@ -52,29 +53,9 @@\n-        server.createContext(\"\/\", new HttpHandler() {\n-            @Override\n-            public void handle(HttpExchange exchange) {\n-                try {\n-                    String filename = exchange.getRequestURI().getPath();\n-                    System.out.println(\"getRequestURI = \" + exchange.getRequestURI());\n-                    System.out.println(\"filename = \" + filename);\n-                    try (FileInputStream fis = new FileInputStream(classesJar);\n-                         JarInputStream jis = new JarInputStream(fis)) {\n-                        JarEntry entry;\n-                        while ((entry = jis.getNextJarEntry()) != null) {\n-                            if (filename.endsWith(entry.getName())) {\n-                                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                                byte[] buf = new byte[8092];\n-                                int count = 0;\n-                                while ((count = jis.read(buf)) != -1)\n-                                    baos.write(buf, 0, count);\n-                                exchange.sendResponseHeaders(200, baos.size());\n-                                try (OutputStream os = exchange.getResponseBody()) {\n-                                    baos.writeTo(os);\n-                                }\n-                                return;\n-                            }\n-                        }\n-                        fail(\"Failed to find \" + filename);\n-                    }\n-                } catch (IOException e) {\n-                    unexpected(e);\n-                }\n+        server.createContext(\"\/\", exchange -> {\n+            String filename = exchange.getRequestURI().getPath();\n+            System.out.println(\"getRequestURI = \" + exchange.getRequestURI());\n+            System.out.println(\"filename = \" + filename);\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            baos.write(bytes, 0, bytes.length);\n+            exchange.sendResponseHeaders(200, baos.size());\n+            try (OutputStream os = exchange.getResponseBody()) {\n+                baos.writeTo(os);\n@@ -90,1 +71,0 @@\n-            pass();\n@@ -102,1 +82,0 @@\n-        private AccessControlContext acc;\n@@ -108,1 +87,0 @@\n-            acc = AccessController.getContext();\n@@ -112,1 +90,1 @@\n-        public Class<?> findClass(String name) throws ClassNotFoundException {\n+        public Class<?> findClass(String name) {\n@@ -120,6 +98,0 @@\n-            \/\/ check loaded JAR files\n-            try {\n-                return super.findClass(name);\n-            } catch (ClassNotFoundException e) {\n-            }\n-\n@@ -130,0 +102,3 @@\n+            Exception exc = null;\n+            \/\/ try block used for checked exceptions as well as ClassFormatError\n+            \/\/ from defineClass call\n@@ -131,22 +106,6 @@\n-                byte[] b = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<byte[]>() {\n-                            public byte[] run() throws IOException {\n-                                try {\n-                                    URL finalURL = new URL(base, path);\n-\n-                                    \/\/ Make sure the codebase won't be modified\n-                                    if (base.getProtocol().equals(finalURL.getProtocol()) &&\n-                                            base.getHost().equals(finalURL.getHost()) &&\n-                                            base.getPort() == finalURL.getPort()) {\n-                                        return getBytes(finalURL);\n-                                    }\n-                                    else {\n-                                        return null;\n-                                    }\n-                                } catch (Exception e) {\n-                                    return null;\n-                                }\n-                            }\n-                        }, acc);\n-\n-                if (b != null) {\n+                URL finalURL = new URL(base, path);\n+                \/\/ Make sure the codebase won't be modified\n+                if (base.getProtocol().equals(finalURL.getProtocol()) &&\n+                        base.getHost().equals(finalURL.getHost()) &&\n+                        base.getPort() == finalURL.getPort()) {\n+                    byte[] b = getBytes(finalURL);\n@@ -154,2 +113,0 @@\n-                } else {\n-                    throw new ClassNotFoundException(name);\n@@ -157,2 +114,3 @@\n-            } catch (PrivilegedActionException e) {\n-                throw new ClassNotFoundException(name, e.getException());\n+                \/\/ protocol\/host\/port mismatch, fail with RuntimeException\n+            } catch (Exception underlyingE) {\n+                exc = underlyingE; \/\/ Most likely CFE from defineClass\n@@ -160,0 +118,3 @@\n+            \/\/ Fail if there was either a protocol\/host\/port mismatch\n+            \/\/ or an exception was thrown (which is propagated)\n+            throw new RuntimeException(name, exc);\n@@ -189,59 +150,0 @@\n-\n-    \/\/--------------------- Infrastructure ---------------------------\n-    static volatile int passed = 0, failed = 0;\n-\n-    static boolean pass() {\n-        passed++;\n-        return true;\n-    }\n-\n-    static boolean fail() {\n-        failed++;\n-        if (server != null) {\n-            server.stop(0);\n-        }\n-        Thread.dumpStack();\n-        return false;\n-    }\n-\n-    static boolean fail(String msg) {\n-        System.out.println(msg);\n-        return fail();\n-    }\n-\n-    static void unexpected(Throwable t) {\n-        failed++;\n-        if (server != null) {\n-            server.stop(0);\n-        }\n-        t.printStackTrace();\n-    }\n-\n-    static boolean check(boolean cond) {\n-        if (cond) {\n-            pass();\n-        } else {\n-            fail();\n-        }\n-        return cond;\n-    }\n-\n-    static boolean equal(Object x, Object y) {\n-        if (x == null ? y == null : x.equals(y)) {\n-            return pass();\n-        } else {\n-            return fail(x + \" not equal to \" + y);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        try {\n-            realMain(args);\n-        } catch (Throwable t) {\n-            unexpected(t);\n-        }\n-        System.out.println(\"\\nPassed = \" + passed + \" failed = \" + failed);\n-        if (failed > 0) {\n-            throw new AssertionError(\"Some tests failed\");\n-        }\n-    }\n","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/ClassnameCharTest.java","additions":39,"deletions":137,"binary":false,"changes":176,"status":"modified"},{"filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/testclasses.jar","binary":true,"status":"deleted"}]}