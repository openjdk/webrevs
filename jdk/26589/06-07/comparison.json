{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import compiler.lib.verify.*;\n@@ -37,0 +38,1 @@\n+import java.util.Random;\n@@ -39,0 +41,1 @@\n+import jdk.test.lib.Utils;\n@@ -46,0 +49,2 @@\n+    private static short[] expected;\n+    private static Random rnd;\n@@ -47,2 +52,2 @@\n-    \/\/ Choose FP16_IN_RANGE which is within the range of [-128 << 8, 127 << 8] and a multiple of 256\n-    private static final Float16 FP16_IN_RANGE = Float16.shortBitsToFloat16((short)512);\n+    \/\/ Choose FP16_IMM8 which is within the range of [-128 << 8, 127 << 8] and a multiple of 256\n+    private static final Float16 FP16_IMM8;\n@@ -50,2 +55,2 @@\n-    \/\/ Choose a value out of the range of [-128 << 8, 127 << 8] or a non multiple of 256 for FP16_OUT_OF_RANGE\n-    private static final Float16 FP16_OUT_OF_RANGE = Float16.shortBitsToFloat16((short)1035);\n+    \/\/ Choose a value in the range [-128 << 8, 127 << 8] and a non multiple of 256 for FP16_NON_IMM8\n+    private static final Float16 FP16_NON_IMM8;\n@@ -56,0 +61,1 @@\n+        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\");\n@@ -60,0 +66,9 @@\n+        rnd = Utils.getRandomInstance();\n+        int k = rnd.nextInt(-128, 128);\n+        int b = rnd.nextInt(1, 256);\n+        short bits_imm8     = (short) (k << 8);\n+        short bits_non_imm8 = (short) ((k << 8) + b);\n+\n+        FP16_IMM8     = Float16.shortBitsToFloat16(bits_imm8);\n+        FP16_NON_IMM8 = Float16.shortBitsToFloat16(bits_non_imm8);\n+\n@@ -62,0 +77,1 @@\n+        expected = new short[LEN];\n@@ -81,1 +97,1 @@\n-            output[i] = float16ToRawShortBits(Float16.add(shortBitsToFloat16(input[i]), FP16_IN_RANGE));\n+            output[i] = float16ToRawShortBits(Float16.add(shortBitsToFloat16(input[i]), FP16_IMM8));\n@@ -88,4 +104,1 @@\n-            short expected = floatToFloat16(float16ToFloat(input[i]) + FP16_IN_RANGE.floatValue());\n-            if (expected != output[i]) {\n-                throw new AssertionError(\"Result Mismatch!, input = \" + input[i] + \" constant = \" + FP16_IN_RANGE + \" actual = \" + output[i] +  \" expected = \" + expected);\n-            }\n+            expected[i] = floatToFloat16(float16ToFloat(input[i]) + FP16_IMM8.floatValue());\n@@ -93,0 +106,1 @@\n+        Verify.checkEQWithRawBits(output, expected);\n@@ -111,1 +125,1 @@\n-            output[i] = float16ToRawShortBits(add(shortBitsToFloat16(input[i]), FP16_OUT_OF_RANGE));\n+            output[i] = float16ToRawShortBits(add(shortBitsToFloat16(input[i]), FP16_NON_IMM8));\n@@ -118,4 +132,1 @@\n-            short expected = floatToFloat16(float16ToFloat(input[i]) + FP16_OUT_OF_RANGE.floatValue());\n-            if (expected != output[i]) {\n-                throw new AssertionError(\"Result Mismatch!, input = \" + input[i] + \" constant = \" + FP16_OUT_OF_RANGE + \" actual = \" + output[i] +  \" expected = \" + expected);\n-            }\n+            expected[i] = floatToFloat16(float16ToFloat(input[i]) + FP16_NON_IMM8.floatValue());\n@@ -123,0 +134,1 @@\n+        Verify.checkEQWithRawBits(output, expected);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestFloat16Replicate.java","additions":26,"deletions":14,"binary":false,"changes":40,"status":"modified"}]}