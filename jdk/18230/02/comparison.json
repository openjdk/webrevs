{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -288,1 +289,3 @@\n-  \/\/ Test accessing the committed area.\n+  \/\/ Test accessing the committed area. But not for ASAN. We don't know which portions\n+  \/\/ of the chunk are still poisoned.\n+#if !INCLUDE_ASAN\n@@ -297,0 +300,1 @@\n+#endif \/\/ !INCLUDE_ASAN\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunk.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -436,0 +436,3 @@\n+  \/\/ Down here, from ASAN's view, this memory may be poisoned, since we only unpoison\n+  \/\/ way up at the ChunkManager level.\n+#if !INCLUDE_ASAN\n@@ -443,0 +446,1 @@\n+#endif \/\/ !INCLUDE_ASAN\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+#define INCLUDE_ASAN 1\n+#else\n+#define INCLUDE_ASAN 0\n@@ -60,1 +63,0 @@\n-#else\n","filename":"src\/hotspot\/share\/sanitizers\/address.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -159,0 +159,5 @@\n+      \/\/ At the VirtualSpaceNode level, all memory is still poisoned.\n+      \/\/ Since we bypass the normal way of allocating chunks (ChunkManager::get_chunk), we\n+      \/\/ need to unpoison this chunk.\n+      ASAN_UNPOISON_MEMORY_REGION(c->base(), c->committed_words() * BytesPerWord);\n+\n","filename":"test\/hotspot\/gtest\/metaspace\/test_virtualspacenode.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}