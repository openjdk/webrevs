{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+#include \"utilities\/macros.hpp\"\n@@ -288,1 +289,3 @@\n-  \/\/ Test accessing the committed area.\n+  \/\/ Test accessing the committed area. But not for ASAN. We don't know which portions\n+  \/\/ of the chunk are still poisoned.\n+#if !INCLUDE_ASAN\n@@ -297,0 +300,1 @@\n+#endif \/\/ !INCLUDE_ASAN\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunk.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"utilities\/macros.hpp\"\n@@ -436,0 +437,3 @@\n+  \/\/ Down here, from ASAN's view, this memory may be poisoned, since we only unpoison\n+  \/\/ way up at the ChunkManager level.\n+#if !INCLUDE_ASAN\n@@ -443,0 +447,1 @@\n+#endif \/\/ !INCLUDE_ASAN\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"utilities\/macros.hpp\"\n@@ -216,0 +217,2 @@\n+#if !INCLUDE_ASAN\n+\n@@ -293,0 +296,3 @@\n+\n+#endif \/\/ !INCLUDE_ASAN\n+\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+#include \"utilities\/macros.hpp\"\n@@ -1202,0 +1203,2 @@\n+#if !INCLUDE_ASAN\n+\n@@ -1289,0 +1292,2 @@\n+\n+#endif \/\/ !INCLUDE_ASAN\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -638,0 +638,6 @@\n+#ifdef ADDRESS_SANITIZER\n+#define INCLUDE_ASAN 1\n+#else\n+#define INCLUDE_ASAN 0\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/macros.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"utilities\/macros.hpp\"\n@@ -159,0 +160,5 @@\n+      \/\/ At the VirtualSpaceNode level, all memory is still poisoned.\n+      \/\/ Since we bypass the normal way of allocating chunks (ChunkManager::get_chunk), we\n+      \/\/ need to unpoison this chunk.\n+      ASAN_UNPOISON_MEMORY_REGION(c->base(), c->committed_words() * BytesPerWord);\n+\n","filename":"test\/hotspot\/gtest\/metaspace\/test_virtualspacenode.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -34,0 +35,2 @@\n+#if !INCLUDE_ASAN\n+\n@@ -164,0 +167,2 @@\n+\n+#endif \/\/ !INCLUDE_ASAN\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_buffer_overflow_detection.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -41,0 +42,3 @@\n+\/\/ ASAN complains about allocating very large sizes\n+#if !INCLUDE_ASAN\n+\n@@ -88,0 +92,1 @@\n+#endif \/\/ !INCLUDE_ASAN\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_cornercases.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -36,0 +37,2 @@\n+#if !INCLUDE_ASAN\n+\n@@ -126,0 +129,2 @@\n+\n+#endif \/\/ !INCLUDE_ASAN\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_locationprinting.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}