{"files":[{"patch":"@@ -464,0 +464,1 @@\n+ *  loader:  the loader to use\n@@ -474,1 +475,1 @@\n-JVM_LookupDefineClass(JNIEnv *env, jclass lookup, const char *name, const jbyte *buf,\n+JVM_LookupDefineClass(JNIEnv *env, jobject loader, jclass lookup, const char *name, const jbyte *buf,\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -947,1 +947,1 @@\n-static jclass jvm_lookup_define_class(jclass lookup, const char *name,\n+static jclass jvm_lookup_define_class(jobject loader, jclass lookup, const char *name,\n@@ -959,1 +959,1 @@\n-  Handle class_loader (THREAD, lookup_k->class_loader());\n+  Handle class_loader (THREAD, JNIHandles::resolve(loader));\n@@ -1077,1 +1077,1 @@\n-JVM_ENTRY(jclass, JVM_LookupDefineClass(JNIEnv *env, jclass lookup, const char *name, const jbyte *buf,\n+JVM_ENTRY(jclass, JVM_LookupDefineClass(JNIEnv *env, jobject loader, jclass lookup, const char *name, const jbyte *buf,\n@@ -1086,1 +1086,1 @@\n-  return jvm_lookup_define_class(lookup, name, buf, len, pd, initialize, flags, classData, THREAD);\n+  return jvm_lookup_define_class(loader, lookup, name, buf, len, pd, initialize, flags, classData, THREAD);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,1 @@\n+import jdk.internal.reflect.ReflectionFactory;\n@@ -542,2 +543,5 @@\n-            byte[] proxyClassFile = ProxyGenerator.generateProxyClass(loader, proxyName, interfaces,\n-                                                                      context.accessFlags() | Modifier.FINAL);\n+            int access = context.accessFlags() | Modifier.FINAL;\n+\n+            Class<?> pc;\n+\n+            var cd = ProxyGenerator.generateProxyClass(loader, proxyName, interfaces, access);\n@@ -545,4 +549,12 @@\n-                Class<?> pc = JLA.defineClass(loader, proxyName, proxyClassFile,\n-                                              null, \"__dynamic_proxy__\");\n-                reverseProxyCache.sub(pc).putIfAbsent(loader, Boolean.TRUE);\n-                return pc;\n+                if (ReflectionFactory.usesLegacyProxy()) {\n+                    pc = JLA.defineClass(loader, proxyName, cd.bytecode(), null, \"__dynamic_proxy__\");\n+                } else {\n+                    pc = JLA.defineClass(loader,\n+                            Proxy.class, \/\/ NestHost, unused\n+                            proxyName, \/\/ binary name\n+                            cd.bytecode(), \/\/ bytes\n+                            null, \/\/ protection domain\n+                            false, \/\/ initialize\n+                            0x00000002, \/\/ flags, HIDDEN\n+                            cd.classData()); \/\/ classData\n+                }\n@@ -559,0 +571,3 @@\n+\n+            reverseProxyCache.sub(pc).putIfAbsent(loader, Boolean.TRUE);\n+            return pc;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.constant.DynamicConstantDesc;\n@@ -45,0 +46,1 @@\n+import jdk.internal.reflect.ReflectionFactory;\n@@ -92,1 +94,2 @@\n-            MTD_String = MethodTypeDescImpl.ofValidated(CD_String);\n+            MTD_String = MethodTypeDescImpl.ofValidated(CD_String),\n+            MTD_Object_int = MethodTypeDescImpl.ofValidated(CD_Object, CD_int);\n@@ -96,0 +99,5 @@\n+    private static final boolean LEGACY = ReflectionFactory.usesLegacyProxy();\n+\n+    private static final DynamicConstantDesc<?> METHOD_LIST_CLASS_DATA = LEGACY ? null :\n+            DynamicConstantDesc.ofNamed(BSM_CLASS_DATA, DEFAULT_NAME, CD_List);\n+\n@@ -142,1 +150,0 @@\n-\n@@ -200,0 +207,2 @@\n+    record GeneratedClass(byte[] bytecode, List<Method> classData) {}\n+\n@@ -208,1 +217,1 @@\n-    static byte[] generateProxyClass(ClassLoader loader,\n+    static GeneratedClass generateProxyClass(ClassLoader loader,\n@@ -214,1 +223,1 @@\n-        final byte[] classFile = gen.generateClassFile();\n+        var classFile = gen.generateClassFile();\n@@ -230,1 +239,1 @@\n-                                Files.write(path, classFile);\n+                                Files.write(path, classFile.bytecode);\n@@ -448,1 +457,1 @@\n-    private byte[] generateClassFile() {\n+    private GeneratedClass generateClassFile() {\n@@ -479,1 +488,2 @@\n-        return CF_CONTEXT.build(thisClassCE, cp, clb -> {\n+        List<Method> methods = new ArrayList<>();\n+        var bytes = CF_CONTEXT.build(thisClassCE, cp, clb -> {\n@@ -485,0 +495,1 @@\n+            methods.clear();\n@@ -491,1 +502,1 @@\n-                    pm.generateMethod(clb);\n+                    pm.generateMethod(clb, methods);\n@@ -495,1 +506,2 @@\n-            generateStaticInitializer(clb);\n+            if (LEGACY)\n+                generateStaticInitializer(clb);\n@@ -498,0 +510,1 @@\n+        return new GeneratedClass(bytes, List.copyOf(methods));\n@@ -574,0 +587,1 @@\n+        assert LEGACY;\n@@ -674,2 +688,2 @@\n-            this.methodField = cp.fieldRefEntry(thisClassCE,\n-                cp.nameAndTypeEntry(methodFieldName, CD_Method));\n+            this.methodField = LEGACY ? cp.fieldRefEntry(thisClassCE,\n+                cp.nameAndTypeEntry(methodFieldName, CD_Method)) : null ;\n@@ -695,1 +709,1 @@\n-        private void generateMethod(ClassBuilder clb) {\n+        private void generateMethod(ClassBuilder clb, List<Method> collector) {\n@@ -699,0 +713,3 @@\n+            \/\/ Set up outside of code building to avoid wide jump side effects\n+            int index = collector.size();\n+            collector.addLast(method);\n@@ -705,2 +722,9 @@\n-                           .aload(cob.receiverSlot())\n-                           .getstatic(methodField);\n+                           .aload(cob.receiverSlot());\n+                        if (LEGACY) {\n+                            cob.getstatic(methodField);\n+                        } else {\n+                            cob.ldc(METHOD_LIST_CLASS_DATA)\n+                               .loadConstant(index)\n+                               .invokeinterface(CD_List, \"get\", MTD_Object_int)\n+                               .checkcast(CD_Method);\n+                        }\n@@ -793,0 +817,1 @@\n+            assert LEGACY;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":39,"deletions":14,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -514,0 +514,4 @@\n+    public static boolean usesLegacyProxy() {\n+        return !config().useHiddenProxy;\n+    }\n+\n@@ -531,0 +535,1 @@\n+                                                            false,  \/\/ useHiddenProxy\n@@ -546,0 +551,1 @@\n+                          boolean useHiddenProxy,\n@@ -571,0 +577,2 @@\n+        boolean useHiddenProxy =\n+            \"true\".equals(props.getProperty(\"jdk.reflect.useHiddenProxy\"));\n@@ -574,1 +582,4 @@\n-        return new Config(useNativeAccessorOnly, useOldSerializableConstructor, disableSerialConstructorChecks);\n+        if (useHiddenProxy && useOldSerializableConstructor)\n+            throw new InternalError(\"Hidden Proxy requires MethodHandle serial constructor\");\n+\n+        return new Config(useNativeAccessorOnly, useOldSerializableConstructor, useHiddenProxy, disableSerialConstructorChecks);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -275,1 +275,1 @@\n-    result = JVM_LookupDefineClass(env, lookup, utfName, body, length, pd, initialize, flags, classData);\n+    result = JVM_LookupDefineClass(env, loader, lookup, utfName, body, length, pd, initialize, flags, classData);\n","filename":"src\/java.base\/share\/native\/libjava\/ClassLoader.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}