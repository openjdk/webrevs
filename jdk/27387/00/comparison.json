{"files":[{"patch":"@@ -259,8 +259,10 @@\n-        if (!Platform.isWindows()) {  \/\/ not applicable on Windows\n-            var expectedBody = openHTML + \"\"\"\n-                <h1>File not found<\/h1>\n-                <p>&#x2F;aFile.txt<\/p>\n-                \"\"\" + closeHTML;\n-            var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n-            var root = createDirectoryInCustomFs(\"testNotReadableFileGET\");\n-            var file = Files.writeString(root.resolve(\"aFile.txt\"), \"some text\", CREATE);\n+        if (Platform.isWindows()) {\n+            throw new SkipException(\"Not applicable on Windows\");\n+        }\n+        var expectedBody = openHTML + \"\"\"\n+            <h1>File not found<\/h1>\n+            <p>&#x2F;aFile.txt<\/p>\n+            \"\"\" + closeHTML;\n+        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n+        var root = createDirectoryInCustomFs(\"testNotReadableFileGET\");\n+        var file = Files.writeString(root.resolve(\"aFile.txt\"), \"some text\", CREATE);\n@@ -268,2 +270,2 @@\n-            file.toFile().setReadable(false, false);\n-            assert !Files.isReadable(file);\n+        file.toFile().setReadable(false, false);\n+        assert !Files.isReadable(file);\n@@ -271,13 +273,12 @@\n-            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-            server.start();\n-            try {\n-                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-                var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\")).build();\n-                var response = client.send(request, BodyHandlers.ofString());\n-                assertEquals(response.statusCode(), 404);\n-                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-                assertEquals(response.body(), expectedBody);\n-            } finally {\n-                server.stop(0);\n-                file.toFile().setReadable(true, false);\n-            }\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 404);\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+            assertEquals(response.body(), expectedBody);\n+        } finally {\n+            server.stop(0);\n+            file.toFile().setReadable(true, false);\n@@ -289,9 +290,11 @@\n-        if (!Platform.isWindows()) {  \/\/ not applicable on Windows\n-            var expectedBody = openHTML + \"\"\"\n-                <h1>File not found<\/h1>\n-                <p>&#x2F;dir&#x2F;aFile.txt<\/p>\n-                \"\"\" + closeHTML;\n-            var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n-            var root = createDirectoryInCustomFs(\"testNotReadableSegmentGET\");\n-            var dir = Files.createDirectory(root.resolve(\"dir\"));\n-            var file = Files.writeString(dir.resolve(\"aFile.txt\"), \"some text\", CREATE);\n+        if (Platform.isWindows()) {\n+            throw new SkipException(\"Not applicable on Windows\");\n+        }\n+        var expectedBody = openHTML + \"\"\"\n+            <h1>File not found<\/h1>\n+            <p>&#x2F;dir&#x2F;aFile.txt<\/p>\n+            \"\"\" + closeHTML;\n+        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n+        var root = createDirectoryInCustomFs(\"testNotReadableSegmentGET\");\n+        var dir = Files.createDirectory(root.resolve(\"dir\"));\n+        var file = Files.writeString(dir.resolve(\"aFile.txt\"), \"some text\", CREATE);\n@@ -299,3 +302,3 @@\n-            dir.toFile().setReadable(false, false);\n-            assert !Files.isReadable(dir);\n-            assert Files.isReadable(file);\n+        dir.toFile().setReadable(false, false);\n+        assert !Files.isReadable(dir);\n+        assert Files.isReadable(file);\n@@ -303,13 +306,12 @@\n-            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-            server.start();\n-            try {\n-                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-                var request = HttpRequest.newBuilder(uri(server, \"dir\/aFile.txt\")).build();\n-                var response = client.send(request, BodyHandlers.ofString());\n-                assertEquals(response.statusCode(), 404);\n-                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-                assertEquals(response.body(), expectedBody);\n-            } finally {\n-                server.stop(0);\n-                dir.toFile().setReadable(true, false);\n-            }\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"dir\/aFile.txt\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 404);\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+            assertEquals(response.body(), expectedBody);\n+        } finally {\n+            server.stop(0);\n+            dir.toFile().setReadable(true, false);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CustomFileSystemTest.java","additions":50,"deletions":48,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -312,8 +312,10 @@\n-        if (!Platform.isWindows()) {  \/\/ not applicable on Windows\n-            var expectedBody = openHTML + \"\"\"\n-                <h1>File not found<\/h1>\n-                <p>&#x2F;aFile.txt<\/p>\n-                \"\"\" + closeHTML;\n-            var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n-            var root = Files.createDirectory(TEST_DIR.resolve(\"testNotReadableFileGET\"));\n-            var file = Files.writeString(root.resolve(\"aFile.txt\"), \"some text\", CREATE);\n+        if (Platform.isWindows()) {\n+            throw new SkipException(\"Not applicable on Windows\");\n+        }\n+        var expectedBody = openHTML + \"\"\"\n+            <h1>File not found<\/h1>\n+            <p>&#x2F;aFile.txt<\/p>\n+            \"\"\" + closeHTML;\n+        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n+        var root = Files.createDirectory(TEST_DIR.resolve(\"testNotReadableFileGET\"));\n+        var file = Files.writeString(root.resolve(\"aFile.txt\"), \"some text\", CREATE);\n@@ -321,2 +323,2 @@\n-            file.toFile().setReadable(false, false);\n-            assert !Files.isReadable(file);\n+        file.toFile().setReadable(false, false);\n+        assert !Files.isReadable(file);\n@@ -324,13 +326,12 @@\n-            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-            server.start();\n-            try {\n-                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-                var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\")).build();\n-                var response = client.send(request, BodyHandlers.ofString());\n-                assertEquals(response.statusCode(), 404);\n-                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-                assertEquals(response.body(), expectedBody);\n-            } finally {\n-                server.stop(0);\n-                file.toFile().setReadable(true, false);\n-            }\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"aFile.txt\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 404);\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+            assertEquals(response.body(), expectedBody);\n+        } finally {\n+            server.stop(0);\n+            file.toFile().setReadable(true, false);\n@@ -342,9 +343,11 @@\n-        if (!Platform.isWindows()) {  \/\/ not applicable on Windows\n-            var expectedBody = openHTML + \"\"\"\n-                <h1>File not found<\/h1>\n-                <p>&#x2F;dir&#x2F;aFile.txt<\/p>\n-                \"\"\" + closeHTML;\n-            var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n-            var root = Files.createDirectory(TEST_DIR.resolve(\"testNotReadableSegmentGET\"));\n-            var dir = Files.createDirectory(root.resolve(\"dir\"));\n-            var file = Files.writeString(dir.resolve(\"aFile.txt\"), \"some text\", CREATE);\n+        if (Platform.isWindows()) {\n+            throw new SkipException(\"Not applicable on Windows\");\n+        }\n+        var expectedBody = openHTML + \"\"\"\n+            <h1>File not found<\/h1>\n+            <p>&#x2F;dir&#x2F;aFile.txt<\/p>\n+            \"\"\" + closeHTML;\n+        var expectedLength = Integer.toString(expectedBody.getBytes(UTF_8).length);\n+        var root = Files.createDirectory(TEST_DIR.resolve(\"testNotReadableSegmentGET\"));\n+        var dir = Files.createDirectory(root.resolve(\"dir\"));\n+        var file = Files.writeString(dir.resolve(\"aFile.txt\"), \"some text\", CREATE);\n@@ -352,3 +355,3 @@\n-            dir.toFile().setReadable(false, false);\n-            assert !Files.isReadable(dir);\n-            assert Files.isReadable(file);\n+        dir.toFile().setReadable(false, false);\n+        assert !Files.isReadable(dir);\n+        assert Files.isReadable(file);\n@@ -356,13 +359,12 @@\n-            var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n-            server.start();\n-            try {\n-                var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n-                var request = HttpRequest.newBuilder(uri(server, \"dir\/aFile.txt\")).build();\n-                var response = client.send(request, BodyHandlers.ofString());\n-                assertEquals(response.statusCode(), 404);\n-                assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n-                assertEquals(response.body(), expectedBody);\n-            } finally {\n-                server.stop(0);\n-                dir.toFile().setReadable(true, false);\n-            }\n+        var server = SimpleFileServer.createFileServer(LOOPBACK_ADDR, root, OutputLevel.VERBOSE);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"dir\/aFile.txt\")).build();\n+            var response = client.send(request, BodyHandlers.ofString());\n+            assertEquals(response.statusCode(), 404);\n+            assertEquals(response.headers().firstValue(\"content-length\").get(), expectedLength);\n+            assertEquals(response.body(), expectedBody);\n+        } finally {\n+            server.stop(0);\n+            dir.toFile().setReadable(true, false);\n@@ -683,12 +685,16 @@\n-        {   \/\/ not readable\n-            if (!Platform.isWindows()) {  \/\/ not applicable on Windows\n-                Path p = Files.createDirectory(TEST_DIR.resolve(\"aDir\"));\n-                p.toFile().setReadable(false, false);\n-                assert !Files.isReadable(p);\n-                try {\n-                    var iae = expectThrows(IAE, () -> SimpleFileServer.createFileServer(addr, p, OutputLevel.INFO));\n-                    assertTrue(iae.getMessage().contains(\"not readable\"));\n-                } finally {\n-                    p.toFile().setReadable(true, false);\n-                }\n-            }\n+    }\n+\n+    @Test\n+    public void testNonReadablePath() throws Exception {\n+        if (Platform.isWindows()) {\n+            throw new SkipException(\"Not applicable on Windows\");\n+        }\n+        var addr = LOOPBACK_ADDR;\n+        Path p = Files.createDirectory(TEST_DIR.resolve(\"aDir\"));\n+        p.toFile().setReadable(false, false);\n+        assert !Files.isReadable(p);\n+        try {\n+            var iae = expectThrows(IAE, () -> SimpleFileServer.createFileServer(addr, p, OutputLevel.INFO));\n+            assertTrue(iae.getMessage().contains(\"not readable\"));\n+        } finally {\n+            p.toFile().setReadable(true, false);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":66,"deletions":60,"binary":false,"changes":126,"status":"modified"}]}