{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import jdk.internal.util.ByteArrayLittleEndian;\n@@ -173,1 +174,1 @@\n-        return (b[off] & 0xff) | ((b[off + 1] & 0xff) << 8);\n+        return ByteArrayLittleEndian.getUnsignedShort(b, off);\n@@ -181,1 +182,1 @@\n-        return (get16(b, off) | ((long)get16(b, off+2) << 16)) & 0xffffffffL;\n+        return ByteArrayLittleEndian.getUnsignedInt(b, off);\n@@ -189,1 +190,1 @@\n-        return get32(b, off) | (get32(b, off+4) << 32);\n+        return ByteArrayLittleEndian.getLong(b, off);\n@@ -198,1 +199,1 @@\n-        return (get16(b, off) | (get16(b, off+2) << 16));\n+        return ByteArrayLittleEndian.getInt(b, off);\n@@ -207,1 +208,1 @@\n-        return (b[n] & 0xff) | ((b[n + 1] & 0xff) << 8);\n+        return ByteArrayLittleEndian.getUnsignedShort(b, n);\n@@ -211,1 +212,1 @@\n-        return ((SH(b, n)) | (SH(b, n + 2) << 16)) & 0xffffffffL;\n+        return ByteArrayLittleEndian.getUnsignedInt(b, n);\n@@ -215,1 +216,1 @@\n-        return (LG(b, n)) | (LG(b, n + 4) << 32);\n+        return ByteArrayLittleEndian.getLong(b, n);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipUtils.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -135,0 +135,17 @@\n+    \/**\n+     * {@return an {@code unsigned int} from the provided {@code array} at the given {@code offset}\n+     * using little endian order}.\n+     * <p>\n+     * There are no access alignment requirements.\n+     *\n+     * @param array  to get a value from.\n+     * @param offset where extraction in the array should begin\n+     * @return an {@code int} representing an unsigned short from the array\n+     * @throws IndexOutOfBoundsException if the provided {@code offset} is outside\n+     *                                   the range [0, array.length - 4]\n+     * @see #setUnsignedInt(byte[], int, long)\n+     *\/\n+    public static long getUnsignedInt(byte[] array, int offset) {\n+        return Integer.toUnsignedLong((int) INT.get(array, offset));\n+    }\n+\n@@ -319,0 +336,17 @@\n+    \/**\n+     * Sets (writes) the provided {@code value} using little endian order into\n+     * the provided {@code array} beginning at the given {@code offset}.\n+     * <p>\n+     * There are no access alignment requirements.\n+     *\n+     * @param array  to set (write) a value into\n+     * @param offset where setting (writing) in the array should begin\n+     * @param value  value to set in the array\n+     * @throws IndexOutOfBoundsException if the provided {@code offset} is outside\n+     *                                   the range [0, array.length - 4]\n+     * @see #getUnsignedInt(byte[], int)\n+     *\/\n+    public static void setUnsignedInt(byte[] array, int offset, long value) {\n+        INT.set(array, offset, (int) value);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ByteArrayLittleEndian.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"}]}