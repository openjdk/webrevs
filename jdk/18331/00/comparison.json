{"files":[{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Cursor;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.BorderFactory;\n+import javax.swing.JFrame;\n+import javax.swing.JLayeredPane;\n+import javax.swing.JPanel;\n+\n+\/**\n+ * @test\n+ * @bug 8007155\n+ * @summary [macosx] Disabled panel takes mouse input in JLayeredPane\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual CursorOverlappedPanelsTest\n+ *\/\n+public class CursorOverlappedPanelsTest extends Frame {\n+    public static JFrame initialize() {\n+        final JFrame frame = new JFrame(\"Overlapping Panels Cursor Test\");\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\n+        JLayeredPane layeredPane = new JLayeredPane();\n+        layeredPane.setPreferredSize(new Dimension(400, 400));\n+        JPanel enabledPanel = createPanel(new Point(10, 10), true);\n+        JPanel disabledPanel = createPanel(new Point(100, 100), false);\n+        layeredPane.add(disabledPanel, JLayeredPane.PALETTE_LAYER);\n+        layeredPane.add(enabledPanel, JLayeredPane.DEFAULT_LAYER);\n+\n+        frame.getContentPane().add(layeredPane);\n+        frame.pack();\n+        frame.setVisible(true);\n+        return frame;\n+    }\n+\n+    private static JPanel createPanel(Point location, boolean enabled) {\n+        final JPanel panel = new JPanel();\n+        panel.setOpaque(false);\n+        panel.setEnabled(enabled);\n+        panel.setSize(new Dimension(200, 200));\n+        panel.setLocation(location);\n+        panel.setBorder(BorderFactory.createTitledBorder(\n+                enabled ? \"Enabled\" : \"Disabled\"));\n+        panel.setCursor(Cursor.getPredefinedCursor(\n+                enabled ? Cursor.CROSSHAIR_CURSOR : Cursor.DEFAULT_CURSOR));\n+        return panel;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        String instructions = \"\"\"\n+            1) Move the mouse cursor into the area\n+               of Enabled and Disabled panels intersection;\n+            2) Check that the crosshair cursor is displayed.\n+            If so, press PASS, otherwise press FAIL.\n+            \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Overlapping Panels Cursor Test Instructions\")\n+                .instructions(instructions)\n+                .rows(4)\n+                .columns(30)\n+                .testUI(CursorOverlappedPanelsTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Cursor\/CursorOverlappedPanelsTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -1,32 +0,0 @@\n-<!--\n- Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-    <head>\n-        <title>CursorOverlappedPanelsTest, bug ID 8007155<\/title>\n-    <\/head>\n-    <body>\n-    <applet CODE=\"CursorOverlappedPanelsTest.class\" WIDTH=300 HEIGHT=100><\/applet>\n-    <p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/Cursor\/CursorOverlappedPanelsTest\/CursorOverlappedPanelsTest.html","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,226 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.*;\n-\/\/import java.applet.Applet;\n-import javax.swing.BorderFactory;\n-import javax.swing.JApplet;\n-import javax.swing.JFrame;\n-import javax.swing.JLayeredPane;\n-import javax.swing.JPanel;\n-\n-\/**\n- * @test\n- * @bug 8007155\n- * @summary [macosx] Disabled panel takes mouse input in JLayeredPane\n- * @author Alexander Scherbatiy: area=java.awt.Cursor\n- * @run applet\/manual=yesno CursorOverlappedPanelsTest.html\n- *\/\n-public class CursorOverlappedPanelsTest extends JApplet {\n-    \/\/Declare things used in the test, like buttons and labels here\n-\n-    public void init() {\n-        \/\/Create instructions for the user here, as well as set up\n-        \/\/ the environment -- set the layout manager, add buttons,\n-        \/\/ etc.\n-        this.setLayout(new BorderLayout());\n-\n-        String[] instructions = {\n-            \"Verify that the Crosshair cursor from enabled panel\"\n-            + \" is displayed on the panels intersection\",\n-            \"1) Move the mosue cursor on the Enabled and Disabled panels\"\n-            + \" intersection\",\n-            \"2) Check that the Crosshair cursor is displayed \",\n-            \"If so, press PASS, else press FAIL.\"\n-        };\n-        Sysout.createDialogWithInstructions(instructions);\n-\n-    }\/\/End  init()\n-\n-    public void start() {\n-        \/\/Get things going.  Request focus, set size, et cetera\n-        setSize(200, 200);\n-        setVisible(true);\n-        validate();\n-        try {\n-            EventQueue.invokeAndWait(new Runnable() {\n-                public void run() {\n-                    createAndShowGUI();\n-                }\n-            });\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\/\/ start()\n-\n-    \/\/The rest of this class is the actions which perform the test...\n-    \/\/Use Sysout.println to communicate with the user NOT System.out!!\n-    \/\/Sysout.println (\"Something Happened!\");\n-    private static JPanel createPanel(Point location, boolean enabled) {\n-        final JPanel panel = new JPanel();\n-        panel.setOpaque(false);\n-        panel.setEnabled(enabled);\n-        panel.setSize(new Dimension(200, 200));\n-        panel.setLocation(location);\n-        panel.setBorder(BorderFactory.createTitledBorder(\n-                enabled ? \"Enabled\" : \"Disabled\"));\n-        panel.setCursor(Cursor.getPredefinedCursor(\n-                enabled ? Cursor.CROSSHAIR_CURSOR : Cursor.DEFAULT_CURSOR));\n-        System.out.println(\"cursor: \" + Cursor.getPredefinedCursor(enabled ? Cursor.CROSSHAIR_CURSOR : Cursor.DEFAULT_CURSOR));\n-        return panel;\n-    }\n-\n-    private static void createAndShowGUI() {\n-        final JFrame frame = new JFrame(\"Test\");\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\n-        JLayeredPane layeredPane = new JLayeredPane();\n-        layeredPane.setPreferredSize(new Dimension(400, 400));\n-        JPanel enabledPanel = createPanel(new Point(10, 10), true);\n-        JPanel disabledPanel = createPanel(new Point(100, 100), false);\n-        layeredPane.add(disabledPanel, JLayeredPane.PALETTE_LAYER);\n-        layeredPane.add(enabledPanel, JLayeredPane.DEFAULT_LAYER);\n-\n-        frame.getContentPane().add(layeredPane);\n-        frame.pack();\n-        frame.setVisible(true);\n-    }\n-}\/\/ class BlockedWindowTest\n-\n-\/* Place other classes related to the test after this line *\/\n-\/**\n- * **************************************************\n- * Standard Test Machinery DO NOT modify anything below -- it's a standard chunk\n- * of code whose purpose is to make user interaction uniform, and thereby make\n- * it simpler to read and understand someone else's test.\n- * **************************************************\n- *\/\n-\/**\n- * This is part of the standard test machinery. It creates a dialog (with the\n- * instructions), and is the interface for sending text messages to the user. To\n- * print the instructions, send an array of strings to Sysout.createDialog\n- * WithInstructions method. Put one line of instructions per array entry. To\n- * display a message for the tester to see, simply call Sysout.println with the\n- * string to be displayed. This mimics System.out.println but works within the\n- * test harness as well as standalone.\n- *\/\n-class Sysout {\n-\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions(String[] instructions) {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        dialog.printInstructions(instructions);\n-        dialog.setVisible(true);\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void createDialog() {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        String[] defInstr = {\"Instructions will appear here. \", \"\"};\n-        dialog.printInstructions(defInstr);\n-        dialog.setVisible(true);\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void printInstructions(String[] instructions) {\n-        dialog.printInstructions(instructions);\n-    }\n-\n-    public static void println(String messageIn) {\n-        dialog.displayMessage(messageIn);\n-    }\n-}\/\/ Sysout  class\n-\n-\/**\n- * This is part of the standard test machinery. It provides a place for the test\n- * instructions to be displayed, and a place for interactive messages to the\n- * user to be displayed. To have the test instructions displayed, see Sysout. To\n- * have a message to the user be displayed, see Sysout. Do not call anything in\n- * this dialog directly.\n- *\/\n-class TestDialog extends Dialog {\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog(Frame frame, String name) {\n-        super(frame, name);\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea(\"\", 15, maxStringLength, scrollBoth);\n-        add(\"North\", instructionsText);\n-\n-        messageText = new TextArea(\"\", 5, maxStringLength, scrollBoth);\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions(String[] instructions) {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText(\"\");\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for (int i = 0; i < instructions.length; i++) {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i];\n-            while (remainingStr.length() > 0) {\n-                \/\/if longer than max then chop off first max chars to print\n-                if (remainingStr.length() >= maxStringLength) {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                            lastIndexOf(' ', maxStringLength - 1);\n-\n-                    if (posOfSpace <= 0) {\n-                        posOfSpace = maxStringLength - 1;\n-                    }\n-\n-                    printStr = remainingStr.substring(0, posOfSpace + 1);\n-                    remainingStr = remainingStr.substring(posOfSpace + 1);\n-                } \/\/else just print\n-                else {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append(printStr + \"\\n\");\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage(String messageIn) {\n-        messageText.append(messageIn + \"\\n\");\n-        System.out.println(messageIn);\n-    }\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/Cursor\/CursorOverlappedPanelsTest\/CursorOverlappedPanelsTest.java","additions":0,"deletions":226,"binary":false,"changes":226,"status":"deleted"}]}