{"files":[{"patch":"@@ -27,1 +27,1 @@\n-java.launcher.opt.header  =   Verwendung: {0} [Optionen] <Hauptklasse> [args...]\\n           (zur Ausführung einer Klasse)\\n   oder  {0} [Optionen] -jar <JAR-Datei> [args...]\\n           (zur Ausführung einer JAR-Datei)\\n   oder  {0} [Optionen] -m <Modul>[\/<Hauptklasse>] [args...]\\n       {0} [Optionen] --module <Modul>[\/<Hauptklasse>] [args...]\\n            (zur Ausführung der Hauptklasse in einem Modul)\\n   oder  {0} [Optionen] <Quelldatei> [args]\\n           (zur Ausführung eines Programms mit einer einzelnen Quelldatei)\\n\\n Argumente, die auf die Hauptklasse, die Quelldatei, -jar <JAR-Datei>, -m oder --module\\n <Modul>\/<Hauptklasse> folgen, werden als Argumente für die\\nHauptklasse übergeben.\\n\\n Dabei umfasst \"Optionen\" Folgendes:\\n\\n\n+java.launcher.opt.header  =   Verwendung: {0} [Optionen] <Hauptklasse> [args...]\\n           (zur Ausführung einer Klasse)\\n   oder  {0} [Optionen] -jar <JAR-Datei> [args...]\\n           (zur Ausführung einer JAR-Datei)\\n   oder  {0} [Optionen] -m <Modul>[\/<Hauptklasse>] [args...]\\n       {0} [Optionen] --module <Modul>[\/<Hauptklasse>] [args...]\\n            (zur Ausführung der Hauptklasse in einem Modul)\\n   oder  {0} [Optionen] <Quelldatei> [args]\\n           (zur Ausführung eines Programms mit einer Quelldatei)\\n\\n Argumente, die auf die Hauptklasse, die Quelldatei, -jar <JAR-Datei>, -m oder --module\\n <Modul>\/<Hauptklasse> folgen, werden als Argumente für die\\nHauptklasse übergeben.\\n\\n Dabei umfasst \"Optionen\" Folgendes:\\n\\n\n@@ -33,2 +33,2 @@\n-java.launcher.opt.footer = \\    -cp <Klassensuchpfad mit Verzeichnissen und ZIP-\/JAR-Dateien>\\n    -classpath <Klassensuchpfad mit Verzeichnissen und ZIP-\/JAR-Dateien>\\n    --class-path <Klassensuchpfad mit Verzeichnissen und ZIP-\/JAR-Dateien>\\n                  Eine durch {0} getrennte Liste mit Verzeichnissen, JAR-Archiven\\n                  und ZIP-Archiven, in denen nach Klassendateien gesucht wird.\\n    -p <Modulpfad>\\n    --module-path <Modulpfad>...\\n                  Eine durch {0} getrennte Liste mit Elementen, von denen jedes Element ein Dateipfad\\n                  zu einem Modul oder einem Verzeichnis mit Modulen ist. Jedes Modul ist entweder\\n                  ein modulares JAR oder ein entpacktes Modulverzeichnis.\\n    --upgrade-module-path <Modulpfad>...\\n                  Eine durch {0} getrennte Liste mit Elementen, von denen jedes Element ein Dateipfad\\n                  zu einem Modul oder einem Verzeichnis mit Modulen ist,\\n                  um upgradefähige Module im Laufzeitimage zu ersetzen. Jedes Modul ist entweder\\n                  ein modulares JAR oder ein entpacktes Modulverzeichnis.\\n    --add-modules <Modulname>[,<Modulname>...]\\n                  Root-Module, die zusätzlich zum anfänglichen Modul aufgelöst werden sollen.\\n                  <Modulname> kann auch wie folgt lauten: ALL-DEFAULT, ALL-SYSTEM,\\n                  ALL-MODULE-PATH.\\n    --enable-native-access <Modulname>[,<Modulname>...]\\n                  Module, die eingeschränkte native Vorgänge ausführen dürfen.\\n                  <Modulname> kann auch ALL-UNNAMED lauten.\\n    --list-modules\\n                  Listet beobachtbare Module auf und beendet den Vorgang\\n    -d <Modulname>\\n    --describe-module <Modulname>\\n                  Beschreibt ein Modul und beendet den Vorgang\\n    --dry-run     Erstellt eine VM und lädt die Hauptklasse, führt aber nicht die Hauptmethode aus.\\n                  Die Option \"--dry-run\" kann nützlich sein, um die\\n                  Befehlszeilenoptionen, wie die Modulsystemkonfiguration, zu validieren.\\n    --validate-modules\\n                  Validiert alle Module und beendet den Vorgang\\n                  Die Option \"--validate-modules\" kann nützlich sein, um\\n                  Konflikte und andere Fehler mit Modulen auf dem Modulpfad zu ermitteln.\\n    -D<Name>=<Wert>\\n                  Legt eine Systemeigenschaft fest\\n    -verbose:[class|module|gc|jni]\\n                  Aktiviert die Verbose-Ausgabe für das angegebene Subsystem\\n    -version      Gibt die Produktversion an den Fehlerstream aus und beendet den Vorgang\\n    --version      Gibt die Produktversion an den Outputstream aus und beendet den Vorgang\\n    -showversion  Gibt die Produktversion an den Fehlerstream aus und setzt den Vorgang fort\\n    --show-version\\n                  Gibt die Produktversion an den Outputstream aus und setzt den Vorgang fort\\n    --show-module-resolution\\n                  Zeigt die Modulauflösungsausgabe beim Start an\\n    -? -h -help\\n                  Gibt diese Hilfemeldung an den Fehlerstream aus\\n    --help        Gibt diese Hilfemeldung an den Outputstream aus\\n    -X            Gibt Hilfe zu zusätzlichen Optionen an den Fehlerstream aus\\n    --help-extra  Gibt Hilfe zu zusätzlichen Optionen an den Outputstream aus\\n    -ea[:<packagename>...|:<classname>]\\n    -enableassertions[:<packagename>...|:<classname>]\\n                  Aktiviert Assertions mit angegebener Granularität\\n    -da[:<packagename>...|:<classname>]\\n    -disableassertions[:<packagename>...|:<classname>]\\n                  Deaktiviert Assertions mit angegebener Granularität\\n    -esa | -enablesystemassertions\\n                  Aktiviert System-Assertions\\n    -dsa | -disablesystemassertions\\n                  Deaktiviert System-Assertions\\n    -agentlib:<libname>[=<options>]\\n                  Lädt die native Agent Library <libname>. \\\n-Beispiel: -agentlib:jdwp\\n                  siehe auch -agentlib:jdwp=help\\n    -agentpath:<pathname>[=<options>]\\n                  Lädt die native Agent Library mit dem vollständigen Pfadnamen\\n    -javaagent:<jarpath>[=<options>]\\n                  Lädt den Java-Programmiersprachen-Agent, siehe java.lang.instrument\\n    -splash:<imagepath>\\n                  Zeigt den Startbildschirm mit einem angegebenen Bild an\\n                  Skalierte HiDPI-Bilder werden automatisch unterstützt und verwendet,\\n                  falls verfügbar. Der nicht skalierte Bilddateiname (Beispiel: image.ext)\\n                  muss immer als Argument an die Option \"-splash\" übergeben werden.\\n                  Das am besten geeignete angegebene skalierte Bild wird\\n                  automatisch ausgewählt.\\n                  Weitere Informationen finden Sie in der Dokumentation zur SplashScreen-API\\n    @argument files\\n                  Eine oder mehrere Argumentdateien mit Optionen\\n    --disable-@files\\n                  Verhindert die weitere Erweiterung von Argumentdateien\\n    --enable-preview\\n                  Lässt zu, das Klassen von Vorschaufeatures dieses Release abhängig sind\\nUm ein Argument für eine lange Option anzugeben, können Sie --<Name>=<Wert> oder\\n--<Name> <Wert> verwenden.\\n\n+java.launcher.opt.footer = \\    -cp <Klassensuchpfad mit Verzeichnissen und ZIP-\/JAR-Dateien>\\n    -classpath <Klassensuchpfad mit Verzeichnissen und ZIP-\/JAR-Dateien>\\n    --class-path <Klassensuchpfad mit Verzeichnissen und ZIP-\/JAR-Dateien>\\n                  Eine durch {0} getrennte Liste mit Verzeichnissen, JAR-Archiven\\n                  und ZIP-Archiven, in denen nach Klassendateien gesucht wird.\\n    -p <Modulpfad>\\n    --module-path <Modulpfad>...\\n                  Eine durch {0} getrennte Liste mit Elementen, von denen jedes Element ein Dateipfad\\n                  zu einem Modul oder einem Verzeichnis mit Modulen ist. Jedes Modul ist entweder\\n                  ein modulares JAR oder ein entpacktes Modulverzeichnis.\\n    --upgrade-module-path <Modulpfad>...\\n                  Eine durch {0} getrennte Liste mit Elementen, von denen jedes Element ein Dateipfad\\n                  zu einem Modul oder einem Verzeichnis mit Modulen ist,\\n                  um upgradefähige Module im Laufzeitimage zu ersetzen. Jedes Modul ist entweder\\n                  ein modulares JAR oder ein entpacktes Modulverzeichnis.\\n    --add-modules <Modulname>[,<Modulname>...]\\n                  Root-Module, die zusätzlich zum anfänglichen Modul aufgelöst werden sollen.\\n                  <Modulname> kann auch wie folgt lauten: ALL-DEFAULT, ALL-SYSTEM,\\n                  ALL-MODULE-PATH.\\n    --enable-native-access <Modulname>[,<Modulname>...]\\n                  Damit kann der Code in Modulen auf Code und Daten außerhalb der JRE zugreifen.\\n                  <Modulname> kann auch ALL-UNNAMED sein, um den Code im Classpath anzugeben.\\n    --list-modules\\n                  Listet beobachtbare Module auf und beendet den Vorgang\\n    -d <Modulname>\\n    --describe-module <Modulname>\\n                  Beschreibt ein Modul und beendet den Vorgang\\n    --dry-run     Erstellt eine VM und lädt die Hauptklasse, führt aber nicht die Hauptmethode aus.\\n                  Die Option \"--dry-run\" kann nützlich sein, um die\\n                  Befehlszeilenoptionen, wie die Modulsystemkonfiguration, zu validieren.\\n    --validate-modules\\n                  Validiert alle Module und beendet den Vorgang\\n                  Die Option \"--validate-modules\" kann nützlich sein, um\\n                  Konflikte und andere Fehler mit Modulen auf dem Modulpfad zu ermitteln.\\n    -D<Name>=<Wert>\\n                  Legt eine Systemeigenschaft fest\\n    -verbose:[class|module|gc|jni]\\n                  Aktiviert die Verbose-Ausgabe für das angegebene Subsystem\\n    -version      Gibt die Produktversion an den Fehlerstream aus und beendet den Vorgang\\n    --version      Gibt die Produktversion an den Outputstream aus und beendet den Vorgang\\n    -showversion  Gibt die Produktversion an den Fehlerstream aus und setzt den Vorgang fort\\n    --show-version\\n                  Gibt die Produktversion an den Outputstream aus und setzt den Vorgang fort\\n    --show-module-resolution\\n                  Zeigt die Modulauflösungsausgabe beim Start an\\n    -? -h -help\\n                  Gibt diese Hilfemeldung an den Fehlerstream aus\\n    --help        Gibt diese Hilfemeldung an den Outputstream aus\\n    -X            Gibt Hilfe zu zusätzlichen Optionen an den Fehlerstream aus\\n    --help-extra  Gibt Hilfe zu zusätzlichen Optionen an den Outputstream aus\\n    -ea[:<packagename>...|:<classname>]\\n    -enableassertions[:<packagename>...|:<classname>]\\n                  Aktiviert Assertions mit angegebener Granularität\\n    -da[:<packagename>...|:<classname>]\\n    -disableassertions[:<packagename>...|:<classname>]\\n                  Deaktiviert Assertions mit angegebener Granularität\\n    -esa | -enablesystemassertions\\n                  Aktiviert System-Assertions\\n    -dsa | -disablesystemassertions\\n                  Deaktiviert System-Assertions\\n    -agentlib:<libname>[=<options>]\\n                  Lädt die \\\n+native Agent Library <libname>. Beispiel: -agentlib:jdwp\\n                  siehe auch -agentlib:jdwp=help\\n    -agentpath:<pathname>[=<options>]\\n                  Lädt die native Agent Library mit dem vollständigen Pfadnamen\\n    -javaagent:<jarpath>[=<options>]\\n                  Lädt den Java-Programmiersprachen-Agent, siehe java.lang.instrument\\n    -splash:<imagepath>\\n                  Zeigt den Startbildschirm mit einem angegebenen Bild an\\n                  Skalierte HiDPI-Bilder werden automatisch unterstützt und verwendet,\\n                  falls verfügbar. Der nicht skalierte Bilddateiname (Beispiel: image.ext)\\n                  muss immer als Argument an die Option \"-splash\" übergeben werden.\\n                  Das am besten geeignete angegebene skalierte Bild wird\\n                  automatisch ausgewählt.\\n                  Weitere Informationen finden Sie in der Dokumentation zur SplashScreen-API\\n    @argument files\\n                  Eine oder mehrere Argumentdateien mit Optionen\\n    --disable-@files\\n                  Verhindert die weitere Erweiterung von Argumentdateien\\n    --enable-preview\\n                  Lässt zu, das Klassen von Vorschaufeatures dieses Release abhängig sind\\nUm ein Argument für eine lange Option anzugeben, können Sie --<Name>=<Wert> oder\\n--<Name> <Wert> verwenden.\\n\n@@ -37,2 +37,2 @@\n-java.launcher.X.usage=\\n    -Xbatch           Deaktiviert die Hintergrundkompilierung\\n    -Xbootclasspath\/a:<durch {0} getrennte Verzeichnisse und ZIP-\/JAR-Dateien>\\n                      An das Ende des Bootstrap Classpaths anhängen\\n    -Xcheck:jni       Führt zusätzliche Prüfungen für JNI-Funktionen aus\\n    -Xcomp            Erzwingt die Kompilierung von Methoden beim ersten Aufruf\\n    -Xdebug           Führt keine Aktion aus. Ist veraltet und wird in einem zukünftigen Release entfernt.\\n    -Xdiag            Zeigt zusätzliche Diagnosemeldungen an\\n    -Xfuture          Aktiviert strengste Prüfungen, als möglicher zukünftiger Standardwert erwartet.\\n                      Diese Option ist veraltet und kann in einem\\n                      zukünftigen Release entfernt werden.\\n    -Xint             Nur Ausführung im interpretierten Modus\\n    -Xinternalversion\\n                      Zeigt detailliertere JVM-Versionsinformationen an als die\\n                      Option -version\\n    -Xlog:<Optionen>      Konfiguriert oder aktiviert Logging mit dem einheitlichen Java Virtual\\n                      Machine-(JVM-)Logging-Framework. Verwenden Sie -Xlog:help\\n                      für weitere Einzelheiten.\\n    -Xloggc:<Datei>    Protokolliert den GC-Status in einer Datei mit Zeitstempeln.\\n                      Diese Option ist veraltet und kann in einem\\n                      zukünftigen Release entfernt werden. Wird durch -Xlog:gc:<Datei> ersetzt.\\n    -Xmixed           Ausführung im gemischten Modus (Standard)\\n    -Xmn<Größe>        Legt die anfängliche und maximale Größe (in Byte) des Heaps\\n                      für die Young Generation (Nursery) fest\\n    -Xms<Größe>        Legt die anfängliche Java-Heap-Größe fest\\n    -Xmx<Größe>        Legt die maximale Java-Heap-Größe fest\\n    -Xnoclassgc       Deaktiviert die Klassen-Garbage Collection\\n    -Xrs               Reduziert die Verwendung von BS-Signalen durch Java\/VM (siehe Dokumentation)\\n    -Xshare:auto      Verwendet freigegebene Klassendaten, wenn möglich (Standard)\\n    -Xshare:off       Versucht nicht, freigegebene Klassendaten zu verwenden\\n    -Xshare:on        Erfordert die Verwendung freigegebener Klassendaten, verläuft sonst nicht erfolgreich.\\n                      Diese Testoption kann zeitweise zu\\n                      Fehlern führen. Sie darf nicht in Produktionsumgebungen verwendet werden.\\n    -XshowSettings    Zeigt alle Einstellungen an und fährt fort\\n    -XshowSettings:all\\n                      Zeigt alle Einstellungen an und fährt fort\\n    -XshowSettings:locale\\n                      Zeigt alle gebietsschemabezogenen Einstellungen an und fährt fort\\n    -XshowSettings:properties\\n                      Zeigt alle Eigenschaftseinstellungen an und fährt fort\\n    -XshowSettings:vm\\n                      Zeigt alle VM-bezogenen Einstellungen an und fährt fort\\n    -XshowSettings:security\\n                      Zeigt alle Sicherheitseinstellungen an und fährt fort\\n    -XshowSettings:security:all\\n                      Zeigt alle Sicherheitseinstellungen an und fährt fort\\n    -XshowSettings:security:properties\\n                      Zeigt Sicherheitseigenschaften an und fährt fort\\n    -XshowSettings:security:providers\\n                      Zeigt statische Sicherheitsprovidereinstellungen an und fährt fort\\n    -XshowSettings:security:tls\\n                      Zeigt TLS-bezogene Sicherheitseinstellungen an und fährt fort\\n    -XshowSettings:system\\n                      (Nur Linux) Zeigt die Konfiguration des Hostsystems oder Containers an\\n                      und fährt fort\\n    -Xss<Größe>        Legt die Stackgröße des Java-Threads fest\\n                      Die tatsächliche Größe \\\n-kann auf ein Vielfaches der\\n                      Systemseitengröße aufgerundet werden, wenn für das Betriebssystem erforderlich.\\n    -Xverify          Legt den Modus der Bytecodeverifizierung fest\\n                      Beachten Sie, dass die Option -Xverify:none veraltet ist und\\n                      in einem zukünftigen Release entfernt werden kann.\\n    --add-reads <Modul>=<Zielmodul>(,<Zielmodul>)*\\n                      Aktualisiert <Modul>, damit <Zielmodul> gelesen wird, ungeachtet\\n                      der Moduldeklaration. \\n                      <Zielmodul> kann ALL-UNNAMED sein, um alle unbenannten\\n                      Module zu lesen.\\n    --add-exports <Modul>\/<Package>=<Zielmodul>(,<Zielmodul>)*\\n                      Aktualisiert <Modul>, um <Package> in <Zielmodul> zu exportieren,\\n                      ungeachtet der Moduldeklaration.\\n                      <Zielmodul> kann ALL-UNNAMED sein, um in alle\\n                      unbenannten Module zu exportieren.\\n    --add-opens <Modul>\/<Package>=<Zielmodul>(,<Zielmodul>)*\\n                      Aktualisiert <Modul>, um <Package> in\\n                      <Zielmodul> zu öffnen, ungeachtet der Moduldeklaration.\\n    --limit-modules <Modulname>[,<Modulname>...]\\n                      Grenzt die Gesamtmenge der beobachtbaren Module ein\\n    --patch-module <Modul>=<Datei>({0}<Datei>)*\\n                      Überschreibt oder erweitert ein Modul mit Klassen und Ressourcen\\n                      in JAR-Dateien oder Verzeichnissen.\\n    --source <Version>\\n                      Legt die Version der Quelle im Quelldateimodus fest.\\n    --finalization=<Wert>\\n                      Steuert, ob die JVM Objekte finalisiert.\\n                      Dabei ist <Wert> entweder \"enabled\" oder \"disabled\".\\n                      Die Finalisierung ist standardmäßig aktiviert.\\n\\nDiese zusätzlichen Optionen können jederzeit ohne vorherige Ankündigung geändert werden.\\n\n+java.launcher.X.usage=\\n    -Xbatch           Deaktiviert die Hintergrundkompilierung\\n    -Xbootclasspath\/a:<durch {0} getrennte Verzeichnisse und ZIP-\/JAR-Dateien>\\n                      An das Ende des Bootstrap Classpaths anhängen\\n    -Xcheck:jni       Führt zusätzliche Prüfungen für JNI-Funktionen aus\\n    -Xcomp            Erzwingt die Kompilierung von Methoden beim ersten Aufruf\\n    -Xdebug           Führt keine Aktion aus. Ist veraltet und wird in einem zukünftigen Release entfernt.\\n    -Xdiag            Zeigt zusätzliche Diagnosemeldungen an\\n    -Xfuture          Aktiviert strengste Prüfungen, als möglicher zukünftiger Standardwert erwartet.\\n                      Diese Option ist veraltet und kann in einem\\n                      zukünftigen Release entfernt werden.\\n    -Xint             Nur Ausführung im interpretierten Modus\\n    -Xinternalversion\\n                      Zeigt detailliertere JVM-Versionsinformationen an als die\\n                      Option -version\\n    -Xlog:<Optionen>      Konfiguriert oder aktiviert Logging mit dem einheitlichen Java Virtual\\n                      Machine-(JVM-)Logging-Framework. Verwenden Sie -Xlog:help\\n                      für weitere Einzelheiten.\\n    -Xloggc:<Datei>    Protokolliert den GC-Status in einer Datei mit Zeitstempeln.\\n                      Diese Option ist veraltet und kann in einem\\n                      zukünftigen Release entfernt werden. Wird durch -Xlog:gc:<Datei> ersetzt.\\n    -Xmixed           Ausführung im gemischten Modus (Standard)\\n    -Xmn<Größe>        Legt die anfängliche und maximale Größe (in Byte) des Heaps\\n                      für die Young Generation (Nursery) fest\\n    -Xms<Größe>        Legt die anfängliche Java-Heap-Größe fest\\n    -Xmx<Größe>        Legt die maximale Java-Heap-Größe fest\\n    -Xnoclassgc       Deaktiviert die Klassen-Garbage Collection\\n    -Xrs               Reduziert die Verwendung von BS-Signalen durch Java\/VM (siehe Dokumentation)\\n    -Xshare:auto      Verwendet freigegebene Klassendaten, wenn möglich (Standard)\\n    -Xshare:off       Versucht nicht, freigegebene Klassendaten zu verwenden\\n    -Xshare:on        Erfordert die Verwendung freigegebener Klassendaten, verläuft sonst nicht erfolgreich.\\n                      Diese Testoption kann zeitweise zu\\n                      Fehlern führen. Sie darf nicht in Produktionsumgebungen verwendet werden.\\n    -XshowSettings    Zeigt alle Einstellungen an und fährt fort\\n    -XshowSettings:all\\n                      Zeigt alle Einstellungen als Verbose-Ausgabe an und fährt fort\\n    -XshowSettings:locale\\n                      Zeigt alle gebietsschemabezogenen Einstellungen an und fährt fort\\n    -XshowSettings:properties\\n                      Zeigt alle Eigenschaftseinstellungen an und fährt fort\\n    -XshowSettings:vm\\n                      Zeigt alle VM-bezogenen Einstellungen an und fährt fort\\n    -XshowSettings:security\\n                      Zeigt alle Sicherheitseinstellungen an und fährt fort\\n    -XshowSettings:security:all\\n                      Zeigt alle Sicherheitseinstellungen an und fährt fort\\n    -XshowSettings:security:properties\\n                      Zeigt Sicherheitseigenschaften an und fährt fort\\n    -XshowSettings:security:providers\\n                      Zeigt statische Sicherheitsprovidereinstellungen an und fährt fort\\n    -XshowSettings:security:tls\\n                      Zeigt TLS-bezogene Sicherheitseinstellungen an und fährt fort\\n    -XshowSettings:system\\n                      (Nur Linux) Zeigt die Konfiguration des Hostsystems oder Containers an\\n                      und fährt fort\\n    -Xss<Größe>        Legt die Stackgröße des Java-Threads fest\\n                      Die tatsächliche \\\n+Größe kann auf ein Vielfaches der\\n                      Systemseitengröße aufgerundet werden, wenn für das Betriebssystem erforderlich.\\n    -Xverify          Legt den Modus der Bytecodeverifizierung fest\\n                      Beachten Sie, dass die Option -Xverify:none veraltet ist und\\n                      in einem zukünftigen Release entfernt werden kann.\\n    --add-reads <Modul>=<Zielmodul>(,<Zielmodul>)*\\n                      Aktualisiert <Modul>, damit <Zielmodul> gelesen wird, ungeachtet\\n                      der Moduldeklaration. \\n                      <Zielmodul> kann ALL-UNNAMED sein, um alle unbenannten\\n                      Module zu lesen.\\n    --add-exports <Modul>\/<Package>=<Zielmodul>(,<Zielmodul>)*\\n                      Aktualisiert <Modul>, um <Package> in <Zielmodul> zu exportieren,\\n                      ungeachtet der Moduldeklaration.\\n                      <Zielmodul> kann ALL-UNNAMED sein, um in alle\\n                      unbenannten Module zu exportieren.\\n    --add-opens <Modul>\/<Package>=<Zielmodul>(,<Zielmodul>)*\\n                      Aktualisiert <Modul>, um <Package> in\\n                      <Zielmodul> zu öffnen, ungeachtet der Moduldeklaration.\\n    --limit-modules <Modulname>[,<Modulname>...]\\n                      Grenzt die Gesamtmenge der beobachtbaren Module ein\\n    --patch-module <Modul>=<Datei>({0}<Datei>)*\\n                      Überschreibt oder erweitert ein Modul mit Klassen und Ressourcen\\n                      in JAR-Dateien oder Verzeichnissen.\\n    --source <Version>\\n                      Legt die Version der Quelle im Quelldateimodus fest.\\n    --finalization=<Wert>\\n                      Steuert, ob die JVM Objekte finalisiert.\\n                      Dabei ist <Wert> entweder \"enabled\" oder \"disabled\".\\n                      Die Finalisierung ist standardmäßig aktiviert.\\n\\nDiese zusätzlichen Optionen können jederzeit ohne vorherige Ankündigung geändert werden.\\n\n@@ -43,0 +43,1 @@\n+java.launcher.bad.option=\\nNicht erkannte showSettings-Option: {0}\\nGültige Werte: \"all\", \"locale\", \"properties\", \"security\", \"system\"(nur Linux), \"vm\"\\nGültige Werte für Unteroption \"security\": \"all\", \"properties\", \"providers\", \"tls\"\\nSiehe \"java -X\"\\n\n@@ -44,8 +45,6 @@\n-java.launcher.cls.error2=Fehler: Hauptmethode ist nicht {0} in Klasse {1}. Definieren Sie die Hauptmethode als:\\n   public static void main(String[] args)\n-java.launcher.cls.error3=Fehler: Hauptmethode muss einen Wert vom Typ void in Klasse {0} zurückgeben. Definieren Sie \\ndie Hauptmethode als:\\n   public static void main(String[] args)\n-java.launcher.cls.error4=Fehler: Hauptmethode in Klasse {0} nicht gefunden. Definieren Sie die Hauptmethode als:\\n   public static void main(String[] args):\\noder eine JavaFX-Anwendung muss {1} erweitern\n-java.launcher.cls.error5=Fehler: Zum Ausführen dieser Anwendung benötigte JavaFX-Runtime-Komponenten fehlen\n-java.launcher.cls.error6=Fehler: Beim Laden der Klasse {0} ist ein LinkageError aufgetreten\\n\\t{1}\n-java.launcher.cls.error7=Fehler: Hauptklasse {0} kann nicht initialisiert werden\\nUrsache: {1}: {2}\n-java.launcher.cls.error8=Fehler: Kein nicht privater Null-Argument-Konstruktor in Klasse {0} gefunden\\nEntfernen Sie die Eigenschaft \"private\" aus dem vorhandenen Konstruktor, oder definieren Sie ihn als:\\n   public {0}()\n-java.launcher.cls.error9=Fehler: Konstruktor mit nicht statischer innerer Klasse {0} kann nicht aufgerufen werden \\nLegen Sie die innere Klasse als statisch fest, oder verschieben Sie sie in eine separate Quelldatei\n+java.launcher.cls.error2=Fehler: Hauptmethode in Klasse {0} nicht gefunden. Definieren Sie die Hauptmethode als:\\n   public static void main(String[] args):\\noder eine JavaFX-Anwendung muss {1} erweitern\n+java.launcher.cls.error3=Fehler: Zum Ausführen dieser Anwendung benötigte JavaFX-Runtime-Komponenten fehlen\n+java.launcher.cls.error4=Fehler: Beim Laden der Klasse {0} ist ein LinkageError aufgetreten\\n\\t{1}\n+java.launcher.cls.error5=Fehler: Hauptklasse {0} kann nicht initialisiert werden\\nUrsache: {1}: {2}\n+java.launcher.cls.error6=Fehler: Kein nicht privater Null-Argument-Konstruktor in Klasse {0} gefunden\\nEntfernen Sie die Eigenschaft \"private\" aus dem vorhandenen Konstruktor, oder definieren Sie ihn als:\\n   public {0}()\n+java.launcher.cls.error7=Fehler: Konstruktor mit nicht statischer innerer Klasse {0} kann nicht aufgerufen werden \\nLegen Sie die innere Klasse als statisch fest, oder verschieben Sie sie in eine separate Quelldatei\n@@ -56,0 +55,1 @@\n+java.launcher.jar.error.illegal.ena.value=Fehler: Ungültiger Wert \"{0}\" für das Manifestattribut \"Enable-Native-Access\". Nur ''ALL-UNNAMED'' ist zulässig\n@@ -60,1 +60,1 @@\n-java.launcher.module.error3=Fehler: Hauptklasse {0} kann nicht in Modul {1} geladen werden\\n\\t{2}\n+java.launcher.module.error3=Fehler: Hauptklasse {0} kann nicht in Modul {1} geladen werden\\nUrsache: {2}\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher_de.properties","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-java.launcher.opt.header  =   使用方法: {0} [options] <mainclass> [args...]\\n           (クラスを実行する場合)\\n   または  {0} [options] -jar <jarfile> [args...]\\n           (jarファイルを実行する場合)\\n   または  {0} [options] -m <module>[\/<mainclass>] [args...]\\n       {0} [options] --module <module>[\/<mainclass>] [args...]\\n           (モジュールのメイン・クラスを実行する場合)\\n   または  {0} [options] <sourcefile> [args]\\n           (単一のソースファイル・プログラムを実行する場合)\\n\\n メイン・クラス、ソース・ファイル、-jar <jarfile>、\\n -mまたは--module <module>\/<mainclass>に続く引数は、メイン・クラスへの引数として\\n 渡されます。\\n\\n オプションは次のとおりです:\\n\\n\n+java.launcher.opt.header  =   使用方法: {0} [options] <mainclass> [args...]\\n           (クラスを実行する場合)\\n   または  {0} [options] -jar <jarfile> [args...]\\n           (jarファイルを実行する場合)\\n   または  {0} [options] -m <module>[\/<mainclass>] [args...]\\n       {0} [options] --module <module>[\/<mainclass>] [args...]\\n           (モジュールのメイン・クラスを実行する場合)\\n   または  {0} [options] <sourcefile> [args]\\n           (ソースファイル・プログラムを実行する場合)\\n\\n メイン・クラス、ソース・ファイル、-jar <jarfile>、\\n -mまたは--module <module>\/<mainclass>に続く引数は、メイン・クラスへの引数として\\n 渡されます。\\n\\n オプションは次のとおりです:\\n\\n\n@@ -33,2 +33,2 @@\n-java.launcher.opt.footer = \\    -cp <ディレクトリおよびzip\/jarファイルのクラス検索パス>\\n    -classpath <ディレクトリおよびzip\/jarファイルのクラス検索パス>\\n    --class-path <ディレクトリおよびzip\/jarファイルのクラス検索パス>\\n                  {0}区切りリスト(ディレクトリ、JARアーカイブ、\\n                  ZIPアーカイブ)で、クラス・ファイルの検索用。\\n    -p <module path>\\n    --module-path <module path>...\\n                  要素を{0}で区切ったリストで、各要素は次へのファイル・パスです:\\n                  モジュール、またはモジュールが格納されているディレクトリ。各モジュールは次のいずれかです:\\n                  モジュラJARまたは展開形式のモジュール・ディレクトリ。\\n    --upgrade-module-path <module path>...\\n                  要素を{0}で区切ったリストで、各要素は次へのファイル・パスです:\\n                  モジュール、またはモジュールが格納されているディレクトリで、次のものを置き換えます:\\n                  ランタイム・イメージのアップグレード可能なモジュール。各モジュールは次のいずれかです:\\n                  モジュラJARまたは展開形式のモジュール・ディレクトリ。\\n    --add-modules <module name>[,<module name>...]\\n                  初期モジュールに加えて解決するルート・モジュール。\\n                  <module name>には次も指定できます: ALL-DEFAULT、ALL-SYSTEM、\\n                  ALL-MODULE-PATH.\\n    --enable-native-access <module name>[,<module name>...]\\n                  制限されたネイティブ操作の実行を許可されているモジュール。\\n                  <module name>はALL-UNNAMEDにすることもできます。\\n    --list-modules\\n                  参照可能なモジュールをリストし終了します\\n    -d <module name>\\n    --describe-module <module name>\\n                  モジュールを説明し終了します\\n    --dry-run     VMを作成しメイン・クラスをロードしますが、メイン・メソッドは実行しません。\\n                  --dry-runオプションは、次の検証に役立つ場合があります:\\n                  \\\n-モジュール・システム構成などのコマンド行オプション。\\n    --validate-modules\\n                  すべてのモジュールを検証し終了します\\n                  --validate-modulesオプションは、次の検索に役立つ場合があります:\\n                  モジュール・パス上のモジュールでの競合およびその他のエラー。\\n    -D<name>=<value>\\n                  システム・プロパティを設定します\\n    -verbose:[class|module|gc|jni]\\n                  特定のサブシステムで詳細出力を有効にする\\n    -version      製品バージョンをエラー・ストリームに出力して終了します\\n    --version     製品バージョンを出力ストリームに出力して終了します\\n    -showversion  製品バージョンをエラー・ストリームに出力して続行します\\n    --show-version\\n                  製品バージョンを出力ストリームに出力して続行します\\n    --show-module-resolution\\n                  起動時にモジュール解決出力を表示します\\n    -? -h -help\\n                  このヘルプ・メッセージをエラー・ストリームに出力します\\n    --help        このヘルプ・メッセージを出力ストリームに出力します\\n    -X            追加オプションのヘルプをエラー・ストリームに出力します\\n    --help-extra  追加オプションのヘルプを出力ストリームに出力します\\n    -ea[:<packagename>...|:<classname>]\\n    -enableassertions[:<packagename>...|:<classname>]\\n                  指定した粒度でアサーションを有効にします\\n    -da[:<packagename>...|:<classname>]\\n    -disableassertions[:<packagename>...|:<classname>]\\n                  指定した粒度でアサーションを無効にします\\n    -esa | -enablesystemassertions\\n                  システム・アサーションを有効にします\\n    -dsa | -disablesystemassertions\\n                  システム・アサーションを無効にします\\n    -agentlib:<libname>[=<options>]\\n                  ネイティブ・エージェント・ライブラリ<libname>をロードします。例: -agentlib:jdwp\\n                  -agentlib:jdwp=helpも参照してください\\n    -agentpath:<pathname>[=<options>]\\n                  \\\n+java.launcher.opt.footer = \\    -cp <ディレクトリおよびzip\/jarファイルのクラス検索パス>\\n    -classpath <ディレクトリおよびzip\/jarファイルのクラス検索パス>\\n    --class-path <ディレクトリおよびzip\/jarファイルのクラス検索パス>\\n                  {0}区切りリスト(ディレクトリ、JARアーカイブ、\\n                  ZIPアーカイブ)で、クラス・ファイルの検索用。\\n    -p <module path>\\n    --module-path <module path>...\\n                  要素を{0}で区切ったリストで、各要素は次へのファイル・パスです:\\n                  モジュール、またはモジュールが格納されているディレクトリ。各モジュールは次のいずれかです:\\n                  モジュラJARまたは展開形式のモジュール・ディレクトリ。\\n    --upgrade-module-path <module path>...\\n                  要素を{0}で区切ったリストで、各要素は次へのファイル・パスです:\\n                  モジュール、またはモジュールが格納されているディレクトリで、次のものを置き換えます:\\n                  ランタイム・イメージのアップグレード可能なモジュール。各モジュールは次のいずれかです:\\n                  モジュラJARまたは展開形式のモジュール・ディレクトリ。\\n    --add-modules <module name>[,<module name>...]\\n                  初期モジュールに加えて解決するルート・モジュール。\\n                  <module name>には次も指定できます: ALL-DEFAULT、ALL-SYSTEM、\\n                  ALL-MODULE-PATH.\\n    --enable-native-access <module name>[,<module name>...]\\n                  モジュール内のコードをJavaランタイムの外のコードおよびデータにアクセスさせることができます。\\n                  <module name>は、クラス・パス上のコードを指定するためにALL-UNNAMEDにもできます。\\n    --list-modules\\n                  参照可能なモジュールをリストし終了します\\n    -d <module name>\\n    --describe-module <module name>\\n                  モジュールを説明し終了します\\n    --dry-run     VMを作成しメイン・クラスをロードしますが、メイン・メソッドは実行しません。\\n                  \\\n+--dry-runオプションは、次の検証に役立つ場合があります:\\n                  モジュール・システム構成などのコマンド行オプション。\\n    --validate-modules\\n                  すべてのモジュールを検証し終了します\\n                  --validate-modulesオプションは、次の検索に役立つ場合があります:\\n                  モジュール・パス上のモジュールでの競合およびその他のエラー。\\n    -D<name>=<value>\\n                  システム・プロパティを設定します\\n    -verbose:[class|module|gc|jni]\\n                  特定のサブシステムで詳細出力を有効にする\\n    -version      製品バージョンをエラー・ストリームに出力して終了します\\n    --version     製品バージョンを出力ストリームに出力して終了します\\n    -showversion  製品バージョンをエラー・ストリームに出力して続行します\\n    --show-version\\n                  製品バージョンを出力ストリームに出力して続行します\\n    --show-module-resolution\\n                  起動時にモジュール解決出力を表示します\\n    -? -h -help\\n                  このヘルプ・メッセージをエラー・ストリームに出力します\\n    --help        このヘルプ・メッセージを出力ストリームに出力します\\n    -X            追加オプションのヘルプをエラー・ストリームに出力します\\n    --help-extra  追加オプションのヘルプを出力ストリームに出力します\\n    -ea[:<packagename>...|:<classname>]\\n    -enableassertions[:<packagename>...|:<classname>]\\n                  指定した粒度でアサーションを有効にします\\n    -da[:<packagename>...|:<classname>]\\n    -disableassertions[:<packagename>...|:<classname>]\\n                  指定した粒度でアサーションを無効にします\\n    -esa | -enablesystemassertions\\n                  システム・アサーションを有効にします\\n    -dsa | -disablesystemassertions\\n                  システム・アサーションを無効にします\\n    -agentlib:<libname>[=<options>]\\n                  ネイティブ・エージェント・ライブラリ<libname>をロードします。例: -agentlib:jdwp\\n                  -agentlib:jdwp=helpも参照してください\\n    -agentpath:<pathname>[=<options>]\\n                  \\\n@@ -39,2 +39,2 @@\n-共有クラス・データの使用を試みません\\n    -Xshare:on        共有クラス・データの使用を必須にし、できなければ失敗します。\\n                      これはテスト・オプションであり、断続的な失敗につながる\\n                      可能性があります。本番環境では使用しないでください。\\n    -XshowSettings    すべての設定を表示して続行します\\n    -XshowSettings:all\\n                      すべての設定を表示して続行します\\n    -XshowSettings:locale\\n                      すべてのロケール関連の設定を表示して続行します\\n    -XshowSettings:properties\\n                      すべてのプロパティ設定を表示して続行します\\n    -XshowSettings:vm\\n                      すべてのVM関連の設定を表示して続行します\\n    -XshowSettings:security\\n                      すべてのセキュリティ設定を表示して続行します\\n    -XshowSettings:security:all\\n                      すべてのセキュリティ設定を表示して続行します\\n    -XshowSettings:security:properties\\n                      セキュリティ・プロパティを表示して続行します\\n    -XshowSettings:security:providers\\n                      静的セキュリティ・プロバイダ設定を表示して続行します\\n    -XshowSettings:security:tls\\n                      TLS関連のセキュリティ設定を表示して続行します\\n    -XshowSettings:system\\n                      (Linuxのみ)ホスト・システムまたはコンテナを表示します\\n                      構成して続行します\\n    -Xss<size>        javaスレッドのスタック・サイズを設定します\\n                      実際のサイズは、次の倍数に切り上げられる場合があります: \\n                      オペレーティング・システムの要件に応じたシステム・ページ・サイズ。\\n    -Xverify          バイトコード・ベリファイアのモードを設定します\\n                      オプション-Xverify:noneは非推奨になり、\\n                      将来のリリースで削除される可能性があります。\\n    --add-reads <module>=<target-module>(,<target-module>)*\\n                      モジュール宣言に関係なく、<module>を更新して<target-module>を\\n                      読み取ります。 \\\n-\\n                      <target-module>をALL-UNNAMEDに設定すると、すべての名前のないモジュールを\\n                      読み取ることができます。\\n    --add-exports <module>\/<package>=<target-module>(,<target-module>)*\\n                      モジュール宣言に関係なく、<module>を更新して<package>を<target-module>に\\n                      エクスポートします。\\n                      <target-module>をALL-UNNAMEDに設定すると、すべての名前のないモジュールに\\n                      エクスポートできます。\\n    --add-opens <module>\/<package>=<target-module>(,<target-module>)*\\n                      モジュール宣言に関係なく、<module>を更新して<package>を\\n                      <target-module>に開きます。\\n    --limit-modules <module name>[,<module name>...]\\n                      参照可能なモジュールの領域を制限します\\n    --patch-module <module>=<file>({0}<file>)*\\n                      JARファイルまたはディレクトリのクラスおよびリソースで\\n                      モジュールをオーバーライドまたは拡張します。\\n    --source <version>\\n                      ソースファイル・モードでソースのバージョンを設定します。\\n    --finalization=<value>\\n                      JVMがオブジェクトのファイナライズを実行するかどうかを制御します\\n                      <value>は\"enabled\"または\"disabled\"のいずれかです。\\n                      ファイナライズはデフォルトで有効になっています。\\n\\nこの追加オプションは予告なしに変更されることがあります。\\n\n+共有クラス・データの使用を試みません\\n    -Xshare:on        共有クラス・データの使用を必須にし、できなければ失敗します。\\n                      これはテスト・オプションであり、断続的な失敗につながる\\n                      可能性があります。本番環境では使用しないでください。\\n    -XshowSettings    すべての設定を表示して続行します\\n    -XshowSettings:all\\n                      すべての設定を詳細に表示して続行します\\n    -XshowSettings:locale\\n                      すべてのロケール関連の設定を表示して続行します\\n    -XshowSettings:properties\\n                      すべてのプロパティ設定を表示して続行します\\n    -XshowSettings:vm\\n                      すべてのVM関連の設定を表示して続行します\\n    -XshowSettings:security\\n                      すべてのセキュリティ設定を表示して続行します\\n    -XshowSettings:security:all\\n                      すべてのセキュリティ設定を表示して続行します\\n    -XshowSettings:security:properties\\n                      セキュリティ・プロパティを表示して続行します\\n    -XshowSettings:security:providers\\n                      静的セキュリティ・プロバイダ設定を表示して続行します\\n    -XshowSettings:security:tls\\n                      TLS関連のセキュリティ設定を表示して続行します\\n    -XshowSettings:system\\n                      (Linuxのみ)ホスト・システムまたはコンテナを表示します\\n                      構成して続行します\\n    -Xss<size>        javaスレッドのスタック・サイズを設定します\\n                      実際のサイズは、次の倍数に切り上げられる場合があります: \\n                      オペレーティング・システムの要件に応じたシステム・ページ・サイズ。\\n    -Xverify          バイトコード・ベリファイアのモードを設定します\\n                      オプション-Xverify:noneは非推奨になり、\\n                      将来のリリースで削除される可能性があります。\\n    --add-reads <module>=<target-module>(,<target-module>)*\\n                      モジュール宣言に関係なく、<module>を更新して<target-module>を\\n                      \\\n+読み取ります。 \\n                      <target-module>をALL-UNNAMEDに設定すると、すべての名前のないモジュールを\\n                      読み取ることができます。\\n    --add-exports <module>\/<package>=<target-module>(,<target-module>)*\\n                      モジュール宣言に関係なく、<module>を更新して<package>を<target-module>に\\n                      エクスポートします。\\n                      <target-module>をALL-UNNAMEDに設定すると、すべての名前のないモジュールに\\n                      エクスポートできます。\\n    --add-opens <module>\/<package>=<target-module>(,<target-module>)*\\n                      モジュール宣言に関係なく、<module>を更新して<package>を\\n                      <target-module>に開きます。\\n    --limit-modules <module name>[,<module name>...]\\n                      参照可能なモジュールの領域を制限します\\n    --patch-module <module>=<file>({0}<file>)*\\n                      JARファイルまたはディレクトリのクラスおよびリソースで\\n                      モジュールをオーバーライドまたは拡張します。\\n    --source <version>\\n                      ソースファイル・モードでソースのバージョンを設定します。\\n    --finalization=<value>\\n                      JVMがオブジェクトのファイナライズを実行するかどうかを制御します\\n                      <value>は\"enabled\"または\"disabled\"のいずれかです。\\n                      ファイナライズはデフォルトで有効になっています。\\n\\nこの追加オプションは予告なしに変更されることがあります。\\n\n@@ -45,0 +45,1 @@\n+java.launcher.bad.option=\\n認識されないshowSettingsオプション: {0}\\n有効な値は\"all\"、\"locale\"、\"properties\"、\"security\"、\"system\"(Linuxのみ)、\"vm\"\\n有効な\"security\"サブオプションの値は\"all\"、\"properties\"、\"providers\"、\"tls\"\\n\"java -X\"を参照してください\\n\n@@ -46,8 +47,6 @@\n-java.launcher.cls.error2=エラー: メイン・メソッドがクラス{1}の{0}ではありません。次のようにメイン・メソッドを定義してください。\\n   public static void main(String[] args)\n-java.launcher.cls.error3=エラー: メイン・メソッドはクラス{0}のvoid型の値を返す必要があります。\\n次のようにメイン・メソッドを定義してください。\\n   public static void main(String[] args)\n-java.launcher.cls.error4=エラー: メイン・メソッドがクラス{0}で見つかりません。次のようにメイン・メソッドを定義してください。\\n   public static void main(String[] args)\\nまたはJavaFXアプリケーション・クラスは{1}を拡張する必要があります\n-java.launcher.cls.error5=エラー: JavaFXランタイム・コンポーネントが不足しており、このアプリケーションの実行に必要です\n-java.launcher.cls.error6=エラー: メイン・クラス{0}のロード中にLinkageErrorが発生しました\\n\\t{1}\n-java.launcher.cls.error7=エラー: メイン・クラス{0}を初期化できません\\n原因: {1}: {2}\n-java.launcher.cls.error8=エラー: 非privateのゼロ引数コンストラクタがクラス{0}に見つかりません\\n既存のコンストラクタからprivateを削除するか、次のように定義してください:\\n   public {0}()\n-java.launcher.cls.error9=エラー: staticでない内部クラス{0}コンストラクタを起動できません \\n内部クラスをstaticにするか、内部クラスを外部に出してソース・ファイルを区別してください\n+java.launcher.cls.error2=エラー: メイン・メソッドがクラス{0}で見つかりません。次のようにメイン・メソッドを定義してください。\\n   public static void main(String[] args)\\nまたはJavaFXアプリケーション・クラスは{1}を拡張する必要があります\n+java.launcher.cls.error3=エラー: JavaFXランタイム・コンポーネントが不足しており、このアプリケーションの実行に必要です\n+java.launcher.cls.error4=エラー: メイン・クラス{0}のロード中にLinkageErrorが発生しました\\n\\t{1}\n+java.launcher.cls.error5=エラー: メイン・クラス{0}を初期化できません\\n原因: {1}: {2}\n+java.launcher.cls.error6=エラー: 非privateのゼロ引数コンストラクタがクラス{0}に見つかりません\\n既存のコンストラクタからprivateを削除するか、次のように定義してください:\\n   public {0}()\n+java.launcher.cls.error7=エラー: staticでない内部クラス{0}コンストラクタを起動できません \\n内部クラスをstaticにするか、内部クラスを外部に出してソース・ファイルを区別してください\n@@ -58,0 +57,1 @@\n+java.launcher.jar.error.illegal.ena.value=エラー: Enable-Native-Accessマニフェスト属性の値\"{0}\"が不正です。''ALL-UNNAMED''のみ許可されます\n@@ -62,1 +62,1 @@\n-java.launcher.module.error3=エラー: モジュール{1}のメイン・クラス{0}をロードできません\\n\\t{2}\n+java.launcher.module.error3=エラー: モジュール{1}のメイン・クラス{0}をロードできません\\n原因: {2}\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher_ja.properties","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-java.launcher.opt.header  =   用法：{0} [options] <主类> [args...]\\n           （执行类）\\n   或  {0} [options] -jar <jar 文件> [args...]\\n           （执行 jar 文件）\\n   或  {0} [options] -m <模块>[\/<主类>] [args...]\\n       {0} [options] --module <模块>[\/<主类>] [args...]\\n           （执行模块中的主类）\\n   或  {0} [options] <源文件> [args]\\n           （执行单个源文件程序）\\n\\n 将主类、源文件、-jar <jar 文件>、-m 或\\n --module <模块>\/<主类> 后的参数作为参数\\n 传递到主类。\\n\\n 其中，选项包括：\\n\\n\n+java.launcher.opt.header  =   用法：{0} [options] <mainclass> [args...]\\n           （执行类）\\n   或  {0} [options] -jar <jarfile> [args...]\\n           （执行 jar 文件）\\n   或  {0} [options] -m <module>[\/<mainclass>] [args...]\\n       {0} [options] --module <module>[\/<mainclass>] [args...]\\n           （执行模块中的主类）\\n   或  {0} [options] <sourcefile> [args]\\n           （执行源文件程序）\\n\\n 将主类、源文件、-jar <jarfile>、-m 或\\n --module <module>\/<mainclass> 后的参数作为参数\\n 传递到主类。\\n\\n 其中，选项包括：\\n\\n\n@@ -33,2 +33,2 @@\n-java.launcher.opt.footer = \\    -cp <目录和 zip\/jar 文件的类搜索路径>\\n    -classpath <目录和 zip\/jar 文件的类搜索路径>\\n    --class-path <目录和 zip\/jar 文件的类搜索路径>\\n                  使用 {0} 分隔的, 用于搜索类文件的目录, JAR 档案\\n                  和 ZIP 档案列表。\\n    -p <模块路径>\\n    --module-path <模块路径>...\\n                  {0} 分隔的元素列表，每个元素都是\\n                  模块或包含模块的目录的文件路径。每个模块都是\\n                  模块化 JAR 或展开的模块目录。\\n    --upgrade-module-path <模块路径>...\\n                  {0} 分隔的元素列表，每个元素都是\\n                  模块或包含模块（用于替换运行时映像中的\\n                  可升级模块）的目录的文件路径。每个模块都是\\n                  模块化 JAR 或展开的模块目录。\\n    --add-modules <模块名称>[,<模块名称>...]\\n                  除了初始模块之外要解析的根模块。\\n                  <模块名称> 还可以为 ALL-DEFAULT, ALL-SYSTEM,\\n                  ALL-MODULE-PATH.\\n    --enable-native-access <module name>[,<module name>...]\\n                  允许执行受限本机操作的模块。\\n                  <module name> 还可以为 ALL-UNNAMED。\\n    --list-modules\\n                  列出可观察模块并退出\\n    -d <module name>\\n    --describe-module <模块名称>\\n                  描述模块并退出\\n    --dry-run     创建 VM 并加载主类, 但不执行 main 方法。\\n                  此 --dry-run 选项对于验证诸如\\n                  模块系统配置这样的命令行选项可能非常有用。\\n    --validate-modules\\n                  验证所有模块并退出\\n                  --validate-modules 选项对于查找\\n                  模块路径中模块的冲突及其他错误可能非常有用。\\n    -D<名称>=<值>\\n                  设置系统属性\\n    -verbose:[class|module|gc|jni]\\n                  为给定子系统启用详细输出\\n    -version      将产品版本输出到错误流并退出\\n    --version     将产品版本输出到输出流并退出\\n    -showversion  将产品版本输出到错误流并继续\\n    --show-version\\n                  将产品版本输出到输出流并继续\\n    --show-module-resolution\\n                  在启动过程中显示模块解析输出\\n    -? -h -help\\n                  将此帮助消息输出到错误流\\n    --help        将此帮助消息输出到输出流\\n    -X            \\\n-将额外选项的帮助输出到错误流\\n    --help-extra  将额外选项的帮助输出到输出流\\n    -ea[:<程序包名称>...|:<类名>]\\n    -enableassertions[:<程序包名称>...|:<类名>]\\n                  按指定的粒度启用断言\\n    -da[:<程序包名称>...|:<类名>]\\n    -disableassertions[:<程序包名称>...|:<类名>]\\n                  按指定的粒度禁用断言\\n    -esa | -enablesystemassertions\\n                  启用系统断言\\n    -dsa | -disablesystemassertions\\n                  禁用系统断言\\n    -agentlib:<库名>[=<选项>]\\n                  加载本机代理库 <库名>, 例如 -agentlib:jdwp\\n                  另请参阅 -agentlib:jdwp=help\\n    -agentpath:<路径名>[=<选项>]\\n                  按完整路径名加载本机代理库\\n    -javaagent:<jar 路径>[=<选项>]\\n                  加载 Java 编程语言代理, 请参阅 java.lang.instrument\\n    -splash:<图像路径>\\n                  使用指定的图像显示启动屏幕\\n                  自动支持和使用 HiDPI 缩放图像\\n                  (如果可用)。应始终将未缩放的图像文件名 (例如, image.ext)\\n                  作为参数传递给 -splash 选项。\\n                  将自动选取提供的最合适的缩放\\n                  图像。\\n                  有关详细信息, 请参阅 SplashScreen API 文档\\n    @argument 文件\\n                  一个或多个包含选项的参数文件\\n    --disable-@files\\n                  阻止进一步扩展参数文件\\n    --enable-preview\\n                  允许类依赖于此发行版的预览功能\\n要为长选项指定参数, 可以使用 --<名称>=<值> 或\\n--<名称> <值>。\\n\n+java.launcher.opt.footer = \\    -cp <目录和 zip\/jar 文件的类搜索路径>\\n    -classpath <目录和 zip\/jar 文件的类搜索路径>\\n    --class-path <目录和 zip\/jar 文件的类搜索路径>\\n                  使用 {0} 分隔的, 用于搜索类文件的目录, JAR 档案\\n                  和 ZIP 档案列表。\\n    -p <模块路径>\\n    --module-path <模块路径>...\\n                  {0} 分隔的元素列表，每个元素都是\\n                  模块或包含模块的目录的文件路径。每个模块都是\\n                  模块化 JAR 或展开的模块目录。\\n    --upgrade-module-path <模块路径>...\\n                  {0} 分隔的元素列表，每个元素都是\\n                  模块或包含模块（用于替换运行时映像中的\\n                  可升级模块）的目录的文件路径。每个模块都是\\n                  模块化 JAR 或展开的模块目录。\\n    --add-modules <模块名称>[,<模块名称>...]\\n                  除了初始模块之外要解析的根模块。\\n                  <模块名称> 还可以为 ALL-DEFAULT, ALL-SYSTEM,\\n                  ALL-MODULE-PATH.\\n    --enable-native-access <module name>[,<module name>...]\\n                  允许模块中的代码访问 Java 运行时之外的代码和数据。\\n                  <module name> 也可以是 ALL-UNNAMED，以指示类路径上的代码。\\n    --list-modules\\n                  列出可观察模块并退出\\n    -d <module name>\\n    --describe-module <模块名称>\\n                  描述模块并退出\\n    --dry-run     创建 VM 并加载主类, 但不执行 main 方法。\\n                  此 --dry-run 选项对于验证诸如\\n                  模块系统配置这样的命令行选项可能非常有用。\\n    --validate-modules\\n                  验证所有模块并退出\\n                  --validate-modules 选项对于查找\\n                  模块路径中模块的冲突及其他错误可能非常有用。\\n    -D<名称>=<值>\\n                  设置系统属性\\n    -verbose:[class|module|gc|jni]\\n                  为给定子系统启用详细输出\\n    -version      将产品版本输出到错误流并退出\\n    --version     将产品版本输出到输出流并退出\\n    -showversion  将产品版本输出到错误流并继续\\n    --show-version\\n                  将产品版本输出到输出流并继续\\n    --show-module-resolution\\n                  在启动过程中显示模块解析输出\\n    -? -h -help\\n                  将此帮助消息输出到错误流\\n    --help        \\\n+将此帮助消息输出到输出流\\n    -X            将额外选项的帮助输出到错误流\\n    --help-extra  将额外选项的帮助输出到输出流\\n    -ea[:<程序包名称>...|:<类名>]\\n    -enableassertions[:<程序包名称>...|:<类名>]\\n                  按指定的粒度启用断言\\n    -da[:<程序包名称>...|:<类名>]\\n    -disableassertions[:<程序包名称>...|:<类名>]\\n                  按指定的粒度禁用断言\\n    -esa | -enablesystemassertions\\n                  启用系统断言\\n    -dsa | -disablesystemassertions\\n                  禁用系统断言\\n    -agentlib:<库名>[=<选项>]\\n                  加载本机代理库 <库名>, 例如 -agentlib:jdwp\\n                  另请参阅 -agentlib:jdwp=help\\n    -agentpath:<路径名>[=<选项>]\\n                  按完整路径名加载本机代理库\\n    -javaagent:<jar 路径>[=<选项>]\\n                  加载 Java 编程语言代理, 请参阅 java.lang.instrument\\n    -splash:<图像路径>\\n                  使用指定的图像显示启动屏幕\\n                  自动支持和使用 HiDPI 缩放图像\\n                  (如果可用)。应始终将未缩放的图像文件名 (例如, image.ext)\\n                  作为参数传递给 -splash 选项。\\n                  将自动选取提供的最合适的缩放\\n                  图像。\\n                  有关详细信息, 请参阅 SplashScreen API 文档\\n    @argument 文件\\n                  一个或多个包含选项的参数文件\\n    --disable-@files\\n                  阻止进一步扩展参数文件\\n    --enable-preview\\n                  允许类依赖于此发行版的预览功能\\n要为长选项指定参数, 可以使用 --<名称>=<值> 或\\n--<名称> <值>。\\n\n@@ -37,2 +37,2 @@\n-java.launcher.X.usage=\\n    -Xbatch           禁用后台编译\\n    -Xbootclasspath\/a:<以 {0} 分隔的目录和 zip\/jar 文件>\\n                      附加在引导类路径末尾\\n    -Xcheck:jni       对 JNI 函数执行其他检查\\n    -Xcomp            强制在首次调用时编译方法\\n    -Xdebug           不执行任何操作；已过时，将在未来发行版中删除。\\n    -Xdiag            显示附加诊断消息\\n    -Xfuture          启用最严格的检查，预期将来的默认值。\\n                      此选项已过时，可能会在\\n                      未来发行版中删除。\\n    -Xint             仅解释模式执行\\n    -Xinternalversion\\n                      显示比 -version 选项更详细的\\n                      JVM 版本信息\\n    -Xlog:<opts>      配置或启用采用 Java 虚拟\\n                      机 (Java Virtual Machine, JVM) 统一记录框架进行事件记录。使用 -Xlog:help\\n                      可了解详细信息。\\n    -Xloggc:<file>    将 GC 状态记录在文件中（带时间戳）。\\n                      此选项已过时，可能会在\\n                      将来的发行版中删除。它将替换为 -Xlog:gc:<file>。\\n    -Xmixed           混合模式执行（默认值）\\n    -Xmn<size>        为年轻代（新生代）设置初始和最大堆大小\\n                      （以字节为单位）\\n    -Xms<size>        设置初始 Java 堆大小\\n    -Xmx<size>        设置最大 Java 堆大小\\n    -Xnoclassgc       禁用类垃圾收集\\n    -Xrs              减少 Java\/VM 对操作系统信号的使用（请参见文档）\\n    -Xshare:auto      在可能的情况下使用共享类数据（默认值）\\n    -Xshare:off       不尝试使用共享类数据\\n    -Xshare:on        要求使用共享类数据，否则将失败。\\n                      这是一个测试选项，可能导致间歇性\\n                      故障。不应在生产环境中使用它。\\n    -XshowSettings    显示所有设置并继续\\n    -XshowSettings:all\\n                      显示所有设置并继续\\n    -XshowSettings:locale\\n                      显示所有与区域设置相关的设置并继续\\n    -XshowSettings:properties\\n                      显示所有属性设置并继续\\n    -XshowSettings:vm\\n                      显示所有与 vm 相关的设置并继续\\n    -XshowSettings:security\\n                      显示所有安全设置并继续\\n    -XshowSettings:security:all\\n                      显示所有安全设置并继续\\n    -XshowSettings:security:properties\\n                      \\\n-显示安全属性并继续\\n    -XshowSettings:security:providers\\n                      显示静态安全提供方设置并继续\\n    -XshowSettings:security:tls\\n                      显示与 TLS 相关的安全设置并继续\\n    -XshowSettings:system\\n                      （仅 Linux）显示主机系统或容器\\n                      配置并继续\\n    -Xss<size>        设置 Java 线程堆栈大小\\n                      实际大小可以舍入到\\n                      操作系统要求的系统页面大小的倍数。\\n    -Xverify          设置字节码验证器的模式\\n                      请注意，选项 -Xverify:none 已过时，\\n                      可能会在未来发行版中删除。\\n    --add-reads <module>=<target-module>(,<target-module>)*\\n                      更新 <module> 以读取 <target-module>，而无论\\n                      模块如何声明。 \\n                      <target-module> 可以是 ALL-UNNAMED，将读取所有未命名\\n                      模块。\\n    --add-exports <module>\/<package>=<target-module>(,<target-module>)*\\n                      更新 <module> 以将 <package> 导出到 <target-module>，\\n                      而无论模块如何声明。\\n                      <target-module> 可以是 ALL-UNNAMED，将导出到所有\\n                      未命名模块。\\n    --add-opens <module>\/<package>=<target-module>(,<target-module>)*\\n                      更新 <module> 以在 <target-module> 中打开\\n                      <package>，而无论模块如何声明。\\n    --limit-modules <module name>[,<module name>...]\\n                      限制可观察模块的领域\\n    --patch-module <module>=<file>({0}<file>)*\\n                      使用 JAR 文件或目录中的类和资源\\n                      覆盖或增强模块。\\n    --source <version>\\n                      设置源文件模式中源的版本。\\n    --finalization=<value>\\n                      控制 JVM 是否执行对象最终处理，\\n                      其中 <value> 为 \"enabled\" 或 \"disabled\" 之一。\\n                      默认情况下，最终处理处于启用状态。\\n\\n这些额外选项如有更改, 恕不另行通知。\\n\n+java.launcher.X.usage=\\n    -Xbatch           禁用后台编译\\n    -Xbootclasspath\/a:<以 {0} 分隔的目录和 zip\/jar 文件>\\n                      附加在引导类路径末尾\\n    -Xcheck:jni       对 JNI 函数执行其他检查\\n    -Xcomp            强制在首次调用时编译方法\\n    -Xdebug           不执行任何操作；已过时，将在未来发行版中删除。\\n    -Xdiag            显示附加诊断消息\\n    -Xfuture          启用最严格的检查，预期将来的默认值。\\n                      此选项已过时，可能会在\\n                      未来发行版中删除。\\n    -Xint             仅解释模式执行\\n    -Xinternalversion\\n                      显示比 -version 选项更详细的\\n                      JVM 版本信息\\n    -Xlog:<opts>      配置或启用采用 Java 虚拟\\n                      机 (Java Virtual Machine, JVM) 统一记录框架进行事件记录。使用 -Xlog:help\\n                      可了解详细信息。\\n    -Xloggc:<file>    将 GC 状态记录在文件中（带时间戳）。\\n                      此选项已过时，可能会在\\n                      将来的发行版中删除。它将替换为 -Xlog:gc:<file>。\\n    -Xmixed           混合模式执行（默认值）\\n    -Xmn<size>        为年轻代（新生代）设置初始和最大堆大小\\n                      （以字节为单位）\\n    -Xms<size>        设置初始 Java 堆大小\\n    -Xmx<size>        设置最大 Java 堆大小\\n    -Xnoclassgc       禁用类垃圾收集\\n    -Xrs              减少 Java\/VM 对操作系统信号的使用（请参见文档）\\n    -Xshare:auto      在可能的情况下使用共享类数据（默认值）\\n    -Xshare:off       不尝试使用共享类数据\\n    -Xshare:on        要求使用共享类数据，否则将失败。\\n                      这是一个测试选项，可能导致间歇性\\n                      故障。不应在生产环境中使用它。\\n    -XshowSettings    显示所有设置并继续\\n    -XshowSettings:all\\n                      详细显示所有设置并继续\\n    -XshowSettings:locale\\n                      显示所有与区域设置相关的设置并继续\\n    -XshowSettings:properties\\n                      显示所有属性设置并继续\\n    -XshowSettings:vm\\n                      显示所有与 vm 相关的设置并继续\\n    -XshowSettings:security\\n                      显示所有安全设置并继续\\n    -XshowSettings:security:all\\n                      显示所有安全设置并继续\\n    -XshowSettings:security:properties\\n                     \\\n+ 显示安全属性并继续\\n    -XshowSettings:security:providers\\n                      显示静态安全提供方设置并继续\\n    -XshowSettings:security:tls\\n                      显示与 TLS 相关的安全设置并继续\\n    -XshowSettings:system\\n                      （仅 Linux）显示主机系统或容器\\n                      配置并继续\\n    -Xss<size>        设置 Java 线程堆栈大小\\n                      实际大小可以舍入到\\n                      操作系统要求的系统页面大小的倍数。\\n    -Xverify          设置字节码验证器的模式\\n                      请注意，选项 -Xverify:none 已过时，\\n                      可能会在未来发行版中删除。\\n    --add-reads <module>=<target-module>(,<target-module>)*\\n                      更新 <module> 以读取 <target-module>，而无论\\n                      模块如何声明。 \\n                      <target-module> 可以是 ALL-UNNAMED，将读取所有未命名\\n                      模块。\\n    --add-exports <module>\/<package>=<target-module>(,<target-module>)*\\n                      更新 <module> 以将 <package> 导出到 <target-module>，\\n                      而无论模块如何声明。\\n                      <target-module> 可以是 ALL-UNNAMED，将导出到所有\\n                      未命名模块。\\n    --add-opens <module>\/<package>=<target-module>(,<target-module>)*\\n                      更新 <module> 以在 <target-module> 中打开\\n                      <package>，而无论模块如何声明。\\n    --limit-modules <module name>[,<module name>...]\\n                      限制可观察模块的领域\\n    --patch-module <module>=<file>({0}<file>)*\\n                      使用 JAR 文件或目录中的类和资源\\n                      覆盖或增强模块。\\n    --source <version>\\n                      设置源文件模式中源的版本。\\n    --finalization=<value>\\n                      控制 JVM 是否执行对象最终处理，\\n                      其中 <value> 为 \"enabled\" 或 \"disabled\" 之一。\\n                      默认情况下，最终处理处于启用状态。\\n\\n这些额外选项如有更改, 恕不另行通知。\\n\n@@ -43,0 +43,1 @@\n+java.launcher.bad.option=\\n无法识别的 showSettings 选项：{0}\\n有效值为 \"all\"、\"locale\"、\"properties\"、\"security\"、\"system\"（仅 Linux）、\"vm\"\\n有效的 \"security\" 子选项值为 \"all\"、\"properties\"、\"providers\"、\"tls\"\\n请参见 \"java -X\"\\n\n@@ -44,8 +45,6 @@\n-java.launcher.cls.error2=错误: main 方法不是类 {1} 中的{0}, 请将 main 方法定义为:\\n   public static void main(String[] args)\n-java.launcher.cls.error3=错误: main 方法必须返回类 {0} 中的空类型值, 请\\n将 main 方法定义为:\\n   public static void main(String[] args)\n-java.launcher.cls.error4=错误: 在类 {0} 中找不到 main 方法, 请将 main 方法定义为:\\n   public static void main(String[] args)\\n否则 JavaFX 应用程序类必须扩展{1}\n-java.launcher.cls.error5=错误: 缺少 JavaFX 运行时组件, 需要使用该组件来运行此应用程序\n-java.launcher.cls.error6=错误: 加载主类 {0} 时出现 LinkageError\\n\\t{1}\n-java.launcher.cls.error7=错误: 无法初始化主类 {0}\\n原因: {1}: {2}\n-java.launcher.cls.error8=错误：在类 {0} 中未找到非 private 零参数构造器\\n请从现有构造器中删除 private，或者定义为：\\n   public {0}()\n-java.launcher.cls.error9=错误：无法调用非静态内部类 {0} 构造器\\n请将内部类设为静态或将内部类移出到单独的源文件\n+java.launcher.cls.error2=错误: 在类 {0} 中找不到 main 方法, 请将 main 方法定义为:\\n   public static void main(String[] args)\\n否则 JavaFX 应用程序类必须扩展{1}\n+java.launcher.cls.error3=错误: 缺少 JavaFX 运行时组件, 需要使用该组件来运行此应用程序\n+java.launcher.cls.error4=错误: 加载主类 {0} 时出现 LinkageError\\n\\t{1}\n+java.launcher.cls.error5=错误: 无法初始化主类 {0}\\n原因: {1}: {2}\n+java.launcher.cls.error6=错误：在类 {0} 中未找到非专用零参数构造器\\n请从现有构造器中删除专用，或者定义为：\\n   public {0}()\n+java.launcher.cls.error7=错误：无法调用非静态内部类 {0} 构造器\\n请将内部类设为静态或将内部类移出到单独的源文件\n@@ -56,0 +55,1 @@\n+java.launcher.jar.error.illegal.ena.value=错误：Enable-Native-Access 清单属性的值 \"{0}\" 非法。仅允许使用 ''ALL-UNNAMED''\n@@ -60,1 +60,1 @@\n-java.launcher.module.error3=错误: 无法将主类 {0} 加载到模块 {1} 中\\n\\t{2}\n+java.launcher.module.error3=错误：无法加载模块 {1} 中的主类 {0}\\n原因：{2}\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher_zh_CN.properties","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,0 +2,3 @@\n+# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+#\n+#\n@@ -326,0 +329,4 @@\n+\n+# Implementation Property DTD\n+        JDK_DTD_DENY = JAXP00010008: DOCTYPE ist nicht zulässig, wenn die DTD-Eigenschaft auf Ablehnen gesetzt wurde. Weitere Informationen: Eigenschaft jdk.xml.dtd.support in java.xml\/module-summary.\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLMessages_de.properties","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,0 +2,3 @@\n+# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+#\n+#\n@@ -326,0 +329,4 @@\n+\n+# Implementation Property DTD\n+        JDK_DTD_DENY = JAXP00010008: DTDプロパティが拒否に設定されている場合、DOCTYPEは指定できません。参照: java.xml\/module-summaryのプロパティjdk.xml.dtd.support。\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLMessages_ja.properties","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,0 +2,3 @@\n+# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+#\n+#\n@@ -326,0 +329,4 @@\n+\n+# Implementation Property DTD\n+        JDK_DTD_DENY = JAXP00010008：当 DTD 属性设置为拒绝时，不允许使用 DOCTYPE。请参阅：java.xml\/module-summary 中的属性 jdk.xml.dtd.support。\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/msg\/XMLMessages_zh_CN.properties","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -189,2 +189,7 @@\n-# 0: name\n-compiler.err.call.must.be.first.stmt.in.ctor=Aufruf von {0} muss die erste Anweisung im Konstruktor sein\n+compiler.err.call.must.only.appear.in.ctor=Expliziter Konstruktoraufruf ist nur in einem Konstruktorbody zulässig\n+\n+compiler.err.redundant.superclass.init=Redundanter expliziter Konstruktoraufruf\n+\n+compiler.err.ctor.calls.not.allowed.here=Expliziter Konstruktoraufruf ist hier nicht zulässig\n+\n+compiler.err.return.before.superclass.initialized=''return'' ist vor einem expliziten Konstruktoraufruf nicht zulässig\n@@ -289,1 +294,1 @@\n-# 0: symbol or string\n+# 0: symbol or name\n@@ -384,1 +389,1 @@\n-compiler.err.unnamed.class.should.not.have.package.declaration=Unbenannte Klasse darf keine Packagedeklaration aufweisen\n+compiler.err.implicit.class.should.not.have.package.declaration=Implizit deklarierte Klasse darf keine Packagedeklaration aufweisen\n@@ -386,1 +391,1 @@\n-compiler.err.unnamed.class.does.not.have.main.method=Unbenannte Klasse weist keine Hauptmethode im Format \"void main()\" oder \"void main(String[] args)\" auf\n+compiler.err.implicit.class.does.not.have.main.method=Implizit deklarierte Klasse weist keine Hauptmethode im Format \"void main()\" oder \"void main(String[] args)\" auf\n@@ -411,0 +416,3 @@\n+# 0: type\n+compiler.err.selector.type.not.allowed=Selektortyp {0} ist nicht zulässig\n+\n@@ -962,3 +970,0 @@\n-# 0: symbol\n-compiler.err.processor.type.cannot.be.a.raw.type=Prozessortyp kann kein Raw-Typ sein: {0}\n-\n@@ -1371,0 +1376,3 @@\n+# 0: symbol, 1: symbol\n+compiler.warn.restricted.method={0}.{1} ist eine eingeschränkte Methode.\\n(Eingeschränkte Methoden sind nicht sicher und können bei falscher Verwendung die JRE zum Absturz bringen oder den Arbeitsspeicher beschädigen)\n+\n@@ -1507,0 +1515,6 @@\n+# 0: string, 1: fragment\n+compiler.warn.source.no.bootclasspath=Bootstrap Classpath ist nicht zusammen mit -source {0} festgelegt\\n{1}\n+\n+# 0: string, 1: fragment\n+compiler.warn.source.no.system.modules.path=Systemmodulpfad ist nicht zusammen mit -source {0} festgelegt\\n{1}\n+\n@@ -1508,1 +1522,1 @@\n-compiler.warn.source.no.bootclasspath=Bootstrap Classpath nicht zusammen mit -source {0} festgelegt\n+compiler.misc.source.no.bootclasspath=Wenn Sie den Bootstrap Classpath nicht festlegen, kann dies zu Klassendateien führen, die auf JDK {0} nicht ausgeführt werden können\\n--release {0} wird anstelle von -source {0} empfohlen, weil dadurch der Bootstrap Classpath automatisch festgelegt wird\n@@ -1511,1 +1525,7 @@\n-compiler.warn.source.no.system.modules.path=Systemmodulpfad nicht zusammen mit -source {0} festgelegt\n+compiler.misc.source.no.system.modules.path=Wenn Sie den Speicherort der Systemmodule nicht festlegen, kann dies zu Klassendateien führen, die auf JDK {0} nicht ausgeführt werden können\\n--release {0} wird anstelle von -source {0} empfohlen, weil dadurch der Speicherort der Systemmodule automatisch festgelegt wird\n+\n+# 0: string, 1: string\n+compiler.misc.source.no.bootclasspath.with.target=Wenn Sie den Bootstrap Classpath nicht festlegen, kann dies zu Klassendateien führen, die auf JDK 8 nicht ausgeführt werden können\\n--release {0} wird anstelle von -source {0} -target {1} empfohlen, weil dadurch der Bootstrap Classpath automatisch festgelegt wird\n+\n+# 0: string, 1: string\n+compiler.misc.source.no.system.modules.path.with.target=Wenn Sie den Speicherort der Systemmodule nicht festlegen, kann dies zu Klassendateien führen, die auf JDK {0} nicht ausgeführt werden können\\n--release {0} wird anstelle von -source {0} -target {1} empfohlen, weil dadurch der Speicherort der Systemmodule automatisch festgelegt wird\n@@ -2265,1 +2285,3 @@\n-compiler.misc.feature.unnamed.classes=Unbenannte Klassen\n+compiler.misc.feature.implicit.classes=Implizit deklarierte Klassen\n+\n+compiler.misc.feature.super.init=Anweisungen vor super()\n@@ -2271,1 +2293,3 @@\n-compiler.err.use.of.underscore.not.allowed=Ab Release 21 ist nur das Unterstrichschlüsselwort \"_\" zulässig, um\\nunbenannte Muster, lokale Variablen, Ausnahmeparameter oder Lambda-Parameter zu deklarieren\n+compiler.err.use.of.underscore.not.allowed=Unterstrich ist hier nicht zulässig\\nAb Release 9 ist ''_'' ein Schlüsselwort und kann nicht als ID verwendet werden\\nAb Release 22 kann ''_'' als Name in der Deklaration unbenannter Muster, lokaler Variablen, Ausnahmeparameter oder Lambda-Parameter verwendet werden\n+\n+compiler.err.use.of.underscore.not.allowed.non.variable=Unterstrich ist hier nicht zulässig\n@@ -2759,1 +2783,1 @@\n-compiler.err.first.statement.must.be.call.to.another.constructor=Konstruktor ist nicht kanonisch. Daher muss die erste Anweisung einen anderen Konstruktor der Klasse {0} aufrufen\n+compiler.err.non.canonical.constructor.invoke.another.constructor=Konstruktor ist nicht kanonisch. Daher muss ein anderer Konstruktor der Klasse {0} aufgerufen werden\n@@ -2807,2 +2831,2 @@\n-# 0: string, 1: target\n-compiler.warn.source.target.conflict=Quellrelease {0} erfordert Zielrelease {1}\n+# 0: string, 1: string\n+compiler.err.source.target.conflict=Angegebenes Zielrelease {1} ist zu alt für das angegebene Quellrelease {0}\\n--release {1} wird beim Kompilieren von Code, der auf JDK {1} ausgeführt werden soll, empfohlen\n@@ -2810,2 +2834,2 @@\n-# 0: string, 1: target\n-compiler.warn.target.default.source.conflict=Zielrelease {0} steht mit Standardquellrelease {1} in Konflikt\n+# 0: string, 1: string\n+compiler.err.target.default.source.conflict=Angegebenes Zielrelease {1} ist zu alt für das standardmäßige Quellrelease {0}\\n--release {1} wird beim Kompilieren von Code, der auf JDK {1} ausgeführt werden soll, empfohlen\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler_de.properties","additions":41,"deletions":17,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -189,2 +189,7 @@\n-# 0: name\n-compiler.err.call.must.be.first.stmt.in.ctor={0}の呼出しはコンストラクタの先頭文である必要があります\n+compiler.err.call.must.only.appear.in.ctor=明示的なコンストラクタ呼出しは、コンストラクタ本体にのみ表示されます\n+\n+compiler.err.redundant.superclass.init=冗長な明示的なコンストラクタ呼出し\n+\n+compiler.err.ctor.calls.not.allowed.here=明示的なコンストラクタ呼出しはここでは許可されません\n+\n+compiler.err.return.before.superclass.initialized=明示的なコンストラクタ呼出しの前に''return''は許可されません\n@@ -289,1 +294,1 @@\n-# 0: symbol or string\n+# 0: symbol or name\n@@ -384,1 +389,1 @@\n-compiler.err.unnamed.class.should.not.have.package.declaration=無名クラスにパッケージ宣言を含めることはできません\n+compiler.err.implicit.class.should.not.have.package.declaration=暗黙的に宣言されたクラスにパッケージ宣言を含めることはできません\n@@ -386,1 +391,1 @@\n-compiler.err.unnamed.class.does.not.have.main.method=無名クラスにvoid main()またはvoid main(String[] args)という形式のmainメソッドがありません\n+compiler.err.implicit.class.does.not.have.main.method=暗黙的に宣言されたクラスにvoid main()またはvoid main(String[] args)という形式のmainメソッドがありません\n@@ -411,0 +416,3 @@\n+# 0: type\n+compiler.err.selector.type.not.allowed=セレクタ・タイプ{0}は許可されません\n+\n@@ -962,3 +970,0 @@\n-# 0: symbol\n-compiler.err.processor.type.cannot.be.a.raw.type=プロセッサ・タイプはraw型にできません: {0}\n-\n@@ -1371,0 +1376,3 @@\n+# 0: symbol, 1: symbol\n+compiler.warn.restricted.method={0}.{1}は制限されたメソッドです。\\n(制限されたメソッドは安全ではありません。不適切に使用した場合、Javaランタイムがクラッシュまたはメモリーが破損する場合があります)\n+\n@@ -1507,0 +1515,6 @@\n+# 0: string, 1: fragment\n+compiler.warn.source.no.bootclasspath=ブートストラップ・クラス・パスが-source {0}と一緒に設定されていません\\n{1}\n+\n+# 0: string, 1: fragment\n+compiler.warn.source.no.system.modules.path=システム・モジュールの場所が-source {0}と一緒に設定されていません\\n{1}\n+\n@@ -1508,1 +1522,1 @@\n-compiler.warn.source.no.bootclasspath=ブートストラップ・クラスパスが-source {0}と一緒に設定されていません\n+compiler.misc.source.no.bootclasspath=ブートストラップ・クラス・パスを設定しないと、クラス・ファイルがJDK {0}で実行できない場合があります\\nブートストラップ・クラス・パスを自動的に設定するため、-source {0}のかわりに--release {0}をお薦めします\n@@ -1511,1 +1525,7 @@\n-compiler.warn.source.no.system.modules.path=システム・モジュール・パスが-source {0}と一緒に設定されていません\n+compiler.misc.source.no.system.modules.path=システム・モジュールの場所を設定しないと、クラス・ファイルがJDK {0}で実行できない場合があります\\nシステム・モジュールの場所を自動的に設定するため、-source {0}のかわりに--release {0}をお薦めします\n+\n+# 0: string, 1: string\n+compiler.misc.source.no.bootclasspath.with.target=ブートストラップ・クラス・パスを設定しないと、クラス・ファイルがJDK 8で実行できない場合があります\\nブートストラップ・クラス・パスを自動的に設定するため、-source {0} -target {1}のかわりに--release {0}をお薦めします\n+\n+# 0: string, 1: string\n+compiler.misc.source.no.system.modules.path.with.target=システム・モジュールの場所を設定しないと、クラス・ファイルがJDK {0}で実行できない場合があります\\nシステム・モジュールの場所を自動的に設定するため、-source {0} -target {1}のかわりに--release {0}をお薦めします\n@@ -2265,1 +2285,3 @@\n-compiler.misc.feature.unnamed.classes=無名クラス\n+compiler.misc.feature.implicit.classes=暗黙的に宣言されたクラス\n+\n+compiler.misc.feature.super.init=super()の前の文\n@@ -2271,1 +2293,3 @@\n-compiler.err.use.of.underscore.not.allowed=リリース21から、アンダースコア・キーワード''_''は、\\n無名パターン、ローカル変数、例外パラメータまたはラムダ・パラメータを宣言する場合にのみ許可されます\n+compiler.err.use.of.underscore.not.allowed=アンダースコアはここでは許可されません\\nリリース9から、''_''はキーワードなので識別子として使用することはできません\\nリリース22から、無名パターン、ローカル変数、例外パラメータまたはラムダ・パラメータの宣言には''_''を名前として使用できます\n+\n+compiler.err.use.of.underscore.not.allowed.non.variable=アンダースコアはここでは許可されません\n@@ -2759,1 +2783,1 @@\n-compiler.err.first.statement.must.be.call.to.another.constructor=コンストラクタが標準でないため、先頭文がクラス{0}の他のコンストラクタを呼び出す必要があります\n+compiler.err.non.canonical.constructor.invoke.another.constructor=コンストラクタが標準でないため、クラス{0}の他のコンストラクタを呼び出す必要があります\n@@ -2807,2 +2831,2 @@\n-# 0: string, 1: target\n-compiler.warn.source.target.conflict=ソース・リリース{0}にはターゲット・リリース{1}が必要です\n+# 0: string, 1: string\n+compiler.err.source.target.conflict=指定のターゲット・リリース{1}は、指定したソース・リリース{0}に対して古すぎます\\nJDK {1}で実行するコードをコンパイルするときは、--release {1}をお薦めします\n@@ -2810,2 +2834,2 @@\n-# 0: string, 1: target\n-compiler.warn.target.default.source.conflict=ターゲット・リリース{0}がデフォルトのソース・リリース{1}と競合しています\n+# 0: string, 1: string\n+compiler.err.target.default.source.conflict=指定のターゲット・リリース{1}は、デフォルトのソース・リリース{0}に対して古すぎます\\nJDK {1}で実行するコードをコンパイルするときは、--release {1}をお薦めします\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler_ja.properties","additions":41,"deletions":17,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -189,2 +189,7 @@\n-# 0: name\n-compiler.err.call.must.be.first.stmt.in.ctor=对{0}的调用必须是构造器中的第一个语句\n+compiler.err.call.must.only.appear.in.ctor=显式构造器调用只能出现在构造器主体中\n+\n+compiler.err.redundant.superclass.init=冗余显式构造器调用\n+\n+compiler.err.ctor.calls.not.allowed.here=此处不允许使用显式构造器调用\n+\n+compiler.err.return.before.superclass.initialized=在显式构造器调用之前不允许使用 ''return''\n@@ -289,1 +294,1 @@\n-# 0: symbol or string\n+# 0: symbol or name\n@@ -384,1 +389,1 @@\n-compiler.err.unnamed.class.should.not.have.package.declaration=未命名类不应有程序包声明\n+compiler.err.implicit.class.should.not.have.package.declaration=隐式声明的类不应有程序包声明\n@@ -386,1 +391,1 @@\n-compiler.err.unnamed.class.does.not.have.main.method=未命名类没有 void main() 或 void main(String[] args) 形式的 main 方法\n+compiler.err.implicit.class.does.not.have.main.method=隐式声明的类没有 void main() 或 void main(String[] args) 形式的 main 方法\n@@ -411,0 +416,3 @@\n+# 0: type\n+compiler.err.selector.type.not.allowed=不允许使用选择器类型 {0}\n+\n@@ -962,3 +970,0 @@\n-# 0: symbol\n-compiler.err.processor.type.cannot.be.a.raw.type=处理程序类型不能为原始类型：{0}\n-\n@@ -1371,0 +1376,3 @@\n+# 0: symbol, 1: symbol\n+compiler.warn.restricted.method={0}.{1} 是受限制的方法。\\n（受限制的方法不安全，如果使用不当，可能会导致 Java 运行时崩溃或内存损坏）\n+\n@@ -1507,0 +1515,6 @@\n+# 0: string, 1: fragment\n+compiler.warn.source.no.bootclasspath=未与 -source {0} 一起设置引导类路径\\n{1}\n+\n+# 0: string, 1: fragment\n+compiler.warn.source.no.system.modules.path=未与 -source {0} 一起设置系统模块的位置\\n{1}\n+\n@@ -1508,1 +1522,1 @@\n-compiler.warn.source.no.bootclasspath=未与 -source {0} 一起设置引导类路径\n+compiler.misc.source.no.bootclasspath=不设置引导类路径可能会导致类文件无法在 JDK {0} 上运行\\n建议使用 --release {0} 而不是 -source {0}，因为它会自动设置引导类路径\n@@ -1511,1 +1525,7 @@\n-compiler.warn.source.no.system.modules.path=未与 -source {0} 一起设置系统模块路径\n+compiler.misc.source.no.system.modules.path=不设置系统模块的位置可能会导致类文件无法在 JDK {0} 上运行\\n建议使用 --release {0} 而不是 -source {0}，因为它会自动设置系统模块的位置\n+\n+# 0: string, 1: string\n+compiler.misc.source.no.bootclasspath.with.target=不设置引导类路径可能会导致类文件无法在 JDK 8 上运行\\n建议使用 --release {0} 而不是 -source {0} -target {1}，因为它会自动设置引导类路径\n+\n+# 0: string, 1: string\n+compiler.misc.source.no.system.modules.path.with.target=不设置系统模块的位置可能会导致类文件无法在 JDK {0} 上运行\\n建议使用 --release {0} 而不是 -source {0} -target {1}，因为它会自动设置系统模块的位置\n@@ -2265,1 +2285,3 @@\n-compiler.misc.feature.unnamed.classes=未命名类\n+compiler.misc.feature.implicit.classes=隐式声明的类\n+\n+compiler.misc.feature.super.init=super() 之前的语句\n@@ -2271,1 +2293,3 @@\n-compiler.err.use.of.underscore.not.allowed=从发行版 21 开始，下划线关键字 ''_'' 只允许用于声明\\n未命名模式、本地变量、异常错误参数或 lambda 参数\n+compiler.err.use.of.underscore.not.allowed=此处不允许使用下划线\\n从发行版 9 开始，''_'' 为关键字，不能用作标识符\\n从发行版 22 开始，''_'' 可以用作未命名模式、本地变量、异常错误参数或 lambda 参数的声明中的名称\n+\n+compiler.err.use.of.underscore.not.allowed.non.variable=此处不允许使用下划线\n@@ -2759,1 +2783,1 @@\n-compiler.err.first.statement.must.be.call.to.another.constructor=构造器不是规范的，因此它的第一个语句必须调用类 {0} 的另一个构造器\n+compiler.err.non.canonical.constructor.invoke.another.constructor=构造器不是规范的，因此它必须调用类 {0} 的另一个构造器\n@@ -2807,2 +2831,2 @@\n-# 0: string, 1: target\n-compiler.warn.source.target.conflict=源发行版 {0} 需要目标发行版 {1}\n+# 0: string, 1: string\n+compiler.err.source.target.conflict=指定的目标发行版 {1} 对于指定的源发行版 {0} 来说太旧\\n当编译要在 JDK {1} 上运行的代码时，建议使用 --release {1}\n@@ -2810,2 +2834,2 @@\n-# 0: string, 1: target\n-compiler.warn.target.default.source.conflict=目标发行版 {0} 与默认的源发行版 {1} 冲突\n+# 0: string, 1: string\n+compiler.err.target.default.source.conflict=指定的目标发行版 {1} 对于默认源发行版 {0} 来说太旧\\n当编译要在 JDK {1} 上运行的代码时，建议使用 --release {1}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler_zh_CN.properties","additions":41,"deletions":17,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -128,0 +128,2 @@\n+javac.opt.Xlint.desc.incubating=Warnt vor der Verwendung von Inkubatormodulen.\n+\n@@ -160,1 +162,1 @@\n-javac.opt.Xlint.desc.text-blocks=Warnt vor inkonsistenten Leerzeichen in Textblockeinrückung.\n+javac.opt.Xlint.desc.text-blocks=Warnt vor inkonsistenten Leerzeichen in Textblockeinzug.\n@@ -172,0 +174,2 @@\n+javac.opt.Xlint.desc.restricted=Warnt vor der Verwendung eingeschränkter Methoden.\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac_de.properties","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -128,0 +128,2 @@\n+javac.opt.Xlint.desc.incubating=実験的なモジュールの使用について警告します。\n+\n@@ -172,0 +174,2 @@\n+javac.opt.Xlint.desc.restricted=制限されたメソッドの使用について警告します。\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac_ja.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,0 +128,2 @@\n+javac.opt.Xlint.desc.incubating=有关使用 incubating 模块的警告。\n+\n@@ -172,0 +174,2 @@\n+javac.opt.Xlint.desc.restricted=有关使用受限制方法的警告。\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac_zh_CN.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,0 +126,5 @@\n+\n+launcher.err.unnamed.pkg.not.allowed.named.modules=Unbenanntes Package ist in benannten Modulen nicht zulässig\n+\n+# 0: string, 1: path\n+launcher.err.mismatch.end.of.path.and.package.name=Ende des Pfades für die Ausgangsdatei stimmt nicht mit dem zugehörigen Packagenamen {0} überein: {1}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/launcher_de.properties","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,0 +126,5 @@\n+\n+launcher.err.unnamed.pkg.not.allowed.named.modules=名前のないパッケージは名前付きモジュールでは許可されません\n+\n+# 0: string, 1: path\n+launcher.err.mismatch.end.of.path.and.package.name=ソース・ファイルへのパスの終わりがパッケージ名{0}と一致しません: {1}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/launcher_ja.properties","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,0 +126,5 @@\n+\n+launcher.err.unnamed.pkg.not.allowed.named.modules=命名模块中不允许未命名程序包\n+\n+# 0: string, 1: path\n+launcher.err.mismatch.end.of.path.and.package.name=源文件的路径结尾与其程序包名称 {0} 不匹配：{1}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/launcher_zh_CN.properties","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+doclet.Window_Restricted_List=Liste eingeschränkter Methoden\n@@ -132,0 +133,2 @@\n+doclet.Restricted_Methods=Eingeschränkte Methoden\n+doclet.Restricted_Mark=RESTRICTED\n@@ -240,0 +243,1 @@\n+doclet.help.restricted.body=Auf der Seite {0} sind alle eingeschränkten Methoden aufgelistet. Eingeschränkte Methoden sind nicht sicher und können bei falscher Verwendung die JVM zum Absturz bringen oder zu einer Beschädigung des Arbeitsspeichers führen.\n@@ -316,0 +320,3 @@\n+doclet.RestrictedLeadingNote={0} ist eine eingeschränkte Methode der Java-Plattform.\n+doclet.RestrictedTrailingNote1=Programme können {0} nur verwenden, wenn der Zugriff auf eingeschränkte Methoden aktiviert ist.\n+doclet.RestrictedTrailingNote2=Eingeschränkte Methoden sind nicht sicher und können bei falscher Verwendung die JVM zum Absturz bringen oder zu einer Beschädigung des Arbeitsspeichers führen.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard_de.properties","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+doclet.Window_Restricted_List=制限されたメソッド・リスト\n@@ -132,0 +133,2 @@\n+doclet.Restricted_Methods=制限されたメソッド\n+doclet.Restricted_Mark=RESTRICTED\n@@ -240,0 +243,1 @@\n+doclet.help.restricted.body={0}ページには、すべての制限されたメソッドのリストがあります。制限されたメソッドは安全ではありません。不適切に使用した場合、JVMがクラッシュまたはメモリーが破損する場合があります。\n@@ -316,0 +320,3 @@\n+doclet.RestrictedLeadingNote={0}はJavaプラットフォームの制限されたメソッドです。\n+doclet.RestrictedTrailingNote1=プログラムは、制限されたメソッドへのアクセスが有効になっている場合にのみ{0}を使用できます。\n+doclet.RestrictedTrailingNote2=制限されたメソッドは安全ではありません。不適切に使用した場合、JVMがクラッシュまたはメモリーが破損する場合があります。\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard_ja.properties","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+doclet.Window_Restricted_List=受限制方法列表\n@@ -132,0 +133,2 @@\n+doclet.Restricted_Methods=受限制的方法\n+doclet.Restricted_Mark=RESTRICTED\n@@ -240,0 +243,1 @@\n+doclet.help.restricted.body={0} 页面列出了所有受限制的方法。受限制的方法不安全，如果使用不当，可能会导致 JVM 崩溃或内存损坏。\n@@ -316,0 +320,3 @@\n+doclet.RestrictedLeadingNote={0} 是 Java 平台的受限制方法。\n+doclet.RestrictedTrailingNote1=只有在启用了对受限制方法的访问时，程序才能使用 {0}。\n+doclet.RestrictedTrailingNote2=受限制的方法不安全，如果使用不当，可能会导致 JVM 崩溃或内存损坏。\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard_zh_CN.properties","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -110,2 +110,2 @@\n-doclet.UnknownTag={0} ist ein unbekanntes Tag.\n-doclet.UnknownTagLowercase={0} ist ein unbekanntes Tag - bis auf die Groß-\/Kleinschreibung identisch mit einem bekannten Tag.\n+doclet.UnknownTag=Unbekanntes Tag. Nicht registriertes benutzerdefiniertes Tag?\n+doclet.UnknownTagWithHint=Unbekanntes Tag. @{0} falsch eingegeben oder nicht registriertes benutzerdefiniertes Tag?\n@@ -206,0 +206,1 @@\n+doclet.Restricted=Eingeschränkt.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets_de.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -110,2 +110,2 @@\n-doclet.UnknownTag={0}は不明なタグです。\n-doclet.UnknownTagLowercase={0}は不明なタグです。大文字と小文字の区別を除いては既知のタグと同じです。\n+doclet.UnknownTag=不明なタグ。未登録のカスタム・タグ?\n+doclet.UnknownTagWithHint=不明なタグ。入力ミスによる@{0}または未登録のカスタム・タグ?\n@@ -206,0 +206,1 @@\n+doclet.Restricted=制限付き。\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets_ja.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -110,2 +110,2 @@\n-doclet.UnknownTag={0}是未知标记。\n-doclet.UnknownTagLowercase={0}是未知标记 - 除了大小写之外其他方面与已知标记相同。\n+doclet.UnknownTag=未知标记。已注销的定制标记？\n+doclet.UnknownTagWithHint=未知标记。@{0} 键入有误或为已注销的定制标记？\n@@ -206,0 +206,1 @@\n+doclet.Restricted=受限制。\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets_zh_CN.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,0 +87,2 @@\n+dc.unknown.javadoc.tag = Unbekanntes Tag. Nicht registriertes benutzerdefiniertes Tag?\n+dc.unknown.javadoc.tag.with.hint = Unbekanntes Tag. @{0} falsch eingegeben oder nicht registriertes benutzerdefiniertes Tag?\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/resources\/doclint_de.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,0 +87,2 @@\n+dc.unknown.javadoc.tag = 不明なタグ。未登録のカスタム・タグ?\n+dc.unknown.javadoc.tag.with.hint = 不明なタグ。入力ミスによる@{0}または未登録のカスタム・タグ?\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/resources\/doclint_ja.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,0 +87,2 @@\n+dc.unknown.javadoc.tag = 未知标记。已注销的定制标记？\n+dc.unknown.javadoc.tag.with.hint = 未知标记。@{0} 键入有误或为已注销的定制标记？\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/resources\/doclint_zh_CN.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-error.tool.failed.with.output=Error: \"{0}\" failed with following output:\n+error.tool.failed.with.output=Fehler: \"{0}\" nicht erfolgreich mit folgender Ausgabe:\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-error.tool.failed.with.output=Error: \"{0}\" failed with following output:\n+error.tool.failed.with.output=エラー: \"{0}\"は次の出力で失敗しました:\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-error.tool.failed.with.output=Error: \"{0}\" failed with following output:\n+error.tool.failed.with.output=错误：\"{0}\" 失败，显示以下输出：\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-MSG_Help_mac_launcher=\\  --mac-package-identifier <ID-Zeichenfolge>\\n          Eine ID, die die Anwendung für macOS eindeutig identifiziert\\n          Standardwert ist der Hauptklassenname.\\n          Es dürfen nur alphanumerische Zeichen (A-Z, a-z, 0-9), Bindestriche (-)\\n          und Punkte (.) verwendet werden.\\n  --mac-package-name <Namenszeichenfolge>\\n          Name der Anwendung, wie in der Menüleiste angezeigt\\n          Dieser kann vom Anwendungsnamen abweichen.\\n          Er darf maximal 15 Zeichen enthalten und muss für die Anzeige\\n          in der Menüleiste und im Infofenster der Anwendung geeignet sein.\\n          Standardwert: Anwendungsname.\\n  --mac-package-signing-prefix <Präfixzeichenfolge>\\n          Beim Signieren des Anwendungspackages wird dieser Wert\\n          allen zu signierenden Komponenten ohne vorhandene\\n          Package-ID als Präfix vorangestellt.\\n  --mac-sign\\n          Anforderung zum Signieren des Packages oder des vordefinierten\\nAnwendungsimages\\n  --mac-signing-keychain <Schlüsselbundname>\\n          Name des Schlüsselbundes für die Suche nach der Signaturidentität\\n          Bei fehlender Angabe werden die Standardschlüsselbunde verwendet.\\n  --mac-signing-key-user-name <Teamname>\\n          Team- oder Benutzernamensteil der Apple-Signaturidentitäten.\\n  --mac-app-store\\n          Gibt an, dass die jpackage-Ausgabe für den\\n          Mac App Store bestimmt ist.\\n  --mac-entitlements <Dateipfad>\\n          Pfad zu einer Datei mit Berechtigungen, die beim Signieren\\n          von ausführbaren Dateien und Librarys im Bundle verwendet werden sollen.\\n  --mac-app-category <Kategoriezeichenfolge>\\n          Zeichenfolge für das Erstellen von LSApplicationCategoryType in\\n          Anwendungs-plist. Standardwert: \"utilities\".\\n\n+MSG_Help_mac_launcher=\\  --mac-package-identifier <ID-Zeichenfolge>\\n          Eine ID, die die Anwendung für macOS eindeutig identifiziert\\n          Standardwert ist der Hauptklassenname.\\n          Es dürfen nur alphanumerische Zeichen (A-Z, a-z, 0-9), Bindestriche (-)\\n          und Punkte (.) verwendet werden.\\n  --mac-package-name <Namenszeichenfolge>\\n          Name der Anwendung, wie in der Menüleiste angezeigt\\n          Dieser kann vom Anwendungsnamen abweichen.\\n          Er darf maximal 15 Zeichen enthalten und muss für die Anzeige\\n          in der Menüleiste und im Infofenster der Anwendung geeignet sein.\\n          Standardwert: Anwendungsname.\\n  --mac-package-signing-prefix <Präfixzeichenfolge>\\n          Beim Signieren des Anwendungspackages wird dieser Wert\\n          allen zu signierenden Komponenten ohne vorhandene\\n          Package-ID als Präfix vorangestellt.\\n  --mac-sign\\n          Anforderung zum Signieren des Packages oder des vordefinierten\\nAnwendungsimages\\n  --mac-signing-keychain <Schlüsselbundname>\\n          Name des Schlüsselbundes für die Suche nach der Signaturidentität\\n          Bei fehlender Angabe werden die Standardschlüsselbunde verwendet.\\n  --mac-signing-key-user-name <Teamname>\\n          Team- oder Benutzernamensteil der Apple-Signaturidentitäten. Um direkt zu steuern,\\n          welche Signaturidentität zum Signieren eines Anwendungsimages oder\\n          Installationsprogramms verwendet wird, verwenden Sie --mac-app-image-sign-identity und\/oder\\n          --mac-installer-sign-identity. Diese Option kann nicht mit\\n          --mac-app-image-sign-identity oder --mac-installer-sign-identity kombiniert werden.\\n  --mac-app-image-sign-identity <identity>\\n          Zum Signieren des Anwendungsimages verwendete Identität. Dieser Wert wird\\n          direkt an die Option --sign des Tools \"codesign\" übergeben. Diese Option kann nicht\\n          mit --mac-signing-key-user-name kombiniert werden.\\n  --mac-installer-sign-identity <identity>\\n          Zum Signieren des Installationsprogramms \"pkg\" verwendete Identität. Dieser Wert wird\\n          direkt an die Option --sign des Tools \"productbuild\" übergeben. Diese Option\\n          kann nicht mit --mac-signing-key-user-name kombiniert werden.\\n  --mac-app-store\\n          Gibt an, dass die jpackage-Ausgabe für den\\n          Mac App Store bestimmt ist.\\n  --mac-entitlements <Dateipfad>\\n          Pfad zu einer Datei mit Berechtigungen, die beim Signieren\\n          von ausführbaren Dateien und Librarys im Bundle verwendet werden sollen.\\n  --mac-app-category <Kategoriezeichenfolge>\\n          Zeichenfolge für das Erstellen von LSApplicationCategoryType in\\n          Anwendungs-plist. Standardwert: \"utilities\".\\n\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources_de.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,2 @@\n-MSG_Help_mac_launcher=\\  --mac-package-identifier <ID string>\\n          macOSのアプリケーションを一意に識別するID\\n          メイン・クラス名にデフォルト設定されています。\\n          英数字(A-Z、a-z、0-9)、ハイフン(-)およびピリオド(.)文字のみ\\n          使用できます。\\n  --mac-package-name <name string>\\n          メニュー・バーに表示されるアプリケーションの名前\\n          アプリケーション名とは異なります。\\n          この名前は16文字未満にする必要があり、メニュー・バーおよびアプリケーション情報ウィンドウに\\n          表示するのに適している必要があります。\\n          アプリケーション名にデフォルト設定されています。\\n  --mac-package-signing-prefix <prefix string>\\n          アプリケーション・パッケージに署名する際、\\n          既存のパッケージIDのない署名が必要なすべてのコンポーネントに、\\n          この値が接頭辞として付けられます。\\n  --mac-sign\\n          パッケージまたは事前定義済みアプリケーション・イメージに署名するよう\\n          リクエストします。\\n  --mac-signing-keychain <keychain name>\\n          署名アイデンティティを検索するキーチェーンの名前\\n          指定しなかった場合、標準のキーチェーンが使用されます。\\n  --mac-signing-key-user-name <team name>\\n          Apple署名アイデンティティのチームまたはユーザー名部分。\\n  --mac-app-store\\n          jpackage出力がMac App Store用であること\\n          を示します。\\n  --mac-entitlements <file path>\\n          バンドルの実行可能ファイルおよびライブラリの署名時に\\n          使用する権限を含むファイルのパス。\\n  --mac-app-category <category string>\\n          アプリケーションのplistのLSApplicationCategoryTypeを生成する際に使用する文字列。\\n          デフォルト値は\"utilities\"です。\\n\n+MSG_Help_mac_launcher=\\  --mac-package-identifier <ID string>\\n          macOSのアプリケーションを一意に識別するID\\n          メイン・クラス名にデフォルト設定されています。\\n          英数字(A-Z、a-z、0-9)、ハイフン(-)およびピリオド(.)文字のみ\\n          使用できます。\\n  --mac-package-name <name string>\\n          メニュー・バーに表示されるアプリケーションの名前\\n          アプリケーション名とは異なります。\\n          この名前は16文字未満にする必要があり、メニュー・バーおよびアプリケーション情報ウィンドウに\\n          表示するのに適している必要があります。\\n          アプリケーション名にデフォルト設定されています。\\n  --mac-package-signing-prefix <prefix string>\\n          アプリケーション・パッケージに署名する際、\\n          既存のパッケージIDのない署名が必要なすべてのコンポーネントに、\\n          この値が接頭辞として付けられます。\\n  --mac-sign\\n          パッケージまたは事前定義済アプリケーション・イメージに署名するよう\\n          リクエストします。\\n  --mac-signing-keychain <keychain name>\\n          署名アイデンティティを検索するキーチェーンの名前\\n          指定しなかった場合、標準のキーチェーンが使用されます。\\n  --mac-signing-key-user-name <team name>\\n          Apple署名アイデンティティのチームまたはユーザー名部分。\\n          アプリケーション・イメージまたはインストーラの署名に使用する署名アイデンティティの\\n          直接制御には、--mac-app-image-sign-identityまたは\\n          --mac-installer-sign-identity(あるいは両方)を使用します。このオプションは\\n          --mac-app-image-sign-identityまたは--mac-installer-sign-identityと組み合せることはできません。\\n  --mac-app-image-sign-identity <identity>\\n          アプリケーション・イメージの署名に使用するアイデンティティ。この値は直接\\n          \"codesign\"ツールの--signオプションに渡されます。このオプションは\\n          \\\n+--mac-signing-key-user-nameと組み合せることはできません。\\n  --mac-installer-sign-identity <identity>\\n          \"pkg\"インストーラの署名に使用するアイデンティティ。この値は直接\\n          \"productbuild\"ツールの--signオプションに渡されます。このオプションは\\n          --mac-signing-key-user-nameと組み合せることはできません。\\n  --mac-app-store\\n          jpackage出力がMac App Store用であること\\n          を示します。\\n  --mac-entitlements <file path>\\n          バンドルの実行可能ファイルおよびライブラリの署名時に\\n          使用する権限を含むファイルのパス。\\n  --mac-app-category <category string>\\n          アプリケーションのplistのLSApplicationCategoryTypeを生成する際に使用する文字列。\\n          デフォルト値は\"utilities\"です。\\n\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources_ja.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-MSG_Help_mac_launcher=\\  --mac-package-identifier <ID string>\\n          用来唯一地标识 macOS 应用程序的标识符\\n          默认为主类名称。\\n          只能使用字母数字 (A-Z,a-z,0-9)、连字符 (-) 和\\n          句点 (.) 字符。\\n  --mac-package-name <name string>\\n          出现在菜单栏中的应用程序名称\\n          这可以与应用程序名称不同。\\n          此名称的长度必须小于 16 个字符，适合\\n          显示在菜单栏中和应用程序“信息”窗口中。\\n          默认为应用程序名称。\\n  --mac-package-signing-prefix <prefix string>\\n          在对应用程序包签名时，会在所有需要签名\\n          但当前没有程序包标识符的组件的\\n          前面加上此值。\\n  --mac-sign\\n          请求对程序包或预定义的应用程序映像\\n          进行签名。\\n  --mac-signing-keychain <keychain name>\\n          要用来搜索签名身份的密钥链的名称\\n          如果未指定，则使用标准的密钥链。\\n  --mac-signing-key-user-name <team name>\\n          Apple 签名身份的团队或用户名称部分。\\n  --mac-app-store\\n          指示 jpackage 输出面向\\n          Mac App Store。\\n  --mac-entitlements <file path>\\n          包含一些权利的文件的路径，在对捆绑包中的可执行文件\\n          和库进行签名时会使用这些权利。\\n  --mac-app-category <category string>\\n          用于构造应用程序 plist 中 LSApplicationCategoryType 的\\n          字符串。默认值为 \"utilities\"。\\n\n+MSG_Help_mac_launcher=\\  --mac-package-identifier <ID string>\\n          用来唯一地标识 macOS 应用程序的标识符\\n          默认为主类名称。\\n          只能使用字母数字 (A-Z,a-z,0-9)、连字符 (-) 和\\n          句点 (.) 字符。\\n  --mac-package-name <name string>\\n          出现在菜单栏中的应用程序名称\\n          这可以与应用程序名称不同。\\n          此名称的长度必须小于 16 个字符，适合\\n          显示在菜单栏中和应用程序“信息”窗口中。\\n          默认为应用程序名称。\\n  --mac-package-signing-prefix <prefix string>\\n          在对应用程序包签名时，会在所有需要签名\\n          但当前没有程序包标识符的组件的\\n          前面加上此值。\\n  --mac-sign\\n          请求对程序包或预定义的应用程序映像\\n          进行签名。\\n  --mac-signing-keychain <keychain name>\\n          要用来搜索签名身份的密钥链的名称\\n          如果未指定，则使用标准的密钥链。\\n  --mac-signing-key-user-name <team name>\\n          Apple 签名身份的团队或用户名称部分。为了直接\\n          控制用于对应用程序映像或安装程序进行签名的\\n          签名身份，请使用 --mac-app-image-sign-identity 和\/或\\n          --mac-installer-sign-identity。此选项不能与\\n          --mac-app-image-sign-identity 或 --mac-installer-sign-identity 结合使用。\\n  --mac-app-image-sign-identity <identity>\\n          用于对应用程序映像进行签名的身份。此值将直接\\n          传递至 \"codesign\" 工具的 --sign 选项。此选项不能\\n          与 --mac-signing-key-user-name 结合使用。\\n  --mac-installer-sign-identity <identity>\\n          用于对 \"pkg\" 安装程序进行签名的身份。此值将直接\\n          传递至 \"productbuild\" 工具的 --sign 选项。此选项不能\\n          与 --mac-signing-key-user-name 结合使用。\\n  --mac-app-store\\n          指示 jpackage 输出面向\\n          Mac App Store。\\n  --mac-entitlements <file path>\\n          包含一些权利的文件的路径，在对捆绑包中的可执行文件\\n          和库进行签名时会使用这些权利。\\n  --mac-app-category <category string>\\n          用于构造应用程序 plist 中 LSApplicationCategoryType 的\\n          字符串。默认值为 \"utilities\"。\\n\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources_zh_CN.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-ERR_MutuallyExclusiveOptions=\"Fehler: Optionen [{0}] und [{1}] schließen sich gegenseitig aus\n+ERR_MutuallyExclusiveOptions=Fehler: Optionen [{0}] und [{1}] schließen sich gegenseitig aus\n@@ -98,1 +98,1 @@\n-ERR_MissingRequiredArgument=Error: {0} argument requires at least one of [{1}] argument(s)\n+ERR_MissingRequiredArgument=Fehler: Für das Argument {0} ist mindestens eines der folgenden Argumente erforderlich: [{1}]\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_de.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-ERR_MutuallyExclusiveOptions=\"エラー: 相互排他的なオプション[{0}]と[{1}]\n+ERR_MutuallyExclusiveOptions=エラー: 相互排他的なオプション[{0}]と[{1}]\n@@ -98,1 +98,1 @@\n-ERR_MissingRequiredArgument=Error: {0} argument requires at least one of [{1}] argument(s)\n+ERR_MissingRequiredArgument=エラー: {0}引数には少なくとも1つの[{1}]引数が必要です\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_ja.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-ERR_MutuallyExclusiveOptions=\"错误：选项 [{0}] 和 [{1}] 相互排斥\n+ERR_MutuallyExclusiveOptions=错误：选项 [{0}] 和 [{1}] 相互排斥\n@@ -98,1 +98,1 @@\n-ERR_MissingRequiredArgument=Error: {0} argument requires at least one of [{1}] argument(s)\n+ERR_MissingRequiredArgument=错误：{0} 参数至少需要 [{1}] 参数之一\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_zh_CN.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-error.unlock-resource=Failed to unlock: {0}\n+error.unlock-resource=Aufheben der Sperre nicht erfolgreich: {0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-error.unlock-resource=Failed to unlock: {0}\n+error.unlock-resource=ロック解除に失敗しました: {0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-error.unlock-resource=Failed to unlock: {0}\n+error.unlock-resource=无法解锁：{0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}