{"files":[{"patch":"@@ -1039,1 +1039,3 @@\n-  bool mismatched_ms = from_ms->get_con() && !is_mask && arr_type != nullptr && arr_type->elem()->array_element_basic_type() != elem_bt;\n+  bool mismatched_ms = LITTLE_ENDIAN_ONLY(false)\n+      BIG_ENDIAN_ONLY(from_ms->get_con() && !is_mask && arr_type != nullptr &&\n+                      arr_type->elem()->array_element_basic_type() != elem_bt);\n@@ -1041,0 +1043,6 @@\n+  if (!is_java_primitive(mem_elem_bt)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** non-primitive array element type\");\n+    }\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+\/*\n+ * @test\n+ * @bug 8329555\n+ * @modules jdk.incubator.vector\n+ *\n+ * @run main\/othervm -Xbatch -XX:+TieredCompilation compiler.vectorapi.TestBiMorphicMismatchedMemSegment\n+ *\/\n+\n+\n+import jdk.incubator.vector.ByteVector;\n+\n+import java.lang.foreign.MemorySegment;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.IntStream;\n+\n+public class TestBiMorphicMismatchedMemSegment {\n+    public static void main(String[] args) {\n+        AtomicLong aLong = new AtomicLong();\n+\n+        IntStream.range(0, 10000).forEach(j -> {\n+            byte[] bytes = new byte[64];\n+            ThreadLocalRandom.current().nextBytes(bytes);\n+            var byteSegment = MemorySegment.ofArray(bytes);\n+            var byteFragment = ByteVector.SPECIES_PREFERRED.fromMemorySegment(byteSegment, 0, ByteOrder.LITTLE_ENDIAN);\n+            float[] floats = new float[128];\n+            byte[] targetBytes = new byte[512];\n+            var floatSegment = MemorySegment.ofArray(floats);\n+            var targetByteSegment = MemorySegment.ofArray(targetBytes);\n+            byteFragment.intoMemorySegment(floatSegment, ThreadLocalRandom.current().nextInt(0, 448), ByteOrder.LITTLE_ENDIAN);\n+            byteFragment.intoMemorySegment(targetByteSegment, ThreadLocalRandom.current().nextInt(0, 448), ByteOrder.LITTLE_ENDIAN);\n+            var l = 0;\n+            for (int i = 0; i < floats.length; i++) {\n+                l += (int) floats[i];\n+            }\n+            aLong.addAndGet(l);\n+        });\n+\n+        System.out.println(aLong.get());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestBiMorphicMismatchedMemSegment.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}