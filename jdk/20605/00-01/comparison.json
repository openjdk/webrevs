{"files":[{"patch":"@@ -38,0 +38,1 @@\n+#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -250,0 +251,1 @@\n+  GCForwarding::initialize_flags(heap_reserved_size_bytes());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -130,0 +131,1 @@\n+  GCForwarding::initialize_flags(heap_reserved_size_bytes());\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelArguments.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -30,0 +31,5 @@\n+void SerialArguments::initialize_heap_flags_and_sizes() {\n+  GenArguments::initialize_heap_flags_and_sizes();\n+  GCForwarding::initialize_flags(MaxNewSize + MaxOldSize);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/serialArguments.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+  void initialize_heap_flags_and_sizes();\n","filename":"src\/hotspot\/share\/gc\/serial\/serialArguments.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -64,1 +63,0 @@\n-  GCForwarding::initialize_flags();\n","filename":"src\/hotspot\/share\/gc\/shared\/gcArguments.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-void GCForwarding::initialize_flags() {\n+void GCForwarding::initialize_flags(size_t max_heap_size) {\n+#ifdef _LP64\n@@ -38,3 +39,3 @@\n-  \/\/ size_t max_narrow_heap_size = (size_t(1) << (NUM_LOW_BITS_NARROW - SHIFT)) * HeapWordSize;\n-  \/\/ if (UseCompactObjectHeaders && MaxHeapSize >= max_narrow_heap_size) {\n-  \/\/  FLAG_SET_DEFAULT(UseCompactObjectHeaders, false);\n+  \/\/ size_t max_narrow_heap_size = right_n_bits(NumLowBitsNarrow - Shift);\n+  \/\/ if (UseCompactObjectHeaders && max_heap_size > max_narrow_heap_size * HeapWordSize) {\n+  \/\/   FLAG_SET_DEFAULT(UseCompactObjectHeaders, false);\n@@ -42,0 +43,1 @@\n+#endif\n@@ -47,2 +49,2 @@\n-  if (heap.word_size() <= right_n_bits(NUM_LOW_BITS_NARROW - SHIFT)) {\n-    _num_low_bits = NUM_LOW_BITS_NARROW;\n+  if (heap.word_size() <= right_n_bits(NumLowBitsNarrow - Shift)) {\n+    _num_low_bits = NumLowBitsNarrow;\n@@ -51,1 +53,1 @@\n-    _num_low_bits = NUM_LOW_BITS_WIDE;\n+    _num_low_bits = NumLowBitsWide;\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,0 +33,8 @@\n+\/*\n+ * Implements forwarding for the full-GCs of Serial, Parallel, G1 and Shenandoan in\n+ * a way that preserves upper N bits of object mark-words, which contain crucial\n+ * Klass* information when running with compact headers. The encoding is similar to\n+ * compressed-oops encoding: it basically subtracts the forwardee address from the\n+ * heap-base, shifts that difference into the right place, and sets the lowest two\n+ * bits (to indicate 'forwarded' state as usual).\n+ *\/\n@@ -35,3 +43,3 @@\n-  static const int NUM_LOW_BITS_NARROW = BitsPerWord - NumKlassBits;\n-  static const int NUM_LOW_BITS_WIDE   = BitsPerWord;\n-  static const int SHIFT = markWord::lock_bits + markWord::lock_shift;\n+  static const int NumLowBitsNarrow = BitsPerWord - NumKlassBits;\n+  static const int NumLowBitsWide   = BitsPerWord;\n+  static const int Shift = markWord::lock_bits + markWord::lock_shift;\n@@ -42,1 +50,1 @@\n-  static void initialize_flags();\n+  static void initialize_flags(size_t max_heap_size);\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.hpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-  uintptr_t encoded = pointer_delta(cast_from_oop<HeapWord*>(to), _heap_base) << SHIFT;\n+  uintptr_t encoded = pointer_delta(cast_from_oop<HeapWord*>(to), _heap_base) << Shift;\n@@ -48,1 +48,1 @@\n-  HeapWord* decoded = _heap_base + ((mark & right_n_bits(_num_low_bits)) >> SHIFT);\n+  HeapWord* decoded = _heap_base + ((mark & right_n_bits(_num_low_bits)) >> Shift);\n@@ -56,1 +56,1 @@\n-  return obj->mark().is_marked();\n+  return obj->mark().is_forwarded();\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -201,0 +202,5 @@\n+void ShenandoahArguments::initialize_heap_flags_and_sizes() {\n+  GCArguments::initialize_heap_flags_and_sizes();\n+  GCForwarding::initialize_flags(MaxHeapSize);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+  virtual void initialize_heap_flags_and_sizes();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}