{"files":[{"patch":"@@ -500,6 +500,1 @@\n-void JfrCheckpointManager::begin_epoch_shift() {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"invariant\");\n-  JfrTraceIdEpoch::begin_epoch_shift();\n-}\n-\n-void JfrCheckpointManager::end_epoch_shift() {\n+void JfrCheckpointManager::shift_epoch() {\n@@ -508,1 +503,1 @@\n-  JfrTraceIdEpoch::end_epoch_shift();\n+  JfrTraceIdEpoch::shift_epoch();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -99,2 +99,1 @@\n-  void begin_epoch_shift();\n-  void end_epoch_shift();\n+  void shift_epoch();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * When the epoch value is stored in a thread object,\n+ * When the epoch value is stored in a vthread object,\n@@ -42,1 +42,0 @@\n-bool JfrTraceIdEpoch::_synchronizing = false;\n@@ -46,1 +45,1 @@\n-void JfrTraceIdEpoch::begin_epoch_shift() {\n+void JfrTraceIdEpoch::shift_epoch() {\n@@ -48,7 +47,0 @@\n-  _synchronizing = true;\n-  OrderAccess::fence();\n-}\n-\n-void JfrTraceIdEpoch::end_epoch_shift() {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"invariant\");\n-  assert(_synchronizing, \"invariant\");\n@@ -56,2 +48,1 @@\n-  ++_generation;\n-  if (epoch_generation_overflow == _generation) {\n+  if (++_generation == epoch_generation_overflow) {\n@@ -62,6 +53,0 @@\n-  OrderAccess::storestore();\n-  _synchronizing = false;\n-}\n-\n-bool JfrTraceIdEpoch::is_synchronizing() {\n-  return Atomic::load_acquire(&_synchronizing);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdEpoch.cpp","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"jfr\/utilities\/jfrTypes.hpp\"\n@@ -44,10 +43,11 @@\n- \/\/ Epoch alternation on each rotation allow for concurrent tagging.\n- \/\/ The epoch shift happens only during a safepoint.\n- \/\/\n- \/\/ _synchronizing is a transition state, the purpose of which is to\n- \/\/ have JavaThreads that run _thread_in_native (i.e. Compiler threads)\n- \/\/ respect the current epoch shift in-progress during the safepoint.\n- \/\/\n- \/\/ _changed_tag_state == true signals an incremental modification to artifact tagging\n- \/\/ (klasses, methods, CLDs, etc), purpose of which is to trigger collection of artifacts.\n- \/\/\n+\/*\n+ * An epoch shift or alternation on each rotation enables concurrent tagging.\n+ * The epoch shift happens only during a safepoint.\n+ *\n+ *   _generation - mainly used with virtual threads\n+ *   _tag_state  - signals an incremental modification to artifact tagging (klasses, methods, CLDs, etc)\n+ *                   purpose of which is to trigger a collection of artifacts.\n+ *   _method_tracer_state - a special notification state only used with method timing and tracing.\n+ *   _epoch_state - the fundamental binary epoch state that shifts on each rotation during a safepoint.\n+ *\/\n+\n@@ -61,1 +61,0 @@\n-  static bool _synchronizing;\n@@ -63,2 +62,1 @@\n-  static void begin_epoch_shift();\n-  static void end_epoch_shift();\n+  static void shift_epoch();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdEpoch.hpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -487,1 +487,0 @@\n-  _checkpoint_manager.begin_epoch_shift();\n@@ -493,1 +492,1 @@\n-  _checkpoint_manager.end_epoch_shift();\n+  _checkpoint_manager.shift_epoch();\n@@ -596,1 +595,0 @@\n-  _checkpoint_manager.begin_epoch_shift();\n@@ -603,1 +601,1 @@\n-  _checkpoint_manager.end_epoch_shift();\n+  _checkpoint_manager.shift_epoch();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,2 +47,0 @@\n-static unsigned short generation = 0;\n-\n@@ -284,1 +282,0 @@\n-  assert(!JfrTraceIdEpoch::is_synchronizing(), \"invariant\");\n@@ -288,1 +285,1 @@\n-  mirror->short_field_put(generation_offset, generation++);\n+  mirror->short_field_put(generation_offset, JfrTraceIdEpoch::epoch_generation());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    \/* string pool generation (0-65535) set by the JVM on epoch shift. Not private to avoid being optimized away. *\/\n+    \/* The string pool epoch generation is the range [1-32767] set by the JVM on epoch shift. Not private to avoid being optimized away. *\/\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/StringPool.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}