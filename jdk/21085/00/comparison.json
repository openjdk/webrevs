{"files":[{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.Toolkit;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.util.concurrent.CountDownLatch;\n+\n+import jdk.test.lib.Platform;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+\/*\n+ * @test\n+ * @bug 4724007\n+ * @key headful\n+ * @summary Tests that KeyTyped events are fired for the Numpad1 key\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @run main Numpad1KeyTyped\n+ *\/\n+public final class Numpad1KeyTyped extends FocusAdapter implements KeyListener {\n+\n+    private static final String ORIGINAL = \"0123456789\";\n+    private static final String EXPECTED = \"10123456789\";\n+\n+    private final CountDownLatch typedNum1 = new CountDownLatch(1);\n+    private final CountDownLatch focusGained = new CountDownLatch(1);\n+\n+    public static void main(String[] args) throws Exception {\n+        Numpad1KeyTyped test = new Numpad1KeyTyped();\n+        test.start();\n+    }\n+\n+    private void start() throws Exception {\n+        Toolkit toolkit = Toolkit.getDefaultToolkit();\n+        Boolean oldState = null;\n+\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+\n+        Frame frame = new Frame(\"Numpad1KeyTyped\");\n+        TextField tf = new TextField(ORIGINAL, 20);\n+        frame.add(tf);\n+        tf.addKeyListener(this);\n+\n+        tf.addFocusListener(this);\n+\n+        frame.setSize(300, 100);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        tf.requestFocusInWindow();\n+\n+        if (!focusGained.await(2, SECONDS)) {\n+            throw new RuntimeException(\"TextField didn't receive focus\");\n+        }\n+        robot.waitForIdle();\n+\n+        try {\n+            \/\/ Move cursor to start of TextField\n+            robot.keyPress(KeyEvent.VK_HOME);\n+            robot.keyRelease(KeyEvent.VK_HOME);\n+            robot.waitForIdle();\n+\n+            if (Platform.isLinux()) {\n+                \/\/ Press but don't release NumLock\n+                robot.keyPress(KeyEvent.VK_NUM_LOCK);\n+            }\n+            if (Platform.isWindows()) {\n+                oldState = toolkit.getLockingKeyState(KeyEvent.VK_NUM_LOCK);\n+                toolkit.setLockingKeyState(KeyEvent.VK_NUM_LOCK, true);\n+            }\n+\n+            \/\/ Press and release Numpad-1\n+            robot.keyPress(KeyEvent.VK_NUMPAD1);\n+            robot.keyRelease(KeyEvent.VK_NUMPAD1);\n+\n+            if (!typedNum1.await(2, SECONDS)) {\n+                throw new RuntimeException(\"TextField didn't receive keyTyped('1') - too slow\");\n+            }\n+\n+            final String text = tf.getText();\n+            if (!text.equals(EXPECTED)) {\n+                throw new RuntimeException(\"Test FAILED: wrong string '\"\n+                                           + text + \"' vs \"\n+                                           + \"expected '\" + EXPECTED + \"'\");\n+            }\n+            System.out.println(\"Test PASSED\");\n+        } finally {\n+            if (Platform.isLinux()) {\n+                \/\/ \"release\" + \"press and release\" NumLock to disable numlock\n+                robot.keyRelease(KeyEvent.VK_NUM_LOCK);\n+                robot.keyPress(KeyEvent.VK_NUM_LOCK);\n+                robot.keyRelease(KeyEvent.VK_NUM_LOCK);\n+            }\n+            if (oldState != null) {\n+                toolkit.setLockingKeyState(KeyEvent.VK_NUM_LOCK, oldState);\n+            }\n+\n+            frame.dispose();\n+        }\n+    }\n+\n+    @Override\n+    public void focusGained(FocusEvent e) {\n+        System.out.println(\"tf.focusGained\");\n+        focusGained.countDown();\n+    }\n+\n+    @Override\n+    public void keyPressed(KeyEvent evt) {\n+        printKey(evt);\n+    }\n+\n+    @Override\n+    public void keyTyped(KeyEvent evt) {\n+        printKey(evt);\n+\n+        int keychar = evt.getKeyChar();\n+        if (keychar == '1') {\n+            typedNum1.countDown();\n+        }\n+    }\n+\n+    @Override\n+    public void keyReleased(KeyEvent evt) {\n+        printKey(evt);\n+        System.out.println();\n+    }\n+\n+    private static void printKey(KeyEvent evt) {\n+        int id = evt.getID();\n+        if (id != KeyEvent.KEY_TYPED\n+            && id != KeyEvent.KEY_PRESSED\n+            && id != KeyEvent.KEY_RELEASED) {\n+\n+            System.out.println(\"Other Event\");\n+            return;\n+        }\n+\n+        System.out.println(\"params= \" + evt.paramString() + \"  \\n\" +\n+          \"KeyChar: \" + evt.getKeyChar() + \" = \" + (int) evt.getKeyChar() +\n+          \"   KeyCode: \" + evt.getKeyCode() +\n+          \"   Modifiers: \" + evt.getModifiersEx());\n+\n+        if (evt.isActionKey()) {\n+            System.out.println(\"   Action Key\");\n+        }\n+\n+        System.out.println(\"keyText= \" + KeyEvent.getKeyText(evt.getKeyCode()) + \"\\n\");\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyTyped\/Numpad1KeyTyped.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"}]}