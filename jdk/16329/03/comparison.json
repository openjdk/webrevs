{"files":[{"patch":"@@ -428,1 +428,1 @@\n-    CFLAGS_OS_DEF_JVM=\"-DLINUX\"\n+    CFLAGS_OS_DEF_JVM=\"-DLINUX -D_FILE_OFFSET_BITS=64\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,0 +187,2 @@\n+  static_assert(sizeof(off_t) == 8, \"Expected Large File Support in this file\");\n+\n@@ -449,1 +451,1 @@\n-  struct stat64 st;\n+  struct stat st;\n@@ -456,1 +458,1 @@\n-  RESTARTABLE(::stat64(fn, &st), ret);\n+  RESTARTABLE(::stat(fn, &st), ret);\n@@ -476,2 +478,2 @@\n-  struct stat64 st;\n-  ret = stat64(LinuxAttachListener::path(), &st);\n+  struct stat st;\n+  ret = stat(LinuxAttachListener::path(), &st);\n@@ -516,1 +518,1 @@\n-  struct stat64 st;\n+  struct stat st;\n@@ -518,1 +520,1 @@\n-  RESTARTABLE(::stat64(fn, &st), ret);\n+  RESTARTABLE(::stat(fn, &st), ret);\n@@ -523,1 +525,1 @@\n-    RESTARTABLE(::stat64(fn, &st), ret);\n+    RESTARTABLE(::stat(fn, &st), ret);\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2756,0 +2756,2 @@\n+  static_assert(sizeof(off_t) == 8, \"Expected Large File Support in this file\");\n+\n@@ -4250,1 +4252,1 @@\n-  return ::sendfile64(out_fd, in_fd, (off64_t*)offset, (size_t)count);\n+  return ::sendfile(out_fd, in_fd, (off_t*)offset, (size_t)count);\n@@ -4928,1 +4930,1 @@\n-  int fd = ::open64(path, oflag, mode);\n+  int fd = ::open(path, oflag, mode);\n@@ -4933,3 +4935,3 @@\n-    struct stat64 buf64;\n-    int ret = ::fstat64(fd, &buf64);\n-    int st_mode = buf64.st_mode;\n+    struct stat buf;\n+    int ret = ::fstat(fd, &buf);\n+    int st_mode = buf.st_mode;\n@@ -4972,1 +4974,1 @@\n-  return ::open64(path, oflags, S_IREAD | S_IWRITE);\n+  return ::open(path, oflags, S_IREAD | S_IWRITE);\n@@ -4977,1 +4979,1 @@\n-  return (jlong)::lseek64(fd, (off64_t)0, SEEK_CUR);\n+  return (jlong)::lseek(fd, (off_t)0, SEEK_CUR);\n@@ -4982,1 +4984,1 @@\n-  return (jlong)::lseek64(fd, (off64_t)offset, SEEK_SET);\n+  return (jlong)::lseek(fd, (off_t)offset, SEEK_SET);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -289,0 +289,1 @@\n+  static_assert(sizeof(off_t) == 8, \"Expected Large File Support in this file\");\n@@ -759,1 +760,1 @@\n-  return (jlong) BSD_ONLY(::lseek) NOT_BSD(::lseek64)(fd, offset, whence);\n+  return (jlong) ::lseek(fd, offset, whence);\n@@ -763,1 +764,1 @@\n-   return BSD_ONLY(::ftruncate) NOT_BSD(::ftruncate64)(fd, length);\n+   return ::ftruncate(fd, length);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-\/\/ non-Posix functionality. For example, the use of lseek64 and ftruncate64.\n+\/\/ non-Posix functionality.\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}