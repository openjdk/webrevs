{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -490,1 +490,1 @@\n-                heapBase().map(hb -> \"heapBase: \" + hb).orElse(\"native\") +\n+                heapBase().map(hb -> \"heapBase: \" + hb).orElse(isMapped() ? \"mapped\" : \"native\") +\n@@ -493,4 +493,0 @@\n-                (sessionImpl() instanceof ConfinedSession ? \", confined\" : \"\") +\n-                (!sessionImpl().isAlive() ? \", not alive\" : \"\") +\n-                (isReadOnly() ? \", read-only\" : \"\") +\n-                (isMapped() ? \", mapped\" : \"\") +\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -263,1 +263,1 @@\n-            assertTrue(segment.toString().contains(\", mapped\"));\n+            assertTrue(segment.toString().contains(\"mapped\"));\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,21 +243,0 @@\n-\n-        assertFalse(s.contains(\", mapped\"));\n-        assertFalse(s.contains(\", not alive\"));\n-        var readOnlySegment = segment.asReadOnly();\n-        assertTrue(readOnlySegment.toString().contains(\", read-only\"));\n-    }\n-\n-    @Test\n-    public void testToString2() {\n-        MemorySegment segment;\n-        try (var arena = Arena.ofConfined()) {\n-            segment = arena.allocate(8);\n-            assertTrue(segment.toString().contains(\", confined\"));\n-            assertFalse(segment.toString().contains(\", not alive\"));\n-        }\n-        assertTrue(segment.toString().contains(\", not alive\"));\n-        try (var arena = Arena.ofShared()) {\n-            segment = arena.allocate(8);\n-            assertFalse(segment.toString().contains(\", confined\"));\n-            assertFalse(segment.toString().contains(\", not alive\"));\n-        }\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"}]}