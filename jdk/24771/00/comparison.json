{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1198,5 +1198,4 @@\n-    public synchronized PaintContext createContext(ColorModel cm, Rectangle r,\n-                                                   Rectangle2D r2d,\n-                                                   AffineTransform xform,\n-                                                   RenderingHints hints) {\n-        return new ColorPaintContext(getRGB(), cm);\n+    public PaintContext createContext(ColorModel cm, Rectangle r,\n+                                      Rectangle2D r2d, AffineTransform xform,\n+                                      RenderingHints hints) {\n+        return new ColorPaintContext(getRGB());\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Color.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-\n-\n@@ -33,1 +31,0 @@\n-import sun.awt.image.IntegerComponentRaster;\n@@ -36,3 +33,3 @@\n-class ColorPaintContext implements PaintContext {\n-    int color;\n-    WritableRaster savedTile;\n+import sun.awt.image.IntegerComponentRaster;\n+\n+final class ColorPaintContext implements PaintContext {\n@@ -40,1 +37,4 @@\n-    protected ColorPaintContext(int color, ColorModel cm) {\n+    private final int color;\n+    private volatile WritableRaster savedTile;\n+\n+    ColorPaintContext(int color) {\n@@ -44,0 +44,1 @@\n+    @Override\n@@ -47,16 +48,1 @@\n-    \/*\n-     * Returns the RGB value representing the color in the default sRGB\n-     * {@link ColorModel}.\n-     * (Bits 24-31 are alpha, 16-23 are red, 8-15 are green, 0-7 are\n-     * blue).\n-     * @return the RGB value of the color in the default sRGB\n-     *         {@code ColorModel}.\n-     * @see java.awt.image.ColorModel#getRGBdefault\n-     * @see #getRed\n-     * @see #getGreen\n-     * @see #getBlue\n-     *\/\n-    int getRGB() {\n-        return color;\n-    }\n-\n+    @Override\n@@ -67,1 +53,2 @@\n-    public synchronized Raster getRaster(int x, int y, int w, int h) {\n+    @Override\n+    public Raster getRaster(int x, int y, int w, int h) {\n@@ -74,2 +61,1 @@\n-            \/\/ Note - markDirty is probably unnecessary since icr is brand new\n-            icr.markDirty();\n+            \/\/ Note - icr.markDirty() is unnecessary since icr is brand new\n@@ -80,1 +66,0 @@\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/ColorPaintContext.java","additions":13,"deletions":28,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.HeadlessException;\n+import java.awt.Image;\n+import java.awt.Paint;\n+import java.awt.PaintContext;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorModel;\n+import java.awt.image.VolatileImage;\n+import java.util.function.Consumer;\n+\n+\/**\n+ * @test\n+ * @bug 8355078\n+ * @summary Checks if different image types (BufferedImage and VolatileImage)\n+ *          produce the same results when using different ways to fill the image\n+ *          (setColor, setPaint, and custom Paint)\n+ *\/\n+public final class ColorPaintContextBasicTest {\n+\n+    private static final int SIZE = 100;\n+\n+    private static final int[] TYPES = new int[]{\n+            BufferedImage.TYPE_INT_RGB,\n+            BufferedImage.TYPE_INT_ARGB,\n+            BufferedImage.TYPE_INT_ARGB_PRE,\n+            BufferedImage.TYPE_INT_BGR,\n+            BufferedImage.TYPE_3BYTE_BGR,\n+            BufferedImage.TYPE_4BYTE_ABGR,\n+            BufferedImage.TYPE_4BYTE_ABGR_PRE,\n+    };\n+\n+    private static final Color[] COLORS = {\n+            Color.RED,\n+            Color.GREEN,\n+            Color.BLUE,\n+            Color.YELLOW,\n+            Color.MAGENTA,\n+            Color.CYAN,\n+            Color.BLACK,\n+            Color.WHITE,\n+            new Color(255, 165, 0),\n+            new Color(128, 0, 128),\n+            new Color(255, 0, 0, 128)\n+    };\n+\n+    \/**\n+     * Custom implementation of Paint that wraps a Color but is intentionally\n+     * not a Color. This is used to bypass the \"paint instanceof Color\"\n+     * optimization in Graphics2D#setPaint().\n+     *\/\n+    private static final class CustomPaint implements Paint {\n+\n+        private final Color color;\n+\n+        private CustomPaint(Color color) {\n+            this.color = color;\n+        }\n+\n+        @Override\n+        public PaintContext createContext(ColorModel cm,\n+                                          Rectangle deviceBounds,\n+                                          Rectangle2D userBounds,\n+                                          AffineTransform xform,\n+                                          RenderingHints hints)\n+        {\n+            return color.createContext(cm, deviceBounds, userBounds, xform,\n+                                       hints);\n+        }\n+\n+        @Override\n+        public int getTransparency() {\n+            return color.getTransparency();\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        GraphicsConfiguration gc = null;\n+        try {\n+            gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                    .getDefaultScreenDevice()\n+                                    .getDefaultConfiguration();\n+        } catch (HeadlessException ignore) {\n+            \/\/ skip VolatileImage validation\n+        }\n+\n+        for (Color color : COLORS) {\n+            int rgb = color.getRGB();\n+            System.err.println(\"Test color: \" + Integer.toHexString(rgb));\n+            for (int type : TYPES) {\n+                var goldBI = new BufferedImage(SIZE, SIZE, type);\n+                var paintBI = new BufferedImage(SIZE, SIZE, type);\n+                var customBI = new BufferedImage(SIZE, SIZE, type);\n+\n+                fill(goldBI, g -> g.setColor(color));\n+                fill(paintBI, g -> g.setPaint(color));\n+                fill(customBI, g -> g.setPaint(new CustomPaint(color)));\n+\n+                if (!verify(paintBI, goldBI)) {\n+                    throw new RuntimeException(\"paintBI != goldBI\");\n+                }\n+\n+                if (!verify(customBI, goldBI)) {\n+                    throw new RuntimeException(\"customBI != goldBI\");\n+                }\n+\n+                if (gc == null) {\n+                    continue;\n+                }\n+\n+                int transparency = goldBI.getTransparency();\n+                var goldVI = fillVI(gc, transparency, g -> g.setColor(color));\n+                var paintVI = fillVI(gc, transparency, g -> g.setPaint(color));\n+                var customVI = fillVI(gc, transparency,\n+                                      g -> g.setPaint(new CustomPaint(color)));\n+\n+                if (gc.getColorModel().getPixelSize() >= 24) {\n+                    if (color.getAlpha() == 255 && !verify(goldBI, goldVI)) {\n+                        throw new RuntimeException(\"goldBI != goldVI\");\n+                    }\n+                }\n+\n+                if (!verify(paintVI, goldVI)) {\n+                    throw new RuntimeException(\"paintVI != goldVI\");\n+                }\n+\n+                if (!verify(customVI, goldVI)) {\n+                    throw new RuntimeException(\"customVI != goldVI\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void fill(Image img, Consumer<Graphics2D> action) {\n+        Graphics2D g2d = (Graphics2D) img.getGraphics();\n+        action.accept(g2d);\n+        g2d.fillRect(0, 0, SIZE, SIZE);\n+        g2d.dispose();\n+    }\n+\n+    private static BufferedImage fillVI(GraphicsConfiguration gc,\n+                                        int transparency,\n+                                        Consumer<Graphics2D> action)\n+    {\n+        var vi = gc.createCompatibleVolatileImage(SIZE, SIZE, transparency);\n+        int attempt = 0;\n+        while (true) {\n+            if (++attempt > 10) {\n+                throw new RuntimeException(\"Too many attempts: \" + attempt);\n+            }\n+\n+            int status = vi.validate(gc);\n+            if (status == VolatileImage.IMAGE_INCOMPATIBLE) {\n+                vi = gc.createCompatibleVolatileImage(SIZE, SIZE, transparency);\n+            }\n+\n+            fill(vi, action);\n+\n+            BufferedImage snapshot = vi.getSnapshot();\n+            if (vi.contentsLost()) {\n+                continue;\n+            }\n+            return snapshot;\n+        }\n+    }\n+\n+    private static boolean verify(BufferedImage img1, BufferedImage img2) {\n+        for (int y = 0; y < SIZE; y++) {\n+            for (int x = 0; x < SIZE; x++) {\n+                int rgb1 = img1.getRGB(x, y);\n+                int rgb2 = img2.getRGB(x, y);\n+                if (rgb1 != rgb2) {\n+                    System.err.println(\"rgb1: \" + Integer.toHexString(rgb1));\n+                    System.err.println(\"rgb2: \" + Integer.toHexString(rgb2));\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ColorClass\/PaintContext\/ColorPaintContextBasicTest.java","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.WritableRaster;\n+\n+import sun.awt.image.SurfaceManager;\n+import sun.java2d.StateTrackable;\n+import sun.java2d.SurfaceData;\n+\n+\/**\n+ * @test\n+ * @bug 8355078\n+ * @summary Checks that ColorPaintContext surface is STABLE and cacheable\n+ * @modules java.desktop\/sun.awt.image\n+ *          java.desktop\/sun.java2d\n+ *\/\n+public final class ColorPaintContextStateTrackerTest {\n+\n+    public static void main(String[] args) {\n+        var context = Color.RED.createContext(null, null, null, null, null);\n+        var cm = context.getColorModel();\n+        var raster = (WritableRaster) context.getRaster(0, 0, 1, 1);\n+        var bi = new BufferedImage(cm, raster, cm.isAlphaPremultiplied(), null);\n+\n+        SurfaceData sd = SurfaceManager.getManager(bi).getPrimarySurfaceData();\n+        StateTrackable.State state = sd.getState();\n+        if (state != StateTrackable.State.STABLE) {\n+            System.err.println(\"Actual: \" + state);\n+            System.err.println(\"Expected: \" + StateTrackable.State.STABLE);\n+            throw new RuntimeException(\"Wrong state\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ColorClass\/PaintContext\/ColorPaintContextStateTrackerTest.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}