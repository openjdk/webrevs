{"files":[{"patch":"@@ -86,0 +86,16 @@\n+    private static class WhereClauses {\n+        private final Map<WhereClauseKind, Map<Type, JCDiagnostic>> whereClauses;\n+\n+        WhereClauses() {\n+            Map<WhereClauseKind, Map<Type, JCDiagnostic>> whereClauses = new LinkedHashMap<>();\n+            for (WhereClauseKind kind : WhereClauseKind.values()) {\n+                whereClauses.put(kind, new LinkedHashMap<>());\n+            }\n+            this.whereClauses = whereClauses;\n+        }\n+\n+        public Map<Type, JCDiagnostic> get(WhereClauseKind kind) {\n+            return whereClauses.get(kind);\n+        }\n+    }\n+\n@@ -87,1 +103,14 @@\n-    Map<WhereClauseKind, Map<Type, JCDiagnostic>> whereClauses;\n+    WhereClauses whereClauses;\n+\n+    private void enter() {\n+        if (nameSimplifier != null || whereClauses != null) {\n+            throw new IllegalStateException();\n+        }\n+        nameSimplifier = new ClassNameSimplifier();\n+        whereClauses = new WhereClauses();\n+    }\n+\n+    private void exit() {\n+        nameSimplifier = null;\n+        whereClauses = null;\n+    }\n@@ -105,1 +134,0 @@\n-        whereClauses = new EnumMap<>(WhereClauseKind.class);\n@@ -107,2 +135,0 @@\n-        for (WhereClauseKind kind : WhereClauseKind.values())\n-            whereClauses.put(kind, new LinkedHashMap<Type, JCDiagnostic>());\n@@ -113,14 +139,14 @@\n-        StringBuilder sb = new StringBuilder();\n-        nameSimplifier = new ClassNameSimplifier();\n-        for (WhereClauseKind kind : WhereClauseKind.values())\n-            whereClauses.get(kind).clear();\n-        preprocessDiagnostic(diag);\n-        sb.append(formatter.format(diag, l));\n-        if (getConfiguration().isEnabled(RichFormatterFeature.WHERE_CLAUSES)) {\n-            List<JCDiagnostic> clauses = getWhereClauses();\n-            String indent = formatter.isRaw() ? \"\" :\n-                formatter.indentString(DetailsInc);\n-            for (JCDiagnostic d : clauses) {\n-                String whereClause = formatter.format(d, l);\n-                if (whereClause.length() > 0) {\n-                    sb.append('\\n' + indent + whereClause);\n+        enter();\n+        try {\n+            StringBuilder sb = new StringBuilder();\n+            preprocessDiagnostic(diag);\n+            sb.append(formatter.format(diag, l));\n+            if (getConfiguration().isEnabled(RichFormatterFeature.WHERE_CLAUSES)) {\n+                List<JCDiagnostic> clauses = getWhereClauses();\n+                String indent = formatter.isRaw() ? \"\" :\n+                        formatter.indentString(DetailsInc);\n+                for (JCDiagnostic d : clauses) {\n+                    String whereClause = formatter.format(d, l);\n+                    if (whereClause.length() > 0) {\n+                        sb.append('\\n' + indent + whereClause);\n+                    }\n@@ -129,0 +155,3 @@\n+            return sb.toString();\n+        } finally {\n+            exit();\n@@ -130,1 +159,0 @@\n-        return sb.toString();\n@@ -135,3 +163,7 @@\n-        nameSimplifier = new ClassNameSimplifier();\n-        preprocessDiagnostic(diag);\n-        return super.formatMessage(diag, l);\n+        enter();\n+        try {\n+            preprocessDiagnostic(diag);\n+            return super.formatMessage(diag, l);\n+        } finally {\n+            exit();\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/RichDiagnosticFormatter.java","additions":54,"deletions":22,"binary":false,"changes":76,"status":"modified"}]}