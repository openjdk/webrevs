{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.access.JavaLangAccess;\n@@ -39,2 +38,0 @@\n-    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n-\n@@ -131,66 +128,0 @@\n-\n-    \/**\n-     * Insert digits for long value in buffer from high index to low index.\n-     *\n-     * @param value      value to convert\n-     * @param index      insert point + 1\n-     * @param buffer     byte buffer to copy into\n-     *\n-     * @return the last index used\n-     *\/\n-    public static int getCharsLatin1(long value, int index, byte[] buffer) {\n-        while ((value & ~0xFF) != 0) {\n-            short pair = DIGITS[((int) value) & 0xFF];\n-            buffer[--index] = (byte)(pair >> 8);\n-            buffer[--index] = (byte)(pair);\n-            value >>>= 8;\n-        }\n-\n-        int digits = DIGITS[(int) (value & 0xFF)];\n-        buffer[--index] = (byte) (digits >> 8);\n-\n-        if (0xF < value) {\n-            buffer[--index] = (byte) (digits & 0xFF);\n-        }\n-\n-        return index;\n-    }\n-\n-    \/**\n-     * Insert digits for long value in buffer from high index to low index.\n-     *\n-     * @param value      value to convert\n-     * @param index      insert point + 1\n-     * @param buffer     byte buffer to copy into\n-     *\n-     * @return the last index used\n-     *\/\n-    public static int getCharsUTF16(long value, int index, byte[] buffer) {\n-        while ((value & ~0xFF) != 0) {\n-            int pair = (int) DIGITS[((int) value) & 0xFF];\n-            JLA.uncheckedPutCharUTF16(buffer, --index, pair >> 8);\n-            JLA.uncheckedPutCharUTF16(buffer, --index, pair & 0xFF);\n-            value >>>= 8;\n-        }\n-\n-        int digits = DIGITS[(int) (value & 0xFF)];\n-        JLA.uncheckedPutCharUTF16(buffer, --index, (byte) (digits >> 8));\n-\n-        if (0xF < value) {\n-            JLA.uncheckedPutCharUTF16(buffer, --index, (byte) (digits & 0xFF));\n-        }\n-\n-        return index;\n-    }\n-\n-    \/**\n-     * Calculate the number of digits required to represent the long.\n-     *\n-     * @param value value to convert\n-     *\n-     * @return number of digits\n-     *\/\n-    public static int stringSize(long value) {\n-        return value == 0 ? 1 :\n-                67 - Long.numberOfLeadingZeros(value) >> 2;\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/HexDigits.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"modified"}]}