{"files":[{"patch":"@@ -122,1 +122,1 @@\n-        SinceChecker sinceCheckerTestHelper = new SinceChecker();\n+        SinceChecker sinceCheckerTestHelper = new SinceChecker(args[0]);\n@@ -126,1 +126,6 @@\n-    private SinceChecker() throws IOException {\n+    void error(String message) {\n+        System. err.println(message);\n+        errorCount++;\n+    }\n+\n+    private SinceChecker(String moduleName) throws IOException {\n@@ -129,2 +134,9 @@\n-            JavacTask ct = (JavacTask) tool.getTask(null, null, null,\n-                    List.of(\"--release\", String.valueOf(i)),\n+            DiagnosticListener<? super JavaFileObject> noErrors = d -> {\n+                if (!d.getCode().equals(\"compiler.err.module.not.found\")) {\n+                    error(d.getMessage(null));\n+                }\n+            };\n+            JavacTask ct = (JavacTask) tool.getTask(null,\n+                    null,\n+                    noErrors,\n+                    List.of(\"--add-modules\", moduleName, \"--release\", String.valueOf(i)),\n@@ -144,0 +156,1 @@\n+        processElement(moduleElement, moduleElement, ct.getTypes(), releaseVersion);\n@@ -145,1 +158,0 @@\n-            processElement(moduleElement, moduleElement, ct.getTypes(), releaseVersion);\n@@ -216,5 +228,0 @@\n-    void error(String message) {\n-        System.err.println(message);\n-        errorCount++;\n-    }\n-\n@@ -230,2 +237,2 @@\n-        if (!Files.exists(srcZip) && !Files.isDirectory(srcZip)) {\n-            throw new SkippedException(\"Skipping Test because src.zip wasn't found\");\n+        if (!Files.isReadable(srcZip)) {\n+            throw new SkippedException(\"Skipping Test because src.zip wasn't found or couldn't be read\");\n@@ -233,25 +240,23 @@\n-        if (Files.isReadable(srcZip)) {\n-            URI uri = URI.create(\"jar:\" + srcZip.toUri());\n-            try (FileSystem zipFO = FileSystems.newFileSystem(uri, Collections.emptyMap())) {\n-                Path root = zipFO.getRootDirectories().iterator().next();\n-                Path moduleDirectory = root.resolve(moduleName);\n-                try (StandardJavaFileManager fm =\n-                             tool.getStandardFileManager(null, null, null)) {\n-                    JavacTask ct = (JavacTask) tool.getTask(null,\n-                            fm,\n-                            null,\n-                            List.of(\"--add-modules\", moduleName, \"-d\", \".\"),\n-                            null,\n-                            Collections.singletonList(SimpleJavaFileObject.forSource(URI.create(\"myfo:\/Test.java\"), \"\")));\n-                    ct.analyze();\n-                    Elements elements = ct.getElements();\n-                    elements.getModuleElement(\"java.base\");\n-                    try (EffectiveSourceSinceHelper javadocHelper = EffectiveSourceSinceHelper.create(ct, List.of(root), this)) {\n-                        processModuleCheck(elements.getModuleElement(moduleName), ct, moduleDirectory, javadocHelper);\n-                    } catch (Exception e) {\n-                        e.printStackTrace();\n-                        error(\"Initiating javadocHelperFailed \" + e);\n-                    }\n-                    if (errorCount > 0) {\n-                        throw new Exception(\"The `@since` checker found \" + errorCount + \" problems\");\n-                    }\n+        URI uri = URI.create(\"jar:\" + srcZip.toUri());\n+        try (FileSystem zipFO = FileSystems.newFileSystem(uri, Collections.emptyMap())) {\n+            Path root = zipFO.getRootDirectories().iterator().next();\n+            Path moduleDirectory = root.resolve(moduleName);\n+            try (StandardJavaFileManager fm =\n+                         tool.getStandardFileManager(null, null, null)) {\n+                JavacTask ct = (JavacTask) tool.getTask(null,\n+                        fm,\n+                        null,\n+                        List.of(\"--add-modules\", moduleName, \"-d\", \".\"),\n+                        null,\n+                        Collections.singletonList(SimpleJavaFileObject.forSource(URI.create(\"myfo:\/Test.java\"), \"\")));\n+                ct.analyze();\n+                Elements elements = ct.getElements();\n+                elements.getModuleElement(\"java.base\");\n+                try (EffectiveSourceSinceHelper javadocHelper = EffectiveSourceSinceHelper.create(ct, List.of(root), this)) {\n+                    processModuleCheck(elements.getModuleElement(moduleName), ct, moduleDirectory, javadocHelper);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                    error(\"Initiating javadocHelper Failed \" + e);\n+                }\n+                if (errorCount > 0) {\n+                    throw new Exception(\"The `@since` checker found \" + errorCount + \" problems\");\n@@ -351,1 +356,1 @@\n-                .filter(element -> element.getKind().isDeclaredType())\n+                .filter(element -> element.getKind().isDeclaredType() && element.getKind() != ElementKind.RECORD)\n@@ -370,1 +375,1 @@\n-            error(\"Element :\" + uniqueId + \" was not mapped\");\n+            error(\"Element: \" + uniqueId + \" was not mapped\");\n@@ -467,0 +472,15 @@\n+        LEGACY_PREVIEW_METHODS.put(\"9\", Set.of(\n+                \"module: java.transaction.xa\",\n+                \"module: jdk.unsupported.desktop\",\n+                \"module: jdk.jpackage\",\n+                \"module: java.net.http\"\n+        ));\n+        LEGACY_PREVIEW_METHODS.put(\"10\", Set.of(\n+                \"module: java.transaction.xa\",\n+                \"module: java.net.http\",\n+                \"module: jdk.unsupported.desktop\",\n+                \"module: jdk.jpackage\"\n+        ));\n+        LEGACY_PREVIEW_METHODS.put(\"11\", Set.of(\n+                \"module: jdk.jpackage\"\n+        ));\n@@ -468,0 +488,1 @@\n+                \"module: jdk.jpackage\",\n@@ -481,0 +502,1 @@\n+                \"module: jdk.jpackage\",\n@@ -502,0 +524,1 @@\n+                \"module: jdk.jpackage\",\n@@ -537,0 +560,1 @@\n+                \"module: jdk.jpackage\",\n","filename":"test\/jdk\/tools\/sincechecker\/SinceChecker.java","additions":63,"deletions":39,"binary":false,"changes":102,"status":"modified"}]}