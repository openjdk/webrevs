{"files":[{"patch":"@@ -616,0 +616,3 @@\n+  \/\/ Load counter used by StressUnstableIfTraps\n+  void load_trap_stress_counter(Node*& counter, Node*& incr_store);\n+\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1377,0 +1377,7 @@\n+void Parse::load_trap_stress_counter(Node*& counter, Node*& incr_store) {\n+  Node* counter_addr = makecon(TypeRawPtr::make((address)&_trap_stress_counter));\n+  counter = make_load(control(), counter_addr, TypeInt::INT, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n+  counter = _gvn.transform(new AddINode(counter, intcon(1)));\n+  incr_store = store_to_memory(control(), counter_addr, counter, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n+}\n+\n@@ -1385,4 +1392,1 @@\n-    Node* counter_addr = makecon(TypeRawPtr::make((address)&_trap_stress_counter));\n-    counter = make_load(control(), counter_addr, TypeInt::INT, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n-    counter = _gvn.transform(new AddINode(counter, intcon(1)));\n-    incr_store = store_to_memory(control(), counter_addr, counter, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n+    load_trap_stress_counter(counter, incr_store);\n@@ -1492,4 +1496,1 @@\n-    Node* counter_addr = makecon(TypeRawPtr::make((address)&_trap_stress_counter));\n-    counter = make_load(control(), counter_addr, TypeInt::INT, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n-    counter = _gvn.transform(new AddINode(counter, intcon(1)));\n-    incr_store = store_to_memory(control(), counter_addr, counter, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n+    load_trap_stress_counter(counter, incr_store);\n@@ -1589,0 +1590,1 @@\n+  assert(orig_iff->Opcode() == Op_If && orig_iff->outcnt() == 2, \"malformed if\");\n@@ -1590,8 +1592,4 @@\n-    Node* out = orig_iff->raw_out(i)->find_out_with(Op_CallStaticJava);\n-    if (out != nullptr && out->isa_CallStaticJava() && out->as_CallStaticJava()->is_uncommon_trap()) {\n-      trap = out->as_CallStaticJava();\n-      if (!trap->jvms()->should_reexecute() || Deoptimization::trap_request_reason(trap->uncommon_trap_request()) != Deoptimization::Reason_unstable_if) {\n-        trap = nullptr;\n-        continue;\n-      }\n-      break;\n+    trap = (CallStaticJavaNode*)orig_iff->raw_out(i)->find_out_with(Op_CallStaticJava);\n+    if (trap != nullptr && trap->is_uncommon_trap() && trap->jvms()->should_reexecute() &&\n+        Deoptimization::trap_request_reason(trap->uncommon_trap_request()) == Deoptimization::Reason_unstable_if) {\n+      break; \/\/ Trap found\n@@ -1599,0 +1597,1 @@\n+    trap = nullptr;\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"}]}