{"files":[{"patch":"@@ -61,0 +61,3 @@\n+  product(bool, StressUnstableIfTraps, false, DIAGNOSTIC,                   \\\n+          \"Randomly take unstable if traps\")                                \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -722,0 +722,5 @@\n+  if (StressLCM || StressGCM || StressIGVN || StressCCP ||\n+      StressIncrementalInlining || StressMacroExpansion || StressUnstableIfTraps) {\n+    initialize_stress_seed(directive);\n+  }\n+\n@@ -846,5 +851,0 @@\n-  if (StressLCM || StressGCM || StressIGVN || StressCCP ||\n-      StressIncrementalInlining || StressMacroExpansion) {\n-    initialize_stress_seed(directive);\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -615,0 +615,5 @@\n+  \/\/ Stress unstable if traps\n+  void stress_trap(IfNode* orig_iff, Node* counter, Node* incr_store);\n+  \/\/ Load counter used by StressUnstableIfTraps\n+  void load_trap_stress_counter(Node*& counter, Node*& incr_store);\n+\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1374,0 +1374,10 @@\n+\/\/ Used by StressUnstableIfTraps\n+static volatile int _trap_stress_counter = 0;\n+\n+void Parse::load_trap_stress_counter(Node*& counter, Node*& incr_store) {\n+  Node* counter_addr = makecon(TypeRawPtr::make((address)&_trap_stress_counter));\n+  counter = make_load(control(), counter_addr, TypeInt::INT, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n+  counter = _gvn.transform(new AddINode(counter, intcon(1)));\n+  incr_store = store_to_memory(control(), counter_addr, counter, T_INT, Compile::AliasIdxRaw, MemNode::unordered);\n+}\n+\n@@ -1378,0 +1388,7 @@\n+  Node* counter = nullptr;\n+  Node* incr_store = nullptr;\n+  bool do_stress_trap = StressUnstableIfTraps && ((C->random() % 2) == 0);\n+  if (do_stress_trap) {\n+    load_trap_stress_counter(counter, incr_store);\n+  }\n+\n@@ -1442,0 +1459,4 @@\n+\n+  if (do_stress_trap) {\n+    stress_trap(iff, counter, incr_store);\n+  }\n@@ -1471,0 +1492,7 @@\n+  Node* counter = nullptr;\n+  Node* incr_store = nullptr;\n+  bool do_stress_trap = StressUnstableIfTraps && ((C->random() % 2) == 0);\n+  if (do_stress_trap) {\n+    load_trap_stress_counter(counter, incr_store);\n+  }\n+\n@@ -1553,0 +1581,50 @@\n+\n+  if (do_stress_trap) {\n+    stress_trap(iff, counter, incr_store);\n+  }\n+}\n+\n+void Parse::stress_trap(IfNode* orig_iff, Node* counter, Node* incr_store) {\n+  \/\/ Search for an unstable if trap\n+  CallStaticJavaNode* trap = nullptr;\n+  assert(orig_iff->Opcode() == Op_If && orig_iff->outcnt() == 2, \"malformed if\");\n+  for (int i = 0; i <= 1; ++i) {\n+    trap = (CallStaticJavaNode*)orig_iff->raw_out(i)->find_out_with(Op_CallStaticJava);\n+    if (trap != nullptr && trap->is_uncommon_trap() && trap->jvms()->should_reexecute() &&\n+        Deoptimization::trap_request_reason(trap->uncommon_trap_request()) == Deoptimization::Reason_unstable_if) {\n+      break; \/\/ Trap found\n+    }\n+    trap = nullptr;\n+  }\n+  if (trap == nullptr) {\n+    \/\/ No trap found. Remove unused counter load and increment.\n+    C->gvn_replace_by(incr_store, incr_store->in(MemNode::Memory));\n+    return;\n+  }\n+\n+  \/\/ Remove trap from optimization list since we add another path to the trap.\n+  bool success = C->remove_unstable_if_trap(trap, true);\n+  assert(success, \"Trap already modified\");\n+\n+  \/\/ Add a check before the original if that will trap with a certain frequency and execute the original if otherwise\n+  int freq_log = (C->random() % 31) + 1; \/\/ Random logarithmic frequency in [1, 31]\n+  Node* mask = intcon(right_n_bits(freq_log));\n+  counter = _gvn.transform(new AndINode(counter, mask));\n+  Node* cmp = _gvn.transform(new CmpINode(counter, intcon(0)));\n+  Node* bol = _gvn.transform(new BoolNode(cmp, BoolTest::mask::eq));\n+  IfNode* iff = _gvn.transform(new IfNode(orig_iff->in(0), bol, orig_iff->_prob, orig_iff->_fcnt))->as_If();\n+  Node* if_true = _gvn.transform(new IfTrueNode(iff));\n+  Node* if_false = _gvn.transform(new IfFalseNode(iff));\n+  assert(!if_true->is_top() && !if_false->is_top(), \"trap always \/ never taken\");\n+\n+  \/\/ Trap\n+  ProjNode* trap_proj = trap->in(0)->as_Proj();\n+  assert(trap_proj->outcnt() == 1, \"some other nodes are dependent on the trap projection\");\n+\n+  Node* trap_region = new RegionNode(3);\n+  trap_region->set_req(1, trap_proj);\n+  trap_region->set_req(2, if_true);\n+  trap->set_req(0, _gvn.transform(trap_region));\n+\n+  \/\/ Don't trap, execute original if\n+  orig_iff->set_req(0, if_false);\n@@ -1556,0 +1634,4 @@\n+  \/\/ Randomly skip emitting an uncommon trap\n+  if (StressUnstableIfTraps && ((C->random() % 2) == 0)) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":82,"deletions":0,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8252219 8256535 8317349\n+ * @bug 8252219 8256535 8317349 8319879 8335334\n@@ -51,0 +51,8 @@\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+StressIncrementalInlining\n+ *      compiler.arguments.TestStressOptions\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+StressIncrementalInlining -XX:StressSeed=42\n+ *      compiler.arguments.TestStressOptions\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+StressUnstableIfTraps\n+ *      compiler.arguments.TestStressOptions\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+StressUnstableIfTraps -XX:StressSeed=42\n+ *      compiler.arguments.TestStressOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestStressOptions.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @requires vm.opt.StressUnstableIfTraps == null | !vm.opt.StressUnstableIfTraps\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestPrunedExHandler.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires vm.opt.StressUnstableIfTraps == null | !vm.opt.StressUnstableIfTraps\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/StrengthReduceInterfaceCall.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @requires vm.opt.StressUnstableIfTraps == null | !vm.opt.StressUnstableIfTraps\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/MaterializeVirtualObjectTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.opt.StressUnstableIfTraps == null | !vm.opt.StressUnstableIfTraps\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestExplicitRangeChecks.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @requires !vm.graal.enabled\n+ * @requires !vm.graal.enabled & (vm.opt.StressUnstableIfTraps == null | !vm.opt.StressUnstableIfTraps)\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/TestUnstableIfTrap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.opt.StressUnstableIfTraps == null | !vm.opt.StressUnstableIfTraps\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicBooleanOpTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.opt.StressUnstableIfTraps == null | !vm.opt.StressUnstableIfTraps\n","filename":"test\/hotspot\/jtreg\/compiler\/whitebox\/DeoptimizeFramesTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+ * @requires vm.opt.StressUnstableIfTraps == null | !vm.opt.StressUnstableIfTraps\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestDeoptimization.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}