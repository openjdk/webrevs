{"files":[{"patch":"@@ -323,3 +323,2 @@\n-  assert((intptr_t)obj >= 0 || (intptr_t)obj < -100,\n-         \"hit tag while initializing ptrs.\");\n-  *p = (void*)obj != nullptr ? (void*)(SharedBaseAddress + obj) : (void*)obj;\n+  assert(obj >= 0, \"sanity.\");\n+  *p = (obj != 0) ? (void*)(_base_address + obj) : (void*)obj;\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-\n+  intptr_t _base_address;\n@@ -237,1 +237,2 @@\n-  ReadClosure(intptr_t** ptr_array) { _ptr_array = ptr_array; }\n+  ReadClosure(intptr_t** ptr_array, intptr_t base_address) :\n+    _ptr_array(ptr_array), _base_address(base_address) {}\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -197,0 +197,1 @@\n+  size_t  _early_serialized_data_offset;          \/\/ Data accessed using {ReadClosure,WriteClosure}::serialize()\n@@ -265,0 +266,1 @@\n+  char* early_serialized_data()            const { return from_mapped_offset(_early_serialized_data_offset); }\n@@ -287,0 +289,1 @@\n+  void set_early_serialized_data(char* p)        { set_as_offset(p, &_early_serialized_data_offset); }\n@@ -400,0 +403,2 @@\n+  char* early_serialized_data()               const { return header()->early_serialized_data(); }\n+  void  set_early_serialized_data(char* p)    const { header()->set_early_serialized_data(p); }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -362,2 +362,37 @@\n-\/\/ Read\/write a data stream for restoring\/preserving metadata pointers and\n-\/\/ miscellaneous data from\/to the shared archive file.\n+\/\/ About \"serialize\" --\n+\/\/\n+\/\/ This is (probably a badly named) way to read\/write a data stream of pointers and\n+\/\/ miscellaneous data from\/to the shared archive file. The usual code looks like this:\n+\/\/\n+\/\/     \/\/ These two global C++ variables are initialized during dump time.\n+\/\/     static int _archived_int;\n+\/\/     static MetaspaceObj* archived_ptr;\n+\/\/\n+\/\/     void MyClass::serialize(SerializeClosure* soc) {\n+\/\/         soc->do_int(&_archived_int);\n+\/\/         soc->do_int(&_archived_ptr);\n+\/\/     }\n+\/\/\n+\/\/     At dumptime, these two variables are stored into the CDS archive.\n+\/\/     At runtime, these two variables are loaded from the CDS archive.\n+\/\/     In addition, the pointer is relocated as necessary.\n+\/\/\n+\/\/ Some of the xxx::serialize() functions may have side effects and assume that\n+\/\/ the archive is already mapped. For example, SymbolTable::serialize_shared_table_header()\n+\/\/ unconditionally makes the set of archived symbols available. Therefore, we put most\n+\/\/ of these xxx::serialize() functions inside MetaspaceShared::serialize(), which\n+\/\/ is called AFTER we made the decision to map the archive.\n+\/\/\n+\/\/ However, some of the \"seralized\" data are used to decide whether an archive should\n+\/\/ be mapped or not (e.g., for checking if the -Djdk.module.main property is compatible\n+\/\/ with the archive). The xxx::seralize() functions for these data must be put inside\n+\/\/ MetaspaceShared::early_serialize(). Such functions must not produce side effects that\n+\/\/ assume we will always decides to map the archive.\n+\n+void MetaspaceShared::early_serialize(SerializeClosure* soc) {\n+  int tag = 0;\n+  soc->do_tag(--tag);\n+  CDS_JAVA_HEAP_ONLY(Modules::serialize(soc);)\n+  CDS_JAVA_HEAP_ONLY(Modules::serialize_addmods_names(soc);)\n+  soc->do_tag(666);\n+}\n@@ -405,2 +440,0 @@\n-  CDS_JAVA_HEAP_ONLY(Modules::serialize(soc);)\n-  CDS_JAVA_HEAP_ONLY(Modules::serialize_addmods_names(soc);)\n@@ -458,0 +491,1 @@\n+  char* dump_early_read_only_tables();\n@@ -497,0 +531,15 @@\n+char* VM_PopulateDumpSharedSpace::dump_early_read_only_tables() {\n+  ArchiveBuilder::OtherROAllocMark mark;\n+\n+  \/\/ Write module name into archive\n+  CDS_JAVA_HEAP_ONLY(Modules::dump_main_module_name();)\n+  \/\/ Write module names from --add-modules into archive\n+  CDS_JAVA_HEAP_ONLY(Modules::dump_addmods_names();)\n+\n+  DumpRegion* ro_region = ArchiveBuilder::current()->ro_region();\n+  char* start = ro_region->top();\n+  WriteClosure wc(ro_region);\n+  MetaspaceShared::early_serialize(&wc);\n+  return start;\n+}\n+\n@@ -504,4 +553,1 @@\n-  \/\/ Write module name into archive\n-  CDS_JAVA_HEAP_ONLY(Modules::dump_main_module_name();)\n-  \/\/ Write module names from --add-modules into archive\n-  CDS_JAVA_HEAP_ONLY(Modules::dump_addmods_names();)\n+\n@@ -546,0 +592,1 @@\n+  char* early_serialized_data = dump_early_read_only_tables();\n@@ -559,0 +606,1 @@\n+  _map_info->set_early_serialized_data(early_serialized_data);\n@@ -1476,0 +1524,8 @@\n+  if (mapinfo->is_static()) {\n+    \/\/ Currently, only static archive uses early serialized data.\n+    char* buffer = mapinfo->early_serialized_data();\n+    intptr_t* array = (intptr_t*)buffer;\n+    ReadClosure rc(&array, (intptr_t)mapped_base_address);\n+    early_serialize(&rc);\n+  }\n+\n@@ -1512,1 +1568,1 @@\n-  ReadClosure rc(&array);\n+  ReadClosure rc(&array, (intptr_t)SharedBaseAddress);\n@@ -1529,1 +1585,1 @@\n-    ReadClosure rc(&buffer);\n+    ReadClosure rc(&buffer, (intptr_t)SharedBaseAddress);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":66,"deletions":10,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+  static void early_serialize(SerializeClosure* sc) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -602,0 +602,3 @@\n+\n+    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n+    _archived_main_module_name = nullptr;\n@@ -644,0 +647,3 @@\n+\n+    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n+    _archived_addmods_names = nullptr;\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}