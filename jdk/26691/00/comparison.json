{"files":[{"patch":"@@ -271,4 +271,1 @@\n-  void do_cset_groups() {\n-    G1CollectedHeap* g1h = G1CollectedHeap::heap();\n-    G1CSetCandidateGroup* young_only_cset_group = g1h->young_regions_cset_group();\n-\n+  void accumulate_stats_for_group(G1CSetCandidateGroup* group, G1PerRegionTypeRemSetCounters* gen_counter) {\n@@ -276,12 +273,14 @@\n-    \/\/ during region iteration.\n-    if (young_only_cset_group->length() > 1) {\n-      G1CardSet* young_only_card_set = young_only_cset_group->card_set();\n-      size_t rs_mem_sz = young_only_card_set->mem_size();\n-      size_t rs_unused_mem_sz = young_only_card_set->unused_mem_size();\n-      size_t occupied_cards = young_only_card_set->occupied();\n-\n-      _max_group_cardset_mem_sz = rs_mem_sz;\n-      _max_cardset_mem_sz_group = young_only_cset_group;\n-\n-      \/\/ Only update cardset details\n-      _young.add(rs_unused_mem_sz, rs_mem_sz, occupied_cards, 0, 0, false);\n+    \/\/ during region iteration. Skip these.\n+    if (group->length() > 1) {\n+      G1CardSet* card_set = group->card_set();\n+\n+      size_t rs_mem_sz = card_set->mem_size();\n+      size_t rs_unused_mem_sz = card_set->unused_mem_size();\n+      size_t occupied_cards = card_set->occupied();\n+\n+      if (rs_mem_sz > _max_group_cardset_mem_sz) {\n+        _max_group_cardset_mem_sz = rs_mem_sz;\n+        _max_cardset_mem_sz_group = group;\n+      }\n+\n+      gen_counter->add(rs_unused_mem_sz, rs_mem_sz, occupied_cards, 0, 0, false);\n@@ -290,0 +289,1 @@\n+  }\n@@ -291,0 +291,2 @@\n+  void do_cset_groups() {\n+    G1CollectedHeap* g1h = G1CollectedHeap::heap();\n@@ -292,12 +294,1 @@\n-    G1PerRegionTypeRemSetCounters* current = &_old;\n-    for (G1CSetCandidateGroup* group : g1h->policy()->candidates()->from_marking_groups()) {\n-      if (group->length() > 1) {\n-        G1CardSet* group_card_set = group->card_set();\n-        size_t rs_mem_sz = group_card_set->mem_size();\n-        size_t rs_unused_mem_sz = group_card_set->unused_mem_size();\n-        size_t occupied_cards = group_card_set->occupied();\n-\n-        if (rs_mem_sz > _max_group_cardset_mem_sz) {\n-          _max_group_cardset_mem_sz = rs_mem_sz;\n-          _max_cardset_mem_sz_group = group;\n-        }\n+    accumulate_stats_for_group(g1h->young_regions_cset_group(), &_young);\n@@ -305,4 +296,8 @@\n-        \/\/ Only update cardset details\n-        _old.add(rs_unused_mem_sz, rs_mem_sz, occupied_cards, 0, 0, false);\n-        _all.add(rs_unused_mem_sz, rs_mem_sz, occupied_cards, 0, 0, false);\n-      }\n+    G1CollectionSetCandidates* candidates = g1h->policy()->candidates();\n+    for (G1CSetCandidateGroup* group : candidates->from_marking_groups()) {\n+      accumulate_stats_for_group(group, &_old);\n+    }\n+    \/\/ Skip gathering statistics for retained regions. Just verify that they have\n+    \/\/ the expected amount of regions.\n+    for (G1CSetCandidateGroup* group : candidates->retained_groups()) {\n+      assert(group->length() == 1, \"must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.cpp","additions":27,"deletions":32,"binary":false,"changes":59,"status":"modified"}]}