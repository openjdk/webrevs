{"files":[{"patch":"@@ -64,1 +64,1 @@\n-                (parse_mode == _parse_lambda_forms_invokers_only) ? \" (lambda form invokers only)\" : \"\");\n+                parse_lambda_forms_invokers_only() ? \" (lambda form invokers only)\" : \"\");\n@@ -105,3 +105,1 @@\n-int ClassListParser::parse(TRAPS) {\n-  int class_count = 0;\n-\n+void ClassListParser::parse(TRAPS) {\n@@ -110,15 +108,14 @@\n-    if (*_line == '#') { \/\/ comment\n-      continue;\n-    }\n-    if (!parse_one_line()) {\n-      break;\n-    }\n-\n-    if (lambda_form_line()) {\n-      \/\/ The current line is \"@lambda-form-invoker ...\". It has been recorded in LambdaFormInvokers,\n-      \/\/ and will be processed later.\n-      continue;\n-    }\n-\n-    if (_parse_mode == _parse_lambda_forms_invokers_only) {\n-      continue;\n+    clean_up_input_line();\n+\n+    \/\/ Each line in the classlist can be one of three forms:\n+    if (_line[0] == '#') {\n+      \/\/ A comment; ignore it\n+    } else if (_line[0] == '@') {\n+      \/\/ @xxx - a tag like @lambda-proxy, to be parsed by parse_at_tags()\n+      parse_at_tags(CHECK);\n+    } else {\n+      \/\/ A class name, followed by optional attributes. E.g.\n+      \/\/   java\/lang\/String\n+      \/\/   java\/lang\/Object id: 1\n+      \/\/   my\/pkg\/TestClass id: 5 super: 1 interfaces: 3 4 source: foo.jar\n+      parse_class_name_and_attributes(CHECK);\n@@ -126,0 +123,2 @@\n+  }\n+}\n@@ -127,8 +126,2 @@\n-    check_class_name(_class_name);\n-    TempNewSymbol class_name_symbol = SymbolTable::new_symbol(_class_name);\n-    if (_indy_items->length() > 0) {\n-      \/\/ The current line is \"@lambda-proxy class_name\". Load the proxy class.\n-      resolve_indy(THREAD, class_name_symbol);\n-      class_count++;\n-      continue;\n-    }\n+void ClassListParser::parse_class_name_and_attributes(TRAPS) {\n+  read_class_name_and_attributes();\n@@ -136,7 +129,3 @@\n-    Klass* klass = load_current_class(class_name_symbol, THREAD);\n-    if (HAS_PENDING_EXCEPTION) {\n-      if (PENDING_EXCEPTION->is_a(vmClasses::OutOfMemoryError_klass())) {\n-        \/\/ If we have run out of memory, don't try to load the rest of the classes in\n-        \/\/ the classlist. Throw an exception, which will terminate the dumping process.\n-        return 0; \/\/ THROW\n-      }\n+  if (parse_lambda_forms_invokers_only()) {\n+    return;\n+  }\n@@ -144,12 +133,8 @@\n-      ResourceMark rm(THREAD);\n-      char* ex_msg = (char*)\"\";\n-      oop message = java_lang_Throwable::message(PENDING_EXCEPTION);\n-      if (message != nullptr) {\n-        ex_msg = java_lang_String::as_utf8_string(message);\n-      }\n-      log_warning(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(), ex_msg);\n-      \/\/ We might have an invalid class name or an bad class. Warn about it\n-      \/\/ and keep going to the next line.\n-      CLEAR_PENDING_EXCEPTION;\n-      log_warning(cds)(\"Preload Warning: Cannot find %s\", _class_name);\n-      continue;\n+  check_class_name(_class_name);\n+  TempNewSymbol class_name_symbol = SymbolTable::new_symbol(_class_name);\n+  Klass* klass = load_current_class(class_name_symbol, THREAD);\n+  if (HAS_PENDING_EXCEPTION) {\n+    if (PENDING_EXCEPTION->is_a(vmClasses::OutOfMemoryError_klass())) {\n+      \/\/ If we have run out of memory, don't try to load the rest of the classes in\n+      \/\/ the classlist. Throw an exception, which will terminate the dumping process.\n+      return; \/\/ THROW\n@@ -158,4 +143,5 @@\n-    assert(klass != nullptr, \"sanity\");\n-    if (log_is_enabled(Trace, cds)) {\n-      ResourceMark rm(THREAD);\n-      log_trace(cds)(\"Shared spaces preloaded: %s\", klass->external_name());\n+    ResourceMark rm(THREAD);\n+    char* ex_msg = (char*)\"\";\n+    oop message = java_lang_Throwable::message(PENDING_EXCEPTION);\n+    if (message != nullptr) {\n+      ex_msg = java_lang_String::as_utf8_string(message);\n@@ -163,0 +149,7 @@\n+    log_warning(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(), ex_msg);\n+    \/\/ We might have an invalid class name or an bad class. Warn about it\n+    \/\/ and keep going to the next line.\n+    CLEAR_PENDING_EXCEPTION;\n+    log_warning(cds)(\"Preload Warning: Cannot find %s\", _class_name);\n+    return;\n+  }\n@@ -164,2 +157,5 @@\n-    if (klass->is_instance_klass()) {\n-      InstanceKlass* ik = InstanceKlass::cast(klass);\n+  assert(klass != nullptr, \"sanity\");\n+  if (log_is_enabled(Trace, cds)) {\n+    ResourceMark rm(THREAD);\n+    log_trace(cds)(\"Shared spaces preloaded: %s\", klass->external_name());\n+  }\n@@ -167,6 +163,2 @@\n-      \/\/ Link the class to cause the bytecodes to be rewritten and the\n-      \/\/ cpcache to be created. The linking is done as soon as classes\n-      \/\/ are loaded in order that the related data structures (klass and\n-      \/\/ cpCache) are located together.\n-      MetaspaceShared::try_link_class(THREAD, ik);\n-    }\n+  if (klass->is_instance_klass()) {\n+    InstanceKlass* ik = InstanceKlass::cast(klass);\n@@ -174,1 +166,5 @@\n-    class_count++;\n+    \/\/ Link the class to cause the bytecodes to be rewritten and the\n+    \/\/ cpcache to be created. The linking is done as soon as classes\n+    \/\/ are loaded in order that the related data structures (klass and\n+    \/\/ cpCache) are located together.\n+    MetaspaceShared::try_link_class(THREAD, ik);\n@@ -176,2 +172,0 @@\n-\n-  return class_count;\n@@ -180,9 +174,7 @@\n-bool ClassListParser::parse_one_line() {\n-  {\n-    int len = (int)strlen(_line);\n-    int i;\n-    \/\/ Replace \\t\\r\\n\\f with ' '\n-    for (i=0; i<len; i++) {\n-      if (_line[i] == '\\t' || _line[i] == '\\r' || _line[i] == '\\n' || _line[i] == '\\f') {\n-        _line[i] = ' ';\n-      }\n+void ClassListParser::clean_up_input_line() {\n+  int len = (int)strlen(_line);\n+  int i;\n+  \/\/ Replace \\t\\r\\n\\f with ' '\n+  for (i=0; i<len; i++) {\n+    if (_line[i] == '\\t' || _line[i] == '\\r' || _line[i] == '\\n' || _line[i] == '\\f') {\n+      _line[i] = ' ';\n@@ -190,0 +182,1 @@\n+  }\n@@ -191,8 +184,7 @@\n-    \/\/ Remove trailing newline\/space\n-    while (len > 0) {\n-      if (_line[len-1] == ' ') {\n-        _line[len-1] = '\\0';\n-        len --;\n-      } else {\n-        break;\n-      }\n+  \/\/ Remove trailing newline\/space\n+  while (len > 0) {\n+    if (_line[len-1] == ' ') {\n+      _line[len-1] = '\\0';\n+      len --;\n+    } else {\n+      break;\n@@ -200,1 +192,0 @@\n-    _line_len = len;\n@@ -202,0 +193,2 @@\n+  _line_len = len;\n+}\n@@ -203,0 +196,1 @@\n+void ClassListParser::read_class_name_and_attributes() {\n@@ -209,6 +203,0 @@\n-  _indy_items->clear();\n-  _lambda_form_line = false;\n-\n-  if (_line[0] == '@') {\n-    return parse_at_tags();\n-  }\n@@ -217,2 +205,2 @@\n-    \/\/ No optional arguments are specified.\n-    return true;\n+    \/\/ No optional attributes are specified.\n+    return;\n@@ -260,1 +248,0 @@\n-  return true;\n@@ -263,1 +250,1 @@\n-void ClassListParser::split_tokens_by_whitespace(int offset) {\n+void ClassListParser::split_tokens_by_whitespace(int offset, GrowableArray<const char*>* items) {\n@@ -276,1 +263,1 @@\n-    _indy_items->append(_line + start);\n+    items->append(_line + start);\n@@ -293,1 +280,1 @@\n-bool ClassListParser::parse_at_tags() {\n+void ClassListParser::parse_at_tags(TRAPS) {\n@@ -295,4 +282,2 @@\n-  int offset;\n-  if ((offset = split_at_tag_from_line()) == 0) {\n-    return false;\n-  }\n+  int offset = split_at_tag_from_line();\n+  assert(offset > 0, \"would have exited VM\");\n@@ -301,1 +286,2 @@\n-    split_tokens_by_whitespace(offset);\n+    _indy_items->clear();\n+    split_tokens_by_whitespace(offset, _indy_items);\n@@ -304,1 +290,0 @@\n-      return false;\n@@ -306,3 +291,9 @@\n-    \/\/ set the class name\n-    _class_name = _indy_items->at(0);\n-    return true;\n+    if (!parse_lambda_forms_invokers_only()) {\n+      _class_name = _indy_items->at(0);\n+      check_class_name(_class_name);\n+      TempNewSymbol class_name_symbol = SymbolTable::new_symbol(_class_name);\n+      if (_indy_items->length() > 0) {\n+        \/\/ The current line is \"@lambda-proxy class_name\". Load the proxy class.\n+        resolve_indy(THREAD, class_name_symbol);\n+      }\n+    }\n@@ -311,2 +302,0 @@\n-    _lambda_form_line = true;\n-    return true;\n@@ -315,1 +304,0 @@\n-    return false;\n@@ -444,0 +432,1 @@\n+  va_end(ap);\n@@ -446,1 +435,0 @@\n-  va_end(ap);\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":92,"deletions":104,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -107,1 +107,0 @@\n-  bool                _lambda_form_line;\n@@ -123,1 +122,3 @@\n-  bool parse_one_line();\n+  void clean_up_input_line();\n+  void read_class_name_and_attributes();\n+  void parse_class_name_and_attributes(TRAPS);\n@@ -132,1 +133,1 @@\n-  static int parse_classlist(const char* classlist_path, ParseMode parse_mode, TRAPS) {\n+  static void parse_classlist(const char* classlist_path, ParseMode parse_mode, TRAPS) {\n@@ -134,1 +135,1 @@\n-    return parser.parse(THREAD); \/\/ returns the number of classes loaded.\n+    parser.parse(THREAD);\n@@ -144,2 +145,2 @@\n-  int parse(TRAPS);\n-  void split_tokens_by_whitespace(int offset);\n+  void parse(TRAPS);\n+  void split_tokens_by_whitespace(int offset, GrowableArray<const char*>* items);\n@@ -147,1 +148,1 @@\n-  bool parse_at_tags();\n+  void parse_at_tags(TRAPS);\n@@ -157,0 +158,3 @@\n+  bool parse_lambda_forms_invokers_only() {\n+    return _parse_mode == _parse_lambda_forms_invokers_only;\n+  }\n@@ -187,2 +191,0 @@\n-  bool lambda_form_line() { return _lambda_form_line; }\n-\n","filename":"src\/hotspot\/share\/cds\/classListParser.hpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -740,2 +740,2 @@\n-  int class_count = ClassListParser::parse_classlist(classlist_path,\n-                                                     ClassListParser::_parse_all, CHECK);\n+  ClassListParser::parse_classlist(classlist_path,\n+                                   ClassListParser::_parse_all, CHECK);\n@@ -743,2 +743,2 @@\n-    class_count += ClassListParser::parse_classlist(ExtraSharedClassListFile,\n-                                                    ClassListParser::_parse_all, CHECK);\n+    ClassListParser::parse_classlist(ExtraSharedClassListFile,\n+                                     ClassListParser::_parse_all, CHECK);\n@@ -750,2 +750,2 @@\n-      class_count += ClassListParser::parse_classlist(default_classlist,\n-                                                      ClassListParser::_parse_lambda_forms_invokers_only, CHECK);\n+      ClassListParser::parse_classlist(default_classlist,\n+                                       ClassListParser::_parse_lambda_forms_invokers_only, CHECK);\n@@ -761,1 +761,0 @@\n-  log_info(cds)(\"Shared spaces: preloaded %d classes\", class_count);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}