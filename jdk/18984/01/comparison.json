{"files":[{"patch":"@@ -113,0 +113,5 @@\n+\/\/ Cast from int value to narrow type\n+#define CHECKED_CAST(result, T, thing)      \\\n+  result = static_cast<T>(thing); \\\n+  assert(static_cast<int>(result) == thing, \"failed: %d != %d\", static_cast<int>(result), thing);\n+\n@@ -124,1 +129,2 @@\n-  uint total_size;\n+  uint total_nm_size;\n+  uint total_immut_size;\n@@ -129,2 +135,2 @@\n-  uint scopes_data_size;\n-  uint scopes_pcs_size;\n+  uint oops_size;\n+  uint metadata_size;\n@@ -132,1 +138,0 @@\n-  uint handler_table_size;\n@@ -134,0 +139,3 @@\n+  uint handler_table_size;\n+  uint scopes_pcs_size;\n+  uint scopes_data_size;\n@@ -138,2 +146,0 @@\n-  uint oops_size;\n-  uint metadata_size;\n@@ -143,1 +149,2 @@\n-    total_size          += nm->size();\n+    total_nm_size       += nm->size();\n+    total_immut_size    += nm->immutable_data_size();\n@@ -163,1 +170,5 @@\n-    if (total_size != 0)          tty->print_cr(\" total in heap  = %u (100%%)\", total_size);\n+    uint total_size = total_nm_size + total_immut_size;\n+    if (total_nm_size != 0) {\n+      tty->print_cr(\" total size      = %u (100%%)\", total_size);\n+      tty->print_cr(\" in CodeCache    = %u (%f%%)\", total_nm_size, (total_nm_size * 100.0f)\/total_size);\n+    }\n@@ -165,12 +176,21 @@\n-    if (nmethod_count != 0)       tty->print_cr(\" header         = %u (%f%%)\", header_size, (header_size * 100.0f)\/total_size);\n-    if (relocation_size != 0)     tty->print_cr(\" relocation     = %u (%f%%)\", relocation_size, (relocation_size * 100.0f)\/total_size);\n-    if (consts_size != 0)         tty->print_cr(\" constants      = %u (%f%%)\", consts_size, (consts_size * 100.0f)\/total_size);\n-    if (insts_size != 0)          tty->print_cr(\" main code      = %u (%f%%)\", insts_size, (insts_size * 100.0f)\/total_size);\n-    if (stub_size != 0)           tty->print_cr(\" stub code      = %u (%f%%)\", stub_size, (stub_size * 100.0f)\/total_size);\n-    if (oops_size != 0)           tty->print_cr(\" oops           = %u (%f%%)\", oops_size, (oops_size * 100.0f)\/total_size);\n-    if (metadata_size != 0)       tty->print_cr(\" metadata       = %u (%f%%)\", metadata_size, (metadata_size * 100.0f)\/total_size);\n-    if (scopes_data_size != 0)    tty->print_cr(\" scopes data    = %u (%f%%)\", scopes_data_size, (scopes_data_size * 100.0f)\/total_size);\n-    if (scopes_pcs_size != 0)     tty->print_cr(\" scopes pcs     = %u (%f%%)\", scopes_pcs_size, (scopes_pcs_size * 100.0f)\/total_size);\n-    if (dependencies_size != 0)   tty->print_cr(\" dependencies   = %u (%f%%)\", dependencies_size, (dependencies_size * 100.0f)\/total_size);\n-    if (handler_table_size != 0)  tty->print_cr(\" handler table  = %u (%f%%)\", handler_table_size, (handler_table_size * 100.0f)\/total_size);\n-    if (nul_chk_table_size != 0)  tty->print_cr(\" nul chk table  = %u (%f%%)\", nul_chk_table_size, (nul_chk_table_size * 100.0f)\/total_size);\n+    if (nmethod_count != 0) {\n+      tty->print_cr(\"   header        = %u (%f%%)\", header_size, (header_size * 100.0f)\/total_nm_size);\n+    }\n+    if (relocation_size != 0) {\n+      tty->print_cr(\"   relocation    = %u (%f%%)\", relocation_size, (relocation_size * 100.0f)\/total_nm_size);\n+    }\n+    if (consts_size != 0) {\n+      tty->print_cr(\"   constants     = %u (%f%%)\", consts_size, (consts_size * 100.0f)\/total_nm_size);\n+    }\n+    if (insts_size != 0) {\n+      tty->print_cr(\"   main code     = %u (%f%%)\", insts_size, (insts_size * 100.0f)\/total_nm_size);\n+    }\n+    if (stub_size != 0) {\n+      tty->print_cr(\"   stub code     = %u (%f%%)\", stub_size, (stub_size * 100.0f)\/total_nm_size);\n+    }\n+    if (oops_size != 0) {\n+      tty->print_cr(\"   oops          = %u (%f%%)\", oops_size, (oops_size * 100.0f)\/total_nm_size);\n+    }\n+    if (metadata_size != 0) {\n+      tty->print_cr(\"   metadata      = %u (%f%%)\", metadata_size, (metadata_size * 100.0f)\/total_nm_size);\n+    }\n@@ -178,2 +198,26 @@\n-    if (speculations_size != 0)   tty->print_cr(\" speculations   = %u (%f%%)\", speculations_size, (speculations_size * 100.0f)\/total_size);\n-    if (jvmci_data_size != 0)     tty->print_cr(\" JVMCI data     = %u (%f%%)\", jvmci_data_size, (jvmci_data_size * 100.0f)\/total_size);\n+    if (jvmci_data_size != 0) {\n+      tty->print_cr(\"   JVMCI data    = %u (%f%%)\", jvmci_data_size, (jvmci_data_size * 100.0f)\/total_nm_size);\n+    }\n+#endif\n+    if (total_immut_size != 0) {\n+      tty->print_cr(\" immutable data  = %u (%f%%)\", total_immut_size, (total_immut_size * 100.0f)\/total_size);\n+    }\n+    if (dependencies_size != 0) {\n+      tty->print_cr(\"   dependencies  = %u (%f%%)\", dependencies_size, (dependencies_size * 100.0f)\/total_immut_size);\n+    }\n+    if (nul_chk_table_size != 0) {\n+      tty->print_cr(\"   nul chk table = %u (%f%%)\", nul_chk_table_size, (nul_chk_table_size * 100.0f)\/total_immut_size);\n+    }\n+    if (handler_table_size != 0) {\n+      tty->print_cr(\"   handler table = %u (%f%%)\", handler_table_size, (handler_table_size * 100.0f)\/total_immut_size);\n+    }\n+    if (scopes_pcs_size != 0) {\n+      tty->print_cr(\"   scopes pcs    = %u (%f%%)\", scopes_pcs_size, (scopes_pcs_size * 100.0f)\/total_immut_size);\n+    }\n+    if (scopes_data_size != 0) {\n+      tty->print_cr(\"   scopes data   = %u (%f%%)\", scopes_data_size, (scopes_data_size * 100.0f)\/total_immut_size);\n+    }\n+#if INCLUDE_JVMCI\n+    if (speculations_size != 0) {\n+      tty->print_cr(\"   speculations  = %u (%f%%)\", speculations_size, (speculations_size * 100.0f)\/total_immut_size);\n+    }\n@@ -1104,0 +1148,1 @@\n+  int nmethod_size = CodeBlob::allocation_size(code_buffer, sizeof(nmethod));\n@@ -1105,1 +1150,3 @@\n-  int jvmci_data_size = compiler->is_jvmci() ? jvmci_data->size() : 0;\n+    if (compiler->is_jvmci()) {\n+      nmethod_size += align_up(jvmci_data->size(), oopSize);\n+    }\n@@ -1107,3 +1154,3 @@\n-  int nmethod_size =\n-    CodeBlob::allocation_size(code_buffer, sizeof(nmethod))\n-    + adjust_pcs_size(debug_info->pcs_size())\n+\n+  int immutable_data_size =\n+      adjust_pcs_size(debug_info->pcs_size())\n@@ -1115,1 +1162,0 @@\n-    + align_up(jvmci_data_size                   , oopSize)\n@@ -1118,0 +1164,10 @@\n+\n+  \/\/ First, allocate space for immutable data in C heap.\n+  address immutable_data = nullptr;\n+  if (immutable_data_size > 0) {\n+    immutable_data = (address)os::malloc(immutable_data_size, mtCode);\n+    if (immutable_data == nullptr) {\n+      vm_exit_out_of_memory(immutable_data_size, OOM_MALLOC_ERROR, \"nmethod: no space for immutable data\");\n+      return nullptr;\n+    }\n+  }\n@@ -1122,7 +1178,4 @@\n-    nmethod(method(), compiler->type(), nmethod_size, compile_id, entry_bci, offsets,\n-            orig_pc_offset, debug_info, dependencies, code_buffer, frame_size,\n-            oop_maps,\n-            handler_table,\n-            nul_chk_table,\n-            compiler,\n-            comp_level\n+    nmethod(method(), compiler->type(), nmethod_size, immutable_data_size,\n+            compile_id, entry_bci, immutable_data, offsets, orig_pc_offset,\n+            debug_info, dependencies, code_buffer, frame_size, oop_maps,\n+            handler_table, nul_chk_table, compiler, comp_level\n@@ -1199,3 +1252,1 @@\n-  _entry_offset          = checked_cast<uint16_t>(offsets->value(CodeOffsets::Entry));\n-  _verified_entry_offset = checked_cast<uint16_t>(offsets->value(CodeOffsets::Verified_Entry));\n-  _stub_offset           = content_offset() + code_buffer->total_offset_of(code_buffer->stubs());\n+  _stub_offset = content_offset() + code_buffer->total_offset_of(code_buffer->stubs());\n@@ -1203,1 +1254,3 @@\n-  _skipped_instructions_size = checked_cast<uint16_t>(code_buffer->total_skipped_instructions_size());\n+  CHECKED_CAST(_entry_offset,              uint16_t, (offsets->value(CodeOffsets::Entry)));\n+  CHECKED_CAST(_verified_entry_offset,     uint16_t, (offsets->value(CodeOffsets::Verified_Entry)));\n+  CHECKED_CAST(_skipped_instructions_size, uint16_t, (code_buffer->total_skipped_instructions_size()));\n@@ -1265,6 +1318,2 @@\n-    _metadata_offset         = checked_cast<uint16_t>(align_up(code_buffer->total_oop_size(), oopSize));\n-    _dependencies_offset     = checked_cast<uint16_t>(_metadata_offset + align_up(code_buffer->total_metadata_size(), wordSize));\n-    _scopes_pcs_offset       = _dependencies_offset;\n-    _scopes_data_offset      = _scopes_pcs_offset;\n-    _handler_table_offset    = _scopes_data_offset;\n-    _nul_chk_table_offset    = _handler_table_offset;\n+    CHECKED_CAST(_metadata_offset, uint16_t, (align_up(code_buffer->total_oop_size(), oopSize)));\n+    int data_end_offset = _metadata_offset + align_up(code_buffer->total_metadata_size(), wordSize);\n@@ -1272,5 +1321,3 @@\n-    _speculations_offset     = _nul_chk_table_offset;\n-    _jvmci_data_offset       = _speculations_offset;\n-    DEBUG_ONLY( int data_end_offset = _jvmci_data_offset; )\n-#else\n-    DEBUG_ONLY( int data_end_offset = _nul_chk_table_offset; )\n+    \/\/ jvmci_data_size is 0 in native wrapper but we need to set offset\n+    \/\/ to correctly calculate metadata_end address\n+    CHECKED_CAST(_jvmci_data_offset, uint16_t, data_end_offset);\n@@ -1280,0 +1327,11 @@\n+    \/\/ native wrapper does not have read-only data but we need unique not null address\n+    _immutable_data          = data_end();\n+    _immutable_data_size     = 0;\n+    _nul_chk_table_offset    = 0;\n+    _handler_table_offset    = 0;\n+    _scopes_pcs_offset       = 0;\n+    _scopes_data_offset      = 0;\n+#if INCLUDE_JVMCI\n+    _speculations_offset     = 0;\n+#endif\n+\n@@ -1346,0 +1404,1 @@\n+  int immutable_data_size,\n@@ -1348,0 +1407,1 @@\n+  address immutable_data,\n@@ -1424,1 +1484,5 @@\n-      _unwind_handler_offset = code_offset() + offsets->value(CodeOffsets::UnwindHandler);\n+      \/\/ C1 generates UnwindHandler at the end of instructions section.\n+      \/\/ Calculate positive offset as distance between the start of stubs section\n+      \/\/ (which is also the end of instructions section) and the start of the handler.\n+      int unwind_handler_offset = code_offset() + offsets->value(CodeOffsets::UnwindHandler);\n+      CHECKED_CAST(_unwind_handler_offset, int16_t, (_stub_offset - unwind_handler_offset));\n@@ -1428,6 +1492,3 @@\n-    _metadata_offset      = checked_cast<uint16_t>(align_up(code_buffer->total_oop_size(), oopSize));\n-    _dependencies_offset  = checked_cast<uint16_t>(_metadata_offset     + align_up(code_buffer->total_metadata_size(), wordSize));\n-    _scopes_pcs_offset    = checked_cast<uint16_t>(_dependencies_offset + align_up((int)dependencies->size_in_bytes(), oopSize));\n-    _scopes_data_offset   = _scopes_pcs_offset    + adjust_pcs_size(debug_info->pcs_size());\n-    _handler_table_offset = _scopes_data_offset   + align_up(debug_info->data_size       (), oopSize);\n-    _nul_chk_table_offset = _handler_table_offset + align_up(handler_table->size_in_bytes(), oopSize);\n+    CHECKED_CAST(_metadata_offset, uint16_t, (align_up(code_buffer->total_oop_size(), oopSize)));\n+    int metadata_end_offset = _metadata_offset + align_up(code_buffer->total_metadata_size(), wordSize);\n+\n@@ -1435,2 +1496,1 @@\n-    _speculations_offset  = _nul_chk_table_offset + align_up(nul_chk_table->size_in_bytes(), oopSize);\n-    _jvmci_data_offset    = _speculations_offset  + align_up(speculations_len, oopSize);\n+    CHECKED_CAST(_jvmci_data_offset, uint16_t, metadata_end_offset);\n@@ -1438,1 +1498,1 @@\n-    DEBUG_ONLY( int data_end_offset = _jvmci_data_offset    + align_up(jvmci_data_size, oopSize); )\n+    DEBUG_ONLY( int data_end_offset = _jvmci_data_offset  + align_up(jvmci_data_size, oopSize); )\n@@ -1440,1 +1500,1 @@\n-    DEBUG_ONLY( int data_end_offset = _nul_chk_table_offset + align_up(nul_chk_table->size_in_bytes(), oopSize); )\n+    DEBUG_ONLY( int data_end_offset = metadata_end_offset; )\n@@ -1442,1 +1502,24 @@\n-    assert((data_offset() + data_end_offset) <= nmethod_size, \"wrong nmethod's size: %d < %d\", nmethod_size, (data_offset() + data_end_offset));\n+    assert((data_offset() + data_end_offset) <= nmethod_size, \"wrong nmethod's size: %d > %d\",\n+           (data_offset() + data_end_offset), nmethod_size);\n+\n+    _immutable_data_size  = immutable_data_size;\n+    if (immutable_data_size > 0) {\n+      assert(immutable_data != nullptr, \"required\");\n+      _immutable_data     = immutable_data;\n+    } else {\n+      \/\/ We need unique not null address\n+      _immutable_data     = data_end();\n+    }\n+    CHECKED_CAST(_nul_chk_table_offset, uint16_t, (align_up((int)dependencies->size_in_bytes(), oopSize)));\n+    CHECKED_CAST(_handler_table_offset, uint16_t, (_nul_chk_table_offset + align_up(nul_chk_table->size_in_bytes(), oopSize)));\n+    _scopes_pcs_offset    = _handler_table_offset + align_up(handler_table->size_in_bytes(), oopSize);\n+    _scopes_data_offset   = _scopes_pcs_offset    + adjust_pcs_size(debug_info->pcs_size());\n+\n+#if INCLUDE_JVMCI\n+    _speculations_offset  = _scopes_data_offset   + align_up(debug_info->data_size(), oopSize);\n+    DEBUG_ONLY( int immutable_data_end_offset = _speculations_offset  + align_up(speculations_len, oopSize); )\n+#else\n+    DEBUG_ONLY( int immutable_data_end_offset = _scopes_data_offset + align_up(debug_info->data_size(), oopSize); )\n+#endif\n+    assert(immutable_data_end_offset <= immutable_data_size, \"wrong read-only data size: %d > %d\",\n+           immutable_data_end_offset, immutable_data_size);\n@@ -2050,0 +2133,4 @@\n+  if (_immutable_data != data_end()) {\n+    os::free(_immutable_data);\n+    _immutable_data = data_end(); \/\/ Valid not null address\n+  }\n@@ -2682,1 +2769,1 @@\n-  PcDesc* lower = lower_incl;     \/\/ this is initial sentiel\n+  PcDesc* lower = lower_incl;     \/\/ this is initial sentinel\n@@ -3005,8 +3092,10 @@\n-  if (scopes_data_size  () > 0) st->print_cr(\" scopes data    [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n-                                             p2i(scopes_data_begin()),\n-                                             p2i(scopes_data_end()),\n-                                             scopes_data_size());\n-  if (scopes_pcs_size   () > 0) st->print_cr(\" scopes pcs     [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n-                                             p2i(scopes_pcs_begin()),\n-                                             p2i(scopes_pcs_end()),\n-                                             scopes_pcs_size());\n+#if INCLUDE_JVMCI\n+  if (jvmci_data_size   () > 0) st->print_cr(\" JVMCI data     [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n+                                             p2i(jvmci_data_begin()),\n+                                             p2i(jvmci_data_end()),\n+                                             jvmci_data_size());\n+#endif\n+  if (immutable_data_size() > 0) st->print_cr(\" immutable data [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n+                                             p2i(immutable_data_begin()),\n+                                             p2i(immutable_data_end()),\n+                                             immutable_data_size());\n@@ -3017,4 +3106,0 @@\n-  if (handler_table_size() > 0) st->print_cr(\" handler table  [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n-                                             p2i(handler_table_begin()),\n-                                             p2i(handler_table_end()),\n-                                             handler_table_size());\n@@ -3025,0 +3110,12 @@\n+  if (handler_table_size() > 0) st->print_cr(\" handler table  [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n+                                             p2i(handler_table_begin()),\n+                                             p2i(handler_table_end()),\n+                                             handler_table_size());\n+  if (scopes_pcs_size   () > 0) st->print_cr(\" scopes pcs     [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n+                                             p2i(scopes_pcs_begin()),\n+                                             p2i(scopes_pcs_end()),\n+                                             scopes_pcs_size());\n+  if (scopes_data_size  () > 0) st->print_cr(\" scopes data    [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n+                                             p2i(scopes_data_begin()),\n+                                             p2i(scopes_data_end()),\n+                                             scopes_data_size());\n@@ -3030,4 +3127,0 @@\n-  if (jvmci_data_size   () > 0) st->print_cr(\" JVMCI data     [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n-                                             p2i(jvmci_data_begin()),\n-                                             p2i(jvmci_data_end()),\n-                                             jvmci_data_size());\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":171,"deletions":78,"binary":false,"changes":249,"status":"modified"},{"patch":"@@ -198,0 +198,3 @@\n+  \/\/ nmethod's read-only data\n+  address _immutable_data;\n+\n@@ -214,0 +217,1 @@\n+  int      _immutable_data_size;\n@@ -227,3 +231,4 @@\n-  \/\/ Offset of the unwind handler if it exists\n-  int _unwind_handler_offset;\n-\n+  \/\/ Offset (from insts_end) of the unwind handler if it exists\n+  int16_t  _unwind_handler_offset;\n+  \/\/ Number of arguments passed on the stack\n+  uint16_t _num_stack_arg_slots;\n@@ -232,0 +237,1 @@\n+  \/\/ Offsets in mutable data section\n@@ -234,2 +240,9 @@\n-  uint16_t _dependencies_offset;\n-  uint16_t _scopes_pcs_offset;\n+#if INCLUDE_JVMCI\n+  uint16_t _jvmci_data_offset;\n+#endif\n+\n+  \/\/ Offset in immutable data section\n+  \/\/ _dependencies_offset == 0\n+  uint16_t _nul_chk_table_offset;\n+  uint16_t _handler_table_offset; \/\/ This table could be big in C1 code\n+  int      _scopes_pcs_offset;\n@@ -237,2 +250,0 @@\n-  int      _handler_table_offset;\n-  int      _nul_chk_table_offset;\n@@ -241,1 +252,0 @@\n-  int      _jvmci_data_offset;\n@@ -252,2 +262,0 @@\n-  uint16_t     _num_stack_arg_slots;   \/\/ Number of arguments passed on the stack\n-\n@@ -310,0 +318,1 @@\n+          int immutable_data_size,\n@@ -312,0 +321,1 @@\n+          address immutable_data,\n@@ -527,4 +537,1 @@\n-  address unwind_handler_begin  () const { return _unwind_handler_offset != -1 ? (header_begin() + _unwind_handler_offset) : nullptr; }\n-\n-  oop*    oops_begin            () const { return (oop*)    data_begin(); }\n-  oop*    oops_end              () const { return (oop*)   (data_begin() + _metadata_offset)          ; }\n+  address unwind_handler_begin  () const { return _unwind_handler_offset != -1 ? (insts_end() - _unwind_handler_offset) : nullptr; }\n@@ -532,0 +539,3 @@\n+  \/\/ mutable data\n+  oop*    oops_begin            () const { return (oop*)        data_begin(); }\n+  oop*    oops_end              () const { return (oop*)       (data_begin() + _metadata_offset)      ; }\n@@ -533,11 +543,20 @@\n-  Metadata** metadata_end       () const { return (Metadata**) (data_begin() + _dependencies_offset)  ; }\n-\n-  address dependencies_begin    () const { return           data_begin() + _dependencies_offset       ; }\n-  address dependencies_end      () const { return           data_begin() + _scopes_pcs_offset         ; }\n-  PcDesc* scopes_pcs_begin      () const { return (PcDesc*)(data_begin() + _scopes_pcs_offset)        ; }\n-  PcDesc* scopes_pcs_end        () const { return (PcDesc*)(data_begin() + _scopes_data_offset)       ; }\n-  address scopes_data_begin     () const { return           data_begin() + _scopes_data_offset        ; }\n-  address scopes_data_end       () const { return           data_begin() + _handler_table_offset      ; }\n-  address handler_table_begin   () const { return           data_begin() + _handler_table_offset      ; }\n-  address handler_table_end     () const { return           data_begin() + _nul_chk_table_offset      ; }\n-  address nul_chk_table_begin   () const { return           data_begin() + _nul_chk_table_offset      ; }\n+#if INCLUDE_JVMCI\n+  Metadata** metadata_end       () const { return (Metadata**) (data_begin() + _jvmci_data_offset)    ; }\n+  address jvmci_data_begin      () const { return               data_begin() + _jvmci_data_offset     ; }\n+  address jvmci_data_end        () const { return               data_end(); }\n+#else\n+  Metadata** metadata_end       () const { return (Metadata**)  data_end(); }\n+#endif\n+\n+  \/\/ immutable data\n+  address immutable_data_begin  () const { return           _immutable_data; }\n+  address immutable_data_end    () const { return           _immutable_data + _immutable_data_size ; }\n+  address dependencies_begin    () const { return           _immutable_data; }\n+  address dependencies_end      () const { return           _immutable_data + _nul_chk_table_offset; }\n+  address nul_chk_table_begin   () const { return           _immutable_data + _nul_chk_table_offset; }\n+  address nul_chk_table_end     () const { return           _immutable_data + _handler_table_offset; }\n+  address handler_table_begin   () const { return           _immutable_data + _handler_table_offset; }\n+  address handler_table_end     () const { return           _immutable_data + _scopes_pcs_offset   ; }\n+  PcDesc* scopes_pcs_begin      () const { return (PcDesc*)(_immutable_data + _scopes_pcs_offset)  ; }\n+  PcDesc* scopes_pcs_end        () const { return (PcDesc*)(_immutable_data + _scopes_data_offset) ; }\n+  address scopes_data_begin     () const { return           _immutable_data + _scopes_data_offset  ; }\n@@ -546,5 +565,3 @@\n-  address nul_chk_table_end     () const { return           data_begin() + _speculations_offset       ; }\n-  address speculations_begin    () const { return           data_begin() + _speculations_offset       ; }\n-  address speculations_end      () const { return           data_begin() + _jvmci_data_offset         ; }\n-  address jvmci_data_begin      () const { return           data_begin() + _jvmci_data_offset         ; }\n-  address jvmci_data_end        () const { return           data_end(); }\n+  address scopes_data_end       () const { return           _immutable_data + _speculations_offset ; }\n+  address speculations_begin    () const { return           _immutable_data + _speculations_offset ; }\n+  address speculations_end      () const { return            immutable_data_end(); }\n@@ -552,1 +569,1 @@\n-  address nul_chk_table_end     () const { return           data_end(); }\n+  address scopes_data_end       () const { return            immutable_data_end(); }\n@@ -556,10 +573,11 @@\n-  int consts_size       () const { return int(          consts_end       () -           consts_begin       ()); }\n-  int insts_size        () const { return int(          insts_end        () -           insts_begin        ()); }\n-  int stub_size         () const { return int(          stub_end         () -           stub_begin         ()); }\n-  int oops_size         () const { return int((address) oops_end         () - (address) oops_begin         ()); }\n-  int metadata_size     () const { return int((address) metadata_end     () - (address) metadata_begin     ()); }\n-  int scopes_data_size  () const { return int(          scopes_data_end  () -           scopes_data_begin  ()); }\n-  int scopes_pcs_size   () const { return int((intptr_t)scopes_pcs_end   () - (intptr_t)scopes_pcs_begin   ()); }\n-  int dependencies_size () const { return int(          dependencies_end () -           dependencies_begin ()); }\n-  int handler_table_size() const { return int(          handler_table_end() -           handler_table_begin()); }\n-  int nul_chk_table_size() const { return int(          nul_chk_table_end() -           nul_chk_table_begin()); }\n+  int immutable_data_size() const { return _immutable_data_size; }\n+  int consts_size        () const { return int(          consts_end       () -           consts_begin       ()); }\n+  int insts_size         () const { return int(          insts_end        () -           insts_begin        ()); }\n+  int stub_size          () const { return int(          stub_end         () -           stub_begin         ()); }\n+  int oops_size          () const { return int((address) oops_end         () - (address) oops_begin         ()); }\n+  int metadata_size      () const { return int((address) metadata_end     () - (address) metadata_begin     ()); }\n+  int scopes_data_size   () const { return int(          scopes_data_end  () -           scopes_data_begin  ()); }\n+  int scopes_pcs_size    () const { return int((intptr_t)scopes_pcs_end   () - (intptr_t)scopes_pcs_begin   ()); }\n+  int dependencies_size  () const { return int(          dependencies_end () -           dependencies_begin ()); }\n+  int handler_table_size () const { return int(          handler_table_end() -           handler_table_begin()); }\n+  int nul_chk_table_size () const { return int(          nul_chk_table_end() -           nul_chk_table_begin()); }\n@@ -567,2 +585,2 @@\n-  int speculations_size () const { return int(          speculations_end () -           speculations_begin ()); }\n-  int jvmci_data_size   () const { return int(          jvmci_data_end   () -           jvmci_data_begin   ()); }\n+  int speculations_size  () const { return int(          speculations_end () -           speculations_begin ()); }\n+  int jvmci_data_size    () const { return int(          jvmci_data_end   () -           jvmci_data_begin   ()); }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":61,"deletions":43,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -579,1 +579,1 @@\n-  nonstatic_field(nmethod,                     _scopes_pcs_offset,                            u2)                                    \\\n+  nonstatic_field(nmethod,                     _scopes_pcs_offset,                            int)                                    \\\n@@ -581,3 +581,2 @@\n-  nonstatic_field(nmethod,                     _dependencies_offset,                          u2)                                    \\\n-  nonstatic_field(nmethod,                     _handler_table_offset,                         int)                                   \\\n-  nonstatic_field(nmethod,                     _nul_chk_table_offset,                         int)                                   \\\n+  nonstatic_field(nmethod,                     _handler_table_offset,                         u2)                                    \\\n+  nonstatic_field(nmethod,                     _nul_chk_table_offset,                         u2)                                    \\\n@@ -587,0 +586,2 @@\n+  nonstatic_field(nmethod,                     _immutable_data,                               address)                               \\\n+  nonstatic_field(nmethod,                     _immutable_data_size,                          int)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+  private static AddressField  immutableDataField;\n+  private static CIntegerField immutableDataSizeField;\n@@ -53,2 +55,3 @@\n-  private static CIntField     dependenciesOffsetField;\n-  private static CIntField     scopesPCsOffsetField;\n+  private static CIntField     handlerTableOffsetField;\n+  private static CIntField     nulChkTableOffsetField;\n+  private static CIntegerField scopesPCsOffsetField;\n@@ -56,2 +59,0 @@\n-  private static CIntegerField handlerTableOffsetField;\n-  private static CIntegerField nulChkTableOffsetField;\n@@ -85,0 +86,2 @@\n+    immutableDataField          = type.getAddressField(\"_immutable_data\");\n+    immutableDataSizeField      = type.getCIntegerField(\"_immutable_data_size\");\n@@ -92,2 +95,1 @@\n-    dependenciesOffsetField     = new CIntField(type.getCIntegerField(\"_dependencies_offset\"), 0);\n-    scopesPCsOffsetField        = new CIntField(type.getCIntegerField(\"_scopes_pcs_offset\"), 0);\n+    scopesPCsOffsetField        = type.getCIntegerField(\"_scopes_pcs_offset\");\n@@ -95,2 +97,2 @@\n-    handlerTableOffsetField     = type.getCIntegerField(\"_handler_table_offset\");\n-    nulChkTableOffsetField      = type.getCIntegerField(\"_nul_chk_table_offset\");\n+    handlerTableOffsetField     = new CIntField(type.getCIntegerField(\"_handler_table_offset\"), 0);\n+    nulChkTableOffsetField      = new CIntField(type.getCIntegerField(\"_nul_chk_table_offset\"), 0);\n@@ -136,12 +138,16 @@\n-  public Address metadataEnd()          { return dataBegin().addOffsetTo(getDependenciesOffset());   }\n-  public Address dependenciesBegin()    { return dataBegin().addOffsetTo(getDependenciesOffset());   }\n-  public Address dependenciesEnd()      { return dataBegin().addOffsetTo(getScopesDataOffset());     }\n-  public Address scopesDataBegin()      { return dataBegin().addOffsetTo(getScopesDataOffset());     }\n-  public Address scopesDataEnd()        { return dataBegin().addOffsetTo(getScopesPCsOffset());      }\n-  public Address scopesPCsBegin()       { return dataBegin().addOffsetTo(getScopesPCsOffset());      }\n-  public Address scopesPCsEnd()         { return dataBegin().addOffsetTo(getHandlerTableOffset());   }\n-  public Address handlerTableBegin()    { return dataBegin().addOffsetTo(getHandlerTableOffset());   }\n-  public Address handlerTableEnd()      { return dataBegin().addOffsetTo(getNulChkTableOffset());    }\n-  public Address nulChkTableBegin()     { return dataBegin().addOffsetTo(getNulChkTableOffset());    }\n-  public Address nulChkTableEnd()       { return dataEnd();                                          }\n-\n+  public Address metadataEnd()          { return dataEnd();                                          }\n+\n+  public Address immutableDataBegin()   { return immutableDataField.getValue(addr);                         }\n+  public Address immutableDataEnd()     { return immutableDataBegin().addOffsetTo(getImmutableDataSize());  }\n+  public Address dependenciesBegin()    { return immutableDataBegin();                                      }\n+  public Address dependenciesEnd()      { return immutableDataBegin().addOffsetTo(getHandlerTableOffset()); }\n+  public Address handlerTableBegin()    { return immutableDataBegin().addOffsetTo(getHandlerTableOffset()); }\n+  public Address handlerTableEnd()      { return immutableDataBegin().addOffsetTo(getNulChkTableOffset());  }\n+  public Address nulChkTableBegin()     { return immutableDataBegin().addOffsetTo(getNulChkTableOffset());  }\n+  public Address nulChkTableEnd()       { return immutableDataBegin().addOffsetTo(getScopesDataOffset());   }\n+  public Address scopesDataBegin()      { return immutableDataBegin().addOffsetTo(getScopesDataOffset());   }\n+  public Address scopesDataEnd()        { return immutableDataBegin().addOffsetTo(getScopesPCsOffset());    }\n+  public Address scopesPCsBegin()       { return immutableDataBegin().addOffsetTo(getScopesPCsOffset());    }\n+  public Address scopesPCsEnd()         { return immutableDataEnd();                                        }\n+\n+  public int getImmutableDataSize()     { return (int) immutableDataSizeField.getValue(addr);        }\n@@ -164,1 +170,4 @@\n-      stubSize()         +\n+      stubSize();\n+  }\n+  public int immutableDataSize() {\n+    return\n@@ -519,1 +528,0 @@\n-  private int getDependenciesOffset() { return (int) dependenciesOffsetField.getValue(addr); }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/NMethod.java","additions":30,"deletions":22,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:NMethodSizeLimit=655360\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestLinearScanOrderMain.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}