{"files":[{"patch":"@@ -54,0 +54,1 @@\n+import sun.java2d.cmm.BuiltinProfileInfo;\n@@ -58,1 +59,0 @@\n-import sun.java2d.cmm.ProfileDeferralInfo;\n@@ -105,4 +105,3 @@\n-     * Stores some information about {@code ICC_Profile} without causing a\n-     * deferred profile to be loaded. Note that we can defer the loading of\n-     * standard profiles only. If this field is null, then {@link #cmmProfile}\n-     * should be used to access profile information.\n+     * Stores information about a built-in profile without triggering profile\n+     * loading. If this field is null, {@link #cmmProfile} should be used to\n+     * access profile data. If not null, the profile is considered immutable.\n@@ -110,9 +109,1 @@\n-    private transient volatile ProfileDeferralInfo deferralInfo;\n-\n-\n-    \/**\n-     * Set to {@code true} for {@code BuiltInProfile}, {@code false} otherwise.\n-     * This flag is used in {@link #setData(int, byte[])} to prevent modifying\n-     * built-in profiles.\n-     *\/\n-    private final transient boolean builtIn;\n+    private transient final BuiltinProfileInfo builtInInfo;\n@@ -127,1 +118,1 @@\n-         * ProfileDeferralInfo is used for built-in profile creation only,\n+         * BuiltinProfileInfo is used for built-in profile creation only,\n@@ -130,1 +121,1 @@\n-        ICC_Profile SRGB = new ICC_ProfileRGB(new ProfileDeferralInfo(\n+        ICC_Profile SRGB = new ICC_ProfileRGB(new BuiltinProfileInfo(\n@@ -133,1 +124,1 @@\n-        ICC_Profile LRGB = new ICC_ProfileRGB(new ProfileDeferralInfo(\n+        ICC_Profile LRGB = new ICC_ProfileRGB(new BuiltinProfileInfo(\n@@ -136,1 +127,1 @@\n-        ICC_Profile XYZ = new ICC_Profile(new ProfileDeferralInfo(\n+        ICC_Profile XYZ = new ICC_Profile(new BuiltinProfileInfo(\n@@ -139,1 +130,1 @@\n-        ICC_Profile PYCC = new ICC_Profile(new ProfileDeferralInfo(\n+        ICC_Profile PYCC = new ICC_Profile(new BuiltinProfileInfo(\n@@ -142,1 +133,1 @@\n-        ICC_Profile GRAY = new ICC_ProfileGray(new ProfileDeferralInfo(\n+        ICC_Profile GRAY = new ICC_ProfileGray(new BuiltinProfileInfo(\n@@ -774,1 +765,1 @@\n-        builtIn = false;\n+        builtInInfo = null;\n@@ -782,1 +773,1 @@\n-     * Note: {@code ProfileDeferralInfo} is used for built-in profile\n+     * Note: {@code BuiltinProfileInfo} is used for built-in profile\n@@ -785,3 +776,2 @@\n-    ICC_Profile(ProfileDeferralInfo pdi) {\n-        deferralInfo = pdi;\n-        builtIn = true;\n+    ICC_Profile(BuiltinProfileInfo bpi) {\n+        builtInInfo = bpi;\n@@ -937,1 +927,1 @@\n-            var is = getStandardProfileInputStream(deferralInfo.filename);\n+            var is = getStandardProfileInputStream(builtInInfo.filename);\n@@ -945,2 +935,0 @@\n-                    \/\/ from now we cannot use the deferred value, drop it\n-                    deferralInfo = null;\n@@ -978,3 +966,2 @@\n-        ProfileDeferralInfo info = deferralInfo;\n-        if (info != null) {\n-            return info.profileClass;\n+        if (builtInInfo != null) {\n+            return builtInInfo.profileClass;\n@@ -1015,3 +1002,2 @@\n-        ProfileDeferralInfo info = deferralInfo;\n-        if (info != null) {\n-            return info.colorSpaceType;\n+        if (builtInInfo != null) {\n+            return builtInInfo.colorSpaceType;\n@@ -1163,2 +1149,2 @@\n-        if (builtIn) {\n-            throw new IllegalArgumentException(\"Built-in profile cannot be modified\");\n+        if (builtInInfo != null) {\n+            throw new IllegalArgumentException(\"Can't modify built-in profile\");\n@@ -1208,3 +1194,2 @@\n-        ProfileDeferralInfo info = deferralInfo;\n-        if (info != null) {\n-            return info.numComponents;\n+        if (builtInInfo != null) {\n+            return builtInInfo.numComponents;\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_Profile.java","additions":24,"deletions":39,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import sun.java2d.cmm.BuiltinProfileInfo;\n@@ -41,1 +42,0 @@\n-import sun.java2d.cmm.ProfileDeferralInfo;\n@@ -90,1 +90,1 @@\n-     * {@code ProfileDeferralInfo} object.\n+     * {@code BuiltinProfileInfo} object.\n@@ -92,2 +92,2 @@\n-    ICC_ProfileGray(ProfileDeferralInfo pdi) {\n-        super(pdi);\n+    ICC_ProfileGray(BuiltinProfileInfo bpi) {\n+        super(bpi);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_ProfileGray.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import sun.java2d.cmm.BuiltinProfileInfo;\n@@ -41,1 +42,0 @@\n-import sun.java2d.cmm.ProfileDeferralInfo;\n@@ -125,3 +125,1 @@\n-     * {@code ProfileDeferralInfo} object.\n-     *\n-     * @param  pdi\n+     * {@code BuiltinProfileInfo} object.\n@@ -129,2 +127,2 @@\n-    ICC_ProfileRGB(ProfileDeferralInfo pdi) {\n-        super(pdi);\n+    ICC_ProfileRGB(BuiltinProfileInfo bpi) {\n+        super(bpi);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_ProfileRGB.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.java2d.cmm;\n+\n+\/**\n+ * Stores information about a built-in profile used by\n+ * ICC_Profile.getInstance(int cspace) to defer the loading of profile data and\n+ * CMM initialization. Since built-in profiles are immutable, this information\n+ * is always valid.\n+ *\/\n+public final class BuiltinProfileInfo {\n+\n+    \/**\n+     * Used by ICC_ColorSpace without triggering built-in profile loading.\n+     *\/\n+    public final int colorSpaceType, numComponents, profileClass;\n+\n+    \/**\n+     * The profile file name, such as \"CIEXYZ.pf\", \"sRGB.pf\", etc.\n+     *\/\n+    public final String filename;\n+\n+    public BuiltinProfileInfo(String fn, int type, int ncomp, int pclass) {\n+        filename = fn;\n+        colorSpaceType = type;\n+        numComponents = ncomp;\n+        profileClass = pclass;\n+    }\n+}\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/BuiltinProfileInfo.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.java2d.cmm;\n-\n-\/**\n- * A class to pass information about a profile to be loaded from a file to the\n- * static getInstance(int cspace) method of ICC_Profile. Loading of the profile\n- * data and initialization of the CMM is to be deferred as long as possible.\n- *\/\n-public final class ProfileDeferralInfo {\n-\n-    \/**\n-     * Need to have this info for ICC_ColorSpace without causing a deferred\n-     * profile to be loaded.\n-     *\/\n-    public final int colorSpaceType, numComponents, profileClass;\n-\n-    \/**\n-     * The profile file name, such as \"CIEXYZ.pf\", \"sRGB.pf\", etc.\n-     *\/\n-    public final String filename;\n-\n-    public ProfileDeferralInfo(String fn, int type, int ncomp, int pclass) {\n-        filename = fn;\n-        colorSpaceType = type;\n-        numComponents = ncomp;\n-        profileClass = pclass;\n-    }\n-}\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/ProfileDeferralInfo.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,1 @@\n-            profiles[i].getNumComponents(); \/\/ force header initialization\n+            profiles[i].getMajorVersion(); \/\/ force header initialization\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSTransform.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,3 @@\n- * @bug 8256321\n- * @summary Verifies profile properties are the same before\/after activation\n+ * @bug 8256321 8359380\n+ * @summary Verifies built-in profile properties are the same before and after\n+ *          activation and in copies of built-in profiles\n@@ -49,6 +50,9 @@\n-        \/\/ check default values, before profile activation\n-        test(srgb, TYPE_RGB, 3, CLASS_DISPLAY);\n-        test(gray, TYPE_GRAY, 1, CLASS_DISPLAY);\n-        test(xyz, TYPE_XYZ, 3, CLASS_ABSTRACT);\n-        test(lrgb, TYPE_RGB, 3, CLASS_DISPLAY);\n-        test(pycc, TYPE_3CLR, 3, CLASS_COLORSPACECONVERSION);\n+        \/\/ checks default values before built-in profiles are activated\n+        test(srgb, gray, xyz, lrgb, pycc);\n+\n+        \/\/ activates built-in profiles and creates copies\n+        ICC_Profile srgbCopy = ICC_Profile.getInstance(srgb.getData());\n+        ICC_Profile grayCopy = ICC_Profile.getInstance(gray.getData());\n+        ICC_Profile xyzCopy = ICC_Profile.getInstance(xyz.getData());\n+        ICC_Profile lrgbCopy = ICC_Profile.getInstance(lrgb.getData());\n+        ICC_Profile pyccCopy = ICC_Profile.getInstance(pycc.getData());\n@@ -56,6 +60,6 @@\n-        \/\/ activate profiles\n-        srgb.getData();\n-        gray.getData();\n-        xyz.getData();\n-        lrgb.getData();\n-        pycc.getData();\n+        \/\/ checks default values after profile activation\n+        test(srgb, gray, xyz, lrgb, pycc);\n+\n+        \/\/ checks default values in copies of the built-in profiles\n+        test(srgbCopy, grayCopy, xyzCopy, lrgbCopy, pyccCopy);\n+    }\n@@ -63,1 +67,3 @@\n-        \/\/ check default values, after profile activation\n+    private static void test(ICC_Profile srgb, ICC_Profile gray,\n+                             ICC_Profile xyz, ICC_Profile lrgb,\n+                             ICC_Profile pycc) {\n","filename":"test\/jdk\/java\/awt\/color\/CheckDefaultProperties.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    private static final String EXCEPTION_MSG = \"Built-in profile cannot be modified\";\n+    private static final String EXCEPTION_MSG = \"Can't modify built-in profile\";\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck\/BuiltInProfileCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.BufferedImageOp;\n+import java.awt.image.ColorConvertOp;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n+\n+\/**\n+ * @test\n+ * @bug 8272860 8359380\n+ * @summary Verifies that ICC_Profile methods work correctly after a\n+ *          ColorConvertOp transformation\n+ * @library \/test\/lib\n+ *\/\n+public final class GetProfileDataAfterTransform {\n+\n+    private static final int[] CSS = {\n+            ColorSpace.CS_CIEXYZ, ColorSpace.CS_GRAY,\n+            ColorSpace.CS_LINEAR_RGB, ColorSpace.CS_PYCC, ColorSpace.CS_sRGB\n+    };\n+\n+    \/**\n+     * The main process records expected get*() values before conversion and\n+     * passes them to a subprocess, which verifies it after the transform.\n+     *\n+     * @param  args If empty, the main process runs all color space pairs and\n+     *         spawns subprocesses. If not empty, args[0] and args[1] are source\n+     *         and target color space constants, followed by expected profile\n+     *         values to validate in the subprocess.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            for (int csFrom : CSS) {\n+                for (int csTo : CSS) {\n+                    var from = (ICC_ColorSpace) ColorSpace.getInstance(csFrom);\n+                    var to = (ICC_ColorSpace) ColorSpace.getInstance(csTo);\n+\n+                    ICC_Profile profileFrom = from.getProfile();\n+                    ICC_Profile profileTo = to.getProfile();\n+\n+                    List<String> cmd = new ArrayList<>();\n+                    cmd.add(GetProfileDataAfterTransform.class.getSimpleName());\n+\n+                    cmd.add(String.valueOf(csFrom));\n+                    cmd.add(String.valueOf(csTo));\n+\n+                    for (ICC_Profile p : List.of(profileFrom, profileTo)) {\n+                        cmd.add(String.valueOf(p.getPCSType()));\n+                        cmd.add(String.valueOf(p.getProfileClass()));\n+                        cmd.add(String.valueOf(p.getMinorVersion()));\n+                        cmd.add(String.valueOf(p.getMajorVersion()));\n+                        cmd.add(String.valueOf(p.getColorSpaceType()));\n+                        cmd.add(String.valueOf(p.getNumComponents()));\n+                    }\n+\n+                    OutputAnalyzer output = ProcessTools.executeTestJava(cmd);\n+                    output.shouldHaveExitValue(0).stdoutShouldBeEmpty()\n+                          .stderrShouldBeEmpty();\n+                }\n+            }\n+        } else {\n+            int csFrom = Integer.parseInt(args[0]);\n+            int csTo = Integer.parseInt(args[1]);\n+            var from = (ICC_ColorSpace) ColorSpace.getInstance(csFrom);\n+            var to = (ICC_ColorSpace) ColorSpace.getInstance(csTo);\n+\n+            BufferedImageOp op = new ColorConvertOp(from, to, null);\n+            \/\/ Note from.getProfile() and to.getProfile() are not loaded yet!\n+            op.filter(new BufferedImage(10, 10, TYPE_INT_RGB),\n+                      new BufferedImage(10, 10, TYPE_INT_RGB));\n+\n+            test(from.getProfile(), args, 2);\n+            test(to.getProfile(), args, 8);\n+        }\n+    }\n+\n+    private static void test(ICC_Profile profile, String[] args, int offset) {\n+        \/\/ Uncomment when JDK-8272860 is fixed\n+        \/\/ if (profile.getData() == null) {\n+        \/\/    throw new RuntimeException(\"Profile data is null\");\n+        \/\/ }\n+        if (profile.getPCSType() != Integer.parseInt(args[offset++])) {\n+            throw new RuntimeException(\"Wrong PCStype\");\n+        }\n+        if (profile.getProfileClass() != Integer.parseInt(args[offset++])) {\n+            throw new RuntimeException(\"Wrong ProfileClass\");\n+        }\n+        if (profile.getMinorVersion() != Integer.parseInt(args[offset++])) {\n+            throw new RuntimeException(\"Wrong MinorVersion\");\n+        }\n+        if (profile.getMajorVersion() != Integer.parseInt(args[offset++])) {\n+            throw new RuntimeException(\"Wrong MajorVersion\");\n+        }\n+        if (profile.getColorSpaceType() != Integer.parseInt(args[offset++])) {\n+            throw new RuntimeException(\"Wrong ColorSpaceType\");\n+        }\n+        if (profile.getNumComponents() != Integer.parseInt(args[offset])) {\n+            throw new RuntimeException(\"Wrong NumComponents\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/GetProfileDataAfterTransform.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}