{"files":[{"patch":"@@ -70,1 +70,1 @@\n-     * @return a new function descriptor, with the provided additional argument layouts.\n+     * @return a new function descriptor, with the provided additional argument layouts\n@@ -80,1 +80,1 @@\n-     * @return a new function descriptor, with the provided additional argument layouts.\n+     * @return a new function descriptor, with the provided additional argument layouts\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/FunctionDescriptor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -584,1 +584,1 @@\n-     *         in the provided layout.\n+     *         in the provided layout\n@@ -898,1 +898,1 @@\n-     * @return this segment.\n+     * @return this segment\n@@ -954,1 +954,1 @@\n-     *         segment, e.g. if {@code isMapped() == false}.\n+     *         segment, e.g. if {@code isMapped() == false}\n@@ -1122,1 +1122,1 @@\n-     * @return a new int array whose contents are copied from this memory segment.\n+     * @return a new int array whose contents are copied from this memory segment\n@@ -1147,1 +1147,1 @@\n-     *         {@code byteSize() \/ 4 > Integer.MAX_VALUE}.\n+     *         {@code byteSize() \/ 4 > Integer.MAX_VALUE}\n@@ -1180,1 +1180,1 @@\n-     *         such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1183,1 +1183,1 @@\n-     *         {@code byteSize() \/ 8 > Integer.MAX_VALUE}.\n+     *         {@code byteSize() \/ 8 > Integer.MAX_VALUE}\n@@ -1202,1 +1202,1 @@\n-     *         largest string supported by the platform.\n+     *         largest string supported by the platform\n@@ -1270,1 +1270,1 @@\n-     *         such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1578,1 +1578,1 @@\n-     *         this segment is not {@linkplain Scope#isAlive() alive}.\n+     *         this segment is not {@linkplain Scope#isAlive() alive}\n@@ -1580,1 +1580,1 @@\n-     *         such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1616,1 +1616,1 @@\n-     *         this segment is not {@linkplain Scope#isAlive() alive}.\n+     *         this segment is not {@linkplain Scope#isAlive() alive}\n@@ -1618,1 +1618,1 @@\n-     *         such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1654,1 +1654,1 @@\n-     *         this segment is not {@linkplain Scope#isAlive() alive}.\n+     *         this segment is not {@linkplain Scope#isAlive() alive}\n@@ -1656,1 +1656,1 @@\n-     *         such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1692,1 +1692,1 @@\n-     *         this segment is not {@linkplain Scope#isAlive() alive}.\n+     *         this segment is not {@linkplain Scope#isAlive() alive}\n@@ -1694,1 +1694,1 @@\n-     *         such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1730,1 +1730,1 @@\n-     *         this segment is not {@linkplain Scope#isAlive() alive}.\n+     *         this segment is not {@linkplain Scope#isAlive() alive}\n@@ -1732,1 +1732,1 @@\n-     *         such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -1932,1 +1932,1 @@\n-     * @return a byte value read from this segment.\n+     * @return a byte value read from this segment\n@@ -2324,1 +2324,1 @@\n-     *         this segment is not {@linkplain Scope#isAlive() alive}.\n+     *         this segment is not {@linkplain Scope#isAlive() alive}\n@@ -2326,1 +2326,1 @@\n-     *         such that {@code isAccessibleBy(T) == false}.\n+     *         such that {@code isAccessibleBy(T) == false}\n@@ -2330,5 +2330,5 @@\n-     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows.\n-     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}.\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n-     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain #isNative() native} segment.\n+     * @throws IllegalArgumentException if {@code layout.byteAlignment() > layout.byteSize()}\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize()} overflows\n+     * @throws IndexOutOfBoundsException if {@code index * layout.byteSize() > byteSize() - layout.byteSize()}\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain #isNative() native} segment\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-     * {@return a new memory segment initialized with the provided char value.}\n+     * {@return a new memory segment initialized with the provided char value}\n@@ -386,1 +386,1 @@\n-     *         in the source element layout.\n+     *         in the source element layout\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-     *         sequence layouts.\n+     *         sequence layouts\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-     *         the symbol, if found.\n+     *         the symbol, if found\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-     *          layout, in a given memory segment.}\n+     *          layout, in a given memory segment}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}