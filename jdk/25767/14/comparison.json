{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,5 @@\n+ * If the image source parameter to a constructor is non-null,\n+ * but does not reference valid accessible image data,\n+ * no exceptions will be thrown but the image will be 'effectively' null,\n+ * as it will have no dimensions and never be drawn, and\n+ * getImageLoadStatus() will report ERRORED.\n@@ -179,0 +184,1 @@\n+     * Passing {@code null} URL will result in {@code NullPointerException}.\n@@ -197,0 +203,1 @@\n+     * Passing {@code null} URL will result in {@code NullPointerException}.\n@@ -208,0 +215,1 @@\n+     * Passing {@code null} Image will result in {@code NullPointerException}.\n@@ -220,0 +228,1 @@\n+     * Passing {@code null} Image will result in {@code NullPointerException}.\n@@ -240,0 +249,1 @@\n+     * Passing {@code null} imageData will result in {@code NullPointerException}.\n@@ -264,0 +274,1 @@\n+     * Passing {@code null} imageData will result in {@code NullPointerException}.\n@@ -370,0 +381,3 @@\n+     * Setting a {@code null} image means\n+     * any existing icon will be removed\n+     * and no icon will be rendered.\n@@ -374,0 +388,5 @@\n+        if (image == null) {\n+            width = -1;\n+            height = -1;\n+            return;\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/ImageIcon.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,222 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8159055\n+ * @summary Verifies ImageIcon.setImage handles null parameter\n+ * @run main ImageIconNullImageTest\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Random;\n+import java.awt.image.BufferedImage;\n+import java.awt.Image;\n+import java.awt.Toolkit;\n+import javax.swing.ImageIcon;\n+\n+public class ImageIconNullImageTest {\n+    static File file;\n+\n+    public static void main(String[] args) throws Exception {\n+        testImageIconFileDesc(false);\n+        testImageIconFile(false);\n+        testImageIconURLDesc(false);\n+        testImageIconURL(false);\n+        testImageIconImageDesc(false);\n+        testImageIconNull();\n+        testImageIconByteDesc(false);\n+        testImageIconByte(false);\n+        testSetImageNull();\n+        testInvalid();\n+    }\n+\n+    private static void testInvalid() throws Exception {\n+        try {\n+            String imgName = \"invalid.gif\";\n+            byte[] invalidData = new byte[100];\n+            new Random().nextBytes(invalidData);\n+            try (FileOutputStream fos = new FileOutputStream(imgName)) {\n+                fos.write(invalidData);\n+            }\n+            file = new File(System.getProperty(\"test.src\", \".\"), imgName);\n+            testImageIconFileDesc(true);\n+            testImageIconFile(true);\n+            testImageIconURLDesc(true);\n+            testImageIconURL(true);\n+            testImageIconImageDesc(true);\n+            testImageIconByteDesc(true);\n+            testImageIconByte(true);\n+        } finally {\n+            file.deleteOnExit();\n+        }\n+    }\n+\n+    private static void testImageIconFileDesc(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            try {\n+                new ImageIcon((String)null, \"gif\");\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(FileName,Desc) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon(file.getName(), \"gif\");\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(FileName,Desc) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconFile(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            try {\n+                new ImageIcon((String)null);\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(FileName) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon(file.getName());\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(FileName) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconURLDesc(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            try {\n+                new ImageIcon((java.net.URL)null, \"gif\");\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(URL, Desc) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon(\"file:\/\/invalid.gif\", \"gif\");\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(URL, Desc) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconURL(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            try {\n+                new ImageIcon((java.net.URL)null);\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(URL) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon(\"file:\/\/invalid.gif\");\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(URL) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconImageDesc(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            try {\n+                new ImageIcon((Image) null, \"gif\");\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(Image, Desc) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon((Image)\n+                        Toolkit.getDefaultToolkit().createImage(file.getName()), \"gif\");\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(Image, Desc) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconNull() {\n+        \/\/ Passing null image shouldn't cause NPE\n+        try {\n+            new ImageIcon((Image) null);\n+        } catch (NullPointerException e) {\n+            System.out.println(\"null ImageIcon(image) throws NPE\");\n+        }\n+    }\n+\n+    private static void testImageIconByteDesc(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            byte[] imageData = null;\n+            try {\n+                new ImageIcon(imageData, \"gif\");\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(byte[], desc) throws NPE\");\n+            }\n+        } else {\n+            try {\n+               ImageIcon icon = new ImageIcon(new byte[0], \"gif\");\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(byte[], desc) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconByte(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            byte[] imageData = null;\n+            try {\n+                new ImageIcon(imageData);\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(byte[]) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon(new byte[0]);\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(byte[], desc) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testSetImageNull() {\n+        ImageIcon icon = new ImageIcon();\n+\n+        \/\/ Passing null image shouldn't cause NPE\n+        icon.setImage(null);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/ImageIcon\/ImageIconNullImageTest.java","additions":222,"deletions":0,"binary":false,"changes":222,"status":"added"}]}