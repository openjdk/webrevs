{"files":[{"patch":"@@ -64,0 +64,5 @@\n+ * If the image source parameter to a constructor is non-null,\n+ * but does not reference valid accessible image data,\n+ * no exceptions will be thrown but the image will be 'effectively' null,\n+ * as it will have no dimensions and never be drawn, and\n+ * getImageLoadStatus() will report ERRORED.\n@@ -179,0 +184,1 @@\n+     * Passing {@code null} URL will result in {@code NullPointerException}.\n@@ -197,0 +203,1 @@\n+     * Passing {@code null} URL will result in {@code NullPointerException}.\n@@ -208,0 +215,1 @@\n+     * Passing {@code null} Image will result in {@code NullPointerException}.\n@@ -220,0 +228,1 @@\n+     * Passing {@code null} Image will result in {@code NullPointerException}.\n@@ -240,0 +249,1 @@\n+     * Passing {@code null} imageData will result in {@code NullPointerException}.\n@@ -264,0 +274,1 @@\n+     * Passing {@code null} imageData will result in {@code NullPointerException}.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/ImageIcon.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,6 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Random;\n+import java.awt.image.BufferedImage;\n@@ -32,0 +38,1 @@\n+import java.awt.Toolkit;\n@@ -35,0 +42,1 @@\n+    static File file;\n@@ -37,0 +45,8 @@\n+        testImageIconFileDesc(false);\n+        testImageIconFile(false);\n+        testImageIconURLDesc(false);\n+        testImageIconURL(false);\n+        testImageIconImageDesc(false);\n+        testImageIconNull();\n+        testImageIconByteDesc(false);\n+        testImageIconByte(false);\n@@ -38,0 +54,160 @@\n+        testInvalid();\n+    }\n+\n+    private static void testInvalid() throws Exception {\n+        try {\n+            String imgName = \"invalid.gif\";\n+            byte[] invalidData = new byte[100];\n+            new Random().nextBytes(invalidData);\n+            try (FileOutputStream fos = new FileOutputStream(imgName)) {\n+                fos.write(invalidData);\n+            }\n+            file = new File(System.getProperty(\"test.src\", \".\"), imgName);\n+            testImageIconFileDesc(true);\n+            testImageIconFile(true);\n+            testImageIconURLDesc(true);\n+            testImageIconURL(true);\n+            testImageIconImageDesc(true);\n+            testImageIconByteDesc(true);\n+            testImageIconByte(true);\n+        } finally {\n+            file.deleteOnExit();\n+        }\n+    }\n+\n+    private static void testImageIconFileDesc(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            try {\n+                new ImageIcon((String)null, \"gif\");\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(FileName,Desc) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon(file.getName(), \"gif\");\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(FileName,Desc) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconFile(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            try {\n+                new ImageIcon((String)null);\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(FileName) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon(file.getName());\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(FileName) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconURLDesc(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            try {\n+                new ImageIcon((java.net.URL)null, \"gif\");\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(URL, Desc) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon(\"file:\/\/invalid.gif\", \"gif\");\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(URL, Desc) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconURL(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            try {\n+                new ImageIcon((java.net.URL)null);\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(URL) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon(\"file:\/\/invalid.gif\");\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(URL) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconImageDesc(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            try {\n+                new ImageIcon((Image) null, \"gif\");\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(Image, Desc) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon((Image)\n+                        Toolkit.getDefaultToolkit().createImage(file.getName()), \"gif\");\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(Image, Desc) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconNull() {\n+        \/\/ Passing null image shouldn't cause NPE\n+        try {\n+            new ImageIcon((Image) null);\n+        } catch (NullPointerException e) {\n+            System.out.println(\"null ImageIcon(image) throws NPE\");\n+        }\n+    }\n+\n+    private static void testImageIconByteDesc(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            byte[] imageData = null;\n+            try {\n+                new ImageIcon(imageData, \"gif\");\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(byte[], desc) throws NPE\");\n+            }\n+        } else {\n+            try {\n+               ImageIcon icon = new ImageIcon(new byte[0], \"gif\");\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(byte[], desc) throws NPE\");\n+            }\n+        }\n+    }\n+\n+    private static void testImageIconByte(boolean invalid) {\n+        \/\/ Passing null image shouldn't cause NPE\n+        if (!invalid) {\n+            byte[] imageData = null;\n+            try {\n+                new ImageIcon(imageData);\n+            } catch (NullPointerException e) {\n+                System.out.println(\"null ImageIcon(byte[]) throws NPE\");\n+            }\n+        } else {\n+            try {\n+                ImageIcon icon = new ImageIcon(new byte[0]);\n+                System.out.println(icon.getImageLoadStatus());\n+            } catch (NullPointerException e) {\n+                System.out.println(\"invalid ImageIcon(byte[], desc) throws NPE\");\n+            }\n+        }\n","filename":"test\/jdk\/javax\/swing\/ImageIcon\/ImageIconNullImageTest.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"modified"}]}