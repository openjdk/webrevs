{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,5 @@\n+ * If the image source parameter to a constructor is non-null,\n+ * but does not reference valid accessible image data,\n+ * no exceptions will be thrown but the image will be 'effectively' null,\n+ * as it will have no dimensions and never be drawn, and\n+ * getImageLoadStatus() will report {@see java.awt.MediaTracker#ERRORED}.\n@@ -179,0 +184,1 @@\n+     * Passing {@code null} URL will result in {@code NullPointerException}.\n@@ -197,0 +203,1 @@\n+     * Passing {@code null} URL will result in {@code NullPointerException}.\n@@ -208,0 +215,1 @@\n+     * Passing a {@code null} Image will result in {@code NullPointerException}.\n@@ -220,0 +228,1 @@\n+     * Passing a {@code null} Image will result in {@code NullPointerException}.\n@@ -240,0 +249,1 @@\n+     * Passing {@code null} imageData will result in {@code NullPointerException}.\n@@ -264,0 +274,1 @@\n+     * Passing {@code null} imageData will result in {@code NullPointerException}.\n@@ -370,0 +381,1 @@\n+     * Passing a {@code null} Image will result in {@code NullPointerException}.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/ImageIcon.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8159055\n+ * @summary Verifies ImageIcon.setImage handles null parameter\n+ * @run main ImageIconTest\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.net.URL;\n+import java.util.Random;\n+import java.awt.Image;\n+import java.awt.Toolkit;\n+import javax.swing.ImageIcon;\n+\n+public class ImageIconTest {\n+\n+    static enum ArgType { FILE, URL, BYTEARRAY, IMAGE };\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        String s = null;\n+        byte[] b = null;\n+        Image i = null;\n+        URL u = null;\n+        String imgName = \"invalid.gif\";\n+        byte[] invalidData = new byte[100];\n+        new Random().nextBytes(invalidData);\n+        try (FileOutputStream fos = new FileOutputStream(imgName)) {\n+            fos.write(invalidData);\n+        }\n+        File file = new File(System.getProperty(\"test.src\", \".\"), imgName);\n+\n+        for (ArgType a : ArgType.values()) {\n+            for (final boolean invalid : new boolean[]{false, true}) {\n+                System.out.println(\"Testing for ArgType \" + a + \" for nullcase \" + invalid);\n+                boolean expected = true;\n+                boolean passed = false;\n+                try {\n+                    switch (a) {\n+                       case FILE :\n+                           expected = false;\n+                           if (!invalid) {\n+                               new ImageIcon((String)null);\n+                           } else {\n+                               new ImageIcon(file.getName(), \"gif\");\n+                           }\n+                           passed = true; \/\/ no exception expected for this case\n+                           break;\n+                       case URL :\n+                           if (!invalid) {\n+                               new ImageIcon((URL)null);\n+                           } else {\n+                               expected = false;\n+                               new ImageIcon(\"file:\/\/invalid.gif\", \"gif\");\n+                               passed = true; \/\/ no exception expected for this case\n+                           }\n+                           break;\n+                       case BYTEARRAY :\n+                           if (!invalid) {\n+                               byte[] bytes = null;\n+                               new ImageIcon(bytes);\n+                           } else {\n+                               expected = false;\n+                               new ImageIcon(new byte[0], \"gif\");\n+                               passed = true; \/\/ no exception expected for this case\n+                           }\n+                           break;\n+                       case IMAGE :\n+                           if (!invalid) {\n+                               new ImageIcon((Image)null);\n+                           } else {\n+                               expected = false;\n+                               new ImageIcon((Image)Toolkit.getDefaultToolkit().\n+                                              createImage(file.getName()), \"gif\");\n+                               passed = true; \/\/ no exception expected for this case\n+                           }\n+                           break;\n+                    }\n+                } catch (NullPointerException e) {\n+                    if (expected) {\n+                        passed = true;\n+                    }\n+                } catch (Exception ex) {\n+                    if (expected) {\n+                        passed = true;\n+                    }\n+                }\n+                if (expected && !passed) {\n+                   System.err.println(\"Did not receive expected exception for : \" + a);\n+                   throw new RuntimeException(\"Test failed\");\n+                }\n+                if (!expected && !passed) {\n+                   System.err.println(\"Received unexpected exception for : \" + a);\n+                   throw new RuntimeException(\"Test failed\");\n+                }\n+            }\n+        }\n+\n+        \/\/ test setter\n+        try {\n+            ImageIcon ii = new ImageIcon();\n+            ii.setImage((Image)null);\n+            throw new RuntimeException(\"No NPE\");\n+        } catch (NullPointerException e) {\n+            \/\/ expected\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/ImageIcon\/ImageIconTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}