{"files":[{"patch":"@@ -1,222 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8159055\n- * @summary Verifies ImageIcon.setImage handles null parameter\n- * @run main ImageIconNullImageTest\n- *\/\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.util.Random;\n-import java.awt.image.BufferedImage;\n-import java.awt.Image;\n-import java.awt.Toolkit;\n-import javax.swing.ImageIcon;\n-\n-public class ImageIconNullImageTest {\n-    static File file;\n-\n-    public static void main(String[] args) throws Exception {\n-        testImageIconFileDesc(false);\n-        testImageIconFile(false);\n-        testImageIconURLDesc(false);\n-        testImageIconURL(false);\n-        testImageIconImageDesc(false);\n-        testImageIconNull();\n-        testImageIconByteDesc(false);\n-        testImageIconByte(false);\n-        testSetImageNull();\n-        testInvalid();\n-    }\n-\n-    private static void testInvalid() throws Exception {\n-        try {\n-            String imgName = \"invalid.gif\";\n-            byte[] invalidData = new byte[100];\n-            new Random().nextBytes(invalidData);\n-            try (FileOutputStream fos = new FileOutputStream(imgName)) {\n-                fos.write(invalidData);\n-            }\n-            file = new File(System.getProperty(\"test.src\", \".\"), imgName);\n-            testImageIconFileDesc(true);\n-            testImageIconFile(true);\n-            testImageIconURLDesc(true);\n-            testImageIconURL(true);\n-            testImageIconImageDesc(true);\n-            testImageIconByteDesc(true);\n-            testImageIconByte(true);\n-        } finally {\n-            file.deleteOnExit();\n-        }\n-    }\n-\n-    private static void testImageIconFileDesc(boolean invalid) {\n-        \/\/ Passing null image shouldn't cause NPE\n-        if (!invalid) {\n-            try {\n-                new ImageIcon((String)null, \"gif\");\n-            } catch (NullPointerException e) {\n-                System.out.println(\"null ImageIcon(FileName,Desc) throws NPE\");\n-            }\n-        } else {\n-            try {\n-                ImageIcon icon = new ImageIcon(file.getName(), \"gif\");\n-                System.out.println(icon.getImageLoadStatus());\n-            } catch (NullPointerException e) {\n-                System.out.println(\"invalid ImageIcon(FileName,Desc) throws NPE\");\n-            }\n-        }\n-    }\n-\n-    private static void testImageIconFile(boolean invalid) {\n-        \/\/ Passing null image shouldn't cause NPE\n-        if (!invalid) {\n-            try {\n-                new ImageIcon((String)null);\n-            } catch (NullPointerException e) {\n-                System.out.println(\"null ImageIcon(FileName) throws NPE\");\n-            }\n-        } else {\n-            try {\n-                ImageIcon icon = new ImageIcon(file.getName());\n-                System.out.println(icon.getImageLoadStatus());\n-            } catch (NullPointerException e) {\n-                System.out.println(\"invalid ImageIcon(FileName) throws NPE\");\n-            }\n-        }\n-    }\n-\n-    private static void testImageIconURLDesc(boolean invalid) {\n-        \/\/ Passing null image shouldn't cause NPE\n-        if (!invalid) {\n-            try {\n-                new ImageIcon((java.net.URL)null, \"gif\");\n-            } catch (NullPointerException e) {\n-                System.out.println(\"null ImageIcon(URL, Desc) throws NPE\");\n-            }\n-        } else {\n-            try {\n-                ImageIcon icon = new ImageIcon(\"file:\/\/invalid.gif\", \"gif\");\n-                System.out.println(icon.getImageLoadStatus());\n-            } catch (NullPointerException e) {\n-                System.out.println(\"invalid ImageIcon(URL, Desc) throws NPE\");\n-            }\n-        }\n-    }\n-\n-    private static void testImageIconURL(boolean invalid) {\n-        \/\/ Passing null image shouldn't cause NPE\n-        if (!invalid) {\n-            try {\n-                new ImageIcon((java.net.URL)null);\n-            } catch (NullPointerException e) {\n-                System.out.println(\"null ImageIcon(URL) throws NPE\");\n-            }\n-        } else {\n-            try {\n-                ImageIcon icon = new ImageIcon(\"file:\/\/invalid.gif\");\n-                System.out.println(icon.getImageLoadStatus());\n-            } catch (NullPointerException e) {\n-                System.out.println(\"invalid ImageIcon(URL) throws NPE\");\n-            }\n-        }\n-    }\n-\n-    private static void testImageIconImageDesc(boolean invalid) {\n-        \/\/ Passing null image shouldn't cause NPE\n-        if (!invalid) {\n-            try {\n-                new ImageIcon((Image) null, \"gif\");\n-            } catch (NullPointerException e) {\n-                System.out.println(\"null ImageIcon(Image, Desc) throws NPE\");\n-            }\n-        } else {\n-            try {\n-                ImageIcon icon = new ImageIcon((Image)\n-                        Toolkit.getDefaultToolkit().createImage(file.getName()), \"gif\");\n-                System.out.println(icon.getImageLoadStatus());\n-            } catch (NullPointerException e) {\n-                System.out.println(\"invalid ImageIcon(Image, Desc) throws NPE\");\n-            }\n-        }\n-    }\n-\n-    private static void testImageIconNull() {\n-        \/\/ Passing null image shouldn't cause NPE\n-        try {\n-            new ImageIcon((Image) null);\n-        } catch (NullPointerException e) {\n-            System.out.println(\"null ImageIcon(image) throws NPE\");\n-        }\n-    }\n-\n-    private static void testImageIconByteDesc(boolean invalid) {\n-        \/\/ Passing null image shouldn't cause NPE\n-        if (!invalid) {\n-            byte[] imageData = null;\n-            try {\n-                new ImageIcon(imageData, \"gif\");\n-            } catch (NullPointerException e) {\n-                System.out.println(\"null ImageIcon(byte[], desc) throws NPE\");\n-            }\n-        } else {\n-            try {\n-               ImageIcon icon = new ImageIcon(new byte[0], \"gif\");\n-                System.out.println(icon.getImageLoadStatus());\n-            } catch (NullPointerException e) {\n-                System.out.println(\"invalid ImageIcon(byte[], desc) throws NPE\");\n-            }\n-        }\n-    }\n-\n-    private static void testImageIconByte(boolean invalid) {\n-        \/\/ Passing null image shouldn't cause NPE\n-        if (!invalid) {\n-            byte[] imageData = null;\n-            try {\n-                new ImageIcon(imageData);\n-            } catch (NullPointerException e) {\n-                System.out.println(\"null ImageIcon(byte[]) throws NPE\");\n-            }\n-        } else {\n-            try {\n-                ImageIcon icon = new ImageIcon(new byte[0]);\n-                System.out.println(icon.getImageLoadStatus());\n-            } catch (NullPointerException e) {\n-                System.out.println(\"invalid ImageIcon(byte[], desc) throws NPE\");\n-            }\n-        }\n-    }\n-\n-    private static void testSetImageNull() {\n-        ImageIcon icon = new ImageIcon();\n-\n-        \/\/ Passing null image shouldn't cause NPE\n-        icon.setImage(null);\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/ImageIcon\/ImageIconNullImageTest.java","additions":0,"deletions":222,"binary":false,"changes":222,"status":"deleted"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8159055\n+ * @summary Verifies ImageIcon.setImage handles null parameter\n+ * @run main ImageIconTest\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.net.URL;\n+import java.util.Random;\n+import java.awt.Image;\n+import java.awt.Toolkit;\n+import javax.swing.ImageIcon;\n+\n+public class ImageIconTest {\n+\n+    static enum ArgType { FILE, URL, BYTEARRAY, IMAGE };\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        String s = null;\n+        byte[] b = null;\n+        Image i = null;\n+        URL u = null;\n+        String imgName = \"invalid.gif\";\n+        byte[] invalidData = new byte[100];\n+        new Random().nextBytes(invalidData);\n+        try (FileOutputStream fos = new FileOutputStream(imgName)) {\n+            fos.write(invalidData);\n+        }\n+        File file = new File(System.getProperty(\"test.src\", \".\"), imgName);\n+\n+        for (ArgType a : ArgType.values()) {\n+            for (final boolean invalid : new boolean[]{false, true}) {\n+                System.out.println(\"Testing for ArgType \" + a + \" for nullcase \" + invalid);\n+                boolean expected = true;\n+                boolean passed = false;\n+                try {\n+                    switch (a) {\n+                       case FILE :\n+                           expected = false;\n+                           if (!invalid) {\n+                               new ImageIcon((String)null);\n+                           } else {\n+                               new ImageIcon(file.getName(), \"gif\");\n+                           }\n+                           passed = true; \/\/ no exception expected for this case\n+                           break;\n+                       case URL :\n+                           if (!invalid) {\n+                               new ImageIcon((URL)null);\n+                           } else {\n+                               expected = false;\n+                               new ImageIcon(\"file:\/\/invalid.gif\", \"gif\");\n+                               passed = true; \/\/ no exception expected for this case\n+                           }\n+                           break;\n+                       case BYTEARRAY :\n+                           if (!invalid) {\n+                               byte[] bytes = null;\n+                               new ImageIcon(bytes);\n+                           } else {\n+                               expected = false;\n+                               new ImageIcon(new byte[0], \"gif\");\n+                               passed = true; \/\/ no exception expected for this case\n+                           }\n+                           break;\n+                       case IMAGE :\n+                           if (!invalid) {\n+                               new ImageIcon((Image)null);\n+                           } else {\n+                               expected = false;\n+                               new ImageIcon((Image)Toolkit.getDefaultToolkit().\n+                                              createImage(file.getName()), \"gif\");\n+                               passed = true; \/\/ no exception expected for this case\n+                           }\n+                           break;\n+                    }\n+                } catch (NullPointerException e) {\n+                    if (expected) {\n+                        passed = true;\n+                    }\n+                } catch (Exception ex) {\n+                    if (expected) {\n+                        passed = true;\n+                    }\n+                }\n+                if (expected && !passed) {\n+                   System.err.println(\"Did not receive expected exception for : \" + a);\n+                   throw new RuntimeException(\"Test failed\");\n+                }\n+                if (!expected && !passed) {\n+                   System.err.println(\"Received unexpected exception for : \" + a);\n+                   throw new RuntimeException(\"Test failed\");\n+                }\n+            }\n+        }\n+\n+        \/\/ test setter\n+        try {\n+            ImageIcon ii = new ImageIcon();\n+            ii.setImage((Image)null);\n+            throw new RuntimeException(\"No NPE\");\n+        } catch (NullPointerException e) {\n+            \/\/ expected\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/ImageIcon\/ImageIconTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}