{"files":[{"patch":"@@ -525,1 +525,3 @@\n-  _igvn.replace_node(multiversion_slow_proj, region);\n+  \/\/ The lazy_replace ensures that any get_ctrl that used to have multiversion_slow_proj\n+  \/\/ as their control are forwarded to the new region node as their control.\n+  lazy_replace(multiversion_slow_proj, region);\n","filename":"src\/hotspot\/share\/opto\/loopUnswitch.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8369898\n+ * @summary Bug in PhaseIdealLoop::create_new_if_for_multiversion, that messed up the\n+ *          _loop_or_ctrl data structure while doing SuperWord for a first loop, and\n+ *          then get_ctrl asserted for a second loop that was also SuperWord-ed in the\n+ *          same loop-opts-phase.\n+ * @run main\/othervm\n+ *      -XX:CompileCommand=compileonly,*TestMultiversionSlowProjReplacementAndGetCtrl::test\n+ *      -XX:CompileCommand=exclude,*TestMultiversionSlowProjReplacementAndGetCtrl::dontinline\n+ *      -XX:-TieredCompilation\n+ *      -Xbatch\n+ *      compiler.loopopts.superword.TestMultiversionSlowProjReplacementAndGetCtrl\n+ * @run main compiler.loopopts.superword.TestMultiversionSlowProjReplacementAndGetCtrl\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+public class TestMultiversionSlowProjReplacementAndGetCtrl {\n+    static final int N = 400;\n+\n+    static void dontinline() {}\n+\n+    static long test() {\n+        int x = 0;\n+        int arrayI[] = new int[N];\n+        byte[] arrayB = new byte[N];\n+        dontinline();\n+        \/\/ CallStaticJava for dontinline\n+        \/\/ -> memory Proj\n+        \/\/ -> it is used in both the k-indexed and j-indexed loops by their loads\/stores.\n+        for (int k = 8; k < 92; ++k) {\n+            \/\/ Loop here is multiversioned, and eventually we insert an aliasing runtime check.\n+            \/\/ This means that a StoreN (with mem input Proj from above) has its ctrl changed\n+            \/\/ from the old multiversion_if_proj to a new region. We have to be careful to update\n+            \/\/ the _loop_or_ctrl side-table so that get_ctrl for StoreN is sane.\n+            \/\/\n+            \/\/ Below is some nested loop material I could not reduce further. Maybe because\n+            \/\/ of loop-opts phase timing. Because we have to SuperWord the k-indexed loop\n+            \/\/ above in the same loop-opts-phase as the j-indexed loop below, so that they\n+            \/\/ have a shared _loop_or_ctrl data structure.\n+            int y = 6;\n+            while (--y > 0) {}\n+            for (long i = 1; i < 6; i++) {\n+                \/\/ I suspect that it is the two array references below that are SuperWord-ed,\n+                \/\/ and since we do not manage to statically prove they cannot overlap, we add\n+                \/\/ a speculative runtime check, i.e. multiversioning in this case.\n+                arrayI[0] += 1;\n+                arrayI[k] = 0;\n+                try {\n+                    x = 2 \/ k % y;\n+                } catch (ArithmeticException a_e) {\n+                }\n+            }\n+        }\n+        long sum = 0;\n+        for (int j = 0; j < arrayB.length; j++) {\n+            \/\/ Load below has mem input from Proj below dontinline\n+            \/\/ We look up to the mem input (Proj), and down to uses\n+            \/\/ that are Stores, checking in_bb on them, which calls\n+            \/\/ get_ctrl on that StoreN from the other loop above.\n+            sum += arrayB[j];\n+        }\n+        return sum;\n+    }\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 1_000; i++) {\n+            test();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMultiversionSlowProjReplacementAndGetCtrl.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}