{"files":[{"patch":"@@ -151,0 +151,1 @@\n+      info.set_has_checked_exclusion();\n@@ -154,1 +155,1 @@\n-        log_info(cds)(\"Skipping %s: Hidden class\", k->name()->as_C_string());\n+        log_debug(cds)(\"Skipping %s: Unreferenced hidden class\", k->name()->as_C_string());\n@@ -210,0 +211,4 @@\n+    if (CDSConfig::is_dumping_final_static_archive() && ik->is_shared_unregistered_class()) {\n+      \/\/ The following are not appliable to unregistered classes\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -47,1 +48,4 @@\n-    if (k->is_loader_alive()) {\n+    if (CDSConfig::is_dumping_final_static_archive() && !k->is_loaded()) {\n+      assert(k->is_shared_unregistered_class(), \"must be\");\n+      function(k, info);\n+    } else if (k->is_loader_alive()) {\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.inline.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -105,1 +105,4 @@\n-      if (!ik->is_shared_unregistered_class() && !ik->is_hidden()) {\n+      if (ik->is_shared_unregistered_class()) {\n+        SystemDictionaryShared::init_dumptime_info(ik);\n+        SystemDictionaryShared::add_unregistered_class(THREAD, ik);\n+      } else if (!ik->is_hidden()) {\n","filename":"src\/hotspot\/share\/cds\/finalImageRecipes.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -831,3 +831,9 @@\n-    oop scratch_mirror = HeapShared::scratch_java_mirror(orig_mirror);\n-    if (scratch_mirror != nullptr) {\n-      _archived_mirror_index = HeapShared::append_root(scratch_mirror);\n+    if (orig_mirror == nullptr) {\n+      assert(CDSConfig::is_dumping_final_static_archive(), \"sanity\");\n+      assert(is_instance_klass(), \"sanity\");\n+      assert(InstanceKlass::cast(this)->is_shared_unregistered_class(), \"sanity\");\n+    } else {\n+      oop scratch_mirror = HeapShared::scratch_java_mirror(orig_mirror);\n+      if (scratch_mirror != nullptr) {\n+        _archived_mirror_index = HeapShared::append_root(scratch_mirror);\n+      }\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n@@ -36,1 +36,1 @@\n- * @build BulkLoaderTest\n+ * @build BulkLoaderTest SimpleCusty\n@@ -39,0 +39,2 @@\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar\n+ *                 SimpleCusty\n@@ -47,1 +49,1 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n@@ -49,1 +51,1 @@\n- * @build jdk.test.whitebox.WhiteBox BulkLoaderTest\n+ * @build jdk.test.whitebox.WhiteBox BulkLoaderTest SimpleCusty\n@@ -52,0 +54,2 @@\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar\n+ *                 SimpleCusty\n@@ -61,1 +65,1 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n@@ -63,1 +67,1 @@\n- * @build BulkLoaderTest\n+ * @build BulkLoaderTest SimpleCusty\n@@ -66,0 +70,2 @@\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar\n+ *                 SimpleCusty\n@@ -71,0 +77,2 @@\n+import java.net.URL;\n+import java.net.URLClassLoader;\n@@ -127,1 +135,1 @@\n-                \"-Xlog:cds,cds+aot+load\",\n+                \"-Xlog:cds,cds+aot+load,cds+class=debug\",\n@@ -144,0 +152,5 @@\n+\n+            if (isDumping(runMode)) {\n+                \/\/ Check that we are archiving classes for custom class loaders.\n+                out.shouldMatch(\"cds,class.* SimpleCusty\");\n+            }\n@@ -155,0 +168,1 @@\n+        checkCustomLoader();\n@@ -278,0 +292,16 @@\n+\n+\n+    static void checkCustomLoader() throws Exception {\n+        Object o = initFromCustomLoader();\n+        System.out.println(o);\n+    }\n+\n+    static Object initFromCustomLoader() throws Exception {\n+        String path = \"cust.jar\";\n+        URL url = new File(path).toURI().toURL();\n+        URL[] urls = new URL[] {url};\n+        URLClassLoader urlClassLoader =\n+            new URLClassLoader(\"MyLoader\", urls, null);\n+        Class c = Class.forName(\"SimpleCusty\", true, urlClassLoader);\n+        return c.newInstance();\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/BulkLoaderTest.java","additions":37,"deletions":7,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-                output.shouldMatch(\"Skipping.LambHello[$][$]Lambda.*0x.*:.Hidden.class\")\n+                output.shouldMatch(\"Skipping.LambHello[$][$]Lambda.*0x.*:.Unreferenced.hidden.class\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaCustomLoader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,2 +62,2 @@\n-                output.shouldMatch(\"Skipping.LambdaHello_0x.*[$][$]Lambda.*:.Hidden.class\")\n-                      .shouldMatch(\"Skipping.LambdaHello.0x.*:.Hidden.class\")\n+                output.shouldMatch(\"Skipping.LambdaHello_0x.*[$][$]Lambda.*:.Unreferenced.hidden.class\")\n+                      .shouldMatch(\"Skipping.LambdaHello.0x.*:.Unreferenced.hidden.class\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaProxyCallerIsHidden.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-                output.shouldMatch(\"cds.*Skipping.TestClass.0x.*Hidden.class\")\n+                output.shouldMatch(\"cds.*Skipping.TestClass.0x.*Unreferenced.hidden.class\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RegularHiddenClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ This class is to be loaded by a custom class loader.\n+public class SimpleCusty {\n+    public String toString() {\n+        return \"Instance of SimpleCusty\";\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/SimpleCusty.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"}]}