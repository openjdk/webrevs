{"files":[{"patch":"@@ -155,1 +155,2 @@\n-      if (log_is_enabled(Info, cds)) {\n+      info.set_has_checked_exclusion();\n+      if (log_is_enabled(Debug, cds)) {\n@@ -157,1 +158,1 @@\n-        log_info(cds)(\"Skipping %s: %s class\", k->name()->as_C_string(),\n+        log_debug(cds)(\"Skipping %s: %s class\", k->name()->as_C_string(),\n@@ -214,0 +215,4 @@\n+    if (CDSConfig::is_dumping_final_static_archive() && ik->is_shared_unregistered_class()) {\n+      \/\/ The following are not appliable to unregistered classes\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -47,1 +48,4 @@\n-    if (k->is_loader_alive()) {\n+    if (CDSConfig::is_dumping_final_static_archive() && !k->is_loaded()) {\n+      assert(k->is_shared_unregistered_class(), \"must be\");\n+      function(k, info);\n+    } else if (k->is_loader_alive()) {\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.inline.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -105,1 +105,5 @@\n-      if (!ik->is_shared_unregistered_class() && !ik->is_hidden()) {\n+      if (ik->is_shared_unregistered_class()) {\n+        SystemDictionaryShared::init_dumptime_info(ik);\n+        SystemDictionaryShared::add_unregistered_class(THREAD, ik);\n+        SystemDictionaryShared::copy_unregistered_class_size_and_crc32(ik);\n+      } else if (!ik->is_hidden()) {\n","filename":"src\/hotspot\/share\/cds\/finalImageRecipes.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -468,0 +468,15 @@\n+void SystemDictionaryShared::copy_unregistered_class_size_and_crc32(InstanceKlass* klass) {\n+  precond(CDSConfig::is_dumping_final_static_archive());\n+  precond(klass->is_shared());\n+\n+  \/\/ A shared class must have a RunTimeClassInfo record\n+  const RunTimeClassInfo* record = find_record(&_static_archive._unregistered_dictionary,\n+                                               nullptr, klass->name());\n+  precond(record != nullptr);\n+  precond(record->klass() == klass);\n+\n+  DumpTimeClassInfo* info = get_info(klass);\n+  info->_clsfile_size = record->crc()->_clsfile_size;\n+  info->_clsfile_crc32 = record->crc()->_clsfile_crc32;\n+}\n+\n@@ -670,1 +685,1 @@\n-  if (CDSConfig::is_dumping_dynamic_archive()) {\n+  if (CDSConfig::is_dumping_dynamic_archive() || CDSConfig::is_dumping_preimage_static_archive()) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -251,0 +251,1 @@\n+  static void copy_unregistered_class_size_and_crc32(InstanceKlass* klass);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -479,0 +479,14 @@\n+  bool update_resolved_reference = true;\n+  if (CDSConfig::is_dumping_final_static_archive()) {\n+    ConstantPool* src_cp = ArchiveBuilder::current()->get_source_addr(this);\n+    InstanceKlass* src_holder = src_cp->pool_holder();\n+    if (src_holder->is_shared_unregistered_class()) {\n+      \/\/ Unregistered classes are not loaded in the AOT assembly phase. The resolved reference length\n+      \/\/ is already saved during the training run.\n+      precond(!src_holder->is_loaded());\n+      precond(resolved_reference_length() >= 0);\n+      precond(resolved_references() == nullptr);\n+      update_resolved_reference = false;\n+    }\n+  }\n+\n@@ -481,1 +495,1 @@\n-  if (cache() != nullptr) {\n+  if (update_resolved_reference && cache() != nullptr) {\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -831,3 +831,9 @@\n-    oop scratch_mirror = HeapShared::scratch_java_mirror(orig_mirror);\n-    if (scratch_mirror != nullptr) {\n-      _archived_mirror_index = HeapShared::append_root(scratch_mirror);\n+    if (orig_mirror == nullptr) {\n+      assert(CDSConfig::is_dumping_final_static_archive(), \"sanity\");\n+      assert(is_instance_klass(), \"sanity\");\n+      assert(InstanceKlass::cast(this)->is_shared_unregistered_class(), \"sanity\");\n+    } else {\n+      oop scratch_mirror = HeapShared::scratch_java_mirror(orig_mirror);\n+      if (scratch_mirror != nullptr) {\n+        _archived_mirror_index = HeapShared::append_root(scratch_mirror);\n+      }\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n@@ -36,1 +36,1 @@\n- * @build BulkLoaderTest\n+ * @build jdk.test.whitebox.WhiteBox BulkLoaderTest SimpleCusty\n@@ -39,0 +39,3 @@\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar\n+ *                 SimpleCusty\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar jdk.test.whitebox.WhiteBox\n@@ -47,1 +50,1 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n@@ -49,1 +52,1 @@\n- * @build jdk.test.whitebox.WhiteBox BulkLoaderTest\n+ * @build jdk.test.whitebox.WhiteBox BulkLoaderTest SimpleCusty\n@@ -52,2 +55,4 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. BulkLoaderTest DYNAMIC\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar\n+ *                 SimpleCusty\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:WhiteBox.jar BulkLoaderTest DYNAMIC\n@@ -61,3 +66,3 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n- * @build InitiatingLoaderTester BadOldClassA BadOldClassB\n- * @build BulkLoaderTest\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build jdk.test.whitebox.WhiteBox InitiatingLoaderTester BadOldClassA BadOldClassB\n+ * @build BulkLoaderTest SimpleCusty\n@@ -66,0 +71,3 @@\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar\n+ *                 SimpleCusty\n@@ -71,0 +79,2 @@\n+import java.net.URL;\n+import java.net.URLClassLoader;\n@@ -79,0 +89,1 @@\n+import jdk.test.whitebox.WhiteBox;\n@@ -117,0 +128,1 @@\n+            useWhiteBox(ClassFileInstaller.getJarPath(\"WhiteBox.jar\"));\n@@ -127,1 +139,1 @@\n-                \"-Xlog:cds,cds+aot+load\",\n+                \"-Xlog:cds,cds+aot+load,cds+class=debug\",\n@@ -143,0 +155,6 @@\n+                out.shouldContain(\"Skipping SimpleCusty: Duplicated unregistered class\");\n+            }\n+\n+            if (isDumping(runMode)) {\n+                \/\/ Check that we are archiving classes for custom class loaders.\n+                out.shouldMatch(\"cds,class.* SimpleCusty\");\n@@ -155,0 +173,1 @@\n+        checkCustomLoader();\n@@ -278,0 +297,32 @@\n+\n+\n+    static void checkCustomLoader() throws Exception {\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        for (int i = 0; i < 2; i++) {\n+            Object o = initFromCustomLoader();\n+            System.out.println(o);\n+            Class c = o.getClass();\n+            if (wb.isSharedClass(BulkLoaderTestApp.class)) {\n+                \/\/ We are running with BulkLoaderTestApp from the AOT cache (or CDS achive)\n+                if (i == 0) {\n+                    if (!wb.isSharedClass(c)) {\n+                        throw new RuntimeException(\"The first loader should load SimpleCusty from AOT cache (or CDS achive)\");\n+                    }\n+                } else {\n+                    if (wb.isSharedClass(c)) {\n+                        throw new RuntimeException(\"The second loader should not load SimpleCusty from AOT cache (or CDS achive)\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    static Object initFromCustomLoader() throws Exception {\n+        String path = \"cust.jar\";\n+        URL url = new File(path).toURI().toURL();\n+        URL[] urls = new URL[] {url};\n+        URLClassLoader urlClassLoader =\n+            new URLClassLoader(\"MyLoader\", urls, null);\n+        Class c = Class.forName(\"SimpleCusty\", true, urlClassLoader);\n+        return c.newInstance();\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/BulkLoaderTest.java","additions":61,"deletions":10,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-                output.shouldMatch(\"Skipping.LambHello[$][$]Lambda.*0x.*:.Hidden.class\")\n+                output.shouldMatch(\"Skipping.LambHello[$][$]Lambda.*0x.*:.Unreferenced.hidden.class\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaCustomLoader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,2 +62,2 @@\n-                output.shouldMatch(\"Skipping.LambdaHello_0x.*[$][$]Lambda.*:.Hidden.class\")\n-                      .shouldMatch(\"Skipping.LambdaHello.0x.*:.Hidden.class\")\n+                output.shouldMatch(\"Skipping.LambdaHello_0x.*[$][$]Lambda.*:.Unreferenced.hidden.class\")\n+                      .shouldMatch(\"Skipping.LambdaHello.0x.*:.Unreferenced.hidden.class\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaProxyCallerIsHidden.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-                output.shouldMatch(\"cds.*Skipping.TestClass.0x.*Hidden.class\")\n+                output.shouldMatch(\"cds.*Skipping.TestClass.0x.*Unreferenced.hidden.class\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RegularHiddenClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ This class is to be loaded by a custom class loader.\n+public class SimpleCusty {\n+    public String toString() {\n+        return \"Instance of SimpleCusty\";\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/SimpleCusty.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -53,0 +53,1 @@\n+    private String whiteBoxJar = null;\n@@ -153,0 +154,4 @@\n+    public final void useWhiteBox(String whiteBoxJar) {\n+        this.whiteBoxJar = whiteBoxJar;\n+    }\n+\n@@ -202,0 +207,6 @@\n+    private String[] addCommonVMArgs(RunMode runMode, String[] cmdLine) {\n+        cmdLine = addClassOrModulePath(runMode, cmdLine);\n+        cmdLine = addWhiteBox(cmdLine);\n+        return cmdLine;\n+    }\n+\n@@ -217,0 +228,10 @@\n+    private String[] addWhiteBox(String[] cmdLine) {\n+        if (whiteBoxJar != null) {\n+            cmdLine = StringArrayUtils.concat(cmdLine,\n+                                              \"-XX:+UnlockDiagnosticVMOptions\",\n+                                              \"-XX:+WhiteBoxAPI\",\n+                                              \"-Xbootclasspath\/a:\" + whiteBoxJar);\n+        }\n+        return cmdLine;\n+    }\n+\n@@ -226,1 +247,1 @@\n-        cmdLine = addClassOrModulePath(runMode, cmdLine);\n+        cmdLine = addCommonVMArgs(runMode, cmdLine);\n@@ -238,1 +259,1 @@\n-        cmdLine = addClassOrModulePath(runMode, cmdLine);\n+        cmdLine = addCommonVMArgs(runMode, cmdLine);\n@@ -256,1 +277,1 @@\n-        cmdLine = addClassOrModulePath(runMode, cmdLine);\n+        cmdLine = addCommonVMArgs(runMode, cmdLine);\n@@ -274,1 +295,1 @@\n-        cmdLine = addClassOrModulePath(runMode, cmdLine);\n+        cmdLine = addCommonVMArgs(runMode, cmdLine);\n@@ -320,1 +341,1 @@\n-          cmdLine = addClassOrModulePath(runMode, cmdLine);\n+          cmdLine = addCommonVMArgs(runMode, cmdLine);\n@@ -345,1 +366,1 @@\n-        cmdLine = addClassOrModulePath(runMode, cmdLine);\n+        cmdLine = addCommonVMArgs(runMode, cmdLine);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"}]}