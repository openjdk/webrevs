{"files":[{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Toolkit;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+\n+\/*\n+ * @test\n+ * @bug 4808569\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary add desktop property for the Windows XP or later font smoothing settings\n+ * @run main\/manual FontSmoothing\n+ *\/\n+\n+public class FontSmoothing {\n+\n+    private static final String PROP_NAME = \"win.text.fontSmoothingType\";\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                This test should be run on Windows XP or later.\n+\n+                On Windows 11:\n+                1. Open Run dialog by typing 'run' in search bar.\n+                2. Type 'cttune' and press Ok.\n+                3. Uncheck the \"Turn On ClearType\" checkbox and follow next instructions on screen.\n+                4. Repeat Step 1-2.\n+                5. Check the \"Turn On ClearType\" checkbox and follow next instructions on screen.\n+                6. Take a look at the output window to determine if the test passed or failed.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"FontSmoothing Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testTimeOut(5)\n+                .testUI(FontSmoothing::createUI)\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame f = new Frame(\"FontSmoothing Test\");\n+        f.setSize(50, 50);\n+\n+        Object value = Toolkit.getDefaultToolkit().getDesktopProperty(PROP_NAME);\n+        PassFailJFrame.log(\"toolkit.getDesktopProperty: \" + PROP_NAME + \" = \" + value + \"\\n\");\n+\n+        Toolkit.getDefaultToolkit().addPropertyChangeListener(PROP_NAME, new PropertyChangeListener() {\n+            public void propertyChange(PropertyChangeEvent e) {\n+                PassFailJFrame.log(\"PropertyChangeEvent: \" + e.getPropertyName() +\n+                        \"\\n   old value=\" + e.getOldValue() +\n+                        \"\\n   new value=\" + e.getNewValue());\n+\n+                Integer value = (Integer) Toolkit.getDefaultToolkit().getDesktopProperty(PROP_NAME);\n+                PassFailJFrame.log(\"toolkit.getDesktopProperty:\" + PROP_NAME + \"=\" + value);\n+\n+                if (value.equals((Integer) e.getNewValue())) {\n+                    PassFailJFrame.log(\"test PASSED\");\n+                } else {\n+                    PassFailJFrame.log(\"test FAILED\");\n+                }\n+            }\n+        });\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/DesktopProperties\/FontSmoothing.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+        import java.awt.Frame;\n+        import java.awt.Toolkit;\n+        import java.beans.PropertyChangeEvent;\n+        import java.beans.PropertyChangeListener;\n+\n+\/*\n+ * @test\n+ * @bug 4368193\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @requires (os.family == \"windows\")\n+ * @summary Toolkit's getDesktopProperty returns stale values on Microsoft Windows\n+ * @run main\/manual ThreeDBackgroundColor\n+ *\/\n+\n+public class ThreeDBackgroundColor {\n+\n+    private static final String PROP_NAME = \"win.3d.backgroundColor\";\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                On Windows 10:\n+                1. Open Windows Settings, in the search bar type\n+                   'high contrast', in the list of suggestions choose option\n+                   'Turn high contrast on or off'\n+                2. In the High contrast control panel click on the on\/off switch\n+                   to initialize High contrast mode\n+                3. Wait for the High contrast mode to finish initialization\n+                4. Click on the same switch again to turn off High contrast mode\n+\n+                On Windows 11:\n+                1. Open Windows settings, in the search bar type\n+                   'Contrast Theme'.\n+                2. Select any value from 'Contrast themes' dropdown menu and press 'Apply'.\n+                3. Wait for the High contrast mode to finish initialization\n+                4. Select 'None' from 'Contrast themes' dropdown menu to revert the changes.\n+\n+                Take a look at the output window to determine if the test passed or failed.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"ThreeDBackgroundColor Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testTimeOut(5)\n+                .testUI(ThreeDBackgroundColor::createUI)\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame f = new Frame(\"ThreeDBackgroundColor Test\");\n+        f.setSize(50, 50);\n+\n+        Object value = Toolkit.getDefaultToolkit().getDesktopProperty(PROP_NAME);\n+        PassFailJFrame.log(\"toolkit.getDesktopProperty:\" + PROP_NAME + \"=\" + value);\n+\n+        Toolkit.getDefaultToolkit().addPropertyChangeListener(PROP_NAME, new PropertyChangeListener() {\n+            public void propertyChange(PropertyChangeEvent e) {\n+                PassFailJFrame.log(\"PropertyChangeEvent: \" + e.getPropertyName() +\n+                        \"\\n   old value=\" + e.getOldValue() +\n+                        \"\\n   new value=\" + e.getNewValue());\n+\n+                Color value = (Color) Toolkit.getDefaultToolkit().getDesktopProperty(PROP_NAME);\n+                PassFailJFrame.log(\"toolkit.getDesktopProperty:\" + PROP_NAME + \"=\" + value);\n+                if (value.equals((Color) e.getNewValue())) {\n+                    PassFailJFrame.log(\"test PASSED\");\n+                } else {\n+                    PassFailJFrame.log(\"test FAILED\");\n+                }\n+            }\n+        });\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/DesktopProperties\/ThreeDBackgroundColor.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,446 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.JobAttributes;\n+import java.awt.Label;\n+import java.awt.List;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.PageAttributes;\n+import java.awt.Panel;\n+import java.awt.PrintJob;\n+import java.awt.Scrollbar;\n+import java.awt.ScrollPane;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.JobAttributes.DialogType;\n+import java.awt.PageAttributes.OriginType;\n+\n+import java.util.Enumeration;\n+import java.util.Properties;\n+\n+\/*\n+ * @test\n+ * @bug 4247583\n+ * @key printer\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Tests that the old Properties API still works\n+ * @run main\/manual PrintCompatibilityTest\n+ *\/\n+\n+public class PrintCompatibilityTest {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        String INSTRUCTIONS = \"\"\"\n+                A frame window will appear.\n+                Choose 'Print to Printer...' from the 'Print' menu. Make sure that you print\n+                to a printer, not a file. Examine the output and verify that the frame and all\n+                the components in it get printed properly.\n+\n+                Known problems:\n+                    * The text in the second row of the menubar is not indented correctly.\n+\n+                You can also use the 'Print to Screen...' command for a quick manual check that\n+                printing works, but this is only for debugging purposes.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"PrintComponentTest Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(60)\n+                .testTimeOut(10)\n+                .testUI(new MainFrame())\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class MainFrame extends Frame {\n+    private LWContainer lwc;\n+\n+    public MainFrame() {\n+        super(\"PrintCompatibilityTest\");\n+\n+        setSize(800, 400);\n+        setLayout(new FlowLayout());\n+\n+        \/\/ peered components\n+        Button button = new Button(\"Button\");\n+        button.setFont(new Font(\"Dialog\", Font.PLAIN, 12));\n+        add(button);\n+        add(new TestCanvas());\n+        Checkbox cbox = new Checkbox(\"Checkbox\", true);\n+        cbox.setFont(new Font(\"DialogInput\", Font.PLAIN, 12));\n+        add(cbox);\n+        Choice choice = new Choice();\n+        choice.add(\"Choice 1\");\n+        choice.add(\"Choice Two\");\n+        choice.setFont(new Font(\"Monospaced\", Font.PLAIN, 12));\n+        add(choice);\n+        Label label = new Label(\"Label\");\n+        label.setFont(new Font(\"Serif\", Font.PLAIN, 12));\n+        add(label);\n+        List list = new List();\n+        list.add(\"List 1\");\n+        list.add(\"List Two\");\n+        list.setFont(new Font(\"SansSerif\", Font.PLAIN, 12));\n+        add(list);\n+        add(new Scrollbar(Scrollbar.VERTICAL) );\n+        add(new Scrollbar(Scrollbar.HORIZONTAL) );\n+        ScrollPane scrollpane = new ScrollPane();\n+        Button spButton = new Button(\"Button in a scrollpane\");\n+        spButton.setFont(new Font(\"Monospaced\", Font.PLAIN, 12));\n+        scrollpane.add(spButton);\n+        add(scrollpane);\n+        TextArea textarea = new TextArea(\"TextArea\", 3, 30);\n+        textarea.setFont(new Font(\"Dialog\", Font.ITALIC, 10));\n+        add(textarea);\n+        TextField textfield = new TextField(\"TextField\");\n+        textfield.setFont(new Font(\"DialogInput\", Font.ITALIC, 10));\n+        add(textfield);\n+\n+        \/\/ nested components\n+        Panel panel1 = new Panel();\n+        panel1.setLayout(new FlowLayout());\n+        panel1.setBackground(Color.red);\n+        this.add(panel1);\n+\n+        Button p1Button = new Button(\"level 2\");\n+        p1Button.setFont(new Font(\"Monospaced\", Font.ITALIC, 10));\n+        panel1.add(p1Button);\n+\n+        Panel panel2 = new Panel();\n+        panel2.setLayout(new FlowLayout());\n+        panel2.setBackground(Color.green);\n+        panel1.add(panel2);\n+\n+        Button p2Button = new Button(\"level 3\");\n+        p2Button.setFont(new Font(\"Serif\", Font.ITALIC, 10));\n+        panel2.add(p2Button);\n+\n+\n+        \/\/ lightweight components\n+        LWButton lwbutton = new LWButton(\"LWbutton\");\n+        lwbutton.setFont(new Font(\"SansSerif\", Font.ITALIC, 10));\n+        add(lwbutton);\n+\n+        lwc = new LWContainer(\"LWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainer\");\n+        lwc.setFont(new Font(\"Monospaced\", Font.ITALIC, 10));\n+        add(lwc);\n+        Button lwcButton1 = new Button(\"HW Button 1\");\n+        Button lwcButton2 = new Button(\"HW Button 2\");\n+        LWButton lwcButton3 = new LWButton(\"LW Button\");\n+        lwcButton1.setFont(new Font(\"Dialog\", Font.BOLD, 14));\n+        lwcButton2.setFont(new Font(\"DialogInput\", Font.BOLD, 14));\n+        lwcButton3.setFont(new Font(\"Monospaced\", Font.BOLD, 14));\n+        lwc.add(lwcButton1);\n+        lwc.add(lwcButton2);\n+        lwc.add(lwcButton3);\n+\n+        \/\/ overlapping components\n+        add(new ZOrderPanel());\n+\n+        \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+        Menu menu = new Menu(\"Print\");\n+        Menu menu2 = new Menu(\"File\");\n+        Menu menu3 = new Menu(\"Edit\");\n+        Menu menu4 = new Menu(\"ReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyLong\");\n+        menu2.setFont(new Font(\"SansSerif\", Font.BOLD, 20));\n+        menu2.setEnabled(false);\n+        menu3.setFont(new Font(\"Monospaced\", Font.ITALIC, 18));\n+        menu3.setEnabled(false);\n+        menu4.setEnabled(false);\n+        MenuItem itemPrinter  = new MenuItem(\"Print to Printer...\");\n+        MenuItem itemScreen  = new MenuItem(\"Print to Screen...\");\n+        menu.add(itemPrinter);\n+        menu.add(itemScreen);\n+        MenuBar menuBar = new MenuBar();\n+        menuBar.add( menu );\n+        menuBar.add( menu2 );\n+        menuBar.add( menu3 );\n+        menuBar.add( menu4 );\n+        setMenuBar(menuBar);\n+\n+        itemPrinter.addActionListener( new ActionPrint() );\n+        itemScreen.addActionListener( new ActionPrintToScreen() );\n+        setVisible(true);\n+    }\n+\n+    static void printProps(Properties props)\n+    {\n+        Enumeration propNames = props.propertyNames();\n+        while(propNames.hasMoreElements()) {\n+            String propName = (String)propNames.nextElement();\n+            PassFailJFrame.log( propName + \" = \" + props.getProperty(propName));\n+        }\n+    }\n+\n+    class ActionPrint implements ActionListener {\n+        private final int ITERATIONS = 1;\n+        private Properties props = new Properties();\n+\n+        public void actionPerformed(ActionEvent ev) {\n+            PassFailJFrame.log(\"About to show print dialog...\");\n+            printProps(props);\n+            PrintJob pj = getToolkit().getPrintJob(\n+                MainFrame.this, \"Print test!\", props);\n+            if( pj == null ) {\n+                return;\n+            }\n+            Dimension d = pj.getPageDimension();\n+            PassFailJFrame.log(\"About to print...\");\n+            PassFailJFrame.log(\"Dimensions: \" + d);\n+            printProps(props);\n+\n+            \/\/ For xor mode set, there is a printing issue with number of copies to be print.\n+            \/\/ So, ITERATIONS are changed to 1 from 3.\n+            \/\/ So, for now the XOR related code is commented out.\n+\n+            \/\/boolean xor = false;\n+\n+            for (int i = 0; i < ITERATIONS; i++) {\n+                Graphics g = pj.getGraphics();\n+                g.setColor(Color.red);\n+                \/\/if (xor) {\n+                \/\/    g.setXORMode(Color.blue);\n+                \/\/}\n+                g.translate(13, 13);\n+                printAll(g);\n+                g.dispose();\n+                \/\/xor = (xor) ? false : true;\n+            }\n+\n+            \/\/ For xor mode set, LWC components don't get printed.\n+            \/\/ So, for now the code is commented out and separate bug\n+            \/\/ (JDK-8340495) is filed to handle it.\n+\n+            \/\/ one more page so that we can test printing a lightweight\n+            \/\/ at the top of the hierarchy (BugId 4212564)\n+            \/\/Graphics g = pj.getGraphics();\n+            \/\/g.setColor(Color.red);\n+            \/\/g.translate(13, 13);\n+            \/\/lwc.printAll(g);\n+            \/\/g.dispose();\n+            \/\/ end 4212564\n+\n+            pj.end();\n+        }\n+    }\n+\n+    class ActionPrintToScreen implements ActionListener {\n+        public void actionPerformed(ActionEvent ev) {\n+            PrintFrame  printFrame = new PrintFrame( MainFrame.this );\n+            printFrame.show();\n+            Graphics g = printFrame.getGraphics();\n+            g.setColor(Color.red);\n+            printAll(g);\n+            g.dispose();\n+        }\n+    }\n+\n+    \/\/ Frame window that displays results of printing\n+    \/\/ main window to a screen Graphics-- useful for\n+    \/\/ quick testing of printing\n+    class PrintFrame extends Frame\n+    {\n+        private Component printComponent;\n+        public PrintFrame( Component c )\n+        {\n+            super(\"Print to Screen\");\n+            printComponent = c ;\n+            addWindowListener( new WindowAdapter() {\n+                                        public void windowClosing(WindowEvent ev) {\n+                                            setVisible(false);\n+                                            dispose();\n+                                        }\n+                                    }\n+                                );\n+            setSize(printComponent.getSize());\n+            setResizable(false);\n+        }\n+\n+        public void paint( Graphics g ) {\n+            printComponent.printAll(g);\n+        }\n+    }\n+\n+    class LWButton extends Component {\n+        String label;\n+        int     width = 100;\n+        int     height = 30;\n+\n+        public LWButton(String label) {\n+            super();\n+            this.label = label;\n+        }\n+\n+        public void paint(Graphics g) {\n+            Dimension d = getSize();\n+            g.setColor(Color.orange);\n+            g.setFont(getFont());\n+            g.fillRect(0, 0, d.width, d.height);\n+            g.setColor(Color.black);\n+            int x = 5;\n+            int y = (d.height - 5);\n+            g.drawString(label, x, y);\n+        }\n+\n+        public Dimension getPreferredSize()\n+        {\n+            return new Dimension(width,height);\n+        }\n+    }\n+\n+    class LWContainer extends Container {\n+        String label;\n+        int width = 300;\n+        int height = 100;\n+\n+        public LWContainer(String label) {\n+            super();\n+            this.label = label;\n+            setLayout(new FlowLayout());\n+        }\n+\n+        public void paint(Graphics g) {\n+            super.paint(g);\n+            Dimension d = getSize();\n+            g.setColor(Color.green);\n+            g.setFont(getFont());\n+            g.drawLine(0, 0, d.width - 1, 0);\n+            g.drawLine(d.width - 1, 0, d.width - 1, d.height - 1);\n+            g.drawLine(d.width - 1, d.height - 1, 0, d.height - 1);\n+            g.drawLine(0, d.height - 1, 0, 0);\n+            g.setColor(Color.black);\n+            int x = 5;\n+            int y = (d.height - 5);\n+            g.drawString(label, x, y);\n+        }\n+\n+        public Dimension getPreferredSize()\n+        {\n+            return new Dimension(width,height);\n+        }\n+    }\n+\n+    class TestCanvas extends Canvas {\n+        int width = 100;\n+        int height = 100;\n+\n+        public void paint(Graphics g) {\n+            g.setColor(Color.blue);\n+            g.fillRoundRect(10, 10, 50, 50, 15, 30);\n+            g.setColor(Color.red);\n+            g.fillOval(70, 70, 25, 25);\n+        }\n+        public Dimension getPreferredSize() {\n+            return new Dimension(width, height);\n+        }\n+    }\n+\n+    class ZOrderPanel extends Panel\n+    {\n+        ZOrderPanel()\n+        {\n+            setLayout(null);\n+\n+            Component first, second, third, fourth;\n+\n+            setVisible(true);\n+            \/\/ add first component\n+            first = makeBox(\"Second\", Color.blue,\n+                            new Font(\"Serif\", Font.BOLD, 14),\n+                            -1);\n+            \/\/ insert on top\n+            second = makeBox(\"First\", Color.yellow,\n+                             new Font(\"SansSerif\", Font.BOLD, 14),\n+                             0);\n+            \/\/ put at the back\n+            fourth = makeBox(\"Fourth\", Color.red,\n+                             new Font(\"Monospaced\", Font.BOLD, 14),\n+                             2);\n+            \/\/ insert in last position\n+            third = makeBox(\"Third\", Color.green,\n+                            new Font(\"Dialog\", Font.PLAIN, 12),\n+                            3);\n+            \/\/ swap third and fourth to correct positions\n+            remove(third);\n+            add(third, 2);\n+            \/\/ re-validate so third and fourth peers change position\n+            validate();\n+            \/\/ now make things really interesting with a lightweight\n+            \/\/ component at the top of the z-order, that should print\n+            \/\/ _below_ the native guys to match the screen...\n+            add(new LWButton(\"LWButton\"),0);\n+        }\n+\n+        public Dimension preferredSize()\n+        {\n+            return new Dimension(260, 80);\n+        }\n+\n+        public void layout()\n+        {\n+            int i, n;\n+            Insets ins = getInsets();\n+            n = getComponentCount();\n+            for (i = n-1; i >= 0; i--) {\n+                Component p = getComponent(i);\n+                p.setBounds(ins.left + 40 * i, ins.top + 5 * i, 60, 60);\n+            }\n+        }\n+\n+        public Component makeBox(String s, Color c, Font f, int index)\n+        {\n+            Label l = new Label(s);\n+            l.setBackground(c);\n+            l.setAlignment(Label.RIGHT);\n+            l.setFont(f);\n+            add(l, index);\n+            validate();\n+            return l;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/PrintJob\/PrintCompatibilityTest.java","additions":446,"deletions":0,"binary":false,"changes":446,"status":"added"},{"patch":"@@ -0,0 +1,484 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.JobAttributes;\n+import java.awt.Label;\n+import java.awt.List;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.PageAttributes;\n+import java.awt.Panel;\n+import java.awt.PrintJob;\n+import java.awt.Scrollbar;\n+import java.awt.ScrollPane;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.JobAttributes.DialogType;\n+import java.awt.PageAttributes.OriginType;\n+\n+\n+\/*\n+ * @test\n+ * @bug 4111262 4035285 4038900 4046147 4049680 4084038 4100004 4105875\n+ * @bug 4117502 4037486 4068433 4128031 4151161 4151707 4155884 4212564\n+ * @bug 4025626 4029565 4034365 4036068 4040622 4061890 4067405 4086256\n+ * @bug 4113827 4116722 4121984 4145350 4146510 4172659 4179886 4218471\n+ * @bug 4219657 4227128 4242308 4245917 4265746\n+ * @key printer\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test printing of lightweight (and heavyweight) components\n+ * @run main\/manual PrintComponentTest\n+ *\/\n+\n+public class PrintComponentTest {\n+    public static void main(String[] args) throws Exception {\n+\n+        String INSTRUCTIONS = \"\"\"\n+                A frame window will appear.\n+                Choose 'Print to Printer...' from the 'Print' menu. Examine the output\n+                and verify that the frame and all the components in it get printed properly.\n+\n+                Print using both 'Portrait' and 'Landscape' orientation.\n+                Verify that the paper dimensions printed to standard error\n+                are exactly inverted.\n+                (That is, if the output for 'Portrait' is\n+                \"Dimensions: java.awt.Dimension[width=612,height=792]\" then the output\n+                for 'Landscape' should be \"Dimensions: java.awt.Dimension[width=792, height=612].)\n+\n+                Now, attempt to print a second time. When the print dialog box appears,\n+                however, cancel the print request.\n+                Verify that _no_ output is sent to standard error.\n+\n+                You should attempt to print with both the native and common print dialogs,\n+                as well as with no dialog.\n+                Note that on Linux the native and common print dialogs are identical.\n+\n+                On Windows, the common print dialog communicates with the printer to\n+                determine supported paper sizes and duplex capability.\n+                Verify that these constraints are properly enforced in the common dialog\n+                for the target printer.\n+\n+                Known problems:\n+                    * The text in the second row of the menubar is not indented\n+                      correctly.\n+\n+                You can also use the 'Print to Screen...' command for a quick manual\n+                check that printing works, but this is only for debugging purposes.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"PrintComponentTest Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(60)\n+                .testTimeOut(10)\n+                .testUI(new MainFrame())\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class MainFrame extends Frame {\n+    private LWContainer lwc;\n+\n+    public MainFrame() {\n+        super(\"PrintComponentTest\");\n+\n+        setSize(800, 400);\n+        setLayout(new FlowLayout());\n+\n+        \/\/ peered components\n+        Button button = new Button(\"Button\");\n+        button.setFont(new Font(\"Dialog\", Font.PLAIN, 12));\n+        add(button);\n+        add(new TestCanvas());\n+        Checkbox cbox = new Checkbox(\"Checkbox\", true);\n+        cbox.setFont(new Font(\"DialogInput\", Font.PLAIN, 12));\n+        add(cbox);\n+        Choice choice = new Choice();\n+        choice.add(\"Choice 1\");\n+        choice.add(\"Choice Two\");\n+        choice.setFont(new Font(\"Monospaced\", Font.PLAIN, 12));\n+        add(choice);\n+        Label label = new Label(\"Label\");\n+        label.setFont(new Font(\"Serif\", Font.PLAIN, 12));\n+        add(label);\n+        List list = new List();\n+        list.add(\"List 1\");\n+        list.add(\"List Two\");\n+        list.setFont(new Font(\"SansSerif\", Font.PLAIN, 12));\n+        add(list);\n+        add(new Scrollbar(Scrollbar.VERTICAL) );\n+        add(new Scrollbar(Scrollbar.HORIZONTAL) );\n+        ScrollPane scrollpane = new ScrollPane();\n+        Button spButton = new Button(\"Button in a scrollpane\");\n+        spButton.setFont(new Font(\"Monospaced\", Font.PLAIN, 12));\n+        scrollpane.add(spButton);\n+        add(scrollpane);\n+        TextArea textarea = new TextArea(\"TextArea\", 3, 30);\n+        textarea.setFont(new Font(\"Dialog\", Font.ITALIC, 10));\n+        add(textarea);\n+        TextField textfield = new TextField(\"TextField\");\n+        textfield.setFont(new Font(\"DialogInput\", Font.ITALIC, 10));\n+        add(textfield);\n+\n+        \/\/ nested components\n+        Panel panel1 = new Panel();\n+        panel1.setLayout(new FlowLayout());\n+        panel1.setBackground(Color.red);\n+        this.add(panel1);\n+\n+        Button p1Button = new Button(\"level 2\");\n+        p1Button.setFont(new Font(\"Monospaced\", Font.ITALIC, 10));\n+        panel1.add(p1Button);\n+\n+        Panel panel2 = new Panel();\n+        panel2.setLayout(new FlowLayout());\n+        panel2.setBackground(Color.green);\n+        panel1.add(panel2);\n+\n+        Button p2Button = new Button(\"level 3\");\n+        p2Button.setFont(new Font(\"Serif\", Font.ITALIC, 10));\n+        panel2.add(p2Button);\n+\n+\n+        \/\/ lightweight components\n+        LWButton lwbutton = new LWButton(\"LWbutton\");\n+        lwbutton.setFont(new Font(\"SansSerif\", Font.ITALIC, 10));\n+        add(lwbutton);\n+\n+        lwc = new LWContainer(\"LWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainerLWContainer\");\n+        lwc.setFont(new Font(\"Monospaced\", Font.ITALIC, 10));\n+        add(lwc);\n+        Button lwcButton1 = new Button(\"HW Button 1\");\n+        Button lwcButton2 = new Button(\"HW Button 2\");\n+        LWButton lwcButton3 = new LWButton(\"LW Button\");\n+        lwcButton1.setFont(new Font(\"Dialog\", Font.BOLD, 14));\n+        lwcButton2.setFont(new Font(\"DialogInput\", Font.BOLD, 14));\n+        lwcButton3.setFont(new Font(\"Monospaced\", Font.BOLD, 14));\n+        lwc.add(lwcButton1);\n+        lwc.add(lwcButton2);\n+        lwc.add(lwcButton3);\n+\n+        \/\/ overlapping components\n+        add(new ZOrderPanel());\n+\n+        \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+        Menu menu = new Menu(\"Print\");\n+        Menu menu2 = new Menu(\"File\");\n+        Menu menu3 = new Menu(\"Edit\");\n+        Menu menu4 = new Menu(\"ReallyReallyReallyReallyReallyReallyReallyReally\" +\n+                \"ReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReally\" +\n+                \"ReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyReallyLong\");\n+        menu2.setFont(new Font(\"SansSerif\", Font.BOLD, 20));\n+        menu2.setEnabled(false);\n+        menu3.setFont(new Font(\"Monospaced\", Font.ITALIC, 18));\n+        menu3.setEnabled(false);\n+        menu4.setEnabled(false);\n+        MenuItem itemJFC =\n+                new MenuItem(\"Print to Printer with Cross-Platform Dialog...\");\n+        itemJFC.setActionCommand(\"common\");\n+        MenuItem itemNative =\n+                new MenuItem(\"Print to Printer with Native Dialog...\");\n+        itemNative.setActionCommand(\"native\");\n+        MenuItem itemBackground =\n+                new MenuItem(\"Print to Printer in Background\");\n+        itemBackground.setActionCommand(\"none\");\n+        MenuItem itemScreen  = new MenuItem(\"Print to Screen...\");\n+        menu.add(itemJFC);\n+        menu.add(itemNative);\n+        menu.add(itemBackground);\n+        menu.add(itemScreen);\n+        MenuBar menuBar = new MenuBar();\n+        menuBar.add( menu );\n+        menuBar.add( menu2 );\n+        menuBar.add( menu3 );\n+        menuBar.add( menu4 );\n+        setMenuBar(menuBar);\n+\n+        ActionPrint actionPrint = new ActionPrint();\n+\n+        itemJFC.addActionListener( actionPrint );\n+        itemNative.addActionListener( actionPrint );\n+        itemBackground.addActionListener( actionPrint );\n+        itemScreen.addActionListener( new ActionPrintToScreen() );\n+    }\n+\n+    class ActionPrint implements ActionListener {\n+        private final int ITERATIONS = 1;\n+        private PageAttributes pageAttributes = new PageAttributes();\n+        private JobAttributes jobAttributes = new JobAttributes();\n+\n+        public void actionPerformed(ActionEvent ev) {\n+            DialogType dialog;\n+            if (ev.getActionCommand().equals(\"common\")) {\n+                dialog = DialogType.COMMON;\n+            } else if (ev.getActionCommand().equals(\"native\")) {\n+                dialog = DialogType.NATIVE;\n+            } else {\n+                dialog = DialogType.NONE;\n+            }\n+            jobAttributes.setDialog(dialog);\n+            pageAttributes.setOrigin(OriginType.PRINTABLE);\n+            System.err.println(jobAttributes);\n+            System.err.println(pageAttributes);\n+\n+            PassFailJFrame.log(\"About to show print dialog...\");\n+\n+            PrintJob pj = getToolkit().getPrintJob(\n+                    MainFrame.this, \"Print test!\", jobAttributes, pageAttributes);\n+            if( pj == null ) return;\n+            Dimension d = pj.getPageDimension();\n+            PassFailJFrame.log(\"About to print...\");\n+            PassFailJFrame.log(\"Dimensions: \" + d);\n+            System.err.println(jobAttributes);\n+            System.err.println(pageAttributes);\n+\n+            \/\/ For xor mode set, there is a printing issue with number of copies to be print.\n+            \/\/ So, ITERATIONS are changed to 1 from 3.\n+            \/\/ So, for now the XOR related code is commented out.\n+\n+            \/\/boolean xor = false;\n+\n+            for (int i = 0; i < ITERATIONS; i++) {\n+                Graphics g = pj.getGraphics();\n+                g.setColor(Color.red);\n+                \/\/if (xor) {\n+                \/\/    g.setXORMode(Color.blue);\n+                \/\/}\n+                printAll(g);\n+                g.dispose();\n+                \/\/xor = (xor) ? false : true;\n+            }\n+\n+            \/\/ For xor mode set, LWC components don't get printed.\n+            \/\/ So, for now the code is commented out and separate bug\n+            \/\/ (JDK-8340495) is filed to handle it.\n+\n+            \/\/ one more page so that we can test printing a lightweight\n+            \/\/ at the top of the hierarchy (BugId 4212564)\n+            \/\/Graphics g = pj.getGraphics();\n+            \/\/g.setColor(Color.red);\n+            \/\/lwc.printAll(g);\n+            \/\/g.dispose();\n+            \/\/ end 4212564\n+\n+            pj.end();\n+        }\n+    }\n+\n+    class ActionPrintToScreen implements ActionListener {\n+        public void actionPerformed(ActionEvent ev) {\n+            PrintFrame  printFrame = new PrintFrame( MainFrame.this );\n+            printFrame.show();\n+            Graphics g = printFrame.getGraphics();\n+            g.setColor(Color.red);\n+            printAll(g);\n+            g.dispose();\n+        }\n+    }\n+\n+    \/\/ Frame window that displays results of printing\n+    \/\/ main window to a screen Graphics-- useful for\n+    \/\/ quick testing of printing\n+    class PrintFrame extends Frame\n+    {\n+        private Component printComponent;\n+        public PrintFrame( Component c )\n+        {\n+            super(\"Print to Screen\");\n+            printComponent = c ;\n+            addWindowListener( new WindowAdapter() {\n+                                   public void windowClosing(WindowEvent ev) {\n+                                       setVisible(false);\n+                                       dispose();\n+                                   }\n+                               }\n+            );\n+            setSize(printComponent.getSize());\n+            setResizable(false);\n+        }\n+\n+        public void paint( Graphics g ) {\n+            printComponent.printAll(g);\n+        }\n+    }\n+\n+    class LWButton extends Component {\n+        String label;\n+        int     width = 100;\n+        int     height = 30;\n+\n+        public LWButton(String label) {\n+            super();\n+            this.label = label;\n+        }\n+\n+        public void paint(Graphics g) {\n+            Dimension d = getSize();\n+            g.setColor(Color.orange);\n+            g.setFont(getFont());\n+            g.fillRect(0, 0, d.width, d.height);\n+            g.setColor(Color.black);\n+            int x = 5;\n+            int y = (d.height - 5);\n+            g.drawString(label, x, y);\n+        }\n+\n+        public Dimension getPreferredSize()\n+        {\n+            return new Dimension(width,height);\n+        }\n+    }\n+\n+    class LWContainer extends Container {\n+        String label;\n+        int width = 300;\n+        int height = 100;\n+\n+        public LWContainer(String label) {\n+            super();\n+            this.label = label;\n+            setLayout(new FlowLayout());\n+        }\n+\n+        public void paint(Graphics g) {\n+            super.paint(g);\n+            Dimension d = getSize();\n+            g.setColor(Color.green);\n+            g.setFont(getFont());\n+            g.drawLine(0, 0, d.width - 1, 0);\n+            g.drawLine(d.width - 1, 0, d.width - 1, d.height - 1);\n+            g.drawLine(d.width - 1, d.height - 1, 0, d.height - 1);\n+            g.drawLine(0, d.height - 1, 0, 0);\n+            g.setColor(Color.black);\n+            int x = 5;\n+            int y = (d.height - 5);\n+            g.drawString(label, x, y);\n+        }\n+\n+        public Dimension getPreferredSize()\n+        {\n+            return new Dimension(width,height);\n+        }\n+    }\n+\n+    class TestCanvas extends Canvas {\n+        int width = 100;\n+        int height = 100;\n+\n+        public void paint(Graphics g) {\n+            g.setColor(Color.blue);\n+            g.fillRoundRect(10, 10, 50, 50, 15, 30);\n+            g.setColor(Color.red);\n+            g.fillOval(70, 70, 25, 25);\n+        }\n+        public Dimension getPreferredSize() {\n+            return new Dimension(width, height);\n+        }\n+    }\n+\n+    class ZOrderPanel extends Panel\n+    {\n+        ZOrderPanel()\n+        {\n+            setLayout(null);\n+\n+            Component first, second, third, fourth;\n+\n+            setVisible(true);\n+            \/\/ add first component\n+            first = makeBox(\"Second\", Color.blue,\n+                    new Font(\"Serif\", Font.BOLD, 14),\n+                    -1);\n+            \/\/ insert on top\n+            second = makeBox(\"First\", Color.yellow,\n+                    new Font(\"SansSerif\", Font.BOLD, 14),\n+                    0);\n+            \/\/ put at the back\n+            fourth = makeBox(\"Fourth\", Color.red,\n+                    new Font(\"Monospaced\", Font.BOLD, 14),\n+                    2);\n+            \/\/ insert in last position\n+            third = makeBox(\"Third\", Color.green,\n+                    new Font(\"Dialog\", Font.PLAIN, 12),\n+                    3);\n+            \/\/ swap third and fourth to correct positions\n+            remove(third);\n+            add(third, 2);\n+            \/\/ re-validate so third and fourth peers change position\n+            validate();\n+            \/\/ now make things really interesting with a lightweight\n+            \/\/ component at the top of the z-order, that should print\n+            \/\/ _below_ the native guys to match the screen...\n+            add(new LWButton(\"LWButton\"),0);\n+        }\n+\n+        public Dimension preferredSize()\n+        {\n+            return new Dimension(260, 80);\n+        }\n+\n+        public void layout()\n+        {\n+            int i, n;\n+            Insets ins = getInsets();\n+            n = getComponentCount();\n+            for (i = n-1; i >= 0; i--) {\n+                Component p = getComponent(i);\n+                p.setBounds(ins.left + 40 * i, ins.top + 5 * i, 60, 60);\n+            }\n+        }\n+\n+        public Component makeBox(String s, Color c, Font f, int index)\n+        {\n+            Label l = new Label(s);\n+            l.setBackground(c);\n+            l.setAlignment(Label.RIGHT);\n+            l.setFont(f);\n+            add(l, index);\n+            validate();\n+            return l;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/PrintJob\/PrintComponentTest.java","additions":484,"deletions":0,"binary":false,"changes":484,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.PrintJob;\n+import java.awt.Toolkit;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+\/*\n+ * @test\n+ * @bug 4257962\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary tests that scaled images are printed at resolution greater than 72dpi\n+ * @run main\/manual ScaledImagePrintingTest\n+ *\/\n+\n+public class ScaledImagePrintingTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Press 'Print' button from the test UI.\n+\n+                The test will bring up a print dialog. Select a printer and proceed.\n+                Verify that the output is a series of a horizontal lines in a\n+                rectangular box in the center of the page.\n+\n+                If output is as mentioned above, press Pass else Fail.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"ScaledImagePrintingTest Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testTimeOut(5)\n+                .testUI(ScaledImagePrintingTest::createUI)\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame frame = new Frame(\"ResolutionTest\");\n+        Button b = new Button(\"Print\");\n+        b.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                PrintJob pj = frame.getToolkit().getPrintJob(frame, \"ResolutionTest\", null);\n+                PassFailJFrame.log(\"Printing code started.\");\n+                if (pj != null) {\n+                    Graphics g = pj.getGraphics();\n+                    g.setColor(Color.black);\n+                    int w = 200;\n+                    int h = 200;\n+                    Image image = frame.createImage(w, h);\n+                    Graphics imageGraphics = image.getGraphics();\n+                    Dimension d = pj.getPageDimension();\n+                    imageGraphics.setColor(Color.black);\n+                    for (int i = 0; i < h; i += 20) {\n+                        imageGraphics.drawLine(0, i, w, i);\n+                    }\n+                    g.translate(d.width \/ 2, d.height \/ 2);\n+                    g.drawImage(image, -w \/ 8, -h \/ 8, w \/ 4, h \/ 4, frame);\n+                    g.setColor(Color.black);\n+                    g.drawRect(-w \/ 4, -h \/ 4, w \/ 2, h \/ 2);\n+                    imageGraphics.dispose();\n+                    g.dispose();\n+                    pj.end();\n+                }\n+                PassFailJFrame.log(\"Printing code finished.\");\n+            }\n+        });\n+        frame.add(b);\n+        frame.setSize(50, 50);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/PrintJob\/ScaledImagePrintingTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}