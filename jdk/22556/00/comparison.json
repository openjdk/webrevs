{"files":[{"patch":"@@ -0,0 +1,224 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.runtime;\n+\n+import java.lang.invoke.*;\n+import java.lang.reflect.Constructor;\n+import java.util.*;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import org.openjdk.bench.util.InMemoryJavaCompiler;\n+\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 18, time = 5)\n+@Measurement(iterations = 10, time = 5)\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Threads(1)\n+@Fork(value = 2)\n+public class MethodHandleStress {\n+\n+    \/\/ The number of distinct classes generated from the source string below\n+    \/\/ All the classes are \"warmed up\" by invoking their methods to get compiled by the jit\n+    @Param({\"1000\"})\n+    public int classes;\n+\n+    \/\/ How many instances of each generated class to create and use in the measurement phase\n+    @Param({\"100\"})\n+    public int instances;\n+\n+    byte[][] compiledClasses;\n+    Class[] loadedClasses;\n+    String[] classNames;\n+\n+    int index = 0;\n+    Map<Class, Object[]> instancesOfClassMap = new HashMap<>();\n+\n+    Map<Class, Map<Object, MethodHandle>> prebindMethods = new ConcurrentHashMap<>();\n+\n+    static final String methodNames[] = {\n+            \"get\"\n+    };\n+\n+    static String B(int count) {\n+        return \"public class B\" + count + \" {\"\n+            + \" \"\n+            + \"    int instA\" +  \" = 0;\"\n+            + \" \"\n+            + \"    int getA() {\"\n+            + \"        return instA;\"\n+            + \"    }\"\n+            + \" \"\n+            + \"    public Integer get( Integer depth) throws Throwable {\"\n+            + \"        return  getA();\"\n+            + \"    }\"\n+            + \"}\";\n+    }\n+\n+\n+    class BenchLoader extends ClassLoader {\n+\n+        BenchLoader() {\n+            super();\n+        }\n+\n+        BenchLoader(ClassLoader parent) {\n+            super(parent);\n+        }\n+\n+        @Override\n+        protected Class<?> findClass(String name) throws ClassNotFoundException {\n+            if (name.equals(classNames[index])) {\n+                assert compiledClasses[index] != null;\n+                return defineClass(name, compiledClasses[index],\n+                        0,\n+                        (compiledClasses[index]).length);\n+            } else {\n+                return super.findClass(name);\n+            }\n+        }\n+    }\n+\n+    MethodHandleStress.BenchLoader loader1 = new MethodHandleStress.BenchLoader();\n+    static  MethodType generatedGetType = MethodType.methodType(Integer.class, Integer.class);\n+\n+    @Setup(Level.Trial)\n+    public void setupClasses() throws Exception {\n+        Object[] receivers1;\n+\n+        compiledClasses = new byte[classes][];\n+        loadedClasses = new Class[classes];\n+        classNames = new String[classes];\n+\n+        MethodHandles.Lookup publicLookup = MethodHandles.publicLookup();\n+\n+        for (int i = 0; i < classes; i++) {\n+            classNames[i] = \"B\" + i;\n+            compiledClasses[i] = InMemoryJavaCompiler.compile(classNames[i], B(i));\n+        }\n+\n+        for (index = 0; index < compiledClasses.length; index++) {\n+            Class<?> c = loader1.findClass(classNames[index]);\n+            loadedClasses[index] = c;\n+\n+            Constructor<?>[] ca = c.getConstructors();\n+            assert ca.length == 1;\n+\n+            \/\/ Build the list of prebind MHs\n+            ConcurrentHashMap<Object, MethodHandle> prebinds = new ConcurrentHashMap<>();\n+\n+            receivers1 = new Object[instances];\n+            for (int j = 0; j < instances; j++) {\n+                Object inst= ca[0].newInstance();\n+                receivers1[j] = inst;\n+                MethodHandle mh = publicLookup.findVirtual(c, methodNames[0], generatedGetType);\n+                mh = mh.bindTo(inst);\n+                prebinds.put(inst, mh);\n+\n+            }\n+            instancesOfClassMap.put(c, receivers1);\n+            prebindMethods.put(c, prebinds);\n+        }\n+\n+        \/\/ Warm up the methods\n+        IntStream.range(0, compiledClasses.length).forEach(n -> {\n+                    IntStream.range(0, methodNames.length).forEach(m -> {\n+                        try {\n+                            IntStream.range(0, 5000).parallel().forEach(x -> {\n+                                try {\n+                                    executeOne();\n+                                } catch (Throwable e) {\n+                                }\n+                            });\n+                        } catch (Throwable e) {\n+                            System.out.println(\"Exception = \" + e);\n+                            e.printStackTrace();\n+                            System.exit(-1);\n+                        }\n+                    });\n+                });\n+\n+        System.gc();\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    Class chooseClass() {\n+        ThreadLocalRandom tlr = ThreadLocalRandom.current();\n+        int whichClass = tlr.nextInt(classes);\n+        return loadedClasses[whichClass];\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    Object chooseInstance(Class c) {\n+        ThreadLocalRandom tlr = ThreadLocalRandom.current();\n+        int whichInst = tlr.nextInt(instances);\n+        return ((Object[]) instancesOfClassMap.get(c))[whichInst];\n+    }\n+\n+    static final Integer recurse = new Integer(1);\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    Integer callTheMethod(MethodHandle m, Object r) throws Throwable {\n+        return (Integer) m.invokeExact( recurse );\n+    }\n+\n+    int executeOne() throws Throwable {\n+        Class c = chooseClass();\n+        Object r = chooseInstance(c);\n+        MethodHandle m = prebindMethods.get(c).get(r);\n+        assert m != null;\n+        return callTheMethod(m, r);\n+    }\n+\n+    @Benchmark\n+    public void work(Blackhole bh) throws Exception {\n+        \/\/ Call a method of a random instance of a random class\n+        try {\n+            bh.consume(executeOne());\n+        } catch (Throwable e) {\n+            System.out.println(\"Exception = \" + e);\n+            e.printStackTrace();\n+        }\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/runtime\/MethodHandleStress.java","additions":224,"deletions":0,"binary":false,"changes":224,"status":"added"}]}