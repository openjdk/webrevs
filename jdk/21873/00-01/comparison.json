{"files":[{"patch":"@@ -30,1 +30,0 @@\n- * @requires vm.jvmci\n@@ -32,1 +31,3 @@\n- * @run driver AddmodsOption\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI AddmodsOption\n@@ -36,0 +37,1 @@\n+import jdk.test.whitebox.WhiteBox;\n@@ -38,0 +40,4 @@\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+    private static final boolean isJVMCISupported = (WB.getBooleanVMFlag(\"EnableJVMCI\") != null);\n+\n@@ -69,1 +75,1 @@\n-          .shouldMatch(versionPattern)\n+          \/\/.shouldMatch(versionPattern)\n@@ -111,1 +117,1 @@\n-          .shouldMatch(versionPattern)\n+          \/\/.shouldMatch(versionPattern)\n@@ -140,11 +146,12 @@\n-        \/\/ dump an archive with JVMCI option which indirectly adds the\n-        \/\/ jdk.internal.vm.ci module using the --add-modules option\n-        archiveName = TestCommon.getNewArchiveName(\"jvmci-module\");\n-        TestCommon.setCurrentArchiveName(archiveName);\n-        oa = TestCommon.dumpBaseArchive(\n-            archiveName,\n-            loggingOption,\n-            \"-XX:+UnlockExperimentalVMOptions\",\n-            \"-XX:+EagerJVMCI\", \"-XX:+UseJVMCICompiler\",\n-            \"-version\");\n-        oa.shouldHaveExitValue(0);\n+        if (isJVMCISupported) {\n+            \/\/ dump an archive with JVMCI option which indirectly adds the\n+            \/\/ jdk.internal.vm.ci module using the --add-modules option\n+            archiveName = TestCommon.getNewArchiveName(\"jvmci-module\");\n+            TestCommon.setCurrentArchiveName(archiveName);\n+            oa = TestCommon.dumpBaseArchive(\n+                archiveName,\n+                loggingOption,\n+                \"-XX:+UnlockExperimentalVMOptions\",\n+                \"-XX:+EagerJVMCI\", \"-XX:+UseJVMCICompiler\",\n+                \"-version\");\n+            oa.shouldHaveExitValue(0);\n@@ -152,13 +159,14 @@\n-        \/\/ run with the JVMCI option\n-        oa = TestCommon.execCommon(\n-            loggingOption,\n-            \"-XX:+UnlockExperimentalVMOptions\",\n-            \"-XX:+EagerJVMCI\", \"-XX:+UseJVMCICompiler\",\n-            \"-version\");\n-        try {\n-            oa.shouldHaveExitValue(0)\n-              .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.internal.vm.ci\");\n-        } catch (RuntimeException re) {\n-            \/\/ JVMCI compile may not be available\n-            oa.shouldHaveExitValue(1)\n-              .shouldContain(\"Cannot use JVMCI compiler: No JVMCI compiler found\");\n+            \/\/ run with the JVMCI option\n+            oa = TestCommon.execCommon(\n+                loggingOption,\n+                \"-XX:+UnlockExperimentalVMOptions\",\n+                \"-XX:+EagerJVMCI\", \"-XX:+UseJVMCICompiler\",\n+                \"-version\");\n+            try {\n+                oa.shouldHaveExitValue(0)\n+                  .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.internal.vm.ci\");\n+            } catch (RuntimeException re) {\n+                \/\/ JVMCI compile may not be available\n+                oa.shouldHaveExitValue(1)\n+                  .shouldContain(\"Cannot use JVMCI compiler: No JVMCI compiler found\");\n+            }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/addmods\/AddmodsOption.java","additions":36,"deletions":28,"binary":false,"changes":64,"status":"modified"}]}