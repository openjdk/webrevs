{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,1 +228,1 @@\n-        out->print(\" min \" SIZE_FORMAT \" desired \" SIZE_FORMAT \" actual \" SIZE_FORMAT \" \" PTR_FORMAT,\n+        out->print(\" min %zu desired %zu actual %zu \" PTR_FORMAT,\n@@ -231,1 +231,1 @@\n-        out->print(\" min \" SIZE_FORMAT \" desired \" SIZE_FORMAT, min_word_size, desired_word_size);\n+        out->print(\" min %zu desired %zu\", min_word_size, desired_word_size);\n@@ -322,1 +322,1 @@\n-  log_debug(gc, alloc, region)(\"Mutator Allocation stats, regions: %u, wasted size: \" SIZE_FORMAT \"%s (%4.1f%%)\",\n+  log_debug(gc, alloc, region)(\"Mutator Allocation stats, regions: %u, wasted size: %zu%s (%4.1f%%)\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,1 +221,1 @@\n-         \"Requested \" SIZE_FORMAT \" words, but got \" SIZE_FORMAT \" at \" PTR_FORMAT,\n+         \"Requested %zu words, but got %zu at \" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-  guarantee(index < length(), \"Index out of bounds index: \" SIZE_FORMAT \" length: \" SIZE_FORMAT, index, length());\n+  guarantee(index < length(), \"Index out of bounds index: %zu length: %zu\", index, length());\n@@ -57,1 +57,1 @@\n-            \"Biased index out of bounds, index: \" SIZE_FORMAT \" bias: \" SIZE_FORMAT \" length: \" SIZE_FORMAT,\n+            \"Biased index out of bounds, index: %zu bias: %zu length: %zu\",\n@@ -64,1 +64,1 @@\n-            \"Biased index out of inclusive bounds, index: \" SIZE_FORMAT \" bias: \" SIZE_FORMAT \" length: \" SIZE_FORMAT,\n+            \"Biased index out of inclusive bounds, index: %zu bias: %zu length: %zu\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-           \"mapping granularity must be power of 2, is \" SIZE_FORMAT, mapping_granularity_in_bytes);\n+           \"mapping granularity must be power of 2, is %zu\", mapping_granularity_in_bytes);\n@@ -77,1 +77,1 @@\n-           \"bottom mapping area address must be a multiple of mapping granularity \" SIZE_FORMAT \", is  \" PTR_FORMAT,\n+           \"bottom mapping area address must be a multiple of mapping granularity %zu, is  \" PTR_FORMAT,\n@@ -80,1 +80,1 @@\n-           \"end mapping area address must be a multiple of mapping granularity \" SIZE_FORMAT \", is \" PTR_FORMAT,\n+           \"end mapping area address must be a multiple of mapping granularity %zu, is \" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-  log_trace(gc, bot)(\"    rs.base(): \" PTR_FORMAT \"  rs.size(): \" SIZE_FORMAT \"  rs end(): \" PTR_FORMAT,\n+  log_trace(gc, bot)(\"    rs.base(): \" PTR_FORMAT \"  rs.size(): %zu  rs end(): \" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-           \"%s - offset: \" SIZE_FORMAT \", N_words: %u\",\n+           \"%s - offset: %zu, N_words: %u\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -182,1 +182,1 @@\n-    log_debug(gc, ergo, heap)(\"Attempt heap expansion (region allocation request failed). Allocation request: \" SIZE_FORMAT \"B\",\n+    log_debug(gc, ergo, heap)(\"Attempt heap expansion (region allocation request failed). Allocation request: %zuB\",\n@@ -186,1 +186,1 @@\n-           \"This kind of expansion should never be more than one region. Size: \" SIZE_FORMAT,\n+           \"This kind of expansion should never be more than one region. Size: %zu\",\n@@ -338,1 +338,1 @@\n-  assert(is_humongous(word_size), \"Object of size \" SIZE_FORMAT \" must be humongous here\", word_size);\n+  assert(is_humongous(word_size), \"Object of size %zu must be humongous here\", word_size);\n@@ -361,1 +361,1 @@\n-      log_debug(gc, ergo, heap)(\"Heap expansion (humongous allocation request). Allocation request: \" SIZE_FORMAT \"B\",\n+      log_debug(gc, ergo, heap)(\"Heap expansion (humongous allocation request). Allocation request: %zuB\",\n@@ -447,1 +447,1 @@\n-    log_trace(gc, alloc)(\"%s: Unsuccessfully scheduled collection allocating \" SIZE_FORMAT \" words\",\n+    log_trace(gc, alloc)(\"%s: Unsuccessfully scheduled collection allocating %zu words\",\n@@ -465,1 +465,1 @@\n-      log_warning(gc, alloc)(\"%s:  Retried allocation %u times for \" SIZE_FORMAT \" words\",\n+      log_warning(gc, alloc)(\"%s:  Retried allocation %u times for %zu words\",\n@@ -498,2 +498,2 @@\n-    log_info(gc, heap)(\"Unable to allocate regions as archive heap is too large; size requested = \" SIZE_FORMAT\n-                       \" bytes, heap = \" SIZE_FORMAT \" bytes\", word_size, reserved.word_size());\n+    log_info(gc, heap)(\"Unable to allocate regions as archive heap is too large; size requested = %zu\"\n+                       \" bytes, heap = %zu bytes\", word_size, reserved.word_size());\n@@ -517,1 +517,1 @@\n-    log_debug(gc, ergo, heap)(\"Attempt heap expansion (allocate archive regions). Total size: \" SIZE_FORMAT \"B\",\n+    log_debug(gc, ergo, heap)(\"Attempt heap expansion (allocate archive regions). Total size: %zuB\",\n@@ -576,1 +576,1 @@\n-    log_debug(gc, ergo, heap)(\"Attempt heap shrinking (CDS archive regions). Total size: \" SIZE_FORMAT \"B\",\n+    log_debug(gc, ergo, heap)(\"Attempt heap shrinking (CDS archive regions). Total size: %zuB\",\n@@ -676,1 +676,1 @@\n-    log_trace(gc, alloc)(\"%s: Unsuccessfully scheduled collection allocating \" SIZE_FORMAT \"\",\n+    log_trace(gc, alloc)(\"%s: Unsuccessfully scheduled collection allocating %zu\",\n@@ -981,1 +981,1 @@\n-  log_debug(gc, ergo, heap)(\"Attempt heap expansion (allocation request failed). Allocation request: \" SIZE_FORMAT \"B\",\n+  log_debug(gc, ergo, heap)(\"Attempt heap expansion (allocation request failed). Allocation request: %zuB\",\n@@ -998,1 +998,1 @@\n-  log_debug(gc, ergo, heap)(\"Expand the heap. requested expansion amount: \" SIZE_FORMAT \"B expansion amount: \" SIZE_FORMAT \"B\",\n+  log_debug(gc, ergo, heap)(\"Expand the heap. requested expansion amount: %zuB expansion amount: %zuB\",\n@@ -1045,1 +1045,1 @@\n-  log_debug(gc, ergo, heap)(\"Shrink the heap. requested shrinking amount: \" SIZE_FORMAT \"B aligned shrinking amount: \" SIZE_FORMAT \"B actual amount shrunk: \" SIZE_FORMAT \"B\",\n+  log_debug(gc, ergo, heap)(\"Shrink the heap. requested shrinking amount: %zuB aligned shrinking amount: %zuB actual amount shrunk: %zuB\",\n@@ -2120,1 +2120,1 @@\n-  st->print(\"  region size \" SIZE_FORMAT \"K, \", G1HeapRegion::GrainBytes \/ K);\n+  st->print(\"  region size %zuK, \", G1HeapRegion::GrainBytes \/ K);\n@@ -2122,1 +2122,1 @@\n-  st->print(\"%u young (\" SIZE_FORMAT \"K), \", young_regions,\n+  st->print(\"%u young (%zuK), \", young_regions,\n@@ -2125,1 +2125,1 @@\n-  st->print(\"%u survivors (\" SIZE_FORMAT \"K)\", survivor_regions,\n+  st->print(\"%u survivors (%zuK)\", survivor_regions,\n@@ -2777,1 +2777,1 @@\n-         \"invariant: _summary_bytes_used: \" SIZE_FORMAT \" should be >= bytes: \" SIZE_FORMAT,\n+         \"invariant: _summary_bytes_used: %zu should be >= bytes: %zu\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -364,2 +364,2 @@\n-    assert(cur_used_bytes == recal_used_bytes, \"Used(\" SIZE_FORMAT \") is not\" \\\n-           \" same as recalculated used(\" SIZE_FORMAT \").\",                    \\\n+    assert(cur_used_bytes == recal_used_bytes, \"Used(%zu) is not\" \\\n+           \" same as recalculated used(%zu).\",                    \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -287,1 +287,1 @@\n-  log_trace(gc, ergo, cset)(\"Start choosing CSet. Pending cards: \" SIZE_FORMAT \" target pause time: %1.2fms\",\n+  log_trace(gc, ergo, cset)(\"Start choosing CSet. Pending cards: %zu target pause time: %1.2fms\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -227,1 +227,1 @@\n-    log_debug(gc, ergo, cset)(\"Pruned %u regions out of %u, leaving \" SIZE_FORMAT \" bytes waste (allowed \" SIZE_FORMAT \")\",\n+    log_debug(gc, ergo, cset)(\"Pruned %u regions out of %u, leaving %zu bytes waste (allowed %zu)\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -236,1 +236,1 @@\n-  assert(first_inactive == _inactive.size(), \"Should be no inactive regions, but was at index: \" SIZE_FORMAT, first_inactive);\n+  assert(first_inactive == _inactive.size(), \"Should be no inactive regions, but was at index: %zu\", first_inactive);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CommittedRegionMap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,1 +143,1 @@\n-  log_debug(gc)(\"Initialize mark stack with \" SIZE_FORMAT \" chunks, maximum \" SIZE_FORMAT,\n+  log_debug(gc)(\"Initialize mark stack with %zu chunks, maximum %zu\",\n@@ -208,1 +208,1 @@\n-    log_warning(gc)(\"Failed to reserve memory for new overflow mark stack with \" SIZE_FORMAT \" chunks and size \" SIZE_FORMAT \"B.\", new_capacity, new_capacity * sizeof(TaskQueueEntryChunk));\n+    log_warning(gc)(\"Failed to reserve memory for new overflow mark stack with %zu chunks and size %zuB.\", new_capacity, new_capacity * sizeof(TaskQueueEntryChunk));\n@@ -216,1 +216,1 @@\n-    log_debug(gc)(\"Can not expand overflow mark stack further, already at maximum capacity of \" SIZE_FORMAT \" chunks.\", _capacity);\n+    log_debug(gc)(\"Can not expand overflow mark stack further, already at maximum capacity of %zu chunks.\", _capacity);\n@@ -224,1 +224,1 @@\n-    log_debug(gc)(\"Expanded the mark stack capacity from \" SIZE_FORMAT \" to \" SIZE_FORMAT \" chunks\",\n+    log_debug(gc)(\"Expanded the mark stack capacity from %zu to %zu chunks\",\n@@ -252,1 +252,1 @@\n-  assert(new_capacity <= _max_capacity, \"Cannot expand overflow mark stack beyond the max_capacity\" SIZE_FORMAT \" chunks.\", _max_capacity);\n+  assert(new_capacity <= _max_capacity, \"Cannot expand overflow mark stack beyond the max_capacity of %zu chunks.\", _max_capacity);\n@@ -276,1 +276,1 @@\n-      log_warning(gc)(\"Failed to reserve memory for increasing the overflow mark stack capacity with \" SIZE_FORMAT \" chunks and size \" SIZE_FORMAT \"B.\",\n+      log_warning(gc)(\"Failed to reserve memory for increasing the overflow mark stack capacity with %zu chunks and size %zuB.\",\n@@ -387,1 +387,1 @@\n-  assert(idx < _max_regions, \"Trying to add more root MemRegions than there is space \" SIZE_FORMAT, _max_regions);\n+  assert(idx < _max_regions, \"Trying to add more root MemRegions than there is space %zu\", _max_regions);\n@@ -449,1 +449,1 @@\n-           \"we should have claimed all root regions, claimed \" SIZE_FORMAT \", length = %u\",\n+           \"we should have claimed all root regions, claimed %zu, length = %u\",\n@@ -793,1 +793,1 @@\n-  log_debug(gc, ergo)(\"Running %s with %u workers for \" SIZE_FORMAT \" work units.\", cl.name(), num_workers, num_chunks);\n+  log_debug(gc, ergo)(\"Running %s with %u workers for %zu work units.\", cl.name(), num_workers, num_chunks);\n@@ -1740,1 +1740,1 @@\n-          SIZE_FORMAT \", MarkStackSize: \" SIZE_FORMAT \", MarkStackSizeMax: \" SIZE_FORMAT \". \"\n+          \"%zu, MarkStackSize: %zu, MarkStackSizeMax: %zu. \"\n@@ -1885,1 +1885,1 @@\n-            \"Invariant: has_overflown = %s, num buffers = \" SIZE_FORMAT,\n+            \"Invariant: has_overflown = %s, num buffers = %zu\",\n@@ -1901,1 +1901,1 @@\n-  log_debug(gc, stats)(\"Mark stats cache hits \" SIZE_FORMAT \" misses \" SIZE_FORMAT \" ratio %1.3lf\",\n+  log_debug(gc, stats)(\"Mark stats cache hits %zu misses %zu ratio %1.3lf\",\n@@ -2478,1 +2478,1 @@\n-  log_debug(gc, stats)(\"  Mark Stats Cache: hits \" SIZE_FORMAT \" misses \" SIZE_FORMAT \" ratio %.3f\",\n+  log_debug(gc, stats)(\"  Mark Stats Cache: hits %zu misses %zu ratio %.3f\",\n@@ -2979,1 +2979,1 @@\n-#define G1PPRL_BYTE_FORMAT            \"  \" SIZE_FORMAT_W(9)\n+#define G1PPRL_BYTE_FORMAT            \"  %9zu\"\n@@ -2987,1 +2987,1 @@\n-#define G1PPRL_SUM_BYTE_FORMAT(tag)    \"  \" tag \": \" SIZE_FORMAT\n+#define G1PPRL_SUM_BYTE_FORMAT(tag)    \"  \" tag \": %zu\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-    guarantee(num_chunks <= _chunks_in_chunk_list, \"Found \" SIZE_FORMAT \" oop chunks which is more than there should be\", num_chunks);\n+    guarantee(num_chunks <= _chunks_in_chunk_list, \"Found %zu oop chunks which is more than there should be\", num_chunks);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-  assert(should_be_sliced(obj), \"Must be an array object %d and large \" SIZE_FORMAT, obj->is_objArray(), obj->size());\n+  assert(should_be_sliced(obj), \"Must be an array object %d and large %zu\", obj->is_objArray(), obj->size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkObjArrayProcessor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -177,1 +177,1 @@\n-         \"Num entries in completed buffers should be \" SIZE_FORMAT \" but are \" SIZE_FORMAT,\n+         \"Num entries in completed buffers should be %zu but are %zu\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-            \"Trying to invalidate beyond maximum region, from %u size \" SIZE_FORMAT,\n+            \"Trying to invalidate beyond maximum region, from %u size %zu\",\n@@ -76,1 +76,1 @@\n-      out->print_cr(\"_from_card_cache[%u][%u] = \" SIZE_FORMAT \".\",\n+      out->print_cr(\"_from_card_cache[%u][%u] = %zu.\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FromCardCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,1 @@\n-    log_trace(gc, phases)(\"Phase 2: skip compaction region index: %u, live words: \" SIZE_FORMAT,\n+    log_trace(gc, phases)(\"Phase 2: skip compaction region index: %u, live words: %zu\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -408,1 +408,1 @@\n-  log_trace(gc, phases)(\"      %s: \" SIZE_FORMAT, name, value);\n+  log_trace(gc, phases)(\"      %s: %zu\", name, value);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -392,1 +392,1 @@\n-      log_error(gc, verify)(\"region \" HR_FORMAT \" is empty but has \" SIZE_FORMAT \" code root entries\",\n+      log_error(gc, verify)(\"region \" HR_FORMAT \" is empty but has %zu code root entries\",\n@@ -401,1 +401,1 @@\n-      log_error(gc, verify)(\"region \" HR_FORMAT \" is a continuation of a humongous region but has \" SIZE_FORMAT \" code root entries\",\n+      log_error(gc, verify)(\"region \" HR_FORMAT \" is a continuation of a humongous region but has %zu code root entries\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-  out->print_cr(\"  Static structures = \" SIZE_FORMAT, G1HeapRegionRemSet::static_mem_size());\n+  out->print_cr(\"  Static structures = %zu\", G1HeapRegionRemSet::static_mem_size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-                            \"resize by \" SIZE_FORMAT \"B\",\n+                            \"resize by %zuB\",\n@@ -243,2 +243,2 @@\n-         \"minimum_desired_capacity = \" SIZE_FORMAT \", \"\n-         \"maximum_desired_capacity = \" SIZE_FORMAT,\n+         \"minimum_desired_capacity = %zu, \"\n+         \"maximum_desired_capacity = %zu\",\n@@ -261,2 +261,2 @@\n-                              \"Capacity: \" SIZE_FORMAT \"B occupancy: \" SIZE_FORMAT \"B live: \" SIZE_FORMAT \"B \"\n-                              \"min_desired_capacity: \" SIZE_FORMAT \"B (%zu %%)\",\n+                              \"Capacity: %zuB occupancy: %zuB live: %zuB \"\n+                              \"min_desired_capacity: %zuB (%zu %%)\",\n@@ -273,2 +273,2 @@\n-                              \"Capacity: \" SIZE_FORMAT \"B occupancy: \" SIZE_FORMAT \"B live: \" SIZE_FORMAT \"B \"\n-                              \"maximum_desired_capacity: \" SIZE_FORMAT \"B (%zu %%)\",\n+                              \"Capacity: %zuB occupancy: %zuB live: %zuB \"\n+                              \"maximum_desired_capacity: %zuB (%zu %%)\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,1 +99,1 @@\n-      assert(r->used() == 0, \"Expected used to be 0 but it was \" SIZE_FORMAT, r->used());\n+      assert(r->used() == 0, \"Expected used to be 0 but it was %zu\", r->used());\n@@ -112,1 +112,1 @@\n-    ls.print(\"%s regions: \" SIZE_FORMAT \"->\" SIZE_FORMAT \"(\"  SIZE_FORMAT \")\",\n+    ls.print(\"%s regions: %zu->%zu(%zu)\",\n@@ -144,2 +144,2 @@\n-    assert(usage._eden_region_count == 0, \"Expected no eden regions, but got \" SIZE_FORMAT, usage._eden_region_count);\n-    assert(usage._survivor_region_count == after._survivor_length, \"Expected survivors to be \" SIZE_FORMAT \" but was \" SIZE_FORMAT,\n+    assert(usage._eden_region_count == 0, \"Expected no eden regions, but got %zu\", usage._eden_region_count);\n+    assert(usage._survivor_region_count == after._survivor_length, \"Expected survivors to be %zu but was %zu\",\n@@ -147,1 +147,1 @@\n-    assert(usage._old_region_count == after._old_length, \"Expected old to be \" SIZE_FORMAT \" but was \" SIZE_FORMAT,\n+    assert(usage._old_region_count == after._old_length, \"Expected old to be %zu but was %zu\",\n@@ -149,1 +149,1 @@\n-    assert(usage._humongous_region_count == after._humongous_length, \"Expected humongous to be \" SIZE_FORMAT \" but was \" SIZE_FORMAT,\n+    assert(usage._humongous_region_count == after._humongous_length, \"Expected humongous to be %zu but was %zu\",\n@@ -159,1 +159,1 @@\n-  log_trace(gc, heap)(\" Used: \" SIZE_FORMAT \"K, Waste: \" SIZE_FORMAT \"K\",\n+  log_trace(gc, heap)(\" Used: %zuK, Waste: %zuK\",\n@@ -162,1 +162,1 @@\n-  log_info(gc, heap)(\"Old regions: \" SIZE_FORMAT \"->\" SIZE_FORMAT,\n+  log_info(gc, heap)(\"Old regions: %zu->%zu\",\n@@ -164,1 +164,1 @@\n-  log_trace(gc, heap)(\" Used: \" SIZE_FORMAT \"K, Waste: \" SIZE_FORMAT \"K\",\n+  log_trace(gc, heap)(\" Used: %zuK, Waste: %zuK\",\n@@ -167,1 +167,1 @@\n-  log_info(gc, heap)(\"Humongous regions: \" SIZE_FORMAT \"->\" SIZE_FORMAT,\n+  log_info(gc, heap)(\"Humongous regions: %zu->%zu\",\n@@ -169,1 +169,1 @@\n-  log_trace(gc, heap)(\" Used: \" SIZE_FORMAT \"K, Waste: \" SIZE_FORMAT \"K\",\n+  log_trace(gc, heap)(\" Used: %zuK, Waste: %zuK\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  log_debug(gc, ihop)(\"Target occupancy update: old: \" SIZE_FORMAT \"B, new: \" SIZE_FORMAT \"B\",\n+  log_debug(gc, ihop)(\"Target occupancy update: old: %zuB, new: %zuB\",\n@@ -57,2 +57,2 @@\n-  log_debug(gc, ihop)(\"Basic information (value update), threshold: \" SIZE_FORMAT \"B (%1.2f), target occupancy: \" SIZE_FORMAT \"B, current occupancy: \" SIZE_FORMAT \"B, \"\n-                      \"recent allocation size: \" SIZE_FORMAT \"B, recent allocation duration: %1.2fms, recent old gen allocation rate: %1.2fB\/s, recent marking phase length: %1.2fms\",\n+  log_debug(gc, ihop)(\"Basic information (value update), threshold: %zuB (%1.2f), target occupancy: %zuB, current occupancy: %zuB, \"\n+                      \"recent allocation size: %zuB, recent allocation duration: %1.2fms, recent old gen allocation rate: %1.2fB\/s, recent marking phase length: %1.2fms\",\n@@ -172,2 +172,2 @@\n-  log_debug(gc, ihop)(\"Adaptive IHOP information (value update), threshold: \" SIZE_FORMAT \"B (%1.2f), internal target occupancy: \" SIZE_FORMAT \"B, \"\n-                      \"occupancy: \" SIZE_FORMAT \"B, additional buffer size: \" SIZE_FORMAT \"B, predicted old gen allocation rate: %1.2fB\/s, \"\n+  log_debug(gc, ihop)(\"Adaptive IHOP information (value update), threshold: %zuB (%1.2f), internal target occupancy: %zuB, \"\n+                      \"occupancy: %zuB, additional buffer size: %zuB, predicted old gen allocation rate: %1.2fB\/s, \"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1IHOPControl.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  log_info_p(gc, init)(\"Heap Region Size: \" SIZE_FORMAT \"M\", G1HeapRegionSize \/ M);\n+  log_info_p(gc, init)(\"Heap Region Size: %zuM\", G1HeapRegionSize \/ M);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1InitLogger.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -288,2 +288,2 @@\n-  assert(_survivor_space_used <= _survivor_space_committed, \"Survivor used bytes(\" SIZE_FORMAT\n-         \") should be less than or equal to survivor committed(\" SIZE_FORMAT \")\",\n+  assert(_survivor_space_used <= _survivor_space_committed, \"Survivor used bytes(%zu)\"\n+         \" should be less than or equal to survivor committed(%zu)\",\n@@ -292,2 +292,2 @@\n-  assert(_old_gen_used <= _old_gen_committed, \"Old gen used bytes(\" SIZE_FORMAT\n-         \") should be less than or equal to old gen committed(\" SIZE_FORMAT \")\",\n+  assert(_old_gen_used <= _old_gen_committed, \"Old gen used bytes(%zu)\"\n+         \" should be less than or equal to old gen committed(%zu)\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,1 +218,1 @@\n-  assert(is_aligned(size_in_bytes, page_size()), \"Given size (\" SIZE_FORMAT \") should be aligned.\", size_in_bytes);\n+  assert(is_aligned(size_in_bytes, page_size()), \"Given size (%zu) should be aligned.\", size_in_bytes);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,1 +165,1 @@\n-#define RATE_TOTAL_FORMAT \"%0.0f%% \" SIZE_FORMAT \"\/\" SIZE_FORMAT\n+#define RATE_TOTAL_FORMAT \"%0.0f%% %zu\/%zu\"\n@@ -209,1 +209,1 @@\n-        ls.print(SIZE_FORMAT_W(8), _node_data[NewRegionAlloc]->get(req, alloc));\n+        ls.print(\"%8zu\", _node_data[NewRegionAlloc]->get(req, alloc));\n@@ -211,1 +211,1 @@\n-      ls.print(SIZE_FORMAT_W(8), _node_data[NewRegionAlloc]->sum(req));\n+      ls.print(\"%8zu\",  _node_data[NewRegionAlloc]->sum(req));\n@@ -218,1 +218,1 @@\n-      ls.print(SIZE_FORMAT_W(8), _node_data[NewRegionAlloc]->get(array_width, alloc));\n+      ls.print(\"%8zu\", _node_data[NewRegionAlloc]->get(array_width, alloc));\n@@ -220,1 +220,1 @@\n-    ls.print(SIZE_FORMAT_W(8), _node_data[NewRegionAlloc]->sum(array_width));\n+    ls.print(\"%8zu\", _node_data[NewRegionAlloc]->sum(array_width));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMAStats.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-            \"Reserved space base \" PTR_FORMAT \" is not aligned to requested page size \" SIZE_FORMAT, p2i(rs.base()), page_size);\n+            \"Reserved space base \" PTR_FORMAT \" is not aligned to requested page size %zu\", p2i(rs.base()), page_size);\n@@ -53,1 +53,1 @@\n-            \"Given used reserved space size needs to be OS page size aligned (\" SIZE_FORMAT \" bytes) but is \" SIZE_FORMAT, os::vm_page_size(), used_size);\n+            \"Given used reserved space size needs to be OS page size aligned (%zu bytes) but is %zu\", os::vm_page_size(), used_size);\n@@ -55,1 +55,1 @@\n-            \"Used size of reserved space \" SIZE_FORMAT \" bytes is smaller than reservation at \" SIZE_FORMAT \" bytes\", used_size, rs.size());\n+            \"Used size of reserved space %zu bytes is smaller than reservation at %zu bytes\", used_size, rs.size());\n@@ -57,1 +57,1 @@\n-            \"Expected that the virtual space is size aligned, but \" SIZE_FORMAT \" is not aligned to page size \" SIZE_FORMAT, rs.size(), page_size);\n+            \"Expected that the virtual space is size aligned, but %zu is not aligned to page size %zu\", rs.size(), page_size);\n@@ -124,1 +124,1 @@\n-            \"Given boundary page \" SIZE_FORMAT \" is beyond managed page count \" SIZE_FORMAT, index, _committed.size());\n+            \"Given boundary page %zu is beyond managed page count %zu\", index, _committed.size());\n@@ -131,2 +131,2 @@\n-           \"Tried to commit area from page \" SIZE_FORMAT \" to page \" SIZE_FORMAT \" \"\n-           \"that is outside of managed space of \" SIZE_FORMAT \" pages\",\n+           \"Tried to commit area from page %zu to page %zu \"\n+           \"that is outside of managed space of %zu pages\",\n@@ -150,1 +150,1 @@\n-            \"Given start page \" SIZE_FORMAT \" is larger or equal to end page \" SIZE_FORMAT, start_page, end_page);\n+            \"Given start page %zu is larger or equal to end page %zu\", start_page, end_page);\n@@ -152,1 +152,1 @@\n-            \"Given end page \" SIZE_FORMAT \" is beyond end of managed page amount of \" SIZE_FORMAT, end_page, _committed.size());\n+            \"Given end page %zu is beyond end of managed page amount of %zu\", end_page, _committed.size());\n@@ -179,1 +179,1 @@\n-            \"Specified area is not uncommitted, start page: \" SIZE_FORMAT \", page count: \" SIZE_FORMAT,\n+            \"Specified area is not uncommitted, start page: %zu, page count: %zu\",\n@@ -201,1 +201,1 @@\n-            \"Given start page \" SIZE_FORMAT \" is larger or equal to end page \" SIZE_FORMAT, start_page, end_page);\n+            \"Given start page %zu is larger or equal to end page %zu\", start_page, end_page);\n@@ -209,1 +209,1 @@\n-            \"Specified area is not committed, start page: \" SIZE_FORMAT \", page count: \" SIZE_FORMAT,\n+            \"Specified area is not committed, start page: %zu, page count: %zu\",\n@@ -239,3 +239,3 @@\n-  out->print_cr(\" - committed: \" SIZE_FORMAT, committed_size());\n-  out->print_cr(\" - reserved:  \" SIZE_FORMAT, reserved_size());\n-  out->print_cr(\" - preferred page size: \" SIZE_FORMAT, _page_size);\n+  out->print_cr(\" - committed: %zu\", committed_size());\n+  out->print_cr(\" - reserved:  %zu\", reserved_size());\n+  out->print_cr(\" - preferred page size: %zu\", _page_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-         \"Trying to access optional region idx %u beyond \" SIZE_FORMAT, index, _max_num_optional_regions);\n+         \"Trying to access optional region idx %u beyond %zu\", index, _max_num_optional_regions);\n@@ -87,1 +87,1 @@\n-         \"Trying to access optional region idx %u beyond \" SIZE_FORMAT, index, _max_num_optional_regions);\n+         \"Trying to access optional region idx %u beyond %zu\", index, _max_num_optional_regions);\n@@ -94,1 +94,1 @@\n-         \"Trying to access optional region idx %u beyond \" SIZE_FORMAT \" \" HR_FORMAT,\n+         \"Trying to access optional region idx %u beyond %zu \" HR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -609,2 +609,2 @@\n-           (\"%s refinement: %.2fms, refined: \" SIZE_FORMAT\n-            \", precleaned: \" SIZE_FORMAT \", dirtied: \" SIZE_FORMAT,\n+           (\"%s refinement: %.2fms, refined: %zu\"\n+            \", precleaned: %zu, dirtied: %zu\",\n@@ -760,1 +760,1 @@\n-    log_debug(gc, ergo, ihop)(\"%s occupancy: \" SIZE_FORMAT \"B allocation request: \" SIZE_FORMAT \"B threshold: \" SIZE_FORMAT \"B (%1.2f) source: %s\",\n+    log_debug(gc, ergo, ihop)(\"%s occupancy: %zuB allocation request: %zuB threshold: %zuB (%1.2f) source: %s\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-              \"Range not uncommitted, start: %u, num_regions: \" SIZE_FORMAT,\n+              \"Range not uncommitted, start: %u, num_regions: %zu\",\n@@ -116,1 +116,1 @@\n-             \"Range not committed, start: %u, num_regions: \" SIZE_FORMAT,\n+             \"Range not committed, start: %u, num_regions: %zu\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,1 @@\n-    assert(idx < _num_total_scan_chunks, \"Index \" SIZE_FORMAT \" out of bounds \" SIZE_FORMAT,\n+    assert(idx < _num_total_scan_chunks, \"Index %zu out of bounds %zu\",\n@@ -350,1 +350,1 @@\n-           \"Trying to access index \" SIZE_FORMAT \" out of bounds \" SIZE_FORMAT,\n+           \"Trying to access index %zu out of bounds %zu\",\n@@ -1441,1 +1441,1 @@\n-    ls.print_cr(\"Visited cards \" SIZE_FORMAT \" Total dirty \" SIZE_FORMAT \" (%.2lf%%) Total old \" SIZE_FORMAT \" (%.2lf%%)\",\n+    ls.print_cr(\"Visited cards %zu Total dirty %zu (%.2lf%%) Total old %zu (%.2lf%%)\",\n@@ -1474,1 +1474,1 @@\n-    log_debug(gc, ergo)(\"Running %s using %u workers for \" SIZE_FORMAT \" regions\",\n+    log_debug(gc, ergo)(\"Running %s using %u workers for %zu regions\",\n@@ -1507,1 +1507,1 @@\n-         \"Card at \" PTR_FORMAT \" index \" SIZE_FORMAT \" representing heap at \" PTR_FORMAT \" (%u) must be in committed heap\",\n+         \"Card at \" PTR_FORMAT \" index %zu representing heap at \" PTR_FORMAT \" (%u) must be in committed heap\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,2 +156,2 @@\n-    out->print_cr(\"    \" SIZE_FORMAT_W(8) \" (%5.1f%%) by \" SIZE_FORMAT \" \"\n-                  \"(\" SIZE_FORMAT \") %s regions unused \" SIZE_FORMAT,\n+    out->print_cr(\"    %8zu (%5.1f%%) by %zu \"\n+                  \"(%zu) %s regions unused %zu\",\n@@ -164,2 +164,2 @@\n-    out->print_cr(\"     \" SIZE_FORMAT_W(8) \" (%5.1f%%) entries by \" SIZE_FORMAT \" \"\n-                  \"(\" SIZE_FORMAT \") %s regions\",\n+    out->print_cr(\"     %8zu (%5.1f%%) entries by %zu \"\n+                  \"(%zu) %s regions\",\n@@ -171,1 +171,1 @@\n-    out->print_cr(\"    \" SIZE_FORMAT_W(8) \"%s (%5.1f%%) by \" SIZE_FORMAT \" %s regions\",\n+    out->print_cr(\"    %8zu%s (%5.1f%%) by %zu %s regions\",\n@@ -178,1 +178,1 @@\n-    out->print_cr(\"     \" SIZE_FORMAT_W(8) \" (%5.1f%%) elements by \" SIZE_FORMAT \" %s regions\",\n+    out->print_cr(\"     %8zu (%5.1f%%) elements by %zu %s regions\",\n@@ -270,2 +270,2 @@\n-    out->print_cr(\"  Total per region rem sets sizes = \" SIZE_FORMAT\n-                  \" Max = \" SIZE_FORMAT \" unused = \" SIZE_FORMAT,\n+    out->print_cr(\"  Total per region rem sets sizes = %zu\"\n+                  \" Max = %zu unused = %zu\",\n@@ -279,1 +279,1 @@\n-    out->print_cr(\"    \" SIZE_FORMAT \" occupied cards represented.\",\n+    out->print_cr(\"    %zu occupied cards represented.\",\n@@ -288,1 +288,1 @@\n-                  \"size = \" SIZE_FORMAT \" occupied = \" SIZE_FORMAT,\n+                  \"size = %zu occupied = %zu\",\n@@ -299,2 +299,2 @@\n-    out->print_cr(\"  Total heap region code root sets sizes = \" SIZE_FORMAT \"%s.\"\n-                  \"  Max = \" SIZE_FORMAT \"%s.\",\n+    out->print_cr(\"  Total heap region code root sets sizes = %zu%s.\"\n+                  \"  Max = %zu%s.\",\n@@ -309,1 +309,1 @@\n-    out->print_cr(\"    \" SIZE_FORMAT \" code roots represented.\",\n+    out->print_cr(\"    %zu code roots represented.\",\n@@ -316,1 +316,1 @@\n-                  \"size = \" SIZE_FORMAT \"%s, num_slots = \" SIZE_FORMAT \".\",\n+                  \"size = %zu%s, num_slots = %zu.\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,1 @@\n-  log_trace(gc, heap)(\"Concurrent Uncommit: \" SIZE_FORMAT \"%s, %u regions, %1.3fms\",\n+  log_trace(gc, heap)(\"Concurrent Uncommit: %zu%s, %u regions, %1.3fms\",\n@@ -93,1 +93,1 @@\n-  log_debug(gc, heap)(\"Concurrent Uncommit Summary: \" SIZE_FORMAT \"%s, %u regions, %1.3fms\",\n+  log_debug(gc, heap)(\"Concurrent Uncommit Summary: %zu%s, %u regions, %1.3fms\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -397,1 +397,1 @@\n-    log_debug(gc, humongous)(\"Reclaimed humongous region %u (object size \" SIZE_FORMAT \" @ \" PTR_FORMAT \")\",\n+    log_debug(gc, humongous)(\"Reclaimed humongous region %u (object size %zu @ \" PTR_FORMAT \")\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,2 +47,2 @@\n-      log_warning(gc, ergo)(\"NewSize (\" SIZE_FORMAT \"k) is greater than the MaxNewSize (\" SIZE_FORMAT \"k). \"\n-                            \"A new max generation size of \" SIZE_FORMAT \"k will be used.\",\n+      log_warning(gc, ergo)(\"NewSize (%zuk) is greater than the MaxNewSize (%zuk). \"\n+                            \"A new max generation size of %zuk will be used.\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGenSizer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-                        \"G1HeapRegionSize (\" SIZE_FORMAT \") must be \"\n+                        \"G1HeapRegionSize (%zu) must be \"\n@@ -174,1 +174,1 @@\n-                        \"NewSize (\" SIZE_FORMAT \") must be less than ergonomic maximum value\\n\",\n+                        \"NewSize (%zu) must be less than ergonomic maximum value\\n\",\n","filename":"src\/hotspot\/share\/gc\/g1\/jvmFlagConstraintsG1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}