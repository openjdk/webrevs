{"files":[{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4514071\n+ * @summary Tests that JTable, JList and JTree provide drag-over feedback.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DragOverFeedbackTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.GridLayout;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.BorderFactory;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.JTable;\n+import javax.swing.JTree;\n+import javax.swing.TransferHandler;\n+\n+public class DragOverFeedbackTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test is designed to make sure that JTable, JTree, and JList\n+        provide visual feedback when a DnD drag operation occurs over them.\n+\n+        Click on the label where it says \"DRAG FROM HERE\" and begin dragging.\n+        Drag over each of the three components (JTable, JTree, JList).\n+        While you're dragging over them, they should visually indicate the\n+        location where a drop would occur. This visual indication may use the\n+        selection but could be some other visual.\n+\n+        If above is true press PASS else press FAIL.\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(DragOverFeedbackTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static final TransferHandler handler = new TransferHandler() {\n+        public boolean canImport(JComponent comp, DataFlavor[] flavors) {\n+            return true;\n+        }\n+    };\n+\n+    private static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"DragOverFeedbackTest\");\n+        final JLabel label = new JLabel(\"DRAG FROM HERE\");\n+        label.setPreferredSize(new Dimension(400, 25));\n+        label.setTransferHandler(new TransferHandler(\"text\"));\n+        label.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent me) {\n+                label.getTransferHandler().exportAsDrag(label, me, TransferHandler.COPY);\n+            }\n+        });\n+        JTable table = new JTable(\n+                            new String[][] {{\"one\"}, {\"two\"}, {\"three\"}, {\"four\"}},\n+                            new String[] {\"1\"});\n+        table.setRowSelectionInterval(1, 1);\n+        table.setTransferHandler(handler);\n+\n+        JList list = new JList(new String[] {\"one\", \"two\", \"three\", \"four\"});\n+        list.setSelectedIndex(1);\n+        list.setTransferHandler(handler);\n+\n+        JTree tree = new JTree();\n+        tree.setSelectionRow(1);\n+        tree.setTransferHandler(handler);\n+\n+        frame.add(label, BorderLayout.NORTH);\n+\n+        JPanel wrapper = new JPanel();\n+        wrapper.setLayout(new GridLayout(3, 1));\n+        table.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+        wrapper.add(table);\n+        list.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+        wrapper.add(list);\n+        tree.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+        wrapper.add(tree);\n+        frame.add(wrapper);\n+        frame.setSize(500, 500);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/DataTransfer\/DragOverFeedbackTest.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4546134\n+ * @summary Tests that JList shows the right drop location when it has multiple columns.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ListDragOverFeedbackTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.GridLayout;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.BorderFactory;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.TransferHandler;\n+\n+public class ListDragOverFeedbackTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+        JList should provide visual feedback when a DnD drag operation is\n+        occurring over it. This test is to check that it provides the\n+        feedback about the drop location correctly.\n+\n+        Click on the label where it says \"DRAG FROM HERE\" and begin dragging.\n+        Drag over each column in each of the three JLists and make sure that\n+        the drop location indicated is appropriate for the mouse location. For\n+        instance, if the mouse is in the first column, the drop location should\n+        also be indicated in that first column.\n+\n+        If above is true press PASS else press FAIL.\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(ListDragOverFeedbackTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static final TransferHandler handler = new TransferHandler() {\n+        public boolean canImport(JComponent comp, DataFlavor[] flavors) {\n+            return true;\n+        }\n+    };\n+\n+    private static JFrame createTestUI() {\n+        String[] vals = new String[] {\n+                \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n+                \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"};\n+\n+        JFrame frame = new JFrame(\"ListDragOverFeedbackTest\");\n+        final JLabel label = new JLabel(\"DRAG FROM HERE\");\n+        label.setPreferredSize(new Dimension(400, 25));\n+        label.setTransferHandler(new TransferHandler(\"text\"));\n+        label.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent me) {\n+                label.getTransferHandler().exportAsDrag(label, me,\n+                                              TransferHandler.COPY);\n+            }\n+        });\n+\n+        JList list1 = new JList(vals);\n+        list1.setTransferHandler(handler);\n+        list1.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+\n+        JList list2 = new JList(vals);\n+        list2.setLayoutOrientation(JList.VERTICAL_WRAP);\n+        list2.setTransferHandler(handler);\n+        list2.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+\n+        JList list3 = new JList(vals);\n+        list3.setLayoutOrientation(JList.HORIZONTAL_WRAP);\n+        list3.setTransferHandler(handler);\n+        list3.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+\n+        JPanel wrapper = new JPanel();\n+        wrapper.setLayout(new GridLayout(3, 1));\n+        wrapper.add(list1);\n+        wrapper.add(list2);\n+        wrapper.add(list3);\n+\n+        frame.add(label, BorderLayout.NORTH);\n+        frame.add(wrapper);\n+        frame.setSize(400, 500);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/DataTransfer\/ListDragOverFeedbackTest.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4655513\n+ * @summary TransferHandler doesn't recognize ACTION_LINK\n+            as a valid drop action\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build Util\n+ * @run main bug4655513\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureRecognizer;\n+import java.awt.dnd.DragSource;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4655513 {\n+    private static final String LINK_URL = \"http:\/\/www.example.com\";\n+    private static JEditorPane editor;\n+    private static JLabel dragSource;\n+    private static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(bug4655513::createAndShowGUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            Point dragStartLoc = Util.getCenterPoint(dragSource);\n+            Point dragEndLoc = Util.getCenterPoint(editor);\n+            robot.mouseMove(dragStartLoc.x, dragStartLoc.y);\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            for (int y = dragStartLoc.y; y < dragEndLoc.y; y += 3) {\n+                robot.mouseMove(dragStartLoc.x, y);\n+                robot.delay(50);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(500);\n+\n+            if (!editor.getText().contains(LINK_URL)) {\n+                throw new RuntimeException(\"Test Failed! Drag & Drop did not work.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(frame::dispose);\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        frame = new JFrame(\"Bug4655513 - Data Transfer\");\n+        dragSource = new JLabel(\"To Test DnD, drag this label.\");\n+        dragSource.setForeground(Color.RED);\n+        dragSource.setPreferredSize(new Dimension(250, 50));\n+        frame.add(dragSource, BorderLayout.NORTH);\n+\n+        editor = new JEditorPane(\"text\/plain\", \"Drop here.\");\n+        editor.setPreferredSize(new Dimension(250, 50));\n+        frame.add(new JScrollPane(editor), BorderLayout.CENTER);\n+\n+        DragSource ds = new DragSource();\n+        DragGestureRecognizer rec =\n+            ds.createDefaultDragGestureRecognizer(dragSource,\n+                    DnDConstants.ACTION_LINK,\n+                    dge -> dge.startDrag(null, new StringSelection(LINK_URL)));\n+        frame.setSize(300, 150);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/DataTransfer\/bug4655513.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4369355\n+ * @summary To verify if SwingUtilities.convertPointToScreen() (for invisible frame)\n+ *          and SwingUtilities.convertPointFromScreen() return correct values\n+ * @run main bug4369355\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4369355 {\n+    private static JFrame frame;\n+\n+    private static volatile Point frameToScreenLoc;\n+    private static volatile Point frameFromScreenLoc;\n+\n+    private static final Point EXPECTED_FROM_SCREEN_LOC = new Point(0, 0);\n+    private static final Point EXPECTED_TO_SCREEN_LOC = new Point(100, 100);\n+\n+    public static void main (String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"bug4369355\");\n+                frame.setBounds(100, 100, 100, 100);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                frameToScreenLoc = new Point(0, 0);\n+                SwingUtilities.convertPointToScreen(frameToScreenLoc, frame);\n+            });\n+            robot.delay(100);\n+\n+            if (!frameToScreenLoc.equals(EXPECTED_TO_SCREEN_LOC)) {\n+                throw new RuntimeException(\"SwingUtilities.convertPointToScreen()\"\n+                        + \" returns incorrect point \" + frameToScreenLoc + \"\\n\"\n+                        + \"Should be \" + EXPECTED_TO_SCREEN_LOC);\n+            }\n+\n+            SwingUtilities.invokeAndWait(() -> frame.setVisible(true));\n+            robot.delay(500);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                frameFromScreenLoc = frame.getLocationOnScreen();\n+                SwingUtilities.convertPointFromScreen(frameFromScreenLoc, frame);\n+            });\n+            robot.delay(100);\n+\n+            if (!frameFromScreenLoc.equals(EXPECTED_FROM_SCREEN_LOC)) {\n+                throw new RuntimeException(\"SwingUtilities.convertPointFromScreen()\"\n+                        + \" returns incorrect point \" + frameFromScreenLoc + \"\\n\"\n+                        + \"Should be \" + EXPECTED_FROM_SCREEN_LOC);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(frame::dispose);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/SwingUtilities\/bug4369355.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4967768\n+ * @requires (os.family != \"mac\")\n+ * @summary Tests that underline is painted correctly in mnemonics\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4967768\n+ *\/\n+\n+import java.awt.Font;\n+import javax.swing.JButton;\n+import javax.swing.JPanel;\n+\n+public class bug4967768 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            When the test starts you'll see a button \"Oops\"\n+            with the \"p\" letter underlined at the bottom\n+            of the instruction frame.\n+\n+            Ensure the underline cuts through the descender\n+            of letter \"p\", i.e. the underline is painted\n+            not below the letter but below the baseline.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .splitUIBottom(bug4967768::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JPanel createTestUI() {\n+        JPanel panel = new JPanel();\n+        JButton but = new JButton(\"Oops\");\n+        but.setFont(new Font(\"Dialog\", Font.BOLD, 24));\n+        but.setMnemonic('p');\n+        panel.add(but);\n+        return panel;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/SwingUtilities\/bug4967768.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}