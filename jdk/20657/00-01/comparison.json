{"files":[{"patch":"@@ -262,0 +262,13 @@\n+\n+#define SET_TRIGFUNC_OR_NULL(name)                              \\\n+  if (StubRoutines::name() != nullptr) {                        \\\n+    name = StubRoutines::name();                                \\\n+  } else {                                                      \\\n+    name = nullptr;                                             \\\n+  }\n+\n+  SET_TRIGFUNC_OR_NULL(dtanh);\n+\n+#undef SET_TRIGFUNC_OR_NULL\n+\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Random;\n@@ -975,0 +976,40 @@\n+    \/**\n+     * Test accuracy of Math.tanh intrinsic using StrictMath.tanh as the reference.\n+     * The specified accuracy is 2.5 ulps.\n+     *\n+     *\/\n+    static int testTanhIntrinsicWithReference() {\n+        double b1 = 0.02;\n+        double b2 = 5.1;\n+        double b3 = 55 * Math.log(2)\/2; \/\/ ~19.062\n+\n+        int failures = 0;\n+\n+        failures += testTanhWithReferenceInRange(0.0, b3 + 2.0); \/\/ entire range\n+        failures += testTanhWithReferenceInRange(b1 - 0.005, 0.01);\n+        failures += testTanhWithReferenceInRange(b2 - 0.5, 1.0);\n+        failures += testTanhWithReferenceInRange(b3 - 2.5, 5.0);\n+\n+        return failures;\n+\n+    }\n+\n+    static int testTanhWithReferenceInRange(double min, double range) {\n+        int failures = 0;\n+\n+        double [] testCases = new double[500];\n+\n+        Random rand = new Random(0);\n+        for (int i = 0; i < testCases.length; i++) {\n+            testCases[i] = min + range * rand.nextDouble();\n+        }\n+\n+        for(int i = 0; i < testCases.length; i++) {\n+            double testCase = testCases[i];\n+            failures += testTanhWithReferenceUlpDiff(testCase, StrictMath.tanh(testCase), 2.5);\n+        }\n+\n+        return failures;\n+    }\n+\n+\n@@ -999,0 +1040,11 @@\n+\n+    public static int testTanhWithReferenceUlpDiff(double input,\n+                                                   double expected,\n+                                                   double ulps) {\n+        int failures = 0;\n+\n+        failures += Tests.testUlpDiffWithAbsBound(\"Math.tanh\",       input,  Math::tanh,       expected, ulps, 1.0);\n+        failures += Tests.testUlpDiffWithAbsBound(\"Math.tanh\",      -input,  Math::tanh,      -expected, ulps, 1.0);\n+\n+        return failures;\n+    }\n","filename":"test\/jdk\/java\/lang\/Math\/HyperbolicTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"}]}