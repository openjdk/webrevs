{"files":[{"patch":"@@ -667,1 +667,1 @@\n-\/\/ Resize input or output array to grow it the next larger power-of-2 bigger\n+\/\/ Resize input or output array to grow it to the next larger power-of-2 bigger\n@@ -669,1 +669,1 @@\n-void Node::resize_array(Node**& array, node_idx_t& max_size, uint len, bool is_input_array) {\n+void Node::resize_array(Node**& array, node_idx_t& max_size, uint len, bool needs_clearing) {\n@@ -675,1 +675,1 @@\n-    if (is_input_array) {\n+    if (needs_clearing) {\n@@ -684,6 +684,1 @@\n-  \/\/ Trimming to limit allows a uint8 to handle up to 255 edges.\n-  \/\/ Previously I was using only powers-of-2 which peaked at 128 edges.\n-  \/\/if( new_max >= limit ) new_max = limit-1;\n-  if (!is_input_array) {\n-    assert(array != nullptr && array != NO_OUT_ARRAY, \"out must have sensible value\");\n-  }\n+  assert(needs_clearing || (array != nullptr && array != NO_OUT_ARRAY), \"out must have sensible value\");\n@@ -691,1 +686,1 @@\n-  if (is_input_array) {\n+  if (needs_clearing) {\n@@ -697,1 +692,1 @@\n-  assert(max_size == new_max && max_size > len, \"int width of _max is too small\");\n+  assert(max_size > len, \"int width of _max or _outmax is too small\");\n@@ -708,1 +703,1 @@\n-void Node::out_grow( uint len ) {\n+void Node::out_grow(uint len) {\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -338,3 +338,3 @@\n-  \/\/ Resize input or output array to grow it the next larger power-of-2 bigger\n-  \/\/ than len.\n-  void resize_array(Node**& array, node_idx_t& max_size, uint len, bool is_input_array);\n+  \/\/ Resize input or output array to grow it to the next larger power-of-2\n+  \/\/ bigger than len.\n+  void resize_array(Node**& array, node_idx_t& max_size, uint len, bool needs_clearing);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}