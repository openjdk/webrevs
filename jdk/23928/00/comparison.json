{"files":[{"patch":"@@ -667,3 +667,4 @@\n-\/\/------------------------------grow-------------------------------------------\n-\/\/ Grow the input array, making space for more edges\n-void Node::grow(uint len) {\n+\/\/------------------------------resize_array-------------------------------------------\n+ \/\/ Resize input or output array to grow it the next larger power-of-2 bigger\n+\/\/ than len.\n+void Node::resize_array( Node**& array, node_idx_t& max_size, uint len, bool is_in) {\n@@ -671,1 +672,1 @@\n-  uint new_max = _max;\n+  uint new_max = max_size;\n@@ -673,8 +674,9 @@\n-    _max = 4;\n-    _in = (Node**)arena->Amalloc(4*sizeof(Node*));\n-    Node** to = _in;\n-    to[0] = nullptr;\n-    to[1] = nullptr;\n-    to[2] = nullptr;\n-    to[3] = nullptr;\n-    return;\n+    max_size = 4;\n+    array = (Node**)arena->Amalloc(4*sizeof(Node*));\n+    if(is_in){\n+      array[0] = nullptr;\n+      array[1] = nullptr;\n+      array[2] = nullptr;\n+      array[3] = nullptr;\n+    }\n+      return;\n@@ -686,3 +688,8 @@\n-  _in = (Node**)arena->Arealloc(_in, _max*sizeof(Node*), new_max*sizeof(Node*));\n-  Copy::zero_to_bytes(&_in[_max], (new_max-_max)*sizeof(Node*)); \/\/ null all new space\n-  _max = new_max;               \/\/ Record new max length\n+  if(!is_in){\n+    assert(array != nullptr && array != NO_OUT_ARRAY, \"out must have sensible value\");\n+  }\n+  array = (Node**)arena->Arealloc(array, max_size*sizeof(Node*), new_max*sizeof(Node*));\n+  if(is_in){\n+    Copy::zero_to_bytes(&array[max_size], (new_max-max_size)*sizeof(Node*)); \/\/ null all new space\n+  }\n+  max_size = new_max;               \/\/ Record new max length\n@@ -691,1 +698,7 @@\n-  assert(_max == new_max && _max > len, \"int width of _max is too small\");\n+  assert(max_size == new_max && max_size > len, \"int width of _max is too small\");\n+}\n+\n+\/\/------------------------------grow-------------------------------------------\n+\/\/ Grow the input array, making space for more edges\n+void Node::grow(uint len) {\n+  resize_array(_in, _max, len, true);\n@@ -698,18 +711,1 @@\n-  Arena* arena = Compile::current()->node_arena();\n-  uint new_max = _outmax;\n-  if( new_max == 0 ) {\n-    _outmax = 4;\n-    _out = (Node **)arena->Amalloc(4*sizeof(Node*));\n-    return;\n-  }\n-  new_max = next_power_of_2(len);\n-  \/\/ Trimming to limit allows a uint8 to handle up to 255 edges.\n-  \/\/ Previously I was using only powers-of-2 which peaked at 128 edges.\n-  \/\/if( new_max >= limit ) new_max = limit-1;\n-  assert(_out != nullptr && _out != NO_OUT_ARRAY, \"out must have sensible value\");\n-  _out = (Node**)arena->Arealloc(_out,_outmax*sizeof(Node*),new_max*sizeof(Node*));\n-  \/\/Copy::zero_to_bytes(&_out[_outmax], (new_max-_outmax)*sizeof(Node*)); \/\/ null all new space\n-  _outmax = new_max;               \/\/ Record new max length\n-  \/\/ This assertion makes sure that Node::_max is wide enough to\n-  \/\/ represent the numerical value of new_max.\n-  assert(_outmax == new_max && _outmax > len, \"int width of _outmax is too small\");\n+  resize_array(_out, _outmax, len, false);\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":30,"deletions":34,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -338,0 +338,3 @@\n+  \/\/ Resize input or output array to grow it the next larger power-of-2 bigger\n+  \/\/ than len.\n+  void resize_array(Node **&array, node_idx_t &max_size, uint len, bool is_in);\n@@ -339,1 +342,1 @@\n- public:\n+public:\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}