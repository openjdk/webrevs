{"files":[{"patch":"@@ -667,2 +667,1 @@\n-\/\/------------------------------resize_array-------------------------------------------\n- \/\/ Resize input or output array to grow it the next larger power-of-2 bigger\n+\/\/ Resize input or output array to grow it the next larger power-of-2 bigger\n@@ -670,1 +669,1 @@\n-void Node::resize_array( Node**& array, node_idx_t& max_size, uint len, bool is_in) {\n+void Node::resize_array(Node**& array, node_idx_t& max_size, uint len, bool is_input_array) {\n@@ -673,1 +672,1 @@\n-  if( new_max == 0 ) {\n+  if (new_max == 0) {\n@@ -675,2 +674,2 @@\n-    array = (Node**)arena->Amalloc(4*sizeof(Node*));\n-    if(is_in){\n+    array = (Node**)arena->Amalloc(4 * sizeof(Node*));\n+    if (is_input_array) {\n@@ -682,1 +681,1 @@\n-      return;\n+    return;\n@@ -688,1 +687,1 @@\n-  if(!is_in){\n+  if (!is_input_array) {\n@@ -691,3 +690,3 @@\n-  array = (Node**)arena->Arealloc(array, max_size*sizeof(Node*), new_max*sizeof(Node*));\n-  if(is_in){\n-    Copy::zero_to_bytes(&array[max_size], (new_max-max_size)*sizeof(Node*)); \/\/ null all new space\n+  array = (Node**)arena->Arealloc(array, max_size * sizeof(Node*), new_max * sizeof(Node*));\n+  if (is_input_array) {\n+    Copy::zero_to_bytes(&array[max_size], (new_max - max_size) * sizeof(Node*)); \/\/ null all new space\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-  void resize_array(Node **&array, node_idx_t &max_size, uint len, bool is_in);\n+  void resize_array(Node**& array, node_idx_t& max_size, uint len, bool is_input_array);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}