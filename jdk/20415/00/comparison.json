{"files":[{"patch":"@@ -2944,14 +2944,0 @@\n-G1HeapRegion* G1CollectedHeap::alloc_highest_free_region() {\n-  bool expanded = false;\n-  uint index = _hrm.find_highest_free(&expanded);\n-\n-  if (index != G1_NO_HRM_INDEX) {\n-    if (expanded) {\n-      log_debug(gc, ergo, heap)(\"Attempt heap expansion (requested address range outside heap bounds). region size: \" SIZE_FORMAT \"B\",\n-                                G1HeapRegion::GrainWords * HeapWordSize);\n-    }\n-    return _hrm.allocate_free_regions_starting_at(index, 1);\n-  }\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -672,4 +672,0 @@\n-  \/\/ Allocate the highest free region in the reserved heap. This will commit\n-  \/\/ regions as necessary.\n-  G1HeapRegion* alloc_highest_free_region();\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}