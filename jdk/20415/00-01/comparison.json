{"files":[{"patch":"@@ -532,22 +532,0 @@\n-uint G1HeapRegionManager::find_highest_free(bool* expanded) {\n-  \/\/ Loop downwards from the highest region index, looking for an\n-  \/\/ entry which is either free or not yet committed.  If not yet\n-  \/\/ committed, expand at that index.\n-  for (uint curr = reserved_length(); curr-- > 0;) {\n-    G1HeapRegion* hr = _regions.get_by_index(curr);\n-    if (hr == nullptr || !is_available(curr)) {\n-      \/\/ Found uncommitted and free region, expand to make it available for use.\n-      expand_exact(curr, 1, nullptr);\n-      assert(at(curr)->is_free(), \"Region (%u) must be available and free after expand\", curr);\n-\n-      *expanded = true;\n-      return curr;\n-    }\n-    if (hr->is_free()) {\n-      *expanded = false;\n-      return curr;\n-    }\n-  }\n-  return G1_NO_HRM_INDEX;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -259,5 +259,0 @@\n-  \/\/ Find the highest free or uncommitted region in the reserved heap,\n-  \/\/ and if uncommitted, commit it. If none are available, return G1_NO_HRM_INDEX.\n-  \/\/ Set the 'expanded' boolean true if a new region was committed.\n-  uint find_highest_free(bool* expanded);\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}