{"files":[{"patch":"@@ -891,0 +891,6 @@\n+  \/\/ Short-cut calculation if the heap size is fixed (MinHeapSize == MaxHeapSize) and\n+  \/\/ cannot expand or shrink.\n+  if (is_fixed_size_heap()) {\n+    log_debug(gc, ergo, heap)(\"Skip heap resize after full collection.\");\n+    return;\n+  }\n@@ -901,0 +907,7 @@\n+  \/\/ Short-cut calculation if the heap size is fixed (MinHeapSize == MaxHeapSize) and\n+  \/\/ cannot expand or shrink.\n+  if (is_fixed_size_heap()) {\n+    log_trace(gc, ergo, heap)(\"Skip heap resize after young collection.\");\n+    return;\n+  }\n+\n@@ -1215,1 +1228,2 @@\n-  _region_attr() {\n+  _region_attr(),\n+  _fixed_size_heap(MaxHeapSize == MinHeapSize) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -572,0 +572,1 @@\n+  inline bool is_fixed_size_heap() const;\n@@ -1058,0 +1059,4 @@\n+  \/\/ True if the heap size is fixed (MinHeapSize == MaxHeapSize) and\n+  \/\/ thus cannot expand or shrink.\n+  bool _fixed_size_heap;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -323,0 +323,3 @@\n+inline bool G1CollectedHeap::is_fixed_size_heap() const {\n+  return _fixed_size_heap;\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}