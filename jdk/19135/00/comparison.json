{"files":[{"patch":"@@ -62,0 +62,11 @@\n+#define log_if_needed(...)        \\\n+  if (C->print_intrinsics()) {    \\\n+    tty->print_cr(__VA_ARGS__);   \\\n+  }\n+\n+#ifndef PRODUCT\n+#define non_product_log_if_needed(...) log_if_needed(__VA_ARGS__)\n+#else\n+#define non_product_log_if_needed(...)\n+#endif\n+\n@@ -88,6 +99,2 @@\n-      #ifndef PRODUCT\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** Rejected vector mask loading (%s,%s,%d) because architecture does not support it\",\n-                        NodeClassNames[Op_VectorLoadMask], type2name(elem_bt), num_elem);\n-        }\n-      #endif\n+        non_product_log_if_needed(\"  ** Rejected vector mask loading (%s,%s,%d) because architecture does not support it\",\n+                                  NodeClassNames[Op_VectorLoadMask], type2name(elem_bt), num_elem);\n@@ -101,6 +108,2 @@\n-      #ifndef PRODUCT\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"Rejected vector mask predicate using (%s,%s,%d) because architecture does not support it\",\n-                        NodeClassNames[opc], type2name(elem_bt), num_elem);\n-        }\n-      #endif\n+        non_product_log_if_needed(\"Rejected vector mask predicate using (%s,%s,%d) because architecture does not support it\",\n+                                  NodeClassNames[opc], type2name(elem_bt), num_elem);\n@@ -188,5 +191,1 @@\n-#ifndef PRODUCT\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** Rejected intrinsification because no valid vector op could be extracted\");\n-    }\n-#endif\n+    non_product_log_if_needed(\"  ** Rejected intrinsification because no valid vector op could be extracted\");\n@@ -198,6 +197,2 @@\n-#ifndef PRODUCT\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support variable vector shifts\",\n-                      NodeClassNames[sopc], type2name(type), num_elem);\n-      }\n-#endif\n+      non_product_log_if_needed(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support variable vector shifts\",\n+                                NodeClassNames[sopc], type2name(type), num_elem);\n@@ -208,6 +203,2 @@\n-#ifndef PRODUCT\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support integral vector negate\",\n-                      NodeClassNames[sopc], type2name(type), num_elem);\n-      }\n-#endif\n+      non_product_log_if_needed(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support integral vector negate\",\n+                                NodeClassNames[sopc], type2name(type), num_elem);\n@@ -219,6 +210,2 @@\n-#ifndef PRODUCT\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support it\",\n-                      NodeClassNames[sopc], type2name(type), num_elem);\n-      }\n-#endif\n+      non_product_log_if_needed(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support it\",\n+                                NodeClassNames[sopc], type2name(type), num_elem);\n@@ -233,6 +220,2 @@\n-#ifndef PRODUCT\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** Rejected vector mask op (%s,%s,%d) because architecture does not support it\",\n-                      NodeClassNames[sopc], type2name(type), num_elem);\n-      }\n-#endif\n+      non_product_log_if_needed(\"  ** Rejected vector mask op (%s,%s,%d) because architecture does not support it\",\n+                                NodeClassNames[sopc], type2name(type), num_elem);\n@@ -244,6 +227,2 @@\n-#ifndef PRODUCT\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** Not a svml call or load\/store vector op (%s,%s,%d)\",\n-                        NodeClassNames[sopc], type2name(type), num_elem);\n-        }\n-#endif\n+        non_product_log_if_needed(\"  ** Not a svml call or load\/store vector op (%s,%s,%d)\",\n+                                  NodeClassNames[sopc], type2name(type), num_elem);\n@@ -257,4 +236,2 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support variable vector shifts\",\n-                    NodeClassNames[sopc], type2name(type), num_elem);\n-    }\n+    log_if_needed(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support variable vector shifts\",\n+                  NodeClassNames[sopc], type2name(type), num_elem);\n@@ -270,6 +247,2 @@\n-    #ifndef PRODUCT\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** Rejected vector mask loading (%s,%s,%d) because architecture does not support it\",\n-                      NodeClassNames[Op_VectorLoadMask], type2name(type), num_elem);\n-      }\n-    #endif\n+      non_product_log_if_needed(\"  ** Rejected vector mask loading (%s,%s,%d) because architecture does not support it\",\n+                                NodeClassNames[Op_VectorLoadMask], type2name(type), num_elem);\n@@ -286,6 +259,2 @@\n-    #ifndef PRODUCT\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"Rejected vector mask storing (%s,%s,%d) because architecture does not support it\",\n-                      NodeClassNames[Op_VectorStoreMask], type2name(type), num_elem);\n-      }\n-    #endif\n+      non_product_log_if_needed(\"Rejected vector mask storing (%s,%s,%d) because architecture does not support it\",\n+                                NodeClassNames[Op_VectorStoreMask], type2name(type), num_elem);\n@@ -308,6 +277,2 @@\n-    #ifndef PRODUCT\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"Rejected vector mask predicate using (%s,%s,%d) because architecture does not support it\",\n-                      NodeClassNames[sopc], type2name(type), num_elem);\n-      }\n-    #endif\n+      non_product_log_if_needed(\"Rejected vector mask predicate using (%s,%s,%d) because architecture does not support it\",\n+                                NodeClassNames[sopc], type2name(type), num_elem);\n@@ -363,2 +328,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n@@ -369,1 +333,0 @@\n-    }\n@@ -375,3 +338,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -381,3 +342,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -393,3 +352,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(2)->Opcode()]);\n-      }\n+      log_if_needed(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(2)->Opcode()]);\n@@ -400,3 +357,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** mask klass argument not initialized\");\n-      }\n+      log_if_needed(\"  ** mask klass argument not initialized\");\n@@ -407,3 +362,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** null mask values are not allowed for masked op\");\n-      }\n+      log_if_needed(\"  ** null mask values are not allowed for masked op\");\n@@ -419,3 +372,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** operation not supported: opc=%s bt=%s\", NodeClassNames[opc], type2name(elem_bt));\n-    }\n+    log_if_needed(\"  ** operation not supported: opc=%s bt=%s\", NodeClassNames[opc], type2name(elem_bt));\n@@ -426,2 +377,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not a svml call: arity=%d opc=%d vlen=%d etype=%s\",\n+      log_if_needed(\"  ** not a svml call: arity=%d opc=%d vlen=%d etype=%s\",\n@@ -429,1 +379,0 @@\n-      }\n@@ -442,3 +391,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** vector stubs support is disabled\");\n-      }\n+      log_if_needed(\"  ** vector stubs support is disabled\");\n@@ -448,3 +395,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** no vector calling conventions supported\");\n-      }\n+      log_if_needed(\"  ** no vector calling conventions supported\");\n@@ -454,2 +399,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** vector size (vlen=%d, etype=%s) is not supported\",\n+      log_if_needed(\"  ** vector size (vlen=%d, etype=%s) is not supported\",\n@@ -457,1 +401,0 @@\n-      }\n@@ -466,2 +409,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=%d is_masked_op=%d\",\n+    log_if_needed(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=%d is_masked_op=%d\",\n@@ -470,1 +412,0 @@\n-    }\n@@ -477,2 +418,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=0 is_masked_op=1\",\n+    log_if_needed(\"  ** not supported: arity=%d opc=%d vlen=%d etype=%s ismask=0 is_masked_op=1\",\n@@ -480,1 +420,0 @@\n-    }\n@@ -489,2 +428,1 @@\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** unbox failed v3=%s\",\n+        log_if_needed(\"  ** unbox failed v3=%s\",\n@@ -492,1 +430,0 @@\n-        }\n@@ -500,2 +437,1 @@\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** unbox failed v2=%s\",\n+        log_if_needed(\"  ** unbox failed v2=%s\",\n@@ -503,1 +439,0 @@\n-        }\n@@ -511,2 +446,1 @@\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** unbox failed v1=%s\",\n+        log_if_needed(\"  ** unbox failed v1=%s\",\n@@ -514,1 +448,0 @@\n-        }\n@@ -529,2 +462,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** unbox failed mask=%s\",\n+      log_if_needed(\"  ** unbox failed mask=%s\",\n@@ -532,1 +464,0 @@\n-      }\n@@ -542,2 +473,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** svml call failed for %s_%s_%d\",\n+      log_if_needed(\"  ** svml call failed for %s_%s_%d\",\n@@ -547,1 +477,0 @@\n-      }\n@@ -602,3 +531,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -711,3 +638,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -723,2 +648,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n+    log_if_needed(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n@@ -726,1 +650,0 @@\n-    }\n@@ -735,2 +658,1 @@\n-    if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** unbox failed mask=%s\",\n+    log_if_needed(\"  ** unbox failed mask=%s\",\n@@ -738,1 +660,0 @@\n-    }\n@@ -777,3 +698,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -794,2 +713,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n+    log_if_needed(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n@@ -797,1 +715,0 @@\n-    }\n@@ -841,2 +758,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s bitwise=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s bitwise=%s\",\n@@ -847,1 +763,0 @@\n-    }\n@@ -852,3 +767,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -859,3 +772,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -875,2 +786,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=0 op=broadcast vlen=%d etype=%s ismask=%d bcast_mode=%d\",\n+    log_if_needed(\"  ** not supported: arity=0 op=broadcast vlen=%d etype=%s ismask=%d bcast_mode=%d\",\n@@ -880,1 +790,0 @@\n-    }\n@@ -976,2 +885,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s from_ms=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s from_ms=%s\",\n@@ -982,1 +890,0 @@\n-    }\n@@ -986,3 +893,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -994,3 +899,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -1004,2 +907,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s ismask=no\",\n+    log_if_needed(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s ismask=no\",\n@@ -1008,1 +910,0 @@\n-    }\n@@ -1049,3 +950,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** non-primitive array element type\");\n-    }\n+    log_if_needed(\"  ** non-primitive array element type\");\n@@ -1056,2 +955,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s atype=%s ismask=no\",\n+    log_if_needed(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s atype=%s ismask=no\",\n@@ -1060,1 +958,0 @@\n-    }\n@@ -1071,2 +968,1 @@\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d*8 etype=%s\/8 ismask=no\",\n+        log_if_needed(\"  ** not supported: arity=%d op=%s vlen=%d*8 etype=%s\/8 ismask=no\",\n@@ -1075,1 +971,0 @@\n-        }\n@@ -1083,2 +978,1 @@\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d*8 etype=%s\/8 ismask=no\",\n+        log_if_needed(\"  ** not supported: arity=%d op=%s vlen=%d*8 etype=%s\/8 ismask=no\",\n@@ -1087,1 +981,0 @@\n-        }\n@@ -1201,2 +1094,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: vclass=%s mclass=%s etype=%s vlen=%s from_ms=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s mclass=%s etype=%s vlen=%s from_ms=%s\",\n@@ -1208,1 +1100,0 @@\n-    }\n@@ -1212,3 +1103,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -1219,3 +1108,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** mask klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** mask klass argument not initialized\");\n@@ -1227,3 +1114,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -1251,2 +1136,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s atype=%s\",\n+    log_if_needed(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s atype=%s\",\n@@ -1255,1 +1139,0 @@\n-    }\n@@ -1277,2 +1160,1 @@\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** missing constant: offsetInRange=%s\",\n+        log_if_needed(\"  ** missing constant: offsetInRange=%s\",\n@@ -1280,1 +1162,0 @@\n-        }\n@@ -1289,2 +1170,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: op=%s vlen=%d etype=%s mismatched_ms=%d\",\n+      log_if_needed(\"  ** not supported: op=%s vlen=%d etype=%s mismatched_ms=%d\",\n@@ -1293,1 +1173,0 @@\n-      }\n@@ -1304,2 +1183,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: op=loadMasked vlen=%d etype=%s mismatched_ms=%d\",\n+    log_if_needed(\"  ** not supported: op=loadMasked vlen=%d etype=%s mismatched_ms=%d\",\n@@ -1307,1 +1185,0 @@\n-    }\n@@ -1317,2 +1194,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s mismatched_ms=1\",\n+      log_if_needed(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s mismatched_ms=1\",\n@@ -1321,1 +1197,0 @@\n-      }\n@@ -1331,2 +1206,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s\",\n+    log_if_needed(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s\",\n@@ -1335,1 +1209,0 @@\n-    }\n@@ -1355,2 +1228,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** unbox failed mask=%s\",\n+    log_if_needed(\"  ** unbox failed mask=%s\",\n@@ -1359,1 +1231,0 @@\n-    }\n@@ -1368,2 +1239,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** unbox failed vector=%s\",\n+      log_if_needed(\"  ** unbox failed vector=%s\",\n@@ -1371,1 +1241,0 @@\n-      }\n@@ -1463,2 +1332,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s viclass=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s viclass=%s\",\n@@ -1469,1 +1337,0 @@\n-    }\n@@ -1474,3 +1341,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -1482,3 +1347,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -1495,3 +1358,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(1)->Opcode()]);\n-      }\n+      log_if_needed(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(1)->Opcode()]);\n@@ -1502,3 +1363,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** mask klass argument not initialized\");\n-      }\n+      log_if_needed(\"  ** mask klass argument not initialized\");\n@@ -1509,3 +1368,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** null mask values are not allowed for masked op\");\n-      }\n+      log_if_needed(\"  ** null mask values are not allowed for masked op\");\n@@ -1518,2 +1375,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s is_masked_op=1\",\n+      log_if_needed(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s is_masked_op=1\",\n@@ -1522,1 +1378,0 @@\n-      }\n@@ -1528,2 +1383,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s is_masked_op=0\",\n+      log_if_needed(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s is_masked_op=0\",\n@@ -1532,1 +1386,0 @@\n-      }\n@@ -1540,2 +1393,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=%d op=%s\/loadindex vlen=%d etype=int is_masked_op=%d\",\n+      log_if_needed(\"  ** not supported: arity=%d op=%s\/loadindex vlen=%d etype=int is_masked_op=%d\",\n@@ -1544,1 +1396,0 @@\n-      }\n@@ -1562,2 +1413,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s atype=%s ismask=no\",\n+    log_if_needed(\"  ** not supported: arity=%d op=%s vlen=%d etype=%s atype=%s ismask=no\",\n@@ -1566,1 +1416,0 @@\n-    }\n@@ -1598,2 +1447,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** unbox failed mask=%s\",\n+      log_if_needed(\"  ** unbox failed mask=%s\",\n@@ -1602,1 +1450,0 @@\n-      }\n@@ -1672,2 +1519,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n@@ -1678,1 +1524,0 @@\n-    }\n@@ -1682,3 +1527,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -1689,3 +1532,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -1699,3 +1540,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(2)->Opcode()]);\n-      }\n+      log_if_needed(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(2)->Opcode()]);\n@@ -1706,3 +1545,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** mask klass argument not initialized\");\n-      }\n+      log_if_needed(\"  ** mask klass argument not initialized\");\n@@ -1713,3 +1550,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** null mask values are not allowed for masked op\");\n-      }\n+      log_if_needed(\"  ** null mask values are not allowed for masked op\");\n@@ -1727,2 +1562,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=1 op=%d\/reduce vlen=%d etype=%s is_masked_op=%d\",\n+    log_if_needed(\"  ** not supported: arity=1 op=%d\/reduce vlen=%d etype=%s is_masked_op=%d\",\n@@ -1730,1 +1564,0 @@\n-    }\n@@ -1737,2 +1570,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=1 op=%d\/reduce vlen=%d etype=%s is_masked_op=1\",\n+    log_if_needed(\"  ** not supported: arity=1 op=%d\/reduce vlen=%d etype=%s is_masked_op=1\",\n@@ -1740,1 +1572,0 @@\n-    }\n@@ -1759,2 +1590,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** unbox failed mask=%s\",\n+      log_if_needed(\"  ** unbox failed mask=%s\",\n@@ -1762,1 +1592,0 @@\n-      }\n@@ -1825,2 +1654,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: cond=%s vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: cond=%s vclass=%s etype=%s vlen=%s\",\n@@ -1831,1 +1659,0 @@\n-    }\n@@ -1835,3 +1662,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -1842,3 +1667,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -1854,2 +1677,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=2 op=test\/%d vlen=%d etype=%s ismask=%d\",\n+    log_if_needed(\"  ** not supported: arity=2 op=test\/%d vlen=%d etype=%s ismask=%d\",\n@@ -1858,1 +1680,0 @@\n-    }\n@@ -1903,2 +1724,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: vclass=%s mclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s mclass=%s etype=%s vlen=%s\",\n@@ -1909,1 +1729,0 @@\n-    }\n@@ -1913,3 +1732,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -1920,3 +1737,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -1930,2 +1745,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=2 op=blend vlen=%d etype=%s ismask=useload\",\n+    log_if_needed(\"  ** not supported: arity=2 op=blend vlen=%d etype=%s ismask=useload\",\n@@ -1933,1 +1747,0 @@\n-    }\n@@ -1977,2 +1790,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: cond=%s vclass=%s mclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: cond=%s vclass=%s mclass=%s etype=%s vlen=%s\",\n@@ -1984,1 +1796,0 @@\n-    }\n@@ -1988,3 +1799,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -1995,3 +1804,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -2007,2 +1814,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: unsigned comparison op=comp\/%d vlen=%d etype=%s ismask=usestore\",\n+      log_if_needed(\"  ** not supported: unsigned comparison op=comp\/%d vlen=%d etype=%s ismask=usestore\",\n@@ -2010,1 +1816,0 @@\n-      }\n@@ -2016,2 +1821,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=2 op=comp\/%d vlen=%d etype=%s ismask=usestore\",\n+    log_if_needed(\"  ** not supported: arity=2 op=comp\/%d vlen=%d etype=%s ismask=usestore\",\n@@ -2019,1 +1823,0 @@\n-    }\n@@ -2035,2 +1838,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: mask = null arity=2 op=comp\/%d vlen=%d etype=%s ismask=usestore is_masked_op=1\",\n+    log_if_needed(\"  ** not supported: mask = null arity=2 op=comp\/%d vlen=%d etype=%s ismask=usestore is_masked_op=1\",\n@@ -2038,1 +1840,0 @@\n-    }\n@@ -2044,2 +1845,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=2 op=comp\/%d vlen=%d etype=%s ismask=usestore is_masked_op=1\",\n+    log_if_needed(\"  ** not supported: arity=2 op=comp\/%d vlen=%d etype=%s ismask=usestore is_masked_op=1\",\n@@ -2047,1 +1847,0 @@\n-    }\n@@ -2100,2 +1899,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: vclass=%s sclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s sclass=%s etype=%s vlen=%s\",\n@@ -2106,1 +1904,0 @@\n-    }\n@@ -2111,3 +1908,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -2118,3 +1913,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -2128,2 +1921,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=0 op=load\/shuffle vlen=%d etype=%s ismask=no\",\n+    log_if_needed(\"  ** not supported: arity=0 op=load\/shuffle vlen=%d etype=%s ismask=no\",\n@@ -2131,1 +1923,0 @@\n-    }\n@@ -2141,3 +1932,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** mask_klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** mask_klass argument not initialized\");\n@@ -2152,2 +1941,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=2 op=shuffle\/rearrange vlen=%d etype=%s ismask=no\",\n+      log_if_needed(\"  ** not supported: arity=2 op=shuffle\/rearrange vlen=%d etype=%s ismask=no\",\n@@ -2155,1 +1943,0 @@\n-      }\n@@ -2178,2 +1965,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=3 op=shuffle\/rearrange vlen=%d etype=%s ismask=useload is_masked_op=1\",\n+      log_if_needed(\"  ** not supported: arity=3 op=shuffle\/rearrange vlen=%d etype=%s ismask=useload is_masked_op=1\",\n@@ -2181,1 +1967,0 @@\n-      }\n@@ -2283,2 +2068,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n@@ -2289,1 +2073,0 @@\n-    }\n@@ -2293,3 +2076,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -2303,3 +2084,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(2)->Opcode()]);\n-      }\n+      log_if_needed(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(2)->Opcode()]);\n@@ -2310,3 +2089,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** mask klass argument not initialized\");\n-      }\n+      log_if_needed(\"  ** mask klass argument not initialized\");\n@@ -2317,3 +2094,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** null mask values are not allowed for masked op\");\n-      }\n+      log_if_needed(\"  ** null mask values are not allowed for masked op\");\n@@ -2326,3 +2101,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -2340,3 +2113,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** operation not supported: op=%d bt=%s\", opr->get_con(), type2name(elem_bt));\n-    }\n+    log_if_needed(\"  ** operation not supported: op=%d bt=%s\", opr->get_con(), type2name(elem_bt));\n@@ -2348,3 +2119,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** operation not supported: opc=%s bt=%s\", NodeClassNames[opc], type2name(elem_bt));\n-    }\n+    log_if_needed(\"  ** operation not supported: opc=%s bt=%s\", NodeClassNames[opc], type2name(elem_bt));\n@@ -2373,2 +2142,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=0 op=int\/%d vlen=%d etype=%s is_masked_op=%d\",\n+      log_if_needed(\"  ** not supported: arity=0 op=int\/%d vlen=%d etype=%s is_masked_op=%d\",\n@@ -2376,1 +2144,0 @@\n-      }\n@@ -2407,3 +2174,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** unbox failed mask=%s\", NodeClassNames[argument(7)->Opcode()]);\n-      }\n+      log_if_needed(\"  ** unbox failed mask=%s\", NodeClassNames[argument(7)->Opcode()]);\n@@ -2459,2 +2224,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: opr=%s vclass_from=%s etype_from=%s vlen_from=%s vclass_to=%s etype_to=%s vlen_to=%s\",\n+    log_if_needed(\"  ** missing constant: opr=%s vclass_from=%s etype_from=%s vlen_from=%s vclass_to=%s etype_to=%s vlen_to=%s\",\n@@ -2468,1 +2232,0 @@\n-    }\n@@ -2472,3 +2235,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -2511,2 +2272,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=1 op=%s\/1 vlen1=%d etype1=%s ismask=%d\",\n+    log_if_needed(\"  ** not supported: arity=1 op=%s\/1 vlen1=%d etype1=%s ismask=%d\",\n@@ -2515,1 +2275,0 @@\n-    }\n@@ -2524,2 +2283,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=1 op=%s\/2 vlen2=%d etype2=%s ismask=%d\",\n+    log_if_needed(\"  ** not supported: arity=1 op=%s\/2 vlen2=%d etype2=%s ismask=%d\",\n@@ -2528,1 +2286,0 @@\n-    }\n@@ -2568,2 +2325,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s ismask=%d\",\n+      log_if_needed(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s ismask=%d\",\n@@ -2571,1 +2327,0 @@\n-      }\n@@ -2583,2 +2338,1 @@\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** not supported: arity=1 op=cast#%d\/4 vlen1=%d etype2=%s ismask=%d\",\n+        log_if_needed(\"  ** not supported: arity=1 op=cast#%d\/4 vlen1=%d etype2=%s ismask=%d\",\n@@ -2587,1 +2341,0 @@\n-        }\n@@ -2605,2 +2358,1 @@\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** not supported: arity=1 op=cast\/5 vlen2=%d etype1=%s ismask=%d\",\n+        log_if_needed(\"  ** not supported: arity=1 op=cast\/5 vlen2=%d etype1=%s ismask=%d\",\n@@ -2608,1 +2360,0 @@\n-        }\n@@ -2619,2 +2370,1 @@\n-          if (C->print_intrinsics()) {\n-            tty->print_cr(\"  ** not supported: arity=1 op=maskcast vlen2=%d etype2=%s ismask=%d\",\n+          log_if_needed(\"  ** not supported: arity=1 op=maskcast vlen2=%d etype2=%s ismask=%d\",\n@@ -2622,1 +2372,0 @@\n-          }\n@@ -2660,2 +2409,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s idx=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s idx=%s\",\n@@ -2666,1 +2414,0 @@\n-    }\n@@ -2670,3 +2417,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -2677,3 +2422,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -2685,2 +2428,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=1 op=insert vlen=%d etype=%s ismask=no\",\n+    log_if_needed(\"  ** not supported: arity=1 op=insert vlen=%d etype=%s ismask=no\",\n@@ -2688,1 +2430,0 @@\n-    }\n@@ -2754,2 +2495,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n@@ -2759,1 +2499,0 @@\n-    }\n@@ -2763,3 +2502,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -2770,3 +2507,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -2810,3 +2545,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** Rejected mask extraction because architecture does not support it\");\n-      }\n+      log_if_needed(\"  ** Rejected mask extraction because architecture does not support it\");\n@@ -2818,3 +2551,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** missing constant: idx=%s\", NodeClassNames[argument(4)->Opcode()]);\n-      }\n+      log_if_needed(\"  ** missing constant: idx=%s\", NodeClassNames[argument(4)->Opcode()]);\n@@ -2826,2 +2557,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=1 op=extract vlen=%d etype=%s ismask=no\",\n+      log_if_needed(\"  ** not supported: arity=1 op=extract vlen=%d etype=%s ismask=no\",\n@@ -2829,1 +2559,0 @@\n-      }\n@@ -2885,2 +2614,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: opr=%s vclass=%s mclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: opr=%s vclass=%s mclass=%s etype=%s vlen=%s\",\n@@ -2892,1 +2620,0 @@\n-    }\n@@ -2897,3 +2624,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -2905,3 +2630,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -2916,2 +2639,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: opc=%d vlen=%d etype=%s ismask=useload\",\n+    log_if_needed(\"  ** not supported: opc=%d vlen=%d etype=%s ismask=useload\",\n@@ -2919,1 +2641,0 @@\n-    }\n@@ -2930,2 +2651,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** unbox failed vector=%s\",\n+      log_if_needed(\"  ** unbox failed vector=%s\",\n@@ -2933,1 +2653,0 @@\n-      }\n@@ -2944,2 +2663,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** unbox failed mask=%s\",\n+    log_if_needed(\"  ** unbox failed mask=%s\",\n@@ -2947,1 +2665,0 @@\n-    }\n@@ -2978,2 +2695,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n@@ -2983,1 +2699,0 @@\n-    }\n@@ -2988,3 +2703,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -2996,3 +2709,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -3007,3 +2718,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: vlen=%d etype=%s\", num_elem, type2name(elem_bt));\n-    }\n+    log_if_needed(\"  ** not supported: vlen=%d etype=%s\", num_elem, type2name(elem_bt));\n@@ -3024,3 +2733,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: vlen=%d etype=%s\", num_elem, type2name(elem_bt));\n-      }\n+      log_if_needed(\"  ** not supported: vlen=%d etype=%s\", num_elem, type2name(elem_bt));\n@@ -3035,2 +2742,1 @@\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** Rejected op (%s) because architecture does not support it\",\n+        log_if_needed(\"  ** Rejected op (%s) because architecture does not support it\",\n@@ -3038,1 +2744,0 @@\n-        }\n@@ -3048,2 +2753,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** unbox failed vector=%s\",\n+    log_if_needed(\"  ** unbox failed vector=%s\",\n@@ -3051,1 +2755,0 @@\n-    }\n@@ -3064,3 +2767,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: vlen=%d etype=%s\", num_elem, type2name(elem_bt));\n-      }\n+      log_if_needed(\"  ** not supported: vlen=%d etype=%s\", num_elem, type2name(elem_bt));\n@@ -3127,2 +2828,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** missing constant: mclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: mclass=%s etype=%s vlen=%s\",\n@@ -3132,1 +2832,0 @@\n-    }\n@@ -3137,3 +2836,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** klass argument not initialized\");\n-    }\n+    log_if_needed(\"  ** klass argument not initialized\");\n@@ -3145,3 +2842,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n-    }\n+    log_if_needed(\"  ** not a primitive bt=%d\", elem_type->basic_type());\n@@ -3160,3 +2855,1 @@\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: vlen=%d etype=%s\", num_elem, type2name(elem_bt));\n-      }\n+      log_if_needed(\"  ** not supported: vlen=%d etype=%s\", num_elem, type2name(elem_bt));\n@@ -3171,2 +2864,1 @@\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** Rejected op (%s) because architecture does not support it\",\n+        log_if_needed(\"  ** Rejected op (%s) because architecture does not support it\",\n@@ -3174,1 +2866,0 @@\n-        }\n@@ -3183,3 +2874,1 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** offset or limit argument is null\");\n-    }\n+    log_if_needed(\"  ** offset or limit argument is null\");\n@@ -3241,0 +2930,3 @@\n+\n+#undef non_product_log_if_needed\n+#undef log_if_needed\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":175,"deletions":483,"binary":false,"changes":658,"status":"modified"}]}