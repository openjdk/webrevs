{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -691,0 +691,18 @@\n+    \/**\n+     * {@return a new segment with an address that is\n+     * {@linkplain MemoryLayout#byteAlignment() aligned} according to the provided\n+     * layout with respect to the address of this segment and with the provided\n+     * layout's {@linkplain MemoryLayout#byteSize() size} and with the same scope as\n+     * this segment}\n+     *\n+     * @param layout  the layout to describe the returned segment\n+     * @throws UnsupportedOperationException if this segment is not a\n+     *         {@linkplain #isNative() native} segment\n+     * @throws IllegalCallerException if the caller is in a module that does not have\n+     *         native access enabled\n+     * @since 23\n+     *\/\n+    @CallerSensitive\n+    @Restricted\n+    MemorySegment reinterpret(MemoryLayout layout);\n+\n@@ -786,0 +804,53 @@\n+    \/**\n+     * {@return a new segment with an address that is\n+     * {@linkplain MemoryLayout#byteAlignment() aligned} according to the provided\n+     * layout with respect to the address of this segment, and with the provided\n+     * layout's {@linkplain MemoryLayout#byteSize() size} associated with the\n+     * provided arena}\n+     * <p>\n+     * As such, the returned segment cannot be accessed after the\n+     * provided arena has been closed. Moreover, if the returned segment can be accessed\n+     * compatibly with the confinement restrictions associated with the provided arena:\n+     * that is, if the provided arena is a {@linkplain Arena#ofConfined() confined arena},\n+     * the returned segment can only be accessed by the arena's owner thread, regardless\n+     * of the confinement restrictions associated with this segment. In other words,\n+     * this method returns a segment that behaves as if it had been allocated using the\n+     * provided arena.\n+     * <p>\n+     * Clients can specify an optional cleanup action that should be executed when the\n+     * provided scope becomes invalid. This cleanup action receives a fresh memory\n+     * segment that is obtained from this segment as follows:\n+     * {@snippet lang=java :\n+     * MemorySegment cleanupSegment = MemorySegment.ofAddress(this.address())\n+     *                                             .reinterpret(newSize);\n+     * }\n+     * That is, the cleanup action receives a segment that is associated with the global\n+     * scope, and is accessible from any thread. The size of the segment accepted by the\n+     * cleanup action is {@code newSize}.\n+     *\n+     * @apiNote The cleanup action (if present) should take care not to leak the received\n+     *          segment to external clients that might access the segment after its\n+     *          backing region of memory is no longer available. Furthermore, if the\n+     *          provided scope is the scope of an {@linkplain Arena#ofAuto() automatic arena},\n+     *          the cleanup action must not prevent the scope from becoming\n+     *          <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">unreachable<\/a>.\n+     *          A failure to do so will permanently prevent the regions of memory\n+     *          allocated by the automatic arena from being deallocated.\n+     *\n+     * @param layout  the layout to describe the returned segment\n+     * @param arena   the arena to be associated with the returned segment\n+     * @param cleanup the cleanup action that should be executed when the provided arena\n+     *                is closed (can be {@code null}).\n+     * @throws UnsupportedOperationException if this segment is not a\n+     *         {@linkplain #isNative() native} segment\n+     * @throws IllegalStateException if {@code arena.scope().isAlive() == false}\n+     * @throws IllegalCallerException if the caller is in a module that does not have\n+     *         native access enabled\n+     * @since 23\n+     *\/\n+    @CallerSensitive\n+    @Restricted\n+    MemorySegment reinterpret(MemoryLayout layout,\n+                              Arena arena,\n+                              Consumer<MemorySegment> cleanup);\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":72,"deletions":1,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -136,1 +136,10 @@\n-        return reinterpretInternal(Reflection.getCallerClass(), newSize,\n+        return reinterpretInternal(Reflection.getCallerClass(), newSize, 1L,\n+                MemorySessionImpl.toMemorySession(arena), cleanup);\n+    }\n+\n+    @Override\n+    @CallerSensitive\n+    public final MemorySegment reinterpret(MemoryLayout layout, Arena arena, Consumer<MemorySegment> cleanup) {\n+        Objects.requireNonNull(layout);\n+        Objects.requireNonNull(arena);\n+        return reinterpretInternal(Reflection.getCallerClass(), layout.byteSize(), layout.byteAlignment(),\n@@ -143,1 +152,8 @@\n-        return reinterpretInternal(Reflection.getCallerClass(), newSize, scope, null);\n+        return reinterpretInternal(Reflection.getCallerClass(), newSize, 1L, scope, null);\n+    }\n+\n+    @Override\n+    @CallerSensitive\n+    public final MemorySegment reinterpret(MemoryLayout layout) {\n+        Objects.requireNonNull(layout);\n+        return reinterpretInternal(Reflection.getCallerClass(), layout.byteSize(), layout.byteAlignment(), scope, null);\n@@ -150,1 +166,1 @@\n-        return reinterpretInternal(Reflection.getCallerClass(), byteSize(),\n+        return reinterpretInternal(Reflection.getCallerClass(), byteSize(), 1L,\n@@ -154,1 +170,1 @@\n-    public MemorySegment reinterpretInternal(Class<?> callerClass, long newSize, Scope scope, Consumer<MemorySegment> cleanup) {\n+    public MemorySegment reinterpretInternal(Class<?> callerClass, long newSize, long byteAlignment, Scope scope, Consumer<MemorySegment> cleanup) {\n@@ -161,1 +177,1 @@\n-        return SegmentFactories.makeNativeSegmentUnchecked(address(), newSize,\n+        return SegmentFactories.makeNativeSegmentUnchecked(address(), newSize, byteAlignment,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.lang.foreign.MemoryLayout;\n@@ -60,1 +61,5 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize, MemorySessionImpl sessionImpl, Runnable action) {\n+    public static MemorySegment makeNativeSegmentUnchecked(long min,\n+                                                           long byteSize,\n+                                                           long byteAlignment,\n+                                                           MemorySessionImpl sessionImpl,\n+                                                           Runnable action) {\n@@ -67,1 +72,1 @@\n-        return new NativeMemorySegmentImpl(min, byteSize, false, sessionImpl);\n+        return new NativeMemorySegmentImpl(Utils.alignUp(min, byteAlignment), byteSize, false, sessionImpl);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentFactories.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,2 @@\n-            \"java.lang.foreign.MemorySegment\/reinterpret(long,java.lang.foreign.Arena,java.util.function.Consumer)\/2\/0\"\n+            \"java.lang.foreign.MemorySegment\/reinterpret(long,java.lang.foreign.Arena,java.util.function.Consumer)\/2\/0\",\n+            \"java.lang.foreign.MemorySegment\/reinterpret(java.lang.foreign.MemoryLayout,java.lang.foreign.Arena,java.util.function.Consumer)\/2\/0\"\n","filename":"test\/jdk\/java\/foreign\/TestNulls.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,1 @@\n+            RestrictedMethod.of(MemorySegment.class, \"reinterpret\", MemorySegment.class, MemoryLayout.class),\n@@ -90,0 +91,1 @@\n+            RestrictedMethod.of(MemorySegment.class, \"reinterpret\", MemorySegment.class, MemoryLayout.class, Arena.class, Consumer.class),\n","filename":"test\/jdk\/java\/foreign\/TestRestricted.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import static java.lang.foreign.ValueLayout.JAVA_LONG;\n@@ -383,0 +382,1 @@\n+            assertEquals(MemorySegment.ofAddress(42).reinterpret(JAVA_INT).byteSize(), JAVA_INT.byteSize());\n@@ -387,0 +387,15 @@\n+            assertEquals(MemorySegment.ofAddress(42).reinterpret(JAVA_INT, arena, _ -> counter.incrementAndGet()).scope(), arena.scope());\n+        }\n+        assertEquals(counter.get(), 3);\n+    }\n+\n+    @Test\n+    void testReinterpretAlignment() {\n+        AtomicInteger counter = new AtomicInteger();\n+        try (Arena arena = Arena.ofConfined()){\n+            var segment = MemorySegment.ofAddress(41).reinterpret(JAVA_INT);\n+            assertEquals(segment.address(), 44);\n+            assertEquals(segment.byteSize(), JAVA_INT.byteSize());\n+            var arenaSegment = MemorySegment.ofAddress(41).reinterpret(JAVA_INT, arena, null);\n+            assertEquals(arenaSegment.address(), 44);\n+            assertEquals(arenaSegment.byteSize(), JAVA_INT.byteSize());\n@@ -388,1 +403,0 @@\n-        assertEquals(counter.get(), 2);\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"}]}