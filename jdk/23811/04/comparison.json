{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include <sys\/vfs.h>\n@@ -39,0 +40,5 @@\n+\/\/ Inlined from <linux\/magic.h> for portability.\n+#ifndef CGROUP2_SUPER_MAGIC\n+#  define CGROUP2_SUPER_MAGIC 0x63677270\n+#endif\n+\n@@ -41,0 +47,13 @@\n+static inline int cg_v2_controller_index(const char* name) {\n+  if (strcmp(name, \"cpuset\") == 0) {\n+    return CPUSET_IDX;\n+  } else if (strcmp(name, \"cpu\") == 0) {\n+    return CPU_IDX;\n+  } else if (strcmp(name, \"memory\") == 0) {\n+    return MEMORY_IDX;\n+  } else if (strcmp(name, \"pids\") == 0) {\n+    return PIDS_IDX;\n+  } else {\n+    return -1;\n+  }\n+}\n@@ -51,0 +70,2 @@\n+  const char* sys_fs_cgroup_cgroup_controllers = \"\/sys\/fs\/cgroup\/cgroup.controllers\";\n+  const char* controllers_file = proc_cgroups;\n@@ -53,0 +74,3 @@\n+  const char* sys_fs_cgroup = \"\/sys\/fs\/cgroup\";\n+  struct statfs fsstat = {};\n+  bool cgroups_v2_enabled = false;\n@@ -54,1 +78,11 @@\n-  bool valid_cgroup = determine_type(cg_infos, proc_cgroups, proc_self_cgroup, proc_self_mountinfo, &cg_type_flags);\n+  \/\/ Assume cgroups v2 is usable by the JDK iff \/sys\/fs\/cgroup has the cgroup v2\n+  \/\/ file system magic.  If it does not then heuristics are required to determine\n+  \/\/ if cgroups v1 is usable or not.\n+  if (statfs(sys_fs_cgroup, &fsstat) != -1) {\n+    cgroups_v2_enabled = (fsstat.f_type == CGROUP2_SUPER_MAGIC);\n+    if (cgroups_v2_enabled) {\n+      controllers_file = sys_fs_cgroup_cgroup_controllers;\n+    }\n+  }\n+\n+  bool valid_cgroup = determine_type(cg_infos, cgroups_v2_enabled, controllers_file, proc_self_cgroup, proc_self_mountinfo, &cg_type_flags);\n@@ -219,1 +253,2 @@\n-                                            const char* proc_cgroups,\n+                                            bool cgroups_v2_enabled,\n+                                            const char* controllers_file,\n@@ -224,1 +259,1 @@\n-  FILE *cgroups = nullptr;\n+  FILE* controllers = nullptr;\n@@ -228,1 +263,0 @@\n-  bool is_cgroupsV2;\n@@ -233,1 +267,1 @@\n-  bool all_required_controllers_enabled;\n+  bool all_required_controllers_enabled = true;\n@@ -235,11 +269,4 @@\n-  \/*\n-   * Read \/proc\/cgroups so as to be able to distinguish cgroups v2 vs cgroups v1.\n-   *\n-   * For cgroups v1 hierarchy (hybrid or legacy), cpu, cpuacct, cpuset, memory controllers\n-   * must have non-zero for the hierarchy ID field and relevant controllers mounted.\n-   * Conversely, for cgroups v2 (unified hierarchy), cpu, cpuacct, cpuset, memory\n-   * controllers must have hierarchy ID 0 and the unified controller mounted.\n-   *\/\n-  cgroups = os::fopen(proc_cgroups, \"r\");\n-  if (cgroups == nullptr) {\n-    log_debug(os, container)(\"Can't open %s, %s\", proc_cgroups, os::strerror(errno));\n+  \/\/ If cgroups v2 is enabled, open \/sys\/fs\/cgroup\/cgroup.controllers.  If not, open \/proc\/cgroups.\n+  controllers = os::fopen(controllers_file, \"r\");\n+  if (controllers == nullptr) {\n+    log_debug(os, container)(\"Can't open %s, %s\", controllers_file, os::strerror(errno));\n@@ -250,8 +277,24 @@\n-  while ((p = fgets(buf, MAXPATHLEN, cgroups)) != nullptr) {\n-    char name[MAXPATHLEN+1];\n-    int  hierarchy_id;\n-    int  enabled;\n-\n-    \/\/ Format of \/proc\/cgroups documented via man 7 cgroups\n-    if (sscanf(p, \"%s %d %*d %d\", name, &hierarchy_id, &enabled) != 3) {\n-      continue;\n+  if (cgroups_v2_enabled) {\n+    \/*\n+     * cgroups v2 is enabled.  For cgroups v2 (unified hierarchy), the cpu and memory\n+     * controllers must be enabled.\n+     *\/\n+    if ((p = fgets(buf, MAXPATHLEN, controllers)) != nullptr) {\n+      char* controller = nullptr;\n+      #define ISSPACE_CHARS \" \\n\\t\\r\\f\\v\"\n+      while ((controller = strsep(&p, ISSPACE_CHARS)) != nullptr) {\n+        int i;\n+        if ((i = cg_v2_controller_index(controller)) != -1) {\n+          cg_infos[i]._name = os::strdup(controller);\n+          cg_infos[i]._enabled = true;\n+          if (i == PIDS_IDX || i == CPUSET_IDX) {\n+            log_debug(os, container)(\"Detected optional %s controller entry in %s\",\n+                                     controller, controllers_file);\n+          }\n+        }\n+      }\n+      #undef ISSPACE_CHARS\n+    } else {\n+      log_debug(os, container)(\"Can't read %s, %s\", controllers_file, os::strerror(errno));\n+      *flags = INVALID_CGROUPS_V2;\n+      return false;\n@@ -259,22 +302,13 @@\n-    if (strcmp(name, \"memory\") == 0) {\n-      cg_infos[MEMORY_IDX]._name = os::strdup(name);\n-      cg_infos[MEMORY_IDX]._hierarchy_id = hierarchy_id;\n-      cg_infos[MEMORY_IDX]._enabled = (enabled == 1);\n-    } else if (strcmp(name, \"cpuset\") == 0) {\n-      log_debug(os, container)(\"Detected optional cpuset controller entry in %s\", proc_cgroups);\n-      cg_infos[CPUSET_IDX]._name = os::strdup(name);\n-      cg_infos[CPUSET_IDX]._hierarchy_id = hierarchy_id;\n-      cg_infos[CPUSET_IDX]._enabled = (enabled == 1);\n-    } else if (strcmp(name, \"cpu\") == 0) {\n-      cg_infos[CPU_IDX]._name = os::strdup(name);\n-      cg_infos[CPU_IDX]._hierarchy_id = hierarchy_id;\n-      cg_infos[CPU_IDX]._enabled = (enabled == 1);\n-    } else if (strcmp(name, \"cpuacct\") == 0) {\n-      cg_infos[CPUACCT_IDX]._name = os::strdup(name);\n-      cg_infos[CPUACCT_IDX]._hierarchy_id = hierarchy_id;\n-      cg_infos[CPUACCT_IDX]._enabled = (enabled == 1);\n-    } else if (strcmp(name, \"pids\") == 0) {\n-      log_debug(os, container)(\"Detected optional pids controller entry in %s\", proc_cgroups);\n-      cg_infos[PIDS_IDX]._name = os::strdup(name);\n-      cg_infos[PIDS_IDX]._hierarchy_id = hierarchy_id;\n-      cg_infos[PIDS_IDX]._enabled = (enabled == 1);\n+    for (int i = 0; i < CG_INFO_LENGTH; i++) {\n+      \/\/ cgroups v2 does not have cpuacct.\n+      if (i == CPUACCT_IDX) {\n+        continue;\n+      }\n+      \/\/ For cgroups v2, cpuacct is rolled into cpu, and the pids and cpuset controllers\n+      \/\/ are optional; the remaining controllers, cpu and memory, are required.\n+      if (i == CPU_IDX || i == MEMORY_IDX) {\n+        all_required_controllers_enabled = all_required_controllers_enabled && cg_infos[i]._enabled;\n+      }\n+      if (log_is_enabled(Debug, os, container) && !cg_infos[i]._enabled) {\n+        log_debug(os, container)(\"controller %s is not enabled\", cg_controller_name[i]);\n+      }\n@@ -282,2 +316,10 @@\n-  }\n-  fclose(cgroups);\n+  } else {\n+    \/*\n+     * The \/sys\/fs\/cgroup filesystem magic hint suggests we have cg v1.  Read \/proc\/cgroups; for\n+     * cgroups v1 hierarchy (hybrid or legacy), cpu, cpuacct, cpuset, and memory controllers must\n+     * have non-zero for the hierarchy ID field and relevant controllers mounted.\n+     *\/\n+    while ((p = fgets(buf, MAXPATHLEN, controllers)) != nullptr) {\n+      char name[MAXPATHLEN+1];\n+      int  hierarchy_id;\n+      int  enabled;\n@@ -285,7 +327,26 @@\n-  is_cgroupsV2 = true;\n-  all_required_controllers_enabled = true;\n-  for (int i = 0; i < CG_INFO_LENGTH; i++) {\n-    \/\/ pids and cpuset controllers are optional. All other controllers are required\n-    if (i != PIDS_IDX && i != CPUSET_IDX) {\n-      is_cgroupsV2 = is_cgroupsV2 && cg_infos[i]._hierarchy_id == 0;\n-      all_required_controllers_enabled = all_required_controllers_enabled && cg_infos[i]._enabled;\n+      \/\/ Format of \/proc\/cgroups documented via man 7 cgroups\n+      if (sscanf(p, \"%s %d %*d %d\", name, &hierarchy_id, &enabled) != 3) {\n+        continue;\n+      }\n+      if (strcmp(name, \"memory\") == 0) {\n+        cg_infos[MEMORY_IDX]._name = os::strdup(name);\n+        cg_infos[MEMORY_IDX]._hierarchy_id = hierarchy_id;\n+        cg_infos[MEMORY_IDX]._enabled = (enabled == 1);\n+      } else if (strcmp(name, \"cpuset\") == 0) {\n+        cg_infos[CPUSET_IDX]._name = os::strdup(name);\n+        cg_infos[CPUSET_IDX]._hierarchy_id = hierarchy_id;\n+        cg_infos[CPUSET_IDX]._enabled = (enabled == 1);\n+      } else if (strcmp(name, \"cpu\") == 0) {\n+        cg_infos[CPU_IDX]._name = os::strdup(name);\n+        cg_infos[CPU_IDX]._hierarchy_id = hierarchy_id;\n+        cg_infos[CPU_IDX]._enabled = (enabled == 1);\n+      } else if (strcmp(name, \"cpuacct\") == 0) {\n+        cg_infos[CPUACCT_IDX]._name = os::strdup(name);\n+        cg_infos[CPUACCT_IDX]._hierarchy_id = hierarchy_id;\n+        cg_infos[CPUACCT_IDX]._enabled = (enabled == 1);\n+      } else if (strcmp(name, \"pids\") == 0) {\n+        log_debug(os, container)(\"Detected optional pids controller entry in %s\", controllers_file);\n+        cg_infos[PIDS_IDX]._name = os::strdup(name);\n+        cg_infos[PIDS_IDX]._hierarchy_id = hierarchy_id;\n+        cg_infos[PIDS_IDX]._enabled = (enabled == 1);\n+      }\n@@ -293,2 +354,8 @@\n-    if (log_is_enabled(Debug, os, container) && !cg_infos[i]._enabled) {\n-      log_debug(os, container)(\"controller %s is not enabled\\n\", cg_controller_name[i]);\n+    for (int i = 0; i < CG_INFO_LENGTH; i++) {\n+      \/\/ pids controller is optional. All other controllers are required\n+      if (i != PIDS_IDX) {\n+        all_required_controllers_enabled = all_required_controllers_enabled && cg_infos[i]._enabled;\n+      }\n+      if (log_is_enabled(Debug, os, container) && !cg_infos[i]._enabled) {\n+        log_debug(os, container)(\"controller %s is not enabled\\n\", cg_controller_name[i]);\n+      }\n@@ -297,0 +364,1 @@\n+  fclose(controllers);\n@@ -338,1 +406,1 @@\n-    while (!is_cgroupsV2 && (token = strsep(&controllers, \",\")) != nullptr) {\n+    while (!cgroups_v2_enabled && (token = strsep(&controllers, \",\")) != nullptr) {\n@@ -349,1 +417,1 @@\n-        assert(hierarchy_id == cg_infos[CPUACCT_IDX]._hierarchy_id, \"\/proc\/cgroups and \/proc\/self\/cgroup hierarchy mismatch for cpuacc\");\n+        assert(hierarchy_id == cg_infos[CPUACCT_IDX]._hierarchy_id, \"\/proc\/cgroups and \/proc\/self\/cgroup hierarchy mismatch for cpuacct\");\n@@ -357,1 +425,1 @@\n-    if (is_cgroupsV2) {\n+    if (cgroups_v2_enabled) {\n@@ -393,1 +461,1 @@\n-    \/* Cgroup v2 relevant info. We only look for the _mount_path iff is_cgroupsV2 so\n+    \/* Cgroup v2 relevant info. We only look for the _mount_path iff cgroups_v2_enabled so\n@@ -400,1 +468,1 @@\n-    if (is_cgroupsV2 && match_mount_info_line(p,\n+    if (cgroups_v2_enabled && match_mount_info_line(p,\n@@ -479,1 +547,1 @@\n-  if (is_cgroupsV2) {\n+  if (cgroups_v2_enabled) {\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":131,"deletions":63,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -327,1 +327,2 @@\n-                               const char* proc_cgroups,\n+                               bool cgroups_v2_enabled,\n+                               const char* controllers_file,\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1088,1 +1088,2 @@\n-bool WhiteBox::validate_cgroup(const char* proc_cgroups,\n+bool WhiteBox::validate_cgroup(bool cgroups_v2_enabled,\n+                               const char* controllers_file,\n@@ -1093,1 +1094,1 @@\n-  return CgroupSubsystemFactory::determine_type(cg_infos, proc_cgroups,\n+  return CgroupSubsystemFactory::determine_type(cg_infos, cgroups_v2_enabled, controllers_file,\n@@ -2521,1 +2522,2 @@\n-                                    jstring proc_cgroups,\n+                                    jboolean cgroups_v2_enabled,\n+                                    jstring controllers_file,\n@@ -2527,1 +2529,1 @@\n-  const char* p_cgroups = env->GetStringUTFChars(proc_cgroups, nullptr);\n+  const char* c_file = env->GetStringUTFChars(controllers_file, nullptr);\n@@ -2535,1 +2537,1 @@\n-  WhiteBox::validate_cgroup(p_cgroups, p_s_cgroup, p_s_mountinfo, &cg_type_flags);\n+  WhiteBox::validate_cgroup(cgroups_v2_enabled, c_file, p_s_cgroup, p_s_mountinfo, &cg_type_flags);\n@@ -2537,1 +2539,1 @@\n-  env->ReleaseStringUTFChars(proc_cgroups, p_cgroups);\n+  env->ReleaseStringUTFChars(controllers_file, c_file);\n@@ -2977,1 +2979,1 @@\n-      CC\"(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)I\",\n+      CC\"(ZLjava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)I\",\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  static bool validate_cgroup(const char* proc_cgroups, const char* proc_self_cgroup, const char* proc_self_mountinfo, u1* cg_flags);\n+  static bool validate_cgroup(bool cgroups_v2_enabled, const char* controllers_file, const char* proc_self_cgroup, const char* proc_self_mountinfo, u1* cg_flags);\n","filename":"src\/hotspot\/share\/prims\/whitebox.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+    private static final int INVALID_CGROUPS_GENERIC = 6;\n@@ -63,1 +64,0 @@\n-    private Path cgroupv2CgInfoZeroHierarchy;\n@@ -84,1 +84,0 @@\n-    private Path cgroupv2CgInfoNoZeroHierarchyOnlyFreezer;\n@@ -87,0 +86,8 @@\n+    private Path sysFsCgroupCgroupControllersTypicalPath;\n+    private Path sysFsCgroupCgroupControllersEmptyPath;\n+    private Path sysFsCgroupCgroupControllersBlankLinePath;\n+    private Path sysFsCgroupCgroupControllersNoMemoryPath;\n+    private Path sysFsCgroupCgroupControllersNoCpuPath;\n+    private Path sysFsCgroupCgroupControllersNoPidsPath;\n+    private Path sysFsCgroupCgroupControllersCpuMemoryOnlyPath;\n+    private Path sysFsCgroupCgroupControllersExtraWhitespacePath;\n@@ -111,0 +118,8 @@\n+    private String sysFsCgroupCgroupControllersTypicalContent = \"cpuset cpu io memory hugetlb pids rdma misc\\n\";\n+    private String sysFsCgroupCgroupControllersEmptyContent = \"\";\n+    private String sysFsCgroupCgroupControllersBlankLineContent = \"\\n\";\n+    private String sysFsCgroupCgroupControllersNoMemoryContent = \"cpuset cpu io hugetlb pids rdma misc\\n\";\n+    private String sysFsCgroupCgroupControllersNoCpuContent = \"cpuset io memory hugetlb pids rdma misc\\n\";\n+    private String sysFsCgroupCgroupControllersNoPidsContent = \"cpuset cpu io memory hugetlb rdma misc\\n\";\n+    private String sysFsCgroupCgroupControllersCpuMemoryOnlyContent = \"memory cpu\\n\";\n+    private String sysFsCgroupCgroupControllersExtraWhitespaceContent = \"   cpu\\t  \\fmemory\\r \\n\";\n@@ -227,0 +242,66 @@\n+    \/\/ Test RHEL 8 (cgroups v1) with cpuset controller disabled via the kernel command line.\n+    \/\/ # grep cgroup \/boot\/grub2\/grubenv\n+    \/\/ kernelopts=[...] cgroup_disable=cpuset\n+    private String procCgroupsCgroupsV1CpusetDisabledContent =\n+            \"#subsys_name\\thierarchy\\tnum_cgroups\\tenabled\\n\" +\n+            \"cpuset\\t0\\t1\\t0\\n\" +\n+            \"cpu\\t8\\t1\\t1\\n\" +\n+            \"cpuacct\\t8\\t1\\t1\\n\" +\n+            \"blkio\\t7\\t1\\t1\\n\" +\n+            \"memory\\t9\\t114\\t1\\n\" +\n+            \"devices\\t3\\t67\\t1\\n\" +\n+            \"freezer\\t2\\t1\\t1\\n\" +\n+            \"net_cls\\t6\\t1\\t1\\n\" +\n+            \"perf_event\\t4\\t1\\t1\\n\" +\n+            \"net_prio\\t6\\t1\\t1\\n\" +\n+            \"hugetlb\\t11\\t1\\t1\\n\" +\n+            \"pids\\t10\\t91\\t1\\n\" +\n+            \"rdma\\t5\\t1\\t1\\n\";\n+    private String procSelfCgroupCgroupsV1CpusetDisabledContent =\n+            \"11:hugetlb:\/\\n\" +\n+            \"10:pids:\/user.slice\/user-0.slice\/session-1.scope\\n\" +\n+            \"9:memory:\/user.slice\/user-0.slice\/session-1.scope\\n\" +\n+            \"8:cpu,cpuacct:\/\\n\" +\n+            \"7:blkio:\/\\n\" +\n+            \"6:net_cls,net_prio:\/\\n\" +\n+            \"5:rdma:\/\\n\" +\n+            \"4:perf_event:\/\\n\" +\n+            \"3:devices:\/system.slice\/sshd.service\\n\" +\n+            \"2:freezer:\/\\n\" +\n+            \"1:name=systemd:\/user.slice\/user-0.slice\/session-1.scope\\n\";\n+    private String procSelfMountinfoCgroupsV1CpusetDisabledContent =\n+            \"22 93 0:21 \/ \/sys rw,nosuid,nodev,noexec,relatime shared:2 - sysfs sysfs rw,seclabel\\n\" +\n+            \"23 93 0:5 \/ \/proc rw,nosuid,nodev,noexec,relatime shared:25 - proc proc rw\\n\" +\n+            \"24 93 0:6 \/ \/dev rw,nosuid shared:21 - devtmpfs devtmpfs rw,seclabel,size=632252k,nr_inodes=158063,mode=755\\n\" +\n+            \"25 22 0:7 \/ \/sys\/kernel\/security rw,nosuid,nodev,noexec,relatime shared:3 - securityfs securityfs rw\\n\" +\n+            \"26 24 0:22 \/ \/dev\/shm rw,nosuid,nodev shared:22 - tmpfs tmpfs rw,seclabel\\n\" +\n+            \"27 24 0:23 \/ \/dev\/pts rw,nosuid,noexec,relatime shared:23 - devpts devpts rw,seclabel,gid=5,mode=620,ptmxmode=000\\n\" +\n+            \"28 93 0:24 \/ \/run rw,nosuid,nodev shared:24 - tmpfs tmpfs rw,seclabel,mode=755\\n\" +\n+            \"29 22 0:25 \/ \/sys\/fs\/cgroup ro,nosuid,nodev,noexec shared:4 - tmpfs tmpfs ro,seclabel,mode=755\\n\" +\n+            \"30 29 0:26 \/ \/sys\/fs\/cgroup\/systemd rw,nosuid,nodev,noexec,relatime shared:5 - cgroup cgroup rw,seclabel,xattr,release_agent=\/usr\/lib\/systemd\/systemd-cgroups-agent,name=systemd\\n\" +\n+            \"31 22 0:27 \/ \/sys\/fs\/pstore rw,nosuid,nodev,noexec,relatime shared:16 - pstore pstore rw,seclabel\\n\" +\n+            \"32 22 0:28 \/ \/sys\/fs\/bpf rw,nosuid,nodev,noexec,relatime shared:17 - bpf bpf rw,mode=700\\n\" +\n+            \"33 29 0:29 \/ \/sys\/fs\/cgroup\/freezer rw,nosuid,nodev,noexec,relatime shared:6 - cgroup cgroup rw,seclabel,freezer\\n\" +\n+            \"34 29 0:30 \/ \/sys\/fs\/cgroup\/devices rw,nosuid,nodev,noexec,relatime shared:7 - cgroup cgroup rw,seclabel,devices\\n\" +\n+            \"35 29 0:31 \/ \/sys\/fs\/cgroup\/perf_event rw,nosuid,nodev,noexec,relatime shared:8 - cgroup cgroup rw,seclabel,perf_event\\n\" +\n+            \"36 29 0:32 \/ \/sys\/fs\/cgroup\/rdma rw,nosuid,nodev,noexec,relatime shared:9 - cgroup cgroup rw,seclabel,rdma\\n\" +\n+            \"37 29 0:33 \/ \/sys\/fs\/cgroup\/net_cls,net_prio rw,nosuid,nodev,noexec,relatime shared:10 - cgroup cgroup rw,seclabel,net_cls,net_prio\\n\" +\n+            \"38 29 0:34 \/ \/sys\/fs\/cgroup\/blkio rw,nosuid,nodev,noexec,relatime shared:11 - cgroup cgroup rw,seclabel,blkio\\n\" +\n+            \"39 29 0:35 \/ \/sys\/fs\/cgroup\/cpu,cpuacct rw,nosuid,nodev,noexec,relatime shared:12 - cgroup cgroup rw,seclabel,cpu,cpuacct\\n\" +\n+            \"40 29 0:36 \/ \/sys\/fs\/cgroup\/memory rw,nosuid,nodev,noexec,relatime shared:13 - cgroup cgroup rw,seclabel,memory\\n\" +\n+            \"41 29 0:37 \/ \/sys\/fs\/cgroup\/pids rw,nosuid,nodev,noexec,relatime shared:14 - cgroup cgroup rw,seclabel,pids\\n\" +\n+            \"42 29 0:38 \/ \/sys\/fs\/cgroup\/hugetlb rw,nosuid,nodev,noexec,relatime shared:15 - cgroup cgroup rw,seclabel,hugetlb\\n\" +\n+            \"43 22 0:12 \/ \/sys\/kernel\/tracing rw,relatime shared:18 - tracefs none rw,seclabel\\n\" +\n+            \"90 22 0:39 \/ \/sys\/kernel\/config rw,relatime shared:19 - configfs configfs rw\\n\" +\n+            \"93 1 253:0 \/ \/ rw,relatime shared:1 - xfs \/dev\/mapper\/rhel-root rw,seclabel,attr2,inode64,logbufs=8,logbsize=32k,noquota\\n\" +\n+            \"44 22 0:20 \/ \/sys\/fs\/selinux rw,relatime shared:20 - selinuxfs selinuxfs rw\\n\" +\n+            \"45 24 0:19 \/ \/dev\/mqueue rw,relatime shared:26 - mqueue mqueue rw,seclabel\\n\" +\n+            \"46 23 0:40 \/ \/proc\/sys\/fs\/binfmt_misc rw,relatime shared:27 - autofs systemd-1 rw,fd=31,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=28718\\n\" +\n+            \"47 24 0:41 \/ \/dev\/hugepages rw,relatime shared:28 - hugetlbfs hugetlbfs rw,seclabel,pagesize=2M\\n\" +\n+            \"48 22 0:8 \/ \/sys\/kernel\/debug rw,relatime shared:29 - debugfs debugfs rw,seclabel\\n\" +\n+            \"49 22 0:42 \/ \/sys\/fs\/fuse\/connections rw,relatime shared:30 - fusectl fusectl rw\\n\" +\n+            \"114 93 252:1 \/ \/boot rw,relatime shared:61 - xfs \/dev\/vda1 rw,seclabel,attr2,inode64,logbufs=8,logbsize=32k,noquota\\n\" +\n+            \"466 28 0:46 \/ \/run\/user\/0 rw,nosuid,nodev,relatime shared:251 - tmpfs tmpfs rw,seclabel,size=130188k,mode=700\\n\";\n+    private Path procCgroupsCgroupsV1CpusetDisabledPath;\n+    private Path procSelfCgroupCgroupsV1CpusetDisabledPath;\n+    private Path procSelfMountinfoCgroupsV1CpusetDisabledPath;\n@@ -234,1 +315,0 @@\n-            cgroupv2CgInfoZeroHierarchy = cgroupsZero;\n@@ -238,0 +318,24 @@\n+            sysFsCgroupCgroupControllersTypicalPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_typical\");\n+            Files.writeString(sysFsCgroupCgroupControllersTypicalPath, sysFsCgroupCgroupControllersTypicalContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersEmptyPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_empty\");\n+            Files.writeString(sysFsCgroupCgroupControllersEmptyPath, sysFsCgroupCgroupControllersEmptyContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersBlankLinePath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_blank_line\");\n+            Files.writeString(sysFsCgroupCgroupControllersBlankLinePath, sysFsCgroupCgroupControllersBlankLineContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersNoMemoryPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_no_memory\");\n+            Files.writeString(sysFsCgroupCgroupControllersNoMemoryPath, sysFsCgroupCgroupControllersNoMemoryContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersNoCpuPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_no_cpu\");\n+            Files.writeString(sysFsCgroupCgroupControllersNoCpuPath, sysFsCgroupCgroupControllersNoCpuContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersNoPidsPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_no_pids\");\n+            Files.writeString(sysFsCgroupCgroupControllersNoPidsPath, sysFsCgroupCgroupControllersNoPidsContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersCpuMemoryOnlyPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_cpu_memory_only\");\n+            Files.writeString(sysFsCgroupCgroupControllersCpuMemoryOnlyPath, sysFsCgroupCgroupControllersCpuMemoryOnlyContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersExtraWhitespacePath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_extra_whitespace\");\n+            Files.writeString(sysFsCgroupCgroupControllersExtraWhitespacePath, sysFsCgroupCgroupControllersExtraWhitespaceContent, StandardCharsets.UTF_8);\n+\n@@ -304,3 +408,0 @@\n-            cgroupv2CgInfoNoZeroHierarchyOnlyFreezer = Paths.get(existingDirectory.toString(), \"cgroups_cgv2_non_zero_only_freezer\");\n-            Files.writeString(cgroupv2CgInfoNoZeroHierarchyOnlyFreezer, cgroupsNonZeroHierarchyOnlyFreezer);\n-\n@@ -312,0 +413,7 @@\n+\n+            procCgroupsCgroupsV1CpusetDisabledPath = Paths.get(existingDirectory.toString(), \"proc_cgroups_cgroups_v1_cpuset_disabled\");\n+            Files.writeString(procCgroupsCgroupsV1CpusetDisabledPath, procCgroupsCgroupsV1CpusetDisabledContent);\n+            procSelfCgroupCgroupsV1CpusetDisabledPath = Paths.get(existingDirectory.toString(), \"proc_self_cgroup_cgroups_v1_cpuset_disabled\");\n+            Files.writeString(procSelfCgroupCgroupsV1CpusetDisabledPath, procSelfCgroupCgroupsV1CpusetDisabledContent);\n+            procSelfMountinfoCgroupsV1CpusetDisabledPath = Paths.get(existingDirectory.toString(), \"proc_self_mountinfo_cgroups_v1_cpuset_disabled\");\n+            Files.writeString(procSelfMountinfoCgroupsV1CpusetDisabledPath, procSelfMountinfoCgroupsV1CpusetDisabledContent);\n@@ -333,1 +441,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -343,1 +451,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -350,1 +458,1 @@\n-        String procCgroups = cgroupv1CgInfoZeroHierarchy.toString();\n+        String procCgroups = cgroupv1CgInfoNonZeroHierarchy.toString();\n@@ -353,1 +461,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -360,1 +468,1 @@\n-        String procCgroups = cgroupv1CgInfoZeroHierarchy.toString();\n+        String procCgroups = cgroupv1CgInfoNonZeroHierarchy.toString();\n@@ -363,1 +471,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -370,1 +478,1 @@\n-        String procCgroups = cgroupv2CgInfoZeroHierarchy.toString();\n+        String sysFsCgroupCgroupControllers = sysFsCgroupCgroupControllersTypicalPath.toString();\n@@ -373,1 +481,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n@@ -383,1 +491,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -390,1 +498,1 @@\n-        String procCgroups = cgroupv2CgInfoZeroHierarchy.toString();\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersTypicalPath.toString();\n@@ -393,1 +501,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n@@ -403,1 +511,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -413,1 +521,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -420,1 +528,1 @@\n-        String cgroups = cgroupv2CgInfoNoZeroHierarchyOnlyFreezer.toString();\n+        String sysFsCgroupCgroupControllers = sysFsCgroupCgroupControllersTypicalPath.toString();\n@@ -423,1 +531,1 @@\n-        int retval = wb.validateCgroup(cgroups, selfCgroup, mountInfo);\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, selfCgroup, mountInfo);\n@@ -429,0 +537,80 @@\n+    public void testCgroupv2ControllerFileEmpty(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersEmptyPath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(INVALID_CGROUPS_V2, retval, \"Empty cgroup v2 controllers file. Invalid.\");\n+        Asserts.assertFalse(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileEmpty PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileBlankLine(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersBlankLinePath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(INVALID_CGROUPS_GENERIC, retval, \"cgroup v2 controllers file contains a single blank line. Invalid.\");\n+        Asserts.assertFalse(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileBlankLine PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileNoMemory(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersNoMemoryPath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(INVALID_CGROUPS_GENERIC, retval, \"cgroup v2 memory controller disabled. Invalid.\");\n+        Asserts.assertFalse(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileNoMemory PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileNoCpu(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersNoCpuPath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(INVALID_CGROUPS_GENERIC, retval, \"cgroup v2 cpu controller disabled. Invalid.\");\n+        Asserts.assertFalse(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileNoCpu PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileNoPids(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersNoPidsPath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(CGROUPS_V2, retval, \"cgroup v2 pids controller disabled.  Valid.\");\n+        Asserts.assertTrue(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileNoPids PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileCpuMemoryOnly(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersCpuMemoryOnlyPath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(CGROUPS_V2, retval, \"only cgroup v2 memory and cpu controllers enabled.  Valid.\");\n+        Asserts.assertTrue(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileCpuMemoryOnly PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileExtraWhitespace(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersExtraWhitespacePath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(CGROUPS_V2, retval, \"cgroup v2 controllers file contains extra whitespace.  Valid.\");\n+        Asserts.assertTrue(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileExtraWhitespace PASSED!\");\n+    }\n+\n+    public void testCgroupv1CpusetDisabled(WhiteBox wb) {\n+        String procCgroups = procCgroupsCgroupsV1CpusetDisabledPath.toString();\n+        String procSelfCgroup = procSelfCgroupCgroupsV1CpusetDisabledPath.toString();\n+        String procSelfMountinfo = procSelfMountinfoCgroupsV1CpusetDisabledPath.toString();\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(INVALID_CGROUPS_GENERIC, retval, \"Required cpuset controller disabled in \/proc\/cgroups. Invalid.\");\n+        Asserts.assertFalse(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv1CpusetDisabled PASSED!\");\n+    }\n+\n@@ -439,0 +627,7 @@\n+            test.testCgroupv2ControllerFileEmpty(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileBlankLine(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileNoMemory(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileNoCpu(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileNoPids(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileCpuMemoryOnly(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileExtraWhitespace(wb, test.cgroupv2MntInfoZeroHierarchy);\n@@ -453,0 +648,1 @@\n+            test.testCgroupv1CpusetDisabled(wb);\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/CgroupSubsystemFactory.java","additions":217,"deletions":21,"binary":false,"changes":238,"status":"modified"},{"patch":"@@ -762,1 +762,2 @@\n-  public native int validateCgroup(String procCgroups,\n+  public native int validateCgroup(boolean cgroupsV2Enabled,\n+                                   String controllersFile,\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}