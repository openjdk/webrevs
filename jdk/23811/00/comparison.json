{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include <sys\/vfs.h>\n@@ -39,0 +40,3 @@\n+\/\/ Inlined from <linux\/magic.h> for portability.\n+#define CGROUP2_SUPER_MAGIC 0x63677270\n+\n@@ -41,0 +45,18 @@\n+static inline int cg_v2_controller_index(const char* name) {\n+  if (strcmp(name, \"cpuset\") == 0) {\n+    return CPUSET_IDX;\n+  } else if (strcmp(name, \"cpu\") == 0) {\n+    return CPU_IDX;\n+  } else if (strcmp(name, \"memory\") == 0) {\n+    return MEMORY_IDX;\n+  } else if (strcmp(name, \"pids\") == 0) {\n+    return PIDS_IDX;\n+  } else {\n+    return -1;\n+  }\n+}\n+static inline bool cg_v2_required(int index) {\n+  \/\/ For cgroups v2, cpuacct is rolled into cpu, and the pids and cpuset controllers\n+  \/\/ are optional; the remaining controllers, cpu and memory, are required.\n+  return index == CPU_IDX || index == MEMORY_IDX;\n+}\n@@ -51,0 +73,2 @@\n+  const char* sys_fs_cgroup_cgroup_controllers = \"\/sys\/fs\/cgroup\/cgroup.controllers\";\n+  const char* controllers_file = proc_cgroups;\n@@ -53,0 +77,3 @@\n+  const char* sys_fs_cgroup = \"\/sys\/fs\/cgroup\";\n+  struct statfs fsstat = {};\n+  bool cgroups_v2_enabled = false;\n@@ -54,1 +81,8 @@\n-  bool valid_cgroup = determine_type(cg_infos, proc_cgroups, proc_self_cgroup, proc_self_mountinfo, &cg_type_flags);\n+  if (statfs(sys_fs_cgroup, &fsstat) != -1) {\n+    cgroups_v2_enabled = (fsstat.f_type == CGROUP2_SUPER_MAGIC);\n+    if (cgroups_v2_enabled) {\n+      controllers_file = sys_fs_cgroup_cgroup_controllers;\n+    }\n+  }\n+\n+  bool valid_cgroup = determine_type(cg_infos, cgroups_v2_enabled, controllers_file, proc_self_cgroup, proc_self_mountinfo, &cg_type_flags);\n@@ -219,1 +253,2 @@\n-                                            const char* proc_cgroups,\n+                                            bool cgroups_v2_enabled,\n+                                            const char* controllers_file,\n@@ -224,1 +259,1 @@\n-  FILE *cgroups = nullptr;\n+  FILE* controllers = nullptr;\n@@ -228,1 +263,1 @@\n-  bool is_cgroupsV2;\n+  bool is_cgroupsV2 = true;\n@@ -233,1 +268,1 @@\n-  bool all_required_controllers_enabled;\n+  bool all_required_controllers_enabled = true;\n@@ -235,11 +270,4 @@\n-  \/*\n-   * Read \/proc\/cgroups so as to be able to distinguish cgroups v2 vs cgroups v1.\n-   *\n-   * For cgroups v1 hierarchy (hybrid or legacy), cpu, cpuacct, cpuset, memory controllers\n-   * must have non-zero for the hierarchy ID field and relevant controllers mounted.\n-   * Conversely, for cgroups v2 (unified hierarchy), cpu, cpuacct, cpuset, memory\n-   * controllers must have hierarchy ID 0 and the unified controller mounted.\n-   *\/\n-  cgroups = os::fopen(proc_cgroups, \"r\");\n-  if (cgroups == nullptr) {\n-    log_debug(os, container)(\"Can't open %s, %s\", proc_cgroups, os::strerror(errno));\n+  \/\/ If cgroups v2 is enabled, open \/sys\/fs\/cgroup\/cgroup.controllers.  If not, open \/proc\/cgroups.\n+  controllers = os::fopen(controllers_file, \"r\");\n+  if (controllers == nullptr) {\n+    log_debug(os, container)(\"Can't open %s, %s\", controllers_file, os::strerror(errno));\n@@ -250,8 +278,27 @@\n-  while ((p = fgets(buf, MAXPATHLEN, cgroups)) != nullptr) {\n-    char name[MAXPATHLEN+1];\n-    int  hierarchy_id;\n-    int  enabled;\n-\n-    \/\/ Format of \/proc\/cgroups documented via man 7 cgroups\n-    if (sscanf(p, \"%s %d %*d %d\", name, &hierarchy_id, &enabled) != 3) {\n-      continue;\n+  if (cgroups_v2_enabled) {\n+    \/*\n+     * cgroups v2 is enabled.  For cgroups v2 (unified hierarchy), the cpu and memory\n+     * controllers must be enabled.\n+     *\/\n+    if ((p = fgets(buf, MAXPATHLEN, controllers)) != nullptr) {\n+      char* controller = nullptr;\n+      char* buf_ptr = buf;\n+      int i;\n+      while ((controller = strsep(&buf_ptr, \" \\n\\t\\r\\f\\v\")) != nullptr) {\n+        \/\/ Skip empty string due to line ending in delimiter, '\\n'.\n+        if (strcmp(controller, \"\") == 0) {\n+          continue;\n+        }\n+        if ((i = cg_v2_controller_index(controller)) != -1) {\n+          cg_infos[i]._name = os::strdup(controller);\n+          cg_infos[i]._enabled = true;\n+          log_debug(os, container)(\"v2 controller %s is enabled and %s\", cg_infos[i]._name,\n+                                   cg_v2_required(i) ? \"required\" : \"relevant\");\n+        } else {\n+          log_debug(os, container)(\"v2 controller %s is enabled but not relevant\", controller);\n+        }\n+      }\n+    } else {\n+      log_debug(os, container)(\"Can't read %s, %s\", controllers_file, os::strerror(errno));\n+      *flags = INVALID_CGROUPS_V2;\n+      return false;\n@@ -259,22 +306,12 @@\n-    if (strcmp(name, \"memory\") == 0) {\n-      cg_infos[MEMORY_IDX]._name = os::strdup(name);\n-      cg_infos[MEMORY_IDX]._hierarchy_id = hierarchy_id;\n-      cg_infos[MEMORY_IDX]._enabled = (enabled == 1);\n-    } else if (strcmp(name, \"cpuset\") == 0) {\n-      log_debug(os, container)(\"Detected optional cpuset controller entry in %s\", proc_cgroups);\n-      cg_infos[CPUSET_IDX]._name = os::strdup(name);\n-      cg_infos[CPUSET_IDX]._hierarchy_id = hierarchy_id;\n-      cg_infos[CPUSET_IDX]._enabled = (enabled == 1);\n-    } else if (strcmp(name, \"cpu\") == 0) {\n-      cg_infos[CPU_IDX]._name = os::strdup(name);\n-      cg_infos[CPU_IDX]._hierarchy_id = hierarchy_id;\n-      cg_infos[CPU_IDX]._enabled = (enabled == 1);\n-    } else if (strcmp(name, \"cpuacct\") == 0) {\n-      cg_infos[CPUACCT_IDX]._name = os::strdup(name);\n-      cg_infos[CPUACCT_IDX]._hierarchy_id = hierarchy_id;\n-      cg_infos[CPUACCT_IDX]._enabled = (enabled == 1);\n-    } else if (strcmp(name, \"pids\") == 0) {\n-      log_debug(os, container)(\"Detected optional pids controller entry in %s\", proc_cgroups);\n-      cg_infos[PIDS_IDX]._name = os::strdup(name);\n-      cg_infos[PIDS_IDX]._hierarchy_id = hierarchy_id;\n-      cg_infos[PIDS_IDX]._enabled = (enabled == 1);\n+    for (int i = 0; i < CG_INFO_LENGTH; i++) {\n+      \/\/ cgroups v2 does not have cpuacct.\n+      if (i == CPUACCT_IDX) {\n+        continue;\n+      }\n+      if (cg_v2_required(i)) {\n+        all_required_controllers_enabled = all_required_controllers_enabled && cg_infos[i]._enabled;\n+      }\n+      if (log_is_enabled(Debug, os, container) && !cg_infos[i]._enabled) {\n+        log_debug(os, container)(\"v2 controller %s is %s but not enabled\", cg_controller_name[i],\n+                                 cg_v2_required(i) ? \"required\" : \"relevant\");\n+      }\n@@ -282,2 +319,10 @@\n-  }\n-  fclose(cgroups);\n+  } else {\n+    \/*\n+     * cgroups v2 is not enabled.  Read \/proc\/cgroups; for cgroups v1 hierarchy (hybrid or\n+     * legacy), cpu, cpuacct, cpuset, and memory controllers must have non-zero for the\n+     * hierarchy ID field and relevant controllers mounted.\n+     *\/\n+    while ((p = fgets(buf, MAXPATHLEN, controllers)) != nullptr) {\n+      char name[MAXPATHLEN+1];\n+      int  hierarchy_id;\n+      int  enabled;\n@@ -285,7 +330,27 @@\n-  is_cgroupsV2 = true;\n-  all_required_controllers_enabled = true;\n-  for (int i = 0; i < CG_INFO_LENGTH; i++) {\n-    \/\/ pids and cpuset controllers are optional. All other controllers are required\n-    if (i != PIDS_IDX && i != CPUSET_IDX) {\n-      is_cgroupsV2 = is_cgroupsV2 && cg_infos[i]._hierarchy_id == 0;\n-      all_required_controllers_enabled = all_required_controllers_enabled && cg_infos[i]._enabled;\n+      \/\/ Format of \/proc\/cgroups documented via man 7 cgroups\n+      if (sscanf(p, \"%s %d %*d %d\", name, &hierarchy_id, &enabled) != 3) {\n+        continue;\n+      }\n+      if (strcmp(name, \"memory\") == 0) {\n+        cg_infos[MEMORY_IDX]._name = os::strdup(name);\n+        cg_infos[MEMORY_IDX]._hierarchy_id = hierarchy_id;\n+        cg_infos[MEMORY_IDX]._enabled = (enabled == 1);\n+      } else if (strcmp(name, \"cpuset\") == 0) {\n+        log_debug(os, container)(\"Detected optional cpuset controller entry in %s\", controllers_file);\n+        cg_infos[CPUSET_IDX]._name = os::strdup(name);\n+        cg_infos[CPUSET_IDX]._hierarchy_id = hierarchy_id;\n+        cg_infos[CPUSET_IDX]._enabled = (enabled == 1);\n+      } else if (strcmp(name, \"cpu\") == 0) {\n+        cg_infos[CPU_IDX]._name = os::strdup(name);\n+        cg_infos[CPU_IDX]._hierarchy_id = hierarchy_id;\n+        cg_infos[CPU_IDX]._enabled = (enabled == 1);\n+      } else if (strcmp(name, \"cpuacct\") == 0) {\n+        cg_infos[CPUACCT_IDX]._name = os::strdup(name);\n+        cg_infos[CPUACCT_IDX]._hierarchy_id = hierarchy_id;\n+        cg_infos[CPUACCT_IDX]._enabled = (enabled == 1);\n+      } else if (strcmp(name, \"pids\") == 0) {\n+        log_debug(os, container)(\"Detected optional pids controller entry in %s\", controllers_file);\n+        cg_infos[PIDS_IDX]._name = os::strdup(name);\n+        cg_infos[PIDS_IDX]._hierarchy_id = hierarchy_id;\n+        cg_infos[PIDS_IDX]._enabled = (enabled == 1);\n+      }\n@@ -293,2 +358,9 @@\n-    if (log_is_enabled(Debug, os, container) && !cg_infos[i]._enabled) {\n-      log_debug(os, container)(\"controller %s is not enabled\\n\", cg_controller_name[i]);\n+    for (int i = 0; i < CG_INFO_LENGTH; i++) {\n+      \/\/ pids and cpuset controllers are optional. All other controllers are required\n+      if (i != PIDS_IDX && i != CPUSET_IDX) {\n+        is_cgroupsV2 = is_cgroupsV2 && cg_infos[i]._hierarchy_id == 0;\n+        all_required_controllers_enabled = all_required_controllers_enabled && cg_infos[i]._enabled;\n+      }\n+      if (log_is_enabled(Debug, os, container) && !cg_infos[i]._enabled) {\n+        log_debug(os, container)(\"controller %s is not enabled\\n\", cg_controller_name[i]);\n+      }\n@@ -297,0 +369,1 @@\n+  fclose(controllers);\n@@ -349,1 +422,1 @@\n-        assert(hierarchy_id == cg_infos[CPUACCT_IDX]._hierarchy_id, \"\/proc\/cgroups and \/proc\/self\/cgroup hierarchy mismatch for cpuacc\");\n+        assert(hierarchy_id == cg_infos[CPUACCT_IDX]._hierarchy_id, \"\/proc\/cgroups and \/proc\/self\/cgroup hierarchy mismatch for cpuacct\");\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":131,"deletions":58,"binary":false,"changes":189,"status":"modified"},{"patch":"@@ -327,1 +327,2 @@\n-                               const char* proc_cgroups,\n+                               bool cgroups_v2_enabled,\n+                               const char* controllers_file,\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1077,1 +1077,2 @@\n-bool WhiteBox::validate_cgroup(const char* proc_cgroups,\n+bool WhiteBox::validate_cgroup(bool cgroups_v2_enabled,\n+                               const char* controllers_file,\n@@ -1082,1 +1083,1 @@\n-  return CgroupSubsystemFactory::determine_type(cg_infos, proc_cgroups,\n+  return CgroupSubsystemFactory::determine_type(cg_infos, cgroups_v2_enabled, controllers_file,\n@@ -2510,1 +2511,2 @@\n-                                    jstring proc_cgroups,\n+                                    jboolean cgroups_v2_enabled,\n+                                    jstring controllers_file,\n@@ -2516,1 +2518,1 @@\n-  const char* p_cgroups = env->GetStringUTFChars(proc_cgroups, nullptr);\n+  const char* c_file = env->GetStringUTFChars(controllers_file, nullptr);\n@@ -2524,1 +2526,1 @@\n-  WhiteBox::validate_cgroup(p_cgroups, p_s_cgroup, p_s_mountinfo, &cg_type_flags);\n+  WhiteBox::validate_cgroup(cgroups_v2_enabled, c_file, p_s_cgroup, p_s_mountinfo, &cg_type_flags);\n@@ -2526,1 +2528,1 @@\n-  env->ReleaseStringUTFChars(proc_cgroups, p_cgroups);\n+  env->ReleaseStringUTFChars(controllers_file, c_file);\n@@ -2965,1 +2967,1 @@\n-      CC\"(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)I\",\n+      CC\"(ZLjava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)I\",\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  static bool validate_cgroup(const char* proc_cgroups, const char* proc_self_cgroup, const char* proc_self_mountinfo, u1* cg_flags);\n+  static bool validate_cgroup(bool cgroups_v2_enabled, const char* controllers_file, const char* proc_self_cgroup, const char* proc_self_mountinfo, u1* cg_flags);\n","filename":"src\/hotspot\/share\/prims\/whitebox.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+    private static final int INVALID_CGROUPS_GENERIC = 6;\n@@ -63,1 +64,0 @@\n-    private Path cgroupv2CgInfoZeroHierarchy;\n@@ -84,1 +84,0 @@\n-    private Path cgroupv2CgInfoNoZeroHierarchyOnlyFreezer;\n@@ -87,0 +86,8 @@\n+    private Path sysFsCgroupCgroupControllersTypicalPath;\n+    private Path sysFsCgroupCgroupControllersEmptyPath;\n+    private Path sysFsCgroupCgroupControllersBlankLinePath;\n+    private Path sysFsCgroupCgroupControllersNoMemoryPath;\n+    private Path sysFsCgroupCgroupControllersNoCpuPath;\n+    private Path sysFsCgroupCgroupControllersNoPidsPath;\n+    private Path sysFsCgroupCgroupControllersCpuMemoryOnlyPath;\n+    private Path sysFsCgroupCgroupControllersExtraWhitespacePath;\n@@ -111,0 +118,8 @@\n+    private String sysFsCgroupCgroupControllersTypicalContent = \"cpuset cpu io memory hugetlb pids rdma misc\\n\";\n+    private String sysFsCgroupCgroupControllersEmptyContent = \"\";\n+    private String sysFsCgroupCgroupControllersBlankLineContent = \"\\n\";\n+    private String sysFsCgroupCgroupControllersNoMemoryContent = \"cpuset cpu io hugetlb pids rdma misc\\n\";\n+    private String sysFsCgroupCgroupControllersNoCpuContent = \"cpuset io memory hugetlb pids rdma misc\\n\";\n+    private String sysFsCgroupCgroupControllersNoPidsContent = \"cpuset cpu io memory hugetlb rdma misc\\n\";\n+    private String sysFsCgroupCgroupControllersCpuMemoryOnlyContent = \"memory cpu\\n\";\n+    private String sysFsCgroupCgroupControllersExtraWhitespaceContent = \"   cpu\\t  \\fmemory\\r \\n\";\n@@ -234,1 +249,0 @@\n-            cgroupv2CgInfoZeroHierarchy = cgroupsZero;\n@@ -238,0 +252,24 @@\n+            sysFsCgroupCgroupControllersTypicalPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_typical\");\n+            Files.writeString(sysFsCgroupCgroupControllersTypicalPath, sysFsCgroupCgroupControllersTypicalContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersEmptyPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_empty\");\n+            Files.writeString(sysFsCgroupCgroupControllersEmptyPath, sysFsCgroupCgroupControllersEmptyContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersBlankLinePath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_blank_line\");\n+            Files.writeString(sysFsCgroupCgroupControllersBlankLinePath, sysFsCgroupCgroupControllersBlankLineContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersNoMemoryPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_no_memory\");\n+            Files.writeString(sysFsCgroupCgroupControllersNoMemoryPath, sysFsCgroupCgroupControllersNoMemoryContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersNoCpuPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_no_cpu\");\n+            Files.writeString(sysFsCgroupCgroupControllersNoCpuPath, sysFsCgroupCgroupControllersNoCpuContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersNoPidsPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_no_pids\");\n+            Files.writeString(sysFsCgroupCgroupControllersNoPidsPath, sysFsCgroupCgroupControllersNoPidsContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersCpuMemoryOnlyPath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_cpu_memory_only\");\n+            Files.writeString(sysFsCgroupCgroupControllersCpuMemoryOnlyPath, sysFsCgroupCgroupControllersCpuMemoryOnlyContent, StandardCharsets.UTF_8);\n+\n+            sysFsCgroupCgroupControllersExtraWhitespacePath = Paths.get(existingDirectory.toString(), \"sys_fs_cgroup_cgroup_controllers_extra_whitespace\");\n+            Files.writeString(sysFsCgroupCgroupControllersExtraWhitespacePath, sysFsCgroupCgroupControllersExtraWhitespaceContent, StandardCharsets.UTF_8);\n+\n@@ -304,3 +342,0 @@\n-            cgroupv2CgInfoNoZeroHierarchyOnlyFreezer = Paths.get(existingDirectory.toString(), \"cgroups_cgv2_non_zero_only_freezer\");\n-            Files.writeString(cgroupv2CgInfoNoZeroHierarchyOnlyFreezer, cgroupsNonZeroHierarchyOnlyFreezer);\n-\n@@ -333,1 +368,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -343,1 +378,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -353,1 +388,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -363,1 +398,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -370,1 +405,1 @@\n-        String procCgroups = cgroupv2CgInfoZeroHierarchy.toString();\n+        String sysFsCgroupCgroupControllers = sysFsCgroupCgroupControllersTypicalPath.toString();\n@@ -373,1 +408,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n@@ -383,1 +418,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -390,1 +425,1 @@\n-        String procCgroups = cgroupv2CgInfoZeroHierarchy.toString();\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersTypicalPath.toString();\n@@ -393,1 +428,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n@@ -403,1 +438,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -413,1 +448,1 @@\n-        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        int retval = wb.validateCgroup(false, procCgroups, procSelfCgroup, procSelfMountinfo);\n@@ -420,1 +455,1 @@\n-        String cgroups = cgroupv2CgInfoNoZeroHierarchyOnlyFreezer.toString();\n+        String sysFsCgroupCgroupControllers = sysFsCgroupCgroupControllersTypicalPath.toString();\n@@ -423,1 +458,1 @@\n-        int retval = wb.validateCgroup(cgroups, selfCgroup, mountInfo);\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, selfCgroup, mountInfo);\n@@ -429,0 +464,70 @@\n+    public void testCgroupv2ControllerFileEmpty(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersEmptyPath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(INVALID_CGROUPS_V2, retval, \"Empty cgroup v2 controllers file. Invalid.\");\n+        Asserts.assertFalse(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileEmpty PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileBlankLine(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersBlankLinePath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(INVALID_CGROUPS_GENERIC, retval, \"cgroup v2 controllers file contains a single blank line. Invalid.\");\n+        Asserts.assertFalse(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileBlankLine PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileNoMemory(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersNoMemoryPath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(INVALID_CGROUPS_GENERIC, retval, \"cgroup v2 memory controller disabled. Invalid.\");\n+        Asserts.assertFalse(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileNoMemory PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileNoCpu(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersNoCpuPath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(INVALID_CGROUPS_GENERIC, retval, \"cgroup v2 cpu controller disabled. Invalid.\");\n+        Asserts.assertFalse(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileNoCpu PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileNoPids(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersNoPidsPath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(CGROUPS_V2, retval, \"cgroup v2 pids controller disabled.  Valid.\");\n+        Asserts.assertTrue(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileNoPids PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileCpuMemoryOnly(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersCpuMemoryOnlyPath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(CGROUPS_V2, retval, \"only cgroup v2 memory and cpu controllers enabled.  Valid.\");\n+        Asserts.assertTrue(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileCpuMemoryOnly PASSED!\");\n+    }\n+\n+    public void testCgroupv2ControllerFileExtraWhitespace(WhiteBox wb, Path mountInfo) {\n+        String sysFsCgroupCgroupControllers  = sysFsCgroupCgroupControllersExtraWhitespacePath.toString();\n+        String procSelfCgroup = cgroupV2SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(true, sysFsCgroupCgroupControllers, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(CGROUPS_V2, retval, \"cgroup v2 controllers file contains extra whitespace.  Valid.\");\n+        Asserts.assertTrue(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv2ControllerFileExtraWhitespace PASSED!\");\n+    }\n+\n@@ -439,0 +544,7 @@\n+            test.testCgroupv2ControllerFileEmpty(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileBlankLine(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileNoMemory(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileNoCpu(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileNoPids(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileCpuMemoryOnly(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2ControllerFileExtraWhitespace(wb, test.cgroupv2MntInfoZeroHierarchy);\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/CgroupSubsystemFactory.java","additions":131,"deletions":19,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -760,1 +760,2 @@\n-  public native int validateCgroup(String procCgroups,\n+  public native int validateCgroup(boolean cgroupsV2Enabled,\n+                                   String controllersFile,\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}