{"files":[{"patch":"@@ -27,1 +27,0 @@\n-#include \"code\/nmethod.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"code\/nmethod.hpp\"\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-    blob = new (size) BufferBlob(name, Blob_Buffer, size);\n+    blob = new (size) BufferBlob(name, CodeBlobKind::Blob_Buffer, size);\n@@ -289,1 +289,1 @@\n-    blob = new (size) BufferBlob(name, Blob_Buffer, cb, size);\n+    blob = new (size) BufferBlob(name, CodeBlobKind::Blob_Buffer, cb, size);\n@@ -310,1 +310,1 @@\n-  BufferBlob(\"I2C\/C2I adapters\", Blob_Adapter, cb, size) {\n+  BufferBlob(\"I2C\/C2I adapters\", CodeBlobKind::Blob_Adapter, cb, size) {\n@@ -345,1 +345,1 @@\n-  BufferBlob(name, Blob_Vtable, size) {\n+  BufferBlob(name, CodeBlobKind::Blob_Vtable, size) {\n@@ -416,1 +416,2 @@\n-: RuntimeBlob(name, Blob_Runtime_Stub, cb, size, sizeof(RuntimeStub), frame_complete, frame_size, oop_maps, caller_must_gc_arguments)\n+: RuntimeBlob(name, CodeBlobKind::Blob_Runtime_Stub, cb, size, sizeof(RuntimeStub),\n+              frame_complete, frame_size, oop_maps, caller_must_gc_arguments)\n@@ -472,1 +473,2 @@\n-: SingletonBlob(\"DeoptimizationBlob\", Blob_Deoptimization, cb, size, sizeof(DeoptimizationBlob), frame_size, oop_maps)\n+: SingletonBlob(\"DeoptimizationBlob\", CodeBlobKind::Blob_Deoptimization, cb,\n+                size, sizeof(DeoptimizationBlob), frame_size, oop_maps)\n@@ -521,1 +523,2 @@\n-: SingletonBlob(\"UncommonTrapBlob\", Blob_Uncommon_Trap, cb, size, sizeof(UncommonTrapBlob), frame_size, oop_maps)\n+: SingletonBlob(\"UncommonTrapBlob\", CodeBlobKind::Blob_Uncommon_Trap, cb,\n+                size, sizeof(UncommonTrapBlob), frame_size, oop_maps)\n@@ -557,1 +560,2 @@\n-: SingletonBlob(\"ExceptionBlob\", Blob_Exception, cb, size, sizeof(ExceptionBlob), frame_size, oop_maps)\n+: SingletonBlob(\"ExceptionBlob\", CodeBlobKind::Blob_Exception, cb,\n+                size, sizeof(ExceptionBlob), frame_size, oop_maps)\n@@ -592,1 +596,2 @@\n-: SingletonBlob(\"SafepointBlob\", Blob_Safepoint, cb, size, sizeof(SafepointBlob), frame_size, oop_maps)\n+: SingletonBlob(\"SafepointBlob\", CodeBlobKind::Blob_Safepoint, cb,\n+                size, sizeof(SafepointBlob), frame_size, oop_maps)\n@@ -618,1 +623,2 @@\n-  RuntimeBlob(name, Blob_Upcall, cb, size, sizeof(UpcallStub), CodeOffsets::frame_never_safe, 0 \/* no frame size *\/,\n+  RuntimeBlob(name, CodeBlobKind::Blob_Upcall, cb, size, sizeof(UpcallStub),\n+              CodeOffsets::frame_never_safe, 0 \/* no frame size *\/,\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-enum CodeBlobKind : u1 {\n+enum class CodeBlobKind : u1 {\n@@ -158,11 +158,11 @@\n-  bool is_nmethod() const                     { return _kind == Blob_Nmethod; }\n-  bool is_buffer_blob() const                 { return _kind == Blob_Buffer; }\n-  bool is_runtime_stub() const                { return _kind == Blob_Runtime_Stub; }\n-  bool is_deoptimization_stub() const         { return _kind == Blob_Deoptimization; }\n-  bool is_uncommon_trap_stub() const          { return _kind == Blob_Uncommon_Trap; }\n-  bool is_exception_stub() const              { return _kind == Blob_Exception; }\n-  bool is_safepoint_stub() const              { return _kind == Blob_Safepoint; }\n-  bool is_adapter_blob() const                { return _kind == Blob_Adapter; }\n-  bool is_vtable_blob() const                 { return _kind == Blob_Vtable; }\n-  bool is_method_handles_adapter_blob() const { return _kind == Blob_MH_Adapter; }\n-  bool is_upcall_stub() const                 { return _kind == Blob_Upcall; }\n+  bool is_nmethod() const                     { return _kind == CodeBlobKind::Blob_Nmethod; }\n+  bool is_buffer_blob() const                 { return _kind == CodeBlobKind::Blob_Buffer; }\n+  bool is_runtime_stub() const                { return _kind == CodeBlobKind::Blob_Runtime_Stub; }\n+  bool is_deoptimization_stub() const         { return _kind == CodeBlobKind::Blob_Deoptimization; }\n+  bool is_uncommon_trap_stub() const          { return _kind == CodeBlobKind::Blob_Uncommon_Trap; }\n+  bool is_exception_stub() const              { return _kind == CodeBlobKind::Blob_Exception; }\n+  bool is_safepoint_stub() const              { return _kind == CodeBlobKind::Blob_Safepoint; }\n+  bool is_adapter_blob() const                { return _kind == CodeBlobKind::Blob_Adapter; }\n+  bool is_vtable_blob() const                 { return _kind == CodeBlobKind::Blob_Vtable; }\n+  bool is_method_handles_adapter_blob() const { return _kind == CodeBlobKind::Blob_MH_Adapter; }\n+  bool is_upcall_stub() const                 { return _kind == CodeBlobKind::Blob_Upcall; }\n@@ -365,1 +365,1 @@\n-  MethodHandlesAdapterBlob(int size): BufferBlob(\"MethodHandles adapters\", Blob_MH_Adapter, size) {}\n+  MethodHandlesAdapterBlob(int size): BufferBlob(\"MethodHandles adapters\", CodeBlobKind::Blob_MH_Adapter, size) {}\n@@ -428,1 +428,1 @@\n-     const char* name,\n+     const char*  name,\n@@ -430,5 +430,5 @@\n-     CodeBuffer* cb,\n-     int         size,\n-     int         header_size,\n-     int         frame_size,\n-     OopMapSet*  oop_maps\n+     CodeBuffer*  cb,\n+     int          size,\n+     int          header_size,\n+     int          frame_size,\n+     OopMapSet*   oop_maps\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -56,9 +56,3 @@\n-  nmethod* nm = const_cast<nmethod*>(code())->as_nmethod_or_null();\n-  oop o;\n-  if (nm != nullptr) {\n-    \/\/ Despite these oops being found inside nmethods that are on-stack,\n-    \/\/ they are not kept alive by all GCs (e.g. G1 and Shenandoah).\n-    o = nm->oop_at_phantom(read_int());\n-  } else {\n-    o = code()->oop_at(read_int());\n-  }\n+  \/\/ Despite these oops being found inside nmethods that are on-stack,\n+  \/\/ they are not kept alive by all GCs (e.g. G1 and Shenandoah).\n+  oop o = code()->oop_at_phantom(read_int());\n","filename":"src\/hotspot\/share\/code\/debugInfo.cpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -658,1 +658,1 @@\n-  if (!is_in_use() && is_nmethod()) {\n+  if (!is_in_use()) {\n@@ -812,2 +812,2 @@\n-    nmethod* nm = as_nmethod_or_null();\n-    if (nm != nullptr && bs_nm->is_armed(nm)) {\n+    nmethod* nm = this;\n+    if (bs_nm->is_armed(nm)) {\n@@ -1009,3 +1009,3 @@\n-  { \/\/ avoid uninitialized fields, even for short time periods\n-    _exception_cache            = nullptr;\n-  }\n+  \/\/ avoid uninitialized fields, even for short time periods\n+  _exception_cache            = nullptr;\n+\n@@ -1214,1 +1214,1 @@\n-  : CodeBlob(\"native nmethod\", Blob_Nmethod, code_buffer, nmethod_size, sizeof(nmethod),\n+  : CodeBlob(\"native nmethod\", CodeBlobKind::Blob_Nmethod, code_buffer, nmethod_size, sizeof(nmethod),\n@@ -1359,1 +1359,1 @@\n-  : CodeBlob(\"nmethod\", Blob_Nmethod, code_buffer, nmethod_size, sizeof(nmethod),\n+  : CodeBlob(\"nmethod\", CodeBlobKind::Blob_Nmethod, code_buffer, nmethod_size, sizeof(nmethod),\n@@ -2164,1 +2164,1 @@\n-  \/\/ If a JVMTI agent has enabled the nmethod Unload event then\n+  \/\/ If a JVMTI agent has enabled the CompiledMethodUnload event then\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+class AbstractCompiler;\n+class CompiledDirectCall;\n+class CompiledIC;\n@@ -36,0 +39,1 @@\n+class Dependencies;\n@@ -38,4 +42,0 @@\n-class JvmtiThreadState;\n-class OopIterateClosure;\n-\n-class Dependencies;\n@@ -44,3 +44,2 @@\n-class AbstractCompiler;\n-class xmlStream;\n-class CompiledDirectCall;\n+class JvmtiThreadState;\n+class MetadataClosure;\n@@ -48,0 +47,1 @@\n+class OopIterateClosure;\n@@ -49,2 +49,1 @@\n-class CompiledIC;\n-class MetadataClosure;\n+class xmlStream;\n@@ -905,1 +904,1 @@\n-  void print()                          const override;\n+  virtual void print()                  const override;\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-class nmethod;\n@@ -39,1 +38,0 @@\n-class nmethod;\n@@ -42,0 +40,1 @@\n+class nmethod;\n","filename":"src\/hotspot\/share\/code\/relocInfo.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1380,2 +1380,1 @@\n-    if (method_code != nullptr && method_code->is_nmethod()\n-                      && (compile_reason != CompileTask::Reason_DirectivesChanged)) {\n+    if (method_code != nullptr && (compile_reason != CompileTask::Reason_DirectivesChanged)) {\n@@ -1484,6 +1483,1 @@\n-    nmethod* code = method->code();\n-    if (code == nullptr) {\n-      return (nmethod*) code;\n-    } else {\n-      return code->as_nmethod_or_null();\n-    }\n+    return method->code();\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -81,2 +81,1 @@\n-  virtual bool has_dead_oop(nmethod* method) const {\n-    nmethod* const nm = method->as_nmethod();\n+  virtual bool has_dead_oop(nmethod* const nm) const {\n@@ -94,2 +93,1 @@\n-  virtual bool lock(nmethod* method) {\n-    nmethod* const nm = method->as_nmethod();\n+  virtual bool lock(nmethod* const nm) {\n@@ -102,2 +100,1 @@\n-  virtual void unlock(nmethod* method) {\n-    nmethod* const nm = method->as_nmethod();\n+  virtual void unlock(nmethod* const nm) {\n@@ -109,2 +106,2 @@\n-  virtual bool is_safe(nmethod* method) {\n-    if (SafepointSynchronize::is_at_safepoint() || method->is_unloading()) {\n+  virtual bool is_safe(nmethod* const nm) {\n+    if (SafepointSynchronize::is_at_safepoint() || nm->is_unloading()) {\n@@ -114,1 +111,0 @@\n-    nmethod* const nm = method->as_nmethod();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUnload.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -78,2 +78,1 @@\n-  virtual bool has_dead_oop(nmethod* method) const {\n-    nmethod* const nm = method->as_nmethod();\n+  virtual bool has_dead_oop(nmethod* const nm) const {\n@@ -90,2 +89,1 @@\n-  virtual bool lock(nmethod* method) {\n-    nmethod* const nm = method->as_nmethod();\n+  virtual bool lock(nmethod* const nm) {\n@@ -97,2 +95,1 @@\n-  virtual void unlock(nmethod* method) {\n-    nmethod* const nm = method->as_nmethod();\n+  virtual void unlock(nmethod* const nm) {\n@@ -103,2 +100,2 @@\n-  virtual bool is_safe(nmethod* method) {\n-    if (SafepointSynchronize::is_at_safepoint() || method->is_unloading()) {\n+  virtual bool is_safe(nmethod* const nm) {\n+    if (SafepointSynchronize::is_at_safepoint() || nm->is_unloading()) {\n@@ -108,1 +105,0 @@\n-    nmethod* const nm = method->as_nmethod();\n","filename":"src\/hotspot\/share\/gc\/x\/xUnload.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -77,2 +77,1 @@\n-  virtual bool has_dead_oop(nmethod* method) const {\n-    nmethod* const nm = method->as_nmethod();\n+  virtual bool has_dead_oop(nmethod* const nm) const {\n@@ -93,2 +92,1 @@\n-  virtual bool lock(nmethod* method) {\n-    nmethod* const nm = method->as_nmethod();\n+  virtual bool lock(nmethod* const nm) {\n@@ -100,2 +98,1 @@\n-  virtual void unlock(nmethod* method) {\n-    nmethod* const nm = method->as_nmethod();\n+  virtual void unlock(nmethod* const nm) {\n@@ -106,2 +103,2 @@\n-  virtual bool is_safe(nmethod* method) {\n-    if (SafepointSynchronize::is_at_safepoint() || method->is_unloading()) {\n+  virtual bool is_safe(nmethod* const nm) {\n+    if (SafepointSynchronize::is_at_safepoint() || nm->is_unloading()) {\n@@ -111,1 +108,0 @@\n-    nmethod* const nm = method->as_nmethod();\n","filename":"src\/hotspot\/share\/gc\/z\/zUnload.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -271,1 +271,0 @@\n-  assert(nm != nullptr, \"this is not a compiled method\");\n@@ -678,1 +677,1 @@\n-        tty->print(\"%s [\" INTPTR_FORMAT \"+\" JLONG_FORMAT \"]\", cb->as_nmethod_or_null()->method()->name_and_sig_as_C_string(buf, O_BUFLEN), p2i(cb->code_begin()), (jlong)((address)v - cb->code_begin()));\n+        tty->print(\"%s [\" INTPTR_FORMAT \"+\" JLONG_FORMAT \"]\", cb->as_nmethod()->method()->name_and_sig_as_C_string(buf, O_BUFLEN), p2i(cb->code_begin()), (jlong)((address)v - cb->code_begin()));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -772,1 +772,0 @@\n-                assert(nm != nullptr, \"sanity check\");\n@@ -1101,1 +1100,1 @@\n-    if (code != nullptr && code->as_nmethod_or_null() != nullptr) {\n+    if (code != nullptr) {\n@@ -1611,1 +1610,1 @@\n-      ::new (blob) BufferBlob(\"WB::DummyBlob\", Blob_Buffer, full_size);\n+      ::new (blob) BufferBlob(\"WB::DummyBlob\", CodeBlobKind::Blob_Buffer, full_size);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-class nmethod;\n@@ -37,0 +36,1 @@\n+class nmethod;\n@@ -59,1 +59,1 @@\n-  static void set_enter_code(nmethod* cm, int interpreted_entry_offset);\n+  static void set_enter_code(nmethod* nm, int interpreted_entry_offset);\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2061,1 +2061,1 @@\n-      nm->as_nmethod()->update_speculation(current);\n+      nm->update_speculation(current);\n@@ -2181,2 +2181,2 @@\n-        if (nm->is_nmethod()) {\n-          const char* installed_code_name = nm->as_nmethod()->jvmci_name();\n+        if (nm->is_compiled_by_jvmci()) {\n+          const char* installed_code_name = nm->jvmci_name();\n@@ -2436,1 +2436,1 @@\n-          UseRTMDeopt && (nm->as_nmethod()->rtm_state() != ProfileRTM)) {\n+          UseRTMDeopt && (nm->rtm_state() != ProfileRTM)) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -209,0 +209,1 @@\n+    assert(nm != nullptr, \"only nmethod is expected here\");\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-      nmethod* nm = cb->as_nmethod();;\n+      nmethod* nm = cb->as_nmethod();\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}