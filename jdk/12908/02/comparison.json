{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,2 @@\n-static const int native_invoker_code_size = 1024;\n+static const int native_invoker_code_base_size = 256;\n+static const int native_invoker_size_per_arg = 8;\n@@ -103,2 +104,3 @@\n-  int locs_size = 64;\n-  CodeBuffer code(\"nep_invoker_blob\", native_invoker_code_size, locs_size);\n+  int code_size = native_invoker_code_base_size + (num_args * native_invoker_size_per_arg);\n+  int locs_size = 1; \/\/ must be non-zero\n+  CodeBuffer code(\"nep_invoker_blob\", code_size, locs_size);\n","filename":"src\/hotspot\/cpu\/aarch64\/downcallLinker_aarch64.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,0 +117,3 @@\n+static const int upcall_stub_code_base_size = 1024;\n+static const int upcall_stub_size_per_arg = 16;\n+\n@@ -126,1 +129,2 @@\n-  CodeBuffer buffer(\"upcall_stub\", \/* code_size = *\/ 2048, \/* locs_size = *\/ 1024);\n+  int code_size = upcall_stub_code_base_size + (total_in_args * upcall_stub_size_per_arg);\n+  CodeBuffer buffer(\"upcall_stub\", code_size, \/* locs_size = *\/ 1);\n@@ -328,0 +332,2 @@\n+  buffer.log_section_sizes(name);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/upcallLinker_aarch64.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,2 @@\n-static const int native_invoker_code_size = 1024;\n+static const int native_invoker_code_base_size = 256;\n+static const int native_invoker_size_per_arg = 8;\n@@ -104,2 +105,3 @@\n-  int locs_size = 64;\n-  CodeBuffer code(\"nep_invoker_blob\", native_invoker_code_size, locs_size);\n+  int code_size = native_invoker_code_base_size + (num_args * native_invoker_size_per_arg);\n+  int locs_size = 1; \/\/ must be non-zero\n+  CodeBuffer code(\"nep_invoker_blob\", code_size, locs_size);\n","filename":"src\/hotspot\/cpu\/riscv\/downcallLinker_riscv.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,0 +117,3 @@\n+static const int upcall_stub_code_base_size = 2048;\n+static const int upcall_stub_size_per_arg = 16;\n+\n@@ -127,1 +130,2 @@\n-  CodeBuffer buffer(\"upcall_stub\", \/* code_size = *\/ 2048, \/* locs_size = *\/ 1024);\n+  int code_size = upcall_stub_code_base_size + (total_in_args * upcall_stub_size_per_arg);\n+  CodeBuffer buffer(\"upcall_stub\", code_size, \/* locs_size = *\/ 1);\n@@ -346,0 +350,2 @@\n+  buffer.log_section_sizes(name);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/upcallLinker_riscv.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,2 @@\n-static const int native_invoker_code_size = 1024;\n+static const int native_invoker_code_base_size = 512;\n+static const int native_invoker_size_per_arg = 8;\n@@ -102,2 +103,3 @@\n-  int locs_size = 64;\n-  CodeBuffer code(\"nep_invoker_blob\", native_invoker_code_size, locs_size);\n+  int code_size = native_invoker_code_base_size + (num_args * native_invoker_size_per_arg);\n+  int locs_size = 1; \/\/ can not be zero\n+  CodeBuffer code(\"nep_invoker_blob\", code_size, locs_size);\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,0 +168,3 @@\n+static const int upcall_stub_code_base_size = 2048;\n+static const int upcall_stub_size_per_arg = 16;\n+\n@@ -176,1 +179,2 @@\n-  CodeBuffer buffer(\"upcall_stub\", \/* code_size = *\/ 2048, \/* locs_size = *\/ 1024);\n+  int code_size = upcall_stub_code_base_size + (total_in_args * upcall_stub_size_per_arg);\n+  CodeBuffer buffer(\"upcall_stub\", code_size, \/* locs_size = *\/ 1);\n@@ -389,0 +393,2 @@\n+  buffer.log_section_sizes(name);\n+\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_64.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1001,1 +1001,1 @@\n-    xtty->print_cr(\"<blob name='%s' size='%d'>\", name, _total_size);\n+    xtty->print_cr(\"<blob name='%s' total_size='%d'>\", name, _total_size);\n@@ -1005,2 +1005,2 @@\n-      xtty->print_cr(\"<sect index='%d' size='\" SIZE_FORMAT \"' free='\" SIZE_FORMAT \"'\/>\",\n-                     n, sect->limit() - sect->start(), sect->limit() - sect->end());\n+      xtty->print_cr(\"<sect index='%d' capacity='%d' size='%d' remaining='%d'\/>\",\n+                     n, sect->capacity(), sect->size(), sect->remaining());\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @library ..\/\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\" | os.arch == \"riscv64\"\n+ * @modules java.base\/jdk.internal.foreign\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestLargeStub\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.util.stream.Stream;\n+\n+public class TestLargeStub extends NativeTestHelper {\n+    @Test\n+    public void testDowncall() {\n+        \/\/ Link a handle with a large number of arguments, to try and overflow the code buffer\n+        Linker.nativeLinker().downcallHandle(\n+                FunctionDescriptor.of(C_LONG_LONG,\n+                        Stream.generate(() -> C_DOUBLE).limit(50).toArray(MemoryLayout[]::new)),\n+                Linker.Option.captureCallState(\"errno\"));\n+    }\n+\n+    @Test\n+    public void testUpcall() {\n+        \/\/ Link a handle with a large number of arguments, to try and overflow the code buffer\n+        Linker.nativeLinker().downcallHandle(\n+                FunctionDescriptor.of(C_LONG_LONG,\n+                        Stream.generate(() -> C_DOUBLE).limit(50).toArray(MemoryLayout[]::new)));\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/largestub\/TestLargeStub.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}