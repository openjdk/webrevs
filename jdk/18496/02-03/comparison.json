{"files":[{"patch":"@@ -1029,1 +1029,1 @@\n-    if (is_trivial(method)) {\n+    if (is_trivial(method) || method->is_native()) {\n@@ -1093,4 +1093,0 @@\n-          } else if (method->is_native() && CompilationModeFlag::disable_intermediate()) {\n-            if (Predicate::apply(method, cur_level, method->invocation_count(), 0)) {\n-              next_level = CompLevel_full_optimization;\n-            }\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8329126\n+ * @summary check that native methods get compiled\n+ *\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ *\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *    -Xbatch -XX:-UseOnStackReplacement -XX:+TieredCompilation compiler.calls.NativeCalls\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *    -Xbatch -XX:-UseOnStackReplacement -XX:-TieredCompilation compiler.calls.NativeCalls\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *    -Xbatch -XX:-UseOnStackReplacement -XX:+TieredCompilation -XX:TieredStopAtLevel=1 compiler.calls.NativeCalls\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *    -Xbatch -XX:-UseOnStackReplacement -XX:+TieredCompilation -XX:TieredStopAtLevel=2 compiler.calls.NativeCalls\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *    -Xbatch -XX:-UseOnStackReplacement -XX:+TieredCompilation -XX:TieredStopAtLevel=3 compiler.calls.NativeCalls\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *    -Xbatch -XX:-UseOnStackReplacement -XX:+TieredCompilation -XX:TieredStopAtLevel=4 compiler.calls.NativeCalls\n+ *\/\n+\n+package compiler.calls;\n+\n+import java.lang.reflect.Method;\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class NativeCalls {\n+    static Method emptyStaticNativeMethod;\n+    static Method callNativeMethod;\n+    static WhiteBox wb;\n+    static {\n+        init();\n+    }\n+    static void init() {\n+        System.loadLibrary(\"NativeCalls\");\n+        wb = WhiteBox.getWhiteBox();\n+        try {\n+            emptyStaticNativeMethod = NativeCalls.class.getDeclaredMethod(\"emptyStaticNative\");\n+            callNativeMethod = NativeCalls.class.getDeclaredMethod(\"callNative\");\n+        } catch (NoSuchMethodException nsme) {\n+            throw new Error(\"TEST BUG: can't find test method\", nsme);\n+        }\n+    }\n+\n+    native static void emptyStaticNative();\n+\n+    static void callNative() {\n+        emptyStaticNative();\n+    }\n+\n+    static public void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            callNative();\n+        }\n+        if (wb.getMethodCompilationLevel(callNativeMethod) > 0) {\n+            if (!wb.isMethodCompiled(emptyStaticNativeMethod)) {\n+                throw new Error(\"TEST BUG: '\" + emptyStaticNativeMethod + \"' should be compiled\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/calls\/NativeCalls.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+\n+JNIEXPORT\n+void JNICALL Java_compiler_calls_NativeCalls_emptyStaticNative(JNIEnv* env, jclass jclazz) {}\n","filename":"test\/hotspot\/jtreg\/compiler\/calls\/libNativeCalls.c","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"}]}