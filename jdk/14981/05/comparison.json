{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -239,0 +240,2 @@\n+    private native int readBytes0(byte[] b, int off, int len) throws IOException;\n+\n@@ -246,1 +249,36 @@\n-    private native int readBytes(byte[] b, int off, int len) throws IOException;\n+    private int readBytes(byte[] b, int off, int len) throws IOException {\n+        Objects.checkFromIndexSize(off, len, b.length);\n+        int nread = 0;\n+        int pos = off;\n+        int remaining = len;\n+        long comp = Blocker.begin();\n+        try {\n+            do {\n+                int size = Math.min(remaining, 1572864);\n+                try {\n+                    int n = readBytes0(b, pos, size);\n+                    if (n < 0) {\n+                        \/\/ EOF\n+                        if (nread == 0)\n+                            nread = -1;\n+                        break;\n+                    }\n+                    nread += n;\n+                    if (n < size) {\n+                        \/\/ buffer not filled\n+                        break;\n+                    }\n+                    pos += n;\n+                    remaining -= n;\n+                } catch (IOException ioe) {\n+                    if (nread > 0) {\n+                        break;\n+                    }\n+                    throw ioe;\n+                }\n+            } while (remaining > 0);\n+        } finally {\n+            Blocker.end(comp);\n+        }\n+        return nread;\n+    }\n@@ -261,6 +299,1 @@\n-        long comp = Blocker.begin();\n-        try {\n-            return readBytes(b, 0, b.length);\n-        } finally {\n-            Blocker.end(comp);\n-        }\n+        return readBytes(b, 0, b.length);\n@@ -285,6 +318,1 @@\n-        long comp = Blocker.begin();\n-        try {\n-            return readBytes(b, off, len);\n-        } finally {\n-            Blocker.end(comp);\n-        }\n+        return readBytes(b, off, len);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":41,"deletions":13,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Objects;\n@@ -302,1 +303,1 @@\n-    private native void write(int b, boolean append) throws IOException;\n+    private native void write0(int b, boolean append) throws IOException;\n@@ -316,1 +317,1 @@\n-            write(b, append);\n+            write0(b, append);\n@@ -322,0 +323,3 @@\n+    private native int writeBytes0(byte[] b, int off, int len, boolean append)\n+        throws IOException;\n+\n@@ -327,2 +331,0 @@\n-     * @param append {@code true} to first advance the position to the\n-     *     end of file\n@@ -331,2 +333,19 @@\n-    private native void writeBytes(byte[] b, int off, int len, boolean append)\n-        throws IOException;\n+    private void writeBytes(byte[] b, int off, int len)\n+        throws IOException\n+    {\n+        Objects.checkFromIndexSize(off, len, b.length);\n+        boolean append = FD_ACCESS.getAppend(fd);\n+        int pos = off;\n+        int remaining = len;\n+        long comp = Blocker.begin();\n+        try {\n+            while (remaining > 0) {\n+                int size = Math.min(remaining, 1572864);\n+                int n = writeBytes0(b, pos, size, append);\n+                pos += n;\n+                remaining -= n;\n+            }\n+        } finally {\n+            Blocker.end(comp);\n+        }\n+    }\n@@ -343,7 +362,1 @@\n-        boolean append = FD_ACCESS.getAppend(fd);\n-        long comp = Blocker.begin();\n-        try {\n-            writeBytes(b, 0, b.length, append);\n-        } finally {\n-            Blocker.end(comp);\n-        }\n+        writeBytes(b, 0, b.length);\n@@ -364,7 +377,1 @@\n-        boolean append = FD_ACCESS.getAppend(fd);\n-        long comp = Blocker.begin();\n-        try {\n-            writeBytes(b, off, len, append);\n-        } finally {\n-            Blocker.end(comp);\n-        }\n+        writeBytes(b, off, len);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":27,"deletions":20,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Objects;\n@@ -396,0 +397,4 @@\n+        Objects.checkFromIndexSize(off, len, b.length);\n+        int nread = 0;\n+        int pos = off;\n+        int remaining = len;\n@@ -398,1 +403,24 @@\n-            return readBytes0(b, off, len);\n+            do {\n+                int size = Math.min(remaining, 1572864);\n+                try {\n+                    int n = readBytes0(b, pos, size);\n+                    if (n < 0) {\n+                        \/\/ EOF\n+                        if (nread == 0)\n+                            nread = -1;\n+                        break;\n+                    }\n+                    nread += n;\n+                    if (n < size) {\n+                        \/\/ buffer not filled\n+                        break;\n+                    }\n+                    pos += n;\n+                    remaining -= n;\n+                } catch (IOException ioe) {\n+                    if (nread > 0) {\n+                        break;\n+                    }\n+                    throw ioe;\n+                }\n+            } while (remaining > 0);\n@@ -402,0 +430,1 @@\n+        return nread;\n@@ -568,0 +597,3 @@\n+        Objects.checkFromIndexSize(off, len, b.length);\n+        int pos = off;\n+        int remaining = len;\n@@ -570,1 +602,6 @@\n-            writeBytes0(b, off, len);\n+            while (remaining > 0) {\n+                int size = Math.min(remaining, 1572864);\n+                int n = writeBytes0(b, pos, size);\n+                pos += n;\n+                remaining -= n;\n+            }\n@@ -576,1 +613,1 @@\n-    private native void writeBytes0(byte[] b, int off, int len) throws IOException;\n+    private native int writeBytes0(byte[] b, int off, int len) throws IOException;\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-Java_java_io_FileInputStream_readBytes(JNIEnv *env, jobject this,\n+Java_java_io_FileInputStream_readBytes0(JNIEnv *env, jobject this,\n","filename":"src\/java.base\/share\/native\/libjava\/FileInputStream.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-Java_java_io_FileOutputStream_write(JNIEnv *env, jobject this, jint byte, jboolean append) {\n+Java_java_io_FileOutputStream_write0(JNIEnv *env, jobject this, jint byte, jboolean append) {\n@@ -67,2 +67,2 @@\n-JNIEXPORT void JNICALL\n-Java_java_io_FileOutputStream_writeBytes(JNIEnv *env,\n+JNIEXPORT int JNICALL\n+Java_java_io_FileOutputStream_writeBytes0(JNIEnv *env,\n@@ -70,1 +70,1 @@\n-    writeBytes(env, this, bytes, off, len, append, fos_fd);\n+    return writeBytes(env, this, bytes, off, len, append, fos_fd);\n","filename":"src\/java.base\/share\/native\/libjava\/FileOutputStream.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-JNIEXPORT void JNICALL\n+JNIEXPORT int JNICALL\n@@ -89,1 +89,1 @@\n-    writeBytes(env, this, bytes, off, len, JNI_FALSE, raf_fd);\n+    return writeBytes(env, this, bytes, off, len, JNI_FALSE, raf_fd);\n","filename":"src\/java.base\/share\/native\/libjava\/RandomAccessFile.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,13 +60,1 @@\n-\/*\n- * Returns true if the array slice defined by the given offset and length\n- * is out of bounds.\n- *\/\n-static int\n-outOfBounds(JNIEnv *env, jint off, jint len, jbyteArray array) {\n-    return ((off < 0) ||\n-            (len < 0) ||\n-            \/\/ We are very careful to avoid signed integer overflow,\n-            \/\/ the result of which is undefined in C.\n-            ((*env)->GetArrayLength(env, array) - off < len));\n-}\n-\n+\/\/ NULL and bounds checking should be performed by the caller.\n@@ -82,10 +70,0 @@\n-    if (IS_NULL(bytes)) {\n-        JNU_ThrowNullPointerException(env, NULL);\n-        return -1;\n-    }\n-\n-    if (outOfBounds(env, off, len, bytes)) {\n-        JNU_ThrowByName(env, \"java\/lang\/IndexOutOfBoundsException\", NULL);\n-        return -1;\n-    }\n-\n@@ -95,1 +73,1 @@\n-        buf = malloc(len);\n+        buf = (char*)malloc(len * sizeof(char));\n@@ -122,0 +100,1 @@\n+\n@@ -145,1 +124,2 @@\n-void\n+\/\/ NULL and bounds checking should be performed by the caller.\n+int\n@@ -149,1 +129,1 @@\n-    jint n;\n+    jint nwritten = -1;\n@@ -154,10 +134,0 @@\n-    if (IS_NULL(bytes)) {\n-        JNU_ThrowNullPointerException(env, NULL);\n-        return;\n-    }\n-\n-    if (outOfBounds(env, off, len, bytes)) {\n-        JNU_ThrowByName(env, \"java\/lang\/IndexOutOfBoundsException\", NULL);\n-        return;\n-    }\n-\n@@ -165,1 +135,1 @@\n-        return;\n+        return 0;\n@@ -167,1 +137,1 @@\n-        buf = malloc(len);\n+        buf = (char*)malloc(len * sizeof(char));\n@@ -170,1 +140,1 @@\n-            return;\n+            return 0;\n@@ -179,18 +149,12 @@\n-        off = 0;\n-        while (len > 0) {\n-            fd = getFD(env, this, fid);\n-            if (fd == -1) {\n-                JNU_ThrowIOException(env, \"Stream Closed\");\n-                break;\n-            }\n-            if (append == JNI_TRUE) {\n-                n = IO_Append(fd, buf+off, len);\n-            } else {\n-                n = IO_Write(fd, buf+off, len);\n-            }\n-            if (n == -1) {\n-                JNU_ThrowIOExceptionWithLastError(env, \"Write error\");\n-                break;\n-            }\n-            off += n;\n-            len -= n;\n+        fd = getFD(env, this, fid);\n+        if (fd == -1) {\n+            JNU_ThrowIOException(env, \"Stream Closed\");\n+        } else {\n+             if (append == JNI_TRUE) {\n+                 nwritten = IO_Append(fd, buf, len);\n+             } else {\n+                 nwritten = IO_Write(fd, buf, len);\n+             }\n+             if (nwritten == -1) {\n+                 JNU_ThrowIOExceptionWithLastError(env, \"Write error\");\n+             }\n@@ -199,0 +163,1 @@\n+\n@@ -202,0 +167,2 @@\n+\n+    return nwritten;\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":24,"deletions":57,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-void writeBytes(JNIEnv *env, jobject this, jbyteArray bytes, jint off,\n+int writeBytes(JNIEnv *env, jobject this, jbyteArray bytes, jint off,\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}