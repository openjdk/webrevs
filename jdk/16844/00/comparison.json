{"files":[{"patch":"@@ -266,73 +266,0 @@\n-  \/\/ Try to improve the type of the CastII if we recognize a CmpI\/If pattern.\n-  \/\/\n-  \/\/ in1  in2\n-  \/\/  |    |\n-  \/\/  +--- | --+\n-  \/\/  |    |   |\n-  \/\/ CmpINode  |\n-  \/\/    |      |\n-  \/\/ BoolNode  |\n-  \/\/    |      |\n-  \/\/  IfNode   |\n-  \/\/    |      |\n-  \/\/  IfProj   |\n-  \/\/    |      |\n-  \/\/   CastIINode\n-  \/\/\n-  if (carry_dependency()) {\n-    if (in(0) != nullptr && in(0)->in(0) != nullptr && in(0)->in(0)->is_If()) {\n-      assert(in(0)->is_IfFalse() || in(0)->is_IfTrue(), \"should be If proj\");\n-      Node* proj = in(0);\n-      if (proj->in(0)->in(1)->is_Bool()) {\n-        Node* b = proj->in(0)->in(1);\n-        if (b->in(1)->Opcode() == Op_CmpI) {\n-          Node* cmp = b->in(1);\n-          if (cmp->in(1) == in(1) && phase->type(cmp->in(2))->isa_int()) {\n-            const TypeInt* in2_t = phase->type(cmp->in(2))->is_int();\n-            const Type* t = TypeInt::INT;\n-            BoolTest test = b->as_Bool()->_test;\n-            if (proj->is_IfFalse()) {\n-              test = test.negate();\n-            }\n-            BoolTest::mask m = test._test;\n-            jlong lo_long = min_jint;\n-            jlong hi_long = max_jint;\n-            if (m == BoolTest::le || m == BoolTest::lt) {\n-              hi_long = in2_t->_hi;\n-              if (m == BoolTest::lt) {\n-                hi_long -= 1;\n-              }\n-            } else if (m == BoolTest::ge || m == BoolTest::gt) {\n-              lo_long = in2_t->_lo;\n-              if (m == BoolTest::gt) {\n-                lo_long += 1;\n-              }\n-            } else if (m == BoolTest::eq) {\n-              lo_long = in2_t->_lo;\n-              hi_long = in2_t->_hi;\n-            } else if (m == BoolTest::ne) {\n-              \/\/ can't do any better\n-            } else {\n-              stringStream ss;\n-              test.dump_on(&ss);\n-              fatal(\"unexpected comparison %s\", ss.freeze());\n-            }\n-            int lo_int = (int)lo_long;\n-            int hi_int = (int)hi_long;\n-\n-            if (lo_long != (jlong)lo_int) {\n-              lo_int = min_jint;\n-            }\n-            if (hi_long != (jlong)hi_int) {\n-              hi_int = max_jint;\n-            }\n-\n-            t = TypeInt::make(lo_int, hi_int, Type::WidenMax);\n-\n-            res = res->filter_speculative(t);\n-            return res;\n-          }\n-        }\n-      }\n-    }\n-  }\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":0,"deletions":73,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8319372\n+ * @summary CastII because of condition guarding it becomes top\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestTopCastIIOnUndetectedDeadPath::test -XX:CompileCommand=quiet -XX:-TieredCompilation\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:StressSeed=426264791 -XX:+StressIGVN TestTopCastIIOnUndetectedDeadPath\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestTopCastIIOnUndetectedDeadPath::test -XX:CompileCommand=quiet -XX:-TieredCompilation\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN TestTopCastIIOnUndetectedDeadPath\n+ *\/\n+\n+public class TestTopCastIIOnUndetectedDeadPath {\n+    static class X {\n+        static void m(int[] a) {\n+\n+        }\n+    }\n+\n+    static int array[] = new int[10];\n+\n+    static void test(int val) {\n+        for (int i = 1; i < 10; ++i) {\n+            for (int j = i; j < 10; ++j) {\n+                if (i == 0 && j != 0) {\n+                    X.m(array);\n+                }\n+                array[j - 1] = val;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] arg) {\n+        test(42);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestTopCastIIOnUndetectedDeadPath.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8319372\n+ * @summary CastII because of condition guarding it becomes top\n+ * @run main\/othervm -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,TestTopCastIIOnUndetectedDeadPath2::test -XX:-TieredCompilation\n+ *                   -Xbatch -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -XX:StressSeed=256120824 TestTopCastIIOnUndetectedDeadPath2\n+ * @run main\/othervm -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,TestTopCastIIOnUndetectedDeadPath2::test -XX:-TieredCompilation\n+ *                   -Xbatch -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN TestTopCastIIOnUndetectedDeadPath2\n+ *\/\n+\n+public class TestTopCastIIOnUndetectedDeadPath2 {\n+    static int array[] = new int[100];\n+\n+    static int test() {\n+        int res = 0;\n+        for (int i = 1; i < 100; ++i) {\n+            try {\n+                res = array[i - 1];\n+                int x = (42 % i);\n+            } catch (ArithmeticException e) {\n+            }\n+        }\n+        return res;\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10_000; i++) {\n+            test();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestTopCastIIOnUndetectedDeadPath2.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}