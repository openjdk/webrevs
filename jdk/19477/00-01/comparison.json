{"files":[{"patch":"@@ -197,8 +197,10 @@\n-            private static final Predicate<Optional<Object>> IS_PRESENT = Optional::isPresent;\n-            private static final Supplier<TerminalSink<Object, Optional<Object>>> NEW\n-                    = FindOps.FindSink.OfRef::new;\n-            static final FindOp<?, ?> OP_FIND_FIRST = new FindOp<>(true,\n-                    StreamShape.REFERENCE, Optional.empty(), IS_PRESENT, NEW);\n-\n-            static final FindOp<?, ?> OP_FIND_ANY = new FindOp<>(false,\n-                    StreamShape.REFERENCE, Optional.empty(), IS_PRESENT, NEW);\n+            static final TerminalOp<?, ?> OP_FIND_FIRST, OP_FIND_ANY;\n+            static {\n+                Predicate<Optional<Object>> isPresent = Optional::isPresent;\n+                Supplier<TerminalSink<Object, Optional<Object>>> newSink\n+                        = FindSink.OfRef::new;\n+                OP_FIND_FIRST = new FindOp<>(true, StreamShape.REFERENCE,\n+                        Optional.empty(), isPresent, newSink);\n+                OP_FIND_ANY = new FindOp<>(false, StreamShape.REFERENCE,\n+                        Optional.empty(), isPresent, newSink);\n+            }\n@@ -221,7 +223,10 @@\n-            private static final Predicate<OptionalInt> IS_PRESENT = OptionalInt::isPresent;\n-            private static final Supplier<TerminalSink<Integer, OptionalInt>> NEW\n-                    = FindOps.FindSink.OfInt::new;\n-            static final TerminalOp<Integer, OptionalInt> OP_FIND_FIRST = new FindOp<>(true,\n-                    StreamShape.INT_VALUE, OptionalInt.empty(), IS_PRESENT, NEW);\n-            static final TerminalOp<Integer, OptionalInt> OP_FIND_ANY = new FindOp<>(false,\n-                    StreamShape.INT_VALUE, OptionalInt.empty(), IS_PRESENT, NEW);\n+            static final TerminalOp<Integer, OptionalInt> OP_FIND_FIRST, OP_FIND_ANY;\n+            static {\n+                Predicate<OptionalInt> isPresent = OptionalInt::isPresent;\n+                Supplier<TerminalSink<Integer, OptionalInt> newSink\n+                        = FindSink.OfInt::new;\n+                OP_FIND_FIRST = new FindOp<>(true, StreamShape.INT_VALUE,\n+                        OptionalInt.empty(), isPresent, newSink);\n+                OP_FIND_ANY = new FindOp<>(false, StreamShape.INT_VALUE,\n+                        OptionalInt.empty(), isPresent, newSink);\n+            }\n@@ -244,7 +249,10 @@\n-            private static final Predicate<OptionalLong> IS_PRESENT = OptionalLong::isPresent;\n-            private static final Supplier<TerminalSink<Long, OptionalLong>> NEW\n-                    = FindOps.FindSink.OfLong::new;\n-            static final TerminalOp<Long, OptionalLong> OP_FIND_FIRST = new FindOp<>(true,\n-                    StreamShape.LONG_VALUE, OptionalLong.empty(), IS_PRESENT, NEW);\n-            static final TerminalOp<Long, OptionalLong> OP_FIND_ANY = new FindOp<>(false,\n-                    StreamShape.LONG_VALUE, OptionalLong.empty(), IS_PRESENT, NEW);\n+            static final TerminalOp<Long, OptionalLong> OP_FIND_FIRST, OP_FIND_ANY;\n+            static {\n+                Predicate<OptionalLong> isPresent = OptionalLong::isPresent;\n+                Supplier<TerminalSink<Long, OptionalLong> newSink\n+                        = FindSink.OfLong::new;\n+                OP_FIND_FIRST = new FindOp<>(true, StreamShape.LONG_VALUE,\n+                        OptionalLong.empty(), isPresent, newSink);\n+                OP_FIND_ANY = new FindOp<>(false, StreamShape.LONG_VALUE,\n+                        OptionalLong.empty(), isPresent, newSink);\n+            }\n@@ -267,7 +275,10 @@\n-            private static final Predicate<OptionalDouble> IS_PRESENT = OptionalDouble::isPresent;\n-            private static final Supplier<TerminalSink<Double, OptionalDouble>> NEW\n-                    = FindOps.FindSink.OfDouble::new;\n-            static final TerminalOp<Double, OptionalDouble> OP_FIND_FIRST = new FindOp<>(true,\n-                    StreamShape.DOUBLE_VALUE, OptionalDouble.empty(), IS_PRESENT, NEW);\n-            static final TerminalOp<Double, OptionalDouble> OP_FIND_ANY = new FindOp<>(false,\n-                    StreamShape.DOUBLE_VALUE, OptionalDouble.empty(), IS_PRESENT, NEW);\n+            static final TerminalOp<Double, OptionalDouble> OP_FIND_FIRST, OP_FIND_ANY;\n+            static {\n+                Predicate<OptionalDouble> isPresent = OptionalDouble::isPresent;\n+                Supplier<TerminalSink<Double, OptionalDouble>> newSink\n+                        = FindSink.OfDouble::new;\n+                OP_FIND_FIRST = new FindOp<>(true, StreamShape.DOUBLE_VALUE,\n+                        OptionalDouble.empty(), isPresent, newSink);\n+                OP_FIND_ANY = new FindOp<>(false, StreamShape.DOUBLE_VALUE,\n+                        OptionalDouble.empty(), isPresent, newSink);\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/FindOps.java","additions":40,"deletions":29,"binary":false,"changes":69,"status":"modified"}]}