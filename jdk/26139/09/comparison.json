{"files":[{"patch":"@@ -231,1 +231,1 @@\n-  void test_method_data_pointer(Label& zero_continue);\n+  void test_method_data_pointer(Label& zero_continue, bool may_be_far = false);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1252,1 +1252,1 @@\n-void InterpreterMacroAssembler::test_method_data_pointer(Label& zero_continue) {\n+void InterpreterMacroAssembler::test_method_data_pointer(Label& zero_continue, bool may_be_far) {\n@@ -1255,1 +1255,5 @@\n-  beq(CR0, zero_continue);\n+  if (may_be_far) {\n+    bc_far_optimized(Assembler::bcondCRbiIs1, bi0(CR0, Assembler::equal), zero_continue);\n+  } else {\n+    beq(CR0, zero_continue);\n+  }\n@@ -1558,1 +1562,1 @@\n-    test_method_data_pointer(profile_continue);\n+    test_method_data_pointer(profile_continue, true);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -891,1 +891,1 @@\n-  beqz(mdp, zero_continue);\n+  beqz(mdp, zero_continue, \/* is_far *\/ true);\n@@ -967,1 +967,1 @@\n-  assert_different_registers(t1, t0, mdp_in, index);\n+  assert_different_registers(t0, t1, mdp_in, index);\n@@ -969,3 +969,2 @@\n-  Address addr1(mdp_in, constant);\n-  Address addr2(t1, 0);\n-  Address &addr = addr1;\n+  Address addr(t1);\n+  la(t1, Address(mdp_in, constant));\n@@ -973,1 +972,0 @@\n-    la(t1, addr1);\n@@ -975,1 +973,0 @@\n-    addr = addr2;\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1988,1 +1988,1 @@\n-                                            (int)_bci_profile_width, (int)BciProfileWidth);\n+                                            _bci_profile_width, BciProfileWidth);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-  intx    _bci_profile_width;\n+  int     _bci_profile_width;\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-  do_intx_flag(BciProfileWidth)                                            \\\n+  do_int_flag(BciProfileWidth)                                            \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1354,1 +1354,1 @@\n-  develop(intx, BciProfileWidth,      2,                                    \\\n+  develop(int, BciProfileWidth, 2,                                          \\\n@@ -1356,0 +1356,1 @@\n+          range(0, 1000)                                                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-        BciProfileWidth = (int)flag.getIntx();\n+        BciProfileWidth = (int)flag.getInt();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/MethodData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test the range defined in globals.hpp for BciProfileWidth\n+ * @bug 8358696\n+ * @requires vm.debug\n+ * @library \/test\/lib\n+ * @run main\/othervm compiler.arguments.TestBciProfileWidth\n+ *\/\n+\n+package compiler.arguments;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Asserts;\n+\n+public class TestBciProfileWidth {\n+\n+    public static void main(String args[]) throws Throwable {\n+        checkBciProfileWidth(-1, true);\n+        checkBciProfileWidth(10000, true);\n+        checkBciProfileWidth(0, false);\n+        checkBciProfileWidth(1000, false);\n+    }\n+\n+    static void checkBciProfileWidth(int value, boolean fail) throws Throwable {\n+        OutputAnalyzer out = ProcessTools.executeTestJava(\"-XX:BciProfileWidth=\" + value);\n+        String output = out.getOutput();\n+        if (fail) {\n+            String pattern = \"int BciProfileWidth=\" + value + \" is outside the allowed range [ 0 ... 1000 ]\";\n+            Asserts.assertTrue(output.contains(pattern));\n+        } else {\n+            System.out.println(\"Passed\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestBciProfileWidth.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-    private static final String FLAG_DEBUG_NAME = \"BciProfileWidth\";\n+    private static final String FLAG_DEBUG_NAME = \"BinarySwitchThreshold\";\n@@ -43,1 +43,1 @@\n-    public static void main(String[] args) throws Exception {\n+     public static void main(String[] args) throws Exception {\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/IntxTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}