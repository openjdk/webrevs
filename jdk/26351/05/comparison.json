{"files":[{"patch":"@@ -76,0 +76,2 @@\n+    _gc_cpu_time_at_pause_end_ms(),\n+    _concurrent_gc_cpu_time_ms(),\n@@ -91,2 +93,2 @@\n-    _long_term_pause_time_ratio(0.0),\n-    _short_term_pause_time_ratio(0.0) {\n+    _long_term_gc_time_ratio(0.0),\n+    _short_term_gc_time_ratio(0.0) {\n@@ -160,1 +162,9 @@\n-void G1Analytics::compute_pause_time_ratios(double end_time_sec, double pause_time_ms) {\n+void G1Analytics::update_gc_time_ratios(double end_time_sec, double pause_time_ms) {\n+  \/\/ This estimates the wall-clock time \"lost\" by application mutator threads due to concurrent GC\n+  \/\/ activity. We do not account for contention on other shared resources such as memory bandwidth and\n+  \/\/ caches, therefore underestimate the impact of the concurrent GC activity on mutator threads.\n+  uint num_cpus = (uint)os::active_processor_count();\n+  double concurrent_gc_impact_time = _concurrent_gc_cpu_time_ms \/ num_cpus;\n+\n+  double gc_time_ms = pause_time_ms + concurrent_gc_impact_time;\n+\n@@ -162,3 +172,4 @@\n-  double gc_pause_time_ms = _recent_gc_times_ms.sum() - _recent_gc_times_ms.oldest() + pause_time_ms;\n-  _long_term_pause_time_ratio = gc_pause_time_ms \/ long_interval_ms;\n-  _long_term_pause_time_ratio = clamp(_long_term_pause_time_ratio, 0.0, 1.0);\n+  double long_term_gc_time_ms = _recent_gc_times_ms.sum() - _recent_gc_times_ms.oldest() + gc_time_ms;\n+\n+  _long_term_gc_time_ratio = long_term_gc_time_ms \/ long_interval_ms;\n+  _long_term_gc_time_ratio = clamp(_long_term_gc_time_ratio, 0.0, 1.0);\n@@ -167,2 +178,5 @@\n-  _short_term_pause_time_ratio = pause_time_ms \/ short_interval_ms;\n-  _short_term_pause_time_ratio = clamp(_short_term_pause_time_ratio, 0.0, 1.0);\n+\n+  _short_term_gc_time_ratio = gc_time_ms \/ short_interval_ms;\n+  _short_term_gc_time_ratio = clamp(_short_term_gc_time_ratio, 0.0, 1.0);\n+\n+  update_recent_gc_times(end_time_sec, gc_time_ms);\n@@ -308,2 +322,2 @@\n-                                         double pause_time_ms) {\n-  _recent_gc_times_ms.add(pause_time_ms);\n+                                         double gc_time_ms) {\n+  _recent_gc_times_ms.add(gc_time_ms);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.cpp","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -47,1 +47,9 @@\n-  double        _prev_collection_pause_end_ms;\n+  double       _prev_collection_pause_end_ms;\n+\n+  \/\/ Records the total GC CPU time (in ms) at the end of the last GC pause.\n+  \/\/ Used as a baseline to calculate CPU time spent in GC threads between pauses.\n+  double _gc_cpu_time_at_pause_end_ms;\n+\n+  \/\/ CPU time (ms) spent by GC threads between the end of the last pause\n+  \/\/ and the start of the current pause; calculated at start of a GC pause.\n+  double _concurrent_gc_cpu_time_ms;\n@@ -78,4 +86,4 @@\n-  \/\/ Cached values for long and short term pause time ratios. See\n-  \/\/ compute_pause_time_ratios() for how they are computed.\n-  double _long_term_pause_time_ratio;\n-  double _short_term_pause_time_ratio;\n+  \/\/ Cached values for long and short term gc time ratios. See\n+  \/\/ update_gc_time_ratios() for how they are computed.\n+  double _long_term_gc_time_ratio;\n+  double _short_term_gc_time_ratio;\n@@ -105,2 +113,2 @@\n-  double long_term_pause_time_ratio() const {\n-    return _long_term_pause_time_ratio;\n+  double long_term_gc_time_ratio() const {\n+    return _long_term_gc_time_ratio;\n@@ -109,2 +117,2 @@\n-  double short_term_pause_time_ratio() const {\n-    return _short_term_pause_time_ratio;\n+  double short_term_gc_time_ratio() const {\n+    return _short_term_gc_time_ratio;\n@@ -125,0 +133,12 @@\n+  void set_gc_cpu_time_at_pause_end_ms(double ms) {\n+    _gc_cpu_time_at_pause_end_ms = ms;\n+  }\n+\n+  double gc_cpu_time_pause_end_ms() const {\n+    return _gc_cpu_time_at_pause_end_ms;\n+  }\n+\n+  void set_concurrent_gc_cpu_time_ms(double ms) {\n+    _concurrent_gc_cpu_time_ms = ms;\n+  }\n+\n@@ -176,2 +196,2 @@\n-  void update_recent_gc_times(double end_time_sec, double elapsed_ms);\n-  void compute_pause_time_ratios(double end_time_sec, double pause_time_ms);\n+  void update_recent_gc_times(double end_time_sec, double gc_time_ms);\n+  void update_gc_time_ratios(double end_time_sec, double pause_time_ms);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.hpp","additions":31,"deletions":11,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -220,2 +220,2 @@\n-  const double long_term_gc_cpu_usage = _analytics->long_term_pause_time_ratio();\n-  const double short_term_gc_cpu_usage = _analytics->short_term_pause_time_ratio();\n+  const double long_term_gc_cpu_usage = _analytics->long_term_gc_time_ratio();\n+  const double short_term_gc_cpu_usage = _analytics->short_term_gc_time_ratio();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"services\/cpuTimeUsage.hpp\"\n@@ -667,0 +668,6 @@\n+\n+  double prev_gc_cpu_pause_end_ms = _analytics->gc_cpu_time_pause_end_ms();\n+  double cur_gc_cpu_time_ms = (double) CPUTimeUsage::GC::gc_threads() \/ NANOSECS_PER_MILLISEC;\n+\n+  double concurrent_gc_cpu_time_ms = cur_gc_cpu_time_ms - prev_gc_cpu_pause_end_ms;\n+  _analytics->set_concurrent_gc_cpu_time_ms(concurrent_gc_cpu_time_ms);\n@@ -1349,2 +1356,1 @@\n-  _analytics->compute_pause_time_ratios(end_time_sec, pause_time_ms);\n-  _analytics->update_recent_gc_times(end_time_sec, pause_time_ms);\n+  _analytics->update_gc_time_ratios(end_time_sec, pause_time_ms);\n@@ -1373,0 +1379,3 @@\n+\n+  double elapsed_gc_cpu_time = CPUTimeUsage::GC::gc_threads() \/ NANOSECS_PER_MILLISEC;\n+  _analytics->set_gc_cpu_time_at_pause_end_ms(elapsed_gc_cpu_time);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-  ASSERT_EQ(a.long_term_pause_time_ratio(), 0.0);\n-  ASSERT_EQ(a.short_term_pause_time_ratio(), 0.0);\n+  ASSERT_EQ(a.long_term_gc_time_ratio(), 0.0);\n+  ASSERT_EQ(a.short_term_gc_time_ratio(), 0.0);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1Analytics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}