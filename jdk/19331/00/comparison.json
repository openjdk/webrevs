{"files":[{"patch":"@@ -1145,2 +1145,0 @@\n-        \/\/ Process annotations if processing is not disabled and there\n-        \/\/ is at least one Processor available.\n@@ -1152,1 +1150,0 @@\n-            processAnnotations = procEnvImpl.atLeastOneProcessor();\n@@ -1154,5 +1151,4 @@\n-            if (processAnnotations) {\n-                if (!explicitAnnotationProcessingRequested() &&\n-                    !optionsCheckingInitiallyDisabled) {\n-                    log.note(Notes.ImplicitAnnotationProcessing);\n-                }\n+            \/\/ Process annotations if processing is requested and there\n+            \/\/ is at least one Processor available.\n+            processAnnotations = procEnvImpl.atLeastOneProcessor() &&\n+                explicitAnnotationProcessingRequested();\n@@ -1160,0 +1156,1 @@\n+            if (processAnnotations) {\n@@ -1168,2 +1165,0 @@\n-            } else { \/\/ free resources\n-                procEnvImpl.close();\n@@ -1171,0 +1166,2 @@\n+        } else { \/\/ free resources\n+            procEnvImpl.close();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-        SERVICE,        \/\/ implicit annotation processing, via ServiceLoader\n@@ -102,1 +101,4 @@\n-        opts.addAll(Arrays.asList(\"-d\", \".\", \"-sourcepath\", testSrc, \"-classpath\", testClasses, \"-Xlint:-options\"));\n+        opts.addAll(Arrays.asList(\"-d\", \".\",\n+                                  \"-sourcepath\", testSrc,\n+                                  \"-classpath\", testClasses,\n+                                  \"-proc:full\"));\n@@ -107,3 +109,0 @@\n-        case SERVICE:\n-            createProcessorServices(Anno.class.getName());\n-            break;\n@@ -148,3 +147,0 @@\n-                case SERVICE:\n-                    expectKey = \"compiler.warn.proc.use.proc.or.implicit\";\n-                    break;\n","filename":"test\/langtools\/tools\/javac\/6341866\/T6341866.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -220,0 +220,4 @@\n+\n+# Pending removal\n+compiler.note.implicit.annotation.processing\n+compiler.warn.proc.use.proc.or.implicit\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,2 +24,0 @@\n-\/\/ key: compiler.warn.proc.use.proc.or.implicit\n-\/\/ key: compiler.note.implicit.annotation.processing\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcUseProcOrImplicit\/ProcUseProcOrImplicit.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n- * @bug 8310061 8315534\n- * @summary Verify a note is issued for implicit annotation processing\n+ * @bug 8310061 8315534 8306819\n+ * @summary Verify behavior around implicit annotation processing\n@@ -62,1 +62,1 @@\n- * Generates note and the processor runs:\n+ * Does not generates a note and the processor does not run:\n@@ -65,1 +65,1 @@\n- * Does _not_ generate a note and the processor runs:\n+ * Does _not_ generate a note and the processor does run:\n@@ -70,0 +70,2 @@\n+ *\n+ * Does _not_ generate a note and the processor does _not_run:\n@@ -75,0 +77,6 @@\n+ *\n+ * (Previously, annotation processing was implicitly enabled and the\n+ * the class path was searched for processors. This test was\n+ * originally written to probe around a note warning of a potential\n+ * future policy change to disable such implicit processing, a policy\n+ * change now implemented and this test has been updated accordingly.)\n@@ -168,2 +176,2 @@\n-        checkForProcessorMessage(javacResult, true);\n-        checkForCompilerNote(javacResult, true);\n+        checkForProcessorMessage(javacResult, false);\n+        checkForCompilerNote(javacResult, false);\n@@ -242,1 +250,1 @@\n-        checkForProcessorMessage(javacResult, true);\n+        checkForProcessorMessage(javacResult, false);\n@@ -257,1 +265,1 @@\n-        checkForProcessorMessage(javacResult, true);\n+        checkForProcessorMessage(javacResult, false);\n@@ -320,1 +328,1 @@\n-                verifyMessages(out, compilerOut, true);\n+                verifyMessages(out, compilerOut, false, false);\n@@ -332,1 +340,1 @@\n-                verifyMessages(out, compilerOut, false);\n+                verifyMessages(out, compilerOut, false, true);\n@@ -342,1 +350,1 @@\n-                verifyMessages(out, compilerOut, true);\n+                verifyMessages(out, compilerOut, false, false);\n@@ -356,1 +364,1 @@\n-                verifyMessages(out, compilerOut, false);\n+                verifyMessages(out, compilerOut, false, true);\n@@ -363,3 +371,8 @@\n-    private void verifyMessages(ByteArrayOutputStream out, StringWriter compilerOut, boolean expectedNotePresent) {\n-        if (!out.toString(StandardCharsets.UTF_8).contains(\"ImplicitProcTestProc run\")) {\n-            throw new RuntimeException(\"Expected processor message not printed\");\n+    private void verifyMessages(ByteArrayOutputStream out, StringWriter compilerOut, boolean expectedNotePresent,\n+                                boolean processorRunExpected) {\n+        boolean processorRun = out.toString(StandardCharsets.UTF_8).contains(\"ImplicitProcTestProc run\");\n+\n+        if (processorRun != processorRunExpected) {\n+            throw new RuntimeException(processorRunExpected ?\n+                                       \"Expected processor message not printed\" :\n+                                       \"Unexpected processor message printed\");\n","filename":"test\/langtools\/tools\/javac\/processing\/options\/TestNoteOnImplicitProcessing.java","additions":28,"deletions":15,"binary":false,"changes":43,"status":"modified"}]}