{"files":[{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.bench.vm.compiler;\n-\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.infra.Blackhole;\n-\n-import java.util.concurrent.TimeUnit;\n-\n-@Warmup(iterations = 5, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n-@Measurement(iterations = 5, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n-@Fork(value = 3, jvmArgsAppend = {\"-XX:+TieredCompilation\", \"-XX:TieredStopAtLevel=1\"})\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@Threads(Threads.MAX)\n-@State(Scope.Benchmark)\n-public class SecondarySuperCache {\n-\n-    \/\/ This test targets C1 specifically, to enter the interesting code path\n-    \/\/ without heavily optimizing compiler like C2 optimizing based on profiles,\n-    \/\/ or folding the instanceof checks.\n-\n-    interface IA {}\n-    interface IB {}\n-    interface I extends IA, IB {}\n-    public class C1 implements I {}\n-    public class C2 implements I {}\n-\n-    I c1, c2;\n-\n-    @Setup\n-    public void setup() {\n-        c1 = new C1();\n-        c2 = new C2();\n-    }\n-\n-    @Benchmark\n-    public void contended(Blackhole bh) {\n-        bh.consume(c1 instanceof IA);\n-        bh.consume(c2 instanceof IA);\n-        bh.consume(c1 instanceof IB);\n-        bh.consume(c2 instanceof IB);\n-    }\n-\n-    @Benchmark\n-    public void uncontended(Blackhole bh) {\n-        bh.consume(c1 instanceof IA);\n-        bh.consume(c1 instanceof IA);\n-        bh.consume(c2 instanceof IB);\n-        bh.consume(c2 instanceof IB);\n-    }\n-\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SecondarySuperCache.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 5, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 3, jvmArgsAppend = {\"-XX:+TieredCompilation\", \"-XX:TieredStopAtLevel=1\"})\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Threads(Threads.MAX)\n+@State(Scope.Benchmark)\n+public class SecondarySuperCacheContention {\n+\n+    \/\/ This test targets C1 specifically, to enter the interesting code path\n+    \/\/ without heavily optimizing compiler like C2 optimizing based on profiles,\n+    \/\/ or folding the instanceof checks.\n+\n+    \/\/ The test verifies what happens on unhappy path, when we contend a lot over\n+    \/\/ the secondary super cache.\n+\n+    interface IA {}\n+    interface IB {}\n+    class B {}\n+    class C1 extends B implements IA, IB {}\n+    class C2 extends B implements IA, IB {}\n+\n+    volatile B o1, o2;\n+\n+    @Setup\n+    public void setup() {\n+        o1 = new C1();\n+        o2 = new C2();\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(4)\n+    public void contended(Blackhole bh) {\n+        bh.consume(o1 instanceof IA);\n+        bh.consume(o2 instanceof IA);\n+        bh.consume(o1 instanceof IB);\n+        bh.consume(o2 instanceof IB);\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(4)\n+    public void uncontended(Blackhole bh) {\n+        bh.consume(o1 instanceof IA);\n+        bh.consume(o1 instanceof IA);\n+        bh.consume(o2 instanceof IB);\n+        bh.consume(o2 instanceof IB);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SecondarySuperCacheContention.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 5, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 3, jvmArgsAppend = {\"-XX:+TieredCompilation\", \"-XX:TieredStopAtLevel=1\"})\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Threads(1)\n+@State(Scope.Benchmark)\n+public class SecondarySuperCacheHits {\n+\n+    \/\/ This test targets C1 specifically, to enter the interesting code path\n+    \/\/ without heavily optimizing compiler like C2 optimizing based on profiles,\n+    \/\/ or folding the instanceof checks.\n+\n+    \/\/ The test verifies what happens on a happy path, when we can actually cache\n+    \/\/ the last super and use it effectively.\n+\n+    interface I01 {}\n+    interface I02 {}\n+    interface I03 {}\n+    interface I04 {}\n+    interface I05 {}\n+    interface I06 {}\n+    interface I07 {}\n+    interface I08 {}\n+    interface I09 {}\n+    interface I10 {}\n+    interface I11 {}\n+    interface I12 {}\n+    interface I13 {}\n+    interface I14 {}\n+    interface I15 {}\n+    interface I16 {}\n+    interface I17 {}\n+    interface I18 {}\n+    interface I19 {}\n+    interface I20 {}\n+\n+    class B {}\n+    class C1 extends B implements I01, I02, I03, I04, I05, I06, I07, I08, I09, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20 {}\n+\n+    volatile B o;\n+\n+    @Setup\n+    public void setup() {\n+        o = new C1();\n+    }\n+\n+    static final int ITERS = 10000;\n+\n+    @Benchmark\n+    @OperationsPerInvocation(20*ITERS)\n+    public void test(Blackhole bh) {\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I01);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I02);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I03);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I04);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I05);\n+\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I06);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I07);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I08);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I09);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I10);\n+\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I11);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I12);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I13);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I14);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I15);\n+\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I16);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I17);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I18);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I19);\n+        for (int c = 0; c < ITERS; c++) bh.consume(o instanceof I20);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SecondarySuperCacheHits.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}