{"files":[{"patch":"@@ -462,1 +462,3 @@\n-            cases = processCases(tree, newCases.toList());\n+            cases = newCases.toList();\n+            patchCompletingNormallyCases(cases);\n+            cases = processCases(tree, cases);\n@@ -529,2 +531,0 @@\n-            patchCompletingNormallyCases(cases);\n-\n@@ -691,1 +691,1 @@\n-                cases.tail.head.guard != null) {\n+                (cases.tail.head.guard != null || cases.tail.head.labels.stream().anyMatch(cl -> cl instanceof JCPatternCaseLabel p && p.syntheticGuard != null))) {\n@@ -706,0 +706,1 @@\n+                currentCase.completesNormally = false;\n@@ -954,0 +955,1 @@\n+        boolean previousCompletesNormally = false;\n@@ -958,0 +960,1 @@\n+            boolean currentCompletesNormally = c.head.completesNormally;\n@@ -992,0 +995,2 @@\n+                       !previousCompletesNormally &&\n+                       !currentCompletesNormally &&\n@@ -1007,0 +1012,1 @@\n+            previousCompletesNormally = currentCompletesNormally;\n@@ -1479,2 +1485,2 @@\n-                if (!e.getKey().isPreserved() ||\n-                    !parent.tryPrepend(e.getKey(), decl)) {\n+                if (!e.getValue().isUnnamedVariable() &&\n+                        (!e.getKey().isPreserved() || !parent.tryPrepend(e.getKey(), decl))) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * @test\n+ * @bug 8326404\n+ * @summary Assertion error when trying to compile switch with fallthrough with pattern\n+ * @compile T8326404.java\n+ * @run main T8326404\n+ *\/\n+public class T8326404 {\n+    private static final record R<T>(T a) {}\n+\n+    public static void main(String[] args) {\n+        assertEquals(4, run1(\"\"));\n+        assertEquals(3, run1(new R(\"\")));\n+        assertEquals(2, run1(new R(42)));\n+\n+        assertEquals(2, run1_break1(\"\"));\n+        assertEquals(1, run1_break1(new R(\"\")));\n+        assertEquals(2, run1_break1(new R(42)));\n+\n+        assertEquals(3, run2(\"\"));\n+        assertEquals(4, run2(new R(\"\")));\n+        assertEquals(2, run2(new R(42)));\n+\n+        assertEquals(1, run2_break1(\"\"));\n+        assertEquals(2, run2_break1(new R(\"\")));\n+        assertEquals(2, run2_break1(new R(42)));\n+\n+        assertEquals(2, run3(\"\"));\n+        assertEquals(4, run3(new R(\"\")));\n+        assertEquals(3, run3(new R(42)));\n+\n+        assertEquals(2, run3_break1(\"\"));\n+        assertEquals(2, run3_break1(new R(\"\")));\n+        assertEquals(1, run3_break1(new R(42)));\n+    }\n+\n+    private static int run1(Object o) {\n+        int i = 0;\n+        switch (o) {\n+            case String _:\n+                i++;\n+            case R(String _):\n+                i++;\n+            case R(Integer _):\n+                i++;\n+            default:\n+                i++;\n+        }\n+        return i;\n+    }\n+\n+    private static int run1_break1(Object o) {\n+        int i = 0;\n+        switch (o) {\n+            case String s:\n+                i++;\n+            case R(String _):\n+                i++;\n+                break;\n+            case R(Integer _):\n+                i++;\n+            default:\n+                i++;\n+        }\n+        return i;\n+    }\n+\n+    private static int run2(Object o) {\n+        int i = 0;\n+        switch (o) {\n+            case R(String _):\n+                i++;\n+            case String _:\n+                i++;\n+            case R(Integer _):\n+                i++;\n+            default:\n+                i++;\n+        }\n+        return i;\n+    }\n+\n+    private static int run2_break1(Object o) {\n+        int i = 0;\n+        switch (o) {\n+            case R(String _):\n+                i++;\n+            case String _:\n+                i++;\n+                break;\n+            case R(Integer _):\n+                i++;\n+            default:\n+                i++;\n+        }\n+        return i;\n+    }\n+\n+    private static int run3(Object o) {\n+        int i = 0;\n+        switch (o) {\n+            case R(String _):\n+                i++;\n+            case R(Integer _):\n+                i++;\n+            case String _:\n+                i++;\n+            default:\n+                i++;\n+        }\n+        return i;\n+    }\n+\n+    private static int run3_break1(Object o) {\n+        int i = 0;\n+        switch (o) {\n+            case R(String _):\n+                i++;\n+            case R(Integer _):\n+                i++;\n+                break;\n+            case String _:\n+                i++;\n+            default:\n+                i++;\n+        }\n+        return i;\n+    }\n+\n+    static void assertEquals(int expected, int actual) {\n+        if (expected != actual) {\n+            throw new AssertionError(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8326404.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"}]}