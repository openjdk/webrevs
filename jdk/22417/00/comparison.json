{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.foreign.SequenceLayout;\n@@ -88,0 +89,1 @@\n+        assertNotEmpty(function);\n@@ -114,0 +116,1 @@\n+        assertNotEmpty(function);\n@@ -328,0 +331,31 @@\n+\n+    private static void assertNotEmpty(FunctionDescriptor fd) {\n+        fd.returnLayout().ifPresent(FallbackLinker::assertNotEmpty);\n+        fd.argumentLayouts().forEach(FallbackLinker::assertNotEmpty);\n+    }\n+\n+    \/\/ Recursively tests for emptiness\n+    private static void assertNotEmpty(MemoryLayout layout) {\n+        switch (layout) {\n+            case GroupLayout gl -> {\n+                if (gl.memberLayouts().isEmpty()) {\n+                    throw empty(gl);\n+                } else {\n+                    gl.memberLayouts().forEach(FallbackLinker::assertNotEmpty);\n+                }\n+            }\n+            case SequenceLayout sl -> {\n+                if (sl.elementCount() == 0) {\n+                    throw empty(sl);\n+                } else {\n+                    assertNotEmpty(sl.elementLayout());\n+                }\n+            }\n+            default -> { \/* do nothing *\/ }\n+        }\n+    }\n+\n+    private static IllegalArgumentException empty(MemoryLayout layout) {\n+        return new IllegalArgumentException(\"The layout \" + layout + \" is empty\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules java.base\/jdk.internal.foreign\n+ * @modules java.base\/jdk.internal.foreign java.base\/jdk.internal.foreign.abi.fallback\n@@ -32,0 +32,1 @@\n+import jdk.internal.foreign.abi.fallback.FallbackLinker;\n@@ -253,1 +254,7 @@\n-        linker.downcallHandle(fd);\n+        if (linker.getClass().equals(FallbackLinker.class)) {\n+            \/\/ The fallback linker does not support empty layouts (FFI_BAD_TYPEDEF)\n+            var iae = expectThrows(IllegalArgumentException.class, () -> linker.downcallHandle(fd));\n+            assertTrue(iae.getMessage().contains(\"is empty\"));\n+        } else {\n+            linker.downcallHandle(fd);\n+        }\n","filename":"test\/jdk\/java\/foreign\/TestLinker.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"}]}