{"files":[{"patch":"@@ -40,3 +40,0 @@\n-import java.net.URLPermission;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpClient.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.net.InetSocketAddress;\n@@ -31,5 +30,0 @@\n-import java.net.ProxySelector;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.net.URLPermission;\n-import java.security.AccessControlContext;\n@@ -37,2 +31,0 @@\n-import java.util.List;\n-import java.util.Map;\n@@ -43,1 +35,0 @@\n-import java.util.concurrent.TimeoutException;\n@@ -47,1 +38,0 @@\n-import java.net.http.HttpHeaders;\n@@ -56,2 +46,0 @@\n-import static jdk.internal.net.http.common.Utils.permissionForProxy;\n-\n@@ -63,7 +51,0 @@\n- * Security check is performed here:\n- * - uses AccessControlContext captured at API level\n- * - checks for appropriate URLPermission for request\n- * - if permission allowed, grants equivalent SocketPermission to call\n- * - in case of direct HTTP proxy, checks additionally for access to proxy\n- *    (CONNECT proxying uses its own Exchange, so check done there)\n- *\n@@ -86,2 +67,0 @@\n-    @SuppressWarnings(\"removal\")\n-    final AccessControlContext acc;\n@@ -106,16 +85,0 @@\n-        this.acc = multi.acc;\n-        this.parentExecutor = multi.executor;\n-        this.pushGroup = multi.pushGroup;\n-        this.dbgTag = \"Exchange\";\n-    }\n-\n-    \/* If different AccessControlContext to be used  *\/\n-    Exchange(HttpRequestImpl request,\n-             MultiExchange<T> multi,\n-             @SuppressWarnings(\"removal\") AccessControlContext acc)\n-    {\n-        this.request = request;\n-        this.acc = acc;\n-        this.upgrading = false;\n-        this.client = multi.client();\n-        this.multi = multi;\n@@ -341,1 +304,1 @@\n-    <T> CompletableFuture<T> checkCancelled(CompletableFuture<T> cf, HttpConnection connection) {\n+    <U> CompletableFuture<U> checkCancelled(CompletableFuture<U> cf, HttpConnection connection) {\n@@ -357,1 +320,1 @@\n-                        return MinimalFuture.<T>failedFuture(t);\n+                        return MinimalFuture.<U>failedFuture(t);\n@@ -425,9 +388,0 @@\n-    CompletableFuture<Response> responseAsyncImpl(HttpConnection connection) {\n-        SecurityException e = checkPermissions();\n-        if (e != null) {\n-            return MinimalFuture.failedFuture(e);\n-        } else {\n-            return responseAsyncImpl0(connection);\n-        }\n-    }\n-\n@@ -587,1 +541,1 @@\n-    CompletableFuture<Response> responseAsyncImpl0(HttpConnection connection) {\n+    CompletableFuture<Response> responseAsyncImpl(HttpConnection connection) {\n@@ -738,103 +692,0 @@\n-    private URI getURIForSecurityCheck() {\n-        URI u;\n-        String method = request.method();\n-        InetSocketAddress authority = request.authority();\n-        URI uri = request.uri();\n-\n-        \/\/ CONNECT should be restricted at API level\n-        if (method.equalsIgnoreCase(\"CONNECT\")) {\n-            try {\n-                u = new URI(\"socket\",\n-                             null,\n-                             authority.getHostString(),\n-                             authority.getPort(),\n-                             null,\n-                             null,\n-                             null);\n-            } catch (URISyntaxException e) {\n-                throw new InternalError(e); \/\/ shouldn't happen\n-            }\n-        } else {\n-            u = uri;\n-        }\n-        return u;\n-    }\n-\n-    \/**\n-     * Returns the security permission required for the given details.\n-     * If method is CONNECT, then uri must be of form \"scheme:\/\/host:port\"\n-     *\/\n-    private static URLPermission permissionForServer(URI uri,\n-                                                     String method,\n-                                                     Map<String, List<String>> headers) {\n-        if (method.equals(\"CONNECT\")) {\n-            return new URLPermission(uri.toString(), \"CONNECT\");\n-        } else {\n-            return Utils.permissionForServer(uri, method, headers.keySet().stream());\n-        }\n-    }\n-\n-    \/**\n-     * Performs the necessary security permission checks required to retrieve\n-     * the response. Returns a security exception representing the denied\n-     * permission, or null if all checks pass or there is no security manager.\n-     *\/\n-    private SecurityException checkPermissions() {\n-        String method = request.method();\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null || method.equals(\"CONNECT\")) {\n-            \/\/ tunneling will have a null acc, which is fine. The proxy\n-            \/\/ permission check will have already been preformed.\n-            return null;\n-        }\n-\n-        HttpHeaders userHeaders = request.getUserHeaders();\n-        URI u = getURIForSecurityCheck();\n-        URLPermission p = permissionForServer(u, method, userHeaders.map());\n-\n-        try {\n-            assert acc != null;\n-            sm.checkPermission(p, acc);\n-        } catch (SecurityException e) {\n-            return e;\n-        }\n-        String hostHeader = userHeaders.firstValue(\"Host\").orElse(null);\n-        if (hostHeader != null && !hostHeader.equalsIgnoreCase(u.getHost())) {\n-            \/\/ user has set a Host header different to request URI\n-            \/\/ must check that for URLPermission also\n-            URI u1 = replaceHostInURI(u, hostHeader);\n-            URLPermission p1 = permissionForServer(u1, method, userHeaders.map());\n-            try {\n-                assert acc != null;\n-                sm.checkPermission(p1, acc);\n-            } catch (SecurityException e) {\n-                return e;\n-            }\n-        }\n-        ProxySelector ps = client.proxySelector();\n-        if (ps != null) {\n-            if (!method.equals(\"CONNECT\")) {\n-                \/\/ a non-tunneling HTTP proxy. Need to check access\n-                URLPermission proxyPerm = permissionForProxy(request.proxy());\n-                if (proxyPerm != null) {\n-                    try {\n-                        sm.checkPermission(proxyPerm, acc);\n-                    } catch (SecurityException e) {\n-                        return e;\n-                    }\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static URI replaceHostInURI(URI u, String hostPort) {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(u.getScheme())\n-                .append(\":\/\/\")\n-                .append(hostPort)\n-                .append(u.getRawPath());\n-        return URI.create(sb.toString());\n-    }\n-\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Exchange.java","additions":3,"deletions":152,"binary":false,"changes":155,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-    \/\/ Security parameters\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientBuilderImpl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -54,1 +52,0 @@\n-import java.security.PrivilegedAction;\n@@ -100,1 +97,0 @@\n-import jdk.internal.misc.InnocuousThread;\n@@ -134,1 +130,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -138,6 +133,1 @@\n-            Thread t;\n-            if (System.getSecurityManager() == null) {\n-                t = new Thread(null, r, name, 0, false);\n-            } else {\n-                t = InnocuousThread.newThread(name, r);\n-            }\n+            Thread t = new Thread(null, r, name, 0, false);\n@@ -191,1 +181,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -194,6 +183,1 @@\n-                PrivilegedAction<?> action = () -> {\n-                    service.shutdown();\n-                    return null;\n-                };\n-                AccessController.doPrivileged(action, null,\n-                        new RuntimePermission(\"modifyThread\"));\n+                service.shutdown();\n@@ -339,1 +323,0 @@\n-    \/\/ Security parameters\n@@ -448,10 +431,0 @@\n-        @SuppressWarnings(\"removal\")\n-        var sm = System.getSecurityManager();\n-        if (sm != null && builder.localAddr != null) {\n-            \/\/ when a specific local address is configured, it will eventually\n-            \/\/ lead to the SocketChannel.bind(...) call with an InetSocketAddress\n-            \/\/ whose InetAddress is the local address and the port is 0. That ultimately\n-            \/\/ leads to a SecurityManager.checkListen permission check for that port.\n-            \/\/ so we do that security manager check here with port 0.\n-            sm.checkListen(0);\n-        }\n@@ -487,1 +460,1 @@\n-                .orElseGet(HttpClientImpl::getDefaultProxySelector);\n+                .orElseGet(ProxySelector::getDefault);\n@@ -645,6 +618,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static ProxySelector getDefaultProxySelector() {\n-        PrivilegedAction<ProxySelector> action = ProxySelector::getDefault;\n-        return AccessController.doPrivileged(action);\n-    }\n-\n@@ -995,1 +962,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1015,5 +981,1 @@\n-        AccessControlContext acc = null;\n-        if (System.getSecurityManager() != null)\n-            acc = AccessController.getContext();\n-\n-        \/\/ Clone the, possibly untrusted, HttpRequest\n+        \/\/ Clone the possibly untrusted HttpRequest\n@@ -1052,2 +1014,1 @@\n-                                                            pushPromiseHandler,\n-                                                            acc);\n+                                                            pushPromiseHandler);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":6,"deletions":45,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -34,3 +34,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -68,2 +65,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private volatile AccessControlContext acc;\n@@ -76,3 +71,1 @@\n-        PrivilegedAction<String> pa = () -> System.getProperty(\"java.version\");\n-        @SuppressWarnings(\"removal\")\n-        String version = AccessController.doPrivileged(pa);\n+        String version = System.getProperty(\"java.version\");\n@@ -199,1 +192,0 @@\n-        this.acc = other.acc;\n@@ -277,1 +269,0 @@\n-        this.acc = parent.acc;\n@@ -398,1 +389,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -415,2 +405,1 @@\n-            PrivilegedAction<InetSocketAddress> pa = () -> new InetSocketAddress(host, port);\n-            return AccessController.doPrivileged(pa);\n+            return new InetSocketAddress(host, port);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpRequestImpl.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.security.AccessControlContext;\n@@ -82,2 +81,0 @@\n-    @SuppressWarnings(\"removal\")\n-    final AccessControlContext acc;\n@@ -158,2 +155,1 @@\n-                  PushPromiseHandler<T> pushPromiseHandler,\n-                  @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+                  PushPromiseHandler<T> pushPromiseHandler) {\n@@ -167,1 +163,0 @@\n-        this.acc = acc;\n@@ -172,4 +167,1 @@\n-            Executor ensureExecutedAsync = this.executor::ensureExecutedAsync;\n-            Executor executor = acc == null\n-                    ? ensureExecutedAsync\n-                    : new PrivilegedExecutor(ensureExecutedAsync, acc);\n+            Executor executor = this.executor::ensureExecutedAsync;\n@@ -473,1 +465,1 @@\n-                                setExchange(new Exchange<>(currentreq, this, acc));\n+                                setExchange(new Exchange<>(currentreq, this));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/MultiExchange.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -170,1 +167,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -194,1 +190,0 @@\n-                PrivilegedExceptionAction<SocketChannel> pa = () -> chan.bind(sockAddr);\n@@ -196,1 +191,1 @@\n-                    AccessController.doPrivileged(pa);\n+                    chan.bind(sockAddr);\n@@ -200,2 +195,1 @@\n-                } catch (PrivilegedActionException e) {\n-                    var cause = e.getCause();\n+                } catch (IOException cause) {\n@@ -209,7 +203,1 @@\n-            PrivilegedExceptionAction<Boolean> pa =\n-                    () -> chan.connect(Utils.resolveAddress(address));\n-            try {\n-                 finished = AccessController.doPrivileged(pa);\n-            } catch (PrivilegedActionException e) {\n-               throw e.getCause();\n-            }\n+            finished = chan.connect(Utils.resolveAddress(address));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/PlainHttpConnection.java","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-                        client, discarding(), null, null);\n+                        client, discarding(), null);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/PlainTunnelingConnection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.net.http;\n-\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.util.Objects;\n-import java.util.concurrent.Executor;\n-\n-\/**\n- * Executes tasks within a given access control context, and by a given executor.\n- *\/\n-class PrivilegedExecutor implements Executor {\n-\n-    \/** The underlying executor. May be provided by the user. *\/\n-    final Executor executor;\n-    \/** The ACC to execute the tasks within. *\/\n-    @SuppressWarnings(\"removal\")\n-    final AccessControlContext acc;\n-\n-    public PrivilegedExecutor(Executor executor, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        Objects.requireNonNull(executor);\n-        Objects.requireNonNull(acc);\n-        this.executor = executor;\n-        this.acc = acc;\n-    }\n-\n-    private static class PrivilegedRunnable implements Runnable {\n-        private final Runnable r;\n-        @SuppressWarnings(\"removal\")\n-        private final AccessControlContext acc;\n-        PrivilegedRunnable(Runnable r, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-            this.r = r;\n-            this.acc = acc;\n-        }\n-        @SuppressWarnings(\"removal\")\n-        @Override\n-        public void run() {\n-            PrivilegedAction<Void> pa = () -> { r.run(); return null; };\n-            AccessController.doPrivileged(pa, acc);\n-        }\n-    }\n-\n-    @Override\n-    public void execute(Runnable r) {\n-        executor.execute(new PrivilegedRunnable(r, acc));\n-    }\n-}\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/PrivilegedExecutor.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.io.FilePermission;\n@@ -40,5 +39,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -232,5 +226,0 @@\n-     * <p>\n-     * Privileged actions are performed within a limited doPrivileged that only\n-     * asserts the specific, read, file permission that was checked during the\n-     * construction of this FilePublisher. This only applies if the file system\n-     * that created the file provides interoperability with {@code java.io.File}.\n@@ -244,1 +233,1 @@\n-        private static String pathForSecurityCheck(Path path) {\n+        private static String checkPathForDefaultFS(Path path) {\n@@ -250,4 +239,0 @@\n-         *\n-         * Permission checks are performed here before construction of the\n-         * FilePublisher. Permission checking and construction are deliberately\n-         * and tightly co-located.\n@@ -257,3 +242,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            FilePermission filePermission = null;\n@@ -263,6 +245,1 @@\n-                String fn = pathForSecurityCheck(path);\n-                if (sm != null) {\n-                    FilePermission readPermission = new FilePermission(fn, \"read\");\n-                    sm.checkPermission(readPermission);\n-                    filePermission = readPermission;\n-                }\n+                checkPathForDefaultFS(path);\n@@ -271,15 +248,0 @@\n-                \/\/ Path not associated with the default file system\n-                \/\/ Test early if an input stream can still be obtained\n-                try {\n-                    if (sm != null) {\n-                        Files.newInputStream(path).close();\n-                    }\n-                } catch (IOException ioe) {\n-                    if (ioe instanceof FileNotFoundException) {\n-                        throw (FileNotFoundException) ioe;\n-                    } else {\n-                        var ex = new FileNotFoundException(ioe.getMessage());\n-                        ex.initCause(ioe);\n-                        throw ex;\n-                    }\n-                }\n@@ -288,1 +250,1 @@\n-            \/\/ existence check must be after permission checks\n+            \/\/ existence check must be after FS checks\n@@ -292,5 +254,0 @@\n-            Permission perm = filePermission;\n-            assert perm == null || perm.getActions().equals(\"read\");\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext acc = sm != null ?\n-                    AccessController.getContext() : null;\n@@ -299,1 +256,1 @@\n-                    createInputStream(p, acc, perm, finalDefaultFS);\n+                    createInputStream(p, finalDefaultFS);\n@@ -311,1 +268,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -313,2 +269,0 @@\n-                                                     AccessControlContext acc,\n-                                                     Permission perm,\n@@ -317,9 +271,1 @@\n-                if (acc != null) {\n-                    PrivilegedExceptionAction<InputStream> pa = defaultFS\n-                            ? () -> new FileInputStream(path.toFile())\n-                            : () -> Files.newInputStream(path);\n-                    return perm != null\n-                            ? AccessController.doPrivileged(pa, acc, perm)\n-                            : AccessController.doPrivileged(pa, acc);\n-                } else {\n-                    return defaultFS\n+                return defaultFS\n@@ -328,3 +274,0 @@\n-                }\n-            } catch (PrivilegedActionException pae) {\n-                throw toUncheckedException(pae.getCause());\n@@ -336,10 +279,0 @@\n-        private static RuntimeException toUncheckedException(Throwable t) {\n-            if (t instanceof RuntimeException)\n-                throw (RuntimeException) t;\n-            if (t instanceof Error)\n-                throw (Error) t;\n-            if (t instanceof IOException)\n-                throw new UncheckedIOException((IOException) t);\n-            throw new UndeclaredThrowableException(t);\n-        }\n-\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/RequestPublishers.java","additions":6,"deletions":73,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.io.File;\n-import java.io.FilePermission;\n@@ -37,2 +35,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -40,1 +36,1 @@\n-import java.util.Objects;\n+\n@@ -59,1 +55,1 @@\n-    private static final String pathForSecurityCheck(Path path) {\n+    private static final String checkPathForDefaultFS(Path path) {\n@@ -69,3 +65,0 @@\n-        @SuppressWarnings(\"removal\")\n-        private final AccessControlContext acc;\n-        private final FilePermission filePermission;\n@@ -75,4 +68,0 @@\n-         *\n-         * Permission checks are performed here before construction of the\n-         * PathBodyHandler. Permission checking and construction are\n-         * deliberately and tightly co-located.\n@@ -82,13 +71,0 @@\n-            FilePermission filePermission = null;\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                try {\n-                    String fn = pathForSecurityCheck(file);\n-                    FilePermission writePermission = new FilePermission(fn, \"write\");\n-                    sm.checkPermission(writePermission);\n-                    filePermission = writePermission;\n-                } catch (UnsupportedOperationException ignored) {\n-                    \/\/ path not associated with the default file system provider\n-                }\n-            }\n@@ -96,4 +72,1 @@\n-            assert filePermission == null || filePermission.getActions().equals(\"write\");\n-            @SuppressWarnings(\"removal\")\n-            var acc = sm != null ? AccessController.getContext() : null;\n-            return new PathBodyHandler(file, openOptions, acc, filePermission);\n+            return new PathBodyHandler(file, openOptions);\n@@ -103,3 +76,1 @@\n-                                List<OpenOption> openOptions,\n-                                @SuppressWarnings(\"removal\") AccessControlContext acc,\n-                                FilePermission filePermission) {\n+                                List<OpenOption> openOptions) {\n@@ -108,2 +79,0 @@\n-            this.acc = acc;\n-            this.filePermission = filePermission;\n@@ -114,1 +83,1 @@\n-            return new PathSubscriber(file, openOptions, acc, filePermission);\n+            return new PathSubscriber(file, openOptions);\n@@ -173,3 +142,0 @@\n-        @SuppressWarnings(\"removal\")\n-        private final AccessControlContext acc;\n-        private final FilePermission[] filePermissions;  \/\/ may be null\n@@ -179,4 +145,0 @@\n-         *\n-         * Permission checks are performed here before construction of the\n-         * FileDownloadBodyHandler. Permission checking and construction are\n-         * deliberately and tightly co-located.\n@@ -186,1 +148,0 @@\n-            String fn;\n@@ -188,1 +149,1 @@\n-                fn = pathForSecurityCheck(directory);\n+                checkPathForDefaultFS(directory);\n@@ -194,17 +155,1 @@\n-            FilePermission filePermissions[] = null;\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                FilePermission writePermission = new FilePermission(fn, \"write\");\n-                String writePathPerm = fn + File.separatorChar + \"*\";\n-                FilePermission writeInDirPermission = new FilePermission(writePathPerm, \"write\");\n-                sm.checkPermission(writeInDirPermission);\n-                FilePermission readPermission = new FilePermission(fn, \"read\");\n-                sm.checkPermission(readPermission);\n-\n-                \/\/ read permission is only needed before determine the below checks\n-                \/\/ only write permission is required when downloading to the file\n-                filePermissions = new FilePermission[] { writePermission, writeInDirPermission };\n-            }\n-\n-            \/\/ existence, etc, checks must be after permission checks\n+            \/\/ existence, etc, checks must be after FS checks\n@@ -218,5 +163,1 @@\n-            assert filePermissions == null || (filePermissions[0].getActions().equals(\"write\")\n-                    && filePermissions[1].getActions().equals(\"write\"));\n-            @SuppressWarnings(\"removal\")\n-            var acc = sm != null ? AccessController.getContext() : null;\n-            return new FileDownloadBodyHandler(directory, openOptions, acc, filePermissions);\n+            return new FileDownloadBodyHandler(directory, openOptions);\n@@ -226,3 +167,1 @@\n-                                       List<OpenOption> openOptions,\n-                                       @SuppressWarnings(\"removal\") AccessControlContext acc,\n-                                       FilePermission... filePermissions) {\n+                                       List<OpenOption> openOptions) {\n@@ -231,2 +170,0 @@\n-            this.acc = acc;\n-            this.filePermissions = filePermissions;\n@@ -397,1 +334,1 @@\n-            return new PathSubscriber(file, openOptions, acc, filePermissions);\n+            return new PathSubscriber(file, openOptions);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseBodyHandlers.java","additions":10,"deletions":73,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.io.FilePermission;\n@@ -38,5 +37,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -167,4 +161,0 @@\n-     *\n-     * Privileged actions are performed within a limited doPrivileged that only\n-     * asserts the specific, write, file permissions that were checked during\n-     * the construction of this PathSubscriber.\n@@ -173,3 +163,0 @@\n-\n-        private static final FilePermission[] EMPTY_FILE_PERMISSIONS = new FilePermission[0];\n-\n@@ -178,4 +165,0 @@\n-        @SuppressWarnings(\"removal\")\n-        private final AccessControlContext acc;\n-        private final FilePermission[] filePermissions;\n-        private final boolean isDefaultFS;\n@@ -188,4 +171,0 @@\n-        private static final String pathForSecurityCheck(Path path) {\n-            return path.toFile().getPath();\n-        }\n-\n@@ -194,4 +173,0 @@\n-         *\n-         * Permission checks are performed here before construction of the\n-         * PathSubscriber. Permission checking and construction are deliberately\n-         * and tightly co-located.\n@@ -201,18 +176,1 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            FilePermission filePermission = null;\n-            if (sm != null) {\n-                try {\n-                    String fn = pathForSecurityCheck(file);\n-                    FilePermission writePermission = new FilePermission(fn, \"write\");\n-                    sm.checkPermission(writePermission);\n-                    filePermission = writePermission;\n-                } catch (UnsupportedOperationException ignored) {\n-                    \/\/ path not associated with the default file system provider\n-                }\n-            }\n-\n-            assert filePermission == null || filePermission.getActions().equals(\"write\");\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext acc = sm != null ? AccessController.getContext() : null;\n-            return new PathSubscriber(file, options, acc, filePermission);\n+            return new PathSubscriber(file, options);\n@@ -223,3 +181,1 @@\n-                                           List<OpenOption> options,\n-                                           @SuppressWarnings(\"removal\") AccessControlContext acc,\n-                                           FilePermission... filePermissions) {\n+                                           List<OpenOption> options) {\n@@ -228,4 +184,0 @@\n-            this.acc = acc;\n-            this.filePermissions = filePermissions == null || filePermissions[0] == null\n-                            ? EMPTY_FILE_PERMISSIONS : filePermissions;\n-            this.isDefaultFS = isDefaultFS(file);\n@@ -243,1 +195,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -253,25 +204,6 @@\n-            if (acc == null) {\n-                try {\n-                    out = FileChannel.open(file, options);\n-                } catch (IOException ioe) {\n-                    result.completeExceptionally(ioe);\n-                    subscription.cancel();\n-                    return;\n-                }\n-            } else {\n-                try {\n-                    PrivilegedExceptionAction<FileChannel> pa =\n-                            () -> FileChannel.open(file, options);\n-                    out = isDefaultFS\n-                            ? AccessController.doPrivileged(pa, acc, filePermissions)\n-                            : AccessController.doPrivileged(pa, acc);\n-                } catch (PrivilegedActionException pae) {\n-                    Throwable t = pae.getCause() != null ? pae.getCause() : pae;\n-                    result.completeExceptionally(t);\n-                    subscription.cancel();\n-                    return;\n-                } catch (Exception e) {\n-                    result.completeExceptionally(e);\n-                    subscription.cancel();\n-                    return;\n-                }\n+            try {\n+                out = FileChannel.open(file, options);\n+            } catch (IOException ioe) {\n+                result.completeExceptionally(ioe);\n+                subscription.cancel();\n+                return;\n@@ -314,1 +246,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -316,13 +247,1 @@\n-            if (acc == null) {\n-                Utils.close(out);\n-            } else {\n-                PrivilegedAction<Void> pa = () -> {\n-                    Utils.close(out);\n-                    return null;\n-                };\n-                if (isDefaultFS) {\n-                    AccessController.doPrivileged(pa, acc, filePermissions);\n-                } else {\n-                    AccessController.doPrivileged(pa, acc);\n-                }\n-            }\n+            Utils.close(out);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":9,"deletions":90,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import javax.net.ssl.SSLSession;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/ImmutableExtendedSSLSession.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-import java.net.URLPermission;\n-import java.net.http.HttpClient;\n@@ -54,2 +52,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -103,4 +99,1 @@\n-\/\/        if (ASSERTIONSENABLED) {\n-\/\/            PrivilegedAction<String> action = () -> System.getProperty(\"test.src\");\n-\/\/            TESTING = AccessController.doPrivileged(action) != null;\n-\/\/        } else TESTING = false;\n+\/\/        TESTING = ASSERTIONSENABLED ? System.getProperty(\"test.src\") != null : false;\n@@ -123,3 +116,1 @@\n-        PrivilegedAction<String> action = () -> System.getProperty(loggerName);\n-        @SuppressWarnings(\"removal\")\n-        var prop = AccessController.doPrivileged(action);\n+        var prop = System.getProperty(loggerName);\n@@ -452,35 +443,0 @@\n-    \/**\n-     * Returns the security permissions required to connect to the proxy, or\n-     * {@code null} if none is required or applicable.\n-     *\/\n-    public static URLPermission permissionForProxy(InetSocketAddress proxyAddress) {\n-        if (proxyAddress == null)\n-            return null;\n-\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"socket:\/\/\")\n-          .append(proxyAddress.getHostString()).append(\":\")\n-          .append(proxyAddress.getPort());\n-        String urlString = sb.toString();\n-        return new URLPermission(urlString, \"CONNECT\");\n-    }\n-\n-    \/**\n-     * Returns the security permission required for the given details.\n-     *\/\n-    public static URLPermission permissionForServer(URI uri,\n-                                                    String method,\n-                                                    Stream<String> headers) {\n-        String urlString = new StringBuilder()\n-                .append(uri.getScheme()).append(\":\/\/\")\n-                .append(uri.getRawAuthority())\n-                .append(uri.getRawPath()).toString();\n-\n-        StringBuilder actionStringBuilder = new StringBuilder(method);\n-        String collected = headers.collect(joining(\",\"));\n-        if (!collected.isEmpty()) {\n-            actionStringBuilder.append(\":\").append(collected);\n-        }\n-        return new URLPermission(urlString, actionStringBuilder.toString());\n-    }\n-\n@@ -590,1 +546,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -592,2 +547,1 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Integer>) () ->\n-                NetProperties.getInteger(name, defaultValue));\n+        return NetProperties.getInteger(name, defaultValue);\n@@ -596,1 +550,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -598,2 +551,1 @@\n-        return AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                NetProperties.get(name));\n+        return NetProperties.get(name);\n@@ -602,1 +554,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -604,2 +555,1 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Boolean>) () ->\n-                Boolean.parseBoolean(System.getProperty(name, String.valueOf(def))));\n+        return Boolean.parseBoolean(System.getProperty(name, String.valueOf(def)));\n@@ -608,1 +558,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -610,2 +559,1 @@\n-        return AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                System.getProperty(name));\n+        return System.getProperty(name);\n@@ -614,1 +562,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -616,2 +563,1 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Integer>) () ->\n-                Integer.parseInt(System.getProperty(name, String.valueOf(defaultValue))));\n+        return Integer.parseInt(System.getProperty(name, String.valueOf(defaultValue)));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":7,"deletions":61,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -55,3 +53,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String value = AccessController.doPrivileged(\n-                (PrivilegedAction<String>) () -> System.getProperty(PROPERTY));\n+        String value = System.getProperty(PROPERTY);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/hpack\/HPACK.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import java.net.InetSocketAddress;\n@@ -47,1 +46,0 @@\n-import java.net.URLPermission;\n@@ -49,1 +47,0 @@\n-import java.security.AccessController;\n@@ -52,1 +49,0 @@\n-import java.security.PrivilegedAction;\n@@ -64,1 +60,0 @@\n-import java.util.stream.Stream;\n@@ -68,1 +63,0 @@\n-import static jdk.internal.net.http.common.Utils.permissionForProxy;\n@@ -115,1 +109,0 @@\n-        checkPermissions(b, proxy);\n@@ -188,1 +181,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -190,2 +182,1 @@\n-        PrivilegedAction<CompletableFuture<Result>> pa = () ->\n-                client.sendAsync(this.request, BodyHandlers.ofString())\n+        return client.sendAsync(this.request, BodyHandlers.ofString())\n@@ -193,1 +184,0 @@\n-        return AccessController.doPrivileged(pa);\n@@ -379,23 +369,0 @@\n-    \/**\n-     * Performs the necessary security permissions checks to connect ( possibly\n-     * through a proxy ) to the builders WebSocket URI.\n-     *\n-     * @throws SecurityException if the security manager denies access\n-     *\/\n-    static void checkPermissions(BuilderImpl b, Proxy proxy) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            return;\n-        }\n-        Stream<String> headers = b.getHeaders().stream().map(p -> p.first).distinct();\n-        URLPermission perm1 = Utils.permissionForServer(b.getUri(), \"\", headers);\n-        sm.checkPermission(perm1);\n-        if (proxy == null) {\n-            return;\n-        }\n-        URLPermission perm2 = permissionForProxy((InetSocketAddress) proxy.address());\n-        if (perm2 != null) {\n-            sm.checkPermission(perm2);\n-        }\n-    }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/OpeningHandshake.java","additions":2,"deletions":35,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -216,1 +216,1 @@\n-        public void close() throws SecurityException {\n+        public void close() {\n","filename":"test\/jdk\/java\/net\/httpclient\/DebugLoggerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.io.FilePermission;\n@@ -214,3 +213,0 @@\n-        policyFile = System.getProperty(\"java.security.policy\");\n-        out.println(policyFile);\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/FilePublisherPermsTest.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,7 +95,0 @@\n-\n-        \/\/ Added permission checks before opening the file\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"customPermission\"));\n-            sm.checkRead(p.toString());\n-        }\n","filename":"test\/jdk\/java\/net\/httpclient\/FilePublisher\/SecureZipFSProvider.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.*;\n@@ -33,1 +32,0 @@\n-import static java.nio.charset.StandardCharsets.US_ASCII;\n@@ -52,3 +50,3 @@\n-        PrivilegedAction<String> action =\n-                () -> System.getProperty(\"os.name\", \"unknown\");\n-        String osName = AccessController.doPrivileged(action);\n+        \/\/ Parses os.name directly in order to avoid depending on test\n+        \/\/ libraries in an auxiliary test class\n+        String osName = System.getProperty(\"os.name\", \"unknown\");\n@@ -154,14 +152,0 @@\n-        if (System.getSecurityManager() == null) {\n-            execute();\n-        } else {\n-            \/\/ so calling domain does not need to have socket permission\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-                    execute();\n-                    return null;\n-                }\n-            });\n-        }\n-    }\n-\n-    public void execute() {\n","filename":"test\/jdk\/java\/net\/httpclient\/ProxyServer.java","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -62,8 +60,2 @@\n-        @SuppressWarnings(\"removal\") final SecurityManager sm = System.getSecurityManager();\n-        final String hostname;\n-        if (sm == null) {\n-            hostname = serverAddr.getHostName();\n-        } else {\n-            final PrivilegedAction<String> action = () -> serverAddr.getHostName();\n-            hostname = AccessController.doPrivileged(action);\n-        }\n+        final String hostname = serverAddr.getHostName();\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/common\/TestServerConfigurator.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.security.PrivilegedExceptionAction;\n@@ -46,1 +45,4 @@\n-    static final Class<SecurityException> SE = SecurityException.class;\n+\n+    interface ExceptionAction<T> {\n+        T run() throws Exception;\n+    }\n@@ -50,1 +52,1 @@\n-        List<PrivilegedExceptionAction<?>> list = List.of(\n+        List<ExceptionAction<?>> list = List.of(\n@@ -62,1 +64,1 @@\n-        for (PrivilegedExceptionAction pa : list) {\n+        for (ExceptionAction<?> pa : list) {\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/filePerms\/FileProcessorPermissionTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import java.security.AccessController;\n@@ -199,2 +198,1 @@\n-                BodyHandlers.replacing(null),\n-                null, AccessController.getContext());\n+                BodyHandlers.replacing(null), null);\n@@ -269,2 +267,1 @@\n-                HttpResponse.BodyHandlers.replacing(null),\n-                null, AccessController.getContext());\n+                HttpResponse.BodyHandlers.replacing(null), null);\n@@ -301,2 +298,1 @@\n-                HttpResponse.BodyHandlers.replacing(null),\n-                null, AccessController.getContext());\n+                HttpResponse.BodyHandlers.replacing(null), null);\n@@ -345,2 +341,1 @@\n-                HttpResponse.BodyHandlers.replacing(null), null,\n-                AccessController.getContext());\n+                HttpResponse.BodyHandlers.replacing(null), null);\n@@ -386,2 +381,1 @@\n-                    HttpResponse.BodyHandlers.replacing(null), null,\n-                    AccessController.getContext());\n+                    HttpResponse.BodyHandlers.replacing(null), null);\n@@ -440,2 +434,1 @@\n-                    HttpResponse.BodyHandlers.replacing(null), null,\n-                    AccessController.getContext());\n+                    HttpResponse.BodyHandlers.replacing(null), null);\n@@ -464,2 +457,1 @@\n-                    HttpResponse.BodyHandlers.replacing(null), null,\n-                    AccessController.getContext());\n+                    HttpResponse.BodyHandlers.replacing(null), null);\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/AuthenticationFilterTest.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -224,1 +224,0 @@\n-                    null,\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/RawChannelTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,7 +45,0 @@\n- * <p>\n- * Using this class with a security manager requires the following\n- * permissions to be granted:\n- * <p>\n- * permission \"java.util.PropertyPermission\" \"test.src.path\", \"read\";\n- * permission java.io.FilePermission \"\/path\/to\/test\/lib\/jdk\/test\/lib\/testkeys\", \"read\";\n- * The exact path above depends on the location of the test.\n@@ -63,1 +56,0 @@\n-        boolean securityExceptions = false;\n@@ -67,7 +59,5 @@\n-            try {\n-                File f = new File(path, \"..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\");\n-                if (f.exists()) {\n-                    try (FileInputStream fis = new FileInputStream(f)) {\n-                        sslContext = init(fis);\n-                        break;\n-                    }\n+            File f = new File(path, \"..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/net\/testkeys\");\n+            if (f.exists()) {\n+                try (FileInputStream fis = new FileInputStream(f)) {\n+                    sslContext = init(fis);\n+                    break;\n@@ -75,4 +65,0 @@\n-            } catch (SecurityException e) {\n-                \/\/ catch and ignore because permission only required\n-                \/\/ for one entry on path (at most)\n-                securityExceptions = true;\n@@ -81,3 +67,0 @@\n-        if (securityExceptions) {\n-            System.out.println(\"SecurityExceptions thrown on loading testkeys\");\n-        }\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/SimpleSSLContext.java","additions":5,"deletions":22,"binary":false,"changes":27,"status":"modified"}]}