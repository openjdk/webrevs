{"files":[{"patch":"@@ -225,0 +225,11 @@\n+    public void colorSelectedFigures(Color color) {\n+        for (Figure figure : model.getSelectedFigures()) {\n+            figure.setColor(color);\n+            FigureWidget figureWidget = getWidget(figure);\n+            if (figureWidget != null) {\n+                figureWidget.refreshColor();\n+            }\n+        }\n+        validateAll();\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramScene.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,4 +29,1 @@\n-import java.awt.Component;\n-import java.awt.Graphics2D;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n+import java.awt.*;\n@@ -92,0 +89,2 @@\n+\n+    void colorSelectedFigures(Color color);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewer.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.awt.event.ActionEvent;\n@@ -102,0 +103,1 @@\n+                ColorAction.get(ColorAction.class),\n@@ -352,0 +354,4 @@\n+    public void colorSelectedFigures(Color color) {\n+        scene.colorSelectedFigures(color);\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package com.sun.hotspot.igv.view.actions;\n+\n+import com.sun.hotspot.igv.view.DiagramViewModel;\n+import com.sun.hotspot.igv.view.EditorTopComponent;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import javax.swing.*;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.awt.ActionRegistration;\n+import org.openide.util.NbBundle;\n+import org.openide.util.NbBundle.Messages;\n+\n+\n+\n+@ActionID(category = \"View\", id = \"com.sun.hotspot.igv.view.actions.ColorAction\")\n+@ActionRegistration(displayName = \"#CTL_ColorAction\")\n+@ActionReferences({\n+        @ActionReference(path = \"Menu\/View\", position = 360),\n+        @ActionReference(path = \"Shortcuts\", name = \"D-C\")\n+})\n+@Messages({\n+        \"CTL_ColorAction=Color\",\n+        \"HINT_ColorAction=Color current set of selected nodes\"\n+})\n+public final class ColorAction extends ModelAwareAction {\n+\n+    @Override\n+    protected String iconResource() {\n+        return \"com\/sun\/hotspot\/igv\/view\/images\/color.gif\"; \/\/ NOI18N\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return NbBundle.getMessage(ColorAction.class, \"HINT_ColorAction\");\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NbBundle.getMessage(ColorAction.class, \"CTL_ColorAction\");\n+    }\n+\n+    private static final ArrayList<Color> colors = new ArrayList<>(Arrays.asList(\n+            Color.RED,\n+            Color.ORANGE,\n+            Color.YELLOW,\n+            Color.GREEN,\n+            Color.CYAN,\n+            Color.BLUE,\n+            Color.MAGENTA,\n+            Color.PINK,\n+            Color.DARK_GRAY,\n+            Color.GRAY,\n+            Color.LIGHT_GRAY,\n+            Color.WHITE\n+    ));\n+\n+    private static final JButton selectedColorButton = new JButton();\n+    private static final JColorChooser colorChooser = new JColorChooser(Color.WHITE);\n+\n+    ColorAction() {\n+        selectedColorButton.setPreferredSize(new Dimension(32, 32));\n+        selectedColorButton.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, Color.BLACK));\n+        selectedColorButton.setOpaque(true);\n+        selectedColorButton.setBackground(Color.WHITE);\n+\n+        \/\/ Add a ChangeListener to react to color selection changes\n+        colorChooser.getSelectionModel().addChangeListener(e -> {\n+            Color selectedColor = colorChooser.getColor();\n+            if (selectedColor != null) {\n+                selectedColorButton.setBackground(selectedColor);\n+            }\n+        });\n+\n+        \/\/ Create a panel to display recent colors\n+        JPanel recentColorsPanel = new JPanel();\n+        recentColorsPanel.setLayout(new FlowLayout(FlowLayout.LEFT));\n+        updateColorsPanel(recentColorsPanel);\n+\n+        \/\/ Add recent colors panel below the color chooser\n+        colorChooser.setPreviewPanel(recentColorsPanel);\n+    }\n+\n+    public void performAction(DiagramViewModel model) {\n+        EditorTopComponent editor = EditorTopComponent.getActive();\n+        if (editor != null) {\n+            \/\/ Create the dialog with an OK button to select the color\n+            JDialog dialog = JColorChooser.createDialog(\n+                    null,\n+                    \"Choose a Color\",\n+                    true,\n+                    colorChooser,\n+                    e -> {\n+                        \/\/ OK button action\n+                        Color selectedColor = selectedColorButton.getBackground();\n+                        if (selectedColor != null) {\n+                            editor.colorSelectedFigures(selectedColor);\n+                        }\n+                    },\n+                    null \/\/ Cancel button action\n+            );\n+            dialog.setVisible(true);\n+        }\n+    }\n+\n+    private void updateColorsPanel(JPanel panel) {\n+        panel.removeAll();\n+        for (Color color : colors) {\n+            JButton colorButton = new JButton();\n+            colorButton.setBackground(color);\n+            colorButton.setOpaque(true);\n+            colorButton.setPreferredSize(new Dimension(16, 16));\n+            colorButton.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+            colorButton.addActionListener(e -> selectedColorButton.setBackground(color));\n+            panel.add(colorButton);\n+        }\n+        panel.add(selectedColorButton, 0);\n+        panel.revalidate();\n+        panel.repaint();\n+    }\n+\n+    @Override\n+    public boolean isEnabled(DiagramViewModel model) {\n+        return model != null && !model.getSelectedNodes().isEmpty();\n+    }\n+}\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ColorAction.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"@@ -45,1 +45,1 @@\n-        \"CTL_ExtractAction=Extract action\",\n+        \"CTL_ExtractAction=Extract\",\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ExtractAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,11 @@\n-            extraLabelWidget.setForeground(selected ? getTextColor() : Color.DARK_GRAY);\n+            if (selected) {\n+                extraLabelWidget.setForeground(getTextColor());\n+            } else {\n+                Color bg = figure.getColor();\n+                double brightness = bg.getRed() * 0.21 + bg.getGreen() * 0.72 + bg.getBlue() * 0.07;\n+                if (brightness < 150) {\n+                    extraLabelWidget.setForeground(Color.LIGHT_GRAY);\n+                } else {\n+                    extraLabelWidget.setForeground(Color.DARK_GRAY);\n+                }\n+            }\n@@ -116,1 +126,0 @@\n-        middleWidget.setBackground(f.getColor());\n@@ -146,1 +155,0 @@\n-            lw.setForeground(getTextColor());\n@@ -153,0 +161,1 @@\n+        refreshColor();\n@@ -187,0 +196,7 @@\n+    public void refreshColor() {\n+        middleWidget.setBackground(figure.getColor());\n+        for (LabelWidget lw : labelWidgets) {\n+            lw.setForeground(getTextColor());\n+        }\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/widgets\/FigureWidget.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/resources\/com\/sun\/hotspot\/igv\/view\/images\/color.gif","binary":true,"status":"added"}]}