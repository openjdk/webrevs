{"files":[{"patch":"@@ -83,1 +83,1 @@\n-    private static final JButton selectedColorButton = new JButton(\"Preview\");\n+    private static final JLabel selectedColorLabel = new JLabel(\"Preview\");\n@@ -87,18 +87,1 @@\n-        \/\/ Store the current look and feel\n-        String originalLookAndFeel = UIManager.getLookAndFeel().getClass().getName();\n-\n-        try {\n-            \/\/ Set Look and Feel specifically for selected components\n-            UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n-\n-            \/\/ Update only specific components to the Metal LAF\n-            SwingUtilities.updateComponentTreeUI(selectedColorButton);\n-            SwingUtilities.updateComponentTreeUI(colorChooser);\n-            initializeComponents();\n-        } catch (Exception ignored) {\n-        } finally {\n-            try {\n-                \/\/ Restore the original Look and Feel for the rest of the application\n-                UIManager.setLookAndFeel(originalLookAndFeel);\n-            } catch (Exception ignored) {}\n-        }\n+        initializeComponents();\n@@ -108,6 +91,6 @@\n-        selectedColorButton.setPreferredSize(new Dimension(3 * 32, 32));\n-        selectedColorButton.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, Color.BLACK));\n-        selectedColorButton.setOpaque(true);\n-        selectedColorButton.setContentAreaFilled(true); \/\/ Ensures content is filled without rounded edges\n-        selectedColorButton.setBackground(Color.WHITE);\n-        selectedColorButton.setForeground(Color.BLACK); \/\/ Set text color\n+        selectedColorLabel.setPreferredSize(new Dimension(3 * 32, 32));\n+        selectedColorLabel.setOpaque(true);\n+        selectedColorLabel.setBackground(Color.WHITE);\n+        selectedColorLabel.setForeground(Color.BLACK); \/\/ Set text color\n+        selectedColorLabel.setHorizontalAlignment(SwingConstants.CENTER); \/\/ Center the text\n+\n@@ -119,2 +102,2 @@\n-                selectedColorButton.setBackground(selectedColor);\n-                selectedColorButton.setForeground(FigureWidget.getTextColor(selectedColor));\n+                selectedColorLabel.setBackground(selectedColor);\n+                selectedColorLabel.setForeground(FigureWidget.getTextColor(selectedColor));\n@@ -131,0 +114,4 @@\n+            colorButton.setBorderPainted(false);\n+            colorButton.setRolloverEnabled(false);\n+            colorButton.setRequestFocusEnabled(false);\n+\n@@ -132,1 +119,0 @@\n-            colorButton.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n@@ -134,2 +120,2 @@\n-                selectedColorButton.setBackground(color);\n-                selectedColorButton.setForeground(FigureWidget.getTextColor(color));\n+                selectedColorLabel.setBackground(color);\n+                selectedColorLabel.setForeground(FigureWidget.getTextColor(color));\n@@ -139,1 +125,1 @@\n-        colorsPanel.add(selectedColorButton, 0);\n+        colorsPanel.add(selectedColorLabel, 0);\n@@ -164,1 +150,1 @@\n-                        Color selectedColor = selectedColorButton.getBackground();\n+                        Color selectedColor = selectedColorLabel.getBackground();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ColorAction.java","additions":18,"deletions":32,"binary":false,"changes":50,"status":"modified"}]}