{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -298,2 +298,1 @@\n-        throws NoSuchAlgorithmException, UnrecoverableKeyException\n-    {\n+        throws NoSuchAlgorithmException, UnrecoverableKeyException {\n@@ -301,0 +300,6 @@\n+        Key entryKey = internalGetKey(entry, password);\n+        return entryKey;\n+    }\n+\n+    private Key internalGetKey(Entry entry, char[] password)\n+            throws NoSuchAlgorithmException, UnrecoverableKeyException {\n@@ -324,1 +329,1 @@\n-                        new EncryptedPrivateKeyInfo(encrBytes);\n+                    new EncryptedPrivateKeyInfo(encrBytes);\n@@ -335,2 +340,2 @@\n-                new UnrecoverableKeyException(\"Private key not stored as \"\n-                                 + \"PKCS#8 EncryptedPrivateKeyInfo: \" + ioe);\n+                    new UnrecoverableKeyException(\"Private key not stored as \"\n+                            + \"PKCS#8 EncryptedPrivateKeyInfo: \" + ioe);\n@@ -341,1 +346,1 @@\n-       try {\n+        try {\n@@ -348,1 +353,1 @@\n-                        algParams.getParameterSpec(PBEParameterSpec.class);\n+                            algParams.getParameterSpec(PBEParameterSpec.class);\n@@ -395,1 +400,1 @@\n-                                        \" '\" + alias + \"' (\" +\n+                                        \" '\" + entry.alias + \"' (\" +\n@@ -436,1 +441,1 @@\n-                                        \"'\" + alias + \"' (\" +\n+                                        \"'\" + entry.alias + \"' (\" +\n@@ -453,2 +458,2 @@\n-                new UnrecoverableKeyException(\"Get Key failed: \" +\n-                                        e.getMessage());\n+                    new UnrecoverableKeyException(\"Get Key failed: \" +\n+                            e.getMessage());\n@@ -474,0 +479,5 @@\n+        Certificate[] certChain = internalGetCertificateChain(entry);\n+        return certChain;\n+    }\n+\n+    private Certificate[] internalGetCertificateChain(Entry entry) {\n@@ -481,2 +491,2 @@\n-                        privateKeyEntry.chain.length +\n-                        \"-certificate chain at alias '\" + alias + \"'\");\n+                            privateKeyEntry.chain.length +\n+                            \"-certificate chain at alias '\" + entry.alias + \"'\");\n@@ -1068,0 +1078,4 @@\n+        return internalEngineIsKeyEntry(entry);\n+    }\n+\n+    private boolean internalEngineIsKeyEntry(Entry entry) {\n@@ -1078,0 +1092,1 @@\n+\n@@ -1080,0 +1095,4 @@\n+        return internalEngineIsCertificateEntry(entry);\n+    }\n+\n+    private boolean internalEngineIsCertificateEntry(Entry entry) {\n@@ -1309,1 +1328,1 @@\n-            if (engineIsCertificateEntry(alias)) {\n+            if (internalEngineIsCertificateEntry(entry)) {\n@@ -1328,1 +1347,1 @@\n-            if (engineIsCertificateEntry(alias)) {\n+            if (internalEngineIsCertificateEntry(entry)) {\n@@ -1331,1 +1350,1 @@\n-            } else if (engineIsKeyEntry(alias)) {\n+            } else if (internalEngineIsKeyEntry(entry)) {\n@@ -1336,1 +1355,1 @@\n-                Key key = engineGetKey(alias, password);\n+                Key key = internalGetKey(entry, password);\n@@ -1338,1 +1357,1 @@\n-                    Certificate[] chain = engineGetCertificateChain(alias);\n+                    Certificate[] chain = internalGetCertificateChain(entry);\n@@ -1348,1 +1367,1 @@\n-            } else if (!engineIsKeyEntry(alias)) {\n+            } else if (!internalEngineIsKeyEntry(entry)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":39,"deletions":20,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8327461\n+ * @summary engineGetEntry in PKCS12KeyStore should be thread-safe\n+ * @library \/test\/lib ..\/..\/..\/java\/security\/testlibrary\n+ * @modules java.base\/sun.security.x509\n+ *          java.base\/sun.security.util\n+ * @build CertificateBuilder\n+ * @run main GetSetEntryTest\n+ *\/\n+\n+import java.math.BigInteger;\n+import java.security.cert.X509Certificate;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.spec.ECGenParameterSpec;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.TimeUnit;\n+import java.util.Date;\n+\n+import sun.security.testlibrary.CertificateBuilder;\n+\n+public class GetSetEntryTest {\n+\n+    public static final String TEST = \"test\";\n+\n+    public static void main(String[] args) throws Exception {\n+        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n+        char[] password = \"password\".toCharArray();\n+        KeyStore.PasswordProtection protParam = new KeyStore.PasswordProtection(password);\n+        ks.load(null, null);\n+\n+        CertificateBuilder cbld = new CertificateBuilder();\n+        KeyPairGenerator keyPairGen1 = KeyPairGenerator.getInstance(\"EC\");\n+        keyPairGen1.initialize(new ECGenParameterSpec(\"secp256r1\"));\n+        KeyPair ecKeyPair = keyPairGen1.genKeyPair();\n+\n+        long start = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(60);\n+        long end = start + TimeUnit.DAYS.toMillis(1085);\n+        boolean[] kuBitSettings = {true, false, false, false, false, true,\n+                true, false, false};\n+\n+        \/\/ Set up the EC Cert\n+        cbld.setSubjectName(\"CN=EC Test Cert, O=SomeCompany\").\n+                setPublicKey(ecKeyPair.getPublic()).\n+                setSerialNumber(new BigInteger(\"1\")).\n+                setValidity(new Date(start), new Date(end)).\n+                addSubjectKeyIdExt(ecKeyPair.getPublic()).\n+                addAuthorityKeyIdExt(ecKeyPair.getPublic()).\n+                addBasicConstraintsExt(true, true, -1).\n+                addKeyUsageExt(kuBitSettings);\n+\n+        X509Certificate ecCert = cbld.build(null, ecKeyPair.getPrivate(), \"SHA256withECDSA\");\n+\n+        KeyPairGenerator keyPairGen2 = KeyPairGenerator.getInstance(\"RSA\");\n+        keyPairGen2.initialize(4096);\n+        KeyPair rsaKeyPair = keyPairGen2.genKeyPair();\n+\n+        cbld.reset();\n+        \/\/ Set up the RSA Cert\n+        cbld.setSubjectName(\"CN=RSA Test Cert, O=SomeCompany\").\n+                setPublicKey(rsaKeyPair.getPublic()).\n+                setSerialNumber(new BigInteger(\"1\")).\n+                setValidity(new Date(start), new Date(end)).\n+                addSubjectKeyIdExt(rsaKeyPair.getPublic()).\n+                addAuthorityKeyIdExt(rsaKeyPair.getPublic()).\n+                addBasicConstraintsExt(true, true, -1).\n+                addKeyUsageExt(kuBitSettings);\n+\n+        X509Certificate rsaCert = cbld.build(null, rsaKeyPair.getPrivate(), \"SHA256withRSA\");\n+\n+        KeyStore.PrivateKeyEntry ecEntry = new KeyStore.PrivateKeyEntry(ecKeyPair.getPrivate(),\n+                new X509Certificate[]{ecCert});\n+        KeyStore.PrivateKeyEntry rsaEntry = new KeyStore.PrivateKeyEntry(rsaKeyPair.getPrivate(),\n+                new X509Certificate[]{rsaCert});\n+\n+        test(ks, ecEntry, rsaEntry, protParam);\n+    }\n+\n+    private static final int MAX_ITERATIONS = 100;\n+\n+    private static void test(KeyStore ks, KeyStore.PrivateKeyEntry ec,\n+                             KeyStore.PrivateKeyEntry rsa,\n+                             KeyStore.PasswordProtection protParam)\n+            throws Exception {\n+        ks.setEntry(TEST, ec, protParam);\n+\n+        AtomicBoolean syncIssue = new AtomicBoolean(false);\n+\n+        Thread thread = new Thread(() -> {\n+            int iterations = 0;\n+            while (!syncIssue.get() && iterations < MAX_ITERATIONS) {\n+                try {\n+                    ks.setEntry(TEST, ec, protParam);\n+                    ks.setEntry(TEST, rsa, protParam);\n+                } catch (Exception ex) {\n+                    syncIssue.set(true);\n+                    ex.printStackTrace();\n+                    System.out.println(\"Test failed\");\n+                    System.exit(1);\n+                }\n+                iterations++;\n+            }\n+        });\n+        thread.start();\n+\n+        int iterations = 0;\n+        while (!syncIssue.get() && iterations < MAX_ITERATIONS) {\n+            try {\n+                ks.getEntry(TEST, protParam);\n+            } catch (Exception ex) {\n+                syncIssue.set(true);\n+                ex.printStackTrace();\n+                System.out.println(\"Test failed\");\n+                System.exit(1);\n+            }\n+            iterations++;\n+        }\n+\n+        thread.join();\n+\n+        if (!syncIssue.get()) {\n+            System.out.println(\"Test completed successfully\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/GetSetEntryTest.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"}]}