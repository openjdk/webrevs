{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import java.io.PrintWriter;\n@@ -30,0 +31,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -32,0 +34,1 @@\n+import jdk.jpackage.internal.Log;\n@@ -94,1 +97,1 @@\n-    private static boolean isBundlerSupported(String bundlerClass) {\n+    private static boolean isBundlerSupportedImpl(String bundlerClass) {\n@@ -108,0 +111,24 @@\n+    private static boolean isBundlerSupported(String bundlerClass) {\n+        AtomicBoolean reply = new AtomicBoolean();\n+        try {\n+            \/\/ Capture jpackage's activity on configuring bundlers.\n+            \/\/ Log configuration is thread-local.\n+            \/\/ Call Log.setPrintWriter and Log.setVerbose in a separate\n+            \/\/ thread to keep the main log configuration intact.\n+            var thread = new Thread(() -> {\n+                Log.setPrintWriter(new PrintWriter(System.out), new PrintWriter(System.err));\n+                Log.setVerbose();\n+                try {\n+                    reply.set(isBundlerSupportedImpl(bundlerClass));\n+                } finally {\n+                    Log.flush();\n+                }\n+            });\n+            thread.run();\n+            thread.join();\n+        } catch (InterruptedException ex) {\n+            Functional.rethrowUnchecked(ex);\n+        }\n+        return reply.get();\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageType.java","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"}]}