{"files":[{"patch":"@@ -1382,42 +1382,0 @@\n-    \/**\n-     * Applies the specified queries to the set of ObjectInstances.\n-     *\/\n-    private Set<ObjectInstance>\n-            filterListOfObjectInstances(Set<ObjectInstance> list,\n-                                        QueryExp query) {\n-        \/\/ Null query.\n-        \/\/\n-        if (query == null) {\n-            return list;\n-        } else {\n-            Set<ObjectInstance> result = new HashSet<>();\n-            \/\/ Access the filter.\n-            \/\/\n-            for (ObjectInstance oi : list) {\n-                boolean res = false;\n-                MBeanServer oldServer = QueryEval.getMBeanServer();\n-                query.setMBeanServer(server);\n-                try {\n-                    res = query.apply(oi.getObjectName());\n-                } catch (Exception e) {\n-                    res = false;\n-                } finally {\n-                    \/*\n-                     * query.setMBeanServer is probably\n-                     * QueryEval.setMBeanServer so put back the old\n-                     * value.  Since that method uses a ThreadLocal\n-                     * variable, this code is only needed for the\n-                     * unusual case where the user creates a custom\n-                     * QueryExp that calls a nested query on another\n-                     * MBeanServer.\n-                     *\/\n-                    query.setMBeanServer(oldServer);\n-                }\n-                if (res) {\n-                    result.add(oi);\n-                }\n-            }\n-            return result;\n-        }\n-    }\n-\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/interceptor\/DefaultMBeanServerInterceptor.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -105,2 +105,0 @@\n-                final String pf = passwordFile;\n-                final String hashPass = hashPasswords;\n@@ -110,1 +108,1 @@\n-                                                new FileLoginConfig(pf, hashPass));\n+                                                new FileLoginConfig(passwordFile, hashPasswords));\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/security\/JMXPluggableAuthenticator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -987,1 +987,1 @@\n-    @SuppressWarnings({\"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ManagementFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -961,2 +961,0 @@\n-                    final Object obj = targetObject;\n-                    final String className = opClassName;\n@@ -965,1 +963,1 @@\n-                    final ClassLoader targetClassLoader = obj.getClass().getClassLoader();\n+                    final ClassLoader targetClassLoader = targetObject.getClass().getClassLoader();\n@@ -967,1 +965,1 @@\n-                        targetClass = Class.forName(className, false, targetClassLoader);\n+                        targetClass = Class.forName(opClassName, false, targetClassLoader);\n@@ -1098,1 +1096,0 @@\n-            final String className = opClassName;\n@@ -1101,3 +1098,2 @@\n-                Class<?> clz = Class.forName(className, false,\n-                                             targetClassLoader);\n-                if (!rmmbClass.isAssignableFrom(clz))\n+                Class<?> clz = Class.forName(opClassName, false, targetClassLoader);\n+                if (!rmmbClass.isAssignableFrom(clz)) {\n@@ -1105,1 +1101,1 @@\n-                else\n+                } else {\n@@ -1107,0 +1103,1 @@\n+                }\n@@ -2610,1 +2607,1 @@\n-                    return clr.loadClass(className);\n+                return clr.loadClass(className);\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/RequiredModelMBean.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -459,2 +459,4 @@\n-        } catch (InstanceAlreadyExistsException | MBeanRegistrationException | NotCompliantMBeanException e) {\n-            \/\/ ignore the exception, e.g. an instance with the object name exists\n+        } catch (InstanceAlreadyExistsException iaee) {\n+            \/\/ if an instance with the object name exists in the MBeanServer, ignore the exception\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n@@ -504,2 +506,4 @@\n-        } catch (InstanceNotFoundException | MBeanRegistrationException | RuntimeOperationsException e) {\n-            \/\/ ignore exception\n+        } catch (InstanceNotFoundException infe) {\n+            \/\/ ignore exception if not found\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ManagementFactoryHelper.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}