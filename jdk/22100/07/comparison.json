{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,4 +42,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n@@ -67,1 +63,0 @@\n-import javax.management.MBeanPermission;\n@@ -73,1 +68,0 @@\n-import javax.management.MBeanTrustPermission;\n@@ -251,3 +245,0 @@\n-        checkMBeanPermission(className, null, null, \"instantiate\");\n-        checkMBeanPermission(className, null, name, \"registerMBean\");\n-\n@@ -284,2 +275,0 @@\n-        checkMBeanTrustPermission(theClass);\n-\n@@ -312,3 +301,0 @@\n-        checkMBeanPermission(infoClassName, null, name, \"registerMBean\");\n-        checkMBeanTrustPermission(theClass);\n-\n@@ -420,2 +406,0 @@\n-        checkMBeanPermission(instance, null, name, \"unregisterMBean\");\n-\n@@ -454,2 +438,0 @@\n-        checkMBeanPermission(instance, null, name, \"getObjectInstance\");\n-\n@@ -462,33 +444,1 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            \/\/ Check if the caller has the right to invoke 'queryMBeans'\n-            \/\/\n-            checkMBeanPermission((String) null, null, null, \"queryMBeans\");\n-\n-            \/\/ Perform query without \"query\".\n-            \/\/\n-            Set<ObjectInstance> list = queryMBeansImpl(name, null);\n-\n-            \/\/ Check if the caller has the right to invoke 'queryMBeans'\n-            \/\/ on each specific classname\/objectname in the list.\n-            \/\/\n-            Set<ObjectInstance> allowedList = new HashSet<>(list.size());\n-            for (ObjectInstance oi : list) {\n-                try {\n-                    checkMBeanPermission(oi.getClassName(), null,\n-                                         oi.getObjectName(), \"queryMBeans\");\n-                    allowedList.add(oi);\n-                } catch (SecurityException e) {\n-                    \/\/ OK: Do not add this ObjectInstance to the list\n-                }\n-            }\n-\n-            \/\/ Apply query to allowed MBeans only.\n-            \/\/\n-            return filterListOfObjectInstances(allowedList, query);\n-        } else {\n-            \/\/ Perform query.\n-            \/\/\n-            return queryMBeansImpl(name, query);\n-        }\n+        return queryMBeansImpl(name, query);\n@@ -507,40 +457,1 @@\n-        Set<ObjectName> queryList;\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            \/\/ Check if the caller has the right to invoke 'queryNames'\n-            \/\/\n-            checkMBeanPermission((String) null, null, null, \"queryNames\");\n-\n-            \/\/ Perform query without \"query\".\n-            \/\/\n-            Set<ObjectInstance> list = queryMBeansImpl(name, null);\n-\n-            \/\/ Check if the caller has the right to invoke 'queryNames'\n-            \/\/ on each specific classname\/objectname in the list.\n-            \/\/\n-            Set<ObjectInstance> allowedList = new HashSet<>(list.size());\n-            for (ObjectInstance oi : list) {\n-                try {\n-                    checkMBeanPermission(oi.getClassName(), null,\n-                                         oi.getObjectName(), \"queryNames\");\n-                    allowedList.add(oi);\n-                } catch (SecurityException e) {\n-                    \/\/ OK: Do not add this ObjectInstance to the list\n-                }\n-            }\n-\n-            \/\/ Apply query to allowed MBeans only.\n-            \/\/\n-            Set<ObjectInstance> queryObjectInstanceList =\n-                filterListOfObjectInstances(allowedList, query);\n-            queryList = new HashSet<>(queryObjectInstanceList.size());\n-            for (ObjectInstance oi : queryObjectInstanceList) {\n-                queryList.add(oi.getObjectName());\n-            }\n-        } else {\n-            \/\/ Perform query.\n-            \/\/\n-            queryList = queryNamesImpl(name, query);\n-        }\n-        return queryList;\n+        return queryNamesImpl(name, query);\n@@ -565,4 +476,0 @@\n-\n-        \/* No Permission check *\/\n-        \/\/ isRegistered is always unchecked as per JMX spec.\n-\n@@ -573,31 +480,1 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            \/\/ Check if the caller has the right to invoke 'getDomains'\n-            \/\/\n-            checkMBeanPermission((String) null, null, null, \"getDomains\");\n-\n-            \/\/ Return domains\n-            \/\/\n-            String[] domains = repository.getDomains();\n-\n-            \/\/ Check if the caller has the right to invoke 'getDomains'\n-            \/\/ on each specific domain in the list.\n-            \/\/\n-            List<String> result = new ArrayList<>(domains.length);\n-            for (int i = 0; i < domains.length; i++) {\n-                try {\n-                    ObjectName dom = Util.newObjectName(domains[i] + \":x=x\");\n-                    checkMBeanPermission((String) null, null, dom, \"getDomains\");\n-                    result.add(domains[i]);\n-                } catch (SecurityException e) {\n-                    \/\/ OK: Do not add this domain to the list\n-                }\n-            }\n-\n-            \/\/ Make an array from result.\n-            \/\/\n-            return result.toArray(new String[result.size()]);\n-        } else {\n-            return repository.getDomains();\n-        }\n+        return repository.getDomains();\n@@ -633,1 +510,0 @@\n-        checkMBeanPermission(instance, attribute, name, \"getAttribute\");\n@@ -667,27 +543,1 @@\n-        final String[] allowedAttributes;\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm == null)\n-            allowedAttributes = attributes;\n-        else {\n-            final String classname = getClassName(instance);\n-\n-            \/\/ Check if the caller has the right to invoke 'getAttribute'\n-            \/\/\n-            checkMBeanPermission(classname, null, name, \"getAttribute\");\n-\n-            \/\/ Check if the caller has the right to invoke 'getAttribute'\n-            \/\/ on each specific attribute\n-            \/\/\n-            List<String> allowedList = new ArrayList<>(attributes.length);\n-            for (String attr : attributes) {\n-                try {\n-                    checkMBeanPermission(classname, attr, name, \"getAttribute\");\n-                    allowedList.add(attr);\n-                } catch (SecurityException e) {\n-                    \/\/ OK: Do not add this attribute to the list\n-                }\n-            }\n-            allowedAttributes =\n-                    allowedList.toArray(new String[allowedList.size()]);\n-        }\n+        final String[] allowedAttributes = attributes;\n@@ -728,1 +578,0 @@\n-        checkMBeanPermission(instance, attribute.getName(), name, \"setAttribute\");\n@@ -759,11 +608,1 @@\n-        final AttributeList allowedAttributes;\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm == null)\n-            allowedAttributes = attributes;\n-        else {\n-            String classname = getClassName(instance);\n-\n-            \/\/ Check if the caller has the right to invoke 'setAttribute'\n-            \/\/\n-            checkMBeanPermission(classname, null, name, \"setAttribute\");\n+        final AttributeList allowedAttributes = attributes;\n@@ -771,14 +610,0 @@\n-            \/\/ Check if the caller has the right to invoke 'setAttribute'\n-            \/\/ on each specific attribute\n-            \/\/\n-            allowedAttributes = new AttributeList(attributes.size());\n-            for (Attribute attribute : attributes.asList()) {\n-                try {\n-                    checkMBeanPermission(classname, attribute.getName(),\n-                                         name, \"setAttribute\");\n-                    allowedAttributes.add(attribute);\n-                } catch (SecurityException e) {\n-                    \/\/ OK: Do not add this attribute to the list\n-                }\n-            }\n-        }\n@@ -801,1 +626,0 @@\n-        checkMBeanPermission(instance, operationName, name, \"invoke\");\n@@ -925,2 +749,0 @@\n-            checkMBeanPermission(classname, null, logicalName, \"registerMBean\");\n-\n@@ -1162,1 +984,0 @@\n-        checkMBeanPermission(instance, null, name, \"addNotificationListener\");\n@@ -1291,1 +1112,0 @@\n-        checkMBeanPermission(instance, null, name, \"removeNotificationListener\");\n@@ -1359,2 +1179,0 @@\n-        checkMBeanPermission(mbi.getClassName(), null, name, \"getMBeanInfo\");\n-\n@@ -1368,1 +1186,0 @@\n-        checkMBeanPermission(instance, null, name, \"isInstanceOf\");\n@@ -1410,1 +1227,0 @@\n-        checkMBeanPermission(instance, null, mbeanName, \"getClassLoaderFor\");\n@@ -1425,1 +1241,0 @@\n-            checkMBeanPermission((String) null, null, null, \"getClassLoader\");\n@@ -1430,1 +1245,0 @@\n-        checkMBeanPermission(instance, null, loaderName, \"getClassLoader\");\n@@ -1568,42 +1382,0 @@\n-    \/**\n-     * Applies the specified queries to the set of ObjectInstances.\n-     *\/\n-    private Set<ObjectInstance>\n-            filterListOfObjectInstances(Set<ObjectInstance> list,\n-                                        QueryExp query) {\n-        \/\/ Null query.\n-        \/\/\n-        if (query == null) {\n-            return list;\n-        } else {\n-            Set<ObjectInstance> result = new HashSet<>();\n-            \/\/ Access the filter.\n-            \/\/\n-            for (ObjectInstance oi : list) {\n-                boolean res = false;\n-                MBeanServer oldServer = QueryEval.getMBeanServer();\n-                query.setMBeanServer(server);\n-                try {\n-                    res = query.apply(oi.getObjectName());\n-                } catch (Exception e) {\n-                    res = false;\n-                } finally {\n-                    \/*\n-                     * query.setMBeanServer is probably\n-                     * QueryEval.setMBeanServer so put back the old\n-                     * value.  Since that method uses a ThreadLocal\n-                     * variable, this code is only needed for the\n-                     * unusual case where the user creates a custom\n-                     * QueryExp that calls a nested query on another\n-                     * MBeanServer.\n-                     *\/\n-                    query.setMBeanServer(oldServer);\n-                }\n-                if (res) {\n-                    result.add(oi);\n-                }\n-            }\n-            return result;\n-        }\n-    }\n-\n@@ -1752,50 +1524,0 @@\n-    private static void checkMBeanPermission(DynamicMBean mbean,\n-                                             String member,\n-                                             ObjectName objectName,\n-                                             String actions) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            checkMBeanPermission(safeGetClassName(mbean),\n-                                 member,\n-                                 objectName,\n-                                 actions);\n-        }\n-    }\n-\n-    private static void checkMBeanPermission(String classname,\n-                                             String member,\n-                                             ObjectName objectName,\n-                                             String actions) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            Permission perm = new MBeanPermission(classname,\n-                                                  member,\n-                                                  objectName,\n-                                                  actions);\n-            sm.checkPermission(perm);\n-        }\n-    }\n-\n-    private static void checkMBeanTrustPermission(final Class<?> theClass)\n-        throws SecurityException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            Permission perm = new MBeanTrustPermission(\"register\");\n-            PrivilegedAction<ProtectionDomain> act =\n-                new PrivilegedAction<>() {\n-                    public ProtectionDomain run() {\n-                        return theClass.getProtectionDomain();\n-                    }\n-                };\n-            @SuppressWarnings(\"removal\")\n-            ProtectionDomain pd = AccessController.doPrivileged(act);\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext acc =\n-                new AccessControlContext(new ProtectionDomain[] { pd });\n-            sm.checkPermission(perm, acc);\n-        }\n-    }\n-\n@@ -2009,1 +1731,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -2011,6 +1732,1 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public ModifiableClassLoaderRepository run() {\n-                return instantiator != null ? instantiator.getClassLoaderRepository() : null;\n-            }\n-        });\n+        return instantiator != null ? instantiator.getClassLoaderRepository() : null;\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/interceptor\/DefaultMBeanServerInterceptor.java","additions":7,"deletions":291,"binary":false,"changes":298,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.Permission;\n@@ -37,1 +36,0 @@\n-import javax.management.MBeanPermission;\n@@ -41,1 +39,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -195,1 +192,0 @@\n-        ReflectUtil.checkPackageAccess(className);\n@@ -283,14 +279,1 @@\n-        ClassLoader instance = loadersWithNames.get(name);\n-        if (instance != null) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                Permission perm =\n-                        new MBeanPermission(instance.getClass().getName(),\n-                        null,\n-                        name,\n-                        \"getClassLoader\");\n-                sm.checkPermission(perm);\n-            }\n-        }\n-        return instance;\n+        return loadersWithNames.get(name);\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/ClassLoaderRepositorySupport.java","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -304,1 +303,0 @@\n-        ReflectUtil.checkPackageAccess(enumClass);\n@@ -429,1 +427,0 @@\n-        ReflectUtil.checkPackageAccess(c);\n@@ -1122,1 +1119,0 @@\n-                ReflectUtil.checkPackageAccess(targetClass);\n@@ -1378,1 +1374,0 @@\n-                ReflectUtil.checkPackageAccess(max.constructor.getDeclaringClass());\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/DefaultMXBeanMappingFactory.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.jmx.mbeanserver;\n-\n-import java.security.PrivilegedAction;\n-\n-\/**\n- * Utility class to be used by the method {@code AccessControler.doPrivileged}\n- * to get a system property.\n- *\n- * @since 1.5\n- *\/\n-public class GetPropertyAction implements PrivilegedAction<String> {\n-    private final String key;\n-\n-    public GetPropertyAction(String key) {\n-        this.key = key;\n-    }\n-\n-    public String run() {\n-        return System.getProperty(key);\n-    }\n-}\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/GetPropertyAction.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,0 @@\n-import java.security.AccessController;\n@@ -60,1 +59,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -69,6 +67,1 @@\n-    public static final boolean ALLOW_NONPUBLIC_MBEAN;\n-    static {\n-        @SuppressWarnings(\"removal\")\n-        String val = AccessController.doPrivileged(new GetPropertyAction(\"jdk.jmx.mbeans.allowNonPublic\"));\n-        ALLOW_NONPUBLIC_MBEAN = Boolean.parseBoolean(val);\n-    }\n+    public static final boolean ALLOW_NONPUBLIC_MBEAN = Boolean.parseBoolean(System.getProperty(\"jdk.jmx.mbeans.allowNonPublic\"));\n@@ -279,1 +272,0 @@\n-        ReflectUtil.checkPackageAccess(mbeanInterface);\n@@ -404,1 +396,0 @@\n-            boolean packageAccess = false;\n@@ -411,5 +402,0 @@\n-                        \/\/ Avoid checking access more than once per annotation\n-                        if (!packageAccess) {\n-                            ReflectUtil.checkPackageAccess(c);\n-                            packageAccess = true;\n-                        }\n@@ -563,1 +549,0 @@\n-                    ReflectUtil.checkPackageAccess(readMethod.getDeclaringClass());\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/Introspector.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,0 @@\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n@@ -51,1 +47,0 @@\n-import javax.management.MBeanPermission;\n@@ -55,1 +50,0 @@\n-import javax.management.MBeanServerPermission;\n@@ -235,7 +229,1 @@\n-            SecureClassLoaderRepository(AccessController.doPrivileged(new PrivilegedAction<>() {\n-                @Override\n-                public ClassLoaderRepository run() {\n-                    return fInstantiator.getClassLoaderRepository();\n-                }\n-            })\n-        );\n+            SecureClassLoaderRepository(fInstantiator.getClassLoaderRepository());\n@@ -950,3 +938,0 @@\n-        \/* Permission check *\/\n-        checkMBeanPermission(className, null, null, \"instantiate\");\n-\n@@ -987,3 +972,0 @@\n-        \/* Permission check *\/\n-        checkMBeanPermission(className, null, null, \"instantiate\");\n-\n@@ -1025,3 +1007,0 @@\n-        \/* Permission check *\/\n-        checkMBeanPermission(className, null, null, \"instantiate\");\n-\n@@ -1068,3 +1047,0 @@\n-        \/* Permission check *\/\n-        checkMBeanPermission(className, null, null, \"instantiate\");\n-\n@@ -1115,2 +1091,0 @@\n-        \/* Permission check *\/\n-        \/\/ This call requires MBeanPermission 'getClassLoaderFor'\n@@ -1148,2 +1122,0 @@\n-        \/* Permission check *\/\n-        \/\/ This call requires MBeanPermission 'getClassLoaderRepository'\n@@ -1200,10 +1172,0 @@\n-        \/* Permission check *\/\n-        \/\/ Make this call just to force the 'getClassLoader'\n-        \/\/ permission check\n-        try {\n-            getClassLoader(loaderName);\n-        } catch (SecurityException e) {\n-            throw e;\n-        } catch (Exception e) {\n-        }\n-\n@@ -1225,8 +1187,1 @@\n-            AccessController.doPrivileged(new PrivilegedExceptionAction<>() {\n-                public Object run() throws Exception {\n-                    mbsInterceptor.registerMBean(\n-                            mBeanServerDelegateObject,\n-                            MBeanServerDelegate.DELEGATE_NAME);\n-                    return null;\n-                }\n-            });\n+            mbsInterceptor.registerMBean(mBeanServerDelegateObject, MBeanServerDelegate.DELEGATE_NAME);\n@@ -1254,7 +1209,1 @@\n-        final ModifiableClassLoaderRepository loaders = AccessController.doPrivileged(new PrivilegedAction<>() {\n-\n-            @Override\n-            public ModifiableClassLoaderRepository run() {\n-                return instantiator.getClassLoaderRepository();\n-            }\n-        });\n+        final ModifiableClassLoaderRepository loaders = instantiator.getClassLoaderRepository();\n@@ -1269,0 +1218,1 @@\n+             *\/\n@@ -1270,10 +1220,0 @@\n-               If this class (JmxMBeanServer) was not loaded by the\n-               system class loader or a parent of it, then the caller\n-               must have RuntimePermission(\"getClassLoader\") for the\n-               getSystemClassLoader() call to succeed.  If the caller\n-               does not have that permission, any call to\n-               Class.getClassLoader() will fail.  Since there are lots\n-               of those in JMX, we better throw the exception now.\n-\n-               This permission question is irrelevant when JMX is part\n-               of J2SE (as of 1.5). *\/\n@@ -1344,2 +1284,0 @@\n-        \/* Permission check *\/\n-        checkMBeanPermission(null, null, null, \"getClassLoaderRepository\");\n@@ -1428,2 +1366,0 @@\n-        checkNewMBeanServerPermission();\n-\n@@ -1496,28 +1432,0 @@\n-\n-    \/\/ SECURITY CHECKS\n-    \/\/----------------\n-\n-    private static void checkMBeanPermission(String classname,\n-                                             String member,\n-                                             ObjectName objectName,\n-                                             String actions)\n-        throws SecurityException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            Permission perm = new MBeanPermission(classname,\n-                                                  member,\n-                                                  objectName,\n-                                                  actions);\n-            sm.checkPermission(perm);\n-        }\n-    }\n-\n-    private static void checkNewMBeanServerPermission() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            Permission perm = new MBeanServerPermission(\"newMBeanServer\");\n-            sm.checkPermission(perm);\n-        }\n-    }\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/JmxMBeanServer.java","additions":5,"deletions":97,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,5 +36,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.Permissions;\n-import java.security.PrivilegedAction;\n@@ -47,1 +42,0 @@\n-import javax.management.MBeanPermission;\n@@ -56,1 +50,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -98,1 +91,0 @@\n-        ReflectUtil.checkPackageAccess(className);\n@@ -172,1 +164,0 @@\n-                ReflectUtil.checkPackageAccess(signature[i]);\n@@ -213,2 +204,0 @@\n-        checkMBeanPermission(theClass, null, null, \"instantiate\");\n-\n@@ -226,1 +215,0 @@\n-            ReflectUtil.checkPackageAccess(theClass);\n@@ -265,2 +253,0 @@\n-        checkMBeanPermission(theClass, null, null, \"instantiate\");\n-\n@@ -296,1 +282,0 @@\n-            ReflectUtil.checkPackageAccess(theClass);\n@@ -411,1 +396,0 @@\n-        ReflectUtil.checkPackageAccess(className);\n@@ -614,1 +598,0 @@\n-        checkMBeanPermission((String)null, null, null, \"getClassLoaderRepository\");\n@@ -630,1 +613,0 @@\n-        ReflectUtil.checkPackageAccess(className);\n@@ -681,1 +663,0 @@\n-                ReflectUtil.checkPackageAccess(signature[i]);\n@@ -718,25 +699,0 @@\n-    private static void checkMBeanPermission(Class<?> clazz,\n-                                             String member,\n-                                             ObjectName objectName,\n-                                             String actions) {\n-        if (clazz != null) {\n-            checkMBeanPermission(clazz.getName(), member, objectName, actions);\n-        }\n-    }\n-\n-    private static void checkMBeanPermission(String classname,\n-                                             String member,\n-                                             ObjectName objectName,\n-                                             String actions)\n-        throws SecurityException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            Permission perm = new MBeanPermission(classname,\n-                                                  member,\n-                                                  objectName,\n-                                                  actions);\n-            sm.checkPermission(perm);\n-        }\n-    }\n-\n@@ -755,0 +711,2 @@\n+        } else {\n+            return clr.getClassLoader(name);\n@@ -756,14 +714,0 @@\n-        \/\/ Restrict to getClassLoader permission only\n-        Permissions permissions = new Permissions();\n-        permissions.add(new MBeanPermission(\"*\", null, name, \"getClassLoader\"));\n-        ProtectionDomain protectionDomain = new ProtectionDomain(null, permissions);\n-        ProtectionDomain[] domains = {protectionDomain};\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext ctx = new AccessControlContext(domains);\n-        @SuppressWarnings(\"removal\")\n-        ClassLoader loader = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            public ClassLoader run() {\n-                return clr.getClassLoader(name);\n-            }\n-        }, ctx);\n-        return loader;\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/MBeanInstantiator.java","additions":3,"deletions":59,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -179,1 +178,0 @@\n-        ReflectUtil.checkPackageAccess(mbeanType);\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/MBeanIntrospector.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -135,1 +134,0 @@\n-        ReflectUtil.checkPackageAccess(mbeanInterfaceType);\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/MBeanSupport.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.security.AccessController;\n@@ -148,3 +147,1 @@\n-            @SuppressWarnings(\"removal\")\n-            String multiname = AccessController.doPrivileged(\n-                    new GetPropertyAction(\"jmx.mxbean.multiname\"));\n+            String multiname = System.getProperty(\"jmx.mxbean.multiname\");\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/MXBeanLookup.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -64,1 +63,0 @@\n-            ReflectUtil.checkPackageAccess(name);\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/ObjectInputStreamWithLoader.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -178,9 +177,1 @@\n-        GetPropertyAction act = new GetPropertyAction(\"jmx.invoke.getters\");\n-        String invokeGettersS;\n-        try {\n-            invokeGettersS = AccessController.doPrivileged(act);\n-        } catch (Exception e) {\n-            \/\/ We don't expect an exception here but if we get one then\n-            \/\/ we'll simply assume that the property is not set.\n-            invokeGettersS = null;\n-        }\n+        String invokeGettersS = System.getProperty(\"jmx.invoke.getters\");\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/PerInterface.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -399,14 +395,0 @@\n-                    \/\/ Skip security check if NotificationBufferFilter is not overloaded\n-                    if (!(filter instanceof ServerNotifForwarder.NotifForwarderBufferFilter)) {\n-                        try {\n-                            ServerNotifForwarder.checkMBeanPermission(this.mBeanServer,\n-                                                      candidate.getObjectName(),\"addNotificationListener\");\n-                        } catch (InstanceNotFoundException | SecurityException e) {\n-                            if (logger.debugOn()) {\n-                                logger.debug(\"fetchNotifications\", \"candidate: \" + candidate + \" skipped. exception \" + e);\n-                            }\n-                            ++nextSeq;\n-                            continue;\n-                        }\n-                    }\n-\n@@ -656,1 +638,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -662,13 +643,4 @@\n-        try {\n-            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws InstanceNotFoundException {\n-                    mBeanServer.addNotificationListener(name,\n-                                                        listener,\n-                                                        filter,\n-                                                        handback);\n-                    return null;\n-                }\n-            });\n-        } catch (Exception e) {\n-            throw extractException(e);\n-        }\n+        mBeanServer.addNotificationListener(name,\n+                                                listener,\n+                                                filter,\n+                                                handback);\n@@ -677,1 +649,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -681,10 +652,1 @@\n-        try {\n-            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws Exception {\n-                    mBeanServer.removeNotificationListener(name, listener);\n-                    return null;\n-                }\n-            });\n-        } catch (Exception e) {\n-            throw extractException(e);\n-        }\n+        mBeanServer.removeNotificationListener(name, listener);\n@@ -693,1 +655,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -696,6 +657,0 @@\n-        PrivilegedAction<Set<ObjectName>> act =\n-            new PrivilegedAction<>() {\n-                public Set<ObjectName> run() {\n-                    return mBeanServer.queryNames(name, query);\n-                }\n-            };\n@@ -703,1 +658,1 @@\n-            return AccessController.doPrivileged(act);\n+            return mBeanServer.queryNames(name, query);\n@@ -711,1 +666,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -715,6 +669,0 @@\n-        PrivilegedExceptionAction<Boolean> act =\n-            new PrivilegedExceptionAction<>() {\n-                public Boolean run() throws InstanceNotFoundException {\n-                    return mbs.isInstanceOf(name, className);\n-                }\n-            };\n@@ -722,1 +670,1 @@\n-            return AccessController.doPrivileged(act);\n+            return mbs.isInstanceOf(name, className);\n@@ -828,11 +776,0 @@\n-    \/**\n-     * Iterate until we extract the real exception\n-     * from a stack of PrivilegedActionExceptions.\n-     *\/\n-    private static Exception extractException(Exception e) {\n-        while (e instanceof PrivilegedActionException) {\n-            e = ((PrivilegedActionException)e).getException();\n-        }\n-        return e;\n-    }\n-\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/internal\/ArrayNotificationBuffer.java","additions":8,"deletions":71,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -36,3 +36,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -59,3 +56,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc;\n-\n@@ -142,1 +136,0 @@\n-        this.acc = AccessController.getContext();\n@@ -422,1 +415,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -424,32 +416,7 @@\n-            final AccessControlContext ctxt = ClientNotifForwarder.this.acc;\n-            \/\/ if ctxt is null, log a config message and throw a\n-            \/\/ SecurityException.\n-            if (ctxt == null) {\n-                logOnce(\"AccessControlContext must not be null.\",null);\n-                throw new SecurityException(\"AccessControlContext must not be null\");\n-            }\n-            return AccessController.doPrivileged(\n-                new PrivilegedAction<>() {\n-                    public ClassLoader run() {\n-                        try {\n-                            \/\/ get context class loader - may throw\n-                            \/\/ SecurityException - though unlikely.\n-                            final ClassLoader previous =\n-                                Thread.currentThread().getContextClassLoader();\n-\n-                            \/\/ if nothing needs to be done, break here...\n-                            if (loader == previous) return previous;\n-\n-                            \/\/ reset context class loader - may throw\n-                            \/\/ SecurityException\n-                            Thread.currentThread().setContextClassLoader(loader);\n-                            return previous;\n-                        } catch (SecurityException x) {\n-                            logOnce(\"Permission to set ContextClassLoader missing. \" +\n-                                    \"Notifications will not be dispatched. \" +\n-                                    \"Please check your Java policy configuration: \" +\n-                                    x, x);\n-                            throw x;\n-                        }\n-                    }\n-                }, ctxt);\n+            final ClassLoader previous = Thread.currentThread().getContextClassLoader();\n+\n+            \/\/ if nothing needs to be done, break here...\n+            if (loader == previous) return previous;\n+\n+            Thread.currentThread().setContextClassLoader(loader);\n+            return previous;\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/internal\/ClientNotifForwarder.java","additions":7,"deletions":40,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -32,4 +32,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -88,3 +84,0 @@\n-        \/\/ Explicitly check MBeanPermission for addNotificationListener\n-        \/\/\n-        checkMBeanPermission(name, \"addNotificationListener\");\n@@ -95,17 +88,6 @@\n-        try {\n-            @SuppressWarnings(\"removal\")\n-            boolean instanceOf =\n-            AccessController.doPrivileged(\n-                    new PrivilegedExceptionAction<>() {\n-                        public Boolean run() throws InstanceNotFoundException {\n-                            return mbeanServer.isInstanceOf(name, broadcasterClass);\n-                        }\n-            });\n-            if (!instanceOf) {\n-                throw new IllegalArgumentException(\"The specified MBean [\" +\n-                    name + \"] is not a \" +\n-                    \"NotificationBroadcaster \" +\n-                    \"object.\");\n-            }\n-        } catch (PrivilegedActionException e) {\n-            throw (InstanceNotFoundException) extractException(e);\n+        boolean instanceOf = mbeanServer.isInstanceOf(name, broadcasterClass);\n+        if (!instanceOf) {\n+            throw new IllegalArgumentException(\"The specified MBean [\" +\n+                name + \"] is not a \" +\n+                \"NotificationBroadcaster \" +\n+                \"object.\");\n@@ -157,3 +139,0 @@\n-        \/\/ Explicitly check MBeanPermission for removeNotificationListener\n-        \/\/\n-        checkMBeanPermission(name, \"removeNotificationListener\");\n@@ -376,40 +355,0 @@\n-    \/**\n-     * Explicitly check the MBeanPermission for\n-     * the current access control context.\n-     *\/\n-    public final void checkMBeanPermission(\n-            final ObjectName name, final String actions)\n-            throws InstanceNotFoundException, SecurityException {\n-        checkMBeanPermission(mbeanServer,name,actions);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    static void checkMBeanPermission(\n-            final MBeanServer mbs, final ObjectName name, final String actions)\n-            throws InstanceNotFoundException, SecurityException {\n-\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            AccessControlContext acc = AccessController.getContext();\n-            ObjectInstance oi;\n-            try {\n-                oi = AccessController.doPrivileged(\n-                    new PrivilegedExceptionAction<>() {\n-                        public ObjectInstance run()\n-                        throws InstanceNotFoundException {\n-                            return mbs.getObjectInstance(name);\n-                        }\n-                });\n-            } catch (PrivilegedActionException e) {\n-                throw (InstanceNotFoundException) extractException(e);\n-            }\n-            String classname = oi.getClassName();\n-            MBeanPermission perm = new MBeanPermission(\n-                classname,\n-                null,\n-                name,\n-                actions);\n-            sm.checkPermission(perm, acc);\n-        }\n-    }\n-\n@@ -422,3 +361,0 @@\n-            if (checkNotificationEmission) {\n-                checkMBeanPermission(name, \"addNotificationListener\");\n-            }\n@@ -447,11 +383,0 @@\n-    \/**\n-     * Iterate until we extract the real exception\n-     * from a stack of PrivilegedActionExceptions.\n-     *\/\n-    private static Exception extractException(Exception e) {\n-        while (e instanceof PrivilegedActionException) {\n-            e = ((PrivilegedActionException)e).getException();\n-        }\n-        return e;\n-    }\n-\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/internal\/ServerNotifForwarder.java","additions":6,"deletions":81,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -30,1 +29,0 @@\n-import java.io.FilePermission;\n@@ -32,2 +30,0 @@\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n@@ -112,1 +108,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -114,4 +109,2 @@\n-        AccessController.doPrivileged(new GetPropertyAction(\"java.home\")) +\n-        File.separatorChar + \"conf\" +\n-        File.separatorChar + \"management\" + File.separatorChar +\n-        PASSWORD_FILE_NAME;\n+        System.getProperty(\"java.home\") + File.separatorChar + \"conf\" + File.separatorChar\n+        + \"management\" + File.separatorChar + PASSWORD_FILE_NAME;\n@@ -155,1 +148,0 @@\n-    private boolean hasJavaHomePermission;\n@@ -199,8 +191,1 @@\n-            try {\n-                System.getProperty(\"java.home\");\n-                hasJavaHomePermission = true;\n-                passwordFileDisplayName = passwordFile;\n-            } catch (SecurityException e) {\n-                hasJavaHomePermission = false;\n-                passwordFileDisplayName = PASSWORD_FILE_NAME;\n-            }\n+            passwordFileDisplayName = passwordFile;\n@@ -236,12 +221,0 @@\n-        } catch (SecurityException e) {\n-            if (userSuppliedPasswordFile || hasJavaHomePermission) {\n-                throw e;\n-            } else {\n-                final FilePermission fp\n-                        = new FilePermission(passwordFileDisplayName, \"read\");\n-                @SuppressWarnings(\"removal\")\n-                AccessControlException ace = new AccessControlException(\n-                        \"access denied \" + fp.toString());\n-                ace.initCause(e);\n-                throw ace;\n-            }\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/security\/FileLoginModule.java","additions":3,"deletions":30,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -235,1 +235,0 @@\n-     * @throws SecurityException If read\/write file permissions are not granted\n@@ -238,7 +237,1 @@\n-            throws IOException, SecurityException {\n-\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkRead(passwordFile);\n-        }\n+            throws IOException {\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/security\/HashedPasswordManager.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.security.AccessController;\n@@ -32,2 +31,0 @@\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -108,17 +105,1 @@\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null) {\n-                    sm.checkPermission(\n-                            new AuthPermission(\"createLoginContext.\" +\n-                                               LOGIN_CONFIG_NAME));\n-                }\n-\n-                final String pf = passwordFile;\n-                final String hashPass = hashPasswords;\n-                try {\n-                    @SuppressWarnings(\"removal\")\n-                    var tmp = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<LoginContext>() {\n-                            public LoginContext run() throws LoginException {\n-                                return new LoginContext(\n-                                                LOGIN_CONFIG_NAME,\n+                loginContext = new LoginContext(LOGIN_CONFIG_NAME,\n@@ -127,7 +108,1 @@\n-                                                new FileLoginConfig(pf, hashPass));\n-                            }\n-                        });\n-                    loginContext = tmp;\n-                } catch (PrivilegedActionException pae) {\n-                    throw (LoginException) pae.getException();\n-                }\n+                                                new FileLoginConfig(passwordFile, hashPasswords));\n@@ -193,8 +168,1 @@\n-            @SuppressWarnings(\"removal\")\n-            var dummy = AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        subject.setReadOnly();\n-                        return null;\n-                    }\n-                });\n-\n+            subject.setReadOnly();\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/security\/JMXPluggableAuthenticator.java","additions":4,"deletions":36,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1,107 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.jmx.remote.security;\n-\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.CodeSource;\n-import java.security.Permissions;\n-import java.security.ProtectionDomain;\n-import javax.security.auth.Subject;\n-import javax.security.auth.SubjectDomainCombiner;\n-\n-\/**\n- * <p>This class represents an extension to the {@link SubjectDomainCombiner}\n- * and is used to add a new {@link ProtectionDomain}, comprised of a null\n- * codesource\/signers and an empty permission set, to the access control\n- * context with which this combiner is combined.<\/p>\n- *\n- * <p>When the {@link #combine} method is called the {@link ProtectionDomain}\n- * is augmented with the permissions granted to the set of principals present\n- * in the supplied {@link Subject}.<\/p>\n- *\/\n-@SuppressWarnings(\"removal\")\n-public class JMXSubjectDomainCombiner extends SubjectDomainCombiner {\n-\n-    public JMXSubjectDomainCombiner(Subject s) {\n-        super(s);\n-    }\n-\n-    public ProtectionDomain[] combine(ProtectionDomain[] current,\n-                                      ProtectionDomain[] assigned) {\n-        \/\/ Add a new ProtectionDomain with the null codesource\/signers, and\n-        \/\/ the empty permission set, to the end of the array containing the\n-        \/\/ 'current' protections domains, i.e. the ones that will be augmented\n-        \/\/ with the permissions granted to the set of principals present in\n-        \/\/ the supplied subject.\n-        \/\/\n-        ProtectionDomain[] newCurrent;\n-        if (current == null || current.length == 0) {\n-            newCurrent = new ProtectionDomain[1];\n-            newCurrent[0] = pdNoPerms;\n-        } else {\n-            newCurrent = new ProtectionDomain[current.length + 1];\n-            for (int i = 0; i < current.length; i++) {\n-                newCurrent[i] = current[i];\n-            }\n-            newCurrent[current.length] = pdNoPerms;\n-        }\n-        return super.combine(newCurrent, assigned);\n-    }\n-\n-    \/**\n-     * A null CodeSource.\n-     *\/\n-    private static final CodeSource nullCodeSource =\n-        new CodeSource(null, (java.security.cert.Certificate[]) null);\n-\n-    \/**\n-     * A ProtectionDomain with a null CodeSource and an empty permission set.\n-     *\/\n-    private static final ProtectionDomain pdNoPerms =\n-        new ProtectionDomain(nullCodeSource, new Permissions(), null, null);\n-\n-    \/**\n-     * Get the current AccessControlContext combined with the supplied subject.\n-     *\/\n-    public static AccessControlContext getContext(Subject subject) {\n-        return new AccessControlContext(AccessController.getContext(),\n-                                        new JMXSubjectDomainCombiner(subject));\n-    }\n-\n-    \/**\n-     * Get the AccessControlContext of the domain combiner created with\n-     * the supplied subject, i.e. an AccessControlContext with the domain\n-     * combiner created with the supplied subject and where the caller's\n-     * context has been removed.\n-     *\/\n-    public static AccessControlContext\n-        getDomainCombinerContext(Subject subject) {\n-        return new AccessControlContext(\n-            new AccessControlContext(new ProtectionDomain[0]),\n-            new JMXSubjectDomainCombiner(subject));\n-    }\n-}\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/security\/JMXSubjectDomainCombiner.java","additions":0,"deletions":107,"binary":false,"changes":107,"status":"deleted"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -30,1 +29,0 @@\n-import java.security.AccessController;\n@@ -77,7 +75,2 @@\n- * <p>If there is no SecurityManager, then the access controller will refuse\n- * to create an MBean that is a ClassLoader.  This prevents\n- * people from opening security holes unintentionally. Otherwise, it\n- * would not be obvious that granting write access grants the ability to\n- * download and execute arbitrary code in the target MBean server. Advanced\n- * users who do want an MBean which is a ClassLoader are presumably advanced enough\n- * to handle policy files and security managers.<\/p>\n+ * <p>The access controller will refuse to create an MBean that is a ClassLoader.\n+ * <\/p>\n@@ -177,9 +170,3 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            Object object = getMBeanServer().instantiate(className);\n-            checkClassLoader(object);\n-            return getMBeanServer().registerMBean(object, name);\n-        } else {\n-            return getMBeanServer().createMBean(className, name);\n-        }\n+        Object object = getMBeanServer().instantiate(className);\n+        checkClassLoader(object);\n+        return getMBeanServer().registerMBean(object, name);\n@@ -201,12 +188,5 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            Object object = getMBeanServer().instantiate(className,\n-                                                         params,\n-                                                         signature);\n-            checkClassLoader(object);\n-            return getMBeanServer().registerMBean(object, name);\n-        } else {\n-            return getMBeanServer().createMBean(className, name,\n-                                                params, signature);\n-        }\n+        Object object = getMBeanServer().instantiate(className,\n+                                                     params,\n+                                                     signature);\n+        checkClassLoader(object);\n+        return getMBeanServer().registerMBean(object, name);\n@@ -230,10 +210,4 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            Object object = getMBeanServer().instantiate(className,\n-                                                         loaderName);\n-            checkClassLoader(object);\n-            return getMBeanServer().registerMBean(object, name);\n-        } else {\n-            return getMBeanServer().createMBean(className, name, loaderName);\n-        }\n+        Object object = getMBeanServer().instantiate(className,\n+                                                     loaderName);\n+        checkClassLoader(object);\n+        return getMBeanServer().registerMBean(object, name);\n@@ -259,13 +233,6 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            Object object = getMBeanServer().instantiate(className,\n-                                                         loaderName,\n-                                                         params,\n-                                                         signature);\n-            checkClassLoader(object);\n-            return getMBeanServer().registerMBean(object, name);\n-        } else {\n-            return getMBeanServer().createMBean(className, name, loaderName,\n-                                                params, signature);\n-        }\n+        Object object = getMBeanServer().instantiate(className,\n+                                                     loaderName,\n+                                                     params,\n+                                                     signature);\n+        checkClassLoader(object);\n+        return getMBeanServer().registerMBean(object, name);\n@@ -617,2 +584,1 @@\n-                                        \"is forbidden unless a security \" +\n-                                        \"manager is installed.\");\n+                                        \"is forbidden.\");\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/security\/MBeanServerAccessController.java","additions":21,"deletions":55,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,0 @@\n-import java.security.AccessController;\n-\n@@ -49,1 +47,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -275,2 +272,1 @@\n-            GetPropertyAction act = new GetPropertyAction(BUFFER_SIZE_PROPERTY);\n-            String s = AccessController.doPrivileged(act);\n+            String s = System.getProperty(BUFFER_SIZE_PROPERTY);\n@@ -280,2 +276,1 @@\n-                act = new GetPropertyAction(oldP);\n-                s = AccessController.doPrivileged(act);\n+                s = System.getProperty(oldP);\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/util\/EnvHelp.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import sun.reflect.misc.ReflectUtil;\n-\n@@ -38,1 +36,0 @@\n-        ReflectUtil.checkPackageAccess(name);\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/util\/OrderClassLoaders.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.FilePermission;\n@@ -31,0 +30,1 @@\n+import javax.management.MBeanRegistrationException;\n@@ -34,1 +34,1 @@\n-import javax.management.MBeanServerPermission;\n+import javax.management.NotCompliantMBeanException;\n@@ -37,0 +37,1 @@\n+import javax.management.InstanceAlreadyExistsException;\n@@ -41,5 +42,0 @@\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -472,7 +468,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            Permission perm = new MBeanServerPermission(\"createMBeanServer\");\n-            sm.checkPermission(perm);\n-        }\n-\n@@ -597,4 +586,1 @@\n-        @SuppressWarnings(\"removal\")\n-        ClassLoader loader =\n-            AccessController.doPrivileged(\n-                (PrivilegedAction<ClassLoader>) () -> cls.getClassLoader());\n+        ClassLoader loader = cls.getClassLoader();\n@@ -885,1 +871,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -891,17 +876,11 @@\n-            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                final DynamicMBean dmbean;\n-                if (pmo instanceof DynamicMBean) {\n-                    dmbean = DynamicMBean.class.cast(pmo);\n-                } else if (pmo instanceof NotificationEmitter) {\n-                    dmbean = new StandardEmitterMBean(pmo, null, true, (NotificationEmitter) pmo);\n-                } else {\n-                    dmbean = new StandardMBean(pmo, null, true);\n-                }\n-\n-                mbs.registerMBean(dmbean, oname);\n-                return null;\n-            });\n-        } catch (MalformedObjectNameException mone) {\n-            throw new IllegalArgumentException(mone);\n-        } catch (PrivilegedActionException e) {\n-            throw new RuntimeException(e.getException());\n+            final DynamicMBean dmbean;\n+            if (pmo instanceof DynamicMBean) {\n+                dmbean = DynamicMBean.class.cast(pmo);\n+            } else if (pmo instanceof NotificationEmitter) {\n+                dmbean = new StandardEmitterMBean(pmo, null, true, (NotificationEmitter) pmo);\n+            } else {\n+                dmbean = new StandardMBean(pmo, null, true);\n+            }\n+            mbs.registerMBean(dmbean, oname);\n+        } catch (MalformedObjectNameException | InstanceAlreadyExistsException | MBeanRegistrationException | NotCompliantMBeanException e) {\n+            throw new IllegalArgumentException(e);\n@@ -921,13 +900,5 @@\n-            @SuppressWarnings(\"removal\")\n-            List<PlatformMBeanProvider> providers = AccessController.doPrivileged(\n-                new PrivilegedAction<>() {\n-                    @Override\n-                    public List<PlatformMBeanProvider> run() {\n-                        List<PlatformMBeanProvider> all = new ArrayList<>();\n-                        for (PlatformMBeanProvider provider : ServiceLoader.loadInstalled(PlatformMBeanProvider.class)) {\n-                            all.add(provider);\n-                        }\n-                        all.add(new DefaultPlatformMBeanProvider());\n-                        return all;\n-                    }\n-                }, null, new FilePermission(\"<<ALL FILES>>\", \"read\"));\n+            List<PlatformMBeanProvider> providers = new ArrayList<>();\n+            for (PlatformMBeanProvider provider : ServiceLoader.loadInstalled(PlatformMBeanProvider.class)) {\n+                providers.add(provider);\n+            }\n+            providers.add(new DefaultPlatformMBeanProvider());\n@@ -1016,1 +987,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -1018,4 +989,1 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            System.loadLibrary(\"management\");\n-            return null;\n-        });\n+        System.loadLibrary(\"management\");\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ManagementFactory.java","additions":22,"deletions":54,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -79,2 +76,1 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Long>)\n-                () -> ProcessHandle.current().pid());\n+        return ProcessHandle.current().pid();\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/RuntimeMXBean.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import java.security.AccessController;\n-\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n-\n","filename":"src\/java.management\/share\/classes\/javax\/management\/ClassAttributeValueExp.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import sun.reflect.misc.ReflectUtil;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/JMX.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.security.AccessController;\n@@ -31,1 +30,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanAttributeInfo.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -554,4 +552,2 @@\n-                    ArrayGettersSafeAction action =\n-                        new ArrayGettersSafeAction(subclass, immutableClass);\n-                    safe = AccessController.doPrivileged(action);\n-                } catch (Exception e) { \/\/ e.g. SecurityException\n+                    safe = arrayGettersSafeHelper(subclass, immutableClass);\n+                } catch (Exception e) {\n@@ -567,19 +563,1 @@\n-    \/*\n-     * The PrivilegedAction stuff is probably overkill.  We can be\n-     * pretty sure the caller does have the required privileges -- a\n-     * JMX user that can't do reflection can't even use Standard\n-     * MBeans!  But there's probably a performance gain by not having\n-     * to check the whole call stack.\n-     *\/\n-    private static class ArrayGettersSafeAction\n-            implements PrivilegedAction<Boolean> {\n-\n-        private final Class<?> subclass;\n-        private final Class<?> immutableClass;\n-\n-        ArrayGettersSafeAction(Class<?> subclass, Class<?> immutableClass) {\n-            this.subclass = subclass;\n-            this.immutableClass = immutableClass;\n-        }\n-\n-        public Boolean run() {\n+    private static boolean arrayGettersSafeHelper(Class<?> subclass, Class<?> immutableClass) {\n@@ -604,1 +582,0 @@\n-        }\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanInfo.java","additions":4,"deletions":27,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -71,7 +71,0 @@\n-\/* DELETED:\n- *\n- * <li><p>For the {@link #isRegistered isRegistered} method, the\n- * caller's permissions must imply {@link\n- * MBeanPermission#MBeanPermission(String,String,ObjectName,String)\n- * MBeanPermission(null, null, name, \"isRegistered\")}.<\/p>\n- *\/\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanServer.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n-import java.security.AccessController;\n-import java.security.Permission;\n@@ -37,2 +34,0 @@\n-import sun.reflect.misc.ReflectUtil;\n-\n@@ -103,32 +98,0 @@\n-    \/**\n-     * Provide a new {@link javax.management.MBeanServerBuilder}.\n-     * @param builder The new MBeanServerBuilder that will be used to\n-     *        create {@link javax.management.MBeanServer}s.\n-     * @exception IllegalArgumentException if the given builder is null.\n-     *\n-     * @exception SecurityException if there is a SecurityManager and\n-     * the caller's permissions do not include or imply <code>{@link\n-     * MBeanServerPermission}(\"setMBeanServerBuilder\")<\/code>.\n-     *\n-     **\/\n-    \/\/ public static synchronized void\n-    \/\/    setMBeanServerBuilder(MBeanServerBuilder builder) {\n-    \/\/    checkPermission(\"setMBeanServerBuilder\");\n-    \/\/    MBeanServerFactory.builder = builder;\n-    \/\/ }\n-\n-    \/**\n-     * Get the current {@link javax.management.MBeanServerBuilder}.\n-     *\n-     * @return the current {@link javax.management.MBeanServerBuilder}.\n-     *\n-     * @exception SecurityException if there is a SecurityManager and\n-     * the caller's permissions do not include or imply <code>{@link\n-     * MBeanServerPermission}(\"getMBeanServerBuilder\")<\/code>.\n-     *\n-     **\/\n-    \/\/ public static synchronized MBeanServerBuilder getMBeanServerBuilder() {\n-    \/\/     checkPermission(\"getMBeanServerBuilder\");\n-    \/\/     return builder;\n-    \/\/ }\n-\n@@ -149,2 +112,0 @@\n-        checkPermission(\"releaseMBeanServer\");\n-\n@@ -218,2 +179,0 @@\n-        checkPermission(\"createMBeanServer\");\n-\n@@ -293,2 +252,0 @@\n-        checkPermission(\"newMBeanServer\");\n-\n@@ -338,2 +295,0 @@\n-        checkPermission(\"findMBeanServer\");\n-\n@@ -382,10 +337,0 @@\n-    private static void checkPermission(String action)\n-    throws SecurityException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            Permission perm = new MBeanServerPermission(action);\n-            sm.checkPermission(perm);\n-        }\n-    }\n-\n@@ -423,1 +368,1 @@\n-        return ReflectUtil.forName(builderClassName);\n+        return Class.forName(builderClassName);\n@@ -453,4 +398,1 @@\n-            GetPropertyAction act =\n-                    new GetPropertyAction(JMX_INITIAL_BUILDER);\n-            @SuppressWarnings(\"removal\")\n-            String builderClassName = AccessController.doPrivileged(act);\n+            String builderClassName = System.getProperty(JMX_INITIAL_BUILDER);\n@@ -502,3 +444,0 @@\n-     * @exception SecurityException if there is a SecurityManager and\n-     * the caller's permissions do not make it possible to instantiate\n-     * a new builder.\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanServerFactory.java","additions":2,"deletions":63,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -34,4 +34,0 @@\n-import java.security.AccessController;\n-\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n-\n","filename":"src\/java.management\/share\/classes\/javax\/management\/Notification.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n-\n@@ -36,2 +33,0 @@\n-import java.security.AccessController;\n-\n","filename":"src\/java.management\/share\/classes\/javax\/management\/NumericValueExp.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -35,1 +34,0 @@\n-import java.security.AccessController;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/ObjectName.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.security.AccessController;\n@@ -1166,3 +1165,1 @@\n-                    MBeanInfoSafeAction action =\n-                        new MBeanInfoSafeAction(subclass);\n-                    safe = AccessController.doPrivileged(action);\n+                    safe = mBeanInfoSafe(subclass);\n@@ -1192,2 +1189,0 @@\n-    private static class MBeanInfoSafeAction\n-            implements PrivilegedAction<Boolean> {\n@@ -1195,7 +1190,1 @@\n-        private final Class<?> subclass;\n-\n-        MBeanInfoSafeAction(Class<?> subclass) {\n-            this.subclass = subclass;\n-        }\n-\n-        public Boolean run() {\n+    private static boolean mBeanInfoSafe(Class<?> subclass) {\n@@ -1233,1 +1222,0 @@\n-        }\n","filename":"src\/java.management\/share\/classes\/javax\/management\/StandardMBean.java","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -45,1 +44,0 @@\n-import java.security.AccessController;\n@@ -61,2 +59,0 @@\n-import sun.reflect.misc.ReflectUtil;\n-\n@@ -1143,1 +1139,0 @@\n-            ReflectUtil.checkPackageAccess(className);\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/DescriptorSupport.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n-\n@@ -39,1 +37,0 @@\n-import java.security.AccessController;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/InvalidTargetObjectTypeException.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -41,1 +40,0 @@\n-import java.security.AccessController;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/ModelMBeanAttributeInfo.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -41,1 +40,0 @@\n-import java.security.AccessController;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/ModelMBeanConstructorInfo.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -40,1 +39,0 @@\n-import java.security.AccessController;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/ModelMBeanInfoSupport.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -40,1 +39,0 @@\n-import java.security.AccessController;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/ModelMBeanNotificationInfo.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -41,1 +40,0 @@\n-import java.security.AccessController;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/ModelMBeanOperationInfo.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,3 +40,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -81,2 +78,0 @@\n-import jdk.internal.access.JavaSecurityAccess;\n-import jdk.internal.access.SharedSecrets;\n@@ -85,1 +80,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -143,4 +137,0 @@\n-    private static final JavaSecurityAccess javaSecurityAccess = SharedSecrets.getJavaSecurityAccess();\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -967,1 +957,1 @@\n-            final Class<?> targetClass;\n+            Class<?> targetClass = null;\n@@ -971,4 +961,0 @@\n-                    @SuppressWarnings(\"removal\")\n-                    AccessControlContext stack = AccessController.getContext();\n-                    final Object obj = targetObject;\n-                    final String className = opClassName;\n@@ -977,16 +963,6 @@\n-                    targetClass = javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<>() {\n-\n-                        @Override\n-                        public Class<?> run() {\n-                            try {\n-                                ReflectUtil.checkPackageAccess(className);\n-                                final ClassLoader targetClassLoader =\n-                                    obj.getClass().getClassLoader();\n-                                return Class.forName(className, false,\n-                                                            targetClassLoader);\n-                            } catch (ClassNotFoundException e) {\n-                                caughtException[0] = e;\n-                            }\n-                            return null;\n-                        }\n-                    }, stack, acc);\n+                    final ClassLoader targetClassLoader = targetObject.getClass().getClassLoader();\n+                    try {\n+                        targetClass = Class.forName(opClassName, false, targetClassLoader);\n+                    } catch (ClassNotFoundException e) {\n+                        caughtException[0] = e;\n+                    }\n@@ -1042,2 +1018,0 @@\n-            @SuppressWarnings(\"removal\")\n-            final AccessControlContext stack = AccessController.getContext();\n@@ -1048,4 +1022,0 @@\n-            javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<Void>() {\n-\n-                @Override\n-                public Void run() {\n@@ -1060,1 +1030,0 @@\n-                                ReflectUtil.checkPackageAccess(sig[i]);\n@@ -1073,3 +1042,0 @@\n-                    return null;\n-                }\n-            }, stack, acc);\n@@ -1126,1 +1092,1 @@\n-        final Class<?> targetClass;\n+        Class<?> targetClass = null;\n@@ -1130,19 +1096,7 @@\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext stack = AccessController.getContext();\n-            final String className = opClassName;\n-            targetClass = javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<>() {\n-\n-                @Override\n-                public Class<?> run() {\n-                    try {\n-                        ReflectUtil.checkPackageAccess(className);\n-                        final ClassLoader targetClassLoader =\n-                            rmmbClass.getClassLoader();\n-                        Class<?> clz = Class.forName(className, false,\n-                                                    targetClassLoader);\n-                        if (!rmmbClass.isAssignableFrom(clz))\n-                            return null;\n-                        return clz;\n-                    } catch (ClassNotFoundException e) {\n-                        return null;\n-                    }\n+            final ClassLoader targetClassLoader = rmmbClass.getClassLoader();\n+            try {\n+                Class<?> clz = Class.forName(opClassName, false, targetClassLoader);\n+                if (!rmmbClass.isAssignableFrom(clz)) {\n+                    targetClass = null;\n+                } else {\n+                    targetClass = clz;\n@@ -1150,1 +1104,2 @@\n-            }, stack, acc);\n+            } catch (ClassNotFoundException e) {\n+            }\n@@ -1168,15 +1123,6 @@\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext stack = AccessController.getContext();\n-            Object rslt = javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<>() {\n-\n-                @Override\n-                public Object run() {\n-                    try {\n-                        ReflectUtil.checkPackageAccess(method.getDeclaringClass());\n-                        return MethodUtil.invoke(method, targetObject, opArgs);\n-                    } catch (InvocationTargetException | IllegalAccessException e) {\n-                        caughtException[0] = e;\n-                    }\n-                    return null;\n-                }\n-            }, stack, acc);\n+            Object rslt = null;\n+            try {\n+                rslt = MethodUtil.invoke(method, targetObject, opArgs);\n+            } catch (InvocationTargetException | IllegalAccessException e) {\n+                caughtException[0] = e;\n+            }\n@@ -1580,18 +1526,7 @@\n-                                @SuppressWarnings(\"removal\")\n-                                AccessControlContext stack = AccessController.getContext();\n-\n-                                Class<?> c = javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<>() {\n-\n-                                    @Override\n-                                    public Class<?> run() {\n-                                        try {\n-                                            ReflectUtil.checkPackageAccess(respType);\n-                                            ClassLoader cl =\n-                                                respClass.getClassLoader();\n-                                            return Class.forName(respType, true, cl);\n-                                        } catch (Exception e) {\n-                                            caughException[0] = e;\n-                                        }\n-                                        return null;\n-                                    }\n-                                }, stack, acc);\n+                                ClassLoader cl = respClass.getClassLoader();\n+                                Class<?> c = null;\n+                                try {\n+                                    c = Class.forName(respType, true, cl);\n+                                } catch (Exception e) {\n+                                    caughException[0] = e;\n+                                }\n@@ -2663,2 +2598,0 @@\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext stack = AccessController.getContext();\n@@ -2667,18 +2600,10 @@\n-        Class<?> c = javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<>() {\n-\n-            @Override\n-            public Class<?> run() {\n-                try {\n-                    ReflectUtil.checkPackageAccess(className);\n-                    return Class.forName(className);\n-                } catch (ClassNotFoundException e) {\n-                    final ClassLoaderRepository clr =\n-                        getClassLoaderRepository();\n-                    try {\n-                        if (clr == null) throw new ClassNotFoundException(className);\n-                        return clr.loadClass(className);\n-                    } catch (ClassNotFoundException ex) {\n-                        caughtException[0] = ex;\n-                    }\n-                }\n-                return null;\n+        Class<?> c = null;\n+        try {\n+            c = Class.forName(className);\n+        } catch (ClassNotFoundException e) {\n+            final ClassLoaderRepository clr = getClassLoaderRepository();\n+            try {\n+                if (clr == null) throw new ClassNotFoundException(className);\n+                return clr.loadClass(className);\n+            } catch (ClassNotFoundException ex) {\n+                caughtException[0] = ex;\n@@ -2686,2 +2611,1 @@\n-        }, stack, acc);\n-\n+        }\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/RequiredModelMBean.java","additions":42,"deletions":118,"binary":false,"changes":160,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n-\n@@ -40,1 +38,0 @@\n-import java.security.AccessController;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/XMLParseException.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -32,2 +31,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -35,1 +32,0 @@\n-import java.security.ProtectionDomain;\n@@ -173,1 +169,1 @@\n-     * Subject and possibly AccessControlContext of the Monitor.start() caller.\n+     * Subject of the Monitor.start() caller.\n@@ -176,6 +172,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final AccessControlContext noPermissionsACC =\n-            new AccessControlContext(\n-            new ProtectionDomain[] {new ProtectionDomain(null, null)});\n-    @SuppressWarnings(\"removal\")\n-    private volatile AccessControlContext acc = noPermissionsACC;\n@@ -207,3 +197,1 @@\n-        @SuppressWarnings(\"removal\")\n-        final String maximumPoolSizeStr = AccessController.doPrivileged(\n-            new GetPropertyAction(maximumPoolSizeSysProp));\n+        final String maximumPoolSizeStr = System.getProperty(maximumPoolSizeSysProp);\n@@ -752,1 +740,1 @@\n-            \/\/ Reset the Subject and AccessControlContext.\n+            \/\/ Reset the Subject.\n@@ -755,1 +743,0 @@\n-            acc = noPermissionsACC;\n@@ -1472,2 +1459,1 @@\n-            \/\/ the executors map. If there is a SecurityManager, the group of\n-            \/\/ System.getSecurityManager() is used, else the group of the thread\n+            \/\/ the executors map.  Use the Thread group of the thread\n@@ -1476,4 +1462,1 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager s = System.getSecurityManager();\n-            ThreadGroup group = (s != null) ? s.getThreadGroup() :\n-                Thread.currentThread().getThreadGroup();\n+            ThreadGroup group = Thread.currentThread().getThreadGroup();\n@@ -1559,2 +1542,1 @@\n-     * the same ThreadGroup. If there is a SecurityManager, it uses\n-     * the group of System.getSecurityManager(), else the group of\n+     * the same ThreadGroup.  Use the Thread group of\n@@ -1575,4 +1557,1 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager s = System.getSecurityManager();\n-            group = (s != null) ? s.getThreadGroup() :\n-                                  Thread.currentThread().getThreadGroup();\n+            group = Thread.currentThread().getThreadGroup();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/monitor\/Monitor.java","additions":7,"deletions":28,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -696,1 +695,0 @@\n-            ReflectUtil.checkPackageAccess(className);\n@@ -705,2 +703,0 @@\n-            \/\/ It is safe to call this plain Class.getMethod because the class \"c\"\n-            \/\/ was checked before by ReflectUtil.checkPackageAccess(openType.safeGetClassName());\n@@ -727,2 +723,0 @@\n-            \/\/ It is safe to call this plain Class.getConstructor because the class \"c\"\n-            \/\/ was checked before by ReflectUtil.checkPackageAccess(openType.safeGetClassName());\n@@ -767,3 +761,0 @@\n-            \/\/ check access to the provided base type class name and bail out early\n-            ReflectUtil.checkPackageAccess(baseClassName);\n-\n","filename":"src\/java.management\/share\/classes\/javax\/management\/openmbean\/OpenMBeanAttributeInfoSupport.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -33,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -196,1 +193,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -201,3 +197,1 @@\n-            final GetPropertyAction getExtendOpenTypes =\n-                new GetPropertyAction(\"jmx.extend.open.types\");\n-            if (AccessController.doPrivileged(getExtendOpenTypes) == null) {\n+            if (System.getProperty(\"jmx.extend.open.types\") == null) {\n@@ -212,10 +206,5 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<>() {\n-            public Boolean run() {\n-                try {\n-                    return (c.getMethod(\"getClassName\").getDeclaringClass() !=\n-                            OpenType.class);\n-                } catch (Exception e) {\n-                    return true;  \/\/ fail safe\n-                }\n-            }\n-        });\n+        try {\n+            return (c.getMethod(\"getClassName\").getDeclaringClass() != OpenType.class);\n+        } catch (Exception e) {\n+            return true;  \/\/ fail safe\n+        }\n","filename":"src\/java.management\/share\/classes\/javax\/management\/openmbean\/OpenType.java","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -34,1 +33,0 @@\n-import java.security.AccessController;\n@@ -151,4 +149,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String useHashMapProp = AccessController.doPrivileged(\n-                new GetPropertyAction(\"jmx.tabular.data.hash.map\"));\n-        boolean useHashMap = \"true\".equalsIgnoreCase(useHashMapProp);\n+        boolean useHashMap = Boolean.getBoolean(\"jmx.tabular.data.hash.map\");\n","filename":"src\/java.management\/share\/classes\/javax\/management\/openmbean\/TabularDataSupport.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -36,1 +35,0 @@\n-import java.security.AccessController;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/MBeanServerNotificationFilter.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import java.security.AccessController;\n-\n@@ -46,1 +44,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RelationNotification.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -37,2 +36,0 @@\n-import java.security.AccessController;\n-\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RelationTypeSupport.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -37,2 +36,0 @@\n-import java.security.AccessController;\n-\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/Role.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n-\n@@ -36,1 +33,0 @@\n-import java.security.AccessController;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RoleInfo.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n-\n@@ -37,2 +34,0 @@\n-import java.security.AccessController;\n-\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RoleResult.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import com.sun.jmx.mbeanserver.GetPropertyAction;\n@@ -37,2 +36,0 @@\n-import java.security.AccessController;\n-\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RoleUnresolved.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -45,2 +43,0 @@\n-import sun.reflect.misc.ReflectUtil;\n-\n@@ -391,6 +387,1 @@\n-            pkgsObject =\n-                AccessController.doPrivileged(new PrivilegedAction<String>() {\n-                    public String run() {\n-                        return System.getProperty(PROTOCOL_PROVIDER_PACKAGES);\n-                    }\n-                });\n+            pkgsObject = System.getProperty(PROTOCOL_PROVIDER_PACKAGES);\n@@ -450,1 +441,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -452,12 +442,5 @@\n-        return parent != null ? AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public ClassLoader run() {\n-                return new ClassLoader(parent) {\n-                    @Override\n-                    protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n-                        ReflectUtil.checkPackageAccess(name);\n-                        return super.loadClass(name, resolve);\n-                    }\n-                };\n-            }\n-        }) : null;\n+        return parent != null ? new ClassLoader(parent) {\n+                                    protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException\n+                                        { return super.loadClass(name, resolve); }\n+                                }\n+                              : null;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/remote\/JMXConnectorFactory.java","additions":7,"deletions":24,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,2 +67,0 @@\n-        Util.checkControlAccess();\n-\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ClassLoadingImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,3 +39,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -50,1 +47,0 @@\n-import java.security.PrivilegedAction;\n@@ -194,1 +190,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -196,10 +191,6 @@\n-            return AccessController.doPrivileged(new PrivilegedAction<>() {\n-                @Override\n-                public Class<?> run() {\n-                    Optional<Module> logging = ModuleLayer.boot().findModule(\"java.logging\");\n-                    if (logging.isPresent()) {\n-                        return Class.forName(logging.get(), className);\n-                    }\n-                    return null;\n-                }\n-            });\n+            Optional<Module> logging = ModuleLayer.boot().findModule(\"java.logging\");\n+            if (logging.isPresent()) {\n+                return Class.forName(logging.get(), className);\n+            } else {\n+                return null;\n+            }\n@@ -463,1 +454,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -465,0 +455,2 @@\n+        final ObjectName objName = Util.newObjectName(mbeanName);\n+\n@@ -466,20 +458,5 @@\n-            final ObjectName objName = Util.newObjectName(mbeanName);\n-\n-            \/\/ inner class requires these fields to be final\n-            final MBeanServer mbs0 = mbs;\n-            final Object mbean0 = mbean;\n-            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws MBeanRegistrationException,\n-                                         NotCompliantMBeanException {\n-                    try {\n-                        mbs0.registerMBean(mbean0, objName);\n-                        return null;\n-                    } catch (InstanceAlreadyExistsException e) {\n-                        \/\/ if an instance with the object name exists in\n-                        \/\/ the MBeanServer ignore the exception\n-                    }\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw new RuntimeException(e.getException());\n+            mbs.registerMBean(mbean, objName);\n+        } catch (InstanceAlreadyExistsException iaee) {\n+            \/\/ if an instance with the object name exists in the MBeanServer, ignore the exception\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n@@ -524,1 +501,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -526,0 +502,2 @@\n+        final ObjectName objName = Util.newObjectName(mbeanName);\n+\n@@ -527,17 +505,5 @@\n-            final ObjectName objName = Util.newObjectName(mbeanName);\n-\n-            \/\/ inner class requires these fields to be final\n-            final MBeanServer mbs0 = mbs;\n-            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n-                public Void run() throws MBeanRegistrationException,\n-                                           RuntimeOperationsException  {\n-                    try {\n-                        mbs0.unregisterMBean(objName);\n-                    } catch (InstanceNotFoundException e) {\n-                        \/\/ ignore exception if not found\n-                    }\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException e) {\n-            throw new RuntimeException(e.getException());\n+            mbs.unregisterMBean(objName);\n+        } catch (InstanceNotFoundException infe) {\n+            \/\/ ignore exception if not found\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ManagementFactoryHelper.java","additions":21,"deletions":55,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,4 +38,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -613,1 +609,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -620,6 +615,2 @@\n-                fromMethod = AccessController.doPrivileged(new PrivilegedExceptionAction<>() {\n-                        public Method run() throws NoSuchMethodException {\n-                            return javaClass.getMethod(\"from\", COMPOSITE_DATA_CLASS);\n-                        }\n-                    });\n-            } catch (PrivilegedActionException e) {\n+                fromMethod = javaClass.getMethod(\"from\", COMPOSITE_DATA_CLASS);\n+            } catch (NoSuchMethodException e) {\n@@ -640,6 +631,1 @@\n-                final Method[] methods =\n-                    AccessController.doPrivileged(new PrivilegedAction<>() {\n-                            public Method[] run() {\n-                                return javaClass.getMethods();\n-                            }\n-                        });\n+                final Method[] methods = javaClass.getMethods();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/MappedMXBeanType.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,2 +84,0 @@\n-        Util.checkControlAccess();\n-\n","filename":"src\/java.management\/share\/classes\/sun\/management\/MemoryImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,2 +115,0 @@\n-        Util.checkControlAccess();\n-\n@@ -160,2 +158,0 @@\n-        Util.checkControlAccess();\n-\n@@ -212,2 +208,0 @@\n-        Util.checkControlAccess();\n-\n","filename":"src\/java.management\/share\/classes\/sun\/management\/MemoryPoolImpl.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,0 @@\n-        Util.checkMonitorAccess();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/RuntimeImpl.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -132,1 +132,0 @@\n-        Util.checkMonitorAccess();\n@@ -181,2 +180,0 @@\n-        Util.checkMonitorAccess();\n-\n@@ -199,2 +196,0 @@\n-        Util.checkControlAccess();\n-\n@@ -335,1 +330,0 @@\n-        Util.checkControlAccess();\n@@ -404,1 +398,0 @@\n-        Util.checkControlAccess();\n@@ -429,1 +422,0 @@\n-        Util.checkMonitorAccess();\n@@ -441,2 +433,0 @@\n-        Util.checkMonitorAccess();\n-\n@@ -449,1 +439,0 @@\n-        Util.checkControlAccess();\n@@ -474,2 +463,0 @@\n-\n-        Util.checkMonitorAccess();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ThreadImpl.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,22 +53,3 @@\n-    private static ManagementPermission monitorPermission =\n-        new ManagementPermission(\"monitor\");\n-    private static ManagementPermission controlPermission =\n-        new ManagementPermission(\"control\");\n-\n-    \/**\n-     * Check that the current context is trusted to perform monitoring\n-     * or management.\n-     * <p>\n-     * If the check fails we throw a SecurityException, otherwise\n-     * we return normally.\n-     *\n-     * @exception  SecurityException  if a security manager exists and if\n-     *             the caller does not have ManagementPermission(\"control\").\n-     *\/\n-    static void checkAccess(ManagementPermission p)\n-         throws SecurityException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(p);\n-        }\n+    \/\/ Methods retained temporarily due to usage by jdk.management.\n+    static void checkAccess(ManagementPermission p) {\n+        \/\/ no-op\n@@ -78,1 +59,1 @@\n-        checkAccess(monitorPermission);\n+        \/\/ no-op\n@@ -81,1 +62,1 @@\n-        checkAccess(controlPermission);\n+        \/\/ no-op\n","filename":"src\/java.management\/share\/classes\/sun\/management\/Util.java","additions":6,"deletions":25,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -205,9 +203,2 @@\n-    public String   getCompilerName() {\n-        @SuppressWarnings(\"removal\")\n-        String name =  AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public String run() {\n-                    return System.getProperty(\"sun.management.compiler\");\n-                }\n-            });\n-        return name;\n+    public String getCompilerName() {\n+        return System.getProperty(\"sun.management.compiler\");\n@@ -258,2 +249,1 @@\n-        @SuppressWarnings(\"removal\")\n-        Perf perf =  AccessController.doPrivileged(new Perf.GetPerfAction());\n+        Perf perf = Perf.getPerf();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/VMManagementImpl.java","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"}]}