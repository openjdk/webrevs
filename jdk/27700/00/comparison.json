{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,3 +130,19 @@\n-        if (params != null) {\n-            encodedParams = params.toByteArray();\n-            decodeParams();\n+\n+        if (params == null) {\n+            this.encodedParams = null;\n+            this.algParams = null;\n+            return;\n+        }\n+\n+        \/*\n+         * Follow parse(DerValue) behavior: if the DerValue is an ASN.1 NULL,\n+         * validate it and canonicalize to \"no parameters\" (encodedParams == null).\n+         *\/\n+        if (params.tag == DerValue.tag_Null) {\n+            if (params.length() != 0) {\n+                throw new IOException(\"invalid NULL\");\n+            }\n+            \/\/ canonicalize: treat as absent parameters\n+            this.encodedParams = null;\n+            this.algParams = null;\n+            return;\n@@ -134,0 +150,4 @@\n+\n+        \/\/ Normal case: non-NULL params -> store and decode\n+        this.encodedParams = params.toByteArray();\n+        decodeParams();\n@@ -168,29 +188,3 @@\n-            \/\/ RSA key and signature algorithms requires the NULL parameters\n-            \/\/ to be present, see A.1 and A.2.4 of RFC 8017.\n-            if (algid.equals(RSAEncryption_oid)\n-                    || algid.equals(MD2_oid)\n-                    || algid.equals(MD5_oid)\n-                    || algid.equals(SHA_oid)\n-                    || algid.equals(SHA224_oid)\n-                    || algid.equals(SHA256_oid)\n-                    || algid.equals(SHA384_oid)\n-                    || algid.equals(SHA512_oid)\n-                    || algid.equals(SHA512_224_oid)\n-                    || algid.equals(SHA512_256_oid)\n-                    || algid.equals(SHA3_224_oid)\n-                    || algid.equals(SHA3_256_oid)\n-                    || algid.equals(SHA3_384_oid)\n-                    || algid.equals(SHA3_512_oid)\n-                    || algid.equals(SHA1withRSA_oid)\n-                    || algid.equals(SHA224withRSA_oid)\n-                    || algid.equals(SHA256withRSA_oid)\n-                    || algid.equals(SHA384withRSA_oid)\n-                    || algid.equals(SHA512withRSA_oid)\n-                    || algid.equals(SHA512$224withRSA_oid)\n-                    || algid.equals(SHA512$256withRSA_oid)\n-                    || algid.equals(MD2withRSA_oid)\n-                    || algid.equals(MD5withRSA_oid)\n-                    || algid.equals(SHA3_224withRSA_oid)\n-                    || algid.equals(SHA3_256withRSA_oid)\n-                    || algid.equals(SHA3_384withRSA_oid)\n-                    || algid.equals(SHA3_512withRSA_oid)) {\n+            \/\/ RSA key and signature algorithms and HmacSHA* algorithms requires\n+            \/\/ the NULL parameters to be present, see A.1 and A.2.4 of RFC 8017.\n+            if (OIDS_REQUIRING_NULL.contains(algid)) {\n@@ -198,0 +192,2 @@\n+            } else {\n+                \/\/ Parameters omitted\n@@ -649,26 +645,42 @@\n-    public static final ObjectIdentifier SHA1withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA1withRSA);\n-    public static final ObjectIdentifier SHA224withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA224withRSA);\n-    public static final ObjectIdentifier SHA256withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA256withRSA);\n-    public static final ObjectIdentifier SHA384withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA384withRSA);\n-    public static final ObjectIdentifier SHA512withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA512withRSA);\n-    public static final ObjectIdentifier SHA512$224withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA512$224withRSA);\n-    public static final ObjectIdentifier SHA512$256withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA512$256withRSA);\n-    public static final ObjectIdentifier MD2withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.MD2withRSA);\n-    public static final ObjectIdentifier MD5withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.MD5withRSA);\n-    public static final ObjectIdentifier SHA3_224withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA3_224withRSA);\n-    public static final ObjectIdentifier SHA3_256withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA3_256withRSA);\n-    public static final ObjectIdentifier SHA3_384withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA3_384withRSA);\n-    public static final ObjectIdentifier SHA3_512withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA3_512withRSA);\n+    \/\/ Set of OIDs that must explicitly encode a NULL parameter\n+    private static final Set<ObjectIdentifier> OIDS_REQUIRING_NULL = Set.of(\n+            \/\/ Hash algorithms\n+            ObjectIdentifier.of(KnownOIDs.MD2),\n+            ObjectIdentifier.of(KnownOIDs.MD5),\n+            ObjectIdentifier.of(KnownOIDs.SHA_1),\n+            ObjectIdentifier.of(KnownOIDs.SHA_224),\n+            ObjectIdentifier.of(KnownOIDs.SHA_256),\n+            ObjectIdentifier.of(KnownOIDs.SHA_384),\n+            ObjectIdentifier.of(KnownOIDs.SHA_512),\n+            ObjectIdentifier.of(KnownOIDs.SHA_512$224),\n+            ObjectIdentifier.of(KnownOIDs.SHA_512$256),\n+            ObjectIdentifier.of(KnownOIDs.SHA3_224),\n+            ObjectIdentifier.of(KnownOIDs.SHA3_256),\n+            ObjectIdentifier.of(KnownOIDs.SHA3_384),\n+            ObjectIdentifier.of(KnownOIDs.SHA3_512),\n+\n+            \/\/ RSA encryption\n+            ObjectIdentifier.of(KnownOIDs.RSA),\n+\n+            \/\/ RSA signatures\n+            ObjectIdentifier.of(KnownOIDs.SHA1withRSA),\n+            ObjectIdentifier.of(KnownOIDs.SHA224withRSA),\n+            ObjectIdentifier.of(KnownOIDs.SHA256withRSA),\n+            ObjectIdentifier.of(KnownOIDs.SHA384withRSA),\n+            ObjectIdentifier.of(KnownOIDs.SHA512withRSA),\n+            ObjectIdentifier.of(KnownOIDs.SHA512$224withRSA),\n+            ObjectIdentifier.of(KnownOIDs.SHA512$256withRSA),\n+            ObjectIdentifier.of(KnownOIDs.MD2withRSA),\n+            ObjectIdentifier.of(KnownOIDs.MD5withRSA),\n+            ObjectIdentifier.of(KnownOIDs.SHA3_224withRSA),\n+            ObjectIdentifier.of(KnownOIDs.SHA3_256withRSA),\n+            ObjectIdentifier.of(KnownOIDs.SHA3_384withRSA),\n+            ObjectIdentifier.of(KnownOIDs.SHA3_512withRSA),\n+\n+            \/\/ HMACs\n+            ObjectIdentifier.of(KnownOIDs.HmacSHA1),\n+            ObjectIdentifier.of(KnownOIDs.HmacSHA224),\n+            ObjectIdentifier.of(KnownOIDs.HmacSHA256),\n+            ObjectIdentifier.of(KnownOIDs.HmacSHA384),\n+            ObjectIdentifier.of(KnownOIDs.HmacSHA512)\n+    );\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":71,"deletions":59,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -70,0 +70,5 @@\n+        test(\"HmacSHA1\", true);\n+        test(\"HmacSHA224\", true);\n+        test(\"HmacSHA256\", true);\n+        test(\"HmacSHA384\", true);\n+        test(\"HmacSHA512\", true);\n@@ -86,1 +91,0 @@\n-        test(\"HmacSHA1\", false);\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/NullParams.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}