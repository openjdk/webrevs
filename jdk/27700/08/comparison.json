{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,3 +130,24 @@\n-        if (params != null) {\n-            encodedParams = params.toByteArray();\n-            decodeParams();\n+\n+        if (params == null) {\n+            this.encodedParams = null;\n+            this.algParams = null;\n+            return;\n+        }\n+\n+        \/*\n+         * If the parameters field explicitly contains an ASN.1 NULL, treat it as\n+         * \"no parameters\" rather than storing a literal NULL encoding.\n+         *\n+         * This canonicalization ensures consistent encoding\/decoding behavior:\n+         *  - Algorithms that omit parameters and those that encode explicit NULL\n+         *   are treated equivalently (encodedParams == null).\n+         *\/\n+        if (params.tag == DerValue.tag_Null) {\n+            if (params.length() != 0) {\n+                throw new IOException(\"Invalid ASN.1 NULL in AlgorithmId parameters: \" +\n+                        \"non-zero length\");\n+            }\n+            \/\/ Canonicalize to \"no parameters\" representation for consistency\n+            this.encodedParams = null;\n+            this.algParams = null;\n+            return;\n@@ -134,0 +155,4 @@\n+\n+        \/\/ Normal case: non-NULL params -> store and decode\n+        this.encodedParams = params.toByteArray();\n+        decodeParams();\n@@ -166,31 +191,1 @@\n-            \/\/ MessageDigest algorithms usually have a NULL parameters even\n-            \/\/ if most RFCs suggested absent.\n-            \/\/ RSA key and signature algorithms requires the NULL parameters\n-            \/\/ to be present, see A.1 and A.2.4 of RFC 8017.\n-            if (algid.equals(RSAEncryption_oid)\n-                    || algid.equals(MD2_oid)\n-                    || algid.equals(MD5_oid)\n-                    || algid.equals(SHA_oid)\n-                    || algid.equals(SHA224_oid)\n-                    || algid.equals(SHA256_oid)\n-                    || algid.equals(SHA384_oid)\n-                    || algid.equals(SHA512_oid)\n-                    || algid.equals(SHA512_224_oid)\n-                    || algid.equals(SHA512_256_oid)\n-                    || algid.equals(SHA3_224_oid)\n-                    || algid.equals(SHA3_256_oid)\n-                    || algid.equals(SHA3_384_oid)\n-                    || algid.equals(SHA3_512_oid)\n-                    || algid.equals(SHA1withRSA_oid)\n-                    || algid.equals(SHA224withRSA_oid)\n-                    || algid.equals(SHA256withRSA_oid)\n-                    || algid.equals(SHA384withRSA_oid)\n-                    || algid.equals(SHA512withRSA_oid)\n-                    || algid.equals(SHA512$224withRSA_oid)\n-                    || algid.equals(SHA512$256withRSA_oid)\n-                    || algid.equals(MD2withRSA_oid)\n-                    || algid.equals(MD5withRSA_oid)\n-                    || algid.equals(SHA3_224withRSA_oid)\n-                    || algid.equals(SHA3_256withRSA_oid)\n-                    || algid.equals(SHA3_384withRSA_oid)\n-                    || algid.equals(SHA3_512withRSA_oid)) {\n+            if (OIDS_REQUIRING_NULL.contains(algid.toString())) {\n@@ -198,0 +193,2 @@\n+            } else {\n+                \/\/ Parameters omitted\n@@ -649,26 +646,50 @@\n-    public static final ObjectIdentifier SHA1withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA1withRSA);\n-    public static final ObjectIdentifier SHA224withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA224withRSA);\n-    public static final ObjectIdentifier SHA256withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA256withRSA);\n-    public static final ObjectIdentifier SHA384withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA384withRSA);\n-    public static final ObjectIdentifier SHA512withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA512withRSA);\n-    public static final ObjectIdentifier SHA512$224withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA512$224withRSA);\n-    public static final ObjectIdentifier SHA512$256withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA512$256withRSA);\n-    public static final ObjectIdentifier MD2withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.MD2withRSA);\n-    public static final ObjectIdentifier MD5withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.MD5withRSA);\n-    public static final ObjectIdentifier SHA3_224withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA3_224withRSA);\n-    public static final ObjectIdentifier SHA3_256withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA3_256withRSA);\n-    public static final ObjectIdentifier SHA3_384withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA3_384withRSA);\n-    public static final ObjectIdentifier SHA3_512withRSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA3_512withRSA);\n+    \/* Set of OIDs that must explicitly encode a NULL parameter in AlgorithmIdentifier.\n+     * References:\n+         - RFC 8017 (PKCS #1) §A.1, §A.2.4: RSA key and signature algorithms\n+         - RFC 9879 (HMAC) §4: HMAC algorithm identifiers\n+         - RFC 9688 (HMAC with SHA-3) §4.3: HMAC-SHA3 algorithms MUST omit parameters\n+     *\/\n+    private static final Set<String> OIDS_REQUIRING_NULL = Set.of(\n+            \/\/ MessageDigest algorithms usually have a NULL parameters even\n+            \/\/ if most RFCs suggested absent.\n+            KnownOIDs.MD2.value(),\n+            KnownOIDs.MD5.value(),\n+            KnownOIDs.SHA_1.value(),\n+            KnownOIDs.SHA_224.value(),\n+            KnownOIDs.SHA_256.value(),\n+            KnownOIDs.SHA_384.value(),\n+            KnownOIDs.SHA_512.value(),\n+            KnownOIDs.SHA_512$224.value(),\n+            KnownOIDs.SHA_512$256.value(),\n+            KnownOIDs.SHA3_224.value(),\n+            KnownOIDs.SHA3_256.value(),\n+            KnownOIDs.SHA3_384.value(),\n+            KnownOIDs.SHA3_512.value(),\n+\n+            \/\/--- RSA key and signature algorithms (RFC 8017 §A.1, §A.2.4)\n+            KnownOIDs.RSA.value(),\n+            KnownOIDs.SHA1withRSA.value(),\n+            KnownOIDs.SHA224withRSA.value(),\n+            KnownOIDs.SHA256withRSA.value(),\n+            KnownOIDs.SHA384withRSA.value(),\n+            KnownOIDs.SHA512withRSA.value(),\n+            KnownOIDs.SHA512$224withRSA.value(),\n+            KnownOIDs.SHA512$256withRSA.value(),\n+            KnownOIDs.MD2withRSA.value(),\n+            KnownOIDs.MD5withRSA.value(),\n+            KnownOIDs.SHA3_224withRSA.value(),\n+            KnownOIDs.SHA3_256withRSA.value(),\n+            KnownOIDs.SHA3_384withRSA.value(),\n+            KnownOIDs.SHA3_512withRSA.value(),\n+\n+            \/\/ HMACs per RFC 9879 (Section 4): these require explicit NULL parameters\n+            \/\/ Note: HMAC-SHA3 algorithms (RFC 9688 §4.3) MUST omit parameters,\n+            \/\/ so they are intentionally excluded from this list.\n+            KnownOIDs.HmacSHA1.value(),\n+            KnownOIDs.HmacSHA224.value(),\n+            KnownOIDs.HmacSHA256.value(),\n+            KnownOIDs.HmacSHA384.value(),\n+            KnownOIDs.HmacSHA512.value(),\n+            KnownOIDs.HmacSHA512$224.value(),\n+            KnownOIDs.HmacSHA512$256.value()\n+    );\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":82,"deletions":61,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -32,1 +33,1 @@\n-import java.io.*;\n+import java.io.IOException;\n@@ -37,0 +38,2 @@\n+import jdk.test.lib.Asserts;\n+\n@@ -100,0 +103,15 @@\n+\n+        \/\/ Construct an AlgorithmId with explicit DER NULL parameters\n+        DerValue explicitNullParams = new DerValue(DerValue.tag_Null, new byte[0]);\n+        AlgorithmId aiNullParams = new AlgorithmId(AlgorithmId.SHA256_oid,\n+                explicitNullParams);\n+        \/\/ The constructor should canonicalize this to \"no parameters\"\n+        Asserts.assertTrue(aiNullParams.getEncodedParams() == null);\n+        AlgorithmId aiNormal = AlgorithmId.get(\"SHA-256\");\n+        Asserts.assertEquals(aiNullParams, aiNormal);\n+        Asserts.assertEquals(aiNullParams.hashCode(), aiNormal.hashCode());\n+\n+        \/\/ Test invalid ASN.1 NULL (non-zero length)\n+        DerValue invalidNull = new DerValue(DerValue.tag_Null, new byte[]{0x00});\n+        Asserts.assertThrows(IOException.class,\n+                () -> new AlgorithmId(AlgorithmId.SHA256_oid, invalidNull));\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/AlgorithmIdEqualsHashCode.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,7 @@\n+        test(\"HmacSHA1\", true);\n+        test(\"HmacSHA224\", true);\n+        test(\"HmacSHA256\", true);\n+        test(\"HmacSHA384\", true);\n+        test(\"HmacSHA512\", true);\n+        test(\"HmacSHA512\/224\", true);\n+        test(\"HmacSHA512\/256\", true);\n@@ -86,1 +93,0 @@\n-        test(\"HmacSHA1\", false);\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/NullParams.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}