{"files":[{"patch":"@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -37,0 +38,2 @@\n+import jdk.test.lib.Asserts;\n+\n@@ -101,36 +104,9 @@\n-        try {\n-            System.out.println(\"\\nTesting explicit ASN.1 NULL parameter \" +\n-                    \"canonicalization...\");\n-\n-            \/\/ Assume failure by default\n-            boolean passed = false;\n-\n-            \/\/ Construct an AlgorithmId with explicit DER NULL parameters\n-            DerValue explicitNullParams = new DerValue(DerValue.tag_Null, new byte[0]);\n-            AlgorithmId aiNullParams = new AlgorithmId(AlgorithmId.SHA256_oid,\n-                    explicitNullParams);\n-\n-            \/\/ The constructor should canonicalize this to \"no parameters\"\n-            if (aiNullParams.getEncodedParams() == null) {\n-                \/\/ Ensure equals() and hashCode() are consistent for canonicalized\n-                \/\/ vs normal AlgorithmId\n-                AlgorithmId aiNormal = AlgorithmId.get(\"SHA-256\");\n-                if (aiNullParams.equals(aiNormal) &&\n-                        aiNullParams.hashCode() == aiNormal.hashCode()) {\n-                    passed = true; \/\/ Only pass if *both* conditions succeed\n-                }\n-            }\n-\n-            if (!passed) {\n-                throw new Exception(\"FAILED: explicit NULL canonicalization or\" +\n-                        \" equals()\/hashCode() test\");\n-            }\n-\n-            System.out.println(\"PASSED explicit ASN.1 NULL canonicalization and\" +\n-                    \" equality test\");\n-\n-        } catch (Exception e) {\n-            System.out.println(\"FAILED: Exception during explicit NULL parameter test - \"\n-                    + e);\n-            throw e; \/\/ Rethrow to mark test failure\n-        }\n+        \/\/ Construct an AlgorithmId with explicit DER NULL parameters\n+        DerValue explicitNullParams = new DerValue(DerValue.tag_Null, new byte[0]);\n+        AlgorithmId aiNullParams = new AlgorithmId(AlgorithmId.SHA256_oid,\n+                explicitNullParams);\n+        \/\/ The constructor should canonicalize this to \"no parameters\"\n+        Asserts.assertTrue(aiNullParams.getEncodedParams() == null);\n+        AlgorithmId aiNormal = AlgorithmId.get(\"SHA-256\");\n+        Asserts.assertEquals(aiNullParams, aiNormal);\n+        Asserts.assertEquals(aiNullParams.hashCode(), aiNormal.hashCode());\n@@ -139,12 +115,3 @@\n-        try {\n-            DerValue invalidNull = new DerValue(DerValue.tag_Null, new byte[]{0x00});\n-            new AlgorithmId(AlgorithmId.SHA256_oid, invalidNull);\n-            throw new Exception(\"FAILED invalid ASN.1 NULL test: expected IOException \" +\n-                    \"not thrown\");\n-        } catch (IOException expected) {\n-            System.out.println(\"PASSED invalid ASN.1 NULL test \" +\n-                    \"(caught expected IOException)\");\n-        } catch (Exception e) {\n-            throw new Exception(\"FAILED invalid ASN.1 NULL test: unexpected exception\" +\n-                    \" type\", e);\n-        }\n+        DerValue invalidNull = new DerValue(DerValue.tag_Null, new byte[]{0x00});\n+        Asserts.assertThrows(IOException.class,\n+                () -> new AlgorithmId(AlgorithmId.SHA256_oid, invalidNull));\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/AlgorithmIdEqualsHashCode.java","additions":15,"deletions":48,"binary":false,"changes":63,"status":"modified"}]}