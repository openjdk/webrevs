{"files":[{"patch":"@@ -31,1 +31,1 @@\n-import java.lang.ref.Cleaner;\n+import java.lang.ref.PhantomReference;\n@@ -90,1 +90,1 @@\n-     * Has class loader been reclaimed or not.\n+     * Phantom reference to the class loader.\n@@ -92,1 +92,1 @@\n-    volatile boolean is_reclaimed = false;\n+    private PhantomReference<Object> customClassLoaderPhantomRef = null;\n@@ -104,0 +104,8 @@\n+    \/**\n+     * Has class loader been reclaimed or not.\n+     *\/\n+    private boolean isClassLoaderReclaimed() {\n+        return customClassLoaderPhantomRef != null\n+            && customClassLoaderPhantomRef.refersTo(null);\n+    }\n+\n@@ -141,2 +149,1 @@\n-        \/\/ Register a Cleaner to inform us when the class loader has been reclaimed.\n-        Cleaner.create().register(customClassLoader, () -> { is_reclaimed = true; } );\n+        customClassLoaderPhantomRef = new PhantomReference<>(customClassLoader, null);\n@@ -157,2 +164,1 @@\n-        \/\/ Register a Cleaner to inform us when the class loader has been reclaimed.\n-        Cleaner.create().register(customClassLoader, () -> { is_reclaimed = true; } );\n+        customClassLoaderPhantomRef = new PhantomReference<>(customClassLoader, null);\n@@ -247,2 +253,0 @@\n-        is_reclaimed = false;\n-\n@@ -250,1 +254,0 @@\n-        long waitTimeout = (customClassLoader == null) ? 0 : WAIT_TIMEOUT;\n@@ -257,14 +260,0 @@\n-        \/\/ give GC chance to run and wait for receiving reclaim notification\n-        long timeToFinish = System.currentTimeMillis() + waitTimeout;\n-        while (!is_reclaimed && System.currentTimeMillis() < timeToFinish) {\n-            if (!stresser.continueExecution()) {\n-                return false;\n-            }\n-            try {\n-                \/\/ suspend thread for a while\n-                Thread.sleep(WAIT_DELTA);\n-            } catch (InterruptedException e) {\n-                throw new Failure(\"Unexpected InterruptedException while class unloading: \" + e);\n-            }\n-        }\n-\n@@ -272,1 +261,1 @@\n-        if (is_reclaimed) {\n+        if (isClassLoaderReclaimed()) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/ClassUnloader.java","additions":14,"deletions":25,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -152,2 +152,0 @@\n-    public static final int MAX_UNLOAD_ATTEMPS = 5;\n-\n@@ -157,2 +155,0 @@\n-        int unloadAttemps = 0;\n-\n@@ -160,5 +156,1 @@\n-            boolean wasUnloaded = false;\n-\n-            while (!wasUnloaded && (unloadAttemps++ < MAX_UNLOAD_ATTEMPS)) {\n-                wasUnloaded = classUnloader.unloadClass();\n-            }\n+            boolean wasUnloaded = classUnloader.unloadClass();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/AbstractDebuggeeTest.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"}]}