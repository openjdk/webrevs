{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -363,1 +363,1 @@\n-                    Utf8Entry name = classReader.readUtf8Entry(p);\n+                    Utf8Entry name = classReader.readUtf8EntryOrNull(p);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeBuilder;\n+import jdk.internal.classfile.attribute.MethodParameterInfo;\n+import jdk.internal.classfile.attribute.MethodParametersAttribute;\n+import org.junit.jupiter.api.Test;\n+import org.opentest4j.AssertionFailedError;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/*\n+ * @test\n+ * @issue 8304837\n+ * @summary Testing BoundAttributes\n+ * @run junit BoundAttributeTest\n+ *\/\n+class BoundAttributeTest {\n+\n+    @Test\n+    void testReadMethodParametersAttributeWithoutParameterName() {\n+        \/\/ build a simple method: void method(int)\n+        MethodTypeDesc methodTypeDesc = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_int);\n+        byte[] raw = Classfile.build(ClassDesc.of(\"TestClass\"), builder -> {\n+            builder.withMethod(\"method\", methodTypeDesc, 0, mb -> {\n+                mb.withCode(CodeBuilder::return_);\n+                \/\/ add a MethodParameters attribute without name for the parameter\n+                mb.with(MethodParametersAttribute.of(MethodParameterInfo.ofParameter(Optional.empty(), 0)));\n+            });\n+        });\n+        ClassModel model = Classfile.parse(raw);\n+        MethodParametersAttribute methodParametersAttribute = model.methods().get(0)\n+                .findAttribute(Attributes.METHOD_PARAMETERS)\n+                .orElseThrow(() -> new AssertionFailedError(\"Attribute not present\"));\n+        \/\/ MethodParametersAttribute#parameters() materializes the parameters\n+        List<MethodParameterInfo> parameters = assertDoesNotThrow(methodParametersAttribute::parameters);\n+        assertTrue(parameters.get(0).name().isEmpty());\n+    }\n+}\n","filename":"test\/jdk\/jdk\/classfile\/BoundAttributeTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}