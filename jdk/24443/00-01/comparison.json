{"files":[{"patch":"@@ -84,1 +84,1 @@\n-    \/\/ Called when a memory area is returned to the memory manager.\n+    \/\/ Called when a memory area is going to be handed out to be used.\n@@ -86,2 +86,2 @@\n-    \/\/ Makes sure this area is covered by a single placeholder.\n-    static void insert_callback(const ZMemory& area) {\n+    \/\/ Splits the memory area into granule-sized placeholders.\n+    static void prepare_for_hand_out_callback(const ZMemory& area) {\n@@ -90,1 +90,1 @@\n-      coalesce_into_one_placeholder(area.start(), area.size());\n+      split_into_granule_sized_placeholders(area.start(), area.size());\n@@ -93,1 +93,1 @@\n-    \/\/ Called when a memory area is going to be handed out to be used.\n+    \/\/ Called when a memory area is handed back to the memory manager.\n@@ -95,2 +95,2 @@\n-    \/\/ Splits the memory area into granule sized placeholders.\n-    static void remove_callback(const ZMemory& area) {\n+    \/\/ Combines the granule-sized placeholders into one placeholder.\n+    static void prepare_for_hand_back_callback(const ZMemory& area) {\n@@ -99,1 +99,1 @@\n-      split_into_granule_sized_placeholders(area.start(), area.size());\n+      coalesce_into_one_placeholder(area.start(), area.size());\n@@ -102,2 +102,2 @@\n-    \/\/ Called when inserting a memory area and it can be merged at the start of\n-    \/\/ an existing area.\n+    \/\/ Called when inserting a memory area and it can be merged with an\n+    \/\/ existing, adjacent memory area.\n@@ -115,2 +115,2 @@\n-    \/\/ Called when a memory area is removed at the front of an existing memory\n-    \/\/ area.\n+    \/\/ Called when a memory area is removed from the front or back of an existing\n+    \/\/ memory area.\n@@ -118,1 +118,1 @@\n-    \/\/ Turns the first part of the memory area into granule-sized placeholders.\n+    \/\/ Splits the memory into two placeholders.\n@@ -138,5 +138,1 @@\n-      \/\/ The insert callback is called when virtual memory is returned to the\n-      \/\/ memory manager. The returned memory area is then covered by a new\n-      \/\/ single placeholder.\n-      \/\/\n-      \/\/ The remove callback is called when virtual memory is removed and\n+      \/\/ The prepare_for_hand_out callback is called when virtual memory is\n@@ -146,0 +142,4 @@\n+      \/\/ The prepare_for_hand_back callback is called when previously handed\n+      \/\/ out virtual memory is handed back  to the memory manager. The\n+      \/\/ returned memory area is then covered by a new single placeholder.\n+      \/\/\n@@ -149,1 +149,1 @@\n-      \/\/ The split callback is called when a virtual memory area is split into\n+      \/\/ The shrink callback is called when a virtual memory area is split into\n@@ -158,2 +158,2 @@\n-      callbacks._insert = &insert_callback;\n-      callbacks._remove = &remove_callback;\n+      callbacks._prepare_for_hand_out = &prepare_for_hand_out_callback;\n+      callbacks._prepare_for_hand_back = &prepare_for_hand_back_callback;\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zVirtualMemory_windows.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-  : _insert(nullptr),\n-    _remove(nullptr),\n+  : _prepare_for_hand_out(nullptr),\n+    _prepare_for_hand_back(nullptr),\n@@ -125,2 +125,2 @@\n-      if (_callbacks._remove != nullptr) {\n-        _callbacks._remove(ZMemory(start, size));\n+      if (_callbacks._prepare_for_hand_out != nullptr) {\n+        _callbacks._prepare_for_hand_out(ZMemory(start, size));\n@@ -155,2 +155,2 @@\n-    if (_callbacks._remove != nullptr) {\n-      _callbacks._remove(ZMemory(start, *allocated));\n+    if (_callbacks._prepare_for_hand_out != nullptr) {\n+      _callbacks._prepare_for_hand_out(ZMemory(start, *allocated));\n@@ -186,2 +186,2 @@\n-      if (_callbacks._remove != nullptr) {\n-        _callbacks._remove(ZMemory(start, size));\n+      if (_callbacks._prepare_for_hand_out != nullptr) {\n+        _callbacks._prepare_for_hand_out(ZMemory(start, size));\n@@ -246,2 +246,2 @@\n-  if (_callbacks._insert != nullptr) {\n-    _callbacks._insert(ZMemory(start, size));\n+  if (_callbacks._prepare_for_hand_back != nullptr) {\n+    _callbacks._prepare_for_hand_back(ZMemory(start, size));\n@@ -254,0 +254,6 @@\n+  \/\/ Note that there's no need to call the _prepare_for_hand_back when memory\n+  \/\/ is added the first time. We don't have to undo the effects of a previous\n+  \/\/ _prepare_for_hand_out callback.\n+\n+  \/\/ No need to lock during initialization.\n+\n@@ -258,2 +264,2 @@\n-  \/\/ This intentionally does not call the \"remove\" callback.\n-  \/\/ This call is typically used to unregister memory before unreserving a surplus.\n+  \/\/ Note that this doesn't hand out memory to be used, so we don't call the\n+  \/\/ _prepare_for_hand_out callback.\n@@ -267,1 +273,1 @@\n-  \/\/ Don't invoke the \"remove\" callback\n+  \/\/ Don't invoke the _prepare_for_hand_out callback\n","filename":"src\/hotspot\/share\/gc\/z\/zMemory.cpp","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -62,4 +62,2 @@\n-  typedef void (*CallbackInsert)(const ZMemory& area);\n-  typedef void (*CallbackRemove)(const ZMemory& area);\n-  typedef void (*CallbackGrow)(const ZMemory& from, const ZMemory& to);\n-  typedef void (*CallbackShrink)(const ZMemory& from, const ZMemory& to);\n+  typedef void (*CallbackPrepare)(const ZMemory& area);\n+  typedef void (*CallbackResize)(const ZMemory& from, const ZMemory& to);\n@@ -68,4 +66,4 @@\n-    CallbackInsert _insert;\n-    CallbackRemove _remove;\n-    CallbackGrow   _grow;\n-    CallbackShrink _shrink;\n+    CallbackPrepare _prepare_for_hand_out;\n+    CallbackPrepare _prepare_for_hand_back;\n+    CallbackResize  _grow;\n+    CallbackResize  _shrink;\n","filename":"src\/hotspot\/share\/gc\/z\/zMemory.hpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-      GTEST_SKIP() << \"Fixture fail to reserve adequate memory, reserved \"\n+      GTEST_SKIP() << \"Fixture failed to reserve adequate memory, reserved \"\n@@ -189,1 +189,1 @@\n-    \/\/ Verify that we get placeholder for first granule\n+    \/\/ Verify that we get a placeholder for the first granule\n@@ -213,1 +213,1 @@\n-    \/\/ Verify that we get placeholder for last granule\n+    \/\/ Verify that we get a placeholder for the last granule\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zVirtualMemoryManager.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}