{"files":[{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347474\n+ * @summary Verify -XDrawDiagnostics flag is picked up by JavacMessages singleton\n+ * @library \/tools\/lib\n+ * @modules\n+ *  jdk.compiler\/com.sun.tools.javac.api\n+ *  jdk.compiler\/com.sun.tools.javac.file\n+ *  jdk.compiler\/com.sun.tools.javac.main\n+ *  jdk.compiler\/com.sun.tools.javac.util:+open\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import com.sun.tools.javac.file.JavacFileManager;\n+import com.sun.tools.javac.main.Main;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.JavacMessages;\n+import com.sun.tools.javac.util.RawDiagnosticFormatter;\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class OptionsOrderingTest extends TestRunner {\n+\n+    protected final ToolBox tb;\n+\n+    public OptionsOrderingTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void testJavacMessagesDiagFormatter() throws Exception {\n+\n+        \/\/ Write source file\n+        Path dir = Paths.get(getClass().getSimpleName());\n+        tb.writeJavaFiles(dir, \"class Test { }\");\n+\n+        \/\/ Run the compiler where we supply the Context\n+        Context context = new Context();\n+        JavacFileManager.preRegister(context);\n+        Main compiler = new Main(\"javac\", new PrintWriter(Writer.nullWriter()));\n+        String[] args = new String[] {\n+          \"-XDrawDiagnostics\",\n+          tb.findJavaFiles(dir)[0].toString()\n+        };\n+        Main.Result result = compiler.compile(args, context);\n+\n+        \/\/ Verify field JavacMessages.diagFormatter is a RawDiagnosticFormatter\n+        JavacMessages messages = JavacMessages.instance(context);\n+        Field diagFormatterField = messages.getClass().getDeclaredField(\"diagFormatter\");\n+        diagFormatterField.setAccessible(true);\n+        Class<?> diagFormatterClass = diagFormatterField.get(messages).getClass();\n+        if (!Objects.equals(diagFormatterClass, RawDiagnosticFormatter.class)) {\n+            throw new AssertionError(String.format(\n+              \"diagFormatter: expected %s but found %s\",\n+              RawDiagnosticFormatter.class, diagFormatterClass));\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new OptionsOrderingTest().testJavacMessagesDiagFormatter();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/options\/OptionsOrderingTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}