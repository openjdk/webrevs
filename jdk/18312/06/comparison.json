{"files":[{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.event.MouseWheelEvent;\n+import javax.swing.JOptionPane;\n+\n+import static javax.swing.JOptionPane.WARNING_MESSAGE;\n+\n+\/*\n+ * @test\n+ * @bug 6730447\n+ * @summary To verify the support for high resolution mouse wheel.\n+ *          AWT panel needs to support high-res mouse wheel rotation.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AWTPanelSmoothWheel\n+ *\/\n+\n+public class AWTPanelSmoothWheel {\n+    private static int wheelEventCount = 0;\n+    private static int wheelRotationCount = 0;\n+    private static int hiResWheelCount = 0;\n+    private static final String WARNING_MSG = \"WARNING !!!\"\n+            + \" You might NOT be using a hi-res mouse.\";\n+    private static final String INSTRUCTIONS = \"\"\"\n+            <html>\n+            <body>\n+            This test is relevant on platforms with high-resolution mouse wheel,\n+            please press PASS if this is not the case.<br> <br>\n+\n+            Place the mouse cursor above the green panel and rotate the mouse wheel,\n+            the test will print mouse wheel event messages in the format\n+            <b> [Event#, WheelRotation, PreciseWheelRotation]<\/b> into the logging\n+            panel below the instruction window.<br> <br>\n+\n+            A hi-res mouse is one which produces MouseWheelEvents having\n+            <b>preciseWheelRotation &lt; 1.<\/b> <br> <br>\n+\n+            When preciseWheelRotation adds up to 1, wheelRotation becomes 1. <br>\n+            You should see a few events where preciseWheelRotation &lt; 1 &amp;\n+            wheelRotation = 0 followed by a event where preciseWheelRotation = 1 &amp;\n+            wheelRotation = 1.<br> <br>\n+\n+            Check if the test works OK when the mouse wheel is rotated very slow.<br> <br>\n+            This is a semi-automated test, if you are using a hi-res mouse and\n+            satisfy the hi-res MouseWheelEvents as described above,\n+            the test should automatically pass.<br> <br>\n+\n+            <hr>\n+            PLEASE NOTE:\n+            <ul>\n+                <li> If you don't see events with preciseWheelRotation &lt; 1,\n+                then the mouse doesn't support high-resolution scrolling.<\/li>\n+                <li> A warning is shown if you are not using a hi-res mouse. <\/li>\n+                <li> MouseWheelEvent logs are displayed in the log area\n+                for user reference. <\/li>\n+            <\/ul>\n+            <br>\n+            <\/body>\n+            <\/html>\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(26)\n+                .columns(50)\n+                .testTimeOut(10)\n+                .logArea(10)\n+                .testUI(AWTPanelSmoothWheel::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame frame = new Frame(\"Test Wheel Rotation\");\n+        Panel panel = new Panel();\n+        panel.setBackground(Color.GREEN);\n+        panel.addMouseWheelListener(e -> {\n+            if (e.getScrollType() == MouseWheelEvent.WHEEL_UNIT_SCROLL) {\n+                PassFailJFrame.log(\"WheelEvent#\" + (++wheelEventCount)\n+                        + \" --- Wheel Rotation: \" + e.getWheelRotation()\n+                        + \" --- Precise Wheel Rotation: \"\n+                        + String.format(\"%.2f\", e.getPreciseWheelRotation()));\n+                if (e.getWheelRotation() >= 1) {\n+                    wheelRotationCount = e.getWheelRotation();\n+                }\n+                if (e.getPreciseWheelRotation() < 1) {\n+                    hiResWheelCount++;\n+                }\n+                if (wheelEventCount >= 5 && hiResWheelCount == 0) {\n+                    PassFailJFrame.log(WARNING_MSG);\n+                    JOptionPane.showMessageDialog(frame, WARNING_MSG,\n+                            \"WARNING\", WARNING_MESSAGE);\n+                }\n+                if (wheelRotationCount > 5\n+                        && (hiResWheelCount \/ 2 >= wheelRotationCount)) {\n+                    PassFailJFrame.log(\"The test passes: hiResWheelCount = \"\n+                            + hiResWheelCount + \" wheelRotationCount = \"\n+                            + wheelRotationCount);\n+                    PassFailJFrame.forcePass();\n+                }\n+            }\n+        });\n+        frame.setSize(400, 200);\n+        frame.setLayout(new BorderLayout());\n+        frame.add(panel, BorderLayout.CENTER);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/AWTPanelSmoothWheel.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -1,43 +0,0 @@\n-<!--\n- Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--  \n-  @test\n-  @bug 6730447\n-  @summary  Support for high resolution mouse wheel is still incomplete. AWT panel needs to be supported\n-  @author dmitry.cherepanov@...: area=awt.mouse\n-  @run applet\/manual=yesno AWTPanelSmoothWheel.html\n-  -->\n-<head>\n-<title> AWTPanelSmoothWheel <\/title>\n-<\/head>\n-<body>\n-\n-<h1> AWTPanelSmoothWheel <br>Bug ID: 6730447<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"AWTPanelSmoothWheel.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/AWTPanelSmoothWheel\/AWTPanelSmoothWheel.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,251 +0,0 @@\n-\/*\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  test\n-  @bug 6730447\n-  @summary Support for high resolution mouse wheel is still incomplete. AWT panel needs to be supported\n-  @author dmitry.cherepanov@...: area=awt.mouse\n-  @run applet\/manual=yesno AWTPanelSmoothWheel.html\n-*\/\n-\n-\/**\n- * AWTPanelSmoothWheel.java\n- *\n- * summary:\n- *\/\n-\n-import java.applet.Applet;\n-import java.awt.*;\n-import java.awt.event.*;\n-\n-\/\/Manual tests should run as applet tests if possible because they\n-\/\/ get their environments cleaned up, including AWT threads, any\n-\/\/ test created threads, and any system resources used by the test\n-\/\/ such as file descriptors.  (This is normally not a problem as\n-\/\/ main tests usually run in a separate VM, however on some platforms\n-\/\/ such as the Mac, separate VMs are not possible and non-applet\n-\/\/ tests will cause problems).  Also, you don't have to worry about\n-\/\/ synchronisation stuff in Applet tests the way you do in main\n-\/\/ tests...\n-\n-\n-public class AWTPanelSmoothWheel extends Applet\n-{\n-    \/\/Declare things used in the test, like buttons and labels here\n-\n-    public void init()\n-    {\n-        \/\/Create instructions for the user here, as well as set up\n-        \/\/ the environment -- set the layout manager, add buttons,\n-        \/\/ etc.\n-        this.setLayout (new BorderLayout ());\n-\n-        String[] instructions =\n-        {\n-            \" the test is relevant for windows platforms and \",\n-            \" mouses with high-resolution wheel, please just press pass if it's not the case \",\n-            \" place the mouse cursor above the green panel and rotate the mouse wheel \" ,\n-            \" the test will print all mouse wheel messages into the logging panel, \",\n-            \" please make sure that some of the messages have non-zero 'wheelRotation' value \",\n-            \" in this case the test passes, otherwise it fails, \",\n-            \" please make sure the test works OK if the mouse wheel is rotated very slow  \"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n-\n-    }\/\/End  init()\n-\n-    public void start ()\n-    {\n-        Panel panel = new Panel();\n-        panel.setBackground(Color.green);\n-        panel.addMouseWheelListener(new MouseWheelListener() {\n-            public void mouseWheelMoved(MouseWheelEvent e) {\n-                Sysout.println(e.toString());\n-            }\n-        });\n-\n-        \/\/Get things going.  Request focus, set size, et cetera\n-        setSize (200,200);\n-        setLayout(new BorderLayout());\n-        add(panel, BorderLayout.CENTER);\n-        setVisible(true);\n-        validate();\n-\n-        \/\/What would normally go into main() will probably go here.\n-        \/\/Use System.out.println for diagnostic messages that you want\n-        \/\/ to read after the test is done.\n-        \/\/Use Sysout.println for messages you want the tester to read.\n-\n-    }\/\/ start()\n-\n-    \/\/The rest of this class is the actions which perform the test...\n-\n-    \/\/Use Sysout.println to communicate with the user NOT System.out!!\n-    \/\/Sysout.println (\"Something Happened!\");\n-\n-}\/\/ class ManualYesNoTest\n-\n-\/* Place other classes related to the test after this line *\/\n-\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n-\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/AWTPanelSmoothWheel\/AWTPanelSmoothWheel.java","additions":0,"deletions":251,"binary":false,"changes":251,"status":"deleted"}]}