{"files":[{"patch":"@@ -1555,1 +1555,3 @@\n-                 * case we need to use the position to disambiguate\n+                 * case we need to use the position to disambiguate, but if we loaded the record from a class file\n+                 * all positions will be -1, in that case we have to ignore the position and match only based on the\n+                 * name\n@@ -1557,1 +1559,1 @@\n-                if (rc.name == var.name && var.pos == rc.pos) {\n+                if (rc.name == var.name && (var.pos == rc.pos || rc.pos == -1)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8332297\n+ * @summary annotation processor that generates records sometimes fails due to NPE in javac\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask toolbox.Task\n+ * @build RecordGenerationTest JavacTestingAbstractProcessor\n+ * @run main RecordGenerationTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+\n+import javax.annotation.processing.FilerException;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedOptions;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+\n+import javax.lang.model.element.TypeElement;\n+import javax.tools.StandardLocation;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class RecordGenerationTest {\n+    public static void main(String... args) throws Exception {\n+        new RecordGenerationTest().run();\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws Exception {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    void run() throws Exception {\n+        Path allInOne = Paths.get(\"allInOne\");\n+        if (Files.isDirectory(allInOne)) {\n+            tb.cleanDirectory(allInOne);\n+        }\n+        Files.deleteIfExists(allInOne);\n+        tb.createDirectories(allInOne);\n+\n+        tb.writeJavaFiles(allInOne,\n+                \"\"\"\n+                import java.io.IOException;\n+                import java.io.OutputStream;\n+                import java.io.Writer;\n+                import java.nio.file.Files;\n+                import java.nio.file.Path;\n+                import java.nio.file.Paths;\n+                import java.util.Set;\n+\n+                import javax.annotation.processing.AbstractProcessor;\n+                import javax.annotation.processing.FilerException;\n+                import javax.annotation.processing.RoundEnvironment;\n+                import javax.annotation.processing.SupportedOptions;\n+                import javax.annotation.processing.SupportedAnnotationTypes;\n+\n+                import javax.lang.model.element.TypeElement;\n+                import javax.tools.StandardLocation;\n+\n+                @SupportedAnnotationTypes(\"*\")\n+                public class AP extends AbstractProcessor {\n+                    @Override\n+                    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+                        if (roundEnv.processingOver()) {\n+                            try (Writer w = processingEnv.getFiler().createSourceFile(\"ConfRecord\").openWriter()) {\n+                                w.append(\"@RecordBuilder public record ConfRecord(int maxConcurrency) implements Conf {}\");\n+                            } catch (IOException ex) {\n+                                throw new IllegalStateException(ex);\n+                            }\n+                        }\n+                        return true;\n+                    }\n+                }\n+                \"\"\"\n+        );\n+\n+        new JavacTask(tb).options(\"-d\", allInOne.toString())\n+                .files(findJavaFiles(allInOne))\n+                .run()\n+                .writeAll();\n+\n+        tb.writeJavaFiles(allInOne,\n+                \"\"\"\n+                interface Conf {\n+                    int maxConcurrency( );\n+                }\n+                \"\"\",\n+                \"\"\"\n+                import java.lang.annotation.*;\n+                public @interface RecordBuilder {\n+                }\n+                \"\"\"\n+        );\n+\n+        Path confSource = Paths.get(allInOne.toString(), \"Conf.java\");\n+        new JavacTask(tb).options(\"-processor\", \"AP\",\n+                \"-cp\", allInOne.toString(),\n+                \"-d\", allInOne.toString())\n+                .files(confSource)\n+                .run()\n+                .writeAll();\n+\n+        \/* the bug reported at JDK-8332297 was reproducible only every other time this is why we reproduce\n+         * the same compilation command as above basically the second time the compiler is completing the\n+         * record symbol from the class file produced during the first compilation\n+         *\/\n+        new JavacTask(tb).options(\"-processor\", \"AP\",\n+                \"-cp\", allInOne.toString(),\n+                \"-d\", allInOne.toString())\n+                .files(confSource)\n+                .run()\n+                .writeAll();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/RecordGenerationTest.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"}]}