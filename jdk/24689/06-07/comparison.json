{"files":[{"patch":"@@ -264,1 +264,1 @@\n-    return *_baseline.ptr();\n+    return *_baseline;\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,2 +41,5 @@\n-  StableValue() {\n-    DEBUG_ONLY(_initialized = false);\n+  NONCOPYABLE(StableValue);\n+\n+  StableValue()\n+  DEBUG_ONLY(: _initialized(false)) {\n+    \/\/ Do not construct value, on purpose.\n@@ -46,0 +49,1 @@\n+    \/\/ Do not destruct value, on purpose.\n@@ -50,1 +54,5 @@\n-    return &this->_t;\n+    return &_t;\n+  }\n+\n+  T& operator*() {\n+    return *ptr();\n@@ -54,1 +62,0 @@\n-    assert(_initialized, \"must be initialized before access\");\n@@ -61,1 +68,0 @@\n-    \/\/ If T has const and volatile, get rid of them and tack on a pointer *.\n@@ -63,2 +69,1 @@\n-    \/\/ Make _t into NCVP temporarily so that we can placement-new it.\n-    new (const_cast<NCVP>(ptr())) T(args...);\n+    ::new (const_cast<NCVP>(ptr())) T(args...);\n","filename":"src\/hotspot\/share\/utilities\/stableValue.hpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"}]}