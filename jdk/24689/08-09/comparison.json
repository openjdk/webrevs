{"files":[{"patch":"@@ -44,1 +44,1 @@\n-#include \"utilities\/stableValue.hpp\"\n+#include \"utilities\/deferred.hpp\"\n@@ -53,1 +53,1 @@\n-StableValue<MemBaseline> MemTracker::_baseline;\n+Deferred<MemBaseline> MemTracker::_baseline;\n","filename":"src\/hotspot\/share\/nmt\/memTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#include \"utilities\/stableValue.hpp\"\n+#include \"utilities\/deferred.hpp\"\n@@ -317,1 +317,1 @@\n-  static StableValue<MemBaseline>      _baseline;\n+  static Deferred<MemBaseline>      _baseline;\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-StableValue<MemoryFileTracker> MemoryFileTracker::Instance::_tracker;\n+Deferred<MemoryFileTracker> MemoryFileTracker::Instance::_tracker;\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#include \"utilities\/stableValue.hpp\"\n+#include \"utilities\/deferred.hpp\"\n@@ -95,1 +95,1 @@\n-    static StableValue<MemoryFileTracker> _tracker;\n+    static Deferred<MemoryFileTracker> _tracker;\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+* Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#ifndef SHARE_UTILITIES_STABLEVALUE_HPP\n+#define SHARE_UTILITIES_STABLEVALUE_HPP\n+\n+#include \"globalDefinitions.hpp\"\n+#include <type_traits>\n+\n+\/\/ The purpose of this class is to defer initialization of a T to a later point in time,\n+\/\/ and then to never deallocate it. This is mainly useful for deferring the initialization of\n+\/\/ static fields in classes, in order to avoid \"Static Initialization Order Fiasco\".\n+template<typename T>\n+class Deferred {\n+  union {\n+    T _t;\n+  };\n+\n+  DEBUG_ONLY(bool _initialized);\n+\n+public:\n+  NONCOPYABLE(Deferred);\n+\n+  Deferred()\n+  DEBUG_ONLY(: _initialized(false)) {\n+    static_assert(std::is_trivially_destructible<T>::value,\n+    \"T in a Deferred<T> should not have a non-trivial destructor, as it will never be called..\");\n+    \/\/ Do not construct value, on purpose.\n+  }\n+\n+  ~Deferred() {\n+    \/\/ Do not destruct value, on purpose.\n+  }\n+\n+  T* get() {\n+    assert(_initialized, \"must be initialized before access\");\n+    return &_t;\n+  }\n+\n+  T& operator*() {\n+    return *get();\n+  }\n+\n+  T* operator->() {\n+    return get();\n+  }\n+\n+  template<typename... Ts>\n+  void initialize(Ts&... args) {\n+    assert(!_initialized, \"Double initialization forbidden\");\n+    DEBUG_ONLY(_initialized = true);\n+    using NCVP = std::add_pointer_t<std::remove_cv_t<T>>;\n+    ::new (const_cast<NCVP>(get())) T(args...);\n+  }\n+};\n+\n+#endif \/\/ SHARE_UTILITIES_STABLEVALUE_HPP\n","filename":"src\/hotspot\/share\/utilities\/deferred.hpp","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n-* Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* This code is free software; you can redistribute it and\/or modify it\n-* under the terms of the GNU General Public License version 2 only, as\n-* published by the Free Software Foundation.\n-*\n-* This code is distributed in the hope that it will be useful, but WITHOUT\n-* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-* version 2 for more details (a copy is included in the LICENSE file that\n-* accompanied this code).\n-*\n-* You should have received a copy of the GNU General Public License version\n-* 2 along with this work; if not, write to the Free Software Foundation,\n-* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-*\n-* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-* or visit www.oracle.com if you need additional information or have any\n-* questions.\n-*\n-*\/\n-\n-#ifndef SHARE_UTILITIES_STABLEVALUE_HPP\n-#define SHARE_UTILITIES_STABLEVALUE_HPP\n-\n-#include \"globalDefinitions.hpp\"\n-\n-\/\/ A memory area with adequate size and alignment for storage of a T.\n-\/\/ May be initialized exactly once.\n-\/\/ The purpose of this class is to defer initialization of a T to a later point in time,\n-\/\/ and then to never deallocate it. This is mainly useful for deferring the initialization of\n-\/\/ static fields in classes, in order to avoid \"Static Initialization Order Fiasco\".\n-template<typename T>\n-class StableValue {\n-  union {\n-    T _t;\n-  };\n-\n-  DEBUG_ONLY(bool _initialized);\n-\n-public:\n-  NONCOPYABLE(StableValue);\n-\n-  StableValue()\n-  DEBUG_ONLY(: _initialized(false)) {\n-    \/\/ Do not construct value, on purpose.\n-  }\n-\n-  ~StableValue() {\n-    \/\/ Do not destruct value, on purpose.\n-  }\n-\n-  T* get() {\n-    assert(_initialized, \"must be initialized before access\");\n-    return &_t;\n-  }\n-\n-  T& operator*() {\n-    return *get();\n-  }\n-\n-  T* operator->() {\n-    return get();\n-  }\n-\n-  template<typename... Ts>\n-  void initialize(Ts&... args) {\n-    DEBUG_ONLY(_initialized = true);\n-    using NCVP = std::add_pointer_t<std::remove_cv_t<T>>;\n-    ::new (const_cast<NCVP>(get())) T(args...);\n-  }\n-};\n-\n-#endif \/\/ SHARE_UTILITIES_STABLEVALUE_HPP\n","filename":"src\/hotspot\/share\/utilities\/stableValue.hpp","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"}]}