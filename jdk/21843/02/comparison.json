{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-  _base = (uintptr_t)os::reserve_memory(max_capacity);\n+  _base = (uintptr_t)os::reserve_memory(max_capacity, false, mtJavaHeap);\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zPhysicalMemoryBacking_bsd.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4587,1 +4587,1 @@\n-  char* codebuf = os::attempt_reserve_memory_at(hint, page_size);\n+  char* codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtInternal);\n@@ -4595,1 +4595,1 @@\n-    codebuf = os::attempt_reserve_memory_at(hint, page_size);\n+    codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtInternal);\n@@ -4602,2 +4602,0 @@\n-  MemTracker::record_virtual_memory_tag((address)codebuf, mtInternal);\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -284,1 +284,1 @@\n-  _symbol_rs = ReservedSpace(symbol_rs_size);\n+  _symbol_rs = ReservedSpace(symbol_rs_size, mtClassShared);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  ReservedSpace backing_store(bytes_to_reserve);\n+  ReservedSpace backing_store(bytes_to_reserve, mtGC);\n@@ -54,1 +54,0 @@\n-  MemTracker::record_virtual_memory_tag(backing_store.base(), mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  ReservedSpace rs(size);\n+  ReservedSpace rs(size, mtGC);\n@@ -45,2 +45,0 @@\n-  MemTracker::record_virtual_memory_tag((address)rs.base(), mtGC);\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-  ReservedSpace seg_rs(reserved_segments_size);\n+  ReservedSpace seg_rs(reserved_segments_size, mtCode);\n@@ -235,2 +235,0 @@\n-  MemTracker::record_virtual_memory_tag((address)_segmap.low_boundary(), mtCode);\n-\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-ReservedSpace::ReservedSpace(size_t size) : _fd_for_heap(-1) {\n+ReservedSpace::ReservedSpace(size_t size, MemTag mem_tag) : _fd_for_heap(-1) {\n@@ -54,1 +54,1 @@\n-  initialize(size, alignment, page_size, nullptr, false);\n+  initialize(size, alignment, page_size, nullptr, false, mem_tag);\n@@ -61,1 +61,1 @@\n-  size_t alignment = os::vm_allocation_granularity();;\n+  size_t alignment = os::vm_allocation_granularity();\n@@ -84,1 +84,1 @@\n-static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd, bool executable) {\n+static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd, bool executable, MemTag mem_tag) {\n@@ -88,1 +88,1 @@\n-  return os::attempt_reserve_memory_at(base, size, executable);\n+  return os::attempt_reserve_memory_at(base, size, executable, mem_tag);\n@@ -92,1 +92,1 @@\n-static char* map_or_reserve_memory(size_t size, int fd, bool executable) {\n+static char* map_or_reserve_memory(size_t size, int fd, bool executable, MemTag mem_tag) {\n@@ -96,1 +96,1 @@\n-  return os::reserve_memory(size, executable);\n+  return os::reserve_memory(size, executable, mem_tag);\n@@ -157,1 +157,1 @@\n-                            const size_t alignment, int fd, bool exec) {\n+                            const size_t alignment, int fd, bool exec, MemTag mem_tag) {\n@@ -166,1 +166,1 @@\n-    base = attempt_map_or_reserve_memory_at(requested_address, size, fd, exec);\n+    base = attempt_map_or_reserve_memory_at(requested_address, size, fd, exec, mem_tag);\n@@ -171,1 +171,1 @@\n-    base = map_or_reserve_memory(size, fd, exec);\n+    base = map_or_reserve_memory(size, fd, exec, mem_tag);\n@@ -223,1 +223,2 @@\n-                            bool executable) {\n+                            bool executable,\n+                            MemTag mem_tag) {\n@@ -238,1 +239,1 @@\n-    char* base = reserve_memory(requested_address, size, alignment, _fd_for_heap, executable);\n+    char* base = reserve_memory(requested_address, size, alignment, _fd_for_heap, executable, mem_tag);\n@@ -269,1 +270,1 @@\n-  char* base = reserve_memory(requested_address, size, alignment, -1, executable);\n+  char* base = reserve_memory(requested_address, size, alignment, -1, executable, mem_tag);\n@@ -280,1 +281,2 @@\n-                               bool executable) {\n+                               bool executable,\n+                               MemTag mem_tag) {\n@@ -301,1 +303,1 @@\n-  reserve(size, alignment, page_size, requested_address, executable);\n+  reserve(size, alignment, page_size, requested_address, executable, mem_tag);\n@@ -427,1 +429,1 @@\n-  reserve(size, alignment, page_size, requested_address, false);\n+  reserve(size, alignment, page_size, requested_address, false, mtJavaHeap);\n@@ -613,1 +615,1 @@\n-      initialize(size + noaccess_prefix, alignment, page_size, nullptr, false);\n+      initialize(size + noaccess_prefix, alignment, page_size, nullptr, false, mtJavaHeap);\n@@ -656,1 +658,1 @@\n-    initialize(size, alignment, page_size, nullptr, false);\n+    initialize(size, alignment, page_size, nullptr, false, mtJavaHeap);\n@@ -664,4 +666,0 @@\n-  if (base() != nullptr) {\n-    MemTracker::record_virtual_memory_tag((address)base(), mtJavaHeap);\n-  }\n-\n@@ -682,2 +680,1 @@\n-  initialize(r_size, rs_align, rs_page_size, \/*requested address*\/ nullptr, \/*executable*\/ true);\n-  MemTracker::record_virtual_memory_tag((address)base(), mtCode);\n+  initialize(r_size, rs_align, rs_page_size, \/*requested address*\/ nullptr, \/*executable*\/ true, mtCode);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":21,"deletions":24,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"nmt\/memTag.hpp\"\n@@ -64,1 +65,1 @@\n-                  char* requested_address, bool executable);\n+                  char* requested_address, bool executable, MemTag mem_tag = mtNone);\n@@ -67,1 +68,1 @@\n-               char* requested_address, bool executable);\n+               char* requested_address, bool executable, MemTag mem_tag);\n@@ -73,1 +74,1 @@\n-  explicit ReservedSpace(size_t size);\n+  explicit ReservedSpace(size_t size, MemTag mem_tag);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2405,1 +2405,1 @@\n-    bad_address = os::reserve_memory(size);\n+    bad_address = os::reserve_memory(size, false, mtInternal);\n@@ -2409,1 +2409,0 @@\n-      MemTracker::record_virtual_memory_tag((void*)bad_address, mtInternal);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -703,6 +703,1 @@\n-  jlong addr = 0;\n-\n-  addr = (jlong)(uintptr_t)os::reserve_memory(size);\n-  MemTracker::record_virtual_memory_tag((address)addr, mtTest);\n-\n-  return addr;\n+  return (jlong)(uintptr_t)os::reserve_memory(size, false, mtTest);\n@@ -712,4 +707,1 @@\n-  addr = (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size);\n-  MemTracker::record_virtual_memory_tag((address)addr, mtTest);\n-\n-  return addr;\n+  return (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size, false, mtTest);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    char* polling_page = os::reserve_memory(allocation_size);\n+    char* polling_page = os::reserve_memory(allocation_size, false, mtSafepoint);\n@@ -63,1 +63,0 @@\n-    MemTracker::record_virtual_memory_tag((address)polling_page, mtSafepoint);\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -712,1 +712,1 @@\n-  char* page = os::reserve_memory(os::vm_page_size());\n+  char* page = os::reserve_memory(os::vm_page_size(), false, mtInternal);\n@@ -714,1 +714,0 @@\n-    MemTracker::record_virtual_memory_tag(page, mtInternal);\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}