{"files":[{"patch":"@@ -72,1 +72,1 @@\n-    result = os::attempt_reserve_memory_at((char*)immediate, size, false);\n+    result = os::attempt_reserve_memory_at((char*)immediate, size, false, mtMetaspace);\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  _base = (uintptr_t)os::reserve_memory(max_capacity);\n+  _base = (uintptr_t)os::reserve_memory(max_capacity, false, mtGC);\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zPhysicalMemoryBacking_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4587,1 +4587,1 @@\n-  char* codebuf = os::attempt_reserve_memory_at(hint, page_size);\n+  char* codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtInternal);\n@@ -4595,1 +4595,1 @@\n-    codebuf = os::attempt_reserve_memory_at(hint, page_size);\n+    codebuf = os::attempt_reserve_memory_at(hint, page_size, false, mtInternal);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-  char* extra_base = os::reserve_memory(extra_size, exec);\n+  char* extra_base = os::reserve_memory(extra_size, exec, mtNone);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  char* mapAddress = os::reserve_memory(size);\n+  char* mapAddress = os::reserve_memory(size, false, mtInternal);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3238,1 +3238,1 @@\n-  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC);\n+  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC, mtNone);\n@@ -3299,1 +3299,1 @@\n-                                                  bytes_to_release, CALLER_PC);\n+                                                  bytes_to_release, CALLER_PC, mtNone);\n@@ -3317,1 +3317,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC, mtNone);\n@@ -3319,1 +3319,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC, mtNone);\n@@ -5466,1 +5466,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC, mtNone);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  char* mapAddress = os::reserve_memory(size);\n+  char* mapAddress = os::reserve_memory(size, false, mtInternal);\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -329,1 +329,2 @@\n-  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(), os::vm_page_size());\n+  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(),\n+                   os::vm_page_size(), nullptr, mtMetaspace);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1748,1 +1748,1 @@\n-                        bool allow_exec, MemTag mem_tag = mtNone) {\n+                        bool allow_exec, MemTag mem_tag) {\n@@ -1777,1 +1777,1 @@\n-                              r->allow_exec());\n+                              r->allow_exec(), mtClassShared);\n@@ -2227,1 +2227,1 @@\n-                      r->allow_exec());\n+                      r->allow_exec(), mtJavaHeap);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-  _symbol_rs = ReservedSpace(symbol_rs_size);\n+  _symbol_rs = ReservedSpace(symbol_rs_size, mtClassShared);\n@@ -1314,1 +1314,1 @@\n-                                     os::vm_page_size(), (char*)base_address);\n+                                     os::vm_page_size(), (char*)base_address, mtClassShared);\n@@ -1372,1 +1372,1 @@\n-                                       os::vm_page_size(), (char*)base_address);\n+                                       os::vm_page_size(), (char*)base_address, mtClassShared);\n@@ -1374,1 +1374,1 @@\n-                                       os::vm_page_size(), (char*)ccs_base);\n+                                       os::vm_page_size(), (char*)ccs_base, mtClass);\n@@ -1386,1 +1386,1 @@\n-                                     os::vm_page_size(), (char*) base_address);\n+                                     os::vm_page_size(), (char*)base_address, mtClass);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-  _base = os::map_memory(_fd, filename, 0, nullptr, _size, true, false);\n+  _base = os::map_memory(_fd, filename, 0, nullptr, _size, true, false, mtInternal);\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1211,1 +1211,1 @@\n-  ReservedSpace rs(size, preferred_page_size);\n+  ReservedSpace rs(size, preferred_page_size, mtGC);\n@@ -1308,1 +1308,1 @@\n-  if(heap_storage == nullptr) {\n+  if (heap_storage == nullptr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  ReservedSpace backing_store(bytes_to_reserve);\n+  ReservedSpace backing_store(bytes_to_reserve, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n+  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz, nullptr, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n+  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz, nullptr, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  ReservedSpace rs(size);\n+  ReservedSpace rs(size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  ReservedSpace heap_rs(_byte_map_size, rs_align, _page_size);\n+  ReservedSpace heap_rs(_byte_map_size, rs_align, _page_size, nullptr, mtGC);\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-  ReservedSpace bitmap(_bitmap_size, bitmap_page_size);\n+  ReservedSpace bitmap(_bitmap_size, bitmap_page_size, mtGC);\n@@ -269,1 +269,1 @@\n-    ReservedSpace verify_bitmap(_bitmap_size, bitmap_page_size);\n+    ReservedSpace verify_bitmap(_bitmap_size, bitmap_page_size, mtGC);\n@@ -287,1 +287,1 @@\n-  ReservedSpace aux_bitmap(_bitmap_size, aux_bitmap_page_size);\n+  ReservedSpace aux_bitmap(_bitmap_size, aux_bitmap_page_size, mtGC);\n@@ -305,1 +305,1 @@\n-  ReservedSpace region_storage(region_storage_size, region_page_size);\n+  ReservedSpace region_storage(region_storage_size, region_page_size, mtGC);\n@@ -331,1 +331,1 @@\n-      cset_rs = ReservedSpace(cset_size, cset_align, cset_page_size, req_addr);\n+      cset_rs = ReservedSpace(cset_size, cset_align, cset_page_size, req_addr, mtGC);\n@@ -340,1 +340,1 @@\n-      cset_rs = ReservedSpace(cset_size, cset_align, os::vm_page_size());\n+      cset_rs = ReservedSpace(cset_size, cset_align, os::vm_page_size(), nullptr, mtGC);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -106,2 +106,2 @@\n-                      os::vm_allocation_granularity(),\n-                      os::vm_page_size());\n+                      os::vm_allocation_granularity(), os::vm_page_size(),\n+                      nullptr, mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-  ReservedSpace seg_rs(reserved_segments_size);\n+  ReservedSpace seg_rs(reserved_segments_size, mtCode);\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -605,1 +605,1 @@\n-                                                      os::vm_page_size(), false, false);\n+                                                      os::vm_page_size(), false, false, mtMetaspace);\n@@ -746,1 +746,1 @@\n-                         os::vm_page_size() \/* large *\/, (char*)base);\n+                         os::vm_page_size() \/* large *\/, (char*)base, mtMetaspace);\n@@ -774,2 +774,2 @@\n-    \/\/ Mark class space as such\n-    MemTracker::record_virtual_memory_tag((address)rs.base(), mtClass);\n+    \/\/ Mark metaspace as such\n+    MemTracker::record_virtual_memory_tag((address)rs.base(), mtMetaspace);\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,1 +81,2 @@\n-    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size());\n+    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(),\n+                        os::vm_page_size(), nullptr, MemTag::mtMetaspace);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-                   os::vm_page_size());\n+                   os::vm_page_size(), nullptr, mtMetaspace);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-ReservedSpace::ReservedSpace(size_t size) : _fd_for_heap(-1) {\n+ReservedSpace::ReservedSpace(size_t size, MemTag mem_tag) : _fd_for_heap(-1) {\n@@ -54,1 +54,1 @@\n-  initialize(size, alignment, page_size, nullptr, false);\n+  initialize(size, alignment, page_size, nullptr, false, mem_tag);\n@@ -57,1 +57,1 @@\n-ReservedSpace::ReservedSpace(size_t size, size_t preferred_page_size) : _fd_for_heap(-1) {\n+ReservedSpace::ReservedSpace(size_t size, size_t preferred_page_size, MemTag mem_tag) : _fd_for_heap(-1) {\n@@ -66,1 +66,1 @@\n-  initialize(size, alignment, preferred_page_size, nullptr, false);\n+  initialize(size, alignment, preferred_page_size, nullptr, false, mem_tag);\n@@ -72,2 +72,3 @@\n-                             char* requested_address) : _fd_for_heap(-1) {\n-  initialize(size, alignment, page_size, requested_address, false);\n+                             char* requested_address,\n+                             MemTag mem_tag) : _fd_for_heap(-1) {\n+  initialize(size, alignment, page_size, requested_address, false, mem_tag);\n@@ -77,1 +78,1 @@\n-                             bool special, bool executable) : _fd_for_heap(-1) {\n+                             bool special, bool executable, MemTag mem_tag) : _fd_for_heap(-1) {\n@@ -80,1 +81,1 @@\n-  initialize_members(base, size, alignment, page_size, special, executable);\n+  initialize_members(base, size, alignment, page_size, special, executable, mem_tag);\n@@ -84,1 +85,1 @@\n-static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd, bool executable) {\n+static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd, bool executable, MemTag mem_tag) {\n@@ -86,1 +87,1 @@\n-    return os::attempt_map_memory_to_file_at(base, size, fd);\n+    return os::attempt_map_memory_to_file_at(base, size, fd, mem_tag);\n@@ -88,1 +89,1 @@\n-  return os::attempt_reserve_memory_at(base, size, executable);\n+  return os::attempt_reserve_memory_at(base, size, executable, mem_tag);\n@@ -92,1 +93,1 @@\n-static char* map_or_reserve_memory(size_t size, int fd, bool executable) {\n+static char* map_or_reserve_memory(size_t size, int fd, bool executable, MemTag mem_tag) {\n@@ -94,1 +95,1 @@\n-    return os::map_memory_to_file(size, fd);\n+    return os::map_memory_to_file(size, fd, mem_tag);\n@@ -96,1 +97,1 @@\n-  return os::reserve_memory(size, executable);\n+  return os::reserve_memory(size, executable, mem_tag);\n@@ -100,1 +101,1 @@\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd, bool executable) {\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd, bool executable, MemTag mem_tag) {\n@@ -102,1 +103,1 @@\n-    return os::map_memory_to_file_aligned(size, alignment, fd);\n+    return os::map_memory_to_file_aligned(size, alignment, fd, mem_tag);\n@@ -157,1 +158,1 @@\n-                            const size_t alignment, int fd, bool exec) {\n+                            const size_t alignment, int fd, bool exec, MemTag mem_tag) {\n@@ -166,1 +167,1 @@\n-    base = attempt_map_or_reserve_memory_at(requested_address, size, fd, exec);\n+    base = attempt_map_or_reserve_memory_at(requested_address, size, fd, exec, mem_tag);\n@@ -171,1 +172,1 @@\n-    base = map_or_reserve_memory(size, fd, exec);\n+    base = map_or_reserve_memory(size, fd, exec, mem_tag);\n@@ -178,1 +179,1 @@\n-      base = map_or_reserve_memory_aligned(size, alignment, fd, exec);\n+      base = map_or_reserve_memory_aligned(size, alignment, fd, exec, mem_tag);\n@@ -205,1 +206,1 @@\n-  initialize_members(nullptr, 0, 0, 0, false, false);\n+  initialize_members(nullptr, 0, 0, 0, false, false, mtNone);\n@@ -209,1 +210,1 @@\n-                                       size_t page_size, bool special, bool executable) {\n+                                       size_t page_size, bool special, bool executable, MemTag mem_tag) {\n@@ -223,1 +224,1 @@\n-                            bool executable) {\n+                            bool executable, MemTag mem_tag) {\n@@ -238,1 +239,1 @@\n-    char* base = reserve_memory(requested_address, size, alignment, _fd_for_heap, executable);\n+    char* base = reserve_memory(requested_address, size, alignment, _fd_for_heap, executable, mem_tag);\n@@ -240,1 +241,1 @@\n-      initialize_members(base, size, alignment, os::vm_page_size(), true, executable);\n+      initialize_members(base, size, alignment, os::vm_page_size(), true, executable, mem_tag);\n@@ -256,1 +257,1 @@\n-        initialize_members(base, size, alignment, page_size, true, executable);\n+        initialize_members(base, size, alignment, page_size, true, executable, mem_tag);\n@@ -269,1 +270,1 @@\n-  char* base = reserve_memory(requested_address, size, alignment, -1, executable);\n+  char* base = reserve_memory(requested_address, size, alignment, -1, executable, mem_tag);\n@@ -272,1 +273,1 @@\n-    initialize_members(base, size, alignment, page_size, false, executable);\n+    initialize_members(base, size, alignment, page_size, false, executable, mem_tag);\n@@ -280,1 +281,2 @@\n-                               bool executable) {\n+                               bool executable,\n+                               MemTag mem_tag) {\n@@ -301,1 +303,1 @@\n-  reserve(size, alignment, page_size, requested_address, executable);\n+  reserve(size, alignment, page_size, requested_address, executable, mem_tag);\n@@ -313,1 +315,1 @@\n-  ReservedSpace result(base(), partition_size, alignment, page_size(), special(), executable());\n+  ReservedSpace result(base(), partition_size, alignment, page_size(), special(), executable(), mtNone);\n@@ -320,1 +322,1 @@\n-                       alignment, page_size(), special(), executable());\n+                       alignment, page_size(), special(), executable(), mtNone);\n@@ -326,1 +328,1 @@\n-  ReservedSpace result(base() + offset, partition_size, alignment, page_size(), special(), executable());\n+  ReservedSpace result(base() + offset, partition_size, alignment, page_size(), special(), executable(), mtNone);\n@@ -363,1 +365,1 @@\n-                                             size_t page_size, bool special, bool executable) {\n+                                             size_t page_size, bool special, bool executable, MemTag mem_tag) {\n@@ -368,1 +370,1 @@\n-  space.initialize_members(base, size, alignment, page_size, special, executable);\n+  space.initialize_members(base, size, alignment, page_size, special, executable, mem_tag);\n@@ -427,1 +429,1 @@\n-  reserve(size, alignment, page_size, requested_address, false);\n+  reserve(size, alignment, page_size, requested_address, false, mtJavaHeap);\n@@ -613,1 +615,1 @@\n-      initialize(size + noaccess_prefix, alignment, page_size, nullptr, false);\n+      initialize(size + noaccess_prefix, alignment, page_size, nullptr, false, mtJavaHeap);\n@@ -656,1 +658,1 @@\n-    initialize(size, alignment, page_size, nullptr, false);\n+    initialize(size, alignment, page_size, nullptr, false, mtJavaHeap);\n@@ -682,1 +684,1 @@\n-  initialize(r_size, rs_align, rs_page_size, \/*requested address*\/ nullptr, \/*executable*\/ true);\n+  initialize(r_size, rs_align, rs_page_size, \/*requested address*\/ nullptr, \/*executable*\/ true, mtCode);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":41,"deletions":39,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-                size_t page_size, bool special, bool executable);\n+                size_t page_size, bool special, bool executable, MemTag mem_tag);\n@@ -61,1 +61,1 @@\n-                          size_t page_size, bool special, bool executable);\n+                          size_t page_size, bool special, bool executable, MemTag mem_tag);\n@@ -64,1 +64,1 @@\n-                  char* requested_address, bool executable);\n+                  char* requested_address, bool executable, MemTag mem_tag);\n@@ -67,1 +67,1 @@\n-               char* requested_address, bool executable);\n+               char* requested_address, bool executable, MemTag mem_tag);\n@@ -73,1 +73,1 @@\n-  explicit ReservedSpace(size_t size);\n+  explicit ReservedSpace(size_t size, MemTag mem_tag);\n@@ -78,1 +78,1 @@\n-  ReservedSpace(size_t size, size_t preferred_page_size);\n+  ReservedSpace(size_t size, size_t preferred_page_size, MemTag mem_tag);\n@@ -80,1 +80,1 @@\n-                char* requested_address = nullptr);\n+                char* requested_address, MemTag mem_tag);\n@@ -115,1 +115,1 @@\n-                                       size_t page_size, bool special, bool executable);\n+                                       size_t page_size, bool special, bool executable, MemTag mem_tag);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -82,2 +82,2 @@\n-    out->print(\"(%s\" SIZE_FORMAT \"%s type=%s\", alloc_type,\n-      amount_in_current_scale(amount), scale, NMTUtil::tag_to_name(mem_tag));\n+    out->print(\"(%s\" SIZE_FORMAT \"%s type=%u\", alloc_type,\n+      amount_in_current_scale(amount), scale, (unsigned)mem_tag);\n@@ -252,1 +252,1 @@\n-    print_malloc(malloc_memory->malloc_counter());\n+    print_malloc(malloc_memory->malloc_counter(), mtNMT);\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  void print_malloc(const MemoryCounter* c, MemTag mem_tag = mtNone) const;\n+  void print_malloc(const MemoryCounter* c, MemTag mem_tag) const;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    MemTag mem_tag = mtNone) {\n+    MemTag mem_tag) {\n@@ -149,1 +149,1 @@\n-    const NativeCallStack& stack, MemTag mem_tag = mtNone) {\n+    const NativeCallStack& stack, MemTag mem_tag) {\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-      if (reserved_rgn->mem_tag() == mtThreadStack) {\n+      if ((reserved_rgn->mem_tag() == mtThreadStack) && (reserved_rgn->mem_tag() == mem_tag)) {\n@@ -382,1 +382,1 @@\n-      if (reserved_rgn->mem_tag() == mtClassShared) {\n+      if ((reserved_rgn->mem_tag() == mtClassShared) && (reserved_rgn->mem_tag() == mem_tag)) {\n@@ -391,1 +391,1 @@\n-      if (reserved_rgn->mem_tag() == mtJavaHeap) {\n+      if ((reserved_rgn->mem_tag() == mtJavaHeap) && (reserved_rgn->mem_tag() == mem_tag)) {\n@@ -398,0 +398,8 @@\n+      \/\/ Mapped GC region\n+      if ((reserved_rgn->mem_tag() == mtGC) && (reserved_rgn->mem_tag() == mem_tag)) {\n+        log_debug(nmt)(\"GC reserved region \\'%s\\' as a whole (\" INTPTR_FORMAT \", \" SIZE_FORMAT \")\",\n+                      reserved_rgn->mem_tag_name(), p2i(reserved_rgn->base()), reserved_rgn->size());\n+        assert(reserved_rgn->contain_region(base_addr, size), \"Reserved heap region should contain this mapping region\");\n+        return true;\n+      }\n+\n@@ -399,4 +407,6 @@\n-      tty->print_cr(\"Error: existing region: [\" INTPTR_FORMAT \"-\" INTPTR_FORMAT \"), memory tag %u.\\n\"\n-                    \"       new region: [\" INTPTR_FORMAT \"-\" INTPTR_FORMAT \"), memory tag %u.\",\n-                    p2i(reserved_rgn->base()), p2i(reserved_rgn->end()), (unsigned)reserved_rgn->mem_tag(),\n-                    p2i(base_addr), p2i(base_addr + size), (unsigned)mem_tag);\n+      tty->print_cr(\"Error: existing region: [\" INTPTR_FORMAT \"-\" INTPTR_FORMAT \"), memory tag %s.\\n\"\n+                    \"       new region: [\" INTPTR_FORMAT \"-\" INTPTR_FORMAT \"), memory tag %s.\",\n+                    p2i(reserved_rgn->base()), p2i(reserved_rgn->end()),\n+                    NMTUtil::tag_to_name(reserved_rgn->mem_tag()),\n+                    p2i(base_addr), p2i(base_addr + size),\n+                    NMTUtil::tag_to_name(mem_tag));\n@@ -424,1 +434,4 @@\n-      assert(reserved_rgn->mem_tag() == mtNone, \"Overwrite memory tag (should be mtNone, is: \\\"%s\\\")\",\n+      assert(reserved_rgn->mem_tag() == mtNone,\n+             \"Unexpected overwrite memory tag (should be \\\"%s\\\" or \\\"%s\\\", current tag is \\\"%s\\\")\",\n+             NMTUtil::tag_to_name(mtNone),\n+             NMTUtil::tag_to_name(mem_tag),\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-    MemTag mem_tag = mtNone) :\n+    MemTag mem_tag) :\n@@ -383,1 +383,1 @@\n-  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MemTag mem_tag = mtNone);\n+  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MemTag mem_tag);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2410,1 +2410,1 @@\n-    bad_address = os::reserve_memory(size);\n+    bad_address = os::reserve_memory(size, false, mtInternal);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -706,1 +706,1 @@\n-  addr = (jlong)(uintptr_t)os::reserve_memory(size);\n+  addr = (jlong)(uintptr_t)os::reserve_memory(size, false, mtTest);\n@@ -713,1 +713,1 @@\n-  addr = (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size);\n+  addr = (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size, false, mtTest);\n@@ -1499,1 +1499,1 @@\n-  p = os::reserve_memory(os::vm_allocation_granularity());\n+  p = os::reserve_memory(os::vm_allocation_granularity(), false, mtSymbol);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2097,1 +2097,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC, mtNone);\n@@ -2263,3 +2263,2 @@\n-char* os::map_memory(int fd, const char* file_name, size_t file_offset,\n-                           char *addr, size_t bytes, bool read_only,\n-                           bool allow_exec, MemTag mem_tag) {\n+char* os::map_memory(int fd, const char* file_name, size_t file_offset, char *addr, size_t bytes,\n+                           bool read_only, bool allow_exec, MemTag mem_tag) {\n@@ -2303,1 +2302,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC, mtNone);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -453,1 +453,1 @@\n-  static char*  reserve_memory(size_t bytes, bool executable = false, MemTag mem_tag = mtNone);\n+  static char*  reserve_memory(size_t bytes, bool executable, MemTag mem_tag);\n@@ -460,1 +460,1 @@\n-  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable = false, MemTag mem_tag = mtNone);\n+  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable, MemTag mem_tag);\n@@ -512,2 +512,2 @@\n-  static char* map_memory_to_file(size_t size, int fd, MemTag mem_tag = mtNone);\n-  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MemTag mem_tag = mtNone);\n+  static char* map_memory_to_file(size_t size, int fd, MemTag mem_tag);\n+  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MemTag mem_tag);\n@@ -515,1 +515,1 @@\n-  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MemTag mem_tag = mtNone);\n+  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MemTag mem_tag);\n@@ -520,2 +520,2 @@\n-                           char *addr, size_t bytes, bool read_only = false,\n-                           bool allow_exec = false, MemTag mem_tag = mtNone);\n+                           char *addr, size_t bytes,\n+                           bool read_only, bool allow_exec, MemTag mem_tag);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    char* polling_page = os::reserve_memory(allocation_size);\n+    char* polling_page = os::reserve_memory(allocation_size, false, mtSafepoint);\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -712,1 +712,1 @@\n-  char* page = os::reserve_memory(os::vm_page_size());\n+  char* page = os::reserve_memory(os::vm_page_size(), false, mtInternal);\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  ReservedSpace bot_rs(G1BlockOffsetTable::compute_size(heap.word_size()));\n+  ReservedSpace bot_rs(G1BlockOffsetTable::compute_size(heap.word_size()), mtGC);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  ReservedSpace rs(size, os::vm_page_size());\n+  ReservedSpace rs(size, os::vm_page_size(), mtGC);\n@@ -108,1 +108,1 @@\n-  ReservedSpace rs(size, page_size);\n+  ReservedSpace rs(size, page_size, mtGC);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_stressCommitUncommit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,2 @@\n-      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize, false \/* executable *\/);\n+      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize,\n+                                                           false \/* executable *\/, mtTest);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -81,1 +81,1 @@\n-    ReservedSpace rs(size, alignment, page_size, (char *) nullptr);\n+    ReservedSpace rs(size, alignment, page_size, (char *) nullptr, mtTest);\n@@ -109,1 +109,1 @@\n-    ReservedSpace rs(size, alignment, page_size);\n+    ReservedSpace rs(size, alignment, page_size, nullptr, mtTest);\n@@ -218,1 +218,1 @@\n-        return ReservedSpace(reserve_size_aligned);\n+        return ReservedSpace(reserve_size_aligned, mtTest);\n@@ -223,1 +223,3 @@\n-                             os::vm_page_size());\n+                             os::vm_page_size(),\n+                             nullptr,\n+                             mtTest);\n@@ -302,1 +304,1 @@\n-  ReservedSpace reserved(large_page_size, large_page_size, large_page_size);\n+  ReservedSpace reserved(large_page_size, large_page_size, large_page_size, nullptr, mtTest);\n@@ -369,4 +371,5 @@\n-    ReservedSpace rs(size,          \/\/ size\n-                     alignment,     \/\/ alignment\n-                     page_size, \/\/ page size\n-                     (char *)nullptr); \/\/ requested_address\n+    ReservedSpace rs(size,            \/\/ size\n+                     alignment,       \/\/ alignment\n+                     page_size,       \/\/ page size\n+                     (char *)nullptr, \/\/ requested_address\n+                     mtTest);         \/\/ NMT memory tag\n@@ -390,1 +393,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -415,1 +418,1 @@\n-    ReservedSpace rs(size, alignment, page_size);\n+    ReservedSpace rs(size, alignment, page_size, nullptr, mtTest);\n@@ -519,1 +522,1 @@\n-      return ReservedSpace(reserve_size_aligned);\n+      return ReservedSpace(reserve_size_aligned, mtTest);\n@@ -524,1 +527,3 @@\n-                           os::vm_page_size());\n+                           os::vm_page_size(),\n+                           nullptr,\n+                           mtTest);\n@@ -579,1 +584,1 @@\n-    ReservedSpace reserved(large_page_size, large_page_size, large_page_size);\n+    ReservedSpace reserved(large_page_size, large_page_size, large_page_size, nullptr, mtTest);\n","filename":"test\/hotspot\/gtest\/memory\/test_virtualspace.cpp","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-  char* p = os::reserve_memory(len, executable);\n+  char* p = os::reserve_memory(len, executable, mtTest);\n@@ -534,1 +534,1 @@\n-    p = (address)os::reserve_memory(total_range_len);\n+    p = (address)os::reserve_memory(total_range_len, false, mtTest);\n@@ -548,1 +548,1 @@\n-      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable);\n+      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable, mtTest);\n@@ -568,1 +568,1 @@\n-  address p = (address)os::reserve_memory(total_range_len);\n+  address p = (address)os::reserve_memory(total_range_len, false, mtTest);\n@@ -635,1 +635,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len, false, mtTest);\n@@ -658,1 +658,1 @@\n-  char* p = os::reserve_memory(4 * M);\n+  char* p = os::reserve_memory(4 * M, false, mtTest);\n@@ -693,1 +693,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len, false, mtTest);\n@@ -734,1 +734,1 @@\n-  char* p = os::reserve_memory(1 * M, false, mtInternal);\n+  char* p = os::reserve_memory(1 * M, false, mtTest);\n@@ -758,1 +758,1 @@\n-    address p = (address)os::reserve_memory(total_range_len);\n+    address p = (address)os::reserve_memory(total_range_len, false, mtTest);\n@@ -1065,1 +1065,1 @@\n-  char* p2 = os::attempt_reserve_memory_at(p1, M);\n+  char* p2 = os::attempt_reserve_memory_at(p1, M, false, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-        _base = os::attempt_reserve_memory_at((char*)candidate, _len);\n+        _base = os::attempt_reserve_memory_at((char*)candidate, _len, false, mtTest);\n@@ -169,2 +169,2 @@\n-    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size);\n-    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size);\n+    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size, false, mtTest);\n+    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size, false, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_reserve_between.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -170,1 +170,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -257,1 +257,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -428,1 +428,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_virtualMemoryTracker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                        \"(malloc=\" + numKB + \"KB #1) (at peak)\"\n+                        \"(malloc=\" + numKB + \"KB type=12 #1) (at peak)\"\n@@ -68,1 +68,1 @@\n-                        \"(malloc=0KB) (peak=\" + numKB + \"KB #1)\"\n+                        \"(malloc=0KB type=12) (peak=\" + numKB + \"KB #1)\"\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocRoundingReportTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-                         \"(malloc=384KB #2) (at peak)\"});\n+                         \"(malloc=384KB type=12 #2) (at peak)\"});\n@@ -57,1 +57,1 @@\n-                         \"(malloc=512KB #1) (peak=768KB #2)\"});\n+                         \"(malloc=512KB type=12 #1) (peak=768KB #2)\"});\n@@ -64,1 +64,1 @@\n-                         \"(malloc=0KB) (peak=768KB #2)\"});\n+                         \"(malloc=0KB type=12) (peak=768KB #2)\"});\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocTestType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                \"(malloc=4KB #\" + mallocd_memory.size() + \") (at peak)\"\n+                \"(malloc=4KB type=12 #\" + mallocd_memory.size() + \") (at peak)\"\n@@ -86,1 +86,1 @@\n-                \"(malloc=0KB) (peak=4KB #\" + + mallocd_memory.size() + \")\"\n+                \"(malloc=0KB type=12) (peak=4KB #\" + + mallocd_memory.size() + \")\"\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocTrackingVerify.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-            \"(malloc=896KB #3) (at peak)\"\n+            \"(malloc=896KB type=12 #3) (at peak)\"\n@@ -81,1 +81,1 @@\n-            \"(malloc=0KB) (peak=896KB #3)\"\n+            \"(malloc=0KB type=12) (peak=896KB #3)\"\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/ThreadedMallocTestType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}