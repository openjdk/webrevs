{"files":[{"patch":"@@ -72,1 +72,1 @@\n-    result = os::attempt_reserve_memory_at((char*)immediate, size, false, mtMetaspace);\n+    result = os::attempt_reserve_memory_at((char*)immediate, size, false);\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  _base = (uintptr_t)os::reserve_memory(max_capacity, false, mtGC);\n+  _base = (uintptr_t)os::reserve_memory(max_capacity, false, mtJavaHeap);\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zPhysicalMemoryBacking_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4602,2 +4602,0 @@\n-  MemTracker::record_virtual_memory_tag((address)codebuf, mtInternal);\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-  char* extra_base = os::reserve_memory(extra_size, exec, mtNone);\n+  char* extra_base = os::reserve_memory(extra_size, exec);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  char* mapAddress = os::reserve_memory(size, false, mtInternal);\n+  char* mapAddress = os::reserve_memory(size);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3018,1 +3018,1 @@\n-  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC, mtNone);\n+  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC);\n@@ -3079,1 +3079,1 @@\n-                                                  bytes_to_release, CALLER_PC, mtNone);\n+                                                  bytes_to_release, CALLER_PC);\n@@ -3097,1 +3097,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC, mtNone);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC);\n@@ -3099,1 +3099,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC, mtNone);\n+    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC);\n@@ -5181,1 +5181,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC, mtNone);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  char* mapAddress = os::reserve_memory(size, false, mtInternal);\n+  char* mapAddress = os::reserve_memory(size);\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -350,2 +350,1 @@\n-  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(),\n-                   os::vm_page_size(), nullptr, mtMetaspace);\n+  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(), os::vm_page_size());\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1774,1 +1774,1 @@\n-                        bool allow_exec, MemTag mem_tag) {\n+                        bool allow_exec, MemTag mem_tag = mtNone) {\n@@ -1803,1 +1803,1 @@\n-                              r->allow_exec(), mtClassShared);\n+                              r->allow_exec());\n@@ -2320,1 +2320,1 @@\n-                      r->allow_exec(), mtJavaHeap);\n+                      r->allow_exec());\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1450,1 +1450,1 @@\n-                                     os::vm_page_size(), (char*)base_address, mtClassShared);\n+                                     os::vm_page_size(), (char*)base_address);\n@@ -1508,1 +1508,1 @@\n-                                       os::vm_page_size(), (char*)base_address, mtClassShared);\n+                                       os::vm_page_size(), (char*)base_address);\n@@ -1510,1 +1510,1 @@\n-                                       os::vm_page_size(), (char*)ccs_base, mtClass);\n+                                       os::vm_page_size(), (char*)ccs_base);\n@@ -1522,1 +1522,1 @@\n-                                     os::vm_page_size(), (char*)base_address, mtClass);\n+                                     os::vm_page_size(), (char*) base_address);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-  _base = os::map_memory(_fd, filename, 0, nullptr, _size, true, false, mtInternal);\n+  _base = os::map_memory(_fd, filename, 0, nullptr, _size, true, false);\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1211,1 +1211,1 @@\n-  ReservedSpace rs(size, preferred_page_size, mtGC);\n+  ReservedSpace rs(size, preferred_page_size);\n@@ -1308,1 +1308,1 @@\n-  if (heap_storage == nullptr) {\n+  if(heap_storage == nullptr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-  MemTracker::record_virtual_memory_tag(backing_store.base(), mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz, nullptr, mtGC);\n+  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz, nullptr, mtGC);\n+  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,2 +45,0 @@\n-  MemTracker::record_virtual_memory_tag((address)rs.base(), mtGC);\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  ReservedSpace heap_rs(_byte_map_size, rs_align, _page_size, nullptr, mtGC);\n+  ReservedSpace heap_rs(_byte_map_size, rs_align, _page_size);\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-  ReservedSpace bitmap(_bitmap_size, bitmap_page_size, mtGC);\n+  ReservedSpace bitmap(_bitmap_size, bitmap_page_size);\n@@ -270,1 +270,1 @@\n-    ReservedSpace verify_bitmap(_bitmap_size, bitmap_page_size, mtGC);\n+    ReservedSpace verify_bitmap(_bitmap_size, bitmap_page_size);\n@@ -288,1 +288,1 @@\n-  ReservedSpace aux_bitmap(_bitmap_size, aux_bitmap_page_size, mtGC);\n+  ReservedSpace aux_bitmap(_bitmap_size, aux_bitmap_page_size);\n@@ -306,1 +306,1 @@\n-  ReservedSpace region_storage(region_storage_size, region_page_size, mtGC);\n+  ReservedSpace region_storage(region_storage_size, region_page_size);\n@@ -332,1 +332,1 @@\n-      cset_rs = ReservedSpace(cset_size, cset_align, cset_page_size, req_addr, mtGC);\n+      cset_rs = ReservedSpace(cset_size, cset_align, cset_page_size, req_addr);\n@@ -341,1 +341,1 @@\n-      cset_rs = ReservedSpace(cset_size, cset_align, os::vm_page_size(), nullptr, mtGC);\n+      cset_rs = ReservedSpace(cset_size, cset_align, os::vm_page_size());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -106,2 +106,2 @@\n-                      os::vm_allocation_granularity(), os::vm_page_size(),\n-                      nullptr, mtTracing);\n+                      os::vm_allocation_granularity(),\n+                      os::vm_page_size());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -235,2 +235,0 @@\n-  MemTracker::record_virtual_memory_tag((address)_segmap.low_boundary(), mtCode);\n-\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -605,1 +605,1 @@\n-                                                      os::vm_page_size(), false, false, mtMetaspace);\n+                                                      os::vm_page_size(), false, false);\n@@ -764,1 +764,1 @@\n-                         os::vm_page_size() \/* large *\/, (char*)base, mtMetaspace);\n+                         os::vm_page_size() \/* large *\/, (char*)base);\n@@ -792,2 +792,2 @@\n-    \/\/ Mark metaspace as such\n-    MemTracker::record_virtual_memory_tag((address)rs.base(), mtMetaspace);\n+    \/\/ Mark class space as such\n+    MemTracker::record_virtual_memory_tag((address)rs.base(), mtClass);\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -85,2 +85,1 @@\n-    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(),\n-                        os::vm_page_size(), nullptr, MemTag::mtMetaspace);\n+    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size());\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-                   os::vm_page_size(), nullptr, mtMetaspace);\n+                   os::vm_page_size());\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-ReservedSpace::ReservedSpace(size_t size, size_t preferred_page_size, MemTag mem_tag) : _fd_for_heap(-1) {\n+ReservedSpace::ReservedSpace(size_t size, size_t preferred_page_size) : _fd_for_heap(-1) {\n@@ -61,1 +61,1 @@\n-  size_t alignment = os::vm_allocation_granularity();;\n+  size_t alignment = os::vm_allocation_granularity();\n@@ -66,1 +66,1 @@\n-  initialize(size, alignment, preferred_page_size, nullptr, false, mem_tag);\n+  initialize(size, alignment, preferred_page_size, nullptr, false);\n@@ -72,3 +72,2 @@\n-                             char* requested_address,\n-                             MemTag mem_tag) : _fd_for_heap(-1) {\n-  initialize(size, alignment, page_size, requested_address, false, mem_tag);\n+                             char* requested_address) : _fd_for_heap(-1) {\n+  initialize(size, alignment, page_size, requested_address, false);\n@@ -78,1 +77,1 @@\n-                             bool special, bool executable, MemTag mem_tag) : _fd_for_heap(-1) {\n+                             bool special, bool executable) : _fd_for_heap(-1) {\n@@ -81,1 +80,1 @@\n-  initialize_members(base, size, alignment, page_size, special, executable, mem_tag);\n+  initialize_members(base, size, alignment, page_size, special, executable);\n@@ -87,1 +86,1 @@\n-    return os::attempt_map_memory_to_file_at(base, size, fd, mem_tag);\n+    return os::attempt_map_memory_to_file_at(base, size, fd);\n@@ -95,1 +94,1 @@\n-    return os::map_memory_to_file(size, fd, mem_tag);\n+    return os::map_memory_to_file(size, fd);\n@@ -101,1 +100,1 @@\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd, bool executable, MemTag mem_tag) {\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd, bool executable) {\n@@ -103,1 +102,1 @@\n-    return os::map_memory_to_file_aligned(size, alignment, fd, mem_tag);\n+    return os::map_memory_to_file_aligned(size, alignment, fd);\n@@ -179,1 +178,1 @@\n-      base = map_or_reserve_memory_aligned(size, alignment, fd, exec, mem_tag);\n+      base = map_or_reserve_memory_aligned(size, alignment, fd, exec);\n@@ -206,1 +205,1 @@\n-  initialize_members(nullptr, 0, 0, 0, false, false, mtNone);\n+  initialize_members(nullptr, 0, 0, 0, false, false);\n@@ -210,1 +209,1 @@\n-                                       size_t page_size, bool special, bool executable, MemTag mem_tag) {\n+                                       size_t page_size, bool special, bool executable) {\n@@ -224,1 +223,2 @@\n-                            bool executable, MemTag mem_tag) {\n+                            bool executable,\n+                            MemTag mem_tag) {\n@@ -241,1 +241,1 @@\n-      initialize_members(base, size, alignment, os::vm_page_size(), true, executable, mem_tag);\n+      initialize_members(base, size, alignment, os::vm_page_size(), true, executable);\n@@ -257,1 +257,1 @@\n-        initialize_members(base, size, alignment, page_size, true, executable, mem_tag);\n+        initialize_members(base, size, alignment, page_size, true, executable);\n@@ -273,1 +273,1 @@\n-    initialize_members(base, size, alignment, page_size, false, executable, mem_tag);\n+    initialize_members(base, size, alignment, page_size, false, executable);\n@@ -315,1 +315,1 @@\n-  ReservedSpace result(base(), partition_size, alignment, page_size(), special(), executable(), mtNone);\n+  ReservedSpace result(base(), partition_size, alignment, page_size(), special(), executable());\n@@ -322,1 +322,1 @@\n-                       alignment, page_size(), special(), executable(), mtNone);\n+                       alignment, page_size(), special(), executable());\n@@ -328,1 +328,1 @@\n-  ReservedSpace result(base() + offset, partition_size, alignment, page_size(), special(), executable(), mtNone);\n+  ReservedSpace result(base() + offset, partition_size, alignment, page_size(), special(), executable());\n@@ -365,1 +365,1 @@\n-                                             size_t page_size, bool special, bool executable, MemTag mem_tag) {\n+                                             size_t page_size, bool special, bool executable) {\n@@ -370,1 +370,1 @@\n-  space.initialize_members(base, size, alignment, page_size, special, executable, mem_tag);\n+  space.initialize_members(base, size, alignment, page_size, special, executable);\n@@ -666,4 +666,0 @@\n-  if (base() != nullptr) {\n-    MemTracker::record_virtual_memory_tag((address)base(), mtJavaHeap);\n-  }\n-\n@@ -685,1 +681,0 @@\n-  MemTracker::record_virtual_memory_tag((address)base(), mtCode);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":24,"deletions":29,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"nmt\/memTag.hpp\"\n@@ -50,1 +51,1 @@\n-                size_t page_size, bool special, bool executable, MemTag mem_tag);\n+                size_t page_size, bool special, bool executable);\n@@ -61,1 +62,1 @@\n-                          size_t page_size, bool special, bool executable, MemTag mem_tag);\n+                          size_t page_size, bool special, bool executable);\n@@ -64,1 +65,1 @@\n-                  char* requested_address, bool executable, MemTag mem_tag);\n+                  char* requested_address, bool executable, MemTag mem_tag = mtNone);\n@@ -78,1 +79,1 @@\n-  ReservedSpace(size_t size, size_t preferred_page_size, MemTag mem_tag);\n+  ReservedSpace(size_t size, size_t preferred_page_size);\n@@ -80,1 +81,1 @@\n-                char* requested_address, MemTag mem_tag);\n+                char* requested_address = nullptr);\n@@ -115,1 +116,1 @@\n-                                       size_t page_size, bool special, bool executable, MemTag mem_tag);\n+                                       size_t page_size, bool special, bool executable);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -82,2 +82,2 @@\n-    out->print(\"(%s\" SIZE_FORMAT \"%s type=%u\", alloc_type,\n-      amount_in_current_scale(amount), scale, (unsigned)mem_tag);\n+    out->print(\"(%s\" SIZE_FORMAT \"%s type=%s\", alloc_type,\n+      amount_in_current_scale(amount), scale, NMTUtil::tag_to_name(mem_tag));\n@@ -252,1 +252,1 @@\n-    print_malloc(malloc_memory->malloc_counter(), mtNMT);\n+    print_malloc(malloc_memory->malloc_counter());\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  void print_malloc(const MemoryCounter* c, MemTag mem_tag) const;\n+  void print_malloc(const MemoryCounter* c, MemTag mem_tag = mtNone) const;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-    MemTag mem_tag) {\n+    MemTag mem_tag = mtNone) {\n@@ -150,1 +150,1 @@\n-    const NativeCallStack& stack, MemTag mem_tag) {\n+    const NativeCallStack& stack, MemTag mem_tag = mtNone) {\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-      if ((reserved_rgn->mem_tag() == mtThreadStack) && (reserved_rgn->mem_tag() == mem_tag)) {\n+      if (reserved_rgn->mem_tag() == mtThreadStack) {\n@@ -383,1 +383,1 @@\n-      if ((reserved_rgn->mem_tag() == mtClassShared) && (reserved_rgn->mem_tag() == mem_tag)) {\n+      if (reserved_rgn->mem_tag() == mtClassShared) {\n@@ -392,1 +392,1 @@\n-      if ((reserved_rgn->mem_tag() == mtJavaHeap) && (reserved_rgn->mem_tag() == mem_tag)) {\n+      if (reserved_rgn->mem_tag() == mtJavaHeap) {\n@@ -399,8 +399,0 @@\n-      \/\/ Mapped GC region\n-      if ((reserved_rgn->mem_tag() == mtGC) && (reserved_rgn->mem_tag() == mem_tag)) {\n-        log_debug(nmt)(\"GC reserved region \\'%s\\' as a whole (\" INTPTR_FORMAT \", \" SIZE_FORMAT \")\",\n-                      reserved_rgn->mem_tag_name(), p2i(reserved_rgn->base()), reserved_rgn->size());\n-        assert(reserved_rgn->contain_region(base_addr, size), \"Reserved heap region should contain this mapping region\");\n-        return true;\n-      }\n-\n@@ -408,6 +400,4 @@\n-      tty->print_cr(\"Error: existing region: [\" INTPTR_FORMAT \"-\" INTPTR_FORMAT \"), memory tag %s.\\n\"\n-                    \"       new region: [\" INTPTR_FORMAT \"-\" INTPTR_FORMAT \"), memory tag %s.\",\n-                    p2i(reserved_rgn->base()), p2i(reserved_rgn->end()),\n-                    NMTUtil::tag_to_name(reserved_rgn->mem_tag()),\n-                    p2i(base_addr), p2i(base_addr + size),\n-                    NMTUtil::tag_to_name(mem_tag));\n+      tty->print_cr(\"Error: existing region: [\" INTPTR_FORMAT \"-\" INTPTR_FORMAT \"), memory tag %u.\\n\"\n+                    \"       new region: [\" INTPTR_FORMAT \"-\" INTPTR_FORMAT \"), memory tag %u.\",\n+                    p2i(reserved_rgn->base()), p2i(reserved_rgn->end()), (unsigned)reserved_rgn->mem_tag(),\n+                    p2i(base_addr), p2i(base_addr + size), (unsigned)mem_tag);\n@@ -435,4 +425,1 @@\n-      assert(reserved_rgn->mem_tag() == mtNone,\n-             \"Unexpected overwrite memory tag (should be \\\"%s\\\" or \\\"%s\\\", current tag is \\\"%s\\\")\",\n-             NMTUtil::tag_to_name(mtNone),\n-             NMTUtil::tag_to_name(mem_tag),\n+      assert(reserved_rgn->mem_tag() == mtNone, \"Overwrite memory tag (should be mtNone, is: \\\"%s\\\")\",\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":8,"deletions":21,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-    MemTag mem_tag) :\n+    MemTag mem_tag = mtNone) :\n@@ -383,1 +383,1 @@\n-  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MemTag mem_tag);\n+  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MemTag mem_tag = mtNone);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2409,1 +2409,0 @@\n-      MemTracker::record_virtual_memory_tag((void*)bad_address, mtInternal);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -703,6 +703,1 @@\n-  jlong addr = 0;\n-\n-  addr = (jlong)(uintptr_t)os::reserve_memory(size, false, mtTest);\n-  MemTracker::record_virtual_memory_tag((address)addr, mtTest);\n-\n-  return addr;\n+  return (jlong)(uintptr_t)os::reserve_memory(size, false, mtTest);\n@@ -712,4 +707,1 @@\n-  addr = (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size, false, mtTest);\n-  MemTracker::record_virtual_memory_tag((address)addr, mtTest);\n-\n-  return addr;\n+  return (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size, false, mtTest);\n@@ -1502,1 +1494,1 @@\n-  p = os::reserve_memory(os::vm_allocation_granularity(), false, mtSymbol);\n+  p = os::reserve_memory(os::vm_allocation_granularity());\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2117,1 +2117,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC, mtNone);\n+    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC);\n@@ -2283,2 +2283,3 @@\n-char* os::map_memory(int fd, const char* file_name, size_t file_offset, char *addr, size_t bytes,\n-                           bool read_only, bool allow_exec, MemTag mem_tag) {\n+char* os::map_memory(int fd, const char* file_name, size_t file_offset,\n+                           char *addr, size_t bytes, bool read_only,\n+                           bool allow_exec, MemTag mem_tag) {\n@@ -2322,1 +2323,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC, mtNone);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -453,1 +453,1 @@\n-  static char*  reserve_memory(size_t bytes, bool executable, MemTag mem_tag);\n+  static char*  reserve_memory(size_t bytes, bool executable = false, MemTag mem_tag = mtNone);\n@@ -460,1 +460,1 @@\n-  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable, MemTag mem_tag);\n+  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable = false, MemTag mem_tag = mtNone);\n@@ -512,2 +512,2 @@\n-  static char* map_memory_to_file(size_t size, int fd, MemTag mem_tag);\n-  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MemTag mem_tag);\n+  static char* map_memory_to_file(size_t size, int fd, MemTag mem_tag = mtNone);\n+  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MemTag mem_tag = mtNone);\n@@ -515,1 +515,1 @@\n-  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MemTag mem_tag);\n+  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MemTag mem_tag = mtNone);\n@@ -520,2 +520,2 @@\n-                           char *addr, size_t bytes,\n-                           bool read_only, bool allow_exec, MemTag mem_tag);\n+                           char *addr, size_t bytes, bool read_only = false,\n+                           bool allow_exec = false, MemTag mem_tag = mtNone);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-    MemTracker::record_virtual_memory_tag((address)polling_page, mtSafepoint);\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -714,1 +714,0 @@\n-    MemTracker::record_virtual_memory_tag(page, mtInternal);\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  ReservedSpace bot_rs(G1BlockOffsetTable::compute_size(heap.word_size()), mtGC);\n+  ReservedSpace bot_rs(G1BlockOffsetTable::compute_size(heap.word_size()));\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  ReservedSpace rs(size, os::vm_page_size(), mtGC);\n+  ReservedSpace rs(size, os::vm_page_size());\n@@ -108,1 +108,1 @@\n-  ReservedSpace rs(size, page_size, mtGC);\n+  ReservedSpace rs(size, page_size);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_stressCommitUncommit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,2 +59,1 @@\n-      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize,\n-                                                           false \/* executable *\/, mtTest);\n+      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize, false \/* executable *\/);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    ReservedSpace rs(size, mtTest);\n+    ReservedSpace rs(size);\n@@ -81,1 +81,1 @@\n-    ReservedSpace rs(size, alignment, page_size, (char *) nullptr, mtTest);\n+    ReservedSpace rs(size, alignment, page_size, (char *) nullptr);\n@@ -109,1 +109,1 @@\n-    ReservedSpace rs(size, alignment, page_size, nullptr, mtTest);\n+    ReservedSpace rs(size, alignment, page_size);\n@@ -218,1 +218,1 @@\n-        return ReservedSpace(reserve_size_aligned, mtTest);\n+        return ReservedSpace(reserve_size_aligned);\n@@ -223,3 +223,1 @@\n-                             os::vm_page_size(),\n-                             nullptr,\n-                             mtTest);\n+                             os::vm_page_size());\n@@ -304,1 +302,1 @@\n-  ReservedSpace reserved(large_page_size, large_page_size, large_page_size, nullptr, mtTest);\n+  ReservedSpace reserved(large_page_size, large_page_size, large_page_size);\n@@ -371,5 +369,4 @@\n-    ReservedSpace rs(size,            \/\/ size\n-                     alignment,       \/\/ alignment\n-                     page_size,       \/\/ page size\n-                     (char *)nullptr, \/\/ requested_address\n-                     mtTest);         \/\/ NMT memory tag\n+    ReservedSpace rs(size,          \/\/ size\n+                     alignment,     \/\/ alignment\n+                     page_size, \/\/ page size\n+                     (char *)nullptr); \/\/ requested_address\n@@ -393,1 +390,1 @@\n-    ReservedSpace rs(size, mtTest);\n+    ReservedSpace rs(size);\n@@ -418,1 +415,1 @@\n-    ReservedSpace rs(size, alignment, page_size, nullptr, mtTest);\n+    ReservedSpace rs(size, alignment, page_size);\n@@ -522,1 +519,1 @@\n-      return ReservedSpace(reserve_size_aligned, mtTest);\n+      return ReservedSpace(reserve_size_aligned);\n@@ -527,3 +524,1 @@\n-                           os::vm_page_size(),\n-                           nullptr,\n-                           mtTest);\n+                           os::vm_page_size());\n@@ -584,1 +579,1 @@\n-    ReservedSpace reserved(large_page_size, large_page_size, large_page_size, nullptr, mtTest);\n+    ReservedSpace reserved(large_page_size, large_page_size, large_page_size);\n","filename":"test\/hotspot\/gtest\/memory\/test_virtualspace.cpp","additions":15,"deletions":20,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-  char* p = os::reserve_memory(len, executable, mtTest);\n+  char* p = os::reserve_memory(len, executable);\n@@ -534,1 +534,1 @@\n-    p = (address)os::reserve_memory(total_range_len, false, mtTest);\n+    p = (address)os::reserve_memory(total_range_len);\n@@ -548,1 +548,1 @@\n-      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable, mtTest);\n+      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable);\n@@ -568,1 +568,1 @@\n-  address p = (address)os::reserve_memory(total_range_len, false, mtTest);\n+  address p = (address)os::reserve_memory(total_range_len);\n@@ -635,1 +635,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len, false, mtTest);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len);\n@@ -658,1 +658,1 @@\n-  char* p = os::reserve_memory(4 * M, false, mtTest);\n+  char* p = os::reserve_memory(4 * M);\n@@ -693,1 +693,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len, false, mtTest);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len);\n@@ -734,1 +734,1 @@\n-  char* p = os::reserve_memory(1 * M, false, mtTest);\n+  char* p = os::reserve_memory(1 * M, false, mtInternal);\n@@ -758,1 +758,1 @@\n-    address p = (address)os::reserve_memory(total_range_len, false, mtTest);\n+    address p = (address)os::reserve_memory(total_range_len);\n@@ -1065,1 +1065,1 @@\n-  char* p2 = os::attempt_reserve_memory_at(p1, M, false, mtTest);\n+  char* p2 = os::attempt_reserve_memory_at(p1, M);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-        _base = os::attempt_reserve_memory_at((char*)candidate, _len, false, mtTest);\n+        _base = os::attempt_reserve_memory_at((char*)candidate, _len);\n@@ -169,2 +169,2 @@\n-    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size, false, mtTest);\n-    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size, false, mtTest);\n+    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size);\n+    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_reserve_between.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    ReservedSpace rs(size, mtTest);\n+    ReservedSpace rs(size);\n@@ -170,1 +170,1 @@\n-    ReservedSpace rs(size, mtTest);\n+    ReservedSpace rs(size);\n@@ -257,1 +257,1 @@\n-    ReservedSpace rs(size, mtTest);\n+    ReservedSpace rs(size);\n@@ -428,1 +428,1 @@\n-    ReservedSpace rs(size, mtTest);\n+    ReservedSpace rs(size);\n","filename":"test\/hotspot\/gtest\/runtime\/test_virtualMemoryTracker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                        \"(malloc=\" + numKB + \"KB type=12 #1) (at peak)\"\n+                        \"(malloc=\" + numKB + \"KB #1) (at peak)\"\n@@ -68,1 +68,1 @@\n-                        \"(malloc=0KB type=12) (peak=\" + numKB + \"KB #1)\"\n+                        \"(malloc=0KB) (peak=\" + numKB + \"KB #1)\"\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocRoundingReportTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-                         \"(malloc=384KB type=12 #2) (at peak)\"});\n+                         \"(malloc=384KB #2) (at peak)\"});\n@@ -57,1 +57,1 @@\n-                         \"(malloc=512KB type=12 #1) (peak=768KB #2)\"});\n+                         \"(malloc=512KB #1) (peak=768KB #2)\"});\n@@ -64,1 +64,1 @@\n-                         \"(malloc=0KB type=12) (peak=768KB #2)\"});\n+                         \"(malloc=0KB) (peak=768KB #2)\"});\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocTestType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                \"(malloc=4KB type=12 #\" + mallocd_memory.size() + \") (at peak)\"\n+                \"(malloc=4KB #\" + mallocd_memory.size() + \") (at peak)\"\n@@ -86,1 +86,1 @@\n-                \"(malloc=0KB type=12) (peak=4KB #\" + + mallocd_memory.size() + \")\"\n+                \"(malloc=0KB) (peak=4KB #\" + + mallocd_memory.size() + \")\"\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocTrackingVerify.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-            \"(malloc=896KB type=12 #3) (at peak)\"\n+            \"(malloc=896KB #3) (at peak)\"\n@@ -81,1 +81,1 @@\n-            \"(malloc=0KB type=12) (peak=896KB #3)\"\n+            \"(malloc=0KB) (peak=896KB #3)\"\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/ThreadedMallocTestType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}