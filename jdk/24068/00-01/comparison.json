{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import sun.security.util.PBEUtil;\n@@ -70,1 +71,1 @@\n-        this.key = PBKDF2KeyImpl.getPasswordBytes(passwd);\n+        this.key = PBEUtil.encodePassword(passwd);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBEKey.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.nio.ByteBuffer;\n-import java.nio.CharBuffer;\n@@ -48,2 +46,1 @@\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import sun.security.util.PBEUtil;\n@@ -75,13 +72,0 @@\n-    \/\/ also used by com.sun.crypto.provider.PBEKey constructor\n-    static byte[] getPasswordBytes(char[] passwd) {\n-        CharBuffer cb = CharBuffer.wrap(passwd);\n-        ByteBuffer bb = UTF_8.encode(cb);\n-\n-        int len = bb.limit();\n-        byte[] passwdBytes = new byte[len];\n-        bb.get(passwdBytes, 0, len);\n-        bb.clear().put(new byte[len]);\n-\n-        return passwdBytes;\n-    }\n-\n@@ -97,2 +81,2 @@\n-        \/\/ Convert the password from char[] to byte[]\n-        byte[] passwdBytes = getPasswordBytes(this.passwd);\n+        \/\/ Convert the password from char[] to byte[] in UTF-8\n+        byte[] passwdBytes = PBEUtil.encodePassword(this.passwd);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBKDF2KeyImpl.java","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Red Hat, Inc.\n+ * Copyright (c) 2023, 2025, Red Hat, Inc.\n@@ -28,0 +28,3 @@\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.StandardCharsets;\n@@ -198,4 +201,1 @@\n-                passwdChars = new char[passwdBytes.length];\n-                for (int i = 0; i < passwdChars.length; i++) {\n-                    passwdChars[i] = (char) (passwdBytes[i] & 0x7f);\n-                }\n+                passwdChars = decodePassword(passwdBytes);\n@@ -257,1 +257,1 @@\n-        char[] passwdChars;\n+        char[] passwdChars = null;\n@@ -270,4 +270,1 @@\n-            passwdChars = new char[passwdBytes.length];\n-            for (int i = 0; i < passwdChars.length; i++) {\n-                passwdChars[i] = (char) (passwdBytes[i] & 0x7f);\n-            }\n+            passwdChars = decodePassword(passwdBytes);\n@@ -327,1 +324,3 @@\n-            Arrays.fill(passwdChars, '\\0');\n+            if (passwdChars != null) {\n+                Arrays.fill(passwdChars, '\\0');\n+            }\n@@ -355,0 +354,22 @@\n+\n+    \/\/ converts the password char[] to the UTF-8 encoded byte[]\n+    public static byte[] encodePassword(char[] passwd) {\n+        ByteBuffer bb = StandardCharsets.UTF_8.encode(CharBuffer.wrap(passwd));\n+        int len = bb.limit();\n+        byte[] passwdBytes = new byte[len];\n+        bb.get(passwdBytes, 0, len);\n+        bb.clear().put(new byte[len]);\n+\n+        return passwdBytes;\n+    }\n+\n+    \/\/ converts the UTF-8 encoded byte[] to the password char[]\n+    private static char[] decodePassword(byte[] passwdBytes) {\n+        CharBuffer cb = StandardCharsets.UTF_8.decode(\n+                ByteBuffer.wrap(passwdBytes));\n+        int len = cb.limit();\n+        char[] passwd = new char[len];\n+        cb.get(passwd);\n+        cb.clear().put(new char[len]);\n+        return passwd;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PBEUtil.java","additions":32,"deletions":11,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Red Hat, Inc.\n+ * Copyright (c) 2023, 2025, Red Hat, Inc.\n@@ -50,1 +50,1 @@\n-    private static final char[] password = \"123456\".toCharArray();\n+    private static final char[] password = \"123456\\uA4F7\".toCharArray();\n@@ -115,2 +115,2 @@\n-                    \"AES\/CBC\/PKCS5Padding\", \"ba1c9614d550912925d99e0bc8969032\" +\n-                    \"7ac6258b72117dcf750c19ee6ca73dd4\"),\n+                    \"AES\/CBC\/PKCS5Padding\", \"9e097796e8d8224f2a7f5c950677d879\" +\n+                    \"c0c578340147c7ae357550e2f4d4c6ce\"),\n@@ -118,2 +118,2 @@\n-                    \"AES\/CBC\/PKCS5Padding\", \"41960c43ca99cf2184511aaf2f0508a9\" +\n-                    \"7da3762ee6c2b7e2027c8076811f2e52\"),\n+                    \"AES\/CBC\/PKCS5Padding\", \"7b915941d8e3a87c00e2fbd8ad67a578\" +\n+                    \"9a25648933b737706de4e4d48bdb61b6\"),\n@@ -121,2 +121,2 @@\n-                    \"AES\/CBC\/PKCS5Padding\", \"6bb6a3dc3834e81e5ca6b5e70073ff46\" +\n-                    \"903b188940a269ed26db2ffe622b8e16\"),\n+                    \"AES\/CBC\/PKCS5Padding\", \"c23912d15599908f47cc32c9da56b37f\" +\n+                    \"e41e958e9c3a6c6e4e631a2a9e6cd20f\"),\n@@ -124,2 +124,2 @@\n-                    \"AES\/CBC\/PKCS5Padding\", \"22aabf7a6a059415dc4ca7d985f3de06\" +\n-                    \"8f8300ca48d8de585d802670f4c1d9bd\"),\n+                    \"AES\/CBC\/PKCS5Padding\", \"f05c6b2dea545d59f2a6fde845170dd6\" +\n+                    \"7aebd6b1cc28904699d7dcff1a0a238c\"),\n@@ -127,2 +127,2 @@\n-                    \"AES\/CBC\/PKCS5Padding\", \"b523e7c462a0b7fd74e492b3a6550464\" +\n-                    \"ceebe81f08649ae163673afc242ad8a2\"),\n+                    \"AES\/CBC\/PKCS5Padding\", \"949c0c01a29375b9d421f6e2bf6ed0d7\" +\n+                    \"15a118e0980494797d3a3b799b67daf6\"),\n@@ -130,2 +130,2 @@\n-                    \"AES\/CBC\/PKCS5Padding\", \"1e7c25e166afae069cec68ef9affca61\" +\n-                    \"aea02ab1c3dc7471cb767ed7d6e37af0\"),\n+                    \"AES\/CBC\/PKCS5Padding\", \"7bd686b15bc09e5fb5aa1f881c92aa5a\" +\n+                    \"e72bdcd864c74e62395b9aaea7443bcd\"),\n@@ -133,2 +133,2 @@\n-                    \"AES\/CBC\/PKCS5Padding\", \"6701f1cc75b6494ec4bd27158aa2c15d\" +\n-                    \"7d10bc2f1fbb7d92d8277c7edfd1dd57\"),\n+                    \"AES\/CBC\/PKCS5Padding\", \"df58a1b26cca7e9e297da61ada03ddc4\" +\n+                    \"39d2a5699753433f19891de33f8741a2\"),\n@@ -136,2 +136,2 @@\n-                    \"AES\/CBC\/PKCS5Padding\", \"f82eb2fc016505baeb23ecdf85163933\" +\n-                    \"5e8d6d48b48631185641febb75898a1d\"),\n+                    \"AES\/CBC\/PKCS5Padding\", \"f6ae5a15ec2c18eaa25927858f1da990\" +\n+                    \"6df58a3b4830dbaaaa4c4317e53d717d\"),\n@@ -139,2 +139,2 @@\n-                    \"AES\/CBC\/PKCS5Padding\", \"ee9528022e58cdd9be80cd88443e03b3\" +\n-                    \"de13376cf97c53d946d5c5dfc88097be\"),\n+                    \"AES\/CBC\/PKCS5Padding\", \"5795625f51ec701594506944e5ed79f0\" +\n+                    \"c9d8e82319762f00f8ff06a8b6195ac4\"),\n@@ -142,2 +142,2 @@\n-                    \"AES\/CBC\/PKCS5Padding\", \"18f472912ffaa31824e20a5486324e14\" +\n-                    \"0225e20cb158762e8647b1216fe0ab7e\"),\n+                    \"AES\/CBC\/PKCS5Padding\", \"ddf55933f80f42f2a8d4e8726290766e\" +\n+                    \"024f225b76b594e8005c00227d553d05\"),\n@@ -217,1 +217,3 @@\n-            boolean isPbeCipherSvc) {\n+            boolean isPbeCipherSvc) throws GeneralSecurityException {\n+        byte[] enc = (isPbeCipherSvc ?\n+                    getPasswordOnlyPBEKey().getEncoded() : null);\n@@ -224,10 +226,1 @@\n-            public byte[] getEncoded() {\n-                byte[] encodedKey = null;\n-                if (isPbeCipherSvc) {\n-                    encodedKey = new byte[password.length];\n-                    for (int i = 0; i < password.length; i++) {\n-                        encodedKey[i] = (byte) (password[i] & 0x7f);\n-                    }\n-                }\n-                return encodedKey;\n-            }\n+            public byte[] getEncoded() { return enc; }\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/PBECipher.java","additions":26,"deletions":33,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Red Hat, Inc.\n+ * Copyright (c) 2023, 2025, Red Hat, Inc.\n@@ -47,1 +47,1 @@\n-    private static final char[] password = \"123456\".toCharArray();\n+    private static final char[] password = \"123456\\uA4F7\".toCharArray();\n@@ -104,14 +104,14 @@\n-            macAssertionData(\"HmacPBESHA1\", \"HmacSHA1\",\n-                    \"707606929395e4297adc63d520ac7d22f3f5fa66\"),\n-            macAssertionData(\"HmacPBESHA224\", \"HmacSHA224\",\n-                    \"4ffb5ad4974a7a9fca5a36ebe3e34dd443c07fb68c392f8b611657e6\"),\n-            macAssertionData(\"HmacPBESHA256\", \"HmacSHA256\",\n-                    \"9e8c102c212d2fd1334dc497acb4e002b04e84713b7eda5a63807af2\" +\n-                    \"989d3e50\"),\n-            macAssertionData(\"HmacPBESHA384\", \"HmacSHA384\",\n-                    \"77f31a785d4f2220251143a4ba80f5610d9d0aeaebb4a278b8a7535c\" +\n-                    \"8cea8e8211809ba450458e351c5b66d691839c23\"),\n-            macAssertionData(\"HmacPBESHA512\", \"HmacSHA512\",\n-                    \"a53f942a844b234a69c1f92cba20ef272c4394a3cf4024dc16d9dbac\" +\n-                    \"1969870b1c2b28b897149a1a3b9ad80a7ca8c547dfabf3ed5f144c6b\" +\n-                    \"593900b62e120c45\"),\n+             macAssertionData(\"HmacPBESHA1\", \"HmacSHA1\",\n+                    \"8611414ddb1875d9f576282199ab492a802b7d49\"),\n+             macAssertionData(\"HmacPBESHA224\", \"HmacSHA224\",\n+                    \"cebb12b48eb90c07336c695f771d1d0ef4ccf5b9524fc0ab6fb9813a\"),\n+             macAssertionData(\"HmacPBESHA256\", \"HmacSHA256\",\n+                    \"d83a6a4e8b0e1ec939d05790f385dd774bd2b7c17cfa2dd004efc894\" +\n+                    \"e5d53f51\"),\n+             macAssertionData(\"HmacPBESHA384\", \"HmacSHA384\",\n+                    \"ae6b69cf9edfd9cd8c3b51cdf2b0243502f35a3e6007f33b1ab73568\" +\n+                    \"2ea81ea562f4383bb9512ff70752367b7259b16f\"),\n+             macAssertionData(\"HmacPBESHA512\", \"HmacSHA512\",\n+                    \"46f6d09b0e7e50a66fa559ea4c4e9737a9d9e258b94f0075230d0acb\" +\n+                    \"40f2c926f96a152c4f6b03b631efc7f99c84f052f1c78d79e07f2a9e\" +\n+                    \"4a96164f5b46e70b\"),\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Mac\/PBAMac.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"}]}