{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Red Hat, Inc.\n+ * Copyright (c) 2023, 2025, Red Hat, Inc.\n@@ -25,3 +25,0 @@\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-import java.lang.ReflectiveOperationException;\n@@ -78,2 +75,1 @@\n-            char[] password, int keyLen, String kdfAlgo,\n-            String staticExpectedKeyString) {\n+            char[] password, int keyLen, String staticExpectedKeyString) {\n@@ -86,1 +82,1 @@\n-                expectedKey = i(SecretKeyFactory.getInstance(kdfAlgo, sunJCE)\n+                expectedKey = i(SecretKeyFactory.getInstance(algo, sunJCE)\n@@ -118,0 +114,4 @@\n+    private static final AssertionData pbkdf2WithHmacSHA512Data =\n+            pbkd2AssertionData(\"PBKDF2WithHmacSHA512\", pwd, 256,\n+                    \"845560159e2f3f51dad8d6e0feccc8987e3077595f90b60ab96d4f29\" +\n+                    \"203927b0\");\n@@ -120,3 +120,2 @@\n-                    \"PBKDF2WithHmacSHA256\", \"6851e387278dd5a3a0d05e4d742f59d8\" +\n-                    \"44984e3e9b619488a42b93dd6453f630ae3e2ad7ed809fa9e98a7921\" +\n-                    \"87d62e84\");\n+                    \"6851e387278dd5a3a0d05e4d742f59d844984e3e9b619488a42b93dd\" +\n+                    \"6453f630ae3e2ad7ed809fa9e98a792187d62e84\");\n@@ -125,4 +124,9 @@\n-                    \"PBKDF2WithHmacSHA1\", \"29958f3f1c942e50903189eb7f1ba09d\"),\n-            pbkd2AssertionData(\"PBKDF2WithHmacSHA1\", pwd, 240,\n-                    \"PBKDF2WithHmacSHA1\", \"29958f3f1c942e50903189eb7f1ba09d40\" +\n-                    \"b5552da5e645dad4b5911ce0f2\"),\n+                    \"29958f3f1c942e50903189eb7f1ba09d\"),\n+            pbkd2AssertionData(\"PBKDF2WithHmacSHA224\", pwd, 128,\n+                    \"e328140e31f4ffb15af806986c23ee4e\"),\n+            pbkd2AssertionData(\"PBKDF2WithHmacSHA256\", pwd, 128,\n+                    \"6851e387278dd5a3a0d05e4d742f59d8\"),\n+            pbkd2AssertionData(\"PBKDF2WithHmacSHA384\", pwd, 128,\n+                    \"5570e2fb1a664910f055b71643b52351\"),\n+            pbkd2AssertionData(\"PBKDF2WithHmacSHA512\", pwd, 128,\n+                    \"845560159e2f3f51dad8d6e0feccc898\"),\n@@ -130,1 +134,1 @@\n-                    \"PBKDF2WithHmacSHA1\", \"29958f3f1c942e50903189eb7f1ba09d40\" +\n+                    \"29958f3f1c942e50903189eb7f1ba09d40\" +\n@@ -132,2 +136,0 @@\n-            pbkd2AssertionData(\"PBKDF2WithHmacSHA224\", pwd, 128,\n-                    \"PBKDF2WithHmacSHA224\", \"e328140e31f4ffb15af806986c23ee4e\"),\n@@ -135,1 +137,1 @@\n-                    \"PBKDF2WithHmacSHA224\", \"e328140e31f4ffb15af806986c23ee4e\" +\n+                    \"e328140e31f4ffb15af806986c23ee4e\" +\n@@ -137,5 +139,0 @@\n-            pbkd2AssertionData(\"PBKDF2WithHmacSHA224\", pwd, 336,\n-                    \"PBKDF2WithHmacSHA224\", \"e328140e31f4ffb15af806986c23ee4e\" +\n-                    \"7daa2119fee8c64aef7c1f4c1871724e0ea628577e0ab54fa7c6\"),\n-            pbkd2AssertionData(\"PBKDF2WithHmacSHA256\", pwd, 128,\n-                    \"PBKDF2WithHmacSHA256\", \"6851e387278dd5a3a0d05e4d742f59d8\"),\n@@ -143,1 +140,1 @@\n-                    \"PBKDF2WithHmacSHA256\", \"6851e387278dd5a3a0d05e4d742f59d8\" +\n+                    \"6851e387278dd5a3a0d05e4d742f59d8\" +\n@@ -145,3 +142,0 @@\n-            pbkdf2WithHmacSHA256Data,\n-            pbkd2AssertionData(\"PBKDF2WithHmacSHA384\", pwd, 128,\n-                    \"PBKDF2WithHmacSHA384\", \"5570e2fb1a664910f055b71643b52351\"),\n@@ -149,1 +143,1 @@\n-                    \"PBKDF2WithHmacSHA384\", \"5570e2fb1a664910f055b71643b52351\" +\n+                    \"5570e2fb1a664910f055b71643b52351\" +\n@@ -151,0 +145,8 @@\n+            pbkdf2WithHmacSHA512Data,\n+            pbkd2AssertionData(\"PBKDF2WithHmacSHA1\", pwd, 240,\n+                    \"29958f3f1c942e50903189eb7f1ba09d40b5552da5e645dad4b5911c\" +\n+                    \"e0f2\"),\n+            pbkd2AssertionData(\"PBKDF2WithHmacSHA224\", pwd, 336,\n+                    \"e328140e31f4ffb15af806986c23ee4e7daa2119fee8c64aef7c1f4c\" +\n+                    \"1871724e0ea628577e0ab54fa7c6\"),\n+            pbkdf2WithHmacSHA256Data,\n@@ -152,6 +154,3 @@\n-                    \"PBKDF2WithHmacSHA384\", \"5570e2fb1a664910f055b71643b52351\" +\n-                    \"d7d0ad3a18912086f80d974f2acc2efba52650d4bf872455820f24c8\" +\n-                    \"46742161da84a1b4c3f197f4347308e8841a8971cf686aef29107396\"),\n-            pbkd2AssertionData(\"PBKDF2WithHmacSHA512\", pwd, 256,\n-                    \"PBKDF2WithHmacSHA512\", \"845560159e2f3f51dad8d6e0feccc898\" +\n-                    \"7e3077595f90b60ab96d4f29203927b0\"),\n+                    \"5570e2fb1a664910f055b71643b52351d7d0ad3a18912086f80d974f\" +\n+                    \"2acc2efba52650d4bf872455820f24c846742161da84a1b4c3f197f4\" +\n+                    \"347308e8841a8971cf686aef29107396\"),\n@@ -159,4 +158,4 @@\n-                    \"PBKDF2WithHmacSHA512\", \"845560159e2f3f51dad8d6e0feccc898\" +\n-                    \"7e3077595f90b60ab96d4f29203927b00aa1a11e4d19d4f275a7f453\" +\n-                    \"14be500dacc3c1de9f704827b396463ccaa8957344d41bd64d9d09ff\" +\n-                    \"474e776469d326b1ee6ee5a5d854b86d3d7a25084afd6d6f\"),\n+                    \"845560159e2f3f51dad8d6e0feccc8987e3077595f90b60ab96d4f29\" +\n+                    \"203927b00aa1a11e4d19d4f275a7f45314be500dacc3c1de9f704827\" +\n+                    \"b396463ccaa8957344d41bd64d9d09ff474e776469d326b1ee6ee5a5\" +\n+                    \"d854b86d3d7a25084afd6d6f\"),\n@@ -164,2 +163,2 @@\n-                    \"PBKDF2WithHmacSHA512\", \"3a5c5fd11e4d381b32e11baa93d7b128\" +\n-                    \"09e016e48e0542c5d3453fc240a0fa76\"),\n+                    \"3a5c5fd11e4d381b32e11baa93d7b12809e016e48e0542c5d3453fc2\" +\n+                    \"40a0fa76\"),\n@@ -336,0 +335,2 @@\n+        SecretKeyFactory skf1 = SecretKeyFactory.getInstance(\n+                pbkdf2WithHmacSHA512Data.algo, sunPKCS11);\n@@ -339,1 +340,1 @@\n-        PBEKey p11PbeKey = (PBEKey) skf3.translateKey(getAnonymousPBEKey(\n+        PBEKey p11PbkdfKey = (PBEKey) skf3.translateKey(getAnonymousPBEKey(\n@@ -345,3 +346,24 @@\n-        assertThrows(e, \"Cannot use a AES key for a \" +\n-                pbkdf2WithHmacSHA256Data.algo + \" service\",\n-                () -> skf3.translateKey(new SecretKeySpec(new byte[10], \"AES\")));\n+        assertThrows(e, \"PBE service requires a PBE key\",\n+                () -> skf3.translateKey(new SecretKeySpec(\n+                        new byte[10], skf3.getAlgorithm())));\n+\n+        System.out.println(\" * PBEKey key to PBE SecretKeyFactory of a \" +\n+                \"different algorithm\");\n+        assertThrows(e, \"Cannot use a \" + pbkdf2WithHmacSHA256Data.algo +\n+                \" key for a \" + pbkdf2WithHmacSHA512Data.algo + \" service\",\n+                () -> skf1.translateKey(p11PbkdfKey));\n+\n+        System.out.println(\" * Non-AES PBEKey key to AES SecretKeyFactory\");\n+        String keyAlg1 = \"HmacPBESHA1\";\n+        PBEKeySpec kSpec1 = new PBEKeySpec(pwd, salt, 1, 16);\n+        assertThrows(e, \"Cannot use a \" + keyAlg1 + \" key for a \" +\n+                skf2.getAlgorithm() + \" service\", () ->\n+                skf2.translateKey(getAnonymousPBEKey(keyAlg1, kSpec1)));\n+\n+        System.out.println(\" * Inconsistent key length between key and its \" +\n+                \"algorithm\");\n+        String keyAlg2 = \"PBEWithHmacSHA1AndAES_128\";\n+        assertThrows(e, InvalidKeySpecException.class.getName() + \": Key \" +\n+                \"length is invalid for \" + keyAlg2 + \" (expecting 128 but \" +\n+                \"was \" + kSpec1.getKeyLength() + \")\", () ->\n+                skf2.translateKey(getAnonymousPBEKey(keyAlg2, kSpec1)));\n@@ -364,3 +386,3 @@\n-        SecretKeyFactory skf3 = SecretKeyFactory.getInstance(\n-                \"PBKDF2WithHmacSHA512\", sunPKCS11);\n-        SecretKeyFactory skf4 = SecretKeyFactory.getInstance(\"AES\", sunPKCS11);\n+        SecretKeyFactory skf1 = SecretKeyFactory.getInstance(\n+                pbkdf2WithHmacSHA512Data.algo, sunPKCS11);\n+        SecretKeyFactory skf2 = SecretKeyFactory.getInstance(\"AES\", sunPKCS11);\n@@ -369,0 +391,4 @@\n+        System.out.println(\" * Missing salt and iteration count\");\n+        assertThrows(e, \"Salt not found\",\n+                () -> skf1.generateSecret(new PBEKeySpec(pwd)));\n+\n@@ -372,1 +398,1 @@\n-                () -> skf3.generateSecret(new PBEKeySpec(pwd, salt, 1)));\n+                () -> skf1.generateSecret(new PBEKeySpec(pwd, salt, 1)));\n@@ -374,1 +400,1 @@\n-                () -> skf3.generateSecret(new PBEKeySpec(pwd, salt, 1, 3)));\n+                () -> skf1.generateSecret(new PBEKeySpec(pwd, salt, 1, 3)));\n@@ -379,1 +405,1 @@\n-                () -> skf4.generateSecret(kSpec));\n+                () -> skf2.generateSecret(kSpec));\n@@ -393,1 +419,1 @@\n-        PBEKey p11PbeKey = (PBEKey) skf1.translateKey(getAnonymousPBEKey(\n+        PBEKey p11PbkdfKey = (PBEKey) skf1.translateKey(getAnonymousPBEKey(\n@@ -399,1 +425,1 @@\n-                () -> skf1.getKeySpec(p11PbeKey, null));\n+                () -> skf1.getKeySpec(p11PbkdfKey, null));\n@@ -409,1 +435,1 @@\n-                () -> skf2.getKeySpec(p11PbeKey, PBEKeySpec.class));\n+                () -> skf2.getKeySpec(p11PbkdfKey, PBEKeySpec.class));\n","filename":"test\/jdk\/sun\/security\/pkcs11\/SecretKeyFactory\/TestPBKD.java","additions":79,"deletions":53,"binary":false,"changes":132,"status":"modified"}]}