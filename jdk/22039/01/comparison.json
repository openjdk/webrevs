{"files":[{"patch":"@@ -575,2 +575,2 @@\n-    TOOLCHAIN_CFLAGS_JVM=\"-nologo -MD -Zc:preprocessor -Zc:inline -permissive- -utf-8 -MP\"\n-    TOOLCHAIN_CFLAGS_JDK=\"-nologo -MD -Zc:preprocessor -Zc:inline -permissive- -utf-8 -Zc:wchar_t-\"\n+    TOOLCHAIN_CFLAGS_JVM=\"-nologo -MD -Zc:preprocessor -Zc:inline -Zc:throwingNew -permissive- -utf-8 -MP\"\n+    TOOLCHAIN_CFLAGS_JDK=\"-nologo -MD -Zc:preprocessor -Zc:inline -Zc:throwingNew -permissive- -utf-8 -Zc:wchar_t-\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -117,11 +117,0 @@\n-#if !defined(DEBUG)\n-\/\/ This function exists because VC++ 5.0 currently does not conform to the\n-\/\/ Standard C++ specification which requires that operator new throw\n-\/\/ std::bad_alloc in an out of memory situation. Instead, VC++ 5.0 returns 0.\n-\/\/\n-\/\/ This function can be safely removed when the problem is corrected.\n-void * operator new(size_t size) {\n-    return safe_Malloc(size);\n-}\n-#endif\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_new.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"}]}