{"files":[{"patch":"@@ -50,1 +50,0 @@\n-  _nesting.check(_set_arena); \/\/ Check if a potential reallocation in the arena is safe\n","filename":"src\/hotspot\/share\/libadt\/vectset.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+    _nesting.check(_set_arena); \/\/ Check if a potential reallocation in the arena is safe\n","filename":"src\/hotspot\/share\/libadt\/vectset.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,5 +40,2 @@\n-void Block_Array::grow( uint i ) {\n-  _nesting.check(_arena); \/\/ Check if a potential reallocation in the arena is safe\n-  if (i < Max()) {\n-    return; \/\/ No need to grow\n-  }\n+void Block_Array::grow(uint i) {\n+  assert(i >= Max(), \"Should have been checked before, use maybe_grow?\");\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,1 +56,7 @@\n-  void grow( uint i );          \/\/ Grow array node to fit\n+  void maybe_grow(uint i) {\n+    _nesting.check(_arena);     \/\/ Check if a potential reallocation in the arena is safe\n+    if (i >= Max()) {\n+      grow(i);\n+    }\n+  }\n+  void grow(uint i);            \/\/ Grow array node to fit\n@@ -71,1 +77,1 @@\n-  void map( uint i, Block *n ) { grow(i); _blocks[i] = n; }\n+  void map( uint i, Block *n ) { maybe_grow(i); _blocks[i] = n; }\n","filename":"src\/hotspot\/share\/opto\/block.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -68,7 +68,2 @@\n-      ++_inode_top;\n-      if ((_inode_top + 1) >= _inode_max) grow();\n-      _inode_top->node = parent;\n-      _inode_top->indx = (uint)indx;\n-      ++_inode_top;\n-      _inode_top->node = n;\n-      _inode_top->indx = (uint)ns;\n+      Node_Stack::push(parent, (uint)indx);\n+      Node_Stack::push(n, (uint)ns);\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2801,1 +2801,0 @@\n-  _nesting.check(_a); \/\/ Check if a potential reallocation in the arena is safe\n@@ -3041,4 +3040,0 @@\n-  _nesting.check(_a); \/\/ Check if a potential reallocation in the arena is safe\n-  if (_inode_top < _inode_max) {\n-    return; \/\/ No need to grow\n-  }\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1636,0 +1636,1 @@\n+    _nesting.check(_a); \/\/ Check if a potential reallocation in the arena is safe\n@@ -1887,0 +1888,7 @@\n+\n+  void maybe_grow() {\n+    _nesting.check(_a); \/\/ Check if a potential reallocation in the arena is safe\n+    if (_inode_top >= _inode_max) {\n+      grow();\n+    }\n+  }\n@@ -1888,0 +1896,1 @@\n+\n@@ -1910,1 +1919,1 @@\n-    grow();\n+    maybe_grow();\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @library \/test\/lib \/\n+ * @bug 8359200\n+ * @key randomness\n+ * @requires vm.flagless & vm.compiler2.enabled & vm.debug == true\n+ * @summary Test that -XX:OptoNodeListSize does not crash the VM.\n+ * @run driver compiler.arguments.TestOptoNodeListSize\n+ *\/\n+\n+package compiler.arguments;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Utils;\n+\n+public class TestOptoNodeListSize {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) throws IOException {\n+        if (args.length == 0) {\n+            int size = RANDOM.nextInt(1000) + 1;\n+            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:OptoNodeListSize=\" + size,\n+                \"-Xcomp\", \"-XX:-TieredCompilation\", \"compiler.arguments.TestOptoNodeListSize\", \"run\");\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldHaveExitValue(0);\n+        } else {\n+            System.out.println(\"Test passed.\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestOptoNodeListSize.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}