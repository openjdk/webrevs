{"files":[{"patch":"@@ -752,0 +752,14 @@\n+  ifeq ($$(JTREG_AOT_JDK), onestep)\n+\n+\t$$(call LogWarn, AOT: Create AOT cache $$($1_AOT_JDK_CACHE) in one step with flags: $$($1_VM_OPTIONS)) \\\n+\t$$(call ExecuteWithLog, $$($1_AOT_JDK_OUTPUT_DIR), ( \\\n+            cd $$($1_AOT_JDK_OUTPUT_DIR); \\\n+\t    $(JAR) --extract --file $(TEST_IMAGE_DIR)\/setup_aot\/TestSetupAOT.jar; \\\n+\t    $$(FIXPATH) $(JDK_UNDER_TEST)\/bin\/java $$($1_VM_OPTIONS) \\\n+\t        -Xlog:class+load,cds,cds+class=debug:file=$$($1_AOT_JDK_CACHE).log  -Xlog:cds*=error \\\n+\t        -XX:AOTMode=record -XX:AOTCacheOutput=$$($1_AOT_JDK_CACHE) \\\n+\t        TestSetupAOT $$($1_AOT_JDK_OUTPUT_DIR) > $$($1_AOT_JDK_LOG) \\\n+\t))\n+\n+  else\n+\n@@ -770,0 +784,2 @@\n+  endif\n+\n@@ -974,1 +990,1 @@\n-  ifeq ($$(JTREG_AOT_JDK), true)\n+  ifneq ($$(filter $$(JTREG_AOT_JDK), onestep twostep), )\n@@ -977,1 +993,0 @@\n-\n@@ -979,1 +994,0 @@\n-\n","filename":"make\/RunTests.gmk","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+bool CDSConfig::_is_single_command_training = false;\n+bool CDSConfig::_has_temp_aot_config_file = false;\n@@ -397,1 +399,1 @@\n-  \/\/ \"New\" AOT flags must not be mixed with \"classic\" flags such as -Xshare:dump\n+  \/\/ \"New\" AOT flags must not be mixed with \"classic\" CDS flags such as -Xshare:dump\n@@ -399,0 +401,1 @@\n+  CHECK_NEW_FLAG(AOTCacheOutput);\n@@ -403,0 +406,1 @@\n+  CHECK_SINGLE_PATH(AOTCacheOutput);\n@@ -409,2 +413,7 @@\n-  if (FLAG_IS_DEFAULT(AOTCache) && FLAG_IS_DEFAULT(AOTConfiguration) && FLAG_IS_DEFAULT(AOTMode)) {\n-    \/\/ AOTCache\/AOTConfiguration\/AOTMode not used.\n+  bool has_cache = !FLAG_IS_DEFAULT(AOTCache);\n+  bool has_cache_output = !FLAG_IS_DEFAULT(AOTCacheOutput);\n+  bool has_config = !FLAG_IS_DEFAULT(AOTConfiguration);\n+  bool has_mode = !FLAG_IS_DEFAULT(AOTMode);\n+\n+  if (!has_cache && !has_cache_output && !has_config && !has_mode) {\n+    \/\/ AOT flags are not used. Use classic CDS workflow\n@@ -412,2 +421,0 @@\n-  } else {\n-    _new_aot_flags_used = true;\n@@ -416,0 +423,16 @@\n+  if (has_cache && has_cache_output) {\n+    vm_exit_during_initialization(\"Only one of AOTCache or AOTCacheOutput can be specified\");\n+  }\n+\n+  if (!has_cache && (!has_mode || strcmp(AOTMode, \"auto\") == 0)) {\n+    if (has_cache_output) {\n+      \/\/ If AOTCacheOutput has been set, effective mode is \"record\".\n+      \/\/ Default value for AOTConfiguration, if necessary, will be assigned in check_aotmode_record().\n+      log_info(cds)(\"Selected AOTMode=record because AOTCacheOutput is specified\");\n+      FLAG_SET_ERGO(AOTMode, \"record\");\n+    }\n+  }\n+\n+  \/\/ At least one AOT flag has been used\n+  _new_aot_flags_used = true;\n+\n@@ -420,0 +443,2 @@\n+  } else if (strcmp(AOTMode, \"record\") == 0) {\n+    check_aotmode_record();\n@@ -421,11 +446,2 @@\n-    \/\/ AOTMode is record or create\n-    if (FLAG_IS_DEFAULT(AOTConfiguration)) {\n-      vm_exit_during_initialization(err_msg(\"-XX:AOTMode=%s cannot be used without setting AOTConfiguration\", AOTMode));\n-    }\n-\n-    if (strcmp(AOTMode, \"record\") == 0) {\n-      check_aotmode_record();\n-    } else {\n-      assert(strcmp(AOTMode, \"create\") == 0, \"checked by AOTModeConstraintFunc\");\n-      check_aotmode_create();\n-    }\n+    assert(strcmp(AOTMode, \"create\") == 0, \"checked by AOTModeConstraintFunc\");\n+    check_aotmode_create();\n@@ -442,1 +458,2 @@\n-    vm_exit_during_initialization(\"AOTConfiguration can only be used with -XX:AOTMode=record or -XX:AOTMode=create\");\n+    vm_exit_during_initialization(err_msg(\"AOTConfiguration can only be used with when AOTMode is record or create (selected AOTMode = %s)\", \n+                                          FLAG_IS_DEFAULT(AOTMode) ? \"auto\" : AOTMode));\n@@ -454,0 +471,25 @@\n+\/\/ %p substitution in AOTCache, AOTCacheOutput and AOTCacheConfiguration\n+static void substitute_aot_filename(JVMFlagsEnum flag_enum) {\n+  JVMFlag* flag = JVMFlag::flag_from_enum(flag_enum);\n+  const char* filename = flag->read<const char*>();\n+  assert(filename != nullptr, \"must not have default value\");\n+\n+  \/\/ For simplicity, we don't allow %p to be specified twice, because make_log_name()\n+  \/\/ substitutes only the first occurrence. Otherwise, if we run with\n+  \/\/     java -XX:AOTCacheOutput=%p%p.aot\n+ \/\/ it will end up with both the pid of the training process and the assembly process.\n+  const char* first_p = strstr(filename, \"%p\");\n+  if (first_p != nullptr && strstr(first_p + 2, \"%p\") != nullptr) {\n+    vm_exit_during_initialization(err_msg(\"%s cannot contain more than one %%p\", flag->name()));\n+  }\n+\n+  \/\/ Note: with single-command training, %p will be the pid of the training process, not the\n+  \/\/ assembly process.\n+  const char* new_filename = make_log_name(filename, nullptr);\n+  if (strcmp(filename, new_filename) != 0) {\n+    JVMFlag::Error err = JVMFlagAccess::set_ccstr(flag, &new_filename, JVMFlagOrigin::ERGONOMIC);\n+    assert(err == JVMFlag::SUCCESS, \"must never fail\");\n+  }\n+  FREE_C_HEAP_ARRAY(char, new_filename);\n+}\n+\n@@ -455,0 +497,21 @@\n+  bool has_config = !FLAG_IS_DEFAULT(AOTConfiguration);\n+  bool has_output = !FLAG_IS_DEFAULT(AOTCacheOutput);\n+\n+  if (!has_output && !has_config) {\n+      vm_exit_during_initialization(\"At least one of AOTCacheOutput and AOTConfiguration must be specified when using -XX:AOTMode=record\");\n+  }\n+\n+  if (has_output) {\n+    _is_single_command_training = true;\n+    substitute_aot_filename(FLAG_MEMBER_ENUM(AOTCacheOutput));\n+    if (!has_config) {\n+      \/\/ Too early; can't use resource allocation yet.\n+      size_t len = strlen(AOTCacheOutput) + 10;\n+      char* temp = AllocateHeap(len, mtArguments);\n+      jio_snprintf(temp, len, \"%s.config\", AOTCacheOutput);\n+      FLAG_SET_ERGO(AOTConfiguration, temp);\n+      FreeHeap(temp);\n+      _has_temp_aot_config_file = true;\n+    }\n+  }\n+\n@@ -459,0 +522,2 @@\n+  substitute_aot_filename(FLAG_MEMBER_ENUM(AOTConfiguration));\n+\n@@ -470,2 +535,2 @@\n-  if (FLAG_IS_DEFAULT(AOTCache)) {\n-    vm_exit_during_initialization(\"AOTCache must be specified when using -XX:AOTMode=create\");\n+  if (FLAG_IS_DEFAULT(AOTConfiguration)) {\n+    vm_exit_during_initialization(\"AOTConfiguration must be specified when using -XX:AOTMode=create\");\n@@ -474,0 +539,17 @@\n+  bool has_cache = !FLAG_IS_DEFAULT(AOTCache);\n+  bool has_cache_output = !FLAG_IS_DEFAULT(AOTCacheOutput);\n+\n+  assert(!(has_cache && has_cache_output), \"already checked\");\n+\n+  if (!has_cache && !has_cache_output) {\n+    vm_exit_during_initialization(\"AOTCache or AOTCacheOutput must be specified when using -XX:AOTMode=create\");\n+  }\n+\n+  if (!has_cache) {\n+    precond(has_cache_output);\n+    FLAG_SET_ERGO(AOTCache, AOTCacheOutput);\n+  }\n+  \/\/ No need to check for (!has_cache_output), as we don't look at AOTCacheOutput after here.\n+\n+  substitute_aot_filename(FLAG_MEMBER_ENUM(AOTCache));\n+\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":101,"deletions":19,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+  static bool _is_single_command_training;\n+  static bool _has_temp_aot_config_file;\n@@ -144,0 +146,3 @@\n+  static bool is_single_command_training()                   { return CDS_ONLY(_is_single_command_training) NOT_CDS(false); }\n+  static bool has_temp_aot_config_file()                     { return CDS_ONLY(_has_temp_aot_config_file) NOT_CDS(false); }\n+\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -121,0 +121,4 @@\n+  product(ccstr, AOTCacheOutput, nullptr,                                   \\\n+          \"Write AOT cache into this file (overrides AOTCache when \"        \\\n+          \"writing)\")                                                       \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+#include \"memory\/oopFactory.hpp\"\n@@ -812,1 +813,0 @@\n-      tty->print_cr(\"AOTConfiguration recorded: %s\", AOTConfiguration);\n@@ -1010,1 +1010,10 @@\n-  if (!write_static_archive(&builder, op.map_info(), op.heap_info())) {\n+  bool status = write_static_archive(&builder, op.map_info(), op.heap_info());\n+  if (status && CDSConfig::is_dumping_preimage_static_archive()) {\n+    tty->print_cr(\"%s AOTConfiguration recorded: %s\",\n+                  CDSConfig::has_temp_aot_config_file() ? \"Temporary\" : \"\", AOTConfiguration);\n+    if (CDSConfig::is_single_command_training()) {\n+      fork_and_dump_final_static_archive(CHECK);\n+    }\n+  }\n+\n+  if (!status) {\n@@ -1033,0 +1042,126 @@\n+static void print_java_launcher(outputStream* st) {\n+  st->print(\"%s%sbin%sjava\", Arguments::get_java_home(), os::file_separator(), os::file_separator());\n+}\n+\n+static void append_args(GrowableArray<Handle>* args, const char* arg, TRAPS) {\n+  Handle string = java_lang_String::create_from_str(arg, CHECK);\n+  args->append(string);\n+}\n+\n+\/\/ Pass all options in Arguments::jvm_args_array() to a child JVM process\n+\/\/ using the JAVA_TOOL_OPTIONS environment variable.\n+static int exec_jvm_with_java_tool_options(const char* java_launcher_path, TRAPS) {\n+  ResourceMark rm(THREAD);\n+  HandleMark hm(THREAD);\n+  GrowableArray<Handle> args;\n+\n+  const char* cp = Arguments::get_appclasspath();\n+  if (cp != nullptr && strlen(cp) > 0 && strcmp(cp, \".\") != 0) {\n+    \/\/ We cannot use \"-cp\", because \"-cp\" is only interpreted by the java launcher,\n+    \/\/ and is not interpreter by arguments.cpp when it loads args from JAVA_TOOL_OPTIONS\n+    stringStream ss;\n+    ss.print(\"-Djava.class.path=\");\n+    ss.print_raw(cp);\n+    append_args(&args, ss.freeze(), CHECK_0);\n+    \/\/ CDS$ProcessLauncher::execWithJavaToolOptions() must unset CLASSPATH, which has\n+    \/\/ a higher priority than -Djava.class.path=\n+  }\n+\n+  \/\/ Pass all arguments. These include those from JAVA_TOOL_OPTIONS and _JAVA_OPTIONS.\n+  for (int i = 0; i < Arguments::num_jvm_args(); i++) {\n+    const char* arg = Arguments::jvm_args_array()[i];\n+    if (strstr(arg, \"-XX:AOTCacheOutput=\") == arg || \/\/ arg starts with ...\n+        strstr(arg, \"-XX:AOTConfiguration=\") == arg ||\n+        strstr(arg, \"-XX:AOTMode=\") == arg) {\n+      \/\/ Filter these out. They wiill be set below.\n+    } else {\n+      append_args(&args, arg, CHECK_0);\n+    }\n+  }\n+\n+  \/\/ Note: because we are running in AOTMode=record, JAVA_AOT_OPTIONS have not been\n+  \/\/ parsed, so they are not in Arguments::jvm_args_array. If JAVA_AOT_OPTIONS is in\n+  \/\/ the environment, it will be inherited by the child JVM process, which will\n+  \/\/ parse these options in Arguments::parse_java_tool_options_environment_variable()\n+  precond(strcmp(AOTMode, \"record\") == 0);\n+\n+  \/\/ We don't pass Arguments::jvm_flags_array(), as those will be added by\n+  \/\/ the child process when it loads .hotspotrc\n+\n+  {\n+    \/\/ If AOTCacheOutput contains %p, it should have been already substituted with the\n+    \/\/ pid of the training process.\n+    stringStream ss;\n+    ss.print(\"-XX:AOTCacheOutput=\");\n+    ss.print_raw(AOTCacheOutput);\n+    append_args(&args, ss.freeze(), CHECK_0);\n+  }\n+  {\n+    \/\/ If AOTCacheConfiguration contains %p, it should have been already substituted with the\n+    \/\/ pid of the training process.\n+    \/\/ If AOTCacheConfiguration was not explicitly specified, it should have been assigned a\n+    \/\/ temporary file name.\n+    stringStream ss;\n+    ss.print(\"-XX:AOTConfiguration=\");\n+    ss.print_raw(AOTConfiguration);\n+    append_args(&args, ss.freeze(), CHECK_0);\n+  }\n+\n+  append_args(&args, \"-XX:AOTMode=create\", CHECK_0);\n+\n+  Symbol* klass_name = SymbolTable::new_symbol(\"jdk\/internal\/misc\/CDS$ProcessLauncher\");\n+  Klass* k = SystemDictionary::resolve_or_fail(klass_name, true, CHECK_0);\n+  Symbol* methodName = SymbolTable::new_symbol(\"execWithJavaToolOptions\");\n+  Symbol* methodSignature = SymbolTable::new_symbol(\"(Ljava\/lang\/String;[Ljava\/lang\/String;)I\");\n+\n+  Handle launcher = java_lang_String::create_from_str(java_launcher_path, CHECK_0);\n+  objArrayOop array = oopFactory::new_objArray(vmClasses::String_klass(), args.length(), CHECK_0);\n+  for (int i = 0; i < args.length(); i++) {\n+    array->obj_at_put(i, args.at(i)());\n+  }\n+  objArrayHandle launcher_args(THREAD, array);\n+\n+  \/\/ The following call will pass all options inside the JAVA_TOOL_OPTIONS env variable to\n+  \/\/ the child process. It will also clear the _JAVA_OPTIONS and CLASSPATH env variables for\n+  \/\/ the child process.\n+  \/\/\n+  \/\/ Note: the env variables are set only for the child process. They are not changed\n+  \/\/ for the current process. See java.lang.ProcessBuilder::environment().\n+  JavaValue result(T_OBJECT);\n+  JavaCallArguments javacall_args(2);\n+  javacall_args.push_oop(launcher);\n+  javacall_args.push_oop(launcher_args);\n+  JavaCalls::call_static(&result,\n+                          InstanceKlass::cast(k),\n+                          methodName,\n+                          methodSignature,\n+                          &javacall_args,\n+                          CHECK_0);\n+  return result.get_jint();\n+}\n+\n+void MetaspaceShared::fork_and_dump_final_static_archive(TRAPS) {\n+  assert(CDSConfig::is_dumping_preimage_static_archive(), \"sanity\");\n+\n+  ResourceMark rm;\n+  stringStream ss;\n+  print_java_launcher(&ss);\n+  const char* cmd = ss.freeze();\n+  tty->print_cr(\"Launching child process %s to assemble AOT cache %s using configuration %s\", cmd, AOTCacheOutput, AOTConfiguration);\n+  int status = exec_jvm_with_java_tool_options(cmd, CHECK);\n+  if (status != 0) {\n+    log_error(cds)(\"Child process failed; status = %d\", status);\n+    \/\/ We leave the temp config file for debugging\n+  } else if (CDSConfig::has_temp_aot_config_file()) {\n+    const char* tmp_config = AOTConfiguration;\n+    \/\/ On Windows, need WRITE permission to remove the file.\n+    WINDOWS_ONLY(chmod(tmp_config, _S_IREAD | _S_IWRITE));\n+    status = remove(tmp_config);\n+    if (status != 0) {\n+      log_error(cds)(\"Failed to remove temporary AOT configuration file %s\", tmp_config);\n+    } else {\n+      tty->print_cr(\"Removed temporary AOT configuration file %s\", tmp_config);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":137,"deletions":2,"binary":false,"changes":139,"status":"modified"},{"patch":"@@ -182,0 +182,1 @@\n+  static void fork_and_dump_final_static_archive(TRAPS);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-      \/\/ classes from tje preimage. We don't want to get a VerifyError when linking this class.\n+      \/\/ classes from the preimage. We don't want to get a VerifyError when linking this class.\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,0 +135,5 @@\n+struct VMInitArgsGroup {\n+  const JavaVMInitArgs* _args;\n+  JVMFlagOrigin _origin;\n+};\n+\n@@ -1948,6 +1953,1 @@\n-\/\/ Parse JavaVMInitArgs structure\n-\n-jint Arguments::parse_vm_init_args(const JavaVMInitArgs *vm_options_args,\n-                                   const JavaVMInitArgs *java_tool_options_args,\n-                                   const JavaVMInitArgs *java_options_args,\n-                                   const JavaVMInitArgs *cmd_line_args) {\n+jint Arguments::parse_vm_init_args(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args) {\n@@ -1966,24 +1966,6 @@\n-  \/\/ Parse args structure generated from java.base vm options resource\n-  jint result = parse_each_vm_init_arg(vm_options_args, JVMFlagOrigin::JIMAGE_RESOURCE);\n-  if (result != JNI_OK) {\n-    return result;\n-  }\n-\n-  \/\/ Parse args structure generated from JAVA_TOOL_OPTIONS environment\n-  \/\/ variable (if present).\n-  result = parse_each_vm_init_arg(java_tool_options_args, JVMFlagOrigin::ENVIRON_VAR);\n-  if (result != JNI_OK) {\n-    return result;\n-  }\n-\n-  \/\/ Parse args structure generated from the command line flags.\n-  result = parse_each_vm_init_arg(cmd_line_args, JVMFlagOrigin::COMMAND_LINE);\n-  if (result != JNI_OK) {\n-    return result;\n-  }\n-\n-  \/\/ Parse args structure generated from the _JAVA_OPTIONS environment\n-  \/\/ variable (if present) (mimics classic VM)\n-  result = parse_each_vm_init_arg(java_options_args, JVMFlagOrigin::ENVIRON_VAR);\n-  if (result != JNI_OK) {\n-    return result;\n+  jint result;\n+  for (int i = 0; i < all_args->length(); i++) {\n+    result = parse_each_vm_init_arg(all_args->at(i)._args, all_args->at(i)._origin);\n+    if (result != JNI_OK) {\n+      return result;\n+    }\n@@ -3078,0 +3060,44 @@\n+static JavaVMOption* get_last_aotmode_arg(const JavaVMInitArgs* args) {\n+  for (int index = args->nOptions - 1; index >= 0; index--) {\n+    JavaVMOption* option = args->options + index;\n+    if (strstr(option->optionString, \"-XX:AOTMode=\") == option->optionString) {\n+      return option;\n+    }\n+  }\n+\n+  return nullptr;\n+}\n+\n+jint Arguments::parse_java_aot_options_environment_variable(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args,\n+                                                            ScopedVMInitArgs* java_aot_options_args) {\n+  \/\/ Don't bother scanning all the args if this env variable is not set\n+  if (::getenv(\"JAVA_AOT_OPTIONS\") == nullptr) {\n+    return JNI_OK;\n+  }\n+\n+  \/\/ Scan backwards and find the last occurrence of -XX:AOTMode=xxx, which will decide the value\n+  \/\/ of AOTMode.\n+  JavaVMOption* option = nullptr;\n+  for (int i = all_args->length() - 1; i >= 0; i--) {\n+    if ((option = get_last_aotmode_arg(all_args->at(i)._args)) != nullptr) {\n+      break;\n+    }\n+  }\n+\n+  if (option != nullptr) {\n+    \/\/ We have found the last -XX:AOTMode=xxx. At this point <option> has NOT been parsed yet,\n+    \/\/ so its value is not reflected inside the global variable AOTMode.\n+    if (strcmp(option->optionString, \"-XX:AOTMode=create\") != 0) {\n+      return JNI_OK; \/\/ Do not parse JAVA_AOT_OPTIONS\n+    }\n+  } else {\n+    \/\/ -XX:AOTMode is not specified in any of 4 options_args, let's check AOTMode,\n+    \/\/ which would have been set inside process_settings_file();\n+    if (AOTMode == nullptr || strcmp(AOTMode, \"create\") != 0) {\n+      return JNI_OK; \/\/ Do not parse JAVA_AOT_OPTIONS\n+    }\n+  }\n+\n+  return parse_options_environment_variable(\"JAVA_AOT_OPTIONS\", java_aot_options_args);\n+}\n+\n@@ -3456,0 +3482,1 @@\n+  ScopedVMInitArgs initial_java_aot_options_args(\"env_var='JAVA_AOT_OPTIONS'\");\n@@ -3462,0 +3489,1 @@\n+  JavaVMInitArgs* cur_java_aot_options_args;\n@@ -3468,0 +3496,1 @@\n+  ScopedVMInitArgs mod_java_aot_options_args(\"env_var='_JAVA_AOT_OPTIONS'\");\n@@ -3469,0 +3498,1 @@\n+  GrowableArrayCHeap<VMInitArgsGroup, mtArguments> all_args;\n@@ -3476,0 +3506,2 @@\n+  \/\/ Yet another environment variable: _JAVA_OPTIONS. This mimics the classic VM.\n+  \/\/ This is an undocumented feature.\n@@ -3522,7 +3554,1 @@\n-  if (IgnoreUnrecognizedVMOptions) {\n-    cur_cmd_args->ignoreUnrecognized = true;\n-    cur_java_tool_options_args->ignoreUnrecognized = true;\n-    cur_java_options_args->ignoreUnrecognized = true;\n-  }\n-\n-  \/\/ Parse specified settings file\n+  \/\/ Parse specified settings file (s) -- the effects are applied immediately into the JVM global flags.\n@@ -3531,1 +3557,1 @@\n-                               cur_cmd_args->ignoreUnrecognized)) {\n+                               IgnoreUnrecognizedVMOptions)) {\n@@ -3538,1 +3564,1 @@\n-                               cur_cmd_args->ignoreUnrecognized)) {\n+                               IgnoreUnrecognizedVMOptions)) {\n@@ -3549,0 +3575,43 @@\n+  \/\/ The settings in the args are applied in this order to the the JVM global flags.\n+  \/\/ For historical reasons, the order is DIFFERENT than the scanning order of\n+  \/\/ the above expand_vm_options_as_needed() calls.\n+  all_args.append({cur_vm_options_args, JVMFlagOrigin::JIMAGE_RESOURCE});\n+  all_args.append({cur_java_tool_options_args, JVMFlagOrigin::ENVIRON_VAR});\n+  all_args.append({cur_cmd_args, JVMFlagOrigin::COMMAND_LINE});\n+  all_args.append({cur_java_options_args, JVMFlagOrigin::ENVIRON_VAR});\n+\n+  \/\/ JAVA_AOT_OPTIONS are parsed only if -XX:AOTMode=create has been detected from all\n+  \/\/ the options that have been gathered above.\n+  code = parse_java_aot_options_environment_variable(&all_args, &initial_java_aot_options_args);\n+  if (code != JNI_OK) {\n+    return code;\n+  }\n+  code = expand_vm_options_as_needed(initial_java_aot_options_args.get(),\n+                                     &mod_java_aot_options_args,\n+                                     &cur_java_aot_options_args);\n+  if (code != JNI_OK) {\n+    return code;\n+  }\n+\n+  for (int index = 0; index < cur_java_aot_options_args->nOptions; index++) {\n+    JavaVMOption* option = cur_java_aot_options_args->options + index;\n+    const char* optionString = option->optionString;\n+    if (strstr(optionString, \"-XX:AOTMode=\") == optionString &&\n+        strcmp(optionString, \"-XX:AOTMode=create\") != 0) {\n+      jio_fprintf(defaultStream::error_stream(),\n+                  \"Option %s cannot be specified in JAVA_AOT_OPTIONS\\n\", optionString);\n+      return JNI_ERR;\n+    }\n+  }\n+\n+  all_args.append({cur_java_aot_options_args, JVMFlagOrigin::ENVIRON_VAR});\n+\n+  if (IgnoreUnrecognizedVMOptions) {\n+    \/\/ Note: unrecognized options in cur_vm_options_arg cannot be ignored. They are part of\n+    \/\/ the JDK so it shouldn't have bad options.\n+    cur_cmd_args->ignoreUnrecognized = true;\n+    cur_java_tool_options_args->ignoreUnrecognized = true;\n+    cur_java_options_args->ignoreUnrecognized = true;\n+    cur_java_aot_options_args->ignoreUnrecognized = true;\n+  }\n+\n@@ -3550,0 +3619,1 @@\n+    \/\/ For historical reasons, options specified in cur_vm_options_arg and -XX:Flags are not printed.\n@@ -3553,0 +3623,1 @@\n+    print_options(cur_java_aot_options_args);\n@@ -3555,5 +3626,2 @@\n-  \/\/ Parse JavaVMInitArgs structure passed in, as well as JAVA_TOOL_OPTIONS and _JAVA_OPTIONS\n-  jint result = parse_vm_init_args(cur_vm_options_args,\n-                                   cur_java_tool_options_args,\n-                                   cur_java_options_args,\n-                                   cur_cmd_args);\n+  \/\/ Apply the settings in these args to the JVM global flags.\n+  jint result = parse_vm_init_args(&all_args);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":112,"deletions":44,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -151,0 +151,3 @@\n+struct VMInitArgsGroup;\n+template <typename E, MemTag MT> class GrowableArrayCHeap;\n+\n@@ -309,0 +312,2 @@\n+  static jint parse_java_aot_options_environment_variable(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args,\n+                                                          ScopedVMInitArgs* java_aot_options_args);\n@@ -326,4 +331,1 @@\n-  static jint parse_vm_init_args(const JavaVMInitArgs *vm_options_args,\n-                                 const JavaVMInitArgs *java_tool_options_args,\n-                                 const JavaVMInitArgs *java_options_args,\n-                                 const JavaVMInitArgs *cmd_line_args);\n+  static jint parse_vm_init_args(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -503,0 +503,43 @@\n+\n+    \/**\n+     * This class is used only by native JVM code to spawn a child JVM process to assemble\n+     * the AOT cache. <code>args[]<\/code> are passed in the <code>JAVA_TOOL_OPTIONS<\/code>\n+     * environment variable.\n+     *\/\n+    private static class ProcessLauncher {\n+        static int execWithJavaToolOptions(String javaLauncher, String args[]) throws IOException, InterruptedException {\n+            ProcessBuilder pb = new ProcessBuilder().inheritIO().command(javaLauncher);\n+            StringBuilder sb = new StringBuilder();\n+\n+            \/\/ Encode the args as described in\n+            \/\/ https:\/\/docs.oracle.com\/en\/java\/javase\/24\/docs\/specs\/jvmti.html#tooloptions\n+            String prefix = \"\";\n+            for (String arg : args) {\n+                sb.append(prefix);\n+\n+                for (int i = 0; i < arg.length(); i++) {\n+                    char c = arg.charAt(i);\n+                    if (c == '\"' || Character.isWhitespace(c)) {\n+                        sb.append('\\'');\n+                        sb.append(c);\n+                        sb.append('\\'');\n+                    } else if (c == '\\'') {\n+                        sb.append('\"');\n+                        sb.append(c);\n+                        sb.append('\"');\n+                    } else {\n+                        sb.append(c);\n+                    }\n+                }\n+\n+                prefix = \" \";\n+            }\n+\n+            Map<String, String> env = pb.environment();\n+            env.put(\"JAVA_TOOL_OPTIONS\", sb.toString());\n+            env.remove(\"_JAVA_OPTIONS\");\n+            env.remove(\"CLASSPATH\");\n+            Process process = pb.start();\n+            return process.waitFor();\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -4053,0 +4053,12 @@\n+    This option cannot be used together with `-XX:AOTCacheOutput`.\n+\n+`-XX:AOTCacheOutput:=`*cachefile*\n+:   Specifies the location of the AOT cache to write. The standard extension for *cachefile* is `.aot`.\n+    This option cannot be used together with `-XX:AOTCache`.\n+\n+    When `-XX:AOTCacheOutput` is specified:\n+\n+    - If `-XX:AOTMode` is not specified, then `AOTMode` will be given the value of `record`.\n+    - If `-XX:AOTMode=auto` is specified, the JVM behaves if `-XX:AOTMode=record` were specified.\n+    - If `-XX:AOTMode=on` is specified, the JVM will exit with an error.\n+\n@@ -4055,1 +4067,0 @@\n-    This option can be used only with `-XX:AOTMode=record` and `-XX:AOTMode=create`.\n@@ -4058,0 +4069,8 @@\n+    When `-XX:AOTConfiguration` can be used only if:\n+\n+    - `-XX:AOTMode=record` is specified, or\n+    - `-XX:AOTCacheOutput` is specified, and `-XX:AOTMode=auto` is specified, or\n+    - `-XX:AOTCacheOutput` is specified, and `-XX:AOTMode` is not specidied.\n+\n+    In all other cases, the JVM will exit with an error.\n+\n@@ -4064,1 +4083,3 @@\n-    `-XX:AOTConfiguration=`*configfile* must be specified. The JVM gathers\n+     At least one of `-XX:AOTConfiguration=`*configfile* and\/or\n+     `-XX:AOTCache=`*cachefile* must be specified.\n+     If `-XX:AOTConfiguration=`*configfile* is specified, the JVM gathers\n@@ -4066,0 +4087,6 @@\n+     If `-XX:AOTCache=`*cachefile* is specified, a second JVM process is launched\n+     to perform the Assembly phase to write the optimization artifacts into *cachefile*.\n+\n+     Extra JVM options can be passed to the second JVM process using the environment\n+     variable `JAVA_AOT_OPTIONS`, with the same format as the environment variable\n+     `JDK_JAVA_OPTIONS` described above.\n@@ -4067,2 +4094,3 @@\n--   `create`: Perform the Assembly phase. `-XX:AOTConfiguration=`*configfile*\n-     and `-XX:AOTCache=`*cachefile*  must be specified. The JVM reads the statistical\n+-   `create`: Perform the Assembly phase. `-XX:AOTConfiguration=`*configfile* must be\n+     specified. Exactly one of `-XX:AOTCache=`*cachefile* or -XX:AOTCacheOutput=`*cachefile*\n+     must be specifed. The JVM reads the statistical\n@@ -4089,1 +4117,1 @@\n-       list of scenarios that may be incompatible with the AOT cache for JDK 24.\n+       list of scenarios that may be incompatible with the AOT cache.\n@@ -4123,0 +4151,7 @@\n+The first occurrence of the special sequence `%p` in `*configfile* and `*cachefile* is replaced\n+with the process ID of the JVM process launched in the command-line. For example:\n+\n+>   `java -XX:AOTConfiguration=foo%p.aotconfig -XX:AOTCacheOutput=foo%p.aot -cp foo.jar Foo`\n+\n+will create two files: `foopid123.aotconfig` and `foopid123.aot`, where `123` is the\n+process ID of the JVM that has executed the application `Foo`.\n","filename":"src\/java.base\/share\/man\/java.md","additions":40,"deletions":5,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -419,0 +419,1 @@\n+ -runtime\/cds\/appcds\/aotFlags \\\n@@ -521,0 +522,1 @@\n+ -runtime\/cds\/appcds\/aotFlags \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,378 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary \"AOT\" aliases for traditional CDS command-line options\n- * @requires vm.cds\n- * @requires vm.flagless\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @build Hello\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n- * @run driver AOTFlags\n- *\/\n-\n-import java.io.File;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class AOTFlags {\n-    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n-    static String aotConfigFile = \"hello.aotconfig\";\n-    static String aotCacheFile = \"hello.aot\";\n-    static String helloClass = \"Hello\";\n-\n-    public static void main(String[] args) throws Exception {\n-        positiveTests();\n-        negativeTests();\n-    }\n-\n-    static void positiveTests() throws Exception {\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Training Run\");\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-Xlog:cds=debug\",\n-            \"-cp\", appJar, helloClass);\n-\n-        OutputAnalyzer out = CDSTestUtils.executeAndLog(pb, \"train\");\n-        out.shouldContain(\"Hello World\");\n-        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Assembly Phase (AOTClassLinking unspecified -> should be enabled by default)\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-Xlog:cds\",\n-            \"-cp\", appJar);\n-        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n-        out.shouldContain(\"Dumping shared data to file:\");\n-        out.shouldMatch(\"cds.*hello[.]aot\");\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Production Run with AOTCache\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-Xlog:cds\",\n-            \"-cp\", appJar, helloClass);\n-        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n-        out.shouldContain(\"Using AOT-linked classes: true (static archive: has aot-linked classes)\");\n-        out.shouldContain(\"Opened AOT cache hello.aot.\");\n-        out.shouldContain(\"Hello World\");\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOTMode=off\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"--show-version\",\n-            \"-Xlog:cds\",\n-            \"-XX:AOTMode=off\",\n-            \"-cp\", appJar, helloClass);\n-        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n-        out.shouldNotContain(\", sharing\");\n-        out.shouldNotContain(\"Opened AOT cache hello.aot.\");\n-        out.shouldContain(\"Hello World\");\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOTMode=auto\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"--show-version\",\n-            \"-Xlog:cds\",\n-            \"-XX:AOTMode=auto\",\n-            \"-cp\", appJar, helloClass);\n-        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n-        out.shouldContain(\", sharing\");\n-        out.shouldContain(\"Opened AOT cache hello.aot.\");\n-        out.shouldContain(\"Hello World\");\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOTMode=on\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"--show-version\",\n-            \"-Xlog:cds\",\n-            \"-XX:AOTMode=on\",\n-            \"-cp\", appJar, helloClass);\n-        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n-        out.shouldContain(\", sharing\");\n-        out.shouldContain(\"Opened AOT cache hello.aot.\");\n-        out.shouldContain(\"Hello World\");\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Assembly Phase with -XX:-AOTClassLinking\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:-AOTClassLinking\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-Xlog:cds\",\n-            \"-cp\", appJar);\n-        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n-        out.shouldContain(\"Dumping shared data to file:\");\n-        out.shouldMatch(\"cds.*hello[.]aot\");\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Production Run with AOTCache, which was created with -XX:-AOTClassLinking\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-Xlog:cds\",\n-            \"-cp\", appJar, helloClass);\n-        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n-        out.shouldContain(\"Using AOT-linked classes: false (static archive: no aot-linked classes)\");\n-        out.shouldContain(\"Opened AOT cache hello.aot.\");\n-        out.shouldContain(\"Hello World\");\n-        out.shouldHaveExitValue(0);\n-    }\n-\n-    static void negativeTests() throws Exception {\n-       \/\/----------------------------------------------------------------------\n-        printTestCase(\"Mixing old and new options\");\n-        String mixOldNewErrSuffix = \" cannot be used at the same time with -Xshare:on, -Xshare:auto, \"\n-            + \"-Xshare:off, -Xshare:dump, DumpLoadedClassList, SharedClassListFile, \"\n-            + \"or SharedArchiveFile\";\n-\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-Xshare:off\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-cp\", appJar, helloClass);\n-\n-        OutputAnalyzer out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"Option AOTConfiguration\" + mixOldNewErrSuffix);\n-        out.shouldNotHaveExitValue(0);\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:SharedArchiveFile=\" + aotCacheFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-cp\", appJar, helloClass);\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"Option AOTCache\" + mixOldNewErrSuffix);\n-        out.shouldNotHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Use AOTConfiguration without AOTMode\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"AOTConfiguration can only be used with -XX:AOTMode=record or -XX:AOTMode=create\");\n-        out.shouldNotHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Use AOTMode without AOTConfiguration\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"-XX:AOTMode=record cannot be used without setting AOTConfiguration\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"-XX:AOTMode=create cannot be used without setting AOTConfiguration\");\n-        out.shouldNotHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Bad AOTMode\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=foo\",\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"Unrecognized value foo for AOTMode. Must be one of the following: off, record, create, auto, on\");\n-        out.shouldNotHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOTCache specified with -XX:AOTMode=record\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"AOTCache must not be specified when using -XX:AOTMode=record\");\n-        out.shouldNotHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOTCache not specified with -XX:AOTMode=create\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"AOTCache must be specified when using -XX:AOTMode=create\");\n-        out.shouldNotHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"No such config file\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=no-such-file\",\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"Must be a valid AOT configuration generated by the current JVM: no-such-file\");\n-        out.shouldNotHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOTConfiguration file cannot be used as a CDS archive\");\n-\n-        \/\/ first make sure we have a valid aotConfigFile\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"train\");\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/ Cannot use this config file as a AOT cache\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=on\",\n-            \"-XX:AOTCache=\" + aotConfigFile,\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"Not a valid AOT cache (hello.aotconfig)\");\n-        out.shouldNotHaveExitValue(0);\n-\n-        \/\/ Cannot use this config file as a CDS archive\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-Xshare:on\",\n-            \"-XX:SharedArchiveFile=\" + aotConfigFile,\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"Not a valid archive (hello.aotconfig)\");\n-        out.shouldNotHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Classpath mismatch when creating archive\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-cp\", \"noSuchJar.jar\");\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"class path and\/or module path are not compatible with the ones \" +\n-                          \"specified when the AOTConfiguration file was recorded\");\n-        out.shouldContain(\"Unable to use create AOT cache\");\n-        out.shouldHaveExitValue(1);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Cannot use multiple paths in AOTConfiguration\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile + File.pathSeparator + \"dummy\",\n-            \"-cp\", \"noSuchJar.jar\");\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"Option AOTConfiguration must specify a single file name\");\n-        out.shouldHaveExitValue(1);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Cannot use multiple paths in AOTCache\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile + File.pathSeparator + \"dummy\",\n-            \"-cp\", \"noSuchJar.jar\");\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"Option AOTCache must specify a single file name\");\n-        out.shouldHaveExitValue(1);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Cannot use a dynamic CDS archive for -XX:AOTCache\");\n-        String staticArchive = \"static.jsa\";\n-        String dynamicArchive = \"dynamic.jsa\";\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-Xshare:dump\",\n-            \"-XX:SharedArchiveFile=\" + staticArchive);\n-        out = CDSTestUtils.executeAndLog(pb, \"static\");\n-        out.shouldHaveExitValue(0);\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:SharedArchiveFile=\" + staticArchive,\n-            \"-XX:ArchiveClassesAtExit=\" + dynamicArchive,\n-            \"--version\");\n-        out = CDSTestUtils.executeAndLog(pb, \"dynamic\");\n-        out.shouldHaveExitValue(0);\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-Xlog:cds\",\n-            \"-XX:AOTMode=on\",\n-            \"-XX:AOTCache=\" + dynamicArchive,\n-            \"--version\");\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"Unable to use AOT cache.\");\n-        out.shouldContain(\"Not a valid AOT cache (dynamic.jsa)\");\n-        out.shouldHaveExitValue(1);\n-\n-        \/\/----------------------------------------------------------------------\n-        testEmptyValue(\"AOTCache\");\n-        testEmptyValue(\"AOTConfiguration\");\n-        testEmptyValue(\"AOTMode\");\n-    }\n-\n-    static void testEmptyValue(String option) throws Exception {\n-        printTestCase(\"Empty values for \" + option);\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:\" + option + \"=\", \"--version\");\n-        OutputAnalyzer out = CDSTestUtils.executeAndLog(pb, \"neg\");\n-        out.shouldContain(\"Improperly specified VM option '\" + option + \"='\");\n-        out.shouldHaveExitValue(1);\n-    }\n-\n-    static int testNum = 0;\n-    static void printTestCase(String s) {\n-        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \" starts here vvvvvvv\");\n-        testNum++;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/AOTFlags.java","additions":0,"deletions":378,"binary":false,"changes":378,"status":"deleted"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-public class UseAppCDS_Test {\n-    \/\/ args are from UseAppCDS:\n-    \/\/ args[0] = TEST_OUT\n-    public static void main(String[] args) {\n-        System.out.println(args[0]);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/UseAppCDS_Test.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Use special characters in the name of the cache file specified by -XX:AOTCacheOutput\n+ *          Make sure these characters are passed to the child JVM process that assembles the cache.\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib\n+ * @build SpecialCacheNames\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar MyTestApp\n+ * @run driver SpecialCacheNames AOT --one-step-training\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class SpecialCacheNames {\n+    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    static final String mainClass = \"MyTestApp\";\n+\n+    public static void main(String[] args) throws Exception {\n+        test(\"with spaces\", args);\n+        test(\"single'quote\", args);\n+        if (!Platform.isWindows()) {\n+            \/\/ This seems to be a limitation of ProcessBuilder on Windows that has problem passing\n+            \/\/ double quote or unicode characters to a child process. As a result, we can't\n+            \/\/ even pass these parameters to the training run JVM.\n+            test(\"double\\\"quote\", args);\n+            test(\"unicode\\u202fspace\", args); \/\/ Narrow No-Break Space\n+            test(\"unicode\\u6587\", args); \/\/ CJK unifed ideographs \"wen\" = \"script\"\n+        }\n+    }\n+\n+    static void test(String name, String[] args) throws Exception {\n+        String archiveName = name + (args[0].equals(\"LEYDEN\") ? \".cds\" : \".aot\");\n+\n+        System.out.println(\"============================= Testing with AOT cache name: {{\" + archiveName + \"}}\");\n+        new Tester(name, archiveName).run(args);\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        String archiveName;\n+        public Tester(String name, String archiveName) {\n+            super(name);\n+            this.archiveName = archiveName;\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return appJar;\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            \/\/ A space character in a training run vmarg should not break this vmarg into two.\n+            return new String[] { \"-Dmy.test.prop=space -XX:FooBar\" };\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                mainClass,\n+            };\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) {\n+            if (runMode.isProductionRun()) {\n+                File f = new File(archiveName);\n+                if (f.exists()) {\n+                    System.out.println(\"Found Archive {{\" + archiveName + \"}}\");\n+                } else {\n+                    throw new RuntimeException(\"Archive {{\" + archiveName + \"}} does not exist\");\n+                }\n+            }\n+\n+            if (runMode.isApplicationExecuted()) {\n+                out.shouldContain(\"Hello World\");\n+            }\n+        }\n+    }\n+}\n+\n+class MyTestApp {\n+    public static void main(String args[]) {\n+        String s = System.getProperty(\"my.test.prop\");\n+        if (!\"space -XX:FooBar\".equals(s)) {\n+            throw new RuntimeException(\"Expected \\\"space -XX:FooBar\\\" but got \\\"\" + s + \"\\\"\");\n+        }\n+\n+        System.out.println(\"Hello World\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/SpecialCacheNames.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -38,1 +38,1 @@\n- * @run driver MethodHandleTest AOT\n+ * @run driver MethodHandleTest AOT --two-step-training\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/MethodHandleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run driver WeakReferenceTest AOT\n+ * @run driver WeakReferenceTest AOT --two-step-training\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/WeakReferenceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,503 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary \"AOT\" aliases for traditional CDS command-line options\n+ * @requires vm.cds\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n+ * @run driver AOTFlags\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class AOTFlags {\n+    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+    static String aotConfigFile = \"hello.aotconfig\";\n+    static String aotCacheFile = \"hello.aot\";\n+    static String helloClass = \"Hello\";\n+\n+    public static void main(String[] args) throws Exception {\n+        positiveTests();\n+        negativeTests();\n+    }\n+\n+    static void positiveTests() throws Exception {\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Training Run\");\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+\n+        OutputAnalyzer out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Assembly Phase (AOTClassLinking unspecified -> should be enabled by default)\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Dumping shared data to file:\");\n+        out.shouldMatch(\"cds.*hello[.]aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Production Run with AOTCache\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\"Using AOT-linked classes: true (static archive: has aot-linked classes)\");\n+        out.shouldContain(\"Opened AOT cache hello.aot.\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTMode=off\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"--show-version\",\n+            \"-Xlog:cds\",\n+            \"-XX:AOTMode=off\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldNotContain(\", sharing\");\n+        out.shouldNotContain(\"Opened AOT cache hello.aot.\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTMode=auto\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"--show-version\",\n+            \"-Xlog:cds\",\n+            \"-XX:AOTMode=auto\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\", sharing\");\n+        out.shouldContain(\"Opened AOT cache hello.aot.\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTMode=on\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"--show-version\",\n+            \"-Xlog:cds\",\n+            \"-XX:AOTMode=on\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\", sharing\");\n+        out.shouldContain(\"Opened AOT cache hello.aot.\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Assembly Phase with -XX:-AOTClassLinking\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:-AOTClassLinking\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Dumping shared data to file:\");\n+        out.shouldMatch(\"cds.*hello[.]aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Production Run with AOTCache, which was created with -XX:-AOTClassLinking\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\"Using AOT-linked classes: false (static archive: no aot-linked classes)\");\n+        out.shouldContain(\"Opened AOT cache hello.aot.\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Training run with -XX:-AOTClassLinking, but assembly run with -XX:+AOTClassLinking\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:-AOTClassLinking\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        out.shouldHaveExitValue(0);\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:+AOTClassLinking\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar);\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Dumping shared data to file:\");\n+        out.shouldMatch(\"cds.*hello[.]aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"One step training run (JEP-514\");\n+\n+        \/\/ Set all AOTMode\/AOTCacheOutput\/AOTConfiguration\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ Set AOTCacheOutput\/AOTConfiguration only; Ergo for: AOTMode=record\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ Set AOTCacheOutput\/AOTConfiguration\/AOTMode=auto; Ergo changes: AOTMode=record\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=auto\",\n+            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ Set AOTCacheOutput only; Ergo for: AOTMode=record, AOTConfiguration=<temp>\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"Temporary AOTConfiguration recorded: \" + aotCacheFile + \".config\");\n+        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ Set AOTCacheOutput\/AOTMode=auto only; Ergo for: AOTMode=record, AOTConfiguration=<temp>\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=auto\",\n+            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"Temporary AOTConfiguration recorded: \" + aotCacheFile + \".config\");\n+        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ Quoating of space characters in child JVM process\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n+            \"-Dmy.prop=My string -Xshare:off here\", \/\/ -Xshare:off should not be treated as a single VM opt for the child JVM\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n+        out.shouldMatch(\"Picked up JAVA_TOOL_OPTIONS:.* -Dmy.prop=My' 'string' '-Xshare:off' 'here\");\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    static void negativeTests() throws Exception {\n+       \/\/----------------------------------------------------------------------\n+        printTestCase(\"Mixing old and new options\");\n+        String mixOldNewErrSuffix = \" cannot be used at the same time with -Xshare:on, -Xshare:auto, \"\n+            + \"-Xshare:off, -Xshare:dump, DumpLoadedClassList, SharedClassListFile, \"\n+            + \"or SharedArchiveFile\";\n+\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-Xshare:off\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        OutputAnalyzer out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Option AOTConfiguration\" + mixOldNewErrSuffix);\n+        out.shouldNotHaveExitValue(0);\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:SharedArchiveFile=\" + aotCacheFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Option AOTCache\" + mixOldNewErrSuffix);\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Use AOTConfiguration without AOTMode\/AOTCacheOutput\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"AOTConfiguration can only be used with when AOTMode is record or create (selected AOTMode = auto)\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Use AOTConfiguration with AOTMode=on\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=on\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"AOTConfiguration can only be used with when AOTMode is record or create (selected AOTMode = on)\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Use AOTMode without AOTCacheOutput or AOTConfiguration\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"At least one of AOTCacheOutput and AOTConfiguration must be specified when using -XX:AOTMode=record\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"AOTConfiguration must be specified when using -XX:AOTMode=create\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Bad AOTMode\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=foo\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Unrecognized value foo for AOTMode. Must be one of the following: off, record, create, auto, on\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTCache specified with -XX:AOTMode=record\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"AOTCache must not be specified when using -XX:AOTMode=record\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTCache\/AOTCacheOutput not specified with -XX:AOTMode=create\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"AOTCache or AOTCacheOutput must be specified when using -XX:AOTMode=create\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTCache and AOTCacheOutput have different values\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=aaa\",\n+            \"-XX:AOTCacheOutput=aaa\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Only one of AOTCache or AOTCacheOutput can be specified\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"No such config file\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=no-such-file\",\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Must be a valid AOT configuration generated by the current JVM: no-such-file\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTConfiguration file cannot be used as a CDS archive\");\n+\n+        \/\/ first make sure we have a valid aotConfigFile\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ Cannot use this config file as a AOT cache\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=on\",\n+            \"-XX:AOTCache=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Not a valid AOT cache (hello.aotconfig)\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/ Cannot use this config file as a CDS archive\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-Xshare:on\",\n+            \"-XX:SharedArchiveFile=\" + aotConfigFile,\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Not a valid archive (hello.aotconfig)\");\n+        out.shouldNotHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Classpath mismatch when creating archive\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-cp\", \"noSuchJar.jar\");\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"class path and\/or module path are not compatible with the ones \" +\n+                          \"specified when the AOTConfiguration file was recorded\");\n+        out.shouldContain(\"Unable to use create AOT cache\");\n+        out.shouldHaveExitValue(1);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Cannot use multiple paths in AOTConfiguration\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile + File.pathSeparator + \"dummy\",\n+            \"-cp\", \"noSuchJar.jar\");\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Option AOTConfiguration must specify a single file name\");\n+        out.shouldHaveExitValue(1);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Cannot use multiple paths in AOTCache\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile + File.pathSeparator + \"dummy\",\n+            \"-cp\", \"noSuchJar.jar\");\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Option AOTCache must specify a single file name\");\n+        out.shouldHaveExitValue(1);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Cannot use a dynamic CDS archive for -XX:AOTCache\");\n+        String staticArchive = \"static.jsa\";\n+        String dynamicArchive = \"dynamic.jsa\";\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-Xshare:dump\",\n+            \"-XX:SharedArchiveFile=\" + staticArchive);\n+        out = CDSTestUtils.executeAndLog(pb, \"static\");\n+        out.shouldHaveExitValue(0);\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:SharedArchiveFile=\" + staticArchive,\n+            \"-XX:ArchiveClassesAtExit=\" + dynamicArchive,\n+            \"--version\");\n+        out = CDSTestUtils.executeAndLog(pb, \"dynamic\");\n+        out.shouldHaveExitValue(0);\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-Xlog:cds\",\n+            \"-XX:AOTMode=on\",\n+            \"-XX:AOTCache=\" + dynamicArchive,\n+            \"--version\");\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Unable to use AOT cache.\");\n+        out.shouldContain(\"Not a valid AOT cache (dynamic.jsa)\");\n+        out.shouldHaveExitValue(1);\n+\n+        \/\/----------------------------------------------------------------------\n+        testEmptyValue(\"AOTCache\");\n+        testEmptyValue(\"AOTConfiguration\");\n+        testEmptyValue(\"AOTMode\");\n+    }\n+\n+    static void testEmptyValue(String option) throws Exception {\n+        printTestCase(\"Empty values for \" + option);\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:\" + option + \"=\", \"--version\");\n+        OutputAnalyzer out = CDSTestUtils.executeAndLog(pb, \"neg\");\n+        out.shouldContain(\"Improperly specified VM option '\" + option + \"='\");\n+        out.shouldHaveExitValue(1);\n+    }\n+\n+    static int testNum = 0;\n+    static void printTestCase(String s) {\n+        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \": starts here vvvvvvv\");\n+        testNum++;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotFlags\/AOTFlags.java","additions":503,"deletions":0,"binary":false,"changes":503,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary JAVA_AOT_OPTIONS environment variable\n+ * @requires vm.cds\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n+ * @run driver JavaAOTOptionsEnvVar\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class JavaAOTOptionsEnvVar {\n+    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+    static String aotConfigFile = \"hello.aotconfig\";\n+    static String aotCacheFile = \"hello.aot\";\n+    static String helloClass = \"Hello\";\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"JAVA_AOT_OPTIONS (single-command training)\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+        \/\/ The \"-Xshare:off\" below should be treated as part of a property value and not\n+        \/\/ a VM option by itself\n+        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-Dsome.option='foo -Xshare:off ' -Xmx512m -XX:-AOTClassLinking\");\n+        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n+        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS: -Dsome.option='foo -Xshare:off '\");\n+        checkAOTClassLinkingDisabled(out);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"JAVA_AOT_OPTIONS (two-command training)\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-XX:-AOTClassLinking\");\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS:\");\n+        checkAOTClassLinkingDisabled(out);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"JAVA_AOT_OPTIONS (with AOTMode specified in -XX:VMOptionsFile)\");\n+        String optionsFile = \"opts.txt\";\n+        Files.writeString(Path.of(optionsFile), \"-XX:AOTMode=create\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:VMOptionsFile=\" + optionsFile,\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-XX:-AOTClassLinking\");\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS:\");\n+        checkAOTClassLinkingDisabled(out);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Using -XX:VMOptionsFile inside JAVA_AOT_OPTIONS)\");\n+        Files.writeString(Path.of(optionsFile), \"-XX:-AOTClassLinking\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-XX:VMOptionsFile=\"  + optionsFile);\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS:\");\n+        checkAOTClassLinkingDisabled(out);\n+    }\n+\n+    static void checkAOTClassLinkingDisabled(OutputAnalyzer out) {\n+        out.shouldMatch(\"aot-linked =[ ]+0,\"); \/\/ -XX:-AOTClassLinking should take effect\n+        out.shouldNotMatch(\"aot-linked =[ ]+[1-9]\");\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    static int testNum = 0;\n+    static void printTestCase(String s) {\n+        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \": starts here vvvvvvv\");\n+        testNum++;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotFlags\/JavaAOTOptionsEnvVar.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary substitution of %p in AOTCache\/AOTCacheOutput\/AOTConfiguration\n+ * @requires vm.cds\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n+ * @run driver PIDSubstitution\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class PIDSubstitution {\n+    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+    static String helloClass = \"Hello\";\n+\n+    public static void main(String[] args) throws Exception {\n+        positiveTests();\n+        negativeTests();\n+    }\n+\n+    static void positiveTests() throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+        String aotCacheFile;\n+        String aotConfigFile;\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTConfiguration (two-command training)\");\n+        removeOutputFiles();\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=test-%p.aotconfig\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        aotConfigFile = check(out, \"test-\", \".aotconfig\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ \"create\" with AOTCache\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=test-%p.aot\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        aotCacheFile = check(out, \"test-\", \".aot\");\n+        out.shouldContain(\"AOTCache creation is complete: \" + aotCacheFile);\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ \"create\" with AOTCacheOutput\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCacheOutput=test-%p.aot\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        aotCacheFile = check(out, \"test-\", \".aot\");\n+        out.shouldContain(\"AOTCache creation is complete: \" + aotCacheFile);\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTConfiguration\/AOTCache (single-command training)\");\n+        removeOutputFiles();\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=test-%p.aotconfig\",\n+            \"-XX:AOTCacheOutput=test-%p.aot\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        aotConfigFile = check(out, \"test-\", \".aotconfig\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        aotCacheFile = check(out, \"test-\", \".aot\");\n+        out.shouldContain(\"AOTCache creation is complete: \" + aotCacheFile);\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    static void negativeTests() throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Cannot use %p twice\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=test-%p%p.aotconfig\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"AOTConfiguration cannot contain more than one %p\");\n+        out.shouldHaveExitValue(1);\n+    }\n+\n+    static void removeOutputFiles() {\n+        removeOutputFiles(\".aot\");\n+        removeOutputFiles(\".aotconfig\");\n+    }\n+\n+    static void removeOutputFiles(String suffix) {\n+        File dir = new File(\".\");\n+        for (File f : dir.listFiles()) {\n+            if (f.getName().endsWith(suffix)) {\n+                f.delete();\n+            }\n+        }\n+    }\n+\n+    static String check(OutputAnalyzer out, String prefix, String suffix) {\n+        String stdout = out.getStdout();\n+        Pattern pattern = Pattern.compile(\"Initialized VM with process ID ([0-9]+)\");\n+        Matcher matcher = pattern.matcher(stdout);\n+\n+        if (!matcher.find()) {\n+            throw new RuntimeException(\"Cannot find pid\");\n+        }\n+        \/\/ For single-command training, pid will be from -Xlog of the first process (the training process).\n+        \/\/ %p should not be substituted with the pid of the second process (the assembly process).\n+        String pid = matcher.group(1);\n+        String fileName = prefix + \"pid\" + pid + suffix;\n+        File file = new File(fileName);\n+        if (!file.exists()) {\n+            throw new RuntimeException(\"Expected file doesn't exist: \" + fileName);\n+        }\n+        if (!file.isFile()) {\n+            throw new RuntimeException(\"Expected to be a file: \" + fileName);\n+        }\n+        return fileName;\n+    }\n+\n+    static int testNum = 0;\n+    static void printTestCase(String s) {\n+        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \": starts here vvvvvvv\");\n+        testNum++;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotFlags\/PIDSubstitution.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"},{"patch":"@@ -38,1 +38,6 @@\n-*\/\n+ *\n+ * The AOT workflow runs with one-step training by default. For debugging purposes, run\n+ * jtreg with -vmoption:-DCDSAppTester.two.step.training=true. This will run -XX:AOTMode=record\n+ * and -XX:AOTMode=record in two separate processes that you can rerun easily inside a debugger.\n+ * Also, the log files are easier to read.\n+ *\/\n@@ -54,1 +59,9 @@\n-\n+    private boolean inOneStepTraining = false;\n+\n+    \/**\n+     * All files created in the CDS\/AOT workflow will be name + extension. E.g.\n+     * - name.aot\n+     * - name.aotconfig\n+     * - name.classlist\n+     * - name.jsa\n+     *\/\n@@ -62,1 +75,1 @@\n-        classListFileLog = classListFile + \".log\";\n+        classListFileLog = logFileName(classListFile);\n@@ -64,1 +77,1 @@\n-        aotConfigurationFileLog = aotConfigurationFile + \".log\";\n+        aotConfigurationFileLog = logFileName(aotConfigurationFile);\n@@ -66,1 +79,1 @@\n-        staticArchiveFileLog = staticArchiveFile + \".log\";\n+        staticArchiveFileLog = logFileName(staticArchiveFile);\n@@ -68,1 +81,1 @@\n-        aotCacheFileLog = aotCacheFile + \".log\";\n+        aotCacheFileLog = logFileName(aotCacheFile);;\n@@ -70,1 +83,1 @@\n-        dynamicArchiveFileLog = dynamicArchiveFile + \".log\";\n+        dynamicArchiveFileLog = logFileName(dynamicArchiveFile);\n@@ -76,1 +89,1 @@\n-            return name() + \".production.log\";\n+            return logFileName(name() + \".production\");\n@@ -78,1 +91,1 @@\n-            return name() + \".production.\" + numProductionRuns + \".log\";\n+            return logFileName(name() + \".production.\" + numProductionRuns);\n@@ -82,0 +95,6 @@\n+    private static String logFileName(String file) {\n+        file = file.replace(\"\\\"\", \"%22\");\n+        file = file.replace(\"'\", \"%27\");\n+        return file + \".log\";\n+    }\n+\n@@ -171,2 +190,2 @@\n-        StringBuilder sb = new StringBuilder(\"-Xlog:\");\n-        String prefix = \"\";\n+        StringBuilder sb = new StringBuilder(\"-Xlog:arguments\");\n+        String prefix = \",\";\n@@ -176,1 +195,0 @@\n-            prefix = \",\";\n@@ -252,0 +270,16 @@\n+    private OutputAnalyzer createAOTCacheOneStep() throws Exception {\n+        RunMode runMode = RunMode.TRAINING;\n+        String[] cmdLine = StringArrayUtils.concat(vmArgs(runMode),\n+                                                   \"-XX:AOTMode=record\",\n+                                                   \"-XX:AOTCacheOutput=\" + aotCacheFile,\n+                                                   logToFile(aotCacheFileLog,\n+                                                             \"class+load=debug\",\n+                                                             \"cds=debug\",\n+                                                             \"cds+class=debug\"));\n+        cmdLine = addCommonVMArgs(runMode, cmdLine);\n+        cmdLine = StringArrayUtils.concat(cmdLine, appCommandLine(runMode));\n+        OutputAnalyzer out =  executeAndCheck(cmdLine, runMode, aotCacheFile, aotCacheFileLog);\n+        listOutputFile(aotCacheFileLog + \".0\"); \/\/ the log file for the training run\n+        return out;\n+    }\n+\n@@ -392,1 +426,1 @@\n-        String err = \"Must have exactly one command line argument of the following: \";\n+        String err = \"Must have at least one command line argument of the following: \";\n@@ -399,1 +433,1 @@\n-        if (args.length != 1) {\n+        if (args.length < 1) {\n@@ -407,1 +441,1 @@\n-                runAOTWorkflow();\n+                runAOTWorkflow(args);\n@@ -428,1 +462,1 @@\n-    public void runAOTWorkflow() throws Exception {\n+    public void runAOTWorkflow(String... args) throws Exception {\n@@ -430,2 +464,29 @@\n-        recordAOTConfiguration();\n-        createAOTCache();\n+        boolean oneStepTraining = true; \/\/ by default use onestep trainning\n+\n+        if (System.getProperty(\"CDSAppTester.two.step.training\") != null) {\n+            oneStepTraining = false;\n+        }\n+\n+        if (args.length > 1) {\n+            \/\/ Tests such as test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/SpecialCacheNames.java\n+            \/\/ use --one-step-training or --two-step-training to force a certain training workflow.\n+            if (args[1].equals(\"--one-step-training\")) {\n+                oneStepTraining = true;\n+            } else if (args[1].equals(\"--two-step-training\")) {\n+                oneStepTraining = false;\n+            } else {\n+                throw new RuntimeException(\"Unknown option: \" + args[1]);\n+            }\n+        }\n+\n+        if (oneStepTraining) {\n+            try {\n+                inOneStepTraining = true;\n+                createAOTCacheOneStep();\n+            } finally {\n+                inOneStepTraining = false;\n+            }\n+        } else {\n+            recordAOTConfiguration();\n+            createAOTCache();\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":79,"deletions":18,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -44,1 +44,6 @@\n-\/\/     make test JTREG=AOT_JDK=true TEST=open\/test\/hotspot\/jtreg\/runtime\/invokedynamic\n+\/\/     make test JTREG=AOT_JDK=onestep TEST=open\/test\/hotspot\/jtreg\/runtime\/invokedynamic\n+\/\/     make test JTREG=AOT_JDK=twostep TEST=open\/test\/hotspot\/jtreg\/runtime\/invokedynamic\n+\/\/\n+\/\/ The onestep and twostep options specify whether the AOT cache is created with\n+\/\/ a single JVM command (java -XX:AOTMode=record -XX:AOTCacheOutput=jdk.aotcache ...) or\n+\/\/ two JVM commands (java -XX:AOTMode=record ...; java -XX:AOTMode=create -XX:AOTCache=jdk.aotcache ...)\n","filename":"test\/setup_aot\/TestSetupAOT.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}