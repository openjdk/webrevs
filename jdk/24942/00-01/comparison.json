{"files":[{"patch":"@@ -3071,2 +3071,2 @@\n-jint Arguments::parse_aot_tool_options_environment_variable(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args,\n-                                                            ScopedVMInitArgs* aot_tool_options_args) {\n+jint Arguments::parse_java_aot_options_environment_variable(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args,\n+                                                            ScopedVMInitArgs* java_aot_options_args) {\n@@ -3074,1 +3074,1 @@\n-  if (::getenv(\"AOT_TOOL_OPTIONS\") == nullptr) {\n+  if (::getenv(\"JAVA_AOT_OPTIONS\") == nullptr) {\n@@ -3091,1 +3091,1 @@\n-      return JNI_OK; \/\/ Do not parse AOT_TOOL_OPTIONS\n+      return JNI_OK; \/\/ Do not parse JAVA_AOT_OPTIONS\n@@ -3097,1 +3097,1 @@\n-      return JNI_OK; \/\/ Do not parse AOT_TOOL_OPTIONS\n+      return JNI_OK; \/\/ Do not parse JAVA_AOT_OPTIONS\n@@ -3101,1 +3101,1 @@\n-  return parse_options_environment_variable(\"AOT_TOOL_OPTIONS\", aot_tool_options_args);\n+  return parse_options_environment_variable(\"JAVA_AOT_OPTIONS\", java_aot_options_args);\n@@ -3482,1 +3482,1 @@\n-  ScopedVMInitArgs initial_aot_tool_options_args(\"env_var='AOT_TOOL_OPTIONS'\");\n+  ScopedVMInitArgs initial_java_aot_options_args(\"env_var='JAVA_AOT_OPTIONS'\");\n@@ -3489,1 +3489,1 @@\n-  JavaVMInitArgs* cur_aot_tool_options_args;\n+  JavaVMInitArgs* cur_java_aot_options_args;\n@@ -3496,1 +3496,1 @@\n-  ScopedVMInitArgs mod_aot_tool_options_args(\"env_var='_AOT_TOOL_OPTIONS'\");\n+  ScopedVMInitArgs mod_java_aot_options_args(\"env_var='_JAVA_AOT_OPTIONS'\");\n@@ -3583,1 +3583,1 @@\n-  \/\/ AOT_TOOL_OPTIONS are parsed only if -XX:AOTMode=create has been detected from all\n+  \/\/ JAVA_AOT_OPTIONS are parsed only if -XX:AOTMode=create has been detected from all\n@@ -3585,1 +3585,1 @@\n-  code = parse_aot_tool_options_environment_variable(&all_args, &initial_aot_tool_options_args);\n+  code = parse_java_aot_options_environment_variable(&all_args, &initial_java_aot_options_args);\n@@ -3589,3 +3589,3 @@\n-  code = expand_vm_options_as_needed(initial_aot_tool_options_args.get(),\n-                                     &mod_aot_tool_options_args,\n-                                     &cur_aot_tool_options_args);\n+  code = expand_vm_options_as_needed(initial_java_aot_options_args.get(),\n+                                     &mod_java_aot_options_args,\n+                                     &cur_java_aot_options_args);\n@@ -3596,2 +3596,2 @@\n-  for (int index = 0; index < cur_aot_tool_options_args->nOptions; index++) {\n-    JavaVMOption* option = cur_aot_tool_options_args->options + index;\n+  for (int index = 0; index < cur_java_aot_options_args->nOptions; index++) {\n+    JavaVMOption* option = cur_java_aot_options_args->options + index;\n@@ -3602,1 +3602,1 @@\n-                  \"Option %s cannot be specified in AOT_TOOL_OPTIONS\\n\", optionString);\n+                  \"Option %s cannot be specified in JAVA_AOT_OPTIONS\\n\", optionString);\n@@ -3607,1 +3607,1 @@\n-  all_args.append({cur_aot_tool_options_args, JVMFlagOrigin::ENVIRON_VAR});\n+  all_args.append({cur_java_aot_options_args, JVMFlagOrigin::ENVIRON_VAR});\n@@ -3615,1 +3615,1 @@\n-    cur_aot_tool_options_args->ignoreUnrecognized = true;\n+    cur_java_aot_options_args->ignoreUnrecognized = true;\n@@ -3623,1 +3623,1 @@\n-    print_options(cur_aot_tool_options_args);\n+    print_options(cur_java_aot_options_args);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -312,2 +312,2 @@\n-  static jint parse_aot_tool_options_environment_variable(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args,\n-                                                          ScopedVMInitArgs* aot_tool_options_args);\n+  static jint parse_java_aot_options_environment_variable(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args,\n+                                                          ScopedVMInitArgs* java_aot_options_args);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -507,2 +507,1 @@\n-     * environment variable as described in\n-     * https:\/\/docs.oracle.com\/en\/java\/javase\/24\/docs\/specs\/jvmti.html#tooloptions\n+     * environment variable.\n@@ -514,0 +513,3 @@\n+\n+            \/\/ Encode the args as described in\n+            \/\/ https:\/\/docs.oracle.com\/en\/java\/javase\/24\/docs\/specs\/jvmti.html#tooloptions\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary AOT_TOOL_OPTIONS environment variable\n- * @requires vm.cds\n- * @requires vm.flagless\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @build Hello\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n- * @run driver AOTToolOptions\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class AOTToolOptions {\n-    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n-    static String aotConfigFile = \"hello.aotconfig\";\n-    static String aotCacheFile = \"hello.aot\";\n-    static String helloClass = \"Hello\";\n-\n-    public static void main(String[] args) throws Exception {\n-        ProcessBuilder pb;\n-        OutputAnalyzer out;\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOT_TOOL_OPTIONS (single-command training)\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n-            \"-Xlog:cds=debug\",\n-            \"-cp\", appJar, helloClass);\n-        \/\/ The \"-Xshare:off\" below should be treated as part of a property value and not\n-        \/\/ a VM option by itself\n-        pb.environment().put(\"AOT_TOOL_OPTIONS\", \"-Dsome.option='foo -Xshare:off ' -Xmx512m -XX:-AOTClassLinking\");\n-        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n-        out.shouldContain(\"Hello World\");\n-        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n-        out.shouldContain(\"Picked up AOT_TOOL_OPTIONS: -Dsome.option='foo -Xshare:off '\");\n-        checkAOTClassLinkingDisabled(out);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOT_TOOL_OPTIONS (two-command training)\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-Xlog:cds=debug\",\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"train\");\n-        out.shouldContain(\"Hello World\");\n-        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-Xlog:cds\",\n-            \"-cp\", appJar);\n-        pb.environment().put(\"AOT_TOOL_OPTIONS\", \"-XX:-AOTClassLinking\");\n-        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n-        out.shouldContain(\"Picked up AOT_TOOL_OPTIONS:\");\n-        checkAOTClassLinkingDisabled(out);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOT_TOOL_OPTIONS (with AOTMode specified in -XX:VMOptionsFile)\");\n-        String optionsFile = \"opts.txt\";\n-        Files.writeString(Path.of(optionsFile), \"-XX:AOTMode=create\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:VMOptionsFile=\" + optionsFile,\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-Xlog:cds\",\n-            \"-cp\", appJar);\n-        pb.environment().put(\"AOT_TOOL_OPTIONS\", \"-XX:-AOTClassLinking\");\n-        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n-        out.shouldContain(\"Picked up AOT_TOOL_OPTIONS:\");\n-        checkAOTClassLinkingDisabled(out);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Using -XX:VMOptionsFile inside AOT_TOOL_OPTIONS)\");\n-        Files.writeString(Path.of(optionsFile), \"-XX:-AOTClassLinking\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-Xlog:cds\",\n-            \"-cp\", appJar);\n-        pb.environment().put(\"AOT_TOOL_OPTIONS\", \"-XX:VMOptionsFile=\"  + optionsFile);\n-        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n-        out.shouldContain(\"Picked up AOT_TOOL_OPTIONS:\");\n-        checkAOTClassLinkingDisabled(out);\n-    }\n-\n-    static void checkAOTClassLinkingDisabled(OutputAnalyzer out) {\n-        out.shouldMatch(\"aot-linked =[ ]+0,\"); \/\/ -XX:-AOTClassLinking should take effect\n-        out.shouldNotMatch(\"aot-linked =[ ]+[1-9]\");\n-        out.shouldHaveExitValue(0);\n-    }\n-\n-    static int testNum = 0;\n-    static void printTestCase(String s) {\n-        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \": starts here vvvvvvv\");\n-        testNum++;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotFlags\/AOTToolOptions.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary JAVA_AOT_OPTIONS environment variable\n+ * @requires vm.cds\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n+ * @run driver JavaAOTOptions\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class JavaAOTOptions {\n+    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+    static String aotConfigFile = \"hello.aotconfig\";\n+    static String aotCacheFile = \"hello.aot\";\n+    static String helloClass = \"Hello\";\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"JAVA_AOT_OPTIONS (single-command training)\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+        \/\/ The \"-Xshare:off\" below should be treated as part of a property value and not\n+        \/\/ a VM option by itself\n+        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-Dsome.option='foo -Xshare:off ' -Xmx512m -XX:-AOTClassLinking\");\n+        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n+        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS: -Dsome.option='foo -Xshare:off '\");\n+        checkAOTClassLinkingDisabled(out);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"JAVA_AOT_OPTIONS (two-command training)\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-XX:-AOTClassLinking\");\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS:\");\n+        checkAOTClassLinkingDisabled(out);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"JAVA_AOT_OPTIONS (with AOTMode specified in -XX:VMOptionsFile)\");\n+        String optionsFile = \"opts.txt\";\n+        Files.writeString(Path.of(optionsFile), \"-XX:AOTMode=create\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:VMOptionsFile=\" + optionsFile,\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-XX:-AOTClassLinking\");\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS:\");\n+        checkAOTClassLinkingDisabled(out);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Using -XX:VMOptionsFile inside JAVA_AOT_OPTIONS)\");\n+        Files.writeString(Path.of(optionsFile), \"-XX:-AOTClassLinking\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-XX:VMOptionsFile=\"  + optionsFile);\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS:\");\n+        checkAOTClassLinkingDisabled(out);\n+    }\n+\n+    static void checkAOTClassLinkingDisabled(OutputAnalyzer out) {\n+        out.shouldMatch(\"aot-linked =[ ]+0,\"); \/\/ -XX:-AOTClassLinking should take effect\n+        out.shouldNotMatch(\"aot-linked =[ ]+[1-9]\");\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    static int testNum = 0;\n+    static void printTestCase(String s) {\n+        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \": starts here vvvvvvv\");\n+        testNum++;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotFlags\/JavaAOTOptions.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}