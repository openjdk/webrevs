{"files":[{"patch":"@@ -477,1 +477,1 @@\n-  \/\/ For simplicity, we don't allow %p to be specified twice, because make_log_name()\n+  \/\/ For simplicity, we don't allow %p\/%t to be specified twice, because make_log_name()\n@@ -485,0 +485,4 @@\n+  const char* first_t = strstr(filename, \"%t\");\n+  if (first_t != nullptr && strstr(first_t + 2, \"%t\") != nullptr) {\n+    vm_exit_during_initialization(err_msg(\"%s cannot contain more than one %%t\", flag->name()));\n+  }\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1082,4 +1082,4 @@\n-  \/\/ Note: because we are running in AOTMode=record, JAVA_AOT_OPTIONS have not been\n-  \/\/ parsed, so they are not in Arguments::jvm_args_array. If JAVA_AOT_OPTIONS is in\n-  \/\/ the environment, it will be inherited by the child JVM process, which will\n-  \/\/ parse these options in Arguments::parse_java_tool_options_environment_variable()\n+  \/\/ Note: because we are running in AOTMode=record, JDK_AOT_VM_OPTIONS have not been\n+  \/\/ parsed, so they are not in Arguments::jvm_args_array. If JDK_AOT_VM_OPTIONS is in\n+  \/\/ the environment, it will be inherited and parsed by the child JVM process\n+  \/\/ in Arguments::parse_java_tool_options_environment_variable().\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3071,2 +3071,2 @@\n-jint Arguments::parse_java_aot_options_environment_variable(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args,\n-                                                            ScopedVMInitArgs* java_aot_options_args) {\n+jint Arguments::parse_jdk_aot_vm_options_environment_variable(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args,\n+                                                            ScopedVMInitArgs* jdk_aot_vm_options_args) {\n@@ -3074,1 +3074,1 @@\n-  if (::getenv(\"JAVA_AOT_OPTIONS\") == nullptr) {\n+  if (::getenv(\"JDK_AOT_VM_OPTIONS\") == nullptr) {\n@@ -3091,1 +3091,1 @@\n-      return JNI_OK; \/\/ Do not parse JAVA_AOT_OPTIONS\n+      return JNI_OK; \/\/ Do not parse JDK_AOT_VM_OPTIONS\n@@ -3097,1 +3097,1 @@\n-      return JNI_OK; \/\/ Do not parse JAVA_AOT_OPTIONS\n+      return JNI_OK; \/\/ Do not parse JDK_AOT_VM_OPTIONS\n@@ -3101,1 +3101,1 @@\n-  return parse_options_environment_variable(\"JAVA_AOT_OPTIONS\", java_aot_options_args);\n+  return parse_options_environment_variable(\"JDK_AOT_VM_OPTIONS\", jdk_aot_vm_options_args);\n@@ -3482,1 +3482,1 @@\n-  ScopedVMInitArgs initial_java_aot_options_args(\"env_var='JAVA_AOT_OPTIONS'\");\n+  ScopedVMInitArgs initial_jdk_aot_vm_options_args(\"env_var='JDK_AOT_VM_OPTIONS'\");\n@@ -3489,1 +3489,1 @@\n-  JavaVMInitArgs* cur_java_aot_options_args;\n+  JavaVMInitArgs* cur_jdk_aot_vm_options_args;\n@@ -3496,1 +3496,1 @@\n-  ScopedVMInitArgs mod_java_aot_options_args(\"env_var='_JAVA_AOT_OPTIONS'\");\n+  ScopedVMInitArgs mod_jdk_aot_vm_options_args(\"env_var='_JDK_AOT_VM_OPTIONS'\");\n@@ -3583,1 +3583,1 @@\n-  \/\/ JAVA_AOT_OPTIONS are parsed only if -XX:AOTMode=create has been detected from all\n+  \/\/ JDK_AOT_VM_OPTIONS are parsed only if -XX:AOTMode=create has been detected from all\n@@ -3585,1 +3585,1 @@\n-  code = parse_java_aot_options_environment_variable(&all_args, &initial_java_aot_options_args);\n+  code = parse_jdk_aot_vm_options_environment_variable(&all_args, &initial_jdk_aot_vm_options_args);\n@@ -3589,3 +3589,3 @@\n-  code = expand_vm_options_as_needed(initial_java_aot_options_args.get(),\n-                                     &mod_java_aot_options_args,\n-                                     &cur_java_aot_options_args);\n+  code = expand_vm_options_as_needed(initial_jdk_aot_vm_options_args.get(),\n+                                     &mod_jdk_aot_vm_options_args,\n+                                     &cur_jdk_aot_vm_options_args);\n@@ -3596,2 +3596,2 @@\n-  for (int index = 0; index < cur_java_aot_options_args->nOptions; index++) {\n-    JavaVMOption* option = cur_java_aot_options_args->options + index;\n+  for (int index = 0; index < cur_jdk_aot_vm_options_args->nOptions; index++) {\n+    JavaVMOption* option = cur_jdk_aot_vm_options_args->options + index;\n@@ -3602,1 +3602,1 @@\n-                  \"Option %s cannot be specified in JAVA_AOT_OPTIONS\\n\", optionString);\n+                  \"Option %s cannot be specified in JDK_AOT_VM_OPTIONS\\n\", optionString);\n@@ -3607,1 +3607,1 @@\n-  all_args.append({cur_java_aot_options_args, JVMFlagOrigin::ENVIRON_VAR});\n+  all_args.append({cur_jdk_aot_vm_options_args, JVMFlagOrigin::ENVIRON_VAR});\n@@ -3615,1 +3615,1 @@\n-    cur_java_aot_options_args->ignoreUnrecognized = true;\n+    cur_jdk_aot_vm_options_args->ignoreUnrecognized = true;\n@@ -3623,1 +3623,1 @@\n-    print_options(cur_java_aot_options_args);\n+    print_options(cur_jdk_aot_vm_options_args);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -312,2 +312,2 @@\n-  static jint parse_java_aot_options_environment_variable(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args,\n-                                                          ScopedVMInitArgs* java_aot_options_args);\n+  static jint parse_jdk_aot_vm_options_environment_variable(GrowableArrayCHeap<VMInitArgsGroup, mtArguments>* all_args,\n+                                                            ScopedVMInitArgs* jdk_aot_vm_options_args);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3998,2 +3998,2 @@\n-To diagnose problems with the above options, you can add `-Xlog:cds` to the application's VM\n-arguments. For example, if `--add-modules jdk.jconcole` was specified during archive creation\n+To diagnose problems with the AOT options, you can add `-Xlog:aot` to the application's VM\n+arguments. For example, if `--add-modules jdk.jconsole` was specified during archive creation\n@@ -4048,1 +4048,1 @@\n-`-XX:AOTCache:=`*cachefile*\n+`-XX:AOTCache=`*cachefile*\n@@ -4050,3 +4050,0 @@\n-    If `-XX:AOTCache` is specified but `-XX:AOTMode` is not specified,\n-    then `AOTMode` will be given the value of `auto`.\n-\n@@ -4055,1 +4052,6 @@\n-`-XX:AOTCacheOutput:=`*cachefile*\n+    This option is compatible with `AOTMode` settings of `on`, `create`, or `auto` (the default).\n+    The *cachefile* is read in AOT modes `on` and `auto`, and is ignored by mode `off`.\n+    The *cachefile* is written by AOT mode `create`.  In that case, this option is\n+    equivalent to `-XX:AOTCacheOutput=`*cachefile*.\n+\n+`-XX:AOTCacheOutput=`*cachefile*\n@@ -4059,1 +4061,1 @@\n-    When `-XX:AOTCacheOutput` is specified:\n+    This option is compatible with `AOTMode` settings of `record`, `create`, or `auto` (the default).\n@@ -4061,5 +4063,1 @@\n-    - If `-XX:AOTMode` is not specified, then `AOTMode` will be given the value of `record`.\n-    - If `-XX:AOTMode=auto` is specified, the JVM behaves if `-XX:AOTMode=record` were specified.\n-    - If `-XX:AOTMode=on` is specified, the JVM will exit with an error.\n-\n-`-XX:AOTConfiguration:=`*configfile*\n+`-XX:AOTConfiguration=`*configfile*\n@@ -4069,5 +4067,3 @@\n-    When `-XX:AOTConfiguration` can be used only if:\n-\n-    - `-XX:AOTMode=record` is specified, or\n-    - `-XX:AOTCacheOutput` is specified, and `-XX:AOTMode=auto` is specified, or\n-    - `-XX:AOTCacheOutput` is specified, and `-XX:AOTMode` is not specidied.\n+    This option is compatible with `AOTMode` settings of `record`, `create`, or `auto` (the default).\n+    The *configfile* is read by AOT mode `create`, and written by the other applicable modes.\n+    If the AOT mode is `auto`, then `AOTCacheOutput` must also be present.\n@@ -4075,1 +4071,3 @@\n-    In all other cases, the JVM will exit with an error.\n+`-XX:AOTMode=`*mode*\n+:   Specifies the AOT Mode for this run.\n+    *mode* must be one of the following: `auto`, `off`, `record`, `create`, or `on`.\n@@ -4077,2 +4075,6 @@\n-`-XX:+AOTMode:=`*mode*\n-:   *mode* must be one of the following: `off`, `record`, `create`, `auto`, or `on`.\n+-   `auto`: This AOT mode is the default, and takes effect if no `-XX:AOTMode` option\n+    is present.  It automatically sets the AOT mode to `record`, `on`, or `off`, as follows:\n+     - If `-XX:AOTCacheOutput=`*cachefile* is specified, the AOT mode is changed to `record`\n+       (a training run, with a subsequent `create` operation).\n+     - Otherwise, if an AOT cache can be loaded, the AOT mode is changed to `on` (a production run).\n+     - Otherwise, the AOT mode is changed to `off` (a production run with no AOT cache).\n@@ -4080,1 +4082,2 @@\n--   `off`: no AOT cache is used.\n+-   `off`: No AOT cache is used.\n+    Other AOT command line options are ignored.\n@@ -4082,1 +4085,1 @@\n--   `record`: Execute the application in the Training phase.\n+-   `record`: Execute the application in the training phase.\n@@ -4084,1 +4087,1 @@\n-     `-XX:AOTCache=`*cachefile* must be specified.\n+     `-XX:AOTCacheOutput=`*cachefile* must be specified.\n@@ -4087,1 +4090,4 @@\n-     If `-XX:AOTCache=`*cachefile* is specified, a second JVM process is launched\n+     If `-XX:AOTConfiguration=`*configfile* is not specified, the JVM uses\n+     a temporary file name, which may be the string `AOTCacheOutput+\".config\"`,\n+     or else a fresh implementation-dependent temporary file name.\n+     If `-XX:AOTCacheOutput=`*cachefile* is specified, a second JVM process is launched\n@@ -4091,2 +4097,3 @@\n-     variable `JAVA_AOT_OPTIONS`, with the same format as the environment variable\n-     `JDK_JAVA_OPTIONS` described above.\n+     variable `JDK_AOT_VM_OPTIONS`, with the same format as the environment variable\n+     `JAVA_TOOL_OPTIONS`, which is\n+     [defined by JVMTI](https:\/\/docs.oracle.com\/en\/java\/javase\/24\/docs\/specs\/jvmti.html#tooloptions).\n@@ -4095,3 +4102,3 @@\n-     specified. Exactly one of `-XX:AOTCache=`*cachefile* or -XX:AOTCacheOutput=`*cachefile*\n-     must be specifed. The JVM reads the statistical\n-     data from *configfile* and writes the optimization artifacts into *cachefile*.\n+     specified.\n+     The JVM reads history and statistics\n+     from *configfile* and writes the optimization artifacts into *cachefile*.\n@@ -4100,1 +4107,1 @@\n--   `auto` or `on`: These modes should be used in the Production phase.\n+-   `on`: Execute the application in the Production phase.\n@@ -4124,1 +4131,1 @@\n-     - If `AOTMode` is `auto`, the JVM will continue execution without using the\n+     - If `AOTMode` was originally `auto`, the JVM will continue execution without using the\n@@ -4134,1 +4141,1 @@\n-       `-XX:AOTMode=auto -Xlog:cds` to see if the AOT cache can be used or not.\n+       `-XX:AOTMode=auto -Xlog:cds,aot` to see if the AOT cache can be used or not.\n@@ -4152,1 +4159,4 @@\n-with the process ID of the JVM process launched in the command-line. For example:\n+with the process ID of the JVM process launched in the command-line, and likewise the\n+first occurrence of `%t` is replace by the JVM's startup timestamp.\n+(After replacement there must be no further occurrences of `%p` or `%t`, to prevent\n+problems with sub-processes.)  For example:\n","filename":"src\/java.base\/share\/man\/java.md","additions":44,"deletions":34,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -0,0 +1,207 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary substitution of %p\/%t in AOTCache\/AOTCacheOutput\/AOTConfiguration\n+ * @requires vm.cds\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n+ * @run driver FileNameSubstitution\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class FileNameSubstitution {\n+    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+    static String helloClass = \"Hello\";\n+\n+    public static void main(String[] args) throws Exception {\n+        positiveTests();\n+        negativeTests();\n+    }\n+\n+    static void positiveTests() throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+        String aotCacheFile;\n+        String aotConfigFile;\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTConfiguration (two-command training)\");\n+        removeOutputFiles();\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=test-%p.aotconfig\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        aotConfigFile = find_pid_substituted_file(out, \"test-\", \".aotconfig\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ \"create\" with AOTCache\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=test-%p.aot\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        aotCacheFile = find_pid_substituted_file(out, \"test-\", \".aot\");\n+        out.shouldContain(\"AOTCache creation is complete: \" + aotCacheFile);\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ \"create\" with AOTCacheOutput\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCacheOutput=test-%p.aot\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        aotCacheFile = find_pid_substituted_file(out, \"test-\", \".aot\");\n+        out.shouldContain(\"AOTCache creation is complete: \" + aotCacheFile);\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTConfiguration\/AOTCache (single-command training)\");\n+        removeOutputFiles();\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=test-%p.aotconfig\",\n+            \"-XX:AOTCacheOutput=test-%p.aot\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        aotConfigFile = find_pid_substituted_file(out, \"test-\", \".aotconfig\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        aotCacheFile = find_pid_substituted_file(out, \"test-\", \".aot\");\n+        out.shouldContain(\"AOTCache creation is complete: \" + aotCacheFile);\n+        out.shouldHaveExitValue(0);\n+\n+\n+        \/\/ The implementation of %t is exactly the same as %p, so just test one case\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"AOTConfiguration (two-command training) -- %t\");\n+        removeOutputFiles();\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=test-%t.aotconfig\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTConfiguration recorded: test-20\"); \/\/ This should work for the nest 70 years or so ...\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    static void negativeTests() throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Cannot use %p twice\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=test-%p%p.aotconfig\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"AOTConfiguration cannot contain more than one %p\");\n+        out.shouldHaveExitValue(1);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Cannot use %t twice\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=test-%t%t.aotconfig\",\n+            \"-Xlog:os\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"AOTConfiguration cannot contain more than one %t\");\n+        out.shouldHaveExitValue(1);\n+    }\n+\n+    static void removeOutputFiles() {\n+        removeOutputFiles(\".aot\");\n+        removeOutputFiles(\".aotconfig\");\n+    }\n+\n+    static void removeOutputFiles(String suffix) {\n+        File dir = new File(\".\");\n+        for (File f : dir.listFiles()) {\n+            if (f.getName().endsWith(suffix)) {\n+                f.delete();\n+            }\n+        }\n+    }\n+\n+    static String find_pid_substituted_file(OutputAnalyzer out, String prefix, String suffix) {\n+        String stdout = out.getStdout();\n+        Pattern pattern = Pattern.compile(\"Initialized VM with process ID ([0-9]+)\");\n+        Matcher matcher = pattern.matcher(stdout);\n+\n+        if (!matcher.find()) {\n+            throw new RuntimeException(\"Cannot find pid\");\n+        }\n+        \/\/ For single-command training, pid will be from -Xlog of the first process (the training process).\n+        \/\/ %p should not be substituted with the pid of the second process (the assembly process).\n+        String pid = matcher.group(1);\n+        String fileName = prefix + \"pid\" + pid + suffix;\n+        File file = new File(fileName);\n+        if (!file.exists()) {\n+            throw new RuntimeException(\"Expected file doesn't exist: \" + fileName);\n+        }\n+        if (!file.isFile()) {\n+            throw new RuntimeException(\"Expected to be a file: \" + fileName);\n+        }\n+        return fileName;\n+    }\n+\n+    static int testNum = 0;\n+    static void printTestCase(String s) {\n+        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \": starts here vvvvvvv\");\n+        testNum++;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotFlags\/FileNameSubstitution.java","additions":207,"deletions":0,"binary":false,"changes":207,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary JDK_AOT_VM_OPTIONS environment variable\n+ * @requires vm.cds\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n+ * @run driver JDK_AOT_VM_OPTIONS\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class JDK_AOT_VM_OPTIONS {\n+    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+    static String aotConfigFile = \"hello.aotconfig\";\n+    static String aotCacheFile = \"hello.aot\";\n+    static String helloClass = \"Hello\";\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"JDK_AOT_VM_OPTIONS (single-command training)\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+        \/\/ The \"-Xshare:off\" below should be treated as part of a property value and not\n+        \/\/ a VM option by itself\n+        pb.environment().put(\"JDK_AOT_VM_OPTIONS\", \"-Dsome.option='foo -Xshare:off ' -Xmx512m -XX:-AOTClassLinking\");\n+        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n+        out.shouldContain(\"Picked up JDK_AOT_VM_OPTIONS: -Dsome.option='foo -Xshare:off '\");\n+        checkAOTClassLinkingDisabled(out);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"JDK_AOT_VM_OPTIONS (two-command training)\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-Xlog:cds=debug\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"Hello World\");\n+        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        pb.environment().put(\"JDK_AOT_VM_OPTIONS\", \"-XX:-AOTClassLinking\");\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Picked up JDK_AOT_VM_OPTIONS:\");\n+        checkAOTClassLinkingDisabled(out);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"JDK_AOT_VM_OPTIONS (with AOTMode specified in -XX:VMOptionsFile)\");\n+        String optionsFile = \"opts.txt\";\n+        Files.writeString(Path.of(optionsFile), \"-XX:AOTMode=create\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:VMOptionsFile=\" + optionsFile,\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        pb.environment().put(\"JDK_AOT_VM_OPTIONS\", \"-XX:-AOTClassLinking\");\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Picked up JDK_AOT_VM_OPTIONS:\");\n+        checkAOTClassLinkingDisabled(out);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Using -XX:VMOptionsFile inside JDK_AOT_VM_OPTIONS)\");\n+        Files.writeString(Path.of(optionsFile), \"-XX:-AOTClassLinking\");\n+\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar);\n+        pb.environment().put(\"JDK_AOT_VM_OPTIONS\", \"-XX:VMOptionsFile=\"  + optionsFile);\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"Picked up JDK_AOT_VM_OPTIONS:\");\n+        checkAOTClassLinkingDisabled(out);\n+    }\n+\n+    static void checkAOTClassLinkingDisabled(OutputAnalyzer out) {\n+        out.shouldMatch(\"aot-linked =[ ]+0,\"); \/\/ -XX:-AOTClassLinking should take effect\n+        out.shouldNotMatch(\"aot-linked =[ ]+[1-9]\");\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    static int testNum = 0;\n+    static void printTestCase(String s) {\n+        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \": starts here vvvvvvv\");\n+        testNum++;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotFlags\/JDK_AOT_VM_OPTIONS.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary JAVA_AOT_OPTIONS environment variable\n- * @requires vm.cds\n- * @requires vm.flagless\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @build Hello\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n- * @run driver JavaAOTOptionsEnvVar\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class JavaAOTOptionsEnvVar {\n-    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n-    static String aotConfigFile = \"hello.aotconfig\";\n-    static String aotCacheFile = \"hello.aot\";\n-    static String helloClass = \"Hello\";\n-\n-    public static void main(String[] args) throws Exception {\n-        ProcessBuilder pb;\n-        OutputAnalyzer out;\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"JAVA_AOT_OPTIONS (single-command training)\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTCacheOutput=\" + aotCacheFile,\n-            \"-Xlog:cds=debug\",\n-            \"-cp\", appJar, helloClass);\n-        \/\/ The \"-Xshare:off\" below should be treated as part of a property value and not\n-        \/\/ a VM option by itself\n-        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-Dsome.option='foo -Xshare:off ' -Xmx512m -XX:-AOTClassLinking\");\n-        out = CDSTestUtils.executeAndLog(pb, \"ontstep-train\");\n-        out.shouldContain(\"Hello World\");\n-        out.shouldContain(\"AOTCache creation is complete: hello.aot\");\n-        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS: -Dsome.option='foo -Xshare:off '\");\n-        checkAOTClassLinkingDisabled(out);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"JAVA_AOT_OPTIONS (two-command training)\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-Xlog:cds=debug\",\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"train\");\n-        out.shouldContain(\"Hello World\");\n-        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-Xlog:cds\",\n-            \"-cp\", appJar);\n-        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-XX:-AOTClassLinking\");\n-        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n-        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS:\");\n-        checkAOTClassLinkingDisabled(out);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"JAVA_AOT_OPTIONS (with AOTMode specified in -XX:VMOptionsFile)\");\n-        String optionsFile = \"opts.txt\";\n-        Files.writeString(Path.of(optionsFile), \"-XX:AOTMode=create\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:VMOptionsFile=\" + optionsFile,\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-Xlog:cds\",\n-            \"-cp\", appJar);\n-        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-XX:-AOTClassLinking\");\n-        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n-        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS:\");\n-        checkAOTClassLinkingDisabled(out);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Using -XX:VMOptionsFile inside JAVA_AOT_OPTIONS)\");\n-        Files.writeString(Path.of(optionsFile), \"-XX:-AOTClassLinking\");\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=\" + aotCacheFile,\n-            \"-Xlog:cds\",\n-            \"-cp\", appJar);\n-        pb.environment().put(\"JAVA_AOT_OPTIONS\", \"-XX:VMOptionsFile=\"  + optionsFile);\n-        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n-        out.shouldContain(\"Picked up JAVA_AOT_OPTIONS:\");\n-        checkAOTClassLinkingDisabled(out);\n-    }\n-\n-    static void checkAOTClassLinkingDisabled(OutputAnalyzer out) {\n-        out.shouldMatch(\"aot-linked =[ ]+0,\"); \/\/ -XX:-AOTClassLinking should take effect\n-        out.shouldNotMatch(\"aot-linked =[ ]+[1-9]\");\n-        out.shouldHaveExitValue(0);\n-    }\n-\n-    static int testNum = 0;\n-    static void printTestCase(String s) {\n-        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \": starts here vvvvvvv\");\n-        testNum++;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotFlags\/JavaAOTOptionsEnvVar.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -1,179 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary substitution of %p in AOTCache\/AOTCacheOutput\/AOTConfiguration\n- * @requires vm.cds\n- * @requires vm.flagless\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @build Hello\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n- * @run driver PIDSubstitution\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class PIDSubstitution {\n-    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n-    static String helloClass = \"Hello\";\n-\n-    public static void main(String[] args) throws Exception {\n-        positiveTests();\n-        negativeTests();\n-    }\n-\n-    static void positiveTests() throws Exception {\n-        ProcessBuilder pb;\n-        OutputAnalyzer out;\n-        String aotCacheFile;\n-        String aotConfigFile;\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOTConfiguration (two-command training)\");\n-        removeOutputFiles();\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTConfiguration=test-%p.aotconfig\",\n-            \"-Xlog:os\",\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"train\");\n-        out.shouldContain(\"Hello World\");\n-        aotConfigFile = check(out, \"test-\", \".aotconfig\");\n-        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/ \"create\" with AOTCache\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCache=test-%p.aot\",\n-            \"-Xlog:os\",\n-            \"-cp\", appJar);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n-        aotCacheFile = check(out, \"test-\", \".aot\");\n-        out.shouldContain(\"AOTCache creation is complete: \" + aotCacheFile);\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/ \"create\" with AOTCacheOutput\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=create\",\n-            \"-XX:AOTConfiguration=\" + aotConfigFile,\n-            \"-XX:AOTCacheOutput=test-%p.aot\",\n-            \"-Xlog:os\",\n-            \"-cp\", appJar);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n-        aotCacheFile = check(out, \"test-\", \".aot\");\n-        out.shouldContain(\"AOTCache creation is complete: \" + aotCacheFile);\n-        out.shouldHaveExitValue(0);\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"AOTConfiguration\/AOTCache (single-command training)\");\n-        removeOutputFiles();\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTConfiguration=test-%p.aotconfig\",\n-            \"-XX:AOTCacheOutput=test-%p.aot\",\n-            \"-Xlog:os\",\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"train\");\n-        out.shouldContain(\"Hello World\");\n-        aotConfigFile = check(out, \"test-\", \".aotconfig\");\n-        out.shouldContain(\"AOTConfiguration recorded: \" + aotConfigFile);\n-        aotCacheFile = check(out, \"test-\", \".aot\");\n-        out.shouldContain(\"AOTCache creation is complete: \" + aotCacheFile);\n-        out.shouldHaveExitValue(0);\n-    }\n-\n-    static void negativeTests() throws Exception {\n-        ProcessBuilder pb;\n-        OutputAnalyzer out;\n-\n-        \/\/----------------------------------------------------------------------\n-        printTestCase(\"Cannot use %p twice\");\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-XX:AOTMode=record\",\n-            \"-XX:AOTConfiguration=test-%p%p.aotconfig\",\n-            \"-Xlog:os\",\n-            \"-cp\", appJar, helloClass);\n-\n-        out = CDSTestUtils.executeAndLog(pb, \"train\");\n-        out.shouldContain(\"AOTConfiguration cannot contain more than one %p\");\n-        out.shouldHaveExitValue(1);\n-    }\n-\n-    static void removeOutputFiles() {\n-        removeOutputFiles(\".aot\");\n-        removeOutputFiles(\".aotconfig\");\n-    }\n-\n-    static void removeOutputFiles(String suffix) {\n-        File dir = new File(\".\");\n-        for (File f : dir.listFiles()) {\n-            if (f.getName().endsWith(suffix)) {\n-                f.delete();\n-            }\n-        }\n-    }\n-\n-    static String check(OutputAnalyzer out, String prefix, String suffix) {\n-        String stdout = out.getStdout();\n-        Pattern pattern = Pattern.compile(\"Initialized VM with process ID ([0-9]+)\");\n-        Matcher matcher = pattern.matcher(stdout);\n-\n-        if (!matcher.find()) {\n-            throw new RuntimeException(\"Cannot find pid\");\n-        }\n-        \/\/ For single-command training, pid will be from -Xlog of the first process (the training process).\n-        \/\/ %p should not be substituted with the pid of the second process (the assembly process).\n-        String pid = matcher.group(1);\n-        String fileName = prefix + \"pid\" + pid + suffix;\n-        File file = new File(fileName);\n-        if (!file.exists()) {\n-            throw new RuntimeException(\"Expected file doesn't exist: \" + fileName);\n-        }\n-        if (!file.isFile()) {\n-            throw new RuntimeException(\"Expected to be a file: \" + fileName);\n-        }\n-        return fileName;\n-    }\n-\n-    static int testNum = 0;\n-    static void printTestCase(String s) {\n-        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \": starts here vvvvvvv\");\n-        testNum++;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotFlags\/PIDSubstitution.java","additions":0,"deletions":179,"binary":false,"changes":179,"status":"deleted"}]}