{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,3 +64,6 @@\n-      \/\/ If the second mapping happens to be adjacent to the first mapping, reserve another mapping and release the second mapping; for\n-      \/\/ this test, we want to see two disjunct mappings.\n-      if (addr2 == addr1 + reserveSize) {\n+      \/\/ For this test, we want to see two disjunct mappings.\n+      if ((addr2 == addr1 + reserveSize) || (addr2 == addr1 - reserveSize)) {\n+        \/\/               <---r1---><---r2--->...<---tmp--->\n+        \/\/ <---tmp--->...<---r1---><---r2--->\n+        \/\/\n+        \/\/ Reserve a new region and find whether r1 or r2 to be released.\n@@ -68,2 +71,14 @@\n-        wb.NMTReleaseMemory(addr2, reserveSize);\n-        addr2 = tmp;\n+        long r1 = addr1 < addr2 ? addr1 : addr2;\n+        long r2 = addr1 > addr2 ? addr1 : addr2;\n+        long tmp_end = tmp + reserveSize;\n+        long r1_end = r1 + reserveSize;\n+        long r2_end = r2 + reserveSize;\n+        if (tmp >= r2_end) {\n+          wb.NMTReleaseMemory(r2, reserveSize);\n+          addr1 = r1;\n+          addr2 = tmp;\n+        } else if (tmp_end <= r1) {\n+          wb.NMTReleaseMemory(r1, reserveSize);\n+          addr1 = tmp;\n+          addr2 = r2;\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/VirtualAllocTestType.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"}]}