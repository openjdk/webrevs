{"files":[{"patch":"@@ -102,0 +102,2 @@\n+          _ss.reset();\n+          _path.clear();\n@@ -146,1 +148,1 @@\n-  LocalGraphInvariant::LazyReachableCFGNodes* _reachable_cfg_nodes;\n+  LocalGraphInvariant::LazyReachableCFGNodes* _reachable_cfg_nodes;  \/\/ Non nullptr iff the check applies only to reachable nodes.\n","filename":"src\/hotspot\/share\/opto\/graphInvariants.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,6 @@\n-bool Bind::match(const Node* center, PathInGraph&, stringStream&) const {\n+void PathInGraph::clear() {\n+  _nodes.clear();\n+  _relation_to_previous_node.clear();\n+}\n+\n+bool Bind::match(const Node* center) const {\n@@ -48,0 +53,16 @@\n+#ifndef PRODUCT\n+bool Bind::match(const Node* center, PathInGraph&, stringStream&) const {\n+  return match(center);\n+}\n+#endif\n+\n+bool And::match(const Node* center) const {\n+  for (int i = 0; i < _checks.length(); ++i) {\n+    if (!_checks.at(i)->match(center)) {\n+      \/\/ We stay on the same center, so no need to update path.\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+#ifndef PRODUCT\n@@ -57,0 +78,9 @@\n+#endif\n+\n+bool HasExactlyNInputs::match(const Node* center) const {\n+  return center->req() == _expect_req;\n+}\n+\n+bool HasAtLeastNInputs::match(const Node* center) const {\n+  return center->req() >= _expect_req;\n+}\n@@ -70,1 +100,0 @@\n-#endif\n@@ -75,1 +104,0 @@\n-#ifndef PRODUCT\n@@ -77,1 +105,0 @@\n-#endif\n@@ -86,1 +113,0 @@\n-#ifndef PRODUCT\n@@ -88,1 +114,0 @@\n-#endif\n@@ -93,0 +118,1 @@\n+#endif\n@@ -94,0 +120,6 @@\n+bool AtInput::match(const Node* center) const {\n+  assert(_which_input < center->req(), \"Input number is out of range\");\n+  Node* input = center->in(_which_input);\n+  return input != nullptr && _pattern->match(input);\n+}\n+#ifndef PRODUCT\n@@ -107,0 +139,1 @@\n+#endif\n@@ -108,0 +141,4 @@\n+bool NodeClass::match(const Node* center) const {\n+  return (center->*_type_check)();\n+}\n+#ifndef PRODUCT\n@@ -110,3 +147,0 @@\n-#ifdef PRODUCT\n-    ss.print_cr(\"Unexpected type.\");\n-#else\n@@ -114,1 +148,0 @@\n-#endif\n@@ -119,0 +152,1 @@\n+#endif\n@@ -120,0 +154,4 @@\n+bool HasNOutputs::match(const Node* center) const {\n+  return center->outcnt() == _expect_outcnt;\n+}\n+#ifndef PRODUCT\n@@ -123,1 +161,0 @@\n-#ifndef PRODUCT\n@@ -129,1 +166,0 @@\n-#endif\n@@ -134,0 +170,1 @@\n+#endif\n@@ -135,0 +172,20 @@\n+bool AtSingleOutputOfType::match(const Node* center) const {\n+  Node* single_output_of_right_type = nullptr;\n+\n+  for (DUIterator_Fast imax, i = center->fast_outs(imax); i < imax; i++) {\n+    Node* out = center->fast_out(i);\n+    if ((out->*_type_check)()) {\n+      if (single_output_of_right_type != nullptr) {\n+        return false;\n+      }\n+      single_output_of_right_type = out;\n+    }\n+  }\n+\n+  if (single_output_of_right_type == nullptr) {\n+    return false;\n+  }\n+\n+  return _pattern->match(single_output_of_right_type);\n+}\n+#ifndef PRODUCT\n@@ -146,0 +203,1 @@\n+        break;\n@@ -164,1 +222,0 @@\n-#ifndef PRODUCT\n@@ -168,1 +225,0 @@\n-#endif\n@@ -177,1 +233,2 @@\n-}\n\\ No newline at end of file\n+}\n+#endif\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/opto\/pattern.cpp","additions":72,"deletions":15,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+  void clear();\n+\n@@ -71,0 +73,1 @@\n+\n@@ -72,1 +75,12 @@\n-   * of failure.\n+   * of failure. This version is quiet and can be used for non-debug purpose.\n+   * Since no reporting must be generated, this version is cheaper as it can\n+   * return as soon as possible.\n+   *\n+   * center: where to around which node to check whether the pattern matches\n+   *\/\n+  virtual bool match(const Node* center) const = 0;\n+\n+  \/* Check whether the graph and the pattern matches. Returns false in case\n+   * of failure. This version reports nicely on failure and is useful for\n+   * graph verification.\n+   *\n@@ -81,0 +95,1 @@\n+#ifndef PRODUCT\n@@ -82,0 +97,1 @@\n+#endif\n@@ -89,0 +105,4 @@\n+  bool match(const Node*) const override {\n+    return true;\n+  }\n+#ifndef PRODUCT\n@@ -92,0 +112,1 @@\n+#endif\n@@ -112,1 +133,2 @@\n-  bool match(const Node* center, PathInGraph&, stringStream&) const override;\n+  bool match(const Node* center) const override;\n+  NOT_PRODUCT(bool match(const Node* center, PathInGraph&, stringStream&) const override);\n@@ -123,1 +145,1 @@\n-  bool match(const Node* center, PathInGraph&, stringStream&) const override {\n+  bool match(const Node* center) const override {\n@@ -127,0 +149,5 @@\n+#ifndef PRODUCT\n+  bool match(const Node* center, PathInGraph&, stringStream&) const override {\n+    return match(center);\n+  }\n+#endif\n@@ -137,1 +164,2 @@\n-  bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;\n+  bool match(const Node* center) const override;\n+  NOT_PRODUCT(bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;)\n@@ -197,1 +225,2 @@\n-  bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;\n+  bool match(const Node* center) const override;\n+  NOT_PRODUCT(bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;)\n@@ -202,1 +231,2 @@\n-  bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;\n+  bool match(const Node* center) const override;\n+  NOT_PRODUCT(bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;)\n@@ -210,1 +240,2 @@\n-  bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;\n+  bool match(const Node* center) const override;\n+  NOT_PRODUCT(bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;)\n@@ -223,1 +254,2 @@\n-  bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;\n+  bool match(const Node* center) const override;\n+  NOT_PRODUCT(bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;)\n@@ -232,1 +264,2 @@\n-  bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;\n+  bool match(const Node* center) const override;\n+  NOT_PRODUCT(bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;)\n@@ -246,1 +279,2 @@\n-  bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;\n+  bool match(const Node* center) const override;\n+  NOT_PRODUCT(bool match(const Node* center, PathInGraph& path, stringStream& ss) const override;)\n","filename":"src\/hotspot\/share\/opto\/pattern.hpp","additions":44,"deletions":10,"binary":false,"changes":54,"status":"modified"}]}