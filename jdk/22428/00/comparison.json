{"files":[{"patch":"@@ -2216,1 +2216,1 @@\n-      st->print(\"Profiled_Loop \");\n+      st->print(\"Profiled Loop \");\n@@ -2219,1 +2219,1 @@\n-      st->print(\"Loop_Limit_Check \");\n+      st->print(\"Loop Limit Check \");\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,24 @@\n+\n+\/\/ Show Parse Predicate type.\n+function parsePredicateInfo(dump_spec) {\n+  \/\/ It's easier to match with \".*\" because type \"Loop\" can also be found in type \"Loop Limit Check\" and \"Profiled Loop\".\n+  \/\/ Matching with \".*\" also requires us to exclude the optional \"#useless\" string at the end.\n+  var predicateMatch = \/#(.*)(#useless)?\/.exec(dump_spec);\n+  if (predicateMatch != null) {\n+     return predicateMatch[1].trim();\n+  }\n+  return null;\n+}\n+editProperty(matches(\"name\", \"ParsePredicate\"), [\"dump_spec\"], \"extra_label\",\n+             function(dump_spec) { return parsePredicateInfo(dump_spec[0]);});\n+\n+\/\/ Show Assertion Predicate type.\n+function assertionPredicateInfo(dump_spec) {\n+  var predicateMatch = \/#((Init|Last) Value Assertion Predicate)\/.exec(dump_spec);\n+  if (predicateMatch != null) {\n+     return predicateMatch[1];\n+  }\n+  return null;\n+}\n+editProperty(matches(\"name\", \"If|RangeCheck\"), [\"dump_spec\"], \"extra_label\",\n+             function(dump_spec) { return assertionPredicateInfo(dump_spec[0]);});\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/resources\/com\/sun\/hotspot\/igv\/servercompiler\/filters\/customNodeInfo.filter","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}