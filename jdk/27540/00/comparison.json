{"files":[{"patch":"@@ -343,4 +343,0 @@\n-        long doppel = Double.doubleToRawLongBits(d);\n-\n-        short sign_bit = (short)((doppel & 0x8000_0000_0000_0000L) >> 48);\n-\n@@ -353,0 +349,2 @@\n+        long doppel = Double.doubleToRawLongBits(d);\n+        short sign_bit = (short)((doppel & 0x8000_0000_0000_0000L) >> (64 - 16));\n@@ -370,5 +368,8 @@\n-        assert -25 <= exp && exp <= 15;\n-\n-        \/\/ For binary16 subnormals, beside forcing exp to -15, retain\n-        \/\/ the difference expdelta = E_min - exp.  This is the excess\n-        \/\/ shift value, in addition to 42, to be used in the\n+        assert\n+            (MIN_EXPONENT - PRECISION) <= exp &&\n+            exp <= MAX_EXPONENT;\n+\n+        \/\/ For target format subnormals, beside forcing exp to\n+        \/\/ MIN_EXPONENT-1, retain the difference expdelta = E_min -\n+        \/\/ exp.  This is the excess shift value, in addition to the\n+        \/\/ difference in precision bits, to be used in the\n@@ -379,4 +380,4 @@\n-        if (exp < -14) {\n-            expdelta = -14 - exp; \/\/ FIXME?\n-            exp = -15;\n-            msb = 0x0010_0000_0000_0000L; \/\/ should be 0x0020_... ?\n+        if (exp < MIN_EXPONENT) {\n+            expdelta = MIN_EXPONENT - exp;\n+            exp = MIN_EXPONENT - 1;\n+            msb = 0x0010_0000_0000_0000L;\n@@ -386,0 +387,1 @@\n+        int PRECISION_DIFF = Double.PRECISION - PRECISION; \/\/ 42\n@@ -387,1 +389,1 @@\n-        short signif_bits = (short)(f_signif_bits >> (42 + expdelta));\n+        short signif_bits = (short)(f_signif_bits >> (PRECISION_DIFF + expdelta));\n@@ -402,3 +404,3 @@\n-        long lsb    = f_signif_bits & (1L << 42 + expdelta);\n-        long round  = f_signif_bits & (1L << 41 + expdelta);\n-        long sticky = f_signif_bits & ((1L << 41 + expdelta) - 1);\n+        long lsb    = f_signif_bits &  (1L << (PRECISION_DIFF      + expdelta));\n+        long round  = f_signif_bits &  (1L << (PRECISION_DIFF - 1) + expdelta);\n+        long sticky = f_signif_bits & ((1L << (PRECISION_DIFF - 1) + expdelta) - 1);\n@@ -415,1 +417,3 @@\n-        return new Float16((short)(sign_bit | ( ((exp + 15) << 10) + signif_bits ) ));\n+        \/\/ Exponent bias adjust in the representation is equal to MAX_EXPONENT.\n+        return new Float16((short)(sign_bit |\n+                                   ( ((exp + MAX_EXPONENT) << (PRECISION - 1)) + signif_bits ) ));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float16.java","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"}]}