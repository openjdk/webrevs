{"files":[{"patch":"@@ -207,1 +207,2 @@\n-        for (int offset = 0; offset < limit; offset += Long.BYTES) {\n+        int offset = 0;\n+        for (; offset < limit; offset += Long.BYTES) {\n@@ -211,3 +212,9 @@\n-        \/\/ It is safe to copy the tail in a single `long` op because we know `len` is at least 8\n-        final long v = SCOPED_MEMORY_ACCESS.getLongUnaligned(srcSession, src.unsafeGetBase(), src.unsafeGetOffset() + srcOffset + len - Long.BYTES);\n-        SCOPED_MEMORY_ACCESS.putLongUnaligned(dstSession, dst.unsafeGetBase(), dst.unsafeGetOffset() + dstOffset + len - Long.BYTES, v);\n+\n+        \/\/ After the loop, the VM is not able to elide redundant stores so unfortunately,\n+        \/\/ we have to do this if statement.\n+        if ((int) len - offset > 0) {\n+            \/\/ It is safe to copy the tail in a single `long` op because we know `len` is at least 8\n+            final long v = SCOPED_MEMORY_ACCESS.getLongUnaligned(srcSession, src.unsafeGetBase(), src.unsafeGetOffset() + srcOffset + len - Long.BYTES);\n+            SCOPED_MEMORY_ACCESS.putLongUnaligned(dstSession, dst.unsafeGetBase(), dst.unsafeGetOffset() + dstOffset + len - Long.BYTES, v);\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentBulkOperations.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}