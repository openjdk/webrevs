{"files":[{"patch":"@@ -1899,0 +1899,5 @@\n+                if (ed.packageName.equals(\"jdk\/internal\/javac\")) {\n+                    \/\/keep jdk\/internal\/javac untouched. It is used to determine participates in preview:\n+                    continue;\n+                }\n+\n","filename":"make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-        @JEP(number=476, title=\"Module Import Declarations\", status=\"Preview\")\n+        @JEP(number=494, title=\"Module Import Declarations\", status=\"Second Preview\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -192,0 +193,1 @@\n+        boolean isPreview = minor_version == ClassFile.PREVIEW_MINOR_VERSION;\n@@ -251,1 +253,1 @@\n-                    builder = readModuleAttribute(in, cpool, major_version);\n+                    builder = readModuleAttribute(in, cpool, major_version, isPreview);\n@@ -347,1 +349,2 @@\n-    private Builder readModuleAttribute(DataInput in, ConstantPool cpool, int major)\n+    private Builder readModuleAttribute(DataInput in, ConstantPool cpool, int major,\n+                                        boolean isPreview)\n@@ -408,0 +411,7 @@\n+                \/\/ requires transitive java.base is illegal unless:\n+                \/\/ - the major version is 53 (JDK 9), or:\n+                \/\/ - the classfile is a preview classfile, or:\n+                \/\/ - the module is deemed to be participating in preview\n+                \/\/   (i.e. the module is a java.* module)\n+                \/\/ requires static java.base is illegal unless:\n+                \/\/ - the major version is 53 (JDK 9), or:\n@@ -409,1 +419,3 @@\n-                    && (mods.contains(Requires.Modifier.TRANSITIVE)\n+                    && ((mods.contains(Requires.Modifier.TRANSITIVE)\n+                         && !isPreview\n+                         && !\"java.se\".equals(mn))\n@@ -412,3 +424,1 @@\n-                    if (mods.contains(Requires.Modifier.TRANSITIVE)) {\n-                        flagName = \"ACC_TRANSITIVE\";\n-                    } else {\n+                    if (mods.contains(Requires.Modifier.STATIC)) {\n@@ -416,0 +426,2 @@\n+                    } else {\n+                        flagName = \"ACC_TRANSITIVE\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfo.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -157,0 +157,1 @@\n+        java.se, \/\/ for ParticipatesInPreview\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import jdk.internal.javac.ParticipatesInPreview;\n+\n@@ -41,0 +43,1 @@\n+@ParticipatesInPreview\n@@ -42,0 +45,1 @@\n+    requires transitive java.base;\n","filename":"src\/java.se\/share\/classes\/module-info.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,2 +90,3 @@\n-                public boolean isStarImportScope() {\n-                    return true;\n+                @Override\n+                public ScopeType getScopeType() {\n+                    return ScopeType.STAR_IMPORT;\n@@ -95,1 +96,14 @@\n-                    return null;\n+                    return new JavacScope(env) {\n+                        @Override\n+                        public ScopeType getScopeType() {\n+                            return ScopeType.MODULE_IMPORT;\n+                        }\n+                        @Override @DefinedBy(Api.COMPILER_TREE)\n+                        public JavacScope getEnclosingScope() {\n+                            return null;\n+                        }\n+                        @Override @DefinedBy(Api.COMPILER_TREE)\n+                        public Iterable<? extends Element> getLocalElements() {\n+                            return env.toplevel.moduleImportScope.getSymbols(VALIDATOR);\n+                        }\n+                    };\n@@ -125,2 +139,2 @@\n-    public boolean isStarImportScope() {\n-        return false;\n+    public ScopeType getScopeType() {\n+        return ScopeType.ORDINARY;\n@@ -132,1 +146,1 @@\n-                && isStarImportScope() == javacScope.isStarImportScope();\n+                && getScopeType()== javacScope.getScopeType();\n@@ -136,1 +150,1 @@\n-        return env.hashCode() + (isStarImportScope() ? 1 : 0);\n+        return env.hashCode() + getScopeType().hashCode();\n@@ -140,1 +154,7 @@\n-        return \"JavacScope[env=\" + env + \",starImport=\" + isStarImportScope() + \"]\";\n+        return \"JavacScope[env=\" + env + \", scope type=\" + getScopeType() + \"]\";\n+    }\n+\n+    private enum ScopeType {\n+        ORDINARY,\n+        STAR_IMPORT,\n+        MODULE_IMPORT;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacScope.java","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1405,0 +1405,1 @@\n+        jcCompilationUnit.moduleImportScope = new StarImportScope(psym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.tools.javac.code.Symbol.ModuleSymbol;\n@@ -136,0 +137,12 @@\n+        return participatesInPreview(syms, s.packge().modle);\n+    }\n+\n+    \/**\n+     * Returns true if module {@code m} is deemed to participate in the preview, and\n+     * therefore no warnings or errors will be produced.\n+     *\n+     * @param syms the symbol table\n+     * @param m the module to check\n+     * @return true if {@code m} is participating in the preview of {@code previewSymbol}\n+     *\/\n+    public boolean participatesInPreview(Symtab syms, ModuleSymbol m) {\n@@ -140,1 +153,1 @@\n-                .anyMatch(ed -> ed.modules.contains(s.packge().modle));\n+                .anyMatch(ed -> ed.modules.contains(m));\n@@ -214,0 +227,1 @@\n+            case JAVA_BASE_TRANSITIVE -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -265,0 +265,1 @@\n+        JAVA_BASE_TRANSITIVE(JDK24, Fragments.FeatureJavaBaseTransitive, DiagKind.PLURAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -226,0 +226,1 @@\n+        tree.moduleImportScope = new StarImportScope(tree.packge);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,0 +67,2 @@\n+import com.sun.tools.javac.code.Kinds;\n+import com.sun.tools.javac.code.Lint;\n@@ -69,0 +71,1 @@\n+import com.sun.tools.javac.code.Preview;\n@@ -77,0 +80,1 @@\n+import com.sun.tools.javac.code.Symbol.ModuleResolutionFlags;\n@@ -102,0 +106,1 @@\n+import com.sun.tools.javac.util.JCDiagnostic.DiagnosticFlag;\n@@ -115,2 +120,0 @@\n-import com.sun.tools.javac.code.Kinds;\n-\n@@ -120,3 +123,0 @@\n-import com.sun.tools.javac.code.Lint;\n-\n-import com.sun.tools.javac.code.Symbol.ModuleResolutionFlags;\n@@ -144,0 +144,1 @@\n+    private final Preview preview;\n@@ -153,0 +154,1 @@\n+    private final boolean allowRequiresTransitiveJavaBase;\n@@ -195,0 +197,1 @@\n+        preview = Preview.instance(context);\n@@ -206,0 +209,6 @@\n+\n+        Preview preview = Preview.instance(context);\n+\n+        allowRequiresTransitiveJavaBase =\n+                Feature.JAVA_BASE_TRANSITIVE.allowedInSource(source) &&\n+                 (!preview.isPreview(Feature.JAVA_BASE_TRANSITIVE) || preview.isEnabled());\n@@ -252,1 +261,6 @@\n-        return enter(trees, modules -> {}, c);\n+        return enter(trees, modules -> {\n+            \/\/make sure java.base is completed in all cases before continuing.\n+            \/\/the next steps may query if the current module participates in preview,\n+            \/\/and that requires a completed java.base:\n+            syms.java_base.complete();\n+        }, c);\n@@ -810,4 +824,8 @@\n-                    if (msym == syms.java_base && source.compareTo(Source.JDK10) >= 0) {\n-                        log.error(tree.pos(), Errors.ModifierNotAllowedHere(names.transitive));\n-                    } else {\n-                        flags.add(RequiresFlag.TRANSITIVE);\n+                    if (msym == syms.java_base &&\n+                        !allowRequiresTransitiveJavaBase &&\n+                        !preview.participatesInPreview(syms, sym)) {\n+                        if (source.compareTo(Source.JDK10) >= 0) {\n+                            log.error(DiagnosticFlag.SOURCE_LEVEL,\n+                                      tree.pos(),\n+                                      Feature.JAVA_BASE_TRANSITIVE.error(source.name));\n+                        }\n@@ -815,0 +833,1 @@\n+                    flags.add(RequiresFlag.TRANSITIVE);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":30,"deletions":11,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2152,4 +2152,2 @@\n-    private final RecoveryLoadClass starImportScopeRecovery = (env, name) -> {\n-        Scope importScope = env.toplevel.starImportScope;\n-        Symbol existing = importScope.findFirst(Convert.shortName(name),\n-                                                sym -> sym.kind == TYP && sym.flatName() == name);\n+    private final RecoveryLoadClass starImportScopeRecovery =\n+            onDemandImportScopeRecovery(false);\n@@ -2157,3 +2155,9 @@\n-        if (existing != null) {\n-            try {\n-                existing = finder.loadClass(existing.packge().modle, name);\n+    private final RecoveryLoadClass moduleImportScopeRecovery =\n+            onDemandImportScopeRecovery(true);\n+\n+    private RecoveryLoadClass onDemandImportScopeRecovery(boolean moduleImportScope) {\n+        return (env, name) -> {\n+            Scope importScope = moduleImportScope ? env.toplevel.moduleImportScope\n+                                                  : env.toplevel.starImportScope;\n+            Symbol existing = importScope.findFirst(Convert.shortName(name),\n+                                                    sym -> sym.kind == TYP && sym.flatName() == name);\n@@ -2161,3 +2165,8 @@\n-                return new InvisibleSymbolError(env, true, existing);\n-            } catch (CompletionFailure cf) {\n-                \/\/ignore\n+            if (existing != null) {\n+                try {\n+                    existing = finder.loadClass(existing.packge().modle, name);\n+\n+                    return new InvisibleSymbolError(env, true, existing);\n+                } catch (CompletionFailure cf) {\n+                    \/\/ignore\n+                }\n@@ -2165,1 +2174,0 @@\n-        }\n@@ -2167,2 +2175,3 @@\n-        return null;\n-    };\n+            return null;\n+        };\n+    }\n@@ -2436,0 +2445,5 @@\n+\n+            sym = findGlobalType(env, env.toplevel.moduleImportScope, name, moduleImportScopeRecovery);\n+            if (sym.exists()) return sym;\n+\n+            else bestSoFar = bestOf(bestSoFar, sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":27,"deletions":13,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -223,0 +223,1 @@\n+            toplevel.moduleImportScope.finalizeScope();\n@@ -334,1 +335,1 @@\n-                javaLang, env);\n+                javaLang, env, false);\n@@ -344,1 +345,1 @@\n-                            names.asterisk), true));\n+                            names.asterisk), true), false);\n@@ -416,1 +417,1 @@\n-                    doImport((JCImport) imp);\n+                    doImport((JCImport) imp, false);\n@@ -441,1 +442,1 @@\n-        private void doImport(JCImport tree) {\n+        private void doImport(JCImport tree, boolean fromModuleImport) {\n@@ -453,1 +454,2 @@\n-                if (tree.staticImport)\n+                if (tree.staticImport) {\n+                    Assert.check(!fromModuleImport);\n@@ -455,2 +457,3 @@\n-                else\n-                    importAll(tree, p, env);\n+                } else {\n+                    importAll(tree, p, env, fromModuleImport);\n+                }\n@@ -460,0 +463,1 @@\n+                    Assert.check(!fromModuleImport);\n@@ -463,0 +467,1 @@\n+                    Assert.check(!fromModuleImport);\n@@ -509,1 +514,1 @@\n-                        doImport(nestedImport);\n+                        doImport(nestedImport, true);\n@@ -545,2 +550,7 @@\n-                               Env<AttrContext> env) {\n-            env.toplevel.starImportScope.importAll(types, tsym.members(), typeImportFilter, imp, cfHandler);\n+                               Env<AttrContext> env,\n+                               boolean fromModuleImport) {\n+            StarImportScope targetScope =\n+                    fromModuleImport ? env.toplevel.moduleImportScope\n+                                     : env.toplevel.starImportScope;\n+\n+            targetScope.importAll(types, tsym.members(), typeImportFilter, imp, cfHandler);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -202,0 +202,3 @@\n+    \/** true if the class file being read is a preview class file. *\/\n+    boolean previewClassFile;\n+\n@@ -1203,1 +1206,3 @@\n-                                if (flags.contains(RequiresFlag.TRANSITIVE)) {\n+                                if (flags.contains(RequiresFlag.TRANSITIVE) &&\n+                                    (majorVersion != Version.MAX().major || !previewClassFile) &&\n+                                    !preview.participatesInPreview(syms, msym)) {\n@@ -3188,1 +3193,1 @@\n-        boolean previewClassFile =\n+        previewClassFile =\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -924,4 +924,0 @@\n-# 0: name\n-compiler.err.modifier.not.allowed.here=\\\n-    modifier {0} not allowed here\n-\n@@ -3255,0 +3251,3 @@\n+compiler.misc.feature.java.base.transitive=\\\n+    transitive modifier for java.base\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -541,0 +541,2 @@\n+        \/** A scope for all single module imports. *\/\n+        public StarImportScope moduleImportScope;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1141,20 +1141,11 @@\n-            Iterator<Symbol> it = toplevel.namedImportScope.getSymbolsByName(sym.name).iterator();\n-            if (it.hasNext()) {\n-                Symbol s = it.next();\n-                return\n-                  s == sym &&\n-                  !it.hasNext();\n-            }\n-            it = toplevel.packge.members().getSymbolsByName(sym.name).iterator();\n-            if (it.hasNext()) {\n-                Symbol s = it.next();\n-                return\n-                  s == sym &&\n-                  !it.hasNext();\n-            }\n-            it = toplevel.starImportScope.getSymbolsByName(sym.name).iterator();\n-            if (it.hasNext()) {\n-                Symbol s = it.next();\n-                return\n-                  s == sym &&\n-                  !it.hasNext();\n+            for (Scope scope : new Scope[] {toplevel.namedImportScope,\n+                                            toplevel.packge.members(),\n+                                            toplevel.starImportScope,\n+                                            toplevel.moduleImportScope}) {\n+                Iterator<Symbol> it = scope.getSymbolsByName(sym.name).iterator();\n+                if (it.hasNext()) {\n+                    Symbol s = it.next();\n+                    return\n+                      s == sym &&\n+                      !it.hasNext();\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":11,"deletions":20,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -38,0 +39,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -49,0 +52,2 @@\n+    private static final int PREVIEW_MINOR_VERSION =\n+            ClassFile.PREVIEW_MINOR_VERSION;\n@@ -59,1 +64,1 @@\n-         * There are four test cases for JDK 9 and then one test case\n+         * There are four test cases for JDK 9, one test case\n@@ -61,2 +66,3 @@\n-         * feature release for a total of (4 + (FEATURE - 9) ) =>\n-         * (feature - 5) rows.\n+         * feature release, and two tests for the current release with\n+         * a preview flag set, for a total of (4 + (FEATURE - 9) + 2)\n+         * rows.\n@@ -64,1 +70,1 @@\n-        Object[][] result = new Object[(FEATURE - 5)][];\n+        List<Object[]> result = new ArrayList<>(4 + (FEATURE - 9) + 2);\n@@ -67,4 +73,4 @@\n-        result[0] = new Object[]{ 53, 0, Set.of()};\n-        result[1] = new Object[]{ 53, 0, Set.of(STATIC) };\n-        result[2] = new Object[]{ 53, 0, Set.of(TRANSITIVE) };\n-        result[3] = new Object[]{ 53, 0, Set.of(STATIC, TRANSITIVE) };\n+        result.add(new Object[]{ 53, 0, Set.of()});\n+        result.add(new Object[]{ 53, 0, Set.of(STATIC) });\n+        result.add(new Object[]{ 53, 0, Set.of(TRANSITIVE) });\n+        result.add(new Object[]{ 53, 0, Set.of(STATIC, TRANSITIVE) });\n@@ -74,2 +80,2 @@\n-        for (int i = 4; i < (FEATURE - 5) ; i++) {\n-            result[i] = new Object[]{i + 50, 0, Set.of()};\n+        for (int i = 10; i <= FEATURE; i++) {\n+            result.add(new Object[]{ 44 + i, 0, Set.of()});\n@@ -78,1 +84,8 @@\n-        return result;\n+        result.add(new Object[]{ 44 + FEATURE,\n+                                 PREVIEW_MINOR_VERSION,\n+                                 Set.of()});\n+        result.add(new Object[]{ 44 + FEATURE,\n+                                 PREVIEW_MINOR_VERSION,\n+                                 Set.of(TRANSITIVE) });\n+\n+        return result.toArray(s -> new Object[s][]);\n@@ -87,2 +100,3 @@\n-         * current feature release, plus one addition test case for\n-         * the next release for a total of (3 + (FEATURE - 9) * 3 + 1)\n+         * current feature release, two tests for the current release with\n+         * the preview flag set, plus one addition test case for\n+         * the next release for a total of (3 + (FEATURE - 9) * 3 + 2 + 1)\n@@ -91,2 +105,1 @@\n-        int unsupportedCount = 3 + (FEATURE - 9)*3 + 1;\n-        Object[][] result = new Object[unsupportedCount][];\n+        List<Object[]> result = new ArrayList<>(3 + (FEATURE - 9) * 3 + 2 + 1);\n@@ -94,3 +107,3 @@\n-        result[0] = new Object[]{50, 0, Set.of()}; \/\/ JDK 6\n-        result[1] = new Object[]{51, 0, Set.of()}; \/\/ JDK 7\n-        result[2] = new Object[]{52, 0, Set.of()}; \/\/ JDK 8\n+        result.add(new Object[]{50, 0, Set.of()}); \/\/ JDK 6\n+        result.add(new Object[]{51, 0, Set.of()}); \/\/ JDK 7\n+        result.add(new Object[]{52, 0, Set.of()}); \/\/ JDK 8\n@@ -99,1 +112,0 @@\n-            int base = 3 + (i-10)*3;\n@@ -101,3 +113,3 @@\n-            result[base]     = new Object[]{i + 44, 0, Set.of(STATIC)};\n-            result[base + 1] = new Object[]{i + 44, 0, Set.of(TRANSITIVE)};\n-            result[base + 2] = new Object[]{i + 44, 0, Set.of(STATIC, TRANSITIVE)};\n+            result.add(new Object[]{i + 44, 0, Set.of(STATIC)});\n+            result.add(new Object[]{i + 44, 0, Set.of(TRANSITIVE)});\n+            result.add(new Object[]{i + 44, 0, Set.of(STATIC, TRANSITIVE)});\n@@ -106,2 +118,10 @@\n-        result[unsupportedCount - 1] = new Object[]{FEATURE+1+44, 0, Set.of()};\n-        return result;\n+        result.add(new Object[]{FEATURE + 44,\n+                                PREVIEW_MINOR_VERSION,\n+                                Set.of(STATIC)});\n+        result.add(new Object[]{FEATURE + 44,\n+                                PREVIEW_MINOR_VERSION,\n+                                Set.of(STATIC, TRANSITIVE)});\n+\n+        result.add(new Object[]{FEATURE+1+44, 0, Set.of()});\n+\n+        return result.toArray(s -> new Object[s][]);\n","filename":"test\/jdk\/java\/lang\/module\/ClassFileVersionsTest.java","additions":44,"deletions":24,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+import java.lang.classfile.ClassFileVersion;\n+import java.lang.classfile.ClassTransform;\n@@ -1525,0 +1527,64 @@\n+    @Test(expectedExceptions = InvalidModuleDescriptorException.class)\n+    public void testRequiresTransitiveJavaBaseNotPermitted1() throws Exception {\n+        ModuleDescriptor descriptor = ModuleDescriptor.newModule(\"foo\")\n+                .requires(Set.of(Modifier.TRANSITIVE), \"java.base\")\n+                .build();\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ModuleInfoWriter.write(descriptor, baos);\n+        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n+\n+        ModuleDescriptor.read(bb, () -> Set.of(\"p\", \"q\"));\n+    }\n+\n+    @Test(expectedExceptions = InvalidModuleDescriptorException.class)\n+    public void testRequiresTransitiveJavaBaseNotPermitted2() throws Exception {\n+        ModuleDescriptor descriptor = ModuleDescriptor.newModule(\"foo\")\n+                .requires(Set.of(Modifier.TRANSITIVE), \"java.base\")\n+                .build();\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ModuleInfoWriter.write(descriptor, baos);\n+        byte[] bytecode = baos.toByteArray();\n+        ByteBuffer bb = ByteBuffer.wrap(bytecode);\n+        setClassFileVersion(bb, ClassFile.JAVA_21_VERSION, -1);\n+\n+        ModuleDescriptor.read(bb, () -> Set.of(\"p\", \"q\"));\n+    }\n+\n+    public void testRequiresTransitiveJavaBasePermitted() throws Exception {\n+        ModuleDescriptor descriptor = ModuleDescriptor.newModule(\"foo\")\n+                .requires(Set.of(Modifier.TRANSITIVE), \"java.base\")\n+                .build();\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ModuleInfoWriter.write(descriptor, baos);\n+        byte[] bytecode = baos.toByteArray();\n+        ByteBuffer bb = ByteBuffer.wrap(bytecode);\n+        setClassFileVersion(bb, -1, ClassFile.PREVIEW_MINOR_VERSION);\n+\n+        descriptor = ModuleDescriptor.read(bb, () -> Set.of(\"p\", \"q\"));\n+\n+        assertEquals(descriptor.requires().size(), 1);\n+        Requires javaBase = descriptor.requires().iterator().next();\n+        assertEquals(javaBase.name(), \"java.base\");\n+        assertEquals(javaBase.modifiers(), Set.of(Modifier.TRANSITIVE));\n+    }\n+\n+    \/**Change the classfile versions of the provided classfile to the provided\n+     * values.\n+     *\n+     * @param bytecode the classfile content to modify\n+     * @param major the major classfile version to set,\n+     *              -1 if the existing version should be kept\n+     * @param minor the minor classfile version to set,\n+     *              -1 if the existing version should be kept\n+     *\/\n+    private void setClassFileVersion(ByteBuffer bb, int major, int minor) {\n+        if (minor != (-1)) {\n+            bb.putShort(4, (short) minor);\n+        }\n+        if (major != (-1)) {\n+            bb.putShort(6, (short) major);\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-        String x = \"Test; 0; 0\";\n-        String y = \"Test; 0; 0\";\n-        String z = \"Test; 0; 0\";\n+        String x = \"Test; 0; 0; 0\";\n+        String y = \"Test; 0; 0; 0\";\n+        String z = \"Test; 0; 0; 0\";\n@@ -34,3 +34,3 @@\n-                String p = \"-; Test; 0; 0\";\n-                String q = \"-; Test; 0; 0\";\n-                String r = \"-; Test; 0; 0\";\n+                String p = \"-; Test; 0; 0; 0\";\n+                String q = \"-; Test; 0; 0; 0\";\n+                String r = \"-; Test; 0; 0; 0\";\n@@ -42,1 +42,1 @@\n-    String s = \"Test; 0; 0\";\n+    String s = \"Test; 0; 0; 0\";\n@@ -46,3 +46,3 @@\n-                String p = \"-; Test; 0; 0\";\n-                String q = \"-; Test; 0; 0\";\n-                String r = \"-; Test; 0; 0\";\n+                String p = \"-; Test; 0; 0; 0\";\n+                String q = \"-; Test; 0; 0; 0\";\n+                String r = \"-; Test; 0; 0; 0\";\n@@ -55,1 +55,1 @@\n-        String s = \"Test.Test2; Test; 0; 0\";\n+        String s = \"Test.Test2; Test; 0; 0; 0\";\n","filename":"test\/langtools\/tools\/javac\/6402516\/TestClass.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-\/\/TOPLEVEL_SCOPE:List, Test2, Test; java.io.*, java.lang.*\n+\/\/TOPLEVEL_SCOPE:List, Test2, Test; java.io.*, java.lang.*;\n@@ -29,3 +29,3 @@\n-        String x = \"x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*\";\n-        String y = \"y, x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*\";\n-        String z = \"z, y, x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*\";\n+        String x = \"x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*;\";\n+        String y = \"y, x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*;\";\n+        String z = \"z, y, x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*;\";\n@@ -34,3 +34,3 @@\n-                String p = \"p, other, super, this; -, o, z, y, x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*\";\n-                String q = \"q, p, other, super, this; -, o, z, y, x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*\";\n-                String r = \"r, q, p, other, super, this; -, o, z, y, x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*\";\n+                String p = \"p, other, super, this; -, o, z, y, x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*;\";\n+                String q = \"q, p, other, super, this; -, o, z, y, x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*;\";\n+                String r = \"r, q, p, other, super, this; -, o, z, y, x, m1_arg, super, this; List, Test2, Test; java.io.*, java.lang.*;\";\n@@ -42,1 +42,1 @@\n-    String s = \"super, this; List, Test2, Test; java.io.*, java.lang.*\";\n+    String s = \"super, this; List, Test2, Test; java.io.*, java.lang.*;\";\n@@ -46,3 +46,3 @@\n-                String p = \"p, other, super, this; -, super, this; List, Test2, Test; java.io.*, java.lang.*\";\n-                String q = \"q, p, other, super, this; -, super, this; List, Test2, Test; java.io.*, java.lang.*\";\n-                String r = \"r, q, p, other, super, this; -, super, this; List, Test2, Test; java.io.*, java.lang.*\";\n+                String p = \"p, other, super, this; -, super, this; List, Test2, Test; java.io.*, java.lang.*;\";\n+                String q = \"q, p, other, super, this; -, super, this; List, Test2, Test; java.io.*, java.lang.*;\";\n+                String r = \"r, q, p, other, super, this; -, super, this; List, Test2, Test; java.io.*, java.lang.*;\";\n","filename":"test\/langtools\/tools\/javac\/6402516\/TestLocalElements.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-        String x = \"m1; 0; 0\";\n-        String y = \"m1; 0; 0\";\n-        String z = \"m1; 0; 0\";\n+        String x = \"m1; 0; 0; 0\";\n+        String y = \"m1; 0; 0; 0\";\n+        String z = \"m1; 0; 0; 0\";\n@@ -33,3 +33,3 @@\n-                String p = \"equals; m1; 0; 0\";\n-                String q = \"equals; m1; 0; 0\";\n-                String r = \"equals; m1; 0; 0\";\n+                String p = \"equals; m1; 0; 0; 0\";\n+                String q = \"equals; m1; 0; 0; 0\";\n+                String r = \"equals; m1; 0; 0; 0\";\n@@ -41,1 +41,1 @@\n-    String s = \"0; 0; 0\";\n+    String s = \"0; 0; 0; 0\";\n@@ -45,3 +45,3 @@\n-                String p = \"equals; 0; 0; 0\";\n-                String q = \"equals; 0; 0; 0\";\n-                String r = \"equals; 0; 0; 0\";\n+                String p = \"equals; 0; 0; 0; 0\";\n+                String q = \"equals; 0; 0; 0; 0\";\n+                String r = \"equals; 0; 0; 0; 0\";\n@@ -54,1 +54,1 @@\n-        String s = \"0; 0; 0; 0\";\n+        String s = \"0; 0; 0; 0; 0\";\n","filename":"test\/langtools\/tools\/javac\/6402516\/TestMethod.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -221,22 +221,8 @@\n-        actualErrors =\n-                new JavacTask(tb)\n-                    .options(\"--enable-preview\", \"--release\", SOURCE_VERSION,\n-                             \"-XDrawDiagnostics\")\n-                    .outdir(classes)\n-                    .files(tb.findJavaFiles(src))\n-                    .run(Task.Expect.FAIL)\n-                    .writeAll()\n-                    .getOutputLines(Task.OutputKind.DIRECT);\n-\n-        expectedErrors = List.of(\n-                \"Test.java:5:5: compiler.err.ref.ambiguous: Logger, kindname.interface, java.lang.System.Logger, java.lang.System, kindname.class, java.util.logging.Logger, java.util.logging\",\n-                \"- compiler.note.preview.filename: Test.java, DEFAULT\",\n-                \"- compiler.note.preview.recompile\",\n-                \"1 error\"\n-        );\n-\n-        if (!Objects.equals(expectedErrors, actualErrors)) {\n-            throw new AssertionError(\"Incorrect Output, expected: \" + expectedErrors +\n-                                      \", actual: \" + out);\n-\n-        }\n+        new JavacTask(tb)\n+            .options(\"--enable-preview\", \"--release\", SOURCE_VERSION,\n+                     \"-XDrawDiagnostics\")\n+            .outdir(classes)\n+            .files(tb.findJavaFiles(src))\n+            .run(Task.Expect.SUCCESS)\n+            .writeAll()\n+            .getOutputLines(Task.OutputKind.DIRECT);\n@@ -796,1 +782,1 @@\n-                                      \", actual: \" + out);\n+                                      \", actual: \" + actualErrors);\n@@ -846,0 +832,90 @@\n+    public void testPackageImportDisambiguates(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        Path ma = src.resolve(\"ma\");\n+        tb.writeJavaFiles(ma,\n+                          \"\"\"\n+                          module ma {\n+                             exports ma.p1;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package ma.p1;\n+                          public class A {}\n+                          \"\"\");\n+        Path mb = src.resolve(\"mb\");\n+        tb.writeJavaFiles(mb,\n+                          \"\"\"\n+                          module mb {\n+                             exports mb.p1;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package mb.p1;\n+                          public class A {}\n+                          \"\"\");\n+        Path test = src.resolve(\"test\");\n+        tb.writeJavaFiles(test,\n+                          \"\"\"\n+                          module test {\n+                              requires ma;\n+                              requires mb;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import module ma;\n+                          import module mb;\n+                          public class Test {\n+                              A a;\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        List<String> actualErrors = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\",\n+                         \"--enable-preview\", \"--release\", SOURCE_VERSION,\n+                         \"--module-source-path\", src.toString())\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expectedErrors = List.of(\n+                \"Test.java:5:5: compiler.err.ref.ambiguous: A, kindname.class, mb.p1.A, mb.p1, kindname.class, ma.p1.A, ma.p1\",\n+                \"- compiler.note.preview.filename: Test.java, DEFAULT\",\n+                \"- compiler.note.preview.recompile\",\n+                \"1 error\"\n+        );\n+\n+        if (!Objects.equals(expectedErrors, actualErrors)) {\n+            throw new AssertionError(\"Incorrect Output, expected: \" + expectedErrors +\n+                                      \", actual: \" + actualErrors);\n+\n+        }\n+\n+        tb.writeJavaFiles(test,\n+                          \"\"\"\n+                          package test;\n+                          import module ma;\n+                          import module mb;\n+                          import mb.p1.*;\n+                          public class Test {\n+                              A a;\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\",\n+                         \"--enable-preview\", \"--release\", SOURCE_VERSION,\n+                         \"--module-source-path\", src.toString())\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll();\n+    }\n","filename":"test\/langtools\/tools\/javac\/ImportModule.java","additions":99,"deletions":23,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -76,0 +76,3 @@\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.util.ElementFilter;\n+import javax.tools.JavaFileObject;\n@@ -92,0 +95,1 @@\n+        new TestGetScopeResult().testModuleImportScope();\n@@ -826,0 +830,58 @@\n+    void testModuleImportScope() throws IOException {\n+        JavacTool c = JavacTool.create();\n+        try (StandardJavaFileManager fm = c.getStandardFileManager(null, null, null)) {\n+            String code = \"\"\"\n+                          import module java.compiler;\n+                          import java.util.*;\n+                          import java.lang.System;\n+                          class Test {\n+                          }\n+                          \"\"\";\n+            Context ctx = new Context();\n+            TestAnalyzer.preRegister(ctx);\n+            JavaFileObject input =\n+                    SimpleJavaFileObject.forSource(URI.create(\"myfo:\/\/\/Test.java\"), code);\n+            JavacTask t = (JavacTask) c.getTask(null, fm, null, null, null,\n+                                                List.of(input),\n+                                                ctx);\n+            CompilationUnitTree cut = t.parse().iterator().next();\n+            t.analyze();\n+\n+            TreePath topLevelClass = new TreePath(new TreePath(cut), cut.getTypeDecls().get(0));\n+            Scope scope = Trees.instance(t).getScope(topLevelClass);\n+\n+            if (scope.getEnclosingClass() == null) {\n+                throw new AssertionError(\"Expected an enclosing class.\");\n+            }\n+\n+            scope = scope.getEnclosingScope();\n+\n+            if (scope.getEnclosingClass() != null) {\n+                throw new AssertionError(\"Did not expect an enclosing class.\");\n+            }\n+\n+            asssertScopeContainsTypeWithFQN(scope, \"java.lang.System\");\n+            asssertScopeContainsTypeWithFQN(scope, \"Test\");\n+\n+            scope = scope.getEnclosingScope();\n+\n+            if (scope.getEnclosingClass() != null) {\n+                throw new AssertionError(\"Did not expect an enclosing class.\");\n+            }\n+\n+            asssertScopeContainsTypeWithFQN(scope, \"java.util.List\");\n+\n+            scope = scope.getEnclosingScope();\n+\n+            if (scope.getEnclosingClass() != null) {\n+                throw new AssertionError(\"Did not expect an enclosing class.\");\n+            }\n+\n+            asssertScopeContainsTypeWithFQN(scope, \"javax.tools.ToolProvider\");\n+\n+            if (scope.getEnclosingScope() != null) {\n+                throw new AssertionError(\"Did not expect an enclosing scope.\");\n+            }\n+        }\n+    }\n+\n@@ -836,0 +898,13 @@\n+\n+    private void asssertScopeContainsTypeWithFQN(Scope scope, String fqn) {\n+        for (TypeElement type : ElementFilter.typesIn(scope.getLocalElements())) {\n+            if (type.getQualifiedName().contentEquals(fqn)) {\n+                return ;\n+            }\n+        }\n+\n+        throw new AssertionError(\"Expected to find: \" + fqn +\n+                                 \" in: \" + scope.getLocalElements() +\n+                                 \", but it is missing.\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetScopeResult.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-\/\/ key: compiler.err.modifier.not.allowed.here\n+\/\/ key: compiler.err.feature.not.supported.in.source.plural\n+\/\/ key: compiler.misc.feature.java.base.transitive\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ModifierNotAllowed\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -435,0 +435,34 @@\n+    @Test\n+    public void testInModuleImport(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path src_m1 = src.resolve(\"m1x\");\n+        tb.writeJavaFiles(src_m1,\n+                          \"module m1x { }\",\n+                          \"package api; public class Api { public String test() { return null; } }\");\n+        Path src_m2 = src.resolve(\"m2x\");\n+        tb.writeJavaFiles(src_m2,\n+                          \"module m2x { requires m1x; }\",\n+                          \"package test; import module m1x; public class Test { Api api; { api.test().length(); } }\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        List<String> log = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\",\n+                         \"--enable-preview\", \"--source\", System.getProperty(\"java.specification.version\"),\n+                         \"--module-source-path\", src.toString())\n+                .outdir(classes)\n+                .files(findJavaFiles(src))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected = Arrays.asList(\n+                \"Test.java:1:54: compiler.err.cant.resolve.location: kindname.class, Api, , , (compiler.misc.location: kindname.class, test.Test, null)\",\n+                \"- compiler.note.preview.filename: Test.java, DEFAULT\",\n+                \"- compiler.note.preview.recompile\",\n+                \"1 error\");\n+\n+        if (!expected.equals(log))\n+            throw new Exception(\"expected output not found; actual: \" + log);\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/modules\/ConvenientAccessErrorsTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -76,0 +76,3 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import javax.lang.model.element.ModuleElement.DirectiveKind;\n@@ -1156,0 +1159,86 @@\n+    @Test\n+    public void testJavaSEHasRequiresTransitiveJavaBase(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path a = src.resolve(\"a\");\n+        tb.writeJavaFiles(a,\n+                          \"module a { requires java.se; }\",\n+                          \"\"\"\n+                          package test;\n+                          import module java.se;\n+                          public class Test {\n+                              ArrayList<String> l;\n+                          }\n+                          \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        AtomicBoolean seenJavaSEDependency = new AtomicBoolean();\n+\n+        List<String> log;\n+\n+        log = new JavacTask(tb)\n+            .outdir(classes)\n+            .options(\"-XDrawDiagnostics\", \"-XDshould-stop.at=FLOW\")\n+            .callback(verifyJavaSEDependency(true, seenJavaSEDependency))\n+            .files(findJavaFiles(src))\n+            .run(Task.Expect.FAIL)\n+            .writeAll()\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"Test.java:2:8: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.module.imports)\",\n+                \"1 error\");\n+\n+        if (!expected.equals(log))\n+            throw new Exception(\"expected output not found: \" + log);\n+\n+        if (!seenJavaSEDependency.get()) {\n+            throw new AssertionError(\"Didn't find the java.se dependency!\");\n+        }\n+\n+        seenJavaSEDependency.set(false);\n+\n+        new JavacTask(tb)\n+            .outdir(classes)\n+            .options(\"--enable-preview\",\n+                     \"--source\", System.getProperty(\"java.specification.version\"))\n+            .callback(verifyJavaSEDependency(true, seenJavaSEDependency))\n+            .files(findJavaFiles(src))\n+            .run(Task.Expect.SUCCESS)\n+            .writeAll()\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!seenJavaSEDependency.get()) {\n+            throw new AssertionError(\"Didn't find the java.se dependency!\");\n+        }\n+    }\n+        private Consumer<com.sun.source.util.JavacTask> verifyJavaSEDependency(\n+                boolean expectedTransitive,\n+                AtomicBoolean seenJavaSEDependency) {\n+            return t -> {\n+                    t.addTaskListener(new TaskListener() {\n+                        @Override\n+                        public void finished(TaskEvent e) {\n+                            if (e.getKind() == TaskEvent.Kind.ANALYZE) {\n+                                ModuleElement javaBase =\n+                                        t.getElements().getModuleElement(\"java.base\");\n+                                ModuleElement javaSE =\n+                                        t.getElements().getModuleElement(\"java.se\");\n+                                RequiresDirective requiresJavaBase =\n+                                        javaSE.getDirectives()\n+                                              .stream()\n+                                              .filter(d -> d.getKind() == DirectiveKind.REQUIRES)\n+                                              .map(d -> (RequiresDirective) d)\n+                                              .filter(d -> d.getDependency() == javaBase)\n+                                              .findAny()\n+                                              .orElseThrow();\n+                                if (requiresJavaBase.isTransitive() != expectedTransitive) {\n+                                    throw new AssertionError(\"Expected: \" + expectedTransitive + \", \" +\n+                                                             \"but got: \" + requiresJavaBase.isTransitive());\n+                                }\n+                                seenJavaSEDependency.set(true);\n+                            }\n+                        }\n+                    });\n+                };\n+        }\n","filename":"test\/langtools\/tools\/javac\/modules\/EdgeCases.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8193125 8196623\n+ * @bug 8193125 8196623 8335989\n@@ -52,0 +52,1 @@\n+import java.util.function.Supplier;\n@@ -59,0 +60,2 @@\n+    private static final String CURRENT_VERSION = System.getProperty(\"java.specification.version\");\n+\n@@ -78,6 +81,3 @@\n-        StreamSupport.stream(new JDKPlatformProvider().getSupportedPlatformNames()\n-                                                      .spliterator(),\n-                             false)\n-                     .filter(p -> Integer.parseInt(p) >= 9)\n-                     .forEach(targets::add);\n-        \/\/run without --release:\n+        targets.add(\"9\");\n+        targets.add(\"10\");\n+        targets.add(\"21\");\n@@ -85,0 +85,1 @@\n+        targets.add(\"current-preview\");\n@@ -122,1 +123,1 @@\n-        boolean expectOK = target.equals(\"9\");\n+        boolean expectOK;\n@@ -127,4 +128,32 @@\n-        if (target.equals(\"current\"))\n-            jct.options(\"-XDrawDiagnostics\");\n-        else\n-            jct.options(\"-XDrawDiagnostics\", \"--release\", target);\n+        List<String> options = new ArrayList<>();\n+\n+        switch (target) {\n+            case \"current\":\n+                options.add(\"--release\");\n+                options.add(CURRENT_VERSION);\n+                expectOK = false;\n+                break;\n+            case \"current-preview\":\n+                options.add(\"--enable-preview\");\n+                options.add(\"--release\");\n+                options.add(CURRENT_VERSION);\n+                expectOK = true;\n+                break;\n+            case \"9\":\n+                options.add(\"--release\");\n+                options.add(target);\n+                expectOK = true;\n+                break;\n+            default:\n+                options.add(\"--release\");\n+                options.add(target);\n+                expectOK = false;\n+                break;\n+        }\n+\n+        if (mods.contains(\"static\") && !\"9\".equals(target)) {\n+            expectOK = false;\n+        }\n+\n+        options.add(\"-XDrawDiagnostics\");\n+        jct.options(options);\n@@ -141,3 +170,3 @@\n-                    ? \"compiler.err.mod.not.allowed.here\"\n-                    : \"compiler.err.modifier.not.allowed.here\";\n-                String message = \"module-info.java:1:12: \" + key + \": \" + mod;\n+                    ? \"compiler.err.mod.not.allowed.here: \" + mod\n+                    : \"compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.java.base.transitive)\";\n+                String message = \"module-info.java:1:12: \" + key;\n@@ -155,1 +184,42 @@\n-        createClass(base, mods, target);\n+        boolean expectOK;\n+        List<String> options = new ArrayList<>();\n+\n+        switch (target) {\n+            case \"current\":\n+                options.add(\"--release\");\n+                options.add(CURRENT_VERSION);\n+                expectOK = false;\n+                break;\n+            case \"current-preview\":\n+                options.add(\"--enable-preview\");\n+                options.add(\"--release\");\n+                options.add(CURRENT_VERSION);\n+                expectOK = true;\n+                break;\n+            case \"9\":\n+                options.add(\"--release\");\n+                options.add(target);\n+                expectOK = true;\n+                break;\n+            default:\n+                options.add(\"--release\");\n+                options.add(target);\n+                expectOK = false;\n+                break;\n+        }\n+\n+        if (mods.contains(\"static\") && !\"9\".equals(target)) {\n+            expectOK = false;\n+        }\n+\n+        createClass(base, mods, options);\n+\n+        List<String> testOptions = new ArrayList<>();\n+\n+        testOptions.add(\"-XDrawDiagnostics\");\n+        testOptions.add(\"--module-path\"); testOptions.add(base.resolve(\"test-modules\").toString());\n+\n+        if (options.contains(\"--enable-preview\")) {\n+            testOptions.add(\"--enable-preview\");\n+            testOptions.add(\"--source\"); testOptions.add(CURRENT_VERSION);\n+        }\n@@ -162,1 +232,0 @@\n-        boolean expectOK = target.equals(\"9\");\n@@ -165,2 +234,1 @@\n-                .options(\"-XDrawDiagnostics\",\n-                        \"--module-path\", base.resolve(\"test-modules\").toString())\n+                .options(testOptions)\n@@ -191,1 +259,1 @@\n-    void createClass(Path base, List<String> mods, String target) throws Exception {\n+    void createClass(Path base, List<String> mods, List<String> options) throws Exception {\n@@ -200,3 +268,1 @@\n-        if (!target.equals(\"current\")) {\n-            jct.options(\"--release\", target);\n-        }\n+        jct.options(options);\n@@ -229,0 +295,2 @@\n+        boolean preview = options.contains(\"--enable-preview\");\n+\n@@ -240,2 +308,8 @@\n-        byte[] newBytes = ClassFile.of().transformClass(cm1, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n-                andThen(ClassTransform.endHandler(classBuilder -> classBuilder.with(modAttr2))));\n+        ClassTransform replace = (builder, element) -> {\n+            switch (element) {\n+                case ClassFileVersion cfv when preview -> builder.withVersion(cfv.majorVersion(), 0xFFFF);\n+                case ModuleAttribute _ -> builder.with(modAttr2);\n+                default -> builder.with(element);\n+            }\n+        };\n+        byte[] newBytes = ClassFile.of().transformClass(cm1, replace);\n","filename":"test\/langtools\/tools\/javac\/modules\/JavaBaseTest.java","additions":99,"deletions":25,"binary":false,"changes":124,"status":"modified"}]}