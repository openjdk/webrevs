{"files":[{"patch":"@@ -193,1 +193,1 @@\n-        boolean previewClassfile = minor_version == ClassFile.PREVIEW_MINOR_VERSION;\n+        boolean isPreview = minor_version == ClassFile.PREVIEW_MINOR_VERSION;\n@@ -253,1 +253,1 @@\n-                    builder = readModuleAttribute(in, cpool, major_version, previewClassfile);\n+                    builder = readModuleAttribute(in, cpool, major_version, isPreview);\n@@ -411,0 +411,7 @@\n+                \/\/ requires transitive java.base is illegal unless:\n+                \/\/ - the major version is 53 (JDK 9), or:\n+                \/\/ - the classfile is a preview classfile, or:\n+                \/\/ - the module is deemed to be participating in preview\n+                \/\/   (i.e. the module is a java.* module)\n+                \/\/ requires static java.base is illegal unless:\n+                \/\/ - the major version is 53 (JDK 9), or:\n@@ -413,1 +420,0 @@\n-                         \/\/requires transitive java.base; permitted for preview classfiles:\n@@ -415,2 +421,0 @@\n-                         \/\/java.* modules are deemed participating in preview\n-                         \/\/and are allowed to use requires transitive java.base:\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfo.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.classfile.ClassFile;\n@@ -38,0 +39,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -49,0 +52,2 @@\n+    private static final int PREVIEW_MINOR_VERSION =\n+            ClassFile.PREVIEW_MINOR_VERSION;\n@@ -59,1 +64,1 @@\n-         * There are four test cases for JDK 9 and then one test case\n+         * There are four test cases for JDK 9, one test case\n@@ -61,2 +66,3 @@\n-         * feature release for a total of (4 + (FEATURE - 9) ) =>\n-         * (feature - 5) rows.\n+         * feature release, and two tests for the current release with\n+         * a preview flag set, for a total of (4 + (FEATURE - 9) + 2)\n+         * rows.\n@@ -64,1 +70,1 @@\n-        Object[][] result = new Object[(FEATURE - 5)][];\n+        List<Object[]> result = new ArrayList<>(4 + (FEATURE - 9) + 2);\n@@ -67,4 +73,4 @@\n-        result[0] = new Object[]{ 53, 0, Set.of()};\n-        result[1] = new Object[]{ 53, 0, Set.of(STATIC) };\n-        result[2] = new Object[]{ 53, 0, Set.of(TRANSITIVE) };\n-        result[3] = new Object[]{ 53, 0, Set.of(STATIC, TRANSITIVE) };\n+        result.add(new Object[]{ 53, 0, Set.of()});\n+        result.add(new Object[]{ 53, 0, Set.of(STATIC) });\n+        result.add(new Object[]{ 53, 0, Set.of(TRANSITIVE) });\n+        result.add(new Object[]{ 53, 0, Set.of(STATIC, TRANSITIVE) });\n@@ -74,2 +80,2 @@\n-        for (int i = 4; i < (FEATURE - 5) ; i++) {\n-            result[i] = new Object[]{i + 50, 0, Set.of()};\n+        for (int i = 10; i <= FEATURE; i++) {\n+            result.add(new Object[]{ 44 + i, 0, Set.of()});\n@@ -78,1 +84,8 @@\n-        return result;\n+        result.add(new Object[]{ 44 + FEATURE,\n+                                 PREVIEW_MINOR_VERSION,\n+                                 Set.of()});\n+        result.add(new Object[]{ 44 + FEATURE,\n+                                 PREVIEW_MINOR_VERSION,\n+                                 Set.of(TRANSITIVE) });\n+\n+        return result.toArray(s -> new Object[s][]);\n@@ -87,2 +100,3 @@\n-         * current feature release, plus one addition test case for\n-         * the next release for a total of (3 + (FEATURE - 9) * 3 + 1)\n+         * current feature release, two tests for the current release with\n+         * the preview flag set, plus one addition test case for\n+         * the next release for a total of (3 + (FEATURE - 9) * 3 + 2 + 1)\n@@ -91,2 +105,1 @@\n-        int unsupportedCount = 3 + (FEATURE - 9)*3 + 1;\n-        Object[][] result = new Object[unsupportedCount][];\n+        List<Object[]> result = new ArrayList<>(3 + (FEATURE - 9) * 3 + 2 + 1);\n@@ -94,3 +107,3 @@\n-        result[0] = new Object[]{50, 0, Set.of()}; \/\/ JDK 6\n-        result[1] = new Object[]{51, 0, Set.of()}; \/\/ JDK 7\n-        result[2] = new Object[]{52, 0, Set.of()}; \/\/ JDK 8\n+        result.add(new Object[]{50, 0, Set.of()}); \/\/ JDK 6\n+        result.add(new Object[]{51, 0, Set.of()}); \/\/ JDK 7\n+        result.add(new Object[]{52, 0, Set.of()}); \/\/ JDK 8\n@@ -99,1 +112,0 @@\n-            int base = 3 + (i-10)*3;\n@@ -101,3 +113,3 @@\n-            result[base]     = new Object[]{i + 44, 0, Set.of(STATIC)};\n-            result[base + 1] = new Object[]{i + 44, 0, Set.of(TRANSITIVE)};\n-            result[base + 2] = new Object[]{i + 44, 0, Set.of(STATIC, TRANSITIVE)};\n+            result.add(new Object[]{i + 44, 0, Set.of(STATIC)});\n+            result.add(new Object[]{i + 44, 0, Set.of(TRANSITIVE)});\n+            result.add(new Object[]{i + 44, 0, Set.of(STATIC, TRANSITIVE)});\n@@ -106,2 +118,10 @@\n-        result[unsupportedCount - 1] = new Object[]{FEATURE+1+44, 0, Set.of()};\n-        return result;\n+        result.add(new Object[]{FEATURE + 44,\n+                                PREVIEW_MINOR_VERSION,\n+                                Set.of(STATIC)});\n+        result.add(new Object[]{FEATURE + 44,\n+                                PREVIEW_MINOR_VERSION,\n+                                Set.of(STATIC, TRANSITIVE)});\n+\n+        result.add(new Object[]{FEATURE+1+44, 0, Set.of()});\n+\n+        return result.toArray(s -> new Object[s][]);\n","filename":"test\/jdk\/java\/lang\/module\/ClassFileVersionsTest.java","additions":44,"deletions":24,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -1549,1 +1549,0 @@\n-        bytecode = setClassFileVersion(ClassFile.JAVA_21_VERSION, -1, bytecode);\n@@ -1551,0 +1550,1 @@\n+        setClassFileVersion(bb, ClassFile.JAVA_21_VERSION, -1);\n@@ -1563,1 +1563,0 @@\n-        bytecode = setClassFileVersion(-1, ClassFile.PREVIEW_MINOR_VERSION, bytecode);\n@@ -1565,0 +1564,1 @@\n+        setClassFileVersion(bb, -1, ClassFile.PREVIEW_MINOR_VERSION);\n@@ -1574,10 +1574,16 @@\n-    private byte[] setClassFileVersion(int major, int minor, byte[] bytecode) {\n-        ClassFile cf = ClassFile.of();\n-        return cf.transformClass(cf.parse(bytecode),\n-                                 (builder, element) -> {\n-                                     switch (element) {\n-                                         case ClassFileVersion cfv -> builder.withVersion(major != (-1) ? major : cfv.majorVersion(),\n-                                                                                          minor != (-1) ? minor : cfv.minorVersion());\n-                                         default -> builder.with(element);\n-                                     }\n-                                 });\n+    \/**Change the classfile versions of the provided classfile to the provided\n+     * values.\n+     *\n+     * @param bytecode the classfile content to modify\n+     * @param major the major classfile version to set,\n+     *              -1 if the existing version should be kept\n+     * @param minor the minor classfile version to set,\n+     *              -1 if the existing version should be kept\n+     *\/\n+    private void setClassFileVersion(ByteBuffer bb, int major, int minor) {\n+        if (minor != (-1)) {\n+            bb.putShort(4, (short) minor);\n+        }\n+        if (major != (-1)) {\n+            bb.putShort(6, (short) major);\n+        }\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorTest.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"}]}