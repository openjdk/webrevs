{"files":[{"patch":"@@ -786,0 +786,1 @@\n+  TempNewSymbol::drain_cleanup_delay_queue();\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -46,0 +47,3 @@\n+  static Symbol* volatile _cleanup_delay_queue[];\n+  static volatile uint _cleanup_delay_index;\n+\n@@ -49,0 +53,2 @@\n+  static constexpr uint CLEANUP_DELAY_MAX_ENTRIES = 128;\n+\n@@ -56,0 +62,8 @@\n+      return;\n+    }\n+\n+    \/\/ Delay cleanup for temp symbols. Refcount is incremented while in\n+    \/\/ queue. But don't requeue existing entries, or entries that are held\n+    \/\/ elsewhere - it's a waste of effort.\n+    if (s != nullptr && s->refcount() == 1) {\n+      add_to_cleanup_delay_queue(s);\n@@ -79,0 +93,13 @@\n+  \/\/ Keep this symbol alive for some time to allow for reuse.\n+  \/\/ Temp symbols for the same string can often be created in quick succession,\n+  \/\/ and this queue allows them to be reused instead of churning.\n+  void add_to_cleanup_delay_queue(Symbol* sym) {\n+    sym->increment_refcount();\n+    STATIC_ASSERT(is_power_of_2(CLEANUP_DELAY_MAX_ENTRIES)); \/\/ allow modulo shortcut\n+    uint i = Atomic::add(&_cleanup_delay_index, 1u) & (CLEANUP_DELAY_MAX_ENTRIES - 1);\n+    Symbol* old = Atomic::xchg(&_cleanup_delay_queue[i], sym);\n+    if (old != nullptr) {\n+        old->decrement_refcount();\n+    }\n+  }\n+\n@@ -87,0 +114,9 @@\n+\n+  static void drain_cleanup_delay_queue() {\n+    for (uint i = 0; i < CLEANUP_DELAY_MAX_ENTRIES; i++) {\n+      Symbol* sym = Atomic::xchg(&_cleanup_delay_queue[i], (Symbol*) nullptr);\n+      if (sym != nullptr) {\n+          sym->decrement_refcount();\n+      }\n+    }\n+  }\n@@ -89,0 +125,5 @@\n+template<bool TEMP>\n+Symbol* volatile SymbolHandleBase<TEMP>::_cleanup_delay_queue[CLEANUP_DELAY_MAX_ENTRIES] = {};\n+template<bool TEMP>\n+volatile uint SymbolHandleBase<TEMP>::_cleanup_delay_index = 0;\n+\n","filename":"src\/hotspot\/share\/oops\/symbolHandle.hpp","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-  TempNewSymbol A = SymbolTable::new_symbol(\"abc2_8_2023_class\");\n-  TempNewSymbol D = SymbolTable::new_symbol(\"def2_8_2023_class\");\n+  Symbol* A = SymbolTable::new_symbol(\"abc2_8_2023_class\");\n+  Symbol* D = SymbolTable::new_symbol(\"def2_8_2023_class\");\n@@ -45,1 +45,1 @@\n-  TempNewSymbol interf = SymbolTable::new_symbol(\"interface2_8_2023_supername\");\n+  Symbol* interf = SymbolTable::new_symbol(\"interface2_8_2023_supername\");\n","filename":"test\/hotspot\/gtest\/classfile\/test_placeholders.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,8 @@\n+\/\/ Helper to avoid interference from the cleanup delay queue by draining it \n+\/\/ immediately after creation.\n+TempNewSymbol tmp(Symbol* sym) {\n+  TempNewSymbol t = sym;\n+  TempNewSymbol::drain_cleanup_delay_queue();\n+  return t;\n+}\n+\n@@ -39,1 +47,1 @@\n-  TempNewSymbol ss = abc;\n+  TempNewSymbol ss = tmp(abc);\n@@ -48,2 +56,2 @@\n-  TempNewSymbol s1 = efg;\n-  TempNewSymbol s2 = hij;\n+  TempNewSymbol s1 = tmp(efg);\n+  TempNewSymbol s2 = tmp(hij);\n@@ -68,1 +76,1 @@\n-  s3 = klm; \/\/ assignment\n+  s3 = tmp(klm); \/\/ assignment\n@@ -74,1 +82,1 @@\n-    TempNewSymbol s_inner = xyz;\n+    TempNewSymbol s_inner = tmp(xyz);\n@@ -142,0 +150,47 @@\n+\n+TEST_VM(SymbolTable, test_cleanup_delay) {\n+  \/\/ Check that new temp symbols have an extra refcount increment, which is then\n+  \/\/ decremented when the queue spills over.\n+\n+  TempNewSymbol s1 = SymbolTable::new_symbol(\"temp-s1\");\n+  ASSERT_EQ(s1->refcount(), 2) << \"TempNewSymbol refcount just created is 2\";\n+\n+  \/\/ Fill up the queue\n+  constexpr int symbol_name_length = 30;\n+  char symbol_name[symbol_name_length];\n+  for (uint i = 1; i < TempNewSymbol::CLEANUP_DELAY_MAX_ENTRIES; i++) {\n+    os::snprintf(symbol_name, symbol_name_length, \"temp-filler-%d\", i);\n+    TempNewSymbol s = SymbolTable::new_symbol(symbol_name);\n+    ASSERT_EQ(s->refcount(), 2) << \"TempNewSymbol refcount just created is 2\";\n+  }\n+\n+  \/\/ Add one more\n+  TempNewSymbol spillover = SymbolTable::new_symbol(\"temp-spillover\");\n+  ASSERT_EQ(spillover->refcount(), 2) << \"TempNewSymbol refcount just created is 2\";\n+\n+  \/\/ The first symbol should have been removed from the queue and decremented\n+  ASSERT_EQ(s1->refcount(), 1) << \"TempNewSymbol off queue refcount is 1\";\n+}\n+\n+TEST_VM(SymbolTable, test_cleanup_delay_drain) {\n+  \/\/ Fill up the queue\n+  constexpr int symbol_name_length = 30;\n+  char symbol_name[symbol_name_length];\n+  TempNewSymbol symbols[TempNewSymbol::CLEANUP_DELAY_MAX_ENTRIES] = {};\n+  for (uint i = 0; i < TempNewSymbol::CLEANUP_DELAY_MAX_ENTRIES; i++) {\n+    os::snprintf(symbol_name, symbol_name_length, \"temp-%d\", i);\n+    TempNewSymbol s = SymbolTable::new_symbol(symbol_name);\n+    symbols[i] = s;\n+  }\n+\n+  \/\/ While in the queue refcounts are incremented\n+  for (uint i = 0; i < TempNewSymbol::CLEANUP_DELAY_MAX_ENTRIES; i++) {\n+    ASSERT_EQ(symbols[i]->refcount(), 2) << \"TempNewSymbol refcount in queue is 2\";\n+  }\n+\n+  \/\/ Draining the queue should decrement the refcounts\n+  TempNewSymbol::drain_cleanup_delay_queue();\n+  for (uint i = 0; i < TempNewSymbol::CLEANUP_DELAY_MAX_ENTRIES; i++) {\n+    ASSERT_EQ(symbols[i]->refcount(), 1) << \"TempNewSymbol refcount after drain is 1\";\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/classfile\/test_symbolTable.cpp","additions":60,"deletions":5,"binary":false,"changes":65,"status":"modified"}]}