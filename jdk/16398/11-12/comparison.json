{"files":[{"patch":"@@ -789,1 +789,0 @@\n-  TempSymbolCleanupDelayer::drain_queue();\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,8 +34,0 @@\n-\/\/ Helper to avoid interference from the cleanup delay queue by draining it\n-\/\/ immediately after creation.\n-TempNewSymbol new_stable_temp_symbol(const char* name) {\n-  TempNewSymbol t = SymbolTable::new_symbol(name);\n-  TempSymbolCleanupDelayer::drain_queue();\n-  return t;\n-}\n-\n@@ -50,2 +42,2 @@\n-  TempNewSymbol A = new_stable_temp_symbol(\"abc2_8_2023_class\");\n-  TempNewSymbol D = new_stable_temp_symbol(\"def2_8_2023_class\");\n+  Symbol* A = SymbolTable::new_symbol(\"abc2_8_2023_class\");\n+  Symbol* D = SymbolTable::new_symbol(\"def2_8_2023_class\");\n@@ -53,1 +45,1 @@\n-  TempNewSymbol interf = new_stable_temp_symbol(\"interface2_8_2023_supername\");\n+  Symbol* interf = SymbolTable::new_symbol(\"interface2_8_2023_supername\");\n@@ -121,0 +113,5 @@\n+\n+  \/\/ clean up temporary symbols\n+  A->decrement_refcount();\n+  D->decrement_refcount();\n+  interf->decrement_refcount();\n","filename":"test\/hotspot\/gtest\/classfile\/test_placeholders.cpp","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"}]}