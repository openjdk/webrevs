{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.event.FileForceEvent;\n+\n@@ -53,0 +55,3 @@\n+    \/\/ file path\n+    private final String path;\n+\n@@ -58,0 +63,1 @@\n+                                      String path,\n@@ -63,0 +69,1 @@\n+        this.path = path;\n@@ -66,0 +73,1 @@\n+                                               String path,\n@@ -73,1 +81,1 @@\n-        return new SimpleAsynchronousFileChannelImpl(fdo, reading, writing, executor);\n+        return new SimpleAsynchronousFileChannelImpl(fdo, path, reading, writing, executor);\n@@ -154,2 +162,1 @@\n-    @Override\n-    public void force(boolean metaData) throws IOException {\n+    private void implForce(boolean metaData) throws IOException {\n@@ -172,0 +179,11 @@\n+    @Override\n+    public void force(boolean metaData) throws IOException {\n+        if (!FileForceEvent.enabled()) {\n+            implForce(metaData);\n+            return;\n+        }\n+        long start = FileForceEvent.timestamp();\n+        implForce(metaData);\n+        FileForceEvent.offer(start, path, metaData);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SimpleAsynchronousFileChannelImpl.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,1 +171,1 @@\n-        return SimpleAsynchronousFileChannelImpl.open(fdObj, flags.read, flags.write, pool);\n+        return SimpleAsynchronousFileChannelImpl.open(fdObj, path.toString(), flags.read, flags.write, pool);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixChannelFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,3 @@\n+    \/\/ file path\n+    private final String path;\n+\n@@ -82,0 +85,1 @@\n+                                               String path,\n@@ -89,0 +93,1 @@\n+        this.path = path;\n@@ -97,0 +102,1 @@\n+                                               String path,\n@@ -112,2 +118,1 @@\n-            return new\n-                WindowsAsynchronousFileChannelImpl(fdo, reading, writing, iocp, isDefaultIocp);\n+            return new WindowsAsynchronousFileChannelImpl(fdo, path, reading, writing, iocp, isDefaultIocp);\n@@ -199,2 +204,1 @@\n-    @Override\n-    public void force(boolean metaData) throws IOException {\n+    private void implForce(boolean metaData) throws IOException {\n@@ -209,0 +213,11 @@\n+    @Override\n+    public void force(boolean metaData) throws IOException {\n+        if (!FileForceEvent.enabled()) {\n+            implForce(metaData);\n+            return;\n+        }\n+        long start = FileForceEvent.timestamp();\n+        implForce(metaData);\n+        FileForceEvent.offer(start, path, metaData);\n+    }\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousFileChannelImpl.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,1 +215,1 @@\n-            return WindowsAsynchronousFileChannelImpl.open(fdObj, flags.read, flags.write, pool);\n+            return WindowsAsynchronousFileChannelImpl.open(fdObj, pathForWindows, flags.read, flags.write, pool);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsChannelFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.io;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.Events;\n+\n+import java.io.File;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.AsynchronousFileChannel;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.nio.file.StandardOpenOption.READ;\n+import static java.nio.file.StandardOpenOption.WRITE;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.event.io.TestAsynchronousFileChannelEvents\n+ *\/\n+public class TestAsynchronousFileChannelEvents {\n+\n+    public static void main(String[] args) throws Throwable {\n+        File blah = File.createTempFile(\"blah\", null);\n+        blah.deleteOnExit();\n+        String s = \"unremarkable data\";\n+        ByteBuffer data = ByteBuffer.allocate(s.length());\n+        data.put(s.getBytes());\n+\n+        try (Recording recording = new Recording();\n+             AsynchronousFileChannel ch = AsynchronousFileChannel.open(blah.toPath(), READ, WRITE)) {\n+\n+            List<IOEvent> expectedEvents = new ArrayList<>();\n+            recording.enable(IOEvent.EVENT_FILE_FORCE).withThreshold(Duration.ofMillis(0));\n+            recording.start();\n+\n+            data.flip();\n+            ch.write(data, 0);\n+\n+            \/\/ test force(boolean)\n+            ch.force(true);\n+            expectedEvents.add(IOEvent.createFileForceEvent(blah));\n+\n+            recording.stop();\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            IOHelper.verifyEqualsInOrder(events, expectedEvents);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestAsynchronousFileChannelEvents.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}