{"files":[{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.event;\n+\n+\/**\n+ * A JFR event for forced updates written to files.  This event is mirrored in\n+ * {@code jdk.jfr.events.FileForceEvent } where the event annotations are\n+ * provided.  Some of the methods are replaced by generated\n+ * methods when jfr is enabled.  Note that the order of the arguments of the\n+ * {@link #commit(long, long, String, boolean)} method\n+ * must be the same as the order of the fields.\n+ *\/\n+public class FileForceEvent extends Event {\n+\n+    \/\/ THE ORDER OF THE FOLLOWING FIELDS IS IMPORTANT!\n+    \/\/ The order must match the argument order of the generated commit method.\n+    public String path;\n+    public boolean metaData;\n+\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@link #commit(long, long, String, boolean)}.\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param path      the full pathname of the file\n+     * @param metaData  true if the file metadata is updated\n+     *\/\n+    public static void offer(long start, String path, boolean metaData) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            commit(start, duration, path, metaData);\n+        }\n+    }\n+\n+    \/**\n+     * Actually commit an event.  The implementation is generated automatically.\n+     * The order of the fields must be the same as the parameters in this method.\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @param path      the full pathname of the file\n+     * @param metaData  true if the file metadata is updated\n+     *\/\n+    public static void commit(long start, long duration, String path, boolean metaData) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    \/**\n+     * Determine if an event should be emitted.  The duration of the operation\n+     * must exceed some threshold in order to commit the event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @return  true if the event should be commited\n+     *\/\n+    public static boolean shouldCommit(long duration) {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Determine if this kind of event is enabled.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return true if this type of event is enabled, false otherwise\n+     *\/\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Fetch the current timestamp in nanoseconds.  This method is used\n+     * to determine the start and end of an operation.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return  the current timestamp value\n+     *\/\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0L;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/FileForceEvent.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -53,0 +53,1 @@\n+import jdk.internal.event.FileForceEvent;\n@@ -521,2 +522,1 @@\n-    @Override\n-    public void force(boolean metaData) throws IOException {\n+    private void implForce(boolean metaData) throws IOException {\n@@ -546,0 +546,11 @@\n+    @Override\n+    public void force(boolean metaData) throws IOException {\n+        if (!FileForceEvent.enabled()) {\n+            implForce(metaData);\n+            return;\n+        }\n+        long start = FileForceEvent.timestamp();\n+        implForce(metaData);\n+        FileForceEvent.offer(start, path, metaData);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.event.FileForceEvent;\n+\n@@ -53,0 +55,3 @@\n+    \/\/ file path\n+    private final String path;\n+\n@@ -58,0 +63,1 @@\n+                                      String path,\n@@ -63,0 +69,1 @@\n+        this.path = path;\n@@ -66,0 +73,1 @@\n+                                               String path,\n@@ -73,1 +81,1 @@\n-        return new SimpleAsynchronousFileChannelImpl(fdo, reading, writing, executor);\n+        return new SimpleAsynchronousFileChannelImpl(fdo, path, reading, writing, executor);\n@@ -154,2 +162,1 @@\n-    @Override\n-    public void force(boolean metaData) throws IOException {\n+    private void implForce(boolean metaData) throws IOException {\n@@ -172,0 +179,11 @@\n+    @Override\n+    public void force(boolean metaData) throws IOException {\n+        if (!FileForceEvent.enabled()) {\n+            implForce(metaData);\n+            return;\n+        }\n+        long start = FileForceEvent.timestamp();\n+        implForce(metaData);\n+        FileForceEvent.offer(start, path, metaData);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SimpleAsynchronousFileChannelImpl.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,1 +171,1 @@\n-        return SimpleAsynchronousFileChannelImpl.open(fdObj, flags.read, flags.write, pool);\n+        return SimpleAsynchronousFileChannelImpl.open(fdObj, path.toString(), flags.read, flags.write, pool);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixChannelFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,3 @@\n+    \/\/ file path\n+    private final String path;\n+\n@@ -82,0 +85,1 @@\n+                                               String path,\n@@ -89,0 +93,1 @@\n+        this.path = path;\n@@ -97,0 +102,1 @@\n+                                               String path,\n@@ -112,2 +118,1 @@\n-            return new\n-                WindowsAsynchronousFileChannelImpl(fdo, reading, writing, iocp, isDefaultIocp);\n+            return new WindowsAsynchronousFileChannelImpl(fdo, path, reading, writing, iocp, isDefaultIocp);\n@@ -199,2 +204,1 @@\n-    @Override\n-    public void force(boolean metaData) throws IOException {\n+    private void implForce(boolean metaData) throws IOException {\n@@ -209,0 +213,11 @@\n+    @Override\n+    public void force(boolean metaData) throws IOException {\n+        if (!FileForceEvent.enabled()) {\n+            implForce(metaData);\n+            return;\n+        }\n+        long start = FileForceEvent.timestamp();\n+        implForce(metaData);\n+        FileForceEvent.offer(start, path, metaData);\n+    }\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsAsynchronousFileChannelImpl.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,1 +215,1 @@\n-            return WindowsAsynchronousFileChannelImpl.open(fdObj, flags.read, flags.write, pool);\n+            return WindowsAsynchronousFileChannelImpl.open(fdObj, pathForWindows, flags.read, flags.write, pool);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsChannelFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-    public static final EventConfiguration FILE_FORCE = JVMSupport.getConfiguration(FileForceEvent.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/EventConfigurations.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.jfr.internal.MirrorEvent;\n@@ -38,0 +39,1 @@\n+@MirrorEvent(className = \"jdk.internal.event.FileForceEvent\")\n@@ -51,3 +53,0 @@\n-    public static void commit(long start, long duration, String path, boolean metaData) {\n-        \/\/ Generated\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/FileForceEvent.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import jdk.jfr.events.FileForceEvent;\n@@ -53,0 +54,1 @@\n+        FileForceEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MirrorEvents.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,19 +48,0 @@\n-    @JIInstrumentationMethod\n-    public void force(boolean metaData) throws IOException {\n-        EventConfiguration eventConfiguration = EventConfigurations.FILE_FORCE;\n-        if (!eventConfiguration.isEnabled()) {\n-            force(metaData);\n-            return;\n-        }\n-        long start = 0;\n-        try {\n-            start = EventConfiguration.timestamp();\n-            force(metaData);\n-        } finally {\n-            long duration = EventConfiguration.timestamp() - start;\n-            if (eventConfiguration.shouldCommit(duration)) {\n-                FileForceEvent.commit(start, duration, path, metaData);\n-            }\n-        }\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/FileChannelImplInstrumentor.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import jdk.jfr.events.FileForceEvent;\n@@ -47,2 +46,0 @@\n-import jdk.jfr.events.SocketReadEvent;\n-import jdk.jfr.events.SocketWriteEvent;\n@@ -62,1 +59,0 @@\n-        FileForceEvent.class,\n@@ -65,2 +61,0 @@\n-        SocketReadEvent.class,\n-        SocketWriteEvent.class,\n@@ -75,0 +69,1 @@\n+        jdk.internal.event.FileForceEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.io;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.Events;\n+\n+import java.io.File;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.AsynchronousFileChannel;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.nio.file.StandardOpenOption.READ;\n+import static java.nio.file.StandardOpenOption.WRITE;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.event.io.TestAsynchronousFileChannelEvents\n+ *\/\n+public class TestAsynchronousFileChannelEvents {\n+\n+    public static void main(String[] args) throws Throwable {\n+        File blah = File.createTempFile(\"blah\", null);\n+        blah.deleteOnExit();\n+        String s = \"unremarkable data\";\n+        ByteBuffer data = ByteBuffer.allocate(s.length());\n+        data.put(s.getBytes());\n+\n+        try (Recording recording = new Recording();\n+             AsynchronousFileChannel ch = AsynchronousFileChannel.open(blah.toPath(), READ, WRITE)) {\n+\n+            List<IOEvent> expectedEvents = new ArrayList<>();\n+            recording.enable(IOEvent.EVENT_FILE_FORCE).withThreshold(Duration.ofMillis(0));\n+            recording.start();\n+\n+            data.flip();\n+            ch.write(data, 0).get();\n+\n+            \/\/ test force(boolean)\n+            ch.force(true);\n+            expectedEvents.add(IOEvent.createFileForceEvent(blah));\n+\n+            recording.stop();\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            IOHelper.verifyEqualsInOrder(events, expectedEvents);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestAsynchronousFileChannelEvents.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}