{"files":[{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4309915\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Check that Antialiased text drawn on a BYTE_GRAY image\n+ *              resolves the color correctly\n+ * @run main\/manual GrayAATextTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.RenderingHints;\n+import java.awt.image.BufferedImage;\n+\n+public class GrayAATextTest extends Panel {\n+\n+    public static final int WIDTH = 600;\n+    public static final int HEIGHT = 200;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        All of the strings in a given column should be drawn\n+        in the same color.  If the bug is present, then the\n+        Antialiased strings will all be of a fixed color that\n+        is not the same as the other strings in their column.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"GrayAATextTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int)INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(GrayAATextTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public void paint(Graphics g) {\n+        BufferedImage bi = new BufferedImage(WIDTH, HEIGHT,\n+                                             BufferedImage.TYPE_BYTE_GRAY);\n+        Graphics2D g2d = bi.createGraphics();\n+        g2d.setFont(new Font(\"Helvetica\", Font.PLAIN, 24));\n+        g2d.setColor(Color.white);\n+        g2d.fillRect(0, 0, WIDTH \/ 2, HEIGHT);\n+        drawText(g2d, Color.black, \"Black\", 25);\n+        drawText(g2d, Color.lightGray, \"Light Gray\", 175);\n+        g2d.setColor(Color.black);\n+        g2d.fillRect(WIDTH \/ 2, 0, WIDTH \/ 2, HEIGHT);\n+        drawText(g2d, Color.white, \"White\", 325);\n+        drawText(g2d, Color.lightGray, \"Light Gray\", 475);\n+        g2d.dispose();\n+        g.drawImage(bi, 0, 0, null);\n+    }\n+\n+    public void drawText(Graphics2D g2d, Color c, String colorname, int x) {\n+        g2d.setColor(c);\n+        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                             RenderingHints.VALUE_ANTIALIAS_OFF);\n+        g2d.drawString(colorname, x, 50);\n+        g2d.drawString(\"Aliased\", x, 100);\n+        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                             RenderingHints.VALUE_ANTIALIAS_ON);\n+        g2d.drawString(\"Antialiased\", x, 150);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(WIDTH, HEIGHT);\n+    }\n+\n+    private static Frame createTestUI() {\n+        Frame f = new Frame(\"GrayAATextTest Frame\");\n+        f.add(new GrayAATextTest());\n+        f.setSize(WIDTH, HEIGHT);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/BufferedImage\/GrayAATextTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4243044\n+ * @summary This test should show two windows filled with checker\n+ *          board pattern. The transparency should runs from left to right from\n+ *          total transparent to total opaque.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual GrayAlpha\n+ *\/\n+\n+import java.util.List;\n+import java.awt.Frame;\n+import java.awt.color.ColorSpace;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorModel;\n+import java.awt.image.ComponentColorModel;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.Raster;\n+import java.awt.image.WritableRaster;\n+import java.awt.Point;\n+import java.awt.Panel;\n+import java.awt.Transparency;\n+import java.awt.Window;\n+\n+public class GrayAlpha extends Panel {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test should show two windows filled with checker board\n+        vpattern. The transparency should runs from left to right from\n+        totally transparent to totally opaque. If either the pattern or\n+        the transparency is not shown correctly, click Fail, otherwise\n+        click Pass.\"\"\";\n+\n+    BufferedImage bi;\n+    AffineTransform identityTransform = new AffineTransform();\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"GrayAlpha Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int)INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(GrayAlpha::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+\n+    public GrayAlpha(int width, int height,\n+                     boolean hasAlpha, boolean isAlphaPremultiplied,\n+                     boolean useRGB) {\n+        boolean isAlphaPremuliplied = true;\n+        int bands = useRGB ? 3 : 1;\n+        bands = hasAlpha ? bands + 1 : bands;\n+\n+        ColorSpace cs = useRGB ?\n+            ColorSpace.getInstance(ColorSpace.CS_sRGB) :\n+            ColorSpace.getInstance(ColorSpace.CS_GRAY);\n+        int transparency = hasAlpha ?\n+            Transparency.TRANSLUCENT : Transparency.OPAQUE;\n+        int[] bits = new int[bands];\n+        for (int i = 0; i < bands; i++) {\n+            bits[i] = 8;\n+        }\n+\n+        ColorModel cm = new ComponentColorModel(cs,\n+                                                bits,\n+                                                hasAlpha,\n+                                                isAlphaPremultiplied,\n+                                                transparency,\n+                                                DataBuffer.TYPE_BYTE);\n+        WritableRaster wr =\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                                           width, height, bands,\n+                                           new Point(0, 0));\n+\n+        for (int b = 0; b < bands; b++) {\n+            for (int y = 0; y < height; y++) {\n+                for (int x = 0; x < width; x++) {\n+                    int s;\n+\n+                    if (b != bands - 1 || !hasAlpha) {\n+                        \/\/ Gray band(s), fill with a checkerboard pattern\n+                        if (((x \/ 10) % 2) == ((y \/ 10) % 2)) {\n+                            s = 255;\n+                        } else {\n+                            s = 0;\n+                        }\n+                        if (isAlphaPremultiplied) {\n+                            int alpha = (x*255)\/(width - 1);\n+                            s = (s*alpha)\/255;\n+                        }\n+                    } else {\n+                        \/\/ Alpha band, increase opacity left to right\n+                        s = (x*255)\/(width - 1);\n+                    }\n+\n+                    wr.setSample(x, y, b, s);\n+                }\n+            }\n+        }\n+\n+        this.bi = new BufferedImage(cm, wr, isAlphaPremultiplied, null);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(bi.getWidth(), bi.getHeight());\n+    }\n+\n+    public void paint(Graphics g) {\n+        if (bi != null) {\n+            ((Graphics2D)g).drawImage(bi, 0, 0, null);\n+        }\n+    }\n+\n+    public static Frame makeFrame(String title,\n+                                 int x, int y, int width, int height,\n+                                 boolean hasAlpha,\n+                                 boolean isAlphaPremultiplied,\n+                                 boolean useRGB) {\n+        Frame f = new Frame(title);\n+        f.add(new GrayAlpha(width, height,\n+                            hasAlpha, isAlphaPremultiplied, useRGB));\n+        f.pack();\n+        f.setLocation(x, y);\n+        return f;\n+    }\n+\n+    private static List<Window> createTestUI() {\n+        int width = 200;\n+        int height = 200;\n+\n+        int x = 100;\n+        int y = 100;\n+\n+        Frame f1 = makeFrame(\"Gray (non-premultiplied)\",\n+                  x, y, width, height,\n+                  true, false, false);\n+        x += width + 20;\n+\n+        Frame f2 = makeFrame(\"Gray (premultiplied)\",\n+                  x, y, width, height,\n+                  true, true, false);\n+\n+        return List.of(f1, f2);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/GrayAlpha.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4259548\n+ * @summary tests that MemoryImageSource correctly handles images with offsets\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ImageOffsetTest\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.Panel;\n+import java.awt.Toolkit;\n+import java.awt.image.ColorModel;\n+import java.awt.image.IndexColorModel;\n+import java.awt.image.MemoryImageSource;\n+\n+public class ImageOffsetTest {\n+\n+    static int height = 100;\n+    static int width  = 100;\n+    static int levels = 3;\n+    static IndexColorModel cm;\n+    static Image image;\n+    static boolean first = true;\n+\n+    static byte[] db = new byte[height * width * levels] ;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+         If on the appeared 'Test frame' all color squares are of one color\n+         test failed, otherwise it's passed.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                      .title(\"ImageOffsetTest\")\n+                      .instructions(INSTRUCTIONS)\n+                      .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                      .columns(35)\n+                      .testUI(ImageOffsetTest::createUI)\n+                      .build()\n+                      .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame frame = new Frame(\"ImageOffset Frame\");\n+        frame.add(new Panel() {\n+            public void paint(Graphics g) {\n+                for ( int i=0 ; i<3 ; i++ ) {\n+                    g.drawImage(\n+                        generateBuggyImage(i * width * height), 10 + i * 110, 10, null);\n+                }\n+            }\n+        });\n+        frame.setSize(400, 200);\n+        frame.setLocation(300, 200);\n+        createColorModel();\n+        int l = 0;\n+        for (int k = 0; k < levels; k++) {\n+            for (int i = 0; i < height; i++) {\n+                for (int j = 0; j < width; j++) {\n+                    if( k == 0) {\n+                        db[l] = (byte)(70 & 0xff) ;\n+                    }\n+                    if (k == 1) {\n+                        db[l] = (byte)(150 & 0xff) ;\n+                    }\n+                    if (k == 2) {\n+                        db[l] = (byte)(230 & 0xff) ;\n+                    }\n+                    l++ ;\n+                }\n+            }\n+        }\n+        return frame;\n+    }\n+\n+    private static void createColorModel() {\n+        byte[] red = new byte[256];\n+        byte[] green = new byte[256];\n+        byte[] blue = new byte[256];\n+\n+        for (int i = 0; i < 256; i++) {\n+            red[i]   = (byte)(i & 0xff);\n+            \/\/green[i] = (byte)( i & 0xff ) ;\n+            blue[i]  = (byte)( i & 0xff ) ;\n+            \/\/commented out green so I could get purple\n+        }\n+\n+        cm = new IndexColorModel( 8, 256, red, green, blue ) ;\n+    }\n+\n+    private static Image generateBuggyImage(int offset) {\n+        \/\/ Initialize the database, Three slices, different shades of grey\n+        \/\/ Here the image is created using the offset,\n+        return Toolkit.getDefaultToolkit().createImage(\n+                new MemoryImageSource(width, height, (ColorModel)cm,\n+                                      db, offset, width));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/ImageOffsetTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4090743\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Make sure that there is no garbage drawn on the rotated image\n+ * @run main\/manual TransformImage\n+ *\/\n+\n+import java.net.URL;\n+import java.net.MalformedURLException;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.geom.AffineTransform;\n+import java.awt.Image;\n+import java.awt.image.ImageObserver;\n+import java.awt.MediaTracker;\n+import java.awt.Toolkit;\n+\n+public class TransformImage extends Canvas  {\n+    static Image image;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            The rotated image should be drawn without garbage.\"\"\";\n+\n+    public static void main(String[] argv) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"TransformImage Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(5)\n+                .columns(35)\n+                .testUI(TransformImage::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createTestUI() {\n+        Frame f = new Frame();\n+        String dir = System.getProperty(\"test.src\");\n+        String sep = System.getProperty(\"file.separator\");\n+        if (dir == null) {\n+            dir = \".\";\n+        }\n+        image = Toolkit.getDefaultToolkit().getImage(dir+sep+\"duke.gif\");\n+        f.add(new TransformImage());\n+\n+        f.pack();\n+        return f;\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension (256, 256);\n+    }\n+\n+    public Dimension getMinimumSize() {\n+        return getPreferredSize();\n+    }\n+\n+    public void paint(Graphics g) {\n+        int w, h;\n+        java.awt.Graphics2D g2d = (Graphics2D) g;\n+        AffineTransform at = new AffineTransform();\n+\n+        MediaTracker mt = new MediaTracker(this);\n+        mt.addImage(image, 0);\n+        try {\n+            mt.waitForAll();\n+        } catch (InterruptedException e) {\n+            System.err.println(\"can't track\");\n+            return;\n+        }\n+        w = image.getWidth(this);\n+        h = image.getHeight(this);\n+        g2d.drawImage(image, 0, 0, this);\n+        g2d.drawRect(0, 0, w, h);\n+\n+        double rad = .5;\n+        at.rotate(-rad);\n+        g2d.setTransform(at);\n+        g2d.drawImage(image, 0, 100, this);\n+        g2d.drawRect(0, 100, w, h);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/TransformImage.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/awt\/image\/duke.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/awt\/image\/VolatileImage\/duke.gif","status":"copied"}]}