{"files":[{"patch":"@@ -165,1 +165,1 @@\n-    $1_$2_CDS_DUMP_FLAGS += -Xlog:cds+map*=trace:file=$$(JDK_IMAGE_DIR)\/$$($1_$2_CDS_ARCHIVE).cdsmap:none:filesize=0\n+    $1_$2_CDS_DUMP_FLAGS += -Xlog:aot+map*=trace:file=$$(JDK_IMAGE_DIR)\/$$($1_$2_CDS_ARCHIVE).cdsmap:none:filesize=0\n","filename":"make\/Images.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"cds\/aotClassLinker.hpp\"\n@@ -28,0 +27,2 @@\n+#include \"cds\/aotClassLinker.hpp\"\n+#include \"cds\/aotLogging.hpp\"\n@@ -158,1 +159,1 @@\n-      if (log_is_enabled(Debug, cds)) {\n+      if (aot_log_is_enabled(Debug, aot)) {\n@@ -160,1 +161,1 @@\n-        log_debug(cds)(\"Skipping %s: %s class\", k->name()->as_C_string(),\n+        aot_log_debug(aot)(\"Skipping %s: %s class\", k->name()->as_C_string(),\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-  \/\/    java -XX:AOTMode=create -Xlog:cds -XX:AOTCache=jc.aot -XX:AOTConfiguration=jc.aotconfig\n+  \/\/    java -XX:AOTMode=create -Xlog:aot -XX:AOTCache=jc.aot -XX:AOTConfiguration=jc.aotconfig\n@@ -353,1 +353,1 @@\n-    if (log_is_enabled(Info, cds, init)) {\n+    if (log_is_enabled(Info, aot, init)) {\n@@ -355,1 +355,1 @@\n-      log_info(cds, init)(\"Calling %s::runtimeSetup()\", ik->external_name());\n+      log_info(aot, init)(\"Calling %s::runtimeSetup()\", ik->external_name());\n@@ -378,1 +378,1 @@\n-    log_info(cds)(\"Debug build only: force initialization of AOTInitTestClass %s\", AOTInitTestClass);\n+    log_info(aot)(\"Debug build only: force initialization of AOTInitTestClass %s\", AOTInitTestClass);\n","filename":"src\/hotspot\/share\/cds\/aotClassInitializer.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -253,1 +254,1 @@\n-    log_error(cds)(\"Unable to open file %s.\", path);\n+    aot_log_error(aot)(\"Unable to open file %s.\", path);\n@@ -362,1 +363,1 @@\n-        log_warning(cds)(\"Warning: Duplicate name in Manifest: %s.\\n\"\n+        log_warning(aot)(\"Warning: Duplicate name in Manifest: %s.\\n\"\n@@ -395,1 +396,1 @@\n-      log_warning(cds)(\"Required classpath entry does not exist: %s\", runtime_path);\n+      aot_log_warning(aot)(\"Required classpath entry does not exist: %s\", runtime_path);\n@@ -400,1 +401,1 @@\n-      log_warning(cds)(\"'%s' must not exist\", runtime_path);\n+      aot_log_warning(aot)(\"'%s' must not exist\", runtime_path);\n@@ -404,1 +405,1 @@\n-      log_warning(cds)(\"'%s' must be a file\", runtime_path);\n+      aot_log_warning(aot)(\"'%s' must be a file\", runtime_path);\n@@ -408,1 +409,1 @@\n-      log_warning(cds)(\"directory is not empty: '%s'\", runtime_path);\n+      aot_log_warning(aot)(\"directory is not empty: '%s'\", runtime_path);\n@@ -413,1 +414,1 @@\n-      log_warning(cds)(\"'%s' must not exist\", runtime_path);\n+      aot_log_warning(aot)(\"'%s' must not exist\", runtime_path);\n@@ -415,1 +416,1 @@\n-        log_error(cds)(\"CDS archive has aot-linked classes. It cannot be used because the \"\n+        aot_log_error(aot)(\"CDS archive has aot-linked classes. It cannot be used because the \"\n@@ -419,1 +420,1 @@\n-        log_warning(cds)(\"Archived non-system classes are disabled because the \"\n+        aot_log_warning(aot)(\"Archived non-system classes are disabled because the \"\n@@ -428,1 +429,1 @@\n-      log_warning(cds)(\"'%s' must be a directory\", runtime_path);\n+      aot_log_warning(aot)(\"'%s' must be a directory\", runtime_path);\n@@ -434,1 +435,1 @@\n-      log_warning(cds)(\"This file is not the one used while building the shared archive file: '%s'%s%s\",\n+      aot_log_warning(aot)(\"This file is not the one used while building the shared archive file: '%s'%s%s\",\n@@ -692,1 +693,1 @@\n-        log_error(cds)(\"Error: non-empty directory '%s'\", cs->path());\n+        aot_log_error(aot)(\"Error: non-empty directory '%s'\", cs->path());\n@@ -717,1 +718,1 @@\n-        log_warning(cds)(\"class %s cannot be archived because it was not defined from %s as claimed\",\n+        aot_log_warning(aot)(\"class %s cannot be archived because it was not defined from %s as claimed\",\n@@ -779,1 +780,1 @@\n-        log_warning(cds)(\"%s classpath has fewer elements than expected\", which);\n+        aot_log_warning(aot)(\"%s classpath has fewer elements than expected\", which);\n@@ -787,1 +788,1 @@\n-        log_warning(cds)(\"The name of %s classpath [%d] does not match: expected '%s', got '%s'\",\n+        aot_log_warning(aot)(\"The name of %s classpath [%d] does not match: expected '%s', got '%s'\",\n@@ -803,1 +804,1 @@\n-      log_warning(cds)(\"boot classpath is longer than expected\");\n+      aot_log_warning(aot)(\"boot classpath is longer than expected\");\n@@ -872,1 +873,1 @@\n-        log_warning(cds)(\"module path has fewer elements than expected\");\n+        aot_log_warning(aot)(\"module path has fewer elements than expected\");\n@@ -1024,1 +1025,1 @@\n-        log_error(cds)(\"class path and\/or module path are not compatible with the \"\n+        aot_log_error(aot)(\"class path and\/or module path are not compatible with the \"\n@@ -1028,1 +1029,1 @@\n-        log_error(cds)(\"%s%s\", mismatch_msg, hint_msg);\n+        aot_log_error(aot)(\"%s%s\", mismatch_msg, hint_msg);\n","filename":"src\/hotspot\/share\/cds\/aotClassLocation.cpp","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-        log_trace(cds, resolve)(\"Resolved class  [%3d] %s -> %s\", cp_index, ik->external_name(),\n+        log_trace(aot, resolve)(\"Resolved class  [%3d] %s -> %s\", cp_index, ik->external_name(),\n@@ -295,1 +295,1 @@\n-  if (log_is_enabled(Trace, cds, resolve)) {\n+  if (log_is_enabled(Trace, aot, resolve)) {\n@@ -300,1 +300,1 @@\n-    log_trace(cds, resolve)(\"%s %s [%3d] %s -> %s.%s:%s\",\n+    log_trace(aot, resolve)(\"%s %s [%3d] %s -> %s.%s:%s\",\n@@ -329,1 +329,1 @@\n-      if (log_is_enabled(Trace, cds, resolve)) {\n+      if (log_is_enabled(Trace, aot, resolve)) {\n@@ -331,1 +331,1 @@\n-        log_trace(cds, resolve)(\"%s indy   [%3d] %s\",\n+        log_trace(aot, resolve)(\"%s indy   [%3d] %s\",\n@@ -353,1 +353,1 @@\n-        if (log_is_enabled(Warning, cds, resolve)) {\n+        if (log_is_enabled(Warning, aot, resolve)) {\n@@ -355,1 +355,1 @@\n-          log_warning(cds, resolve)(\"Cannot aot-resolve Lambda proxy because %s is excluded\", k->external_name());\n+          log_warning(aot, resolve)(\"Cannot aot-resolve Lambda proxy because %s is excluded\", k->external_name());\n@@ -386,1 +386,1 @@\n-  if (log_is_enabled(Debug, cds, resolve)) {\n+  if (log_is_enabled(Debug, aot, resolve)) {\n@@ -388,1 +388,1 @@\n-    log_debug(cds, resolve)(\"%s aot-resolve Lambda proxy of interface type %s\",\n+    log_debug(aot, resolve)(\"%s aot-resolve Lambda proxy of interface type %s\",\n@@ -402,1 +402,1 @@\n-  if (log_is_enabled(Debug, cds, resolve)) {\n+  if (log_is_enabled(Debug, aot, resolve)) {\n@@ -404,1 +404,1 @@\n-    log_debug(cds, resolve)(\"Checking MethodType for LambdaMetafactory BSM arg %d: %s\", arg_i, sig->as_C_string());\n+    log_debug(aot, resolve)(\"Checking MethodType for LambdaMetafactory BSM arg %d: %s\", arg_i, sig->as_C_string());\n@@ -418,1 +418,1 @@\n-  if (log_is_enabled(Debug, cds, resolve)) {\n+  if (log_is_enabled(Debug, aot, resolve)) {\n@@ -420,1 +420,1 @@\n-    log_debug(cds, resolve)(\"Checking MethodType of MethodHandle for LambdaMetafactory BSM arg %d: %s\", arg_i, sig->as_C_string());\n+    log_debug(aot, resolve)(\"Checking MethodType of MethodHandle for LambdaMetafactory BSM arg %d: %s\", arg_i, sig->as_C_string());\n@@ -455,1 +455,1 @@\n-    if (log_is_enabled(Debug, cds, resolve)) {\n+    if (log_is_enabled(Debug, aot, resolve)) {\n@@ -457,1 +457,1 @@\n-      log_debug(cds, resolve)(\"Checking StringConcatFactory callsite signature [%d]: %s\", cp_index, factory_type_sig->as_C_string());\n+      log_debug(aot, resolve)(\"Checking StringConcatFactory callsite signature [%d]: %s\", cp_index, factory_type_sig->as_C_string());\n@@ -507,1 +507,1 @@\n-    if (log_is_enabled(Debug, cds, resolve)) {\n+    if (log_is_enabled(Debug, aot, resolve)) {\n@@ -509,1 +509,1 @@\n-      log_debug(cds, resolve)(\"Checking lambda callsite signature [%d]: %s\", cp_index, factory_type_sig->as_C_string());\n+      log_debug(aot, resolve)(\"Checking lambda callsite signature [%d]: %s\", cp_index, factory_type_sig->as_C_string());\n","filename":"src\/hotspot\/share\/cds\/aotConstantPoolResolver.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-    log_error(cds)(\"Out of memory. Please run with a larger Java heap, current MaxHeapSize = \"\n+    log_error(aot)(\"Out of memory. Please run with a larger Java heap, current MaxHeapSize = \"\n@@ -93,1 +93,1 @@\n-    log_error(cds)(\"%s: %s\", current->pending_exception()->klass()->external_name(),\n+    log_error(aot)(\"%s: %s\", current->pending_exception()->klass()->external_name(),\n@@ -202,3 +202,3 @@\n-          log_error(cds)(\"Unable to resolve %s class from CDS archive: %s\", category_name, ik->external_name());\n-          log_error(cds)(\"Expected: \" INTPTR_FORMAT \", actual: \" INTPTR_FORMAT, p2i(ik), p2i(actual));\n-          log_error(cds)(\"JVMTI class retransformation is not supported when archive was generated with -XX:+AOTClassLinking.\");\n+          log_error(aot)(\"Unable to resolve %s class from %s: %s\", category_name, CDSConfig::type_of_archive_being_loaded(), ik->external_name());\n+          log_error(aot)(\"Expected: \" INTPTR_FORMAT \", actual: \" INTPTR_FORMAT, p2i(ik), p2i(actual));\n+          log_error(aot)(\"JVMTI class retransformation is not supported when archive was generated with -XX:+AOTClassLinking.\");\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1158,1 +1158,1 @@\n-    log_debug(cds, map)(_LOG_PREFIX \" %s\",\n+    log_debug(aot, map)(_LOG_PREFIX \" %s\",\n@@ -1163,1 +1163,1 @@\n-    log_debug(cds, map)(_LOG_PREFIX \" %s\",\n+    log_debug(aot, map)(_LOG_PREFIX \" %s\",\n@@ -1206,1 +1206,1 @@\n-          log_debug(cds, map)(_LOG_PREFIX \" %s\", p2i(runtime_dest), type_name, bytes,\n+          log_debug(aot, map)(_LOG_PREFIX \" %s\", p2i(runtime_dest), type_name, bytes,\n@@ -1211,1 +1211,1 @@\n-        log_debug(cds, map)(_LOG_PREFIX, p2i(runtime_dest), type_name, bytes);\n+        log_debug(aot, map)(_LOG_PREFIX, p2i(runtime_dest), type_name, bytes);\n@@ -1221,1 +1221,1 @@\n-      log_debug(cds, map)(PTR_FORMAT \": @@ Misc data %zu bytes\",\n+      log_debug(aot, map)(PTR_FORMAT \": @@ Misc data %zu bytes\",\n@@ -1245,1 +1245,1 @@\n-    log_info(cds, map)(\"[%-18s \" PTR_FORMAT \" - \" PTR_FORMAT \" %9zu bytes]\",\n+    log_info(aot, map)(\"[%-18s \" PTR_FORMAT \" - \" PTR_FORMAT \" %9zu bytes]\",\n@@ -1256,1 +1256,1 @@\n-    LogStreamHandle(Info, cds, map) st;\n+    LogStreamHandle(Info, aot, map) st;\n@@ -1365,1 +1365,1 @@\n-    LogStreamHandle(Trace, cds, map, oops) st;\n+    LogStreamHandle(Trace, aot, map, oops) st;\n@@ -1433,1 +1433,1 @@\n-    LogStreamHandle(Trace, cds, map, oops) st;\n+    LogStreamHandle(Trace, aot, map, oops) st;\n@@ -1494,1 +1494,1 @@\n-    LogStreamHandle(Trace, cds, map) lsh;\n+    LogStreamHandle(Trace, aot, map) lsh;\n@@ -1507,1 +1507,1 @@\n-    LogStreamHandle(Info, cds, map) lsh;\n+    LogStreamHandle(Info, aot, map) lsh;\n@@ -1517,1 +1517,1 @@\n-    log_info(cds, map)(\"%s CDS archive map for %s\", CDSConfig::is_dumping_static_archive() ? \"Static\" : \"Dynamic\", mapinfo->full_path());\n+    log_info(aot, map)(\"%s CDS archive map for %s\", CDSConfig::is_dumping_static_archive() ? \"Static\" : \"Dynamic\", mapinfo->full_path());\n@@ -1541,1 +1541,1 @@\n-    log_info(cds, map)(\"[End of CDS archive map]\");\n+    log_info(aot, map)(\"[End of CDS archive map]\");\n@@ -1583,1 +1583,1 @@\n-  if (log_is_enabled(Info, cds, map)) {\n+  if (log_is_enabled(Info, aot, map)) {\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-  log_info(cds)(\"patching heap embedded pointers: narrowOop 0x%8x -> 0x%8x\",\n+  log_info(aot)(\"patching heap embedded pointers: narrowOop 0x%8x -> 0x%8x\",\n@@ -178,1 +178,1 @@\n-    log_info(cds)(\"CDS heap data relocation quick delta = 0x%x\", quick_delta);\n+    log_info(aot)(\"heap data relocation quick delta = 0x%x\", quick_delta);\n@@ -180,1 +180,1 @@\n-      log_info(cds)(\"CDS heap data relocation unnecessary, quick_delta = 0\");\n+      log_info(aot)(\"heap data relocation unnecessary, quick_delta = 0\");\n@@ -186,1 +186,1 @@\n-    log_info(cds)(\"CDS heap data quick relocation not possible\");\n+    log_info(aot)(\"heap data quick relocation not possible\");\n@@ -304,1 +304,1 @@\n-    log_warning(cds)(\"Loading of heap region %d has failed. Archived objects are disabled\", loaded_region->_region_index);\n+    log_warning(aot)(\"Loading of heap region %d has failed. Archived objects are disabled\", loaded_region->_region_index);\n@@ -309,1 +309,1 @@\n-  log_info(cds)(\"Loaded heap    region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT\n+  log_info(aot)(\"Loaded heap    region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-  log_info(cds)(\"sorting heap objects\");\n+  log_info(aot)(\"sorting heap objects\");\n@@ -306,1 +306,1 @@\n-  log_info(cds)(\"computed ranks\");\n+  log_info(aot)(\"computed ranks\");\n@@ -308,1 +308,1 @@\n-  log_info(cds)(\"sorting heap objects done\");\n+  log_info(aot)(\"sorting heap objects done\");\n@@ -333,1 +333,1 @@\n-  log_info(cds)(\"Size of heap region = %zu bytes, %d objects, %d roots, %d native ptrs\",\n+  log_info(aot)(\"Size of heap region = %zu bytes, %d objects, %d roots, %d native ptrs\",\n@@ -639,1 +639,1 @@\n-  log_info(cds)(\"%s = %7zu ... %7zu (%3zu%% ... %3zu%% = %3zu%%)\", which,\n+  log_info(aot)(\"%s = %7zu ... %7zu (%3zu%% ... %3zu%% = %3zu%%)\", which,\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -171,1 +172,1 @@\n-      DEBUG_ONLY(log_trace(cds, reloc)(\"Clearing pointer [\" PTR_FORMAT  \"] -> null @ %9zu\", p2i(ptr_loc), offset));\n+      DEBUG_ONLY(log_trace(aot, reloc)(\"Clearing pointer [\" PTR_FORMAT  \"] -> null @ %9zu\", p2i(ptr_loc), offset));\n@@ -210,1 +211,1 @@\n-      log_error(cds)(\"Out of memory in the CDS archive: Please reduce the number of shared classes.\");\n+      aot_log_error(aot)(\"Out of memory in the CDS archive: Please reduce the number of shared classes.\");\n@@ -236,1 +237,1 @@\n-    log_error(cds)(\"Failed to expand shared space to %zu bytes\",\n+    aot_log_error(aot)(\"Failed to expand shared space to %zu bytes\",\n@@ -247,1 +248,1 @@\n-  log_debug(cds)(\"Expanding %s spaces by %7zu bytes [total %9zu bytes ending at %p]\",\n+  log_debug(aot)(\"Expanding %s spaces by %7zu bytes [total %9zu bytes ending at %p]\",\n@@ -274,1 +275,1 @@\n-  log_debug(cds)(\"%s space: %9zu [ %4.1f%% of total] out of %9zu bytes [%5.1f%% used] at \" INTPTR_FORMAT,\n+  log_debug(aot)(\"%s space: %9zu [ %4.1f%% of total] out of %9zu bytes [%5.1f%% used] at \" INTPTR_FORMAT,\n@@ -280,1 +281,1 @@\n-  log_error(cds)(\"[%-8s] \" PTR_FORMAT \" - \" PTR_FORMAT \" capacity =%9d, allocated =%9d\",\n+  aot_log_error(aot)(\"[%-8s] \" PTR_FORMAT \" - \" PTR_FORMAT \" capacity =%9d, allocated =%9d\",\n@@ -283,1 +284,1 @@\n-    log_error(cds)(\" required = %d\", int(needed_bytes));\n+    aot_log_error(aot)(\" required = %d\", int(needed_bytes));\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -139,6 +139,6 @@\n-    log_debug(cds, reloc)(\"SharedDataRelocator::_patch_base     = \" PTR_FORMAT, p2i(_patch_base));\n-    log_debug(cds, reloc)(\"SharedDataRelocator::_patch_end      = \" PTR_FORMAT, p2i(_patch_end));\n-    log_debug(cds, reloc)(\"SharedDataRelocator::_valid_old_base = \" PTR_FORMAT, p2i(_valid_old_base));\n-    log_debug(cds, reloc)(\"SharedDataRelocator::_valid_old_end  = \" PTR_FORMAT, p2i(_valid_old_end));\n-    log_debug(cds, reloc)(\"SharedDataRelocator::_valid_new_base = \" PTR_FORMAT, p2i(_valid_new_base));\n-    log_debug(cds, reloc)(\"SharedDataRelocator::_valid_new_end  = \" PTR_FORMAT, p2i(_valid_new_end));\n+    log_debug(aot, reloc)(\"SharedDataRelocator::_patch_base     = \" PTR_FORMAT, p2i(_patch_base));\n+    log_debug(aot, reloc)(\"SharedDataRelocator::_patch_end      = \" PTR_FORMAT, p2i(_patch_end));\n+    log_debug(aot, reloc)(\"SharedDataRelocator::_valid_old_base = \" PTR_FORMAT, p2i(_valid_old_base));\n+    log_debug(aot, reloc)(\"SharedDataRelocator::_valid_old_end  = \" PTR_FORMAT, p2i(_valid_old_end));\n+    log_debug(aot, reloc)(\"SharedDataRelocator::_valid_new_base = \" PTR_FORMAT, p2i(_valid_new_base));\n+    log_debug(aot, reloc)(\"SharedDataRelocator::_valid_new_end  = \" PTR_FORMAT, p2i(_valid_new_end));\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -49,1 +50,1 @@\n-  DEBUG_ONLY(log_trace(cds, reloc)(\"Patch2: @%8d [\" PTR_FORMAT \"] \" PTR_FORMAT \" -> \" PTR_FORMAT,\n+  DEBUG_ONLY(aot_log_trace(aot, reloc)(\"Patch2: @%8d [\" PTR_FORMAT \"] \" PTR_FORMAT \" -> \" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -237,1 +238,1 @@\n-            log_error(cds)(\"Not a valid archive (%s)\", SharedArchiveFile);\n+            aot_log_error(aot)(\"Not a valid %s (%s)\", type_of_archive_being_loaded(), SharedArchiveFile);\n@@ -281,1 +282,1 @@\n-    log_info(cds)(\"optimized module handling: disabled due to incompatible property: %s=%s\", key, value);\n+    aot_log_info(aot)(\"optimized module handling: disabled due to incompatible property: %s=%s\", key, value);\n@@ -296,1 +297,1 @@\n-      log_info(cds)(\"full module graph: disabled due to incompatible property: %s=%s\", key, value);\n+      aot_log_info(aot)(\"full module graph: disabled due to incompatible property: %s=%s\", key, value);\n@@ -362,1 +363,1 @@\n-        log_warning(cds)(\"AOT cache is disabled when the %s option is specified.\", option);\n+        aot_log_warning(aot)(\"AOT cache is disabled when the %s option is specified.\", option);\n@@ -364,1 +365,1 @@\n-        log_info(cds)(\"CDS is disabled when the %s option is specified.\", option);\n+        aot_log_info(aot)(\"CDS is disabled when the %s option is specified.\", option);\n@@ -549,1 +550,1 @@\n-      log_info(cds)(\"reduced -Xcomp to -Xmixed for static dumping\");\n+      aot_log_info(aot)(\"reduced -Xcomp to -Xmixed for static dumping\");\n@@ -574,1 +575,1 @@\n-      log_warning(cds)(\"-XX:+AutoCreateSharedArchive requires -XX:SharedArchiveFile\");\n+      aot_log_warning(aot)(\"-XX:+AutoCreateSharedArchive requires -XX:SharedArchiveFile\");\n@@ -578,1 +579,1 @@\n-      log_warning(cds)(\"-XX:+AutoCreateSharedArchive does not work with ArchiveClassesAtExit\");\n+      aot_log_warning(aot)(\"-XX:+AutoCreateSharedArchive does not work with ArchiveClassesAtExit\");\n@@ -594,1 +595,1 @@\n-      log_info(cds)(\"All non-system classes will be verified (-Xverify:remote) during CDS dump time.\");\n+      aot_log_info(aot)(\"All non-system classes will be verified (-Xverify:remote) during CDS dump time.\");\n@@ -615,1 +616,1 @@\n-      log_error(cds)(\"-XX:+RecordDynamicDumpInfo%s\", __THEMSG);\n+      aot_log_error(aot)(\"-XX:+RecordDynamicDumpInfo%s\", __THEMSG);\n@@ -619,1 +620,1 @@\n-      log_warning(cds)(\"-XX:ArchiveClassesAtExit\" __THEMSG);\n+      aot_log_warning(aot)(\"-XX:ArchiveClassesAtExit\" __THEMSG);\n@@ -766,1 +767,1 @@\n-  log_info(cds)(\"Archived java heap is not supported: %s\", reason);\n+  aot_log_info(aot)(\"Archived java heap is not supported: %s\", reason);\n@@ -816,1 +817,1 @@\n-      log_info(cds)(\"full module graph cannot be dumped: %s\", reason);\n+      aot_log_info(aot)(\"full module graph cannot be dumped: %s\", reason);\n@@ -826,1 +827,1 @@\n-      log_info(cds)(\"full module graph cannot be loaded: %s\", reason);\n+      aot_log_info(aot)(\"full module graph cannot be loaded: %s\", reason);\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -71,1 +72,1 @@\n-  log_info(cds)(\"Parsing %s%s\", file,\n+  aot_log_info(aot)(\"Parsing %s%s\", file,\n@@ -166,1 +167,1 @@\n-    log_warning(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(), ex_msg);\n+    aot_log_warning(aot)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(), ex_msg);\n@@ -170,1 +171,1 @@\n-    log_warning(cds)(\"Preload Warning: Cannot find %s\", _class_name);\n+    aot_log_warning(aot)(\"Preload Warning: Cannot find %s\", _class_name);\n@@ -175,1 +176,1 @@\n-  if (log_is_enabled(Trace, cds)) {\n+  if (aot_log_is_enabled(Trace, aot)) {\n@@ -177,1 +178,1 @@\n-    log_trace(cds)(\"Shared spaces preloaded: %s\", klass->external_name());\n+    log_trace(aot)(\"Shared spaces preloaded: %s\", klass->external_name());\n@@ -505,1 +506,1 @@\n-  LogTarget(Warning, cds, resolve) lt;\n+  LogTarget(Warning, aot, resolve) lt;\n@@ -530,1 +531,1 @@\n-    log_info(cds)(\"Prohibited package for non-bootstrap classes: %s.class from %s\",\n+    aot_log_info(aot)(\"Prohibited package for non-bootstrap classes: %s.class from %s\",\n@@ -622,1 +623,1 @@\n-    log_warning(cds)(\"resolve_indy for class %s has encountered exception: %s %s\",\n+    aot_log_warning(aot)(\"resolve_indy for class %s has encountered exception: %s %s\",\n@@ -662,1 +663,1 @@\n-        log_debug(cds, lambda)(\"is_supported_invokedynamic check failed for cp_index %d\", pool_index);\n+        log_debug(aot, lambda)(\"is_supported_invokedynamic check failed for cp_index %d\", pool_index);\n@@ -685,1 +686,1 @@\n-      log_warning(cds)(\"No invoke dynamic constant pool entry can be found for class %s. The classlist is probably out-of-date.\",\n+      aot_log_warning(aot)(\"No invoke dynamic constant pool entry can be found for class %s. The classlist is probably out-of-date.\",\n@@ -747,1 +748,1 @@\n-      log_info(cds, hashtables)(\"Expanded id2klass_table() to %d\", id2klass_table()->table_size());\n+      log_info(aot, hashtables)(\"Expanded id2klass_table() to %d\", id2klass_table()->table_size());\n@@ -851,1 +852,1 @@\n-    if (log_is_enabled(Warning, cds, resolve)) {\n+    if (log_is_enabled(Warning, aot, resolve)) {\n@@ -853,1 +854,1 @@\n-      log_warning(cds, resolve)(\"Cannot aot-resolve constants for %s because it is excluded\", ik->external_name());\n+      log_warning(aot, resolve)(\"Cannot aot-resolve constants for %s because it is excluded\", ik->external_name());\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    log_warning(cds)(\"DumpLoadedClassList and CDS are not supported in exploded build\");\n+    log_warning(aot)(\"DumpLoadedClassList and CDS are not supported in exploded build\");\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  log_debug(cds, vtables)(\"Copying %3d vtable entries for %s\", n, name);\n+  log_debug(aot, vtables)(\"Copying %3d vtable entries for %s\", n, name);\n@@ -169,1 +169,1 @@\n-  log_debug(cds, vtables)(\"Found   %3d vtable entries for %s\", vtable_len, name);\n+  log_debug(aot, vtables)(\"Found   %3d vtable entries for %s\", vtable_len, name);\n","filename":"src\/hotspot\/share\/cds\/cppVtables.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  if (log_is_enabled(Trace, cds, verification)) {\n+  if (log_is_enabled(Trace, aot, verification)) {\n@@ -76,1 +76,1 @@\n-    log_trace(cds, verification)(\"add_verification_constraint: %s: %s must be subclass of %s [0x%x] array len %d flags len %d\",\n+    log_trace(aot, verification)(\"add_verification_constraint: %s: %s must be subclass of %s [0x%x] array len %d flags len %d\",\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -104,1 +105,1 @@\n-      log_info(cds)(\"Verify %s\", info);\n+      log_info(aot)(\"Verify %s\", info);\n@@ -123,2 +124,2 @@\n-    log_info(cds,dynamic)(\"CDS dynamic dump: clinit = \" JLONG_FORMAT \"ms)\",\n-                          ClassLoader::class_init_time_ms());\n+    log_info(cds, dynamic)(\"CDS dynamic dump: clinit = \" JLONG_FORMAT \"ms)\",\n+                           ClassLoader::class_init_time_ms());\n@@ -139,1 +140,1 @@\n-    log_info(cds)(\"Make classes shareable\");\n+    log_info(aot)(\"Make classes shareable\");\n@@ -164,1 +165,1 @@\n-      log_info(cds)(\"Adjust lambda proxy class dictionary\");\n+      log_info(aot)(\"Adjust lambda proxy class dictionary\");\n@@ -381,1 +382,1 @@\n-  log_debug(cds)(\"Total array klasses gathered for dynamic archive: %d\", DynamicArchive::num_array_klasses());\n+  log_debug(aot)(\"Total array klasses gathered for dynamic archive: %d\", DynamicArchive::num_array_klasses());\n@@ -393,1 +394,1 @@\n-      log_warning(cds)(\"This %s was created with AllowArchivingWithJavaAgent. It should be used \"\n+      aot_log_warning(aot)(\"This %s was created with AllowArchivingWithJavaAgent. It should be used \"\n@@ -448,1 +449,1 @@\n-    log_debug(cds)(\"Total array klasses read from dynamic archive: %d\", _dynamic_archive_array_klasses->length());\n+    log_debug(aot)(\"Total array klasses read from dynamic archive: %d\", _dynamic_archive_array_klasses->length());\n@@ -504,2 +505,2 @@\n-    log_error(cds)(\"Dynamic dump has failed\");\n-    log_error(cds)(\"%s: %s\", ex->klass()->external_name(),\n+    aot_log_error(aot)(\"Dynamic dump has failed\");\n+    aot_log_error(aot)(\"%s: %s\", ex->klass()->external_name(),\n@@ -529,1 +530,1 @@\n-    log_warning(cds)(\"Dynamic archive cannot be used: static archive header checksum verification failed.\");\n+    aot_log_warning(aot)(\"Dynamic archive cannot be used: static archive header checksum verification failed.\");\n@@ -536,1 +537,1 @@\n-      log_warning(cds)(\"Dynamic archive cannot be used: static archive region #%d checksum verification failed.\", i);\n+      aot_log_warning(aot)(\"Dynamic archive cannot be used: static archive region #%d checksum verification failed.\", i);\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -741,1 +741,1 @@\n-    log_info(cds)(\"Dumping shared data to file: %s\", _full_path);\n+    aot_log_info(aot)(\"Dumping shared data to file: %s\", _full_path);\n@@ -1544,5 +1544,14 @@\n-    LogTarget(Info, cds) lt;\n-    if (lt.is_enabled()) {\n-      LogStream ls(lt);\n-      ls.print_raw(ss.base());\n-      header()->print(&ls);\n+    if (CDSConfig::new_aot_flags_used()) {\n+      LogTarget(Info, aot) lt;\n+      if (lt.is_enabled()) {\n+        LogStream ls(lt);\n+        ls.print_raw(ss.base());\n+        header()->print(&ls);\n+      }\n+    } else {\n+      LogTarget(Info, cds) lt;\n+      if (lt.is_enabled()) {\n+        LogStream ls(lt);\n+        ls.print_raw(ss.base());\n+        header()->print(&ls);\n+      }\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-      MetaspaceShared::unrecoverable_writing_error(\"Unexpected exception, use -Xlog:cds,exceptions=trace for detail\");\n+      MetaspaceShared::unrecoverable_writing_error(\"Unexpected exception, use -Xlog:aot,exceptions=trace for detail\");\n","filename":"src\/hotspot\/share\/cds\/finalImageRecipes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-      log_error(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),\n+      log_error(aot)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-  LogTarget(Debug, cds, lambda) log;\n+  LogTarget(Debug, aot, lambda) log;\n@@ -271,1 +271,1 @@\n-    if (info != nullptr && log_is_enabled(Debug, cds)) {\n+    if (info != nullptr && log_is_enabled(Debug, aot)) {\n@@ -273,1 +273,1 @@\n-      log_debug(cds)(\"Used all static archived lambda proxy classes for: %s %s%s\",\n+      log_debug(aot)(\"Used all static archived lambda proxy classes for: %s %s%s\",\n@@ -284,1 +284,1 @@\n-    if (info != nullptr && log_is_enabled(Debug, cds)) {\n+    if (info != nullptr && log_is_enabled(Debug, aot)) {\n@@ -286,1 +286,1 @@\n-      log_debug(cds)(\"Used all dynamic archived lambda proxy classes for: %s %s%s\",\n+      log_debug(aot)(\"Used all dynamic archived lambda proxy classes for: %s %s%s\",\n@@ -309,1 +309,1 @@\n-      if (log_is_enabled(Debug, cds)) {\n+      if (log_is_enabled(Debug, aot)) {\n@@ -311,1 +311,1 @@\n-        log_debug(cds)(\"Loaded lambda proxy: %s \", proxy_klass->external_name());\n+        log_debug(aot)(\"Loaded lambda proxy: %s \", proxy_klass->external_name());\n@@ -416,1 +416,1 @@\n-    log_info(cds,dynamic)(\"Archiving hidden %s\", info._proxy_klasses->at(0)->external_name());\n+    log_info(cds, dynamic)(\"Archiving hidden %s\", info._proxy_klasses->at(0)->external_name());\n","filename":"src\/hotspot\/share\/cds\/lambdaProxyClassDictionary.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -804,1 +804,2 @@\n-      MetaspaceShared::writing_error(\"Unexpected exception, use -Xlog:cds,exceptions=trace for detail\");\n+      MetaspaceShared::writing_error(err_msg(\"Unexpected exception, use -Xlog:aot%s,exceptions=trace for detail\",\n+                                             CDSConfig::new_aot_flags_used() ? \"\" : \",cds\"));\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-      log_warning(cds)(\"Method in original class is missing from regenerated class: \" INTPTR_FORMAT \" %s\",\n+      log_warning(aot)(\"Method in original class is missing from regenerated class: \" INTPTR_FORMAT \" %s\",\n","filename":"src\/hotspot\/share\/cds\/regeneratedClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -195,1 +196,1 @@\n-    log_info(cds)(\"use_full_module_graph = true; java.base = \" INTPTR_FORMAT,\n+    aot_log_info(aot)(\"use_full_module_graph = true; java.base = \" INTPTR_FORMAT,\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataShared.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-    log_warning(cds)(\"CDS heap objects cannot be written because class %s maybe modified by ClassFileLoadHook.\",\n+    log_warning(aot)(\"heap objects cannot be written because class %s maybe modified by ClassFileLoadHook.\",\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  LogMessage(cds, hashtables) msg;\n+  LogMessage(aot, hashtables) msg;\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-  if (log_is_enabled(Info, cds, module)) {\n+  if (log_is_enabled(Info, aot, module)) {\n@@ -432,1 +432,1 @@\n-    LogStream ls(Log(cds, module)::info());\n+    LogStream ls(Log(aot, module)::info());\n@@ -538,1 +538,1 @@\n-  if (log_is_enabled(Info, cds, module)) {\n+  if (log_is_enabled(Info, aot, module)) {\n@@ -540,1 +540,1 @@\n-    LogStream ls(Log(cds, module)::info());\n+    LogStream ls(Log(aot, module)::info());\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -492,1 +493,1 @@\n-    log_info(cds, module)(\"Archived java.lang.Module oop \" PTR_FORMAT \" with no ModuleEntry*\", p2i(orig_module_obj));\n+    log_info(aot, module)(\"Archived java.lang.Module oop \" PTR_FORMAT \" with no ModuleEntry*\", p2i(orig_module_obj));\n@@ -496,1 +497,1 @@\n-    if (log_is_enabled(Info, cds, module)) {\n+    if (log_is_enabled(Info, aot, module)) {\n@@ -498,1 +499,1 @@\n-      LogStream ls(Log(cds, module)::info());\n+      LogStream ls(Log(aot, module)::info());\n@@ -601,1 +602,1 @@\n-  log_info(cds)(\"archived module property %s: %s\", _prop,\n+  aot_log_info(aot)(\"archived module property %s: %s\", _prop,\n@@ -695,2 +696,2 @@\n-    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n+    aot_log_info(aot)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n+    aot_log_info(aot)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -958,1 +958,1 @@\n-  log_info(cds)(\"allocated string table for %d strings\", total);\n+  log_info(aot)(\"allocated string table for %d strings\", total);\n@@ -964,1 +964,1 @@\n-    log_info(cds)(\"string table array (single level) length = %d\", total);\n+    log_info(aot)(\"string table array (single level) length = %d\", total);\n@@ -975,1 +975,1 @@\n-      log_error(cds)(\"Too many strings to be archived: %zu\", _items_count);\n+      log_error(aot)(\"Too many strings to be archived: %zu\", _items_count);\n@@ -983,1 +983,1 @@\n-    log_info(cds)(\"string table array (primary) length = %d\", primary_array_length);\n+    log_info(aot)(\"string table array (primary) length = %d\", primary_array_length);\n@@ -996,1 +996,1 @@\n-      log_info(cds)(\"string table array (secondary)[%d] length = %d\", i, len);\n+      log_info(aot)(\"string table array (secondary)[%d] length = %d\", i, len);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cds\/aotLogging.hpp\"\n@@ -232,1 +233,1 @@\n-  log_warning(cds)(\"Skipping %s: %s\", k->name()->as_C_string(), reason);\n+  aot_log_warning(aot)(\"Skipping %s: %s\", k->name()->as_C_string(), reason);\n@@ -276,1 +277,1 @@\n-        log_info(cds)(\"Skipping %s because it is dynamically generated\", k->name()->as_C_string());\n+        aot_log_info(aot)(\"Skipping %s because it is dynamically generated\", k->name()->as_C_string());\n@@ -329,1 +330,1 @@\n-    log_warning(cds)(\"Skipping %s: super class %s is excluded\", k->name()->as_C_string(), super->name()->as_C_string());\n+    aot_log_warning(aot)(\"Skipping %s: super class %s is excluded\", k->name()->as_C_string(), super->name()->as_C_string());\n@@ -339,1 +340,1 @@\n-      log_warning(cds)(\"Skipping %s: interface %s is excluded\", k->name()->as_C_string(), intf->name()->as_C_string());\n+      aot_log_warning(aot)(\"Skipping %s: interface %s is excluded\", k->name()->as_C_string(), intf->name()->as_C_string());\n@@ -346,1 +347,1 @@\n-    log_info(cds)(\"Skipping %s: used only when dumping CDS archive\", k->name()->as_C_string());\n+    aot_log_info(aot)(\"Skipping %s: used only when dumping CDS archive\", k->name()->as_C_string());\n@@ -818,1 +819,1 @@\n-      if (log_is_enabled(Trace, cds, verification)) {\n+      if (log_is_enabled(Trace, aot, verification)) {\n@@ -820,1 +821,1 @@\n-        log_trace(cds, verification)(\"check_verification_constraint: %s: %s must be subclass of %s [0x%x]\",\n+        log_trace(aot, verification)(\"check_verification_constraint: %s: %s must be subclass of %s [0x%x]\",\n@@ -1036,1 +1037,1 @@\n-      if (log_is_enabled(Trace, cds, hashtables)) {\n+      if (log_is_enabled(Trace, aot, hashtables)) {\n@@ -1038,1 +1039,1 @@\n-        log_trace(cds,hashtables)(\"%s dictionary: %s\", (_is_builtin ? \"builtin\" : \"unregistered\"), info._klass->external_name());\n+        log_trace(aot, hashtables)(\"%s dictionary: %s\", (_is_builtin ? \"builtin\" : \"unregistered\"), info._klass->external_name());\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -920,1 +920,1 @@\n-    log_info(cds, resolve)(\"Not resolved: class not linked: %s %s %s\",\n+    log_info(aot, resolve)(\"Not resolved: class not linked: %s %s %s\",\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-      log_info(cds, hashtables)(\"Expanded _has_been_visited table to %d\", _has_been_visited.table_size());\n+      log_info(aot, hashtables)(\"Expanded _has_been_visited table to %d\", _has_been_visited.table_size());\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -203,1 +203,1 @@\n-      log_trace(cds)(\"Iter(OtherArray): %p [%d]\", array, array->length());\n+      log_trace(aot)(\"Iter(OtherArray): %p [%d]\", array, array->length());\n@@ -207,1 +207,1 @@\n-      log_trace(cds)(\"Iter(OtherArray): %p [%d]\", array, array->length());\n+      log_trace(aot)(\"Iter(OtherArray): %p [%d]\", array, array->length());\n@@ -225,1 +225,1 @@\n-      log_trace(cds)(\"Iter(MSOArray): %p [%d]\", array, array->length());\n+      log_trace(aot)(\"Iter(MSOArray): %p [%d]\", array, array->length());\n@@ -247,1 +247,1 @@\n-      log_trace(cds)(\"Iter(MSOPointerArray): %p [%d]\", array, array->length());\n+      log_trace(aot)(\"Iter(MSOPointerArray): %p [%d]\", array, array->length());\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  log_trace(cds)(\"Iter(Annotations): %p\", this);\n+  log_trace(aot)(\"Iter(Annotations): %p\", this);\n","filename":"src\/hotspot\/share\/oops\/annotations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-  log_trace(cds)(\"Iter(ArrayKlass): %p (%s)\", this, external_name());\n+  log_trace(aot)(\"Iter(ArrayKlass): %p (%s)\", this, external_name());\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -420,1 +420,1 @@\n-  log_trace(cds)(\"Iter(ConstMethod): %p\", this);\n+  log_trace(aot)(\"Iter(ConstMethod): %p\", this);\n","filename":"src\/hotspot\/share\/oops\/constMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-  log_trace(cds)(\"Iter(ConstantPool): %p\", this);\n+  log_trace(aot)(\"Iter(ConstantPool): %p\", this);\n@@ -504,1 +504,1 @@\n-  log_info(cds, resolve)(\"Archiving CP entries for %s\", pool_holder()->name()->as_C_string());\n+  log_info(aot, resolve)(\"Archiving CP entries for %s\", pool_holder()->name()->as_C_string());\n@@ -563,1 +563,1 @@\n-  LogStreamHandle(Trace, cds, resolve) log;\n+  LogStreamHandle(Trace, aot, resolve) log;\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -440,1 +440,1 @@\n-      LogStreamHandle(Trace, cds, resolve) log;\n+      LogStreamHandle(Trace, aot, resolve) log;\n@@ -480,1 +480,1 @@\n-      LogStreamHandle(Trace, cds, resolve) log;\n+      LogStreamHandle(Trace, aot, resolve) log;\n@@ -520,1 +520,1 @@\n-      LogStreamHandle(Trace, cds, resolve) log;\n+      LogStreamHandle(Trace, aot, resolve) log;\n@@ -708,1 +708,1 @@\n-  log_trace(cds)(\"Iter(ConstantPoolCache): %p\", this);\n+  log_trace(aot)(\"Iter(ConstantPoolCache): %p\", this);\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -869,1 +869,1 @@\n-  if (log_is_enabled(Info, cds, init)) {\n+  if (log_is_enabled(Info, aot, init)) {\n@@ -871,1 +871,1 @@\n-    log_info(cds, init)(\"%s (aot-inited)\", external_name());\n+    log_info(aot, init)(\"%s (aot-inited)\", external_name());\n@@ -2570,1 +2570,1 @@\n-  if (log_is_enabled(Trace, cds)) {\n+  if (log_is_enabled(Trace, aot)) {\n@@ -2572,1 +2572,1 @@\n-    log_trace(cds)(\"Iter(InstanceKlass): %p (%s)\", this, external_name());\n+    log_trace(aot)(\"Iter(InstanceKlass): %p (%s)\", this, external_name());\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -764,1 +764,1 @@\n-  if (log_is_enabled(Trace, cds)) {\n+  if (log_is_enabled(Trace, aot)) {\n@@ -766,1 +766,1 @@\n-    log_trace(cds)(\"Iter(Klass): %p (%s)\", this, external_name());\n+    log_trace(aot)(\"Iter(Klass): %p (%s)\", this, external_name());\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -389,1 +389,1 @@\n-  log_trace(cds)(\"Iter(Method): %p\", this);\n+  log_trace(aot)(\"Iter(Method): %p\", this);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1728,1 +1728,1 @@\n-  log_trace(cds)(\"Iter(MethodData): %p\", this);\n+  log_trace(aot)(\"Iter(MethodData): %p\", this);\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  log_trace(cds)(\"Iter(RecordComponent): %p\", this);\n+  log_trace(aot)(\"Iter(RecordComponent): %p\", this);\n","filename":"src\/hotspot\/share\/oops\/recordComponent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -370,2 +370,2 @@\n-  if (log_is_enabled(Trace, cds)) {\n-    LogStream trace_stream(Log(cds)::trace());\n+  if (log_is_enabled(Trace, aot)) {\n+    LogStream trace_stream(Log(aot)::trace());\n","filename":"src\/hotspot\/share\/oops\/symbol.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2770,1 +2770,1 @@\n-    if (log_is_enabled(Info, cds)) {\n+    if (log_is_enabled(Info, aot)) {\n@@ -2773,1 +2773,1 @@\n-      log_info(cds)(\"JVM_StartThread() ignored: %s\", t->klass()->external_name());\n+      log_info(aot)(\"JVM_StartThread() ignored: %s\", t->klass()->external_name());\n@@ -3466,1 +3466,1 @@\n-    log_debug(cds)(\"JVM_GetRandomSeedForDumping() = \" JLONG_FORMAT, seed);\n+    log_debug(aot)(\"JVM_GetRandomSeedForDumping() = \" JLONG_FORMAT, seed);\n@@ -3529,1 +3529,1 @@\n-      log_debug(cds)(\"NeedsClassInitBarrierForCDS: %s\", k->external_name());\n+      log_debug(aot)(\"NeedsClassInitBarrierForCDS: %s\", k->external_name());\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1377,1 +1377,1 @@\n-      log_info(cds)(\"Unable to use shared archive: %s\", message);\n+      aot_log_info(aot)(\"Unable to use shared archive: %s\", message);\n@@ -3619,1 +3619,1 @@\n-      log_is_enabled(Info, cds)) {\n+      log_is_enabled(Info, cds) || log_is_enabled(Info, aot)) {\n@@ -3623,0 +3623,1 @@\n+    LogConfiguration::configure_stdout(LogLevel::Off, true, LOG_TAGS(aot));\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2901,1 +2901,1 @@\n-    LogStreamHandle(Trace, cds) lsh;\n+    LogStreamHandle(Trace, aot) lsh;\n@@ -2915,1 +2915,1 @@\n-        log_trace(cds)(\"Added fp=%p (%s), entry=%p to the archived adater table\", buffered_fp, buffered_fp->as_basic_args_string(), buffered_entry);\n+        log_trace(aot)(\"Added fp=%p (%s), entry=%p to the archived adater table\", buffered_fp, buffered_fp->as_basic_args_string(), buffered_entry);\n@@ -2919,1 +2919,1 @@\n-        log_trace(cds)(\"Skipping adapter handler %p (fp=%s) as it is not archived\", entry, fp->as_basic_args_string());\n+        log_trace(aot)(\"Skipping adapter handler %p (fp=%s) as it is not archived\", entry, fp->as_basic_args_string());\n@@ -2967,1 +2967,1 @@\n-      log_warning(cds)(\"Failed to link AdapterHandlerEntry (fp=%s) to its code in the AOT code cache\", _fingerprint->as_basic_args_string());\n+      log_warning(aot)(\"Failed to link AdapterHandlerEntry (fp=%s) to its code in the AOT code cache\", _fingerprint->as_basic_args_string());\n@@ -3055,1 +3055,1 @@\n-  LogStreamHandle(Trace, cds) lsh;\n+  LogStreamHandle(Trace, aot) lsh;\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-   java -Xshare:dump -Xlog:cds+map=debug,cds+map+oops=trace:file=cds.map:none:filesize=0\n+   java -Xshare:dump -Xlog:aot+map=debug,aot+map+oops=trace:file=cds.map:none:filesize=0\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/CDSMapReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @summary Test the contents of -Xlog:cds+map\n+ * @summary Test the contents of -Xlog:aot+map\n@@ -70,1 +70,1 @@\n-            .addPrefix(\"-Xlog:cds+map=debug,cds+map+oops=trace:file=\" + mapName + \":none:filesize=0\")\n+            .addPrefix(\"-Xlog:aot+map=debug,aot+map+oops=trace:file=\" + mapName + \":none:filesize=0\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/CDSMapTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,1 +103,1 @@\n-            .addPrefix(\"-Xlog:cds+map*=trace:file=\" + mapName + \":none:filesize=0\")\n+            .addPrefix(\"-Xlog:aot+map*=trace:file=\" + mapName + \":none:filesize=0\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/DeterministicDump.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-            \"-Xlog:cds,cds+hashtables\",\n+            \"-Xlog:cds,aot+hashtables\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SharedStrings.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        test(\"-Xlog:cds=debug\");\n+        test(\"-Xlog:aot=debug,cds=debug\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SpaceUtilizationCheck.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -286,1 +286,1 @@\n-        out.shouldContain(\"Not a valid archive (hello.aotconfig)\");\n+        out.shouldContain(\"Not a valid shared archive file (hello.aotconfig)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/AOTFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-    static final String CDS_LOGGING = \"-Xlog:cds,cds+hashtables\";\n+    static final String CDS_LOGGING = \"-Xlog:cds,aot+hashtables\";\n@@ -78,2 +78,2 @@\n-        \/\/ [4.661s][info][cds,hashtables] Shared symbol table stats -------- base: 0x0000000800000000\n-        \/\/ [4.661s][info][cds,hashtables] Number of entries       :     50078\n+        \/\/ [4.661s][info][aot,hashtables] Shared symbol table stats -------- base: 0x0000000800000000\n+        \/\/ [4.661s][info][aot,hashtables] Number of entries       :     50078\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ExtraSymbols.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-    private static final String cdsLoadedLambdaProxy = \".cds.*Loaded.*lambda.*proxy\";\n+    private static final String cdsLoadedLambdaProxy = \".aot.*Loaded.*lambda.*proxy\";\n@@ -78,1 +78,1 @@\n-                       \"-Xlog:class+load,cds\")\n+                       \"-Xlog:class+load,aot,cds\")\n@@ -99,1 +99,1 @@\n-            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\")\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,aot=debug,cds=debug\")\n@@ -113,1 +113,1 @@\n-            .addPrefix(\"-cp\", appJar, testProperty,  \"-Xlog:class+load,cds=debug\")\n+            .addPrefix(\"-cp\", appJar, testProperty,  \"-Xlog:class+load,aot=debug,cds=debug\")\n@@ -127,1 +127,1 @@\n-            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\")\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,aot=debug,cds=debug\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaEagerInit.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                       \"-Xlog:class+load,cds+class=debug,cds\")\n+                       \"-Xlog:class+load,cds+class=debug,aot,cds\")\n@@ -78,1 +78,1 @@\n-        output.shouldContain(\"CDS heap objects cannot be written because class jdk.internal.math.FDBigInteger maybe modified by ClassFileLoadHook\")\n+        output.shouldContain(\"heap objects cannot be written because class jdk.internal.math.FDBigInteger maybe modified by ClassFileLoadHook\")\n@@ -84,1 +84,1 @@\n-            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load=debug,cds=debug,class+path=debug\",\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load=debug,aot=debug,cds=debug,class+path=debug\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaWithJavaAgent.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    static final String CDS_LOGGING = \"-Xlog:cds,cds+hashtables\";\n+    static final String CDS_LOGGING = \"-Xlog:cds,aot+hashtables\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/VerifierTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-                    \"-Xlog:cds+map,cds+map+oops=trace:file=cds.oops.txt:none:filesize=0\",\n+                  \/\/\"-Xlog:aot+map,aot+map+oops=trace:file=cds.oops.txt:none:filesize=0\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/MethodHandleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-                    \"-Xlog:cds+map,cds+map+oops=trace:file=cds.oops.txt:none:filesize=0\",\n+                  \/\/\"-Xlog:aot+map,aot+map+oops=trace:file=cds.oops.txt:none:filesize=0\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/WeakReferenceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,0 +93,2 @@\n+                \"-Xlog:aot\",\n+                \"-Xlog:aot+lambda\",\n@@ -94,1 +96,0 @@\n-                \"-Xlog:cds+lambda\",\n@@ -100,1 +101,1 @@\n-        String logOptions = \"-Xlog:cds=debug,class+load,cds+class=debug\";\n+        String logOptions = \"-Xlog:aot=debug,cds=debug,class+load,cds+class=debug\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdasInTwoArchives.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,1 @@\n+            \"-Xlog:aot=debug\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/UsedAllArchivedLambdas.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-                              .shouldContain(\"Unexpected exception, use -Xlog:cds,exceptions=trace for detail\");\n+                              .shouldContain(\"Unexpected exception, use -Xlog:aot,cds,exceptions=trace for detail\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/ExceptionDuringDumpAtObjectsInitPhase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-            output = TestCommon.dump(appJar, appClasses, \"-Xlog:cds,cds+hashtables\",\n+            output = TestCommon.dump(appJar, appClasses, \"-Xlog:cds,aot+hashtables\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/CheckUnsupportedDumpingOptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        final String loggingOption = \"-Xlog:aot=debug,cds+module=debug,aot+heap=info,cds=debug,module=trace\";\n+        final String loggingOption = \"-Xlog:aot=debug,aot+module=debug,aot+heap=info,cds=debug,module=trace\";\n@@ -73,2 +73,2 @@\n-          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.jconsole\")\n-          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n+          .shouldMatch(\"aot,module.*Restored from archive: entry.0x.*name jdk.jconsole\")\n+          .shouldMatch(\"aot,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n@@ -164,1 +164,1 @@\n-                  .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.internal.vm.ci\");\n+                  .shouldMatch(\"aot,module.*Restored from archive: entry.0x.*name jdk.internal.vm.ci\");\n@@ -191,2 +191,2 @@\n-          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.compiler\")\n-          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.jconsole\");\n+          .shouldMatch(\"aot,module.*Restored from archive: entry.0x.*name jdk.compiler\")\n+          .shouldMatch(\"aot,module.*Restored from archive: entry.0x.*name jdk.jconsole\");\n@@ -235,1 +235,1 @@\n-          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n+          .shouldMatch(\"aot,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/addmods\/AddmodsOption.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        final String loggingOption = \"-Xlog:aot=debug,cds+module=debug,aot+heap=info,cds=debug,module=trace\";\n+        final String loggingOption = \"-Xlog:aot=debug,aot+module=debug,aot+heap=info,cds=debug,module=trace\";\n@@ -69,1 +69,1 @@\n-          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n+          .shouldMatch(\"aot,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n@@ -154,1 +154,1 @@\n-          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n+          .shouldMatch(\"aot,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/addopens\/AddopensOption.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        final String loggingOption = \"-Xlog:aot=debug,cds+module=debug,aot+heap=info,cds=debug,module=trace\";\n+        final String loggingOption = \"-Xlog:aot=debug,aot+module=debug,aot+heap=info,cds=debug,module=trace\";\n@@ -65,1 +65,1 @@\n-          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n+          .shouldMatch(\"aot,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/module\/ModuleOption.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                 .addVmArgs(\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\", \"-Xlog:cds\")\n+                 .addVmArgs(\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\", \"-Xlog:aot,cds\")\n@@ -107,1 +107,1 @@\n-                            \"--add-exports\", \"java.base\/jdk.internal.misc=com.needsjdkaddexport\", \"-Xlog:cds\")\n+                            \"--add-exports\", \"java.base\/jdk.internal.misc=com.needsjdkaddexport\", \"-Xlog:aot,cds\")\n@@ -114,1 +114,1 @@\n-                            \"--add-exports\", \"com.foos\/com.foos.internal=com.needsfoosaddexport\", \"-Xlog:cds\")\n+                            \"--add-exports\", \"com.foos\/com.foos.internal=com.needsfoosaddexport\", \"-Xlog:aot,cds\")\n@@ -125,1 +125,1 @@\n-                            \"-Xlog:cds\")\n+                            \"-Xlog:aot,cds\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/AddExports.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,2 @@\n-                       \"-Xlog:cds+resolve=trace\",\n+                       \"-Xlog:aot+resolve=trace\",\n+                       \"-Xlog:aot+class=debug\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/resolvedConstants\/AOTLinkedLambdas.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-                       \"-Xlog:cds+resolve=trace\",\n+                       \"-Xlog:aot+resolve=trace\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/resolvedConstants\/AOTLinkedVarHandles.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,2 @@\n-                       \"-Xlog:cds+resolve=trace\",\n+                       \"-Xlog:aot+resolve=trace\",\n+                       \"-Xlog:aot+class=debug\",\n@@ -186,1 +187,1 @@\n-        return \"cds,resolve.*archived \" + s;\n+        return \",resolve.*archived \" + s;\n@@ -193,1 +194,1 @@\n-            return \"cds,resolve.*reverted \" + s;\n+            return \",resolve.*reverted \" + s;\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/resolvedConstants\/ResolvedConstants.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-                       \"-Xlog:cds+resolve=trace\");\n+                       \"-Xlog:aot+resolve=trace\");\n@@ -57,1 +57,1 @@\n-            .shouldMatch(\"cds,resolve.*Failed to resolve putfield .*ResolvedPutFieldHelper -> ResolvedPutFieldHelper.x:I\");\n+            .shouldMatch(\",resolve.*Failed to resolve putfield .*ResolvedPutFieldHelper -> ResolvedPutFieldHelper.x:I\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/resolvedConstants\/ResolvedPutField.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-            \"SharedStringsBasic.txt\", \"-Xlog:cds,cds+hashtables\");\n+            \"SharedStringsBasic.txt\", \"-Xlog:cds,aot+hashtables\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/ExerciseGC.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-            \"SharedStringsBasic.txt\", \"-Xlog:cds,cds+hashtables\");\n+            \"SharedStringsBasic.txt\", \"-Xlog:cds,aot+hashtables\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/FlagCombo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-                \"-Xlog:cds,cds+hashtables\",\n+                \"-Xlog:cds,aot+hashtables\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/IncompatibleOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-            \"ExtraSharedInput.txt\", \"-Xlog:cds,cds+hashtables\");\n+            \"ExtraSharedInput.txt\", \"-Xlog:cds,aot+hashtables\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/InternSharedString.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-    static final String CDS_LOGGING = \"-Xlog:cds,cds+hashtables\";\n+    static final String CDS_LOGGING = \"-Xlog:cds,aot+hashtables\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/LargePages.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-            \"-Xlog:cds,cds+hashtables\")\n+            \"-Xlog:cds,aot+hashtables\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsBasic.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-            \"SharedStringsBasic.txt\", \"-Xlog:cds,cds+hashtables\");\n+            \"SharedStringsBasic.txt\", \"-Xlog:cds,aot+hashtables\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsBasicPlus.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,1 @@\n+                \"-Xlog:aot\",\n@@ -81,1 +82,1 @@\n-            TestCommon.concat(vmOptionsPrefix, \"-Xlog:cds\", \"HelloString\"));\n+            TestCommon.concat(vmOptionsPrefix, \"-Xlog:aot,cds\", \"HelloString\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsStress.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-            \"SharedStringsBasic.txt\", \"-Xlog:cds,cds+hashtables\");\n+            \"SharedStringsBasic.txt\", \"-Xlog:cds,aot+hashtables\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsWbTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-                       \"-showversion\", \"-Xlog:cds,cds+hashtables\")\n+                       \"-showversion\", \"-Xlog:cds,aot+hashtables\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SysDictCrash.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-        cmd.add(\"-Xlog:cds,cds+hashtables\");\n+        cmd.add(\"-Xlog:cds,aot+hashtables\");\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSTestUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}