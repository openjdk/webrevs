{"files":[{"patch":"@@ -1104,0 +1104,5 @@\n+        if ((lastmode & TYPE) == 0) {\n+            \/\/if the mode was switched to expression while expecting type, wrap with Erroneous:\n+            result = F.Erroneous(List.of(result));\n+        }\n+\n@@ -1431,0 +1436,1 @@\n+        int startMode = mode;\n@@ -1760,0 +1766,3 @@\n+            if (typeArgs != null && (startMode & TYPE) != 0) {\n+                return F.at(pos).TypeApply(F.Erroneous(), typeArgs);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097 8293897 8295401 8304671 8310326 8312093 8312204 8315452 8337976 8324859 8344706\n+ * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097 8293897 8295401 8304671 8310326 8312093 8312204 8315452 8337976 8324859 8344706 8351260\n@@ -3016,0 +3016,63 @@\n+    @Test \/\/JDK-8351260\n+    void testVeryBrokenTypeWithAnnotations() throws IOException {\n+        String code = \"\"\"\n+                      package tests;\n+                      class ListUtilsTest {\n+                          void test(List<@AlphaChars <@StringLength(int value = 5)String> s){\n+                          }\n+                      }\n+                      \"\"\";\n+        DiagnosticCollector<JavaFileObject> coll =\n+                new DiagnosticCollector<>();\n+        JavacTaskImpl ct = (JavacTaskImpl) tool.getTask(null, fm, coll,\n+                List.of(\"--enable-preview\", \"--source\", SOURCE_VERSION),\n+                null, Arrays.asList(new MyFileObject(code)));\n+        CompilationUnitTree cut = ct.parse().iterator().next();\n+\n+        List<String> codes = new LinkedList<>();\n+\n+        for (Diagnostic<? extends JavaFileObject> d : coll.getDiagnostics()) {\n+            codes.add(d.getLineNumber() + \":\" + d.getColumnNumber() + \":\" + d.getCode());\n+        }\n+\n+        assertEquals(\"testVeryBrokenTypeWithAnnotations: \" + codes,\n+                     List.of(\"3:32:compiler.err.illegal.start.of.type\",\n+                             \"3:51:compiler.err.dot.class.expected\",\n+                             \"3:57:compiler.err.expected2\",\n+                             \"3:60:compiler.err.expected2\",\n+                             \"3:61:compiler.err.expected2\",\n+                             \"3:67:compiler.err.not.stmt\",\n+                             \"3:70:compiler.err.expected\",\n+                             \"5:2:compiler.err.premature.eof\"),\n+                     codes);\n+        String result = toStringWithErrors(cut).replaceAll(\"\\\\R\", \"\\n\");\n+        System.out.println(\"RESULT\\n\" + result);\n+        assertEquals(\"incorrect AST\",\n+                     result,\n+                     \"\"\"\n+                     package tests;\n+                     \\n\\\n+                     class ListUtilsTest {\n+                         \\n\\\n+                         void test(List<@AlphaChars (ERROR: (ERROR)<@StringLength(int) value, (ERROR)> = 5), (ERROR: )> <error>) {\n+                             (ERROR: String > s);\n+                             {\n+                             }\n+                         }\n+                     }\"\"\");\n+    }\n+\n+    @Test \/\/JDK-8351260\n+    void testVeryBrokenTypeWithAnnotationsMinimal() throws IOException {\n+        String code = \"\"\"\n+                      B<@C<@D(e f=\n+                      \"\"\";\n+        DiagnosticCollector<JavaFileObject> coll =\n+                new DiagnosticCollector<>();\n+        JavacTaskImpl ct = (JavacTaskImpl) tool.getTask(null, fm, coll,\n+                List.of(\"--enable-preview\", \"--source\", SOURCE_VERSION),\n+                null, Arrays.asList(new MyFileObject(code)));\n+        \/\/no exceptions:\n+        ct.parse().iterator().next();\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":64,"deletions":1,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8301580 8322159 8333107 8332230 8338678\n+ * @bug 8301580 8322159 8333107 8332230 8338678 8351260\n@@ -325,0 +325,18 @@\n+    @Test \/\/JDK-8351260\n+    public void testVeryBrokenAnnotation() throws Exception {\n+        String code = \"\"\"\n+                      class ListUtilsTest {\n+                          void test(List<@AlphaChars <@StringLength(int value = 5)String> s){\n+                          }\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        \/\/should not fail with an exception:\n+        new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\",\n+                     \"-XDshould-stop.at=FLOW\")\n+            .sources(code)\n+            .outdir(curPath)\n+            .run(Expect.FAIL)\n+            .writeAll();\n+    }\n","filename":"test\/langtools\/tools\/javac\/recovery\/AttrRecovery.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"}]}