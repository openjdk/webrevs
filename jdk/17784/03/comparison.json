{"files":[{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class AllDead {\n+\n+    \/*\n+     * Test the System GC when all allocated objects are dead.\n+     *\n+     * The jvmArgs are provided to avoid GCs during object creation.\n+     *\/\n+\n+    static ArrayList<Object[]> holder;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        holder = GarbageGenerator.generateObjectArrays();\n+        holder = null;\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/AllDead.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class AllLive {\n+\n+    \/*\n+     * Test the System GC when all allocated objects are live.\n+     *\n+     * The jvmArgs are provided to avoid GCs during object creation.\n+     *\/\n+\n+    static ArrayList<Object[]> holder;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        holder = GarbageGenerator.generateObjectArrays();\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/AllLive.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class DifferentObjectSizesArray {\n+\n+    \/*\n+     * Test the System GC when 2\/3 of the objects are live\n+     * and kept reachable through an object array.\n+     *\n+     * The jvmArgs are provided to avoid GCs during object creation.\n+     *\/\n+\n+    static Object[] largeObjArray;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        largeObjArray = GarbageGenerator.generateAndFillLargeObjArray(false);\n+        \/\/ Removing a third of the objects and keeping a good\n+        \/\/ distribution of sizes.\n+        for (int i = 0; i < largeObjArray.length; i++) {\n+            if (i%3 == 0) {\n+                largeObjArray[i] = null;\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/DifferentObjectSizesArray.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class DifferentObjectSizesHashMap {\n+\n+    \/*\n+     * Test the System GC when 2\/3 of the objects are live\n+     * and kept reachable through a HashMap.\n+     *\n+     * The jvmArgs are provided to avoid GCs during object creation.\n+     *\/\n+\n+    static HashMap<Integer, byte[]> largeMap;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        largeMap = GarbageGenerator.generateAndFillHashMap(false);\n+        int numberOfObjects = largeMap.size();\n+        \/\/ Removing a third of the objects and keeping a good\n+        \/\/ distribution of sizes.\n+        for (int i = 0; i < numberOfObjects; i++) {\n+            if (i%3 == 0) {\n+                largeMap.remove(i);\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/DifferentObjectSizesHashMap.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class DifferentObjectSizesTreeMap {\n+\n+    \/*\n+     * Test the System GC when 2\/3 of the objects are live\n+     * and kept reachable through a TreeMap.\n+     *\n+     * The jvmArgs are provided to avoid GCs during object creation.\n+     *\/\n+    static TreeMap<Integer, byte[]> largeMap;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        largeMap = GarbageGenerator.generateAndFillTreeMap(false);\n+        int numberOfObjects = largeMap.size();\n+        \/\/ Removing a third of the objects and keeping a good\n+        \/\/ distribution of sizes.\n+        for (int i = 0; i < numberOfObjects; i++) {\n+            if (i%3 == 0) {\n+                largeMap.remove(i);\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/DifferentObjectSizesTreeMap.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.TreeMap;\n+\n+public class GarbageGenerator {\n+    static final int K = 1024;\n+    static final int M = K * K;\n+\n+    \/**\n+     * Generates roughly 1GB of objects stored as an arraylist of\n+     * 1024 Object[]. Each Objects[] stores 1024 byte[] of size 1024.\n+     *\n+     * @return ArrayList of 1024 Objects[].\n+     *\/\n+    static ArrayList<Object[]> generateObjectArrays() {\n+        ArrayList<Object[]> tmp = new ArrayList<>();\n+        for (int i = 0; i < GarbageGenerator.K; i++) {\n+            Object[] x = new Object[GarbageGenerator.K];\n+            for (int j=0; j < GarbageGenerator.K; j++) {\n+                x[j] = new byte[GarbageGenerator.K];\n+            }\n+            tmp.add(x);\n+        }\n+        return tmp;\n+    }\n+\n+    \/**\n+     * Allocating an Object[] with elements and filling each slot with\n+     * byte[]. If sameSize is true all byte[] are 1024 large, otherwise\n+     * there are 8 different sizes from K\/8 to 16K.\n+     *\n+     * @param sameSize all objects are 1K large.\n+     * @return\n+     *\/\n+    public static Object[] generateAndFillLargeObjArray(boolean sameSize) {\n+        \/\/ Aiming for ~ 1gb of heap usage. For different sizes\n+        \/\/ the average size is ~ 4k.\n+        Object[] tmp = new Object[sameSize ? M : M \/ 4];\n+        for (int i = 0; i < tmp.length; i++) {\n+            if (sameSize) {\n+                tmp[i] = new byte[K];\n+            } else {\n+                int multiplier = 1 << (i % 8); \/\/ 1,2,4,8,16,32,64,128\n+                tmp[i] = new byte[(K \/ 8) * multiplier ];\n+            }\n+        }\n+        return tmp;\n+    }\n+\n+    public static HashMap<Integer, byte[]> generateAndFillHashMap(boolean sameSize) {\n+        HashMap<Integer, byte[]> tmp = new HashMap<>();\n+        int numberOfObjects = sameSize ? M : M \/ 4;\n+        for (int i = 0; i < numberOfObjects; i++) {\n+            if (sameSize) {\n+                tmp.put(i, new byte[K]);\n+            } else {\n+                int multiplier = 1 << (i % 8); \/\/ 1,2,4,8,16,32,64,128\n+                tmp.put(i, new byte[(K \/ 8) * multiplier]);\n+            }\n+        }\n+        return tmp;\n+    }\n+\n+    public static TreeMap<Integer, byte[]> generateAndFillTreeMap(boolean sameSize) {\n+        TreeMap<Integer, byte[]> tmp = new TreeMap<>();\n+        int numberOfObjects = sameSize ? M : M \/ 4;\n+        for (int i = 0; i < numberOfObjects; i++) {\n+            if (sameSize) {\n+                tmp.put(i, new byte[K]);\n+            } else {\n+                int multiplier = 1 << (i % 8); \/\/ 1,2,4,8,16,32,64,128\n+                tmp.put(i, new byte[(K \/ 8) * multiplier]);\n+            }\n+        }\n+        return tmp;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/GarbageGenerator.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class HalfDeadFirstPart {\n+\n+    \/*\n+     * Test the System GC when half of the objects are dead.\n+     * In this test the first half of the objects are cleared.\n+     *\n+     * The jvmArgs are provided to avoid GCs during object creation.\n+     *\/\n+\n+    static ArrayList<Object[]> holder;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        holder = GarbageGenerator.generateObjectArrays();\n+        \/\/ Clearing every other object array in the holder\n+        for (int i = 0; i < holder.size() \/ 2; i++) {\n+            holder.set(i, null);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/HalfDeadFirstPart.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class HalfDeadInterleaved {\n+\n+    \/*\n+     * Test the System GC when half of the objects are dead.\n+     * In this test every other object is cleared.\n+     *\n+     * The jvmArgs are provided to avoid GCs during object creation.\n+     *\/\n+\n+    static ArrayList<Object[]> holder;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        holder = GarbageGenerator.generateObjectArrays();\n+        for (Object[] objArray : holder) {\n+            for (int i=0; i < objArray.length; i++) {\n+                if ((i & 1) == 1) {\n+                    objArray[i] = null;\n+                }\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/HalfDeadInterleaved.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class HalfDeadInterleavedChunks {\n+\n+    \/*\n+     * Test the System GC when half of the objects are dead.\n+     * In this test every other array of objects is cleared.\n+     *\n+     * The jvmArgs are provided to avoid GCs during object creation.\n+     *\/\n+\n+    static ArrayList<Object[]> holder;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        holder = GarbageGenerator.generateObjectArrays();\n+        \/\/ Clearing every other object array in the holder\n+        for (int i = 0; i < holder.size(); i++) {\n+            if ((i & 1) == 1) {\n+                holder.set(i, null);\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/HalfDeadInterleavedChunks.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class HalfDeadSecondPart {\n+\n+    \/*\n+     * Test the System GC when half of the objects are dead.\n+     * In this test the second half of the objects are cleared.\n+     *\n+     * The jvmArgs are provided to avoid GCs during object creation.\n+     *\/\n+\n+    static ArrayList<Object[]> holder;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        holder = GarbageGenerator.generateObjectArrays();\n+        \/\/ Clearing every other object array in the holder\n+        for (int i = holder.size() \/ 2; i < holder.size(); i++) {\n+            holder.set(i, null);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/HalfDeadSecondPart.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class HalfHashedHalfDead {\n+\n+    \/*\n+     * Test the System GC when there is a big amount of objects\n+     * with hash codes calculated.\n+     *\n+     * The jvmArgs are provided to avoid GCs during object creation.\n+     *\/\n+\n+    static ArrayList<Object[]> holder;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        holder = GarbageGenerator.generateObjectArrays();\n+        \/\/ Keeping half the objects and calculating the hash code to\n+        \/\/ force some GCs to preserve marks.\n+        for (Object[] objectArray: holder) {\n+            for (int i = 0; i < objectArray.length; i++) {\n+                if (i % 2 == 0) {\n+                    objectArray[i].hashCode();\n+                } else {\n+                    objectArray[i] = null;\n+                }\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/HalfHashedHalfDead.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+public class NoObjects {\n+\n+    \/*\n+     * Test the System GC when there are no additionally allocate\n+     * objects.\n+     *\n+     * The heap settings provided are the same as for the other\n+     * test for consistency.\n+     *\/\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/NoObjects.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.gc.systemgc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value=25, jvmArgsAppend={\"-Xmx5g\", \"-Xms5g\", \"-Xmn3g\", \"-XX:+AlwaysPreTouch\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class OneBigObject {\n+\n+    \/*\n+     * Test the System GC when there is a single large object.\n+     *\n+     * The heap settings provided are the same as for the other\n+     * test for consistency.\n+     *\/\n+\n+    static Object[] holder;\n+\n+    @Setup(Level.Iteration)\n+    public void generateGarbage() {\n+        holder = new Object[1024*1024*128];\n+    }\n+\n+    @Benchmark\n+    public void gc() {\n+        System.gc();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/systemgc\/OneBigObject.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}