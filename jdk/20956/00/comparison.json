{"files":[{"patch":"@@ -298,0 +298,1 @@\n+                            lastNonWhite = bp - 1; \/\/ don't include newline or EOF\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -595,17 +595,3 @@\n-                            int breakOffset = getSentenceBreak(dt.getKind(), content, peekedNext);\n-                            if (breakOffset > 0) {\n-                                \/\/ the end of sentence is within the current node;\n-                                \/\/ split it, skipping whitespace in between the two parts\n-                                var fsPart = newNode(dt.getKind(), dt.pos, content.substring(0, breakOffset).stripTrailing());\n-                                fs.add(fsPart);\n-                                int wsOffset = skipWhiteSpace(content, breakOffset);\n-                                if (wsOffset > 0) {\n-                                    var bodyPart = newNode(dt.getKind(), dt.pos + wsOffset, content.substring(wsOffset));\n-                                    body.add(bodyPart);\n-                                }\n-                                foundFirstSentence = true;\n-                            } else if (peekedNext != null && isSentenceBreak(peekedNext, false)) {\n-                                \/\/ the next node is a sentence break, so this is the end of the first sentence;\n-                                \/\/ remove trailing spaces\n-                                var fsPart = newNode(dt.getKind(), dt.pos, content.stripTrailing());\n-                                fs.add(fsPart);\n+                            if (isFirst && dt.getKind() == Kind.MARKDOWN && isIndented(content)) {\n+                                \/\/ begins with an indented code block (unusual), so no first sentence\n+                                body.add(dt);\n@@ -614,2 +600,22 @@\n-                                \/\/ no sentence break found; keep scanning\n-                                fs.add(dt);\n+                                int breakOffset = getSentenceBreak(dt.getKind(), content, peekedNext);\n+                                if (breakOffset > 0) {\n+                                    \/\/ the end of sentence is within the current node;\n+                                    \/\/ split it, skipping whitespace in between the two parts\n+                                    var fsPart = newNode(dt.getKind(), dt.pos, content.substring(0, breakOffset).stripTrailing());\n+                                    fs.add(fsPart);\n+                                    int wsOffset = skipWhiteSpace(content, breakOffset);\n+                                    if (wsOffset > 0) {\n+                                        var bodyPart = newNode(dt.getKind(), dt.pos + wsOffset, content.substring(wsOffset));\n+                                        body.add(bodyPart);\n+                                    }\n+                                    foundFirstSentence = true;\n+                                } else if (peekedNext != null && isSentenceBreak(peekedNext, false)) {\n+                                    \/\/ the next node is a sentence break, so this is the end of the first sentence;\n+                                    \/\/ remove trailing spaces\n+                                    var fsPart = newNode(dt.getKind(), dt.pos, content.stripTrailing());\n+                                    fs.add(fsPart);\n+                                    foundFirstSentence = true;\n+                                } else {\n+                                    \/\/ no sentence break found; keep scanning\n+                                    fs.add(dt);\n+                                }\n@@ -654,0 +660,5 @@\n+        private static final Pattern INDENT = Pattern.compile(\" {4}| {0,3}\\t\");\n+        private boolean isIndented(String s) {\n+            return INDENT.matcher(s).lookingAt();\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":30,"deletions":19,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -489,0 +489,57 @@\n+\n+    @Test\n+    public void testLeadingCodeBlock(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    \/\/\/     Leading code block\n+                    \/\/\/ Lorum ipsum.\n+                    public class C { }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"--no-platform-links\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ check first sentence is empty in package summary file\n+        checkOutput(\"p\/package-summary.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color class-summary class-summary-tab2\"><a href=\"C.html\" title=\"class in p\">C<\/a><\/div>\n+                    <div class=\"col-last even-row-color class-summary class-summary-tab2\">&nbsp;<\/div>\"\"\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"block\"><pre><code>Leading code block\n+                    <\/code><\/pre>\n+                    <p>Lorum ipsum.<\/p>\"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testTrailingCodeBlock(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    \/\/\/ Lorum ipsum.\n+                    \/\/\/\n+                    \/\/\/     Trailing code block\n+                    public class C { }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"--no-platform-links\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"block\"><p>Lorum ipsum.<\/p>\n+                    <pre><code>Trailing code block\n+                    <\/code><\/pre>\n+                    <\/div>\"\"\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownCodeBlocks.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -412,0 +412,26 @@\n+*\/\n+\n+    \/\/\/     Indented Code Block\n+    \/\/\/ Lorum ipsum.\n+    void indentedCodeBlock_leading() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: empty\n+  body: 1\n+    RawText[MARKDOWN, pos:0, ____Indented_Code_Block|Lorum_ipsum.]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/\/\/ Lorum ipsum.\n+    \/\/\/\n+    \/\/\/     Indented Code Block\n+    void indentedCodeBlock_trailing() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: 1\n+    RawText[MARKDOWN, pos:0, Lorum_ipsum.]\n+  body: 1\n+    RawText[MARKDOWN, pos:18, Indented_Code_Block]\n+  block tags: empty\n+]\n","filename":"test\/langtools\/tools\/javac\/doctree\/MarkdownTest.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}