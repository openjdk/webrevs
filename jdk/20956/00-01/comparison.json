{"files":[{"patch":"@@ -289,0 +289,4 @@\n+        if (textKind == DocTree.Kind.MARKDOWN) {\n+            initMarkdownLine();\n+        }\n+\n@@ -295,5 +299,1 @@\n-                        markdown.update();\n-                        if (markdown.isIndentedCodeBlock()) {\n-                            markdown.skipLine();\n-                            lastNonWhite = bp - 1; \/\/ don't include newline or EOF\n-                        }\n+                        initMarkdownLine();\n@@ -492,0 +492,11 @@\n+    void initMarkdownLine() {\n+        if (textStart == -1) {\n+            textStart = bp;\n+        }\n+        markdown.update();\n+        if (markdown.isIndentedCodeBlock()) {\n+            markdown.skipLine();\n+            lastNonWhite = bp - 1; \/\/ no not include newline or EOF\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -546,0 +546,46 @@\n+\n+    \/\/ this example is derived from the test case in JDK-8338525\n+    @Test\n+    public void testLeadingTrailingCodeBlockWithAnnotations(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/     @Override\n+                        \/\/\/     void m() {}\n+                        \/\/\/\n+                        \/\/\/ Plain text\n+                        \/\/\/\n+                        \/\/\/     @Override\n+                        \/\/\/     void m() {}\n+                        public void m() {}\n+                    }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"--no-platform-links\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color method-summary-table method-summary-table-tab2 \\\n+                    method-summary-table-tab4\"><code>void<\/code><\/div>\n+                    <div class=\"col-second even-row-color method-summary-table method-summary-table-tab2 \\\n+                    method-summary-table-tab4\"><code><a href=\"#m()\" class=\"member-name-link\">m<\/a>()<\/code><\/div>\n+                    <div class=\"col-last even-row-color method-summary-table method-summary-table-tab2 \\\n+                    method-summary-table-tab4\">&nbsp;<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;\\\n+                    <span class=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">m<\/span>()<\/div>\n+                    <div class=\"block\"><pre><code>@Override\n+                    void m() {}\n+                    <\/code><\/pre>\n+                    <p>Plain text<\/p>\n+                    <pre><code>@Override\n+                    void m() {}\n+                    <\/code><\/pre>\n+                    <\/div>\"\"\");\n+\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownCodeBlocks.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1046,0 +1046,1 @@\n+        \/\/ See comment in MarkdownTest for explanation of dummy and Override\n@@ -1047,1 +1048,1 @@\n-            return s.replaceAll(\"\\n[ \\t]+@(?!([@*]|dummy))\", \"\\n@\");\n+            return s.replaceAll(\"\\n[ \\t]+@(?!([@*]|(dummy|Override)))\", \"\\n@\");\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * (\"@Override\" is also treated the same way, as a commonly found annotation.)\n@@ -642,0 +643,19 @@\n+\/\/ The following test case is derived from the test case in JDK-8338525.\n+\n+    \/\/\/     @Override\n+    \/\/\/     void m() { }\n+    \/\/\/\n+    \/\/\/ Plain text\n+    \/\/\/\n+    \/\/\/     @Override\n+    \/\/\/     void m() { }\n+    void leadingTrailingCodeBlocksWithAnnos() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: empty\n+  body: 1\n+    RawText[MARKDOWN, pos:0, ____@Override|____void_m()_{_}||...||____@Override|____void_m()_{_}]\n+  block tags: empty\n+]\n+*\/\n+\n","filename":"test\/langtools\/tools\/javac\/doctree\/MarkdownTest.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}