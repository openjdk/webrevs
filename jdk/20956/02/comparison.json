{"files":[{"patch":"@@ -289,0 +289,4 @@\n+        if (textKind == DocTree.Kind.MARKDOWN) {\n+            initMarkdownLine();\n+        }\n+\n@@ -295,4 +299,1 @@\n-                        markdown.update();\n-                        if (markdown.isIndentedCodeBlock()) {\n-                            markdown.skipLine();\n-                        }\n+                        initMarkdownLine();\n@@ -491,0 +492,11 @@\n+    void initMarkdownLine() {\n+        if (textStart == -1) {\n+            textStart = bp;\n+        }\n+        markdown.update();\n+        if (markdown.isIndentedCodeBlock()) {\n+            markdown.skipLine();\n+            lastNonWhite = bp - 1; \/\/ do not include newline or EOF\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -595,17 +595,3 @@\n-                            int breakOffset = getSentenceBreak(dt.getKind(), content, peekedNext);\n-                            if (breakOffset > 0) {\n-                                \/\/ the end of sentence is within the current node;\n-                                \/\/ split it, skipping whitespace in between the two parts\n-                                var fsPart = newNode(dt.getKind(), dt.pos, content.substring(0, breakOffset).stripTrailing());\n-                                fs.add(fsPart);\n-                                int wsOffset = skipWhiteSpace(content, breakOffset);\n-                                if (wsOffset > 0) {\n-                                    var bodyPart = newNode(dt.getKind(), dt.pos + wsOffset, content.substring(wsOffset));\n-                                    body.add(bodyPart);\n-                                }\n-                                foundFirstSentence = true;\n-                            } else if (peekedNext != null && isSentenceBreak(peekedNext, false)) {\n-                                \/\/ the next node is a sentence break, so this is the end of the first sentence;\n-                                \/\/ remove trailing spaces\n-                                var fsPart = newNode(dt.getKind(), dt.pos, content.stripTrailing());\n-                                fs.add(fsPart);\n+                            if (isFirst && dt.getKind() == Kind.MARKDOWN && isIndented(content)) {\n+                                \/\/ begins with an indented code block (unusual), so no first sentence\n+                                body.add(dt);\n@@ -614,2 +600,22 @@\n-                                \/\/ no sentence break found; keep scanning\n-                                fs.add(dt);\n+                                int breakOffset = getSentenceBreak(dt.getKind(), content, peekedNext);\n+                                if (breakOffset > 0) {\n+                                    \/\/ the end of sentence is within the current node;\n+                                    \/\/ split it, skipping whitespace in between the two parts\n+                                    var fsPart = newNode(dt.getKind(), dt.pos, content.substring(0, breakOffset).stripTrailing());\n+                                    fs.add(fsPart);\n+                                    int wsOffset = skipWhiteSpace(content, breakOffset);\n+                                    if (wsOffset > 0) {\n+                                        var bodyPart = newNode(dt.getKind(), dt.pos + wsOffset, content.substring(wsOffset));\n+                                        body.add(bodyPart);\n+                                    }\n+                                    foundFirstSentence = true;\n+                                } else if (peekedNext != null && isSentenceBreak(peekedNext, false)) {\n+                                    \/\/ the next node is a sentence break, so this is the end of the first sentence;\n+                                    \/\/ remove trailing spaces\n+                                    var fsPart = newNode(dt.getKind(), dt.pos, content.stripTrailing());\n+                                    fs.add(fsPart);\n+                                    foundFirstSentence = true;\n+                                } else {\n+                                    \/\/ no sentence break found; keep scanning\n+                                    fs.add(dt);\n+                                }\n@@ -654,0 +660,5 @@\n+        private static final Pattern INDENT = Pattern.compile(\" {4}| {0,3}\\t\");\n+        private boolean isIndented(String s) {\n+            return INDENT.matcher(s).lookingAt();\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":30,"deletions":19,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -489,0 +489,103 @@\n+\n+    @Test\n+    public void testLeadingCodeBlock(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    \/\/\/     Leading code block\n+                    \/\/\/ Lorum ipsum.\n+                    public class C { }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"--no-platform-links\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ check first sentence is empty in package summary file\n+        checkOutput(\"p\/package-summary.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color class-summary class-summary-tab2\"><a href=\"C.html\" title=\"class in p\">C<\/a><\/div>\n+                    <div class=\"col-last even-row-color class-summary class-summary-tab2\">&nbsp;<\/div>\"\"\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"block\"><pre><code>Leading code block\n+                    <\/code><\/pre>\n+                    <p>Lorum ipsum.<\/p>\"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testTrailingCodeBlock(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    \/\/\/ Lorum ipsum.\n+                    \/\/\/\n+                    \/\/\/     Trailing code block\n+                    public class C { }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"--no-platform-links\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"block\"><p>Lorum ipsum.<\/p>\n+                    <pre><code>Trailing code block\n+                    <\/code><\/pre>\n+                    <\/div>\"\"\");\n+    }\n+\n+    \/\/ this example is derived from the test case in JDK-8338525\n+    @Test\n+    public void testLeadingTrailingCodeBlockWithAnnotations(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/     @Override\n+                        \/\/\/     void m() {}\n+                        \/\/\/\n+                        \/\/\/ Plain text\n+                        \/\/\/\n+                        \/\/\/     @Override\n+                        \/\/\/     void m() {}\n+                        public void m() {}\n+                    }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"--no-platform-links\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color method-summary-table method-summary-table-tab2 \\\n+                    method-summary-table-tab4\"><code>void<\/code><\/div>\n+                    <div class=\"col-second even-row-color method-summary-table method-summary-table-tab2 \\\n+                    method-summary-table-tab4\"><code><a href=\"#m()\" class=\"member-name-link\">m<\/a>()<\/code><\/div>\n+                    <div class=\"col-last even-row-color method-summary-table method-summary-table-tab2 \\\n+                    method-summary-table-tab4\">&nbsp;<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;\\\n+                    <span class=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">m<\/span>()<\/div>\n+                    <div class=\"block\"><pre><code>@Override\n+                    void m() {}\n+                    <\/code><\/pre>\n+                    <p>Plain text<\/p>\n+                    <pre><code>@Override\n+                    void m() {}\n+                    <\/code><\/pre>\n+                    <\/div>\"\"\");\n+\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownCodeBlocks.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -1046,0 +1046,1 @@\n+        \/\/ See comment in MarkdownTest for explanation of dummy and Override\n@@ -1047,1 +1048,1 @@\n-            return s.replaceAll(\"\\n[ \\t]+@(?!([@*]|dummy))\", \"\\n@\");\n+            return s.replaceAll(\"\\n[ \\t]+@(?!([@*]|(dummy|Override)))\", \"\\n@\");\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * (\"@Override\" is also treated the same way, as a commonly found annotation.)\n@@ -412,0 +413,26 @@\n+*\/\n+\n+    \/\/\/     Indented Code Block\n+    \/\/\/ Lorum ipsum.\n+    void indentedCodeBlock_leading() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: empty\n+  body: 1\n+    RawText[MARKDOWN, pos:0, ____Indented_Code_Block|Lorum_ipsum.]\n+  block tags: empty\n+]\n+*\/\n+\n+    \/\/\/ Lorum ipsum.\n+    \/\/\/\n+    \/\/\/     Indented Code Block\n+    void indentedCodeBlock_trailing() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: 1\n+    RawText[MARKDOWN, pos:0, Lorum_ipsum.]\n+  body: 1\n+    RawText[MARKDOWN, pos:18, Indented_Code_Block]\n+  block tags: empty\n+]\n@@ -616,0 +643,19 @@\n+\/\/ The following test case is derived from the test case in JDK-8338525.\n+\n+    \/\/\/     @Override\n+    \/\/\/     void m() { }\n+    \/\/\/\n+    \/\/\/ Plain text\n+    \/\/\/\n+    \/\/\/     @Override\n+    \/\/\/     void m() { }\n+    void leadingTrailingCodeBlocksWithAnnos() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:0\n+  firstSentence: empty\n+  body: 1\n+    RawText[MARKDOWN, pos:0, ____@Override|____void_m()_{_}||...||____@Override|____void_m()_{_}]\n+  block tags: empty\n+]\n+*\/\n+\n","filename":"test\/langtools\/tools\/javac\/doctree\/MarkdownTest.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"}]}