{"files":[{"patch":"@@ -368,0 +368,21 @@\n+\/\/ This strategy replaces the OpaqueLoopInit and OpaqueLoopStride nodes with the provided init and stride nodes,\n+\/\/ respectively.\n+class ReplaceInitAndStrideStrategy : public TransformStrategyForOpaqueLoopNodes {\n+  Node* const _new_init;\n+  Node* const _new_stride;\n+\n+ public:\n+  ReplaceInitAndStrideStrategy(Node* new_init, Node* new_stride)\n+      : _new_init(new_init),\n+        _new_stride(new_stride) {}\n+  NONCOPYABLE(ReplaceInitAndStrideStrategy);\n+\n+  Node* transform_opaque_init(OpaqueLoopInitNode* opaque_init) const override {\n+    return _new_init;\n+  }\n+\n+  Node* transform_opaque_stride(OpaqueLoopStrideNode* opaque_stride) const override {\n+    return _new_stride;\n+  }\n+};\n+\n@@ -384,0 +405,9 @@\n+\/\/ Same as clone() but instead of cloning the OpaqueLoopInit and OpaqueLoopStride node, we replace them with the provided\n+\/\/ 'new_init' and 'new_stride' nodes, respectively.\n+OpaqueTemplateAssertionPredicateNode*\n+TemplateAssertionExpression::clone_and_replace_init_and_stride(Node* new_control, Node* new_init, Node* new_stride,\n+                                                               PhaseIdealLoop* phase) const {\n+  ReplaceInitAndStrideStrategy replace_init_and_stride_strategy(new_init, new_stride);\n+  return clone(replace_init_and_stride_strategy, new_control, phase);\n+}\n+\n@@ -777,1 +807,1 @@\n-    const IfNode* template_assertion_predicate, Node* new_control, Node* new_init) const {\n+    const IfNode* template_assertion_predicate, Node* new_control, Node* new_init, Node* new_stride) const {\n@@ -779,1 +809,1 @@\n-      create_assertion_expression_from_template(template_assertion_predicate, new_control, new_init);\n+      create_assertion_expression_from_template(template_assertion_predicate, new_control, new_init, new_stride);\n@@ -831,1 +861,2 @@\n-                                                                                Node* new_control, Node* new_init) const {\n+                                                                                Node* new_control, Node* new_init,\n+                                                                                Node* new_stride) const {\n@@ -836,1 +867,1 @@\n-      template_assertion_expression.clone_and_replace_init(new_control, new_init, _phase);\n+      template_assertion_expression.clone_and_replace_init_and_stride(new_control, new_init, new_stride, _phase);\n@@ -891,0 +922,1 @@\n+      _stride(target_loop_head->stride()),\n@@ -932,1 +964,2 @@\n-      initialized_assertion_predicate_creator.create_from_template(template_head, new_control, _init);\n+      initialized_assertion_predicate_creator.create_from_template(template_head, new_control, _init, _stride);\n+\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":38,"deletions":5,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -495,0 +495,2 @@\n+  OpaqueTemplateAssertionPredicateNode* clone_and_replace_init_and_stride(Node* new_control, Node* new_init,\n+                                                                          Node* new_stride, PhaseIdealLoop* phase) const;\n@@ -635,1 +637,1 @@\n-                                                     Node* new_init) const;\n+                                                     Node* new_init, Node* new_stride) const;\n@@ -644,1 +646,2 @@\n-                                                                                     Node* new_control, Node* new_init) const;\n+                                                                                     Node* new_control, Node* new_init,\n+                                                                                     Node* new_stride) const;\n@@ -1035,0 +1038,1 @@\n+  Node* const _stride;\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}