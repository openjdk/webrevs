{"files":[{"patch":"@@ -72,1 +72,1 @@\n-ParsePredicateNode* ParsePredicate::init_parse_predicate(Node* parse_predicate_proj,\n+ParsePredicateNode* ParsePredicate::init_parse_predicate(const Node* parse_predicate_proj,\n@@ -103,1 +103,1 @@\n-Deoptimization::DeoptReason RuntimePredicate::uncommon_trap_reason(IfProjNode* if_proj) {\n+Deoptimization::DeoptReason RuntimePredicate::uncommon_trap_reason(const IfProjNode* if_proj) {\n@@ -111,1 +111,1 @@\n-bool RuntimePredicate::is_predicate(Node* maybe_success_proj) {\n+bool RuntimePredicate::is_predicate(const Node* maybe_success_proj) {\n@@ -153,1 +153,1 @@\n-                                                               PhaseIdealLoop* phase) const {\n+                                                               const PhaseIdealLoop* phase) const {\n@@ -164,1 +164,1 @@\n-bool TemplateAssertionPredicate::is_predicate(Node* node) {\n+bool TemplateAssertionPredicate::is_predicate(const Node* node) {\n@@ -297,1 +297,1 @@\n-bool InitializedAssertionPredicate::is_predicate(Node* node) {\n+bool InitializedAssertionPredicate::is_predicate(const Node* node) {\n@@ -313,1 +313,1 @@\n-void RegularPredicateBlock::verify_block(Node* tail) {\n+void RegularPredicateBlock::verify_block(Node* tail) const {\n@@ -329,1 +329,1 @@\n-  Node* const _new_ctrl;\n+  Node* const _new_control;\n@@ -332,1 +332,1 @@\n-  CloneStrategy(PhaseIdealLoop* phase, Node* new_ctrl)\n+  CloneStrategy(PhaseIdealLoop* phase, Node* new_control)\n@@ -334,1 +334,1 @@\n-        _new_ctrl(new_ctrl) {}\n+        _new_control(new_control) {}\n@@ -338,1 +338,1 @@\n-    return _phase->clone_and_register(opaque_init, _new_ctrl)->as_OpaqueLoopInit();\n+    return _phase->clone_and_register(opaque_init, _new_control)->as_OpaqueLoopInit();\n@@ -342,1 +342,1 @@\n-    return _phase->clone_and_register(opaque_stride, _new_ctrl)->as_OpaqueLoopStride();\n+    return _phase->clone_and_register(opaque_stride, _new_control)->as_OpaqueLoopStride();\n@@ -349,1 +349,1 @@\n-  Node* const _new_ctrl;\n+  Node* const _new_control;\n@@ -353,1 +353,1 @@\n-  ReplaceInitAndCloneStrideStrategy(Node* new_init, Node* new_ctrl, PhaseIdealLoop* phase)\n+  ReplaceInitAndCloneStrideStrategy(Node* new_control, Node* new_init, PhaseIdealLoop* phase)\n@@ -355,1 +355,1 @@\n-        _new_ctrl(new_ctrl),\n+        _new_control(new_control),\n@@ -364,22 +364,1 @@\n-    return _phase->clone_and_register(opaque_stride, _new_ctrl)->as_OpaqueLoopStride();\n-  }\n-};\n-\n-\/\/ This strategy replaces the OpaqueLoopInit and OpaqueLoopStride nodes with the provided init and stride nodes,\n-\/\/ respectively.\n-class ReplaceInitAndStrideStrategy : public TransformStrategyForOpaqueLoopNodes {\n-  Node* const _new_init;\n-  Node* const _new_stride;\n-\n- public:\n-  ReplaceInitAndStrideStrategy(Node* new_init, Node* new_stride)\n-      : _new_init(new_init),\n-        _new_stride(new_stride) {}\n-  NONCOPYABLE(ReplaceInitAndStrideStrategy);\n-\n-  Node* transform_opaque_init(OpaqueLoopInitNode* opaque_init) const override {\n-    return _new_init;\n-  }\n-\n-  Node* transform_opaque_stride(OpaqueLoopStrideNode* opaque_stride) const override {\n-    return _new_stride;\n+    return _phase->clone_and_register(opaque_stride, _new_control)->as_OpaqueLoopStride();\n@@ -391,3 +370,3 @@\n-\/\/ same graph structure as found for this Template Assertion Expression. The cloned nodes get 'new_ctrl' as ctrl. There\n-\/\/ is no other update done for the cloned nodes. Return the newly cloned OpaqueTemplateAssertionPredicate.\n-OpaqueTemplateAssertionPredicateNode* TemplateAssertionExpression::clone(Node* new_control, PhaseIdealLoop* phase) {\n+\/\/ same graph structure as found for this Template Assertion Expression. The cloned nodes get 'new_control' as control.\n+\/\/ There is no other update done for the cloned nodes. Return the newly cloned OpaqueTemplateAssertionPredicate.\n+OpaqueTemplateAssertionPredicateNode* TemplateAssertionExpression::clone(Node* new_control, PhaseIdealLoop* phase) const {\n@@ -400,2 +379,2 @@\n-TemplateAssertionExpression::clone_and_replace_init(Node* new_control, Node* new_init, PhaseIdealLoop* phase) {\n-  ReplaceInitAndCloneStrideStrategy replace_init_and_clone_stride_strategy(new_init, new_control, phase);\n+TemplateAssertionExpression::clone_and_replace_init(Node* new_control, Node* new_init, PhaseIdealLoop* phase) const {\n+  ReplaceInitAndCloneStrideStrategy replace_init_and_clone_stride_strategy(new_control, new_init, phase);\n@@ -405,9 +384,0 @@\n-\/\/ Same as clone() but instead of cloning the OpaqueLoopInit and OpaqueLoopStride node, we replace them with the provided\n-\/\/ 'new_init' and 'new_stride' nodes, respectively.\n-OpaqueTemplateAssertionPredicateNode*\n-TemplateAssertionExpression::clone_and_replace_init_and_stride(Node* new_control, Node* new_init, Node* new_stride,\n-                                                               PhaseIdealLoop* phase) {\n-  ReplaceInitAndStrideStrategy replace_init_and_stride_strategy(new_init, new_stride);\n-  return clone(replace_init_and_stride_strategy, new_control, phase);\n-}\n-\n@@ -493,2 +463,2 @@\n-TemplateAssertionExpression::clone(const TransformStrategyForOpaqueLoopNodes& transform_strategy, Node* new_ctrl,\n-                                   PhaseIdealLoop* phase) {\n+TemplateAssertionExpression::clone(const TransformStrategyForOpaqueLoopNodes& transform_strategy, Node* new_control,\n+                                   PhaseIdealLoop* phase) const {\n@@ -503,1 +473,2 @@\n-  const OrigToNewHashtable& orig_to_new = data_node_graph.clone_with_opaque_loop_transform_strategy(transform_strategy, new_ctrl);\n+  const OrigToNewHashtable& orig_to_new = data_node_graph.clone_with_opaque_loop_transform_strategy(transform_strategy,\n+                                                                                                    new_control);\n@@ -540,1 +511,1 @@\n-void TemplateAssertionExpression::replace_opaque_stride_input(Node* new_stride, PhaseIterGVN& igvn) {\n+void TemplateAssertionExpression::replace_opaque_stride_input(Node* new_stride, PhaseIterGVN& igvn) const {\n@@ -558,1 +529,1 @@\n-TemplateAssertionExpression::clone_and_fold_opaque_loop_nodes(Node* new_control, PhaseIdealLoop* phase) {\n+TemplateAssertionExpression::clone_and_fold_opaque_loop_nodes(Node* new_control, PhaseIdealLoop* phase) const {\n@@ -586,1 +557,1 @@\n-bool TemplateAssertionExpressionNode::is_template_assertion_predicate(Node* node) {\n+bool TemplateAssertionExpressionNode::is_template_assertion_predicate(const Node* node) {\n@@ -647,1 +618,1 @@\n-                                                             const AssertionPredicateType assertion_predicate_type) {\n+                                                             const AssertionPredicateType assertion_predicate_type) const {\n@@ -656,1 +627,1 @@\n-                                                                const AssertionPredicateType assertion_predicate_type) {\n+                                                                const AssertionPredicateType assertion_predicate_type) const {\n@@ -672,1 +643,1 @@\n-                                                const AssertionPredicateType assertion_predicate_type) {\n+                                                const AssertionPredicateType assertion_predicate_type) const {\n@@ -683,1 +654,1 @@\n-                                                    const AssertionPredicateType assertion_predicate_type) {\n+                                                    const AssertionPredicateType assertion_predicate_type) const {\n@@ -695,1 +666,1 @@\n-IfTrueNode* AssertionPredicateIfCreator::create_success_path(IfNode* if_node, IdealLoopTree* loop) {\n+IfTrueNode* AssertionPredicateIfCreator::create_success_path(IfNode* if_node, IdealLoopTree* loop) const {\n@@ -701,1 +672,1 @@\n-void AssertionPredicateIfCreator::create_fail_path(IfNode* if_node, IdealLoopTree* loop, const char* halt_message) {\n+void AssertionPredicateIfCreator::create_fail_path(IfNode* if_node, IdealLoopTree* loop, const char* halt_message) const {\n@@ -708,1 +679,1 @@\n-                                                   const char* halt_message) {\n+                                                   const char* halt_message) const {\n@@ -717,1 +688,1 @@\n-OpaqueLoopInitNode* TemplateAssertionPredicateCreator::create_opaque_init(Node* new_control) {\n+OpaqueLoopInitNode* TemplateAssertionPredicateCreator::create_opaque_init(Node* new_control) const {\n@@ -763,1 +734,1 @@\n-IfTrueNode* TemplateAssertionPredicateCreator::create(Node* new_control) {\n+IfTrueNode* TemplateAssertionPredicateCreator::create(Node* new_control) const {\n@@ -806,1 +777,1 @@\n-    IfNode* template_assertion_predicate, Node* new_control, Node* new_init, Node* new_stride) const {\n+    const IfNode* template_assertion_predicate, Node* new_control, Node* new_init) const {\n@@ -808,1 +779,1 @@\n-      create_assertion_expression_from_template(template_assertion_predicate, new_control, new_init, new_stride);\n+      create_assertion_expression_from_template(template_assertion_predicate, new_control, new_init);\n@@ -859,3 +830,2 @@\n-InitializedAssertionPredicateCreator::create_assertion_expression_from_template(IfNode* template_assertion_predicate,\n-                                                                                Node* new_control, Node* new_init,\n-                                                                                Node* new_stride) const {\n+InitializedAssertionPredicateCreator::create_assertion_expression_from_template(const IfNode* template_assertion_predicate,\n+                                                                                Node* new_control, Node* new_init) const {\n@@ -866,1 +836,1 @@\n-      template_assertion_expression.clone_and_replace_init_and_stride(new_control, new_init, new_stride, _phase);\n+      template_assertion_expression.clone_and_replace_init(new_control, new_init, _phase);\n@@ -921,1 +891,0 @@\n-      _stride(target_loop_head->stride()),\n@@ -963,2 +932,1 @@\n-      initialized_assertion_predicate_creator.create_from_template(template_head, new_control, _init, _stride);\n-\n+      initialized_assertion_predicate_creator.create_from_template(template_head, new_control, _init);\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":43,"deletions":75,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-  static ParsePredicateNode* init_parse_predicate(Node* parse_predicate_proj, Deoptimization::DeoptReason deopt_reason);\n+  static ParsePredicateNode* init_parse_predicate(const Node* parse_predicate_proj, Deoptimization::DeoptReason deopt_reason);\n@@ -354,1 +354,1 @@\n-  static bool is_predicate(Node* maybe_success_proj);\n+  static bool is_predicate(const Node* maybe_success_proj);\n@@ -356,1 +356,1 @@\n-  static Deoptimization::DeoptReason uncommon_trap_reason(IfProjNode* if_proj);\n+  static Deoptimization::DeoptReason uncommon_trap_reason(const IfProjNode* if_proj);\n@@ -412,1 +412,1 @@\n-                                     PhaseIdealLoop* phase) const;\n+                                     const PhaseIdealLoop* phase) const;\n@@ -414,1 +414,1 @@\n-  static bool is_predicate(Node* node);\n+  static bool is_predicate(const Node* node);\n@@ -460,1 +460,1 @@\n-  static bool is_predicate(Node* node);\n+  static bool is_predicate(const Node* node);\n@@ -489,1 +489,1 @@\n-                                              Node* new_ctrl, PhaseIdealLoop* phase);\n+                                              Node* new_control, PhaseIdealLoop* phase) const;\n@@ -492,1 +492,1 @@\n-  OpaqueTemplateAssertionPredicateNode* clone(Node* new_control, PhaseIdealLoop* phase);\n+  OpaqueTemplateAssertionPredicateNode* clone(Node* new_control, PhaseIdealLoop* phase) const;\n@@ -494,5 +494,3 @@\n-                                                               PhaseIdealLoop* phase);\n-  OpaqueTemplateAssertionPredicateNode* clone_and_replace_init_and_stride(Node* new_control, Node* new_init,\n-                                                                          Node* new_stride, PhaseIdealLoop* phase);\n-  void replace_opaque_stride_input(Node* new_stride, PhaseIterGVN& igvn);\n-  OpaqueInitializedAssertionPredicateNode* clone_and_fold_opaque_loop_nodes(Node* new_ctrl, PhaseIdealLoop* phase);\n+                                                               PhaseIdealLoop* phase) const;\n+  void replace_opaque_stride_input(Node* new_stride, PhaseIterGVN& igvn) const;\n+  OpaqueInitializedAssertionPredicateNode* clone_and_fold_opaque_loop_nodes(Node* new_control, PhaseIdealLoop* phase) const;\n@@ -517,1 +515,1 @@\n-  static bool is_template_assertion_predicate(Node* node);\n+  static bool is_template_assertion_predicate(const Node* node);\n@@ -584,1 +582,1 @@\n-                                     AssertionPredicateType assertion_predicate_type);\n+                                     AssertionPredicateType assertion_predicate_type) const;\n@@ -586,1 +584,1 @@\n-                                  AssertionPredicateType assertion_predicate_type);\n+                                  AssertionPredicateType assertion_predicate_type) const;\n@@ -589,1 +587,1 @@\n-                     AssertionPredicateType assertion_predicate_type);\n+                     AssertionPredicateType assertion_predicate_type) const;\n@@ -591,4 +589,4 @@\n-                         AssertionPredicateType assertion_predicate_type);\n-  IfTrueNode* create_success_path(IfNode* if_node, IdealLoopTree* loop);\n-  void create_fail_path(IfNode* if_node, IdealLoopTree* loop, const char* halt_message);\n-  void create_halt_node(IfFalseNode* fail_proj, IdealLoopTree* loop, const char* halt_message);\n+                         AssertionPredicateType assertion_predicate_type) const;\n+  IfTrueNode* create_success_path(IfNode* if_node, IdealLoopTree* loop) const;\n+  void create_fail_path(IfNode* if_node, IdealLoopTree* loop, const char* halt_message) const;\n+  void create_halt_node(IfFalseNode* fail_proj, IdealLoopTree* loop, const char* halt_message) const;\n@@ -605,1 +603,1 @@\n-  OpaqueLoopInitNode* create_opaque_init(Node* new_control);\n+  OpaqueLoopInitNode* create_opaque_init(Node* new_control) const;\n@@ -625,1 +623,1 @@\n-  IfTrueNode* create(Node* new_control);\n+  IfTrueNode* create(Node* new_control) const;\n@@ -636,2 +634,2 @@\n-  InitializedAssertionPredicate create_from_template(IfNode* template_assertion_predicate, Node* new_control,\n-                                                     Node* new_init, Node* new_stride) const;\n+  InitializedAssertionPredicate create_from_template(const IfNode* template_assertion_predicate, Node* new_control,\n+                                                     Node* new_init) const;\n@@ -645,3 +643,2 @@\n-  OpaqueInitializedAssertionPredicateNode* create_assertion_expression_from_template(IfNode* template_assertion_predicate,\n-                                                                                     Node* new_control, Node* new_init,\n-                                                                                     Node* new_stride) const;\n+  OpaqueInitializedAssertionPredicateNode* create_assertion_expression_from_template(const IfNode* template_assertion_predicate,\n+                                                                                     Node* new_control, Node* new_init) const;\n@@ -795,1 +792,1 @@\n-  DEBUG_ONLY(void verify_block(Node* tail);)\n+  DEBUG_ONLY(void verify_block(Node* tail) const;)\n@@ -1038,1 +1035,0 @@\n-  Node* const _stride;\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":26,"deletions":30,"binary":false,"changes":56,"status":"modified"}]}