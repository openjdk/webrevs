{"files":[{"patch":"@@ -35,0 +35,3 @@\n+\/\/ Note: initialization value is unchanged for -UseCompressedClassPointers, so\n+\/\/ the bit mirroring UseCompressedClassPointers is off and matches the switch.\n+uint64_t CompressedKlassPointers::_compressionInfo;\n@@ -38,0 +41,19 @@\n+void CompressedKlassPointers::set_base_and_shift(address thebase, int theshift) {\n+  assert(UseCompressedClassPointers, \"only for compressed klass code\");\n+  assert(theshift == 0 || theshift == LogKlassAlignmentInBytes, \"invalid shift for klass ptrs\");\n+  _base = thebase;\n+  _shift = theshift;\n+\n+  \/\/ Encode all three base+shift+UseCCP into a single 64-bit word.\n+  \/\/ This would allow optimizing the fast-path with a single load.\n+  const uint64_t base_i = (uint64_t)_base;\n+  assert((base_i & ~mask_base) == 0, \"Base not aligned?\");\n+  assert(_shift <= 63, \"Sanity\");\n+\n+  _compressionInfo = (uint64_t)_base | (uint64_t)_shift | (1 << bitpos_useccp);\n+\n+  assert(base() == _base, \"compressionInfo encoding\");\n+  assert(shift() == _shift, \"compressionInfo encoding\");\n+  assert(use_compressed_class_pointers() == true, \"compressionInfo encoding\");\n+}\n+\n@@ -54,2 +76,1 @@\n-  set_base(requested_base);\n-  set_shift(requested_shift);\n+  set_base_and_shift(requested_base, requested_shift);\n@@ -89,2 +110,1 @@\n-  set_base(base);\n-  set_shift(shift);\n+  set_base_and_shift(base, shift);\n@@ -117,10 +137,0 @@\n-void CompressedKlassPointers::set_base(address base) {\n-  assert(UseCompressedClassPointers, \"no compressed klass ptrs?\");\n-  _base   = base;\n-}\n-\n-void CompressedKlassPointers::set_shift(int shift)       {\n-  assert(shift == 0 || shift == LogKlassAlignmentInBytes, \"invalid shift for klass ptrs\");\n-  _shift   = shift;\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -59,1 +59,16 @@\n-  static void set_base(address base);\n+  \/\/ Reduce the number of loads generated to decode an nKlass by packing all\n+  \/\/ relevant information (flag, base, shift) into a single 64-bit word. The\n+  \/\/ encoding base is aligned to metaspace reserve alignment (16Mb), so enough\n+  \/\/ space to hide additional info away in low bytes. It even allows us the luxury\n+  \/\/ to use 8 bits for shift and flag each, resulting in 8-bit moves used by the\n+  \/\/ compiler.\n+  \/\/ - Bit  [0-7]   shift\n+  \/\/ - Bit  8       UseCompressedClassPointers\n+  \/\/ - Bits [16-64] the base.\n+  static uint64_t _compressionInfo;\n+  static constexpr int base_alignment = 16;\n+  static constexpr uint64_t mask_base = ~right_n_bits(base_alignment);\n+  static constexpr int shift_bitlen = 8; \/\/ read with a mov8\n+  static constexpr int bitpos_useccp = shift_bitlen;\n+\n+  static void set_base_and_shift(address base, int shift);\n@@ -61,1 +76,0 @@\n-  static void set_shift(int shift);\n@@ -84,3 +98,4 @@\n-  static address  base()               { return  _base; }\n-  static size_t   range()              { return  _range; }\n-  static int      shift()              { return  _shift; }\n+  static bool     use_compressed_class_pointers() { return (_compressionInfo & nth_bit(bitpos_useccp)); }\n+  static address  base()             { return  (address)(_compressionInfo & mask_base); }\n+  static int      shift()            { return  (int)(_compressionInfo & right_n_bits(shift_bitlen)); }\n+  static size_t   range()            { return  _range; }\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -98,1 +98,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -106,1 +106,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -115,1 +115,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -124,1 +124,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -134,1 +134,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -143,1 +143,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}