{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,2 +65,2 @@\n-    \/\/ default polling interval in seconds\n-    private static final int DEFAULT_POLLING_INTERVAL = 2;\n+    \/\/ polling interval in seconds\n+    private static final int POLLING_INTERVAL = 2;\n@@ -121,2 +121,1 @@\n-        \/\/ Extended modifiers may be used to specify the sensitivity level\n-        int sensitivity = DEFAULT_POLLING_INTERVAL;\n+        \/\/ no modifiers supported at this time\n@@ -126,8 +125,3 @@\n-\n-            if (ExtendedOptions.SENSITIVITY_HIGH.matches(modifier)) {\n-                sensitivity = ExtendedOptions.SENSITIVITY_HIGH.parameter();\n-            } else if (ExtendedOptions.SENSITIVITY_MEDIUM.matches(modifier)) {\n-                sensitivity = ExtendedOptions.SENSITIVITY_MEDIUM.parameter();\n-            } else if (ExtendedOptions.SENSITIVITY_LOW.matches(modifier)) {\n-                sensitivity = ExtendedOptions.SENSITIVITY_LOW.parameter();\n-            } else {\n+            if (!ExtendedOptions.SENSITIVITY_HIGH.matches(modifier) &&\n+                !ExtendedOptions.SENSITIVITY_MEDIUM.matches(modifier) &&\n+                !ExtendedOptions.SENSITIVITY_LOW.matches(modifier)) {\n@@ -145,1 +139,0 @@\n-            int value = sensitivity;\n@@ -150,1 +143,1 @@\n-                        return doPrivilegedRegister(path, eventSet, value);\n+                        return doPrivilegedRegister(path, eventSet);\n@@ -164,2 +157,1 @@\n-                                                 Set<? extends WatchEvent.Kind<?>> events,\n-                                                 int sensitivityInSeconds)\n+                                                 Set<? extends WatchEvent.Kind<?>> events)\n@@ -194,1 +186,1 @@\n-            watchKey.enable(events, sensitivityInSeconds);\n+            watchKey.enable(events);\n@@ -303,2 +295,2 @@\n-        \/\/ enables periodic polling\n-        void enable(Set<? extends WatchEvent.Kind<?>> events, long period) {\n+        \/\/ enables periodic polling with interval POLLING_INTERVAL\n+        void enable(Set<? extends WatchEvent.Kind<?>> events) {\n@@ -312,1 +304,2 @@\n-                    .scheduleAtFixedRate(thunk, period, period, TimeUnit.SECONDS);\n+                    .scheduleAtFixedRate(thunk, POLLING_INTERVAL,\n+                                         POLLING_INTERVAL, TimeUnit.SECONDS);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/PollingWatchService.java","additions":14,"deletions":21,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.nio.file.WatchKey;\n@@ -42,1 +41,0 @@\n-import java.io.OutputStream;\n@@ -96,45 +94,0 @@\n-\n-            \/\/ sleep a bit here to ensure that modification to the first file\n-            \/\/ can be detected by polling implementations (ie: last modified time\n-            \/\/ may not change otherwise).\n-            try { Thread.sleep(1000); } catch (InterruptedException e) { }\n-\n-            \/\/ modify files and check that events are received\n-            for (int i=0; i<10; i++) {\n-                Path file = files[RAND.nextInt(nFiles)];\n-                System.out.println(\"Modify: \" + file);\n-                try (OutputStream out = Files.newOutputStream(file)) {\n-                    out.write(new byte[100]);\n-                }\n-\n-                System.out.println(\"Waiting for event(s)...\");\n-                boolean eventReceived = false;\n-                WatchKey key = watcher.take();\n-                do {\n-                    for (WatchEvent<?> event: key.pollEvents()) {\n-                        if (event.kind() != ENTRY_MODIFY)\n-                            throw new RuntimeException(\"Unexpected event: \" + event);\n-                        Path name = ((WatchEvent<Path>)event).context();\n-                        if (name.equals(file.getFileName())) {\n-                            eventReceived = true;\n-                            break;\n-                        }\n-                    }\n-                    key.reset();\n-                    key = watcher.poll(POLL_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n-                } while (key != null);\n-\n-                \/\/ we should have received at least one ENTRY_MODIFY event\n-                if (eventReceived) {\n-                    System.out.println(\"Event OK\");\n-                } else {\n-                    Path parent = file.getParent();\n-                    String msg = String.format(\"No ENTRY_MODIFY event received for %s (dir: %s, sensitivity: %d)\",\n-                            file, parent, pathToTime.get(parent));\n-                    throw new RuntimeException(msg);\n-                }\n-\n-                \/\/ re-register the directories to force changing their sensitivity\n-                \/\/ level\n-                register(dirs, watcher);\n-            }\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/SensitivityModifier.java","additions":1,"deletions":48,"binary":false,"changes":49,"status":"modified"}]}