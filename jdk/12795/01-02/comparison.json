{"files":[{"patch":"@@ -29,1 +29,0 @@\n- * @build jdk.test.lib.Platform\n@@ -35,1 +34,0 @@\n-import java.nio.file.Files;\n@@ -39,0 +37,1 @@\n+import java.nio.file.WatchKey;\n@@ -42,2 +41,0 @@\n-import java.util.HashMap;\n-import java.util.Map;\n@@ -45,1 +42,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -47,1 +43,0 @@\n-import jdk.test.lib.Platform;\n@@ -51,4 +46,0 @@\n-    \/\/ on macOS and other platforms, watch services might be based on polling\n-    \/\/ requiring a longer timeout to detect events before returning\n-    static final long POLL_TIMEOUT_SECONDS =\n-        Platform.isLinux() || Platform.isWindows() ? 1 : 2;\n@@ -58,4 +49,2 @@\n-    static final Map<Path,Integer> pathToTime = new HashMap<>();\n-\n-    static void register(Path[] dirs, WatchService watcher) throws IOException {\n-        pathToTime.clear();\n+    static WatchKey register(Path dir, WatchService watcher)\n+        throws IOException {\n@@ -64,8 +53,4 @@\n-        for (int i=0; i<dirs.length; i++) {\n-            SensitivityWatchEventModifier sensitivity =\n-                sensitivities[RAND.nextInt(sensitivities.length)];\n-            Path dir = dirs[i];\n-            dir.register(watcher, new WatchEvent.Kind<?>[]{ ENTRY_MODIFY },\n-                sensitivity);\n-            pathToTime.put(dir, sensitivity.sensitivityValueInSeconds());\n-        }\n+        SensitivityWatchEventModifier sensitivity =\n+            sensitivities[RAND.nextInt(sensitivities.length)];\n+        return dir.register(watcher, new WatchEvent.Kind<?>[]{ ENTRY_MODIFY },\n+                            sensitivity);\n@@ -75,2 +60,2 @@\n-    static void doTest(Path top) throws Exception {\n-        FileSystem fs = top.getFileSystem();\n+    static void doTest(Path dir) throws Exception {\n+        FileSystem fs = dir.getFileSystem();\n@@ -78,0 +63,2 @@\n+            \/\/ register the directory (random sensitivity)\n+            WatchKey key = register(dir, watcher);\n@@ -79,12 +66,3 @@\n-            \/\/ create directories and files\n-            int nDirs = 5 + RAND.nextInt(20);\n-            int nFiles = 50 + RAND.nextInt(50);\n-            Path[] dirs = new Path[nDirs];\n-            Path[] files = new Path[nFiles];\n-            for (int i=0; i<nDirs; i++) {\n-                dirs[i] = Files.createDirectory(top.resolve(\"dir\" + i));\n-            }\n-            for (int i=0; i<nFiles; i++) {\n-                Path dir = dirs[RAND.nextInt(nDirs)];\n-                files[i] = Files.createFile(dir.resolve(\"file\" + i));\n-            }\n+            \/\/ check validity\n+            if (!key.isValid())\n+                throw new RuntimeException(\"Registration is invalid\");\n@@ -92,2 +70,2 @@\n-            \/\/ register the directories (random sensitivity)\n-            register(dirs, watcher);\n+            \/\/ cancel the registration\n+            key.cancel();\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/SensitivityModifier.java","additions":16,"deletions":38,"binary":false,"changes":54,"status":"modified"}]}