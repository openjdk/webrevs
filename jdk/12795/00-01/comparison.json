{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.nio.file.WatchKey;\n@@ -42,1 +41,0 @@\n-import java.io.OutputStream;\n@@ -96,45 +94,0 @@\n-\n-            \/\/ sleep a bit here to ensure that modification to the first file\n-            \/\/ can be detected by polling implementations (ie: last modified time\n-            \/\/ may not change otherwise).\n-            try { Thread.sleep(1000); } catch (InterruptedException e) { }\n-\n-            \/\/ modify files and check that events are received\n-            for (int i=0; i<10; i++) {\n-                Path file = files[RAND.nextInt(nFiles)];\n-                System.out.println(\"Modify: \" + file);\n-                try (OutputStream out = Files.newOutputStream(file)) {\n-                    out.write(new byte[100]);\n-                }\n-\n-                System.out.println(\"Waiting for event(s)...\");\n-                boolean eventReceived = false;\n-                WatchKey key = watcher.take();\n-                do {\n-                    for (WatchEvent<?> event: key.pollEvents()) {\n-                        if (event.kind() != ENTRY_MODIFY)\n-                            throw new RuntimeException(\"Unexpected event: \" + event);\n-                        Path name = ((WatchEvent<Path>)event).context();\n-                        if (name.equals(file.getFileName())) {\n-                            eventReceived = true;\n-                            break;\n-                        }\n-                    }\n-                    key.reset();\n-                    key = watcher.poll(POLL_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n-                } while (key != null);\n-\n-                \/\/ we should have received at least one ENTRY_MODIFY event\n-                if (eventReceived) {\n-                    System.out.println(\"Event OK\");\n-                } else {\n-                    Path parent = file.getParent();\n-                    String msg = String.format(\"No ENTRY_MODIFY event received for %s (dir: %s, sensitivity: %d)\",\n-                            file, parent, pathToTime.get(parent));\n-                    throw new RuntimeException(msg);\n-                }\n-\n-                \/\/ re-register the directories to force changing their sensitivity\n-                \/\/ level\n-                register(dirs, watcher);\n-            }\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/SensitivityModifier.java","additions":1,"deletions":48,"binary":false,"changes":49,"status":"modified"}]}