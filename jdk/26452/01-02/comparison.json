{"files":[{"patch":"@@ -36,1 +36,0 @@\n-import java.util.Arrays;\n@@ -108,4 +107,0 @@\n-            String masks = Arrays.stream(FlagTarget.values())\n-                                 .map(target -> \"    public static final long MASK_\" + target.name() + \"_FLAGS = \" + getMask(target2FlagBit2Fields, target) + \";\")\n-                                 .collect(Collectors.joining(\"\\n\"));\n-\n@@ -116,2 +111,0 @@\n-                            import com.sun.tools.javac.util.Assert;\n-\n@@ -132,2 +125,0 @@\n-                                ${masks}\n-\n@@ -146,5 +137,0 @@\n-                                public static void assertNoUnexpectedFlags(long flags, long mask) {\n-                                    Assert.check((flags & ~mask) == 0,\n-                                                 () -> \"Unexpected flags: 0x\" + Long.toHexString(flags & ~mask) + \"L (\" +\n-                                                       Flags.asFlagSet(flags & ~mask) + \")\");\n-                                }\n@@ -152,1 +138,1 @@\n-                            \"\"\".replace(\"${masks}\", masks));\n+                            \"\"\");\n@@ -157,11 +143,0 @@\n-    private static String getMask(Map<FlagTarget, Map<Integer, List<String>>> target2FlagBit2Fields,\n-                                FlagTarget target) {\n-        long mask = target2FlagBit2Fields.get(target)\n-                                        .keySet()\n-                                        .stream()\n-                                        .mapToLong(bit -> 1L << bit)\n-                                        .reduce(0, (l, r) -> l | r);\n-\n-        return \"0x\" + Long.toHexString(mask) + \"L\";\n-    }\n-\n@@ -176,1 +151,1 @@\n-    public enum FlagTarget {\n+    private enum FlagTarget {\n","filename":"make\/langtools\/tools\/flagsgenerator\/FlagsGenerator.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2130,3 +2130,0 @@\n-        FlagsEnum.assertNoUnexpectedFlags(tree.sym.flags_field,\n-                                          FlagsEnum.MASK_MODULE_FLAGS);\n-\n@@ -2151,7 +2148,0 @@\n-        FlagsEnum.assertNoUnexpectedFlags(tree.sym.flags_field,\n-                                          FlagsEnum.MASK_CLASS_FLAGS);\n-        tree.sym\n-            .getTypeParameters()\n-            .forEach(tv -> FlagsEnum.assertNoUnexpectedFlags(tv.flags_field,\n-                                                             FlagsEnum.MASK_TYPE_VAR_FLAGS));\n-\n@@ -2641,7 +2631,0 @@\n-        FlagsEnum.assertNoUnexpectedFlags(tree.sym.flags_field,\n-                                          FlagsEnum.MASK_METHOD_FLAGS);\n-        tree.sym\n-            .getTypeParameters()\n-            .forEach(tv -> FlagsEnum.assertNoUnexpectedFlags(tv.flags_field,\n-                                                             FlagsEnum.MASK_TYPE_VAR_FLAGS));\n-\n@@ -3735,3 +3718,0 @@\n-        FlagsEnum.assertNoUnexpectedFlags(tree.sym.flags_field,\n-                                          FlagsEnum.MASK_VARIABLE_FLAGS);\n-\n@@ -4372,3 +4352,0 @@\n-        FlagsEnum.assertNoUnexpectedFlags(env.toplevel.packge.flags_field,\n-                                          FlagsEnum.MASK_PACKAGE_FLAGS);\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -976,3 +976,0 @@\n-        FlagsEnum.assertNoUnexpectedFlags(v.flags_field,\n-                                          FlagsEnum.MASK_VARIABLE_FLAGS);\n-\n@@ -1004,3 +1001,0 @@\n-        FlagsEnum.assertNoUnexpectedFlags(m.flags_field,\n-                                          FlagsEnum.MASK_METHOD_FLAGS);\n-\n@@ -1544,3 +1538,0 @@\n-        FlagsEnum.assertNoUnexpectedFlags(c.flags_field,\n-                                          FlagsEnum.MASK_CLASS_FLAGS);\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}