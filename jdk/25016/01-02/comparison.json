{"files":[{"patch":"@@ -43,1 +43,0 @@\n-import java.util.List;\n@@ -48,1 +47,0 @@\n-import javax.net.ssl.X509TrustManager;\n@@ -50,1 +48,0 @@\n-import jdk.test.lib.security.SecurityUtils;\n@@ -93,8 +90,6 @@\n-        \/\/ Make sure only server's certificate signature algorithm is disabled.\n-        SecurityUtils.removeFromDisabledAlgs(\"jdk.certpath.disabledAlgorithms\",\n-                List.of(CLIENT_CERT_SIG_ALG, TRUSTED_CERT_SIG_ALG));\n-\n-        SecurityUtils.removeFromDisabledAlgs(\"jdk.tls.disabledAlgorithms\",\n-                List.of(CLIENT_CERT_SIG_ALG, TRUSTED_CERT_SIG_ALG));\n-\n-        SecurityUtils.addToDisabledTlsAlgs(SERVER_CERT_SIG_ALG);\n+        \/\/ Make sure both client and server support client's signature scheme,\n+        \/\/ so the exception happens later during KeyManager's algorithm check.\n+        System.setProperty(\n+                \"jdk.tls.client.SignatureSchemes\", \"rsa_pkcs1_sha384\");\n+        System.setProperty(\n+                \"jdk.tls.server.SignatureSchemes\", \"rsa_pkcs1_sha384\");\n@@ -114,1 +109,2 @@\n-                        assertTrue(ex instanceof javax.net.ssl.SSLHandshakeException);\n+                        assertTrue(\n+                                ex instanceof javax.net.ssl.SSLHandshakeException);\n@@ -116,1 +112,1 @@\n-                                + \"No available authentication scheme\");\n+                                + \"no cipher suites in common\");\n@@ -155,2 +151,3 @@\n-        \/\/ create SSL context\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+        \/\/ Use TLSv1.2 which supports SHA*withRSA algorithms for both handshake\n+        \/\/ and certificate signatures.\n+        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/PeerConstraintsCheck.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"}]}