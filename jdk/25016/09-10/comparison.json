{"files":[{"patch":"@@ -257,0 +257,1 @@\n+    \/\/ Certificate check.\n@@ -309,2 +310,2 @@\n-        \/\/ Check if this certificate is appropriate for this type of use\n-        \/\/ first check extensions, if they match, check expiration.\n+        \/\/ Check if this certificate is appropriate for this type of use.\n+        \/\/ First check extensions, if they match then check expiration.\n@@ -445,3 +446,3 @@\n-    \/\/ A candidate match\n-    \/\/ identifies the entry by builder and alias\n-    \/\/ and includes the result of the certificate check\n+    \/\/ A candidate match.\n+    \/\/ Identifies the entry by key store index and alias\n+    \/\/ and includes the result of the certificate check.\n@@ -525,1 +526,1 @@\n-                return sigAlgName.contains(pattern);\n+                return sigAlgName.endsWith(pattern);\n@@ -530,0 +531,1 @@\n+    \/\/ Make a list of key types.\n@@ -542,1 +544,1 @@\n-    \/\/ Make a Set out of the array.\n+    \/\/ Make a set out of the array.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerCertChecking.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -72,1 +72,2 @@\n- * This class tests against the certificate's expiration, key usage and issuers.\n+ * This class tests against the certificate's expiration, key usage, key type\n+ * and issuers.\n@@ -159,1 +160,1 @@\n-        issuerTestCase(enabled, kmAlg, \"RSA\",\n+        issuerAndKeyTypeTestCase(enabled, kmAlg, \"RSA\", \"RSA\",\n@@ -163,1 +164,1 @@\n-        issuerTestCase(enabled, kmAlg, \"RSA\",\n+        issuerAndKeyTypeTestCase(enabled, kmAlg, \"RSA\", \"RSA\",\n@@ -167,1 +168,1 @@\n-        issuerTestCase(enabled, kmAlg, \"RSA\",\n+        issuerAndKeyTypeTestCase(enabled, kmAlg, \"RSA\", \"RSA\",\n@@ -171,1 +172,2 @@\n-        issuerTestCase(enabled, kmAlg, \"RSA\", new Principal[]{}, true);\n+        issuerAndKeyTypeTestCase(enabled, kmAlg, \"RSA\", \"RSA\",\n+                new Principal[]{}, true);\n@@ -174,1 +176,1 @@\n-        issuerTestCase(enabled, kmAlg, \"RSA\", null, true);\n+        issuerAndKeyTypeTestCase(enabled, kmAlg, \"RSA\", \"RSA\", null, true);\n@@ -177,2 +179,3 @@\n-        issuerTestCase(enabled, kmAlg, \"RSA\",\n-                new Principal[]{new X500Principal(UNKNOWN_ISSUER_STRING)}, false);\n+        issuerAndKeyTypeTestCase(enabled, kmAlg, \"RSA\", \"RSA\",\n+                new Principal[]{new X500Principal(UNKNOWN_ISSUER_STRING)},\n+                false);\n@@ -180,1 +183,1 @@\n-        \/\/ --- Alias not found for given KeyType test cases ---\n+        \/\/ --- Key Type match test cases ---\n@@ -182,2 +185,2 @@\n-        \/\/ Null KeyType\n-        aliasNotFoundTestCase(kmAlg, \"RSA\", null);\n+        \/\/ Exact key type match.\n+        issuerAndKeyTypeTestCase(enabled, kmAlg, \"EC\", \"EC\", null, true);\n@@ -185,2 +188,17 @@\n-        \/\/ Wrong KeyType\n-        aliasNotFoundTestCase(kmAlg, \"RSA\", \"EC\");\n+        \/\/ Key type with a signature algorithm match.\n+        issuerAndKeyTypeTestCase(\n+                enabled, kmAlg, \"EC\", \"EC_\" + CA_KEY_TYPE, null, true);\n+\n+        \/\/ Null KeyType should not match.\n+        issuerAndKeyTypeTestCase(enabled, kmAlg, \"RSA\", null, null, false);\n+\n+        \/\/ Wrong KeyType should not match.\n+        issuerAndKeyTypeTestCase(enabled, kmAlg, \"RSA\", \"EC\", null, false);\n+\n+        \/\/ Wrong signature algorithm should not match.\n+        issuerAndKeyTypeTestCase(enabled, kmAlg, \"RSA\", \"RSA_EC\", null, false);\n+\n+        \/\/ Correct signature algorithm but incorrect key algorithm\n+        \/\/ should not match.\n+        issuerAndKeyTypeTestCase(\n+                enabled, kmAlg, \"RSA\", \"EC_\" + CA_KEY_TYPE, null, false);\n@@ -263,2 +281,3 @@\n-    private static void issuerTestCase(String enabled, String kmAlg,\n-            String keyAlg, Principal[] issuers, boolean found) throws Exception {\n+    private static void issuerAndKeyTypeTestCase(String enabled, String kmAlg,\n+            String keyAlg, String keyType, Principal[] issuers, boolean found)\n+            throws Exception {\n@@ -271,2 +290,2 @@\n-        chosenAliases.add(km.chooseServerAlias(keyAlg, issuers, null));\n-        chosenAliases.add(km.chooseEngineServerAlias(keyAlg, issuers, null));\n+        chosenAliases.add(km.chooseServerAlias(keyType, issuers, null));\n+        chosenAliases.add(km.chooseEngineServerAlias(keyType, issuers, null));\n@@ -274,1 +293,1 @@\n-                km.chooseClientAlias(new String[]{keyAlg}, issuers, null));\n+                km.chooseClientAlias(new String[]{keyType}, issuers, null));\n@@ -276,1 +295,1 @@\n-                new String[]{keyAlg}, issuers, null));\n+                new String[]{keyType}, issuers, null));\n@@ -278,2 +297,2 @@\n-        String[] allServerAliases = km.getServerAliases(keyAlg, issuers);\n-        String[] allClientAliases = km.getClientAliases(keyAlg, issuers);\n+        String[] allServerAliases = km.getServerAliases(keyType, issuers);\n+        String[] allClientAliases = km.getClientAliases(keyType, issuers);\n@@ -291,4 +310,8 @@\n-                assertEquals(PREFERRED_ALIAS, normalizeAlias(allServerAliases[1]));\n-                assertEquals(PREFERRED_ALIAS, normalizeAlias(allClientAliases[1]));\n-                assertEquals(EXPIRED_ALIAS, normalizeAlias(allServerAliases[2]));\n-                assertEquals(EXPIRED_ALIAS, normalizeAlias(allClientAliases[2]));\n+                assertEquals(PREFERRED_ALIAS,\n+                        normalizeAlias(allServerAliases[1]));\n+                assertEquals(PREFERRED_ALIAS,\n+                        normalizeAlias(allClientAliases[1]));\n+                assertEquals(EXPIRED_ALIAS,\n+                        normalizeAlias(allServerAliases[2]));\n+                assertEquals(EXPIRED_ALIAS,\n+                        normalizeAlias(allClientAliases[2]));\n@@ -314,15 +337,0 @@\n-    private static void aliasNotFoundTestCase(\n-            String kmAlg, String keyAlg, String keyType) throws Exception {\n-\n-        X509ExtendedKeyManager km = (X509ExtendedKeyManager) getKeyManager(\n-                kmAlg, keyAlg, DEFAULT_KEY_USAGES);\n-\n-        assertNull(km.chooseServerAlias(keyType, null, null));\n-        assertNull(km.chooseEngineServerAlias(keyType, null, null));\n-        assertNull(km.chooseClientAlias(new String[]{keyType}, null, null));\n-        assertNull(\n-                km.chooseEngineClientAlias(new String[]{keyType}, null, null));\n-        assertNull(km.getServerAliases(keyType, null));\n-        assertNull(km.getClientAliases(keyType, null));\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/CertChecking.java","additions":48,"deletions":40,"binary":false,"changes":88,"status":"modified"}]}