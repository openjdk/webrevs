{"files":[{"patch":"@@ -56,2 +56,9 @@\n- * Layer that adds algorithm constraints and certificate checking to a key\n- * manager.\n+ * Layer that adds algorithm constraints and certificate checking functionality\n+ * to a key manager:\n+ * 1) Check against peer supported certificate signature algorithms (sent with\n+ *    \"signature_algorithms_cert\" TLS extension).\n+ * 2) Check against local TLS algorithm constraints (\"java.security\" config\n+ *    file).\n+ * 3) Mark alias results based on validity period and certificate extensions,\n+ *    so results can be sorted to find the best match. See \"CheckResult\" and\n+ *    \"EntryStatus\" for details.\n@@ -173,0 +180,2 @@\n+                        \/\/ Peer supported certificate signature algorithms\n+                        \/\/ sent with \"signature_algorithms_cert\" TLS extension.\n@@ -202,0 +211,2 @@\n+                        \/\/ Peer supported certificate signature algorithms\n+                        \/\/ sent with \"signature_algorithms_cert\" TLS extension.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerCertChecking.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n@@ -84,1 +83,1 @@\n-        entryCacheMap = new ConcurrentHashMap<>();\n+        entryCacheMap = Collections.synchronizedMap(new SizedMap<>());\n@@ -92,2 +91,1 @@\n-    \/\/ LinkedHashMap with a max size of 10\n-    \/\/ see LinkedHashMap JavaDocs\n+    \/\/ LinkedHashMap with a max size of 10, see LinkedHashMap JavaDocs\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-    private static final boolean[] NO_DG_USAGE =\n+    private static final boolean[] NO_DS_USAGE =\n@@ -110,1 +110,1 @@\n-    private static final boolean[] NO_DG_NO_KE_USAGE =\n+    private static final boolean[] NO_DS_NO_KE_USAGE =\n@@ -128,1 +128,1 @@\n-        \/\/ Both should fail with no usages at all\n+        \/\/ Both client and server should be checked with no usages at all\n@@ -131,1 +131,1 @@\n-        \/\/ Only client should fail with RSA algorithm and\n+        \/\/ Only client should be checked with RSA algorithm and\n@@ -133,1 +133,1 @@\n-        usageTestCase(enabled, kmAlg, \"RSA\", NO_DG_USAGE, false, true);\n+        usageTestCase(enabled, kmAlg, \"RSA\", NO_DS_USAGE, false, true);\n@@ -135,1 +135,1 @@\n-        \/\/ Only server should fail with RSA algorithm and\n+        \/\/ Only server should be checked with RSA algorithm and\n@@ -137,1 +137,1 @@\n-        usageTestCase(enabled, kmAlg, \"RSASSA-PSS\", NO_DG_USAGE, true, false);\n+        usageTestCase(enabled, kmAlg, \"RSASSA-PSS\", NO_DS_USAGE, true, false);\n@@ -139,2 +139,3 @@\n-        \/\/ Both should fail with DSA algorithm and no digital signature bit set\n-        usageTestCase(enabled, kmAlg, \"DSA\", NO_DG_USAGE, true, true);\n+        \/\/ Both client and server should be checked with DSA algorithm and no\n+        \/\/ digital signature bit set\n+        usageTestCase(enabled, kmAlg, \"DSA\", NO_DS_USAGE, true, true);\n@@ -142,2 +143,3 @@\n-        \/\/ Both should fail with EC algorithm and no digital signature bit set\n-        usageTestCase(enabled, kmAlg, \"EC\", NO_DG_USAGE, true, true);\n+        \/\/ Both client and server should be checked with EC algorithm and no\n+        \/\/ digital signature bit set\n+        usageTestCase(enabled, kmAlg, \"EC\", NO_DS_USAGE, true, true);\n@@ -145,3 +147,3 @@\n-        \/\/ Both should fail with RSA algorithm and missing digital signature and\n-        \/\/ key encipherment bits.\n-        usageTestCase(enabled, kmAlg, \"RSA\", NO_DG_NO_KE_USAGE, true, true);\n+        \/\/ Both client and server should be checked with RSA algorithm and\n+        \/\/ missing digital signature and key encipherment bits.\n+        usageTestCase(enabled, kmAlg, \"RSA\", NO_DS_NO_KE_USAGE, true, true);\n@@ -149,1 +151,2 @@\n-        \/\/ Both should fail with DH algorithm and no key agreement bit set.\n+        \/\/ Both client and server should be checked with DH algorithm and no\n+        \/\/ key agreement bit set.\n@@ -152,1 +155,1 @@\n-        \/\/ Only server should fail with EC algorithm and\n+        \/\/ Only server should be checked with EC algorithm and\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/CertChecking.java","additions":19,"deletions":16,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -114,0 +114,8 @@\n+            \/\/ \"jdk.tls.client.SignatureSchemes\" and\n+            \/\/ \"jdk.tls.server.SignatureSchemes\" system properties set\n+            \/\/ signature schemes for both \"signature_algorithms\" and\n+            \/\/ \"signature_algorithms_cert\" extensions. Then we fail because\n+            \/\/ server's certificate is signed with \"SHA256withECDSA\" while\n+            \/\/ \"signature_algorithms_cert\" extension only contains an\n+            \/\/ \"ecdsa_secp384r1_sha384\" signature scheme corresponding to\n+            \/\/ \"SHA384withECDSA\" certificate signature.\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/PeerConstraintsCheck.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}