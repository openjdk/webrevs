{"files":[{"patch":"@@ -241,4 +241,0 @@\n-        if (keyTypes == null) {\n-            return null;\n-        }\n-\n@@ -272,10 +268,1 @@\n-        if (issuers == null) {\n-            issuers = new X500Principal[0];\n-        }\n-\n-        if (!(issuers instanceof X500Principal[])) {\n-            \/\/ normally, this will never happen but try to recover if it does\n-            issuers = convertPrincipals(issuers);\n-        }\n-\n-        Set<Principal> issuerSet = getIssuerSet(issuers);\n+        Set<X500Principal> issuerSet = getIssuerSet(issuers);\n@@ -314,21 +301,0 @@\n-\n-    \/*\n-     * Convert an array of Principals to an array of X500Principals, if\n-     * possible. Principals that cannot be converted are ignored.\n-     *\/\n-    private static X500Principal[] convertPrincipals(Principal[] principals) {\n-        List<X500Principal> list = new ArrayList<>(principals.length);\n-        for (int i = 0; i < principals.length; i++) {\n-            Principal p = principals[i];\n-            if (p instanceof X500Principal) {\n-                list.add((X500Principal) p);\n-            } else {\n-                try {\n-                    list.add(new X500Principal(p.getName()));\n-                } catch (IllegalArgumentException e) {\n-                    \/\/ ignore\n-                }\n-            }\n-        }\n-        return list.toArray(new X500Principal[0]);\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SunX509KeyManagerImpl.java","additions":1,"deletions":35,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.Arrays;\n@@ -51,0 +50,1 @@\n+import javax.security.auth.x500.X500Principal;\n@@ -132,1 +132,1 @@\n-    protected boolean conformsToAlgorithmConstraints(\n+    private boolean conformsToAlgorithmConstraints(\n@@ -173,1 +173,1 @@\n-    protected CheckResult certificateCheck(\n+    private CheckResult certificateCheck(\n@@ -458,4 +458,20 @@\n-    \/\/ Make a Set out of the array\n-    protected Set<Principal> getIssuerSet(Principal[] issuers) {\n-        if ((issuers != null) && (issuers.length != 0)) {\n-            return new HashSet<>(Arrays.asList(issuers));\n+    \/\/ Make a Set out of the array.\n+    protected static Set<X500Principal> getIssuerSet(Principal[] issuers) {\n+\n+        if (issuers != null && issuers.length != 0) {\n+            Set<X500Principal> ret = new HashSet<>(issuers.length);\n+\n+            for (Principal p : issuers) {\n+                if (p instanceof X500Principal) {\n+                    ret.add((X500Principal) p);\n+                } else {\n+                    \/\/ Normally, this will never happen but try to recover if\n+                    \/\/ it does.\n+                    try {\n+                        ret.add(new X500Principal(p.getName()));\n+                    } catch (Exception e) {\n+                        \/\/ ignore\n+                    }\n+                }\n+            }\n+            return ret.isEmpty() ? null : ret;\n@@ -467,0 +483,1 @@\n+    \/\/ Entry point to do all certificate checks.\n@@ -469,1 +486,1 @@\n-            Set<Principal> issuerSet, CheckType checkType,\n+            Set<X500Principal> issuerSet, CheckType checkType,\n@@ -508,1 +525,1 @@\n-        if (issuerSet != null) {\n+        if (issuerSet != null && !issuerSet.isEmpty()) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerCertChecking.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.security.KeyStoreException;\n@@ -37,0 +38,1 @@\n+import java.security.cert.Certificate;\n@@ -42,0 +44,1 @@\n+import javax.security.auth.x500.X500Principal;\n@@ -248,1 +251,1 @@\n-        Set<Principal> issuerSet = getIssuerSet(issuers);\n+        Set<X500Principal> issuerSet = getIssuerSet(issuers);\n@@ -250,0 +253,1 @@\n+\n@@ -269,1 +273,1 @@\n-            } catch (Exception e) {\n+            } catch (KeyStoreException e) {\n@@ -296,0 +300,1 @@\n+\n@@ -300,1 +305,1 @@\n-        Set<Principal> issuerSet = getIssuerSet(issuers);\n+        Set<X500Principal> issuerSet = getIssuerSet(issuers);\n@@ -303,0 +308,1 @@\n+\n@@ -313,1 +319,1 @@\n-            } catch (Exception e) {\n+            } catch (KeyStoreException e) {\n@@ -367,1 +373,1 @@\n-            List<KeyType> keyTypes, Set<Principal> issuerSet,\n+            List<KeyType> keyTypes, Set<X500Principal> issuerSet,\n@@ -371,1 +377,1 @@\n-            String idAlgorithm) throws Exception {\n+            String idAlgorithm) throws KeyStoreException {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import javax.net.ssl.X509ExtendedKeyManager;\n@@ -82,1 +83,2 @@\n-        X509KeyManager km = getKeyManager(kmAlg, certSignatureAlg);\n+        X509ExtendedKeyManager km = (X509ExtendedKeyManager) getKeyManager(\n+                kmAlg, certSignatureAlg);\n@@ -84,0 +86,2 @@\n+        String engineServerAlias = km.chooseEngineServerAlias(\n+                KEY_TYPE, null, null);\n@@ -86,0 +90,2 @@\n+        String engineClientAlias = km.chooseEngineClientAlias(\n+                new String[]{KEY_TYPE}, null, null);\n@@ -92,2 +98,4 @@\n-            assertEquals(serverAliasPrefix + CERT_ALIAS, serverAlias);\n-            assertEquals(clientAliasPrefix + CERT_ALIAS, clientAlias);\n+            assertEquals(CERT_ALIAS, normalizeAlias(serverAlias));\n+            assertEquals(CERT_ALIAS, normalizeAlias(engineServerAlias));\n+            assertEquals(CERT_ALIAS, normalizeAlias(clientAlias));\n+            assertEquals(CERT_ALIAS, normalizeAlias(engineClientAlias));\n@@ -96,0 +104,1 @@\n+            assertNull(engineServerAlias);\n@@ -97,0 +106,1 @@\n+            assertNull(engineClientAlias);\n@@ -100,0 +110,6 @@\n+    \/\/ PKIX KeyManager adds a cache prefix to an alias.\n+    private static String normalizeAlias(String alias) {\n+        return alias.substring(alias.lastIndexOf(\".\") + 1);\n+\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/AlgorithmConstraintsCheck.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.security.auth.UserPrincipal;\n@@ -40,0 +41,1 @@\n+import java.util.ArrayList;\n@@ -41,0 +43,1 @@\n+import java.util.List;\n@@ -42,0 +45,1 @@\n+import javax.net.ssl.X509ExtendedKeyManager;\n@@ -44,0 +48,1 @@\n+import jdk.test.lib.Asserts;\n@@ -156,0 +161,14 @@\n+        \/\/ Check CA issuer match with non-X500 principal\n+        issuerTestCase(disabled, kmAlg, \"RSA\",\n+                new Principal[]{new UserPrincipal(CA_ISSUER_STRING)}, true);\n+\n+        \/\/ Non-convertable principal should match all\n+        issuerTestCase(disabled, kmAlg, \"RSA\",\n+                new Principal[]{new InvalidPrincipal()}, true);\n+\n+        \/\/ Empty issuer array should match all\n+        issuerTestCase(disabled, kmAlg, \"RSA\", new Principal[]{}, true);\n+\n+        \/\/ Null issuer array should match all\n+        issuerTestCase(disabled, kmAlg, \"RSA\", null, true);\n+\n@@ -159,0 +178,8 @@\n+\n+        \/\/ --- Alias not found for given KeyType test cases ---\n+\n+        \/\/ Null KeyType\n+        aliasNotFoundTestCase(kmAlg, \"RSA\", null);\n+\n+        \/\/ Wrong KeyType\n+        aliasNotFoundTestCase(kmAlg, \"RSA\", \"EC\");\n@@ -165,1 +192,1 @@\n-        X509KeyManager km = getKeyManager(\n+        X509ExtendedKeyManager km = (X509ExtendedKeyManager) getKeyManager(\n@@ -169,0 +196,2 @@\n+        String chosenEngineServerAlias = km.chooseEngineServerAlias(\n+                keyAlg, null, null);\n@@ -171,0 +200,2 @@\n+        String chosenEngineClientAlias = km.chooseEngineClientAlias(\n+                new String[]{keyAlg}, null, null);\n@@ -181,0 +212,4 @@\n+            assertEquals(USAGE_MISMATCH_ALIAS,\n+                    normalizeAlias(chosenEngineServerAlias));\n+            assertEquals(USAGE_MISMATCH_ALIAS,\n+                    normalizeAlias(chosenEngineClientAlias));\n@@ -197,0 +232,2 @@\n+                assertEquals(PREFERRED_ALIAS,\n+                        normalizeAlias(chosenEngineServerAlias));\n@@ -211,0 +248,2 @@\n+                assertEquals(PREFERRED_ALIAS,\n+                        normalizeAlias(chosenEngineClientAlias));\n@@ -226,1 +265,1 @@\n-        X509KeyManager km = getKeyManager(\n+        X509ExtendedKeyManager km = (X509ExtendedKeyManager) getKeyManager(\n@@ -229,3 +268,8 @@\n-        String chosenServerAlias = km.chooseServerAlias(keyAlg, issuers, null);\n-        String chosenClientAlias = km.chooseClientAlias(\n-                new String[]{keyAlg}, issuers, null);\n+        List<String> chosenAliases = new ArrayList<>(4);\n+\n+        chosenAliases.add(km.chooseServerAlias(keyAlg, issuers, null));\n+        chosenAliases.add(km.chooseEngineServerAlias(keyAlg, issuers, null));\n+        chosenAliases.add(\n+                km.chooseClientAlias(new String[]{keyAlg}, issuers, null));\n+        chosenAliases.add(km.chooseEngineClientAlias(\n+                new String[]{keyAlg}, issuers, null));\n@@ -238,2 +282,2 @@\n-                assertEquals(USAGE_MISMATCH_ALIAS, normalizeAlias(chosenServerAlias));\n-                assertEquals(USAGE_MISMATCH_ALIAS, normalizeAlias(chosenClientAlias));\n+                chosenAliases.forEach(a ->\n+                        assertEquals(USAGE_MISMATCH_ALIAS, normalizeAlias(a)));\n@@ -251,2 +295,2 @@\n-                assertEquals(PREFERRED_ALIAS, normalizeAlias(chosenServerAlias));\n-                assertEquals(PREFERRED_ALIAS, normalizeAlias(chosenClientAlias));\n+                chosenAliases.forEach(a ->\n+                        assertEquals(PREFERRED_ALIAS, normalizeAlias(a)));\n@@ -263,2 +307,1 @@\n-            assertNull(chosenServerAlias);\n-            assertNull(chosenClientAlias);\n+            chosenAliases.forEach(Asserts::assertNull);\n@@ -270,0 +313,5 @@\n+    private static void aliasNotFoundTestCase(\n+            String kmAlg, String keyAlg, String keyType) throws Exception {\n+\n+        X509ExtendedKeyManager km = (X509ExtendedKeyManager) getKeyManager(\n+                kmAlg, keyAlg, DEFAULT_KEY_USAGES);\n@@ -271,1 +319,10 @@\n-        \/\/ PKIX KeyManager adds a cache prefix to an alias.\n+        assertNull(km.chooseServerAlias(keyType, null, null));\n+        assertNull(km.chooseEngineServerAlias(keyType, null, null));\n+        assertNull(km.chooseClientAlias(new String[]{keyType}, null, null));\n+        assertNull(\n+                km.chooseEngineClientAlias(new String[]{keyType}, null, null));\n+        assertNull(km.getServerAliases(keyType, null));\n+        assertNull(km.getClientAliases(keyType, null));\n+    }\n+\n+    \/\/ PKIX KeyManager adds a cache prefix to an alias.\n@@ -277,0 +334,8 @@\n+    private static class InvalidPrincipal implements Principal {\n+\n+        @Override\n+        public String getName() {\n+            return null;\n+        }\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/CertChecking.java","additions":77,"deletions":12,"binary":false,"changes":89,"status":"modified"}]}