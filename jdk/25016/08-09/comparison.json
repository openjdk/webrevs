{"files":[{"patch":"@@ -64,1 +64,2 @@\n- * \"jdk.tls.SunX509keymanager.certSelectionChecking\" system property to \"false\".\n+ * \"jdk.tls.SunX509keymanager.certSelectionChecking\" system property to \"false\"\n+ * before calling a class constructor.\n@@ -77,1 +78,1 @@\n-    boolean isCheckingDisabled() {\n+    protected boolean isCheckingDisabled() {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SunX509KeyManagerImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -71,0 +71,85 @@\n+    \/\/ Entry point to do all certificate checks.\n+    protected EntryStatus checkAlias(int keyStoreIndex, String alias,\n+            Certificate[] chain, Date verificationDate, List<KeyType> keyTypes,\n+            Set<X500Principal> issuerSet, CheckType checkType,\n+            AlgorithmConstraints constraints,\n+            List<SNIServerName> requestedServerNames, String idAlgorithm) {\n+\n+        \/\/ --- Mandatory checks ---\n+\n+        if ((chain == null) || (chain.length == 0)) {\n+            return null;\n+        }\n+\n+        for (Certificate cert : chain) {\n+            if (!(cert instanceof X509Certificate)) {\n+                \/\/ Not an X509Certificate, ignore this alias\n+                return null;\n+            }\n+        }\n+\n+        \/\/ Check key type, get key type index.\n+        int keyIndex = -1;\n+        int j = 0;\n+\n+        for (KeyType keyType : keyTypes) {\n+            if (keyType.matches(chain)) {\n+                keyIndex = j;\n+                break;\n+            }\n+            j++;\n+        }\n+\n+        if (keyIndex == -1) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                SSLLogger.fine(\"Ignore alias \" + alias\n+                        + \": key algorithm does not match\");\n+            }\n+            return null;\n+        }\n+\n+        \/\/ Check issuers\n+        if (issuerSet != null && !issuerSet.isEmpty()) {\n+            boolean found = false;\n+            for (Certificate cert : chain) {\n+                X509Certificate xcert = (X509Certificate) cert;\n+                if (issuerSet.contains(xcert.getIssuerX500Principal())) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                    SSLLogger.fine(\n+                            \"Ignore alias \" + alias\n+                                    + \": issuers do not match\");\n+                }\n+                return null;\n+            }\n+        }\n+\n+        \/\/ --- Optional checks, depending on \"checksDisabled\" toggle ---\n+\n+        \/\/ Check the algorithm constraints\n+        if (constraints != null &&\n+                !conformsToAlgorithmConstraints(constraints, chain,\n+                        checkType.getValidator())) {\n+\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                SSLLogger.fine(\"Ignore alias \" + alias +\n+                        \": certificate chain does not conform to \" +\n+                        \"algorithm constraints\");\n+            }\n+            return null;\n+        }\n+\n+        \/\/ Endpoint certificate check\n+        CheckResult checkResult = certificateCheck(checkType,\n+                (X509Certificate) chain[0],\n+                verificationDate == null ? new Date() : verificationDate,\n+                requestedServerNames, idAlgorithm);\n+\n+        return new EntryStatus(\n+                keyStoreIndex, keyIndex, alias, chain, checkResult);\n+    }\n+\n@@ -481,86 +566,0 @@\n-\n-    \/\/ Entry point to do all certificate checks.\n-    protected EntryStatus checkAlias(int keyStoreIndex, String alias,\n-            Certificate[] chain, Date verificationDate, List<KeyType> keyTypes,\n-            Set<X500Principal> issuerSet, CheckType checkType,\n-            AlgorithmConstraints constraints,\n-            List<SNIServerName> requestedServerNames, String idAlgorithm) {\n-\n-        \/\/ --- Mandatory checks ---\n-\n-        if ((chain == null) || (chain.length == 0)) {\n-            \/\/ Must be secret key entry, ignore\n-            return null;\n-        }\n-\n-        for (Certificate cert : chain) {\n-            if (!(cert instanceof X509Certificate)) {\n-                \/\/ Not an X509Certificate, ignore this alias\n-                return null;\n-            }\n-        }\n-\n-        \/\/ Check keytype\n-        int keyIndex = -1;\n-        int j = 0;\n-\n-        for (KeyType keyType : keyTypes) {\n-            if (keyType.matches(chain)) {\n-                keyIndex = j;\n-                break;\n-            }\n-            j++;\n-        }\n-\n-        if (keyIndex == -1) {\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n-                SSLLogger.fine(\"Ignore alias \" + alias\n-                        + \": key algorithm does not match\");\n-            }\n-            return null;\n-        }\n-\n-        \/\/ Check issuers\n-        if (issuerSet != null && !issuerSet.isEmpty()) {\n-            boolean found = false;\n-            for (Certificate cert : chain) {\n-                X509Certificate xcert = (X509Certificate) cert;\n-                if (issuerSet.contains(xcert.getIssuerX500Principal())) {\n-                    found = true;\n-                    break;\n-                }\n-            }\n-            if (!found) {\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n-                    SSLLogger.fine(\n-                            \"Ignore alias \" + alias\n-                                    + \": issuers do not match\");\n-                }\n-                return null;\n-            }\n-        }\n-\n-        \/\/ --- Optional checks, depending on \"checksDisabled\" toggle ---\n-\n-        \/\/ Check the algorithm constraints\n-        if (constraints != null &&\n-                !conformsToAlgorithmConstraints(constraints, chain,\n-                        checkType.getValidator())) {\n-\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n-                SSLLogger.fine(\"Ignore alias \" + alias +\n-                        \": certificate chain does not conform to \" +\n-                        \"algorithm constraints\");\n-            }\n-            return null;\n-        }\n-\n-        \/\/ Endpoint certificate check\n-        CheckResult checkResult = certificateCheck(checkType,\n-                (X509Certificate) chain[0],\n-                verificationDate == null ? new Date() : verificationDate,\n-                requestedServerNames, idAlgorithm);\n-\n-        return new EntryStatus(\n-                keyStoreIndex, keyIndex, alias, chain, checkResult);\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerCertChecking.java","additions":85,"deletions":86,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    boolean isCheckingDisabled() {\n+    protected boolean isCheckingDisabled() {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @library \/test\/lib\n@@ -45,0 +46,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -236,3 +238,3 @@\n-        \/\/ Disable KeyManager's algorithm constraints checking.\n-        System.setProperty(\n-                \"jdk.tls.SunX509keymanager.certSelectionChecking\", \"false\");\n+        \/\/ Make sure we don't block the key on algorithm constraints check.\n+        SecurityUtils.removeFromDisabledAlgs(\"jdk.certpath.disabledAlgorithms\",\n+                List.of(\"RSA keySize < 1024\"));\n","filename":"test\/jdk\/sun\/security\/mscapi\/ShortRSAKeyWithinTLS.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import java.security.Security;\n@@ -52,1 +51,3 @@\n-        \/\/ Disable KeyManager's algorithm constraints checking.\n+        \/\/ Disable KeyManager's algorithm constraints checking,\n+        \/\/ so we can make keytool print certificate with weak\n+        \/\/ MD5withRSA signature algorithm.\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/PrintSSL.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}