{"files":[{"patch":"@@ -1,295 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.tools.javac.main;\n-\n-import java.io.IOException;\n-import java.io.Reader;\n-import java.nio.charset.Charset;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-\/**\n- * Various utility methods for processing Java tool command line arguments.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public class CommandLine {\n-    \/**\n-     * Process Win32-style command files for the specified command line\n-     * arguments and return the resulting arguments. A command file argument\n-     * is of the form '@file' where 'file' is the name of the file whose\n-     * contents are to be parsed for additional arguments. The contents of\n-     * the command file are parsed using StreamTokenizer and the original\n-     * '@file' argument replaced with the resulting tokens. Recursive command\n-     * files are not supported. The '@' character itself can be quoted with\n-     * the sequence '@@'.\n-     * @param args the arguments that may contain @files\n-     * @return the arguments, with @files expanded\n-     * @throws IOException if there is a problem reading any of the @files\n-     *\/\n-    public static List<String> parse(List<String> args) throws IOException {\n-        List<String> newArgs = new ArrayList<>();\n-        appendParsedCommandArgs(newArgs, args);\n-        return newArgs;\n-    }\n-\n-    private static void appendParsedCommandArgs(List<String> newArgs, List<String> args) throws IOException {\n-        for (String arg : args) {\n-            if (arg.length() > 1 && arg.charAt(0) == '@') {\n-                arg = arg.substring(1);\n-                if (arg.charAt(0) == '@') {\n-                    newArgs.add(arg);\n-                } else {\n-                    loadCmdFile(arg, newArgs);\n-                }\n-            } else {\n-                newArgs.add(arg);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Process the given environment variable and appends any Win32-style\n-     * command files for the specified command line arguments and return\n-     * the resulting arguments. A command file argument\n-     * is of the form '@file' where 'file' is the name of the file whose\n-     * contents are to be parsed for additional arguments. The contents of\n-     * the command file are parsed using StreamTokenizer and the original\n-     * '@file' argument replaced with the resulting tokens. Recursive command\n-     * files are not supported. The '@' character itself can be quoted with\n-     * the sequence '@@'.\n-     * @param envVariable the env variable to process\n-     * @param args the arguments that may contain @files\n-     * @return the arguments, with environment variable's content and expansion of @files\n-     * @throws IOException if there is a problem reading any of the @files\n-     * @throws com.sun.tools.javac.main.CommandLine.UnmatchedQuote\n-     *\/\n-    public static List<String> parse(String envVariable, List<String> args)\n-            throws IOException, UnmatchedQuote {\n-\n-        List<String> inArgs = new ArrayList<>();\n-        appendParsedEnvVariables(inArgs, envVariable);\n-        inArgs.addAll(args);\n-        List<String> newArgs = new ArrayList<>();\n-        appendParsedCommandArgs(newArgs, inArgs);\n-        return newArgs;\n-    }\n-\n-    private static void loadCmdFile(String name, List<String> args) throws IOException {\n-        try (Reader r = Files.newBufferedReader(Paths.get(name), Charset.defaultCharset())) {\n-            Tokenizer t = new Tokenizer(r);\n-            String s;\n-            while ((s = t.nextToken()) != null) {\n-                args.add(s);\n-            }\n-        }\n-    }\n-\n-    public static class Tokenizer {\n-        private final Reader in;\n-        private int ch;\n-\n-        public Tokenizer(Reader in) throws IOException {\n-            this.in = in;\n-            ch = in.read();\n-        }\n-\n-        public String nextToken() throws IOException {\n-            skipWhite();\n-            if (ch == -1) {\n-                return null;\n-            }\n-\n-            StringBuilder sb = new StringBuilder();\n-            char quoteChar = 0;\n-\n-            while (ch != -1) {\n-                switch (ch) {\n-                    case ' ':\n-                    case '\\t':\n-                    case '\\f':\n-                        if (quoteChar == 0) {\n-                            return sb.toString();\n-                        }\n-                        sb.append((char) ch);\n-                        break;\n-\n-                    case '\\n':\n-                    case '\\r':\n-                        return sb.toString();\n-\n-                    case '\\'':\n-                    case '\"':\n-                        if (quoteChar == 0) {\n-                            quoteChar = (char) ch;\n-                        } else if (quoteChar == ch) {\n-                            quoteChar = 0;\n-                        } else {\n-                            sb.append((char) ch);\n-                        }\n-                        break;\n-\n-                    case '\\\\':\n-                        if (quoteChar != 0) {\n-                            ch = in.read();\n-                            switch (ch) {\n-                                case '\\n':\n-                                case '\\r':\n-                                    while (ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == '\\f') {\n-                                        ch = in.read();\n-                                    }\n-                                    continue;\n-\n-                                case 'n':\n-                                    ch = '\\n';\n-                                    break;\n-                                case 'r':\n-                                    ch = '\\r';\n-                                    break;\n-                                case 't':\n-                                    ch = '\\t';\n-                                    break;\n-                                case 'f':\n-                                    ch = '\\f';\n-                                    break;\n-                            }\n-                        }\n-                        sb.append((char) ch);\n-                        break;\n-\n-                    default:\n-                        sb.append((char) ch);\n-                }\n-\n-                ch = in.read();\n-            }\n-\n-            return sb.toString();\n-        }\n-\n-        void skipWhite() throws IOException {\n-            while (ch != -1) {\n-                switch (ch) {\n-                    case ' ':\n-                    case '\\t':\n-                    case '\\n':\n-                    case '\\r':\n-                    case '\\f':\n-                        break;\n-\n-                    case '#':\n-                        ch = in.read();\n-                        while (ch != '\\n' && ch != '\\r' && ch != -1) {\n-                            ch = in.read();\n-                        }\n-                        break;\n-\n-                    default:\n-                        return;\n-                }\n-\n-                ch = in.read();\n-            }\n-        }\n-    }\n-\n-    @SuppressWarnings(\"fallthrough\")\n-    private static void appendParsedEnvVariables(List<String> newArgs, String envVariable)\n-            throws UnmatchedQuote {\n-\n-        if (envVariable == null) {\n-            return;\n-        }\n-        String in = System.getenv(envVariable);\n-        if (in == null || in.trim().isEmpty()) {\n-            return;\n-        }\n-\n-        final char NUL = (char)0;\n-        final int len = in.length();\n-\n-        int pos = 0;\n-        StringBuilder sb = new StringBuilder();\n-        char quote = NUL;\n-        char ch;\n-\n-        loop:\n-        while (pos < len) {\n-            ch = in.charAt(pos);\n-            switch (ch) {\n-                case '\\\"': case '\\'':\n-                    if (quote == NUL) {\n-                        quote = ch;\n-                    } else if (quote == ch) {\n-                        quote = NUL;\n-                    } else {\n-                        sb.append(ch);\n-                    }\n-                    pos++;\n-                    break;\n-                case '\\f': case '\\n': case '\\r': case '\\t': case ' ':\n-                    if (quote == NUL) {\n-                        newArgs.add(sb.toString());\n-                        sb.setLength(0);\n-                        while (ch == '\\f' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == ' ') {\n-                            pos++;\n-                            if (pos >= len) {\n-                                break loop;\n-                            }\n-                            ch = in.charAt(pos);\n-                        }\n-                        break;\n-                    }\n-                    \/\/ fall through\n-                default:\n-                    sb.append(ch);\n-                    pos++;\n-            }\n-        }\n-        if (sb.length() != 0) {\n-            newArgs.add(sb.toString());\n-        }\n-        if (quote != NUL) {\n-            throw new UnmatchedQuote(envVariable);\n-        }\n-    }\n-\n-    public static class UnmatchedQuote extends Exception {\n-        private static final long serialVersionUID = 0;\n-\n-        public final String variableName;\n-\n-        UnmatchedQuote(String variable) {\n-            this.variableName = variable;\n-        }\n-    }\n-}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/CommandLine.java","additions":0,"deletions":295,"binary":false,"changes":295,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,0 @@\n-import com.sun.tools.javac.main.CommandLine.UnmatchedQuote;\n@@ -64,0 +63,3 @@\n+import jdk.internal.opt.CommandLine;\n+import jdk.internal.opt.CommandLine.UnmatchedQuote;\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Main.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -219,0 +219,1 @@\n+    requires jdk.internal.opt;\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    exports jdk.internal.opt to jdk.jartool, jdk.jlink, jdk.jpackage;\n+    exports jdk.internal.opt to jdk.compiler, jdk.jartool, jdk.javadoc, jdk.jlink, jdk.jpackage;\n","filename":"src\/jdk.internal.opt\/share\/classes\/module-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n-import com.sun.tools.javac.main.CommandLine;\n@@ -59,0 +58,2 @@\n+import jdk.internal.opt.CommandLine;\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/Start.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+    requires jdk.internal.opt;\n","filename":"src\/jdk.javadoc\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}