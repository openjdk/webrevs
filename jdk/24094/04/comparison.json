{"files":[{"patch":"@@ -223,0 +223,24 @@\n+\n+  \/\/ UseZvbb (depends on RVV).\n+  if (UseZvbb && !UseRVV) {\n+    warning(\"Cannot enable UseZvbb on cpu without RVV support.\");\n+    FLAG_SET_DEFAULT(UseZvbb, false);\n+  }\n+\n+  \/\/ UseZvbc (depends on RVV).\n+  if (UseZvbc && !UseRVV) {\n+    warning(\"Cannot enable UseZvbc on cpu without RVV support.\");\n+    FLAG_SET_DEFAULT(UseZvbc, false);\n+  }\n+\n+  \/\/ UseZvkn (depends on RVV).\n+  if (UseZvkn && !UseRVV) {\n+    warning(\"Cannot enable UseZvkn on cpu without RVV support.\");\n+    FLAG_SET_DEFAULT(UseZvkn, false);\n+  }\n+\n+  \/\/ UseZvfh (depends on RVV)\n+  if (UseZvfh && !UseRVV) {\n+    warning(\"Cannot enable UseZvfh on cpu without RVV support.\");\n+    FLAG_SET_DEFAULT(UseZvfh, false);\n+  }\n@@ -348,14 +372,0 @@\n-  \/\/ UseZvbb (depends on RVV).\n-  if (UseZvbb && !UseRVV) {\n-    FLAG_SET_DEFAULT(UseZvbb, false);\n-    warning(\"Cannot enable UseZvbb on cpu without RVV support.\");\n-  }\n-\n-  \/\/ UseZvbc (depends on RVV).\n-  if (UseZvbc && !UseRVV) {\n-    if (!FLAG_IS_DEFAULT(UseZvbc)) {\n-      warning(\"Cannot enable UseZvbc on cpu without RVV support.\");\n-    }\n-    FLAG_SET_DEFAULT(UseZvbc, false);\n-  }\n-\n@@ -386,5 +396,0 @@\n-  \/\/ UseZvkn (depends on RVV) and SHA-2.\n-  if (UseZvkn && !UseRVV) {\n-    FLAG_SET_DEFAULT(UseZvkn, false);\n-    warning(\"Cannot enable Zvkn on cpu without RVV support.\");\n-  }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -76,1 +76,14 @@\n-  #define UPDATE_DEFAULT(flag)             \\\n+  #define UPDATE_DEFAULT(flag)           \\\n+  void update_flag() {                   \\\n+    assert(enabled(), \"Must be.\");       \\\n+    if (FLAG_IS_DEFAULT(flag)) {         \\\n+      FLAG_SET_DEFAULT(flag, true);      \\\n+    } else {                             \\\n+      \/* Sync CPU features with flags *\/ \\\n+      if (!flag) {                       \\\n+        disable_feature();               \\\n+      }                                  \\\n+    }                                    \\\n+  }                                      \\\n+\n+  #define UPDATE_DEFAULT_DEP(flag, dep)    \\\n@@ -79,0 +92,3 @@\n+      \/* dep must be declared before *\/    \\\n+      assert((uintptr_t)(this) >           \\\n+             (uintptr_t)(&dep), \"Invalid\");\\\n@@ -80,1 +96,5 @@\n-        FLAG_SET_DEFAULT(flag, true);      \\\n+        if (dep.enabled()) {               \\\n+          FLAG_SET_DEFAULT(flag, true);    \\\n+        } else {                           \\\n+          FLAG_SET_DEFAULT(flag, false);   \\\n+        }                                  \\\n@@ -141,40 +161,41 @@\n-  \/\/ declaration name  , extension name,    bit pos ,in str, mapped flag)\n-  #define RV_FEATURE_FLAGS(decl)                                                                \\\n-  decl(ext_I           , \"i\"           ,    ('I' - 'A'), true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_M           , \"m\"           ,    ('M' - 'A'), true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_A           , \"a\"           ,    ('A' - 'A'), true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_F           , \"f\"           ,    ('F' - 'A'), true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_D           , \"d\"           ,    ('D' - 'A'), true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_C           , \"c\"           ,    ('C' - 'A'), true , UPDATE_DEFAULT(UseRVC))         \\\n-  decl(ext_Q           , \"q\"           ,    ('Q' - 'A'), true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_H           , \"h\"           ,    ('H' - 'A'), true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_V           , \"v\"           ,    ('V' - 'A'), true , UPDATE_DEFAULT(UseRVV))         \\\n-  decl(ext_Zicbom      , \"Zicbom\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicbom))      \\\n-  decl(ext_Zicboz      , \"Zicboz\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicboz))      \\\n-  decl(ext_Zicbop      , \"Zicbop\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicbop))      \\\n-  decl(ext_Zba         , \"Zba\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZba))         \\\n-  decl(ext_Zbb         , \"Zbb\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbb))         \\\n-  decl(ext_Zbc         , \"Zbc\"         , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_Zbs         , \"Zbs\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbs))         \\\n-  decl(ext_Zbkb        , \"Zbkb\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbkb))        \\\n-  decl(ext_Zcb         , \"Zcb\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZcb))         \\\n-  decl(ext_Zfa         , \"Zfa\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfa))         \\\n-  decl(ext_Zfh         , \"Zfh\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfh))         \\\n-  decl(ext_Zfhmin      , \"Zfhmin\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfhmin))      \\\n-  decl(ext_Zicsr       , \"Zicsr\"       , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_Zicntr      , \"Zicntr\"      , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_Zifencei    , \"Zifencei\"    , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)              \\\n-  decl(ext_Zic64b      , \"Zic64b\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZic64b))      \\\n-  decl(ext_Ztso        , \"Ztso\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZtso))        \\\n-  decl(ext_Zihintpause , \"Zihintpause\" , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZihintpause)) \\\n-  decl(ext_Zacas       , \"Zacas\"       , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZacas))       \\\n-  decl(ext_Zvbb        , \"Zvbb\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZvbb))        \\\n-  decl(ext_Zvbc        , \"Zvbc\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZvbc))        \\\n-  decl(ext_Zvfh        , \"Zvfh\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZvfh))        \\\n-  decl(ext_Zvkn        , \"Zvkn\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZvkn))        \\\n-  decl(ext_Zicond      , \"Zicond\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicond))      \\\n-  decl(mvendorid       , \"VendorId\"    , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)              \\\n-  decl(marchid         , \"ArchId\"      , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)              \\\n-  decl(mimpid          , \"ImpId\"       , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)              \\\n-  decl(unaligned_access, \"Unaligned\"   , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)              \\\n-  decl(satp_mode       , \"SATP\"        , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)              \\\n+  \/\/ Note: the order matters, depender should be after their dependee. E.g. ext_V before ext_Zvbb.\n+  \/\/ declaration name  , extension name, bit pos       ,in str, mapped flag)\n+  #define RV_FEATURE_FLAGS(decl)                                                                    \\\n+  decl(ext_I           , \"i\"           ,    ('I' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_M           , \"m\"           ,    ('M' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_A           , \"a\"           ,    ('A' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_F           , \"f\"           ,    ('F' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_D           , \"d\"           ,    ('D' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_C           , \"c\"           ,    ('C' - 'A'), true , UPDATE_DEFAULT(UseRVC))             \\\n+  decl(ext_Q           , \"q\"           ,    ('Q' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_H           , \"h\"           ,    ('H' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_V           , \"v\"           ,    ('V' - 'A'), true , UPDATE_DEFAULT(UseRVV))             \\\n+  decl(ext_Zicbom      , \"Zicbom\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicbom))          \\\n+  decl(ext_Zicboz      , \"Zicboz\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicboz))          \\\n+  decl(ext_Zicbop      , \"Zicbop\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicbop))          \\\n+  decl(ext_Zba         , \"Zba\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZba))             \\\n+  decl(ext_Zbb         , \"Zbb\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbb))             \\\n+  decl(ext_Zbc         , \"Zbc\"         , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zbs         , \"Zbs\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbs))             \\\n+  decl(ext_Zbkb        , \"Zbkb\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbkb))            \\\n+  decl(ext_Zcb         , \"Zcb\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZcb))             \\\n+  decl(ext_Zfa         , \"Zfa\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfa))             \\\n+  decl(ext_Zfh         , \"Zfh\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfh))             \\\n+  decl(ext_Zfhmin      , \"Zfhmin\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfhmin))          \\\n+  decl(ext_Zicsr       , \"Zicsr\"       , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zicntr      , \"Zicntr\"      , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zifencei    , \"Zifencei\"    , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zic64b      , \"Zic64b\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZic64b))          \\\n+  decl(ext_Ztso        , \"Ztso\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZtso))            \\\n+  decl(ext_Zihintpause , \"Zihintpause\" , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZihintpause))     \\\n+  decl(ext_Zacas       , \"Zacas\"       , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZacas))           \\\n+  decl(ext_Zvbb        , \"Zvbb\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvbb, ext_V)) \\\n+  decl(ext_Zvbc        , \"Zvbc\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvbc, ext_V)) \\\n+  decl(ext_Zvfh        , \"Zvfh\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvfh, ext_V)) \\\n+  decl(ext_Zvkn        , \"Zvkn\"        , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvkn, ext_V)) \\\n+  decl(ext_Zicond      , \"Zicond\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicond))          \\\n+  decl(mvendorid       , \"VendorId\"    , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n+  decl(marchid         , \"ArchId\"      , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n+  decl(mimpid          , \"ImpId\"       , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n+  decl(unaligned_access, \"Unaligned\"   , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n+  decl(satp_mode       , \"SATP\"        , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":63,"deletions":42,"binary":false,"changes":105,"status":"modified"}]}