{"files":[{"patch":"@@ -134,1 +134,1 @@\n-$(eval $(call SetupVariable,JIB_JAR,OPTIONAL))\n+$(eval $(call SetupVariable,JIB_HOME,OPTIONAL))\n@@ -268,1 +268,1 @@\n-    JIB_JAR := $(JIB_JAR), \\\n+    JIB_HOME := $(JIB_HOME), \\\n@@ -298,0 +298,1 @@\n+\t$(call MakeDir, $(JAVA_TMP_DIR))\n","filename":"make\/RunTestsPrebuilt.gmk","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-# Make sure all shell commands are executed with the C locale\n-export LC_ALL := C\n-\n@@ -60,0 +57,2 @@\n+LOCALE_USED := C\n+\n@@ -61,2 +60,2 @@\n-JOBS ?= $(NUM_CORES)\n-TEST_JOBS ?= 0\n+CONF_JOBS := $(NUM_CORES)\n+CONF_TEST_JOBS := 0\n@@ -68,12 +67,2 @@\n-BUILDJDK_JAVA_FLAGS_SMALL := -Xms32M -Xmx512M -XX:TieredStopAtLevel=1\n-BUILD_JAVA_FLAGS := $(JAVA_FLAGS_BIG)\n-\n-################################################################################\n-# Hard-coded values copied from spec.gmk.in.\n-X :=\n-SPACE := $(X) $(X)\n-COMMA := ,\n-MAKE_ARGS = $(MAKE_LOG_FLAGS) -r -R -I $(TOPDIR)\/make\/common SPEC=$(SPEC) \\\n-    MAKE_LOG_FLAGS=\"$(MAKE_LOG_FLAGS)\" LOG_LEVEL=$(LOG_LEVEL)\n-BASH_ARGS := -o pipefail -e\n-SHELL := $(BASH) $(BASH_ARGS)\n+BUILD_JAVA_FLAGS_SMALL := -Xms32M -Xmx512M -XX:TieredStopAtLevel=1\n+BOOTCYCLE_JVM_ARGS_BIG := $(JAVA_FLAGS_BIG)\n@@ -87,14 +76,0 @@\n-################################################################################\n-# Alias some paths (that should not really be used) to our JDK image under test.\n-SUPPORT_OUTPUTDIR := $(OUTPUTDIR)\/support\n-BUILDTOOLS_OUTPUTDIR := $(OUTPUTDIR)\/buildtools\n-HOTSPOT_OUTPUTDIR := $(OUTPUTDIR)\/hotspot\n-JDK_OUTPUTDIR := $(OUTPUTDIR)\/jdk\n-IMAGES_OUTPUTDIR := $(OUTPUTDIR)\/images\n-BUNDLES_OUTPUTDIR := $(OUTPUTDIR)\/bundles\n-TESTMAKE_OUTPUTDIR := $(OUTPUTDIR)\/test-make\n-MAKESUPPORT_OUTPUTDIR := $(OUTPUTDIR)\/make-support\n-BUILDJDK_OUTPUTDIR := $(OUTPUTDIR)\/buildjdk\n-\n-JRE_IMAGE_DIR := $(JDK_IMAGE_DIR)\n-\n@@ -112,0 +87,2 @@\n+EXTERNAL_BUILDJDK_PATH :=\n+\n@@ -114,16 +91,4 @@\n-JAVA_CMD := $(BOOT_JDK)\/bin\/java\n-JAVAC_CMD := $(BOOT_JDK)\/bin\/javac\n-JAR_CMD := $(BOOT_JDK)\/bin\/jar\n-JLINK_CMD := $(JDK_OUTPUTDIR)\/bin\/jlink\n-JMOD_CMD := $(JDK_OUTPUTDIR)\/bin\/jmod\n-\n-JAVA := $(FIXPATH) $(JAVA_CMD) $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)\n-JAVA_SMALL := $(FIXPATH) $(JAVA_CMD) $(JAVA_FLAGS_SMALL) $(JAVA_FLAGS)\n-JAVAC := $(FIXPATH) $(JAVAC_CMD)\n-JAR := $(FIXPATH) $(JAR_CMD)\n-JLINK := $(FIXPATH) $(JLINK_CMD)\n-JMOD := $(FIXPATH) $(JMOD_CMD)\n-\n-JTREG_JAVA := $(FIXPATH) $(JTREG_JDK)\/bin\/java $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)\n-\n-BUILD_JAVA := $(JDK_IMAGE_DIR)\/bin\/JAVA\n+JAVA_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/java\n+JAVAC_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/javac\n+JAR_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/jar\n+\n@@ -135,1 +100,0 @@\n-CD := cd\n","filename":"make\/RunTestsPrebuiltSpec.gmk","additions":12,"deletions":48,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -379,4 +379,4 @@\n-  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVA, java)\n-  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVAC, javac)\n-  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVADOC, javadoc)\n-  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAR, jar)\n+  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVA_CMD, java)\n+  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVAC_CMD, javac)\n+  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAVADOC_CMD, javadoc)\n+  BOOTJDK_CHECK_TOOL_IN_BOOTJDK(JAR_CMD, jar)\n","filename":"make\/autoconf\/boot-jdk.m4","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,20 +31,1 @@\n-# Override specific values to do a boot cycle build\n-\n-# Use a different Boot JDK\n-BOOT_JDK := $(JDK_IMAGE_DIR)\n-\n-# The bootcycle build has a different output directory\n-OLD_OUTPUTDIR := @OUTPUTDIR@\n-OUTPUTDIR := $(OLD_OUTPUTDIR)\/bootcycle-build\n-# No spaces in patsubst to avoid leading space in variable\n-JAVAC_SERVER_DIR := $(patsubst $(OLD_OUTPUTDIR)%,$(OUTPUTDIR)%,$(JAVAC_SERVER_DIR))\n-\n-JAVA_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/java\n-JAVAC_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/javac\n-JAR_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/jar\n-# The bootcycle JVM arguments may differ from the original boot jdk.\n-JAVA_FLAGS_BIG := @BOOTCYCLE_JVM_ARGS_BIG@\n-# Any CDS settings generated for the bootjdk are invalid in the bootcycle build.\n-# By filtering out those JVM args, the bootcycle JVM will use its default\n-# settings for CDS.\n-JAVA_FLAGS := $(filter-out -XX:SharedArchiveFile% -Xshare%, $(JAVA_FLAGS))\n+IS_BOOTCYCLE_JDK_SPEC := true\n","filename":"make\/autoconf\/bootcycle-spec.gmk.template","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-      JOBS=\"$memory_gb\"\n+      CONF_JOBS=\"$memory_gb\"\n@@ -135,1 +135,1 @@\n-      JOBS=\"$NUM_CORES\"\n+      CONF_JOBS=\"$NUM_CORES\"\n@@ -137,2 +137,2 @@\n-    if test \"$JOBS\" -eq \"0\"; then\n-      JOBS=1\n+    if test \"$CONF_JOBS\" -eq \"0\"; then\n+      CONF_JOBS=1\n@@ -140,1 +140,1 @@\n-    AC_MSG_RESULT([$JOBS])\n+    AC_MSG_RESULT([$CONF_JOBS])\n@@ -142,1 +142,1 @@\n-    JOBS=$with_jobs\n+    CONF_JOBS=$with_jobs\n@@ -144,1 +144,1 @@\n-  AC_SUBST(JOBS)\n+  AC_SUBST(CONF_JOBS)\n@@ -153,1 +153,1 @@\n-      TEST_JOBS=0\n+      CONF_TEST_JOBS=0\n@@ -155,1 +155,1 @@\n-      TEST_JOBS=$with_test_jobs\n+      CONF_TEST_JOBS=$with_test_jobs\n@@ -157,1 +157,1 @@\n-  AC_SUBST(TEST_JOBS)\n+  AC_SUBST(CONF_TEST_JOBS)\n","filename":"make\/autoconf\/build-performance.m4","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,78 +33,1 @@\n-CC := @BUILD_CC@\n-CXX := @BUILD_CXX@\n-# Ideally this should be probed by configure but that is tricky to implement,\n-# and this should work in most cases.\n-CPP := @BUILD_CC@ -E\n-LD := @BUILD_LD@\n-LDCXX := @BUILD_LDCXX@\n-AS := @BUILD_AS@\n-NM := @BUILD_NM@\n-AR := @BUILD_AR@\n-LIB := @BUILD_LIB@\n-OBJCOPY := @BUILD_OBJCOPY@\n-STRIP := @BUILD_STRIP@\n-SYSROOT_CFLAGS := @BUILD_SYSROOT_CFLAGS@\n-SYSROOT_LDFLAGS := @BUILD_SYSROOT_LDFLAGS@\n-\n-# These directories should not be moved to BUILDJDK_OUTPUTDIR\n-HOTSPOT_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(HOTSPOT_OUTPUTDIR))\n-BUILDTOOLS_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(BUILDTOOLS_OUTPUTDIR))\n-SUPPORT_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(SUPPORT_OUTPUTDIR))\n-JDK_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(JDK_OUTPUTDIR))\n-IMAGES_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(IMAGES_OUTPUTDIR))\n-\n-OPENJDK_BUILD_CPU_LEGACY := @OPENJDK_BUILD_CPU_LEGACY@\n-OPENJDK_BUILD_CPU_LEGACY_LIB := @OPENJDK_BUILD_CPU_LEGACY_LIB@\n-OPENJDK_BUILD_LIBC := @OPENJDK_BUILD_LIBC@\n-OPENJDK_TARGET_CPU := @OPENJDK_BUILD_CPU@\n-OPENJDK_TARGET_CPU_ARCH := @OPENJDK_BUILD_CPU_ARCH@\n-OPENJDK_TARGET_CPU_BITS := @OPENJDK_BUILD_CPU_BITS@\n-OPENJDK_TARGET_CPU_ENDIAN := @OPENJDK_BUILD_CPU_ENDIAN@\n-OPENJDK_TARGET_CPU_LEGACY := @OPENJDK_BUILD_CPU_LEGACY@\n-OPENJDK_TARGET_LIBC := @OPENJDK_BUILD_LIBC@\n-OPENJDK_TARGET_OS_INCLUDE_SUBDIR := @OPENJDK_BUILD_OS_INCLUDE_SUBDIR@\n-\n-HOTSPOT_TARGET_OS := @HOTSPOT_BUILD_OS@\n-HOTSPOT_TARGET_OS_TYPE := @HOTSPOT_BUILD_OS_TYPE@\n-HOTSPOT_TARGET_CPU := @HOTSPOT_BUILD_CPU@\n-HOTSPOT_TARGET_CPU_ARCH := @HOTSPOT_BUILD_CPU_ARCH@\n-HOTSPOT_TARGET_CPU_DEFINE := @HOTSPOT_BUILD_CPU_DEFINE@\n-HOTSPOT_TARGET_LIBC := @HOTSPOT_BUILD_LIBC@\n-\n-CFLAGS_JDKLIB := @OPENJDK_BUILD_CFLAGS_JDKLIB@\n-CXXFLAGS_JDKLIB := @OPENJDK_BUILD_CXXFLAGS_JDKLIB@\n-LDFLAGS_JDKLIB := @OPENJDK_BUILD_LDFLAGS_JDKLIB@\n-CFLAGS_JDKEXE := @OPENJDK_BUILD_CFLAGS_JDKEXE@\n-CXXFLAGS_JDKEXE := @OPENJDK_BUILD_CXXFLAGS_JDKEXE@\n-LDFLAGS_JDKEXE := @OPENJDK_BUILD_LDFLAGS_JDKEXE@\n-\n-JVM_CFLAGS := @OPENJDK_BUILD_JVM_CFLAGS@\n-JVM_LDFLAGS := @OPENJDK_BUILD_JVM_LDFLAGS@\n-JVM_ASFLAGS := @OPENJDK_BUILD_JVM_ASFLAGS@\n-JVM_LIBS := @OPENJDK_BUILD_JVM_LIBS@\n-\n-FDLIBM_CFLAGS := @OPENJDK_BUILD_FDLIBM_CFLAGS@\n-\n-INTERIM_LANGTOOLS_ARGS := $(subst $(OUTPUTDIR),$(BUILDJDK_OUTPUTDIR),$(INTERIM_LANGTOOLS_ARGS))\n-\n-# The compiler for the build platform is likely not warning compatible with the official\n-# compiler.\n-WARNINGS_AS_ERRORS := false\n-DISABLE_WARNING_PREFIX := @BUILD_CC_DISABLE_WARNING_PREFIX@\n-\n-# Save speed and disk space by not enabling debug symbols for the buildjdk\n-ENABLE_DEBUG_SYMBOLS := false\n-\n-JVM_VARIANTS := server\n-JVM_VARIANT_MAIN := server\n-JVM_FEATURES_server := cds compiler1 compiler2 g1gc serialgc\n-\n-# Some users still set EXTRA_*FLAGS on the make command line. Must\n-# make sure to override that when building buildjdk.\n-override EXTRA_CFLAGS :=\n-override EXTRA_CXXFLAGS :=\n-override EXTRA_LDFLAGS :=\n-\n-# hsdis is not needed\n-HSDIS_BACKEND := none\n-ENABLE_HSDIS_BUNDLING := false\n+IS_BUILD_JDK_SPEC := true\n","filename":"make\/autoconf\/buildjdk-spec.gmk.template","additions":1,"deletions":78,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -308,1 +308,1 @@\n-    source_date_info=\"$SOURCE_DATE ($SOURCE_DATE_ISO_8601)\"\n+    source_date_info=\"$SOURCE_DATE ($SOURCE_DATE_ISO_8601_FIXED)\"\n@@ -333,1 +333,1 @@\n-  $ECHO \"* Build jobs:     $JOBS\"\n+  $ECHO \"* Build jobs:     $CONF_JOBS\"\n","filename":"make\/autoconf\/help.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-      HOTSPOT_BUILD_TIME=\"$SOURCE_DATE_ISO_8601\"\n+      HOTSPOT_BUILD_TIME=\"$SOURCE_DATE_ISO_8601_FIXED\"\n","filename":"make\/autoconf\/hotspot.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -900,1 +900,1 @@\n-      SOURCE_DATE_ISO_8601=`$DATE --utc --date=\"@$SOURCE_DATE\" +\"$ISO_8601_FORMAT_STRING\" 2> \/dev\/null`\n+      SOURCE_DATE_ISO_8601_FIXED=`$DATE --utc --date=\"@$SOURCE_DATE\" +\"$ISO_8601_FORMAT_STRING\" 2> \/dev\/null`\n@@ -902,1 +902,1 @@\n-      SOURCE_DATE_ISO_8601=`$DATE -u -j -f \"%s\" \"$SOURCE_DATE\" +\"$ISO_8601_FORMAT_STRING\" 2> \/dev\/null`\n+      SOURCE_DATE_ISO_8601_FIXED=`$DATE -u -j -f \"%s\" \"$SOURCE_DATE\" +\"$ISO_8601_FORMAT_STRING\" 2> \/dev\/null`\n@@ -908,1 +908,1 @@\n-  AC_SUBST(SOURCE_DATE_ISO_8601)\n+  AC_SUBST(SOURCE_DATE_ISO_8601_FIXED)\n","filename":"make\/autoconf\/jdk-options.m4","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,7 +49,0 @@\n-# SPACE and COMMA are defined in MakeBase.gmk, but they are also used in\n-# some definitions here, and are needed if MakeBase.gmk is not included before\n-# this file.\n-X :=\n-SPACE := $(X) $(X)\n-COMMA := ,\n-\n@@ -59,10 +52,0 @@\n-# Make sure all shell commands are executed with a proper locale\n-export LC_ALL := @LOCALE_USED@\n-\n-# Make sure we override any local CLASSPATH variable\n-export CLASSPATH := @CLASSPATH@\n-\n-# The default make arguments\n-MAKE_ARGS = $(MAKE_LOG_FLAGS) -r -R -I $(TOPDIR)\/make\/common SPEC=$(SPEC) \\\n-    MAKE_LOG_FLAGS=\"$(MAKE_LOG_FLAGS)\" $(MAKE_LOG_VARS)\n-\n@@ -75,1 +58,0 @@\n-SHELL := $(BASH) $(BASH_ARGS)\n@@ -124,0 +106,2 @@\n+OPENJDK_BUILD_CPU_LEGACY := @OPENJDK_BUILD_CPU_LEGACY@\n+OPENJDK_BUILD_CPU_LEGACY_LIB := @OPENJDK_BUILD_CPU_LEGACY_LIB@\n@@ -126,1 +110,23 @@\n-OPENJDK_BUILD_OS_INCLUDE_SUBDIR := @OPENJDK_TARGET_OS_INCLUDE_SUBDIR@\n+OPENJDK_BUILD_OS_INCLUDE_SUBDIR := @OPENJDK_BUILD_OS_INCLUDE_SUBDIR@\n+\n+HOTSPOT_BUILD_OS := @HOTSPOT_BUILD_OS@\n+HOTSPOT_BUILD_OS_TYPE := @HOTSPOT_BUILD_OS_TYPE@\n+HOTSPOT_BUILD_CPU := @HOTSPOT_BUILD_CPU@\n+HOTSPOT_BUILD_CPU_ARCH := @HOTSPOT_BUILD_CPU_ARCH@\n+HOTSPOT_BUILD_CPU_DEFINE := @HOTSPOT_BUILD_CPU_DEFINE@\n+HOTSPOT_BUILD_LIBC := @HOTSPOT_BUILD_LIBC@\n+\n+OPENJDK_BUILD_CFLAGS_JDKLIB := @OPENJDK_BUILD_CFLAGS_JDKLIB@\n+OPENJDK_BUILD_CXXFLAGS_JDKLIB := @OPENJDK_BUILD_CXXFLAGS_JDKLIB@\n+OPENJDK_BUILD_LDFLAGS_JDKLIB := @OPENJDK_BUILD_LDFLAGS_JDKLIB@\n+OPENJDK_BUILD_CFLAGS_JDKEXE := @OPENJDK_BUILD_CFLAGS_JDKEXE@\n+OPENJDK_BUILD_CXXFLAGS_JDKEXE := @OPENJDK_BUILD_CXXFLAGS_JDKEXE@\n+OPENJDK_BUILD_LDFLAGS_JDKEXE := @OPENJDK_BUILD_LDFLAGS_JDKEXE@\n+\n+OPENJDK_BUILD_JVM_CFLAGS := @OPENJDK_BUILD_JVM_CFLAGS@\n+OPENJDK_BUILD_JVM_LDFLAGS := @OPENJDK_BUILD_JVM_LDFLAGS@\n+OPENJDK_BUILD_JVM_ASFLAGS := @OPENJDK_BUILD_JVM_ASFLAGS@\n+OPENJDK_BUILD_JVM_LIBS := @OPENJDK_BUILD_JVM_LIBS@\n+\n+OPENJDK_BUILD_FDLIBM_CFLAGS := @OPENJDK_BUILD_FDLIBM_CFLAGS@\n+BUILD_CC_DISABLE_WARNING_PREFIX := @BUILD_CC_DISABLE_WARNING_PREFIX@\n@@ -138,6 +144,1 @@\n-\n-ifneq ($(SOURCE_DATE), updated)\n-  # For \"updated\" source date value, these are set in InitSupport.gmk\n-  export SOURCE_DATE_EPOCH := $(SOURCE_DATE)\n-  SOURCE_DATE_ISO_8601 := @SOURCE_DATE_ISO_8601@\n-endif\n+SOURCE_DATE_ISO_8601_FIXED := @SOURCE_DATE_ISO_8601_FIXED@\n@@ -152,8 +153,0 @@\n-ifneq ($(findstring windows.wsl, @OPENJDK_BUILD_OS_ENV@), )\n-  # Tell WSL to convert PATH between linux and windows\n-  export WSLENV := PATH\/l\n-else ifeq (@OPENJDK_BUILD_OS_ENV@, windows.msys2)\n-  # Prohibit msys2 from attempting any path wrangling\n-  export MSYS2_ARG_CONV_EXCL := \"*\"\n-endif\n-\n@@ -163,6 +156,0 @@\n-ifeq (@TOOLCHAIN_TYPE@, microsoft)\n-  # The Visual Studio toolchain needs the PATH to be adjusted to include\n-  # Visual Studio tools.\n-  export PATH := @TOOLCHAIN_PATH@:$(PATH)\n-endif\n-\n@@ -233,2 +220,0 @@\n-# The Java specification version. It usually equals the feature version number.\n-VERSION_SPECIFICATION := @VERSION_FEATURE@\n@@ -254,51 +239,0 @@\n-# Convenience CFLAGS settings for passing version information into native programs.\n-VERSION_CFLAGS = \\\n-    -DVERSION_FEATURE=$(VERSION_FEATURE) \\\n-    -DVERSION_INTERIM=$(VERSION_INTERIM) \\\n-    -DVERSION_UPDATE=$(VERSION_UPDATE) \\\n-    -DVERSION_PATCH=$(VERSION_PATCH) \\\n-    -DVERSION_EXTRA1=$(VERSION_EXTRA1) \\\n-    -DVERSION_EXTRA2=$(VERSION_EXTRA2) \\\n-    -DVERSION_EXTRA3=$(VERSION_EXTRA3) \\\n-    -DVERSION_PRE='\"$(VERSION_PRE)\"' \\\n-    -DVERSION_BUILD=$(VERSION_BUILD) \\\n-    -DVERSION_OPT='\"$(VERSION_OPT)\"' \\\n-    -DVERSION_NUMBER='\"$(VERSION_NUMBER)\"' \\\n-    -DVERSION_STRING='\"$(VERSION_STRING)\"' \\\n-    -DVERSION_SHORT='\"$(VERSION_SHORT)\"' \\\n-    -DVERSION_SPECIFICATION='\"$(VERSION_SPECIFICATION)\"' \\\n-    -DVERSION_DATE='\"$(VERSION_DATE)\"' \\\n-    -DVENDOR_VERSION_STRING='\"$(VENDOR_VERSION_STRING)\"' \\\n-    -DVERSION_CLASSFILE_MAJOR=$(VERSION_CLASSFILE_MAJOR) \\\n-    -DVERSION_CLASSFILE_MINOR=$(VERSION_CLASSFILE_MINOR) \\\n-    #\n-\n-ifneq ($(COMPANY_NAME), )\n-  # COMPANY_NAME is set to \"N\/A\" in make\/conf\/branding.conf by default,\n-  # but can be customized with the '--with-vendor-name' configure option.\n-  # Only export \"VENDOR\" to the build if COMPANY_NAME contains a real value.\n-  # Otherwise the default value for VENDOR, which is used to set the \"java.vendor\"\n-  # and \"java.vm.vendor\" properties is hard-coded into the source code (i.e. in\n-  # VersionProps.java.template in the jdk for \"java.vendor\" and\n-  # vm_version.cpp in the VM for \"java.vm.vendor\")\n-  ifneq ($(COMPANY_NAME), N\/A)\n-    VERSION_CFLAGS += -DVENDOR='\"$(COMPANY_NAME)\"'\n-  endif\n-endif\n-\n-# Only export VENDOR_URL, VENDOR_URL_BUG and VENDOR_VM_URL_BUG to the build if\n-# they are not empty. Otherwise, default values which are defined in the sources\n-# will be used.\n-ifneq ($(VENDOR_URL), )\n-  VERSION_CFLAGS += -DVENDOR_URL='\"$(VENDOR_URL)\"'\n-endif\n-ifneq ($(VENDOR_URL_BUG), )\n-  VERSION_CFLAGS += -DVENDOR_URL_BUG='\"$(VENDOR_URL_BUG)\"'\n-endif\n-ifneq ($(VENDOR_URL_VM_BUG), )\n-  VERSION_CFLAGS += -DVENDOR_URL_VM_BUG='\"$(VENDOR_URL_VM_BUG)\"'\n-endif\n-\n-# Different naming strings generated from the above information.\n-RUNTIME_NAME = $(PRODUCT_NAME) $(PRODUCT_SUFFIX)\n-\n@@ -346,3 +280,0 @@\n-# Colon left out to be able to override IMAGES_OUTPUTDIR for bootcycle-images\n-SUPPORT_OUTPUTDIR = $(OUTPUTDIR)\/support\n-BUILDTOOLS_OUTPUTDIR = $(OUTPUTDIR)\/buildtools\n@@ -350,10 +281,0 @@\n-HOTSPOT_OUTPUTDIR = $(OUTPUTDIR)\/hotspot\n-JDK_OUTPUTDIR = $(OUTPUTDIR)\/jdk\n-IMAGES_OUTPUTDIR = $(OUTPUTDIR)\/images\n-BUNDLES_OUTPUTDIR = $(OUTPUTDIR)\/bundles\n-TESTMAKE_OUTPUTDIR = $(OUTPUTDIR)\/test-make\n-MAKESUPPORT_OUTPUTDIR = $(OUTPUTDIR)\/make-support\n-\n-JAVA_TMP_DIR = $(SUPPORT_OUTPUTDIR)\/javatmp\n-\n-# This does not get overridden in a bootcycle build\n@@ -361,1 +282,0 @@\n-BUILDJDK_OUTPUTDIR = $(OUTPUTDIR)\/buildjdk\n@@ -391,15 +311,0 @@\n-ifneq ($(EXTERNAL_BUILDJDK_PATH), )\n-  EXTERNAL_BUILDJDK := true\n-  CREATE_BUILDJDK := false\n-  BUILD_JDK := $(EXTERNAL_BUILDJDK_PATH)\n-else\n-  EXTERNAL_BUILDJDK := false\n-  ifeq ($(COMPILE_TYPE), cross)\n-    CREATE_BUILDJDK := true\n-    BUILD_JDK := $(BUILDJDK_OUTPUTDIR)\/jdk\n-  else\n-    CREATE_BUILDJDK := false\n-    BUILD_JDK := $(JDK_OUTPUTDIR)\n-  endif\n-endif\n-\n@@ -416,3 +321,0 @@\n-# Store javac server synchronization files here, and\n-# the javac server log files.\n-JAVAC_SERVER_DIR = $(MAKESUPPORT_OUTPUTDIR)\/javacservers\n@@ -421,2 +323,2 @@\n-JOBS ?= @JOBS@\n-TEST_JOBS ?= @TEST_JOBS@\n+CONF_JOBS := @CONF_JOBS@\n+CONF_TEST_JOBS := @CONF_TEST_JOBS@\n@@ -540,1 +442,1 @@\n-CC := @CCACHE@ @ICECC@ @CC@\n+CC := @CC@\n@@ -566,1 +468,1 @@\n-CXX := @CCACHE@ @ICECC@ @CXX@\n+CXX := @CXX@\n@@ -597,2 +499,2 @@\n-BUILD_CC := @BUILD_ICECC@ @BUILD_CC@\n-BUILD_CXX := @BUILD_ICECC@ @BUILD_CXX@\n+BUILD_CC := @BUILD_CC@\n+BUILD_CXX := @BUILD_CXX@\n@@ -649,2 +551,1 @@\n-JAVA_FLAGS_TMPDIR := -Djava.io.tmpdir=$(JAVA_TMP_DIR)\n-JAVA_FLAGS := @JAVA_FLAGS@ $(JAVA_FLAGS_TMPDIR)\n+JAVA_FLAGS := @JAVA_FLAGS@\n@@ -656,18 +557,5 @@\n-# The *_CMD variables are defined separately to be easily overridden in bootcycle-spec.gmk\n-# for bootcycle-images build. Make sure to keep them in sync. Do not use the *_CMD\n-# versions of the variables directly.\n-JAVA_CMD := @JAVA@\n-JAVAC_CMD := @JAVAC@\n-JAVADOC_CMD := @JAVADOC@\n-JAR_CMD := @JAR@\n-JLINK_CMD := @FIXPATH@ $(BUILD_JDK)\/bin\/jlink\n-JMOD_CMD := @FIXPATH@ $(BUILD_JDK)\/bin\/jmod\n-# These variables are meant to be used. They are defined with = instead of := to make\n-# it possible to override only the *_CMD variables.\n-JAVA = $(JAVA_CMD) $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)\n-JAVA_SMALL = $(JAVA_CMD) $(JAVA_FLAGS_SMALL) $(JAVA_FLAGS)\n-JAVAC = $(JAVAC_CMD)\n-JAVADOC = $(JAVADOC_CMD)\n-JAR = $(JAR_CMD)\n-JLINK = $(JLINK_CMD)\n-JMOD = $(JMOD_CMD)\n+# Do not use the *_CMD versions of the variables directly.\n+JAVA_CMD := @JAVA_CMD@\n+JAVAC_CMD := @JAVAC_CMD@\n+JAVADOC_CMD := @JAVADOC_CMD@\n+JAR_CMD := @JAR_CMD@\n@@ -676,1 +564,0 @@\n-JTREG_JAVA = @FIXPATH@ $(JTREG_JDK)\/bin\/java $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)\n@@ -678,5 +565,1 @@\n-BUILD_JAVA_FLAGS := @BOOTCYCLE_JVM_ARGS_BIG@\n-BUILD_JAVA = @FIXPATH@ $(BUILD_JDK)\/bin\/java $(BUILD_JAVA_FLAGS)\n-BUILD_JAVA_SMALL = @FIXPATH@ $(BUILD_JDK)\/bin\/java $(BUILD_JAVA_FLAGS_SMALL)\n-BUILD_JAVAC = @FIXPATH@ $(BUILD_JDK)\/bin\/javac\n-BUILD_JAR = @FIXPATH@ $(BUILD_JDK)\/bin\/jar\n+BOOTCYCLE_JVM_ARGS_BIG := @BOOTCYCLE_JVM_ARGS_BIG@\n@@ -686,34 +569,0 @@\n-# A file containing a way to uniquely identify the source code revision that\n-# the build was created from\n-SOURCE_REVISION_TRACKER := $(SUPPORT_OUTPUTDIR)\/src-rev\/source-revision-tracker\n-\n-# Interim langtools modules and arguments\n-INTERIM_LANGTOOLS_BASE_MODULES := java.compiler jdk.compiler jdk.internal.md jdk.javadoc\n-INTERIM_LANGTOOLS_MODULES := $(addsuffix .interim, $(INTERIM_LANGTOOLS_BASE_MODULES))\n-INTERIM_LANGTOOLS_ADD_EXPORTS := \\\n-    --add-exports java.base\/sun.reflect.annotation=jdk.compiler.interim \\\n-    --add-exports java.base\/jdk.internal.jmod=jdk.compiler.interim \\\n-    --add-exports java.base\/jdk.internal.misc=jdk.compiler.interim \\\n-    --add-exports java.base\/sun.invoke.util=jdk.compiler.interim \\\n-    --add-exports java.base\/jdk.internal.javac=java.compiler.interim \\\n-    --add-exports java.base\/jdk.internal.javac=jdk.compiler.interim \\\n-    --add-exports jdk.internal.opt\/jdk.internal.opt=jdk.compiler.interim \\\n-    --add-exports jdk.internal.opt\/jdk.internal.opt=jdk.javadoc.interim \\\n-    #\n-INTERIM_LANGTOOLS_MODULES_COMMA := $(strip $(subst $(SPACE),$(COMMA),$(strip \\\n-    $(INTERIM_LANGTOOLS_MODULES))))\n-INTERIM_LANGTOOLS_ARGS := \\\n-    --limit-modules java.base,jdk.zipfs,$(INTERIM_LANGTOOLS_MODULES_COMMA) \\\n-    --add-modules $(INTERIM_LANGTOOLS_MODULES_COMMA) \\\n-    --module-path $(BUILDTOOLS_OUTPUTDIR)\/interim_langtools_modules \\\n-    --patch-module java.base=$(BUILDTOOLS_OUTPUTDIR)\/gensrc\/java.base.interim \\\n-    $(INTERIM_LANGTOOLS_ADD_EXPORTS) \\\n-    #\n-JAVAC_MAIN_CLASS := -m jdk.compiler.interim\/com.sun.tools.javac.Main\n-JAVADOC_MAIN_CLASS := -m jdk.javadoc.interim\/jdk.javadoc.internal.tool.Main\n-\n-# You run the new javac using the boot jdk with $(BOOT_JDK)\/bin\/java $(NEW_JAVAC) ...\n-# Use = assignment to be able to override in bootcycle-spec.gmk\n-NEW_JAVAC = $(INTERIM_LANGTOOLS_ARGS) $(JAVAC_MAIN_CLASS)\n-NEW_JAVADOC = $(INTERIM_LANGTOOLS_ARGS) $(JAVADOC_MAIN_CLASS)\n-\n@@ -732,2 +581,0 @@\n-# CD is going away, but remains to cater for legacy makefiles.\n-CD := cd\n@@ -784,1 +631,0 @@\n-WSLPATH := @WSLPATH@\n@@ -849,104 +695,5 @@\n-# Images directory definitions\n-JDK_IMAGE_SUBDIR := jdk\n-JRE_IMAGE_SUBDIR := jre\n-JCOV_IMAGE_SUBDIR := jdk-jcov\n-STATIC_JDK_IMAGE_SUBDIR := static-jdk\n-\n-# Colon left out to be able to override output dir for bootcycle-images\n-JDK_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(JDK_IMAGE_SUBDIR)\n-JRE_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(JRE_IMAGE_SUBDIR)\n-STATIC_JDK_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(STATIC_JDK_IMAGE_SUBDIR)\n-JCOV_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(JCOV_IMAGE_SUBDIR)\n-\n-# Test image, as above\n-TEST_IMAGE_SUBDIR := test\n-TEST_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(TEST_IMAGE_SUBDIR)\n-\n-# Symbols image\n-SYMBOLS_IMAGE_SUBDIR := symbols\n-SYMBOLS_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(SYMBOLS_IMAGE_SUBDIR)\n-\n-# Interim image\n-INTERIM_JMODS_DIR := $(SUPPORT_OUTPUTDIR)\/interim-jmods\n-INTERIM_IMAGE_DIR := $(SUPPORT_OUTPUTDIR)\/interim-image\n-\n-# Docs image\n-DOCS_JDK_IMAGE_SUBDIR := docs\n-DOCS_JDK_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(DOCS_JDK_IMAGE_SUBDIR)\n-DOCS_JAVASE_IMAGE_SUBDIR := docs-javase\n-DOCS_JAVASE_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(DOCS_JAVASE_IMAGE_SUBDIR)\n-DOCS_REFERENCE_IMAGE_SUBDIR := docs-reference\n-DOCS_REFERENCE_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(DOCS_REFERENCE_IMAGE_SUBDIR)\n-# Output docs directly into image\n-DOCS_OUTPUTDIR := $(DOCS_JDK_IMAGE_DIR)\n-\n-# Static libs image\n-STATIC_LIBS_IMAGE_SUBDIR := static-libs\n-STATIC_LIBS_IMAGE_DIR := $(IMAGES_OUTPUTDIR)\/$(STATIC_LIBS_IMAGE_SUBDIR)\n-\n-# Graal static libs image\n-STATIC_LIBS_GRAAL_IMAGE_SUBDIR := static-libs-graal\n-STATIC_LIBS_GRAAL_IMAGE_DIR := $(IMAGES_OUTPUTDIR)\/$(STATIC_LIBS_GRAAL_IMAGE_SUBDIR)\n-\n-# Graal builder image\n-GRAAL_BUILDER_IMAGE_SUBDIR := graal-builder-jdk\n-GRAAL_BUILDER_IMAGE_DIR := $(IMAGES_OUTPUTDIR)\/$(GRAAL_BUILDER_IMAGE_SUBDIR)\n-\n-# Macosx bundles directory definitions\n-JDK_MACOSX_BUNDLE_SUBDIR := jdk-bundle\n-JRE_MACOSX_BUNDLE_SUBDIR := jre-bundle\n-JDK_MACOSX_BUNDLE_SUBDIR_SIGNED := jdk-bundle-signed\n-JRE_MACOSX_BUNDLE_SUBDIR_SIGNED := jre-bundle-signed\n-JDK_MACOSX_BUNDLE_DIR = $(IMAGES_OUTPUTDIR)\/$(JDK_MACOSX_BUNDLE_SUBDIR)\n-JRE_MACOSX_BUNDLE_DIR = $(IMAGES_OUTPUTDIR)\/$(JRE_MACOSX_BUNDLE_SUBDIR)\n-JDK_MACOSX_BUNDLE_DIR_SIGNED = $(IMAGES_OUTPUTDIR)\/$(JDK_MACOSX_BUNDLE_SUBDIR_SIGNED)\n-JRE_MACOSX_BUNDLE_DIR_SIGNED = $(IMAGES_OUTPUTDIR)\/$(JRE_MACOSX_BUNDLE_SUBDIR_SIGNED)\n-JDK_MACOSX_BUNDLE_TOP_SUBDIR = jdk-$(VERSION_NUMBER).jdk\n-JRE_MACOSX_BUNDLE_TOP_SUBDIR = jre-$(VERSION_NUMBER).jre\n-JDK_MACOSX_CONTENTS_SUBDIR = $(JDK_MACOSX_BUNDLE_TOP_SUBDIR)\/Contents\n-JRE_MACOSX_CONTENTS_SUBDIR = $(JRE_MACOSX_BUNDLE_TOP_SUBDIR)\/Contents\n-JDK_MACOSX_CONTENTS_DIR = $(JDK_MACOSX_BUNDLE_DIR)\/$(JDK_MACOSX_CONTENTS_SUBDIR)\n-JRE_MACOSX_CONTENTS_DIR = $(JRE_MACOSX_BUNDLE_DIR)\/$(JRE_MACOSX_CONTENTS_SUBDIR)\n-JDK_MACOSX_BUNDLE_TOP_DIR = $(JDK_MACOSX_BUNDLE_DIR)\/$(JDK_MACOSX_BUNDLE_TOP_SUBDIR)\n-JRE_MACOSX_BUNDLE_TOP_DIR = $(JRE_MACOSX_BUNDLE_DIR)\/$(JRE_MACOSX_BUNDLE_TOP_SUBDIR)\n-\n-# Bundle names\n-ifneq ($(VERSION_BUILD), )\n-  BASE_NAME := $(VERSION_SHORT)+$(VERSION_BUILD)_$(OPENJDK_TARGET_BUNDLE_PLATFORM)\n-else\n-  BASE_NAME := $(VERSION_SHORT)_$(OPENJDK_TARGET_BUNDLE_PLATFORM)\n-endif\n-\n-ifeq ($(DEBUG_LEVEL), fastdebug)\n-  DEBUG_PART := -debug\n-else ifneq ($(DEBUG_LEVEL), release)\n-  DEBUG_PART := -$(DEBUG_LEVEL)\n-endif\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n-  JDK_BUNDLE_EXTENSION := zip\n-else\n-  JDK_BUNDLE_EXTENSION := tar.gz\n-endif\n-JDK_BUNDLE_NAME := jdk-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)\n-JRE_BUNDLE_NAME := jre-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)\n-JDK_SYMBOLS_BUNDLE_NAME := jdk-$(BASE_NAME)_bin$(DEBUG_PART)-symbols.tar.gz\n-TEST_DEMOS_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-tests-demos$(DEBUG_PART).tar.gz\n-TEST_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-tests$(DEBUG_PART).tar.gz\n-DOCS_JDK_BUNDLE_NAME := jdk-$(BASE_NAME)_doc-api-spec$(DEBUG_PART).tar.gz\n-DOCS_JAVASE_BUNDLE_NAME := javase-$(BASE_NAME)_doc-api-spec$(DEBUG_PART).tar.gz\n-DOCS_REFERENCE_BUNDLE_NAME := jdk-reference-$(BASE_NAME)_doc-api-spec$(DEBUG_PART).tar.gz\n-STATIC_LIBS_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-static-libs$(DEBUG_PART).tar.gz\n-STATIC_LIBS_GRAAL_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-static-libs-graal$(DEBUG_PART).tar.gz\n-STATIC_JDK_BUNDLE_NAME := static-jdk-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)\n-JCOV_BUNDLE_NAME := jdk-jcov-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)\n-\n-JDK_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(JDK_BUNDLE_NAME)\n-JRE_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(JRE_BUNDLE_NAME)\n-JDK_SYMBOLS_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(JDK_SYMBOLS_BUNDLE_NAME)\n-TEST_DEMOS_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(TEST_DEMOS_BUNDLE_NAME)\n-TEST_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(TEST_BUNDLE_NAME)\n-DOCS_JDK_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(DOCS_JDK_BUNDLE_NAME)\n-DOCS_JAVASE_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(DOCS_JAVASE_BUNDLE_NAME)\n-DOCS_REFERENCE_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(DOCS_REFERENCE_BUNDLE_NAME)\n-STATIC_JDK_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(STATIC_JDK_BUNDLE_NAME)\n-JCOV_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(JCOV_BUNDLE_NAME)\n+BUILD_ICECC := @BUILD_ICECC@\n+ICECC := @ICECC@\n+TOOLCHAIN_PATH := @TOOLCHAIN_PATH@\n+LOCALE_USED := @LOCALE_USED@\n+CLASSPATH := @CLASSPATH@\n@@ -963,1 +710,1 @@\n--include $(dir @SPEC@)\/custom-spec.gmk\n+-include $(dir $(SPEC))\/custom-spec.gmk\n","filename":"make\/autoconf\/spec.gmk.template","additions":45,"deletions":298,"binary":false,"changes":343,"status":"modified"},{"patch":"@@ -0,0 +1,445 @@\n+#\n+# Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+include MakeIncludeStart.gmk\n+ifeq ($(INCLUDE), true)\n+\n+################################################################################\n+# CommonVars include common variables and definitions used in multiple\n+# makefiles.\n+################################################################################\n+\n+# Make sure all shell commands are executed with a proper locale\n+export LC_ALL := $(LOCALE_USED)\n+\n+# Make sure we override any local CLASSPATH variable\n+export CLASSPATH := $(CLASSPATH)\n+\n+# The default make arguments\n+MAKE_ARGS = $(MAKE_LOG_FLAGS) -r -R -I $(TOPDIR)\/make\/common SPEC=$(SPEC) \\\n+    MAKE_LOG_FLAGS=\"$(MAKE_LOG_FLAGS)\" $(MAKE_LOG_VARS)\n+\n+SHELL := $(BASH) $(BASH_ARGS)\n+\n+ifneq ($(SOURCE_DATE), updated)\n+  # For \"updated\" source date value, these are set in InitSupport.gmk\n+  export SOURCE_DATE_EPOCH := $(SOURCE_DATE)\n+  SOURCE_DATE_ISO_8601 := $(SOURCE_DATE_ISO_8601_FIXED)\n+endif\n+\n+ifneq ($(findstring windows.wsl, $(OPENJDK_BUILD_OS_ENV)), )\n+  # Tell WSL to convert PATH between linux and windows\n+  export WSLENV := PATH\/l\n+else ifeq ($(OPENJDK_BUILD_OS_ENV), windows.msys2)\n+  # Prohibit msys2 from attempting any path wrangling\n+  export MSYS2_ARG_CONV_EXCL := \"*\"\n+endif\n+\n+ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+  # The Visual Studio toolchain needs the PATH to be adjusted to include\n+  # Visual Studio tools.\n+  export PATH := $(TOOLCHAIN_PATH):$(PATH)\n+endif\n+\n+# The Java specification version. It usually equals the feature version number.\n+VERSION_SPECIFICATION := $(VERSION_FEATURE)\n+\n+# Convenience CFLAGS settings for passing version information into native programs.\n+VERSION_CFLAGS = \\\n+    -DVERSION_FEATURE=$(VERSION_FEATURE) \\\n+    -DVERSION_INTERIM=$(VERSION_INTERIM) \\\n+    -DVERSION_UPDATE=$(VERSION_UPDATE) \\\n+    -DVERSION_PATCH=$(VERSION_PATCH) \\\n+    -DVERSION_EXTRA1=$(VERSION_EXTRA1) \\\n+    -DVERSION_EXTRA2=$(VERSION_EXTRA2) \\\n+    -DVERSION_EXTRA3=$(VERSION_EXTRA3) \\\n+    -DVERSION_PRE='\"$(VERSION_PRE)\"' \\\n+    -DVERSION_BUILD=$(VERSION_BUILD) \\\n+    -DVERSION_OPT='\"$(VERSION_OPT)\"' \\\n+    -DVERSION_NUMBER='\"$(VERSION_NUMBER)\"' \\\n+    -DVERSION_STRING='\"$(VERSION_STRING)\"' \\\n+    -DVERSION_SHORT='\"$(VERSION_SHORT)\"' \\\n+    -DVERSION_SPECIFICATION='\"$(VERSION_SPECIFICATION)\"' \\\n+    -DVERSION_DATE='\"$(VERSION_DATE)\"' \\\n+    -DVENDOR_VERSION_STRING='\"$(VENDOR_VERSION_STRING)\"' \\\n+    -DVERSION_CLASSFILE_MAJOR=$(VERSION_CLASSFILE_MAJOR) \\\n+    -DVERSION_CLASSFILE_MINOR=$(VERSION_CLASSFILE_MINOR) \\\n+    #\n+\n+ifneq ($(COMPANY_NAME), )\n+  # COMPANY_NAME is set to \"N\/A\" in make\/conf\/branding.conf by default,\n+  # but can be customized with the '--with-vendor-name' configure option.\n+  # Only export \"VENDOR\" to the build if COMPANY_NAME contains a real value.\n+  # Otherwise the default value for VENDOR, which is used to set the \"java.vendor\"\n+  # and \"java.vm.vendor\" properties is hard-coded into the source code (i.e. in\n+  # VersionProps.java.template in the jdk for \"java.vendor\" and\n+  # vm_version.cpp in the VM for \"java.vm.vendor\")\n+  ifneq ($(COMPANY_NAME), N\/A)\n+    VERSION_CFLAGS += -DVENDOR='\"$(COMPANY_NAME)\"'\n+  endif\n+endif\n+\n+# Only export VENDOR_URL, VENDOR_URL_BUG and VENDOR_VM_URL_BUG to the build if\n+# they are not empty. Otherwise, default values which are defined in the sources\n+# will be used.\n+ifneq ($(VENDOR_URL), )\n+  VERSION_CFLAGS += -DVENDOR_URL='\"$(VENDOR_URL)\"'\n+endif\n+ifneq ($(VENDOR_URL_BUG), )\n+  VERSION_CFLAGS += -DVENDOR_URL_BUG='\"$(VENDOR_URL_BUG)\"'\n+endif\n+ifneq ($(VENDOR_URL_VM_BUG), )\n+  VERSION_CFLAGS += -DVENDOR_URL_VM_BUG='\"$(VENDOR_URL_VM_BUG)\"'\n+endif\n+\n+# Different naming strings generated from the above information.\n+RUNTIME_NAME = $(PRODUCT_NAME) $(PRODUCT_SUFFIX)\n+\n+# Colon left out to be able to override IMAGES_OUTPUTDIR for bootcycle-images\n+SUPPORT_OUTPUTDIR = $(OUTPUTDIR)\/support\n+BUILDTOOLS_OUTPUTDIR = $(OUTPUTDIR)\/buildtools\n+\n+HOTSPOT_OUTPUTDIR = $(OUTPUTDIR)\/hotspot\n+JDK_OUTPUTDIR = $(OUTPUTDIR)\/jdk\n+IMAGES_OUTPUTDIR = $(OUTPUTDIR)\/images\n+BUNDLES_OUTPUTDIR = $(OUTPUTDIR)\/bundles\n+TESTMAKE_OUTPUTDIR = $(OUTPUTDIR)\/test-make\n+MAKESUPPORT_OUTPUTDIR = $(OUTPUTDIR)\/make-support\n+\n+JAVA_TMP_DIR = $(SUPPORT_OUTPUTDIR)\/javatmp\n+\n+BUILDJDK_OUTPUTDIR = $(OUTPUTDIR)\/buildjdk\n+\n+ifneq ($(EXTERNAL_BUILDJDK_PATH), )\n+  EXTERNAL_BUILDJDK := true\n+  CREATE_BUILDJDK := false\n+  BUILD_JDK := $(EXTERNAL_BUILDJDK_PATH)\n+else\n+  EXTERNAL_BUILDJDK := false\n+  ifeq ($(COMPILE_TYPE), cross)\n+    CREATE_BUILDJDK := true\n+    BUILD_JDK := $(BUILDJDK_OUTPUTDIR)\/jdk\n+  else\n+    CREATE_BUILDJDK := false\n+    BUILD_JDK := $(JDK_OUTPUTDIR)\n+  endif\n+endif\n+\n+# Store javac server synchronization files here, and\n+# the javac server log files.\n+JAVAC_SERVER_DIR = $(MAKESUPPORT_OUTPUTDIR)\/javacservers\n+\n+# Number of parallel jobs to use for compilation\n+JOBS ?= $(CONF_JOBS)\n+TEST_JOBS ?= $(CONF_TEST_JOBS)\n+\n+# Tools that potentially need to be cross compilation aware.\n+CC := $(CCACHE) $(ICECC) $(CC)\n+\n+CXX := $(CCACHE) $(ICECC) $(CXX)\n+\n+# BUILD_CC\/BUILD_LD is a compiler\/linker that generates code that is runnable on the\n+# build platform.\n+BUILD_CC := $(BUILD_ICECC) $(BUILD_CC)\n+BUILD_CXX := $(BUILD_ICECC) $(BUILD_CXX)\n+\n+JAVA_FLAGS_TMPDIR := -Djava.io.tmpdir=$(JAVA_TMP_DIR)\n+JAVA_FLAGS := $(JAVA_FLAGS) $(JAVA_FLAGS_TMPDIR)\n+\n+JLINK_CMD := $(FIXPATH) $(BUILD_JDK)\/bin\/jlink\n+JMOD_CMD := $(FIXPATH) $(BUILD_JDK)\/bin\/jmod\n+\n+# These variables are meant to be used. They are defined with = instead of := to make\n+# it possible to override only the *_CMD variables.\n+JAVA = $(JAVA_CMD) $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)\n+JAVA_SMALL = $(JAVA_CMD) $(JAVA_FLAGS_SMALL) $(JAVA_FLAGS)\n+JAVAC = $(JAVAC_CMD)\n+JAVADOC = $(JAVADOC_CMD)\n+JAR = $(JAR_CMD)\n+JLINK = $(JLINK_CMD)\n+JMOD = $(JMOD_CMD)\n+\n+JTREG_JAVA = $(FIXPATH) $(JTREG_JDK)\/bin\/java $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)\n+\n+BUILD_JAVA_FLAGS := $(BOOTCYCLE_JVM_ARGS_BIG)\n+BUILD_JAVA = $(FIXPATH) $(BUILD_JDK)\/bin\/java $(BUILD_JAVA_FLAGS)\n+BUILD_JAVA_SMALL = $(FIXPATH) $(BUILD_JDK)\/bin\/java $(BUILD_JAVA_FLAGS_SMALL)\n+BUILD_JAVAC = $(FIXPATH) $(BUILD_JDK)\/bin\/javac\n+BUILD_JAR = $(FIXPATH) $(BUILD_JDK)\/bin\/jar\n+\n+# A file containing a way to uniquely identify the source code revision that\n+# the build was created from\n+SOURCE_REVISION_TRACKER := $(SUPPORT_OUTPUTDIR)\/src-rev\/source-revision-tracker\n+\n+# Interim langtools modules and arguments\n+INTERIM_LANGTOOLS_BASE_MODULES := java.compiler jdk.compiler jdk.internal.md jdk.javadoc\n+INTERIM_LANGTOOLS_MODULES := $(addsuffix .interim, $(INTERIM_LANGTOOLS_BASE_MODULES))\n+INTERIM_LANGTOOLS_ADD_EXPORTS := \\\n+    --add-exports java.base\/sun.reflect.annotation=jdk.compiler.interim \\\n+    --add-exports java.base\/jdk.internal.jmod=jdk.compiler.interim \\\n+    --add-exports java.base\/jdk.internal.misc=jdk.compiler.interim \\\n+    --add-exports java.base\/sun.invoke.util=jdk.compiler.interim \\\n+    --add-exports java.base\/jdk.internal.javac=java.compiler.interim \\\n+    --add-exports java.base\/jdk.internal.javac=jdk.compiler.interim \\\n+    --add-exports jdk.internal.opt\/jdk.internal.opt=jdk.compiler.interim \\\n+    --add-exports jdk.internal.opt\/jdk.internal.opt=jdk.javadoc.interim \\\n+    #\n+INTERIM_LANGTOOLS_MODULES_COMMA := $(strip $(subst $(SPACE),$(COMMA),$(strip \\\n+    $(INTERIM_LANGTOOLS_MODULES))))\n+INTERIM_LANGTOOLS_ARGS := \\\n+    --limit-modules java.base,jdk.zipfs,$(INTERIM_LANGTOOLS_MODULES_COMMA) \\\n+    --add-modules $(INTERIM_LANGTOOLS_MODULES_COMMA) \\\n+    --module-path $(BUILDTOOLS_OUTPUTDIR)\/interim_langtools_modules \\\n+    --patch-module java.base=$(BUILDTOOLS_OUTPUTDIR)\/gensrc\/java.base.interim \\\n+    $(INTERIM_LANGTOOLS_ADD_EXPORTS) \\\n+    #\n+JAVAC_MAIN_CLASS := -m jdk.compiler.interim\/com.sun.tools.javac.Main\n+JAVADOC_MAIN_CLASS := -m jdk.javadoc.interim\/jdk.javadoc.internal.tool.Main\n+\n+# You run the new javac using the boot jdk with $(BOOT_JDK)\/bin\/java $(NEW_JAVAC) ...\n+# Use = assignment to be able to override in bootcycle-spec.gmk\n+NEW_JAVAC = $(INTERIM_LANGTOOLS_ARGS) $(JAVAC_MAIN_CLASS)\n+NEW_JAVADOC = $(INTERIM_LANGTOOLS_ARGS) $(JAVADOC_MAIN_CLASS)\n+\n+# CD is going away, but remains to cater for legacy makefiles.\n+CD := cd\n+\n+# Images directory definitions\n+JDK_IMAGE_SUBDIR := jdk\n+JRE_IMAGE_SUBDIR := jre\n+JCOV_IMAGE_SUBDIR := jdk-jcov\n+STATIC_JDK_IMAGE_SUBDIR := static-jdk\n+\n+# Colon left out to be able to override output dir for bootcycle-images\n+ifeq ($(JDK_IMAGE_DIR), )\n+  JDK_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(JDK_IMAGE_SUBDIR)\n+endif\n+JRE_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(JRE_IMAGE_SUBDIR)\n+STATIC_JDK_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(STATIC_JDK_IMAGE_SUBDIR)\n+ifeq ($(JCOV_IMAGE_DIR), )\n+  JCOV_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(JCOV_IMAGE_SUBDIR)\n+endif\n+# Test image, as above\n+TEST_IMAGE_SUBDIR := test\n+ifeq ($(TEST_IMAGE_DIR), )\n+  TEST_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(TEST_IMAGE_SUBDIR)\n+endif\n+\n+# Symbols image\n+SYMBOLS_IMAGE_SUBDIR := symbols\n+ifeq ($(SYMBOLS_IMAGE_DIR), )\n+  SYMBOLS_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(SYMBOLS_IMAGE_SUBDIR)\n+endif\n+\n+# Interim image\n+INTERIM_JMODS_DIR := $(SUPPORT_OUTPUTDIR)\/interim-jmods\n+INTERIM_IMAGE_DIR := $(SUPPORT_OUTPUTDIR)\/interim-image\n+\n+# Docs image\n+DOCS_JDK_IMAGE_SUBDIR := docs\n+DOCS_JDK_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(DOCS_JDK_IMAGE_SUBDIR)\n+DOCS_JAVASE_IMAGE_SUBDIR := docs-javase\n+DOCS_JAVASE_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(DOCS_JAVASE_IMAGE_SUBDIR)\n+DOCS_REFERENCE_IMAGE_SUBDIR := docs-reference\n+DOCS_REFERENCE_IMAGE_DIR = $(IMAGES_OUTPUTDIR)\/$(DOCS_REFERENCE_IMAGE_SUBDIR)\n+# Output docs directly into image\n+DOCS_OUTPUTDIR := $(DOCS_JDK_IMAGE_DIR)\n+\n+# Static libs image\n+STATIC_LIBS_IMAGE_SUBDIR := static-libs\n+STATIC_LIBS_IMAGE_DIR := $(IMAGES_OUTPUTDIR)\/$(STATIC_LIBS_IMAGE_SUBDIR)\n+\n+# Graal static libs image\n+STATIC_LIBS_GRAAL_IMAGE_SUBDIR := static-libs-graal\n+STATIC_LIBS_GRAAL_IMAGE_DIR := $(IMAGES_OUTPUTDIR)\/$(STATIC_LIBS_GRAAL_IMAGE_SUBDIR)\n+\n+# Graal builder image\n+GRAAL_BUILDER_IMAGE_SUBDIR := graal-builder-jdk\n+GRAAL_BUILDER_IMAGE_DIR := $(IMAGES_OUTPUTDIR)\/$(GRAAL_BUILDER_IMAGE_SUBDIR)\n+\n+# Macosx bundles directory definitions\n+JDK_MACOSX_BUNDLE_SUBDIR := jdk-bundle\n+JRE_MACOSX_BUNDLE_SUBDIR := jre-bundle\n+JDK_MACOSX_BUNDLE_SUBDIR_SIGNED := jdk-bundle-signed\n+JRE_MACOSX_BUNDLE_SUBDIR_SIGNED := jre-bundle-signed\n+JDK_MACOSX_BUNDLE_DIR = $(IMAGES_OUTPUTDIR)\/$(JDK_MACOSX_BUNDLE_SUBDIR)\n+JRE_MACOSX_BUNDLE_DIR = $(IMAGES_OUTPUTDIR)\/$(JRE_MACOSX_BUNDLE_SUBDIR)\n+JDK_MACOSX_BUNDLE_DIR_SIGNED = $(IMAGES_OUTPUTDIR)\/$(JDK_MACOSX_BUNDLE_SUBDIR_SIGNED)\n+JRE_MACOSX_BUNDLE_DIR_SIGNED = $(IMAGES_OUTPUTDIR)\/$(JRE_MACOSX_BUNDLE_SUBDIR_SIGNED)\n+JDK_MACOSX_BUNDLE_TOP_SUBDIR = jdk-$(VERSION_NUMBER).jdk\n+JRE_MACOSX_BUNDLE_TOP_SUBDIR = jre-$(VERSION_NUMBER).jre\n+JDK_MACOSX_CONTENTS_SUBDIR = $(JDK_MACOSX_BUNDLE_TOP_SUBDIR)\/Contents\n+JRE_MACOSX_CONTENTS_SUBDIR = $(JRE_MACOSX_BUNDLE_TOP_SUBDIR)\/Contents\n+JDK_MACOSX_CONTENTS_DIR = $(JDK_MACOSX_BUNDLE_DIR)\/$(JDK_MACOSX_CONTENTS_SUBDIR)\n+JRE_MACOSX_CONTENTS_DIR = $(JRE_MACOSX_BUNDLE_DIR)\/$(JRE_MACOSX_CONTENTS_SUBDIR)\n+JDK_MACOSX_BUNDLE_TOP_DIR = $(JDK_MACOSX_BUNDLE_DIR)\/$(JDK_MACOSX_BUNDLE_TOP_SUBDIR)\n+JRE_MACOSX_BUNDLE_TOP_DIR = $(JRE_MACOSX_BUNDLE_DIR)\/$(JRE_MACOSX_BUNDLE_TOP_SUBDIR)\n+\n+# Bundle names\n+ifneq ($(VERSION_BUILD), )\n+  BASE_NAME := $(VERSION_SHORT)+$(VERSION_BUILD)_$(OPENJDK_TARGET_BUNDLE_PLATFORM)\n+else\n+  BASE_NAME := $(VERSION_SHORT)_$(OPENJDK_TARGET_BUNDLE_PLATFORM)\n+endif\n+\n+ifeq ($(DEBUG_LEVEL), fastdebug)\n+  DEBUG_PART := -debug\n+else ifneq ($(DEBUG_LEVEL), release)\n+  DEBUG_PART := -$(DEBUG_LEVEL)\n+endif\n+ifeq ($(OPENJDK_TARGET_OS), windows)\n+  JDK_BUNDLE_EXTENSION := zip\n+else\n+  JDK_BUNDLE_EXTENSION := tar.gz\n+endif\n+JDK_BUNDLE_NAME := jdk-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)\n+JRE_BUNDLE_NAME := jre-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)\n+JDK_SYMBOLS_BUNDLE_NAME := jdk-$(BASE_NAME)_bin$(DEBUG_PART)-symbols.tar.gz\n+TEST_DEMOS_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-tests-demos$(DEBUG_PART).tar.gz\n+TEST_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-tests$(DEBUG_PART).tar.gz\n+DOCS_JDK_BUNDLE_NAME := jdk-$(BASE_NAME)_doc-api-spec$(DEBUG_PART).tar.gz\n+DOCS_JAVASE_BUNDLE_NAME := javase-$(BASE_NAME)_doc-api-spec$(DEBUG_PART).tar.gz\n+DOCS_REFERENCE_BUNDLE_NAME := jdk-reference-$(BASE_NAME)_doc-api-spec$(DEBUG_PART).tar.gz\n+STATIC_LIBS_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-static-libs$(DEBUG_PART).tar.gz\n+STATIC_LIBS_GRAAL_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-static-libs-graal$(DEBUG_PART).tar.gz\n+STATIC_JDK_BUNDLE_NAME := static-jdk-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)\n+JCOV_BUNDLE_NAME := jdk-jcov-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)\n+\n+JDK_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(JDK_BUNDLE_NAME)\n+JRE_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(JRE_BUNDLE_NAME)\n+JDK_SYMBOLS_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(JDK_SYMBOLS_BUNDLE_NAME)\n+TEST_DEMOS_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(TEST_DEMOS_BUNDLE_NAME)\n+TEST_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(TEST_BUNDLE_NAME)\n+DOCS_JDK_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(DOCS_JDK_BUNDLE_NAME)\n+DOCS_JAVASE_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(DOCS_JAVASE_BUNDLE_NAME)\n+DOCS_REFERENCE_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(DOCS_REFERENCE_BUNDLE_NAME)\n+STATIC_JDK_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(STATIC_JDK_BUNDLE_NAME)\n+JCOV_BUNDLE := $(BUNDLES_OUTPUTDIR)\/$(JCOV_BUNDLE_NAME)\n+\n+ifeq ($(IS_BUILD_JDK_SPEC), true)\n+  CC := $(BUILD_CC)\n+  CXX := $(BUILD_CXX)\n+  # Ideally this should be probed by configure but that is tricky to implement,\n+  # and this should work in most cases.\n+  CPP := $(BUILD_CC) -E\n+  LD := $(BUILD_LD)\n+  LDCXX := $(BUILD_LDCXX)\n+  AS := $(BUILD_AS)\n+  NM := $(BUILD_NM)\n+  AR := $(BUILD_AR)\n+  LIB := $(BUILD_LIB)\n+  OBJCOPY := $(BUILD_OBJCOPY)\n+  STRIP := $(BUILD_STRIP)\n+  SYSROOT_CFLAGS := $(BUILD_SYSROOT_CFLAGS)\n+  SYSROOT_LDFLAGS := $(BUILD_SYSROOT_LDFLAGS)\n+\n+  # These directories should not be moved to BUILDJDK_OUTPUTDIR\n+  HOTSPOT_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(HOTSPOT_OUTPUTDIR))\n+  BUILDTOOLS_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(BUILDTOOLS_OUTPUTDIR))\n+  SUPPORT_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(SUPPORT_OUTPUTDIR))\n+  JDK_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(JDK_OUTPUTDIR))\n+  IMAGES_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(IMAGES_OUTPUTDIR))\n+\n+  OPENJDK_TARGET_CPU := $(OPENJDK_BUILD_CPU)\n+  OPENJDK_TARGET_CPU_ARCH := $(OPENJDK_BUILD_CPU_ARCH)\n+  OPENJDK_TARGET_CPU_BITS := $(OPENJDK_BUILD_CPU_BITS)\n+  OPENJDK_TARGET_CPU_ENDIAN := $(OPENJDK_BUILD_CPU_ENDIAN)\n+  OPENJDK_TARGET_CPU_LEGACY := $(OPENJDK_BUILD_CPU_LEGACY)\n+  OPENJDK_TARGET_LIBC := $(OPENJDK_BUILD_LIBC)\n+  OPENJDK_TARGET_OS_INCLUDE_SUBDIR := $(OPENJDK_BUILD_OS_INCLUDE_SUBDIR)\n+\n+  HOTSPOT_TARGET_OS := $(HOTSPOT_BUILD_OS)\n+  HOTSPOT_TARGET_OS_TYPE := $(HOTSPOT_BUILD_OS_TYPE)\n+  HOTSPOT_TARGET_CPU := $(HOTSPOT_BUILD_CPU)\n+  HOTSPOT_TARGET_CPU_ARCH := $(HOTSPOT_BUILD_CPU_ARCH)\n+  HOTSPOT_TARGET_CPU_DEFINE := $(HOTSPOT_BUILD_CPU_DEFINE)\n+  HOTSPOT_TARGET_LIBC := $(HOTSPOT_BUILD_LIBC)\n+\n+  CFLAGS_JDKLIB := $(OPENJDK_BUILD_CFLAGS_JDKLIB)\n+  CXXFLAGS_JDKLIB := $(OPENJDK_BUILD_CXXFLAGS_JDKLIB)\n+  LDFLAGS_JDKLIB := $(OPENJDK_BUILD_LDFLAGS_JDKLIB)\n+  CFLAGS_JDKEXE := $(OPENJDK_BUILD_CFLAGS_JDKEXE)\n+  CXXFLAGS_JDKEXE := $(OPENJDK_BUILD_CXXFLAGS_JDKEXE)\n+  LDFLAGS_JDKEXE := $(OPENJDK_BUILD_LDFLAGS_JDKEXE)\n+\n+  JVM_CFLAGS := $(OPENJDK_BUILD_JVM_CFLAGS)\n+  JVM_LDFLAGS := $(OPENJDK_BUILD_JVM_LDFLAGS)\n+  JVM_ASFLAGS := $(OPENJDK_BUILD_JVM_ASFLAGS)\n+  JVM_LIBS := $(OPENJDK_BUILD_JVM_LIBS)\n+\n+  FDLIBM_CFLAGS := $(OPENJDK_BUILD_FDLIBM_CFLAGS)\n+\n+  INTERIM_LANGTOOLS_ARGS := $(subst $(OUTPUTDIR),$(BUILDJDK_OUTPUTDIR),$(INTERIM_LANGTOOLS_ARGS))\n+\n+  # The compiler for the build platform is likely not warning compatible with the official\n+  # compiler.\n+  WARNINGS_AS_ERRORS := false\n+  DISABLE_WARNING_PREFIX := $(BUILD_CC_DISABLE_WARNING_PREFIX)\n+\n+  # Save speed and disk space by not enabling debug symbols for the buildjdk\n+  ENABLE_DEBUG_SYMBOLS := false\n+\n+  JVM_VARIANTS := server\n+  JVM_VARIANT_MAIN := server\n+  JVM_FEATURES_server := cds compiler1 compiler2 g1gc serialgc\n+\n+  # Some users still set EXTRA_*FLAGS on the make command line. Must\n+  # make sure to override that when building buildjdk.\n+  override EXTRA_CFLAGS :=\n+  override EXTRA_CXXFLAGS :=\n+  override EXTRA_LDFLAGS :=\n+\n+  # hsdis is not needed\n+  HSDIS_BACKEND := none\n+  ENABLE_HSDIS_BUNDLING := false\n+endif\n+\n+ifeq ($(IS_BOOTCYCLE_JDK_SPEC), true)\n+  # Override specific values to do a boot cycle build\n+\n+  # Use a different Boot JDK\n+  BOOT_JDK := $(JDK_IMAGE_DIR)\n+\n+  # The bootcycle build has a different output directory\n+  OLD_OUTPUTDIR := $(OUTPUTDIR)\n+  OUTPUTDIR := $(OLD_OUTPUTDIR)\/bootcycle-build\n+  # No spaces in patsubst to avoid leading space in variable\n+  JAVAC_SERVER_DIR := $(patsubst $(OLD_OUTPUTDIR)%,$(OUTPUTDIR)%,$(JAVAC_SERVER_DIR))\n+\n+  JAVA_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/java\n+  JAVAC_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/javac\n+  JAR_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/jar\n+  # The bootcycle JVM arguments may differ from the original boot jdk.\n+  JAVA_FLAGS_BIG := $(BOOTCYCLE_JVM_ARGS_BIG)\n+  # Any CDS settings generated for the bootjdk are invalid in the bootcycle build.\n+  # By filtering out those JVM args, the bootcycle JVM will use its default\n+  # settings for CDS.\n+  JAVA_FLAGS := $(filter-out -XX:SharedArchiveFile% -Xshare%, $(JAVA_FLAGS))\n+endif\n+\n+################################################################################\n+\n+include MakeIncludeEnd.gmk\n+endif # include guard\n","filename":"make\/common\/CommonVars.gmk","additions":445,"deletions":0,"binary":false,"changes":445,"status":"added"},{"patch":"@@ -78,0 +78,1 @@\n+include $(TOPDIR)\/make\/common\/CommonVars.gmk\n","filename":"make\/common\/MakeBase.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}