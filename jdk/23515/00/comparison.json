{"files":[{"patch":"@@ -122,1 +122,1 @@\n-            \/\/ when SSLTube::connectFlows is called.\n+            \/\/ when SSLTube::connectFlows is called).\n@@ -194,1 +194,1 @@\n-    \/\/ tracks the subscriber's state. In particular it makes sure that\n+    \/\/ tracks the subscriber's state. In particular, it makes sure that\n@@ -305,1 +305,1 @@\n-        private AtomicReference<DelegateWrapper> pendingDelegate =\n+        private final AtomicReference<DelegateWrapper> pendingDelegate =\n@@ -356,1 +356,1 @@\n-            \/\/ the time we reach here, as there can be no subscriber\n+            \/\/ time we reach here, as there can be no subscriber\n@@ -363,2 +363,2 @@\n-        \/\/ Can be called outside of the flow if an error has already been\n-        \/\/ raise. Otherwise, must be called within the SSLFlowDelegate\n+        \/\/ Can be called outside the flow if an error has already been\n+        \/\/ raised. Otherwise, must be called within the SSLFlowDelegate\n@@ -622,4 +622,13 @@\n-            long demand = writeDemand.get(); \/\/ FIXME: isn't it a racy way of passing the demand?\n-            delegate = sub;\n-            if (debug.on())\n-                debug.log(\"setSubscription: demand=%d, cancelled:%s\", demand, cancelled);\n+            long demand;\n+            \/\/ Avoid race condition and requesting demand twice if\n+            \/\/ request() runs concurrently with setSubscription()\n+            boolean cancelled;\n+            synchronized (this) {\n+                demand = writeDemand.get();\n+                delegate = sub;\n+                cancelled = this.cancelled;\n+            }\n+            if (debug.on()) {\n+                debug.log(\"setSubscription: demand=%d, cancelled:%s, new subscription %s\",\n+                        demand, cancelled, sub);\n+            }\n@@ -628,1 +637,1 @@\n-                delegate.cancel();\n+                sub.cancel();\n@@ -635,5 +644,17 @@\n-            writeDemand.increase(n);\n-            if (debug.on()) debug.log(\"request: n=%d\", n);\n-            Flow.Subscription sub = delegate;\n-            if (sub != null && n > 0) {\n-                sub.request(n);\n+            final long demand = n;\n+            \/\/ Avoid race condition and requesting demand twice if\n+            \/\/ request() runs concurrently with setSubscription()\n+            Flow.Subscription sub;\n+            long demanded;\n+            synchronized (this) {\n+                sub = delegate;\n+                demanded = writeDemand.get();\n+                writeDemand.increase(n);\n+            }\n+            if (debug.on()) {\n+                debug.log(\"request: n=%s to %s (%s already demanded)\",\n+                        demand, sub, demanded);\n+            }\n+            if (sub != null && demand > 0) {\n+                if (debug.on()) debug.log(\"requesting %s from %s\", demand, sub);\n+                sub.request(demand);\n@@ -645,3 +666,7 @@\n-            cancelled = true;\n-            if (delegate != null)\n-                delegate.cancel();\n+            Flow.Subscription sub;\n+            synchronized (this) {\n+                cancelled = true;\n+                sub = delegate;\n+            }\n+            if (debug.on()) debug.log(\"cancel: cancelling subscription: \" + sub);\n+            if (sub != null) sub.cancel();\n@@ -655,3 +680,8 @@\n-        Flow.Subscription x = writeSubscription.delegate;\n-        if (x != null)\n-            x.cancel();\n+        Flow.Subscription old;\n+        synchronized (this) {\n+            old = writeSubscription.delegate;\n+        }\n+        if (old != null && old != subscription) {\n+            if (debug.on()) debug.log(\"onSubscribe: cancelling old subscription: \" + old);\n+            old.cancel();\n+        }\n@@ -659,0 +689,1 @@\n+        if (debug.on()) debug.log(\"onSubscribe: new subscription: \" + subscription);\n@@ -667,2 +698,4 @@\n-        if (debug.on())\n-            debug.log(\"sending %d  buffers to SSL flow delegate\", item.size());\n+        if (debug.on()) {\n+            debug.log(\"sending %s  buffers to SSL flow delegate (%s bytes)\",\n+                    item.size(), Utils.remaining(item));\n+        }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/SSLTube.java","additions":57,"deletions":24,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -54,1 +51,0 @@\n-import java.net.CookieManager;\n@@ -68,1 +64,0 @@\n-import java.util.HashMap;\n@@ -79,1 +74,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n","filename":"test\/jdk\/java\/net\/httpclient\/CookieHeaderTest.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,1 @@\n+import static java.lang.System.err;\n@@ -307,0 +308,3 @@\n+            t.printStackTrace(System.out);\n+            err.println(DigestEchoServer.now()\n+                    + \": Unexpected exception: \" + t);\n@@ -396,0 +400,2 @@\n+        Throwable failed = null;\n+        URI reqURI = null;\n@@ -398,1 +404,1 @@\n-            for (int i=0; i<data.length; i++) {\n+            for (int i = 0; i < data.length; i++) {\n@@ -400,1 +406,1 @@\n-                List<String> lines = List.of(Arrays.copyOfRange(data, 0, i+1));\n+                List<String> lines = List.of(Arrays.copyOfRange(data, 0, i + 1));\n@@ -404,1 +410,5 @@\n-                HttpRequest.Builder builder = HttpRequest.newBuilder(uri).version(clientVersion)\n+                URI baseReq = URI.create(uri + \"?iteration=\" + i + \",async=\" + async\n+                        + \",addHeaders=\" + addHeaders + \",preemptive=\" + preemptive\n+                        + \",expectContinue=\" + expectContinue + \",version=\" + clientVersion);\n+                reqURI = URI.create(baseReq + \",basicCount=\" + basicCount.get());\n+                HttpRequest.Builder builder = HttpRequest.newBuilder(reqURI).version(clientVersion)\n@@ -436,0 +446,1 @@\n+                        out.printf(\"%s client.sendAsync(%s)%n\", DigestEchoServer.now(), request);\n@@ -438,0 +449,1 @@\n+                        out.printf(\"%s client.send(%s)%n\", DigestEchoServer.now(), request);\n@@ -446,8 +458,1 @@\n-                    \/\/ unwrap CompletionException\n-                    if (t instanceof CompletionException) {\n-                        assert t.getCause() != null;\n-                        t = t.getCause();\n-                    }\n-                    out.println(DigestEchoServer.now()\n-                            + \": Unexpected exception: \" + t);\n-                    throw new RuntimeException(\"Unexpected exception: \" + t, t);\n+                    throw t;\n@@ -456,1 +461,1 @@\n-                if (addHeaders && !preemptive && (i==0 || isSchemeDisabled())) {\n+                if (addHeaders && !preemptive && (i == 0 || isSchemeDisabled())) {\n@@ -465,1 +470,3 @@\n-                    request = HttpRequest.newBuilder(uri).version(clientVersion)\n+                    reqURI = URI.create(baseReq + \",withAuthorization=\"\n+                            + authType + \",basicCount=\" + basicCount.get());\n+                    request = HttpRequest.newBuilder(reqURI).version(clientVersion)\n@@ -468,0 +475,1 @@\n+                        out.printf(\"%s client.sendAsync(%s)%n\", DigestEchoServer.now(), request);\n@@ -470,0 +478,1 @@\n+                        out.printf(\"%s client.send(%s)%n\", DigestEchoServer.now(), request);\n@@ -503,0 +512,9 @@\n+        } catch (Throwable t) {\n+            if (reqURI == null) {\n+                failed = t;\n+                throw t;\n+            }\n+            String decoration = \"%s Unexpected exception %s for %s\".formatted(DigestEchoServer.now(), t, reqURI);\n+            RuntimeException decorated = new RuntimeException(decoration, t);\n+            failed = decorated;\n+            throw decorated;\n@@ -511,1 +529,4 @@\n-            if (error != null) throw error;\n+            if (error != null) {\n+                if (failed != null) error.addSuppressed(failed);\n+                throw error;\n+            }\n@@ -549,1 +570,4 @@\n-\n+        ReferenceQueue<HttpClient> queue = new ReferenceQueue<>();\n+        WeakReference<HttpClient> ref = new WeakReference<>(client, queue);\n+        URI reqURI = null;\n+        Throwable failed = null;\n@@ -551,1 +575,1 @@\n-            for (int i=0; i<data.length; i++) {\n+            for (int i = 0; i < data.length; i++) {\n@@ -553,1 +577,1 @@\n-                List<String> lines = List.of(Arrays.copyOfRange(data, 0, i+1));\n+                List<String> lines = List.of(Arrays.copyOfRange(data, 0, i + 1));\n@@ -557,0 +581,3 @@\n+                URI baseReq = URI.create(uri + \"?iteration=\" + i + \",async=\" + async\n+                        + \",expectContinue=\" + expectContinue + \",version=\" + clientVersion);\n+                reqURI = URI.create(baseReq + \",digestCount=\" + digestCount.get());\n@@ -558,1 +585,1 @@\n-                        .newBuilder(uri).version(clientVersion).POST(reqBody)\n+                        .newBuilder(reqURI).version(clientVersion).POST(reqBody)\n@@ -581,0 +608,1 @@\n+                    out.printf(\"%s client.sendAsync(%s)%n\", DigestEchoServer.now(), request);\n@@ -583,0 +611,1 @@\n+                    out.printf(\"%s client.send(%s)%n\", DigestEchoServer.now(), request);\n@@ -612,0 +641,1 @@\n+                    reqURI = URI.create(baseReq + \",withAuth=\" + authType + \",digestCount=\" + digestCount.get());\n@@ -613,2 +643,2 @@\n-                        request = HttpRequest.newBuilder(uri).version(clientVersion)\n-                            .POST(reqBody).header(authorizationKey(authType), auth).build();\n+                        request = HttpRequest.newBuilder(reqURI).version(clientVersion)\n+                                .POST(reqBody).header(authorizationKey(authType), auth).build();\n@@ -618,1 +648,0 @@\n-\n@@ -620,0 +649,1 @@\n+                        out.printf(\"%s client.sendAsync(%s)%n\", DigestEchoServer.now(), request);\n@@ -622,0 +652,1 @@\n+                        out.printf(\"%s client.send(%s)%n\", DigestEchoServer.now(), request);\n@@ -652,0 +683,9 @@\n+        } catch (Throwable t) {\n+            if (reqURI == null) {\n+                failed = t;\n+                throw t;\n+            }\n+            String decoration = \"%s Unexpected exception %s for %s\".formatted(DigestEchoServer.now(), t, reqURI);\n+            RuntimeException decorated = new RuntimeException(decoration, t);\n+            failed = decorated;\n+            throw decorated;\n@@ -653,0 +693,13 @@\n+            client = null;\n+            System.gc();\n+            while (!ref.refersTo(null)) {\n+                System.gc();\n+                if (queue.remove(100) == ref) break;\n+            }\n+            var error = TRACKER.checkShutdown(900);\n+            if (error != null) {\n+                if (failed != null) {\n+                    error.addSuppressed(failed);\n+                }\n+                throw error;\n+            }\n","filename":"test\/jdk\/java\/net\/httpclient\/DigestEchoClient.java","additions":75,"deletions":22,"binary":false,"changes":97,"status":"modified"}]}