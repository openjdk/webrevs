{"files":[{"patch":"@@ -28,1 +28,0 @@\n- * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx.*\") | os.arch==\"aarch64\"\n@@ -37,1 +36,1 @@\n-import jdk.incubator.vector.*;\n+import compiler.lib.generators.*;\n@@ -39,2 +38,2 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n+import jdk.incubator.vector.*;\n+import jdk.test.lib.Asserts;\n@@ -44,1 +43,1 @@\n-    private static final Random random = Utils.getRandomInstance();\n+    private static final Generators random = Generators.G;\n@@ -87,7 +86,5 @@\n-        for (int i = 0; i < LENGTH; ++i) {\n-            bsrc[i] = (byte)random.nextInt();\n-            ssrc[i] = (short)random.nextInt();\n-            isrc[i] = random.nextInt();\n-            lsrc[i] = random.nextLong();\n-            fsrc[i] = random.nextFloat();\n-            dsrc[i] = random.nextDouble();\n+        Generator<Integer> byteGen = random.uniformInts(Byte.MIN_VALUE, Byte.MAX_VALUE);\n+        Generator<Integer> shortGen = random.uniformInts(Short.MIN_VALUE, Short.MAX_VALUE);\n+        for (int i = 0; i < LENGTH; i++) {\n+            bsrc[i] = byteGen.next().byteValue();\n+            ssrc[i] = shortGen.next().shortValue();\n@@ -95,0 +92,4 @@\n+        random.fill(random.ints(), isrc);\n+        random.fill(random.longs(), lsrc);\n+        random.fill(random.floats(), fsrc);\n+        random.fill(random.doubles(), dsrc);\n@@ -100,3 +101,1 @@\n-            for (int j = 0; j < nums[i]; j++) {\n-                indexes[i][j] = random.nextInt() & (nums[i] - 1);\n-            }\n+            random.fill(random.uniformInts(0, nums[i] - 1), indexes[i]);\n@@ -107,1 +106,1 @@\n-    @IR(counts = {IRNode.REARRANGE_VB, IRNode.VECTOR_SIZE_8, \" >0 \"})\n+    @IR(counts = {IRNode.REARRANGE_VB, IRNode.VECTOR_SIZE_8, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n@@ -117,0 +116,9 @@\n+    @Check(test = \"rearrange_byte64\")\n+    public void rearrange_byte64_verify() {\n+        for (int i = 0; i < LENGTH; i += bspec64.length()) {\n+            for (int j = 0; j < bspec64.length(); j++) {\n+                Asserts.assertEquals(bsrc[indexes[2][j] + i], bdst[i + j]);\n+            }\n+        }\n+    }\n+\n@@ -118,1 +126,1 @@\n-    @IR(counts = {IRNode.REARRANGE_VB, IRNode.VECTOR_SIZE_16, \" >0 \"})\n+    @IR(counts = {IRNode.REARRANGE_VB, IRNode.VECTOR_SIZE_16, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n@@ -128,0 +136,9 @@\n+    @Check(test = \"rearrange_byte128\")\n+    public void rearrange_byte128_verify() {\n+        for (int i = 0; i < LENGTH; i += bspec128.length()) {\n+            for (int j = 0; j < bspec128.length(); j++) {\n+                Asserts.assertEquals(bsrc[indexes[3][j] + i], bdst[i + j]);\n+            }\n+        }\n+    }\n+\n@@ -129,1 +146,1 @@\n-    @IR(counts = {IRNode.REARRANGE_VS, IRNode.VECTOR_SIZE_4, \" >0 \"})\n+    @IR(counts = {IRNode.REARRANGE_VS, IRNode.VECTOR_SIZE_4, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n@@ -139,0 +156,9 @@\n+    @Check(test = \"rearrange_short64\")\n+    public void rearrange_short64_verify() {\n+        for (int i = 0; i < LENGTH; i += sspec64.length()) {\n+            for (int j = 0; j < sspec64.length(); j++) {\n+                Asserts.assertEquals(ssrc[indexes[1][j] + i], sdst[i + j]);\n+            }\n+        }\n+    }\n+\n@@ -140,1 +166,1 @@\n-    @IR(counts = {IRNode.REARRANGE_VS, IRNode.VECTOR_SIZE_8, \" >0 \"})\n+    @IR(counts = {IRNode.REARRANGE_VS, IRNode.VECTOR_SIZE_8, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n@@ -150,0 +176,9 @@\n+    @Check(test = \"rearrange_short128\")\n+    public void rearrange_short128_verify() {\n+        for (int i = 0; i < LENGTH; i += sspec128.length()) {\n+            for (int j = 0; j < sspec128.length(); j++) {\n+                Asserts.assertEquals(ssrc[indexes[2][j] + i], sdst[i + j]);\n+            }\n+        }\n+    }\n+\n@@ -161,0 +196,9 @@\n+    @Check(test = \"rearrange_int64\")\n+    public void rearrange_int64_verify() {\n+        for (int i = 0; i < LENGTH; i += ispec64.length()) {\n+            for (int j = 0; j < ispec64.length(); j++) {\n+                Asserts.assertEquals(isrc[indexes[0][j] + i], idst[i + j]);\n+            }\n+        }\n+    }\n+\n@@ -162,1 +206,1 @@\n-    @IR(counts = {IRNode.REARRANGE_VI, IRNode.VECTOR_SIZE_4, \" >0 \"})\n+    @IR(counts = {IRNode.REARRANGE_VI, IRNode.VECTOR_SIZE_4, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n@@ -172,0 +216,9 @@\n+    @Check(test = \"rearrange_int128\")\n+    public void rearrange_int128_verify() {\n+        for (int i = 0; i < LENGTH; i += ispec128.length()) {\n+            for (int j = 0; j < ispec128.length(); j++) {\n+                Asserts.assertEquals(isrc[indexes[1][j] + i], idst[i + j]);\n+            }\n+        }\n+    }\n+\n@@ -183,0 +236,9 @@\n+    @Check(test = \"rearrange_long128\")\n+    public void rearrange_long128_verify() {\n+        for (int i = 0; i < LENGTH; i += lspec128.length()) {\n+            for (int j = 0; j < lspec128.length(); j++) {\n+                Asserts.assertEquals(lsrc[indexes[0][j] + i], ldst[i + j]);\n+            }\n+        }\n+    }\n+\n@@ -194,0 +256,9 @@\n+    @Check(test = \"rearrange_float64\")\n+    public void rearrange_float64_verify() {\n+        for (int i = 0; i < LENGTH; i += fspec64.length()) {\n+            for (int j = 0; j < fspec64.length(); j++) {\n+                Asserts.assertEquals(fsrc[indexes[0][j] + i], fdst[i + j]);\n+            }\n+        }\n+    }\n+\n@@ -195,1 +266,1 @@\n-    @IR(counts = {IRNode.REARRANGE_VF, IRNode.VECTOR_SIZE_4, \" >0 \"})\n+    @IR(counts = {IRNode.REARRANGE_VF, IRNode.VECTOR_SIZE_4, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n@@ -205,0 +276,9 @@\n+    @Check(test = \"rearrange_float128\")\n+    public void rearrange_float128_verify() {\n+        for (int i = 0; i < LENGTH; i += fspec128.length()) {\n+            for (int j = 0; j < fspec128.length(); j++) {\n+                Asserts.assertEquals(fsrc[indexes[1][j] + i], fdst[i + j]);\n+            }\n+        }\n+    }\n+\n@@ -216,0 +296,9 @@\n+    @Check(test = \"rearrange_double128\")\n+    public void rearrange_double128_verify() {\n+        for (int i = 0; i < LENGTH; i += dspec128.length()) {\n+            for (int j = 0; j < dspec128.length(); j++) {\n+                Asserts.assertEquals(dsrc[indexes[0][j] + i], ddst[i + j]);\n+            }\n+        }\n+    }\n+\n@@ -219,1 +308,1 @@\n-                     .addFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:-TieredCompilation\")\n+                     .addFlags(\"--add-modules=jdk.incubator.vector\")\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorRearrangeTest.java","additions":111,"deletions":22,"binary":false,"changes":133,"status":"modified"}]}