{"files":[{"patch":"@@ -141,1 +141,0 @@\n-  VirtualMemorySummary::snapshot(&_virtual_memory_snapshot);\n@@ -144,0 +143,1 @@\n+    VirtualMemorySummary::snapshot(&_virtual_memory_snapshot);\n@@ -163,1 +163,1 @@\n-  if (!VirtualMemoryTracker::Instance::walk_virtual_memory(&virtual_memory_walker)) {\n+  if (!MemTracker::walk_virtual_memory(&virtual_memory_walker)) {\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-    return VirtualMemoryTracker::Instance::walk_virtual_memory(this);\n+    return MemTracker::walk_virtual_memory(this);\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -176,0 +176,7 @@\n+  static inline bool walk_virtual_memory(VirtualMemoryWalker* walker) {\n+    assert_post_init();\n+    if (!enabled()) return false;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n+    return VirtualMemoryTracker::Instance::walk_virtual_memory(walker);\n+  }\n+\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -50,0 +51,1 @@\n+  MemTracker::NmtVirtualMemoryLocker locker;\n@@ -51,0 +53,1 @@\n+\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-  MemTracker::NmtVirtualMemoryLocker nvml;\n+  bool ret = true;\n@@ -215,0 +215,1 @@\n+      ret = false;\n@@ -219,1 +220,1 @@\n-  return true;\n+  return ret;\n@@ -354,1 +355,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -348,1 +348,1 @@\n-   virtual bool do_allocation_site(const ReservedMemoryRegion* rgn) { return false; }\n+  virtual bool do_allocation_site(const ReservedMemoryRegion* rgn) { return false; }\n@@ -412,1 +412,1 @@\n-#endif \/\/ SHARE_NMT_VIRTUALMEMORYTRACKER_HPP\n\\ No newline at end of file\n+#endif \/\/ SHARE_NMT_VIRTUALMEMORYTRACKER_HPP\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,4 +41,6 @@\n-    VirtualMemoryTracker::Instance::add_reserved_region(stack_end, stack_size, CALLER_PC, mtThreadStack);\n-\n-    \/\/ snapshot current stack usage\n-    VirtualMemoryTracker::Instance::snapshot_thread_stacks();\n+    {\n+      MemTracker::NmtVirtualMemoryLocker nvml;\n+      VirtualMemoryTracker::Instance::add_reserved_region(stack_end, stack_size, CALLER_PC, mtThreadStack);\n+      \/\/ snapshot current stack usage\n+      VirtualMemoryTracker::Instance::snapshot_thread_stacks();\n+    }\n@@ -109,3 +111,6 @@\n-    VirtualMemoryTracker::Instance::snapshot_thread_stacks();\n-\n-    ReservedMemoryRegion rmr_found = VirtualMemoryTracker::Instance::tree()->find_reserved_region((address)base);\n+    ReservedMemoryRegion rmr_found;\n+    {\n+      MemTracker::NmtVirtualMemoryLocker nvml;\n+      VirtualMemoryTracker::Instance::snapshot_thread_stacks();\n+      rmr_found = VirtualMemoryTracker::Instance::tree()->find_reserved_region((address)base);\n+    }\n@@ -117,9 +122,12 @@\n-    VirtualMemoryTracker::Instance::tree()->visit_committed_regions(rmr_found, [&](const CommittedMemoryRegion& cmr){\n-      if (cmr.size() == size) {\n-        return false;\n-      } else {\n-        precise_tracking_supported = true;\n-        check_covered_pages(cmr.base(), cmr.size(), (address)base, touch_pages, page_num);\n-      }\n-      return true;\n-    });\n+    {\n+      MemTracker::NmtVirtualMemoryLocker nvml;\n+      VirtualMemoryTracker::Instance::tree()->visit_committed_regions(rmr_found, [&](const CommittedMemoryRegion& cmr){\n+        if (cmr.size() == size) {\n+          return false;\n+        } else {\n+          precise_tracking_supported = true;\n+          check_covered_pages(cmr.base(), cmr.size(), (address)base, touch_pages, page_num);\n+        }\n+        return true;\n+      });\n+    }\n@@ -136,2 +144,5 @@\n-    VirtualMemoryTracker::Instance::remove_released_region((address)base, size);\n-    rmr_found = VirtualMemoryTracker::Instance::tree()->find_reserved_region((address)base);\n+    {\n+      MemTracker::NmtVirtualMemoryLocker nvml;\n+      VirtualMemoryTracker::Instance::remove_released_region((address)base, size);\n+      rmr_found = VirtualMemoryTracker::Instance::tree()->find_reserved_region((address)base);\n+    }\n","filename":"test\/hotspot\/gtest\/runtime\/test_committed_virtualmemory.cpp","additions":29,"deletions":18,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  VirtualMemoryTracker::Instance::tree()->visit_committed_regions(rmr, [&](CommittedMemoryRegion& region) {\n+  vmt.tree()->visit_committed_regions(rmr, [&](CommittedMemoryRegion& region) {\n","filename":"test\/hotspot\/gtest\/runtime\/test_virtualMemoryTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}