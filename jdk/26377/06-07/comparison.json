{"files":[{"patch":"@@ -99,1 +99,1 @@\n-            if (SUPPORTED_SERVICES.stream().anyMatch(e->e.equalsIgnoreCase\n+            if (SUPPORTED_SERVICES.stream().anyMatch(e -> e.equalsIgnoreCase\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/CryptoAlgorithmConstraints.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,6 +28,7 @@\n- * @run main\/othervm TestDisabledAlgorithms KeyStore.JKs true\n- * @run main\/othervm TestDisabledAlgorithms KeyStore.what false\n- * @run main\/othervm TestDisabledAlgorithms KeyStore.jceKS false\n- * @run main\/othervm -Djdk.crypto.disabledAlgorithms=\"KeyStore.JKs\" TestDisabledAlgorithms KeyStore.JceKs true\n- * @run main\/othervm -Djdk.crypto.disabledAlgorithms=\"KeyStore.what\" TestDisabledAlgorithms KeyStore.JKS false\n- * @run main\/othervm -Djdk.crypto.disabledAlgorithms=\"KeyStore.jceKS\" TestDisabledAlgorithms KeyStore.JKS false\n+ * @library \/test\/lib\n+ * @run main\/othervm TestDisabledAlgorithms KEYSTORE.JKs true\n+ * @run main\/othervm TestDisabledAlgorithms keySTORE.what false\n+ * @run main\/othervm TestDisabledAlgorithms kEYstoRe.jceKS false\n+ * @run main\/othervm -Djdk.crypto.disabledAlgorithms=\"keystore.jkS\" TestDisabledAlgorithms keySTORE.jceKs true\n+ * @run main\/othervm -Djdk.crypto.disabledAlgorithms=\"KEYstORE.what\" TestDisabledAlgorithms KeYStore.JKs false\n+ * @run main\/othervm -Djdk.crypto.disabledAlgorithms=\"keystOre.jceKS\" TestDisabledAlgorithms KEysTORE.JKS false\n@@ -41,0 +42,2 @@\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n@@ -48,2 +51,2 @@\n-    private static final char[] PASSWORD = \"passphrase\".toCharArray();\n-    private static final String KEYSTORE = DIR + \"\/keystore.jks\";\n+    private static final char[] PASSWD = \"passphrase\".toCharArray();\n+    private static final String JKS_FN = \"keystore.jks\";\n@@ -57,36 +60,18 @@\n-            KeyStore k;\n-            if (p == null) {\n-                try {\n-                    k = KeyStore.getInstance(a);\n-                    if (shouldThrow) {\n-                        throw new RuntimeException(\"Expected ex not thrown\");\n-                    }\n-                } catch (KeyStoreException e) {\n-                    if (!shouldThrow) {\n-                        throw new RuntimeException(\"Unexpected ex\", e);\n-                    }\n-                }\n-                try {\n-                    k = KeyStore.getInstance(new File(KEYSTORE), PASSWORD);\n-                    System.out.println(\"Got KeyStore obj w\/ algo \" + k.getType());\n-                    if (shouldThrow) {\n-                        throw new RuntimeException(\"Expected ex not thrown\");\n-                    }\n-                } catch (KeyStoreException e) {\n-                    if (!shouldThrow) {\n-                        throw new RuntimeException(\"Unexpected ex\", e);\n-                    }\n-                }\n-                try {\n-                    k = KeyStore.getInstance(new File(KEYSTORE),\n-                            ()-> {\n-                                return new KeyStore.PasswordProtection(PASSWORD);\n-                            });\n-                    System.out.println(\"Got KeyStore obj w\/ algo \" + k.getType());\n-                    if (shouldThrow) {\n-                        throw new RuntimeException(\"Expected ex not thrown\");\n-                    }\n-                } catch (KeyStoreException e) {\n-                    if (!shouldThrow) {\n-                        throw new RuntimeException(\"Unexpected ex\", e);\n-                    }\n+            if (shouldThrow) {\n+                if (p == null) {\n+                    Utils.runAndCheckException(() -> KeyStore.getInstance(a),\n+                            KeyStoreException.class);\n+                    Utils.runAndCheckException(\n+                            () -> KeyStore.getInstance(new File(DIR, JKS_FN),\n+                                PASSWD),\n+                            KeyStoreException.class);\n+                    Utils.runAndCheckException(\n+                            () -> KeyStore.getInstance(new File(DIR, JKS_FN),\n+                                () -> {\n+                                    return new KeyStore.PasswordProtection(PASSWD);\n+                                }),\n+                            KeyStoreException.class);\n+                } else {\n+                    \/\/ with a provider argument\n+                    Utils.runAndCheckException(() -> KeyStore.getInstance(a, p),\n+                            KeyStoreException.class);\n@@ -95,10 +80,14 @@\n-                try {\n-                    k = KeyStore.getInstance(a, p);\n-                    System.out.println(\"Got KeyStore obj w\/ algo \" + k.getType());\n-                    if (shouldThrow) {\n-                        throw new RuntimeException(\"Expected ex not thrown\");\n-                    }\n-                } catch (KeyStoreException e) {\n-                    if (!shouldThrow) {\n-                        throw new RuntimeException(\"Unexpected ex\", e);\n-                    }\n+                if (p == null) {\n+                    KeyStore k = KeyStore.getInstance(a);\n+                    System.out.println(\"Got KeyStore w\/ algo \" + k.getType());\n+                    k = KeyStore.getInstance(new File(DIR, JKS_FN), PASSWD);\n+                    System.out.println(\"Got KeyStore w\/ algo \" + k.getType());\n+                    k = KeyStore.getInstance(new File(DIR, JKS_FN),\n+                        () -> {\n+                            return new KeyStore.PasswordProtection(PASSWD);\n+                        });\n+                    System.out.println(\"Got KeyStore w\/ algo \" + k.getType());\n+                } else {\n+                    \/\/ with a provider argument\n+                    KeyStore k = KeyStore.getInstance(a, p);\n+                    System.out.println(\"Got KeyStore w\/ algo \" + k.getType());\n","filename":"test\/jdk\/java\/security\/KeyStore\/TestDisabledAlgorithms.java","additions":43,"deletions":54,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -28,3 +28,4 @@\n- * @run main\/othervm TestDisabledAlgorithms MessageDigest.Sha-512 true\n- * @run main\/othervm TestDisabledAlgorithms MessageDigest.what false\n- * @run main\/othervm TestDisabledAlgorithms MessageDigest.SHA-512\/224 false\n+ * @library \/test\/lib\n+ * @run main\/othervm TestDisabledAlgorithms MESSAGEdigest.Sha-512 true\n+ * @run main\/othervm TestDisabledAlgorithms messageDIGest.what false\n+ * @run main\/othervm TestDisabledAlgorithms meSSagedIgest.sHA-512\/224 false\n@@ -37,0 +38,2 @@\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n@@ -43,1 +46,1 @@\n-            boolean shouldThrow) {\n+            boolean shouldThrow) throws Exception {\n@@ -48,1 +51,9 @@\n-            try {\n+            if (shouldThrow) {\n+                if (p == null) {\n+                    Utils.runAndCheckException(() -> MessageDigest.getInstance(a),\n+                            NoSuchAlgorithmException.class);\n+                } else {\n+                    Utils.runAndCheckException(() -> MessageDigest.getInstance(a, p),\n+                            NoSuchAlgorithmException.class);\n+                }\n+            } else {\n@@ -55,1 +66,1 @@\n-                System.out.println(\"Got MessageDigest obj w\/ algo \" +\n+                System.out.println(\"Got MessageDigest w\/ algo \" +\n@@ -57,7 +68,0 @@\n-                if (shouldThrow) {\n-                    throw new RuntimeException(\"Expected ex not thrown\");\n-                }\n-            } catch (NoSuchAlgorithmException e) {\n-                if (!shouldThrow) {\n-                    throw new RuntimeException(\"Unexpected ex\", e);\n-                }\n@@ -76,1 +80,2 @@\n-        List<String> algos = List.of(\"sHA-512\", \"shA-512\", \"2.16.840.1.101.3.4.2.3\");\n+        List<String> algos = List.of(\"sHA-512\", \"shA-512\",\n+                \"2.16.840.1.101.3.4.2.3\");\n","filename":"test\/jdk\/java\/security\/MessageDigest\/TestDisabledAlgorithms.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -39,1 +40,0 @@\n-\n@@ -42,0 +42,2 @@\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n@@ -49,12 +51,4 @@\n-        try {\n-            MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n-            throw new RuntimeException(\"Should Fail!\");\n-        } catch (ExceptionInInitializerError e) {\n-            Throwable t = e.getException();\n-            if (t instanceof IllegalArgumentException) {\n-                System.out.println(\"Expected Ex thrown for \" + t.getMessage());\n-            } else {\n-                \/\/ pass it up\n-                throw e;\n-            }\n-        }\n+        Utils.runAndCheckException(() -> MessageDigest.getInstance(\"SHA-512\"),\n+                t -> Asserts.assertTrue(\n+                        t instanceof ExceptionInInitializerError &&\n+                        t.getCause() instanceof IllegalArgumentException));\n","filename":"test\/jdk\/java\/security\/Security\/SecurityPropFile\/InvalidCryptoDisabledAlgos.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,3 +28,4 @@\n- * @run main\/othervm TestDisabledAlgorithms Signature.sha512withRSA true\n- * @run main\/othervm TestDisabledAlgorithms Signature.what false\n- * @run main\/othervm TestDisabledAlgorithms Signature.SHA512\/224withRSA false\n+ * @library \/test\/lib\n+ * @run main\/othervm TestDisabledAlgorithms SIGNATURe.sha512withRSA true\n+ * @run main\/othervm TestDisabledAlgorithms signaturE.what false\n+ * @run main\/othervm TestDisabledAlgorithms SiGnAtUrE.SHa512\/224withRSA false\n@@ -37,0 +38,2 @@\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n@@ -43,1 +46,1 @@\n-            boolean shouldThrow) {\n+            boolean shouldThrow) throws Exception {\n@@ -48,1 +51,9 @@\n-            try {\n+            if (shouldThrow) {\n+                if (p == null) {\n+                    Utils.runAndCheckException(() -> Signature.getInstance(a),\n+                            NoSuchAlgorithmException.class);\n+                } else {\n+                    Utils.runAndCheckException(() -> Signature.getInstance(a, p),\n+                            NoSuchAlgorithmException.class);\n+                }\n+            } else {\n@@ -55,9 +66,1 @@\n-                System.out.println(\"Got Signature obj w\/ algo \" +\n-                        s.getAlgorithm());\n-                if (shouldThrow) {\n-                    throw new RuntimeException(\"Expected ex not thrown\");\n-                }\n-            } catch (NoSuchAlgorithmException e) {\n-                if (!shouldThrow) {\n-                    throw new RuntimeException(\"Unexpected ex\", e);\n-                }\n+                System.out.println(\"Got Signature w\/ algo \" + s.getAlgorithm());\n","filename":"test\/jdk\/java\/security\/Signature\/TestDisabledAlgorithms.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,4 +28,5 @@\n- * @run main\/othervm TestDisabledAlgorithms Cipher.Rsa\/ECB\/PKCS1Padding true\n- * @run main\/othervm TestDisabledAlgorithms Cipher.rsA true\n- * @run main\/othervm TestDisabledAlgorithms Cipher.what false\n- * @run main\/othervm TestDisabledAlgorithms Cipher.RSA\/ECB\/PKCS1Padding2 false\n+ * @library \/test\/lib\n+ * @run main\/othervm TestDisabledAlgorithms CIPHEr.Rsa\/ECB\/PKCS1Padding true\n+ * @run main\/othervm TestDisabledAlgorithms cipheR.rsA true\n+ * @run main\/othervm TestDisabledAlgorithms CIPher.what false\n+ * @run main\/othervm TestDisabledAlgorithms cipHER.RSA\/ECB\/PKCS1Padding2 false\n@@ -40,0 +41,2 @@\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n@@ -48,1 +51,1 @@\n-            boolean shouldThrow) {\n+            boolean shouldThrow) throws Exception {\n@@ -53,1 +56,9 @@\n-            try {\n+            if (shouldThrow) {\n+                if (p == null) {\n+                    Utils.runAndCheckException(() -> Cipher.getInstance(a),\n+                            NoSuchAlgorithmException.class);\n+                } else {\n+                    Utils.runAndCheckException(() -> Cipher.getInstance(a, p),\n+                            NoSuchAlgorithmException.class);\n+                }\n+            } else {\n@@ -60,9 +71,1 @@\n-                System.out.println(\"Got cipher obj w\/ algo \" +\n-                        c.getAlgorithm());\n-                if (shouldThrow) {\n-                    throw new RuntimeException(\"Expected ex not thrown\");\n-                }\n-            } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n-                if (!shouldThrow) {\n-                    throw new RuntimeException(\"Unexpected ex\", e);\n-                }\n+                System.out.println(\"Got cipher w\/ algo \" + c.getAlgorithm());\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/TestDisabledAlgorithms.java","additions":18,"deletions":15,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @run main\/othervm TestDisabledAlgorithms Cipher.RSA\/ECB\/PKCS1Padding true\n- * @run main\/othervm TestDisabledAlgorithms Cipher.rsA true\n+ * @run main\/othervm TestDisabledAlgorithms CiPhEr.RSA\/ECB\/PKCS1Padding true\n+ * @run main\/othervm TestDisabledAlgorithms cIpHeR.rsA true\n@@ -32,1 +32,1 @@\n- * @run main\/othervm TestDisabledAlgorithms Cipher.RSA\/ECB\/PKCS1Padding2 false\n+ * @run main\/othervm TestDisabledAlgorithms CiPhER.RSA\/ECB\/PKCS1Padding2 false\n@@ -40,0 +40,2 @@\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n@@ -51,1 +53,2 @@\n-    private static void test(String alg, Provider p, boolean shouldThrow) {\n+    private static void test(String alg, Provider p, boolean shouldThrow)\n+            throws Exception {\n@@ -54,1 +57,4 @@\n-        try {\n+        if (shouldThrow) {\n+            Utils.runAndCheckException(() -> Cipher.getInstance(alg, p),\n+                    NoSuchAlgorithmException.class);\n+        } else {\n@@ -56,8 +62,1 @@\n-            System.out.println(\"Got cipher obj w\/ algo \" + c.getAlgorithm());\n-            if (shouldThrow) {\n-                throw new RuntimeException(\"Expected ex not thrown\");\n-            }\n-        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n-            if (!shouldThrow) {\n-                throw new RuntimeException(\"Unexpected ex\", e);\n-            }\n+            System.out.println(\"Got cipher w\/ algo \" + c.getAlgorithm());\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestDisabledAlgorithms.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"}]}