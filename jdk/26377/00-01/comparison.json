{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import java.security.ProviderException;\n@@ -43,1 +42,0 @@\n-import javax.crypto.NoSuchPaddingException;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/RSACipherAdaptor.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1846,3 +1846,1 @@\n-                    if (s.getType().equals(\"KeyStore\") &&\n-                            CryptoAlgorithmConstraints.permits(\"KEYSTORE\",\n-                            s.getAlgorithm())) {\n+                    if (s.getType().equals(\"KeyStore\")) {\n@@ -1856,2 +1854,6 @@\n-                                keystore = new KeyStore(impl, p, s.getAlgorithm());\n-                                break;\n+                                String ksAlgo = s.getAlgorithm();\n+                                if (CryptoAlgorithmConstraints.permits(\n+                                        \"KEYSTORE\", ksAlgo)) {\n+                                    keystore = new KeyStore(impl, p, ksAlgo);\n+                                    break;\n+                                }\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -370,1 +370,0 @@\n-\n@@ -629,0 +628,6 @@\n+     * @implNote\n+     * The JDK Reference Implementation additionally uses\n+     * the {@code jdk.crypto.disabledAlgorithms}\n+     * {@link Security#getProperty(String) Security} property to determine\n+     * if the specified algorithm is allowed.\n+     *\n@@ -706,1 +711,1 @@\n-     * if the specified keystore type is allowed.\n+     * if the specified algorithm is allowed.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import sun.security.util.KnownOIDs;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/CryptoAlgorithmConstraints.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -776,0 +776,7 @@\n+#\n+# In some environments, certain algorithms may be undesirable for certain\n+# cryptographic services. For example, \"MD2\" is generally no longer considered\n+# to be a secure hash algorithm.  This section describes the mechanism for\n+# disabling algorithms at the JCA\/JCE level based on service name and algorithm\n+# name.\n+#\n@@ -796,1 +803,9 @@\n-#jdk.crypto.disabledAlgorithms=Cipher.RSA\/ECB\/PKCS1Padding, MessageDigest.MD2\n+# Note: The restriction is applied in the various getInstance(...) methods\n+# of the supported Service classes, i.e. Cipher, KeyStore, MessageDigest,\n+# and Signature.\n+#\n+# Note: This property is currently used by the JDK Reference implementation.\n+# It is not guaranteed to be examined and used by other implementations.\n+#\n+# Example:\n+#   jdk.crypto.disabledAlgorithms=Cipher.RSA\/ECB\/PKCS1Padding, MessageDigest.MD2\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}