{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-        \"PBEWithMD5AndDES\/CBC\/PKCS5Padding\"};\n+        \"PBEWithMD5AndDES\/CBC\/PKCS5Padding\", \"PBEWithSHA1AndDESede\"};\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/CICO\/CICOSkipTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -275,1 +275,1 @@\n-            String algoWrap = \"DES\";\n+            String algoWrap = \"AES\";\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/KeyWrap\/TestCipherKeyWrapperTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-        \"PBEWithMD5AndTripleDES\"};\n+        \"PBEWithMD5AndTripleDES\", \"PBEWithSHA1AndDESede\"};\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/TestCipherPBECons.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-        SecretKey desKey = bobKeyAgree.generateSecret(\"DES\");\n+        SecretKey aesKey = bobKeyAgree.generateSecret(\"AES\");\n@@ -236,2 +236,2 @@\n-        Cipher desCipher = Cipher.getInstance(\"DES\/ECB\/PKCS5Padding\");\n-        desCipher.init(Cipher.ENCRYPT_MODE, desKey);\n+        Cipher aesCipher = Cipher.getInstance(\"AES\/ECB\/PKCS5Padding\");\n+        aesCipher.init(Cipher.ENCRYPT_MODE, aesKey);\n@@ -240,1 +240,1 @@\n-        byte[] ciphertext = desCipher.doFinal(cleartext);\n+        byte[] ciphertext = aesCipher.doFinal(cleartext);\n@@ -242,2 +242,2 @@\n-        desCipher.init(Cipher.DECRYPT_MODE, desKey);\n-        byte[] cleartext1 = desCipher.doFinal(ciphertext);\n+        aesCipher.init(Cipher.DECRYPT_MODE, aesKey);\n+        byte[] cleartext1 = aesCipher.doFinal(ciphertext);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/DHKeyAgreement2.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,2 @@\n+ * @run main\/timeout=600 SupportedDHParamGens 3072\n+ * @run main\/timeout=600 SupportedDHParamGens 4096\n@@ -37,1 +40,0 @@\n-\n@@ -41,1 +43,0 @@\n-import javax.crypto.*;\n@@ -44,0 +45,2 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n+import jdk.test.lib.security.SecurityUtils;\n@@ -51,5 +54,11 @@\n-        AlgorithmParameterGenerator apg =\n-                AlgorithmParameterGenerator.getInstance(\"DH\", \"SunJCE\");\n-        apg.init(primeSize);\n-        AlgorithmParameters ap = apg.generateParameters();\n-        DHParameterSpec spec = ap.getParameterSpec(DHParameterSpec.class);\n+        DHParameterSpec spec = null;\n+        switch (primeSize) {\n+            case 2048, 3072, 4096 -> spec = getDHParameterSpec(primeSize);\n+            default -> {\n+                AlgorithmParameterGenerator apg =\n+                        AlgorithmParameterGenerator.getInstance(\"DH\", \"SunJCE\");\n+                apg.init(primeSize);\n+                AlgorithmParameters ap = apg.generateParameters();\n+                spec = ap.getParameterSpec(DHParameterSpec.class);\n+            }\n+        }\n@@ -63,0 +72,5 @@\n+    private static DHParameterSpec getDHParameterSpec(int primeSize) {\n+        DiffieHellmanGroup dhGroup = SecurityUtils.getTestDHGroup(primeSize);\n+        return new DHParameterSpec(dhGroup.getPrime(), dhGroup.getBase());\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/SupportedDHParamGens.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/SupportedDHParamGensLongKey.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    private static final String ALGOS[] = { \"RC2\", \"ARCFOUR\" };\n+    private static final String ALGOS[] = { \"RC2\", \"ARCFOUR\", \"AES\", \"AES\", \"AES\" };\n@@ -41,1 +41,1 @@\n-        { 64, 80 }; \/\/ in bits\n+        { 64, 80, 128, 192, 256 }; \/\/ in bits\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyGenerator\/TestExplicitKeyLength.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,4 @@\n+        \"HmacPBESHA224\",\n+        \"HmacPBESHA256\",\n+        \"HmacPBESHA384\",\n+        \"HmacPBESHA512\",\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Mac\/HmacSaltLengths.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-        KeyGenerator kgen = KeyGenerator.getInstance(\"DES\");\n+        KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Mac\/MacClone.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-            \"DES\", \"DESede\", \"Blowfish\"\n+            \"DES\", \"DESede\", \"Blowfish\", \"AES\"\n","filename":"test\/jdk\/java\/security\/KeyStore\/TestKeyStoreEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-        MessageDigest md = MessageDigest.getInstance(\"MD5\", p);\n+        MessageDigest md = MessageDigest.getInstance(\"SHA-1\", p);\n","filename":"test\/jdk\/java\/security\/MessageDigest\/ByteBuffers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -46,2 +48,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\", p);\n-        kpg.initialize(512);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n@@ -50,1 +53,1 @@\n-        Signature sig = Signature.getInstance(\"DSA\", p);\n+        Signature sig = Signature.getInstance(\"SHA224withDSA\", p);\n","filename":"test\/jdk\/java\/security\/Signature\/ByteBuffers.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -32,0 +33,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -39,2 +41,3 @@\n-        KeyPairGenerator kpGen = KeyPairGenerator.getInstance(\"DSA\");\n-        kpGen.initialize(512);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpGen = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpGen.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n@@ -43,1 +46,1 @@\n-        Signature sig = Signature.getInstance(\"DSS\");\n+        Signature sig = Signature.getInstance(\"SHA224withDSA\");\n@@ -58,1 +61,1 @@\n-        sig = Signature.getInstance(\"DSS\");\n+        sig = Signature.getInstance(\"SHA224withDSA\");\n@@ -61,1 +64,1 @@\n-        out = new byte[48];\n+        out = new byte[64];\n","filename":"test\/jdk\/java\/security\/Signature\/SignWithOutputBuffer.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+    private static final PSSParameterSpec SHA224_PSS_PARAM_SPEC = new PSSParameterSpec\n+            (\"SHA-224\", \"MGF1\", MGF1ParameterSpec.SHA224, 20, 1);\n@@ -87,1 +89,1 @@\n-        SignatureUtil.initSignWithParam(sig, key1, PSSParameterSpec.DEFAULT, null);\n+        SignatureUtil.initSignWithParam(sig, key1, SHA224_PSS_PARAM_SPEC, null);\n@@ -110,1 +112,1 @@\n-        AlgorithmParameterSpec params = PSSParameterSpec.DEFAULT;\n+        AlgorithmParameterSpec params = SHA224_PSS_PARAM_SPEC;\n","filename":"test\/jdk\/java\/security\/Signature\/SignatureGetInstance.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -31,0 +32,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -38,2 +40,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\", p);\n-        kpg.initialize(512);\n+        String kpgAlgorithm = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n@@ -42,1 +45,1 @@\n-        Signature sig = Signature.getInstance(\"DSA\", p);\n+        Signature sig = Signature.getInstance(\"SHA224withDSA\", p);\n","filename":"test\/jdk\/java\/security\/Signature\/TestInitSignWithMyOwnRandom.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-        Signature signature = Signature.getInstance(\"SHA1withDSA\");\n+        Signature signature = Signature.getInstance(\"SHA224withDSA\");\n","filename":"test\/jdk\/java\/security\/Signature\/VerifyRangeCheckOverflow.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,0 +165,2 @@\n+        new Test(SigAlg.SHA224withRSA, KeyAlg.RSA, Provider.Default),\n+        new Test(SigAlg.SHA256withRSA, KeyAlg.RSA, Provider.Default),\n","filename":"test\/jdk\/java\/security\/SignedObject\/Chain.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -33,0 +34,1 @@\n+ * @library \/test\/lib\n@@ -38,1 +40,1 @@\n-    private static final int KEY_SIZE = 512;\n+    private static final int KEY_SIZE = SecurityUtils.getTestKeySize(DSA);\n@@ -46,1 +48,1 @@\n-        Signature signature = Signature.getInstance(DSA);\n+        Signature signature = Signature.getInstance(\"SHA224withDSA\");\n@@ -52,1 +54,1 @@\n-        signature = Signature.getInstance(DSA, \"SUN\");\n+        signature = Signature.getInstance(\"SHA224withDSA\", \"SUN\");\n","filename":"test\/jdk\/java\/security\/SignedObject\/Copy.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-        byte[] keyBytes = new byte[8];\n+        byte[] keyBytes = new byte[16];\n@@ -51,1 +51,1 @@\n-        SecretKey key = new SecretKeySpec(keyBytes, \"DES\");\n+        SecretKey key = new SecretKeySpec(keyBytes, \"AES\");\n@@ -53,1 +53,1 @@\n-        Cipher cipher = Cipher.getInstance(\"DES\/ECB\/NoPadding\");\n+        Cipher cipher = Cipher.getInstance(\"AES\/ECB\/NoPadding\");\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/ByteBuffers.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-        c = Cipher.getInstance(\"PBEWithMD5AndTripleDES\");\n+        c = Cipher.getInstance(\"PBEWithHmacSHA1AndAES_128\");\n@@ -52,1 +52,1 @@\n-        c = Cipher.getInstance(\"des\", \"SunJCE\");\n+        c = Cipher.getInstance(\"aes\", \"SunJCE\");\n@@ -54,1 +54,1 @@\n-        c = Cipher.getInstance(\"des\/cbc\/pkcs5padding\", \"SunJCE\");\n+        c = Cipher.getInstance(\"aes\/cbc\/pkcs5padding\", \"SunJCE\");\n@@ -57,1 +57,1 @@\n-        c = Cipher.getInstance(\"des\", p);\n+        c = Cipher.getInstance(\"aes\", p);\n@@ -59,1 +59,1 @@\n-        c = Cipher.getInstance(\"des\/cbc\/pkcs5padding\", p);\n+        c = Cipher.getInstance(\"aes\/cbc\/pkcs5padding\", p);\n@@ -63,1 +63,1 @@\n-            c = Cipher.getInstance(\"DES\/XYZ\/PKCS5Padding\");\n+            c = Cipher.getInstance(\"AES\/XYZ\/PKCS5Padding\");\n@@ -69,1 +69,1 @@\n-            c = Cipher.getInstance(\"DES\/XYZ\/PKCS5Padding\", \"SunJCE\");\n+            c = Cipher.getInstance(\"AES\/XYZ\/PKCS5Padding\", \"SunJCE\");\n@@ -75,1 +75,1 @@\n-            c = Cipher.getInstance(\"DES\/XYZ\/PKCS5Padding\", p);\n+            c = Cipher.getInstance(\"AES\/XYZ\/PKCS5Padding\", p);\n@@ -82,1 +82,1 @@\n-            c = Cipher.getInstance(\"DES\/CBC\/XYZPadding\");\n+            c = Cipher.getInstance(\"AES\/CBC\/XYZPadding\");\n@@ -88,1 +88,1 @@\n-            c = Cipher.getInstance(\"DES\/CBC\/XYZPadding\", \"SunJCE\");\n+            c = Cipher.getInstance(\"AES\/CBC\/XYZPadding\", \"SunJCE\");\n@@ -94,1 +94,1 @@\n-            c = Cipher.getInstance(\"DES\/CBC\/XYZPadding\", p);\n+            c = Cipher.getInstance(\"AES\/CBC\/XYZPadding\", p);\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/TestGetInstance.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-        byte[] keyBytes = new byte[8];\n+        byte[] keyBytes = new byte[16];\n@@ -58,1 +58,1 @@\n-        SecretKey key = new SecretKeySpec(keyBytes, \"DES\");\n+        SecretKey key = new SecretKeySpec(keyBytes, \"AES\");\n@@ -60,1 +60,1 @@\n-        Cipher cipher = Cipher.getInstance(\"DES\/CBC\/PKCS5Padding\", \"SunJCE\");\n+        Cipher cipher = Cipher.getInstance(\"AES\/CBC\/PKCS5Padding\", \"SunJCE\");\n","filename":"test\/jdk\/javax\/crypto\/CipherSpi\/DirectBBRemaining.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-        if (Cipher.getMaxAllowedKeyLength(\"DES\") == Integer.MAX_VALUE) {\n+        if (Cipher.getMaxAllowedKeyLength(\"AES\") == Integer.MAX_VALUE) {\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermission\/AllPermCheck.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        if (Cipher.getMaxAllowedKeyLength(\"DES\") == Integer.MAX_VALUE) {\n+        if (Cipher.getMaxAllowedKeyLength(\"AES\") == Integer.MAX_VALUE) {\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermission\/LowercasePermCheck.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    private static final String cipherAlg = \"PBEWithMD5AndDES\";\n+    private static final String cipherAlg = \"PBEWithSHA1AndDESede\";\n@@ -58,1 +58,1 @@\n-    private static String encryptedPKCS8 = \"AE:20:81:4F:4D:38:73:C0:51:70:42:DA:C2:EF:61:49:07:E9:B5:D5:55:6D:D1:50:54:B2:0B:41:3E:2F:B6:00:BC:30:89:7B:32:A5:5F:B6:86:92:9E:06:6E:E2:40:8E:3E:E8:0B:CA:97:DB:3E:72:3E:03:22:34:35:EA:5F:B0:71:B2:07:BC:0D:97:94:0A:E6:12:9B:60:7A:77:D4:6C:99:60:2E:68:D6:55:BE:83:B8:A9:0F:19:8A:BE:91:30:D0:FE:52:94:5A:4C:D7:24:07:B3:61:EB:B5:4A:C6:6F:96:8A:C0:20:E9:73:40:FA:A2:56:04:F2:43:35:90:EA:35:C9:8C:08:9D:0B:BC:37:F0:01:D5:DF:BE:E4:4A:57:E0:13:0C:D5:F0:E8:5C:3B:B3:CD:7E:B5:E8:A5:84:63:F6:DA:3E:F2:CF:53:1F:A2:86:44:61:DD:AF:C1:78:70:3A:E6:06:41:77:6C:5B:8D:FA:C4:39:D7:4D:2F:87:D8:31:F4:B6:2B:94:D9:87:17:0E:C8:E3:FA:54:C8:B2:44:56:E0:37:5F:4C:5D:B2:21:DD:15:9E:94:63:89:CF:07:8C:79:F8:65:B2:22:45:D5:F0:2A:70:19:61:16:1D:52:5E:0C:35:3B:20:88:17:7E:FD:05:CC:08:09:2F:05:61:F7:A8:F5:EA:DE:77:DE:5D:55:4E:A0:36:A1:13:FF:2D:57:E8:4E:06:CE:C9:C1:B1:AE:C6:52:A6:EB:35:4C:81:91:DE:71:BA:34:DA:8A:99:1A:47:2E:66:52:AF:E3:2A:E4:0A:27:7F:72:C4:90:7E:8D:8F:64:8D:21:7E:00:DC:1C:62:0F:CC:96:80:C7:E5:5B:70:48:A5:E7:34:27:1A:7C:48:A7:9E:8B:2B:A6:E2\";\n+    private static String encryptedPKCS8 = \"0D:CA:00:8F:64:91:9C:60:36:F5:9B:BD:DD:C5:A9:A2:27:9E:6B:AE:CB:23:0E:2F:DA:76:03:A5:B7:C0:D5:3E:B9:03:60:62:41:2C:D6:51:37:F0:D9:ED:B2:CC:E7:99:28:03:CD:20:5D:EC:56:77:FC:61:57:D7:8C:F3:F6:10:F7:E5:BA:88:04:FE:1A:17:B3:8C:36:BF:70:2D:CD:6F:BF:83:ED:03:41:22:95:68:E3:08:90:76:B5:97:CB:FF:CE:51:27:14:F6:38:00:22:E9:0F:86:9F:64:D2:47:34:F6:50:DA:A9:80:F5:67:BF:C7:51:B3:38:AF:CD:15:96:50:8F:33:F3:8B:43:4C:AF:ED:DD:37:03:EC:B1:CC:57:53:0A:AF:0D:53:CD:D7:2B:A2:20:C5:37:AF:09:78:8E:3F:A0:E4:EC:22:C6:71:EC:D1:42:15:9D:1D:E9:E3:9D:8F:D6:0B:2A:99:C9:C8:90:B1:CD:AB:17:DD:A3:6F:64:43:23:26:25:7B:A5:E0:1F:2E:AF:18:89:C8:D6:97:28:32:A1:01:22:6F:14:B6:6C:4E:8A:83:47:16:99:51:B4:8D:85:9E:AB:00:B5:18:BB:49:97:47:59:F8:A7:A8:64:76:3F:41:5F:71:1A:F3:4A:96:F2:B4:44:38:42:4B:AE:0F:08:83:5C:33:F8:6A:8F:B9:6A:3D:1C:06:02:4E:07:48:46:E0:6D:6D:ED:E8:19:CB:3F:B0:6F:10:68:3A:5E:F5:8F:94:EF:B4:8B:58:5F:50:0A:E5:F2:13:54:59:14:99:C5:74:02:A2:B1:73:16:7F:F2:D4:DE:E0:12:86:55:46:9C:57:D1:7A:5C:8B:46:E1:7E:C3:32:14:31:52:64:07:52:9D:65:04:9D:54:89\";\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKeySpec.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    private static final String cipherAlg = \"PBEWithMD5AndDES\";\n+    private static final String cipherAlg = \"PBEWithSHA1AndDESede\";\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKeySpecException.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    private static final String cipherAlg = \"PBEWithMD5AndDES\";\n+    private static final String cipherAlg = \"PBEWithSHA1AndDESede\";\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKeySpecException2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-    private static final String cipherAlg = \"PBEWithMD5AndDES\";\n+    private static final String cipherAlg = \"PBEWithSHA1AndDESede\";\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKeySpecInvalidEncoding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-        kg = KeyGenerator.getInstance(\"des\");\n+        kg = KeyGenerator.getInstance(\"aes\");\n@@ -52,1 +52,1 @@\n-        kg = KeyGenerator.getInstance(\"des\", \"SunJCE\");\n+        kg = KeyGenerator.getInstance(\"aes\", \"SunJCE\");\n@@ -54,1 +54,1 @@\n-        kg = KeyGenerator.getInstance(\"des\", p);\n+        kg = KeyGenerator.getInstance(\"aes\", p);\n","filename":"test\/jdk\/javax\/crypto\/KeyGenerator\/TestGetInstance.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        SecretKey key = new SecretKeySpec(keyBytes, \"HmacMD5\");\n+        SecretKey key = new SecretKeySpec(keyBytes, \"HmacSha256\");\n@@ -53,1 +53,1 @@\n-        Mac mac = Mac.getInstance(\"HmacMD5\");\n+        Mac mac = Mac.getInstance(\"HmacSha256\");\n","filename":"test\/jdk\/javax\/crypto\/Mac\/ByteBuffers.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-        mac = Mac.getInstance(\"hmacmd5\");\n+        mac = Mac.getInstance(\"hmacsha256\");\n@@ -52,1 +52,1 @@\n-        mac = Mac.getInstance(\"hmacmd5\", \"SunJCE\");\n+        mac = Mac.getInstance(\"hmacsha256\", \"SunJCE\");\n@@ -54,1 +54,1 @@\n-        mac = Mac.getInstance(\"hmacmd5\", p);\n+        mac = Mac.getInstance(\"hmacsha256\", p);\n","filename":"test\/jdk\/javax\/crypto\/Mac\/TestGetInstance.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -41,0 +42,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -72,0 +74,1 @@\n+        String kpgAlgorithm = \"DSA\";\n@@ -73,2 +76,2 @@\n-        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"DSA\");\n-        String sigAlg = \"DSA\";\n+        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        String sigAlg = \"Sha256withDSA\";\n@@ -76,1 +79,1 @@\n-        keyGen.initialize(512);\n+        keyGen.initialize(SecurityUtils.getTestKeySize(kpgAlgorithm));\n","filename":"test\/jdk\/sun\/security\/pkcs\/pkcs10\/PKCS10AttrEncoding.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -66,1 +67,1 @@\n-\n+        String digestAlg = \"Sha256\";\n@@ -68,1 +69,1 @@\n-        SimpleSigner signer1 = new SimpleSigner(null, null, null, null);\n+        SimpleSigner signer1 = new SimpleSigner(digestAlg, null, null, null);\n@@ -73,1 +74,1 @@\n-        SimpleSigner signer2 = new SimpleSigner(null, null, null, null);\n+        SimpleSigner signer2 = new SimpleSigner(digestAlg, null, null, null);\n@@ -78,1 +79,1 @@\n-        SimpleSigner signer3 = new SimpleSigner(null, null, null, null);\n+        SimpleSigner signer3 = new SimpleSigner(digestAlg, null, null, null);\n@@ -173,1 +174,1 @@\n-            keyGen.initialize(1024);\n+            keyGen.initialize(SecurityUtils.getTestKeySize(encryptionAlg));\n@@ -180,1 +181,1 @@\n-            this.sig = Signature.getInstance(encryptionAlg);\n+            this.sig = Signature.getInstance(digestAlg + \"with\" + encryptionAlg);\n","filename":"test\/jdk\/sun\/security\/pkcs\/pkcs7\/SignerOrder.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-        Signature sig = Signature.getInstance(\"MD5withRSA\", provider);\n+        Signature sig = Signature.getInstance(\"Sha224withRSA\", provider);\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+        PSSParameterSpec SHA224_PSS_PARAM_SPEC = new PSSParameterSpec\n+                (\"SHA224\", \"MGF1\", MGF1ParameterSpec.SHA1, 20, 1);\n@@ -40,2 +42,2 @@\n-        s1.setParameter(PSSParameterSpec.DEFAULT);\n-        s2.setParameter(PSSParameterSpec.DEFAULT);\n+        s1.setParameter(SHA224_PSS_PARAM_SPEC);\n+        s2.setParameter(SHA224_PSS_PARAM_SPEC);\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/InitAgain.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -106,0 +107,2 @@\n+    private static final int KEY_LENGTH_DSA = SecurityUtils.getTestKeySize(\"DSA\");\n+    private static final int KEY_LENGTH_RSA = SecurityUtils.getTestKeySize(\"RSA\");\n@@ -195,1 +198,1 @@\n-                cmd += \" -sigalg SHA1withDSA -keysize 1024\";\n+                cmd += \" -sigalg SHA256withDSA -keysize \" + KEY_LENGTH_DSA;\n@@ -957,1 +960,1 @@\n-                \"-keypass changeit -selfcert -sigalg MD5withRSA\");\n+                \"-keypass changeit -selfcert -sigalg SHA256withRSA\");\n@@ -1065,1 +1068,1 @@\n-                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 512 \" +\n+                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 2048 \" +\n@@ -1068,1 +1071,1 @@\n-                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 1024 \" +\n+                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 3072 \" +\n@@ -1078,1 +1081,1 @@\n-                \"-sigalg MD5withRSA -alias n10\");\n+                \"-sigalg SHA256withRSA -alias n10\");\n@@ -1155,1 +1158,2 @@\n-                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 1024\");\n+                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize \" +\n+                KEY_LENGTH_DSA);\n@@ -1161,1 +1165,1 @@\n-                \"-certreq -file csr1 -sigalg SHA1withDSA\");\n+                \"-certreq -file csr1 -sigalg SHA256withDSA\");\n@@ -1164,1 +1168,1 @@\n-                \"-certreq -file csr1 -sigalg MD5withRSA\");\n+                \"-certreq -file csr1 -sigalg SHA256withRSA\");\n@@ -1195,1 +1199,1 @@\n-                \"-certreq -file csr1 -sigalg SHA1withDSA\");\n+                \"-certreq -file csr1 -sigalg SHA256withDSA\");\n@@ -1197,1 +1201,1 @@\n-                \"-certreq -file csr1 -sigalg MD5withRSA\");\n+                \"-certreq -file csr1 -sigalg SHA256withRSA\");\n@@ -1223,2 +1227,2 @@\n-                \"-keypass changeit -genkeypair -dname CN=weak -keyalg rsa \" +\n-                \"-keysize 512 -sigalg MD5withRSA -alias myweakkey\");\n+                \"-keypass changeit -genkeypair -dname CN=weak -keyalg rsa -keysize \" +\n+                KEY_LENGTH_RSA + \" -sigalg SHA256withRSA -alias myweakkey\");\n@@ -1676,1 +1680,1 @@\n-        \/\/   2. keytool -genkey -keyalg DSA -v -keysize 512 Enter \"a\" for the keystore\n+        \/\/   2. keytool -genkey -keyalg DSA -v -keysize <strongKeySize> Enter \"a\" for the keystore\n@@ -1683,1 +1687,2 @@\n-                \"-genkey -keyalg DSA -v -keysize 512 -keystore x.jks -storetype JKS\");\n+                \"-genkey -keyalg DSA -v -keysize \" + KEY_LENGTH_DSA + \" -keystore x.jks \" +\n+                        \"-storetype JKS\");\n@@ -1690,1 +1695,1 @@\n-        \/\/   5. keytool - -keyalg DSA -v -keysize 512 Enter \"password\" as the password.\n+        \/\/   5. keytool - -keyalg DSA -v -keysize <strongKeySize> Enter \"password\" as the password.\n@@ -1692,1 +1697,1 @@\n-        testFail(\"password\\n\", \"-genkey -keyalg DSA -v -keysize 512\" +\n+        testFail(\"password\\n\", \"-genkey -keyalg DSA -v -keysize \" + KEY_LENGTH_DSA +\n@@ -1695,1 +1700,1 @@\n-        \/\/   6. keytool -genkey -keyalg DSA -v -keysize 512 -alias mykey2 -storepass password\n+        \/\/   6. keytool -genkey -keyalg DSA -v -keysize <strongKeySize> -alias mykey2 -storepass password\n@@ -1699,2 +1704,2 @@\n-        testOK(\"\\n\\n\\n\\n\\n\\nyes\\n\\n\", \"-genkey -keyalg DSA -v -keysize 512 -alias mykey2\" +\n-                \" -storepass password -keystore x.jks -storetype JKS\");\n+        testOK(\"\\n\\n\\n\\n\\n\\nyes\\n\\n\", \"-genkey -keyalg DSA -v -keysize \" + KEY_LENGTH_DSA +\n+                \" -alias mykey2 -storepass password -keystore x.jks -storetype JKS\");\n@@ -1780,1 +1785,1 @@\n-                \" -dname cn=genkey -keysize 512 -keyalg rsa\"));\n+                \" -dname cn=genkey -keysize \" + KEY_LENGTH_RSA  + \" -keyalg rsa\"));\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/KeyToolTest.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.security;\n+\n+import java.math.BigInteger;\n+\n+\/**\n+ * An enumeration of DH groups for tests.\n+ *\/\n+public enum DiffieHellmanGroup {\n+\n+    \/**\n+     * RFC 7919 - ffdhe2048.\n+     *\/\n+    ffdhe2048(new BigInteger(\"FFFFFFFFFFFFFFFFADF85458A2BB4A9AAFDC5620273D3CF1\" +\n+                    \"D8B9C583CE2D3695A9E13641146433FBCC939DCE249B3EF9\" +\n+                    \"7D2FE363630C75D8F681B202AEC4617AD3DF1ED5D5FD6561\" +\n+                    \"2433F51F5F066ED0856365553DED1AF3B557135E7F57C935\" +\n+                    \"984F0C70E0E68B77E2A689DAF3EFE8721DF158A136ADE735\" +\n+                    \"30ACCA4F483A797ABC0AB182B324FB61D108A94BB2C8E3FB\" +\n+                    \"B96ADAB760D7F4681D4F42A3DE394DF4AE56EDE76372BB19\" +\n+                    \"0B07A7C8EE0A6D709E02FCE1CDF7E2ECC03404CD28342F61\" +\n+                    \"9172FE9CE98583FF8E4F1232EEF28183C3FE3B1B4C6FAD73\" +\n+                    \"3BB5FCBC2EC22005C58EF1837D1683B2C6F34A26C1B2EFFA\" +\n+                    \"886B423861285C97FFFFFFFFFFFFFFFF\", 16), 2),\n+    \/**\n+     * RFC 7919 - ffdhe3072.\n+     *\/\n+    ffdhe3072(new BigInteger(\"FFFFFFFFFFFFFFFFADF85458A2BB4A9AAFDC5620273D3CF1\" +\n+                    \"D8B9C583CE2D3695A9E13641146433FBCC939DCE249B3EF9\" +\n+                    \"7D2FE363630C75D8F681B202AEC4617AD3DF1ED5D5FD6561\" +\n+                    \"2433F51F5F066ED0856365553DED1AF3B557135E7F57C935\" +\n+                    \"984F0C70E0E68B77E2A689DAF3EFE8721DF158A136ADE735\" +\n+                    \"30ACCA4F483A797ABC0AB182B324FB61D108A94BB2C8E3FB\" +\n+                    \"B96ADAB760D7F4681D4F42A3DE394DF4AE56EDE76372BB19\" +\n+                    \"0B07A7C8EE0A6D709E02FCE1CDF7E2ECC03404CD28342F61\" +\n+                    \"9172FE9CE98583FF8E4F1232EEF28183C3FE3B1B4C6FAD73\" +\n+                    \"3BB5FCBC2EC22005C58EF1837D1683B2C6F34A26C1B2EFFA\" +\n+                    \"886B4238611FCFDCDE355B3B6519035BBC34F4DEF99C0238\" +\n+                    \"61B46FC9D6E6C9077AD91D2691F7F7EE598CB0FAC186D91C\" +\n+                    \"AEFE130985139270B4130C93BC437944F4FD4452E2D74DD3\" +\n+                    \"64F2E21E71F54BFF5CAE82AB9C9DF69EE86D2BC522363A0D\" +\n+                    \"ABC521979B0DEADA1DBF9A42D5C4484E0ABCD06BFA53DDEF\" +\n+                    \"3C1B20EE3FD59D7C25E41D2B66C62E37FFFFFFFFFFFFFFFF\", 16), 2),\n+    \/**\n+     * RFC 7919 - ffdhe4096.\n+     *\/\n+    ffdhe4096(new BigInteger(\"FFFFFFFFFFFFFFFFADF85458A2BB4A9AAFDC5620273D3CF1\" +\n+                    \"D8B9C583CE2D3695A9E13641146433FBCC939DCE249B3EF9\" +\n+                    \"7D2FE363630C75D8F681B202AEC4617AD3DF1ED5D5FD6561\" +\n+                    \"2433F51F5F066ED0856365553DED1AF3B557135E7F57C935\" +\n+                    \"984F0C70E0E68B77E2A689DAF3EFE8721DF158A136ADE735\" +\n+                    \"30ACCA4F483A797ABC0AB182B324FB61D108A94BB2C8E3FB\" +\n+                    \"B96ADAB760D7F4681D4F42A3DE394DF4AE56EDE76372BB19\" +\n+                    \"0B07A7C8EE0A6D709E02FCE1CDF7E2ECC03404CD28342F61\" +\n+                    \"9172FE9CE98583FF8E4F1232EEF28183C3FE3B1B4C6FAD73\" +\n+                    \"3BB5FCBC2EC22005C58EF1837D1683B2C6F34A26C1B2EFFA\" +\n+                    \"886B4238611FCFDCDE355B3B6519035BBC34F4DEF99C0238\" +\n+                    \"61B46FC9D6E6C9077AD91D2691F7F7EE598CB0FAC186D91C\" +\n+                    \"AEFE130985139270B4130C93BC437944F4FD4452E2D74DD3\" +\n+                    \"64F2E21E71F54BFF5CAE82AB9C9DF69EE86D2BC522363A0D\" +\n+                    \"ABC521979B0DEADA1DBF9A42D5C4484E0ABCD06BFA53DDEF\" +\n+                    \"3C1B20EE3FD59D7C25E41D2B669E1EF16E6F52C3164DF4FB\" +\n+                    \"7930E9E4E58857B6AC7D5F42D69F6D187763CF1D55034004\" +\n+                    \"87F55BA57E31CC7A7135C886EFB4318AED6A1E012D9E6832\" +\n+                    \"A907600A918130C46DC778F971AD0038092999A333CB8B7A\" +\n+                    \"1A1DB93D7140003C2A4ECEA9F98D0ACC0A8291CDCEC97DCF\" +\n+                    \"8EC9B55A7F88A46B4DB5A851F44182E1C68A007E5E655F6A\" +\n+                    \"FFFFFFFFFFFFFFFF\", 16), 2);\n+\n+\n+    public BigInteger getPrime() {\n+        return prime;\n+    }\n+\n+    private final BigInteger prime;\n+\n+    public BigInteger getBase() {\n+        return base;\n+    }\n+\n+    private final BigInteger base;\n+\n+    DiffieHellmanGroup(BigInteger prime, int base) {\n+        this.prime = prime;\n+        this.base = BigInteger.valueOf(base);\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/security\/DiffieHellmanGroup.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n@@ -39,0 +40,21 @@\n+    \/*\n+     * Key Sizes for various algorithms.\n+     *\/\n+    private enum KeySize{\n+        RSA(2048),\n+        DSA(2048),\n+        DH(2048);\n+\n+        private final int keySize;\n+        KeySize(int keySize) {\n+            this.keySize = keySize;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return String.valueOf(keySize);\n+        }\n+    }\n+\n+    private final static int DEFAULT_SALTSIZE = 16;\n+\n@@ -110,0 +132,38 @@\n+    \/**\n+     * Returns a salt size for tests\n+     *\/\n+    public static int getTestSaltSize() {\n+        return DEFAULT_SALTSIZE;\n+    }\n+\n+    \/**\n+     * Returns a key size in bits for tests, depending on the specified algorithm\n+     *\/\n+    public static int getTestKeySize(String algo) {\n+        return switch (algo) {\n+            case \"RSA\" -> KeySize.RSA.keySize;\n+            case \"DSA\" -> KeySize.DSA.keySize;\n+            case \"DH\", \"DiffieHellman\" -> KeySize.DH.keySize;\n+            default -> throw new RuntimeException(\"Test key size not defined for \" + algo);\n+        };\n+    }\n+\n+    \/**\n+     * Returns a DH predefined group for tests\n+     *\/\n+    public static DiffieHellmanGroup getTestDHGroup() {\n+        return getTestDHGroup(2048);\n+    }\n+\n+    \/**\n+     * Returns a DH predefined group for tests, depending on the specified prime size\n+     *\/\n+    public static DiffieHellmanGroup getTestDHGroup(int primeSize) {\n+        return switch(primeSize) {\n+            case 2048 -> DiffieHellmanGroup.ffdhe2048;\n+            case 3072 -> DiffieHellmanGroup.ffdhe3072;\n+            case 4096 -> DiffieHellmanGroup.ffdhe4096;\n+            default -> throw new RuntimeException(\"Test DH group not defined for \" + primeSize);\n+        };\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SecurityUtils.java","additions":61,"deletions":1,"binary":false,"changes":62,"status":"modified"}]}