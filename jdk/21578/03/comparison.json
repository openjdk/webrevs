{"files":[{"patch":"@@ -78,1 +78,1 @@\n-        \"PBEWithMD5AndDES\/CBC\/PKCS5Padding\"};\n+        \"PBEWithMD5AndDES\/CBC\/PKCS5Padding\", \"PBEWithSHA1AndDESede\"};\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/CICO\/CICOSkipTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,1 +170,2 @@\n-        test.wrapperPublicPriviteKeyTest(provider, publicPrivateAlgos);\n+        test.wrapperPublicPriviteKeyTest(provider, publicPrivateAlgos, \"DES\");\n+        test.wrapperPublicPriviteKeyTest(provider, publicPrivateAlgos, \"AES\");\n@@ -266,1 +267,1 @@\n-    private void wrapperPublicPriviteKeyTest(Provider p, String[] algorithms)\n+    private void wrapperPublicPriviteKeyTest(Provider p, String[] algorithms, String algoWrap)\n@@ -278,1 +279,0 @@\n-            String algoWrap = \"DES\";\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/KeyWrap\/TestCipherKeyWrapperTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        \"PBEWithMD5AndTripleDES\"};\n+        \"PBEWithMD5AndTripleDES\", \"PBEWithSHA1AndDESede\"};\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/TestCipherPBECons.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -235,0 +235,6 @@\n+        testSecretKey(bobKeyAgree, alicePubKey, \"DES\");\n+        testSecretKey(bobKeyAgree, alicePubKey, \"AES\");\n+    }\n+\n+    private static void testSecretKey(KeyAgreement bobKeyAgree, PublicKey alicePubKey, String algo)\n+            throws Exception {\n@@ -237,1 +243,1 @@\n-        System.out.println(\"Return shared secret as SecretKey object ...\");\n+        System.out.println(\"Return shared secret as SecretKey object with algorithm: \" + algo);\n@@ -239,1 +245,1 @@\n-        SecretKey desKey = bobKeyAgree.generateSecret(\"DES\");\n+        SecretKey key = bobKeyAgree.generateSecret(algo);\n@@ -241,2 +247,2 @@\n-        Cipher desCipher = Cipher.getInstance(\"DES\/ECB\/PKCS5Padding\");\n-        desCipher.init(Cipher.ENCRYPT_MODE, desKey);\n+        Cipher cipher = Cipher.getInstance(algo + \"\/ECB\/PKCS5Padding\");\n+        cipher.init(Cipher.ENCRYPT_MODE, key);\n@@ -245,1 +251,1 @@\n-        byte[] ciphertext = desCipher.doFinal(cleartext);\n+        byte[] ciphertext = cipher.doFinal(cleartext);\n@@ -247,2 +253,2 @@\n-        desCipher.init(Cipher.DECRYPT_MODE, desKey);\n-        byte[] cleartext1 = desCipher.doFinal(ciphertext);\n+        cipher.init(Cipher.DECRYPT_MODE, key);\n+        byte[] cleartext1 = cipher.doFinal(ciphertext);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/DHKeyAgreement2.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,2 @@\n+ * @run main\/timeout=600 SupportedDHParamGens 3072\n+ * @run main\/timeout=600 SupportedDHParamGens 4096\n@@ -37,1 +40,0 @@\n-\n@@ -41,1 +43,0 @@\n-import javax.crypto.*;\n@@ -44,0 +45,2 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n+import jdk.test.lib.security.SecurityUtils;\n@@ -51,6 +54,12 @@\n-        AlgorithmParameterGenerator apg =\n-                AlgorithmParameterGenerator.getInstance(\"DH\",\n-                        System.getProperty(\"test.provider.name\", \"SunJCE\"));\n-        apg.init(primeSize);\n-        AlgorithmParameters ap = apg.generateParameters();\n-        DHParameterSpec spec = ap.getParameterSpec(DHParameterSpec.class);\n+        DHParameterSpec spec = null;\n+        switch (primeSize) {\n+            case 2048, 3072, 4096 -> spec = getDHParameterSpec(primeSize);\n+            default -> {\n+                AlgorithmParameterGenerator apg =\n+                        AlgorithmParameterGenerator.getInstance(\"DH\",\n+                                System.getProperty(\"test.provider.name\", \"SunJCE\"));\n+                apg.init(primeSize);\n+                AlgorithmParameters ap = apg.generateParameters();\n+                spec = ap.getParameterSpec(DHParameterSpec.class);\n+            }\n+        }\n@@ -65,0 +74,5 @@\n+    private static DHParameterSpec getDHParameterSpec(int primeSize) {\n+        DiffieHellmanGroup dhGroup = SecurityUtils.getTestDHGroup(primeSize);\n+        return new DHParameterSpec(dhGroup.getPrime(), dhGroup.getBase());\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/SupportedDHParamGens.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/SupportedDHParamGensLongKey.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    private static final String ALGOS[] = { \"RC2\", \"ARCFOUR\" };\n+    private static final String ALGOS[] = { \"RC2\", \"ARCFOUR\", \"AES\", \"AES\", \"AES\" };\n@@ -41,1 +41,1 @@\n-        { 64, 80 }; \/\/ in bits\n+        { 64, 80, 128, 192, 256 }; \/\/ in bits\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyGenerator\/TestExplicitKeyLength.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,0 +44,4 @@\n+        \"HmacPBESHA224\",\n+        \"HmacPBESHA256\",\n+        \"HmacPBESHA384\",\n+        \"HmacPBESHA512\",\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Mac\/HmacSaltLengths.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+ * @run main MacClone DES\n+ * @run main MacClone AES\n@@ -42,1 +44,2 @@\n-        KeyGenerator kgen = KeyGenerator.getInstance(\"DES\");\n+        String keyAlgo = args[0];\n+        KeyGenerator kgen = KeyGenerator.getInstance(keyAlgo);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Mac\/MacClone.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-            \"DES\", \"DESede\", \"Blowfish\"\n+            \"DES\", \"DESede\", \"Blowfish\", \"AES\"\n","filename":"test\/jdk\/java\/security\/KeyStore\/TestKeyStoreEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ * @run main ByteBuffers MD5\n+ * @run main ByteBuffers SHA-1\n@@ -46,1 +48,2 @@\n-        MessageDigest md = MessageDigest.getInstance(\"MD5\", p);\n+        String digestAlgo = args[0];\n+        MessageDigest md = MessageDigest.getInstance(digestAlgo, p);\n","filename":"test\/jdk\/java\/security\/MessageDigest\/ByteBuffers.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ * @run main ByteBuffers DSA 512\n+ * @run main ByteBuffers SHA256withDSA 2048\n@@ -47,2 +49,4 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\", p);\n-        kpg.initialize(512);\n+        String kpgAlgorithm = \"DSA\";\n+        int keySize = Integer.parseInt(args[1]);\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n+        kpg.initialize(keySize);\n@@ -51,1 +55,2 @@\n-        Signature sig = Signature.getInstance(\"DSA\", p);\n+        String signAlgo = args[0];\n+        Signature sig = Signature.getInstance(signAlgo, p);\n","filename":"test\/jdk\/java\/security\/Signature\/ByteBuffers.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+ * @run main SignWithOutputBuffer DSS 512\n+ * @run main SignWithOutputBuffer SHA256withDSA 2048\n@@ -39,2 +41,4 @@\n-        KeyPairGenerator kpGen = KeyPairGenerator.getInstance(\"DSA\");\n-        kpGen.initialize(512);\n+        String kpgAlgorithm = \"DSA\";\n+        int keySize = Integer.parseInt(args[1]);\n+        KeyPairGenerator kpGen = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        kpGen.initialize(keySize);\n@@ -43,1 +47,2 @@\n-        Signature sig = Signature.getInstance(\"DSS\");\n+        String signAlgo = args[0];\n+        Signature sig = Signature.getInstance(signAlgo);\n@@ -58,1 +63,1 @@\n-        sig = Signature.getInstance(\"DSS\");\n+        sig = Signature.getInstance(signAlgo);\n@@ -61,1 +66,1 @@\n-        out = new byte[48];\n+        out = new byte[64];\n","filename":"test\/jdk\/java\/security\/Signature\/SignWithOutputBuffer.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @run main\/othervm SignatureGetInstance\n+ * @run main\/othervm SignatureGetInstance default\n+ * @run main\/othervm SignatureGetInstance SHA-256\n@@ -40,0 +41,1 @@\n+    private static PSSParameterSpec pssParamSpec;\n@@ -42,0 +44,3 @@\n+        String mdName = args[0];\n+        pssParamSpec = \"default\".equals(mdName) ? PSSParameterSpec.DEFAULT :\n+                new PSSParameterSpec(mdName, \"MGF1\", new MGF1ParameterSpec(mdName), 20, 1);\n@@ -88,1 +93,1 @@\n-        SignatureUtil.initSignWithParam(sig, key1, PSSParameterSpec.DEFAULT, null);\n+        SignatureUtil.initSignWithParam(sig, key1, pssParamSpec, null);\n@@ -111,1 +116,1 @@\n-        AlgorithmParameterSpec params = PSSParameterSpec.DEFAULT;\n+        AlgorithmParameterSpec params = pssParamSpec;\n","filename":"test\/jdk\/java\/security\/Signature\/SignatureGetInstance.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -29,0 +30,2 @@\n+ * @run main TestInitSignWithMyOwnRandom DSA 512\n+ * @run main TestInitSignWithMyOwnRandom SHA256withDSA 2048\n@@ -31,0 +34,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -34,1 +38,1 @@\n-    public static void main(String[] argv) throws Exception {\n+    public static void main(String[] args) throws Exception {\n@@ -38,3 +42,5 @@\n-                            System.getProperty(\"test.provider.name\", \"SUN\"));\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\", p);\n-        kpg.initialize(512);\n+                System.getProperty(\"test.provider.name\", \"SUN\"));\n+        String kpgAlgorithm = \"DSA\";\n+        int keySize = Integer.parseInt(args[1]);\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithm, p);\n+        kpg.initialize(keySize);\n@@ -43,1 +49,2 @@\n-        Signature sig = Signature.getInstance(\"DSA\", p);\n+        String signAlgo = args[0];\n+        Signature sig = Signature.getInstance(signAlgo, p);\n","filename":"test\/jdk\/java\/security\/Signature\/TestInitSignWithMyOwnRandom.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        Signature signature = Signature.getInstance(\"SHA1withDSA\");\n+        Signature signature = Signature.getInstance(\"SHA256withDSA\");\n","filename":"test\/jdk\/java\/security\/Signature\/VerifyRangeCheckOverflow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,0 +168,2 @@\n+        new Test(SigAlg.SHA224withRSA, KeyAlg.RSA, Provider.Default),\n+        new Test(SigAlg.SHA256withRSA, KeyAlg.RSA, Provider.Default),\n","filename":"test\/jdk\/java\/security\/SignedObject\/Chain.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+ * @run main Copy DSA 512\n+ * @run main Copy SHA256withDSA 2048\n@@ -38,1 +40,0 @@\n-    private static final int KEY_SIZE = 512;\n@@ -42,0 +43,1 @@\n+        int keySize = Integer.parseInt(args[1]);\n@@ -43,1 +45,1 @@\n-        kg.initialize(KEY_SIZE);\n+        kg.initialize(keySize);\n@@ -46,1 +48,2 @@\n-        Signature signature = Signature.getInstance(DSA);\n+        String signAlgo = args[0];\n+        Signature signature = Signature.getInstance(signAlgo);\n@@ -52,1 +55,2 @@\n-        signature = Signature.getInstance(DSA, System.getProperty(\"test.provider.name\", \"SUN\"));\n+        signature = Signature.getInstance(signAlgo,\n+                System.getProperty(\"test.provider.name\", \"SUN\"));\n@@ -58,1 +62,1 @@\n-        kg.initialize(KEY_SIZE);\n+        kg.initialize(keySize);\n","filename":"test\/jdk\/java\/security\/SignedObject\/Copy.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ * @run main ByteBuffers DES 8\n+ * @run main ByteBuffers AES 16\n@@ -50,1 +52,2 @@\n-        byte[] keyBytes = new byte[8];\n+        int keyInt = Integer.parseInt(args[1]);\n+        byte[] keyBytes = new byte[keyInt];\n@@ -52,1 +55,2 @@\n-        SecretKey key = new SecretKeySpec(keyBytes, \"DES\");\n+        String algo = args[0];\n+        SecretKey key = new SecretKeySpec(keyBytes, algo);\n@@ -54,1 +58,1 @@\n-        Cipher cipher = Cipher.getInstance(\"DES\/ECB\/NoPadding\");\n+        Cipher cipher = Cipher.getInstance(algo + \"\/ECB\/NoPadding\");\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/ByteBuffers.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+ * @run main TestGetInstance DES PBEWithMD5AndTripleDES\n+ * @run main TestGetInstance AES PBEWithHmacSHA1AndAES_128\n@@ -33,0 +35,1 @@\n+import java.util.Locale;\n@@ -45,0 +48,3 @@\n+        String algo = args[0];\n+        String algoLC = algo.toLowerCase(Locale.ROOT);\n+        String pbeAlgo = args[1];\n@@ -50,1 +56,1 @@\n-        c = Cipher.getInstance(\"PBEWithMD5AndTripleDES\");\n+        c = Cipher.getInstance(pbeAlgo);\n@@ -53,1 +59,1 @@\n-        c = Cipher.getInstance(\"des\",\n+        c = Cipher.getInstance(algoLC,\n@@ -56,1 +62,1 @@\n-        c = Cipher.getInstance(\"des\/cbc\/pkcs5padding\",\n+        c = Cipher.getInstance(algoLC + \"\/cbc\/pkcs5padding\",\n@@ -60,1 +66,1 @@\n-        c = Cipher.getInstance(\"des\", p);\n+        c = Cipher.getInstance(algoLC, p);\n@@ -62,1 +68,1 @@\n-        c = Cipher.getInstance(\"des\/cbc\/pkcs5padding\", p);\n+        c = Cipher.getInstance(algoLC + \"\/cbc\/pkcs5padding\", p);\n@@ -66,1 +72,1 @@\n-            c = Cipher.getInstance(\"DES\/XYZ\/PKCS5Padding\");\n+            c = Cipher.getInstance(algo + \"\/XYZ\/PKCS5Padding\");\n@@ -72,1 +78,1 @@\n-            c = Cipher.getInstance(\"DES\/XYZ\/PKCS5Padding\",\n+            c = Cipher.getInstance(algo + \"\/XYZ\/PKCS5Padding\",\n@@ -79,1 +85,1 @@\n-            c = Cipher.getInstance(\"DES\/XYZ\/PKCS5Padding\", p);\n+            c = Cipher.getInstance(algo + \"\/XYZ\/PKCS5Padding\", p);\n@@ -86,1 +92,1 @@\n-            c = Cipher.getInstance(\"DES\/CBC\/XYZPadding\");\n+            c = Cipher.getInstance(algo + \"\/CBC\/XYZPadding\");\n@@ -92,1 +98,1 @@\n-            c = Cipher.getInstance(\"DES\/CBC\/XYZPadding\",\n+            c = Cipher.getInstance(algo + \"\/CBC\/XYZPadding\",\n@@ -99,1 +105,1 @@\n-            c = Cipher.getInstance(\"DES\/CBC\/XYZPadding\", p);\n+            c = Cipher.getInstance(algo + \"\/CBC\/XYZPadding\", p);\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/TestGetInstance.java","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ * @run main DirectBBRemaining DES 8\n+ * @run main DirectBBRemaining AES 16\n@@ -56,1 +58,2 @@\n-        byte[] keyBytes = new byte[8];\n+        int keyInt = Integer.parseInt(args[1]);\n+        byte[] keyBytes = new byte[keyInt];\n@@ -58,1 +61,2 @@\n-        SecretKey key = new SecretKeySpec(keyBytes, \"DES\");\n+        String algo = args[0];\n+        SecretKey key = new SecretKeySpec(keyBytes, algo);\n@@ -60,1 +64,1 @@\n-        Cipher cipher = Cipher.getInstance(\"DES\/CBC\/PKCS5Padding\",\n+        Cipher cipher = Cipher.getInstance(algo + \"\/CBC\/PKCS5Padding\",\n","filename":"test\/jdk\/javax\/crypto\/CipherSpi\/DirectBBRemaining.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+ * @run main AllPermCheck DES\n+ * @run main AllPermCheck AES\n@@ -89,1 +91,2 @@\n-        if (Cipher.getMaxAllowedKeyLength(\"DES\") == Integer.MAX_VALUE) {\n+        String transformation = args[0];\n+        if (Cipher.getMaxAllowedKeyLength(transformation) == Integer.MAX_VALUE) {\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermission\/AllPermCheck.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        if (Cipher.getMaxAllowedKeyLength(\"DES\") == Integer.MAX_VALUE) {\n+        if (Cipher.getMaxAllowedKeyLength(\"AES\") == Integer.MAX_VALUE) {\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermission\/LowercasePermCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+ * @run main\/othervm -DcipherAlg=PBEWithMD5AndDES GetKeySpec\n+ * @run main\/othervm -DcipherAlg=PBEWithSHA1AndDESede GetKeySpec\n@@ -40,1 +42,1 @@\n-    private static final String cipherAlg = \"PBEWithMD5AndDES\";\n+    private static String cipherAlg;\n@@ -46,0 +48,1 @@\n+            cipherAlg = System.getProperty(\"cipherAlg\");\n@@ -58,1 +61,2 @@\n-    private static String encryptedPKCS8 = \"AE:20:81:4F:4D:38:73:C0:51:70:42:DA:C2:EF:61:49:07:E9:B5:D5:55:6D:D1:50:54:B2:0B:41:3E:2F:B6:00:BC:30:89:7B:32:A5:5F:B6:86:92:9E:06:6E:E2:40:8E:3E:E8:0B:CA:97:DB:3E:72:3E:03:22:34:35:EA:5F:B0:71:B2:07:BC:0D:97:94:0A:E6:12:9B:60:7A:77:D4:6C:99:60:2E:68:D6:55:BE:83:B8:A9:0F:19:8A:BE:91:30:D0:FE:52:94:5A:4C:D7:24:07:B3:61:EB:B5:4A:C6:6F:96:8A:C0:20:E9:73:40:FA:A2:56:04:F2:43:35:90:EA:35:C9:8C:08:9D:0B:BC:37:F0:01:D5:DF:BE:E4:4A:57:E0:13:0C:D5:F0:E8:5C:3B:B3:CD:7E:B5:E8:A5:84:63:F6:DA:3E:F2:CF:53:1F:A2:86:44:61:DD:AF:C1:78:70:3A:E6:06:41:77:6C:5B:8D:FA:C4:39:D7:4D:2F:87:D8:31:F4:B6:2B:94:D9:87:17:0E:C8:E3:FA:54:C8:B2:44:56:E0:37:5F:4C:5D:B2:21:DD:15:9E:94:63:89:CF:07:8C:79:F8:65:B2:22:45:D5:F0:2A:70:19:61:16:1D:52:5E:0C:35:3B:20:88:17:7E:FD:05:CC:08:09:2F:05:61:F7:A8:F5:EA:DE:77:DE:5D:55:4E:A0:36:A1:13:FF:2D:57:E8:4E:06:CE:C9:C1:B1:AE:C6:52:A6:EB:35:4C:81:91:DE:71:BA:34:DA:8A:99:1A:47:2E:66:52:AF:E3:2A:E4:0A:27:7F:72:C4:90:7E:8D:8F:64:8D:21:7E:00:DC:1C:62:0F:CC:96:80:C7:E5:5B:70:48:A5:E7:34:27:1A:7C:48:A7:9E:8B:2B:A6:E2\";\n+    private static String sha1EncryptedPKCS8 = \"0D:CA:00:8F:64:91:9C:60:36:F5:9B:BD:DD:C5:A9:A2:27:9E:6B:AE:CB:23:0E:2F:DA:76:03:A5:B7:C0:D5:3E:B9:03:60:62:41:2C:D6:51:37:F0:D9:ED:B2:CC:E7:99:28:03:CD:20:5D:EC:56:77:FC:61:57:D7:8C:F3:F6:10:F7:E5:BA:88:04:FE:1A:17:B3:8C:36:BF:70:2D:CD:6F:BF:83:ED:03:41:22:95:68:E3:08:90:76:B5:97:CB:FF:CE:51:27:14:F6:38:00:22:E9:0F:86:9F:64:D2:47:34:F6:50:DA:A9:80:F5:67:BF:C7:51:B3:38:AF:CD:15:96:50:8F:33:F3:8B:43:4C:AF:ED:DD:37:03:EC:B1:CC:57:53:0A:AF:0D:53:CD:D7:2B:A2:20:C5:37:AF:09:78:8E:3F:A0:E4:EC:22:C6:71:EC:D1:42:15:9D:1D:E9:E3:9D:8F:D6:0B:2A:99:C9:C8:90:B1:CD:AB:17:DD:A3:6F:64:43:23:26:25:7B:A5:E0:1F:2E:AF:18:89:C8:D6:97:28:32:A1:01:22:6F:14:B6:6C:4E:8A:83:47:16:99:51:B4:8D:85:9E:AB:00:B5:18:BB:49:97:47:59:F8:A7:A8:64:76:3F:41:5F:71:1A:F3:4A:96:F2:B4:44:38:42:4B:AE:0F:08:83:5C:33:F8:6A:8F:B9:6A:3D:1C:06:02:4E:07:48:46:E0:6D:6D:ED:E8:19:CB:3F:B0:6F:10:68:3A:5E:F5:8F:94:EF:B4:8B:58:5F:50:0A:E5:F2:13:54:59:14:99:C5:74:02:A2:B1:73:16:7F:F2:D4:DE:E0:12:86:55:46:9C:57:D1:7A:5C:8B:46:E1:7E:C3:32:14:31:52:64:07:52:9D:65:04:9D:54:89\";\n+    private static String md5EncryptedPKCS8 = \"AE:20:81:4F:4D:38:73:C0:51:70:42:DA:C2:EF:61:49:07:E9:B5:D5:55:6D:D1:50:54:B2:0B:41:3E:2F:B6:00:BC:30:89:7B:32:A5:5F:B6:86:92:9E:06:6E:E2:40:8E:3E:E8:0B:CA:97:DB:3E:72:3E:03:22:34:35:EA:5F:B0:71:B2:07:BC:0D:97:94:0A:E6:12:9B:60:7A:77:D4:6C:99:60:2E:68:D6:55:BE:83:B8:A9:0F:19:8A:BE:91:30:D0:FE:52:94:5A:4C:D7:24:07:B3:61:EB:B5:4A:C6:6F:96:8A:C0:20:E9:73:40:FA:A2:56:04:F2:43:35:90:EA:35:C9:8C:08:9D:0B:BC:37:F0:01:D5:DF:BE:E4:4A:57:E0:13:0C:D5:F0:E8:5C:3B:B3:CD:7E:B5:E8:A5:84:63:F6:DA:3E:F2:CF:53:1F:A2:86:44:61:DD:AF:C1:78:70:3A:E6:06:41:77:6C:5B:8D:FA:C4:39:D7:4D:2F:87:D8:31:F4:B6:2B:94:D9:87:17:0E:C8:E3:FA:54:C8:B2:44:56:E0:37:5F:4C:5D:B2:21:DD:15:9E:94:63:89:CF:07:8C:79:F8:65:B2:22:45:D5:F0:2A:70:19:61:16:1D:52:5E:0C:35:3B:20:88:17:7E:FD:05:CC:08:09:2F:05:61:F7:A8:F5:EA:DE:77:DE:5D:55:4E:A0:36:A1:13:FF:2D:57:E8:4E:06:CE:C9:C1:B1:AE:C6:52:A6:EB:35:4C:81:91:DE:71:BA:34:DA:8A:99:1A:47:2E:66:52:AF:E3:2A:E4:0A:27:7F:72:C4:90:7E:8D:8F:64:8D:21:7E:00:DC:1C:62:0F:CC:96:80:C7:E5:5B:70:48:A5:E7:34:27:1A:7C:48:A7:9E:8B:2B:A6:E2\";\n@@ -102,1 +106,1 @@\n-        byte[] encryptedData = parse(encryptedPKCS8);\n+        byte[] encryptedData = parse(cipherAlg.contains(\"MD5\") ? md5EncryptedPKCS8 : sha1EncryptedPKCS8);\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKeySpec.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+ * @run main\/othervm -DcipherAlg=PBEWithMD5AndDES GetKeySpecException\n+ * @run main\/othervm -DcipherAlg=PBEWithSHA1AndDESede GetKeySpecException\n@@ -40,1 +42,1 @@\n-    private static final String cipherAlg = \"PBEWithMD5AndDES\";\n+    private static String cipherAlg;\n@@ -53,0 +55,1 @@\n+            cipherAlg = System.getProperty(\"cipherAlg\");\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKeySpecException.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+ * @run main GetKeySpecException2 PBEWithMD5AndDES\n+ * @run main GetKeySpecException2 PBEWithSHA1AndDESede\n@@ -41,1 +43,0 @@\n-    private static final String cipherAlg = \"PBEWithMD5AndDES\";\n@@ -44,2 +45,2 @@\n-    public static void main(String[] argv) throws Exception {\n-\n+    public static void main(String[] args) throws Exception {\n+        String cipherAlg = args[0];\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKeySpecException2.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+ * @run main\/othervm -DcipherAlg=PBEWithMD5AndDES GetKeySpecInvalidEncoding\n+ * @run main\/othervm -DcipherAlg=PBEWithSHA1AndDESede GetKeySpecInvalidEncoding\n@@ -42,1 +44,1 @@\n-    private static final String cipherAlg = \"PBEWithMD5AndDES\";\n+    private static String cipherAlg;\n@@ -48,0 +50,1 @@\n+            cipherAlg = System.getProperty(\"cipherAlg\");\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKeySpecInvalidEncoding.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+ * @run main TestGetInstance des\n+ * @run main TestGetInstance aes\n@@ -50,1 +52,2 @@\n-        kg = KeyGenerator.getInstance(\"des\");\n+        String algo = args[0];\n+        kg = KeyGenerator.getInstance(algo);\n@@ -52,1 +55,1 @@\n-        kg = KeyGenerator.getInstance(\"des\",\n+        kg = KeyGenerator.getInstance(algo,\n@@ -55,1 +58,1 @@\n-        kg = KeyGenerator.getInstance(\"des\", p);\n+        kg = KeyGenerator.getInstance(algo, p);\n","filename":"test\/jdk\/javax\/crypto\/KeyGenerator\/TestGetInstance.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ * @run main ByteBuffers HmacMD5\n+ * @run main ByteBuffers HmacSha256\n@@ -49,0 +51,1 @@\n+        String algo = args[0];\n@@ -51,1 +54,1 @@\n-        SecretKey key = new SecretKeySpec(keyBytes, \"HmacMD5\");\n+        SecretKey key = new SecretKeySpec(keyBytes, algo);\n@@ -53,1 +56,1 @@\n-        Mac mac = Mac.getInstance(\"HmacMD5\");\n+        Mac mac = Mac.getInstance(algo);\n","filename":"test\/jdk\/javax\/crypto\/Mac\/ByteBuffers.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+ * @run main TestGetInstance hmacmd5\n+ * @run main TestGetInstance hmacsha256\n@@ -50,1 +52,2 @@\n-        mac = Mac.getInstance(\"hmacmd5\");\n+        String algo = args[0];\n+        mac = Mac.getInstance(algo);\n@@ -52,1 +55,1 @@\n-        mac = Mac.getInstance(\"hmacmd5\", System.getProperty(\"test.provider.name\", \"SunJCE\"));\n+        mac = Mac.getInstance(algo, System.getProperty(\"test.provider.name\", \"SunJCE\"));\n@@ -54,1 +57,1 @@\n-        mac = Mac.getInstance(\"hmacmd5\", p);\n+        mac = Mac.getInstance(algo, p);\n","filename":"test\/jdk\/javax\/crypto\/Mac\/TestGetInstance.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,2 @@\n- * @run main PKCS10AttrEncoding\n+ * @run main PKCS10AttrEncoding DSA 512\n+ * @run main PKCS10AttrEncoding Sha256withDSA 2048\n@@ -72,0 +73,1 @@\n+        String kpgAlgorithm = \"DSA\";\n@@ -73,2 +75,3 @@\n-        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"DSA\");\n-        String sigAlg = \"DSA\";\n+        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(kpgAlgorithm);\n+        String sigAlg = args[0];\n+        int keySize = Integer.parseInt(args[1]);\n@@ -76,1 +79,1 @@\n-        keyGen.initialize(512);\n+        keyGen.initialize(keySize);\n","filename":"test\/jdk\/sun\/security\/pkcs\/pkcs10\/PKCS10AttrEncoding.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @library \/test\/lib\n@@ -32,1 +31,2 @@\n- * @run main SignerOrder\n+ * @run main SignerOrder default 1024\n+ * @run main SignerOrder Sha256 2048\n@@ -65,2 +65,3 @@\n-    public static void main(String[] argv) throws Exception {\n-\n+    public static void main(String[] args) throws Exception {\n+        String digestAlg = \"default\".equals(args[0]) ? null : args[0];\n+        int keySize = Integer.parseInt(args[1]);\n@@ -68,1 +69,1 @@\n-        SimpleSigner signer1 = new SimpleSigner(null, null, null, null);\n+        SimpleSigner signer1 = new SimpleSigner(digestAlg, null, null, null, keySize);\n@@ -73,1 +74,1 @@\n-        SimpleSigner signer2 = new SimpleSigner(null, null, null, null);\n+        SimpleSigner signer2 = new SimpleSigner(digestAlg, null, null, null, keySize);\n@@ -78,1 +79,1 @@\n-        SimpleSigner signer3 = new SimpleSigner(null, null, null, null);\n+        SimpleSigner signer3 = new SimpleSigner(digestAlg, null, null, null, keySize);\n@@ -159,1 +160,2 @@\n-            X500Name agent) throws Exception {\n+            X500Name agent,\n+            int keySize) throws Exception {\n@@ -161,0 +163,1 @@\n+        String signAlgoDigest;\n@@ -164,3 +167,0 @@\n-        if (digestAlg == null) {\n-            digestAlg = \"SHA\";\n-        }\n@@ -170,0 +170,6 @@\n+        if (digestAlg == null) {\n+            digestAlg = \"SHA\";\n+            signAlgoDigest = encryptionAlg;\n+        } else {\n+            signAlgoDigest = digestAlg + \"with\" + encryptionAlg;\n+        }\n@@ -173,1 +179,1 @@\n-            keyGen.initialize(1024);\n+            keyGen.initialize(keySize);\n@@ -180,1 +186,1 @@\n-            this.sig = Signature.getInstance(encryptionAlg);\n+            this.sig = Signature.getInstance(signAlgoDigest);\n","filename":"test\/jdk\/sun\/security\/pkcs\/pkcs7\/SignerOrder.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -89,1 +89,2 @@\n-    private static void testInvalidSignature(KeyPair kp1, KeyPair kp2) throws Exception {\n+    private static void testInvalidSignature(KeyPair kp1, KeyPair kp2, String signAlgo)\n+            throws Exception {\n@@ -91,1 +92,1 @@\n-        Signature sig = Signature.getInstance(\"MD5withRSA\", provider);\n+        Signature sig = Signature.getInstance(signAlgo, provider);\n@@ -156,3 +157,8 @@\n-        testInvalidSignature(keyPairs[0], keyPairs[1]);\n-        testInvalidSignature(keyPairs[0], keyPairs[2]);\n-        testInvalidSignature(keyPairs[2], keyPairs[0]);\n+        String md5Algo = \"MD5withRSA\";\n+        String sha256Algo = \"Sha256withRSA\";\n+        testInvalidSignature(keyPairs[0], keyPairs[1], md5Algo);\n+        testInvalidSignature(keyPairs[0], keyPairs[2], md5Algo);\n+        testInvalidSignature(keyPairs[2], keyPairs[0], md5Algo);\n+        testInvalidSignature(keyPairs[0], keyPairs[1], sha256Algo);\n+        testInvalidSignature(keyPairs[0], keyPairs[2], sha256Algo);\n+        testInvalidSignature(keyPairs[2], keyPairs[0], sha256Algo);\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGenerator.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+ * @run main InitAgain default\n+ * @run main InitAgain SHA-256\n@@ -36,0 +38,3 @@\n+        String mdName = args[0];\n+        PSSParameterSpec pssParamSpec = \"default\".equals(mdName) ? PSSParameterSpec.DEFAULT :\n+                new PSSParameterSpec(mdName, \"MGF1\", new MGF1ParameterSpec(mdName), 20, 1);\n@@ -42,2 +47,2 @@\n-        s1.setParameter(PSSParameterSpec.DEFAULT);\n-        s2.setParameter(PSSParameterSpec.DEFAULT);\n+        s1.setParameter(pssParamSpec);\n+        s2.setParameter(pssParamSpec);\n","filename":"test\/jdk\/sun\/security\/rsa\/pss\/InitAgain.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+import jdk.test.lib.security.SecurityUtils;\n@@ -106,0 +107,2 @@\n+    private static final int KEY_LENGTH_DSA = SecurityUtils.getTestKeySize(\"DSA\");\n+    private static final int KEY_LENGTH_RSA = SecurityUtils.getTestKeySize(\"RSA\");\n@@ -195,1 +198,1 @@\n-                cmd += \" -sigalg SHA1withDSA -keysize 1024\";\n+                cmd += \" -sigalg SHA256withDSA -keysize \" + KEY_LENGTH_DSA;\n@@ -958,0 +961,3 @@\n+        \/\/ sig not compatible\n+        testFail(\"\", \"-keystore x.jks -storetype JKS -storepass changeit \" +\n+                \"-keypass changeit -selfcert -sigalg SHA256withRSA\");\n@@ -1065,1 +1071,1 @@\n-                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 512 \" +\n+                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 2048 \" +\n@@ -1068,1 +1074,1 @@\n-                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 1024 \" +\n+                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 3072 \" +\n@@ -1079,0 +1085,3 @@\n+        testOK(\"\", \"-keystore x.jks -storetype JKS -storepass changeit \" +\n+                \"-keypass changeit -genkeypair -dname CN=olala -keyalg RSA \" +\n+                \"-sigalg SHA256withRSA -alias n10-1\");\n@@ -1155,1 +1164,2 @@\n-                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize 1024\");\n+                \"-keypass changeit -genkeypair -keyalg DSA -dname CN=olala -keysize \" +\n+                KEY_LENGTH_DSA);\n@@ -1161,2 +1171,2 @@\n-                \"-certreq -file csr1 -sigalg SHA1withDSA\");\n-        \/\/ unmatched sigalg\n+                \"-certreq -file csr1 -sigalg SHA256withDSA\");\n+        \/\/ unmatched md5\n@@ -1165,0 +1175,3 @@\n+        \/\/ unmatched sha\n+        testFail(\"\", \"-keystore x.jks -storetype JKS -storepass changeit \" +\n+                \"-certreq -file csr1 -sigalg SHA256withRSA\");\n@@ -1195,1 +1208,1 @@\n-                \"-certreq -file csr1 -sigalg SHA1withDSA\");\n+                \"-certreq -file csr1 -sigalg SHA256withDSA\");\n@@ -1197,1 +1210,1 @@\n-                \"-certreq -file csr1 -sigalg MD5withRSA\");\n+                \"-certreq -file csr1 -sigalg SHA256withRSA\");\n@@ -1225,0 +1238,3 @@\n+        testOK(\"\", \"-keystore x.jks -storetype JKS -storepass changeit \" +\n+                \"-keypass changeit -genkeypair -dname CN=weak -keyalg rsa -keysize \" +\n+                KEY_LENGTH_RSA + \" -sigalg SHA256withRSA -alias myweakkey-sha\");\n@@ -1676,1 +1692,1 @@\n-        \/\/   2. keytool -genkey -keyalg DSA -v -keysize 512 Enter \"a\" for the keystore\n+        \/\/   2. keytool -genkey -keyalg DSA -v -keysize <strongKeySize> Enter \"a\" for the keystore\n@@ -1683,1 +1699,2 @@\n-                \"-genkey -keyalg DSA -v -keysize 512 -keystore x.jks -storetype JKS\");\n+                \"-genkey -keyalg DSA -v -keysize \" + KEY_LENGTH_DSA + \" -keystore x.jks \" +\n+                        \"-storetype JKS\");\n@@ -1690,1 +1707,1 @@\n-        \/\/   5. keytool - -keyalg DSA -v -keysize 512 Enter \"password\" as the password.\n+        \/\/   5. keytool - -keyalg DSA -v -keysize <strongKeySize> Enter \"password\" as the password.\n@@ -1692,1 +1709,1 @@\n-        testFail(\"password\\n\", \"-genkey -keyalg DSA -v -keysize 512\" +\n+        testFail(\"password\\n\", \"-genkey -keyalg DSA -v -keysize \" + KEY_LENGTH_DSA +\n@@ -1695,1 +1712,1 @@\n-        \/\/   6. keytool -genkey -keyalg DSA -v -keysize 512 -alias mykey2 -storepass password\n+        \/\/   6. keytool -genkey -keyalg DSA -v -keysize <strongKeySize> -alias mykey2 -storepass password\n@@ -1699,2 +1716,2 @@\n-        testOK(\"\\n\\n\\n\\n\\n\\nyes\\n\\n\", \"-genkey -keyalg DSA -v -keysize 512 -alias mykey2\" +\n-                \" -storepass password -keystore x.jks -storetype JKS\");\n+        testOK(\"\\n\\n\\n\\n\\n\\nyes\\n\\n\", \"-genkey -keyalg DSA -v -keysize \" + KEY_LENGTH_DSA +\n+                \" -alias mykey2 -storepass password -keystore x.jks -storetype JKS\");\n@@ -1780,1 +1797,1 @@\n-                \" -dname cn=genkey -keysize 512 -keyalg rsa\"));\n+                \" -dname cn=genkey -keysize \" + KEY_LENGTH_RSA  + \" -keyalg rsa\"));\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/KeyToolTest.java","additions":33,"deletions":16,"binary":false,"changes":49,"status":"modified"}]}