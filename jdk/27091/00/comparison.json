{"files":[{"patch":"@@ -340,1 +340,1 @@\n-  PSParallelCompact::invoke(clear_all_soft_refs);\n+  PSParallelCompact::invoke(clear_all_soft_refs, false \/* should_do_max_compaction *\/);\n@@ -400,5 +400,1 @@\n-  \/\/ If we reach this point, we're really out of memory. Try every trick\n-  \/\/ we can to reclaim memory. Force collection of soft references. Force\n-  \/\/ a complete compaction of the heap. Any additional methods for finding\n-  \/\/ free memory should be here, especially if they are expensive. If this\n-  \/\/ attempt fails, an OOM exception will be thrown.\n+  \/\/ Last resort GC; try everything possible before throwing OOM.\n@@ -406,4 +402,0 @@\n-    \/\/ Make sure the heap is fully compacted\n-    uintx old_interval = HeapMaximumCompactionInterval;\n-    HeapMaximumCompactionInterval = 0;\n-\n@@ -411,4 +403,2 @@\n-    PSParallelCompact::invoke(clear_all_soft_refs);\n-\n-    \/\/ Restore\n-    HeapMaximumCompactionInterval = old_interval;\n+    const bool should_do_max_compaction = true;\n+    PSParallelCompact::invoke(clear_all_soft_refs, should_do_max_compaction);\n@@ -501,1 +491,2 @@\n-  PSParallelCompact::invoke(clear_soft_refs);\n+  const bool should_do_max_compaction = false;\n+  PSParallelCompact::invoke(clear_soft_refs, should_do_max_compaction);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -34,5 +34,0 @@\n-  product(uintx, HeapMaximumCompactionInterval, 20,                         \\\n-          \"How often should we maximally compact the heap (not allowing \"   \\\n-          \"any dead space)\")                                                \\\n-          range(0, max_uintx)                                               \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallel_globals.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -829,1 +829,2 @@\n-bool PSParallelCompact::check_maximum_compaction(size_t total_live_words,\n+bool PSParallelCompact::check_maximum_compaction(bool should_do_max_compaction,\n+                                                 size_t total_live_words,\n@@ -842,6 +843,0 @@\n-  \/\/ JVM flags\n-  const uint total_invocations = heap->total_full_collections();\n-  assert(total_invocations >= _maximum_compaction_gc_num, \"sanity\");\n-  const size_t gcs_since_max = total_invocations - _maximum_compaction_gc_num;\n-  const bool is_interval_ended = gcs_since_max > HeapMaximumCompactionInterval;\n-\n@@ -852,6 +847,4 @@\n-  if (is_max_on_system_gc || is_old_gen_too_full || is_interval_ended || is_region_full) {\n-    _maximum_compaction_gc_num = total_invocations;\n-    return true;\n-  }\n-\n-  return false;\n+  return should_do_max_compaction\n+      || is_max_on_system_gc\n+      || is_old_gen_too_full\n+      || is_region_full;\n@@ -860,1 +853,1 @@\n-void PSParallelCompact::summary_phase()\n+void PSParallelCompact::summary_phase(bool should_do_max_compaction)\n@@ -883,3 +876,4 @@\n-    bool maximum_compaction = check_maximum_compaction(total_live_words,\n-                                                       old_space,\n-                                                       full_region_prefix_end);\n+    should_do_max_compaction = check_maximum_compaction(should_do_max_compaction,\n+                                                        total_live_words,\n+                                                        old_space,\n+                                                        full_region_prefix_end);\n@@ -894,1 +888,1 @@\n-    HeapWord* dense_prefix_end = maximum_compaction\n+    HeapWord* dense_prefix_end = should_do_max_compaction\n@@ -964,5 +958,1 @@\n-\/\/ This method invokes a full collection. The argument controls whether\n-\/\/ soft-refs should be cleared or not.\n-\/\/ Note that this method should only be called from the vm_thread while at a\n-\/\/ safepoint.\n-bool PSParallelCompact::invoke(bool clear_all_soft_refs) {\n+bool PSParallelCompact::invoke(bool clear_all_soft_refs, bool should_do_max_compaction) {\n@@ -1023,1 +1013,1 @@\n-    summary_phase();\n+    summary_phase(should_do_max_compaction);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":14,"deletions":24,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -730,1 +730,2 @@\n-  static bool check_maximum_compaction(size_t total_live_words,\n+  static bool check_maximum_compaction(bool should_do_max_compaction,\n+                                       size_t total_live_words,\n@@ -745,1 +746,1 @@\n-  static void summary_phase();\n+  static void summary_phase(bool should_do_max_compaction);\n@@ -764,1 +765,4 @@\n-  static bool invoke(bool clear_all_soft_refs);\n+  \/\/ This method invokes a full collection.\n+  \/\/ clear_all_soft_refs controls whether soft-refs should be cleared or not.\n+  \/\/ should_do_max_compaction controls whether all spaces for dead objs should be reclaimed.\n+  static bool invoke(bool clear_all_soft_refs, bool should_do_max_compaction);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -571,0 +571,1 @@\n+  { \"HeapMaximumCompactionInterval\",JDK_Version::undefined(), JDK_Version::jdk(26), JDK_Version::jdk(27) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}