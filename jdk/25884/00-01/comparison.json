{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,18 @@\n- * <p>{@linkplain ProcessBuilder#start() Starting a process} uses resources in both the invoking process and the invoked\n+ * <p>There is no requirement that the process represented by a {@code\n+ * Process} object execute asynchronously or concurrently with respect\n+ * to the Java process that owns the {@code Process} object.\n+ *\n+ * <p>As of 1.5, {@link ProcessBuilder#start()} is the preferred way\n+ * to create a {@code Process}.\n+ *\n+ * <p>Subclasses of Process should override the {@link #onExit()} and\n+ * {@link #toHandle()} methods to provide a fully functional Process including the\n+ * {@linkplain #pid() process id},\n+ * {@linkplain #info() information about the process},\n+ * {@linkplain #children() direct children}, and\n+ * {@linkplain #descendants() direct children plus descendants of those children} of the process.\n+ * Delegating to the underlying Process or ProcessHandle is typically\n+ * easiest and most efficient.\n+ *\n+ * <h2>Resource Usage<\/h2>\n+ * {@linkplain ProcessBuilder#start() Starting a process} uses resources in both the invoking process and the invoked\n@@ -99,1 +116,1 @@\n- *     ProcessBuilder pb = new ProcessBuilder().command(args);\n+ *     ProcessBuilder pb = new ProcessBuilder(args);\n@@ -102,1 +119,1 @@\n- *         List<String> captured = in.lines().toList();\n+ *         List<String> captured = in.readAllLines();\n@@ -112,1 +129,1 @@\n- * <p>Stream resources (file descriptor or handle) are always paired; one in the invoking process\n+ * <p>Stream resources (file descriptord or handled) are always paired; one in the invoking process\n@@ -115,2 +132,1 @@\n- * on the other Process. Typically, the other process responds to the closing of the stream\n- * by exiting.\n+ * on the other Process. The closing of the stream typically results in the other process exiting.\n@@ -118,15 +134,5 @@\n- * <p>There is no requirement that the process represented by a {@code\n- * Process} object execute asynchronously or concurrently with respect\n- * to the Java process that owns the {@code Process} object.\n- *\n- * <p>As of 1.5, {@link ProcessBuilder#start()} is the preferred way\n- * to create a {@code Process}.\n- *\n- * <p>Subclasses of Process should override the {@link #onExit()} and\n- * {@link #toHandle()} methods to provide a fully functional Process including the\n- * {@linkplain #pid() process id},\n- * {@linkplain #info() information about the process},\n- * {@linkplain #children() direct children}, and\n- * {@linkplain #descendants() direct children plus descendants of those children} of the process.\n- * Delegating to the underlying Process or ProcessHandle is typically\n- * easiest and most efficient.\n+ * <p> {@linkplain #destroy Destroying a process} signals the operating system to terminate the process.\n+ * It is up to the operating system to cleanup and release the resources of that process.\n+ * Typically, file descriptors and handles are closed. When they are closed, any connections to\n+ * other processes are terminated and file descriptors and handles in the invoking process signal\n+ * end-of-file or closed. Usually, that is seen as an end-of-file or an exception.\n@@ -202,1 +208,2 @@\n-     * Avoid using both {@link #getInputStream} and {@link #inputReader(Charset)}.\n+     * Use either this method or an {@linkplain #inputReader(Charset) input reader}\n+     * but not both on the same {@code Process}.\n@@ -233,1 +240,2 @@\n-     * Avoid using both {@link #getErrorStream} and {@link #inputReader(Charset)}.\n+     * Use either this method or an {@linkplain #errorReader(Charset) error reader}\n+     * but not both on the same {@code Process}.\n@@ -260,0 +268,7 @@\n+     * @apiNote\n+     * Use either this method or the {@linkplain #getInputStream input stream}\n+     * but not both on the same {@code Process}.\n+     * The input reader consumes and buffers bytes from the input stream.\n+     * Bytes read from the input stream would not be seen by the reader and the\n+     * buffer contents are unpredictable.\n+     *\n@@ -300,1 +315,2 @@\n-     * Avoid using both {@link #getInputStream} and {@link #inputReader(Charset)}.\n+     * Use either this method or the {@linkplain #getInputStream input stream}\n+     * but not both on the same {@code Process}.\n@@ -342,0 +358,7 @@\n+     * @apiNote\n+     * Use either this method or the {@linkplain #getErrorStream error stream}\n+     * but not both on the same {@code Process}.\n+     * The error reader consumes and buffers bytes from the error stream.\n+     * Bytes read from the error stream would not be seen by the reader and the\n+     * buffer contents are unpredictable.\n+     *\n@@ -377,1 +400,2 @@\n-     * Avoid using both {@link #getErrorStream} and {@link #errorReader(Charset)}.\n+     * Use either this method or the {@linkplain #getErrorStream error stream}\n+     * but not both on the same {@code Process}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":50,"deletions":26,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -544,2 +544,2 @@\n-         *     Redirect.DISCARD.file() \/\/ is the filename appropriate for the operating system\n-         *     Redirect.DISCARD.type() == Redirect.Type.WRITE\n+         *     Redirect.DISCARD.file(); \/\/ is the filename appropriate for the operating system\n+         *     Redirect.DISCARD.type() == Redirect.Type.WRITE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}