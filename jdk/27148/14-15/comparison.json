{"files":[{"patch":"@@ -2351,7 +2351,1 @@\n-\n-            BigDecimal ulp = result.ulp();\n-            \/\/ if unscaled value is a power of 10, result must maintain the same precision\n-            if (result.stripTrailingZeros().unscaledValue().equals(BigInteger.ONE))\n-                ulp = ulp.scaleByPowerOfTen(-1);\n-\n-            BigDecimal inverse = ONE.divide(x, checkScaleNonZero((long) ulp.scale * nAbs), RoundingMode.DOWN);\n+            BigDecimal inverse = ONE.divide(x, checkScaleNonZero((long) result.scale * nAbs), RoundingMode.DOWN);\n@@ -2362,1 +2356,7 @@\n-            while ((cmp = result.pow(nAbs).compareMagnitude(inverse)) > 0)\n+            BigDecimal ulp = result.ulp();\n+            while ((cmp = result.pow(nAbs).compareMagnitude(inverse)) > 0) {\n+                \/\/ if result's scale will increase, increase also inverse's scale\n+                if (result.isPowerOfTen()) {\n+                    ulp = ulp.scaleByPowerOfTen(-1);\n+                    inverse = ONE.divide(x, checkScaleNonZero((long) ulp.scale * nAbs), RoundingMode.DOWN);\n+                }\n@@ -2364,0 +2364,1 @@\n+            }\n@@ -2434,0 +2435,4 @@\n+    private boolean isPowerOfTen() {\n+        return this.stripTrailingZeros().unscaledValue().equals(BigInteger.ONE);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"}]}