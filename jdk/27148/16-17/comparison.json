{"files":[{"patch":"@@ -2297,0 +2297,1 @@\n+        long resultScale = normScale \/ nAbs;\n@@ -2298,1 +2299,0 @@\n-            long resultScale = normScale \/ nAbs;\n@@ -2340,5 +2340,0 @@\n-            final long resPrecL = mc.precision + (halfWay ? 1L : 0L);\n-            final int resPrec = (int) resPrecL;\n-            if (resPrec != resPrecL)\n-                throw new ArithmeticException(\"Overflow\");\n-\n@@ -2346,7 +2341,5 @@\n-            result = ONE.divide(new BigDecimal(root, checkScaleNonZero(normScale \/ nAbs)),\n-                    new MathContext(resPrec, RoundingMode.DOWN));\n-\n-            \/\/ Ensure result's precision is exactly resPrec\n-            final int precDiff = resPrec - result.precision();\n-            if (precDiff != 0)\n-                result = result.setScale(checkScaleNonZero((long) result.scale + precDiff));\n+            final long resPrec = mc.precision + (halfWay ? 1L : 0L);\n+            final int rootPrec1 = (int) rootDigits - 1;\n+            final int fracZeros = rootPrec1 - (root.equals(bigTenToThe(rootPrec1)) ? 1 : 0);\n+            result = ONE.divide(new BigDecimal(root, checkScaleNonZero(resultScale)),\n+                    checkScaleNonZero(fracZeros - resultScale + resPrec), RoundingMode.DOWN);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"}]}