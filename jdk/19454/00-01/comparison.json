{"files":[{"patch":"@@ -236,2 +236,2 @@\n-  ld(disp_hdr, Address(tmp, ObjectMonitor::cxq_offset()));\n-  orr(t0, t0, disp_hdr);\n+  ld(tmp1Reg, Address(tmp, ObjectMonitor::cxq_offset()));\n+  orr(t0, t0, tmp1Reg);\n@@ -553,1 +553,0 @@\n-    Label release;\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -478,6 +478,0 @@\n-  \/\/ Memory barrier\/fence\n-  \/\/ Instead of MFENCE we use a dummy locked add of 0 to the top-of-stack.\n-  \/\/ This is faster on Nehalem and AMD Shanghai\/Barcelona.\n-  \/\/ See https:\/\/blogs.oracle.com\/dave\/entry\/instruction_selection_for_volatile_fences\n-  lock(); addl(Address(rsp, 0), 0);\n-\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -620,1 +620,1 @@\n-  ObjectMonitor* unlocked_inflated_monitor() { return _unlocked_inflated_monitor; }\n+  ObjectMonitor* unlocked_inflated_monitor() const { return _unlocked_inflated_monitor; }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -309,2 +309,1 @@\n-bool ObjectMonitor::enterI_with_contention_mark(JavaThread* locking_thread, ObjectMonitorContentionMark& contention_mark) {\n-  \/\/ Used by ObjectSynchronizer::enter_for() to enter for another thread.\n+bool ObjectMonitor::TryLock_with_contention_mark(JavaThread* locking_thread, ObjectMonitorContentionMark& contention_mark) {\n@@ -330,2 +329,7 @@\n-      \/\/ Cancelled deflation. Increment contentions as part of the deflation protocol.\n-      add_to_contentions(1);\n+      \/\/ We successfully cancelled the in-progress async deflation.\n+      \/\/ By extending the lifetime of the contention_mark, we\n+      \/\/ prevent the destructor from decrementing the contentions\n+      \/\/ counter when the contention_mark goes out of scope. Instead\n+      \/\/ ObjectMonitor::deflate_monitor() will decrement contentions\n+      \/\/ after it recognizes that the async deflation was cancelled.\n+      contention_mark.extend();\n@@ -353,1 +357,2 @@\n-  DEBUG_ONLY(bool success = ) ObjectMonitor::enterI_with_contention_mark(locking_thread, contention_mark);\n+  \/\/ Used by LightweightSynchronizer::inflate_and_enter in deoptimization path to enter for another thread.\n+  bool success = ObjectMonitor::TryLock_with_contention_mark(locking_thread, contention_mark);\n@@ -371,1 +376,5 @@\n-  enter_for_with_contention_mark(locking_thread, contention_mark);\n+  bool success = ObjectMonitor::TryLock_with_contention_mark(locking_thread, contention_mark);\n+\n+  assert(success, \"Failed to enter_for: locking_thread=\" INTPTR_FORMAT\n+         \", this=\" INTPTR_FORMAT \"{owner=\" INTPTR_FORMAT \"}\",\n+         p2i(locking_thread), p2i(this), p2i(owner_raw()));\n@@ -376,13 +385,0 @@\n-bool ObjectMonitor::TryLockI(JavaThread* current) {\n-  assert(current == JavaThread::current(), \"must be\");\n-\n-  \/\/ Block out deflation as soon as possible.\n-  ObjectMonitorContentionMark contention_mark(this);\n-\n-  \/\/ Check for deflation.\n-  if (enter_is_async_deflating()) {\n-    return false;\n-  }\n-  return enterI_with_contention_mark(current, contention_mark);\n-}\n-\n@@ -574,1 +570,9 @@\n-      if (TryLockI(current)) {\n+      \/\/ Block out deflation as soon as possible.\n+      ObjectMonitorContentionMark contention_mark(this);\n+\n+      \/\/ Check for deflation.\n+      if (enter_is_async_deflating()) {\n+        \/\/ Treat deflation as interference.\n+        return TryLockResult::Interference;\n+      }\n+      if (TryLock_with_contention_mark(current, contention_mark)) {\n@@ -904,2 +908,0 @@\n-  assert(_succ != current, \"invariant\");\n-\n@@ -1243,2 +1245,2 @@\n-      if (contentions() < 0) {\n-        assert((intptr_t(_EntryList)|intptr_t(_cxq)) == 0 || _succ != nullptr, \"\");\n+      if (is_being_async_deflated()) {\n+        assert((intptr_t(_EntryList) | intptr_t(_cxq)) == 0 || _succ != nullptr, \"\");\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -376,2 +376,1 @@\n-  bool      enterI_with_contention_mark(JavaThread* locking_thread, ObjectMonitorContentionMark& contention_mark);\n-  bool      TryLockI(JavaThread* current);\n+  bool      TryLock_with_contention_mark(JavaThread* locking_thread, ObjectMonitorContentionMark& contention_mark);\n@@ -381,1 +380,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}