{"files":[{"patch":"@@ -54,1 +54,1 @@\n-        if (Util.isAttributeAllowed(a, context.attributesProcessingOption())) {\n+        if (Util.isAttributeAllowed(a, context)) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.lang.classfile.ClassFile.*;\n@@ -44,10 +43,34 @@\n-public record ClassFileImpl(StackMapsOption stackMapsOption,\n-                            DebugElementsOption debugElementsOption,\n-                            LineNumbersOption lineNumbersOption,\n-                            AttributesProcessingOption attributesProcessingOption,\n-                            ConstantPoolSharingOption constantPoolSharingOption,\n-                            ShortJumpsOption shortJumpsOption,\n-                            DeadCodeOption deadCodeOption,\n-                            DeadLabelsOption deadLabelsOption,\n-                            ClassHierarchyResolverOption classHierarchyResolverOption,\n-                            AttributeMapperOption attributeMapperOption) implements ClassFile {\n+public final class ClassFileImpl implements ClassFile {\n+\n+    private Option stackMapsOption;\n+    private Option debugElementsOption;\n+    private Option lineNumbersOption;\n+    private Option attributesProcessingOption;\n+    private Option constantPoolSharingOption;\n+    private Option shortJumpsOption;\n+    private Option deadCodeOption;\n+    private Option deadLabelsOption;\n+    private Option classHierarchyResolverOption;\n+    private Option attributeMapperOption;\n+\n+    private ClassFileImpl(Option stackMapsOption,\n+                          Option debugElementsOption,\n+                          Option lineNumbersOption,\n+                          Option attributesProcessingOption,\n+                          Option constantPoolSharingOption,\n+                          Option shortJumpsOption,\n+                          Option deadCodeOption,\n+                          Option deadLabelsOption,\n+                          Option classHierarchyResolverOption,\n+                          Option attributeMapperOption) {\n+        this.stackMapsOption              = stackMapsOption;\n+        this.debugElementsOption          = debugElementsOption;\n+        this.lineNumbersOption            = lineNumbersOption;\n+        this.attributesProcessingOption   = attributesProcessingOption;\n+        this.constantPoolSharingOption    = constantPoolSharingOption;\n+        this.shortJumpsOption             = shortJumpsOption;\n+        this.deadCodeOption               = deadCodeOption;\n+        this.deadLabelsOption             = deadLabelsOption;\n+        this.classHierarchyResolverOption = classHierarchyResolverOption;\n+        this.attributeMapperOption        = attributeMapperOption;\n+    }\n@@ -56,15 +79,11 @@\n-            StackMapsOption.STACK_MAPS_WHEN_REQUIRED,\n-            DebugElementsOption.PASS_DEBUG,\n-            LineNumbersOption.PASS_LINE_NUMBERS,\n-            AttributesProcessingOption.PASS_ALL_ATTRIBUTES,\n-            ConstantPoolSharingOption.SHARED_POOL,\n-            ShortJumpsOption.FIX_SHORT_JUMPS,\n-            DeadCodeOption.PATCH_DEAD_CODE,\n-            DeadLabelsOption.FAIL_ON_DEAD_LABELS,\n-            new ClassHierarchyResolverOptionImpl(ClassHierarchyResolver.defaultResolver()),\n-            new AttributeMapperOptionImpl(new Function<>() {\n-                @Override\n-                public AttributeMapper<?> apply(Utf8Entry k) {\n-                    return null;\n-                }\n-            }));\n+            null, \/\/ StackMapsOption.STACK_MAPS_WHEN_REQUIRED\n+            null, \/\/ DebugElementsOption.PASS_DEBUG,\n+            null, \/\/ LineNumbersOption.PASS_LINE_NUMBERS,\n+            null, \/\/ AttributesProcessingOption.PASS_ALL_ATTRIBUTES,\n+            null, \/\/ ConstantPoolSharingOption.SHARED_POOL,\n+            null, \/\/ ShortJumpsOption.FIX_SHORT_JUMPS,\n+            null, \/\/ DeadCodeOption.PATCH_DEAD_CODE,\n+            null, \/\/ DeadLabelsOption.FAIL_ON_DEAD_LABELS,\n+            null, \/\/ new ClassHierarchyResolverOptionImpl(ClassHierarchyResolver.defaultResolver()),\n+            null  \/\/ _ -> null\n+        );\n@@ -88,0 +107,2 @@\n+            } else if (o instanceof ClassHierarchyResolverOption oo) {\n+                chro = oo;\n@@ -102,2 +123,0 @@\n-            } else if (o instanceof ClassHierarchyResolverOption oo) {\n-                chro = oo;\n@@ -130,3 +149,2 @@\n-        ConstantPoolBuilder constantPool = constantPoolSharingOption() == ConstantPoolSharingOption.SHARED_POOL\n-                                                                     ? ConstantPoolBuilder.of(model)\n-                                                                     : ConstantPoolBuilder.of();\n+        ConstantPoolBuilder constantPool = sharedConstantPool() ? ConstantPoolBuilder.of(model)\n+                                                                : ConstantPoolBuilder.of();\n@@ -144,0 +162,4 @@\n+    public boolean sharedConstantPool() {\n+        return constantPoolSharingOption == null || constantPoolSharingOption == ConstantPoolSharingOption.SHARED_POOL;\n+    }\n+\n@@ -147,1 +169,1 @@\n-            return VerifierImpl.verify(model, classHierarchyResolverOption().classHierarchyResolver(), null);\n+            return VerifierImpl.verify(model, classHierarchyResolver(), null);\n@@ -162,0 +184,52 @@\n+    public Function<Utf8Entry, AttributeMapper<?>> attributeMapper() {\n+        if (attributeMapperOption == null) {\n+            return _ -> null;\n+        } else {\n+            return ((AttributeMapperOption)attributeMapperOption).attributeMapper();\n+        }\n+    }\n+\n+    public ClassHierarchyResolver classHierarchyResolver() {\n+        if (classHierarchyResolverOption == null) {\n+            return ClassHierarchyImpl.DEFAULT_RESOLVER;\n+        } else {\n+            return ((ClassHierarchyResolverOption)classHierarchyResolverOption).classHierarchyResolver();\n+        }\n+    }\n+\n+    public boolean dropDeadLabels() {\n+        return (deadLabelsOption != null && deadLabelsOption == DeadLabelsOption.DROP_DEAD_LABELS);\n+    }\n+\n+    public boolean passDebugElements() {\n+        return (debugElementsOption == null || debugElementsOption == DebugElementsOption.PASS_DEBUG);\n+    }\n+\n+    public boolean passLineNumbers() {\n+        return (lineNumbersOption == null || lineNumbersOption == LineNumbersOption.PASS_LINE_NUMBERS);\n+    }\n+\n+    public AttributesProcessingOption attributesProcessingOption() {\n+        return (attributesProcessingOption == null) ? AttributesProcessingOption.PASS_ALL_ATTRIBUTES : (AttributesProcessingOption)attributesProcessingOption;\n+    }\n+\n+    public boolean fixShortJumps() {\n+        return (shortJumpsOption == null || shortJumpsOption == ShortJumpsOption.FIX_SHORT_JUMPS);\n+    }\n+\n+    public boolean stackMapsWhenRequired() {\n+        return (stackMapsOption == null || stackMapsOption == StackMapsOption.STACK_MAPS_WHEN_REQUIRED);\n+    }\n+\n+    public boolean generateStackMaps() {\n+        return (stackMapsOption == StackMapsOption.GENERATE_STACK_MAPS);\n+    }\n+\n+    public boolean dropStackMaps() {\n+        return (stackMapsOption == StackMapsOption.DROP_STACK_MAPS);\n+    }\n+\n+    public boolean patchDeadCode() {\n+        return (deadCodeOption == null || deadCodeOption == DeadCodeOption.PATCH_DEAD_CODE);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassFileImpl.java","additions":106,"deletions":32,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-        this.attributeMapper = this.context.attributeMapperOption().attributeMapper();\n+        this.attributeMapper = this.context.attributeMapper();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-            if (classReader.context().lineNumbersOption() == ClassFile.LineNumbersOption.PASS_LINE_NUMBERS)\n+            if (classReader.context().passLineNumbers())\n@@ -170,1 +170,1 @@\n-        if (classReader.context().debugElementsOption() == ClassFile.DebugElementsOption.PASS_DEBUG)\n+        if (classReader.context().passDebugElements())\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-            if (context.shortJumpsOption() == ClassFile.ShortJumpsOption.FIX_SHORT_JUMPS) {\n+            if (context.fixShortJumps()) {\n@@ -125,1 +125,1 @@\n-        this.transformBackJumps = context.shortJumpsOption() == ClassFile.ShortJumpsOption.FIX_SHORT_JUMPS;\n+        this.transformBackJumps = context.fixShortJumps();\n@@ -198,1 +198,1 @@\n-                if (context.deadLabelsOption() == ClassFile.DeadLabelsOption.DROP_DEAD_LABELS) {\n+                if (context.dropDeadLabels()) {\n@@ -222,1 +222,1 @@\n-        if (context.debugElementsOption() == ClassFile.DebugElementsOption.PASS_DEBUG) {\n+        if (context.passDebugElements()) {\n@@ -235,1 +235,1 @@\n-                                if (context.deadLabelsOption() == ClassFile.DeadLabelsOption.DROP_DEAD_LABELS) {\n+                                if (context.dropDeadLabels()) {\n@@ -264,1 +264,1 @@\n-                                if (context.deadLabelsOption() == ClassFile.DeadLabelsOption.DROP_DEAD_LABELS) {\n+                                if (context.dropDeadLabels()) {\n@@ -287,1 +287,1 @@\n-                                if (context.deadLabelsOption() == ClassFile.DeadLabelsOption.DROP_DEAD_LABELS) {\n+                                if (context.dropDeadLabels()) {\n@@ -360,9 +360,7 @@\n-                    switch (context.stackMapsOption()) {\n-                        case STACK_MAPS_WHEN_REQUIRED -> {\n-                            attributes.withAttribute(original.findAttribute(Attributes.stackMapTable()).orElse(null));\n-                            writeCounters(true, buf);\n-                        }\n-                        case GENERATE_STACK_MAPS ->\n-                            generateStackMaps(buf);\n-                        case DROP_STACK_MAPS ->\n-                            writeCounters(true, buf);\n+                    if (context.stackMapsWhenRequired()) {\n+                        attributes.withAttribute(original.findAttribute(Attributes.stackMapTable()).orElse(null));\n+                        writeCounters(true, buf);\n+                    } else if (context.generateStackMaps()) {\n+                        generateStackMaps(buf);\n+                    } else if (context.dropStackMaps()) {\n+                        writeCounters(true, buf);\n@@ -371,7 +369,6 @@\n-                    switch (context.stackMapsOption()) {\n-                        case STACK_MAPS_WHEN_REQUIRED ->\n-                            tryGenerateStackMaps(false, buf);\n-                        case GENERATE_STACK_MAPS ->\n-                            generateStackMaps(buf);\n-                        case DROP_STACK_MAPS ->\n-                            writeCounters(false, buf);\n+                    if (context.stackMapsWhenRequired()) {\n+                        tryGenerateStackMaps(false, buf);\n+                    } else if (context.generateStackMaps()) {\n+                        generateStackMaps(buf);\n+                    } else if (context.dropStackMaps()) {\n+                        writeCounters(false, buf);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":20,"deletions":23,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -238,3 +238,3 @@\n-        this.classHierarchy = new ClassHierarchyImpl(context.classHierarchyResolverOption().classHierarchyResolver());\n-        this.patchDeadCode = context.deadCodeOption() == ClassFile.DeadCodeOption.PATCH_DEAD_CODE;\n-        this.filterDeadLabels = context.deadLabelsOption() == ClassFile.DeadLabelsOption.DROP_DEAD_LABELS;\n+        this.classHierarchy = new ClassHierarchyImpl(context.classHierarchyResolver());\n+        this.patchDeadCode = context.patchDeadCode();\n+        this.filterDeadLabels = context.dropDeadLabels();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-                                             final ClassFile.AttributesProcessingOption processingOption) {\n+                                             final ClassFileImpl context) {\n@@ -107,1 +107,1 @@\n-                ? ATTRIBUTE_STABILITY_COUNT - attr.attributeMapper().stability().ordinal() > processingOption.ordinal()\n+                ? ATTRIBUTE_STABILITY_COUNT - attr.attributeMapper().stability().ordinal() > context.attributesProcessingOption().ordinal()\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}