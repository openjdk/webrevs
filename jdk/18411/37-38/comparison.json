{"files":[{"patch":"@@ -117,1 +117,2 @@\n-        return state == BEGIN ? null : impl.params.encapsulation();\n+        return (state == BEGIN || impl.kemEncaps == null)\n+                ? null : impl.kemEncaps.clone();\n@@ -300,0 +301,3 @@\n+        \/\/ only used on sender side\n+        byte[] kemEncaps;\n+\n@@ -406,1 +410,1 @@\n-                params = params.encapsulation(enc.encapsulation());\n+                kemEncaps = enc.encapsulation();\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKE.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n- * {@link #info(byte[])} method by both sides.\n+ * {@link #withInfo(byte[])} method by both sides.\n@@ -74,1 +74,1 @@\n- * {@link #psk(SecretKey, byte[])} method by both sides.\n+ * {@link #withPsk(SecretKey, byte[])} method by both sides.\n@@ -77,1 +77,1 @@\n- * the asymmetric keys must be provided using the {@link #authKey(AsymmetricKey)}\n+ * the asymmetric keys must be provided using the {@link #withAuthKey(AsymmetricKey)}\n@@ -82,2 +82,2 @@\n- * ({@code mode_auth_psk}), both {@link #authKey(AsymmetricKey)} and\n- * {@link #psk(SecretKey, byte[])} methods must be called as described above.\n+ * ({@code mode_auth_psk}), both {@link #withAuthKey(AsymmetricKey)} and\n+ * {@link #withPsk(SecretKey, byte[])} methods must be called as described above.\n@@ -91,1 +91,1 @@\n- * object obtained from the {@link #encapsulation(byte[])} method.\n+ * object obtained from the {@link #withEncapsulation(byte[])} method.\n@@ -111,2 +111,2 @@\n- * <li> An attempt to use {@code authKey(key)} is made with an incompatible key.\n- * <li> An attempt to use {@code authKey(key)} is made but {@code mode_auth}\n+ * <li> An attempt to use {@code withAuthKey(key)} is made with an incompatible key.\n+ * <li> An attempt to use {@code withAuthKey(key)} is made but {@code mode_auth}\n@@ -282,1 +282,1 @@\n-    public HPKEParameterSpec info(byte[] info) {\n+    public HPKEParameterSpec withInfo(byte[] info) {\n@@ -305,1 +305,1 @@\n-    public HPKEParameterSpec psk(SecretKey psk, byte[] psk_id) {\n+    public HPKEParameterSpec withPsk(SecretKey psk, byte[] psk_id) {\n@@ -326,1 +326,1 @@\n-    public HPKEParameterSpec encapsulation(byte[] encapsulation) {\n+    public HPKEParameterSpec withEncapsulation(byte[] encapsulation) {\n@@ -345,1 +345,1 @@\n-    public HPKEParameterSpec authKey(AsymmetricKey kS) {\n+    public HPKEParameterSpec withAuthKey(AsymmetricKey kS) {\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HPKEParameterSpec.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-                .info(\"app_info\".getBytes(StandardCharsets.UTF_8));\n+                .withInfo(\"app_info\".getBytes(StandardCharsets.UTF_8));\n@@ -63,2 +63,2 @@\n-                .info(\"app_info\".getBytes(StandardCharsets.UTF_8))\n-                .encapsulation(kemEncap);\n+                .withInfo(\"app_info\".getBytes(StandardCharsets.UTF_8))\n+                .withEncapsulation(kemEncap);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/snippet-files\/PackageSnippets.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -96,4 +96,4 @@\n-        Asserts.assertTrue(spec.authKey(null).authKey() == null);\n-        Asserts.assertTrue(spec.authKey(kp.getPrivate()).authKey() != null);\n-        Asserts.assertTrue(spec.authKey(kp.getPublic()).authKey() != null);\n-        Asserts.assertTrue(spec.authKey(kp.getPrivate()).authKey(null).authKey() == null);\n+        Asserts.assertTrue(spec.withAuthKey(null).authKey() == null);\n+        Asserts.assertTrue(spec.withAuthKey(kp.getPrivate()).authKey() != null);\n+        Asserts.assertTrue(spec.withAuthKey(kp.getPublic()).authKey() != null);\n+        Asserts.assertTrue(spec.withAuthKey(kp.getPrivate()).withAuthKey(null).authKey() == null);\n@@ -103,2 +103,2 @@\n-        Asserts.assertTrue(spec.info(new byte[3]).toString().contains(\"info=000000,\"));\n-        Asserts.assertTrue(spec.info(\"info\".getBytes(StandardCharsets.UTF_8))\n+        Asserts.assertTrue(spec.withInfo(new byte[3]).toString().contains(\"info=000000,\"));\n+        Asserts.assertTrue(spec.withInfo(\"info\".getBytes(StandardCharsets.UTF_8))\n@@ -106,1 +106,1 @@\n-        Asserts.assertTrue(spec.info(\"\\\"info\\\"\".getBytes(StandardCharsets.UTF_8))\n+        Asserts.assertTrue(spec.withInfo(\"\\\"info\\\"\".getBytes(StandardCharsets.UTF_8))\n@@ -108,1 +108,1 @@\n-        Asserts.assertTrue(spec.info(\"'info'\".getBytes(StandardCharsets.UTF_8))\n+        Asserts.assertTrue(spec.withInfo(\"'info'\".getBytes(StandardCharsets.UTF_8))\n@@ -110,1 +110,1 @@\n-        Asserts.assertTrue(spec.info(\"i\\\\n\\\\f\\\\o\".getBytes(StandardCharsets.UTF_8))\n+        Asserts.assertTrue(spec.withInfo(\"i\\\\n\\\\f\\\\o\".getBytes(StandardCharsets.UTF_8))\n@@ -113,3 +113,3 @@\n-        Asserts.assertTrue(spec.psk(psk, psk_id).toString().contains(\"mode_psk}\"));\n-        Asserts.assertTrue(spec.authKey(kp.getPrivate()).toString().contains(\"mode_auth}\"));\n-        Asserts.assertTrue(spec.authKey(kp.getPrivate()).psk(psk, psk_id).toString().contains(\"mode_auth_psk}\"));\n+        Asserts.assertTrue(spec.withPsk(psk, psk_id).toString().contains(\"mode_psk}\"));\n+        Asserts.assertTrue(spec.withAuthKey(kp.getPrivate()).toString().contains(\"mode_auth}\"));\n+        Asserts.assertTrue(spec.withAuthKey(kp.getPrivate()).withPsk(psk, psk_id).toString().contains(\"mode_auth_psk}\"));\n@@ -118,2 +118,2 @@\n-        Asserts.assertThrows(NullPointerException.class, () -> spec.info(null));\n-        Asserts.assertEqualsByteArray(spec.info(info).info(), info);\n+        Asserts.assertThrows(NullPointerException.class, () -> spec.withInfo(null));\n+        Asserts.assertEqualsByteArray(spec.withInfo(info).info(), info);\n@@ -121,3 +121,3 @@\n-        Asserts.assertTrue(spec.encapsulation(null).encapsulation() == null);\n-        Asserts.assertEqualsByteArray(spec.encapsulation(info).encapsulation(), info);\n-        Asserts.assertTrue(spec.encapsulation(info).encapsulation(null).encapsulation() == null);\n+        Asserts.assertTrue(spec.withEncapsulation(null).encapsulation() == null);\n+        Asserts.assertEqualsByteArray(spec.withEncapsulation(info).encapsulation(), info);\n+        Asserts.assertTrue(spec.withEncapsulation(info).withEncapsulation(null).encapsulation() == null);\n@@ -126,1 +126,1 @@\n-        Asserts.assertThrows(NullPointerException.class, () -> spec.psk(psk, null));\n+        Asserts.assertThrows(NullPointerException.class, () -> spec.withPsk(psk, null));\n@@ -129,2 +129,2 @@\n-        Asserts.assertThrows(IllegalArgumentException.class, () -> spec.psk(psk, new byte[0]));\n-        Asserts.assertThrows(IllegalArgumentException.class, () -> spec.psk(null, psk_id));\n+        Asserts.assertThrows(IllegalArgumentException.class, () -> spec.withPsk(psk, new byte[0]));\n+        Asserts.assertThrows(IllegalArgumentException.class, () -> spec.withPsk(null, psk_id));\n@@ -132,4 +132,4 @@\n-        Asserts.assertEqualsByteArray(spec.psk(psk, psk_id).psk().getEncoded(), psk.getEncoded());\n-        Asserts.assertEqualsByteArray(spec.psk(psk, psk_id).psk_id(), psk_id);\n-        Asserts.assertTrue(spec.psk(null, new byte[0]).psk() == null);\n-        Asserts.assertEqualsByteArray(spec.psk(null, new byte[0]).psk_id(), new byte[0]);\n+        Asserts.assertEqualsByteArray(spec.withPsk(psk, psk_id).psk().getEncoded(), psk.getEncoded());\n+        Asserts.assertEqualsByteArray(spec.withPsk(psk, psk_id).psk_id(), psk_id);\n+        Asserts.assertTrue(spec.withPsk(null, new byte[0]).psk() == null);\n+        Asserts.assertEqualsByteArray(spec.withPsk(null, new byte[0]).psk_id(), new byte[0]);\n@@ -159,1 +159,1 @@\n-                spec.encapsulation(encap));\n+                spec.withEncapsulation(encap));\n@@ -174,1 +174,1 @@\n-                        spec.encapsulation(new byte[32])));\n+                        spec.withEncapsulation(new byte[32])));\n@@ -185,1 +185,1 @@\n-                        spec.encapsulation(encap)));\n+                        spec.withEncapsulation(encap)));\n@@ -220,1 +220,1 @@\n-                spec.encapsulation(c1.getIV()));\n+                spec.withEncapsulation(c1.getIV()));\n@@ -228,2 +228,2 @@\n-                spec.info(info).psk(psk, psk_id),\n-                spec.info(info).psk(psk, psk_id));\n+                spec.withInfo(info).withPsk(psk, psk_id),\n+                spec.withInfo(info).withPsk(psk, psk_id));\n@@ -236,1 +236,1 @@\n-                        spec.authKey(kp2.getPublic())));\n+                        spec.withAuthKey(kp2.getPublic())));\n@@ -239,1 +239,1 @@\n-                        spec.authKey(kp2.getPrivate())));\n+                        spec.withAuthKey(kp2.getPrivate())));\n@@ -243,2 +243,2 @@\n-                spec.authKey(kp2.getPrivate()),\n-                spec.authKey(kp2.getPublic()));\n+                spec.withAuthKey(kp2.getPrivate()),\n+                spec.withAuthKey(kp2.getPublic()));\n@@ -248,1 +248,1 @@\n-                spec.info(new byte[0]));\n+                spec.withInfo(new byte[0]));\n@@ -252,1 +252,1 @@\n-                spec.psk(null, new byte[0]));\n+                spec.withPsk(null, new byte[0]));\n@@ -267,1 +267,1 @@\n-                pr.encapsulation(c1.getIV()));\n+                pr.withEncapsulation(c1.getIV()));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Compliance.java","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-                    c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(), params.encapsulation(c1.getIV()));\n+                    c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(), params.withEncapsulation(c1.getIV()));\n@@ -89,3 +89,3 @@\n-                            .authKey(kp2.getPrivate())\n-                            .info(info)\n-                            .psk(psk, psk_id));\n+                            .withAuthKey(kp2.getPrivate())\n+                            .withInfo(info)\n+                            .withPsk(psk, psk_id));\n@@ -93,4 +93,4 @@\n-                            .authKey(kp2.getPublic())\n-                            .info(info)\n-                            .psk(psk, psk_id)\n-                            .encapsulation(c1.getIV()));\n+                            .withAuthKey(kp2.getPublic())\n+                            .withInfo(info)\n+                            .withPsk(psk, psk_id)\n+                            .withEncapsulation(c1.getIV()));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Functions.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-            var spec = HPKEParameterSpec.of(kem_id, kdf_id, aead_id).info(info);\n+            var spec = HPKEParameterSpec.of(kem_id, kdf_id, aead_id).withInfo(info);\n@@ -90,1 +90,1 @@\n-                spec = spec.psk(\n+                spec = spec.withPsk(\n@@ -97,1 +97,1 @@\n-                        spec.encapsulation(c1.getIV()));\n+                        spec.withEncapsulation(c1.getIV()));\n@@ -102,1 +102,1 @@\n-                        spec.authKey(kpS.getPrivate()), rand);\n+                        spec.withAuthKey(kpS.getPrivate()), rand);\n@@ -104,1 +104,1 @@\n-                        spec.encapsulation(c1.getIV()).authKey(kpS.getPublic()));\n+                        spec.withEncapsulation(c1.getIV()).withAuthKey(kpS.getPublic()));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/KAT9180.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}