{"files":[{"patch":"@@ -46,2 +46,5 @@\n-    java\/lang\/classfile\/components\/snippet-files \\\n-    java\/lang\/foreign\/snippet-files\n+    java\/lang\/classfile\/attribute\/snippet-files \\\n+    java\/lang\/classfile\/constantpool\/snippet-files \\\n+    java\/lang\/foreign\/snippet-files \\\n+    javax\/crypto\/spec\/snippet-files \\\n+    jdk\/internal\/classfile\/components\/snippet-files\n","filename":"make\/modules\/java.base\/Java.gmk","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+import java.security.spec.InvalidParameterSpecException;\n@@ -125,1 +126,9 @@\n-        return null;\n+        try {\n+            var result = AlgorithmParameters.getInstance(\"HPKE\");\n+            result.init(impl.params);\n+            return result;\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new ProviderException(\"Cannot find implementations\", e);\n+        } catch (InvalidParameterSpecException e) {\n+            throw new ProviderException(\"Parameters not supported\", e);\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKE.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.crypto.provider;\n+\n+import javax.crypto.spec.HPKEParameterSpec;\n+import java.io.IOException;\n+import java.security.AlgorithmParametersSpi;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+\n+\/**\n+ * This AlgorithmParametersSpi only supports HPKEParameterSpec.\n+ * There is no ASN.1 format defined.\n+ *\/\n+public class HPKEParameters extends AlgorithmParametersSpi {\n+\n+    private HPKEParameterSpec spec;\n+\n+    @Override\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+            throws InvalidParameterSpecException {\n+        if (!(paramSpec instanceof HPKEParameterSpec hspec)) {\n+            throw new InvalidParameterSpecException(\"Not an HPKEParameterSpec\");\n+        }\n+        this.spec = hspec;\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params) throws IOException {\n+        throw new IOException(\n+                \"HPKE does not support parameters as a byte array.\");\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params, String format) throws IOException {\n+        throw new IOException(\n+                \"HPKE does not support parameters as a byte array.\");\n+    }\n+\n+    @Override\n+    protected <T extends AlgorithmParameterSpec> T engineGetParameterSpec(\n+            Class<T> paramSpec) throws InvalidParameterSpecException {\n+\n+        if (paramSpec.isAssignableFrom(HPKEParameterSpec.class)) {\n+            return paramSpec.cast(spec);\n+        }\n+        throw new InvalidParameterSpecException(\n+                \"Only HPKEParameterSpec supported.\");\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded() throws IOException {\n+        throw new IOException(\n+                \"HPKE does not support parameters as a byte array.\");\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded(String format) throws IOException {\n+        throw new IOException(\n+                \"HPKE does not support parameters as a byte array.\");\n+    }\n+\n+    @Override\n+    protected String engineToString() {\n+        return \"HPKE\";\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKEParameters.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -371,0 +371,1 @@\n+        ps(\"AlgorithmParameters\", \"HPKE\", \"com.sun.crypto.provider.HPKEParameters\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SunJCE.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n- * KDF, and AEAD algorithm identifiers, but the KEM algorithm identifier will be\n+ * KDF, and AEAD algorithm identifiers. The KEM algorithm identifier will be\n@@ -66,0 +66,3 @@\n+ * This class has defined constants for the standard algorithm identifiers.\n+ * For example, {@link #KEM_DHKEM_P_256_HKDF_SHA256}, {@link #KDF_HKDF_SHA256},\n+ * and {@link #AEAD_AES_128_GCM}.\n@@ -119,0 +122,8 @@\n+ * <p>\n+ * After an HPKE cipher is initialized, the {@code getParameters} method returns\n+ * an {@link java.security.AlgorithmParameters} object containing the\n+ * actual {@code HPKEParameterSpec} object used by the cipher. Users can call\n+ * {@link #kem_id()}, {@link #kdf_id()}, and {@link #aead_id()} on the\n+ * {@code HPKEParameterSpec} object to obtain the algorithm identifiers\n+ * selected during initialization.\n+ * <p>\n@@ -120,29 +131,1 @@\n- * {@snippet lang = java:\n- * \/\/ Key pair generation\n- * KeyPairGenerator g = KeyPairGenerator.getInstance(\"X25519\");\n- * KeyPair kp = g.generateKeyPair();\n- *\n- * \/\/ The HPKE sender side is initialized with the recipient's public key\n- * Cipher sender = Cipher.getInstance(\"HPKE\");\n- * HPKEParameterSpec ps = HPKEParameterSpec.of()\n- *         .info(\"this_info\".getBytes(StandardCharsets.UTF_8));\n- * sender.init(Cipher.ENCRYPT_MODE, kp.getPublic(), ps);\n- *\n- * \/\/ Retrieve the key encapsulation message (the KEM output) from the sender\n- * byte[] kemEncap = sender.getIV();\n- *\n- * \/\/ The HPKE recipient side is initialized with its own private key\n- * \/\/ and the key encapsulation message from the sender\n- * Cipher recipient = Cipher.getInstance(\"HPKE\");\n- * HPKEParameterSpec pr = HPKEParameterSpec.of()\n- *         .info(\"this_info\".getBytes(StandardCharsets.UTF_8))\n- *         .encapsulation(kemEncap);\n- * recipient.init(Cipher.DECRYPT_MODE, kp.getPrivate(), pr);\n- *\n- * \/\/ Secure communication between the 2 sides\n- * byte[] msg = \"Hello World\".getBytes(StandardCharsets.UTF_8);\n- * byte[] ct = sender.doFinal(msg);\n- * byte[] pt = recipient.doFinal(ct);\n- *\n- * assert Arrays.equals(msg, pt);\n- * }\n+ * {@snippet lang=java class=\"PackageSnippets\" region=\"hpke-spec-example\"}\n@@ -300,1 +283,1 @@\n-     * specified KDF, and AEAD algorithm identifiers in {@code mode_base}\n+     * specified KDF and AEAD algorithm identifiers in {@code mode_base}\n@@ -354,1 +337,1 @@\n-     * @param info application-specific info. Must not be {@code null}.\n+     * @param info application-supplied information. Must not be {@code null}.\n@@ -447,1 +430,1 @@\n-     * {@return a copy of the application-specific info, empty if none}\n+     * {@return a copy of the application-supplied information, empty if none}\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HPKEParameterSpec.java","additions":16,"deletions":33,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javax.crypto.spec.snippets;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.spec.HPKEParameterSpec;\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.util.Arrays;\n+\n+class PackageSnippets {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ @start region=\"hpke-spec-example\"\n+        \/\/ Key pair generation\n+        KeyPairGenerator g = KeyPairGenerator.getInstance(\"X25519\");\n+        KeyPair kp = g.generateKeyPair();\n+\n+        \/\/ The HPKE sender side is initialized with the recipient's public key\n+        \/\/ and default HPKEParameterSpec with an application-supplied info.\n+        Cipher sender = Cipher.getInstance(\"HPKE\");\n+        HPKEParameterSpec ps = HPKEParameterSpec.of()\n+                .info(\"app_info\".getBytes(StandardCharsets.UTF_8));\n+        sender.init(Cipher.ENCRYPT_MODE, kp.getPublic(), ps);\n+\n+        \/\/ Retrieve the key encapsulation message (the KEM output) from the sender\n+        byte[] kemEncap = sender.getIV();\n+\n+        \/\/ Retrieve the actual parameters used from the sender.\n+        HPKEParameterSpec actual = sender.getParameters()\n+                .getParameterSpec(HPKEParameterSpec.class);\n+        assert actual.kem_id() == HPKEParameterSpec.KEM_DHKEM_X25519_HKDF_SHA256;\n+        assert actual.kdf_id() == HPKEParameterSpec.KDF_HKDF_SHA256;\n+        assert actual.aead_id() == HPKEParameterSpec.AEAD_AES_256_GCM;\n+\n+        \/\/ The HPKE recipient side is initialized with its own private key,\n+        \/\/ the same algorithm identifiers as used by the sender,\n+        \/\/ and the key encapsulation message from the sender\n+        Cipher recipient = Cipher.getInstance(\"HPKE\");\n+        HPKEParameterSpec pr = HPKEParameterSpec\n+                .of(actual.kem_id(), actual.kdf_id(), actual.aead_id())\n+                .info(\"app_info\".getBytes(StandardCharsets.UTF_8))\n+                .encapsulation(kemEncap);\n+        recipient.init(Cipher.DECRYPT_MODE, kp.getPrivate(), pr);\n+\n+        \/\/ Secure communication between the 2 sides\n+        byte[] msg = \"Hello World\".getBytes(StandardCharsets.UTF_8);\n+        byte[] ct = sender.doFinal(msg);\n+        byte[] pt = recipient.doFinal(ct);\n+\n+        assert Arrays.equals(msg, pt);\n+        \/\/ @end\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/snippet-files\/PackageSnippets.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}