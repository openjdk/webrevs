{"files":[{"patch":"@@ -102,0 +102,2 @@\n+        } else if (state == EXPORT_ONLY) {\n+            return 0;\n@@ -103,1 +105,1 @@\n-            throw new IllegalStateException(\"No AEAD cipher\");\n+            throw new IllegalStateException(\"AEAD cipher not initialized yet\");\n@@ -111,0 +113,2 @@\n+        } else if (state == EXPORT_ONLY) {\n+            return 0;\n@@ -112,1 +116,1 @@\n-            throw new IllegalStateException(\"No AEAD cipher\");\n+            throw new IllegalStateException(\"AEAD cipher not initialized yet\");\n@@ -156,1 +160,1 @@\n-            throw new InvalidKeyException(\"Not asymmetric key\");\n+            throw new InvalidKeyException(\"Not an asymmetric key\");\n@@ -177,3 +181,6 @@\n-            throws InvalidAlgorithmParameterException {\n-        throw new InvalidAlgorithmParameterException(\n-                \"Does not support init from AlgorithmParameters\");\n+            throws InvalidKeyException, InvalidAlgorithmParameterException {\n+        try {\n+            engineInit(opmode, key, params.getParameterSpec(HPKEParameterSpec.class), random);\n+        } catch (InvalidParameterSpecException e) {\n+            throw new InvalidAlgorithmParameterException(\"Cannot extract HPKEParameterSpec\", e);\n+        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKE.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -54,2 +54,4 @@\n- * algorithms, which will be determined by the implementation based on the key\n- * provided to {@code init()}. This instance can only be used by the sender.\n+ * algorithm identifiers, which will be determined by the implementation based\n+ * on the key provided to {@code init()}. This instance can only be used by the\n+ * sender. If an implementation does not support initializing with default\n+ * algorithm identifiers, an {@code InvalidAlgorithmParameterException} will be thrown.\n@@ -78,5 +80,4 @@\n- * If HPKE modes {@code mode_auth} or {@code mode_auth_psk} are used,\n- * the asymmetric keys for authentication must be provided using the\n- * {@link #authKey(AsymmetricKey)} method. Precisely, the sender must call\n- * this method with its own private key and the recipient must call it with\n- * the sender's public key.\n+ * To use the HPKE mode {@code mode_auth}, the asymmetric keys for authentication\n+ * must be provided using the {@link #authKey(AsymmetricKey)} method. Precisely,\n+ * the sender must call this method with its own private key and the recipient\n+ * must call it with the sender's public key.\n@@ -84,3 +85,6 @@\n- * If HPKE modes {@code mode_psk} or {@code mode_auth_psk} are used,\n- * the pre-shared key for authentication and its identifier must be provided\n- * using the {@link #psk(SecretKey, byte[])} method by both sides.\n+ * To use the HPKE mode {@code mode_psk}, the pre-shared key for authentication\n+ * and its identifier must be provided using the {@link #psk(SecretKey, byte[])}\n+ * method by both sides.\n+ * <li>\n+ * To use the HPKE mode {@code mode_auth_psk}, both {@link #authKey(AsymmetricKey)}\n+ * and {@link #psk(SecretKey, byte[])} methods must be called as described above.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HPKEParameterSpec.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-        \/\/ Key pair generation\n+        \/\/ Recipient key pair generation\n@@ -41,1 +41,1 @@\n-        Cipher sender = Cipher.getInstance(\"HPKE\");\n+        Cipher senderCipher = Cipher.getInstance(\"HPKE\");\n@@ -44,1 +44,1 @@\n-        sender.init(Cipher.ENCRYPT_MODE, kp.getPublic(), ps);\n+        senderCipher.init(Cipher.ENCRYPT_MODE, kp.getPublic(), ps);\n@@ -47,1 +47,1 @@\n-        HPKEParameterSpec actual = sender.getParameters()\n+        HPKEParameterSpec actual = senderCipher.getParameters()\n@@ -56,2 +56,2 @@\n-        \/\/ and the key encapsulation message from the sender\n-        Cipher recipient = Cipher.getInstance(\"HPKE\");\n+        \/\/ and the key encapsulation message from the sender.\n+        Cipher recipientCipher = Cipher.getInstance(\"HPKE\");\n@@ -62,1 +62,1 @@\n-        recipient.init(Cipher.DECRYPT_MODE, kp.getPrivate(), pr);\n+        recipientCipher.init(Cipher.DECRYPT_MODE, kp.getPrivate(), pr);\n@@ -64,1 +64,1 @@\n-        \/\/ Secure communication between the 2 sides\n+        \/\/ Encryption and decryption\n@@ -66,2 +66,2 @@\n-        byte[] ct = sender.doFinal(msg);\n-        byte[] pt = recipient.doFinal(ct);\n+        byte[] ct = senderCipher.doFinal(msg);\n+        byte[] pt = recipientCipher.doFinal(ct);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/snippet-files\/PackageSnippets.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -219,2 +219,2 @@\n-        c1.getBlockSize();\n-        c1.getOutputSize(100);\n+        Asserts.assertEquals(16, c1.getBlockSize());\n+        Asserts.assertEquals(116, c1.getOutputSize(100));\n@@ -226,2 +226,2 @@\n-        c2.getBlockSize();\n-        c2.getOutputSize(100);\n+        Asserts.assertEquals(16, c2.getBlockSize());\n+        Asserts.assertEquals(84, c2.getOutputSize(100));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Compliance.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-            var params = c.getParameters().getParameterSpec(HPKEParameterSpec.class);\n@@ -67,1 +66,7 @@\n-            c.init(Cipher.DECRYPT_MODE, kp.getPrivate(), params);\n+            var ap = c.getParameters();\n+            var spec = ap.getParameterSpec(HPKEParameterSpec.class);\n+\n+            c.init(Cipher.DECRYPT_MODE, kp.getPrivate(), ap);\n+            Asserts.assertEqualsByteArray(msg, c.doFinal(ct));\n+\n+            c.init(Cipher.DECRYPT_MODE, kp.getPrivate(), spec);\n@@ -75,1 +80,1 @@\n-            params = c.getParameters().getParameterSpec(HPKEParameterSpec.class);\n+            var params = c.getParameters().getParameterSpec(HPKEParameterSpec.class);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Functions.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"}]}