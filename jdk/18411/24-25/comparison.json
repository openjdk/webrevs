{"files":[{"patch":"@@ -53,5 +53,0 @@\n-        var defaultParams = HPKEParameterSpec.of(\n-                KEM_DHKEM_X25519_HKDF_SHA256,\n-                KDF_HKDF_SHA256,\n-                AEAD_AES_256_GCM);\n-\n@@ -65,2 +60,5 @@\n-        \/\/ Default values\n-        var spec = defaultParams;\n+        \/\/ A typical spec\n+        var spec = HPKEParameterSpec.of(\n+                KEM_DHKEM_X25519_HKDF_SHA256,\n+                KDF_HKDF_SHA256,\n+                AEAD_AES_256_GCM);\n@@ -76,10 +74,10 @@\n-        \/\/ Specified values\n-        var spec2 = HPKEParameterSpec.of(0, 0, 0);\n-        Asserts.assertEQ(spec2.kem_id(), 0);\n-        Asserts.assertEQ(spec2.kdf_id(), 0);\n-        Asserts.assertEQ(spec2.aead_id(), 0);\n-        Asserts.assertEQ(spec2.authKey(), null);\n-        Asserts.assertEQ(spec2.encapsulation(), null);\n-        Asserts.assertEqualsByteArray(spec2.info(), new byte[0]);\n-        Asserts.assertEQ(spec2.psk(), null);\n-        Asserts.assertEqualsByteArray(spec2.psk_id(), new byte[0]);\n+        \/\/ A fake spec but still valid\n+        var specZero = HPKEParameterSpec.of(0, 0, 0);\n+        Asserts.assertEQ(specZero.kem_id(), 0);\n+        Asserts.assertEQ(specZero.kdf_id(), 0);\n+        Asserts.assertEQ(specZero.aead_id(), 0);\n+        Asserts.assertEQ(specZero.authKey(), null);\n+        Asserts.assertEQ(specZero.encapsulation(), null);\n+        Asserts.assertEqualsByteArray(specZero.info(), new byte[0]);\n+        Asserts.assertEQ(specZero.psk(), null);\n+        Asserts.assertEqualsByteArray(specZero.psk_id(), new byte[0]);\n@@ -107,6 +105,6 @@\n-        Asserts.assertTrue(defaultParams.toString().contains(\"kem_id=32, kdf_id=1, aead_id=2\"));\n-        Asserts.assertTrue(defaultParams.info(new byte[3]).toString().contains(\"info=000000\"));\n-        Asserts.assertTrue(defaultParams.toString().contains(\"mode_base}\"));\n-        Asserts.assertTrue(defaultParams.psk(psk, psk_id).toString().contains(\"mode_psk}\"));\n-        Asserts.assertTrue(defaultParams.authKey(kp.getPrivate()).toString().contains(\"mode_auth}\"));\n-        Asserts.assertTrue(defaultParams.authKey(kp.getPrivate()).psk(psk, psk_id).toString().contains(\"mode_auth_psk}\"));\n+        Asserts.assertTrue(spec.toString().contains(\"kem_id=32, kdf_id=1, aead_id=2\"));\n+        Asserts.assertTrue(spec.info(new byte[3]).toString().contains(\"info=000000\"));\n+        Asserts.assertTrue(spec.toString().contains(\"mode_base}\"));\n+        Asserts.assertTrue(spec.psk(psk, psk_id).toString().contains(\"mode_psk}\"));\n+        Asserts.assertTrue(spec.authKey(kp.getPrivate()).toString().contains(\"mode_auth}\"));\n+        Asserts.assertTrue(spec.authKey(kp.getPrivate()).psk(psk, psk_id).toString().contains(\"mode_auth_psk}\"));\n@@ -153,1 +151,1 @@\n-        c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), defaultParams);\n+        c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), spec);\n@@ -156,1 +154,1 @@\n-                defaultParams.encapsulation(encap));\n+                spec.encapsulation(encap));\n@@ -160,1 +158,1 @@\n-                () -> c1.init(Cipher.WRAP_MODE, kp.getPublic(), defaultParams));\n+                () -> c1.init(Cipher.WRAP_MODE, kp.getPublic(), spec));\n@@ -162,1 +160,1 @@\n-                () -> c1.init(Cipher.UNWRAP_MODE, kp.getPublic(), defaultParams));\n+                () -> c1.init(Cipher.UNWRAP_MODE, kp.getPublic(), spec));\n@@ -171,1 +169,1 @@\n-                        defaultParams.encapsulation(new byte[32])));\n+                        spec.encapsulation(new byte[32])));\n@@ -182,1 +180,1 @@\n-                        defaultParams.encapsulation(encap)));\n+                        spec.encapsulation(encap)));\n@@ -185,1 +183,1 @@\n-                () -> c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(), defaultParams));\n+                () -> c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(), spec));\n@@ -210,1 +208,1 @@\n-        c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), defaultParams);\n+        c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), spec);\n@@ -217,1 +215,1 @@\n-                defaultParams.encapsulation(c1.getIV()));\n+                spec.encapsulation(c1.getIV()));\n@@ -225,2 +223,2 @@\n-                defaultParams.info(info).psk(psk, psk_id),\n-                defaultParams.info(info).psk(psk, psk_id));\n+                spec.info(info).psk(psk, psk_id),\n+                spec.info(info).psk(psk, psk_id));\n@@ -233,1 +231,1 @@\n-                        defaultParams.authKey(kp2.getPublic())));\n+                        spec.authKey(kp2.getPublic())));\n@@ -236,1 +234,1 @@\n-                        defaultParams.authKey(kp2.getPrivate())));\n+                        spec.authKey(kp2.getPrivate())));\n@@ -240,2 +238,2 @@\n-                defaultParams.authKey(kp2.getPrivate()),\n-                defaultParams.authKey(kp2.getPublic()));\n+                spec.authKey(kp2.getPrivate()),\n+                spec.authKey(kp2.getPublic()));\n@@ -244,2 +242,2 @@\n-                defaultParams,\n-                defaultParams.info(new byte[0]));\n+                spec,\n+                spec.info(new byte[0]));\n@@ -248,2 +246,2 @@\n-                defaultParams,\n-                defaultParams.psk(null, new byte[0]));\n+                spec,\n+                spec.psk(null, new byte[0]));\n@@ -258,1 +256,1 @@\n-        ap.init(defaultParams);\n+        ap.init(spec);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Compliance.java","additions":41,"deletions":43,"binary":false,"changes":84,"status":"modified"}]}