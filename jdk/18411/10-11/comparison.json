{"files":[{"patch":"@@ -531,1 +531,0 @@\n-            checkDisabledAlgorithms(params);\n@@ -552,69 +551,0 @@\n-        private static final int[][][] disabledIdentifiers;\n-        static {\n-            disabledIdentifiers = new int[3][][];\n-            List<int[]> disabledKEMs = new ArrayList<>();\n-            List<int[]> disabledKDFs = new ArrayList<>();\n-            List<int[]> disabledAEADs = new ArrayList<>();\n-            String property = Security.getProperty(\"jdk.hpke.disabledAlgorithms\");\n-            if (property != null) {\n-                for (String rule : property.split(\",\")) {\n-                    if (rule == null) {\n-                        continue;\n-                    }\n-                    rule = rule.trim();\n-                    if (rule.isEmpty()) {\n-                        continue;\n-                    }\n-                    int pos1 = rule.indexOf(\"=\");\n-                    int pos2 = rule.indexOf(\"-\", pos1);\n-                    if (pos1 == -1) {\n-                        throw new IllegalArgumentException(\n-                                \"Invalid jdk.hpke.disabledAlgorithms: \" + property);\n-                    }\n-                    int[] range = new int[2];\n-                    try {\n-                        if (pos2 == -1) {\n-                            range[0] = range[1] = Integer.decode(rule.substring(pos1 + 1).trim());\n-                        } else {\n-                            range[0] = Integer.decode(rule.substring(pos1 + 1, pos2).trim());\n-                            range[1] = Integer.decode(rule.substring(pos2 + 1).trim());\n-                            if (range[0] > range[1]) {\n-                                throw new IllegalArgumentException(\n-                                        \"Invalid jdk.hpke.disabledAlgorithms: \" + property);\n-                            }\n-                        }\n-                    } catch (NumberFormatException e) {\n-                        throw new IllegalArgumentException(\n-                                \"Invalid jdk.hpke.disabledAlgorithms: \" + property, e);\n-                    }\n-                    switch (rule.substring(0, pos1).trim()) {\n-                        case \"kem_id\" -> disabledKEMs.add(range);\n-                        case \"kdf_id\" -> disabledKDFs.add(range);\n-                        case \"aead_id\" -> disabledAEADs.add(range);\n-                        default -> throw new IllegalArgumentException(\n-                                \"Invalid jdk.hpke.disabledAlgorithms: \" + property);\n-                    }\n-                }\n-            }\n-            disabledIdentifiers[0] = disabledKEMs.toArray(new int[0][]);\n-            disabledIdentifiers[1] = disabledKDFs.toArray(new int[0][]);\n-            disabledIdentifiers[2] = disabledAEADs.toArray(new int[0][]);\n-        }\n-\n-        private static void checkDisabledAlgorithms(HPKEParameterSpec params)\n-                throws InvalidAlgorithmParameterException {\n-            checkDisabled(\"kem_id\", disabledIdentifiers[0], params.kem_id());\n-            checkDisabled(\"kdf_id\", disabledIdentifiers[1], params.kdf_id());\n-            checkDisabled(\"aead_id\", disabledIdentifiers[2], params.aead_id());\n-        }\n-\n-        private static void checkDisabled(String label, int[][] ranges, int id)\n-                throws InvalidAlgorithmParameterException {\n-            for (int[] range : ranges) {\n-                if (id >= range[0] && id <= range[1]) {\n-                    throw new InvalidAlgorithmParameterException(\n-                            \"Disabled \" + label + \": \" + id);\n-                }\n-            }\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKE.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -638,35 +638,0 @@\n-#\n-# Algorithm restrictions for Hybrid Public Key Encryption (HPKE)\n-#\n-# In some environments, certain algorithm identifiers may be undesirable\n-# for Hybrid Public Key Encryption. See the specification of HPKEParameterSpec\n-# for definition of algorithm identifiers used in HPKE.\n-#\n-# The value for this property is a comma-separate-list of equations. Each one\n-# taking the form of one of\n-#\n-#   kem_id=<number>\n-#   kem_id=<number>-<number>\n-#   kdf_id=<number>\n-#   kdf_id=<number>-<number>\n-#   aead_id=<number>\n-#   aead_id=<number>-<number>\n-#\n-# If only one number is provided, the algorithm identifier is disabled. If a\n-# range is provided, the algorithm identifiers within the range (inclusive\n-# on both sides) are disabled. Initializing an HPKE cipher with disabled\n-# algorithm identifier(s) will throw an InvalidAlgorithmParameterException.\n-#\n-# The numbers can be in any format that Integer::decode accepts.\n-# All whitespaces around delimiters are ignored. The names are case-sensitive.\n-#\n-# Note: This property is currently used by the JDK Reference\n-# implementation. It is not guaranteed to be examined and used by other\n-# implementations.\n-#\n-# Example:\n-#   jdk.hpke.disabledAlgorithms=kem_id=16-18\n-#   jdk.hpke.disabledAlgorithms=kem_id=0x10,kdf_id=0x01,aead_id=0xffff\n-#\n-jdk.hpke.disabledAlgorithms=\n-\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.Proc;\n-\n-import javax.crypto.Cipher;\n-import javax.crypto.spec.HPKEParameterSpec;\n-import java.security.PrivateKey;\n-\n-\/*\n- * @test\n- * @bug 8325448\n- * @library \/test\/lib\n- * @summary disabling HPKE algorithm identifiers\n- *\/\n-public class Disabled {\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 0) {\n-            \/\/ Try if an HPKE cipher can be initialized with HPKEParameterSpec.of(16, 1, 1).\n-            \/\/ When \"Cannot encrypt with private key\" is seen, alg id check already passed\n-            test(null).stderrShouldContain(\"Cannot encrypt with private key\");\n-            test(\"kem_id=17\").stderrShouldContain(\"Cannot encrypt with private key\");\n-            test(\"kem_id=17-19\").stderrShouldContain(\"Cannot encrypt with private key\");\n-            test(\"kem_id=1-15\").stderrShouldContain(\"Cannot encrypt with private key\");\n-\n-            test(\"kem_id=16\").stderrShouldContain(\"Disabled kem_id: 16\");\n-            test(\"kem_id=16-19\").stderrShouldContain(\"Disabled kem_id: 16\");\n-            test(\"kem_id=11-16\").stderrShouldContain(\"Disabled kem_id: 16\");\n-            test(\"kem_id=0x10\").stderrShouldContain(\"Disabled kem_id: 16\");\n-            test(\"kem_id=#10\").stderrShouldContain(\"Disabled kem_id: 16\");\n-\n-            test(\"kem_id=17,kdf_id=2,aead_id=2\").stderrShouldContain(\"Cannot encrypt with private key\");\n-            test(\"kem_id=16,kdf_id=2,aead_id=2\").stderrShouldContain(\"Disabled kem_id: 16\");\n-            test(\"kem_id=17,kdf_id=1,aead_id=2\").stderrShouldContain(\"Disabled kdf_id: 1\");\n-            test(\"kem_id=17,kdf_id=2,aead_id=1\").stderrShouldContain(\"Disabled aead_id: 1\");\n-        } else {\n-            var c = Cipher.getInstance(\"HPKE\");\n-            var ak = new PrivateKey() {\n-                public String getAlgorithm() { return \"EC\"; }\n-                public String getFormat() { return null; }\n-                public byte[] getEncoded() { return null; }\n-            };\n-            c.init(Cipher.ENCRYPT_MODE, ak, HPKEParameterSpec.of(16, 1, 1));\n-        }\n-    }\n-\n-    static OutputAnalyzer test(String v) throws Exception {\n-        var proc = Proc.create(\"Disabled\");\n-        if (v != null) proc.secprop(\"jdk.hpke.disabledAlgorithms\", v);\n-        return proc.args(\"test\").start().output();\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Disabled.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"}]}