{"files":[{"patch":"@@ -30,1 +30,11 @@\n-import java.security.*;\n+import java.security.AsymmetricKey;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.ProviderException;\n+import java.security.PublicKey;\n+import java.security.SecureRandom;\n@@ -33,1 +43,10 @@\n-import java.security.spec.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.ECParameterSpec;\n+import java.security.spec.ECPoint;\n+import java.security.spec.ECPrivateKeySpec;\n+import java.security.spec.ECPublicKeySpec;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.KeySpec;\n+import java.security.spec.NamedParameterSpec;\n+import java.security.spec.XECPrivateKeySpec;\n+import java.security.spec.XECPublicKeySpec;\n@@ -36,1 +55,6 @@\n-import javax.crypto.*;\n+import javax.crypto.DecapsulateException;\n+import javax.crypto.KDF;\n+import javax.crypto.KEM;\n+import javax.crypto.KEMSpi;\n+import javax.crypto.KeyAgreement;\n+import javax.crypto.SecretKey;\n@@ -41,1 +65,6 @@\n-import sun.security.util.*;\n+import sun.security.util.ArrayUtil;\n+import sun.security.util.CurveDB;\n+import sun.security.util.ECUtil;\n+import sun.security.util.InternalPrivateKey;\n+import sun.security.util.NamedCurve;\n+import sun.security.util.SliceableSecretKey;\n@@ -406,0 +435,3 @@\n+    \/\/ I2OSP(n, w) as defined in RFC 9180 Section 3.\n+    \/\/ In DHKEM and HPKE, number is always <65536\n+    \/\/ and converted to at most 2 bytes.\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKEM.java","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import sun.security.util.Debug;\n@@ -31,2 +30,14 @@\n-import javax.crypto.*;\n-import javax.crypto.spec.*;\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.CipherSpi;\n+import javax.crypto.DecapsulateException;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.KDF;\n+import javax.crypto.KEM;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.ShortBufferException;\n+import javax.crypto.spec.GCMParameterSpec;\n+import javax.crypto.spec.HKDFParameterSpec;\n+import javax.crypto.spec.HPKEParameterSpec;\n+import javax.crypto.spec.IvParameterSpec;\n@@ -294,1 +305,2 @@\n-                    throw new ProviderException(\"Internal error\", e);\n+                    \/\/ algorithm not accepted by HKDF, L too big or too small\n+                    throw new IllegalArgumentException(\"Invalid input\", e);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKE.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -93,2 +93,2 @@\n-            var mode = tg.get(\"mode\").asString();\n-            if (mode.equals(\"0\") || mode.equals(\"1\")) {\n+            var mode = Integer.parseInt(tg.get(\"mode\").asString());\n+            if (mode == 0 || mode == 1) {\n@@ -104,1 +104,1 @@\n-                if (mode.equals(\"1\")) {\n+                if (mode == 1) {\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/KAT9180.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}