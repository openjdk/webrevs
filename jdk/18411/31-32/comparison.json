{"files":[{"patch":"@@ -69,4 +69,3 @@\n- * To use the HPKE mode {@code mode_auth}, the asymmetric keys for authentication\n- * must be provided using the {@link #authKey(AsymmetricKey)} method. Precisely,\n- * the sender must call this method with its own private key and the recipient\n- * must call it with the sender's public key.\n+ * To support authentication using a pre-shared key ({@code mode_psk}), the\n+ * pre-shared key and its identifier must be provided using the\n+ * {@link #psk(SecretKey, byte[])} method by both sides.\n@@ -74,3 +73,4 @@\n- * To use the HPKE mode {@code mode_psk}, the pre-shared key for authentication\n- * and its identifier must be provided using the {@link #psk(SecretKey, byte[])}\n- * method by both sides.\n+ * To support authentication using an asymmetric Key ({@code mode_auth}),\n+ * the asymmetric keys must be provided using the {@link #authKey(AsymmetricKey)}\n+ * method. Precisely, the sender must call this method with its own private key\n+ * and the recipient must call it with the sender's public key.\n@@ -78,2 +78,3 @@\n- * To use the HPKE mode {@code mode_auth_psk}, both {@link #authKey(AsymmetricKey)}\n- * and {@link #psk(SecretKey, byte[])} methods must be called as described above.\n+ * To support authentication using both a PSK and an asymmetric key\n+ * ({@code mode_auth_psk}), both {@link #authKey(AsymmetricKey)} and\n+ * {@link #psk(SecretKey, byte[])} methods must be called as described above.\n@@ -105,0 +106,1 @@\n+ * <li> The key encapsulation message is not provided on the receiver side.\n@@ -106,2 +108,2 @@\n- * <li> An attempt to use {@code authKey(key)} is made but the selected KEM\n- *      does not support authentication.\n+ * <li> An attempt to use {@code authKey(key)} is made but {@code mode_auth}\n+ *      or {@code mode_auth_psk}) is not supported by the KEM used.\n@@ -109,5 +111,5 @@\n- * After initialization, both the sender and receiver can encrypt or decrypt\n- * multiple plaintexts in sequence using repeated calls to {@code doFinal},\n- * optionally preceded by one or more {@code update} calls. Each {@code doFinal}\n- * call performs a complete HPKE encryption or decryption operation using a\n- * distinct nonce derived from an internal sequence counter, as specified by\n+ * After initialization, both the sender and receiver can process multiple\n+ * messages in sequence with repeated {@code doFinal} calls, optionally preceded\n+ * by one or more {@code updateAAD} and {@code update}. Each {@code doFinal}\n+ * call performs a complete HPKE encryption or decryption operation using\n+ * a distinct nonce derived from an internal sequence counter, as specified by\n@@ -125,1 +127,2 @@\n- * Example:\n+ * This example shows a sender and a receiver using HPKE to securely exchange\n+ * messages with an X25519 key pair.\n@@ -331,0 +334,5 @@\n+     * <p>\n+     * Note: this method does not check whether the KEM supports\n+     * {@code mode_auth} or {@code mode_auth_psk}. If the resulting object is\n+     * used to initialize an HPKE cipher with an unsupported mode, an\n+     * {@code InvalidAlgorithmParameterException} will be thrown at that time.\n@@ -409,1 +417,1 @@\n-    \/\/ Returns a human-readable format of a byte array.\n+    \/\/ Returns a human-readable representation of a byte array.\n@@ -416,3 +424,3 @@\n-                    \/\/ Non-ASCII and control characters are not friendly to human\n-                    \/\/ eyes. `\"` also excluded to avoid character escaping.\n-                    \/\/ Only return HEX format.\n+                    \/\/ Non-ASCII or control characters are hard to read, and\n+                    \/\/ `\"` requires character escaping. If any of these are\n+                    \/\/ present, return only the HEX representation.\n@@ -422,1 +430,2 @@\n-            \/\/ Human-readable. Return both HEX and string formats.\n+            \/\/ Otherwise, all characters are printable and safe.\n+            \/\/ Return both HEX and ASCII representations.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HPKEParameterSpec.java","additions":31,"deletions":22,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        \/\/ key and HPKEParameterSpec using specified algorithm identifiers\n+        \/\/ key and an HPKEParameterSpec using specified algorithm identifiers\n@@ -55,2 +55,2 @@\n-        \/\/ The HPKE recipient side is initialized with its own private key,\n-        \/\/ HPKEParameterSpec using the same algorithm identifiers as used by\n+        \/\/ The HPKE recipient cipher is initialized with its own private key,\n+        \/\/ an HPKEParameterSpec using the same algorithm identifiers as used by\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/snippet-files\/PackageSnippets.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * <code>SecretKey<\/code>\n+ * <code>SecretKey<\/code>.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SliceableSecretKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}