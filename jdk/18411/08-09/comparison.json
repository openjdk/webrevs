{"files":[{"patch":"@@ -29,6 +29,8 @@\n-\/\/\/ An interface for `SecretKey`s that support using its slice as a new\n-\/\/\/ `SecretKey`.\n-\/\/\/\n-\/\/\/ This is mainly used by PKCS #11 implementations that support the\n-\/\/\/ EXTRACT_KEY_FROM_KEY mechanism even if the key itself is sensitive\n-\/\/\/ and non-extractable.\n+\/**\n+ * An interface for <code>SecretKey<\/code>s that support using its slice as a new\n+ * <code>SecretKey<\/code>\n+ * <p>\n+ * This is mainly used by PKCS #11 implementations that support the\n+ * EXTRACT_KEY_FROM_KEY mechanism even if the key itself is sensitive\n+ * and non-extractable.\n+ *\/\n@@ -36,8 +38,12 @@\n-    \/\/\/ Returns a slice as a new `SecretKey`.\n-    \/\/\/\n-    \/\/\/ @param alg the new algorithm name\n-    \/\/\/ @param from the byte offset of the new key in the full key\n-    \/\/\/ @param to the to offset (exclusive) of the new key in the full key\n-    \/\/\/ @return the new key\n-    \/\/\/ @throws ArrayIndexOutOfBoundsException for improper `from` and `to` values\n-    \/\/\/ @throws UnsupportedOperationException if slicing is not supported\n+\n+    \/**\n+     * Returns a slice as a new <code>SecretKey<\/code>.\n+     *\n+     * @param alg the new algorithm name\n+     * @param from the byte offset of the new key in the full key\n+     * @param to the to offset (exclusive) of the new key in the full key\n+     * @return the new key\n+     * @throws ArrayIndexOutOfBoundsException for improper <code>from<\/code>\n+     *      and <code>to<\/code> values\n+     * @throws UnsupportedOperationException if slicing is not supported\n+     *\/\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SliceableSecretKey.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import jdk.test.lib.Utils;\n@@ -88,30 +87,20 @@\n-        Utils.runAndCheckException(\n-                () -> HPKEParameterSpec.of(-1, 0),\n-                IllegalArgumentException.class);\n-        Utils.runAndCheckException(\n-                () -> HPKEParameterSpec.of(0, -1),\n-                IllegalArgumentException.class);\n-        Utils.runAndCheckException(\n-                () -> HPKEParameterSpec.of(65536, 0),\n-                IllegalArgumentException.class);\n-        Utils.runAndCheckException(\n-                () -> HPKEParameterSpec.of(0, 65536),\n-                IllegalArgumentException.class);\n-        Utils.runAndCheckException(\n-                () -> HPKEParameterSpec.of(-1, 0, 0),\n-                IllegalArgumentException.class);\n-        Utils.runAndCheckException(\n-                () -> HPKEParameterSpec.of(0, -1, 0),\n-                IllegalArgumentException.class);\n-        Utils.runAndCheckException(\n-                () -> HPKEParameterSpec.of(0, 0, -1),\n-                IllegalArgumentException.class);\n-        Utils.runAndCheckException(\n-                () -> HPKEParameterSpec.of(65536, 0, 0),\n-                IllegalArgumentException.class);\n-        Utils.runAndCheckException(\n-                () -> HPKEParameterSpec.of(0, 65536, 0),\n-                IllegalArgumentException.class);\n-        Utils.runAndCheckException(\n-                () -> HPKEParameterSpec.of(0, 0, 65536),\n-                IllegalArgumentException.class);\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> HPKEParameterSpec.of(-1, 0));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> HPKEParameterSpec.of(0, -1));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> HPKEParameterSpec.of(65536, 0));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> HPKEParameterSpec.of(0, 65536));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> HPKEParameterSpec.of(-1, 0, 0));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> HPKEParameterSpec.of(0, -1, 0));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> HPKEParameterSpec.of(0, 0, -1));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> HPKEParameterSpec.of(65536, 0, 0));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> HPKEParameterSpec.of(0, 65536, 0));\n+        Asserts.assertThrows(IllegalArgumentException.class,\n+                () -> HPKEParameterSpec.of(0, 0, 65536));\n@@ -125,3 +114,1 @@\n-        Utils.runAndCheckException(\n-                () -> spec.info(null),\n-                NullPointerException.class);\n+        Asserts.assertThrows(NullPointerException.class, () -> spec.info(null));\n@@ -135,3 +122,1 @@\n-        Utils.runAndCheckException(\n-                () -> spec.psk(psk, null),\n-                NullPointerException.class);\n+        Asserts.assertThrows(NullPointerException.class, () -> spec.psk(psk, null));\n@@ -140,6 +125,2 @@\n-        Utils.runAndCheckException(\n-                () -> spec.psk(psk, new byte[0]),\n-                InvalidAlgorithmParameterException.class);\n-        Utils.runAndCheckException(\n-                () -> spec.psk(null, psk_id),\n-                InvalidAlgorithmParameterException.class);\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class, () -> spec.psk(psk, new byte[0]));\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class, () -> spec.psk(null, psk_id));\n@@ -158,10 +139,10 @@\n-        Utils.runAndCheckException(() -> c1.getBlockSize(), IllegalStateException.class);\n-        Utils.runAndCheckException(() -> c1.getOutputSize(100), IllegalStateException.class);\n-        Utils.runAndCheckException(() -> c1.update(new byte[1]), IllegalStateException.class);\n-        Utils.runAndCheckException(() -> c1.update(new byte[1], 0, 1), IllegalStateException.class);\n-        Utils.runAndCheckException(() -> c1.updateAAD(new byte[1]), IllegalStateException.class);\n-        Utils.runAndCheckException(() -> c1.updateAAD(new byte[1], 0, 1), IllegalStateException.class);\n-        Utils.runAndCheckException(() -> c1.doFinal(), IllegalStateException.class);\n-        Utils.runAndCheckException(() -> c1.doFinal(new byte[1]), IllegalStateException.class);\n-        Utils.runAndCheckException(() -> c1.doFinal(new byte[1], 0, 1), IllegalStateException.class);\n-        Utils.runAndCheckException(() -> c1.doFinal(new byte[1], 0, 1, new byte[1024], 0), IllegalStateException.class);\n+        Asserts.assertThrows(IllegalStateException.class, () -> c1.getBlockSize());\n+        Asserts.assertThrows(IllegalStateException.class, () -> c1.getOutputSize(100));\n+        Asserts.assertThrows(IllegalStateException.class, () -> c1.update(new byte[1]));\n+        Asserts.assertThrows(IllegalStateException.class, () -> c1.update(new byte[1], 0, 1));\n+        Asserts.assertThrows(IllegalStateException.class, () -> c1.updateAAD(new byte[1]));\n+        Asserts.assertThrows(IllegalStateException.class, () -> c1.updateAAD(new byte[1], 0, 1));\n+        Asserts.assertThrows(IllegalStateException.class, () -> c1.doFinal());\n+        Asserts.assertThrows(IllegalStateException.class, () -> c1.doFinal(new byte[1]));\n+        Asserts.assertThrows(IllegalStateException.class, () -> c1.doFinal(new byte[1], 0, 1));\n+        Asserts.assertThrows(IllegalStateException.class, () -> c1.doFinal(new byte[1], 0, 1, new byte[1024], 0));\n@@ -175,6 +156,4 @@\n-        Utils.runAndCheckException(\n-                () -> c1.init(Cipher.WRAP_MODE, kp.getPublic()),\n-                UnsupportedOperationException.class);\n-        Utils.runAndCheckException(\n-                () -> c1.init(Cipher.UNWRAP_MODE, kp.getPublic()),\n-                UnsupportedOperationException.class);\n+        Asserts.assertThrows(UnsupportedOperationException.class,\n+                () -> c1.init(Cipher.WRAP_MODE, kp.getPublic()));\n+        Asserts.assertThrows(UnsupportedOperationException.class,\n+                () -> c1.init(Cipher.UNWRAP_MODE, kp.getPublic()));\n@@ -183,3 +162,2 @@\n-        Utils.runAndCheckException(\n-                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPrivate()),\n-                InvalidKeyException.class);\n+        Asserts.assertThrows(InvalidKeyException.class,\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPrivate()));\n@@ -187,1 +165,1 @@\n-        Utils.runAndCheckException(\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n@@ -189,2 +167,1 @@\n-                        HPKEParameterSpec.of().encapsulation(new byte[32])),\n-                InvalidAlgorithmParameterException.class);\n+                        HPKEParameterSpec.of().encapsulation(new byte[32])));\n@@ -193,3 +170,2 @@\n-        Utils.runAndCheckException(\n-                () -> c2.init(Cipher.DECRYPT_MODE, kp.getPublic()),\n-                InvalidKeyException.class);\n+        Asserts.assertThrows(InvalidKeyException.class,\n+                () -> c2.init(Cipher.DECRYPT_MODE, kp.getPublic()));\n@@ -197,3 +173,2 @@\n-        Utils.runAndCheckException(\n-                () -> c2.init(Cipher.DECRYPT_MODE, kp.getPrivate()),\n-                InvalidKeyException.class);\n+        Asserts.assertThrows(InvalidKeyException.class,\n+                () -> c2.init(Cipher.DECRYPT_MODE, kp.getPrivate()));\n@@ -205,12 +180,8 @@\n-        Utils.runAndCheckException(\n-                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), HPKEParameterSpec.of(0, 1, 1)),\n-                InvalidAlgorithmParameterException.class);\n-        Utils.runAndCheckException(\n-                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), HPKEParameterSpec.of(0x200, 1, 1)),\n-                InvalidAlgorithmParameterException.class);\n-        Utils.runAndCheckException(\n-                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), HPKEParameterSpec.of(0x20, 4, 1)),\n-                InvalidAlgorithmParameterException.class);\n-        Utils.runAndCheckException(\n-                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), HPKEParameterSpec.of(0x20, 1, 4)),\n-                InvalidAlgorithmParameterException.class);\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), HPKEParameterSpec.of(0, 1, 1)));\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), HPKEParameterSpec.of(0x200, 1, 1)));\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), HPKEParameterSpec.of(0x20, 4, 1)));\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), HPKEParameterSpec.of(0x20, 1, 4)));\n@@ -219,3 +190,2 @@\n-        Utils.runAndCheckException(\n-                () -> c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(), HPKEParameterSpec.of(0x20, 1, 1)),\n-                InvalidAlgorithmParameterException.class);\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n+                () -> c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(), HPKEParameterSpec.of(0x20, 1, 1)));\n@@ -224,3 +194,2 @@\n-        Utils.runAndCheckException(\n-                () -> c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(), HPKEParameterSpec.of(0x20, 1, 65535)),\n-                InvalidAlgorithmParameterException.class);\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n+                () -> c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(), HPKEParameterSpec.of(0x20, 1, 65535)));\n@@ -258,1 +227,1 @@\n-        Utils.runAndCheckException(\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n@@ -260,3 +229,2 @@\n-                        HPKEParameterSpec.of().authKey(kp2.getPublic())),\n-                InvalidAlgorithmParameterException.class);\n-        Utils.runAndCheckException(\n+                        HPKEParameterSpec.of().authKey(kp2.getPublic())));\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n@@ -264,2 +232,1 @@\n-                        HPKEParameterSpec.of().authKey(kp2.getPrivate())),\n-                InvalidAlgorithmParameterException.class);\n+                        HPKEParameterSpec.of().authKey(kp2.getPrivate())));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Compliance.java","additions":62,"deletions":95,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import jdk.test.lib.Utils;\n@@ -44,1 +43,0 @@\n-import java.util.Objects;\n@@ -46,1 +44,0 @@\n-import java.util.function.Consumer;\n@@ -69,6 +66,4 @@\n-        Utils.runAndCheckException(\n-                () -> new KEM.Encapsulated(null, new byte[0], null),\n-                NullPointerException.class);\n-        Utils.runAndCheckException(\n-                () -> new KEM.Encapsulated(new SecretKeySpec(new byte[1], \"X\"), null, null),\n-                NullPointerException.class);\n+        Asserts.assertThrows(NullPointerException.class,\n+                () -> new KEM.Encapsulated(null, new byte[0], null));\n+        Asserts.assertThrows(NullPointerException.class,\n+                () -> new KEM.Encapsulated(new SecretKeySpec(new byte[1], \"X\"), null, null));\n@@ -89,16 +84,11 @@\n-        Utils.runAndCheckException(\n-                () -> KEM.getInstance(\"OLALA\"),\n-                NoSuchAlgorithmException.class);\n-        Utils.runAndCheckException(\n-                () -> KEM.getInstance(\"DHKEM\", \"NoWhere\"),\n-                NoSuchProviderException.class);\n-        Utils.runAndCheckException(\n-                () -> KEM.getInstance(\"DHKEM\", \"SunRsaSign\"),\n-                NoSuchAlgorithmException.class);\n-\n-        Utils.runAndCheckException(\n-                () -> kem.newEncapsulator(null),\n-                InvalidKeyException.class);\n-        Utils.runAndCheckException(\n-                () -> kem.newDecapsulator(null),\n-                InvalidKeyException.class);\n+        Asserts.assertThrows(NoSuchAlgorithmException.class,\n+                () -> KEM.getInstance(\"OLALA\"));\n+        Asserts.assertThrows(NoSuchProviderException.class,\n+                () -> KEM.getInstance(\"DHKEM\", \"NoWhere\"));\n+        Asserts.assertThrows(NoSuchAlgorithmException.class,\n+                () -> KEM.getInstance(\"DHKEM\", \"SunRsaSign\"));\n+\n+        Asserts.assertThrows(InvalidKeyException.class,\n+                () -> kem.newEncapsulator(null));\n+        Asserts.assertThrows(InvalidKeyException.class,\n+                () -> kem.newDecapsulator(null));\n@@ -107,3 +97,4 @@\n-        Utils.runAndCheckException(\n-                () -> kem.newEncapsulator(badECKey()),\n-                ExChecker.of(InvalidKeyException.class).by(DHKEM.class));\n+        checkThrownBy(Asserts.assertThrows(\n+                InvalidKeyException.class,\n+                () -> kem.newEncapsulator(badECKey())),\n+                DHKEM.class.getName());\n@@ -113,3 +104,4 @@\n-        Utils.runAndCheckException(\n-                () -> kem.newEncapsulator(kpRSA.getPublic()),\n-                ExChecker.of(InvalidKeyException.class).by(KEM.class.getName() + \"$DelayedKEM\"));\n+        checkThrownBy(Asserts.assertThrows(\n+                InvalidKeyException.class,\n+                () -> kem.newEncapsulator(kpRSA.getPublic())),\n+                KEM.class.getName() + \"$DelayedKEM\");\n@@ -117,3 +109,2 @@\n-        Utils.runAndCheckException(\n-                () -> kem.newDecapsulator(kpRSA.getPrivate()),\n-                InvalidKeyException.class);\n+        Asserts.assertThrows(InvalidKeyException.class,\n+                () -> kem.newDecapsulator(kpRSA.getPrivate()));\n@@ -128,9 +119,6 @@\n-        Utils.runAndCheckException(\n-                () -> e2.encapsulate(-1, 12, \"AES\"),\n-                IndexOutOfBoundsException.class);\n-        Utils.runAndCheckException(\n-                () -> e2.encapsulate(0, e2.secretSize() + 1, \"AES\"),\n-                IndexOutOfBoundsException.class);\n-        Utils.runAndCheckException(\n-                () -> e2.encapsulate(0, e2.secretSize(), null),\n-                NullPointerException.class);\n+        Asserts.assertThrows(IndexOutOfBoundsException.class,\n+                () -> e2.encapsulate(-1, 12, \"AES\"));\n+        Asserts.assertThrows(IndexOutOfBoundsException.class,\n+                () -> e2.encapsulate(0, e2.secretSize() + 1, \"AES\"));\n+        Asserts.assertThrows(NullPointerException.class,\n+                () -> e2.encapsulate(0, e2.secretSize(), null));\n@@ -165,12 +153,8 @@\n-        Utils.runAndCheckException(\n-                () -> d.decapsulate(null),\n-                NullPointerException.class);\n-        Utils.runAndCheckException(\n-                () -> d.decapsulate(enc.encapsulation(), -1, 12, \"AES\"),\n-                IndexOutOfBoundsException.class);\n-        Utils.runAndCheckException(\n-                () -> d.decapsulate(enc.encapsulation(), 0, d.secretSize() + 1, \"AES\"),\n-                IndexOutOfBoundsException.class);\n-        Utils.runAndCheckException(\n-                () -> d.decapsulate(enc.encapsulation(), 0, d.secretSize(), null),\n-                NullPointerException.class);\n+        Asserts.assertThrows(NullPointerException.class,\n+                () -> d.decapsulate(null));\n+        Asserts.assertThrows(IndexOutOfBoundsException.class,\n+                () -> d.decapsulate(enc.encapsulation(), -1, 12, \"AES\"));\n+        Asserts.assertThrows(IndexOutOfBoundsException.class,\n+                () -> d.decapsulate(enc.encapsulation(), 0, d.secretSize() + 1, \"AES\"));\n+        Asserts.assertThrows(NullPointerException.class,\n+                () -> d.decapsulate(enc.encapsulation(), 0, d.secretSize(), null));\n@@ -181,3 +165,2 @@\n-        Utils.runAndCheckException(\n-                () -> d3.decapsulate(enc2.encapsulation()),\n-                DecapsulateException.class);\n+        Asserts.assertThrows(DecapsulateException.class,\n+                () -> d3.decapsulate(enc2.encapsulation()));\n@@ -185,3 +168,2 @@\n-        Utils.runAndCheckException(\n-                () -> d3.decapsulate(new byte[100]),\n-                DecapsulateException.class);\n+        Asserts.assertThrows(DecapsulateException.class,\n+                () -> d3.decapsulate(new byte[100]));\n@@ -276,29 +258,3 @@\n-    \/\/ Used by Utils.runAndCheckException. Checks for type and final thrower.\n-    record ExChecker(Class<? extends Throwable> ex, String caller)\n-            implements Consumer<Throwable> {\n-        ExChecker {\n-            Objects.requireNonNull(ex);\n-        }\n-        static ExChecker of(Class<? extends Throwable> ex) {\n-            return new ExChecker(ex, null);\n-        }\n-        ExChecker by(String caller) {\n-            return new ExChecker(ex(), caller);\n-        }\n-        ExChecker by(Class<?> caller) {\n-            return new ExChecker(ex(), caller.getName());\n-        }\n-        @Override\n-        public void accept(Throwable t) {\n-            if (t == null) {\n-                throw new AssertionError(\"no exception thrown\");\n-            } else if (!ex.isAssignableFrom(t.getClass())) {\n-                throw new AssertionError(\"exception thrown is \" + t.getClass());\n-            } else if (caller == null) {\n-                return;\n-            } else if (t.getStackTrace()[0].getClassName().equals(caller)) {\n-                return;\n-            } else {\n-                throw new AssertionError(\"thrown by \" + t.getStackTrace()[0].getClassName());\n-            }\n-        }\n+    \/\/ Ensures `t` is thrown by `caller`\n+    static <T extends Throwable> void checkThrownBy(T t, String caller) {\n+        Asserts.assertEquals(caller, t.getStackTrace()[0].getClassName());\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/DHKEM\/Compliance.java","additions":47,"deletions":91,"binary":false,"changes":138,"status":"modified"}]}