{"files":[{"patch":"@@ -251,1 +251,10 @@\n-            return impl.context.Export(context, algorithm, length);\n+            return impl.context.ExportKey(context, algorithm, length);\n+        }\n+    }\n+\n+    \/\/@Override\n+    protected byte[] engineExportData(byte[] context, int length) {\n+        if (state == BEGIN) {\n+            throw new IllegalStateException(\"State: \" + state);\n+        } else {\n+            return impl.context.ExportData(context, length);\n@@ -327,1 +336,1 @@\n-            SecretKey Export(byte[] exporter_context, String algorithm, int L) {\n+            SecretKey ExportKey(byte[] exporter_context, String algorithm, int L) {\n@@ -336,0 +345,11 @@\n+            }\n+\n+            byte[] ExportData(byte[] exporter_context, int L) {\n+                try {\n+                    var kdf = KDF.getInstance(kdfAlg);\n+                    return kdf.deriveData(DHKEM.labeledExpand(\n+                            exporter_secret, suite_id, SEC, exporter_context, L));\n+                } catch (InvalidAlgorithmParameterException | NoSuchAlgorithmException e) {\n+                    \/\/ algorithm not accepted by HKDF, L too big or too small\n+                    throw new IllegalArgumentException(\"Invalid input\", e);\n+                }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKE.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -48,0 +48,4 @@\n+        if (hspec.kem_id() == -1 || hspec.kdf_id() == -1 || hspec.aead_id() == -1) {\n+            throw new InvalidParameterSpecException(\n+                    \"HPKEParameterSpec algorithm identifiers not specified\");\n+        }\n@@ -88,1 +92,4 @@\n-        return \"HPKE\";\n+        if (spec == null) {\n+            return \"Not initialized\";\n+        }\n+        return spec.toString();\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKEParameters.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.security.AsymmetricKey;\n@@ -32,0 +33,1 @@\n+import java.util.HexFormat;\n@@ -78,3 +80,3 @@\n- * {@link #authKey(Key)} method. Precisely, the sender must call this method\n- * with its own private key and the recipient must call it with the sender's\n- * public key.\n+ * {@link #authKey(AsymmetricKey)} method. Precisely, the sender must call\n+ * this method with its own private key and the recipient must call it with\n+ * the sender's public key.\n@@ -255,1 +257,1 @@\n-    private final Key kS; \/\/ null if not used\n+    private final AsymmetricKey kS; \/\/ null if not used\n@@ -260,1 +262,1 @@\n-            SecretKey psk, byte[] psk_id, Key kS, byte[] encapsulation) {\n+            SecretKey psk, byte[] psk_id, AsymmetricKey kS, byte[] encapsulation) {\n@@ -383,1 +385,1 @@\n-    public HPKEParameterSpec authKey(Key kS) {\n+    public HPKEParameterSpec authKey(AsymmetricKey kS) {\n@@ -433,1 +435,1 @@\n-    public Key authKey() {\n+    public AsymmetricKey authKey() {\n@@ -443,0 +445,12 @@\n+\n+    @Override\n+    public String toString() {\n+        return \"HPKEParameterSpec{\" +\n+                \"kem_id=\" + kem_id +\n+                \", kdf_id=\" + kdf_id +\n+                \", aead_id=\" + aead_id +\n+                \", info=\" + HexFormat.of().formatHex(info) +\n+                \", \" + (psk == null\n+                        ? (kS == null ? \"mode_base\" : \"mode_auth\")\n+                        : (kS == null ? \"mode_psk\" : \"mode_auth_psk\")) + \"}\";\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HPKEParameterSpec.java","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.io.IOException;\n@@ -30,0 +31,1 @@\n+import java.security.AlgorithmParameters;\n@@ -34,0 +36,2 @@\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.NamedParameterSpec;\n@@ -104,0 +108,7 @@\n+        Asserts.assertTrue(defaultParams.toString().contains(\"kem_id=32, kdf_id=1, aead_id=2\"));\n+        Asserts.assertTrue(defaultParams.info(new byte[3]).toString().contains(\"info=000000\"));\n+        Asserts.assertTrue(defaultParams.toString().contains(\"mode_base}\"));\n+        Asserts.assertTrue(defaultParams.psk(psk, psk_id).toString().contains(\"mode_psk}\"));\n+        Asserts.assertTrue(defaultParams.authKey(kp.getPrivate()).toString().contains(\"mode_auth}\"));\n+        Asserts.assertTrue(defaultParams.authKey(kp.getPrivate()).psk(psk, psk_id).toString().contains(\"mode_auth_psk}\"));\n+\n@@ -252,0 +263,16 @@\n+\n+        \/\/ HPKEParameters\n+        var ap = AlgorithmParameters.getInstance(\"HPKE\");\n+        Asserts.assertThrows(IOException.class, () -> ap.init(new byte[100]));\n+        Asserts.assertThrows(InvalidParameterSpecException.class,\n+                () -> ap.init(NamedParameterSpec.X25519));\n+        Asserts.assertThrows(InvalidParameterSpecException.class,\n+                () -> ap.init(emptyParams));\n+        Asserts.assertTrue(ap.toString() == null);\n+\n+        ap.init(defaultParams);\n+        var actual = ap.getParameterSpec(HPKEParameterSpec.class);\n+        Asserts.assertEquals(KEM_DHKEM_X25519_HKDF_SHA256, actual.kem_id());\n+        Asserts.assertEquals(KDF_HKDF_SHA256, actual.kdf_id());\n+        Asserts.assertEquals(AEAD_AES_256_GCM, actual.aead_id());\n+        Asserts.assertEquals(actual.toString(), ap.toString());\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Compliance.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}