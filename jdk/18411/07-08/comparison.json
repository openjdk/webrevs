{"files":[{"patch":"@@ -256,1 +256,1 @@\n-                    case 1 -> {\n+                    case HPKEParameterSpec.AEAD_AES_128_GCM -> {\n@@ -260,1 +260,1 @@\n-                    case 2 -> {\n+                    case HPKEParameterSpec.AEAD_AES_256_GCM -> {\n@@ -264,1 +264,1 @@\n-                    case 3 -> {\n+                    case HPKEParameterSpec.AEAD_CHACHA20_POLY1305 -> {\n@@ -268,1 +268,1 @@\n-                    case 65535 -> {\n+                    case HPKEParameterSpec.EXPORT_ONLY -> {\n@@ -283,1 +283,1 @@\n-                if (id == 3) {\n+                if (id == HPKEParameterSpec.AEAD_CHACHA20_POLY1305) {\n@@ -439,3 +439,6 @@\n-                if ((!ECUtil.equals(ecp, CurveDB.P_256) || kem_id != 0x10)\n-                        && (!ECUtil.equals(ecp, CurveDB.P_384) || kem_id != 0x11)\n-                        && (!ECUtil.equals(ecp, CurveDB.P_521) || kem_id != 0x12)) {\n+                if ((!ECUtil.equals(ecp, CurveDB.P_256)\n+                        || kem_id != HPKEParameterSpec.KEM_DHKEM_P_256_HKDF_SHA256)\n+                        && (!ECUtil.equals(ecp, CurveDB.P_384)\n+                        || kem_id != HPKEParameterSpec.KEM_DHKEM_P_384_HKDF_SHA384)\n+                        && (!ECUtil.equals(ecp, CurveDB.P_521)\n+                        || kem_id != HPKEParameterSpec.KEM_DHKEM_P_521_HKDF_SHA512)) {\n@@ -448,2 +451,4 @@\n-                if ((!name.equalsIgnoreCase(\"x25519\") || kem_id != 0x20)\n-                        && (!name.equalsIgnoreCase(\"x448\") || kem_id != 0x21)) {\n+                if ((!name.equalsIgnoreCase(\"x25519\")\n+                        || kem_id != HPKEParameterSpec.KEM_DHKEM_X25519_HKDF_SHA256)\n+                        && (!name.equalsIgnoreCase(\"x448\")\n+                        || kem_id != HPKEParameterSpec.KEM_DHKEM_X448_HKDF_SHA512)) {\n@@ -471,1 +476,1 @@\n-                    return 0x10;\n+                    return HPKEParameterSpec.KEM_DHKEM_P_256_HKDF_SHA256;\n@@ -473,1 +478,1 @@\n-                    return 0x11;\n+                    return HPKEParameterSpec.KEM_DHKEM_P_384_HKDF_SHA384;\n@@ -475,1 +480,1 @@\n-                    return 0x12;\n+                    return HPKEParameterSpec.KEM_DHKEM_P_521_HKDF_SHA512;\n@@ -479,1 +484,1 @@\n-                    return 0x20;\n+                    return HPKEParameterSpec.KEM_DHKEM_X25519_HKDF_SHA256;\n@@ -481,1 +486,1 @@\n-                    return 0x21;\n+                    return HPKEParameterSpec.KEM_DHKEM_X448_HKDF_SHA512;\n@@ -489,6 +494,15 @@\n-            if (p.kem_id() == -1) {\n-                int kem_id = kemIdFromKey(key);\n-                int kdf_id = switch (kem_id) {\n-                    case 0x10, 0x20 -> 0x1;\n-                    case 0x11 -> 0x2;\n-                    case 0x12, 0x21 -> 0x3;\n+            if (p.kem_id() == -1 || p.kdf_id() == -1 || p.aead_id() == -1) {\n+                var kem_id = p.kem_id() != -1\n+                        ? p.kem_id()\n+                        : kemIdFromKey(key);\n+                var kdf_id = p.kdf_id() != -1\n+                        ? p.kdf_id()\n+                        : switch (kem_id) {\n+                    case HPKEParameterSpec.KEM_DHKEM_P_256_HKDF_SHA256,\n+                         HPKEParameterSpec.KEM_DHKEM_X25519_HKDF_SHA256\n+                            -> HPKEParameterSpec.KDF_HKDF_SHA256;\n+                    case HPKEParameterSpec.KEM_DHKEM_P_384_HKDF_SHA384\n+                            -> HPKEParameterSpec.KDF_HKDF_SHA384;\n+                    case HPKEParameterSpec.KEM_DHKEM_P_521_HKDF_SHA512,\n+                         HPKEParameterSpec.KEM_DHKEM_X448_HKDF_SHA512\n+                            -> HPKEParameterSpec.KDF_HKDF_SHA512;\n@@ -497,1 +511,3 @@\n-                int aead_id = 0x2;\n+                var aead_id = p.aead_id() != -1\n+                        ? p.aead_id()\n+                        : HPKEParameterSpec.AEAD_AES_256_GCM;\n@@ -513,3 +529,3 @@\n-                case 1 -> \"HKDF-SHA256\";\n-                case 2 -> \"HKDF-SHA384\";\n-                case 3 -> \"HKDF-SHA512\";\n+                case HPKEParameterSpec.KDF_HKDF_SHA256 -> \"HKDF-SHA256\";\n+                case HPKEParameterSpec.KDF_HKDF_SHA384 -> \"HKDF-SHA384\";\n+                case HPKEParameterSpec.KDF_HKDF_SHA512 -> \"HKDF-SHA512\";\n@@ -519,3 +535,3 @@\n-                case 1 -> 32;\n-                case 2 -> 48;\n-                case 3 -> 64;\n+                case HPKEParameterSpec.KDF_HKDF_SHA256 -> 32;\n+                case HPKEParameterSpec.KDF_HKDF_SHA384 -> 48;\n+                case HPKEParameterSpec.KDF_HKDF_SHA512 -> 64;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKE.java","additions":44,"deletions":28,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -54,0 +54,3 @@\n+ * <li> {@link #of(int, int)} creates an instance with explicitly specified\n+ * KDF, and AEAD algorithm identifiers, but the KEM algorithm identifier will be\n+ * determined by the implementation based on the key provided to {@code init()}.\n@@ -188,3 +191,75 @@\n-    private final int kem_id; \/\/ 0 is determined by key later\n-    private final int kdf_id; \/\/ 0 is determined by key later\n-    private final int aead_id; \/\/ 0 is determined by key later\n+    \/**\n+     * KEM algorithm identifier for DHKEM(P-256, HKDF-SHA256) as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-encapsulation-mechanism\">Section 7.1 of RFC 9180<\/a>.\n+     *\/\n+    public static final int KEM_DHKEM_P_256_HKDF_SHA256 = 0x10;\n+\n+    \/**\n+     * KEM algorithm identifier for DHKEM(P-384, HKDF-SHA384) as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-encapsulation-mechanism\">Section 7.1 of RFC 9180<\/a>.\n+     *\/\n+    public static final int KEM_DHKEM_P_384_HKDF_SHA384 = 0x11;\n+\n+    \/**\n+     * KEM algorithm identifier for DHKEM(P-521, HKDF-SHA512) as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-encapsulation-mechanism\">Section 7.1 of RFC 9180<\/a>.\n+     *\/\n+    public static final int KEM_DHKEM_P_521_HKDF_SHA512 = 0x12;\n+\n+    \/**\n+     * KEM algorithm identifier for DHKEM(X25519, HKDF-SHA256) as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-encapsulation-mechanism\">Section 7.1 of RFC 9180<\/a>.\n+     *\/\n+    public static final int KEM_DHKEM_X25519_HKDF_SHA256 = 0x20;\n+\n+    \/**\n+     * KEM algorithm identifier for DHKEM(X448, HKDF-SHA512) as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-encapsulation-mechanism\">Section 7.1 of RFC 9180<\/a>.\n+     *\/\n+    public static final int KEM_DHKEM_X448_HKDF_SHA512 = 0x21;\n+\n+    \/**\n+     * KDF algorithm identifier for HKDF-SHA256 as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-derivation-functions-kd\">Section 7.2 of RFC 9180<\/a>.\n+     *\/\n+    public static final int KDF_HKDF_SHA256 = 0x1;\n+\n+    \/**\n+     * KDF algorithm identifier for HKDF-SHA384 as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-derivation-functions-kd\">Section 7.2 of RFC 9180<\/a>.\n+     *\/\n+    public static final int KDF_HKDF_SHA384 = 0x2;\n+\n+    \/**\n+     * KDF algorithm identifier for HKDF-SHA512 as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-derivation-functions-kd\">Section 7.2 of RFC 9180<\/a>.\n+     *\/\n+    public static final int KDF_HKDF_SHA512 = 0x3;\n+\n+    \/**\n+     * AEAD algorithm identifier for AES-128-GCM as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-authenticated-encryption-wi\">Section 7.3 of RFC 9180<\/a>.\n+     *\/\n+    public static final int AEAD_AES_128_GCM = 0x1;\n+\n+    \/**\n+     * AEAD algorithm identifier for AES-256-GCM as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-authenticated-encryption-wi\">Section 7.3 of RFC 9180<\/a>.\n+     *\/\n+    public static final int AEAD_AES_256_GCM = 0x2;\n+\n+    \/**\n+     * AEAD algorithm identifier for ChaCha20Poly1305 as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-authenticated-encryption-wi\">Section 7.3 of RFC 9180<\/a>.\n+     *\/\n+    public static final int AEAD_CHACHA20_POLY1305 = 0x3;\n+\n+    \/**\n+     * AEAD algorithm identifier for Export-only as defined in\n+     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-authenticated-encryption-wi\">Section 7.3 of RFC 9180<\/a>.\n+     *\/\n+    public static final int EXPORT_ONLY = 0xffff;\n+\n+    private final int kem_id; \/\/ -1 is determined by key later\n+    private final int kdf_id; \/\/ -1 is determined by key later\n+    private final int aead_id; \/\/ -1 is determined by key later\n@@ -223,0 +298,23 @@\n+    \/**\n+     * A factory method to create a new {@code HPKEParameterSpec} object with\n+     * specified KDF, and AEAD algorithm identifiers in {@code mode_base}\n+     * mode with an empty {@code info}. The KEM algorithm identifier is not\n+     * specified and will be determined by the key used in cipher initialization.\n+     *\n+     * @param kdf_id identifier for KDF, must be between 0 and 65535 (inclusive)\n+     * @param aead_id identifier for AEAD, must be between 0 and 65535 (inclusive)\n+     * @return a new {@code HPKEParameterSpec} object\n+     * @throws IllegalArgumentException if any input value\n+     *      is out of range (must be between 0 and 65535, inclusive).\n+     *\/\n+    public static HPKEParameterSpec of(int kdf_id, int aead_id) {\n+        if (kdf_id < 0 || kdf_id > 65535) {\n+            throw new IllegalArgumentException(\"Invalid kdf_id: \" + kdf_id);\n+        }\n+        if (aead_id < 0 || aead_id > 65535) {\n+            throw new IllegalArgumentException(\"Invalid aead_id: \" + aead_id);\n+        }\n+        return new HPKEParameterSpec(-1, kdf_id, aead_id,\n+                new byte[0], null, new byte[0], null, null);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HPKEParameterSpec.java","additions":101,"deletions":3,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\/\/\/ An interface for `SecretKey`s that supports using its slice as a new\n+\/\/\/ An interface for `SecretKey`s that support using its slice as a new\n@@ -32,1 +32,1 @@\n-\/\/\/ This is mainly used by PKCS #11 implementations that supports the\n+\/\/\/ This is mainly used by PKCS #11 implementations that support the\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SliceableSecretKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.security.KeyPair;\n@@ -65,1 +66,0 @@\n-        Asserts.assertEQ(spec2.kdf_id(), 0);\n@@ -67,0 +67,1 @@\n+        Asserts.assertEQ(spec2.kdf_id(), 0);\n@@ -74,1 +75,1 @@\n-        HPKEParameterSpec.of(65535, 65535, 65535);\n+        var spec3 = HPKEParameterSpec.of(0, 0);\n@@ -76,1 +77,23 @@\n-        \/\/ Cannot provide zero identifiers\n+        HPKEParameterSpec.of(65535, 65535, 65535);\n+        Asserts.assertEQ(spec3.kem_id(), -1);\n+        Asserts.assertEQ(spec3.kdf_id(), 0);\n+        Asserts.assertEQ(spec3.aead_id(), 0);\n+        Asserts.assertEQ(spec3.authKey(), null);\n+        Asserts.assertEQ(spec3.encapsulation(), null);\n+        Asserts.assertEqualsByteArray(spec3.info(), new byte[0]);\n+        Asserts.assertEQ(spec3.psk(), null);\n+        Asserts.assertEqualsByteArray(spec3.psk_id(), new byte[0]);\n+\n+        \/\/ identifiers must be in range\n+        Utils.runAndCheckException(\n+                () -> HPKEParameterSpec.of(-1, 0),\n+                IllegalArgumentException.class);\n+        Utils.runAndCheckException(\n+                () -> HPKEParameterSpec.of(0, -1),\n+                IllegalArgumentException.class);\n+        Utils.runAndCheckException(\n+                () -> HPKEParameterSpec.of(65536, 0),\n+                IllegalArgumentException.class);\n+        Utils.runAndCheckException(\n+                () -> HPKEParameterSpec.of(0, 65536),\n+                IllegalArgumentException.class);\n@@ -228,0 +251,4 @@\n+        checkEncryptDecrypt(kp,\n+                HPKEParameterSpec.of().info(info).psk(psk, psk_id),\n+                HPKEParameterSpec.of().info(info).psk(psk, psk_id));\n+\n@@ -229,11 +256,0 @@\n-        c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(),\n-                HPKEParameterSpec.of()\n-                        .info(info)\n-                        .psk(psk, psk_id));\n-        c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(),\n-                HPKEParameterSpec.of()\n-                        .info(info)\n-                        .psk(psk, psk_id)\n-                        .encapsulation(c1.getIV()));\n-        ct = c1.doFinal(new byte[2]);\n-        Asserts.assertEqualsByteArray(c2.doFinal(ct), new byte[2]);\n@@ -252,3 +268,38 @@\n-        c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(),\n-                        HPKEParameterSpec.of().authKey(kp2.getPrivate()));\n-        ct = c1.doFinal(new byte[2]);\n+        checkEncryptDecrypt(kp,\n+                HPKEParameterSpec.of().authKey(kp2.getPrivate()),\n+                HPKEParameterSpec.of().authKey(kp2.getPublic()));\n+\n+        \/\/ check default values\n+        checkEncryptDecrypt(kp,\n+                HPKEParameterSpec.of(),\n+                HPKEParameterSpec.of(\n+                        HPKEParameterSpec.KEM_DHKEM_X25519_HKDF_SHA256,\n+                        HPKEParameterSpec.KDF_HKDF_SHA256,\n+                        HPKEParameterSpec.AEAD_AES_256_GCM));\n+\n+        checkEncryptDecrypt(kp,\n+                HPKEParameterSpec.of(),\n+                HPKEParameterSpec.of(\n+                        HPKEParameterSpec.KDF_HKDF_SHA256,\n+                        HPKEParameterSpec.AEAD_AES_256_GCM));\n+\n+        checkEncryptDecrypt(kp,\n+                HPKEParameterSpec.of(),\n+                HPKEParameterSpec.of().info(new byte[0]));\n+\n+        checkEncryptDecrypt(kp,\n+                HPKEParameterSpec.of(),\n+                HPKEParameterSpec.of().psk(null, new byte[0]));\n+    }\n+\n+    static void checkEncryptDecrypt(KeyPair kp, HPKEParameterSpec ps,\n+            HPKEParameterSpec pr) throws Exception {\n+\n+        var c1 = Cipher.getInstance(\"HPKE\");\n+        var c2 = Cipher.getInstance(\"HPKE\");\n+        var aad = \"AAD\".getBytes(StandardCharsets.UTF_8);\n+\n+        c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), ps);\n+        c1.updateAAD(aad);\n+        var ct = c1.doFinal(new byte[2]);\n+\n@@ -256,2 +307,2 @@\n-                        HPKEParameterSpec.of().authKey(kp2.getPublic())\n-                                .encapsulation(c1.getIV()));\n+                pr.encapsulation(c1.getIV()));\n+        c2.updateAAD(aad);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Compliance.java","additions":70,"deletions":19,"binary":false,"changes":89,"status":"modified"}]}