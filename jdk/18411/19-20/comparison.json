{"files":[{"patch":"@@ -59,3 +59,0 @@\n- * This class has defined constants for the standard algorithm identifiers.\n- * For example, {@link #KEM_DHKEM_P_256_HKDF_SHA256}, {@link #KDF_HKDF_SHA256},\n- * and {@link #AEAD_AES_128_GCM}.\n@@ -87,5 +84,3 @@\n- * retrieved directly using the {@link Cipher#getIV()} method, or from the\n- * {@code HPKEParameterSpec} object contained in the returned value of the\n- * {@link Cipher#getParameters} method. On the recipient side, the key\n- * encapsulation message must be provided using the {@link #encapsulation(byte[])}\n- * method.\n+ * retrieved directly using the {@link Cipher#getIV()} method. On the recipient\n+ * side, the key encapsulation message must be provided using the\n+ * {@link #encapsulation(byte[])} method.\n@@ -104,4 +99,3 @@\n- * key type, an {@code InvalidKeyException} should be thrown. If an\n- * {@code HPKEParameterSpec} is provided but it is not supported by any HPKE\n- * implementation, an {@code InvalidAlgorithmParameterException} will be thrown.\n- * For example:\n+ * key type, an {@code InvalidKeyException} should be thrown. If the provided\n+ * {@code HPKEParameterSpec} is not supported by any HPKE implementation,\n+ * an {@code InvalidAlgorithmParameterException} will be thrown. For example:\n@@ -109,1 +103,1 @@\n- * <li> The algorithm identifiers do not match the provided key type.\n+ * <li> An algorithm identifier is unsupported or does not match the provided key type.\n@@ -118,0 +112,7 @@\n+ * @implNote This class has defined constants for some of the standard algorithm\n+ * identifiers. For example, {@link #KEM_DHKEM_P_256_HKDF_SHA256},\n+ * {@link #KDF_HKDF_SHA256}, and {@link #AEAD_AES_128_GCM}. An implementation\n+ * may support all, some, or none of the algorithm identifiers defined here.\n+ * It may also support additional identifiers not listed here, including private\n+ * or experimental values.\n+ *\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HPKEParameterSpec.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -35,4 +35,0 @@\n-        int kem_id = HPKEParameterSpec.KEM_DHKEM_X25519_HKDF_SHA256;\n-        int kdf_id = HPKEParameterSpec.KDF_HKDF_SHA256;\n-        int aead_id = HPKEParameterSpec.AEAD_AES_128_GCM;\n-\n@@ -47,1 +43,4 @@\n-        HPKEParameterSpec ps = HPKEParameterSpec.of(kem_id, kdf_id, aead_id)\n+        HPKEParameterSpec ps = HPKEParameterSpec.of(\n+                        HPKEParameterSpec.KEM_DHKEM_X25519_HKDF_SHA256,\n+                        HPKEParameterSpec.KDF_HKDF_SHA256,\n+                        HPKEParameterSpec.AEAD_AES_128_GCM)\n@@ -58,1 +57,4 @@\n-        HPKEParameterSpec pr = HPKEParameterSpec.of(kem_id, kdf_id, aead_id)\n+        HPKEParameterSpec pr = HPKEParameterSpec.of(\n+                        HPKEParameterSpec.KEM_DHKEM_X25519_HKDF_SHA256,\n+                        HPKEParameterSpec.KDF_HKDF_SHA256,\n+                        HPKEParameterSpec.AEAD_AES_128_GCM)\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/snippet-files\/PackageSnippets.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"}]}