{"files":[{"patch":"@@ -350,1 +350,2 @@\n-                        throw new RuntimeException();\n+                        \/\/ So unlucky and should not happen\n+                        throw new ProviderException(\"DeriveKeyPairError\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKEM.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -171,1 +171,2 @@\n-        throw new InvalidAlgorithmParameterException();\n+        throw new InvalidAlgorithmParameterException(\n+                \"Does not support init from AlgorithmParameters\");\n@@ -271,1 +272,2 @@\n-                    default -> throw new InvalidAlgorithmParameterException();\n+                    default -> throw new InvalidAlgorithmParameterException(\n+                            \"Unknown aead_id: \" + id);\n@@ -274,1 +276,1 @@\n-                throw new ProviderException(e);\n+                throw new ProviderException(\"Internal error\", e);\n@@ -287,1 +289,1 @@\n-                throw new ProviderException(e);\n+                throw new ProviderException(\"Internal error\", e);\n@@ -462,1 +464,1 @@\n-                throw new ProviderException(e);\n+                throw new ProviderException(\"Internal error\", e);\n@@ -466,1 +468,1 @@\n-        private int paramsFromKey(AsymmetricKey k) throws InvalidKeyException {\n+        private int kemIdFromKey(AsymmetricKey k) throws InvalidKeyException {\n@@ -488,2 +490,2 @@\n-            if (p.kem_id() == 0) {\n-                int kem_id = paramsFromKey(key);\n+            if (p.kem_id() == -1) {\n+                int kem_id = kemIdFromKey(key);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKE.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -56,2 +56,1 @@\n- * and AEAD algorithms are determined by the specified numeric identifiers,\n- * which must not be zero.\n+ * and AEAD algorithms are determined by the specified numeric identifiers.\n@@ -60,3 +59,3 @@\n- * \"AEAD algorithm identifiers\" refer to the numeric values (for example,\n- * {@code kem_id}, {@code kdf_id}, and {@code aead_id}) as defined in\n- * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#section-7\">Section 7<\/a>\n+ * \"AEAD algorithm identifiers\" refer to their respective numeric values\n+ * (specifically, {@code kem_id}, {@code kdf_id}, and {@code aead_id}) as\n+ * defined in <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#section-7\">Section 7<\/a>\n@@ -221,1 +220,2 @@\n-        return new HPKEParameterSpec(0, 0, 0, new byte[0], null, new byte[0], null, null);\n+        return new HPKEParameterSpec(-1, -1, -1,\n+                new byte[0], null, new byte[0], null, null);\n@@ -229,3 +229,3 @@\n-     * @param kem_id identifier for KEM, must not be zero\n-     * @param kdf_id identifier for KDF, must not be zero\n-     * @param aead_id identifier for AEAD, must not be zero\n+     * @param kem_id identifier for KEM, must be between 0 and 65535 (inclusive)\n+     * @param kdf_id identifier for KDF, must be between 0 and 65535 (inclusive)\n+     * @param aead_id identifier for AEAD, must be between 0 and 65535 (inclusive)\n@@ -233,2 +233,2 @@\n-     * @throws InvalidAlgorithmParameterException if any of the provided\n-     *      identifiers is zero\n+     * @throws IllegalArgumentException if any input value\n+     *      is out of range (must be between 0 and 65535, inclusive).\n@@ -236,6 +236,9 @@\n-    public static HPKEParameterSpec of(int kem_id, int kdf_id, int aead_id)\n-            throws InvalidAlgorithmParameterException {\n-        if (kem_id < 1 || kem_id > 65535\n-                || kdf_id < 1 || kdf_id > 65535\n-                || aead_id < 1 || aead_id > 65535) {\n-            throw new InvalidAlgorithmParameterException();\n+    public static HPKEParameterSpec of(int kem_id, int kdf_id, int aead_id) {\n+        if (kem_id < 0 || kem_id > 65535) {\n+            throw new IllegalArgumentException(\"Invalid kem_id: \" + kem_id);\n+        }\n+        if (kdf_id < 0 || kdf_id > 65535) {\n+            throw new IllegalArgumentException(\"Invalid kdf_id: \" + kdf_id);\n+        }\n+        if (aead_id < 0 || aead_id > 65535) {\n+            throw new IllegalArgumentException(\"Invalid aead_id: \" + aead_id);\n@@ -255,0 +258,1 @@\n+     *      If set to empty, the previous info is cleared.\n@@ -325,1 +329,1 @@\n-     * {@return the identifier for KEM, 0 if determined by key type}\n+     * {@return the identifier for KEM, -1 if unspecified}\n@@ -332,1 +336,1 @@\n-     * {@return the identifier for KDF, 0 if determined by key type}\n+     * {@return the identifier for KDF, -1 if unspecified}\n@@ -339,1 +343,1 @@\n-     * {@return the identifier for AEAD, 0 if determined by key type}\n+     * {@return the identifier for AEAD, -1 if unspecified}\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HPKEParameterSpec.java","additions":24,"deletions":20,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.Arrays;\n@@ -55,3 +54,3 @@\n-        Asserts.assertEQ(spec.kdf_id(), 0);\n-        Asserts.assertEQ(spec.kem_id(), 0);\n-        Asserts.assertEQ(spec.aead_id(), 0);\n+        Asserts.assertEQ(spec.kem_id(), -1);\n+        Asserts.assertEQ(spec.kdf_id(), -1);\n+        Asserts.assertEQ(spec.aead_id(), -1);\n@@ -60,1 +59,1 @@\n-        Asserts.assertTrue(Arrays.equals(spec.info(), new byte[0]));\n+        Asserts.assertEqualsByteArray(spec.info(), new byte[0]);\n@@ -62,1 +61,1 @@\n-        Asserts.assertTrue(Arrays.equals(spec.psk_id(), new byte[0]));\n+        Asserts.assertEqualsByteArray(spec.psk_id(), new byte[0]);\n@@ -65,4 +64,4 @@\n-        var spec2 = HPKEParameterSpec.of(1, 1, 1);\n-        Asserts.assertEQ(spec2.kdf_id(), 1);\n-        Asserts.assertEQ(spec2.kem_id(), 1);\n-        Asserts.assertEQ(spec2.aead_id(), 1);\n+        var spec2 = HPKEParameterSpec.of(0, 0, 0);\n+        Asserts.assertEQ(spec2.kdf_id(), 0);\n+        Asserts.assertEQ(spec2.kem_id(), 0);\n+        Asserts.assertEQ(spec2.aead_id(), 0);\n@@ -71,1 +70,1 @@\n-        Asserts.assertTrue(Arrays.equals(spec2.info(), new byte[0]));\n+        Asserts.assertEqualsByteArray(spec2.info(), new byte[0]);\n@@ -73,1 +72,1 @@\n-        Asserts.assertTrue(Arrays.equals(spec2.psk_id(), new byte[0]));\n+        Asserts.assertEqualsByteArray(spec2.psk_id(), new byte[0]);\n@@ -79,2 +78,2 @@\n-                () -> HPKEParameterSpec.of(0, 1, 1),\n-                InvalidAlgorithmParameterException.class);\n+                () -> HPKEParameterSpec.of(-1, 0, 0),\n+                IllegalArgumentException.class);\n@@ -82,2 +81,2 @@\n-                () -> HPKEParameterSpec.of(1, 0, 1),\n-                InvalidAlgorithmParameterException.class);\n+                () -> HPKEParameterSpec.of(0, -1, 0),\n+                IllegalArgumentException.class);\n@@ -85,2 +84,11 @@\n-                () -> HPKEParameterSpec.of(1, 1, 0),\n-                InvalidAlgorithmParameterException.class);\n+                () -> HPKEParameterSpec.of(0, 0, -1),\n+                IllegalArgumentException.class);\n+        Utils.runAndCheckException(\n+                () -> HPKEParameterSpec.of(65536, 0, 0),\n+                IllegalArgumentException.class);\n+        Utils.runAndCheckException(\n+                () -> HPKEParameterSpec.of(0, 65536, 0),\n+                IllegalArgumentException.class);\n+        Utils.runAndCheckException(\n+                () -> HPKEParameterSpec.of(0, 0, 65536),\n+                IllegalArgumentException.class);\n@@ -97,1 +105,1 @@\n-        Asserts.assertTrue(Arrays.equals(spec.info(info).info(), info));\n+        Asserts.assertEqualsByteArray(spec.info(info).info(), info);\n@@ -100,1 +108,1 @@\n-        Asserts.assertTrue(Arrays.equals(spec.encapsulation(info).encapsulation(), info));\n+        Asserts.assertEqualsByteArray(spec.encapsulation(info).encapsulation(), info);\n@@ -116,2 +124,2 @@\n-        Asserts.assertTrue(Arrays.equals(spec.psk(psk, psk_id).psk().getEncoded(), psk.getEncoded()));\n-        Asserts.assertTrue(Arrays.equals(spec.psk(psk, psk_id).psk_id(), psk_id));\n+        Asserts.assertEqualsByteArray(spec.psk(psk, psk_id).psk().getEncoded(), psk.getEncoded());\n+        Asserts.assertEqualsByteArray(spec.psk(psk, psk_id).psk_id(), psk_id);\n@@ -119,1 +127,1 @@\n-        Asserts.assertTrue(Arrays.equals(spec.psk(null, new byte[0]).psk_id(), new byte[0]));\n+        Asserts.assertEqualsByteArray(spec.psk(null, new byte[0]).psk_id(), new byte[0]);\n@@ -174,0 +182,3 @@\n+        Utils.runAndCheckException(\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), HPKEParameterSpec.of(0, 1, 1)),\n+                InvalidAlgorithmParameterException.class);\n@@ -203,1 +214,3 @@\n-        c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(), HPKEParameterSpec.of().encapsulation(c1.getIV()));\n+        c2.init(Cipher.DECRYPT_MODE, kp.getPrivate(),\n+                HPKEParameterSpec.of().encapsulation(c1.getIV()));\n+        Asserts.assertEQ(c2.getIV(), null);\n@@ -207,1 +220,1 @@\n-        Asserts.assertTrue(Arrays.equals(c2.doFinal(ct), new byte[2]));\n+        Asserts.assertEqualsByteArray(c2.doFinal(ct), new byte[2]);\n@@ -212,1 +225,1 @@\n-        Asserts.assertTrue(Arrays.equals(c2.doFinal(), new byte[2]));\n+        Asserts.assertEqualsByteArray(c2.doFinal(), new byte[2]);\n@@ -226,1 +239,1 @@\n-        Asserts.assertTrue(Arrays.equals(c2.doFinal(ct), new byte[2]));\n+        Asserts.assertEqualsByteArray(c2.doFinal(ct), new byte[2]);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Compliance.java","additions":40,"deletions":27,"binary":false,"changes":67,"status":"modified"}]}