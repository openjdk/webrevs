{"files":[{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.crypto.provider;\n-\n-import javax.crypto.spec.HPKEParameterSpec;\n-import java.io.IOException;\n-import java.security.AlgorithmParametersSpi;\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.security.spec.InvalidParameterSpecException;\n-\n-\/**\n- * This AlgorithmParametersSpi only supports HPKEParameterSpec.\n- * There is no ASN.1 format defined.\n- *\/\n-public class HPKEParameters extends AlgorithmParametersSpi {\n-\n-    private HPKEParameterSpec spec;\n-\n-    @Override\n-    protected void engineInit(AlgorithmParameterSpec paramSpec)\n-            throws InvalidParameterSpecException {\n-        if (!(paramSpec instanceof HPKEParameterSpec hspec)) {\n-            throw new InvalidParameterSpecException(\"Not an HPKEParameterSpec\");\n-        }\n-        if (hspec.kem_id() == -1 || hspec.kdf_id() == -1 || hspec.aead_id() == -1) {\n-            throw new InvalidParameterSpecException(\n-                    \"HPKEParameterSpec algorithm identifiers not specified\");\n-        }\n-        this.spec = hspec;\n-    }\n-\n-    @Override\n-    protected void engineInit(byte[] params) throws IOException {\n-        throw new IOException(\n-                \"HPKE does not support parameters as a byte array.\");\n-    }\n-\n-    @Override\n-    protected void engineInit(byte[] params, String format) throws IOException {\n-        throw new IOException(\n-                \"HPKE does not support parameters as a byte array.\");\n-    }\n-\n-    @Override\n-    protected <T extends AlgorithmParameterSpec> T engineGetParameterSpec(\n-            Class<T> paramSpec) throws InvalidParameterSpecException {\n-\n-        if (paramSpec.isAssignableFrom(HPKEParameterSpec.class)) {\n-            return paramSpec.cast(spec);\n-        }\n-        throw new InvalidParameterSpecException(\n-                \"Only HPKEParameterSpec supported.\");\n-    }\n-\n-    @Override\n-    protected byte[] engineGetEncoded() throws IOException {\n-        throw new IOException(\n-                \"HPKE does not support parameters as a byte array.\");\n-    }\n-\n-    @Override\n-    protected byte[] engineGetEncoded(String format) throws IOException {\n-        throw new IOException(\n-                \"HPKE does not support parameters as a byte array.\");\n-    }\n-\n-    @Override\n-    protected String engineToString() {\n-        if (spec == null) {\n-            return \"Not initialized\";\n-        }\n-        return spec.toString();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKEParameters.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -372,2 +372,0 @@\n-        ps(\"AlgorithmParameters\", \"HPKE\", \"com.sun.crypto.provider.HPKEParameters\");\n-\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SunJCE.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -248,14 +248,0 @@\n-\n-        \/\/ HPKEParameters\n-        var ap = AlgorithmParameters.getInstance(\"HPKE\");\n-        Asserts.assertThrows(IOException.class, () -> ap.init(new byte[100]));\n-        Asserts.assertThrows(InvalidParameterSpecException.class,\n-                () -> ap.init(NamedParameterSpec.X25519));\n-        Asserts.assertTrue(ap.toString() == null);\n-\n-        ap.init(spec);\n-        var actual = ap.getParameterSpec(HPKEParameterSpec.class);\n-        Asserts.assertEquals(KEM_DHKEM_X25519_HKDF_SHA256, actual.kem_id());\n-        Asserts.assertEquals(KDF_HKDF_SHA256, actual.kdf_id());\n-        Asserts.assertEquals(AEAD_AES_256_GCM, actual.aead_id());\n-        Asserts.assertEquals(actual.toString(), ap.toString());\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Compliance.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}