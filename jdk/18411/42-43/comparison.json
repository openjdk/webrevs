{"files":[{"patch":"@@ -397,1 +397,1 @@\n-                checkMatch(pk, params.kem_id());\n+                checkMatch(false, pk, params.kem_id());\n@@ -403,0 +403,1 @@\n+                    checkMatch(true, skS, params.kem_id());\n@@ -416,1 +417,1 @@\n-                checkMatch(sk, params.kem_id());\n+                checkMatch(false, sk, params.kem_id());\n@@ -427,0 +428,1 @@\n+                        checkMatch(true, pkS, params.kem_id());\n@@ -448,1 +450,1 @@\n-        private static void checkMatch(AsymmetricKey k, int kem_id)\n+        private static void checkMatch(boolean inSpec, AsymmetricKey k, int kem_id)\n@@ -472,2 +474,6 @@\n-                throw new InvalidKeyException(\n-                        k.getClass() + \" does not match \" + kem_id);\n+                var msg = k.getClass() + \" does not match \" + kem_id;\n+                if (inSpec) {\n+                    throw new InvalidAlgorithmParameterException(msg);\n+                } else {\n+                    throw new InvalidKeyException(msg);\n+                }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HPKE.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n- * The {@link #of(int, int, int)} static method creates an {@code HPKEParameterSpec}\n- * instance with the specified KEM, KDF, and AEAD algorithm identifiers.\n+ * The {@link #of(int, int, int)} static method returns an {@code HPKEParameterSpec}\n+ * object with the specified KEM, KDF, and AEAD algorithm identifiers.\n@@ -65,1 +65,1 @@\n- * of RFC 9180 and the\n+ * of RFC 9180 and maintained on the\n@@ -91,1 +91,1 @@\n- * so that the recipient can recover this shared secret. On the sender side,\n+ * so that the recipient can recover the shared secret. On the sender side,\n@@ -104,2 +104,2 @@\n- * If an HPKE cipher is initialized without parameters, an\n- * {@code InvalidKeyException} is thrown.\n+ * If an HPKE cipher is {@linkplain Cipher#init(int, Key) initialized without\n+ * parameters}, an {@code InvalidKeyException} is thrown.\n@@ -110,2 +110,1 @@\n- * an {@code InvalidAlgorithmParameterException} is thrown by the\n- * {@code init} method. The following are cases of invalid parameters:\n+ * an {@code InvalidAlgorithmParameterException} is thrown. For example:\n@@ -114,1 +113,2 @@\n- * <li> The key encapsulation message is not provided on the recipient side.\n+ * <li> A key encapsulation message is provided on the sender side.\n+ * <li> A key encapsulation message is not provided on the recipient side.\n@@ -117,1 +117,1 @@\n- *      or {@code mode_auth_psk} is not supported by the KEM used.\n+ *      or {@code mode_auth_psk} is not supported by the KEM algorithm used.\n@@ -153,2 +153,1 @@\n-     * KEM algorithm identifier for DHKEM(P-256, HKDF-SHA256) as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-encapsulation-mechanism\">Section 7.1 of RFC 9180<\/a>.\n+     * KEM algorithm identifier for DHKEM(P-256, HKDF-SHA256) as defined in RFC 9180.\n@@ -159,2 +158,1 @@\n-     * KEM algorithm identifier for DHKEM(P-384, HKDF-SHA384) as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-encapsulation-mechanism\">Section 7.1 of RFC 9180<\/a>.\n+     * KEM algorithm identifier for DHKEM(P-384, HKDF-SHA384) as defined in RFC 9180.\n@@ -165,2 +163,1 @@\n-     * KEM algorithm identifier for DHKEM(P-521, HKDF-SHA512) as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-encapsulation-mechanism\">Section 7.1 of RFC 9180<\/a>.\n+     * KEM algorithm identifier for DHKEM(P-521, HKDF-SHA512) as defined in RFC 9180.\n@@ -171,2 +168,1 @@\n-     * KEM algorithm identifier for DHKEM(X25519, HKDF-SHA256) as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-encapsulation-mechanism\">Section 7.1 of RFC 9180<\/a>.\n+     * KEM algorithm identifier for DHKEM(X25519, HKDF-SHA256) as defined in RFC 9180.\n@@ -177,2 +173,1 @@\n-     * KEM algorithm identifier for DHKEM(X448, HKDF-SHA512) as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-encapsulation-mechanism\">Section 7.1 of RFC 9180<\/a>.\n+     * KEM algorithm identifier for DHKEM(X448, HKDF-SHA512) as defined in RFC 9180.\n@@ -183,2 +178,1 @@\n-     * KDF algorithm identifier for HKDF-SHA256 as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-derivation-functions-kd\">Section 7.2 of RFC 9180<\/a>.\n+     * KDF algorithm identifier for HKDF-SHA256 as defined in RFC 9180.\n@@ -189,2 +183,1 @@\n-     * KDF algorithm identifier for HKDF-SHA384 as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-derivation-functions-kd\">Section 7.2 of RFC 9180<\/a>.\n+     * KDF algorithm identifier for HKDF-SHA384 as defined in RFC 9180.\n@@ -195,2 +188,1 @@\n-     * KDF algorithm identifier for HKDF-SHA512 as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-key-derivation-functions-kd\">Section 7.2 of RFC 9180<\/a>.\n+     * KDF algorithm identifier for HKDF-SHA512 as defined in RFC 9180.\n@@ -201,2 +193,1 @@\n-     * AEAD algorithm identifier for AES-128-GCM as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-authenticated-encryption-wi\">Section 7.3 of RFC 9180<\/a>.\n+     * AEAD algorithm identifier for AES-128-GCM as defined in RFC 9180.\n@@ -207,2 +198,1 @@\n-     * AEAD algorithm identifier for AES-256-GCM as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-authenticated-encryption-wi\">Section 7.3 of RFC 9180<\/a>.\n+     * AEAD algorithm identifier for AES-256-GCM as defined in RFC 9180.\n@@ -213,2 +203,1 @@\n-     * AEAD algorithm identifier for ChaCha20Poly1305 as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-authenticated-encryption-wi\">Section 7.3 of RFC 9180<\/a>.\n+     * AEAD algorithm identifier for ChaCha20Poly1305 as defined in RFC 9180.\n@@ -219,2 +208,1 @@\n-     * AEAD algorithm identifier for Export-only as defined in\n-     * <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9180.html#name-authenticated-encryption-wi\">Section 7.3 of RFC 9180<\/a>.\n+     * AEAD algorithm identifier for Export-only as defined in RFC 9180.\n@@ -352,1 +340,1 @@\n-     * Note: this method does not check whether the KEM supports\n+     * Note: this method does not check whether the KEM algorithm supports\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HPKEParameterSpec.java","additions":23,"deletions":35,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.HexFormat;\n@@ -48,1 +49,1 @@\n-                .withInfo(\"app_info\".getBytes(StandardCharsets.UTF_8));\n+                .withInfo(HexFormat.of().parseHex(\"010203040506\"));\n@@ -63,1 +64,1 @@\n-                .withInfo(\"app_info\".getBytes(StandardCharsets.UTF_8))\n+                .withInfo(HexFormat.of().parseHex(\"010203040506\"))\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/snippet-files\/PackageSnippets.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -146,0 +146,1 @@\n+\n@@ -162,0 +163,3 @@\n+        c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), spec);\n+        var encap = c1.getIV();\n+\n@@ -187,0 +191,3 @@\n+        \/\/ Cannot provide key encap msg to sender\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(), spec.withEncapsulation(encap)));\n@@ -223,0 +230,9 @@\n+        \/\/ wrong keys\n+        var kpRSA = KeyPairGenerator.getInstance(\"RSA\").generateKeyPair();\n+        var kpEC = KeyPairGenerator.getInstance(\"EC\").generateKeyPair();\n+\n+        Asserts.assertThrows(InvalidKeyException.class,\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kpRSA.getPublic(), spec));\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kpEC.getPublic(), spec));\n+\n@@ -230,0 +246,6 @@\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(),\n+                        spec.withAuthKey(kpRSA.getPrivate())));\n+        Asserts.assertThrows(InvalidAlgorithmParameterException.class,\n+                () -> c1.init(Cipher.ENCRYPT_MODE, kp.getPublic(),\n+                        spec.withAuthKey(kpEC.getPrivate())));\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/HPKE\/Compliance.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}