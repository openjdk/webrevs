{"files":[{"patch":"@@ -227,3 +227,3 @@\n-        if (firstDot < 1 ||\n-            secondDot - firstDot < 2 ||\n-            alias.length() - secondDot < 2) {\n+        if ((firstDot < 1)\n+                || (secondDot - firstDot < 2)\n+                || (alias.length() - secondDot < 2)) {\n@@ -231,1 +231,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -258,1 +258,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,2 +40,1 @@\n- * @run junit NullCases\n- * @run junit\/othervm -Djavax.net.debug=ssl:keymanager -Darg=debug NullCases\n+ * @run junit\/othervm -Djavax.net.debug=ssl:keymanager NullCases\n@@ -64,1 +63,0 @@\n-import static org.junit.jupiter.api.Assumptions.assumeFalse;\n@@ -68,1 +66,2 @@\n-    private static final String KEY_MGR_EXCEPTION_MESSAGE = \"Exception thrown while getting an alias\";\n+    private static final String KEY_MGR_EXCEPTION_MESSAGE =\n+            \"Exception thrown while getting an alias\";\n@@ -70,1 +69,0 @@\n-    private static boolean isDebugLogging;\n@@ -77,3 +75,0 @@\n-        final String arg = System.getProperty(\"arg\");\n-        isDebugLogging = arg != null && arg.equals(\"debug\");\n-\n@@ -85,2 +80,2 @@\n-        final X509Certificate originServerCert = generateCert(keyPair, secureRandom,\n-                \"subject\");\n+        final X509Certificate originServerCert =\n+                generateCert(keyPair, secureRandom, \"subject\");\n@@ -103,1 +98,0 @@\n-        assumeFalse(isDebugLogging);\n@@ -111,1 +105,0 @@\n-        assumeFalse(isDebugLogging);\n@@ -126,1 +119,0 @@\n-        assumeFalse(isDebugLogging);\n@@ -128,1 +120,2 @@\n-        final X509Certificate[] certs = km.getCertificateChain(\"doesnotexist\");\n+        final X509Certificate[] certs =\n+                km.getCertificateChain(\"doesnotexist\");\n@@ -130,2 +123,4 @@\n-        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n-        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(certs,\n+                \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv,\n+                \"Should return null if the alias can't be found\");\n@@ -137,1 +132,0 @@\n-        assumeFalse(isDebugLogging);\n@@ -139,2 +133,4 @@\n-        final String[] clis = km.getClientAliases(\"doesnotexist\", null);\n-        Asserts.assertFalse((clis != null && clis.length == 0), \"Should return null instead of empty array\");\n+        final String[] clis =\n+                km.getClientAliases(\"doesnotexist\", null);\n+        Asserts.assertFalse((clis != null && clis.length == 0),\n+                \"Should return null instead of empty array\");\n@@ -142,2 +138,4 @@\n-        final String[] srvs = km.getServerAliases(\"doesnotexist\", null);\n-        Asserts.assertFalse((srvs != null && srvs.length == 0), \"Should return null instead of empty array\");\n+        final String[] srvs =\n+                km.getServerAliases(\"doesnotexist\", null);\n+        Asserts.assertFalse((srvs != null && srvs.length == 0),\n+                \"Should return null instead of empty array\");\n@@ -160,2 +158,0 @@\n-        assumeFalse(isDebugLogging);\n-\n@@ -165,2 +161,4 @@\n-        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n-        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(certs,\n+                \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv,\n+                \"Should return null if the alias can't be found\");\n@@ -177,2 +175,4 @@\n-        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n-        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(certs,\n+                \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv,\n+                \"Should return null if the alias can't be found\");\n@@ -183,1 +183,2 @@\n-        Asserts.assertFalse(isDebugLogging && !outputStream.toString().contains(KEY_MGR_EXCEPTION_MESSAGE),\n+        Asserts.assertFalse(\n+                !outputStream.toString().contains(KEY_MGR_EXCEPTION_MESSAGE),\n@@ -189,1 +190,0 @@\n-        assumeFalse(isDebugLogging);\n@@ -194,2 +194,4 @@\n-        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n-        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(certs,\n+                \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv,\n+                \"Should return null if the alias can't be found\");\n@@ -202,1 +204,2 @@\n-        final X509Certificate[] certs = km.getCertificateChain(\"RSA.not.exist\");\n+        final X509Certificate[] certs =\n+                km.getCertificateChain(\"RSA.not.exist\");\n@@ -205,2 +208,4 @@\n-        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n-        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(certs,\n+                \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv,\n+                \"Should return null if the alias can't be found\");\n@@ -211,1 +216,2 @@\n-        Asserts.assertFalse(isDebugLogging && !outputStream.toString().contains(KEY_MGR_EXCEPTION_MESSAGE),\n+        Asserts.assertFalse(\n+                !outputStream.toString().contains(KEY_MGR_EXCEPTION_MESSAGE),\n@@ -217,1 +223,1 @@\n-    @ValueSource(strings = {\"..1\", \".9.123456789\"})\n+    @ValueSource(strings = {\"1..\",\".1.\", \"..1\", \".9.123456789\"})\n@@ -224,2 +230,4 @@\n-        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n-        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(certs,\n+                \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv,\n+                \"Should return null if the alias can't be found\");\n@@ -228,1 +236,2 @@\n-        System.err.println(\" => wrongNumberFormatTest alias<\" + alias + \">: \\n\" + outputStream);\n+        System.err.println(\" => wrongNumberFormatTest alias<\" + alias + \">: \\n\"\n+                           + outputStream);\n@@ -230,1 +239,2 @@\n-        Asserts.assertFalse(isDebugLogging && !outputStream.toString().contains(\"Invalid alias format:\"),\n+        Asserts.assertFalse(!outputStream.toString()\n+                            .contains(\"Invalid alias format:\"),\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/NullCases.java","additions":50,"deletions":40,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.security.Provider;\n@@ -59,1 +60,2 @@\n-        final KeyManagerFactory exceptionThrowingKMF = KeyManagerFactory.getInstance(\"NewSunX509\");\n+        final KeyManagerFactory exceptionThrowingKMF =\n+                KeyManagerFactory.getInstance(\"NewSunX509\");\n@@ -63,1 +65,2 @@\n-        final KeyStore exceptionThrowingKS = KeyStore.getInstance(\"MyExceptionKS\");\n+        final KeyStore exceptionThrowingKS =\n+                KeyStore.getInstance(\"MyExceptionKS\");\n@@ -66,2 +69,4 @@\n-        exceptionThrowingKMF.init((KeyStore) exceptionThrowingKS, null);\n-        exceptionThrowingKM = (X509KeyManager) exceptionThrowingKMF.getKeyManagers()[0];\n+        exceptionThrowingKMF\n+                .init((KeyStore) exceptionThrowingKS, null);\n+        exceptionThrowingKM =\n+                (X509KeyManager) exceptionThrowingKMF.getKeyManagers()[0];\n@@ -85,1 +90,1 @@\n-    public static class MyCustomKSProvider extends java.security.Provider {\n+    public static class MyCustomKSProvider extends Provider {\n@@ -87,1 +92,3 @@\n-            super(\"MyCustomKSProvider\", 1.0, \"My Custom KS Provider\");\n+            super(\"MyCustomKSProvider\",\n+                    \"1.0\",\n+                    \"My Custom KS Provider\");\n@@ -95,1 +102,2 @@\n-        public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter param) {\n+        public KeyStore.Entry engineGetEntry(String alias,\n+                                             KeyStore.ProtectionParameter param) {\n@@ -158,1 +166,4 @@\n-        public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {\n+        public void engineSetKeyEntry(String alias,\n+                                      Key key,\n+                                      char[] password,\n+                                      Certificate[] chain) {\n@@ -162,1 +173,3 @@\n-        public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) {\n+        public void engineSetKeyEntry(String alias,\n+                                      byte[] key,\n+                                      Certificate[] chain) {\n@@ -166,1 +179,2 @@\n-        public void engineSetCertificateEntry(String alias, Certificate cert) {\n+        public void engineSetCertificateEntry(String alias,\n+                                              Certificate cert) {\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/X509KeyManagerNegativeTests.java","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"}]}