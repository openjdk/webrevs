{"files":[{"patch":"@@ -226,1 +226,1 @@\n-        if ((firstDot == -1) || (secondDot == firstDot)) {\n+        if ((firstDot == -1) || (secondDot == -1)) {\n@@ -248,1 +248,2 @@\n-                 NoSuchAlgorithmException e) {\n+                 NoSuchAlgorithmException |\n+                 IndexOutOfBoundsException e) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n- * @run main NullCases\n- * @run main\/othervm -Djavax.net.debug=ssl:keymanager NullCases debug\n+ * @run junit NullCases\n+ * @run junit\/othervm -Djavax.net.debug=ssl:keymanager -Darg=debug NullCases\n@@ -44,0 +44,6 @@\n+import jdk.test.lib.Asserts;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n@@ -61,0 +67,4 @@\n+    private static boolean isDebug;\n+    private static KeyManagerFactory kmf;\n+    private static X509KeyManager km;\n+    private final PrintStream initialErrStream = System.err;\n@@ -62,3 +72,4 @@\n-    public static void main(String[] args) throws Exception {\n-        KeyManagerFactory kmf;\n-        char[] password = {' '};\n+    @BeforeAll\n+    public static void beforeAll() throws Exception {\n+        final String arg = System.getProperty(\"arg\");\n+        isDebug = arg != null && arg.equals(\"debug\");\n@@ -66,1 +77,0 @@\n-        \/\/ check for bug 6302126\n@@ -68,0 +78,15 @@\n+\n+        \/\/ creating a new keystore\n+        final SecureRandom secureRandom = new SecureRandom();\n+        final KeyPair keyPair = generateRSAKeyPair(secureRandom);\n+        final X509Certificate originServerCert = generateCert(keyPair, secureRandom,\n+                \"subject\");\n+        final KeyStore ks = generateKeyStore(keyPair.getPrivate(),\n+                new Certificate[]{originServerCert});\n+\n+        kmf.init(ks, null);\n+        km = (X509KeyManager) kmf.getKeyManagers()[0];\n+    }\n+\n+    private X509KeyManager generateNullKm() throws Exception {\n+        char[] password = {' '};\n@@ -69,1 +94,2 @@\n-        X509KeyManager km = (X509KeyManager) kmf.getKeyManagers()[0];\n+        return (X509KeyManager) kmf.getKeyManagers()[0];\n+    }\n@@ -71,4 +97,5 @@\n-        KeyManagerFactory kmf2 = KeyManagerFactory.getInstance(\"NewSunX509\");\n-        final KeyStore ks = createNewKeystore();\n-        kmf2.init(ks, null);\n-        X509KeyManager km2 = (X509KeyManager) kmf2.getKeyManagers()[0];\n+    @Test\n+    public void JDK6302126Test() throws Exception {\n+        \/\/ check for bug 6302126\n+        generateNullKm();\n+    }\n@@ -76,0 +103,4 @@\n+    @Test\n+    public void JDK6302304Test() throws Exception {\n+        \/\/ check for bug 6302304\n+        final X509KeyManager km = generateNullKm();\n@@ -77,6 +108,16 @@\n-        \/\/ check for 6302321\n-        X509Certificate[] certs = km.getCertificateChain(\"doesnotexist\");\n-        PrivateKey priv = km.getPrivateKey(\"doesnotexist\");\n-        if (certs != null || priv != null) {\n-            throw new Exception(\"Should return null if the alias can't be found\");\n-        }\n+        km.getServerAliases(null, null);\n+        km.getClientAliases(null, null);\n+        km.getCertificateChain(null);\n+        km.getPrivateKey(null);\n+        km.chooseServerAlias(null, null, null);\n+        km.chooseClientAlias(null, null, null);\n+    }\n+\n+    @Test\n+    public void JDK6302321Test() {\n+        \/\/ check for bug 6302321\n+        final X509Certificate[] certs = km.getCertificateChain(\"doesnotexist\");\n+        final PrivateKey priv = km.getPrivateKey(\"doesnotexist\");\n+        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+    }\n@@ -84,0 +125,2 @@\n+    @Test\n+    public void JDK6302271Test() {\n@@ -85,8 +128,2 @@\n-        String[] clis = km.getClientAliases(\"doesnotexist\", null);\n-        if (clis != null && clis.length == 0) {\n-            throw new Exception(\"Should return null instead of empty array\");\n-        }\n-        String[] srvs = km.getServerAliases(\"doesnotexist\", null);\n-        if (srvs != null && srvs.length == 0) {\n-            throw new Exception(\"Should return null instead of empty array\");\n-        }\n+        final String[] clis = km.getClientAliases(\"doesnotexist\", null);\n+        Asserts.assertFalse((clis != null && clis.length == 0), \"Should return null instead of empty array\");\n@@ -94,0 +131,3 @@\n+        final String[] srvs = km.getServerAliases(\"doesnotexist\", null);\n+        Asserts.assertFalse((srvs != null && srvs.length == 0), \"Should return null instead of empty array\");\n+    }\n@@ -95,1 +135,3 @@\n-        \/\/ Exceptions check for 8369995\n+    \/**\n+     * The following tests are testing JDK-8369995\n+     *\/\n@@ -97,2 +139,1 @@\n-        \/\/ recording logs to the output stream\n-        final PrintStream intialErrStream = System.err;\n+    private ByteArrayOutputStream replaceSystemError() {\n@@ -103,38 +144,1 @@\n-        certs = km.getCertificateChain(\"RSA.not.exist\");\n-        priv = km.getPrivateKey(\"RSA.not.exist\");\n-        if (certs != null || priv != null) {\n-            System.setErr(intialErrStream);\n-            System.err.println(outputStream);\n-            throw new Exception(\"Should return null if the alias can't be found\");\n-        }\n-\n-        certs = km2.getCertificateChain(\"RSA.0.1\");\n-        priv = km2.getPrivateKey(\"RSA.0.1\");\n-        if (certs != null || priv != null) {\n-            System.setErr(intialErrStream);\n-            System.err.println(outputStream);\n-            throw new Exception(\"Should return null if the alias can't be found\");\n-        }\n-\n-        certs = km2.getCertificateChain(\"..1\");\n-        priv = km2.getPrivateKey(\"..1\");\n-        if (certs != null || priv != null) {\n-            System.setErr(intialErrStream);\n-            System.err.println(outputStream);\n-            throw new Exception(\"Should return null if the alias can't be found\");\n-        }\n-\n-        System.setErr(intialErrStream);\n-\n-        if (args.length > 0 && args[0].equals(\"debug\")\n-            && !outputStream.toString().contains(\"KeyMgr: exception triggered:\")) {\n-            throw new Exception(\"No log triggered\");\n-        }\n-\n-        \/\/ check for 6302304\n-        km.getServerAliases(null, null);\n-        km.getClientAliases(null, null);\n-        km.getCertificateChain(null);\n-        km.getPrivateKey(null);\n-        km.chooseServerAlias(null, null, null);\n-        km.chooseClientAlias(null, null, null);\n+        return outputStream;\n@@ -143,3 +147,4 @@\n-    private static KeyStore createNewKeystore() throws Exception {\n-        final SecureRandom secureRandom = new SecureRandom();\n-        final KeyPair keyPair = generateRSAKeyPair(secureRandom);\n+    @Test\n+    public void incompleteChainAndKeyTest() {\n+        final X509Certificate[] certs = km.getCertificateChain(\"1.1\");\n+        final PrivateKey priv = km.getPrivateKey(\"1.1\");\n@@ -147,2 +152,47 @@\n-        final X509Certificate originServerCert = generateCert(keyPair, secureRandom,\n-                \"subject\");\n+        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+    }\n+\n+    @Test\n+    public void nonexistentBuilderTest() {\n+        \/\/ recording logs to the output stream\n+        final ByteArrayOutputStream outputStream = replaceSystemError();\n+\n+        final X509Certificate[] certs = km.getCertificateChain(\"RSA.1.1\");\n+        final PrivateKey priv = km.getPrivateKey(\"RSA.1.1\");\n+\n+        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+\n+        System.setErr(initialErrStream);\n+        System.err.println(\" => nonexistentBuilderTest: \\n\" + outputStream);\n+\n+        Asserts.assertFalse(isDebug && !outputStream.toString().contains(\"KeyMgr: exception triggered:\"),\n+                \"No log triggered\");\n+    }\n+\n+    @Test\n+    public void nonexistentKSTest() {\n+        final X509Certificate[] certs = km.getCertificateChain(\"RSA.0.1\");\n+        final PrivateKey priv = km.getPrivateKey(\"RSA.0.1\");\n+\n+        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"RSA.not.exist\", \"..1\"})\n+    public void wrongNumberFormatTest(final String alias) {\n+        \/\/ recording logs to the output stream\n+        final ByteArrayOutputStream outputStream = replaceSystemError();\n+        X509Certificate[] certs = km.getCertificateChain(alias);\n+        PrivateKey priv = km.getPrivateKey(alias);\n+\n+        Asserts.assertNull(certs, \"Should return null if the alias can't be found\");\n+        Asserts.assertNull(priv, \"Should return null if the alias can't be found\");\n+\n+        System.setErr(initialErrStream);\n+        System.err.println(\" => wrongNumberFormatTest alias<\" + alias + \">: \\n\" + outputStream);\n+\n+        Asserts.assertFalse(isDebug && !outputStream.toString().contains(\"KeyMgr: exception triggered:\"),\n+                \"No log triggered\");\n@@ -150,2 +200,0 @@\n-        return generateKeyStore(keyPair.getPrivate(),\n-                new Certificate[]{originServerCert});\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/NullCases.java","additions":121,"deletions":73,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import jdk.test.lib.Asserts;\n+import org.junit.jupiter.api.AfterAll;\n@@ -31,0 +33,3 @@\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.security.Key;\n@@ -32,5 +37,6 @@\n-import java.security.KeyStoreException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.UnrecoverableKeyException;\n-\n-import org.junit.Assert;\n+import java.security.KeyStoreSpi;\n+import java.security.Security;\n+import java.security.cert.Certificate;\n+import java.util.ConcurrentModificationException;\n+import java.util.Date;\n+import java.util.Enumeration;\n@@ -43,1 +49,1 @@\n- * @run junit X509KeyManagerNegativeTests\n+ * @run junit\/othervm X509KeyManagerNegativeTests\n@@ -46,1 +52,1 @@\n-    private static X509KeyManager km;\n+    private static X509KeyManager exceptionThrowingKM;\n@@ -49,6 +55,1 @@\n-    public static void beforeAll() throws NoSuchAlgorithmException, UnrecoverableKeyException, KeyStoreException {\n-        final char[] password = {' '};\n-        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n-        kmf.init((KeyStore) null, password);\n-        km = (X509KeyManager) kmf.getKeyManagers()[0];\n-    }\n+    public static void beforeAll() throws Exception {\n@@ -56,4 +57,11 @@\n-    @Test\n-    public void getCertificateChainIncompleteString() {\n-        Assert.assertThrows(StringIndexOutOfBoundsException.class,\n-                () -> km.getCertificateChain(\"1.\"));\n+        \/\/ initialising exception throwing ks\n+        \/\/ cleaned up after the tests are complete\n+        final KeyManagerFactory exceptionThrowingKMF = KeyManagerFactory.getInstance(\"NewSunX509\");\n+\n+        \/\/ adding dummy provider\n+        Security.addProvider(new MyCustomKSProvider());\n+        final KeyStore exceptionThrowingKS = KeyStore.getInstance(\"MyExceptionKS\");\n+        exceptionThrowingKS.load(null, null);\n+\n+        exceptionThrowingKMF.init((KeyStore) exceptionThrowingKS, null);\n+        exceptionThrowingKM = (X509KeyManager) exceptionThrowingKMF.getKeyManagers()[0];\n@@ -62,4 +70,4 @@\n-    @Test\n-    public void getPrivateKeyIncompleteString() {\n-        Assert.assertThrows(StringIndexOutOfBoundsException.class,\n-                () -> km.getPrivateKey(\"1.\"));\n+    @AfterAll\n+    public static void cleanup() {\n+        \/\/ remove custom provider\n+        Security.removeProvider(\"MyCustomKSProvider\");\n@@ -69,4 +77,6 @@\n-    public void getPrivateKeyIndexOutOfBounds() {\n-        \/\/ .1. would look for an index 1 key in keystore, which doesn't exist\n-        Assert.assertThrows(IndexOutOfBoundsException.class,\n-                () -> km.getPrivateKey(\"RSA.1.1\"));\n+    public void ksExceptionTest() {\n+        \/\/ recording logs to the output stream\n+        Asserts.assertThrows(ConcurrentModificationException.class,\n+                () -> exceptionThrowingKM.getCertificateChain(\"RSA.0.0\"));\n+        Asserts.assertThrows(ConcurrentModificationException.class,\n+                () -> exceptionThrowingKM.getPrivateKey(\"RSA.0.0\"));\n@@ -74,5 +84,6 @@\n-    @Test\n-    public void getCertificateChainIndexOutOfBounds() {\n-        \/\/ .1. would look for an index 1 cert in keystore, which doesn't exist\n-        Assert.assertThrows(IndexOutOfBoundsException.class,\n-                () -> km.getPrivateKey(\"RSA.1.1\"));\n+\n+    public static class MyCustomKSProvider extends java.security.Provider {\n+        public MyCustomKSProvider() {\n+            super(\"MyCustomKSProvider\", 1.0, \"My Custom KS Provider\");\n+            put(\"KeyStore.MyExceptionKS\", MyExceptionKS.class.getName());\n+        }\n@@ -81,0 +92,81 @@\n+    public static class MyExceptionKS extends KeyStoreSpi {\n+\n+        @Override\n+        public KeyStore.Entry engineGetEntry(String alias, KeyStore.ProtectionParameter param) {\n+            throw new ConcurrentModificationException(\"getEntry exception\");\n+        }\n+\n+        @Override\n+        public Key engineGetKey(String alias, char[] password) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Certificate[] engineGetCertificateChain(String alias) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Certificate engineGetCertificate(String alias) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Date engineGetCreationDate(String alias) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Enumeration<String> engineAliases() {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean engineContainsAlias(String alias) {\n+            return false;\n+        }\n+\n+        @Override\n+        public int engineSize() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean engineIsKeyEntry(String alias) {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean engineIsCertificateEntry(String alias) {\n+            return false;\n+        }\n+\n+        @Override\n+        public String engineGetCertificateAlias(Certificate cert) {\n+            return null;\n+        }\n+\n+        @Override\n+        public void engineStore(OutputStream stream, char[] password) {\n+        }\n+\n+        @Override\n+        public void engineLoad(InputStream stream, char[] password) {\n+        }\n+\n+        @Override\n+        public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) {\n+        }\n+\n+        @Override\n+        public void engineSetKeyEntry(String alias, byte[] key, Certificate[] chain) {\n+        }\n+\n+        @Override\n+        public void engineSetCertificateEntry(String alias, Certificate cert) {\n+        }\n+\n+        @Override\n+        public void engineDeleteEntry(String alias) {\n+        }\n+    }\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/X509KeyManagerNegativeTests.java","additions":122,"deletions":30,"binary":false,"changes":152,"status":"modified"}]}