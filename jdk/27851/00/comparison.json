{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.security.NoSuchAlgorithmException;\n@@ -38,0 +39,1 @@\n+import java.security.UnrecoverableEntryException;\n@@ -243,2 +245,8 @@\n-        } catch (Exception e) {\n-            \/\/ ignore\n+        } catch (UnrecoverableEntryException |\n+                 KeyStoreException |\n+                 NumberFormatException |\n+                 NoSuchAlgorithmException e) {\n+            \/\/ ignore and only log exception\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                SSLLogger.fine(\"KeyMgr: exception triggered: \" + e);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6302126 6302321 6302271 6302304\n+ * @bug 6302126 6302321 6302271 6302304 8369995\n@@ -35,0 +35,7 @@\n+ *     Extra logging and\/or propagate errors in X509KeyManagerImpl\n+ *\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @modules java.base\/sun.security.x509\n+ *\n+ * @run main NullCases\n+ * @run main\/othervm -Djavax.net.debug=ssl:keymanager NullCases debug\n@@ -36,4 +43,10 @@\n-import java.io.*;\n-import java.net.*;\n-import java.security.*;\n-import javax.net.ssl.*;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.X509KeyManager;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.security.KeyPair;\n+import java.security.SecureRandom;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n@@ -42,1 +55,3 @@\n-import java.util.*;\n+import static jdk.httpclient.test.lib.common.DynamicKeyStoreUtil.generateCert;\n+import static jdk.httpclient.test.lib.common.DynamicKeyStoreUtil.generateKeyStore;\n+import static jdk.httpclient.test.lib.common.DynamicKeyStoreUtil.generateRSAKeyPair;\n@@ -46,0 +61,1 @@\n+\n@@ -48,2 +64,1 @@\n-        X509KeyManager km;\n-        char [] password = {' '};\n+        char[] password = {' '};\n@@ -53,1 +68,8 @@\n-        kmf.init((KeyStore)null, password);\n+        kmf.init((KeyStore) null, password);\n+        X509KeyManager km = (X509KeyManager) kmf.getKeyManagers()[0];\n+\n+        KeyManagerFactory kmf2 = KeyManagerFactory.getInstance(\"NewSunX509\");\n+        final KeyStore ks = createNewKeystore();\n+        kmf2.init(ks, null);\n+        X509KeyManager km2 = (X509KeyManager) kmf2.getKeyManagers()[0];\n+\n@@ -56,1 +78,0 @@\n-        km = (X509KeyManager) kmf.getKeyManagers()[0];\n@@ -73,0 +94,40 @@\n+\n+        \/\/ Exceptions check for 8369995\n+\n+        \/\/ recording logs to the output stream\n+        final PrintStream intialErrStream = System.err;\n+        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        final PrintStream newErrStream = new PrintStream(outputStream);\n+        System.setErr(newErrStream);\n+\n+        certs = km.getCertificateChain(\"RSA.not.exist\");\n+        priv = km.getPrivateKey(\"RSA.not.exist\");\n+        if (certs != null || priv != null) {\n+            System.setErr(intialErrStream);\n+            System.err.println(outputStream);\n+            throw new Exception(\"Should return null if the alias can't be found\");\n+        }\n+\n+        certs = km2.getCertificateChain(\"RSA.0.1\");\n+        priv = km2.getPrivateKey(\"RSA.0.1\");\n+        if (certs != null || priv != null) {\n+            System.setErr(intialErrStream);\n+            System.err.println(outputStream);\n+            throw new Exception(\"Should return null if the alias can't be found\");\n+        }\n+\n+        certs = km2.getCertificateChain(\"..1\");\n+        priv = km2.getPrivateKey(\"..1\");\n+        if (certs != null || priv != null) {\n+            System.setErr(intialErrStream);\n+            System.err.println(outputStream);\n+            throw new Exception(\"Should return null if the alias can't be found\");\n+        }\n+\n+        System.setErr(intialErrStream);\n+\n+        if (args.length > 0 && args[0].equals(\"debug\")\n+            && !outputStream.toString().contains(\"KeyMgr: exception triggered:\")) {\n+            throw new Exception(\"No log triggered\");\n+        }\n+\n@@ -81,0 +142,11 @@\n+\n+    private static KeyStore createNewKeystore() throws Exception {\n+        final SecureRandom secureRandom = new SecureRandom();\n+        final KeyPair keyPair = generateRSAKeyPair(secureRandom);\n+\n+        final X509Certificate originServerCert = generateCert(keyPair, secureRandom,\n+                \"subject\");\n+\n+        return generateKeyStore(keyPair.getPrivate(),\n+                new Certificate[]{originServerCert});\n+    }\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/NullCases.java","additions":83,"deletions":11,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.X509KeyManager;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+\n+import org.junit.Assert;\n+\n+\/*\n+ * @test\n+ * @bug 8369995\n+ * @summary X509KeyManagerImpl negative tests causing exceptions\n+ * @library \/test\/lib\n+ * @run junit X509KeyManagerNegativeTests\n+ *\/\n+public class X509KeyManagerNegativeTests {\n+    private static X509KeyManager km;\n+\n+    @BeforeAll\n+    public static void beforeAll() throws NoSuchAlgorithmException, UnrecoverableKeyException, KeyStoreException {\n+        final char[] password = {' '};\n+        final KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n+        kmf.init((KeyStore) null, password);\n+        km = (X509KeyManager) kmf.getKeyManagers()[0];\n+    }\n+\n+    @Test\n+    public void getCertificateChainIncompleteString() {\n+        Assert.assertThrows(StringIndexOutOfBoundsException.class,\n+                () -> km.getCertificateChain(\"1.\"));\n+    }\n+\n+    @Test\n+    public void getPrivateKeyIncompleteString() {\n+        Assert.assertThrows(StringIndexOutOfBoundsException.class,\n+                () -> km.getPrivateKey(\"1.\"));\n+    }\n+\n+    @Test\n+    public void getPrivateKeyIndexOutOfBounds() {\n+        \/\/ .1. would look for an index 1 key in keystore, which doesn't exist\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> km.getPrivateKey(\"RSA.1.1\"));\n+    }\n+    @Test\n+    public void getCertificateChainIndexOutOfBounds() {\n+        \/\/ .1. would look for an index 1 cert in keystore, which doesn't exist\n+        Assert.assertThrows(IndexOutOfBoundsException.class,\n+                () -> km.getPrivateKey(\"RSA.1.1\"));\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/X509KeyManager\/X509KeyManagerNegativeTests.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}