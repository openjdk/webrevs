{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -788,1 +788,1 @@\n-        boolean useSocketFactory = bindAddress != null && !useSsl;\n+        boolean useServerSocketFactory = bindAddress != null && !useSsl;\n@@ -818,0 +818,4 @@\n+        } else {\n+            csf = new JMXPlainRMIClientSocketFactory();\n+            env.put(RMIConnectorServer.RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE,\n+                    csf);\n@@ -827,1 +831,1 @@\n-        if (useSocketFactory) {\n+        if (useServerSocketFactory) {\n@@ -852,1 +856,1 @@\n-        } else if (useSocketFactory) {\n+        } else if (useServerSocketFactory) {\n","filename":"src\/jdk.management.agent\/share\/classes\/sun\/management\/jmxremote\/ConnectorBootstrap.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package sun.management.jmxremote;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.net.ServerSocket;\n+import java.rmi.server.RMISocketFactory;\n+import java.rmi.server.RMIClientSocketFactory;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+\/**\n+ * Implement RMIClientSocketFactory to enable JMX-specific properties.\n+ *\/\n+public class JMXPlainRMIClientSocketFactory implements RMIClientSocketFactory, Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @SuppressWarnings(\"removal\")\n+    private static final int connectTimeout =    \/\/ default 1 minute\n+        AccessController.doPrivileged((PrivilegedAction<Integer>) () ->\n+            Integer.getInteger(\"com.sun.management.jmxremote.rmi.tcpConnectTimeout\", 60 * 1000).intValue());\n+\n+    @Override\n+    public Socket createSocket(String host, int port) throws IOException {\n+        \/\/ Guard against passing a negative value, Socket would always throw IllegalArgumentException.\n+        if (connectTimeout <= 0) {\n+            return new Socket(host, port);\n+        } else {\n+            SocketAddress address = host != null ? new InetSocketAddress(host, port) :\n+                                                   new InetSocketAddress(InetAddress.getByName(null), port);\n+            Socket s = new Socket();\n+            s.connect(address, connectTimeout);\n+            return s;\n+        }\n+    }\n+}\n","filename":"src\/jdk.management.agent\/share\/classes\/sun\/management\/jmxremote\/JMXPlainRMIClientSocketFactory.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}