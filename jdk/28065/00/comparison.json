{"files":[{"patch":"@@ -192,0 +192,1 @@\n+- `-DForceSequentialScenarios=true`: Forces scenarios to be run sequentially.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n@@ -162,0 +164,1 @@\n+    private static final boolean FORCE_SEQUENTIAL_SCENARIOS = Boolean.getBoolean(\"ForceSequentialScenarios\");\n@@ -419,1 +422,1 @@\n-     * set test class.\n+     * set test class. Scenarios are run sequentially.\n@@ -422,0 +425,12 @@\n+        start(false);\n+    }\n+\n+    \/**\n+     * Start the testing of the implicitly (by {@link #TestFramework()}) or explicitly (by {@link #TestFramework(Class)})\n+     * set test class. Scenarios are run in parallel.\n+     *\/\n+    public void startParallel() {\n+        start(true);\n+    }\n+\n+    private void start(boolean parallel) {\n@@ -431,1 +446,1 @@\n-                start(null);\n+                start(null, System.out);\n@@ -441,1 +456,1 @@\n-            startWithScenarios();\n+            startWithScenarios(!FORCE_SEQUENTIAL_SCENARIOS && parallel);\n@@ -731,0 +746,1 @@\n+     * @param parallel Run tests concurrently\n@@ -732,1 +748,1 @@\n-    private void startWithScenarios() {\n+    private void startWithScenarios(boolean parallel) {\n@@ -734,1 +750,8 @@\n-        for (Scenario scenario : scenarios) {\n+        record Outcome(Scenario scenario, TestFormatException tfe, Exception other) {}\n+        final Object printLock = new Object();\n+\n+        Stream<Scenario> stream = parallel ? scenarios.parallelStream() : scenarios.stream();\n+        List<Outcome> outcomes = stream.map(scenario -> {\n+            Outcome outcome;\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            PrintStream ps = new PrintStream(baos);\n@@ -736,1 +759,2 @@\n-                start(scenario);\n+                start(scenario, ps);\n+                outcome = new Outcome(scenario, null, null);\n@@ -738,2 +762,1 @@\n-                \/\/ Test format violation is wrong for all the scenarios. Only report once.\n-                throw e;\n+                outcome = new Outcome(scenario, e, null);\n@@ -741,1 +764,9 @@\n-                exceptionMap.put(scenario, e);\n+                outcome = new Outcome(scenario, null, e);\n+            } finally {\n+                \/\/ Print the output to stdout in one go\n+                synchronized (printLock) {\n+                    String output = baos.toString();\n+                    if (!output.isEmpty()) {\n+                        System.out.println(output);\n+                    }\n+                }\n@@ -743,0 +774,9 @@\n+            return outcome;\n+        }).toList();\n+        \/\/ Rethrow first TestFormatException\n+        Optional<TestFormatException> tfe = outcomes.stream()\n+                .map(Outcome::tfe)\n+                .filter(Objects::nonNull)\n+                .findFirst();\n+        if (tfe.isPresent()) {\n+            throw tfe.get();\n@@ -744,0 +784,4 @@\n+        \/\/ Handle other exceptions\n+        outcomes.stream()\n+                .filter(o -> o.other() != null)\n+                .forEach(o -> exceptionMap.put(o.scenario(), o.other()));\n@@ -803,1 +847,1 @@\n-    private void start(Scenario scenario) {\n+    private void start(Scenario scenario, PrintStream printStream) {\n@@ -805,1 +849,1 @@\n-            System.out.println(\"Disabled scenario #\" + scenario.getIndex() + \"! This scenario is not present in set flag \" +\n+            printStream.println(\"Disabled scenario #\" + scenario.getIndex() + \"! This scenario is not present in set flag \" +\n@@ -810,0 +854,1 @@\n+        TestVMProcess testVMProcess = null;\n@@ -819,1 +864,1 @@\n-                System.out.println(\"Scenario #\" + scenario.getIndex() + scenarioFlagsString + \":\");\n+                printStream.println(\"Scenario #\" + scenario.getIndex() + scenarioFlagsString + \":\");\n@@ -827,1 +872,1 @@\n-                System.out.println(\"Run Flag VM:\");\n+                printStream.println(\"Run Flag VM:\");\n@@ -835,1 +880,1 @@\n-                System.out.println(\"Skip Flag VM due to not performing IR verification.\");\n+                printStream.println(\"Skip Flag VM due to not performing IR verification.\");\n@@ -838,2 +883,3 @@\n-            System.out.println(\"Run Test VM\" + frameworkAndScenarioFlags + \":\");\n-            runTestVM(additionalFlags);\n+            printStream.println(\"Run Test VM\" + frameworkAndScenarioFlags + \":\");\n+            testVMProcess = new TestVMProcess();\n+            runTestVM(testVMProcess, additionalFlags, printStream);\n@@ -841,2 +887,2 @@\n-            if (scenario != null) {\n-                scenario.setTestVMOutput(TestVMProcess.getLastTestVMOutput());\n+            if (scenario != null && testVMProcess != null) {\n+                scenario.setTestVMOutput(testVMProcess.getTestVMOutput());\n@@ -844,1 +890,1 @@\n-            System.out.println();\n+            printStream.println();\n@@ -878,3 +924,6 @@\n-    private void runTestVM(List<String> additionalFlags) {\n-        TestVMProcess testVMProcess = new TestVMProcess(additionalFlags, testClass, helperClasses, defaultWarmup,\n-                                                        isAllowNotCompilable, testClassesOnBootClassPath);\n+    private void runTestVM(TestVMProcess testVMProcess, List<String> additionalFlags, PrintStream printStream) {\n+        if (testVMProcess == null) {\n+            throw new TestFrameworkException(\"TestVMProcess is null\");\n+        }\n+        testVMProcess.runProcess(additionalFlags, testClass, helperClasses, defaultWarmup,\n+                                 isAllowNotCompilable, testClassesOnBootClassPath, printStream);\n@@ -893,1 +942,1 @@\n-            System.out.println(\"IR verification disabled either due to no @IR annotations, through explicitly setting \" +\n+            printStream.println(\"IR verification disabled either due to no @IR annotations, through explicitly setting \" +\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":72,"deletions":23,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.io.PrintStream;\n@@ -67,2 +68,1 @@\n-    public TestVMProcess(List<String> additionalFlags, Class<?> testClass, Set<Class<?>> helperClasses, int defaultWarmup,\n-                         boolean allowNotCompilable, boolean testClassesOnBootClassPath) {\n+    public TestVMProcess() {\n@@ -70,1 +70,5 @@\n-        TestFrameworkSocket socket = new TestFrameworkSocket();\n+    }\n+\n+    public void runProcess(List<String> additionalFlags, Class<?> testClass, Set<Class<?>> helperClasses, int defaultWarmup,\n+                         boolean allowNotCompilable, boolean testClassesOnBootClassPath, PrintStream printStream) {\n+        TestFrameworkSocket socket = new TestFrameworkSocket(printStream);\n@@ -76,2 +80,2 @@\n-        processSocketOutput(socket);\n-        checkTestVMExitCode();\n+        processSocketOutput(socket, printStream);\n+        checkTestVMExitCode(printStream);\n@@ -96,0 +100,4 @@\n+    public String getTestVMOutput() {\n+        return oa.getOutput();\n+    }\n+\n@@ -183,1 +191,1 @@\n-    private void processSocketOutput(TestFrameworkSocket socket) {\n+    private void processSocketOutput(TestFrameworkSocket socket, PrintStream printStream) {\n@@ -206,1 +214,1 @@\n-            System.out.println();\n+            printStream.println();\n@@ -208,4 +216,4 @@\n-                System.out.println(\"Run flag defined test list\");\n-                System.out.println(\"--------------------------\");\n-                System.out.println(testListBuilder);\n-                System.out.println();\n+                printStream.println(\"Run flag defined test list\");\n+                printStream.println(\"--------------------------\");\n+                printStream.println(testListBuilder);\n+                printStream.println();\n@@ -214,3 +222,3 @@\n-                System.out.println(\"Messages from Test VM\");\n-                System.out.println(\"---------------------\");\n-                System.out.println(messagesBuilder);\n+                printStream.println(\"Messages from Test VM\");\n+                printStream.println(\"---------------------\");\n+                printStream.println(messagesBuilder);\n@@ -224,1 +232,1 @@\n-    private void checkTestVMExitCode() {\n+    private void checkTestVMExitCode(PrintStream printStream) {\n@@ -227,2 +235,2 @@\n-            System.out.println(\"--- OUTPUT TestFramework test VM ---\");\n-            System.out.println(oa.getOutput());\n+            printStream.println(\"--- OUTPUT TestFramework test VM ---\");\n+            printStream.println(oa.getOutput());\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/TestVMProcess.java","additions":25,"deletions":17,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.io.PrintStream;\n@@ -62,1 +63,1 @@\n-    public TestFrameworkSocket() {\n+    public TestFrameworkSocket(PrintStream printStream) {\n@@ -71,1 +72,1 @@\n-            System.out.println(\"TestFramework server socket uses port \" + port);\n+            printStream.println(\"TestFramework server socket uses port \" + port);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/shared\/TestFrameworkSocket.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n- *                   -DIgnoreCompilerControls=true -DExcludeRandom=true -DVerifyIR=true\n- *                   -DPreferCommandLineFlags=true -DPrintRuleMatchingTime=true ir_framework.tests.TestDFlags\n+ *                   -DIgnoreCompilerControls=true -DExcludeRandom=true -DVerifyIR=true -DPreferCommandLineFlags=true\n+ *                   -DPrintRuleMatchingTime=true -DForceSequentialScenarios=true ir_framework.tests.TestDFlags\n@@ -42,2 +42,2 @@\n- *                   -DIgnoreCompilerControls=true -DExcludeRandom=true -DVerifyIR=false\n- *                   -DPreferCommandLineFlags=true -DPrintRuleMatchingTime=true ir_framework.tests.TestDFlags\n+ *                   -DIgnoreCompilerControls=true -DExcludeRandom=true -DVerifyIR=false -DPreferCommandLineFlags=true\n+ *                   -DPrintRuleMatchingTime=true -DForceSequentialScenarios=true ir_framework.tests.TestDFlags\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestDFlags.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.Scenario;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @requires vm.debug == true & vm.flagless\n+ * @summary Test -DForceSequentialScenarios property flag.\n+ * @library \/test\/lib \/\n+ * @run driver ir_framework.tests.TestDForceSequentialScenarios\n+ *\/\n+\n+public class TestDForceSequentialScenarios {\n+    public static void main(String[] args) throws Exception {\n+        if (args.length > 0) {\n+                Scenario s1 = new Scenario(1);\n+                Scenario s2 = new Scenario(5);\n+                Scenario s3 = new Scenario(10);\n+                new TestFramework().addScenarios(s1, s2, s3).startParallel();\n+        } else {\n+            ProcessBuilder process = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                    \"-Dtest.jdk=\" + Utils.TEST_JDK,\n+                    \"-DForceSequentialScenarios=true\",\n+                    \"ir_framework.tests.TestDForceSequentialScenarios\",\n+                    \"test\");\n+            OutputAnalyzer oa = ProcessTools.executeProcess(process);\n+            oa.shouldHaveExitValue(0);\n+            System.out.println(oa.getOutput());\n+            Asserts.assertTrue(oa.getOutput().matches(\"(?s).*Scenario #1.*Scenario #5.*Scenario #10.*\"));\n+        }\n+    }\n+\n+    @Test\n+    public void test() {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestDForceSequentialScenarios.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -70,1 +70,2 @@\n-        TestVMProcess testVMProcess = new TestVMProcess(testVMFlags, testClass, null, -1, false, false);\n+        TestVMProcess testVMProcess = new TestVMProcess();\n+        testVMProcess.runProcess(testVMFlags, testClass, null, -1, false, false, System.out);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPhaseIRMatching.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.function.Consumer;\n@@ -36,1 +37,1 @@\n- * @summary Test scenarios with the framework.\n+ * @summary Test scenarios with the framework while running them sequentially.\n@@ -41,0 +42,8 @@\n+\/*\n+ * @test\n+ * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n+ * @summary Test scenarios with the framework while running them concurrently.\n+ * @library \/test\/lib \/testlibrary_tests \/\n+ * @run driver ir_framework.tests.TestScenarios parallel\n+ *\/\n+\n@@ -43,0 +52,3 @@\n+        TestFramework testFramework;\n+        Consumer<TestFramework> startMethod =\n+                args.length > 0 && args[0].equals(\"parallel\") ? TestFramework::startParallel : TestFramework::start;\n@@ -54,1 +66,1 @@\n-            new TestFramework().addScenarios(sDefault, s1, s2, s3).start();\n+            startMethod.accept(new TestFramework().addScenarios(sDefault, s1, s2, s3));\n@@ -64,1 +76,1 @@\n-            new TestFramework().addScenarios(s1, s2, s3).start();\n+            startMethod.accept(new TestFramework().addScenarios(s1, s2, s3));\n@@ -72,1 +84,1 @@\n-        new TestFramework(ScenarioTest.class).addScenarios(s1, s2, s3).start();\n+        startMethod.accept(new TestFramework(ScenarioTest.class).addScenarios(s1, s2, s3));\n@@ -80,1 +92,1 @@\n-            new TestFramework(MyExceptionTest.class).addScenarios(s1, s2, s3).start();\n+            startMethod.accept(new TestFramework(MyExceptionTest.class).addScenarios(s1, s2, s3));\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenarios.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"}]}