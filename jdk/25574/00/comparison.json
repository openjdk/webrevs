{"files":[{"patch":"@@ -87,0 +87,1 @@\n+<li><a href=\"#noexcept\" id=\"toc-noexcept\">noexcept<\/a><\/li>\n@@ -1113,0 +1114,53 @@\n+<h3 id=\"noexcept\">noexcept<\/h3>\n+<p>Use of <code>noexcept<\/code> exception specifications (<a\n+href=\"http:\/\/wg21.link\/n3050\">n3050<\/a>) are permitted with restrictions\n+described below.<\/p>\n+<ul>\n+<li>Only the abbreviated form of <code>noexcept<\/code> exception\n+specifications are permitted. <code>noexcept<\/code> exception\n+specifications with arguments are forbidden.<\/li>\n+<li>Allocation functions that may return <code>nullptr<\/code> to\n+indicate allocation failure must be declared <code>noexcept<\/code>.<\/li>\n+<li>All other uses of <code>noexcept<\/code> exception specifications are\n+forbidden.<\/li>\n+<li><code>noexcept<\/code> expressions are forbidden.<\/li>\n+<li>Dynamic exception specifications are forbidden.<\/li>\n+<\/ul>\n+<p>HotSpot is built with exceptions disabled, e.g. compile with\n+<code>-fno-exceptions<\/code> (gcc, clang) or no <code>\/EH<\/code> option\n+(MSVC++). So why do we need to consider <code>noexcept<\/code> at all?\n+It's because <code>noexcept<\/code> exception specifications serve two\n+distinct purposes.<\/p>\n+<p>The first is to allow the compiler to avoid generating code or data\n+in support of exceptions being thrown by a function. But this is\n+unnecessary, because exceptions are disabled.<\/p>\n+<p>The second is to allow the compiler and library code to choose\n+different algorithms, depending on whether a some function may throw\n+exceptions. This is only relevant to a certain set of functions.<\/p>\n+<ul>\n+<li><p>Some allocation functions (<code>operator new<\/code> and\n+<code>operator new[]<\/code>) return <code>nullptr<\/code> to indicate\n+allocation failure. If a <code>new<\/code> expression calls such an\n+allocation function, it must check for and handle that possibility.\n+Declaring such a function <code>noexcept<\/code> informs the compiler\n+that <code>nullptr<\/code> is a possible result. If an allocation\n+function is not declared <code>noexcept<\/code> then the compiler may\n+elide that checking and handling for a using <code>new<\/code>\n+expression.<\/p><\/li>\n+<li><p>Certain Standard Library facilities (notably containers) provide\n+different guarantees for some operations (and may choose different\n+algorithms to implement those operations), depending on whether certain\n+functions (constructors, copy\/move operations, swap) are nothrow or not.\n+They detect this using type traits that test whether a function is\n+declared <code>noexcept<\/code>. This can have a significant performance\n+impact if, for example, copying is chosen over a potentially throwing\n+move. But this isn't relevant, since HotSpot forbids the use of most\n+Standard Library facilities.<\/p><\/li>\n+<\/ul>\n+<p>HotSpot code can assume no exceptions will ever be thrown, even from\n+functions not declared <code>noexcept<\/code>. So HotSpot code doesn't\n+ever need to check, either with conditional exception specifications or\n+with <code>noexcept<\/code> expressions.<\/p>\n+<p>Dynamic exception specifications were deprecated in C++11. C++17\n+removed all but <code>throw()<\/code>, with that remaining a deprecated\n+equivalent to <code>noexcept<\/code>.<\/p>\n","filename":"doc\/hotspot-style.html","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -1107,0 +1107,50 @@\n+### noexcept\n+\n+Use of `noexcept` exception specifications\n+([n3050](http:\/\/wg21.link\/n3050))\n+are permitted with restrictions described below.\n+\n+* Only the abbreviated form of `noexcept` exception specifications are\n+permitted. `noexcept` exception specifications with arguments are forbidden.\n+* Allocation functions that may return `nullptr` to indicate allocation\n+failure must be declared `noexcept`.\n+* All other uses of `noexcept` exception specifications are forbidden.\n+* `noexcept` expressions are forbidden.\n+* Dynamic exception specifications are forbidden.\n+\n+HotSpot is built with exceptions disabled, e.g. compile with `-fno-exceptions`\n+(gcc, clang) or no `\/EH` option (MSVC++). So why do we need to consider\n+`noexcept` at all? It's because `noexcept` exception specifications serve two\n+distinct purposes.\n+\n+The first is to allow the compiler to avoid generating code or data in support\n+of exceptions being thrown by a function. But this is unnecessary, because\n+exceptions are disabled.\n+\n+The second is to allow the compiler and library code to choose different\n+algorithms, depending on whether a some function may throw exceptions. This is\n+only relevant to a certain set of functions.\n+\n+* Some allocation functions (`operator new` and `operator new[]`) return\n+`nullptr` to indicate allocation failure. If a `new` expression calls such an\n+allocation function, it must check for and handle that possibility. Declaring\n+such a function `noexcept` informs the compiler that `nullptr` is a possible\n+result. If an allocation function is not declared `noexcept` then the compiler\n+may elide that checking and handling for a using `new` expression.\n+\n+* Certain Standard Library facilities (notably containers) provide different\n+guarantees for some operations (and may choose different algorithms to\n+implement those operations), depending on whether certain functions\n+(constructors, copy\/move operations, swap) are nothrow or not. They detect\n+this using type traits that test whether a function is declared `noexcept`.\n+This can have a significant performance impact if, for example, copying is\n+chosen over a potentially throwing move. But this isn't relevant, since\n+HotSpot forbids the use of most Standard Library facilities.\n+\n+HotSpot code can assume no exceptions will ever be thrown, even from functions\n+not declared `noexcept`. So HotSpot code doesn't ever need to check, either\n+with conditional exception specifications or with `noexcept` expressions.\n+\n+Dynamic exception specifications were deprecated in C++11. C++17 removed all\n+but `throw()`, with that remaining a deprecated equivalent to `noexcept`.\n+\n","filename":"doc\/hotspot-style.md","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"}]}