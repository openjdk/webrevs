{"files":[{"patch":"@@ -267,1 +267,0 @@\n-        assert (!parent.path.isEmpty());\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -120,0 +120,1 @@\n+        if (parent.isEmpty()) return child;\n","filename":"src\/java.base\/unix\/classes\/java\/io\/UnixFileSystem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4842706 8024695\n+ * @bug 4842706 8024695 8361587\n@@ -39,0 +39,1 @@\n+import java.util.List;\n@@ -40,0 +41,1 @@\n+import java.util.stream.Collectors;\n@@ -108,0 +110,5 @@\n+    @Test\n+    public void getAbsoluteFile() {\n+        assertEquals(p.toAbsolutePath().toFile(), f.getAbsoluteFile());\n+    }\n+\n@@ -115,0 +122,10 @@\n+    @Test\n+    public void getCanonicalFile() throws IOException {\n+        assertEquals(p.toRealPath().toFile(), f.getCanonicalFile());\n+    }\n+\n+    @Test\n+    public void getCanonicalPath() throws IOException {\n+        assertEquals(p.toRealPath().toString(), f.getCanonicalPath());\n+    }\n+\n@@ -139,0 +156,5 @@\n+    @Test\n+    public void getParentFile() {\n+        assertNull(f.getParentFile());\n+    }\n+\n@@ -201,0 +223,34 @@\n+    @Test\n+    public void listFiles() throws IOException {\n+        File child = new File(f.getAbsoluteFile(), \"child\");\n+        assertTrue(child.createNewFile());\n+        child.deleteOnExit();\n+\n+        File[] files = f.listFiles();\n+        for (File file : files)\n+            assertEquals(-1, f.toString().indexOf(File.separatorChar));\n+\n+        Set<String> ioSet = Arrays.stream(files)\n+            .map(File::getName)\n+            .collect(Collectors.toSet());\n+\n+        assertTrue(ioSet.contains(child.getName()));\n+\n+        Set<String> nioSet = Files.list(p)\n+            .map(Path::getFileName)\n+            .map(Path::toString)\n+            .collect(Collectors.toSet());\n+        assertEquals(nioSet, ioSet);\n+    }\n+\n+    @Test\n+    public void listRoots() {\n+        Set<String> expected = Arrays.stream(f.getAbsoluteFile().listRoots())\n+            .map(File::toString)\n+            .collect(Collectors.toSet());\n+        Set<String> actual = Arrays.stream(f.listRoots())\n+            .map(File::toString)\n+            .collect(Collectors.toSet());\n+        assertEquals(expected, actual);\n+    }\n+\n@@ -206,0 +262,31 @@\n+    @Test\n+    @DisabledOnOs({OS.WINDOWS})\n+    public void mkdirsNotWindows() {\n+        \/\/ The empty parent causes the child to be resolved against the\n+        \/\/ system-dependent directory, the Unix default for which is \"\/\"\n+        File child = new File(f, \"child\");\n+        assertEquals(\"\/child\", child.toString());\n+        assertFalse(child.mkdirs());\n+    }\n+\n+    @Test\n+    @EnabledOnOs({OS.WINDOWS})\n+    public void mkdirsWindows() {\n+        \/\/ The empty parent causes the child to be resolved against the\n+        \/\/ system-dependent directory, the Windows default for which is \"\\\\\"\n+        String childName = \"child\" + System.nanoTime();\n+        File child = new File(f, childName);\n+        assertEquals(\"\\\\\" + childName, child.toString());\n+        if (!child.exists()) {\n+            assertTrue(child.mkdirs());\n+            assertTrue(child.delete());\n+        }\n+    }\n+\n+    @Test\n+    public void renameTo() throws IOException {\n+        File tmp = File.createTempFile(\"foo\", \"bar\", f.getAbsoluteFile());\n+        assertTrue(tmp.exists());\n+        assertFalse(f.renameTo(tmp));\n+    }\n+\n@@ -274,0 +361,6 @@\n+    @Test\n+    public String toString() {\n+        assertEquals(EMPTY_STRING, f.toString());\n+        return EMPTY_STRING;\n+    }\n+\n","filename":"test\/jdk\/java\/io\/File\/EmptyPath.java","additions":94,"deletions":1,"binary":false,"changes":95,"status":"modified"}]}