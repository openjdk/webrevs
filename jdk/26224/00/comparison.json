{"files":[{"patch":"@@ -267,1 +267,0 @@\n-        assert (!parent.path.isEmpty());\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -120,0 +120,1 @@\n+        if (parent.isEmpty()) return child;\n","filename":"src\/java.base\/unix\/classes\/java\/io\/UnixFileSystem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4842706 8024695\n+ * @bug 4842706 8024695 8361587\n@@ -39,0 +39,1 @@\n+import java.util.List;\n@@ -201,0 +202,20 @@\n+    @Test\n+    public void listFiles() throws IOException {\n+        File child = new File(f.getAbsoluteFile(), \"child\");\n+        assertTrue(child.createNewFile());\n+        child.deleteOnExit();\n+\n+        assertTrue(Arrays.asList(f.list()).contains(child.getName()));\n+\n+        File[] files = f.listFiles();\n+        for (File file : files)\n+            assertTrue(f.toString().indexOf(File.separatorChar) == -1);\n+\n+        List<String> ioNames =\n+            Arrays.asList(files).stream().map(f -> f.toString()).toList();\n+        Set<String> ioSet = new HashSet(ioNames);\n+        Set<String> nioSet = new HashSet();\n+        Files.list(p).forEach((x) -> nioSet.add(x.toString()));\n+        assertEquals(nioSet, ioSet);\n+    }\n+\n","filename":"test\/jdk\/java\/io\/File\/EmptyPath.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}