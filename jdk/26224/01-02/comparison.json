{"files":[{"patch":"@@ -110,0 +110,5 @@\n+    @Test\n+    public void getAbsoluteFile() {\n+        assertEquals(p.toAbsolutePath(), f.getAbsoluteFile().toPath());\n+    }\n+\n@@ -117,0 +122,10 @@\n+    @Test\n+    public void getCanonicalFile() throws IOException {\n+        assertEquals(p.toRealPath(), f.getCanonicalFile().toPath());\n+    }\n+\n+    @Test\n+    public void getCanonicalPath() throws IOException {\n+        assertEquals(p.toRealPath().toString(), f.getCanonicalPath());\n+    }\n+\n@@ -141,0 +156,5 @@\n+    @Test\n+    public void getParentFile() {\n+        assertNull(f.getParentFile());\n+    }\n+\n@@ -225,0 +245,11 @@\n+    @Test\n+    public void listRoots() {\n+        Set<String> expected = Arrays.stream(f.getAbsoluteFile().listRoots())\n+            .map(File::toString)\n+            .collect(Collectors.toSet());\n+        Set<String> actual = Arrays.stream(f.listRoots())\n+            .map(File::toString)\n+            .collect(Collectors.toSet());\n+        assertEquals(expected, actual);\n+    }\n+\n@@ -230,0 +261,13 @@\n+    @Test\n+    public void mkdirs() {\n+        File child = new File(f, \"child\");\n+        assertFalse(child.mkdirs());\n+    }\n+\n+    @Test\n+    public void renameTo() throws IOException {\n+        File tmp = File.createTempFile(\"foo\", \"bar\", f.getAbsoluteFile());\n+        assertTrue(tmp.exists());\n+        assertFalse(f.renameTo(tmp));\n+    }\n+\n@@ -298,0 +342,6 @@\n+    @Test\n+    public String toString() {\n+        assertEquals(EMPTY_STRING, f.toString());\n+        return EMPTY_STRING;\n+    }\n+\n","filename":"test\/jdk\/java\/io\/File\/EmptyPath.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"}]}