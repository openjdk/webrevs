{"files":[{"patch":"@@ -955,1 +955,2 @@\n-static bool const_shift_count(PhaseGVN* phase, Node* shiftNode, int* count) {\n+\/\/ Returns whether the shift amount is constant. If so, sets count.\n+static bool const_shift_count(PhaseGVN* phase, const Node* shiftNode, int* count) {\n@@ -964,5 +965,22 @@\n-static int maskShiftAmount(PhaseGVN* phase, Node* shiftNode, uint nBits) {\n-  int count = 0;\n-  if (const_shift_count(phase, shiftNode, &count)) {\n-    int maskedShift = count & (nBits - 1);\n-    if (maskedShift == 0) {\n+\/\/ Returns whether the shift amount is constant. If so, sets real_shift and masked_shift.\n+static bool mask_shift_amount(PhaseGVN* phase, const Node* shiftNode, uint nBits, int& real_shift, int& masked_shift) {\n+  if (const_shift_count(phase, shiftNode, &real_shift)) {\n+    masked_shift = real_shift & (nBits - 1);\n+    return true;\n+  }\n+  return false;\n+}\n+\n+\/\/ Convenience for when we don't care about the real amount\n+static bool mask_shift_amount(PhaseGVN* phase, const Node* shiftNode, uint nBits, int& masked_shift) {\n+  int real_shift;\n+  return mask_shift_amount(phase, shiftNode, nBits, real_shift, masked_shift);\n+}\n+\n+\/\/ Use this in ::Ideal only with shiftNode == this!\n+\/\/ Returns the masked shift amount if constant or 0 if not constant.\n+static int mask_and_replace_shift_amount(PhaseGVN* phase, Node* shiftNode, uint nBits) {\n+  int real_shift;\n+  int masked_shift;\n+  if (mask_shift_amount(phase, shiftNode, nBits, real_shift, masked_shift)) {\n+    if (masked_shift == 0) {\n@@ -973,1 +991,1 @@\n-    if (count != maskedShift) {\n+    if (real_shift != masked_shift) {\n@@ -975,1 +993,1 @@\n-      if (igvn) {\n+      if (igvn != nullptr) {\n@@ -978,1 +996,1 @@\n-      shiftNode->set_req(2, phase->intcon(maskedShift)); \/\/ Replace shift count with masked value.\n+      shiftNode->set_req(2, phase->intcon(masked_shift)); \/\/ Replace shift count with masked value.\n@@ -980,1 +998,1 @@\n-    return maskedShift;\n+    return masked_shift;\n@@ -982,0 +1000,1 @@\n+  \/\/ Not a shift by a constant.\n@@ -986,1 +1005,1 @@\n-\/\/    outer_shift = (_ << con0)\n+\/\/   outer_shift = (_ << rhs0)\n@@ -988,4 +1007,5 @@\n-\/\/   outer_shift = ((X << con1) << con0)\n-\/\/   we denote inner_shift the nested expression (X << con1)\n-\/\/\n-\/\/ con0 and con1 are both in [0..nbits), as they are computed by maskShiftAmount.\n+\/\/   outer_shift = ((X << rhs1) << rhs0)\n+\/\/   where rhs0 and rhs1 are constant\n+\/\/   we denote inner_shift the nested expression (X << rhs1)\n+\/\/   con0 = rhs1 % nbits and con0 = rhs1 % nbits\n+\/\/   where nbits is the number of bits of the shifts\n@@ -996,1 +1016,1 @@\n-static Node* collapse_nested_shift_left(PhaseGVN* phase, Node* outer_shift, int con0, BasicType bt) {\n+static Node* collapse_nested_shift_left(PhaseGVN* phase, const Node* outer_shift, int con0, BasicType bt) {\n@@ -998,1 +1018,1 @@\n-  Node* inner_shift = outer_shift->in(1);\n+  const Node* inner_shift = outer_shift->in(1);\n@@ -1003,2 +1023,3 @@\n-  if (!phase->is_IterGVN()) {\n-    phase->record_for_igvn(outer_shift);\n+  int nbits = static_cast<int>(bits_per_java_integer(bt));\n+  int con1;\n+  if (!mask_shift_amount(phase, inner_shift, nbits, con1)) {\n@@ -1008,3 +1029,2 @@\n-  int nbits = static_cast<int>(bits_per_java_integer(bt));\n-  int con1 = maskShiftAmount(phase, inner_shift, nbits);\n-  if (con1 == 0) { \/\/ Either non-const, or actually 0 (up to mask) and then delegated to Identity()\n+  if (con1 == 0) {\n+    \/\/ We let the Identity() of the inner shift do its job.\n@@ -1044,1 +1064,1 @@\n-  int con = maskShiftAmount(phase, this, BitsPerJavaInteger);\n+  int con = mask_and_replace_shift_amount(phase, this, BitsPerJavaInteger);\n@@ -1230,1 +1250,1 @@\n-  int con = maskShiftAmount(phase, this, BitsPerJavaLong);\n+  int con = mask_and_replace_shift_amount(phase, this, BitsPerJavaLong);\n@@ -1451,1 +1471,1 @@\n-  int shift = maskShiftAmount(phase, this, bits_per_java_integer(bt));\n+  int shift = mask_and_replace_shift_amount(phase, this, bits_per_java_integer(bt));\n@@ -1481,1 +1501,1 @@\n-  int shift = maskShiftAmount(phase, this, BitsPerJavaInteger);\n+  int shift = mask_and_replace_shift_amount(phase, this, BitsPerJavaInteger);\n@@ -1668,1 +1688,1 @@\n-  int con = maskShiftAmount(phase, this, BitsPerJavaInteger);\n+  int con = mask_and_replace_shift_amount(phase, this, BitsPerJavaInteger);\n@@ -1832,1 +1852,1 @@\n-  int con = maskShiftAmount(phase, this, BitsPerJavaLong);\n+  int con = mask_and_replace_shift_amount(phase, this, BitsPerJavaLong);\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":48,"deletions":28,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    public static long shift=0;\n+    public static long shift = 0;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/DoubleLShiftCrashDuringIGVN.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}