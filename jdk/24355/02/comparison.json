{"files":[{"patch":"@@ -953,4 +953,3 @@\n-\/\/=============================================================================\n-\n-static bool const_shift_count(PhaseGVN* phase, Node* shiftNode, int* count) {\n-  const TypeInt* tcount = phase->type(shiftNode->in(2))->isa_int();\n+\/\/ Returns whether the shift amount is constant. If so, sets count.\n+static bool const_shift_count(PhaseGVN* phase, const Node* shift_node, int* count) {\n+  const TypeInt* tcount = phase->type(shift_node->in(2))->isa_int();\n@@ -964,5 +963,22 @@\n-static int maskShiftAmount(PhaseGVN* phase, Node* shiftNode, uint nBits) {\n-  int count = 0;\n-  if (const_shift_count(phase, shiftNode, &count)) {\n-    int maskedShift = count & (nBits - 1);\n-    if (maskedShift == 0) {\n+\/\/ Returns whether the shift amount is constant. If so, sets real_shift and masked_shift.\n+static bool mask_shift_amount(PhaseGVN* phase, const Node* shift_node, uint nBits, int& real_shift, int& masked_shift) {\n+  if (const_shift_count(phase, shift_node, &real_shift)) {\n+    masked_shift = real_shift & (nBits - 1);\n+    return true;\n+  }\n+  return false;\n+}\n+\n+\/\/ Convenience for when we don't care about the real amount\n+static bool mask_shift_amount(PhaseGVN* phase, const Node* shift_node, uint nBits, int& masked_shift) {\n+  int real_shift;\n+  return mask_shift_amount(phase, shift_node, nBits, real_shift, masked_shift);\n+}\n+\n+\/\/ Use this in ::Ideal only with shiftNode == this!\n+\/\/ Returns the masked shift amount if constant or 0 if not constant.\n+static int mask_and_replace_shift_amount(PhaseGVN* phase, Node* shift_node, uint nBits) {\n+  int real_shift;\n+  int masked_shift;\n+  if (mask_shift_amount(phase, shift_node, nBits, real_shift, masked_shift)) {\n+    if (masked_shift == 0) {\n@@ -973,2 +989,1 @@\n-    if (count != maskedShift) {\n-      shiftNode->set_req(2, phase->intcon(maskedShift)); \/\/ Replace shift count with masked value.\n+    if (real_shift != masked_shift) {\n@@ -976,2 +991,2 @@\n-      if (igvn) {\n-        igvn->rehash_node_delayed(shiftNode);\n+      if (igvn != nullptr) {\n+        igvn->_worklist.push(shift_node);\n@@ -979,0 +994,1 @@\n+      shift_node->set_req(2, phase->intcon(masked_shift)); \/\/ Replace shift count with masked value.\n@@ -980,1 +996,1 @@\n-    return maskedShift;\n+    return masked_shift;\n@@ -982,0 +998,1 @@\n+  \/\/ Not a shift by a constant.\n@@ -986,1 +1003,1 @@\n-\/\/    outer_shift = (_ << con0)\n+\/\/   outer_shift = (_ << rhs_outer)\n@@ -988,4 +1005,5 @@\n-\/\/   outer_shift = ((X << con1) << con0)\n-\/\/   we denote inner_shift the nested expression (X << con1)\n-\/\/\n-\/\/ con0 and con1 are both in [0..nbits), as they are computed by maskShiftAmount.\n+\/\/   outer_shift = ((X << rhs_inner) << rhs_outer)\n+\/\/   where rhs_outer and rhs_inner are constant\n+\/\/   we denote inner_shift the nested expression (X << rhs_inner)\n+\/\/   con_inner = rhs_inner % nbits and con_outer = rhs_outer % nbits\n+\/\/   where nbits is the number of bits of the shifts\n@@ -994,3 +1012,3 @@\n-\/\/ if con0 + con1 >= nbits => 0\n-\/\/ if con0 + con1 < nbits => X << (con1 + con0)\n-static Node* collapse_nested_shift_left(PhaseGVN* phase, Node* outer_shift, int con0, BasicType bt) {\n+\/\/ if con_outer + con_inner >= nbits => 0\n+\/\/ if con_outer + con_inner < nbits => X << (con_outer + con_inner)\n+static Node* collapse_nested_shift_left(PhaseGVN* phase, const Node* outer_shift, int con_outer, BasicType bt) {\n@@ -998,2 +1016,1 @@\n-  int nbits = static_cast<int>(bits_per_java_integer(bt));\n-  Node* inner_shift = outer_shift->in(1);\n+  const Node* inner_shift = outer_shift->in(1);\n@@ -1004,2 +1021,8 @@\n-  int con1 = maskShiftAmount(phase, inner_shift, nbits);\n-  if (con1 == 0) { \/\/ Either non-const, or actually 0 (up to mask) and then delegated to Identity()\n+  int nbits = static_cast<int>(bits_per_java_integer(bt));\n+  int con_inner;\n+  if (!mask_shift_amount(phase, inner_shift, nbits, con_inner)) {\n+    return nullptr;\n+  }\n+\n+  if (con_inner == 0) {\n+    \/\/ We let the Identity() of the inner shift do its job.\n@@ -1009,1 +1032,1 @@\n-  if (con0 + con1 >= nbits) {\n+  if (con_outer + con_inner >= nbits) {\n@@ -1018,1 +1041,1 @@\n-  Node* con0_plus_con1 = phase->intcon(con0 + con1);\n+  Node* con0_plus_con1 = phase->intcon(con_outer + con_inner);\n@@ -1039,1 +1062,1 @@\n-  int con = maskShiftAmount(phase, this, BitsPerJavaInteger);\n+  int con = mask_and_replace_shift_amount(phase, this, BitsPerJavaInteger);\n@@ -1225,1 +1248,1 @@\n-  int con = maskShiftAmount(phase, this, BitsPerJavaLong);\n+  int con = mask_and_replace_shift_amount(phase, this, BitsPerJavaLong);\n@@ -1446,1 +1469,1 @@\n-  int shift = maskShiftAmount(phase, this, bits_per_java_integer(bt));\n+  int shift = mask_and_replace_shift_amount(phase, this, bits_per_java_integer(bt));\n@@ -1476,1 +1499,1 @@\n-  int shift = maskShiftAmount(phase, this, BitsPerJavaInteger);\n+  int shift = mask_and_replace_shift_amount(phase, this, BitsPerJavaInteger);\n@@ -1663,1 +1686,1 @@\n-  int con = maskShiftAmount(phase, this, BitsPerJavaInteger);\n+  int con = mask_and_replace_shift_amount(phase, this, BitsPerJavaInteger);\n@@ -1827,1 +1850,1 @@\n-  int con = maskShiftAmount(phase, this, BitsPerJavaLong);\n+  int con = mask_and_replace_shift_amount(phase, this, BitsPerJavaLong);\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":57,"deletions":34,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8353345\n+ * @summary During the transformation (X << con1) << con2 ==> X << (con1 + con2) in IGVN,\n+ *          we modified the inner shift, during the transformation of the outer shift without\n+ *          removing it from the hashtable\n+ *\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*DoubleLShiftCrashDuringIGVN*::* -Xcomp DoubleLShiftCrashDuringIGVN\n+ *\/\n+\n+public class DoubleLShiftCrashDuringIGVN {\n+    public static long shift = 0;\n+\n+    public static int test() {\n+        int s = 1;\n+\n+        shift = 12;\n+        for (int i = 0; i < 4; i++) {\n+            for (int j = 0; j < 4; j++) {\n+                s <<= shift;\n+            }\n+            shift = 33;\n+        }\n+        return s;\n+    }\n+\n+    public static void main(String[] strArr) {\n+        test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/DoubleLShiftCrashDuringIGVN.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}