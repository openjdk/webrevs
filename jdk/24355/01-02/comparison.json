{"files":[{"patch":"@@ -953,2 +953,0 @@\n-\/\/=============================================================================\n-\n@@ -956,2 +954,2 @@\n-static bool const_shift_count(PhaseGVN* phase, const Node* shiftNode, int* count) {\n-  const TypeInt* tcount = phase->type(shiftNode->in(2))->isa_int();\n+static bool const_shift_count(PhaseGVN* phase, const Node* shift_node, int* count) {\n+  const TypeInt* tcount = phase->type(shift_node->in(2))->isa_int();\n@@ -966,2 +964,2 @@\n-static bool mask_shift_amount(PhaseGVN* phase, const Node* shiftNode, uint nBits, int& real_shift, int& masked_shift) {\n-  if (const_shift_count(phase, shiftNode, &real_shift)) {\n+static bool mask_shift_amount(PhaseGVN* phase, const Node* shift_node, uint nBits, int& real_shift, int& masked_shift) {\n+  if (const_shift_count(phase, shift_node, &real_shift)) {\n@@ -975,1 +973,1 @@\n-static bool mask_shift_amount(PhaseGVN* phase, const Node* shiftNode, uint nBits, int& masked_shift) {\n+static bool mask_shift_amount(PhaseGVN* phase, const Node* shift_node, uint nBits, int& masked_shift) {\n@@ -977,1 +975,1 @@\n-  return mask_shift_amount(phase, shiftNode, nBits, real_shift, masked_shift);\n+  return mask_shift_amount(phase, shift_node, nBits, real_shift, masked_shift);\n@@ -982,1 +980,1 @@\n-static int mask_and_replace_shift_amount(PhaseGVN* phase, Node* shiftNode, uint nBits) {\n+static int mask_and_replace_shift_amount(PhaseGVN* phase, Node* shift_node, uint nBits) {\n@@ -985,1 +983,1 @@\n-  if (mask_shift_amount(phase, shiftNode, nBits, real_shift, masked_shift)) {\n+  if (mask_shift_amount(phase, shift_node, nBits, real_shift, masked_shift)) {\n@@ -994,1 +992,1 @@\n-        igvn->rehash_node_delayed(shiftNode);\n+        igvn->_worklist.push(shift_node);\n@@ -996,1 +994,1 @@\n-      shiftNode->set_req(2, phase->intcon(masked_shift)); \/\/ Replace shift count with masked value.\n+      shift_node->set_req(2, phase->intcon(masked_shift)); \/\/ Replace shift count with masked value.\n@@ -1005,1 +1003,1 @@\n-\/\/   outer_shift = (_ << rhs0)\n+\/\/   outer_shift = (_ << rhs_outer)\n@@ -1007,4 +1005,4 @@\n-\/\/   outer_shift = ((X << rhs1) << rhs0)\n-\/\/   where rhs0 and rhs1 are constant\n-\/\/   we denote inner_shift the nested expression (X << rhs1)\n-\/\/   con0 = rhs1 % nbits and con0 = rhs1 % nbits\n+\/\/   outer_shift = ((X << rhs_inner) << rhs_outer)\n+\/\/   where rhs_outer and rhs_inner are constant\n+\/\/   we denote inner_shift the nested expression (X << rhs_inner)\n+\/\/   con_inner = rhs_inner % nbits and con_outer = rhs_outer % nbits\n@@ -1014,3 +1012,3 @@\n-\/\/ if con0 + con1 >= nbits => 0\n-\/\/ if con0 + con1 < nbits => X << (con1 + con0)\n-static Node* collapse_nested_shift_left(PhaseGVN* phase, const Node* outer_shift, int con0, BasicType bt) {\n+\/\/ if con_outer + con_inner >= nbits => 0\n+\/\/ if con_outer + con_inner < nbits => X << (con_outer + con_inner)\n+static Node* collapse_nested_shift_left(PhaseGVN* phase, const Node* outer_shift, int con_outer, BasicType bt) {\n@@ -1024,2 +1022,2 @@\n-  int con1;\n-  if (!mask_shift_amount(phase, inner_shift, nbits, con1)) {\n+  int con_inner;\n+  if (!mask_shift_amount(phase, inner_shift, nbits, con_inner)) {\n@@ -1029,1 +1027,1 @@\n-  if (con1 == 0) {\n+  if (con_inner == 0) {\n@@ -1034,1 +1032,1 @@\n-  if (con0 + con1 >= nbits) {\n+  if (con_outer + con_inner >= nbits) {\n@@ -1043,1 +1041,1 @@\n-  Node* con0_plus_con1 = phase->intcon(con0 + con1);\n+  Node* con0_plus_con1 = phase->intcon(con_outer + con_inner);\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"}]}