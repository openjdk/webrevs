{"files":[{"patch":"@@ -935,0 +935,3 @@\n+  if (kit.failing()) {\n+    return nullptr;\n+  }\n@@ -1262,0 +1265,3 @@\n+      if (kit.failing()) {\n+        return nullptr;\n+      }\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4305,1 +4305,4 @@\n-    *obj = _gvn.transform(new CastPPNode(is_array_ctrl, *obj, TypeAryPtr::BOTTOM));\n+    Node* cast = _gvn.transform(new CastPPNode(is_array_ctrl, *obj, TypeAryPtr::BOTTOM));\n+    if (!cast->is_top()) {\n+      *obj = cast;\n+    }\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -109,0 +109,4 @@\n+      if (result()->is_top()) {\n+        assert(false, \"Can't determine return value.\");\n+        C->record_method_not_compilable(\"Can't determine return value.\");\n+      }\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Array;\n+import jdk.test.lib.Asserts;\n+\n+\/**\n+ * @test\n+ * @bug 8348631\n+ * @summary Test folding of array guards used by intrinsics.\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,TestArrayGuardWithInterfaces::test*\n+ *                   TestArrayGuardWithInterfaces\n+ *\/\n+public class TestArrayGuardWithInterfaces {\n+\n+    public static interface MyInterface { }\n+\n+    public static int test1(Object obj) {\n+        \/\/ Should be folded, arrays can never imlement 'MyInterface'\n+        return Array.getLength((MyInterface)obj);\n+    }\n+\n+    public static int test2(Object obj) {\n+        \/\/ Should not be folded, arrays implement 'Cloneable'\n+        return Array.getLength((Cloneable)obj);\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Warmup\n+        Class c = MyInterface.class;\n+        Array.getLength(args);\n+\n+        try {\n+            test1(null);\n+            throw new RuntimeException(\"No exception thrown\");\n+        } catch (Exception e) {\n+            \/\/ Expected\n+        }\n+        Asserts.assertEQ(test2(new int[1]), 1);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestArrayGuardWithInterfaces.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}