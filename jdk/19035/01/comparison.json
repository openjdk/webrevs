{"files":[{"patch":"@@ -68,1 +68,1 @@\n-  if (nm->is_native_method() || nm->is_compiled_by_c2() || nm->is_compiled_by_c1()) {\n+  if (nm->is_native_method() || nm->is_compiled_by_c2() || nm->is_compiled_by_c1() || nm->is_compiled_by_jvmci()) {\n@@ -72,6 +72,0 @@\n-#if INCLUDE_JVMCI\n-  if (nm->is_compiled_by_jvmci() && nm->jvmci_nmethod_data()->has_entry_barrier()) {\n-    return true;\n-  }\n-#endif\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -774,5 +774,2 @@\n-    \/\/ We would like to be strict about the nmethod entry barrier but there are various test\n-    \/\/ configurations which generate assembly without being a full compiler. So for now we enforce\n-    \/\/ that JIT compiled methods must have an nmethod barrier.\n-    bool install_default = JVMCIENV->get_HotSpotNmethod_isDefault(installed_code) != 0;\n-    if (_nmethod_entry_patch_offset == -1 && install_default) {\n+    \/\/ Enforce that compiled methods have an nmethod barrier.\n+    if (_nmethod_entry_patch_offset == -1) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -790,0 +790,1 @@\n+  guarantee(nmethod_entry_patch_offset != -1, \"missing entry barrier\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,4 +57,2 @@\n-  \/\/ This is the offset of the patchable part of the nmethod entry barrier sequence.  The meaning is\n-  \/\/ somewhat platform dependent as the way patching is done varies by architecture.  Older JVMCI\n-  \/\/ based compilers didn't emit the entry barrier so having a positive value for this offset\n-  \/\/ confirms that the installed code supports the entry barrier.\n+  \/\/ This is the offset of the patchable part of the nmethod entry barrier sequence. The meaning is\n+  \/\/ somewhat platform dependent as the way patching is done varies by architecture.\n@@ -132,4 +130,0 @@\n-  bool has_entry_barrier() {\n-    return _nmethod_entry_patch_offset != -1;\n-  }\n-\n@@ -137,1 +131,0 @@\n-    guarantee(_nmethod_entry_patch_offset != -1, \"missing entry barrier\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8136421\n- * @requires vm.jvmci\n- * @library \/test\/lib \/\n- * @library ..\/common\/patches\n- * @modules java.base\/jdk.internal.misc\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n- *          jdk.internal.vm.ci\/jdk.vm.ci.code\n- *          jdk.internal.vm.ci\/jdk.vm.ci.code.site\n- *          jdk.internal.vm.ci\/jdk.vm.ci.meta\n- *          jdk.internal.vm.ci\/jdk.vm.ci.runtime\n- *\n- * @build jdk.internal.vm.ci\/jdk.vm.ci.hotspot.CompilerToVMHelper\n- *        jdk.test.whitebox.WhiteBox jdk.test.whitebox.parser.DiagnosticCommand\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- *                                jdk.test.whitebox.parser.DiagnosticCommand\n- * @run junit\/othervm -Xbootclasspath\/a:.\n- *                   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *                   -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI\n- *                   compiler.jvmci.compilerToVM.InvalidateInstalledCodeTest\n- *\/\n-\n-package compiler.jvmci.compilerToVM;\n-\n-import compiler.jvmci.common.CodeInstallerTest;\n-import compiler.jvmci.common.CTVMUtilities;\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.Utils;\n-import jdk.vm.ci.code.InstalledCode;\n-import jdk.vm.ci.code.site.Site;\n-import jdk.vm.ci.code.site.DataPatch;\n-import jdk.vm.ci.hotspot.CompilerToVMHelper;\n-import jdk.vm.ci.hotspot.HotSpotJVMCIRuntime;\n-import jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod;\n-import jdk.vm.ci.hotspot.HotSpotCompiledCode.Comment;\n-import jdk.vm.ci.hotspot.HotSpotNmethod;\n-import jdk.vm.ci.meta.Assumptions.Assumption;\n-\n-import java.util.List;\n-import org.junit.Test;\n-\n-public class InvalidateInstalledCodeTest extends CodeInstallerTest {\n-\n-    @Test\n-    public void testInvalidation() {\n-        List<CompileCodeTestCase> testCases\n-                = CompileCodeTestCase.generate(\/* bci = *\/ 0);\n-        testCases.addAll(CompileCodeTestCase.generate(\/* bci = *\/ -1));\n-        testCases.forEach(t -> check(t));\n-        checkNull();\n-    }\n-\n-    private void checkNull() {\n-        Utils.runAndCheckException(\n-                () -> CompilerToVMHelper.invalidateHotSpotNmethod(null, true),\n-                NullPointerException.class);\n-    }\n-\n-    private void check(CompileCodeTestCase testCase) {\n-        HotSpotResolvedJavaMethod javaMethod = CTVMUtilities.getResolvedMethod(testCase.executable);\n-        HotSpotNmethod nmethod = (HotSpotNmethod) installEmptyCode(new Site[0], new Assumption[0],\n-                new Comment[0], 8, new DataPatch[0], null);\n-\n-        Asserts.assertTrue(nmethod.isValid(), testCase + \" : code is invalid even before invalidation\");\n-\n-        Asserts.assertTrue(nmethod.isValid(), testCase + \" : code is not valid, i = \" + nmethod);\n-        Asserts.assertTrue(nmethod.isAlive(), testCase + \" : code is not alive, i = \" + nmethod);\n-        Asserts.assertNotEquals(nmethod.getStart(), 0L);\n-\n-        \/\/ Make nmethod non-entrant but still alive\n-        CompilerToVMHelper.invalidateHotSpotNmethod(nmethod, false);\n-        Asserts.assertFalse(nmethod.isValid(), testCase + \" : code is valid, i = \" + nmethod);\n-        Asserts.assertTrue(nmethod.isAlive(), testCase + \" : code is not alive, i = \" + nmethod);\n-        Asserts.assertEquals(nmethod.getStart(), 0L);\n-\n-        \/\/ Deoptimize the nmethod and cut the link to it from the HotSpotNmethod\n-        CompilerToVMHelper.invalidateHotSpotNmethod(nmethod, true);\n-        Asserts.assertFalse(nmethod.isValid(), testCase + \" : code is valid, i = \" + nmethod);\n-        Asserts.assertFalse(nmethod.isAlive(), testCase + \" : code is alive, i = \" + nmethod);\n-        Asserts.assertEquals(nmethod.getStart(), 0L);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/InvalidateInstalledCodeTest.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-compiler.jvmci.events.JvmciNotifyInstallEventTest\n-compiler.jvmci.common.JVMCIHelpers\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/events\/JvmciNotifyInstallEventTest.config","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,179 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8136421\n- * @requires vm.jvmci & !vm.graal.enabled & vm.compMode == \"Xmixed\"\n- * @library \/ \/test\/lib\n- * @library ..\/common\/patches\n- * @modules java.base\/jdk.internal.misc\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.org.objectweb.asm.tree\n- *          jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n- *          jdk.internal.vm.ci\/jdk.vm.ci.code\n- *          jdk.internal.vm.ci\/jdk.vm.ci.code.site\n- *          jdk.internal.vm.ci\/jdk.vm.ci.meta\n- *          jdk.internal.vm.ci\/jdk.vm.ci.runtime\n- *          jdk.internal.vm.ci\/jdk.vm.ci.services\n- *\n- * @build jdk.internal.vm.ci\/jdk.vm.ci.hotspot.CompilerToVMHelper\n- * @build compiler.jvmci.common.JVMCIHelpers\n- * @run driver jdk.test.lib.FileInstaller .\/JvmciNotifyInstallEventTest.config\n- *     .\/META-INF\/services\/jdk.vm.ci.services.JVMCIServiceLocator\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller\n- *      compiler.jvmci.common.JVMCIHelpers$EmptyHotspotCompiler\n- *      compiler.jvmci.common.JVMCIHelpers$EmptyCompilerFactory\n- *      compiler.jvmci.common.JVMCIHelpers$EmptyCompilationRequestResult\n- *      compiler.jvmci.common.JVMCIHelpers$EmptyVMEventListener\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions\n- *     -Djvmci.Compiler=EmptyCompiler -Xbootclasspath\/a:.\n- *     -XX:+UseJVMCICompiler -XX:-BootstrapJVMCI\n- *     -XX:-UseJVMCINativeLibrary -XX:JVMCITraceLevel=1\n- *     -Dtest.jvmci.forceRuntimeStubAllocFail=test_stub_that_fails_to_be_allocated\n- *     compiler.jvmci.events.JvmciNotifyInstallEventTest\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions\n- *     -Djvmci.Compiler=EmptyCompiler -Xbootclasspath\/a:.\n- *     -XX:+UseJVMCICompiler -XX:-BootstrapJVMCI -XX:JVMCINMethodSizeLimit=0\n- *     -XX:-UseJVMCINativeLibrary\n- *     compiler.jvmci.events.JvmciNotifyInstallEventTest\n- *\/\n-\n-package compiler.jvmci.events;\n-\n-import compiler.jvmci.common.CTVMUtilities;\n-import compiler.jvmci.common.testcases.SimpleClass;\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.Utils;\n-import jdk.vm.ci.services.JVMCIServiceLocator;\n-import jdk.vm.ci.code.BailoutException;\n-import jdk.vm.ci.code.CompiledCode;\n-import jdk.vm.ci.code.InstalledCode;\n-import jdk.vm.ci.code.site.DataPatch;\n-import jdk.vm.ci.code.site.Site;\n-import jdk.vm.ci.hotspot.HotSpotCodeCacheProvider;\n-import jdk.vm.ci.hotspot.HotSpotCompiledCode;\n-import jdk.vm.ci.hotspot.HotSpotCompiledCode.Comment;\n-import jdk.vm.ci.hotspot.HotSpotCompiledNmethod;\n-import jdk.vm.ci.hotspot.HotSpotJVMCIRuntime;\n-import jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod;\n-import jdk.vm.ci.hotspot.HotSpotVMEventListener;\n-import jdk.vm.ci.meta.Assumptions.Assumption;\n-import jdk.vm.ci.meta.ResolvedJavaMethod;\n-\n-import java.lang.reflect.Method;\n-\n-public class JvmciNotifyInstallEventTest extends JVMCIServiceLocator implements HotSpotVMEventListener {\n-    private static final String METHOD_NAME = \"testMethod\";\n-    private static volatile int gotInstallNotification = 0;\n-\n-    public static void main(String args[]) {\n-        new JvmciNotifyInstallEventTest().runTest();\n-    }\n-\n-    @Override\n-    public <S> S getProvider(Class<S> service) {\n-        if (service == HotSpotVMEventListener.class) {\n-            return service.cast(this);\n-        }\n-        return null;\n-    }\n-\n-    private void runTest() {\n-        if (gotInstallNotification != 0) {\n-            throw new Error(\"Got install notification before test actions\");\n-        }\n-        HotSpotCodeCacheProvider codeCache;\n-        try {\n-            codeCache = (HotSpotCodeCacheProvider) HotSpotJVMCIRuntime.runtime()\n-                    .getHostJVMCIBackend().getCodeCache();\n-        } catch (InternalError ie) {\n-            \/\/ passed\n-            return;\n-        }\n-        Method testMethod;\n-        try {\n-            testMethod = SimpleClass.class.getDeclaredMethod(METHOD_NAME);\n-        } catch (NoSuchMethodException e) {\n-            throw new Error(\"TEST BUG: Can't find \" + METHOD_NAME, e);\n-        }\n-        HotSpotResolvedJavaMethod method = CTVMUtilities\n-                .getResolvedMethod(SimpleClass.class, testMethod);\n-        int dataSectionAlignment = 8; \/\/ CodeBuffer::SECT_CONSTS code section alignment\n-        HotSpotCompiledCode compiledCode = new HotSpotCompiledNmethod(METHOD_NAME,\n-                new byte[0], 0, new Site[0], new Assumption[0],\n-                new ResolvedJavaMethod[]{method}, new Comment[0], new byte[0],\n-                dataSectionAlignment, new DataPatch[0], false, 0, null,\n-                method, 0, 1, 0L, false);\n-        codeCache.installCode(method, compiledCode, \/* installedCode = *\/ null,\n-                \/* speculationLog = *\/ null, \/* isDefault = *\/ false);\n-        Asserts.assertEQ(gotInstallNotification, 1,\n-                \"Got unexpected event count after 1st install attempt\");\n-        \/\/ since \"empty\" compilation result is ok, a second attempt should be ok\n-        codeCache.installCode(method, compiledCode, \/* installedCode = *\/ null,\n-                \/* speculationLog = *\/ null, \/* isDefault = *\/ false);\n-        Asserts.assertEQ(gotInstallNotification, 2,\n-                \"Got unexpected event count after 2nd install attempt\");\n-        \/\/ and an incorrect cases\n-        Utils.runAndCheckException(() -> {\n-            codeCache.installCode(method, null, null, null, true);\n-        }, NullPointerException.class);\n-        Asserts.assertEQ(gotInstallNotification, 2,\n-                \"Got unexpected event count after 3rd install attempt\");\n-        Utils.runAndCheckException(() -> {\n-            codeCache.installCode(null, null, null, null, true);\n-        }, NullPointerException.class);\n-        Asserts.assertEQ(gotInstallNotification, 2,\n-                \"Got unexpected event count after 4th install attempt\");\n-\n-        String stubToFail = System.getProperty(\"test.jvmci.forceRuntimeStubAllocFail\");\n-        if (Platform.isDebugBuild() && stubToFail != null) {\n-            HotSpotCompiledCode stub = new HotSpotCompiledCode(stubToFail,\n-                    \/* targetCode *\/ new byte[0],\n-                    \/* targetCodeSize *\/ 0,\n-                    \/* sites *\/ new Site[0],\n-                    \/* assumptions *\/ new Assumption[0],\n-                    \/* methods *\/ new ResolvedJavaMethod[0],\n-                    \/* comments *\/ new Comment[0],\n-                    \/* dataSection *\/ new byte[0],\n-                    dataSectionAlignment,\n-                    \/* dataSectionPatches *\/ new DataPatch[0],\n-                    \/* isImmutablePIC *\/ false,\n-                    \/* totalFrameSize *\/ 0,\n-                    \/* deoptRescueSlot *\/ null);\n-            try {\n-                codeCache.installCode(null, stub, null, null, true);\n-                throw new AssertionError(\"Didn't get expected \" + BailoutException.class.getName());\n-            } catch (BailoutException e) {\n-                Asserts.assertEQ(e.getMessage(), \"Error installing \" + stubToFail + \": code cache is full\");\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void notifyInstall(HotSpotCodeCacheProvider hotSpotCodeCacheProvider,\n-            InstalledCode installedCode, CompiledCode compiledCode) {\n-        gotInstallNotification++;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/events\/JvmciNotifyInstallEventTest.java","additions":0,"deletions":179,"binary":false,"changes":179,"status":"deleted"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.vm.ci.hotspot.HotSpotNmethod;\n@@ -98,1 +99,1 @@\n-    protected void test(TestCompiler compiler, Method method, Object... args) {\n+    protected HotSpotNmethod test(TestCompiler compiler, Method method, Object... args) {\n@@ -118,0 +119,1 @@\n+            return (HotSpotNmethod) installed;\n@@ -119,2 +121,1 @@\n-            e.printStackTrace();\n-            Assert.fail(e.toString());\n+            throw new AssertionError(e);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/CodeInstallationTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires vm.jvmci & !vm.graal.enabled & vm.compMode == \"Xmixed\"\n+ * @library \/ \/test\/lib\n+ * @modules jdk.internal.vm.ci\/jdk.vm.ci.hotspot\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.code\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.code.site\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.meta\n+ *          jdk.internal.vm.ci\/jdk.vm.ci.runtime\n+ *\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions\n+ *     -Xbootclasspath\/a:.\n+ *     -XX:+EnableJVMCI -XX:JVMCITraceLevel=1\n+ *     -Dtest.jvmci.forceRuntimeStubAllocFail=test_stub_that_fails_to_be_allocated\n+ *     jdk.vm.ci.code.test.RuntimeStubAllocFailTest\n+ *\/\n+\n+package jdk.vm.ci.code.test;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Platform;\n+import jdk.vm.ci.code.BailoutException;\n+import jdk.vm.ci.code.site.DataPatch;\n+import jdk.vm.ci.code.site.Site;\n+import jdk.vm.ci.hotspot.HotSpotCodeCacheProvider;\n+import jdk.vm.ci.hotspot.HotSpotCompiledCode;\n+import jdk.vm.ci.hotspot.HotSpotCompiledCode.Comment;\n+import jdk.vm.ci.meta.Assumptions.Assumption;\n+import jdk.vm.ci.meta.ResolvedJavaMethod;\n+import jdk.vm.ci.runtime.JVMCI;\n+import jdk.vm.ci.runtime.JVMCIRuntime;\n+import jdk.vm.ci.runtime.JVMCIBackend;\n+\n+public class RuntimeStubAllocFailTest {\n+\n+    public static void main(String args[]) {\n+        JVMCIBackend backend = JVMCI.getRuntime().getHostJVMCIBackend();\n+        HotSpotCodeCacheProvider codeCache = (HotSpotCodeCacheProvider) backend.getCodeCache();\n+        int dataSectionAlignment = 8; \/\/ CodeBuffer::SECT_CONSTS code section alignment\n+        String stubToFail = System.getProperty(\"test.jvmci.forceRuntimeStubAllocFail\");\n+        if (Platform.isDebugBuild() && stubToFail != null) {\n+            HotSpotCompiledCode stub = new HotSpotCompiledCode(stubToFail,\n+                    \/* targetCode *\/ new byte[0],\n+                    \/* targetCodeSize *\/ 0,\n+                    \/* sites *\/ new Site[0],\n+                    \/* assumptions *\/ new Assumption[0],\n+                    \/* methods *\/ new ResolvedJavaMethod[0],\n+                    \/* comments *\/ new Comment[0],\n+                    \/* dataSection *\/ new byte[0],\n+                    dataSectionAlignment,\n+                    \/* dataSectionPatches *\/ new DataPatch[0],\n+                    \/* isImmutablePIC *\/ false,\n+                    \/* totalFrameSize *\/ 0,\n+                    \/* deoptRescueSlot *\/ null);\n+            try {\n+                codeCache.installCode(null, stub, null, null, true);\n+                throw new AssertionError(\"Didn't get expected \" + BailoutException.class.getName());\n+            } catch (BailoutException e) {\n+                Asserts.assertEQ(e.getMessage(), \"Error installing \" + stubToFail + \": code cache is full\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/RuntimeStubAllocFailTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/\n+ * @library \/test\/lib \/\n@@ -42,0 +42,1 @@\n+import jdk.test.lib.Asserts;\n@@ -44,0 +45,1 @@\n+import jdk.vm.ci.hotspot.HotSpotNmethod;\n@@ -64,1 +66,18 @@\n-        test(SimpleCodeInstallationTest::compileAdd, getMethod(\"add\", int.class, int.class), 5, 7);\n+        HotSpotNmethod nmethod = test(SimpleCodeInstallationTest::compileAdd, getMethod(\"add\", int.class, int.class), 5, 7);\n+\n+        \/\/ Test code invalidation\n+        Asserts.assertTrue(nmethod.isValid(), \"code is not valid, i = \" + nmethod);\n+        Asserts.assertTrue(nmethod.isAlive(), \"code is not alive, i = \" + nmethod);\n+        Asserts.assertNotEquals(nmethod.getStart(), 0L);\n+\n+        \/\/ Make nmethod non-entrant but still alive\n+        nmethod.invalidate(false);\n+        Asserts.assertFalse(nmethod.isValid(), \"code is valid, i = \" + nmethod);\n+        Asserts.assertTrue(nmethod.isAlive(), \"code is not alive, i = \" + nmethod);\n+        Asserts.assertEquals(nmethod.getStart(), 0L);\n+\n+        \/\/ Deoptimize the nmethod and cut the link to it from the HotSpotNmethod\n+        nmethod.invalidate(true);\n+        Asserts.assertFalse(nmethod.isValid(), \"code is valid, i = \" + nmethod);\n+        Asserts.assertFalse(nmethod.isAlive(), \"code is alive, i = \" + nmethod);\n+        Asserts.assertEquals(nmethod.getStart(), 0L);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/SimpleCodeInstallationTest.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -246,0 +246,21 @@\n+    public class Bookmark implements AutoCloseable {\n+        private final int registerMark = nextRegister;\n+        private final int codePos = code.position();\n+        private final int dataPos = data.position();\n+\n+        @Override\n+        public void close() {\n+            nextRegister = registerMark;\n+            code.data.position(codePos);\n+            data.data.position(dataPos);\n+        }\n+    }\n+\n+    \/**\n+     * Enters a scope in which the current register, code and data emitting state\n+     * is restored upon leaving the scope.\n+     *\/\n+    public Bookmark bookmark() {\n+        return new Bookmark();\n+    }\n+\n@@ -299,0 +320,12 @@\n+    \/**\n+     * Emits the 32 bit constant `c` into the data section.\n+     *\/\n+    public DataSectionReference emitDataItem(int c) {\n+        DataSectionReference ref = new DataSectionReference();\n+        ref.setOffset(data.position());\n+\n+        recordDataPatchInCode(ref);\n+        data.emitInt(c);\n+        return ref;\n+    }\n+\n@@ -324,0 +357,44 @@\n+    \/**\n+     * @param n Number of bits that should be set to 1. Must be between 0 and 32 (inclusive).\n+     * @return A number with n bits set to 1.\n+     *\/\n+    public static int getNbitNumberInt(int n) {\n+        assert n >= 0 && n <= 32 : \"0 <= n <= 32; instead: \" + n;\n+        if (n < 32) {\n+            return (1 << n) - 1;\n+        } else {\n+            return 0xFFFFFFFF;\n+        }\n+    }\n+\n+    public static boolean isSignedNbit(int n, int value) {\n+        assert n > 0 && n < 32 : n;\n+        int min = -(1 << (n - 1));\n+        int max = (1 << (n - 1)) - 1;\n+        return value >= min && value <= max;\n+    }\n+\n+    public static boolean isUnsignedNbit(int n, int value) {\n+        assert n > 0 && n < 32 : n;\n+        return 32 - Integer.numberOfLeadingZeros(value) <= n;\n+    }\n+\n+    \/**\n+     * Determines if `x` is in the range of signed byte values.\n+     *\/\n+    public static boolean isByte(int x) {\n+        return (byte) x == x;\n+    }\n+\n+    \/**\n+     * Determines if `l` is in the range of signed int values.\n+     *\/\n+    public static boolean isInt(long l) {\n+        return (int) l == l;\n+    }\n+\n+    public static void check(boolean condition, String errorMessage, Object... args) {\n+        if (!condition) {\n+            throw new AssertionError(errorMessage.formatted(args));\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/TestAssembler.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+        nmethodEntryBarrierConcurrentPatch = initNmethodEntryBarrierConcurrentPatch(arch);\n@@ -50,0 +51,2 @@\n+    public final int MARKID_FRAME_COMPLETE = getConstant(\"CodeInstaller::FRAME_COMPLETE\", Integer.class);\n+    public final int MARKID_ENTRY_BARRIER_PATCH = getConstant(\"CodeInstaller::ENTRY_BARRIER_PATCH\", Integer.class);\n@@ -56,0 +59,25 @@\n+\n+    private Boolean initNmethodEntryBarrierConcurrentPatch(Architecture arch) {\n+        Boolean patchConcurrent = null;\n+        if (arch instanceof AArch64 && nmethodEntryBarrier != 0) {\n+            Integer patchingType = getFieldValue(\"CompilerToVM::Data::BarrierSetAssembler_nmethod_patching_type\", Integer.class, \"int\");\n+            if (patchingType != null) {\n+                \/\/ There currently only 2 variants in use that differ only by the presence of a\n+                \/\/ dmb instruction\n+                int stw = getConstant(\"NMethodPatchingType::stw_instruction_and_data_patch\", Integer.class);\n+                int conc = getConstant(\"NMethodPatchingType::conc_data_patch\", Integer.class);\n+                if (patchingType == stw) {\n+                    patchConcurrent = false;\n+                } else if (patchingType == conc) {\n+                    patchConcurrent = true;\n+                } else {\n+                    throw new IllegalArgumentException(\"unsupported barrier sequence \" + patchingType);\n+                }\n+            }\n+        }\n+        return patchConcurrent;\n+    }\n+\n+    public final int threadDisarmedOffset = getFieldValue(\"CompilerToVM::Data::thread_disarmed_guard_value_offset\", Integer.class, \"int\");\n+    public final long nmethodEntryBarrier = getFieldValue(\"CompilerToVM::Data::nmethod_entry_barrier\", Long.class, \"address\");\n+    public final Boolean nmethodEntryBarrierConcurrentPatch;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/TestHotSpotVMConfig.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+    private static final Register scratchRegister2 = AArch64.rscratch2;\n@@ -51,0 +52,60 @@\n+    \/**\n+     * Condition Flags for branches. See C1.2.4\n+     *\/\n+    public enum ConditionFlag {\n+        \/\/ Integer | Floating-point meanings\n+        \/** Equal | Equal. *\/\n+        EQ(0x0),\n+\n+        \/** Not Equal | Not equal or unordered. *\/\n+        NE(0x1),\n+\n+        \/** Unsigned Higher or Same | Greater than, equal or unordered. *\/\n+        HS(0x2),\n+\n+        \/** Unsigned lower | less than. *\/\n+        LO(0x3),\n+\n+        \/** Minus (negative) | less than. *\/\n+        MI(0x4),\n+\n+        \/** Plus (positive or zero) | greater than, equal or unordered. *\/\n+        PL(0x5),\n+\n+        \/** Overflow set | unordered. *\/\n+        VS(0x6),\n+\n+        \/** Overflow clear | ordered. *\/\n+        VC(0x7),\n+\n+        \/** Unsigned higher | greater than or unordered. *\/\n+        HI(0x8),\n+\n+        \/** Unsigned lower or same | less than or equal. *\/\n+        LS(0x9),\n+\n+        \/** Signed greater than or equal | greater than or equal. *\/\n+        GE(0xA),\n+\n+        \/** Signed less than | less than or unordered. *\/\n+        LT(0xB),\n+\n+        \/** Signed greater than | greater than. *\/\n+        GT(0xC),\n+\n+        \/** Signed less than or equal | less than, equal or unordered. *\/\n+        LE(0xD),\n+\n+        \/** Always | always. *\/\n+        AL(0xE),\n+\n+        \/** Always | always (identical to AL, just to have valid 0b1111 encoding). *\/\n+        NV(0xF);\n+\n+        public final int encoding;\n+\n+        ConditionFlag(int encoding) {\n+            this.encoding = encoding;\n+        }\n+    }\n+\n@@ -218,0 +279,16 @@\n+    \/**\n+     * C6.2.25 Branch conditionally.\n+     *\n+     * @param condition may not be null.\n+     * @param imm21 Signed 21-bit offset, has to be 4-byte aligned.\n+     *\/\n+    protected void emitBranch(ConditionFlag condition, int imm21) {\n+        \/\/ B.cond\n+        check(isSignedNbit(21, imm21) && (imm21 & 0b11) == 0,\n+              \"0x%x must be a 21-bit signed number and 4-byte aligned\", imm21);\n+        int imm19 = (imm21 & getNbitNumberInt(21)) >> 2;\n+        code.emitInt(f(0b001010100, 31, 24)\n+                     | f(imm19, 23, 4)\n+                     | f(condition.encoding, 3, 0));\n+    }\n+\n@@ -264,0 +341,2 @@\n+        emitNMethodEntryBarrier();\n+\n@@ -267,0 +346,14 @@\n+    private void emitNMethodEntryBarrier() {\n+        recordMark(config.MARKID_ENTRY_BARRIER_PATCH);\n+        DataSectionReference ref = emitDataItem(0);\n+        emitLoadPointer(scratchRegister, AArch64Kind.DWORD, ref);\n+        if (config.nmethodEntryBarrierConcurrentPatch) {\n+            code.emitInt(0xd50339bf); \/\/ dmb ishld\n+        }\n+        Register thread = AArch64.r28;\n+        emitLoadPointer(scratchRegister2, AArch64Kind.DWORD, thread, config.threadDisarmedOffset);\n+        code.emitInt(0x6b09011f);             \/\/ cmp w8, w9\n+        emitBranch(ConditionFlag.EQ, 8);      \/\/ jump over slow path, runtime call\n+        emitCall(config.nmethodEntryBarrier);\n+    }\n+\n@@ -364,2 +457,5 @@\n-        Register ret = newRegister();\n-        emitLoadRegister(ret, AArch64Kind.QWORD, b, offset);\n+        return emitLoadPointer(newRegister(), AArch64Kind.QWORD, b, offset);\n+    }\n+\n+    public Register emitLoadPointer(Register ret, AArch64Kind kind, Register b, int offset) {\n+        emitLoadRegister(ret, kind, b, offset);\n@@ -380,0 +476,4 @@\n+        return emitLoadPointer(newRegister(), AArch64Kind.QWORD, ref);\n+    }\n+\n+    public Register emitLoadPointer(Register ret, AArch64Kind kind, DataSectionReference ref) {\n@@ -382,2 +482,1 @@\n-        Register ret = newRegister();\n-        emitLoadRegister(ret, AArch64Kind.QWORD, 0xdead);\n+        emitLoadRegister(ret, kind, 0xdead);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/aarch64\/AArch64TestAssembler.java","additions":103,"deletions":4,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -52,0 +52,34 @@\n+    \/**\n+     * The x86 condition codes used for conditional jumps\/moves.\n+     *\/\n+    public enum ConditionFlag {\n+        Zero(0x4, \"|zero|\"),\n+        NotZero(0x5, \"|nzero|\"),\n+        Equal(0x4, \"=\"),\n+        NotEqual(0x5, \"!=\"),\n+        Less(0xc, \"<\"),\n+        LessEqual(0xe, \"<=\"),\n+        Greater(0xf, \">\"),\n+        GreaterEqual(0xd, \">=\"),\n+        Below(0x2, \"|<|\"),\n+        BelowEqual(0x6, \"|<=|\"),\n+        Above(0x7, \"|>|\"),\n+        AboveEqual(0x3, \"|>=|\"),\n+        Overflow(0x0, \"|of|\"),\n+        NoOverflow(0x1, \"|nof|\"),\n+        CarrySet(0x2, \"|carry|\"),\n+        CarryClear(0x3, \"|ncarry|\"),\n+        Negative(0x8, \"|neg|\"),\n+        Positive(0x9, \"|pos|\"),\n+        Parity(0xa, \"|par|\"),\n+        NoParity(0xb, \"|npar|\");\n+\n+        public final int value;\n+        public final String operator;\n+\n+        ConditionFlag(int value, String operator) {\n+            this.value = value;\n+            this.operator = operator;\n+        }\n+    }\n+\n@@ -66,0 +100,56 @@\n+    \/**\n+     * Emit the expected patchable code sequence for the nmethod entry barrier. The int sized\n+     * payload must be naturally aligned so it can be patched atomically.\n+     *\/\n+    private void emitNMethodEntryCompare(int displacement) {\n+        \/\/ cmp dword ptr [r15 + <displacement>], 0x00000000\n+        \/\/ 41 81 7f <db> 00 00 00 00\n+        code.emitByte(0x41);\n+        code.emitByte(0x81);\n+        code.emitByte(0x7f);\n+        check(isByte(displacement), \"expected byte sized displacement: 0x%x\", displacement);\n+        code.emitByte(displacement & 0xff);\n+        check(code.position() % 4 == 0, \"must be aligned\");\n+        code.emitInt(0);\n+    }\n+\n+    \/**\n+     * Emits a long (i.e. 6 byte) format conditional branch.\n+     *\n+     * @param offset the offset of the branch target wrt the start of the branch instruction\n+     *\/\n+    private void emitBranch(ConditionFlag condition, int offset) {\n+        final int longSize = 6;\n+        int disp32 = offset - longSize;\n+\n+        \/\/ 0000 1111 1000 tttn #32-bit disp\n+        check(isInt(disp32), \"must be 32bit disp: %d\", disp32);\n+        code.emitByte(0x0F);\n+        code.emitByte(0x80 | condition.value);\n+        code.emitInt(disp32);\n+    }\n+\n+    public void emitAlign(int modulus) {\n+        while (code.position() % modulus != 0) {\n+            code.emitByte(0x90);\n+        }\n+    }\n+\n+    private void emitNMethodEntryBarrier() {\n+        \/\/ The following code sequence must be emitted in exactly this fashion as HotSpot\n+        \/\/ will check that the barrier is the expected code sequence.\n+        emitAlign(4);\n+        recordMark(config.MARKID_FRAME_COMPLETE);\n+        recordMark(config.MARKID_ENTRY_BARRIER_PATCH);\n+        emitNMethodEntryCompare(config.threadDisarmedOffset);\n+        int branchOffset;\n+        try (Bookmark bm = bookmark()) {\n+            int pos = code.position();\n+            emitBranch(ConditionFlag.Equal, 0);\n+            emitCall(config.nmethodEntryBarrier);\n+            branchOffset = code.position() - pos;\n+        }\n+        emitBranch(ConditionFlag.Equal, branchOffset);\n+        emitCall(config.nmethodEntryBarrier);\n+    }\n+\n@@ -74,0 +164,1 @@\n+        emitNMethodEntryBarrier();\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/amd64\/AMD64TestAssembler.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"modified"}]}