{"files":[{"patch":"@@ -64,1 +64,1 @@\n-import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Phaser;\n@@ -80,0 +80,1 @@\n+    private static final Logger logger = Logger.getLogger(\"sun.net.www.protocol.http.HttpURLConnection\");\n@@ -112,2 +113,1 @@\n-    private CountDownLatch serverLatch = new CountDownLatch(1);\n-    private Thread server;\n+    private static final Phaser serverGate = new Phaser(2);\n@@ -131,1 +131,1 @@\n-    private void executeServer(int scenarioNumber) throws IOException {\n+    private void executeServer(int scenarioNumber) {\n@@ -140,1 +140,1 @@\n-            serverLatch.countDown();\n+            serverGate.arrive();\n@@ -164,0 +164,2 @@\n+        } catch (IOException ioe) {\n+            throw new RuntimeException(\"IOException in server thread\", ioe);\n@@ -167,14 +169,0 @@\n-    private void startServer(int scenarioNumber) {\n-        server = new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                   executeServer(scenarioNumber);\n-                } catch (IOException e) {\n-                   e.printStackTrace();\n-                }\n-            }\n-        }, \"SERVER\");\n-        server.start();\n-    }\n-\n@@ -214,1 +202,1 @@\n-        serverLatch.await();\n+        serverGate.arriveAndAwaitAdvance();\n@@ -297,1 +285,1 @@\n-        startServer(scenarioNumber);\n+        Thread server = Thread.ofVirtual().start(() -> executeServer(scenarioNumber));\n@@ -315,1 +303,0 @@\n-        Logger logger = Logger.getLogger(\"sun.net.www.protocol.http.HttpURLConnection\");\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/KeepAliveTest.java","additions":9,"deletions":22,"binary":false,"changes":31,"status":"modified"}]}