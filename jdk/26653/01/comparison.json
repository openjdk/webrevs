{"files":[{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -2245,0 +2246,40 @@\n+\n+bool MacroAssembler::should_relocate_to_codecache(relocInfo::relocType rtype) {\n+  return (rtype == relocInfo::virtual_call_type ||\n+          rtype == relocInfo::opt_virtual_call_type  ||\n+          rtype == relocInfo::static_call_type ||\n+          rtype == relocInfo::internal_word_type ||\n+          rtype == relocInfo::section_word_type ||\n+          rtype == relocInfo::poll_type ||\n+          rtype == relocInfo::poll_return_type);\n+}\n+\n+\/\/ Determine whether the target address is fixed and does not require relocation.\n+bool MacroAssembler::should_use_fixed_address(relocInfo::relocType rtype) {\n+  \/\/ For foreign calls, restoring code in a product run at a different location may\n+  \/\/ invalidate a reachability decision made in a training run. In such cases,\n+  \/\/ an 'adrp + add' can't be patchable to a 'movz + movk + movk'.\n+  \/\/ To avoid this, disable reachability-based optimization during AOT code dumping.\n+  if (AOTCodeCache::is_on_for_dump()) {\n+    return false;\n+  }\n+  return (rtype == relocInfo::runtime_call_type ||\n+          rtype == relocInfo::external_word_type ||\n+          rtype == relocInfo::runtime_call_w_cp_type);\n+}\n+\n+#ifdef ASSERT\n+bool MacroAssembler::unqualified_type(relocInfo::relocType rtype) {\n+  return (rtype == relocInfo::none ||\n+          \/\/ The following relocation types may be relocated in heap:\n+          rtype == relocInfo::oop_type ||\n+          rtype == relocInfo::metadata_type ||\n+          rtype == relocInfo::entry_guard_type ||\n+          rtype == relocInfo::barrier_type ||\n+          \/\/ The following relocation types may need to override `fix_relocation_after_move()`:\n+          rtype == relocInfo::static_stub_type ||\n+          rtype == relocInfo::trampoline_stub_type ||\n+          rtype == relocInfo::post_call_nop_type);\n+}\n+#endif\n+\n@@ -2250,2 +2291,18 @@\n-  uint64_t imm64 = (uint64_t)dest.target();\n-  movptr(r, imm64);\n+  if ((should_use_fixed_address(dest.rspec().type()) && is_adrp_reachable(dest.target())) ||\n+      should_relocate_to_codecache(dest.rspec().type())) {\n+    uint64_t offset;\n+    \/\/ We can use ADRP here because\n+    \/\/ - In cases handled by should_relocate_to_codecache(), the total size of\n+    \/\/   the code cache cannot exceed 2Gb (ADRP limit is 4GB)\n+    \/\/ - In cases handled by should_use_fixed_address(), the target address is\n+    \/\/   fixed and will not be modified at runtime.\n+    adrp(r, dest.target(), offset);\n+    add(r, r, offset);\n+  } else {\n+#ifdef ASSERT\n+    assert((should_use_fixed_address(dest.rspec().type()) && !is_adrp_reachable(dest.target())) ||\n+           unqualified_type(dest.rspec().type()) ||\n+           AOTCodeCache::is_on_for_dump(), \"unhandled rtype\");\n+#endif\n+    movptr(r, (uint64_t)dest.target());\n+  }\n@@ -5742,2 +5799,1 @@\n-void MacroAssembler::adrp(Register reg1, const Address &dest, uint64_t &byte_offset) {\n-  relocInfo::relocType rtype = dest.rspec().reloc()->type();\n+bool MacroAssembler::is_adrp_reachable(const address target) {\n@@ -5746,1 +5802,1 @@\n-  uint64_t dest_page = (uint64_t)dest.target() >> 12;\n+  uint64_t dest_page = (uint64_t)target >> 12;\n@@ -5749,0 +5805,2 @@\n+  return (offset_high >= -(1<<20) && offset_low < (1<<20));\n+}\n@@ -5750,0 +5808,1 @@\n+void MacroAssembler::adrp(Register reg1, const Address &dest, uint64_t &byte_offset) {\n@@ -5757,1 +5816,1 @@\n-  if (offset_high >= -(1<<20) && offset_low < (1<<20)) {\n+  if (MacroAssembler::is_adrp_reachable(dest.target())) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":65,"deletions":6,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright 2025 Arm Limited and\/or its affiliates.\n@@ -1510,0 +1511,6 @@\n+  static bool should_relocate_to_codecache(relocInfo::relocType rtype);\n+  static bool should_use_fixed_address(relocInfo::relocType rtype);\n+#ifdef ASSERT\n+  static bool unqualified_type(relocInfo::relocType rtype);\n+#endif\n+  static bool is_adrp_reachable(const address dest);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}