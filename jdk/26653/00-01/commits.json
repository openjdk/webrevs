[{"commit":{"message":"Disable reachability-based optimization during AOT code dumping"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"}],"sha":"3540e45d1589c40738b5127e57233feeeb996acf"},{"commit":{"message":"Merge branch 'master' into replace-mov-with-adrp"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"}],"sha":"e63ca741f0bb956740ed4495a70ccf710d978227"},{"commit":{"message":"8362504: AArch64: Replace MOVZ+MOVK+MOVK with ADRP+ADD\n\nIf the relocation or target address is guaranteed to reside within\nthe CodeCache, we can safely replace a `movz + movk + movk`\nsequence with a more compact and efficient `adrp + add`\ninstruction pair.\n\nIn `MacroAssembler::mov(Register r, Address dest)`, this\nreplacement can be applied if any of the following rules hold:\n\n1. The relocation type indicates that the address resides within\nthe CodeCache and the necessary patching logic is provided in\n`fix_relocation_after_move()`.\n2. The target address is fixed (i.e., does not require relocation)\nand is within the reachable range for `adrp`.\n\nThe patch performs the filtering in `is_relocated_within_codecache()`\nand `is_adrp_reachable()` to ensure this optimization is applied\nsafely and selectively."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"}],"sha":"3ca70c87b5a3857a00e4cd3ffa64c6b2e6c4b866"}]