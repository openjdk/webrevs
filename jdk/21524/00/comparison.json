{"files":[{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2000,2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.PixelGrabber;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8342098\n+ * @summary Verify that the image captured from the screen using a Robot\n+ * and the source image are same.\n+ * @run main ScreenCaptureRobotTest\n+ *\/\n+public class ScreenCaptureRobotTest {\n+\n+    private static long delay = 500;\n+    private static Frame frame;\n+    private static volatile Canvas canvas;\n+    private static BufferedImage realImage;\n+    private static BufferedImage displayImage;\n+    private static int difference;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            initializeGUI();\n+            doTest();\n+        } finally {\n+            EventQueue.invokeAndWait(ScreenCaptureRobotTest::disposeFrame);\n+        }\n+    }\n+\n+    private static void initializeGUI() {\n+        frame = new Frame(\"Test frame\");\n+        realImage = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                .getDefaultScreenDevice().getDefaultConfiguration()\n+                .createCompatibleImage(200, 100);\n+\n+        Graphics g = realImage.createGraphics();\n+        g.setColor(Color.yellow);\n+        g.fillRect(0, 0, 200, 100);\n+        g.setColor(Color.red);\n+        g.setFont(new Font(\"SansSerif\", Font.BOLD, 30));\n+        g.drawString(\"Capture This\", 10, 40);\n+        g.dispose();\n+        displayImage = realImage;\n+\n+        canvas = new ImageCanvas();\n+        canvas.setBackground(Color.YELLOW);\n+        frame.setLayout(new BorderLayout());\n+        frame.add(canvas);\n+        frame.setSize(300, 200);\n+        frame.setLocation(100, 100);\n+        frame.setVisible(true);\n+        canvas.requestFocus();\n+    }\n+\n+    private static void doTest() throws Exception {\n+        Robot robot;\n+        robot = new Robot();\n+        Thread.sleep(delay);\n+\n+        Point pnt = canvas.getLocationOnScreen();\n+        Rectangle rect = new Rectangle(pnt.x + 10, pnt.y + 10, 200, 100);\n+\n+        \/\/ Capturing Image using Robot\n+        BufferedImage capturedImage = robot.createScreenCapture(rect);\n+\n+        if (!compareImages(capturedImage, realImage)) {\n+            String errorMessage = \"FAIL : Captured Image is different from \"\n+                    + \"the actual image by \" + difference + \" pixels\";\n+            System.err.println(\"Test failed\");\n+            throw new RuntimeException(errorMessage);\n+        }\n+        System.out.println(\"Test passed\");\n+    }\n+\n+    private static boolean compareImages(BufferedImage capturedImg,\n+            BufferedImage realImg) throws InterruptedException {\n+        int[] capturedPixels;\n+        int[] realPixels;\n+        int imgWidth;\n+        int imgHeight;\n+        int toleranceLevel = 0;\n+        boolean result = true;\n+\n+        imgWidth = capturedImg.getWidth(null);\n+        imgHeight = capturedImg.getHeight(null);\n+\n+        capturedPixels = new int[imgWidth * imgHeight];\n+        realPixels = new int[imgWidth * imgHeight];\n+\n+        \/\/ Extracting Pixels from Captured Image\n+        PixelGrabber pgCapturedImg = new PixelGrabber(capturedImg, 0, 0,\n+                imgWidth, imgHeight, capturedPixels, 0, imgWidth);\n+        pgCapturedImg.grabPixels();\n+        \/\/ Extracting Pixels from Real Image\n+        PixelGrabber pgRealImg = new PixelGrabber(realImg, 0, 0, imgWidth,\n+                imgHeight, realPixels, 0, imgWidth);\n+        pgRealImg.grabPixels();\n+\n+        for (int i = 0; i < (imgWidth * imgHeight); i++) {\n+            if (capturedPixels[i] != realPixels[i]) {\n+                toleranceLevel++;\n+            }\n+        }\n+\n+        difference = toleranceLevel;\n+        if (toleranceLevel > 100) {\n+            result = false;\n+        }\n+        System.out.println(\"\\nCaptured Image differs from Real Image by \"\n+                + toleranceLevel + \" Pixels\\n\");\n+\n+        return result;\n+    }\n+\n+    private static class ImageCanvas extends Canvas {\n+        @Override\n+        public void paint(Graphics g) {\n+            g.drawImage(displayImage, 10, 10, this);\n+        }\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/ScreenCaptureRobotTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}