{"files":[{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8342098\n+ * @summary Verify that the image captured from the screen using a Robot\n+ * and the source image are same.\n+ * @run main\/othervm -Dsun.java2d.uiScale=1 ScreenCaptureRobotTest\n+ *\/\n+public class ScreenCaptureRobotTest {\n+\n+    private static Frame frame;\n+    private static volatile Canvas canvas;\n+    private static BufferedImage realImage;\n+    private static final int IMAGE_WIDTH = 200;\n+    private static final int IMAGE_HEIGHT = 100;\n+    private static volatile Point point;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(ScreenCaptureRobotTest::initializeGUI);\n+            doTest();\n+        } finally {\n+            EventQueue.invokeAndWait(ScreenCaptureRobotTest::disposeFrame);\n+        }\n+    }\n+\n+    private static void initializeGUI() {\n+        frame = new Frame(\"ScreenCaptureRobotTest Frame\");\n+        realImage = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                .getDefaultScreenDevice().getDefaultConfiguration()\n+                .createCompatibleImage(IMAGE_WIDTH, IMAGE_HEIGHT);\n+\n+        Graphics g = realImage.createGraphics();\n+        g.setColor(Color.YELLOW);\n+        g.fillRect(0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);\n+        g.setColor(Color.RED);\n+        g.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));\n+        g.drawString(\"Capture This\", 10, 40);\n+        g.dispose();\n+\n+        canvas = new ImageCanvas();\n+        canvas.setBackground(Color.YELLOW);\n+        frame.setLayout(new BorderLayout());\n+        frame.add(canvas);\n+        frame.setSize(300, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void doTest() throws Exception {\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            point = canvas.getLocationOnScreen();\n+        });\n+\n+        Rectangle rect = new Rectangle(point.x + 10, point.y + 10, IMAGE_WIDTH,\n+                IMAGE_HEIGHT);\n+\n+        BufferedImage capturedImage = robot.createScreenCapture(rect);\n+\n+        if (!compareImages(capturedImage, realImage)) {\n+            String errorMessage = \"FAIL : Captured Image is different from \"\n+                    + \"the real image\";\n+            System.err.println(\"Test failed\");\n+            saveImage(capturedImage, \"CapturedImage.png\");\n+            saveImage(realImage, \"RealImage.png\");\n+            throw new RuntimeException(errorMessage);\n+        }\n+    }\n+\n+    private static boolean compareImages(BufferedImage capturedImg,\n+            BufferedImage realImg) {\n+        int capturedPixel;\n+        int realPixel;\n+        int imgWidth = capturedImg.getWidth(null);\n+        int imgHeight = capturedImg.getHeight(null);\n+\n+        if (imgWidth != IMAGE_WIDTH || imgHeight != IMAGE_HEIGHT) {\n+            System.out\n+                    .println(\"Captured and real images are different in size\");\n+            return false;\n+        }\n+\n+        for (int i = 0; i < imgWidth; i++) {\n+            for (int j = 0; j < imgHeight; j++) {\n+                capturedPixel = capturedImg.getRGB(i, j);\n+                realPixel = realImg.getRGB(i, j);\n+                if (capturedPixel != realPixel) {\n+                    System.out.println(\"Captured pixel (\"\n+                            + Integer.toHexString(capturedPixel) + \") at (\" + i\n+                            + \", \" + j + \") is not equal to real pixel (\"\n+                            + Integer.toHexString(realPixel) + \")\");\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static class ImageCanvas extends Canvas {\n+        @Override\n+        public void paint(Graphics g) {\n+            g.drawImage(realImage, 10, 10, this);\n+        }\n+    }\n+\n+    private static void saveImage(BufferedImage image, String fileName) {\n+        \/\/ Save BufferedImage to PNG file\n+        try {\n+            File file = new File(fileName);\n+            System.out.println(\"Saving image : \" + image + \" to \\n\"\n+                    + file.getAbsolutePath());\n+            ImageIO.write(image, \"PNG\", file);\n+        } catch (IOException ioe) {\n+            throw new RuntimeException(\n+                    \"Image save failed : \" + ioe.getMessage());\n+        }\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/ScreenCaptureRobotTest.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"}]}