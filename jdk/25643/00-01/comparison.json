{"files":[{"patch":"@@ -36,2 +36,3 @@\n- * This class provides a {@link #TEMPLATE} that can be used to simplify generating\n- * source code when using the {@link TestFramework} (also known as IR Framework) to run a list of tests.\n+ * This class provides a {@link #render} method that can be used to simplify generating\n+ * source code when using the {@link TestFramework} (also known as IR Framework) to run\n+ * a list of tests.\n@@ -42,1 +43,1 @@\n- * provided {@link #TEMPLATE} which generates the surrounding class and the main\n+ * provided {@link #render} method which generates the surrounding class and the main\n@@ -52,5 +53,9 @@\n-     * To use the {@link TestFrameworkClass#TEMPLATE}, the user must specify the\n-     * {@link #packageName} and {@link #className}, as well as a list of {@link #imports}\n-     * and the {@link #classpath} from {@link CompileFramework#getEscapedClassPathOfCompiledClasses},\n-     * so that the Test VM has access to the class files that are compiled from the generated\n-     * source code.\n+     * This method renders a list of {@code testTemplateTokens} into the body of a class\n+     * and generates a {@code main} method which launches the {@link TestFramework}\n+     * to run the generated tests.\n+     *\n+     * <p>\n+     * The generated {@code main} method is to be invoked with a {@code vmFlags} argument,\n+     * which must be a {@link String[]}, specifying the VM flags for the Test VM, in which\n+     * the tests will be run. Thus, one can generate the test class once, and invoke its\n+     * {@code main} method multiple times, each time with a different set of VM flags.\n@@ -64,0 +69,4 @@\n+     * @param testTemplateTokens The list of tests to be generated into the test class.\n+     *                           Every test must be annotated with {@code @Test}, so that\n+     *                           the {@link TestFramework} can later find and run them.\n+     * @return The generated source code of the test class as a {@link String}.\n@@ -65,20 +74,9 @@\n-    public record Info(String packageName, String className, List<String> imports, String classpath) {};\n-\n-    \/**\n-     * This {@link Template} simplifies generating source code when using the {@link TestFramework}\n-     * (also known as IR Framework) to run a list of tests.\n-     *\n-     * <p>\n-     * The {@code info} argument encapsulates the context information for the\n-     * generated class. The {@code testTemplateTokens} is a list of {@link TemplateToken}s,\n-     * which represent the tests that are to be generated inside this test class.\n-     *\n-     * <p>\n-     * The {@code main} method is to be invoked with a {@code vmFlags} argument, where\n-     * the Test VM flags can be specified with which the tests are to be run.\n-     *\/\n-    public static final Template.TwoArgs<Info, List<TemplateToken>> TEMPLATE =\n-        Template.make(\"info\", \"testTemplateTokens\", (Info info, List<TemplateToken> testTemplateTokens) -> body(\n-            let(\"classpath\", info.classpath),\n-            let(\"packageName\", info.packageName),\n-            let(\"className\", info.className),\n+    public static String render(final String packageName,\n+                                final String className,\n+                                final List<String> imports,\n+                                final String classpath,\n+                                final List<TemplateToken> testTemplateTokens) {\n+        var template = Template.make(() -> body(\n+            let(\"packageName\", packageName),\n+            let(\"className\", className),\n+            let(\"classpath\", classpath),\n@@ -90,1 +88,1 @@\n-            info.imports.stream().map(i -> \"import \" + i + \";\\n\").toList(),\n+            imports.stream().map(i -> \"import \" + i + \";\\n\").toList(),\n@@ -114,0 +112,2 @@\n+        return template.render();\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/template_framework\/library\/TestFrameworkClass.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -82,15 +82,0 @@\n-        \/\/ Create the info required for the test class.\n-        \/\/ It is imporant that we pass the classpath to the Test-VM, so that it has access\n-        \/\/ to all compiled classes.\n-        TestFrameworkClass.Info info = new TestFrameworkClass.Info(\n-            \/\/ package and class name.\n-            \"p.xyz\", \"InnerTest\",\n-            \/\/ List of imports. Duplicates are permitted.\n-            List.of(\"compiler.lib.generators.*\",\n-                    \"compiler.lib.ir_framework.*\",\n-                    \"compiler.lib.verify.*\",\n-                    \"compiler.lib.verify.*\"),\n-            \/\/ classpath, so the Test VM has access to the compiled class files.\n-            comp.getEscapedClassPathOfCompiledClasses()\n-        );\n-\n@@ -150,1 +135,1 @@\n-        \/\/ From a list of operators, create a list of templateTokens with applied arguments.\n+        \/\/ Create a test for each operator..\n@@ -152,1 +137,1 @@\n-        List<TemplateToken> templateTokens = ops.stream().map(op -> (TemplateToken)testTemplate.asToken(op)).toList();\n+        List<TemplateToken> testTemplateTokens = ops.stream().map(testTemplate::asToken).toList();\n@@ -154,2 +139,13 @@\n-        \/\/ Create the test class, which runs all templateTokens.\n-        return TestFrameworkClass.TEMPLATE.render(info, templateTokens);\n+        \/\/ Create the test class, which runs all testTemplateTokens.\n+        return TestFrameworkClass.render(\n+            \/\/ package and class name.\n+            \"p.xyz\", \"InnerTest\",\n+            \/\/ List of imports. Duplicates are permitted.\n+            List.of(\"compiler.lib.generators.*\",\n+                    \"compiler.lib.ir_framework.*\",\n+                    \"compiler.lib.verify.*\",\n+                    \"compiler.lib.verify.*\"),\n+            \/\/ classpath, so the Test VM has access to the compiled class files.\n+            comp.getEscapedClassPathOfCompiledClasses(),\n+            \/\/ The list of tests.\n+            testTemplateTokens);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestWithTestFrameworkClass.java","additions":15,"deletions":19,"binary":false,"changes":34,"status":"modified"}]}