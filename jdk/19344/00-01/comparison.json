{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.stream.Collectors;\n@@ -36,1 +37,0 @@\n-import javax.lang.model.element.AnnotationValue;\n@@ -51,1 +51,0 @@\n-import com.sun.tools.javac.code.Scope;\n@@ -58,2 +57,0 @@\n-import com.sun.tools.javac.comp.AttrContext;\n-import com.sun.tools.javac.comp.Env;\n@@ -411,1 +408,1 @@\n-    public Map<? extends ExecutableElement, ? extends AnnotationValue> getJepInfo(String feature) {\n+    public Map<String, Object> getJepInfo(String feature) {\n@@ -419,1 +416,5 @@\n-                    return anno.getElementValues();\n+                    return anno.getElementValues().entrySet()\n+                            .stream()\n+                            .collect(Collectors.toMap(\n+                                    e -> e.getKey().getSimpleName().toString(),\n+                                    e -> e.getValue().getValue()));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WorkArounds.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-        super(configuration, configuration.utils::isDeprecated);\n+        super(configuration);\n@@ -76,0 +76,5 @@\n+    @Override\n+    protected boolean belongsToSummary(Element element) {\n+        return utils.isDeprecated(element);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DeprecatedAPIListBuilder.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-        super(configuration, element -> isNewAPI(element, configuration.utils, releases));\n+        super(configuration);\n@@ -53,2 +53,3 @@\n-    private static boolean isNewAPI(Element e, Utils utils, List<String> releases) {\n-        if (!utils.hasDocCommentTree(e)) {\n+    @Override\n+    protected boolean belongsToSummary(Element element) {\n+        if (!utils.hasDocCommentTree(element)) {\n@@ -57,1 +58,1 @@\n-        List<? extends DocTree> since = utils.getBlockTags(e, SINCE);\n+        List<? extends DocTree> since = utils.getBlockTags(element, SINCE);\n@@ -61,1 +62,1 @@\n-        CommentHelper ch = utils.getCommentHelper(e);\n+        CommentHelper ch = utils.getCommentHelper(element);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/NewAPIBuilder.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import javax.lang.model.element.AnnotationValue;\n@@ -32,1 +31,0 @@\n-import javax.lang.model.element.ExecutableElement;\n@@ -63,1 +61,1 @@\n-        super(configuration, configuration.utils::isPreviewAPI);\n+        super(configuration);\n@@ -68,2 +66,5 @@\n-    protected void handleElement(Element e) {\n-        String feature = Objects.requireNonNull(utils.getPreviewFeature(e),\n+    protected boolean belongsToSummary(Element element) {\n+        if (!utils.isPreviewAPI(element)) {\n+            return false;\n+        }\n+        String feature = Objects.requireNonNull(utils.getPreviewFeature(element),\n@@ -71,14 +72,13 @@\n-        JEP jep = jeps.computeIfAbsent(feature, (featureName) -> {\n-            Map<? extends ExecutableElement, ? extends AnnotationValue> anno = configuration.workArounds.getJepInfo(featureName);\n-            int number = 0;\n-            String title = \"\";\n-            String status = \"Preview\"; \/\/ Default value is not returned by the method we use above.\n-            for (var entry : anno.entrySet()) {\n-                if (\"number\".equals(entry.getKey().getSimpleName().toString())) {\n-                    number = (int) entry.getValue().getValue();\n-                } else if (\"title\".equals(entry.getKey().getSimpleName().toString())) {\n-                    title = (String) entry.getValue().getValue();\n-                } else if (\"status\".equals(entry.getKey().getSimpleName().toString())) {\n-                    status = (String) entry.getValue().getValue();\n-                } else {\n-                    throw new IllegalArgumentException(entry.getKey().getSimpleName().toString());\n+        JEP jep = jeps.computeIfAbsent(feature, featureName -> {\n+            Map<String, Object> jepInfo = configuration.workArounds.getJepInfo(featureName);\n+            if (!jepInfo.isEmpty()) {\n+                int number = 0;\n+                String title = \"\";\n+                String status = \"Preview\"; \/\/ Default value is not returned by the method we used above.\n+                for (var entry : jepInfo.entrySet()) {\n+                    switch (entry.getKey()) {\n+                        case \"number\" -> number = (int) entry.getValue();\n+                        case \"title\" -> title = (String) entry.getValue();\n+                        case \"status\" -> status = (String) entry.getValue();\n+                        default -> throw new IllegalArgumentException(entry.getKey());\n+                    }\n@@ -86,0 +86,1 @@\n+                return new JEP(number, title, status);\n@@ -87,1 +88,1 @@\n-            return new JEP(number, title, status);\n+            return null;\n@@ -89,5 +90,3 @@\n-        if (jep.number == 0) {\n-            \/\/ Remove preview support features without a valid JEP\n-            jeps.remove(feature);\n-        } else {\n-            elementJeps.put(e, jep);\n+        if (jep != null) {\n+            elementJeps.put(element, jep);\n+            return true;\n@@ -95,0 +94,2 @@\n+        \/\/ Preview features without JEP are not included.\n+        return false;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/PreviewAPIListBuilder.java","additions":26,"deletions":25,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-        super(configuration, configuration.utils::isRestrictedAPI);\n+        super(configuration);\n@@ -47,0 +47,5 @@\n+\n+    @Override\n+    protected boolean belongsToSummary(Element element) {\n+        return utils.isRestrictedAPI(element);\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/RestrictedAPIListBuilder.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.util.function.Predicate;\n@@ -42,1 +41,1 @@\n-public class SummaryAPIListBuilder {\n+public abstract class SummaryAPIListBuilder {\n@@ -49,1 +48,0 @@\n-    private final Predicate<Element> belongsToSummary;\n@@ -72,2 +70,1 @@\n-    public SummaryAPIListBuilder(BaseConfiguration configuration,\n-                                 Predicate<Element> belongsToSummary) {\n+    public SummaryAPIListBuilder(BaseConfiguration configuration) {\n@@ -76,1 +73,0 @@\n-        this.belongsToSummary = belongsToSummary;\n@@ -96,1 +92,1 @@\n-            if (belongsToSummary.test(me)) {\n+            if (belongsToSummary(me)) {\n@@ -104,1 +100,1 @@\n-            if (belongsToSummary.test(pe)) {\n+            if (belongsToSummary(pe)) {\n@@ -111,1 +107,1 @@\n-            if (belongsToSummary.test(te)) {\n+            if (belongsToSummary(te)) {\n@@ -152,1 +148,1 @@\n-                    if (belongsToSummary.test(component)) {\n+                    if (belongsToSummary(component)) {\n@@ -167,0 +163,8 @@\n+    \/**\n+     * This method decides whether Element {@code element} should be included in this summary list.\n+     *\n+     * @param element an element\n+     * @return true if the element should be included\n+     *\/\n+    protected abstract boolean belongsToSummary(Element element);\n+\n@@ -175,1 +179,1 @@\n-            if (belongsToSummary.test(member)) {\n+            if (belongsToSummary(member)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/SummaryAPIListBuilder.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -26,1 +26,2 @@\n- * @bug      8250768 8261976 8277300 8282452 8287597 8325325 8325874 8297879 8331947\n+ * @bug      8250768 8261976 8277300 8282452 8287597 8325325 8325874 8297879\n+ *           8331947\n@@ -159,0 +160,3 @@\n+\n+        \/\/ 8331947: Support preview features without JEP should not be included in Preview API page\n+        checkOutput(\"preview-list.html\", false, \"supportMethod\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/TestPreview.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}