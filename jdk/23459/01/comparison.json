{"files":[{"patch":"@@ -1464,6 +1464,8 @@\n-      Label align_ok;\n-      orr(t0, str1, str2);\n-      andi(t0, t0, 0x7);\n-      beqz(t0, align_ok);\n-      stop(\"bad alignment\");\n-      bind(align_ok);\n+      if (AvoidUnalignedAccesses) {\n+        Label align_ok;\n+        orr(t0, str1, str2);\n+        andi(t0, t0, 0x7);\n+        beqz(t0, align_ok);\n+        stop(\"bad alignment\");\n+        bind(align_ok);\n+      }\n@@ -1521,1 +1523,1 @@\n-      \/\/ both of the two loads are 8-byte aligned\n+      \/\/ 8-byte aligned loads when AvoidUnalignedAccesses is enabled\n@@ -1716,6 +1718,8 @@\n-  Label align_ok;\n-  orr(t0, a1, a2);\n-  andi(t0, t0, 0x7);\n-  beqz(t0, align_ok);\n-  stop(\"bad alignment\");\n-  bind(align_ok);\n+  if (AvoidUnalignedAccesses) {\n+    Label align_ok;\n+    orr(t0, a1, a2);\n+    andi(t0, t0, 0x7);\n+    beqz(t0, align_ok);\n+    stop(\"bad alignment\");\n+    bind(align_ok);\n+  }\n@@ -1820,6 +1824,8 @@\n-  Label align_ok;\n-  orr(t0, a1, a2);\n-  andi(t0, t0, 0x7);\n-  beqz(t0, align_ok);\n-  stop(\"bad alignment\");\n-  bind(align_ok);\n+  if (AvoidUnalignedAccesses) {\n+    Label align_ok;\n+    orr(t0, a1, a2);\n+    andi(t0, t0, 0x7);\n+    beqz(t0, align_ok);\n+    stop(\"bad alignment\");\n+    bind(align_ok);\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":25,"deletions":19,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2461,1 +2461,9 @@\n-    \/\/ strL is 8-byte aligned\n+#ifdef ASSERT\n+    if (AvoidUnalignedAccesses) {\n+      Label align_ok;\n+      __ andi(t0, strL, 0x7);\n+      __ beqz(t0, align_ok);\n+      __ stop(\"bad alignment\");\n+      __ bind(align_ok);\n+    }\n+#endif\n@@ -2545,1 +2553,1 @@\n-    \/\/ we are now 8-bytes aligned on strL\n+    \/\/ we are now 8-bytes aligned on strL when AvoidUnalignedAccesses is true\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"}]}