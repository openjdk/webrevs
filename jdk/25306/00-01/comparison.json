{"files":[{"patch":"@@ -109,1 +109,0 @@\n-  const char* const klass_name = class_name != nullptr ? class_name->as_C_string() : \"\";\n@@ -131,1 +130,1 @@\n-  assert(strncmp(ik->name()->as_C_string(), new_ik->name()->as_C_string(), strlen(ik->name()->as_C_string())) == 0, \"invariant\");\n+  assert(ik->name() == new_ik->name(), \"invariant\");\n@@ -140,3 +139,0 @@\n-  if (state == nullptr) {\n-    return nullptr;\n-  }\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrClassTransformer.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-       return true;\n+     return true;\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -942,1 +942,0 @@\n-  array->clear();\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-  \/\/ Call JVMUpcalls::onMethodTrace(byte[], long[] , String[], String[], int[])\n+  \/\/ Call JVMUpcalls::onMethodTrace\n@@ -291,1 +291,1 @@\n-  JavaValue result(T_OBJECT);\n+  JavaValue result(T_ARRAY);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrUpcalls.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1296,2 +1296,2 @@\n-    <Field type=\"long\" name=\"invocations\" label=\"Invocations\" description = \"The number of times the method was invoked\"\/>\n-    <Field type=\"Tickspan\" name=\"average\" label=\"Average\" description=\"An approximation of the wall-clock time it took for the method to execute\"\/>\n+    <Field type=\"long\" name=\"invocations\" label=\"Invocations\" description=\"The number of times the method was invoked\" \/>\n+    <Field type=\"Tickspan\" name=\"average\" label=\"Average\" description=\"An approximation of the wall-clock time it took for the method to execute\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -502,1 +502,1 @@\n-    assert(HAS_STICKY_BIT(jic.instance_klass()), \"invariant\");\n+    assert(JfrTraceId::has_sticky_bit(jic.instance_klass()), \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,3 +71,0 @@\n-  if (name->equals(\"jdk.proxy1\", 10)) {\n-    return false;\n-  }\n@@ -144,1 +141,1 @@\n-  if (a == -1) {\n+  if (a == NONE) {\n@@ -147,1 +144,1 @@\n-  if (b == -1) {\n+  if (b == NONE) {\n@@ -157,1 +154,1 @@\n-    return -1;\n+    return NONE;\n@@ -159,1 +156,1 @@\n-  int result = -1;\n+  int result = NONE;\n@@ -175,1 +172,1 @@\n-  if (class_modifications(ik, false) != -1) {\n+  if (class_modifications(ik, false) != NONE) {\n@@ -181,1 +178,1 @@\n-    if (method_modifications(methods->at(i)) != -1) {\n+    if (method_modifications(methods->at(i)) != NONE) {\n@@ -191,1 +188,1 @@\n-  int result = -1;\n+  int result = NONE;\n@@ -222,10 +219,1 @@\n-    const int mod = _modifications[i];\n-    const char* modification = \"-timing -tracing\";\n-\n-    if (mod == 1) {\n-      modification = \"+timing\";\n-    } else if (mod == 2) {\n-      modification = \"+tracing\";\n-    } else if (mod == 3) {\n-      modification = \"+timing +tracing\";\n-    }\n+    const char* modification = modification_to_text(_modifications[i]);\n@@ -260,0 +248,23 @@\n+bool JfrFilter::is_timing(int modification) {\n+  return modification == NONE ? false : (modification & TIMING) != 0;\n+}\n+\n+bool JfrFilter::is_tracing(int modification) {\n+  return modification == NONE ? false : (modification & TRACING) != 0;\n+}\n+\n+const char* JfrFilter::modification_to_text(int modification) {\n+  switch (modification) {\n+  case 0:\n+    return \"-timing -tracing\";\n+  case TIMING:\n+    return \"+timing\";\n+  case TRACING:\n+    return \"+tracing\";\n+  case TIMING + TRACING:\n+    return \"+timing +tracing\";\n+  default:\n+    ShouldNotReachHere();\n+  };\n+  return \"unknown modification\";\n+}\n","filename":"src\/hotspot\/share\/jfr\/support\/methodtracer\/jfrFilter.cpp","additions":31,"deletions":20,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -47,0 +47,3 @@\n+  static constexpr int TIMING  = 1;\n+  static constexpr int TRACING = 2;\n+\n@@ -69,0 +72,4 @@\n+  static constexpr int NONE = -1;\n+  static bool is_timing(int modification);\n+  static bool is_tracing(int modification);\n+  static const char* modification_to_text(int modification);\n","filename":"src\/hotspot\/share\/jfr\/support\/methodtracer\/jfrFilter.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  return Atomic::load(&_current);\n+  return Atomic::load_acquire(&_current);\n","filename":"src\/hotspot\/share\/jfr\/support\/methodtracer\/jfrFilterManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,7 +89,0 @@\n-static inline bool is_timing(int modification) {\n-  return modification == -1 ? false : (modification & 1) != 0;\n-}\n-\n-static inline bool is_tracing(int modification) {\n-  return modification == -1 ? false : (modification & 2) != 0;\n-}\n@@ -99,2 +92,2 @@\n-  const char* timing = is_timing(new_modification) ? \"+timing\" : \"-timing\";\n-  const char* tracing = is_tracing(new_modification) ? \"+tracing\" : \"-tracing\";\n+  const char* timing = JfrFilter::is_timing(new_modification) ? \"+timing\" : \"-timing\";\n+  const char* tracing = JfrFilter::is_tracing(new_modification) ? \"+tracing\" : \"-tracing\";\n@@ -133,1 +126,1 @@\n-      if (new_modification != -1 || JfrTraceId::has_sticky_bit(m)) {\n+      if (new_modification != JfrFilter::NONE || JfrTraceId::has_sticky_bit(m)) {\n@@ -139,1 +132,1 @@\n-        const int modification = new_modification == -1 ? 0 : new_modification;\n+        const int modification = new_modification == JfrFilter::NONE ? 0 : new_modification;\n","filename":"src\/hotspot\/share\/jfr\/support\/methodtracer\/jfrMethodProcessor.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -92,1 +92,6 @@\n-  return _timing_entries->is_nonempty() ? JfrJavaSupport::create_long_array(_timing_entries, THREAD) : nullptr;\n+  if (_timing_entries->is_empty()) {\n+    return nullptr;\n+  }\n+  jlongArray array = JfrJavaSupport::create_long_array(_timing_entries, THREAD);\n+  _timing_entries->clear();\n+  return array;\n@@ -187,1 +192,1 @@\n-    \/\/ After having installed the newly created klass into the list, perform and upcall to publish the associated TimedClass.\n+    \/\/ After having installed the newly created klass into the list, perform an upcall to publish the associated TimedClass.\n@@ -299,0 +304,1 @@\n+  _stale_class_ids->clear();\n","filename":"src\/hotspot\/share\/jfr\/support\/methodtracer\/jfrMethodTracer.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-class InstanceKlass;;\n+class InstanceKlass;\n","filename":"src\/hotspot\/share\/jfr\/support\/methodtracer\/jfrTraceTagging.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,29 +0,0 @@\n-diff a\/src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java b\/src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java\t(rejected hunks)\n-@@ -333,15 +340,26 @@\n-         String def = type.getAnnotationValue(Period.class, PeriodSetting.DEFAULT_VALUE);\n-         type.add(PrivateAccess.getInstance().newSettingDescriptor(TYPE_PERIOD, PeriodSetting.NAME, def, Collections.emptyList()));\n-         return new Control(new PeriodSetting(type), def);\n-     }\n- \n-+    private Control defineMethodFilter(PlatformEventType type, Modification modification) {\n-+        String def = \"\";\n-+        type.add(PrivateAccess.getInstance().newSettingDescriptor(TYPE_METHOD_FILTER, \"filter\", def, Collections.emptyList()));\n-+        return new Control(new MethodSetting(type, modification, def), def);\n-+    }\n-+\n-     void disable() {\n-         for (NamedControl nc : namedControls) {\n-             if (nc.control.isType(EnabledSetting.class)) {\n-                 nc.control.setValue(\"false\");\n--                return;\n-+            } else {\n-+                String v = nc.control.getDefaultValue();\n-+                \/\/ Avoids slow retransformation during shutdown\n-+                if (v != null && !PlatformRecorder.isInShutDown()) {\n-+                    nc.control.setValue(v);\n-+                }\n-             }\n-         }\n-     }\n- \n-     void writeActiveSettingEvent(long timestamp) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java.rej","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -81,1 +81,1 @@\n-        MethodTimingEvent.class\n+        MethodTimingEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JDKEvents.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,2 @@\n-    JFR_METHODTRACE(16);\n+    JFR_METHODTRACE(16),\n+    ;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/LogTag.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -272,2 +272,2 @@\n-            long classId = Type.getKnownType(String.class).getId();\n-            long methodId = classId << 16 + 983059;\n+            long methodId = 16384126;\n+            long classId = methodId >> 16;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tracing\/PlatformTracer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}