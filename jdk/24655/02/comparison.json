{"files":[{"patch":"@@ -568,0 +568,38 @@\n+static void assert_frames_in_continuation_are_safe(JavaThread* thread) {\n+#ifdef ASSERT\n+  StackWatermark* watermark = StackWatermarkSet::get(thread, StackWatermarkKind::gc);\n+  if (watermark == nullptr) {\n+    return;\n+  }\n+  ContinuationEntry* ce = thread->last_continuation();\n+  RegisterMap map(thread,\n+                  RegisterMap::UpdateMap::include,\n+                  RegisterMap::ProcessFrames::skip,\n+                  RegisterMap::WalkContinuation::skip);\n+  map.set_include_argument_oops(false);\n+  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n+    watermark->assert_is_frame_safe(f);\n+  }\n+#endif \/\/ ASSERT\n+}\n+\n+#ifdef ASSERT\n+static bool monitors_on_stack(JavaThread* thread) {\n+  assert_frames_in_continuation_are_safe(thread);\n+  ContinuationEntry* ce = thread->last_continuation();\n+  RegisterMap map(thread,\n+                  RegisterMap::UpdateMap::include,\n+                  RegisterMap::ProcessFrames::skip,\n+                  RegisterMap::WalkContinuation::skip);\n+  map.set_include_argument_oops(false);\n+  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n+    if ((f.is_interpreted_frame() && ContinuationHelper::InterpretedFrame::is_owning_locks(f)) ||\n+        (f.is_compiled_frame() && ContinuationHelper::CompiledFrame::is_owning_locks(map.thread(), &map, f)) ||\n+        (f.is_native_frame() && ContinuationHelper::NativeFrame::is_owning_locks(map.thread(), f))) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+#endif \/\/ ASSERT\n+\n@@ -572,0 +610,2 @@\n+  assert_frames_in_continuation_are_safe(_thread);\n+  assert(LockingMode != LM_LEGACY || !monitors_on_stack(_thread), \"unexpected monitors on stack\");\n@@ -1624,17 +1664,0 @@\n-static bool monitors_on_stack(JavaThread* thread) {\n-  ContinuationEntry* ce = thread->last_continuation();\n-  RegisterMap map(thread,\n-                  RegisterMap::UpdateMap::include,\n-                  RegisterMap::ProcessFrames::include,\n-                  RegisterMap::WalkContinuation::skip);\n-  map.set_include_argument_oops(false);\n-  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n-    if ((f.is_interpreted_frame() && ContinuationHelper::InterpretedFrame::is_owning_locks(f)) ||\n-        (f.is_compiled_frame() && ContinuationHelper::CompiledFrame::is_owning_locks(map.thread(), &map, f)) ||\n-        (f.is_native_frame() && ContinuationHelper::NativeFrame::is_owning_locks(map.thread(), f))) {\n-      return true;\n-    }\n-  }\n-  return false;\n-}\n-\n@@ -1717,2 +1740,0 @@\n-  assert(LockingMode != LM_LEGACY || (monitors_on_stack(current) == ((current->held_monitor_count() - current->jni_monitor_count()) > 0)),\n-         \"Held monitor count and locks on stack invariant: \" INT64_FORMAT \" JNI: \" INT64_FORMAT, (int64_t)current->held_monitor_count(), (int64_t)current->jni_monitor_count());\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":40,"deletions":19,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n-  void assert_is_frame_safe(const frame& f) NOT_DEBUG_RETURN;\n@@ -154,0 +153,2 @@\n+\n+  void assert_is_frame_safe(const frame& f) NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}