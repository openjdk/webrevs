{"files":[{"patch":"@@ -739,1 +739,1 @@\n-    lea(rscratch1, CAST_FROM_FN_PTR(address, SharedRuntime::enable_stack_reserved_zone));\n+    lea(rscratch1, RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::enable_stack_reserved_zone)));\n@@ -6457,1 +6457,1 @@\n-    lea(rscratch1, CAST_FROM_FN_PTR(address, JavaThread::verify_cross_modify_fence_failure));\n+    lea(rscratch1, RuntimeAddress(CAST_FROM_FN_PTR(address, JavaThread::verify_cross_modify_fence_failure)));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3705,1 +3705,1 @@\n-  __ jump(ExternalAddress(StubRoutines::throw_StackOverflowError_entry()));\n+  __ jump(RuntimeAddress(StubRoutines::throw_StackOverflowError_entry()));\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-  __ jump(ExternalAddress(Interpreter::throw_exception_entry()));\n+  __ jump(RuntimeAddress(Interpreter::throw_exception_entry()));\n@@ -549,1 +549,1 @@\n-  __ jump(ExternalAddress(StubRoutines::throw_StackOverflowError_entry()));\n+  __ jump(RuntimeAddress(StubRoutines::throw_StackOverflowError_entry()));\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -777,1 +777,1 @@\n-  __ jump(ExternalAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));\n+  __ jump(RuntimeAddress(Interpreter::_throw_ArrayIndexOutOfBoundsException_entry));\n@@ -1155,1 +1155,1 @@\n-  __ jump(ExternalAddress(Interpreter::_throw_ArrayStoreException_entry));\n+  __ jump(RuntimeAddress(Interpreter::_throw_ArrayStoreException_entry));\n@@ -1435,1 +1435,1 @@\n-             ExternalAddress(Interpreter::_throw_ArithmeticException_entry));\n+             RuntimeAddress(Interpreter::_throw_ArithmeticException_entry));\n@@ -1448,1 +1448,1 @@\n-             ExternalAddress(Interpreter::_throw_ArithmeticException_entry));\n+             RuntimeAddress(Interpreter::_throw_ArithmeticException_entry));\n@@ -1461,1 +1461,1 @@\n-             ExternalAddress(Interpreter::_throw_ArithmeticException_entry));\n+             RuntimeAddress(Interpreter::_throw_ArithmeticException_entry));\n@@ -1475,1 +1475,1 @@\n-             ExternalAddress(Interpreter::_throw_ArithmeticException_entry));\n+             RuntimeAddress(Interpreter::_throw_ArithmeticException_entry));\n@@ -4225,1 +4225,1 @@\n-  __ jump(ExternalAddress(Interpreter::_throw_ClassCastException_entry));\n+  __ jump(RuntimeAddress(Interpreter::_throw_ClassCastException_entry));\n@@ -4343,1 +4343,1 @@\n-  __ jump(ExternalAddress(Interpreter::throw_exception_entry()));\n+  __ jump(RuntimeAddress(Interpreter::throw_exception_entry()));\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -223,0 +224,5 @@\n+#ifndef PRODUCT\n+static int total_access_count = 0;\n+static GrowableArray<int>* extern_hist = nullptr;\n+#endif\n+\n@@ -231,0 +237,6 @@\n+#ifndef PRODUCT\n+  if (PrintNMethodStatistics) {\n+    Arena* arena = &_recorder->_arena;\n+    extern_hist = new(arena) GrowableArray<int>(arena, 512, 512, 0);\n+  }\n+#endif\n@@ -234,1 +246,0 @@\n-  MutexLocker ml(ExternalsRecorder_lock, Mutex::_no_safepoint_check_flag);\n@@ -236,1 +247,10 @@\n-  return _recorder->_externals.find_index(adr);\n+  MutexLocker ml(ExternalsRecorder_lock, Mutex::_no_safepoint_check_flag);\n+  int index = _recorder->_externals.find_index(adr);\n+#ifndef PRODUCT\n+  total_access_count++;\n+  if (PrintNMethodStatistics) {\n+    int n = extern_hist->at_grow(index, 0);\n+    extern_hist->at_put(index, (n + 1));\n+  }\n+#endif\n+  return index;\n@@ -240,0 +260,1 @@\n+  assert(_recorder != nullptr, \"sanity\");\n@@ -243,1 +264,0 @@\n-  assert(_recorder != nullptr, \"sanity\");\n@@ -248,1 +268,0 @@\n-  MutexLocker ml(ExternalsRecorder_lock, Mutex::_no_safepoint_check_flag);\n@@ -250,0 +269,1 @@\n+  MutexLocker ml(ExternalsRecorder_lock, Mutex::_no_safepoint_check_flag);\n@@ -254,0 +274,9 @@\n+extern \"C\" {\n+  \/\/ Order from large to small values\n+  static int count_cmp(const void *i, const void *j) {\n+    int a = *(int*)i;\n+    int b = *(int*)j;\n+    return a < b ? 1 : a > b ? -1 : 0;\n+  }\n+}\n+\n@@ -255,1 +284,55 @@\n-  tty->print_cr(\"External addresses table: %d entries\", count());\n+  int cnt = count();\n+  tty->print_cr(\"External addresses table: %d entries, %d accesses\", cnt, total_access_count);\n+  if (PrintNMethodStatistics) {\n+    \/\/ Order entries by access count\n+    int* array = NEW_C_HEAP_ARRAY(int, (2 * cnt), mtCode);\n+    for (int i = 0; i < cnt; i++) {\n+      array[(2 * i) + 0] = extern_hist->at(i);\n+      array[(2 * i) + 1] = i;\n+    }\n+    \/\/ Reverse sort to have \"hottest\" addresses first.\n+    qsort(array, cnt, 2*sizeof(int), count_cmp);\n+    \/\/ Print all entries with Verbose flag otherwise only top 5.\n+    int limit = (Verbose || cnt <= 5) ? cnt : 5;\n+    int j = 0;\n+    for (int i = 0; i < limit; i++) {\n+      int index = array[(2 * i) + 1];\n+      int n = extern_hist->at(index);\n+      if (n > 0) {\n+        address addr = at(index);\n+        tty->print(\"%d: %8d \" INTPTR_FORMAT \" :\", j++, n, p2i(addr));\n+        if (addr != nullptr) {\n+          if (StubRoutines::contains(addr)) {\n+            StubCodeDesc* desc = StubCodeDesc::desc_for(addr);\n+            if (desc == nullptr) {\n+              desc = StubCodeDesc::desc_for(addr + frame::pc_return_offset);\n+            }\n+            const char* stub_name = (desc != nullptr) ? desc->name() : \"<unknown>\";\n+            tty->print(\" stub: %s\", stub_name);\n+          } else {\n+            ResourceMark rm;\n+            const int buflen = 1024;\n+            char* buf = NEW_RESOURCE_ARRAY(char, buflen);\n+            int offset = 0;\n+            if (os::dll_address_to_function_name(addr, buf, buflen, &offset)) {\n+              tty->print(\" extn: %s\", buf);\n+              if (offset != 0) {\n+                tty->print(\"+%d\", offset);\n+              }\n+            } else {\n+              if (CodeCache::contains((void*)addr)) {\n+                \/\/ Something in CodeCache\n+                tty->print(\" in CodeCache\");\n+              } else {\n+                \/\/ It could be string\n+                memcpy(buf, (char*)addr, 80);\n+                buf[80] = '\\0';\n+                tty->print(\" '%s'\", buf);\n+              }\n+            }\n+          }\n+        }\n+        tty->cr();\n+      }\n+    }\n+  }\n","filename":"src\/hotspot\/share\/code\/oopRecorder.cpp","additions":88,"deletions":5,"binary":false,"changes":93,"status":"modified"}]}