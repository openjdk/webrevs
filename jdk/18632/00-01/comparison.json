{"files":[{"patch":"@@ -184,12 +184,0 @@\n-InterpreterOopMap::~InterpreterOopMap() {\n-  \/\/ The expectation is that the bit mask was allocated\n-  \/\/ last in this resource area.  That would make the free of the\n-  \/\/ bit_mask effective (see how FREE_RESOURCE_ARRAY does a free).\n-  \/\/ If it was not allocated last, there is not a correctness problem\n-  \/\/ but the space for the bit_mask is not freed.\n-  assert(_resource_allocate_bit_mask, \"Trying to free C heap space\");\n-  if (mask_size() > small_mask_limit) {\n-    FREE_RESOURCE_ARRAY(uintptr_t, _bit_mask[0], mask_word_size());\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -131,1 +131,0 @@\n-  ~InterpreterOopMap();\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -888,1 +888,0 @@\n-  DEBUG_ONLY(ResourceMark rm(thread);) \/\/ ~InterpreterOopMap already handles possible deallocation of bitmask\n@@ -956,0 +955,1 @@\n+  ResourceMark rm(thread);\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}