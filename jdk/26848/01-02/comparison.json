{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.file.Files;\n@@ -31,0 +32,1 @@\n+import java.util.Set;\n@@ -130,3 +132,4 @@\n-            if (!CONTENTS_SUB_DIRS.stream()\n-                    .anyMatch(subDir -> contentDir.getFileName().toString()\n-                                                  .equals(subDir))) {\n+            if (!Files.isDirectory(contentDir)) {\n+                Log.info(I18N.format(\"warning.app.content.is.not.dir\",\n+                        contentDir));\n+            } else if (!CONTENTS_SUB_DIRS.contains(contentDir.getFileName().toString())) {\n@@ -251,1 +254,1 @@\n-    private static final List<String> CONTENTS_SUB_DIRS = List.of(\"MacOS\",\n+    private static final Set<String> CONTENTS_SUB_DIRS = Set.of(\"MacOS\",\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacApplicationBuilder.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -88,1 +88,2 @@\n-warning.non.standard.contents.sub.dir=Warning: --app-content value \"{0}\" points to the non-standard subdirectory in the \"Contents\" directory of the application bundle. As a result jpackage may produce invalid application bundle which may fail code signing and\/or notarization.\n+warning.non.standard.contents.sub.dir=Warning: The file name of the directory \"{0}\" specified for the --app-content option is not a standard subdirectory name in the \"Contents\" directory of the application bundle. The result application bundle may fail code signing and\/or notarization.\n+warning.app.content.is.not.dir=Warning: The value \"{0}\" of the --app-content option is not a directory. The result application bundle may fail code signing and\/or notarization.\n\\ No newline at end of file\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -745,0 +745,5 @@\n+    public JPackageCommand setIgnoreExitCode(boolean v) {\n+        ignoreExitCode = v;\n+        return this;\n+    }\n+\n@@ -855,1 +860,1 @@\n-        if (expectedExitCode == 0 && !isImagePackageType()) {\n+        if (expectedExitCode == 0 && !isImagePackageType() && !ignoreExitCode) {\n@@ -863,1 +868,6 @@\n-        Executor.Result result = copy.createExecutor().execute(expectedExitCode);\n+        Executor.Result result;\n+        if (ignoreExitCode) {\n+            result = copy.createExecutor().executeWithoutExitCodeCheck();\n+        } else {\n+            result = copy.createExecutor().execute(expectedExitCode);\n+        }\n@@ -867,1 +877,1 @@\n-        if (expectedExitCode == 0 && isImagePackageType()) {\n+        if (expectedExitCode == 0 && isImagePackageType() && !ignoreExitCode) {\n@@ -875,1 +885,1 @@\n-        if (result.exitCode() == 0) {\n+        if (result.exitCode() == 0 && !ignoreExitCode) {\n@@ -1470,0 +1480,1 @@\n+    private boolean ignoreExitCode;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.Collection;\n@@ -42,0 +41,1 @@\n+import jdk.jpackage.test.JPackageStringBundle;\n@@ -119,0 +119,15 @@\n+    @Test(ifOS = MACOS)\n+    @Parameter({TEST_DIR, \"warning.non.standard.contents.sub.dir\"})\n+    @Parameter({TEST_DUKE, \"warning.app.content.is.not.dir\"})\n+    public void testWarnings(String... args) throws Exception {\n+        final var testPathArg = TKit.TEST_SRC_ROOT.resolve(args[0]);\n+        final var expectedWarning = JPackageStringBundle.MAIN.cannedFormattedString(\n+                args[1], testPathArg);\n+\n+        JPackageCommand.helloAppImage()\n+            .addArguments(\"--app-content\", testPathArg)\n+            .validateOutput(expectedWarning)\n+            .setIgnoreExitCode(true)\n+            .execute();\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -91,7 +91,1 @@\n-        ADD_LAUNCHER_PROPERTY_FILE,\n-        APP_CONTENT_NON_STANDARD_DIR(cmd -> {\n-            final var appContentDir\n-                    = TKit.createTempDirectory(\"app-content-non-standard-dir\");\n-\n-            return TKit.createTempFile(appContentDir.resolve(\"Foo.txt\"));\n-        });\n+        ADD_LAUNCHER_PROPERTY_FILE;\n@@ -615,5 +609,1 @@\n-                        }, Token.JAVA_HOME.token())),\n-                testSpec().nativeType().addArgs(\"--app-content\", Token.APP_CONTENT_NON_STANDARD_DIR.token())\n-                        .error(\"warning.non.standard.contents.sub.dir\", JPackageCommand.cannedArgument(cmd -> {\n-                            return Path.of(cmd.getArgumentValue(\"--app-content\"));\n-                        }, Token.APP_CONTENT_NON_STANDARD_DIR.token()))\n+                        }, Token.JAVA_HOME.token()))\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"}]}