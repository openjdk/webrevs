{"files":[{"patch":"@@ -102,0 +102,12 @@\n+        testInspectAddressThread(executor);\n+        testInspectAddressNMethod(executor);\n+        testInspectAddressMetadata(executor);\n+\n+        \/\/ Some tests put ZGC options in test.java.opts, not test.vm.opts\n+        String testOpts = System.getProperty(\"test.vm.opts\", \"\")\n+                          + System.getProperty(\"test.java.opts\", \"\");\n+\n+        boolean isZGC = testOpts.contains(\"-XX:+UseZGC\");\n+        boolean isGenZGC = testOpts.contains(\"-XX:+ZGenerational\");\n+\n+        testInspectJavaObject(executor, isZGC, isGenZGC);\n@@ -105,2 +117,0 @@\n-        boolean testMisaligned = true;\n-\n@@ -117,0 +127,1 @@\n+    }\n@@ -118,0 +129,1 @@\n+    public void testInspectAddressThread(CommandExecutor executor) {\n@@ -121,1 +133,1 @@\n-        output = executor.execute(\"VM.inspect \" + pointerText(ptr));\n+        OutputAnalyzer output = executor.execute(\"VM.inspect \" + pointerText(ptr));\n@@ -124,1 +136,1 @@\n-        \/\/ -verbose shows output like:\n+        \/\/ Using -verbose on a thread pointer shows output like:\n@@ -133,0 +145,1 @@\n+    }\n@@ -134,0 +147,1 @@\n+    public void testInspectAddressNMethod(CommandExecutor executor) {\n@@ -135,2 +149,2 @@\n-        jcmdOutput = executor.execute(\"VM.info\", true \/* silent *\/);\n-        ptr = findPointer(jcmdOutput, compilation_event, 1, false);\n+        OutputAnalyzer jcmdOutput = executor.execute(\"VM.info\", true \/* silent *\/);\n+        BigInteger ptr = findPointer(jcmdOutput, compilation_event, 1, false);\n@@ -138,1 +152,1 @@\n-            output = executor.execute(\"VM.inspect \" + pointerText(ptr));\n+            OutputAnalyzer output = executor.execute(\"VM.inspect \" + pointerText(ptr));\n@@ -144,0 +158,1 @@\n+    }\n@@ -145,0 +160,1 @@\n+    public void testInspectAddressMetadata(CommandExecutor executor) {\n@@ -146,1 +162,2 @@\n-        ptr = findPointer(jcmdOutput, compressed_class_space, 1, false);\n+        OutputAnalyzer jcmdOutput = executor.execute(\"VM.info\", true \/* silent *\/);\n+        BigInteger ptr = findPointer(jcmdOutput, compressed_class_space, 1, false);\n@@ -148,1 +165,1 @@\n-            output = executor.execute(\"VM.inspect \" + pointerText(ptr));\n+            OutputAnalyzer output = executor.execute(\"VM.inspect \" + pointerText(ptr));\n@@ -157,1 +174,1 @@\n-            output = executor.execute(\"VM.inspect \" + pointerText(ptr));\n+            OutputAnalyzer output = executor.execute(\"VM.inspect \" + pointerText(ptr));\n@@ -160,1 +177,1 @@\n-        } else{\n+        } else {\n@@ -163,0 +180,1 @@\n+    }\n@@ -164,5 +182,1 @@\n-        \/\/ Find and test a Java Object:\n-        jcmdOutput = executor.execute(\"Thread.print\");\n-        ptr = findPointer(jcmdOutput, waiting_on_mylock, 1, true);\n-        output = executor.execute(\"VM.inspect \" + pointerText(ptr));\n-        System.out.println(output);\n+    public static final int OBJECT_TRIES = 3;\n@@ -170,12 +184,10 @@\n-        \/\/ Some tests put ZGC options in test.java.opts, not test.vm.opts\n-        String testOpts = System.getProperty(\"test.vm.opts\", \"\")\n-                          + System.getProperty(\"test.java.opts\", \"\");\n-        if (!testOpts.contains(\"-XX:+UseZGC\")) {\n-            output.shouldContain(\" is an oop: \");\n-        } else {\n-            \/\/ ZGC has two variations:\n-            if (testOpts.contains(\"-XX:+ZGenerational\")) {\n-                output.shouldContain(\"is a zaddress\");\n-                testMisaligned = false;\n-            } else {\n-                output.shouldContain(\"is a good oop\");\n+    public void testInspectJavaObject(CommandExecutor executor, boolean isZGC, boolean isGenZGC) {\n+        \/\/ Find and test a Java Object:\n+        \/\/ Process is live.  Very rarely, an Object seen in Thread.print may move due to GC,\n+        \/\/ so make a few attempts.\n+        BigInteger ptr = null;\n+        for (int i=0; i < OBJECT_TRIES; i++) {\n+            System.gc();\n+            ptr = testInspectJavaObjectPointer(executor, isZGC, isGenZGC);\n+            if (ptr != null) {\n+                break;\n@@ -184,4 +196,3 @@\n-        output.shouldContain(\" - ---- fields (total size\");\n-        \/\/ \" - private 'myInt' 'I' @12  12345 (0x00003039)\"\n-        output.shouldContain(\" - private 'myInt' 'I'\");\n-        output.shouldContain(\" 12345 (\");\n+        if (ptr == null) {\n+            throw new RuntimeException(\"Failed to inspect Java object from thread dump.\");\n+        }\n@@ -189,0 +200,1 @@\n+        \/\/ Test misaligned object pointer:\n@@ -191,2 +203,2 @@\n-        \/\/ ...so don't check for that error.\n-        if (testMisaligned) {\n+        \/\/ ...so don't check for this error.\n+        if (!isGenZGC) {\n@@ -194,1 +206,1 @@\n-            output = executor.execute(\"VM.inspect \" + pointerText(badPtr));\n+            OutputAnalyzer output = executor.execute(\"VM.inspect \" + pointerText(badPtr));\n@@ -202,0 +214,26 @@\n+    public BigInteger testInspectJavaObjectPointer(CommandExecutor executor, boolean isZGC, boolean isGenZGC) {\n+        \/\/ Inspect the MyLock object found in Thread.print output.\n+        String expected = \" is an oop: \";\n+        if (isZGC) {\n+            \/\/ ZGC has two variations:\n+            if (isGenZGC) {\n+                expected = \"is a zaddress\";\n+            } else {\n+                expected = \"is a good oop\";\n+            }\n+        }\n+        OutputAnalyzer jcmdOutput = executor.execute(\"Thread.print\");\n+        BigInteger ptr = findPointer(jcmdOutput, waiting_on_mylock, 1, true);\n+        OutputAnalyzer output = executor.execute(\"VM.inspect \" + pointerText(ptr));\n+        if (!output.contains(expected)) {\n+            System.out.println(\"VM.inspect does not find expected text for 0x\" + ptr.toString(16));\n+            return null;\n+        }\n+\n+        output.shouldContain(\" - ---- fields (total size\");\n+        \/\/ \" - private 'myInt' 'I' @12  12345 (0x00003039)\"\n+        output.shouldContain(\" - private 'myInt' 'I'\");\n+        output.shouldContain(\" 12345 (\");\n+        return ptr;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/VMInspectTest.java","additions":73,"deletions":35,"binary":false,"changes":108,"status":"modified"}]}