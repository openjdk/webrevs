{"files":[{"patch":"@@ -403,6 +403,0 @@\n-        KeyInfo ki = getKeyInfo(keyAlgo);\n-        if (ki == null) {\n-            throw new InvalidKeyException(\"Unknown algorithm \" + keyAlgo);\n-        }\n-\n-        KeyInfo si;\n@@ -411,6 +405,4 @@\n-            si = ki;\n-        } else {\n-            si = getKeyInfo(svcAlgo);\n-            if (si == null) {\n-                throw new InvalidKeyException(\"Unknown algorithm \" + svcAlgo);\n-            }\n+        }\n+        KeyInfo si = getKeyInfo(svcAlgo);\n+        if (si == null) {\n+            throw new InvalidKeyException(\"Unknown algorithm \" + svcAlgo);\n@@ -420,4 +412,5 @@\n-        \/\/ Any key can be used for a MAC service.\n-        if (svcAlgo != keyAlgo && !(si instanceof HMACKeyInfo) &&\n-                !KeyInfo.checkUse(ki, si)) {\n-            throw new InvalidKeyException(\"Cannot use a \" + keyAlgo +\n+        \/\/ Skip this check for Hmac as any key can be used for Mac.\n+        if (svcAlgo != keyAlgo && !(si instanceof HMACKeyInfo)) {\n+            KeyInfo ki = getKeyInfo(keyAlgo);\n+            if (ki == null || !KeyInfo.checkUse(ki, si)) {\n+                throw new InvalidKeyException(\"Cannot use a \" + keyAlgo +\n@@ -425,0 +418,1 @@\n+            }\n@@ -457,0 +451,2 @@\n+            \/\/ make sure key info matches key type\n+            KeyInfo ki = (keyAlgo == svcAlgo ? si : getKeyInfo(keyAlgo));\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecretKeyFactory.java","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8356087\n+ * @summary Ensure P11Mac using SHA message digests can be initialized with\n+ *     secret keys with unrecognized algorithms\n+ * @library \/test\/lib ..\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm InitMacWithAnyKey\n+ *\/\n+\n+import java.security.Provider;\n+import java.util.List;\n+import javax.crypto.Mac;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.SecretKeySpec;\n+\n+public class InitMacWithAnyKey extends PKCS11Test {\n+\n+    public static void main(String[] args) throws Exception {\n+        main(new InitMacWithAnyKey(), args);\n+    }\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        SecretKey skey = new SecretKeySpec(\"whatever\".getBytes(), \"Any\");\n+        \/\/ Test against Hmacs using SHA-1, SHA-2 message digests and skip\n+        \/\/ PBE-related Hmacs as they need PBEKey\n+        List<String> algorithms = getSupportedAlgorithms(\"Mac\", \"HmacSHA\", p);\n+        for (String algo : algorithms) {\n+            System.out.println(\"Testing \" + algo);\n+            Mac mac = Mac.getInstance(algo, p);\n+            try {\n+                mac.init(skey);\n+            } catch (Exception e) {\n+                throw new Exception(\"Unexpected exception\", e);\n+            }\n+        }\n+        System.out.println(\"Passed\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Mac\/InitMacWithAnyKey.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}