{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,2 +52,6 @@\n- * Disabled for ZGC Generational.\n- * TODO: Find correct appropriate solution to the flakiness of this test.\n+ * @test id=ZGenerational\n+ * @requires vm.gc.ZGenerational\n+ * @bug 8277072 8327180\n+ * @library \/test\/lib\/\n+ * @summary ObjectStreamClass caches keep ClassLoaders alive (ZGC)\n+ * @run testng\/othervm -Xmx64m -XX:+UseZGC -XX:+ZGenerational ObjectStreamClassCaching\n@@ -68,1 +72,1 @@\n- * @bug 8277072\n+ * @bug 8277072 8327180\n@@ -75,28 +79,0 @@\n-    \/**\n-     * Test methods execute in same VM and are ordered by name.\n-     * We test effectiveness 1st which is sensitive to previous allocations when ZGC is used.\n-     *\/\n-    @Test\n-    public void test1CacheEffectiveness() throws Exception {\n-        var list = new ArrayList<>();\n-        var ref1 = lookupObjectStreamClass(TestClass1.class);\n-        var ref2 = newWeakRef();\n-        boolean oome = false;\n-        try {\n-            while (!ref2.refersTo(null)) {\n-                list.add(new byte[1024 * 1024 * 1]); \/\/ 1 MiB chunks\n-                System.out.println(\"1MiB allocated...\");\n-                Thread.sleep(5L);\n-            }\n-        } catch (OutOfMemoryError e) {\n-            \/\/ release\n-            list = null;\n-            oome = true;\n-        }\n-        assertFalse(oome, \"WeakReference was not cleared although memory was pressed hard\");\n-        assertFalse(ref1.refersTo(null),\n-                    \"Cache lost entry together with WeakReference being cleared although memory was not under pressure\");\n-        System.gc();\n-        Thread.sleep(100L);\n-    }\n-\n","filename":"test\/jdk\/java\/io\/ObjectStreamClass\/ObjectStreamClassCaching.java","additions":8,"deletions":32,"binary":false,"changes":40,"status":"modified"}]}