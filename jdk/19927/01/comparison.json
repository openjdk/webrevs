{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-        if (value.coder() == String.UTF16) {\n+        if (!value.isLatin1()) {\n@@ -129,1 +129,1 @@\n-     * Prepends the stringly representation of boolean value into buffer,\n+     * Prepends constant and the stringly representation of value into buffer,\n@@ -136,0 +136,1 @@\n+     * @param prefix     a constant to prepend before value\n@@ -138,1 +139,1 @@\n-    static long prepend(long indexCoder, byte[] buf, boolean value) {\n+    static long prepend(long indexCoder, byte[] buf, boolean value, String prefix) {\n@@ -142,4 +143,5 @@\n-                buf[--index] = 'e';\n-                buf[--index] = 'u';\n-                buf[--index] = 'r';\n-                buf[--index] = 't';\n+                index -= 4;\n+                buf[index] = 't';\n+                buf[index + 1] = 'r';\n+                buf[index + 2] = 'u';\n+                buf[index + 3] = 'e';\n@@ -147,5 +149,6 @@\n-                buf[--index] = 'e';\n-                buf[--index] = 's';\n-                buf[--index] = 'l';\n-                buf[--index] = 'a';\n-                buf[--index] = 'f';\n+                index -= 5;\n+                buf[index] = 'f';\n+                buf[index + 1] = 'a';\n+                buf[index + 2] = 'l';\n+                buf[index + 3] = 's';\n+                buf[index + 4] = 'e';\n@@ -153,0 +156,2 @@\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n@@ -156,4 +161,5 @@\n-                StringUTF16.putChar(buf, --index, 'e');\n-                StringUTF16.putChar(buf, --index, 'u');\n-                StringUTF16.putChar(buf, --index, 'r');\n-                StringUTF16.putChar(buf, --index, 't');\n+                index -= 4;\n+                StringUTF16.putChar(buf, index, 't');\n+                StringUTF16.putChar(buf, index + 1, 'r');\n+                StringUTF16.putChar(buf, index + 2, 'u');\n+                StringUTF16.putChar(buf, index + 3, 'e');\n@@ -161,5 +167,6 @@\n-                StringUTF16.putChar(buf, --index, 'e');\n-                StringUTF16.putChar(buf, --index, 's');\n-                StringUTF16.putChar(buf, --index, 'l');\n-                StringUTF16.putChar(buf, --index, 'a');\n-                StringUTF16.putChar(buf, --index, 'f');\n+                index -= 5;\n+                StringUTF16.putChar(buf, index, 'f');\n+                StringUTF16.putChar(buf, index + 1, 'a');\n+                StringUTF16.putChar(buf, index + 2, 'l');\n+                StringUTF16.putChar(buf, index + 3, 's');\n+                StringUTF16.putChar(buf, index + 4, 'e');\n@@ -167,0 +174,2 @@\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n@@ -171,36 +180,0 @@\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      boolean value to encode\n-     * @param prefix     a constant to prepend before value\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, boolean value, String prefix) {\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n-    }\n-\n-    \/**\n-     * Prepends the stringly representation of char value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      char value to encode\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, char value) {\n-        if (indexCoder < UTF16) {\n-            buf[(int)(--indexCoder)] = (byte) (value & 0xFF);\n-        } else {\n-            StringUTF16.putChar(buf, (int)(--indexCoder), value);\n-        }\n-        return indexCoder;\n-    }\n-\n@@ -219,16 +192,1 @@\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n-    }\n-\n-    \/**\n-     * Prepends the stringly representation of integer value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      integer value to encode\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, int value) {\n+        int index = (int)indexCoder;\n@@ -236,1 +194,4 @@\n-            return StringLatin1.getChars(value, (int)indexCoder, buf);\n+            buf[--index] = (byte) (value & 0xFF);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n+            return index;\n@@ -238,1 +199,4 @@\n-            return StringUTF16.getChars(value, (int)indexCoder, buf) | UTF16;\n+            StringUTF16.putChar(buf, --index, value);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n+            return index | UTF16;\n@@ -254,16 +218,1 @@\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n-    }\n-\n-    \/**\n-     * Prepends the stringly representation of long value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      long value to encode\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, long value) {\n+        int index = (int)indexCoder;\n@@ -271,1 +220,4 @@\n-            return StringLatin1.getChars(value, (int)indexCoder, buf);\n+            index = StringLatin1.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n+            return index;\n@@ -273,1 +225,4 @@\n-            return StringUTF16.getChars(value, (int)indexCoder, buf) | UTF16;\n+            index = StringUTF16.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n+            return index | UTF16;\n@@ -289,17 +244,1 @@\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n-    }\n-\n-    \/**\n-     * Prepends the stringly representation of String value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\n-     * @param indexCoder final char index in the buffer, along with coder packed\n-     *                   into higher bits.\n-     * @param buf        buffer to append to\n-     * @param value      String value to encode\n-     * @return           updated index (coder value retained)\n-     *\/\n-    static long prepend(long indexCoder, byte[] buf, String value) {\n-        indexCoder -= value.length();\n+        int index = (int)indexCoder;\n@@ -307,1 +246,4 @@\n-            value.getBytes(buf, (int)indexCoder, String.LATIN1);\n+            index = StringLatin1.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n+            return index;\n@@ -309,1 +251,4 @@\n-            value.getBytes(buf, (int)indexCoder, String.UTF16);\n+            index = StringUTF16.getChars(value, index, buf);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n+            return index | UTF16;\n@@ -311,1 +256,0 @@\n-        return indexCoder;\n@@ -326,3 +270,12 @@\n-        indexCoder = prepend(indexCoder, buf, value);\n-        indexCoder = prepend(indexCoder, buf, prefix);\n-        return indexCoder;\n+        int index = ((int)indexCoder) - value.length();\n+        if (indexCoder < UTF16) {\n+            value.getBytes(buf, index, String.LATIN1);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.LATIN1);\n+            return index;\n+        } else {\n+            value.getBytes(buf, index, String.UTF16);\n+            index -= prefix.length();\n+            prefix.getBytes(buf, index, String.UTF16);\n+            return index | UTF16;\n+        }\n@@ -378,2 +331,1 @@\n-        indexCoder = prepend(indexCoder, buf, s2);\n-        indexCoder = prepend(indexCoder, buf, s1);\n+        indexCoder = prepend(indexCoder, buf, s2, s1);\n@@ -446,2 +398,4 @@\n-        byte coder = (byte)(indexCoder >> 32);\n-        int index = ((int)indexCoder) << coder;\n+        int index = (int)indexCoder;\n+        if (indexCoder >= UTF16) {\n+            index <<= 1;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":75,"deletions":121,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -2614,4 +2614,0 @@\n-            public long stringConcatHelperPrepend(long indexCoder, byte[] buf, String value) {\n-                return StringConcatHelper.prepend(indexCoder, buf, value);\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -568,10 +568,2 @@\n-        if (suffix != null) {\n-            \/\/ newArray variant that deals with prepending any trailing constant\n-            \/\/\n-            \/\/ initialLengthCoder is adjusted to have the correct coder\n-            \/\/ and length: The newArrayWithSuffix method expects only the coder of the\n-            \/\/ suffix to be encoded into indexCoder\n-            initialLengthCoder -= suffix.length();\n-            newArrayCombinator = newArrayWithSuffix(suffix);\n-        } else {\n-            newArrayCombinator = newArray();\n+        if (suffix == null || suffix.isEmpty()) {\n+            suffix = \"\";\n@@ -579,0 +571,8 @@\n+        \/\/ newArray variant that deals with prepending any trailing constant\n+        \/\/\n+        \/\/ initialLengthCoder is adjusted to have the correct coder\n+        \/\/ and length: The newArrayWithSuffix method expects only the coder of the\n+        \/\/ suffix to be encoded into indexCoder\n+        initialLengthCoder -= suffix.length();\n+        newArrayCombinator = newArrayWithSuffix(suffix);\n+\n@@ -741,3 +741,1 @@\n-            NO_PREFIX_PREPENDERS[idx] = prepend = JLA.stringConcatHelper(\"prepend\",\n-                    methodType(long.class, long.class, byte[].class,\n-                            Wrapper.asPrimitiveType(cl))).rebind();\n+            NO_PREFIX_PREPENDERS[idx] = prepend = MethodHandles.insertArguments(prepender(cl), 3, \"\");\n@@ -905,10 +903,0 @@\n-    private @Stable static MethodHandle NEW_ARRAY;\n-    private static MethodHandle newArray() {\n-        MethodHandle mh = NEW_ARRAY;\n-        if (mh == null) {\n-            NEW_ARRAY = mh =\n-                    JLA.stringConcatHelper(\"newArray\", methodType(byte[].class, long.class));\n-        }\n-        return mh;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":11,"deletions":23,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -435,6 +435,0 @@\n-    \/**\n-     * Prepends constant and the stringly representation of value into buffer,\n-     * given the coder and final index. Index is measured in chars, not in bytes!\n-     *\/\n-    long stringConcatHelperPrepend(long indexCoder, byte[] buf, String value);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -222,0 +222,12 @@\n+\n+    public static void main(String... args) {\n+        StringConcat concat = new StringConcat();\n+        concat.concat4String();\n+        concat.concat123String();\n+        concat.concat6String();\n+        concat.concat13String();\n+        concat.concat23String();\n+        concat.concatConstInt();\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcat.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,354 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Benchmarks stressing String concat startup. Provides a main method that takes names of the sub-benchmarks\n+ * of choice as arguments to work well as a standalone startup test\/diagnostic\n+ *\n+ *   StringSingle\n+ *   MixedSmall - small number of mixed expressions\n+ *   StringLarge - large number of expressions with a mix of String arguments and constants\n+ *   MixedLarge - large number of expressions with a mix of constants, Strings and primivitive arguments\n+ *\/\n+public class StringConcatStartup {\n+\n+    public static void main(String... args) {\n+        String[] selection = new String[] { \"StringLarge\", \"MixedSmall\", \"StringSingle\", \"MixedLarge\" };\n+        if (args.length > 0) {\n+            selection = args;\n+        }\n+        for (String select : selection) {\n+            switch (select) {\n+                case \"StringSingle\" -> new StringSingle().run();\n+                case \"MixedSmall\" -> new MixedSmall().run();\n+                case \"StringLarge\" -> new StringLarge().run();\n+                case \"MixedLarge\" -> new MixedLarge().run();\n+            }\n+        }\n+    }\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 40, warmups = 2)\n+    public static class StringSingle {\n+\n+        public String s = \"foo\";\n+\n+        @Benchmark\n+        public String run() {\n+            return \"\" + s;\n+        }\n+    }\n+\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 20, warmups = 2)\n+    public static class MixedSmall {\n+\n+        public String s = \"foo\";\n+        public int i = 17;\n+        public long l = 21L;\n+        public char c = 'a';\n+        public boolean z = true;\n+\n+        @Benchmark\n+        public String run() {\n+            String concat;\n+            concat = \"foo\" + s + \"bar\" + i + \"baz\" + l + \"bur\" + c + \"dub\" + z + \"foo\";\n+            concat = \"bar\" + i + \"baz\" + l + c + \"dub\" + z + \"foo\";\n+            concat = \"bar\" + i + \"baz\" + l + \"dub\" + z;\n+            concat = s + \"bar\" + i + s + \"bur\" + c + \"dub\" + s + \"foo\";\n+            return concat;\n+        }\n+    }\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 10, warmups = 2)\n+    public static class StringLarge {\n+\n+        public String i = \"1\";\n+        public String l = \"2\";\n+        public String b = \"3\";\n+        public String s = \"4\";\n+        public String c = \"5\";\n+        public String S = \"6\";\n+        public String z = \"7\";\n+        public String f = \"8\";\n+        public String d = \"9\";\n+\n+        @Benchmark\n+        public void run() {\n+            String concat;\n+            concat = \"\" + \"S\" + f + l + z + f + \"S\" + d + S + d + S;\n+            concat = \"\" + \"S\" + S + i + b + b + z + i + s + S + b + \"S\";\n+            concat = \"\" + S + f + f + f + b + f + \"S\" + S + S + i + b;\n+            concat = \"\" + b + l + i + l + b + S + i + i + f + z;\n+            concat = \"\" + f + z + d + b + \"S\" + c + S + f + s + s + d;\n+            concat = \"\" + f + b + d + d + l + s + s + b + l + c + z;\n+            concat = \"\" + S + z + l + s + s + i + f + c + i + i + d;\n+            concat = \"\" + b + \"S\" + c + d + \"S\" + d + s + \"S\" + f + c + l + \"S\" + i + z + d + \"S\";\n+            concat = \"\" + S + \"S\" + S + i + c + z + i + i + S + b;\n+            concat = \"\" + S + S + d + s + z + f + z + i + b + s + s + \"S\";\n+            concat = \"\" + i + z + f + d + f + S + c + \"S\" + i;\n+            concat = \"\" + c + c + c + \"S\" + S + l;\n+            concat = \"\" + z + d + s + i + l + i + z + c + i + f + l + s + b + S + S + s + z + \"S\" + c + z;\n+            concat = \"\" + d + b + l + S + s + b + \"S\" + c + d + c + c + l + d + S + b + l + b + S + d + \"S\";\n+            concat = \"\" + c + z + c + d + b + S + c + b + S + \"S\" + d + s + c + s + b + c + b + z + s + i;\n+            concat = \"\" + l + S + \"S\";\n+            concat = \"\" + s + i + f + S + f + i + s + d + S + l + i + \"S\" + i + S + d + i + l + c + i + d;\n+            concat = \"\" + S + l + s + i + b + f + z + c + S + d + s + f + l + i + s + b + f + s + d + l;\n+            concat = \"\" + i + d + b + d + S + b + d + \"S\" + \"S\" + i + l + i + b + \"S\" + \"S\" + s + \"S\" + i + b + c;\n+            concat = \"\" + \"S\" + l + \"S\" + s + d + l + i + l + z + s + i + z + b + b + c + S + d + d + s + i;\n+            concat = \"\" + b + c + i + b + z + d + z + z + d + z + l + b + z + f + b + c + d + c + z + c;\n+            concat = \"\" + b + z + f + b + z + f + s + z + f + \"S\" + l + f + l + z + b + z + i + l + i + S;\n+            concat = \"\" + c + b + \"S\" + z;\n+            concat = \"\" + b + \"S\" + i + \"S\" + S + i + l + c + i + c + z + z + d + \"S\" + z + z + c + z + z + i;\n+            concat = \"\" + f + c + c + \"S\" + c + s + i + z + b + s + f + b + i + i + z + f + d + f + i + i;\n+            concat = \"\" + d + s + z + l + s + d + S + i + S + s + i + c + b + c + s + \"S\" + d + S + f + s;\n+            concat = \"\" + S + f + s + z + d + d + S + s + s + z + f + z + \"S\" + i + d + d + S + c + S + \"S\";\n+            concat = \"\" + c + c + b + S + \"S\" + \"S\" + d + S + s + b + c + d + z + c + b + i + S + z + i + s;\n+            concat = \"\" + l + l + d + z + s + s + i + i + l + c + f + z + i + f + l + z + s + d + f + l;\n+            concat = \"\" + f + d + \"S\" + s;\n+            concat = \"\" + d + S + \"S\" + S + f + \"S\" + c + i + s + b + c + b + l + f + S + c + c + i + z + s;\n+            concat = \"\" + z + \"S\" + s + S + s + d + d + s + f + \"S\" + f + \"S\" + i + S + \"S\" + c + l + b + f + f;\n+            concat = \"\" + l + f + d + b + s + f + d + \"S\" + l + s + \"S\" + b + b + s + S + S + \"S\" + \"S\" + d + b;\n+            concat = \"\" + b + l + f + b + S + f + z + s + S + f + b + b + s + s + b + s + l + d + l;\n+            concat = \"\" + b + b + S + S + S + z + z + d + \"S\" + l + \"S\" + s + i + \"S\" + c + f + S + f + i;\n+            concat = \"\" + l + l + f + i + S + s + \"S\" + \"S\" + z + d + \"S\" + l + d + b + f + f + l + b + b;\n+            concat = \"\" + l + f + \"S\" + f + f + i + l + l + i + S + b + f + d + i + c + c + d + d + i;\n+            concat = \"\" + l + b + s + d + i + i + d + c + \"S\" + s + f + d + z + d + S + c;\n+            concat = \"\" + f + s + \"S\" + z + s + \"S\" + b + b + b + d + d + b + z + l + c + b;\n+            concat = \"\" + l + d + \"S\" + b + z + z + f + c + z + c + c + c + c + d;\n+            concat = \"\" + z + d + l + \"S\" + i + s + b + b + d + s + s;\n+            concat = \"\" + f + i + d + S + f + f + i + s + d + S + c + l + d + s + c + i;\n+            concat = \"\" + f + c + i + \"S\" + \"S\" + c + f + b + l + i + s + c + i + S + S + i;\n+            concat = \"\" + z + S + z + d + d + S + \"S\" + f + d + s + s + \"S\" + l + z + l + c;\n+            concat = \"\" + b + c + s + f + S + l + b + f + \"S\" + l + \"S\" + c + c + z + b + b;\n+            concat = \"\" + c + b + z + s + d + l + l + S + l + \"S\" + f + S + c + f + s + f;\n+            concat = \"\" + z + z + d + i + z + s + z + S + f + S + \"S\" + \"S\" + l + d + c + d;\n+            concat = \"\" + c + S + s + f + c + i + b + l + S + c + l + f + f + l + i + l;\n+            concat = \"\" + \"S\" + i + f + d + s + S + S + l + s + S + l + \"S\" + b + l + s + l + d + d + f + S;\n+            concat = \"\" + l + z + c + l + f + f + d + s + l + b + d + f + S + S + \"S\" + i + i + s + f + i;\n+            concat = \"\" + S + S + l + S + z + d + s + c + \"S\" + d + f + d + f + f + z + i + f + l + S + s;\n+            concat = \"\" + z + d + z + l + f + s + d + z + i + S + S + d + i + z + c + i + i + f + b + \"S\";\n+            concat = \"\" + b + d + \"S\" + f + f + d + s + i + b + l + i + b + f + f + b + f + l + i + z + l;\n+            concat = \"\" + c + z + s + \"S\" + z + f + \"S\" + i + f + s + l + i + \"S\" + d + i + b + i + S + b + l;\n+            concat = \"\" + d + l + s + c + l + d + \"S\" + \"S\" + s + S + f + z + b + s + b + f + z + z + l + l;\n+            concat = \"\" + f + b + \"S\" + s + i + \"S\" + s + f + c + f + c + f + i + i + b + i + i + b + S + S;\n+            concat = \"\" + i + i + s + i + s + S + s + \"S\" + c + c + f + s + d + l + l + d + f + l + i + S;\n+            concat = \"\" + z + d + z + \"S\" + c + i + f + s + b + S + i + c + s + b + c + f + s + z + f + c;\n+            concat = \"\" + f + s + f + b + l + z + f + f + f + c + z + S + b + s + z + i + s + S + i + b;\n+            concat = \"\" + d + i + S + b + i + \"S\" + l + S + S + S + z + i + z + b;\n+            concat = \"\" + \"S\" + S + s + l + f + i + l + b + f + S + d + c + b + d;\n+            concat = \"\" + c + i + i + d + S + z + c + i + c + S + f + i + c + c;\n+            concat = \"\" + \"S\" + \"S\" + c + d + z + l + d + z + f + b + d + z + S + f;\n+            concat = \"\" + b + d + z + d + i + z + d + b + d + \"S\" + c + f + d;\n+            concat = \"\" + d + s + f + c + i + \"S\" + b + b +  S + i + s + d + \"S\" + f;\n+            concat = \"\" + l + S + d + b + S + s + \"S\" + s + s + l + S + \"S\" + c + d;\n+            concat = \"\" + c + s + z + c + S + S + \"S\" + l + S + f + f + c + S + f;\n+            concat = \"\" + d + i + s + c + z + \"S\" + d + f + \"S\" + S + c + b + \"S\" + c;\n+            concat = \"\" + i + b + \"S\" + l + S + d + \"S\" + c + b + s + f + l + f + \"S\";\n+            concat = \"\" + c + b + f + \"S\" + S + s + i + l + s + z + z + f + l + b;\n+            concat = \"\" + S + s + \"S\" + d + s + z + \"S\" + i + i + z + S + b + f + i;\n+            concat = \"\" + z + S + S + \"S\" + S + S + z + b + S + z + b + f + s + l;\n+            concat = \"\" + s + z + d + \"S\" + z + l + f + z + s + z + d + l + s + l;\n+            concat = \"\" + l + d + i + s + i + c + i + f +  b + f + s + b + s + s;\n+            concat = \"\" + z + \"S\" + S + \"S\" + \"S\" + i + \"S\" + s + d + z + l;\n+            concat = \"\" + i + S + S + \"S\" + f + \"S\" + \"S\" +  z + S + z + b + z + c + b;\n+            concat = \"\" + i + f + f + d + z + f + z + b + \"S\" + c + l + l + z + s + S + s;\n+            concat = \"\" + b + b + z + \"S\" + f + s + \"S\" + l +c + S + i + i + b + \"S\" + S;\n+            concat = \"\" + i + \"S\" + d + d + d + \"S\" + f + \"S\" + b + s + S + i + \"S\" + d + b;\n+            concat = \"\" + s + f + b + d + c + d + c + S + S + b + i + b + z + c;\n+            concat = \"\" + l + l + S + l + f + s + i + c + z + f + d + l + f + b + l + f + f + i + i + z;\n+            concat = \"\" + l + l + l + l + s + s + f + i + i + f + z + c + S + s + f + \"S\" + \"S\" + s + z + s;\n+            concat = \"\" + S + z + f + b + l + c + i + l;\n+            concat = \"\" + c + z + b + f + i + i + f + d + f + f + d + d + l + d + S + \"S\" + i + c + b + f;\n+            concat = \"\" + s + d + S + d + b + l + l + f + b + \"S\" + i + z + b + S + S + c + S + f + S + z;\n+            concat = \"\" + l + S + S + i + l + s + d + f + z + i + \"S\" + b + f + c + z + c + S + c + i + s;\n+            concat = \"\" + l + S + S + s + f + S + s + \"S\" + c + c + c;\n+            concat = \"\" + s + \"S\" + c + d + z + c + l + c + z + S + i + f + c + c + s + \"S\" + S + z + s + \"S\";\n+            concat = \"\" + c + i + z + s + b + s + s + b + \"S\" + d + \"S\" + z + f + \"S\" + c + S + s + S + b + i;\n+            concat = \"\" + s + c + d + d + \"S\" + \"S\" + l + s + i + l + l + f + S + f + f + i + S + d + l + c;\n+            concat = \"\" + \"S\" + S + b + c + i + \"S\" + c + c + s + i + \"S\" + b + i + b + b + S + f + l + s + \"S\";\n+            concat = \"\" + l + l + b + f + i + i + f + z + c + S + b + f + z + \"S\" + s + z + \"S\" + f + S + s;\n+            concat = \"\" + i + c + b + i + b + z + \"S\" + i + c + i + l + \"S\" + z + b + b + i + i + c + i + f;\n+            concat = \"\" + \"S\" + c + d + z + d + f + c + c + b + \"S\" + l + f + d + \"S\" + s + s + S + i + s + i;\n+            concat = \"\" + S + \"S\" + d + c + \"S\" + S + \"S\" + b + f + z + \"S\" + l + d + f + \"S\" + S + d + b + c + c;\n+            concat = \"\" + f + S + l + s + l + z + S + d + S + b + f + c + s + b + \"S\" + z + \"S\" + \"S\" + b + z;\n+            concat = \"\" + f + s + c + i + S + b + s + S + i + S + c + b + s + d + i + \"S\" + s + l + c + s;\n+            concat = \"\" + l + f + s + b + d + b + i + c + c + b + s + f + i + z + s + i + s + \"S\" + l + z;\n+            concat = \"\" + d + z + z + c + b + b + s + b + S + l + d + i + S + d + \"S\" + i + S + i + b + S;\n+            concat = \"\" + c + d + \"S\" + f + i + b + d + c + z + f + \"S\" + i + d + b + f + s + \"S\" + c + S + i;\n+            concat = \"\" + i + z + \"S\" + b + S + s + c + s + f + S + S + f + z + s + b + d + z + i + s + z;\n+            concat = \"\" + z + s + z + l + \"S\" + S + s + \"S\" + i + b + c + s + l + l + s + i + c + i + i + d;\n+            concat = \"\" + \"S\" + b + l + z + c + f + l + S + \"S\" + l + i + z + z + l + S + \"S\" + z + S + z + c + \"S\";\n+            concat = \"\" + \"S\" + f + S + i + i + i + \"S\" + i + i + l + c + l + S + S + z + b + i + c + f + S;\n+            concat = \"\" + c + z + S + S + b + i + c;\n+            concat = \"\" + S + s  + S + c;\n+        }\n+    }\n+\n+    @BenchmarkMode(Mode.SingleShotTime)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    @State(Scope.Thread)\n+    @Fork(value = 10, warmups = 2)\n+    public static class MixedLarge {\n+\n+        public int i = 17;\n+        public long l = 21L;\n+        public byte b = (byte)17;\n+        public short s = (short)17;\n+        public char c = 'a';\n+        public String S = \"S\";\n+        public float f = 1.0f;\n+        public double d = 2.0;\n+        public boolean z = true;\n+\n+        @Benchmark\n+        public void run() {\n+            String concat;\n+            concat = \"\" + \"S\" + f + l + z + f + \"S\" + d + S + d + S;\n+            concat = \"\" + \"S\" + S + i + b + b + z + i + s + S + b + \"S\";\n+            concat = \"\" + S + f + f + f + b + f + \"S\" + S + S + i + b;\n+            concat = \"\" + b + l + i + l + b + S + i + i + f + z;\n+            concat = \"\" + f + z + d + b + \"S\" + c + S + f + s + s + d;\n+            concat = \"\" + f + b + d + d + l + s + s + b + l + c + z;\n+            concat = \"\" + S + z + l + s + s + i + f + c + i + i + d;\n+            concat = \"\" + b + \"S\" + c + d + \"S\" + d + s + \"S\" + f + c + l + \"S\" + i + z + d + \"S\";\n+            concat = \"\" + S + \"S\" + S + i + c + z + i + i + S + b;\n+            concat = \"\" + S + S + d + s + z + f + z + i + b + s + s + \"S\";\n+            concat = \"\" + i + z + f + d + f + S + c + \"S\" + i;\n+            concat = \"\" + c + c + c + \"S\" + S + l;\n+            concat = \"\" + z + d + s + i + l + i + z + c + i + f + l + s + b + S + S + s + z + \"S\" + c + z;\n+            concat = \"\" + d + b + l + S + s + b + \"S\" + c + d + c + c + l + d + S + b + l + b + S + d + \"S\";\n+            concat = \"\" + c + z + c + d + b + S + c + b + S + \"S\" + d + s + c + s + b + c + b + z + s + i;\n+            concat = \"\" + l + S + \"S\";\n+            concat = \"\" + s + i + f + S + f + i + s + d + S + l + i + \"S\" + i + S + d + i + l + c + i + d;\n+            concat = \"\" + S + l + s + i + b + f + z + c + S + d + s + f + l + i + s + b + f + s + d + l;\n+            concat = \"\" + i + d + b + d + S + b + d + \"S\" + \"S\" + i + l + i + b + \"S\" + \"S\" + s + \"S\" + i + b + c;\n+            concat = \"\" + \"S\" + l + \"S\" + s + d + l + i + l + z + s + i + z + b + b + c + S + d + d + s + i;\n+            concat = \"\" + b + c + i + b + z + d + z + z + d + z + l + b + z + f + b + c + d + c + z + c;\n+            concat = \"\" + b + z + f + b + z + f + s + z + f + \"S\" + l + f + l + z + b + z + i + l + i + S;\n+            concat = \"\" + c + b + \"S\" + z;\n+            concat = \"\" + b + \"S\" + i + \"S\" + S + i + l + c + i + c + z + z + d + \"S\" + z + z + c + z + z + i;\n+            concat = \"\" + f + c + c + \"S\" + c + s + i + z + b + s + f + b + i + i + z + f + d + f + i + i;\n+            concat = \"\" + d + s + z + l + s + d + S + i + S + s + i + c + b + c + s + \"S\" + d + S + f + s;\n+            concat = \"\" + S + f + s + z + d + d + S + s + s + z + f + z + \"S\" + i + d + d + S + c + S + \"S\";\n+            concat = \"\" + c + c + b + S + \"S\" + \"S\" + d + S + s + b + c + d + z + c + b + i + S + z + i + s;\n+            concat = \"\" + l + l + d + z + s + s + i + i + l + c + f + z + i + f + l + z + s + d + f + l;\n+            concat = \"\" + f + d + \"S\" + s;\n+            concat = \"\" + d + S + \"S\" + S + f + \"S\" + c + i + s + b + c + b + l + f + S + c + c + i + z + s;\n+            concat = \"\" + z + \"S\" + s + S + s + d + d + s + f + \"S\" + f + \"S\" + i + S + \"S\" + c + l + b + f + f;\n+            concat = \"\" + l + f + d + b + s + f + d + \"S\" + l + s + \"S\" + b + b + s + S + S + \"S\" + \"S\" + d + b;\n+            concat = \"\" + b + l + f + b + S + f + z + s + S + f + b + b + s + s + b + s + l + d + l;\n+            concat = \"\" + b + b + S + S + S + z + z + d + \"S\" + l + \"S\" + s + i + \"S\" + c + f + S + f + i;\n+            concat = \"\" + l + l + f + i + S + s + \"S\" + \"S\" + z + d + \"S\" + l + d + b + f + f + l + b + b;\n+            concat = \"\" + l + f + \"S\" + f + f + i + l + l + i + S + b + f + d + i + c + c + d + d + i;\n+            concat = \"\" + l + b + s + d + i + i + d + c + \"S\" + s + f + d + z + d + S + c;\n+            concat = \"\" + f + s + \"S\" + z + s + \"S\" + b + b + b + d + d + b + z + l + c + b;\n+            concat = \"\" + l + d + \"S\" + b + z + z + f + c + z + c + c + c + c + d;\n+            concat = \"\" + z + d + l + \"S\" + i + s + b + b + d + s + s;\n+            concat = \"\" + f + i + d + S + f + f + i + s + d + S + c + l + d + s + c + i;\n+            concat = \"\" + f + c + i + \"S\" + \"S\" + c + f + b + l + i + s + c + i + S + S + i;\n+            concat = \"\" + z + S + z + d + d + S + \"S\" + f + d + s + s + \"S\" + l + z + l + c;\n+            concat = \"\" + b + c + s + f + S + l + b + f + \"S\" + l + \"S\" + c + c + z + b + b;\n+            concat = \"\" + c + b + z + s + d + l + l + S + l + \"S\" + f + S + c + f + s + f;\n+            concat = \"\" + z + z + d + i + z + s + z + S + f + S + \"S\" + \"S\" + l + d + c + d;\n+            concat = \"\" + c + S + s + f + c + i + b + l + S + c + l + f + f + l + i + l;\n+            concat = \"\" + \"S\" + i + f + d + s + S + S + l + s + S + l + \"S\" + b + l + s + l + d + d + f + S;\n+            concat = \"\" + l + z + c + l + f + f + d + s + l + b + d + f + S + S + \"S\" + i + i + s + f + i;\n+            concat = \"\" + S + S + l + S + z + d + s + c + \"S\" + d + f + d + f + f + z + i + f + l + S + s;\n+            concat = \"\" + z + d + z + l + f + s + d + z + i + S + S + d + i + z + c + i + i + f + b + \"S\";\n+            concat = \"\" + b + d + \"S\" + f + f + d + s + i + b + l + i + b + f + f + b + f + l + i + z + l;\n+            concat = \"\" + c + z + s + \"S\" + z + f + \"S\" + i + f + s + l + i + \"S\" + d + i + b + i + S + b + l;\n+            concat = \"\" + d + l + s + c + l + d + \"S\" + \"S\" + s + S + f + z + b + s + b + f + z + z + l + l;\n+            concat = \"\" + f + b + \"S\" + s + i + \"S\" + s + f + c + f + c + f + i + i + b + i + i + b + S + S;\n+            concat = \"\" + i + i + s + i + s + S + s + \"S\" + c + c + f + s + d + l + l + d + f + l + i + S;\n+            concat = \"\" + z + d + z + \"S\" + c + i + f + s + b + S + i + c + s + b + c + f + s + z + f + c;\n+            concat = \"\" + f + s + f + b + l + z + f + f + f + c + z + S + b + s + z + i + s + S + i + b;\n+            concat = \"\" + d + i + S + b + i + \"S\" + l + S + S + S + z + i + z + b;\n+            concat = \"\" + \"S\" + S + s + l + f + i + l + b + f + S + d + c + b + d;\n+            concat = \"\" + c + i + i + d + S + z + c + i + c + S + f + i + c + c;\n+            concat = \"\" + \"S\" + \"S\" + c + d + z + l + d + z + f + b + d + z + S + f;\n+            concat = \"\" + b + d + z + d + i + z + d + b + d + \"S\" + c + f + d;\n+            concat = \"\" + d + s + f + c + i + \"S\" + b + b +  S + i + s + d + \"S\" + f;\n+            concat = \"\" + l + S + d + b + S + s + \"S\" + s + s + l + S + \"S\" + c + d;\n+            concat = \"\" + c + s + z + c + S + S + \"S\" + l + S + f + f + c + S + f;\n+            concat = \"\" + d + i + s + c + z + \"S\" + d + f + \"S\" + S + c + b + \"S\" + c;\n+            concat = \"\" + i + b + \"S\" + l + S + d + \"S\" + c + b + s + f + l + f + \"S\";\n+            concat = \"\" + c + b + f + \"S\" + S + s + i + l + s + z + z + f + l + b;\n+            concat = \"\" + S + s + \"S\" + d + s + z + \"S\" + i + i + z + S + b + f + i;\n+            concat = \"\" + z + S + S + \"S\" + S + S + z + b + S + z + b + f + s + l;\n+            concat = \"\" + s + z + d + \"S\" + z + l + f + z + s + z + d + l + s + l;\n+            concat = \"\" + l + d + i + s + i + c + i + f +  b + f + s + b + s + s;\n+            concat = \"\" + z + \"S\" + S + \"S\" + \"S\" + i + \"S\" + s + d + z + l;\n+            concat = \"\" + i + S + S + \"S\" + f + \"S\" + \"S\" +  z + S + z + b + z + c + b;\n+            concat = \"\" + i + f + f + d + z + f + z + b + \"S\" + c + l + l + z + s + S + s;\n+            concat = \"\" + b + b + z + \"S\" + f + s + \"S\" + l +c + S + i + i + b + \"S\" + S;\n+            concat = \"\" + i + \"S\" + d + d + d + \"S\" + f + \"S\" + b + s + S + i + \"S\" + d + b;\n+            concat = \"\" + s + f + b + d + c + d + c + S + S + b + i + b + z + c;\n+            concat = \"\" + l + l + S + l + f + s + i + c + z + f + d + l + f + b + l + f + f + i + i + z;\n+            concat = \"\" + l + l + l + l + s + s + f + i + i + f + z + c + S + s + f + \"S\" + \"S\" + s + z + s;\n+            concat = \"\" + S + z + f + b + l + c + i + l;\n+            concat = \"\" + c + z + b + f + i + i + f + d + f + f + d + d + l + d + S + \"S\" + i + c + b + f;\n+            concat = \"\" + s + d + S + d + b + l + l + f + b + \"S\" + i + z + b + S + S + c + S + f + S + z;\n+            concat = \"\" + l + S + S + i + l + s + d + f + z + i + \"S\" + b + f + c + z + c + S + c + i + s;\n+            concat = \"\" + l + S + S + s + f + S + s + \"S\" + c + c + c;\n+            concat = \"\" + s + \"S\" + c + d + z + c + l + c + z + S + i + f + c + c + s + \"S\" + S + z + s + \"S\";\n+            concat = \"\" + c + i + z + s + b + s + s + b + \"S\" + d + \"S\" + z + f + \"S\" + c + S + s + S + b + i;\n+            concat = \"\" + s + c + d + d + \"S\" + \"S\" + l + s + i + l + l + f + S + f + f + i + S + d + l + c;\n+            concat = \"\" + \"S\" + S + b + c + i + \"S\" + c + c + s + i + \"S\" + b + i + b + b + S + f + l + s + \"S\";\n+            concat = \"\" + l + l + b + f + i + i + f + z + c + S + b + f + z + \"S\" + s + z + \"S\" + f + S + s;\n+            concat = \"\" + i + c + b + i + b + z + \"S\" + i + c + i + l + \"S\" + z + b + b + i + i + c + i + f;\n+            concat = \"\" + \"S\" + c + d + z + d + f + c + c + b + \"S\" + l + f + d + \"S\" + s + s + S + i + s + i;\n+            concat = \"\" + S + \"S\" + d + c + \"S\" + S + \"S\" + b + f + z + \"S\" + l + d + f + \"S\" + S + d + b + c + c;\n+            concat = \"\" + f + S + l + s + l + z + S + d + S + b + f + c + s + b + \"S\" + z + \"S\" + \"S\" + b + z;\n+            concat = \"\" + f + s + c + i + S + b + s + S + i + S + c + b + s + d + i + \"S\" + s + l + c + s;\n+            concat = \"\" + l + f + s + b + d + b + i + c + c + b + s + f + i + z + s + i + s + \"S\" + l + z;\n+            concat = \"\" + d + z + z + c + b + b + s + b + S + l + d + i + S + d + \"S\" + i + S + i + b + S;\n+            concat = \"\" + c + d + \"S\" + f + i + b + d + c + z + f + \"S\" + i + d + b + f + s + \"S\" + c + S + i;\n+            concat = \"\" + i + z + \"S\" + b + S + s + c + s + f + S + S + f + z + s + b + d + z + i + s + z;\n+            concat = \"\" + z + s + z + l + \"S\" + S + s + \"S\" + i + b + c + s + l + l + s + i + c + i + i + d;\n+            concat = \"\" + \"S\" + b + l + z + c + f + l + S + \"S\" + l + i + z + z + l + S + \"S\" + z + S + z + c + \"S\";\n+            concat = \"\" + \"S\" + f + S + i + i + i + \"S\" + i + i + l + c + l + S + S + z + b + i + c + f + S;\n+            concat = \"\" + c + z + S + S + b + i + c;\n+            concat = \"\" + S + s  + S + c;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringConcatStartup.java","additions":354,"deletions":0,"binary":false,"changes":354,"status":"added"}]}