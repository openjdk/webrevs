{"files":[{"patch":"@@ -656,0 +656,1 @@\n+    return false;\n@@ -669,1 +670,1 @@\n-      return true;\n+      return false;\n@@ -716,3 +717,5 @@\n-    \/\/ Special handling for memlimit\n-    bool success = (option == CompileCommand::MemLimit) && parseMemLimit(line, value, bytes_read, errorbuf, buf_size);\n-    if (!success) {\n+    bool success = false;\n+    if (option == CompileCommand::MemLimit) {\n+      \/\/ Special parsing for MemLimit\n+      success = parseMemLimit(line, value, bytes_read, errorbuf, buf_size);\n+    } else {\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright Red Hat, Inc. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8319301\n+ * @summary Tests various ways to call memlimit\n+ * @library \/test\/lib \/\n+ *\n+ * @run driver compiler.compilercontrol.commands.MemLimitTest\n+ *\/\n+\n+package compiler.compilercontrol.commands;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class MemLimitTest {\n+\n+    static void do_test(String option, boolean expectSuccess, int expectedValue) throws Exception {\n+        OutputAnalyzer output = ProcessTools.executeTestJvm(\"-Xmx64m\", \"-XX:CompileCommand=\" + option, \"-version\");\n+        if (expectSuccess) {\n+            output.shouldHaveExitValue(0);\n+            output.shouldNotContain(\"error occurred\");\n+            \/\/ On success, we expect the command to be registered with the expected value\n+            output.shouldContain(\"CompileCommand: MemLimit *.* intx MemLimit = \" + expectedValue);\n+        } else {\n+            \/\/ On error, we don't expec a command registered.\n+            output.shouldNotHaveExitValue(0);\n+            output.shouldNotMatch(\"# A fatal error.*\");\n+            output.shouldContain(\"CompileCommand: An error occurred during parsing\");\n+            output.shouldNotContain(\"CompileCommand: MemStat\"); \/\/ on error, no command should be registered!\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Check parsing of the MemLimit option. For functional tests, please see\n+        \/\/ test\/hotspot\/jtreg\/compiler\/print\/CompileCommandMemLimit.java\n+\n+        \/\/ Negative tests\n+\n+        \/\/ Missing value\n+        do_test(\"MemLimit,*.*\", false, 0);\n+\n+        \/\/ Not a parseable number. Should not crash\n+        do_test(\"MemLimit,*.*,hallo\", false, 0);\n+\n+        \/\/ Invalid option.\n+        do_test(\"MemLimit,*.*,444m~hallo\", false, 0);\n+\n+        \/\/ Positive tests\n+\n+        \/\/ \"stop\" mode is encoded as positive size\n+        do_test(\"MemLimit,*.*,444m~stop\", true, 465567744);\n+\n+        \/\/ \"crash\" mode is encoded as negative size\n+        do_test(\"MemLimit,*.*,444m~crash\", true, -465567744);\n+\n+        \/\/ if omitted, stop is default\n+        do_test(\"MemLimit,*.*,444m\", true, 465567744);\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/MemLimitTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}