{"files":[{"patch":"@@ -51,2 +51,1 @@\n-                 UnixFileAttributes attrs =\n-                     UnixFileAttributes.get(file, followLinks);\n+                 UnixFileAttributes attrs = UnixFileAttributes.get(file, followLinks);\n@@ -55,0 +54,3 @@\n+                if (x.errno() == ENOTDIR) {\n+                    x.setError(ENOENT);\n+                }\n@@ -212,0 +214,3 @@\n+                if (x.errno() == ENOTDIR) {\n+                    x.setError(ENOENT);\n+                }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -485,0 +485,3 @@\n+            if (x.errno() == ENOTDIR) {\n+                x.setError(ENOENT);\n+            }\n@@ -633,0 +636,3 @@\n+                if (x.errno() == ENOTDIR) {\n+                    x.setError(ENOENT);\n+                }\n@@ -822,0 +828,2 @@\n+                } else if (x.errno() == ENOTDIR) {\n+                    x.setError(ENOENT);\n@@ -842,0 +850,3 @@\n+            if (x.errno() == ENOTDIR) {\n+                x.setError(ENOENT);\n+            }\n@@ -891,0 +902,3 @@\n+                if (x.errno() == ENOTDIR) {\n+                    x.setError(ENOENT);\n+                }\n@@ -954,0 +968,3 @@\n+            if (x.errno() == ENOTDIR) {\n+                x.setError(ENOENT);\n+            }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -325,1 +325,4 @@\n-        if (errno != 0)\n+        if (errno != 0) {\n+            if (errno == ENOTDIR) {\n+                errno = ENOENT;\n+            }\n@@ -327,0 +330,1 @@\n+        }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8356678\n+ * @requires (os.family != \"windows\")\n+ * @summary Test files operations when a path component is not a regular file\n+ * @run junit NotADirectory\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.CopyOption;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.PosixFileAttributes;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import static java.nio.file.StandardCopyOption.ATOMIC_MOVE;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class NotADirectory {\n+    private static final Path ROOT      = Path.of(\".\");\n+    private static final Path NOT_EXIST = ROOT.resolve(\"notExist\");\n+    private static final Path DIR       = ROOT.resolve(\"dir\");\n+    private static final Path FILE      = ROOT.resolve(\"file\");\n+    private static final Path BASE      = ROOT.resolve(\"foo\");\n+    private static final Path BOGUS     = BASE.resolve(\"bar\");\n+\n+    private static final Path[] SRCDST = new Path[] {\n+        NOT_EXIST, DIR, FILE\n+    };\n+\n+    private static final CopyOption[][] COPY_OPTIONS = new CopyOption[][] {\n+        new CopyOption[] {},\n+        new CopyOption[] {REPLACE_EXISTING},\n+    };\n+\n+    private static final CopyOption[][] MOVE_OPTIONS = new CopyOption[][] {\n+        new CopyOption[] {},\n+        new CopyOption[] {ATOMIC_MOVE},\n+        new CopyOption[] {REPLACE_EXISTING},\n+        new CopyOption[] {ATOMIC_MOVE, REPLACE_EXISTING},\n+    };\n+\n+    @BeforeAll\n+    public static void init() throws IOException {\n+        Files.createDirectory(DIR);\n+        Files.createFile(FILE);\n+        Files.createFile(BASE);\n+    }\n+\n+    @AfterAll\n+    public static void clean() throws IOException {\n+        Files.delete(DIR);\n+        Files.delete(FILE);\n+        Files.delete(BASE);\n+    }\n+\n+    private static Stream<Arguments> copyMoveParams(CopyOption[][] options) {\n+        List<Arguments> list = new ArrayList<Arguments>();\n+        for (CopyOption[] opts : options) {\n+            for (Path p : SRCDST) {\n+                list.add(Arguments.of(p, BOGUS, opts));\n+                list.add(Arguments.of(BOGUS, p, opts));\n+            }\n+        }\n+        return list.stream();\n+    }\n+\n+    private static Stream<Arguments> copyParams() {\n+        return copyMoveParams(COPY_OPTIONS);\n+    }\n+\n+    private static Stream<Arguments> moveParams() {\n+        return copyMoveParams(MOVE_OPTIONS);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"copyParams\")\n+    public void copy(Path src, Path dst, CopyOption[] opts)\n+        throws IOException {\n+        assertThrows(NoSuchFileException.class,\n+                     () -> Files.copy(src, dst, opts));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"moveParams\")\n+    public void move(Path src, Path dst, CopyOption[] opts)\n+        throws IOException {\n+        assertThrows(NoSuchFileException.class,\n+                     () -> Files.move(src, dst, opts));\n+    }\n+\n+    @Test\n+    public void readBasic() throws IOException {\n+        assertThrows(NoSuchFileException.class,\n+                     () -> Files.readAttributes(BOGUS, BasicFileAttributes.class));\n+    }\n+\n+    @Test\n+    public void readPosix() throws IOException {\n+        assertThrows(NoSuchFileException.class,\n+                     () -> Files.readAttributes(BOGUS, PosixFileAttributes.class));\n+    }\n+\n+    @Test\n+    public void exists() throws IOException {\n+        assertFalse(Files.exists(BOGUS));\n+    }\n+\n+    @Test\n+    public void notExists() throws IOException {\n+        assertTrue(Files.notExists(BOGUS));\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Files\/NotADirectory.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"}]}