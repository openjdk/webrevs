{"files":[{"patch":"@@ -485,0 +485,3 @@\n+            if (x.errno() == ENOTDIR) {\n+                x.setError(ENOENT);\n+            }\n@@ -633,0 +636,3 @@\n+                if (x.errno() == ENOTDIR) {\n+                    x.setError(ENOENT);\n+                }\n@@ -822,0 +828,2 @@\n+                } else if (x.errno() == ENOTDIR) {\n+                    x.setError(ENOENT);\n@@ -842,0 +850,3 @@\n+            if (x.errno() == ENOTDIR) {\n+                x.setError(ENOENT);\n+            }\n@@ -891,0 +902,3 @@\n+                if (x.errno() == ENOTDIR) {\n+                    x.setError(ENOENT);\n+                }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Test behavior of Files methods for regular file \"foo\/bar\"\n+ * @summary Test files operations when a path component is not a regular file\n@@ -32,0 +32,1 @@\n+import java.nio.file.CopyOption;\n@@ -37,0 +38,6 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import static java.nio.file.StandardCopyOption.ATOMIC_MOVE;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n@@ -41,0 +48,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -43,0 +53,1 @@\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -46,3 +57,10 @@\n-    private static final String DIR = \".\";\n-    private static final String PARENT = \"foo\";\n-    private static final String LEAF = \"bar\";\n+    private static final Path ROOT      = Path.of(\".\");\n+    private static final Path NOT_EXIST = ROOT.resolve(\"notExist\");\n+    private static final Path DIR       = ROOT.resolve(\"dir\");\n+    private static final Path FILE      = ROOT.resolve(\"file\");\n+    private static final Path BASE      = ROOT.resolve(\"foo\");\n+    private static final Path BOGUS     = BASE.resolve(\"bar\");\n+\n+    private static final Path[] SRCDST = new Path[] {\n+        NOT_EXIST, DIR, FILE\n+    };\n@@ -50,2 +68,11 @@\n-    private static Path parent;\n-    private static Path leaf;\n+    private static final CopyOption[][] COPY_OPTIONS = new CopyOption[][] {\n+        new CopyOption[] {},\n+        new CopyOption[] {REPLACE_EXISTING},\n+    };\n+\n+    private static final CopyOption[][] MOVE_OPTIONS = new CopyOption[][] {\n+        new CopyOption[] {},\n+        new CopyOption[] {ATOMIC_MOVE},\n+        new CopyOption[] {REPLACE_EXISTING},\n+        new CopyOption[] {ATOMIC_MOVE, REPLACE_EXISTING},\n+    };\n@@ -55,3 +82,3 @@\n-        parent = Path.of(DIR).resolve(PARENT);\n-        Files.createFile(parent);\n-        leaf = parent.resolve(LEAF);\n+        Files.createDirectory(DIR);\n+        Files.createFile(FILE);\n+        Files.createFile(BASE);\n@@ -62,1 +89,3 @@\n-        Files.delete(parent);\n+        Files.delete(DIR);\n+        Files.delete(FILE);\n+        Files.delete(BASE);\n@@ -65,5 +94,7 @@\n-    @Test\n-    public void copy() throws IOException {\n-        try {\n-            Files.copy(leaf, Path.of(\"junk\"));\n-        } catch (NoSuchFileException expected) {\n+    private static Stream<Arguments> copyMoveParams(CopyOption[][] options) {\n+        List<Arguments> list = new ArrayList<Arguments>();\n+        for (CopyOption[] opts : options) {\n+            for (Path p : SRCDST) {\n+                list.add(Arguments.of(p, BOGUS, opts));\n+                list.add(Arguments.of(BOGUS, p, opts));\n+            }\n@@ -71,0 +102,25 @@\n+        return list.stream();\n+    }\n+\n+    private static Stream<Arguments> copyParams() {\n+        return copyMoveParams(COPY_OPTIONS);\n+    }\n+\n+    private static Stream<Arguments> moveParams() {\n+        return copyMoveParams(MOVE_OPTIONS);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"copyParams\")\n+    public void copy(Path src, Path dst, CopyOption[] opts)\n+        throws IOException {\n+        assertThrows(NoSuchFileException.class,\n+                     () -> Files.copy(src, dst, opts));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"moveParams\")\n+    public void move(Path src, Path dst, CopyOption[] opts)\n+        throws IOException {\n+        assertThrows(NoSuchFileException.class,\n+                     () -> Files.move(src, dst, opts));\n@@ -75,4 +131,2 @@\n-        try {\n-            Files.readAttributes(leaf, BasicFileAttributes.class);\n-        } catch (NoSuchFileException expected) {\n-        }\n+        assertThrows(NoSuchFileException.class,\n+                     () -> Files.readAttributes(BOGUS, BasicFileAttributes.class));\n@@ -83,4 +137,2 @@\n-        try {\n-            Files.readAttributes(leaf, PosixFileAttributes.class);\n-        } catch (NoSuchFileException expected) {\n-        }\n+        assertThrows(NoSuchFileException.class,\n+                     () -> Files.readAttributes(BOGUS, PosixFileAttributes.class));\n@@ -91,1 +143,1 @@\n-        assertFalse(Files.exists(leaf));\n+        assertFalse(Files.exists(BOGUS));\n@@ -96,1 +148,1 @@\n-        assertTrue(Files.notExists(leaf));\n+        assertTrue(Files.notExists(BOGUS));\n","filename":"test\/jdk\/java\/nio\/file\/Files\/NotADirectory.java","additions":77,"deletions":25,"binary":false,"changes":102,"status":"modified"}]}