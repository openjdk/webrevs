{"files":[{"patch":"@@ -1113,1 +1113,1 @@\n-CompactibleSpace* DefNewGeneration::first_compaction_space() const {\n+ContiguousSpace* DefNewGeneration::first_compaction_space() const {\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-  virtual CompactibleSpace* first_compaction_space() const;\n+  virtual ContiguousSpace* first_compaction_space() const;\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-class CompactibleSpace;\n+class ContiguousSpace;\n@@ -106,1 +106,1 @@\n-  CompactibleSpace* first_compaction_space() const;\n+  ContiguousSpace* first_compaction_space() const;\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-inline CompactibleSpace* TenuredGeneration::first_compaction_space() const {\n+inline ContiguousSpace* TenuredGeneration::first_compaction_space() const {\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -287,1 +287,1 @@\n-  CompactibleSpace* space = first_compaction_space();\n+  ContiguousSpace* space = first_compaction_space();\n@@ -309,1 +309,1 @@\n-  CompactibleSpace* sp = first_compaction_space();\n+  ContiguousSpace* sp = first_compaction_space();\n","filename":"src\/hotspot\/share\/gc\/shared\/generation.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-class CompactibleSpace;\n@@ -205,1 +204,1 @@\n-  virtual CompactibleSpace* first_compaction_space() const = 0;\n+  virtual ContiguousSpace* first_compaction_space() const = 0;\n","filename":"src\/hotspot\/share\/gc\/shared\/generation.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -170,1 +170,4 @@\n-ContiguousSpace::ContiguousSpace(): CompactibleSpace(), _top(nullptr) {\n+ContiguousSpace::ContiguousSpace(): Space(),\n+  _compaction_top(nullptr),\n+  _next_compaction_space(nullptr),\n+  _top(nullptr) {\n@@ -182,1 +185,3 @@\n-  CompactibleSpace::initialize(mr, clear_space, mangle_space);\n+  Space::initialize(mr, clear_space, mangle_space);\n+  set_compaction_top(bottom());\n+  _next_compaction_space = nullptr;\n@@ -188,1 +193,2 @@\n-  CompactibleSpace::clear(mangle_space);\n+  Space::clear(mangle_space);\n+  _compaction_top = bottom();\n@@ -241,12 +247,0 @@\n-void CompactibleSpace::initialize(MemRegion mr,\n-                                  bool clear_space,\n-                                  bool mangle_space) {\n-  Space::initialize(mr, clear_space, mangle_space);\n-  set_compaction_top(bottom());\n-  _next_compaction_space = nullptr;\n-}\n-\n-void CompactibleSpace::clear(bool mangle_space) {\n-  Space::clear(mangle_space);\n-  _compaction_top = bottom();\n-}\n@@ -254,1 +248,1 @@\n-HeapWord* CompactibleSpace::forward(oop q, size_t size,\n+HeapWord* ContiguousSpace::forward(oop q, size_t size,\n@@ -378,1 +372,1 @@\n-void CompactibleSpace::adjust_pointers() {\n+void ContiguousSpace::adjust_pointers() {\n@@ -415,1 +409,1 @@\n-void CompactibleSpace::compact() {\n+void ContiguousSpace::compact() {\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-class CompactibleSpace;\n+class ContiguousSpace;\n@@ -293,1 +293,1 @@\n-  CompactibleSpace* space;\n+  ContiguousSpace* space;\n@@ -299,5 +299,5 @@\n-\/\/ A space that supports compaction operations.  This is usually, but not\n-\/\/ necessarily, a space that is normally contiguous.  But, for example, a\n-\/\/ free-list-based space whose normal collection is a mark-sweep without\n-\/\/ compaction could still support compaction in full GC's.\n-class CompactibleSpace: public Space {\n+class GenSpaceMangler;\n+\n+\/\/ A space in which the free area is contiguous.  It therefore supports\n+\/\/ faster allocation, and compaction.\n+class ContiguousSpace: public Space {\n@@ -305,0 +305,1 @@\n+\n@@ -307,1 +308,1 @@\n-  CompactibleSpace* _next_compaction_space;\n+  ContiguousSpace* _next_compaction_space;\n@@ -309,2 +310,1 @@\n-  template <class SpaceType>\n-  static inline void verify_up_to_first_dead(SpaceType* space) NOT_DEBUG_RETURN;\n+  static inline void verify_up_to_first_dead(ContiguousSpace* space) NOT_DEBUG_RETURN;\n@@ -312,2 +312,1 @@\n-  template <class SpaceType>\n-  static inline void clear_empty_region(SpaceType* space);\n+  static inline void clear_empty_region(ContiguousSpace* space);\n@@ -315,3 +314,22 @@\n-public:\n-  CompactibleSpace() :\n-   _compaction_top(nullptr), _next_compaction_space(nullptr) {}\n+ protected:\n+  HeapWord* _top;\n+  \/\/ A helper for mangling the unused area of the space in debug builds.\n+  GenSpaceMangler* _mangler;\n+\n+  \/\/ Used during compaction.\n+  HeapWord* _first_dead;\n+  HeapWord* _end_of_live;\n+\n+  \/\/ This the function to invoke when an allocation of an object covering\n+  \/\/ \"start\" to \"end\" occurs to update other internal data structures.\n+  virtual void alloc_block(HeapWord* start, HeapWord* the_end) { }\n+\n+  GenSpaceMangler* mangler() { return _mangler; }\n+\n+  \/\/ Allocation helpers (return null if full).\n+  inline HeapWord* allocate_impl(size_t word_size);\n+  inline HeapWord* par_allocate_impl(size_t word_size);\n+\n+ public:\n+  ContiguousSpace();\n+  ~ContiguousSpace();\n@@ -320,0 +338,1 @@\n+\n@@ -332,4 +351,0 @@\n-  \/\/ Perform operations on the space needed after a compaction\n-  \/\/ has been performed.\n-  virtual void reset_after_compaction() = 0;\n-\n@@ -340,1 +355,1 @@\n-  virtual CompactibleSpace* next_compaction_space() const {\n+  virtual ContiguousSpace* next_compaction_space() const {\n@@ -344,1 +359,1 @@\n-  void set_next_compaction_space(CompactibleSpace* csp) {\n+  void set_next_compaction_space(ContiguousSpace* csp) {\n@@ -359,1 +374,1 @@\n-  virtual void prepare_for_compaction(CompactPoint* cp) = 0;\n+  void prepare_for_compaction(CompactPoint* cp);\n@@ -388,34 +403,0 @@\n-protected:\n-  \/\/ Used during compaction.\n-  HeapWord* _first_dead;\n-  HeapWord* _end_of_live;\n-\n-  \/\/ This the function to invoke when an allocation of an object covering\n-  \/\/ \"start\" to \"end\" occurs to update other internal data structures.\n-  virtual void alloc_block(HeapWord* start, HeapWord* the_end) { }\n-};\n-\n-class GenSpaceMangler;\n-\n-\/\/ A space in which the free area is contiguous.  It therefore supports\n-\/\/ faster allocation, and compaction.\n-class ContiguousSpace: public CompactibleSpace {\n-  friend class VMStructs;\n-\n- protected:\n-  HeapWord* _top;\n-  \/\/ A helper for mangling the unused area of the space in debug builds.\n-  GenSpaceMangler* _mangler;\n-\n-  GenSpaceMangler* mangler() { return _mangler; }\n-\n-  \/\/ Allocation helpers (return null if full).\n-  inline HeapWord* allocate_impl(size_t word_size);\n-  inline HeapWord* par_allocate_impl(size_t word_size);\n-\n- public:\n-  ContiguousSpace();\n-  ~ContiguousSpace();\n-\n-  void initialize(MemRegion mr, bool clear_space, bool mangle_space) override;\n-  void clear(bool mangle_space) override;\n@@ -470,1 +451,1 @@\n-  void reset_after_compaction() override {\n+  void reset_after_compaction() {\n@@ -500,5 +481,0 @@\n-#if INCLUDE_SERIALGC\n-  \/\/ Overrides for more efficient compaction support.\n-  void prepare_for_compaction(CompactPoint* cp) override;\n-#endif\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":38,"deletions":62,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  CompactibleSpace* _space;\n+  ContiguousSpace* _space;\n@@ -86,1 +86,1 @@\n-  DeadSpacer(CompactibleSpace* space) : _allowed_deadspace_words(0), _space(space) {\n+  DeadSpacer(ContiguousSpace* space) : _allowed_deadspace_words(0), _space(space) {\n@@ -105,1 +105,0 @@\n-\n@@ -128,1 +127,0 @@\n-\n@@ -132,2 +130,1 @@\n-template <class SpaceType>\n-inline void CompactibleSpace::verify_up_to_first_dead(SpaceType* space) {\n+inline void ContiguousSpace::verify_up_to_first_dead(ContiguousSpace* space) {\n@@ -152,2 +149,1 @@\n-template <class SpaceType>\n-inline void CompactibleSpace::clear_empty_region(SpaceType* space) {\n+inline void ContiguousSpace::clear_empty_region(ContiguousSpace* space) {\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -105,3 +105,3 @@\n-  nonstatic_field(CompactibleSpace,            _compaction_top,                               HeapWord*)                             \\\n-  nonstatic_field(CompactibleSpace,            _first_dead,                                   HeapWord*)                             \\\n-  nonstatic_field(CompactibleSpace,            _end_of_live,                                  HeapWord*)                             \\\n+  nonstatic_field(ContiguousSpace,            _compaction_top,                               HeapWord*)                             \\\n+  nonstatic_field(ContiguousSpace,            _first_dead,                                   HeapWord*)                             \\\n+  nonstatic_field(ContiguousSpace,            _end_of_live,                                  HeapWord*)                             \\\n@@ -165,2 +165,1 @@\n-           declare_type(CompactibleSpace,             Space)              \\\n-           declare_type(ContiguousSpace,              CompactibleSpace)   \\\n+           declare_type(ContiguousSpace,             Space)               \\\n","filename":"src\/hotspot\/share\/gc\/shared\/vmStructs_gc.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -234,1 +234,0 @@\n-class CompactibleSpace;\n","filename":"src\/hotspot\/share\/memory\/iterator.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import sun.jvm.hotspot.gc.shared.CompactibleSpace;\n+import sun.jvm.hotspot.gc.shared.ContiguousSpace;\n@@ -47,1 +47,1 @@\n-public class HeapRegion extends CompactibleSpace implements LiveRegionsProvider {\n+public class HeapRegion extends ContiguousSpace implements LiveRegionsProvider {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegion.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.gc.shared;\n-\n-import java.util.*;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-\/** A space that supports compaction operations.  This is usually, but\n-    not necessarily, a space that is normally contiguous.  But, for\n-    example, a free-list-based space whose normal collection is a\n-    mark-sweep without compaction could still support compaction in\n-    full GC's. *\/\n-\n-public abstract class CompactibleSpace extends Space {\n-\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) {\n-    Type type = db.lookupType(\"CompactibleSpace\");\n-  }\n-\n-  public CompactibleSpace(Address addr) {\n-    super(addr);\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/shared\/CompactibleSpace.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -37,1 +37,1 @@\n-public class ContiguousSpace extends CompactibleSpace implements LiveRegionsProvider {\n+public class ContiguousSpace extends Space implements LiveRegionsProvider {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/shared\/ContiguousSpace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}