{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,16 @@\n-\/**\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Insets;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.InputEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+\/*\n@@ -30,3 +45,0 @@\n- * @library \/test\/lib\n- * @build jdk.test.lib.Platform\n- * @run main bug8007006\n@@ -35,5 +47,0 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-\n-import jdk.test.lib.Platform;\n-\n@@ -41,3 +48,3 @@\n-    private static Frame frame1;\n-    private static Frame frame2;\n-    private static volatile boolean isActionPerformed;\n+    private static Frame mainFrame;\n+    private static Frame subFrame;\n+    private static final CountDownLatch isActionPerformed = new CountDownLatch(1);\n@@ -46,6 +53,3 @@\n-        if (!Platform.isOSX()) {\n-            System.out.println(\"This test is for MacOS only. Automatically passed on other platforms.\");\n-            return;\n-        }\n-\n-        System.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");\n+        try {\n+            System.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");\n+            Robot robot = new Robot();\n@@ -53,2 +57,3 @@\n-        Robot robot = new Robot();\n-        robot.setAutoDelay(300);\n+            EventQueue.invokeAndWait(bug8007006::createAndShowGUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n@@ -56,4 +61,3 @@\n-        createAndShowGUI();\n-        robot.waitForIdle();\n-        frame2.dispose();\n-        robot.waitForIdle();\n+            EventQueue.invokeAndWait(() -> subFrame.dispose());\n+            robot.waitForIdle();\n+            robot.delay(300);\n@@ -61,1 +65,1 @@\n-        performMenuItemTest(robot);\n+            performMenuItemTest(robot);\n@@ -63,3 +67,9 @@\n-        frame1.dispose();\n-        if (!isActionPerformed) {\n-            throw new Exception(\"Test failed: menu item action was not performed\");\n+            if (!isActionPerformed.await(1, TimeUnit.SECONDS)) {\n+                throw new Exception(\"Test failed: menu item action was not performed\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (mainFrame != null) {\n+                    mainFrame.dispose();\n+                }\n+            });\n@@ -70,10 +80,14 @@\n-        frame1 = new Frame(\"Frame 1\");\n-        frame1.setMenuBar(createMenuBar());\n-        frame1.setSize(200, 200);\n-\n-        frame2 = new Frame(\"Frame 2\");\n-        frame2.setMenuBar(createMenuBar());\n-        frame2.setSize(200, 200);\n-\n-        frame1.setVisible(true);\n-        frame2.setVisible(true);\n+        mainFrame = new Frame(\"Frame 1\");\n+        mainFrame.setMenuBar(createMenuBar());\n+        mainFrame.setSize(200, 200);\n+        mainFrame.setBackground(Color.GREEN);\n+        mainFrame.setLocationRelativeTo(null);\n+\n+        subFrame = new Frame(\"Frame 2\");\n+        subFrame.setMenuBar(createMenuBar());\n+        subFrame.setSize(200, 200);\n+        subFrame.setBackground(Color.RED);\n+        subFrame.setLocationRelativeTo(null);\n+\n+        mainFrame.setVisible(true);\n+        subFrame.setVisible(true);\n@@ -83,2 +97,2 @@\n-        \/\/ A very long name makes it more likely that the robot will hit the\n-        \/\/ menu\n+        \/\/ A very long name makes it more likely\n+        \/\/ that the robot will hit the menu\n@@ -87,6 +101,0 @@\n-        item.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent ev) {\n-                isActionPerformed = true;\n-            }\n-        });\n@@ -94,0 +102,2 @@\n+        item.addActionListener(ev -> isActionPerformed.countDown());\n+\n@@ -105,1 +115,1 @@\n-        \/\/ The work around is to make the menu and the menu item names very\n+        \/\/ The workaround is to make the menu and the menu item names very\n@@ -107,0 +117,9 @@\n+        Toolkit toolkit = Toolkit.getDefaultToolkit();\n+        GraphicsConfiguration gc =\n+                GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                   .getDefaultScreenDevice()\n+                                   .getDefaultConfiguration();\n+\n+        Insets screenInsets = toolkit.getScreenInsets(gc);\n+        System.out.println(\"Screen insets: \" + screenInsets);\n+\n@@ -108,1 +127,1 @@\n-        int menuBarY = 11;\n+        int menuBarY = screenInsets.top \/ 2;\n@@ -110,1 +129,1 @@\n-        int menuItemY = 34;\n+        int menuItemY = screenInsets.top + 10;\n@@ -113,1 +132,0 @@\n-        robot.mouseMove(menuItemX, menuItemY);\n@@ -116,2 +134,0 @@\n-        waitForAction();\n-    }\n@@ -119,10 +135,4 @@\n-    private static void waitForAction() {\n-        try {\n-            for (int i = 0; i < 10; i++) {\n-                if (isActionPerformed) {\n-                    return;\n-                }\n-                Thread.sleep(100);\n-            }\n-        } catch (InterruptedException ex) {\n-        }\n+        robot.mouseMove(menuItemX, menuItemY);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n","filename":"test\/jdk\/java\/awt\/MenuBar\/8007006\/bug8007006.java","additions":73,"deletions":63,"binary":false,"changes":136,"status":"modified"}]}