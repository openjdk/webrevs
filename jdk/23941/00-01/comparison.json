{"files":[{"patch":"@@ -139,5 +139,0 @@\n-\/\/ Avoid that a useless OpaqueInitializedAssertionPredicateNode is commoned up with a useful one.\n-bool OpaqueInitializedAssertionPredicateNode::cmp(const Node &n) const {\n-  return _useless == n.as_OpaqueInitializedAssertionPredicate()->is_useless();\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/opaquenode.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -199,1 +199,5 @@\n-  virtual bool cmp(const Node& n) const;\n+  \/\/ OpaqueInitializedAssertionPredicateNode are unique to an Initialized Assertion Predicate expression and should never\n+  \/\/ common up. Thus, we return NO_HASH here.\n+  virtual uint hash() const {\n+    return NO_HASH;\n+  }\n","filename":"src\/hotspot\/share\/opto\/opaquenode.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}