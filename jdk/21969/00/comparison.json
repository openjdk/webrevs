{"files":[{"patch":"@@ -327,1 +327,1 @@\n-  NOT_PRODUCT(AssertionPredicateType _assertion_predicate_type;)\n+  AssertionPredicateType _assertion_predicate_type;\n@@ -429,1 +429,1 @@\n-  NOT_PRODUCT(IfNode(Node* control, Node* bol, float p, float fcnt, AssertionPredicateType assertion_predicate_type);)\n+  IfNode(Node* control, Node* bol, float p, float fcnt, AssertionPredicateType assertion_predicate_type);\n@@ -451,1 +451,0 @@\n-#ifndef PRODUCT\n@@ -456,0 +455,1 @@\n+#ifndef PRODUCT\n@@ -471,1 +471,0 @@\n-#ifndef PRODUCT\n@@ -476,1 +475,0 @@\n-#endif \/\/ NOT PRODUCT\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n-      _fcnt(fcnt)\n-      NOT_PRODUCT(COMMA _assertion_predicate_type(AssertionPredicateType::None)) {\n+      _fcnt(fcnt),\n+      _assertion_predicate_type(AssertionPredicateType::None) {\n@@ -58,1 +58,0 @@\n-#ifndef PRODUCT\n@@ -66,1 +65,0 @@\n-#endif \/\/ NOT_PRODUCT\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -103,2 +103,2 @@\n-                                                        const int opcode, const bool rewire_uncommon_proj_phi_inputs\n-                                                        NOT_PRODUCT (COMMA AssertionPredicateType assertion_predicate_type)) {\n+                                                        const int opcode, const bool rewire_uncommon_proj_phi_inputs,\n+                                                        AssertionPredicateType assertion_predicate_type) {\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2763,2 +2763,2 @@\n-                                                                        scale_con, int_offset, int_limit NOT_PRODUCT(\n-                                                                        COMMA AssertionPredicateType::FinalIv));\n+                                                                        scale_con, int_offset, int_limit,\n+                                                                        AssertionPredicateType::FinalIv);\n@@ -2777,2 +2777,2 @@\n-                                                                      int_offset, int_limit NOT_PRODUCT(COMMA\n-                                                                      AssertionPredicateType::InitValue));\n+                                                                      int_offset, int_limit,\n+                                                                      AssertionPredicateType::InitValue);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1355,2 +1355,2 @@\n-      bool rewire_uncommon_proj_phi_inputs = false\n-      NOT_PRODUCT (COMMA AssertionPredicateType assertion_predicate_type = AssertionPredicateType::None));\n+      bool rewire_uncommon_proj_phi_inputs = false,\n+      AssertionPredicateType assertion_predicate_type = AssertionPredicateType::None);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -174,2 +174,2 @@\n-                                                                                new_opaque_node NOT_PRODUCT(COMMA\n-                                                                                _if_node->assertion_predicate_type()));\n+                                                                                new_opaque_node,\n+                                                                                _if_node->assertion_predicate_type());\n@@ -549,2 +549,2 @@\n-                                                             Node* assertion_expression NOT_PRODUCT(COMMA\n-                                                             const AssertionPredicateType assertion_predicate_type)) {\n+                                                             Node* assertion_expression,\n+                                                             const AssertionPredicateType assertion_predicate_type) {\n@@ -552,1 +552,1 @@\n-  return create(new_control, if_opcode, assertion_expression, halt_message NOT_PRODUCT(COMMA assertion_predicate_type));\n+  return create(new_control, if_opcode, assertion_expression, halt_message, assertion_predicate_type);\n@@ -558,2 +558,2 @@\n-                                                                Node* assertion_expression NOT_PRODUCT(COMMA\n-                                                                const AssertionPredicateType assertion_predicate_type)) {\n+                                                                Node* assertion_expression,\n+                                                                const AssertionPredicateType assertion_predicate_type) {\n@@ -561,1 +561,1 @@\n-  return create(new_control, if_opcode, assertion_expression, halt_message NOT_PRODUCT(COMMA assertion_predicate_type));\n+  return create(new_control, if_opcode, assertion_expression, halt_message, assertion_predicate_type);\n@@ -574,2 +574,2 @@\n-                                                const char* halt_message NOT_PRODUCT(COMMA\n-                                                const AssertionPredicateType assertion_predicate_type)) {\n+                                                const char* halt_message,\n+                                                const AssertionPredicateType assertion_predicate_type) {\n@@ -579,2 +579,1 @@\n-  IfNode* if_node = create_if_node(new_control, if_opcode, assertion_expression, loop\n-                                   NOT_PRODUCT(COMMA assertion_predicate_type));\n+  IfNode* if_node = create_if_node(new_control, if_opcode, assertion_expression, loop, assertion_predicate_type);\n@@ -586,2 +585,2 @@\n-                                                    IdealLoopTree* loop NOT_PRODUCT(COMMA\n-                                                    const AssertionPredicateType assertion_predicate_type)) {\n+                                                    IdealLoopTree* loop,\n+                                                    const AssertionPredicateType assertion_predicate_type) {\n@@ -590,2 +589,1 @@\n-    if_node = new IfNode(new_control, assertion_expression, PROB_MAX, COUNT_UNKNOWN\n-                         NOT_PRODUCT(COMMA assertion_predicate_type));\n+    if_node = new IfNode(new_control, assertion_expression, PROB_MAX, COUNT_UNKNOWN, assertion_predicate_type);\n@@ -594,2 +592,1 @@\n-    if_node = new RangeCheckNode(new_control, assertion_expression, PROB_MAX, COUNT_UNKNOWN\n-                                 NOT_PRODUCT(COMMA assertion_predicate_type));\n+    if_node = new RangeCheckNode(new_control, assertion_expression, PROB_MAX, COUNT_UNKNOWN, assertion_predicate_type);\n@@ -634,2 +631,2 @@\n-                                        deopt_reason, if_opcode, does_overflow\n-                                        NOT_PRODUCT(COMMA AssertionPredicateType::InitValue));\n+                                        deopt_reason, if_opcode, does_overflow,\n+                                        AssertionPredicateType::InitValue);\n@@ -639,2 +636,2 @@\n-                                           deopt_reason, if_opcode, does_overflow\n-                                           NOT_PRODUCT(COMMA AssertionPredicateType::LastValue));\n+                                           deopt_reason, if_opcode, does_overflow,\n+                                           AssertionPredicateType::LastValue);\n@@ -659,2 +656,1 @@\n-    const int if_opcode, const bool does_overflow\n-    NOT_PRODUCT(COMMA AssertionPredicateType assertion_predicate_type)) {\n+    const int if_opcode, const bool does_overflow, const AssertionPredicateType assertion_predicate_type) {\n@@ -662,2 +658,2 @@\n-                                                                 does_overflow ? Op_If : if_opcode, false\n-                                                                 NOT_PRODUCT(COMMA assertion_predicate_type));\n+                                                                 does_overflow ? Op_If : if_opcode, false,\n+                                                                 assertion_predicate_type);\n@@ -691,2 +687,2 @@\n-    Node* new_control, OpaqueTemplateAssertionPredicateNode* template_assertion_predicate_expression, bool does_overflow\n-    NOT_PRODUCT(COMMA AssertionPredicateType assertion_predicate_type)) {\n+    Node* new_control, OpaqueTemplateAssertionPredicateNode* template_assertion_predicate_expression,\n+    const bool does_overflow, const AssertionPredicateType assertion_predicate_type) {\n@@ -695,2 +691,2 @@\n-                                                            template_assertion_predicate_expression\n-                                                            NOT_PRODUCT(COMMA assertion_predicate_type));\n+                                                            template_assertion_predicate_expression,\n+                                                            assertion_predicate_type);\n@@ -707,2 +703,2 @@\n-      create_if_node_with_halt(new_control, template_assertion_predicate_expression, does_overflow\n-                               NOT_PRODUCT(COMMA AssertionPredicateType::InitValue));\n+      create_if_node_with_halt(new_control, template_assertion_predicate_expression, does_overflow,\n+                               AssertionPredicateType::InitValue);\n@@ -712,1 +708,1 @@\n-                                  does_overflow NOT_PRODUCT(COMMA AssertionPredicateType::LastValue));\n+                                  does_overflow, AssertionPredicateType::LastValue);\n@@ -743,2 +739,2 @@\n-  return create_control_nodes(new_control, template_assertion_predicate->Opcode(), assertion_expression\n-                              NOT_PRODUCT(COMMA template_assertion_predicate->assertion_predicate_type()));\n+  return create_control_nodes(new_control, template_assertion_predicate->Opcode(), assertion_expression,\n+                              template_assertion_predicate->assertion_predicate_type());\n@@ -756,2 +752,2 @@\n-  return create_control_nodes(new_control, template_assertion_predicate->Opcode(), assertion_expression\n-                              NOT_PRODUCT(COMMA template_assertion_predicate->assertion_predicate_type()));\n+  return create_control_nodes(new_control, template_assertion_predicate->Opcode(), assertion_expression,\n+                              template_assertion_predicate->assertion_predicate_type());\n@@ -762,2 +758,2 @@\n-                                                         const int scale, Node* offset, Node* range NOT_PRODUCT(COMMA\n-                                                         AssertionPredicateType assertion_predicate_type)) {\n+                                                         const int scale, Node* offset, Node* range,\n+                                                         const AssertionPredicateType assertion_predicate_type) {\n@@ -768,2 +764,2 @@\n-  return create_control_nodes(new_control, does_overflow ? Op_If : Op_RangeCheck, assertion_expression\n-                              NOT_PRODUCT(COMMA assertion_predicate_type));\n+  return create_control_nodes(new_control, does_overflow ? Op_If : Op_RangeCheck, assertion_expression,\n+                              assertion_predicate_type);\n@@ -774,2 +770,2 @@\n-    Node* new_control, const int if_opcode, OpaqueInitializedAssertionPredicateNode* assertion_expression\n-    NOT_PRODUCT(COMMA AssertionPredicateType assertion_predicate_type)) {\n+    Node* new_control, const int if_opcode, OpaqueInitializedAssertionPredicateNode* assertion_expression,\n+    const AssertionPredicateType assertion_predicate_type) {\n@@ -777,2 +773,2 @@\n-  return assertion_predicate_if_creator.create_for_initialized(new_control, if_opcode, assertion_expression\n-                                                               NOT_PRODUCT(COMMA assertion_predicate_type));\n+  return assertion_predicate_if_creator.create_for_initialized(new_control, if_opcode, assertion_expression,\n+                                                               assertion_predicate_type);\n@@ -882,0 +878,4 @@\n+  if (!template_assertion_predicate.is_last_value()) {\n+    \/\/ Only Last Value Assertion Predicates have an OpaqueLoopStrideNode.\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":45,"deletions":45,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -204,1 +204,0 @@\n-#ifndef PRODUCT\n@@ -214,1 +213,0 @@\n-#endif \/\/ NOT PRODUCT\n@@ -380,2 +378,2 @@\n-  IfTrueNode* _success_proj;\n-  IfNode* _if_node;\n+  IfTrueNode* const _success_proj;\n+  IfNode* const _if_node;\n@@ -406,0 +404,4 @@\n+  bool is_last_value() const {\n+    return _if_node->assertion_predicate_type() == AssertionPredicateType::LastValue;\n+  }\n+\n@@ -417,2 +419,2 @@\n-  IfTrueNode* _success_proj;\n-  IfNode* _if_node;\n+  IfTrueNode* const _success_proj;\n+  IfNode* const _if_node;\n@@ -439,0 +441,4 @@\n+  bool is_last_value() const {\n+    return _if_node->assertion_predicate_type() == AssertionPredicateType::LastValue;\n+  }\n+\n@@ -553,4 +559,4 @@\n-  IfTrueNode* create_for_initialized(Node* new_control, int if_opcode, Node* assertion_expression\n-                                     NOT_PRODUCT(COMMA const AssertionPredicateType assertion_predicate_type));\n-  IfTrueNode* create_for_template(Node* new_control, int if_opcode, Node* assertion_expression\n-                                  NOT_PRODUCT(COMMA const AssertionPredicateType assertion_predicate_type));\n+  IfTrueNode* create_for_initialized(Node* new_control, int if_opcode, Node* assertion_expression,\n+                                     AssertionPredicateType assertion_predicate_type);\n+  IfTrueNode* create_for_template(Node* new_control, int if_opcode, Node* assertion_expression,\n+                                  AssertionPredicateType assertion_predicate_type);\n@@ -558,4 +564,4 @@\n-  IfTrueNode* create(Node* new_control, int if_opcode, Node* assertion_expression, const char* halt_message\n-                     NOT_PRODUCT(COMMA const AssertionPredicateType assertion_predicate_type));\n-  IfNode* create_if_node(Node* new_control, int if_opcode, Node* assertion_expression, IdealLoopTree* loop\n-                         NOT_PRODUCT(COMMA const AssertionPredicateType assertion_predicate_type));\n+  IfTrueNode* create(Node* new_control, int if_opcode, Node* assertion_expression, const char* halt_message,\n+                     AssertionPredicateType assertion_predicate_type);\n+  IfNode* create_if_node(Node* new_control, int if_opcode, Node* assertion_expression, IdealLoopTree* loop,\n+                         AssertionPredicateType assertion_predicate_type);\n@@ -584,2 +590,1 @@\n-                                                bool does_overflow\n-                                                NOT_PRODUCT(COMMA AssertionPredicateType assertion_predicate_type));\n+                                                bool does_overflow, AssertionPredicateType assertion_predicate_type);\n@@ -588,2 +593,1 @@\n-                                       bool does_overflow\n-                                       NOT_PRODUCT(COMMA AssertionPredicateType assertion_predicate_type));\n+                                       bool does_overflow, AssertionPredicateType assertion_predicate_type);\n@@ -617,2 +621,2 @@\n-  IfTrueNode* create(Node* operand, Node* new_control, jint stride, int scale, Node* offset, Node* range\n-                     NOT_PRODUCT(COMMA AssertionPredicateType assertion_predicate_type));\n+  IfTrueNode* create(Node* operand, Node* new_control, jint stride, int scale, Node* offset, Node* range,\n+                     AssertionPredicateType assertion_predicate_type);\n@@ -625,2 +629,2 @@\n-                                   OpaqueInitializedAssertionPredicateNode* assertion_expression\n-                                   NOT_PRODUCT(COMMA AssertionPredicateType assertion_predicate_type));\n+                                   OpaqueInitializedAssertionPredicateNode* assertion_expression,\n+                                   AssertionPredicateType assertion_predicate_type);\n@@ -1066,1 +1070,4 @@\n-    initialized_assertion_predicate.kill(_phase);\n+    if (initialized_assertion_predicate.is_last_value()) {\n+      \/\/ Only Last Value Initialized Assertion Predicates need to be killed and updated.\n+      initialized_assertion_predicate.kill(_phase);\n+    }\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":30,"deletions":23,"binary":false,"changes":53,"status":"modified"}]}