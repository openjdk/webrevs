{"files":[{"patch":"@@ -199,18 +199,0 @@\n-\/\/ Replace the input to OpaqueLoopStrideNode with 'new_stride' and leave the other nodes unchanged.\n-void TemplateAssertionPredicate::replace_opaque_stride_input(Node* new_stride, PhaseIterGVN& igvn) const {\n-  TemplateAssertionExpression expression(opaque_node());\n-  expression.replace_opaque_stride_input(new_stride, igvn);\n-}\n-\n-\/\/ Create a new Initialized Assertion Predicate from this template at 'new_control' and return the success projection\n-\/\/ of the newly created Initialized Assertion Predicate.\n-IfTrueNode* TemplateAssertionPredicate::initialize(PhaseIdealLoop* phase, Node* new_control) const {\n-  assert(phase->assertion_predicate_has_loop_opaque_node(head()),\n-         \"must find OpaqueLoop* nodes for Template Assertion Predicate\");\n-  InitializedAssertionPredicateCreator initialized_assertion_predicate(phase);\n-  IfTrueNode* success_proj = initialized_assertion_predicate.create_from_template(head(), new_control);\n-  assert(!phase->assertion_predicate_has_loop_opaque_node(success_proj->in(0)->as_If()),\n-         \"Initialized Assertion Predicates do not have OpaqueLoop* nodes in the bool expression anymore\");\n-  return success_proj;\n-}\n-\n@@ -774,13 +756,0 @@\n-\/\/ Create a new Initialized Assertion Predicate from 'template_assertion_predicate' by cloning it but omitting the\n-\/\/ OpaqueLoop*Notes (i.e. taking their inputs instead).\n-IfTrueNode* InitializedAssertionPredicateCreator::create_from_template(IfNode* template_assertion_predicate,\n-                                                                       Node* new_control) {\n-  OpaqueTemplateAssertionPredicateNode* template_opaque =\n-      template_assertion_predicate->in(1)->as_OpaqueTemplateAssertionPredicate();\n-  TemplateAssertionExpression template_assertion_expression(template_opaque);\n-  OpaqueInitializedAssertionPredicateNode* assertion_expression =\n-      template_assertion_expression.clone_and_fold_opaque_loop_nodes(new_control, _phase);\n-  return create_control_nodes(new_control, template_assertion_predicate->Opcode(), assertion_expression\n-                              NOT_PRODUCT(COMMA template_assertion_predicate->assertion_predicate_type()));\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"}]}