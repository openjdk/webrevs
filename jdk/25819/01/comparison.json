{"files":[{"patch":"@@ -217,0 +217,7 @@\n+    \/*\n+     * Use SOMAXCONN_HINT when backlog larger than 200. It will adjust the value\n+     * to be within the range (200, 65535).\n+     *\/\n+    if (backlog > 200) {\n+        backlog = SOMAXCONN_HINT(backlog);\n+    }\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/Net.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.nio.channels.AsynchronousServerSocketChannel;\n+import java.nio.channels.ServerSocketChannel;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/*\n+ * @test\n+ * @bug 8330940\n+ * @summary verify that java.net.ServerSocket and the server socket channels in java.nio.channels\n+ *          when configured with a backlog of >=200 on Windows, will allow for those many\n+ *          backlogged Socket connections\n+ * @requires os.family == \"windows\"\n+ * @run junit LargeBacklogTest\n+ *\/\n+class LargeBacklogTest {\n+\n+    @Test\n+    void testServerSocket() throws Exception {\n+        final int backlog = 242;\n+        \/\/ Create a ServerSocket configured with the given backlog.\n+        \/\/ The ServerSocket never accept()s a connection so each connect() attempt\n+        \/\/ will be backlogged.\n+        try (var server = new ServerSocket(0, backlog, InetAddress.getLoopbackAddress())) {\n+            final int serverPort = server.getLocalPort();\n+            testBackloggedConnects(backlog, serverPort);\n+        }\n+    }\n+\n+    @Test\n+    void testServerSocketChannel() throws Exception {\n+        final int backlog = 213;\n+        \/\/ Create a ServerSocketChannel configured with the given backlog.\n+        \/\/ The channel never accept()s a connection so each connect() attempt\n+        \/\/ will be backlogged.\n+        try (var serverChannel = ServerSocketChannel.open()) {\n+            serverChannel.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), backlog);\n+            final int serverPort = ((InetSocketAddress) serverChannel.getLocalAddress()).getPort();\n+            testBackloggedConnects(backlog, serverPort);\n+        }\n+    }\n+\n+    @Test\n+    void testAsynchronousServerSocketChannel() throws Exception {\n+        final int backlog = 209;\n+        \/\/ Create a AsynchronousServerSocketChannel configured with the given backlog.\n+        \/\/ The channel never accept()s a connection so each connect() attempt\n+        \/\/ will be backlogged.\n+        try (var serverChannel = AsynchronousServerSocketChannel.open()) {\n+            serverChannel.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), backlog);\n+            final int serverPort = ((InetSocketAddress) serverChannel.getLocalAddress()).getPort();\n+            testBackloggedConnects(backlog, serverPort);\n+        }\n+    }\n+\n+    private static void testBackloggedConnects(final int backlog, final int serverPort) {\n+        int numSuccessfulConnects = 0;\n+        System.err.println(\"attempting \" + backlog + \" connections to port \" + serverPort);\n+        \/\/ attempt the Socket connections\n+        for (int i = 1; i <= backlog; i++) {\n+            try (final Socket sock = new Socket(InetAddress.getLoopbackAddress(), serverPort)) {\n+                numSuccessfulConnects++;\n+                System.err.println(\"connection \" + i + \" established \" + sock);\n+            } catch (IOException ioe) {\n+                System.err.println(\"connection attempt \" + i + \" failed: \" + ioe);\n+                \/\/ do not attempt any more connections\n+                break;\n+            }\n+        }\n+        System.err.println(numSuccessfulConnects + \" connections successfully established\");\n+        \/\/ ideally we expect the number of successful connections to be equal to the backlog value.\n+        \/\/ however in certain environments, it's possible that some other process attempts a\n+        \/\/ connection to the server's port. so we allow for a small number of connection attempts\n+        \/\/ to fail (due to exceeding the backlog)\n+        final int minimumExpectedSuccessfulConns = backlog - 5;\n+        if (numSuccessfulConnects < minimumExpectedSuccessfulConns) {\n+            fail(\"expected at least \" + minimumExpectedSuccessfulConns\n+                    + \" successful connections for a backlog of \" + backlog + \", but only \"\n+                    + numSuccessfulConnects + \" were successful\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/ServerSocket\/LargeBacklogTest.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}