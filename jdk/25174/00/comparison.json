{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,8 +258,0 @@\n-        \/** cache of subclass security audit results *\/\n-        static final ClassValue<Boolean> subclassAudits =\n-            new ClassValue<>() {\n-                @Override\n-                protected Boolean computeValue(Class<?> type) {\n-                    return auditSubclass(type);\n-                }\n-            };\n@@ -1547,25 +1539,0 @@\n-    \/**\n-     * Performs reflective checks on given subclass to verify that it doesn't\n-     * override security-sensitive non-final methods.  Returns TRUE if subclass\n-     * is \"safe\", FALSE otherwise.\n-     *\/\n-    private static Boolean auditSubclass(Class<?> subcl) {\n-        for (Class<?> cl = subcl;\n-             cl != ObjectInputStream.class;\n-             cl = cl.getSuperclass())\n-        {\n-            try {\n-                cl.getDeclaredMethod(\n-                    \"readUnshared\", (Class[]) null);\n-                return Boolean.FALSE;\n-            } catch (NoSuchMethodException ex) {\n-            }\n-            try {\n-                cl.getDeclaredMethod(\"readFields\", (Class[]) null);\n-                return Boolean.FALSE;\n-            } catch (NoSuchMethodException ex) {\n-            }\n-        }\n-        return Boolean.TRUE;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":1,"deletions":34,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -177,11 +177,0 @@\n-    private static class Caches {\n-        \/** cache of subclass security audit results *\/\n-        static final ClassValue<Boolean> subclassAudits =\n-            new ClassValue<>() {\n-                @Override\n-                protected Boolean computeValue(Class<?> type) {\n-                    return auditSubclass(type);\n-                }\n-            };\n-    }\n-\n@@ -1006,25 +995,0 @@\n-    \/**\n-     * Performs reflective checks on given subclass to verify that it doesn't\n-     * override security-sensitive non-final methods.  Returns TRUE if subclass\n-     * is \"safe\", FALSE otherwise.\n-     *\/\n-    private static Boolean auditSubclass(Class<?> subcl) {\n-        for (Class<?> cl = subcl;\n-             cl != ObjectOutputStream.class;\n-             cl = cl.getSuperclass())\n-        {\n-            try {\n-                cl.getDeclaredMethod(\n-                    \"writeUnshared\", new Class<?>[] { Object.class });\n-                return Boolean.FALSE;\n-            } catch (NoSuchMethodException ex) {\n-            }\n-            try {\n-                cl.getDeclaredMethod(\"putFields\", (Class<?>[]) null);\n-                return Boolean.FALSE;\n-            } catch (NoSuchMethodException ex) {\n-            }\n-        }\n-        return Boolean.TRUE;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectOutputStream.java","additions":1,"deletions":37,"binary":false,"changes":38,"status":"modified"}]}