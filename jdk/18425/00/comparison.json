{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -457,0 +457,10 @@\n+\n+            \/*\n+             * Check if PKCS11 spec version is 2.40 and above.\n+             * If so, we need to send CK_GCM_PARAMS structure with IV bits for AES GCM.\n+             * the call to C_EncryptInitWithIvBitsMech will update GCM structure, with\n+             * additional field ulvIV bits and then invoke C_EncryptInit\n+             *\/\n+            CK_VERSION cryptokiVersion = token.p11.C_GetInfo().cryptokiVersion;\n+            boolean useNormativeMech = cryptokiVersion.major > 2 ||\n+                    (cryptokiVersion.major == 2  && cryptokiVersion.minor >= 40);\n@@ -458,2 +468,7 @@\n-                token.p11.C_EncryptInit(session.id(), mechWithParams,\n-                    p11KeyID);\n+                if(useNormativeMech && type == Transformation.AES_GCM) {\n+                    token.p11.C_EncryptInitWithIvBitsMech(session.id(), mechWithParams,\n+                        p11KeyID);\n+                } else {\n+                    token.p11.C_EncryptInit(session.id(), mechWithParams,\n+                        p11KeyID);\n+                }\n@@ -461,2 +476,7 @@\n-                token.p11.C_DecryptInit(session.id(), mechWithParams,\n-                    p11KeyID);\n+                if(useNormativeMech && type == Transformation.AES_GCM) {\n+                    token.p11.C_DecryptInitWithIvBitsMech(session.id(), mechWithParams,\n+                        p11KeyID);\n+                } else {\n+                    token.p11.C_DecryptInit(session.id(), mechWithParams,\n+                        p11KeyID);\n+                }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11AEADCipher.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -796,0 +796,16 @@\n+    \/**\n+     * C_EncryptInitWithIvBitsMech initializes an encryption operation.\n+     * (Encryption and decryption)\n+     *\n+     * @param hSession the session's handle\n+     *         (PKCS#11 param: CK_SESSION_HANDLE hSession)\n+     * @param pMechanism the encryption mechanism\n+     *         (PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n+     * @param hKey the handle of the encryption key\n+     *         (PKCS#11 param: CK_OBJECT_HANDLE hKey)\n+     * @exception PKCS11Exception If function returns other value than CKR_OK.\n+     * @preconditions\n+     * @postconditions\n+     *\/\n+    public native void C_EncryptInitWithIvBitsMech(long hSession, CK_MECHANISM pMechanism,\n+            long hKey) throws PKCS11Exception;\n@@ -890,0 +906,16 @@\n+    \/**\n+     * C_DecryptInitWithIvBitsMech initializes a decryption operation.\n+     * (Encryption and decryption)\n+     *\n+     * @param hSession the session's handle\n+     *         (PKCS#11 param: CK_SESSION_HANDLE hSession)\n+     * @param pMechanism the decryption mechanism\n+     *         (PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n+     * @param hKey the handle of the decryption key\n+     *         (PKCS#11 param: CK_OBJECT_HANDLE hKey)\n+     * @exception PKCS11Exception If function returns other value than CKR_OK.\n+     * @preconditions\n+     * @postconditions\n+     *\/\n+    public native void C_DecryptInitWithIvBitsMech(long hSession, CK_MECHANISM pMechanism,\n+            long hKey) throws PKCS11Exception;\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/PKCS11.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,0 +112,43 @@\n+\n+\/*\n+ * Class:     sun_security_pkcs11_wrapper_PKCS11\n+ * Method:    C_EncryptInitWithIvBitsMech\n+ * Signature: (JLsun\/security\/pkcs11\/wrapper\/CK_MECHANISM;J)V\n+ * Parametermapping:                    *PKCS11*\n+ * @param   jlong jSessionHandle        CK_SESSION_HANDLE hSession\n+ * @param   jobject jMechanism          CK_MECHANISM_PTR pMechanism\n+ * @param   jlong jKeyHandle            CK_OBJECT_HANDLE hKey\n+ *\/\n+JNIEXPORT void JNICALL\n+Java_sun_security_pkcs11_wrapper_PKCS11_C_1EncryptInitWithIvBitsMech\n+(JNIEnv *env, jobject obj, jlong jSessionHandle,\n+ jobject jMechanism, jlong jKeyHandle)\n+{\n+    CK_SESSION_HANDLE ckSessionHandle;\n+    CK_MECHANISM_PTR ckpMechanism = NULL;\n+    CK_MECHANISM_PTR ckpTemp;\n+    CK_OBJECT_HANDLE ckKeyHandle;\n+    CK_RV rv = 1;\n+\n+    CK_FUNCTION_LIST_PTR ckpFunctions = getFunctionList(env, obj);\n+    if (ckpFunctions == NULL) { return; }\n+\n+    ckSessionHandle = jLongToCKULong(jSessionHandle);\n+    ckKeyHandle = jLongToCKULong(jKeyHandle);\n+    ckpMechanism = jMechanismToCKMechanismPtr(env, jMechanism);\n+\n+    if ((*env)->ExceptionCheck(env)) { return; }\n+\n+    ckpTemp = updateGCMParams(env, ckpMechanism);\n+    if (ckpTemp != NULL) { \/\/ only call if conversion succeeds\n+        ckpMechanism = ckpTemp;\n+        rv = (*ckpFunctions->C_EncryptInit)(ckSessionHandle, ckpMechanism,\n+                ckKeyHandle);\n+    }\n+\n+    TRACE1(\"DEBUG C_EncryptInitWithIvBitsMech: freed pMech = %p\\n\", ckpMechanism);\n+    freeCKMechanismPtr(ckpMechanism);\n+    if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK) { return; }\n+\n+    TRACE0(\"FINISHED\\n\");\n+}\n@@ -352,0 +395,43 @@\n+\n+\/*\n+ * Class:     sun_security_pkcs11_wrapper_PKCS11\n+ * Method:    C_DecryptInitWithIvBitsMech\n+ * Signature: (JLsun\/security\/pkcs11\/wrapper\/CK_MECHANISM;J)V\n+ * Parametermapping:                    *PKCS11*\n+ * @param   jlong jSessionHandle        CK_SESSION_HANDLE hSession\n+ * @param   jobject jMechanism          CK_MECHANISM_PTR pMechanism\n+ * @param   jlong jKeyHandle            CK_OBJECT_HANDLE hKey\n+ *\/\n+JNIEXPORT void JNICALL\n+Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptInitWithIvBitsMech\n+(JNIEnv *env, jobject obj, jlong jSessionHandle,\n+ jobject jMechanism, jlong jKeyHandle)\n+{\n+    CK_SESSION_HANDLE ckSessionHandle;\n+    CK_MECHANISM_PTR ckpMechanism = NULL;\n+    CK_MECHANISM_PTR ckpTemp;\n+    CK_OBJECT_HANDLE ckKeyHandle;\n+    CK_RV rv = 1;\n+\n+    CK_FUNCTION_LIST_PTR ckpFunctions = getFunctionList(env, obj);\n+    if (ckpFunctions == NULL) { return; }\n+\n+    ckSessionHandle = jLongToCKULong(jSessionHandle);\n+    ckKeyHandle = jLongToCKULong(jKeyHandle);\n+    ckpMechanism = jMechanismToCKMechanismPtr(env, jMechanism);\n+\n+    if ((*env)->ExceptionCheck(env)) { return; }\n+\n+    ckpTemp = updateGCMParams(env, ckpMechanism);\n+    if (ckpTemp != NULL) { \/\/ only re-call if conversion succeeds\n+        ckpMechanism = ckpTemp;\n+        rv = (*ckpFunctions->C_DecryptInit)(ckSessionHandle, ckpMechanism,\n+                ckKeyHandle);\n+    }\n+\n+    TRACE1(\"DEBUG C_DecryptInitWithIvBitsMech: freed pMech = %p\\n\", ckpMechanism);\n+    freeCKMechanismPtr(ckpMechanism);\n+    if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK) { return; }\n+\n+    TRACE0(\"FINISHED\\n\");\n+}\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/p11_crypt.c","additions":87,"deletions":1,"binary":false,"changes":88,"status":"modified"}]}