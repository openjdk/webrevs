{"files":[{"patch":"@@ -5045,0 +5045,41 @@\n+  void generate_updateBytesAdler32_accum(const Register acc1, const Register acc2, const Register data, const Register temp) {\n+\n+    __ andi(temp, data, right_8_bits);\n+    __ add(acc1, acc1, temp);\n+\n+    __ srli(temp, data, 8);\n+    __ andi(temp, temp, right_8_bits);\n+    __ add(acc2, acc2, acc1);\n+    __ add(acc1, acc1, temp);\n+\n+    __ srli(temp, data, 16);\n+    __ andi(temp, temp, right_8_bits);\n+    __ add(acc2, acc2, acc1);\n+    __ add(acc1, acc1, temp);\n+\n+    __ srli(temp, data, 24);\n+    __ andi(temp, temp, right_8_bits);\n+    __ add(acc2, acc2, acc1);\n+    __ add(acc1, acc1, temp);\n+\n+    __ srli(temp, data, 32);\n+    __ andi(temp, temp, right_8_bits);\n+    __ add(acc2, acc2, acc1);\n+    __ add(acc1, acc1, temp);\n+\n+    __ srli(temp, data, 40);\n+    __ andi(temp, temp, right_8_bits);\n+    __ add(acc2, acc2, acc1);\n+    __ add(acc1, acc1, temp);\n+\n+    __ srli(temp, data, 48);\n+    __ andi(temp, temp, right_8_bits);\n+    __ add(acc2, acc2, acc1);\n+    __ add(acc1, acc1, temp);\n+    __ add(acc2, acc2, acc1);\n+\n+    __ srli(temp, data, 56);\n+    __ add(acc1, acc1, temp);\n+    __ add(acc2, acc2, acc1);\n+  }\n+\n@@ -5066,1 +5107,1 @@\n-    Label L_simple_by1_loop, L_nmax, L_nmax_loop, L_by16, L_by16_loop, L_by1_loop, L_do_mod, L_combine, L_by1;\n+    Label L_simple_by1_loop, L_nmax, L_nmax_loop, L_nmax_loop_entry, L_by16, L_by16_loop, L_by1_loop, L_do_mod, L_combine, L_by1;\n@@ -5081,0 +5122,1 @@\n+    Register buf_end = c_rarg6;\n@@ -5087,0 +5129,2 @@\n+    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n@@ -5104,1 +5148,1 @@\n-    __ bind(L_simple_by1_loop);\n+  __ bind(L_simple_by1_loop);\n@@ -5120,1 +5164,1 @@\n-    __ bind(L_nmax);\n+  __ bind(L_nmax);\n@@ -5125,5 +5169,3 @@\n-    __ bind(L_nmax_loop);\n-\n-    __ ld(temp0, Address(buff, 0));\n-    __ ld(temp1, Address(buff, sizeof(jlong)));\n-    __ addi(buff, buff, 16);\n+  __ bind(L_nmax_loop_entry);\n+    \/\/ buf_end will be used as endpoint for loop below\n+    __ add(buf_end, buff, count); \/\/ buf_end will be used as endpoint for loop below\n@@ -5131,30 +5173,1 @@\n-    __ andi(temp2, temp0, right_8_bits);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 8);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 16);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 24);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 32);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 40);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 48);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ add(s2, s2, s1);\n-    __ srli(temp2, temp0, 56);\n-    __ add(s1, s1, temp2);\n-    __ add(s2, s2, s1);\n+  __ bind(L_nmax_loop);\n@@ -5162,30 +5175,4 @@\n-    __ andi(temp2, temp1, right_8_bits);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 8);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 16);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 24);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 32);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 40);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 48);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ add(s2, s2, s1);\n-    __ srli(temp2, temp1, 56);\n-    __ add(s1, s1, temp2);\n-    __ add(s2, s2, s1);\n+    __ ld(temp0, Address(buff, 0));\n+    generate_updateBytesAdler32_accum(s1, s2, temp0, temp1);\n+    __ ld(temp0, Address(buff, sizeof(jlong)));\n+    generate_updateBytesAdler32_accum(s1, s2, temp0, temp1);\n@@ -5193,2 +5180,2 @@\n-    __ sub(count, count, 16);\n-    __ bgez(count, L_nmax_loop);\n+    __ addi(buff, buff, 16);\n+    __ ble(buff, buf_end, L_nmax_loop);\n@@ -5204,1 +5191,1 @@\n-    __ bgez(len, L_nmax_loop);\n+    __ bgez(len, L_nmax_loop_entry);\n@@ -5206,1 +5193,1 @@\n-    __ bind(L_by16);\n+  __ bind(L_by16);\n@@ -5210,1 +5197,1 @@\n-    __ bind(L_by16_loop);\n+  __ bind(L_by16_loop);\n@@ -5213,64 +5200,3 @@\n-    __ ld(temp1, Address(buff, sizeof(jlong)));\n-    __ addi(buff, buff, 16);\n-\n-    __ andi(temp2, temp0, right_8_bits);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 8);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 16);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 24);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 32);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 40);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp0, 48);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ add(s2, s2, s1);\n-    __ srli(temp2, temp0, 56);\n-    __ add(s1, s1, temp2);\n-    __ add(s2, s2, s1);\n-\n-    __ andi(temp2, temp1, right_8_bits);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 8);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 16);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 24);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 32);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 40);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ srli(temp2, temp1, 48);\n-    __ andi(temp2, temp2, right_8_bits);\n-    __ add(s2, s2, s1);\n-    __ add(s1, s1, temp2);\n-    __ add(s2, s2, s1);\n-    __ srli(temp2, temp1, 56);\n-    __ add(s1, s1, temp2);\n-    __ add(s2, s2, s1);\n+    generate_updateBytesAdler32_accum(s1, s2, temp0, temp1);\n+    __ ld(temp0, Address(buff, sizeof(jlong)));\n+    generate_updateBytesAdler32_accum(s1, s2, temp0, temp1);\n@@ -5278,0 +5204,1 @@\n+    __ addi(buff, buff, 16);\n@@ -5281,1 +5208,1 @@\n-    __ bind(L_by1);\n+  __ bind(L_by1);\n@@ -5285,1 +5212,1 @@\n-    __ bind(L_by1_loop);\n+  __ bind(L_by1_loop);\n@@ -5293,1 +5220,1 @@\n-    __ bind(L_do_mod);\n+  __ bind(L_do_mod);\n@@ -5302,1 +5229,1 @@\n-    __ bind(L_combine);\n+  __ bind(L_combine);\n@@ -5306,0 +5233,1 @@\n+    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":69,"deletions":141,"binary":false,"changes":210,"status":"modified"}]}