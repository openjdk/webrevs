{"files":[{"patch":"@@ -35,1 +35,1 @@\n-struct ZTestEntryCompare {\n+struct ZRBTestEntryCompare {\n@@ -40,2 +40,2 @@\n-class ZTestEntry : public ArenaObj {\n-  friend class ZIntrusiveRBTree<int, ZTestEntryCompare>;\n+class ZRBTestEntry : public ArenaObj {\n+  friend class ZIntrusiveRBTree<int, ZRBTestEntryCompare>;\n@@ -44,1 +44,1 @@\n-  using ZTree = ZIntrusiveRBTree<int, ZTestEntryCompare>;\n+  using ZTree = ZIntrusiveRBTree<int, ZRBTestEntryCompare>;\n@@ -50,1 +50,1 @@\n-  ZTestEntry(int id)\n+  ZRBTestEntry(int id)\n@@ -58,1 +58,1 @@\n-  static ZIntrusiveRBTreeNode* cast_to_inner(ZTestEntry* element) {\n+  static ZIntrusiveRBTreeNode* cast_to_inner(ZRBTestEntry* element) {\n@@ -61,2 +61,2 @@\n-  static const ZTestEntry* cast_to_outer(const ZIntrusiveRBTreeNode* node) {\n-    return (ZTestEntry*)((uintptr_t)node - offset_of(ZTestEntry, _node));\n+  static const ZRBTestEntry* cast_to_outer(const ZIntrusiveRBTreeNode* node) {\n+    return (ZRBTestEntry*)((uintptr_t)node - offset_of(ZRBTestEntry, _node));\n@@ -67,2 +67,2 @@\n-int ZTestEntryCompare::operator()(const ZIntrusiveRBTreeNode* a, const ZIntrusiveRBTreeNode* b) {\n-  return ZTestEntry::cast_to_outer(a)->id() - ZTestEntry::cast_to_outer(b)->id();\n+int ZRBTestEntryCompare::operator()(const ZIntrusiveRBTreeNode* a, const ZIntrusiveRBTreeNode* b) {\n+  return ZRBTestEntry::cast_to_outer(a)->id() - ZRBTestEntry::cast_to_outer(b)->id();\n@@ -70,2 +70,2 @@\n-int ZTestEntryCompare::operator()(int key, const ZIntrusiveRBTreeNode* entry) {\n-  return key - ZTestEntry::cast_to_outer(entry)->id();\n+int ZRBTestEntryCompare::operator()(int key, const ZIntrusiveRBTreeNode* entry) {\n+  return key - ZRBTestEntry::cast_to_outer(entry)->id();\n@@ -76,2 +76,2 @@\n-  void shuffle_array(ZTestEntry** beg, ZTestEntry** end);\n-  void reverse_array(ZTestEntry** beg, ZTestEntry** end);\n+  void shuffle_array(ZRBTestEntry** beg, ZRBTestEntry** end);\n+  void reverse_array(ZRBTestEntry** beg, ZRBTestEntry** end);\n@@ -99,1 +99,1 @@\n-  constexpr size_t max_allocation_size = sizes[num_sizes - 1] * iterations_multiplier * sizeof(ZTestEntry);\n+  constexpr size_t max_allocation_size = sizes[num_sizes - 1] * iterations_multiplier * sizeof(ZRBTestEntry);\n@@ -102,1 +102,1 @@\n-    ZTestEntry::ZTree tree;\n+    ZRBTestEntry::ZTree tree;\n@@ -116,1 +116,1 @@\n-            tree.replace(ZTestEntry::cast_to_inner(new (&arena) ZTestEntry(id)), cursor);\n+            tree.replace(ZRBTestEntry::cast_to_inner(new (&arena) ZRBTestEntry(id)), cursor);\n@@ -127,1 +127,1 @@\n-        tree.insert(ZTestEntry::cast_to_inner(new (&arena) ZTestEntry(id)), cursor);\n+        tree.insert(ZRBTestEntry::cast_to_inner(new (&arena) ZRBTestEntry(id)), cursor);\n@@ -135,1 +135,1 @@\n-void ZTreeTest::reverse_array(ZTestEntry** beg, ZTestEntry** end) {\n+void ZTreeTest::reverse_array(ZRBTestEntry** beg, ZRBTestEntry** end) {\n@@ -140,2 +140,2 @@\n-  ZTestEntry** first = beg;\n-  ZTestEntry** last = end - 1;\n+  ZRBTestEntry** first = beg;\n+  ZRBTestEntry** last = end - 1;\n@@ -149,1 +149,1 @@\n-void ZTreeTest::shuffle_array(ZTestEntry** beg, ZTestEntry** end) {\n+void ZTreeTest::shuffle_array(ZRBTestEntry** beg, ZRBTestEntry** end) {\n@@ -154,1 +154,1 @@\n-  for (ZTestEntry** first = beg + 1; first != end; first++) {\n+  for (ZRBTestEntry** first = beg + 1; first != end; first++) {\n@@ -165,3 +165,3 @@\n-  ZTestEntry* forward[num_entries]{};\n-  ZTestEntry* reverse[num_entries]{};\n-  ZTestEntry* shuffle[num_entries]{};\n+  ZRBTestEntry* forward[num_entries]{};\n+  ZRBTestEntry* reverse[num_entries]{};\n+  ZRBTestEntry* shuffle[num_entries]{};\n@@ -170,3 +170,3 @@\n-    forward[i] = new (&arena) ZTestEntry(id);\n-    reverse[i] = new (&arena) ZTestEntry(id);\n-    shuffle[i] = new (&arena) ZTestEntry(id);\n+    forward[i] = new (&arena) ZRBTestEntry(id);\n+    reverse[i] = new (&arena) ZRBTestEntry(id);\n+    shuffle[i] = new (&arena) ZRBTestEntry(id);\n@@ -177,1 +177,1 @@\n-  ZTestEntry::ZTree forward_tree;\n+  ZRBTestEntry::ZTree forward_tree;\n@@ -182,1 +182,1 @@\n-    ZIntrusiveRBTreeNode* const new_node = ZTestEntry::cast_to_inner(forward[i]);\n+    ZIntrusiveRBTreeNode* const new_node = ZRBTestEntry::cast_to_inner(forward[i]);\n@@ -188,1 +188,1 @@\n-  ZTestEntry::ZTree reverse_tree;\n+  ZRBTestEntry::ZTree reverse_tree;\n@@ -193,1 +193,1 @@\n-    ZIntrusiveRBTreeNode* const new_node = ZTestEntry::cast_to_inner(reverse[i]);\n+    ZIntrusiveRBTreeNode* const new_node = ZRBTestEntry::cast_to_inner(reverse[i]);\n@@ -199,1 +199,1 @@\n-  ZTestEntry::ZTree shuffle_tree;\n+  ZRBTestEntry::ZTree shuffle_tree;\n@@ -204,1 +204,1 @@\n-    ZIntrusiveRBTreeNode* const new_node = ZTestEntry::cast_to_inner(reverse[i]);\n+    ZIntrusiveRBTreeNode* const new_node = ZRBTestEntry::cast_to_inner(reverse[i]);\n@@ -209,1 +209,1 @@\n-  ZTestEntryCompare compare_fn;\n+  ZRBTestEntryCompare compare_fn;\n@@ -243,1 +243,1 @@\n-  ZTestEntry::ZTree tree;\n+  ZRBTestEntry::ZTree tree;\n@@ -249,1 +249,1 @@\n-    ZIntrusiveRBTreeNode* const new_node = ZTestEntry::cast_to_inner(new (&arena) ZTestEntry(id));\n+    ZIntrusiveRBTreeNode* const new_node = ZRBTestEntry::cast_to_inner(new (&arena) ZRBTestEntry(id));\n@@ -264,2 +264,2 @@\n-        ZTestEntry* new_entry = new (&arena) ZTestEntry(ZTestEntry::cast_to_outer(&node)->id() - 1);\n-        it.replace(ZTestEntry::cast_to_inner(new_entry));\n+        ZRBTestEntry* new_entry = new (&arena) ZRBTestEntry(ZRBTestEntry::cast_to_outer(&node)->id() - 1);\n+        it.replace(ZRBTestEntry::cast_to_inner(new_entry));\n@@ -270,2 +270,2 @@\n-        ZTestEntry* new_entry = new (&arena) ZTestEntry(ZTestEntry::cast_to_outer(&node)->id() + 1);\n-        it.replace(ZTestEntry::cast_to_inner(new_entry));\n+        ZRBTestEntry* new_entry = new (&arena) ZRBTestEntry(ZRBTestEntry::cast_to_outer(&node)->id() + 1);\n+        it.replace(ZRBTestEntry::cast_to_inner(new_entry));\n@@ -282,1 +282,1 @@\n-    int id = ZTestEntry::cast_to_outer(&node)->id();\n+    int id = ZRBTestEntry::cast_to_outer(&node)->id();\n@@ -290,1 +290,1 @@\n-    int id = ZTestEntry::cast_to_outer(&*it)->id();\n+    int id = ZRBTestEntry::cast_to_outer(&*it)->id();\n@@ -298,1 +298,1 @@\n-    int id = ZTestEntry::cast_to_outer(&*it)->id();\n+    int id = ZRBTestEntry::cast_to_outer(&*it)->id();\n@@ -306,1 +306,1 @@\n-    int id = ZTestEntry::cast_to_outer(&*it)->id();\n+    int id = ZRBTestEntry::cast_to_outer(&*it)->id();\n@@ -314,1 +314,1 @@\n-    int id = ZTestEntry::cast_to_outer(&*it)->id();\n+    int id = ZRBTestEntry::cast_to_outer(&*it)->id();\n@@ -324,1 +324,1 @@\n-  ZTestEntry::ZTree tree;\n+  ZRBTestEntry::ZTree tree;\n@@ -326,1 +326,1 @@\n-  tree.insert(ZTestEntry::cast_to_inner(new (&arena) ZTestEntry(++id)), tree.root_cursor());\n+  tree.insert(ZRBTestEntry::cast_to_inner(new (&arena) ZRBTestEntry(++id)), tree.root_cursor());\n@@ -328,1 +328,1 @@\n-    if (ZTestEntry::cast_to_outer(&node)->id() == num_entries) {\n+    if (ZRBTestEntry::cast_to_outer(&node)->id() == num_entries) {\n@@ -332,1 +332,1 @@\n-    ZIntrusiveRBTreeNode* const new_node = ZTestEntry::cast_to_inner(new (&arena) ZTestEntry(++id));\n+    ZIntrusiveRBTreeNode* const new_node = ZRBTestEntry::cast_to_inner(new (&arena) ZRBTestEntry(++id));\n@@ -336,1 +336,1 @@\n-  ASSERT_EQ(ZTestEntry::cast_to_outer(tree.last())->id(), num_entries);\n+  ASSERT_EQ(ZRBTestEntry::cast_to_outer(tree.last())->id(), num_entries);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zIntrusiveRBTree.cpp","additions":52,"deletions":52,"binary":false,"changes":104,"status":"modified"}]}