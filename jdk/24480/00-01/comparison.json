{"files":[{"patch":"@@ -418,7 +418,4 @@\n-  assert(Immediate::is_uimm(spos3, 8), \"range start out of range\");   \/\/ Could just trim to 6bits wide w\/o assertion.\n-  assert(Immediate::is_uimm(epos4, 8), \"range end   out of range\");   \/\/ Could just trim to 6bits wide w\/o assertion.\n-  assert(Immediate::is_uimm(nrot5, 8), \"rotate amount out of range\"); \/\/ Could just leave it as is. leftmost 2 bits are ignored by instruction.\n-  assert((spos3 & 192) == 0, \"bits 0, 1 of I3 field are reserved\");\n-  assert((epos4 & 64) == 0, \"bit 1 of I4 field is reserved\");\n-  assert((nrot5 & 192) == 0, \"bits 0, 1 of I5 field are ignored by instruction, make sure that will not cause trouble\");\n-  emit_48( RISBG_ZOPC | regt(r1, 8, len) | regt(r2, 12, len) | uimm8(spos3, 16, len) | uimm8(epos4, 24, len) | uimm8(nrot5, 32, len) | u_field(zero_rest ? 1 : 0, len-24-1, len-24-1));\n+  assert(Immediate::is_uimm(spos3, 6), \"range start out of range\");   \/\/ Could just trim to 6bits wide w\/o assertion.\n+  assert(Immediate::is_uimm(epos4, 6), \"range end   out of range\");   \/\/ Could just trim to 6bits wide w\/o assertion.\n+  assert(Immediate::is_uimm(nrot5, 6), \"rotate amount out of range\"); \/\/ Could just leave it as is. leftmost 2 bits are ignored by instruction.\n+  emit_48( RISBG_ZOPC | regt(r1, 8, len) | regt(r2, 12, len) | uimm6(spos3, 16+2, len) | uimm6(epos4, 24+2, len) | uimm6(nrot5, 32+2, len) | u_field(zero_rest ? 1 : 0, len-24-1, len-24-1));\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.inline.hpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1482,1 +1482,1 @@\n-      __ rotate_then_insert(byteVal, byteVal, 64 - 2 * 8 , 63 - 8,  8, 0);\n+      __ rotate_then_insert(byteVal, byteVal, 64 - 2 * 8 , 63 - 8,  8, false);\n@@ -1486,1 +1486,1 @@\n-      __ rotate_then_insert(byteVal, byteVal, 64 - 2 * 16, 63 - 16, 16, 0);\n+      __ rotate_then_insert(byteVal, byteVal, 64 - 2 * 16, 63 - 16, 16, false);\n@@ -1490,1 +1490,1 @@\n-      __ rotate_then_insert(byteVal, byteVal, 64 - 2 * 32, 63 - 32, 32, 0);\n+      __ rotate_then_insert(byteVal, byteVal, 64 - 2 * 32, 63 - 32, 32, false);\n@@ -1493,1 +1493,1 @@\n-    __ z_risbg(tmp, size, 32, 128\/* risbgz *\/ + 63, 64 - exact_log2(2 * elem_size), 0); \/\/ just do the right shift and set cc\n+    __ z_risbg(tmp, size, 32, 63, 64 - exact_log2(2 * elem_size), \/* zero_rest *\/ true); \/\/ just do the right shift and set cc\n@@ -1496,1 +1496,1 @@\n-    __ align(16); \/\/ loop alignment\n+    __ align(32); \/\/ loop alignment\n@@ -1500,1 +1500,1 @@\n-    __ z_agfi(dest, 2 * elem_size);\n+    __ z_aghi(dest, 2 * elem_size);\n@@ -1529,1 +1529,1 @@\n-      NearLabel L_fill8Bytes, L_fill4Bytes, L_fillBytes, L_exit;\n+      NearLabel L_fill8Bytes, L_fill4Bytes, L_fillBytes;\n@@ -1541,2 +1541,1 @@\n-      __ z_bre(L_fill8Bytes); \/\/ branch if 0\n-\n+      __ z_braz(L_fill8Bytes); \/\/ branch if 0\n@@ -1545,1 +1544,1 @@\n-      __ z_bre(L_fill4Bytes); \/\/ branch if 0\n+      __ z_braz(L_fill4Bytes); \/\/ branch if 0\n@@ -1548,1 +1547,1 @@\n-      __ z_brne(L_fillBytes); \/\/ branch if not 0\n+      __ z_brnaz(L_fillBytes); \/\/ branch if not 0\n@@ -1557,1 +1556,0 @@\n-      __ align(16);\n@@ -1563,1 +1561,0 @@\n-      __ align(16);\n@@ -1569,1 +1566,0 @@\n-      __ align(16);\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"}]}