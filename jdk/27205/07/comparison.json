{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2294,2 +2294,5 @@\n-                            updateAllUIs();\n-                            setUpdatePending(false);\n+                            try {\n+                                updateAllUIs();\n+                            } finally {\n+                                setUpdatePending(false);\n+                            }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalLookAndFeel.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -912,2 +912,5 @@\n-                        updateAllUIs();\n-                        setUpdatePending(false);\n+                        try {\n+                            updateAllUIs();\n+                        } finally {\n+                            setUpdatePending(false);\n+                        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthLookAndFeel.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -217,2 +217,5 @@\n-                    updateAllUIs();\n-                    setUpdatePending(false);\n+                    try {\n+                        updateAllUIs();\n+                    } finally {\n+                        setUpdatePending(false);\n+                    }\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/plaf\/DesktopProperty.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8367376\n+ * @summary DesktopProperty never reset pending status to process new updates\n+ * @modules java.desktop\/sun.swing.plaf\n+ * @run main DesktopPropertyResetPendingFlagTest\n+ * @key headful\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.plaf.basic.BasicButtonUI;\n+\n+import sun.swing.plaf.DesktopProperty;\n+\n+import java.awt.AWTEvent;\n+import java.awt.EventQueue;\n+import java.awt.Toolkit;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class DesktopPropertyResetPendingFlagTest extends JFrame {\n+\n+    static class ExpectedException extends RuntimeException {}\n+\n+    \/**\n+     * The original ticket required changing the system accessibility settings.\n+     * But we can instead automate this test if we just create & update our own\n+     * DesktopProperty.\n+     *\/\n+    static class TestDesktopProperty extends DesktopProperty {\n+\n+        public TestDesktopProperty(String key, Object fallback) {\n+            super(key, fallback);\n+        }\n+\n+        @Override\n+        public void updateUI() {\n+            super.updateUI();\n+        }\n+    }\n+\n+    private static void assertEquals(int expectedValue, int actualValue) {\n+        String msg = \"expected \" + expectedValue +\n+                \" observed \" + actualValue;\n+        if (expectedValue != actualValue) {\n+            throw new RuntimeException(msg);\n+        }\n+        System.out.println(msg);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ we only override this to intercept ExpectedExceptions\n+        EventQueue newEventQueue = new EventQueue() {\n+            @Override\n+            protected void dispatchEvent(AWTEvent event) {\n+                try {\n+                    super.dispatchEvent(event);\n+                } catch (ExpectedException e) {\n+                    \/\/ This is part of the test. But if we don't catch\n+                    \/\/ this here the test harness says our test failed.\n+                    observedExpectedExceptionCounter++;\n+                }\n+            }\n+        };\n+        Toolkit.getDefaultToolkit().getSystemEventQueue().push(newEventQueue);\n+\n+        for (UIManager.LookAndFeelInfo info :\n+                UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Setting L&F: \" + info.getClassName());\n+            UIManager.setLookAndFeel(info.getClassName());\n+            runTest();\n+        }\n+    }\n+\n+    private static void runTest() throws Exception {\n+        AtomicReference<JFrame> frameRef = new AtomicReference<>();\n+        SwingUtilities.invokeLater(() -> {\n+            DesktopPropertyResetPendingFlagTest t =\n+                    new DesktopPropertyResetPendingFlagTest();\n+            t.pack();\n+            t.setVisible(true);\n+            frameRef.set(t);\n+        });\n+\n+        try {\n+            panelUpdateUICounter = 0;\n+            observedExpectedExceptionCounter = 0;\n+\n+            TestDesktopProperty property =\n+                    new TestDesktopProperty(\"test\", new Object());\n+\n+            SwingUtilities.invokeLater(property::updateUI);\n+            SwingUtilities.invokeAndWait(() -> {\n+            });\n+\n+            SwingUtilities.invokeLater(property::updateUI);\n+            SwingUtilities.invokeAndWait(() -> {\n+            });\n+\n+            CountDownLatch keepAliveLatch = new CountDownLatch(1);\n+\n+            SwingUtilities.invokeLater(() -> {\n+                \/\/ We expect 3 updateUI invocations: during construction, the first\n+                \/\/ property.updateUI, & the second property.updateUI\n+                assertEquals(3, panelUpdateUICounter);\n+\n+                \/\/ We expect 2 attempts on buttonUI.uninstallUI\n+                assertEquals(2, observedExpectedExceptionCounter);\n+\n+                \/\/ The test is finished\n+                keepAliveLatch.countDown();\n+            });\n+\n+            keepAliveLatch.await();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> frameRef.get().dispose());\n+        }\n+    }\n+\n+    static int panelUpdateUICounter;\n+    static int observedExpectedExceptionCounter;\n+\n+    DesktopPropertyResetPendingFlagTest() {\n+        JButton button = new JButton(\"button\");\n+        button.setUI(new BasicButtonUI() {\n+            @Override\n+            public void uninstallUI(JComponent c) {\n+                throw new ExpectedException();\n+            }\n+        });\n+        JPanel p = new JPanel() {\n+            @Override\n+            public void updateUI() {\n+                panelUpdateUICounter++;\n+            }\n+        };\n+        p.add(button);\n+        getContentPane().add(p);\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/DesktopPropertyResetPendingFlagTest.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"}]}