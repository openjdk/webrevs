{"files":[{"patch":"@@ -1230,2 +1230,0 @@\n-  const u1* runtime_invisible_annotations = nullptr;\n-  int runtime_invisible_annotations_length = 0;\n@@ -1234,2 +1232,0 @@\n-  const u1* runtime_invisible_type_annotations = nullptr;\n-  int runtime_invisible_type_annotations_length = 0;\n@@ -1318,5 +1314,0 @@\n-        if (PreserveAllAnnotations) {\n-          runtime_invisible_annotations_length = attribute_length;\n-          runtime_invisible_annotations = cfs->current();\n-          assert(runtime_invisible_annotations != nullptr, \"null invisible annotations\");\n-        }\n@@ -1342,5 +1333,0 @@\n-        if (PreserveAllAnnotations) {\n-          runtime_invisible_type_annotations_length = attribute_length;\n-          runtime_invisible_type_annotations = cfs->current();\n-          assert(runtime_invisible_type_annotations != nullptr, \"null invisible type annotations\");\n-        }\n@@ -1359,1 +1345,1 @@\n-  AnnotationArray* a = assemble_annotations(runtime_visible_annotations,\n+  AnnotationArray* a = allocate_annotations(runtime_visible_annotations,\n@@ -1361,2 +1347,0 @@\n-                                            runtime_invisible_annotations,\n-                                            runtime_invisible_annotations_length,\n@@ -1365,1 +1349,1 @@\n-  a = assemble_annotations(runtime_visible_type_annotations,\n+  a = allocate_annotations(runtime_visible_type_annotations,\n@@ -1367,2 +1351,0 @@\n-                           runtime_invisible_type_annotations,\n-                           runtime_invisible_type_annotations_length,\n@@ -2167,2 +2149,0 @@\n-                                       const u1* runtime_invisible_annotations,\n-                                       int runtime_invisible_annotations_length,\n@@ -2171,2 +2151,0 @@\n-                                       const u1* runtime_invisible_parameter_annotations,\n-                                       int runtime_invisible_parameter_annotations_length,\n@@ -2175,2 +2153,0 @@\n-                                       const u1* runtime_invisible_type_annotations,\n-                                       int runtime_invisible_type_annotations_length,\n@@ -2183,3 +2159,2 @@\n-  if (runtime_visible_annotations_length +\n-      runtime_invisible_annotations_length > 0) {\n-     a = assemble_annotations(runtime_visible_annotations,\n+  if (runtime_visible_annotations_length > 0) {\n+     a = allocate_annotations(runtime_visible_annotations,\n@@ -2187,2 +2162,0 @@\n-                              runtime_invisible_annotations,\n-                              runtime_invisible_annotations_length,\n@@ -2193,3 +2166,2 @@\n-  if (runtime_visible_parameter_annotations_length +\n-      runtime_invisible_parameter_annotations_length > 0) {\n-    a = assemble_annotations(runtime_visible_parameter_annotations,\n+  if (runtime_visible_parameter_annotations_length > 0) {\n+    a = allocate_annotations(runtime_visible_parameter_annotations,\n@@ -2197,2 +2169,0 @@\n-                             runtime_invisible_parameter_annotations,\n-                             runtime_invisible_parameter_annotations_length,\n@@ -2204,1 +2174,1 @@\n-    a = assemble_annotations(annotation_default,\n+    a = allocate_annotations(annotation_default,\n@@ -2206,2 +2176,0 @@\n-                             nullptr,\n-                             0,\n@@ -2212,3 +2180,2 @@\n-  if (runtime_visible_type_annotations_length +\n-      runtime_invisible_type_annotations_length > 0) {\n-    a = assemble_annotations(runtime_visible_type_annotations,\n+  if (runtime_visible_type_annotations_length > 0) {\n+    a = allocate_annotations(runtime_visible_type_annotations,\n@@ -2216,2 +2183,0 @@\n-                             runtime_invisible_type_annotations,\n-                             runtime_invisible_type_annotations_length,\n@@ -2330,2 +2295,0 @@\n-  const u1* runtime_invisible_annotations = nullptr;\n-  int runtime_invisible_annotations_length = 0;\n@@ -2334,2 +2297,0 @@\n-  const u1* runtime_invisible_parameter_annotations = nullptr;\n-  int runtime_invisible_parameter_annotations_length = 0;\n@@ -2338,2 +2299,0 @@\n-  const u1* runtime_invisible_type_annotations = nullptr;\n-  int runtime_invisible_type_annotations_length = 0;\n@@ -2610,5 +2569,0 @@\n-        if (PreserveAllAnnotations) {\n-          runtime_invisible_annotations_length = method_attribute_length;\n-          runtime_invisible_annotations = cfs->current();\n-          assert(runtime_invisible_annotations != nullptr, \"null invisible annotations\");\n-        }\n@@ -2635,6 +2589,0 @@\n-        if (PreserveAllAnnotations) {\n-          runtime_invisible_parameter_annotations_length = method_attribute_length;\n-          runtime_invisible_parameter_annotations = cfs->current();\n-          assert(runtime_invisible_parameter_annotations != nullptr,\n-            \"null invisible parameter annotations\");\n-        }\n@@ -2671,7 +2619,0 @@\n-        } else {\n-          runtime_invisible_type_annotations_exists = true;\n-        }\n-        if (PreserveAllAnnotations) {\n-          runtime_invisible_type_annotations_length = method_attribute_length;\n-          runtime_invisible_type_annotations = cfs->current();\n-          assert(runtime_invisible_type_annotations != nullptr, \"null invisible type annotations\");\n@@ -2679,0 +2620,1 @@\n+        runtime_invisible_type_annotations_exists = true;\n@@ -2712,6 +2654,3 @@\n-      runtime_visible_annotations_length +\n-           runtime_invisible_annotations_length,\n-      runtime_visible_parameter_annotations_length +\n-           runtime_invisible_parameter_annotations_length,\n-      runtime_visible_type_annotations_length +\n-           runtime_invisible_type_annotations_length,\n+      runtime_visible_annotations_length,\n+      runtime_visible_parameter_annotations_length,\n+      runtime_visible_type_annotations_length,\n@@ -2809,2 +2748,0 @@\n-                          runtime_invisible_annotations,\n-                          runtime_invisible_annotations_length,\n@@ -2813,2 +2750,0 @@\n-                          runtime_invisible_parameter_annotations,\n-                          runtime_invisible_parameter_annotations_length,\n@@ -2817,2 +2752,0 @@\n-                          runtime_invisible_type_annotations,\n-                          runtime_invisible_type_annotations_length,\n@@ -3298,2 +3231,0 @@\n-    const u1* runtime_invisible_annotations = nullptr;\n-    int runtime_invisible_annotations_length = 0;\n@@ -3303,2 +3234,0 @@\n-    const u1* runtime_invisible_type_annotations = nullptr;\n-    int runtime_invisible_type_annotations_length = 0;\n@@ -3355,5 +3284,0 @@\n-        if (PreserveAllAnnotations) {\n-          runtime_invisible_annotations_length = attribute_length;\n-          runtime_invisible_annotations = cfs->current();\n-          assert(runtime_invisible_annotations != nullptr, \"null record component invisible annotation\");\n-        }\n@@ -3382,5 +3306,0 @@\n-        if (PreserveAllAnnotations) {\n-          runtime_invisible_type_annotations_length = attribute_length;\n-          runtime_invisible_type_annotations = cfs->current();\n-          assert(runtime_invisible_type_annotations != nullptr, \"null record component invisible type annotation\");\n-        }\n@@ -3396,1 +3315,1 @@\n-    AnnotationArray* annotations = assemble_annotations(runtime_visible_annotations,\n+    AnnotationArray* annotations = allocate_annotations(runtime_visible_annotations,\n@@ -3398,2 +3317,0 @@\n-                                                        runtime_invisible_annotations,\n-                                                        runtime_invisible_annotations_length,\n@@ -3401,1 +3318,1 @@\n-    AnnotationArray* type_annotations = assemble_annotations(runtime_visible_type_annotations,\n+    AnnotationArray* type_annotations = allocate_annotations(runtime_visible_type_annotations,\n@@ -3403,2 +3320,0 @@\n-                                                             runtime_invisible_type_annotations,\n-                                                             runtime_invisible_type_annotations_length,\n@@ -3541,2 +3456,0 @@\n-  const u1* runtime_invisible_annotations = nullptr;\n-  int runtime_invisible_annotations_length = 0;\n@@ -3545,2 +3458,0 @@\n-  const u1* runtime_invisible_type_annotations = nullptr;\n-  int runtime_invisible_type_annotations_length = 0;\n@@ -3659,5 +3570,0 @@\n-        if (PreserveAllAnnotations) {\n-          runtime_invisible_annotations_length = attribute_length;\n-          runtime_invisible_annotations = cfs->current();\n-          assert(runtime_invisible_annotations != nullptr, \"null invisible annotations\");\n-        }\n@@ -3715,7 +3621,0 @@\n-        } else {\n-          runtime_invisible_type_annotations_exists = true;\n-        }\n-        if (PreserveAllAnnotations) {\n-          runtime_invisible_type_annotations_length = attribute_length;\n-          runtime_invisible_type_annotations = cfs->current();\n-          assert(runtime_invisible_type_annotations != nullptr, \"null invisible type annotations\");\n@@ -3723,0 +3622,1 @@\n+        runtime_invisible_type_annotations_exists = true;\n@@ -3802,1 +3702,1 @@\n-  _class_annotations = assemble_annotations(runtime_visible_annotations,\n+  _class_annotations = allocate_annotations(runtime_visible_annotations,\n@@ -3804,2 +3704,0 @@\n-                                            runtime_invisible_annotations,\n-                                            runtime_invisible_annotations_length,\n@@ -3807,1 +3705,1 @@\n-  _class_type_annotations = assemble_annotations(runtime_visible_type_annotations,\n+  _class_type_annotations = allocate_annotations(runtime_visible_type_annotations,\n@@ -3809,2 +3707,0 @@\n-                                                 runtime_invisible_type_annotations,\n-                                                 runtime_invisible_type_annotations_length,\n@@ -3946,4 +3842,2 @@\n-AnnotationArray* ClassFileParser::assemble_annotations(const u1* const runtime_visible_annotations,\n-                                                       int runtime_visible_annotations_length,\n-                                                       const u1* const runtime_invisible_annotations,\n-                                                       int runtime_invisible_annotations_length,\n+AnnotationArray* ClassFileParser::allocate_annotations(const u1* const anno,\n+                                                       int anno_length,\n@@ -3952,2 +3846,1 @@\n-  if (runtime_visible_annotations != nullptr ||\n-      runtime_invisible_annotations != nullptr) {\n+  if (anno != nullptr) {\n@@ -3955,13 +3848,4 @@\n-                                          runtime_visible_annotations_length +\n-                                          runtime_invisible_annotations_length,\n-                                          CHECK_(annotations));\n-    if (runtime_visible_annotations != nullptr) {\n-      for (int i = 0; i < runtime_visible_annotations_length; i++) {\n-        annotations->at_put(i, runtime_visible_annotations[i]);\n-      }\n-    }\n-    if (runtime_invisible_annotations != nullptr) {\n-      for (int i = 0; i < runtime_invisible_annotations_length; i++) {\n-        int append = runtime_visible_annotations_length+i;\n-        annotations->at_put(append, runtime_invisible_annotations[i]);\n-      }\n+                                                 anno_length,\n+                                                 CHECK_(annotations));\n+    for (int i = 0; i < anno_length; i++) {\n+      annotations->at_put(i, anno[i]);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":25,"deletions":141,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -350,4 +350,2 @@\n-  AnnotationArray* assemble_annotations(const u1* const runtime_visible_annotations,\n-                                        int runtime_visible_annotations_length,\n-                                        const u1* const runtime_invisible_annotations,\n-                                        int runtime_invisible_annotations_length,\n+  AnnotationArray* allocate_annotations(const u1* const anno,\n+                                        int anno_length,\n@@ -517,2 +515,0 @@\n-                               const u1* runtime_invisible_annotations,\n-                               int runtime_invisible_annotations_length,\n@@ -521,2 +517,0 @@\n-                               const u1* runtime_invisible_parameter_annotations,\n-                               int runtime_invisible_parameter_annotations_length,\n@@ -525,2 +519,0 @@\n-                               const u1* runtime_invisible_type_annotations,\n-                               int runtime_invisible_type_annotations_length,\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-      write_annotations_attribute(\"RuntimeVisibleAnnotations\", \"RuntimeInvisibleAnnotations\", anno);\n+      write_annotations_attribute(\"RuntimeVisibleAnnotations\", anno);\n@@ -125,1 +125,1 @@\n-      write_annotations_attribute(\"RuntimeVisibleTypeAnnotations\", \"RuntimeInvisibleTypeAnnotations\", type_anno);\n+      write_annotations_attribute(\"RuntimeVisibleTypeAnnotations\", type_anno);\n@@ -383,14 +383,0 @@\n-void JvmtiClassFileReconstituter::write_annotations_attribute(const char* attr_name,\n-                                                              const char* fallback_attr_name,\n-                                                              AnnotationArray* annos) {\n-  TempNewSymbol sym = SymbolTable::probe(attr_name, (int)strlen(attr_name));\n-  if (sym != nullptr) {\n-    if (symbol_to_cpool_index(sym) != 0) {\n-      write_annotations_attribute(attr_name, annos);\n-      return;\n-    }\n-  }\n-  \/\/ use fallback name\n-  write_annotations_attribute(fallback_attr_name, annos);\n-}\n-\n@@ -536,1 +522,1 @@\n-      write_annotations_attribute(\"RuntimeVisibleAnnotations\", \"RuntimeInvisibleAnnotations\", component->annotations());\n+      write_annotations_attribute(\"RuntimeVisibleAnnotations\", component->annotations());\n@@ -539,1 +525,1 @@\n-      write_annotations_attribute(\"RuntimeVisibleTypeAnnotations\", \"RuntimeInvisibleTypeAnnotations\", component->type_annotations());\n+      write_annotations_attribute(\"RuntimeVisibleTypeAnnotations\", component->type_annotations());\n@@ -778,1 +764,1 @@\n-    write_annotations_attribute(\"RuntimeVisibleAnnotations\", \"RuntimeInvisibleAnnotations\", anno);\n+    write_annotations_attribute(\"RuntimeVisibleAnnotations\", anno);\n@@ -781,1 +767,1 @@\n-    write_annotations_attribute(\"RuntimeVisibleParameterAnnotations\", \"RuntimeInvisibleParameterAnnotations\", param_anno);\n+    write_annotations_attribute(\"RuntimeVisibleParameterAnnotations\", param_anno);\n@@ -784,1 +770,1 @@\n-    write_annotations_attribute(\"RuntimeVisibleTypeAnnotations\", \"RuntimeInvisibleTypeAnnotations\", type_anno);\n+    write_annotations_attribute(\"RuntimeVisibleTypeAnnotations\", type_anno);\n@@ -844,1 +830,1 @@\n-    write_annotations_attribute(\"RuntimeVisibleAnnotations\", \"RuntimeInvisibleAnnotations\", anno);\n+    write_annotations_attribute(\"RuntimeVisibleAnnotations\", anno);\n@@ -847,1 +833,1 @@\n-    write_annotations_attribute(\"RuntimeVisibleTypeAnnotations\", \"RuntimeInvisibleTypeAnnotations\", type_anno);\n+    write_annotations_attribute(\"RuntimeVisibleTypeAnnotations\", type_anno);\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":10,"deletions":24,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -120,7 +120,0 @@\n-  \/\/ With PreserveAllAnnotations option \"runtime invisible\" annotations\n-  \/\/ (RuntimeInvisibleAnnotations\/RuntimeInvisibleTypeAnnotations\/RuntimeInvisibleParameterAnnotations)\n-  \/\/ are considered \"runtime visible\" and ClassFileReconstituter writes them as\n-  \/\/ RuntimeVisibleAnnotations\/RuntimeVisibleTypeAnnotations\/RuntimeVisibleParameterAnnotations.\n-  \/\/ This helper method is for the corner case when \"runtime visible\" attribute name is not presents\n-  \/\/ in the class constant pool and the annotations are written with fallback \"runtime invisible\" name.\n-  void write_annotations_attribute(const char* attr_name, const char* fallback_attr_name, AnnotationArray* annos);\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -506,1 +506,0 @@\n-  { \"PreserveAllAnnotations\",       JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n@@ -516,0 +515,1 @@\n+  { \"PreserveAllAnnotations\",       JDK_Version::jdk(23), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -798,4 +798,0 @@\n-  product(bool, PreserveAllAnnotations, false,                              \\\n-          \"(Deprecated) Preserve RuntimeInvisibleAnnotations as well \"      \\\n-          \"as RuntimeVisibleAnnotations\")                                   \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,187 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8315575 8328137\n- * @summary test that records with invisible annotation can be retransformed\n- *\n- * @library \/test\/lib\n- * @run shell MakeJAR.sh retransformAgent\n- * @run main\/othervm -javaagent:retransformAgent.jar -Xlog:redefine+class=trace RetransformRecordAnnotation\n- * @run main\/othervm -javaagent:retransformAgent.jar -XX:+PreserveAllAnnotations -Xlog:redefine+class=trace RetransformRecordAnnotation\n- *\/\n-\n-import java.io.File;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import java.lang.instrument.ClassFileTransformer;\n-import java.nio.file.Files;\n-import java.security.ProtectionDomain;\n-\n-public class RetransformRecordAnnotation extends AInstrumentationTestCase {\n-\n-    @Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE})\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @interface RuntimeTypeAnno {}\n-\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @interface RuntimeParamAnno {\n-        String s() default \"foo\";\n-    }\n-\n-    @Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE})\n-    @Retention(RetentionPolicy.CLASS)\n-    @interface ClassTypeAnno {}\n-\n-    @Retention(RetentionPolicy.CLASS)\n-    @interface ClassParamAnno {\n-        String s() default \"bar\";\n-    }\n-\n-    @RuntimeTypeAnno\n-    @RuntimeParamAnno(s = \"1\")\n-    public record VisibleAnnos(@RuntimeTypeAnno @RuntimeParamAnno(s = \"2\") Object o, Object other) {\n-    }\n-\n-    @ClassTypeAnno\n-    @ClassParamAnno(s = \"3\")\n-    public record InvisibleAnnos(@ClassTypeAnno @ClassParamAnno(s = \"4\") Object o, Object other) {\n-    }\n-\n-    @RuntimeTypeAnno\n-    @RuntimeParamAnno(s = \"5\")\n-    @ClassTypeAnno\n-    @ClassParamAnno(s = \"6\")\n-    public record MixedAnnos(@RuntimeTypeAnno @RuntimeParamAnno(s = \"7\")\n-                             @ClassTypeAnno @ClassParamAnno(s = \"8\") Object o, Object other) {\n-    }\n-\n-    public static void main (String[] args) throws Throwable {\n-        ATestCaseScaffold test = new RetransformRecordAnnotation();\n-        test.beVerbose();\n-        test.runTest();\n-    }\n-\n-    private Transformer transformer;\n-\n-    public RetransformRecordAnnotation() throws Throwable {\n-        super(\"RetransformRecordAnnotation\");\n-    }\n-\n-    private void log(Object o) {\n-        System.out.println(String.valueOf(o));\n-    }\n-\n-    \/\/ Retransforms target class using provided class bytes;\n-    private void retransform(Class targetClass, byte[] classBytes) throws Throwable {\n-        transformer.prepare(targetClass, classBytes);\n-        fInst.retransformClasses(targetClass);\n-        assertTrue(targetClass.getName() + \" was not seen by transform()\",\n-                   transformer.getSeenClassBytes() != null);\n-    }\n-\n-    protected final void doRunTest() throws Throwable {\n-        transformer = new Transformer();\n-        fInst.addTransformer(transformer, true);\n-\n-        {\n-            log(\"Sanity: retransform to original class bytes\");\n-            retransform(InvisibleAnnos.class, loadClassBytes(InvisibleAnnos.class));\n-            log(\"\");\n-        }\n-\n-        \/\/ The following testcases use null as new class bytes (i.e. no transform is performed).\n-        \/\/ However, it is enough for testing purposes as the JvmtiClassFileReconstituter is still involved\n-        \/\/ in preparation of the initial class bytes.\n-        {\n-            log(\"Test: retransform VisibleAnnos to null\");\n-            retransform(VisibleAnnos.class, null);\n-            log(\"\");\n-        }\n-\n-        {\n-            log(\"Test: retransform InvisibleAnnos to null\");\n-            retransform(InvisibleAnnos.class, null);\n-            log(\"\");\n-        }\n-\n-        {\n-            log(\"Test: retransform MixedAnnos to null\");\n-            retransform(MixedAnnos.class, null);\n-            log(\"\");\n-        }\n-    }\n-\n-    private byte[] loadClassBytes(Class cls) throws Exception {\n-        String classFileName = cls.getName() + \".class\";\n-        File classFile = new File(System.getProperty(\"test.classes\", \".\"), classFileName);\n-        log(\"Reading test class from \" + classFile);\n-        byte[] classBytes = Files.readAllBytes(classFile.toPath());\n-        log(\"Read \" + classBytes.length + \" bytes.\");\n-        return classBytes;\n-    }\n-\n-    public class Transformer implements ClassFileTransformer {\n-        private String targetClassName;\n-        private byte[] seenClassBytes;\n-        private byte[] newClassBytes;\n-\n-        public Transformer() {\n-        }\n-\n-        \/\/ Prepares transformer for Instrumentation.retransformClasses.\n-        public void prepare(Class targetClass, byte[] classBytes) {\n-            targetClassName = targetClass.getName();\n-            newClassBytes = classBytes;\n-            seenClassBytes = null;\n-        }\n-\n-        byte[] getSeenClassBytes() {\n-            return seenClassBytes;\n-        }\n-\n-        public String toString() {\n-            return Transformer.this.getClass().getName();\n-        }\n-\n-        public byte[] transform(ClassLoader loader, String className,\n-            Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) {\n-\n-            if (className.equals(targetClassName)) {\n-                log(this + \".transform() sees '\" + className\n-                        + \"' of \" + classfileBuffer.length + \" bytes.\");\n-                seenClassBytes = classfileBuffer;\n-                if (newClassBytes != null) {\n-                    log(this + \".transform() sets new classbytes for '\" + className\n-                            + \"' of \" + newClassBytes.length + \" bytes.\");\n-                }\n-                return newClassBytes;\n-            }\n-\n-            return null;\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RetransformRecordAnnotation.java","additions":0,"deletions":187,"binary":false,"changes":187,"status":"deleted"}]}