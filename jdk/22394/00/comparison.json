{"files":[{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.net;\n-\n-import java.net.SocketException;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import sun.security.action.GetPropertyAction;\n-\n-\/**\n- * Manages count of total number of UDP sockets and ensures\n- * that exception is thrown if we try to create more than the\n- * configured limit.\n- *\n- * This functionality could be put in NetHooks some time in future.\n- *\/\n-\n-public class ResourceManager {\n-\n-    \/* default maximum number of udp sockets per VM\n-     * when a security manager is enabled.\n-     * The default is 25 which is high enough to be useful\n-     * but low enough to be well below the maximum number\n-     * of port numbers actually available on all OSes\n-     * when multiplied by the maximum feasible number of VM processes\n-     * that could practically be spawned.\n-     *\/\n-\n-    private static final int DEFAULT_MAX_SOCKETS = 25;\n-    private static final int maxSockets;\n-    private static final AtomicInteger numSockets;\n-\n-    static {\n-        String prop = GetPropertyAction\n-                .privilegedGetProperty(\"sun.net.maxDatagramSockets\");\n-        int defmax = DEFAULT_MAX_SOCKETS;\n-        try {\n-            if (prop != null) {\n-                defmax = Integer.parseInt(prop);\n-            }\n-        } catch (NumberFormatException e) {}\n-        maxSockets = defmax;\n-        numSockets = new AtomicInteger();\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    public static void beforeUdpCreate() throws SocketException {\n-        if (System.getSecurityManager() != null) {\n-            if (numSockets.incrementAndGet() > maxSockets) {\n-                numSockets.decrementAndGet();\n-                throw new SocketException(\"maximum number of DatagramSockets reached\");\n-            }\n-        }\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    public static void afterUdpClose() {\n-        if (System.getSecurityManager() != null) {\n-            numSockets.decrementAndGet();\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/net\/ResourceManager.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -76,1 +76,0 @@\n-import sun.net.ResourceManager;\n@@ -197,1 +196,0 @@\n-        ResourceManager.beforeUdpCreate();\n@@ -220,1 +218,0 @@\n-                ResourceManager.afterUdpClose();\n@@ -235,1 +232,0 @@\n-        ResourceManager.beforeUdpCreate();\n@@ -260,1 +256,0 @@\n-                ResourceManager.afterUdpClose();\n@@ -1912,2 +1907,1 @@\n-                \/\/ decrement socket count and release memory\n-                ResourceManager.afterUdpClose();\n+                \/\/ release memory\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,0 @@\n-import sun.net.ResourceManager;\n@@ -458,2 +457,0 @@\n-            if (!stream)\n-                ResourceManager.beforeUdpCreate();\n@@ -461,11 +458,5 @@\n-            try {\n-                if (server) {\n-                    assert stream;\n-                    fd = Net.serverSocket(true);\n-                } else {\n-                    fd = Net.socket(stream);\n-                }\n-            } catch (IOException ioe) {\n-                if (!stream)\n-                    ResourceManager.afterUdpClose();\n-                throw ioe;\n+            if (server) {\n+                assert stream;\n+                fd = Net.serverSocket(true);\n+            } else {\n+                fd = Net.socket(stream);\n@@ -1224,3 +1215,0 @@\n-                } finally {\n-                    \/\/ decrement\n-                    ResourceManager.afterUdpClose();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"}]}