{"files":[{"patch":"@@ -2448,1 +2448,1 @@\n-      if (!vmClasses::Parameter_klass_loaded())\n+      if (!vmClasses::reflect_Parameter_klass_is_loaded())\n@@ -3982,1 +3982,1 @@\n-  if (vmClasses::Cloneable_klass_loaded()) {\n+  if (vmClasses::Cloneable_klass_is_loaded()) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1153,1 +1153,1 @@\n-  if (vmClasses::Class_klass_loaded()) {\n+  if (vmClasses::Class_klass_is_loaded()) {\n@@ -1226,1 +1226,1 @@\n-  if (!vmClasses::Class_klass_loaded() && !CDSConfig::is_using_aot_linked_classes()) {\n+  if (!vmClasses::Class_klass_is_loaded() && !CDSConfig::is_using_aot_linked_classes()) {\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  assert(!Object_klass_loaded(), \"well-known classes should only be initialized once\");\n+  assert(!Object_klass_is_loaded(), \"well-known classes should only be initialized once\");\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,6 +105,0 @@\n-\n-  static bool Object_klass_loaded()         { return is_loaded(VM_CLASS_AT(Object_klass));             }\n-  static bool Class_klass_loaded()          { return is_loaded(VM_CLASS_AT(Class_klass));              }\n-  static bool Cloneable_klass_loaded()      { return is_loaded(VM_CLASS_AT(Cloneable_klass));          }\n-  static bool Parameter_klass_loaded()      { return is_loaded(VM_CLASS_AT(reflect_Parameter_klass));  }\n-  static bool ClassLoader_klass_loaded()    { return is_loaded(VM_CLASS_AT(ClassLoader_klass));        }\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -507,1 +507,1 @@\n-  \/\/ for Object_klass_loaded in objArrayKlassKlass::allocate_objArray_klass_impl.\n+  \/\/ for Object_klass_is_loaded in objArrayKlassKlass::allocate_objArray_klass_impl.\n@@ -596,1 +596,1 @@\n-  assert(vmClasses::Class_klass_loaded(), \"java.lang.Class should be loaded\");\n+  assert(vmClasses::Class_klass_is_loaded(), \"java.lang.Class should be loaded\");\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -398,1 +398,1 @@\n-  if (vmClasses::Object_klass_loaded()) {\n+  if (vmClasses::Object_klass_is_loaded()) {\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-  if (vmClasses::ClassLoader_klass_loaded()) {\n+  if (vmClasses::ClassLoader_klass_is_loaded()) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-  if (!Universe::is_bootstrapping() || vmClasses::Object_klass_loaded()) {\n+  if (!Universe::is_bootstrapping() || vmClasses::Object_klass_is_loaded()) {\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}