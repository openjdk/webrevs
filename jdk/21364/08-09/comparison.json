{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.security.MessageDigest;\n@@ -668,1 +669,1 @@\n-        int[][] wApprox = vectorSub(aHatZ,nttConstMultiply(cHat, t1Hat));\n+        int[][] wApprox = vectorSub(aHatZ, nttConstMultiply(cHat, t1Hat));\n@@ -678,1 +679,1 @@\n-        boolean hashEq = Arrays.equals(sig.commitmentHash(), cTildePrime);\n+        boolean hashEq = MessageDigest.isEqual(sig.commitmentHash(), cTildePrime);\n@@ -725,0 +726,2 @@\n+    \/\/This is simpleBitUnpack from FIPS 204. Since it is only called on the\n+    \/\/vector t1 we can optimize for that case\n@@ -822,3 +825,1 @@\n-        byte[] rho = new byte[mlDsaASeedLength];\n-        System.arraycopy(pk, 0, rho, 0, mlDsaASeedLength);\n-\n+        byte[] rho = Arrays.copyOfRange(pk, 0, mlDsaASeedLength);\n@@ -922,0 +923,2 @@\n+            \/\/BitsPerCall can only be 4 (when called from sampleS1S2),\n+            \/\/or 8 (when called from sampleInBall)\n@@ -1145,1 +1148,1 @@\n-        int[][] v1 = vectorAdd(r,z);\n+        int[][] v1 = vectorAdd(r, z);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}