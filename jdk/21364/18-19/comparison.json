{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.security.InvalidKeyException;\n@@ -37,1 +38,1 @@\n-    public static final int ML_DSA_D = 13;\n+    private static final int ML_DSA_D = 13;\n@@ -411,3 +412,3 @@\n-    public final int mlDsa_k;\n-    public final int mlDsa_l;\n-    public final int eta;\n+    private final int mlDsa_k;\n+    private final int mlDsa_l;\n+    private final int eta;\n@@ -526,0 +527,22 @@\n+    \/*\n+    Key validity checks\n+     *\/\n+    public Object checkPublicKey(byte[] pk) throws InvalidKeyException {\n+        int pk_size = 32 + (mlDsa_k * 32 * (23 - ML_DSA_D));\n+        if (pk.length != pk_size) {\n+            throw new InvalidKeyException(\"Incorrect public key size\");\n+        }\n+        return null;\n+    }\n+\n+    public Object checkPrivateKey(byte[] sk) throws InvalidKeyException {\n+        int eta_bits = eta == 4 ? 4 : 3;\n+\n+        \/\/SK size is 128 + 32 * ((l + k) * bitlen(2*eta) + d*k)\n+        int sk_size = 128 + 32 * ((mlDsa_l + mlDsa_k) * eta_bits + ML_DSA_D * mlDsa_k);\n+        if (sk.length != sk_size) {\n+            throw new InvalidKeyException(\"Incorrect private key size\");\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -170,8 +170,1 @@\n-            int k = mlDsa.mlDsa_k;\n-\n-            \/\/PK size is 32 + 32 * k * (bitlen(q-1) - d), where bitlen(q-1) = 23\n-            int pk_size = 32 + (k * 32 * (23 - ML_DSA.ML_DSA_D));\n-            if (pk.length != pk_size) {\n-                throw new InvalidKeyException(\"Incorrect public key size\");\n-            }\n-            return null;\n+            return mlDsa.checkPublicKey(pk);\n@@ -182,11 +175,2 @@\n-            int size = name2int(name);\n-            ML_DSA mlDsa = new ML_DSA(size);\n-            int k = mlDsa.mlDsa_k;\n-            int eta_bits = size == 3 ? 4 : 3;\n-\n-            \/\/SK size is 128 + 32 * ((l + k) * bitlen(2*eta) + d*k)\n-            int sk_size = 128 + 32 * ((mlDsa.mlDsa_l + k) * eta_bits + ML_DSA.ML_DSA_D * k);\n-            if (sk.length != sk_size) {\n-                throw new InvalidKeyException(\"Incorrect private key size\");\n-            }\n-            return null;\n+            ML_DSA mlDsa = new ML_DSA(name2int(name));\n+            return mlDsa.checkPrivateKey(sk);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA_Provider.java","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"}]}