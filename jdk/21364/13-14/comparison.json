{"files":[{"patch":"@@ -596,1 +596,1 @@\n-        int[][] z = null;\n+        int[][] z = new int[mlDsa_l][ML_DSA_N];\n@@ -604,0 +604,1 @@\n+        int[][] w_ct0 = new int[mlDsa_k][ML_DSA_N];\n@@ -605,0 +606,3 @@\n+        int[][] cs1 = new int[mlDsa_l][ML_DSA_N];\n+        int[][] cs2 = new int[mlDsa_k][ML_DSA_N];\n+        int[][] ct0 = new int[mlDsa_k][ML_DSA_N];\n@@ -631,2 +635,2 @@\n-            int[][] cs1 = nttConstMultiply(c, sk.s1());\n-            int[][] cs2 = nttConstMultiply(c, sk.s2());\n+            nttConstMultiply(cs1, c, sk.s1());\n+            nttConstMultiply(cs2, c, sk.s2());\n@@ -635,2 +639,4 @@\n-            z = vectorAdd(yy, cs1);\n-            int[][] r0 = vectorSub(w0, cs2, false);\n+            z = vectorAdd(z, yy, cs1);\n+\n+            \/\/w0 = w0 - cs2 (this is r0 in the spec)\n+            vectorSub(w0, cs2, false);\n@@ -640,1 +646,1 @@\n-            if (vectorNormBound(z, gamma1 - beta) || vectorNormBound(r0, gamma2 - beta)) {\n+            if (vectorNormBound(z, gamma1 - beta) || vectorNormBound(w0, gamma2 - beta)) {\n@@ -643,1 +649,1 @@\n-                int[][] ct0 = nttConstMultiply(c, sk.t0());\n+                nttConstMultiply(ct0, c, sk.t0());\n@@ -646,1 +652,1 @@\n-                int hint_weight = makeHint(h, w, vectorAdd(w, ct0));\n+                int hint_weight = makeHint(h, w, vectorAdd(w_ct0, w, ct0));\n@@ -693,0 +699,1 @@\n+\n@@ -695,1 +702,5 @@\n-        int[][] wApprox = vectorSub(aHatZ, nttConstMultiply(cHat, t1Hat), true);\n+\n+        int[][] ct1 = new int[mlDsa_k][ML_DSA_N];\n+        nttConstMultiply(ct1, cHat, t1Hat);\n+\n+        int[][] wApprox = vectorSub(aHatZ, ct1, true);\n@@ -1294,4 +1305,3 @@\n-    public static int[] mlDsaNttMultiply(int[] coeffs1, int[] coeffs2) {\n-        int[] product = new int[ML_DSA_N];\n-        implMlDsaNttMultJava(product, coeffs1, coeffs2);\n-        return product;\n+    \/\/Todo\n+    public static void mlDsaNttMultiply(int[] res, int[] coeffs1, int[] coeffs2) {\n+        implMlDsaNttMultJava(res, coeffs1, coeffs2);\n@@ -1347,0 +1357,1 @@\n+        int[] product = new int[ML_DSA_N];\n@@ -1352,1 +1363,1 @@\n-                int[] product = mlDsaNttMultiply(matrix[i][j], vector[j]);\n+                mlDsaNttMultiply(product, matrix[i][j], vector[j]);\n@@ -1363,2 +1374,1 @@\n-    private int[][] nttConstMultiply(int[] a, int[][] b) {\n-        int[][] res = new int[b.length][ML_DSA_N];\n+    private void nttConstMultiply(int[][] res, int[] a, int[][] b) {\n@@ -1366,1 +1376,1 @@\n-            res[i] = mlDsaNttMultiply(a, b[i]);\n+            mlDsaNttMultiply(res[i], a, b[i]);\n@@ -1368,1 +1378,0 @@\n-        return res;\n@@ -1398,4 +1407,2 @@\n-    int[][] vectorAdd(int[][] vec1, int[][] vec2) {\n-        int dim = vec1.length;\n-        int[][] result = new int[dim][ML_DSA_N];\n-        for (int i = 0; i < dim; i++) {\n+    int[][] vectorAdd(int[][] result, int[][] vec1, int[][] vec2) {\n+        for (int i = 0; i < result.length; i++) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":29,"deletions":22,"binary":false,"changes":51,"status":"modified"}]}