{"files":[{"patch":"@@ -409,0 +409,1 @@\n+    private final int t0PackedLength;\n@@ -436,0 +437,1 @@\n+                t0PackedLength = 1664;\n@@ -456,0 +458,1 @@\n+                t0PackedLength = 2496;\n@@ -476,0 +479,1 @@\n+                t0PackedLength = 3328;\n@@ -485,0 +489,12 @@\n+        void destroy() {\n+            Arrays.fill(k, (byte)0);\n+            for (var b : s1) {\n+                Arrays.fill(b, (byte) 0);\n+            }\n+            for (var b : s2) {\n+                Arrays.fill(b, (byte) 0);\n+            }\n+            for (var b : t0) {\n+                Arrays.fill(b, (byte) 0);\n+            }\n+        }\n@@ -610,0 +626,1 @@\n+            sk.destroy();\n@@ -690,1 +707,2 @@\n-    public byte[] bitPack(int[][] vector, int bitsPerCoeff, int maxValue) {\n+    public void bitPack(int[][] vector, int bitsPerCoeff, int maxValue,\n+            byte[] output, int offset) {\n@@ -692,1 +710,0 @@\n-        byte[] result = new byte[(vecLen * mlDsa_n * bitsPerCoeff) \/ 8];\n@@ -695,1 +712,0 @@\n-        int i = 0;\n@@ -701,1 +717,1 @@\n-                    result[i++] = (byte) acc;\n+                    output[offset++] = (byte) acc;\n@@ -707,1 +723,0 @@\n-        return result;\n@@ -725,1 +740,1 @@\n-    public int[][] bitUnpack(byte[] v, int dim, int maxValue, int bitsPerCoeff) {\n+    public int[][] bitUnpack(byte[] v, int offset, int dim, int maxValue, int bitsPerCoeff) {\n@@ -732,1 +747,0 @@\n-        int index = 0;\n@@ -736,1 +750,1 @@\n-                    acc += ((v[index++] & 0xff) << top);\n+                    acc += ((v[offset++] & 0xff) << top);\n@@ -751,2 +765,1 @@\n-    private byte[] hintBitPack(boolean[][] h) {\n-        byte[] y = new byte[omega + mlDsa_k];\n+    private void hintBitPack(boolean[][] h, byte[] buffer, int offset) {\n@@ -757,1 +770,1 @@\n-                    y[idx] = (byte)j;\n+                    buffer[offset + idx] = (byte)j;\n@@ -761,1 +774,1 @@\n-            y[omega + i] = (byte)idx;\n+            buffer[offset + omega + i] = (byte)idx;\n@@ -763,1 +776,0 @@\n-        return y;\n@@ -766,1 +778,1 @@\n-    private boolean[][] hintBitUnpack(byte[] y) {\n+    private boolean[][] hintBitUnpack(byte[] y, int offset) {\n@@ -770,1 +782,1 @@\n-            int j = y[omega + i];\n+            int j = y[offset + omega + i];\n@@ -777,1 +789,1 @@\n-                    if ((y[idx - 1] & 0xff) >= (y[idx] & 0xff)) {\n+                    if ((y[offset + idx - 1] & 0xff) >= (y[offset + idx] & 0xff)) {\n@@ -781,1 +793,1 @@\n-                int hintIndex = y[idx] & 0xff;\n+                int hintIndex = y[offset + idx] & 0xff;\n@@ -788,1 +800,1 @@\n-            if (y[idx] != 0) {\n+            if (y[offset + idx] != 0) {\n@@ -820,4 +832,0 @@\n-        byte[] s1Packed = bitPack(key.s1, s1s2CoeffSize, eta);\n-        byte[] s2Packed = bitPack(key.s2, s1s2CoeffSize, eta);\n-        byte[] t0Packed = bitPack(key.t0, t0CoeffSize, 1 << 12);\n-\n@@ -825,8 +833,15 @@\n-            s1PackedLength + s2PackedLength + t0Packed.length];\n-\n-        System.arraycopy(key.rho, 0, skBytes, 0, mlDsaASeedLength);\n-        System.arraycopy(key.k, 0, skBytes, mlDsaASeedLength, mlDsaKLength);\n-        System.arraycopy(key.tr, 0, skBytes, mlDsaASeedLength + mlDsaKLength, mlDsaTrLength);\n-        System.arraycopy(s1Packed, 0, skBytes, mlDsaASeedLength + mlDsaKLength + key.tr.length, s1PackedLength);\n-        System.arraycopy(s2Packed, 0, skBytes, mlDsaASeedLength + mlDsaKLength + key.tr.length + s1PackedLength, s2PackedLength);\n-        System.arraycopy(t0Packed, 0, skBytes, mlDsaASeedLength + mlDsaKLength + key.tr.length + s1PackedLength + s2PackedLength, t0Packed.length);\n+                s1PackedLength + s2PackedLength + t0PackedLength];\n+\n+        int pos = 0;\n+        System.arraycopy(key.rho, 0, skBytes, pos, mlDsaASeedLength);\n+        pos += mlDsaASeedLength;\n+        System.arraycopy(key.k, 0, skBytes, pos, mlDsaKLength);\n+        pos += mlDsaKLength;\n+        System.arraycopy(key.tr, 0, skBytes, pos, mlDsaTrLength);\n+        pos += mlDsaTrLength;\n+\n+        bitPack(key.s1, s1s2CoeffSize, eta, skBytes, pos);\n+        pos += s1PackedLength;\n+        bitPack(key.s2, s1s2CoeffSize, eta, skBytes, pos);\n+        pos += s2PackedLength;\n+        bitPack(key.t0, t0CoeffSize, 1 << 12, skBytes, pos);\n@@ -850,2 +865,1 @@\n-        byte[] y = Arrays.copyOfRange(sk, start, end);\n-        int[][] s1 = bitUnpack(y, mlDsa_l, eta, s1s2CoeffSize);\n+        int[][] s1 = bitUnpack(sk, start, mlDsa_l, eta, s1s2CoeffSize);\n@@ -856,2 +870,1 @@\n-        byte[] z = Arrays.copyOfRange(sk, start, end);\n-        int[][] s2 = bitUnpack(z, mlDsa_k, eta, s1s2CoeffSize);\n+        int[][] s2 = bitUnpack(sk, start, mlDsa_k, eta, s1s2CoeffSize);\n@@ -861,3 +874,1 @@\n-        end += 32 * mlDsa_d * mlDsa_k;\n-        byte[] w = Arrays.copyOfRange(sk, start, end);\n-        int[][] t0 = bitUnpack(w, mlDsa_k, 1 << 12, t0CoeffSize);\n+        int[][] t0 = bitUnpack(sk, start, mlDsa_k, 1 << 12, t0CoeffSize);\n@@ -872,3 +883,0 @@\n-        byte[] zPacked = bitPack(sig.response, gamma1Bits + 1, gamma1);\n-        byte[] hPacked = hintBitPack(sig.hint);\n-\n@@ -876,0 +884,1 @@\n+\n@@ -877,2 +886,3 @@\n-        System.arraycopy(zPacked, 0, sigBytes, cSize, zSize);\n-        System.arraycopy(hPacked, 0, sigBytes, cSize + zSize, omega + mlDsa_k);\n+        bitPack(sig.response, gamma1Bits + 1, gamma1, sigBytes, cSize);\n+        hintBitPack(sig.hint, sigBytes, cSize + zSize);\n+\n@@ -889,2 +899,1 @@\n-        byte[] x = Arrays.copyOfRange(sig, start, end);\n-        int[][] z = bitUnpack(x, mlDsa_l, gamma1, gamma1Bits + 1);\n+        int[][] z = bitUnpack(sig, start, mlDsa_l, gamma1, gamma1Bits + 1);\n@@ -894,3 +903,1 @@\n-        end += omega + mlDsa_k;\n-        byte[] y = Arrays.copyOfRange(sig, start, end);\n-        boolean[][] h = hintBitUnpack(y);\n+        boolean[][] h = hintBitUnpack(sig, start);\n@@ -1084,1 +1091,1 @@\n-        return bitUnpack(v, mlDsa_l, gamma1, c);\n+        return bitUnpack(v, 0, mlDsa_l, gamma1, c);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":55,"deletions":48,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Arrays;\n@@ -58,3 +59,8 @@\n-            return new byte[][] {\n-                    mlDsa.pkEncode(kp.publicKey()),\n-                    mlDsa.skEncode(kp.privateKey()) };\n+            try {\n+                return new byte[][]{\n+                        mlDsa.pkEncode(kp.publicKey()),\n+                        mlDsa.skEncode(kp.privateKey())};\n+            } finally {\n+                kp.privateKey().destroy();\n+                Arrays.fill(seed, (byte)0);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA_Provider.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-            default -> throw new UnsupportedOperationException(alg);\n+            default -> -1;\n","filename":"test\/jdk\/sun\/security\/provider\/all\/Deterministic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}