{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import sun.security.provider.SHA3.SHAKE128;\n@@ -759,0 +760,5 @@\n+            } else if (digAlgName.equals(\"SHAKE128\")) {\n+                \/\/ No MessageDigest impl for SHAKE128 yet\n+                var shaker = new SHAKE128(32);\n+                shaker.update(content, 0, content.length);\n+                md = shaker.digest();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS7.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import sun.security.provider.SHA3.SHAKE128;\n@@ -379,0 +380,4 @@\n+                } else if (digestAlgName.equals(\"SHAKE128\")) {\n+                    var md = new SHAKE128(32);\n+                    md.update(data, 0, data.length);\n+                    computedMessageDigest = md.digest();\n@@ -510,1 +515,1 @@\n-                if (!digAlgId.equals(SignatureUtil.EdDSADigestAlgHolder.sha512)) {\n+                if (!digAlgId.equals(SignatureUtil.DigestAlgHolder.sha512)) {\n@@ -516,1 +521,1 @@\n-                    if (!digAlgId.equals(SignatureUtil.EdDSADigestAlgHolder.shake256)) {\n+                    if (!digAlgId.equals(SignatureUtil.DigestAlgHolder.shake256)) {\n@@ -520,1 +525,1 @@\n-                    if (!digAlgId.equals(SignatureUtil.EdDSADigestAlgHolder.shake256$512)) {\n+                    if (!digAlgId.equals(SignatureUtil.DigestAlgHolder.shake256$512)) {\n@@ -531,0 +536,3 @@\n+            \/\/ case \"ML-DSA\":\n+            \/\/ https:\/\/www.ietf.org\/archive\/id\/draft-salter-lamps-cms-ml-dsa-00.html\n+            \/\/ only RECOMMEND bit has not required\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/SignerInfo.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-    public static class EdDSADigestAlgHolder {\n+    public static class DigestAlgHolder {\n@@ -195,0 +195,1 @@\n+        public static final AlgorithmId shake128;\n@@ -201,0 +202,1 @@\n+                shake128 = new AlgorithmId(ObjectIdentifier.of(KnownOIDs.SHAKE128));\n@@ -236,1 +238,1 @@\n-                    digAlgID = EdDSADigestAlgHolder.sha512;\n+                    digAlgID = DigestAlgHolder.sha512;\n@@ -240,1 +242,1 @@\n-                        digAlgID = EdDSADigestAlgHolder.shake256;\n+                        digAlgID = DigestAlgHolder.shake256;\n@@ -242,1 +244,1 @@\n-                        digAlgID = EdDSADigestAlgHolder.shake256$512;\n+                        digAlgID = DigestAlgHolder.shake256$512;\n@@ -248,0 +250,17 @@\n+        } else if (kAlg.equalsIgnoreCase(\"ML-DSA-44\")) {\n+            \/\/ https:\/\/www.ietf.org\/archive\/id\/draft-salter-lamps-cms-ml-dsa-00.html\n+            digAlgID = DigestAlgHolder.shake128;\n+        } else if (kAlg.equalsIgnoreCase(\"ML-DSA-65\") || kAlg.equalsIgnoreCase(\"ML-DSA-87\")) {\n+            digAlgID = DigestAlgHolder.shake256;\n+        } else if (kAlg.equalsIgnoreCase(\"ML-DSA\")) {\n+            if (privateKey.getParams() instanceof NamedParameterSpec nps) {\n+                digAlgID = switch (nps.getName().toUpperCase(Locale.ROOT)) {\n+                    case \"ML-DSA-44\" -> DigestAlgHolder.shake128;\n+                    case \"ML-DSA-65\", \"ML-DSA-87\" -> DigestAlgHolder.shake256;\n+                    default -> throw new IllegalArgumentException(\n+                            \"Unknown ML-DSA parameter name: \" + nps.getName());\n+                };\n+            } else {\n+                throw new IllegalArgumentException(\n+                        \"Unsupported ML-DSA key\");\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureUtil.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8298387\n+ * @summary signing with ML-DSA\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.util\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.security.DerUtils;\n+import jdk.test.lib.util.JarUtils;\n+import sun.security.util.KnownOIDs;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.jar.JarFile;\n+\n+public class MlDsaSigning {\n+    public static void main(String[] args) throws Exception {\n+\n+        JarUtils.createJarFile(Path.of(\"a.jar\"), Path.of(\".\"),\n+                Files.write(Path.of(\"a\"), new byte[10]));\n+\n+        genKeyAndSign(\"ML-DSA-44\", \"M4\");\n+        genKeyAndSign(\"ML-DSA-65\", \"M6\");\n+        genKeyAndSign(\"ML-DSA-87\", \"M8\");\n+\n+        SecurityTools.jarsigner(\"-verify a.jar -verbose -certs\")\n+                .shouldHaveExitValue(0)\n+                .shouldContain(\"jar verified\");\n+\n+        try (var jf = new JarFile(\"a.jar\")) {\n+\n+            var je = jf.getJarEntry(\"a\");\n+            jf.getInputStream(je).readAllBytes();\n+            Asserts.assertEquals(3, je.getCertificates().length);\n+\n+            checkDigestAlgorithm(jf, \"M4\", KnownOIDs.SHAKE128);\n+            checkDigestAlgorithm(jf, \"M6\", KnownOIDs.SHAKE256);\n+            checkDigestAlgorithm(jf, \"M8\", KnownOIDs.SHAKE256);\n+        }\n+    }\n+\n+    static void genKeyAndSign(String alg, String alias) throws Exception {\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit -genkeypair -alias \"\n+                        + alias + \" -keyalg \" + alg + \" -dname CN=\" + alias)\n+                .shouldHaveExitValue(0);\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit a.jar \" + alias)\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    static void checkDigestAlgorithm(JarFile jf, String alias, KnownOIDs expectAlg)\n+            throws Exception {\n+        var p7 = jf.getInputStream(jf.getEntry(\"META-INF\/\" + alias + \".DSA\"))\n+                .readAllBytes();\n+        \/\/ SignedData - digestAlgorithms\n+        DerUtils.checkAlg(p7, \"10100\", expectAlg);\n+        \/\/ SignedData - signerInfos - digestAlgorithm\n+        DerUtils.checkAlg(p7, \"104020\", expectAlg);\n+        \/\/ SignedData - signerInfos - signedAttrs - CMSAlgorithmProtection - digestAlgorithm\n+        DerUtils.checkAlg(p7, \"1040321000\", expectAlg);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/MlDsaSigning.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}