{"files":[{"patch":"@@ -597,1 +597,1 @@\n-        boolean[][] h = null;\n+        boolean[][] h = new boolean[mlDsa_k][ML_DSA_N];\n@@ -600,0 +600,1 @@\n+        int[][] yy = new int[mlDsa_l][ML_DSA_N];\n@@ -609,0 +610,5 @@\n+            \/\/Save non-ntt version of y for later use\n+            for (int i = 0; i < y.length; i++) {\n+                System.arraycopy(y[i], 0, yy[i], 0, ML_DSA_N);\n+            }\n+\n@@ -614,1 +620,1 @@\n-            mlDsaVectorInverseNtt(y);\n+            \/\/mlDsaVectorInverseNtt(y);\n@@ -629,2 +635,2 @@\n-            z = vectorAdd(y, cs1);\n-            int[][] r0 = vectorSub(w0, cs2);\n+            z = vectorAdd(yy, cs1);\n+            int[][] r0 = vectorSub(w0, cs2, false);\n@@ -639,2 +645,3 @@\n-                h = makeHint(vectorConstMul(-1, ct0), vectorAdd(vectorAdd(w, vectorConstMul(-1, cs2)), ct0));\n-                if (vectorNormBound(ct0, gamma2) || (hammingWeight(h) > omega)) {\n+                w = vectorSub(w, cs2, false);\n+                int hint_weight = makeHint(h, w, vectorAdd(w, ct0));\n+                if (vectorNormBound(ct0, gamma2) || (hint_weight > omega)) {\n@@ -688,1 +695,1 @@\n-        int[][] wApprox = vectorSub(aHatZ, nttConstMultiply(cHat, t1Hat));\n+        int[][] wApprox = vectorSub(aHatZ, nttConstMultiply(cHat, t1Hat), true);\n@@ -1194,1 +1201,3 @@\n-    private boolean[][] makeHint(int[][] z, int[][] r) {\n+    \/\/Creates the hint polynomial and returns its hamming weight\n+    private int makeHint(boolean[][] res, int[][] z, int[][] r) {\n+        int hammingWeight = 0;\n@@ -1196,2 +1205,1 @@\n-        int[][] v1 = highBits(vectorAdd(r,z));\n-        boolean[][] res = new boolean[mlDsa_k][ML_DSA_N];\n+        int[][] v1 = highBits(z);\n@@ -1200,1 +1208,6 @@\n-                res[i][j] = (r1[i][j] != v1[i][j]);\n+                if (r1[i][j] != v1[i][j]) {\n+                    res[i][j] = true;\n+                    hammingWeight++;\n+                } else {\n+                    res[i][j] = false;\n+                }\n@@ -1203,1 +1216,1 @@\n-        return res;\n+        return hammingWeight;\n@@ -1391,1 +1404,0 @@\n-                tmp -= tmp >= ML_DSA_Q ? ML_DSA_Q : 0;\n@@ -1398,1 +1410,1 @@\n-    int[][] vectorSub(int[][] vec1, int[][] vec2) {\n+    int[][] vectorSub(int[][] vec1, int[][] vec2, boolean needsAdjustment) {\n@@ -1403,1 +1415,7 @@\n-                tmp += tmp < 0 ? ML_DSA_Q : 0;\n+                if (needsAdjustment) {\n+                    if (tmp <= -ML_DSA_Q) {\n+                        tmp += ML_DSA_Q;\n+                    } else if (tmp >= ML_DSA_Q) {\n+                        tmp -= ML_DSA_Q;\n+                    }\n+                }\n@@ -1425,10 +1443,0 @@\n-    private int hammingWeight(boolean[][] vec) {\n-        int weight = 0;\n-        for (int i = 0; i < mlDsa_k; i++) {\n-            for (int j = 0; j < ML_DSA_N; j++) {\n-                weight += vec[i][j] ? 1 : 0;\n-            }\n-        }\n-        return weight;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":33,"deletions":25,"binary":false,"changes":58,"status":"modified"}]}