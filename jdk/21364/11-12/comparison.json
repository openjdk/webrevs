{"files":[{"patch":"@@ -1228,3 +1228,2 @@\n-        int result = implMlDsaAlmostNtt(coeffs, MONT_ZETAS_FOR_VECTOR_NTT);\n-        int[] check = coeffs.clone();\n-        result = implMlDsaMontMulByConstant(coeffs,  MONT_R_MOD_Q);\n+        implMlDsaAlmostNttJava(coeffs);\n+        implMlDsaMontMulByConstantJava(coeffs,  MONT_R_MOD_Q);\n@@ -1234,6 +1233,1 @@\n-    @IntrinsicCandidate\n-    static int implMlDsaAlmostNtt(int[] coeffs, int[] zetas) {\n-        return implMlDsaAlmostNttJava(coeffs);\n-    }\n-\n-    static int implMlDsaAlmostNttJava(int[] coeffs) {\n+    static void implMlDsaAlmostNttJava(int[] coeffs) {\n@@ -1252,2 +1246,0 @@\n-\n-        return 1;\n@@ -1257,2 +1249,2 @@\n-        int result = implMlDsaAlmostInverseNtt(coeffs, MONT_ZETAS_FOR_VECTOR_INVERSE_NTT);\n-        result = implMlDsaMontMulByConstant(coeffs, MONT_DIM_INVERSE);\n+        implMlDsaAlmostInverseNttJava(coeffs);\n+        implMlDsaMontMulByConstantJava(coeffs, MONT_DIM_INVERSE);\n@@ -1262,6 +1254,1 @@\n-    @IntrinsicCandidate\n-    static int implMlDsaAlmostInverseNtt(int[] coeffs, int[] zetas) {\n-        return implMlDsaAlmostInverseNttJava(coeffs);\n-    }\n-\n-    static int implMlDsaAlmostInverseNttJava(int[] coeffs) {\n+    static void implMlDsaAlmostInverseNttJava(int[] coeffs) {\n@@ -1280,2 +1267,0 @@\n-\n-        return 1;\n@@ -1298,1 +1283,1 @@\n-        int result = implMlDsaNttMult(product, coeffs1, coeffs2);\n+        implMlDsaNttMultJava(product, coeffs1, coeffs2);\n@@ -1302,6 +1287,1 @@\n-    @IntrinsicCandidate\n-    static int implMlDsaNttMult(int[] product, int[] coeffs1, int[] coeffs2) {\n-        return implMlDsaNttMultJava(product, coeffs1, coeffs2);\n-    }\n-\n-    static int implMlDsaNttMultJava(int[] product, int[] coeffs1, int[] coeffs2) {\n+    static void implMlDsaNttMultJava(int[] product, int[] coeffs1, int[] coeffs2) {\n@@ -1311,1 +1291,0 @@\n-        return 1;\n@@ -1315,7 +1294,1 @@\n-        int[] check = coeffs.clone();\n-        int result = implMlDsaMontMulByConstant(coeffs, constant);\n-    }\n-\n-    @IntrinsicCandidate\n-    static int implMlDsaMontMulByConstant(int[] coeffs, int constant) {\n-        return implMlDsaMontMulByConstantJava(coeffs, constant);\n+        implMlDsaMontMulByConstantJava(coeffs, constant);\n@@ -1324,1 +1297,1 @@\n-    static int implMlDsaMontMulByConstantJava(int[] coeffs, int constant) {\n+    static void implMlDsaMontMulByConstantJava(int[] coeffs, int constant) {\n@@ -1328,1 +1301,0 @@\n-        return 1;\n@@ -1331,1 +1303,1 @@\n-    public static int mlDsaDecomposePoly(int[] input, int[] lowPart, int[] highPart,\n+    public static void mlDsaDecomposePoly(int[] input, int[] lowPart, int[] highPart,\n@@ -1333,2 +1305,1 @@\n-        return implMlDsaDecomposePoly(input, lowPart, highPart,\n-            twoGamma2, multiplier);\n+        implMlDsaDecomposePoly(input, lowPart, highPart, twoGamma2, multiplier);\n@@ -1338,1 +1309,1 @@\n-    static int implMlDsaDecomposePoly(int[] input, int[] lowPart, int[] highPart,\n+    static void implMlDsaDecomposePoly(int[] input, int[] lowPart, int[] highPart,\n@@ -1340,1 +1311,1 @@\n-        return decomposePolyJava(input, lowPart, highPart, twoGamma2, multiplier);\n+        decomposePolyJava(input, lowPart, highPart, twoGamma2, multiplier);\n@@ -1343,1 +1314,1 @@\n-    static int decomposePolyJava(int[] input, int[] lowPart, int[] highPart,\n+    static void decomposePolyJava(int[] input, int[] lowPart, int[] highPart,\n@@ -1359,1 +1330,0 @@\n-        return 1;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA.java","additions":15,"deletions":45,"binary":false,"changes":60,"status":"modified"}]}