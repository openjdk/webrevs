{"files":[{"patch":"@@ -120,3 +120,0 @@\n-#ifdef ASSERT\n-  , _first_fence(nullptr)\n-#endif\n@@ -131,6 +128,0 @@\n-#ifdef ASSERT\n-  SOMETIMES(verify();)\n-  if (Settings::use_allocation_guard()) {\n-    verify_allocation_guards();\n-  }\n-#endif\n@@ -138,1 +129,0 @@\n-\n@@ -242,17 +232,0 @@\n-#ifdef ASSERT\n-  \/\/ Fence allocation\n-  if (p != nullptr && Settings::use_allocation_guard()) {\n-    STATIC_ASSERT(is_aligned(sizeof(Fence), BytesPerWord));\n-    MetaWord* guard = allocate_inner(sizeof(Fence) \/ BytesPerWord);\n-    if (guard != nullptr) {\n-      \/\/ Ignore allocation errors for the fence to keep coding simple. If this\n-      \/\/ happens (e.g. because right at this time we hit the Metaspace GC threshold)\n-      \/\/ we miss adding this one fence. Not a big deal. Note that his would\n-      \/\/ be pretty rare. Chances are much higher the primary allocation above\n-      \/\/ would have already failed).\n-      Fence* f = new(guard) Fence(_first_fence);\n-      _first_fence = f;\n-    }\n-  }\n-#endif \/\/ ASSERT\n-\n@@ -430,12 +403,0 @@\n-void MetaspaceArena::Fence::verify() const {\n-  assert(_eye1 == EyeCatcher && _eye2 == EyeCatcher,\n-         \"Metaspace corruption: fence block at \" PTR_FORMAT \" broken.\", p2i(this));\n-}\n-\n-void MetaspaceArena::verify_allocation_guards() const {\n-  assert(Settings::use_allocation_guard(), \"Don't call with guards disabled.\");\n-  for (const Fence* f = _first_fence; f != nullptr; f = f->next()) {\n-    f->verify();\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.cpp","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -103,22 +103,0 @@\n-#ifdef ASSERT\n-  \/\/ Allocation guards: When active, arena allocations are interleaved with\n-  \/\/  fence allocations. An overwritten fence indicates a buffer overrun in either\n-  \/\/  the preceding or the following user block. All fences are linked together;\n-  \/\/  validating the fences just means walking that linked list.\n-  \/\/ Note that for the Arena, fence blocks are just another form of user blocks.\n-  class Fence {\n-    static const uintx EyeCatcher =\n-      NOT_LP64(0x77698465) LP64_ONLY(0x7769846577698465ULL); \/\/ \"META\" resp \"METAMETA\"\n-    \/\/ Two eyecatchers to easily spot a corrupted _next pointer\n-    const uintx _eye1;\n-    const Fence* const _next;\n-    NOT_LP64(uintx _dummy;)\n-    const uintx _eye2;\n-  public:\n-    Fence(const Fence* next) : _eye1(EyeCatcher), _next(next), _eye2(EyeCatcher) {}\n-    const Fence* next() const { return _next; }\n-    void verify() const;\n-  };\n-  const Fence* _first_fence;\n-#endif \/\/ ASSERT\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.hpp","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-DEBUG_ONLY(bool Settings::_use_allocation_guard = false;)\n-\n@@ -49,3 +47,0 @@\n-  \/\/ Off for release builds, off by default - but switchable - for debug builds.\n-  DEBUG_ONLY(_use_allocation_guard = MetaspaceGuardAllocations;)\n-\n@@ -61,1 +56,0 @@\n-  st->print_cr(\" - use_allocation_guard: %d.\", (int)use_allocation_guard());\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -59,3 +59,0 @@\n-  \/\/ If true, metablock allocations are guarded and periodically checked.\n-  DEBUG_ONLY(static bool _use_allocation_guard;)\n-\n@@ -69,1 +66,0 @@\n-  static bool use_allocation_guard()                          { return DEBUG_ONLY(_use_allocation_guard) NOT_DEBUG(false); }\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1411,3 +1411,0 @@\n-  develop(bool, MetaspaceGuardAllocations, false,                           \\\n-          \"Metapace allocations are guarded.\")                              \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/metaspace\/metaspaceArena.hpp\"\n-#include \"memory\/metaspace\/metaspaceSettings.hpp\"\n-#include \"memory\/metaspace\/testHelpers.hpp\"\n-#include \"utilities\/debug.hpp\"\n-#include \"utilities\/ostream.hpp\"\n-\n-\/\/#define LOG_PLEASE\n-#include \"metaspaceGtestCommon.hpp\"\n-#include \"metaspaceGtestContexts.hpp\"\n-\n-#ifdef ASSERT\n-\n-using metaspace::MetaspaceArena;\n-using metaspace::MetaspaceTestArena;\n-using metaspace::Settings;\n-\n-\/\/ Test that overwriting memory triggers an assert if allocation guards are enabled.\n-\/\/  Note: We use TEST_VM_ASSERT_MSG. However, an assert is only triggered if allocation\n-\/\/  guards are enabled; if guards are disabled for the gtests, this test would fail.\n-\/\/  So for that case, we trigger a fake assert.\n-TEST_VM_ASSERT_MSG(metaspace, test_overwriter, \".*Metaspace corruption.*\") {\n-\n-  if (Settings::use_allocation_guard()) {\n-    MetaspaceGtestContext context;\n-    MetaspaceTestArena* arena = context.create_arena(Metaspace::StandardMetaspaceType);\n-    \/\/ We allocate two blocks. We then write over the end of the first block, which\n-    \/\/  should corrupt the fence between the two blocks.\n-    \/\/ Note: there is of course no guarantee that blocks allocated sequentially are neighbors;\n-    \/\/  but in this case (clean standard-sized test arena and very small allocations) it can\n-    \/\/  be safely assumed).\n-    MetaWord* p1 = arena->allocate(8);\n-    MetaWord* p2 = arena->allocate(2);\n-    p1[8] = (MetaWord)0x9345; \/\/ Overwriter\n-    \/\/ Now we delete the arena (as happens during class unloading); this will check all\n-    \/\/ block canaries and should trigger an assert (see MetaspaceArena::verify_allocation_guards()).\n-    delete arena;\n-  } else {\n-    assert(false, \"Metaspace corruption - please ignore this, fake message to satisfy tests\");\n-  }\n-\n-}\n-\n-#endif \/\/ ASSERT\n","filename":"test\/hotspot\/gtest\/metaspace\/test_allocationGuard.cpp","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -294,5 +294,0 @@\n-\n-  if (Settings::use_allocation_guard()) {\n-    return;\n-  }\n-\n@@ -340,5 +335,0 @@\n-\n-  if (Settings::use_allocation_guard()) {\n-    return;\n-  }\n-\n@@ -375,5 +365,0 @@\n-\n-  if (Settings::use_allocation_guard()) {\n-    return;\n-  }\n-\n@@ -402,3 +387,0 @@\n-  if (Settings::use_allocation_guard()) {\n-    return;\n-  }\n@@ -508,4 +490,0 @@\n-  if (Settings::use_allocation_guard()) {\n-    return;\n-  }\n-\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena.cpp","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -109,1 +109,0 @@\n-    \/\/ - if +MetaspaceGuardAllocations, guard costs\n@@ -116,2 +115,1 @@\n-    const size_t max_word_overhead_per_alloc =\n-        4 + (metaspace::Settings::use_allocation_guard() ? 4 : 0);\n+    constexpr size_t max_word_overhead_per_alloc = 4;\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena_stress.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- *  are not tested explicitly in the standard gtests.\n- *\n+ *  are not tested explicitly in the standard gtest. Hence, there is no \"default-ndebug\"\n+ *  since that would be equivalent to the normal gtest for release builds.\n@@ -43,11 +43,1 @@\n-\/* @test id=balanced-with-guards\n- * @summary Run metaspace-related gtests with allocation guards enabled\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.xml\n- * @requires vm.debug\n- * @requires vm.flagless\n- * @run main\/native GTestWrapper --gtest_filter=metaspace* -XX:VerifyMetaspaceInterval=1 -XX:+MetaspaceGuardAllocations\n- *\/\n-\n-\/* @test id=balanced-no-ccs\n+\/* @test id=no-ccs\n","filename":"test\/hotspot\/jtreg\/gtest\/MetaspaceGtests.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -39,11 +39,0 @@\n-\/*\n- * @test id=test-64bit-ccs-guarded\n- * @summary Test the VM.metaspace command\n- * @requires vm.bits == \"64\"\n- * @requires vm.debug == true\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run main\/othervm -Dwith-compressed-class-space -XX:MaxMetaspaceSize=201M -Xmx100M -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UnlockDiagnosticVMOptions -XX:+MetaspaceGuardAllocations PrintMetaspaceDcmd\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/PrintMetaspaceDcmd.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-        \/\/ - overhead per allocation (padding for alignment, possibly allocation guards)\n+        \/\/ - overhead per allocation (padding for alignment)\n@@ -203,6 +203,0 @@\n-        if (Settings.settings().usesAllocationGuards) {\n-            \/\/ Guards need space.\n-            expectedMaxUsage += (numAllocated * 2);\n-            \/\/ Also, they disable the fbl, so deallocated still counts as used.\n-            expectedMaxUsage += deallocatedWords;\n-        }\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestContext.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-    public boolean usesAllocationGuards = WhiteBox.getWhiteBox().getBooleanVMFlag(\"MetaspaceGuardAllocations\");\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/Settings.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n+ * @modules java.base\/jdk.internal.misc java.management\n@@ -34,1 +33,0 @@\n- *\n@@ -36,1 +34,0 @@\n- *\n@@ -38,2 +35,0 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI  -XX:VerifyMetaspaceInterval=10  -XX:+MetaspaceGuardAllocations        TestMetaspaceAllocation\n- *\n@@ -46,2 +41,1 @@\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n+ * @modules java.base\/jdk.internal.misc java.management\n@@ -50,1 +44,0 @@\n- *\n@@ -52,2 +45,1 @@\n- *\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI                                        TestMetaspaceAllocation\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestMetaspaceAllocation\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocation.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n- * @test id=debug-default-strict\n+ * @test id=debug-default-long-manual\n@@ -77,18 +77,0 @@\n-\/*\n- * @test id=debug-guard\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @build jdk.test.whitebox.WhiteBox\n- * @key randomness\n- * @requires (vm.debug == true)\n- *\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- *\n- * @run main\/othervm\/timeout=400\n- *      -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:VerifyMetaspaceInterval=10\n- *      -XX:+MetaspaceGuardAllocations\n- *      TestMetaspaceAllocationMT1 3\n- *\/\n-\n@@ -133,1 +115,0 @@\n-            System.out.println(\"#### guards: \" + Settings.settings().usesAllocationGuards);\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT1.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n- * @test id=debug-default-strict\n+ * @test id=debug-default-long-manual\n@@ -77,18 +77,0 @@\n-\/*\n- * @test id=debug-guard\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @build jdk.test.whitebox.WhiteBox\n- * @key randomness\n- * @requires (vm.debug == true)\n- *\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- *\n- * @run main\/othervm\/timeout=400\n- *      -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:VerifyMetaspaceInterval=10\n- *      -XX:+MetaspaceGuardAllocations\n- *      TestMetaspaceAllocationMT2 3\n- *\/\n-\n@@ -132,1 +114,0 @@\n-            System.out.println(\"#### guards: \" + Settings.settings().usesAllocationGuards);\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT2.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"}]}