{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,8 +24,3 @@\n-\/**\n- * @test\n- * @bug 4956397\n- * @key printer\n- * @run main\/manual PageDlgPrnButton\n- *\/\n-\n-import java.awt.print.PrinterJob;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n@@ -35,0 +30,1 @@\n+import java.awt.print.PrinterJob;\n@@ -36,4 +32,1 @@\n-import java.awt.Graphics;\n-import java.awt.Graphics2D;\n-import java.awt.Rectangle;\n-import java.awt.* ;\n+import jtreg.SkippedException;\n@@ -41,0 +34,10 @@\n+\/*\n+ * @test\n+ * @bug 4956397\n+ * @key printer\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n+ * @run main\/manual PageDlgPrnButton\n+ *\/\n@@ -43,1 +46,0 @@\n-    public static void main ( String args[] ) {\n@@ -45,7 +47,6 @@\n-        String[] instructions =\n-           {\"For non-windows OS, this test PASSes.\",\n-            \"You must have at least 2 printers available to perform this test.\",\n-            \"This test brings up a native Windows page dialog.\",\n-            \"Click on the Printer... button and change the selected printer. \",\n-            \"Test passes if the printout comes from the new selected printer.\",\n-         };\n+    private static final String INSTRUCTIONS =\n+            \"For non-windows OS, this test PASSes.\\n\" +\n+            \"You must have at least 2 printers available to perform this test.\\n\" +\n+            \"This test brings up a native Windows page dialog.\\n\" +\n+            \"Click on the Printer... button and change the selected printer. \\n\" +\n+            \"Test passes if the printout comes from the new selected printer.\";\n@@ -53,2 +54,1 @@\n-         Sysout.createDialog( );\n-         Sysout.printInstructions( instructions );\n+    public static void main (String[] args) throws Exception {\n@@ -56,2 +56,5 @@\n-        PageDlgPrnButton pdpb = new PageDlgPrnButton() ;\n-    }\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build();\n@@ -59,8 +62,2 @@\n-    public PageDlgPrnButton()\n-    {\n-        try\n-        {\n-            pageDialogExample();\n-        }\n-        catch(Exception e)\n-        {e.printStackTrace(System.err);}\n+        new PageDlgPrnButton() ;\n+        passFailJFrame.awaitAndCheck();\n@@ -69,0 +66,3 @@\n+    public PageDlgPrnButton() throws PrinterException {\n+        pageDialogExample();\n+    }\n@@ -84,2 +84,0 @@\n-\n-\n@@ -116,114 +114,0 @@\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PageDlgPrnButton.java","additions":33,"deletions":149,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,16 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +44,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,7 +50,0 @@\n-\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.text.*;\n-\n@@ -40,66 +52,26 @@\n- private TextCanvas c;\n-\n- public static void main(String args[]) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test should print a page which contains the same\",\n-         \"text message as in the test window on the screen\",\n-         \"You should also monitor the command line to see if any exceptions\",\n-         \"were thrown\",\n-         \"If an exception is thrown, or the page doesn't print properly\",\n-         \"then the test fails\",\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    PrintCompoundString f = new PrintCompoundString();\n-    f.show();\n- }\n-\n- public PrintCompoundString() {\n-    super(\"JDK 1.2 drawString Printing\");\n-\n-    c = new TextCanvas();\n-    add(\"Center\", c);\n-\n-    Button printButton = new Button(\"Print\");\n-    printButton.addActionListener(this);\n-    add(\"South\", printButton);\n-\n-    addWindowListener(new WindowAdapter() {\n-       public void windowClosing(WindowEvent e) {\n-             System.exit(0);\n-            }\n-    });\n-\n-    pack();\n- }\n-\n- public void actionPerformed(ActionEvent e) {\n-\n-   PrinterJob pj = PrinterJob.getPrinterJob();\n-\n-   if (pj != null && pj.printDialog()) {\n-\n-       pj.setPrintable(c);\n-       try {\n-            pj.print();\n-      } catch (PrinterException pe) {\n-      } finally {\n-         System.err.println(\"PRINT RETURNED\");\n-      }\n-   }\n- }\n-\n- class TextCanvas extends Panel implements Printable {\n-\n-    String nullStr = null;\n-    String emptyStr = new String();\n-    AttributedString nullAttStr = null;\n-    AttributedString emptyAttStr = new AttributedString(emptyStr);\n-    AttributedCharacterIterator nullIterator = null;\n-    AttributedCharacterIterator emptyIterator = emptyAttStr.getIterator();\n-\n-    public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n+    private final TextCanvas c;\n+\n+    private static final String INSTRUCTIONS =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test should print a page which contains the same\\n\" +\n+            \"text message as in the test window on the screen\\n\" +\n+            \"You should also monitor the command line to see if any exceptions\\n\" +\n+            \"were thrown\\n\" +\n+            \"If an exception is thrown, or the page doesn't print properly\\n\" +\n+            \"then the test fails\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testUI(PrintCompoundString::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -107,2 +79,2 @@\n-      if (pgIndex > 0)\n-         return Printable.NO_SUCH_PAGE;\n+    public PrintCompoundString() {\n+        super(\"JDK 1.2 drawString Printing\");\n@@ -110,2 +82,2 @@\n-      Graphics2D g2d = (Graphics2D)g;\n-      g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n+        c = new TextCanvas();\n+        add(\"Center\", c);\n@@ -113,1 +85,3 @@\n-      paint(g);\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(this);\n+        add(\"South\", printButton);\n@@ -115,1 +89,1 @@\n-      return Printable.PAGE_EXISTS;\n+        pack();\n@@ -118,2 +92,1 @@\n-    public void paint(Graphics g1) {\n-        Graphics2D g = (Graphics2D)g1;\n+    public void actionPerformed(ActionEvent e) {\n@@ -121,2 +94,1 @@\n-          String str = \"Test string compound printing \\u2203\\u2200\\u2211\";\n-          g.drawString(str, 20, 40);\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -124,1 +96,1 @@\n-    }\n+        if (pj != null && pj.printDialog()) {\n@@ -126,2 +98,8 @@\n-     public Dimension getPreferredSize() {\n-        return new Dimension(450, 250);\n+            pj.setPrintable(c);\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+            } finally {\n+                System.err.println(\"PRINT RETURNED\");\n+            }\n+        }\n@@ -129,1 +107,0 @@\n- }\n@@ -131,1 +108,1 @@\n-}\n+    class TextCanvas extends Panel implements Printable {\n@@ -133,3 +110,1 @@\n-class Sysout\n- {\n-   private static TestDialog dialog;\n+        public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n@@ -137,7 +112,2 @@\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+            if (pgIndex > 0)\n+                return Printable.NO_SUCH_PAGE;\n@@ -145,8 +115,2 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n@@ -154,0 +118,1 @@\n+            paint(g);\n@@ -155,4 +120,2 @@\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+            return Printable.PAGE_EXISTS;\n+        }\n@@ -160,0 +123,2 @@\n+        public void paint(Graphics g1) {\n+            Graphics2D g = (Graphics2D) g1;\n@@ -161,4 +126,3 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n+            String str = \"Test string compound printing \\u2203\\u2200\\u2211\";\n+            g.drawString(str, 20, 40);\n+        }\n@@ -166,78 +130,3 @@\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+        public Dimension getPreferredSize() {\n+            return new Dimension(450, 250);\n+        }\n@@ -245,2 +134,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintCompoundString.java","additions":84,"deletions":196,"binary":false,"changes":280,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,19 @@\n-\/**\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +47,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,4 +53,0 @@\n-import java.awt.*;\n-import java.awt.print.*;\n-import java.awt.event.*;\n-\n@@ -37,1 +55,1 @@\n-        private PrintImageCanvas                printImageCanvas;\n+    private PrintImageCanvas printImageCanvas;\n@@ -39,3 +57,3 @@\n-        private MenuItem        print1Menu = new MenuItem(\"PrintTest1\");\n-        private MenuItem        print2Menu = new MenuItem(\"PrintTest2\");\n-        private MenuItem        exitMenu = new MenuItem(\"Exit\");\n+    private final MenuItem print1Menu = new MenuItem(\"PrintTest1\");\n+    private final MenuItem print2Menu = new MenuItem(\"PrintTest2\");\n+    private final MenuItem exitMenu = new MenuItem(\"Exit\");\n@@ -43,8 +61,7 @@\n-        public static void main(String[] argv) {\n-        String[] instructions =\n-           { \"You must have a printer available to perform this test,\",\n-             \"prefererably Canon LaserShot A309GII.\",\n-             \"Printing must be done in Win 98 Japanese 2nd Edition.\",\n-             \"\",\n-             \"Passing test : Output of text image for PrintTest1 and PrintTest2 should be same as that on the screen.\",\n-           };\n+    private static final String INSTRUCTIONS =\n+            \"You must have a printer available to perform this test,\\n\" +\n+            \"prefererably Canon LaserShot A309GII.\\n\" +\n+            \"Printing must be done in Win 98 Japanese 2nd Edition.\\n\" +\n+            \"\\n\" +\n+            \"Passing test : Output of text image for PrintTest1 and PrintTest2 should be \" +\n+            \"same as that on the screen.\";\n@@ -52,2 +69,1 @@\n-        Sysout.createDialog( );\n-         Sysout.printInstructions( instructions );\n+    public static void main(String[] argv) throws Exception {\n@@ -55,1 +71,3 @@\n-                new PrintImage();\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n@@ -58,4 +76,8 @@\n-        public PrintImage() {\n-                super(\"PrintImage\");\n-                initPrintImage();\n-        }\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testUI(PrintImage::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -63,1 +85,4 @@\n-        public void initPrintImage() {\n+    public PrintImage() {\n+        super(\"PrintImage\");\n+        initPrintImage();\n+    }\n@@ -65,1 +90,1 @@\n-                printImageCanvas = new PrintImageCanvas(this);\n+    public void initPrintImage() {\n@@ -67,1 +92,1 @@\n-                initMenu();\n+        printImageCanvas = new PrintImageCanvas(this);\n@@ -69,8 +94,1 @@\n-                addWindowListener(new WindowAdapter() {\n-                        public void windowClosing(WindowEvent ev) {\n-                                dispose();\n-                        }\n-                        public void windowClosed(WindowEvent ev) {\n-                                System.exit(0);\n-                        }\n-                });\n+        initMenu();\n@@ -78,3 +96,3 @@\n-                setLayout(new BorderLayout());\n-                add(printImageCanvas, BorderLayout.CENTER);\n-                pack();\n+        setLayout(new BorderLayout());\n+        add(printImageCanvas, BorderLayout.CENTER);\n+        pack();\n@@ -82,3 +100,2 @@\n-                setSize(500,500);\n-                setVisible(true);\n-        }\n+        setSize(500, 500);\n+    }\n@@ -86,14 +103,14 @@\n-        private void initMenu() {\n-                MenuBar         mb = new MenuBar();\n-                Menu            me = new Menu(\"File\");\n-                me.add(print1Menu);\n-                me.add(print2Menu);\n-                me.add(\"-\");\n-                me.add(exitMenu);\n-                mb.add(me);\n-                this.setMenuBar(mb);\n-\n-                print1Menu.addActionListener(this);\n-                print2Menu.addActionListener(this);\n-                exitMenu.addActionListener(this);\n-        }\n+    private void initMenu() {\n+        MenuBar mb = new MenuBar();\n+        Menu me = new Menu(\"File\");\n+        me.add(print1Menu);\n+        me.add(print2Menu);\n+        me.add(\"-\");\n+        me.add(exitMenu);\n+        mb.add(me);\n+        this.setMenuBar(mb);\n+\n+        print1Menu.addActionListener(this);\n+        print2Menu.addActionListener(this);\n+        exitMenu.addActionListener(this);\n+    }\n@@ -101,11 +118,8 @@\n-        public void actionPerformed(ActionEvent e) {\n-                Object target = e.getSource();\n-                if( target.equals(print1Menu) ) {\n-                        printMain1();\n-                }\n-                else if( target.equals(print2Menu) ) {\n-                        printMain2();\n-                }\n-                else if( target.equals(exitMenu) ) {\n-                        dispose();\n-                }\n+    public void actionPerformed(ActionEvent e) {\n+        Object target = e.getSource();\n+        if (target.equals(print1Menu)) {\n+            printMain1();\n+        } else if (target.equals(print2Menu)) {\n+            printMain2();\n+        } else if (target.equals(exitMenu)) {\n+            dispose();\n@@ -113,0 +127,1 @@\n+    }\n@@ -114,1 +129,1 @@\n-        private void printMain1(){\n+    private void printMain1() {\n@@ -116,2 +131,2 @@\n-                PrinterJob printerJob = PrinterJob.getPrinterJob();\n-                PageFormat pageFormat = printerJob.defaultPage();\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\n+        PageFormat pageFormat = printerJob.defaultPage();\n@@ -119,1 +134,1 @@\n-                printerJob.setPrintable((Printable)printImageCanvas, pageFormat);\n+        printerJob.setPrintable(printImageCanvas, pageFormat);\n@@ -121,10 +136,9 @@\n-                if(printerJob.printDialog()){\n-                        try {\n-                                printerJob.print();\n-                        }\n-                        catch(PrinterException p){\n-                        }\n-                }\n-                else\n-                        printerJob.cancel();\n-        }\n+        if (printerJob.printDialog()) {\n+            try {\n+                printerJob.print();\n+            } catch (PrinterException e) {\n+                e.printStackTrace();\n+            }\n+        } else\n+            printerJob.cancel();\n+    }\n@@ -132,1 +146,1 @@\n-        private void printMain2(){\n+    private void printMain2() {\n@@ -134,2 +148,2 @@\n-                PrinterJob printerJob = PrinterJob.getPrinterJob();\n-                PageFormat pageFormat = printerJob.pageDialog(printerJob.defaultPage());\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\n+        PageFormat pageFormat = printerJob.pageDialog(printerJob.defaultPage());\n@@ -137,12 +151,1 @@\n-                printerJob.setPrintable((Printable)printImageCanvas, pageFormat);\n-\n-                if(printerJob.printDialog()){\n-                        try {\n-                                printerJob.print();\n-                        }\n-                        catch(PrinterException p){\n-                        }\n-                }\n-                else\n-                        printerJob.cancel();\n-        }\n+        printerJob.setPrintable(printImageCanvas, pageFormat);\n@@ -150,0 +153,9 @@\n+        if (printerJob.printDialog()) {\n+            try {\n+                printerJob.print();\n+            } catch (PrinterException e) {\n+                e.printStackTrace();\n+            }\n+        } else\n+            printerJob.cancel();\n+    }\n@@ -154,48 +166,1 @@\n-        private PrintImage pdsFrame;\n-\n-        public PrintImageCanvas(PrintImage pds) {\n-                pdsFrame = pds;\n-        }\n-\n-        public void paint(Graphics g) {\n-                Font drawFont = new Font(\"MS Mincho\",Font.ITALIC,50);\n-                g.setFont(drawFont);\n-                g.drawString(\"PrintSample!\",100,150);\n-        }\n-\n-        public int print(Graphics g, PageFormat pf, int pi)\n-                throws PrinterException {\n-\n-                if(pi>=1)\n-                        return NO_SUCH_PAGE;\n-                else{\n-                        Graphics2D g2 = (Graphics2D)g;\n-                        g.setColor(new Color(0,0,0,200));\n-\n-                        Font drawFont = new Font(\"MS Mincho\",Font.ITALIC,50);\n-                        g.setFont(drawFont);\n-                        g.drawString(\"PrintSample!\",100,150);\n-                        return PAGE_EXISTS;\n-                }\n-        }\n-}\n-\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    public PrintImageCanvas(PrintImage pds) {\n@@ -204,4 +169,4 @@\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n+    public void paint(Graphics g) {\n+        Font drawFont = new Font(\"MS Mincho\", Font.ITALIC, 50);\n+        g.setFont(drawFont);\n+        g.drawString(\"PrintSample!\", 100, 150);\n@@ -210,0 +175,2 @@\n+    public int print(Graphics g, PageFormat pf, int pi)\n+            throws PrinterException {\n@@ -211,4 +178,4 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n+        if (pi >= 1)\n+            return NO_SUCH_PAGE;\n+        else {\n+            g.setColor(new Color(0, 0, 0, 200));\n@@ -216,78 +183,5 @@\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+            Font drawFont = new Font(\"MS Mincho\", Font.ITALIC, 50);\n+            g.setFont(drawFont);\n+            g.drawString(\"PrintSample!\", 100, 150);\n+            return PAGE_EXISTS;\n+        }\n@@ -295,2 +189,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintImage.java","additions":125,"deletions":232,"binary":false,"changes":357,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,18 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +46,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,7 +52,0 @@\n-\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.text.*;\n-\n@@ -40,25 +54,28 @@\n- private TextCanvas c;\n-\n- public static void main(String args[]) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test should print a page which contains the same\",\n-         \"text messages as in the test window on the screen\",\n-         \"The messages should contain only 'OK' and 'expected' messages\",\n-         \"There should be no FAILURE messages.\",\n-         \"You should also monitor the command line to see if any exceptions\",\n-         \"were thrown\",\n-         \"If the page fails to print, but there were no exceptions\",\n-         \"then the problem is likely elsewhere (ie your printer)\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    PrintNullString f = new PrintNullString();\n-    f.show();\n- }\n-\n- public PrintNullString() {\n-    super(\"JDK 1.2 drawString Printing\");\n+    private final TextCanvas c;\n+\n+    private static final String INSTRUCTIONS =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test should print a page which contains the same\\n\" +\n+            \"text messages as in the test window on the screen\\n\" +\n+            \"The messages should contain only 'OK' and 'expected' messages\\n\" +\n+            \"There should be no FAILURE messages.\\n\" +\n+            \"You should also monitor the command line to see if any exceptions\\n\" +\n+            \"were thrown\\n\" +\n+            \"If the page fails to print, but there were no exceptions\\n\" +\n+            \"then the problem is likely elsewhere (ie your printer)\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testUI(PrintNullString::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -66,2 +83,2 @@\n-    c = new TextCanvas();\n-    add(\"Center\", c);\n+    public PrintNullString() {\n+        super(\"JDK 1.2 drawString Printing\");\n@@ -69,3 +86,2 @@\n-    Button printButton = new Button(\"Print\");\n-    printButton.addActionListener(this);\n-    add(\"South\", printButton);\n+        c = new TextCanvas();\n+        add(\"Center\", c);\n@@ -73,5 +89,3 @@\n-    addWindowListener(new WindowAdapter() {\n-       public void windowClosing(WindowEvent e) {\n-             System.exit(0);\n-            }\n-    });\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(this);\n+        add(\"South\", printButton);\n@@ -79,2 +93,2 @@\n-    pack();\n- }\n+        pack();\n+    }\n@@ -82,1 +96,1 @@\n- public void actionPerformed(ActionEvent e) {\n+    public void actionPerformed(ActionEvent e) {\n@@ -84,1 +98,1 @@\n-   PrinterJob pj = PrinterJob.getPrinterJob();\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -86,1 +100,1 @@\n-   if (pj != null && pj.printDialog()) {\n+        if (pj != null && pj.printDialog()) {\n@@ -88,9 +102,9 @@\n-       pj.setPrintable(c);\n-       try {\n-            pj.print();\n-      } catch (PrinterException pe) {\n-      } finally {\n-         System.err.println(\"PRINT RETURNED\");\n-      }\n-   }\n- }\n+            pj.setPrintable(c);\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+            } finally {\n+                System.out.println(\"PRINT RETURNED\");\n+            }\n+        }\n+    }\n@@ -98,1 +112,1 @@\n- class TextCanvas extends Panel implements Printable {\n+    static class TextCanvas extends Panel implements Printable {\n@@ -100,6 +114,5 @@\n-    String nullStr = null;\n-    String emptyStr = new String();\n-    AttributedString nullAttStr = null;\n-    AttributedString emptyAttStr = new AttributedString(emptyStr);\n-    AttributedCharacterIterator nullIterator = null;\n-    AttributedCharacterIterator emptyIterator = emptyAttStr.getIterator();\n+        String nullStr = null;\n+        String emptyStr = \"\";\n+        AttributedString emptyAttStr = new AttributedString(emptyStr);\n+        AttributedCharacterIterator nullIterator = null;\n+        AttributedCharacterIterator emptyIterator = emptyAttStr.getIterator();\n@@ -107,1 +120,1 @@\n-    public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n+        public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n@@ -109,2 +122,2 @@\n-      if (pgIndex > 0)\n-         return Printable.NO_SUCH_PAGE;\n+            if (pgIndex > 0)\n+                return Printable.NO_SUCH_PAGE;\n@@ -112,2 +125,2 @@\n-      Graphics2D g2d = (Graphics2D)g;\n-      g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n@@ -115,1 +128,1 @@\n-      paint(g);\n+            paint(g);\n@@ -117,2 +130,2 @@\n-      return Printable.PAGE_EXISTS;\n-    }\n+            return Printable.PAGE_EXISTS;\n+        }\n@@ -120,2 +133,2 @@\n-    public void paint(Graphics g1) {\n-        Graphics2D g = (Graphics2D)g1;\n+        public void paint(Graphics g1) {\n+            Graphics2D g = (Graphics2D) g1;\n@@ -123,7 +136,7 @@\n-        \/\/ API 1: null & empty drawString(String, int, int);\n-        try {\n-             g.drawString(nullStr, 20, 40);\n-             g.drawString(\"FAILURE: No NPE for null String, int\", 20, 40);\n-        } catch (NullPointerException e) {\n-          g.drawString(\"caught expected NPE for null String, int\", 20, 40);\n-        }\/* catch (Exception e) {\n+            \/\/ API 1: null & empty drawString(String, int, int);\n+            try {\n+                g.drawString(nullStr, 20, 40);\n+                g.drawString(\"FAILURE: No NPE for null String, int\", 20, 40);\n+            } catch (NullPointerException e) {\n+                g.drawString(\"caught expected NPE for null String, int\", 20, 40);\n+            }\/* catch (Exception e) {\n@@ -134,3 +147,3 @@\n-        \/\/try {\n-             g.drawString(emptyStr, 20, 60);\n-             g.drawString(\"OK for empty String, int\", 20, 60);\n+            \/\/try {\n+            g.drawString(emptyStr, 20, 60);\n+            g.drawString(\"OK for empty String, int\", 20, 60);\n@@ -142,8 +155,7 @@\n-\n-        \/\/ API 2: null & empty drawString(String, float, float);\n-        try {\n-             g.drawString(nullStr, 20.0f, 80.0f);\n-             g.drawString(\"FAILURE: No NPE for null String, float\", 20, 80);\n-        } catch (NullPointerException e) {\n-          g.drawString(\"caught expected NPE for null String, float\", 20, 80);\n-        } \/*catch (Exception e) {\n+            \/\/ API 2: null & empty drawString(String, float, float);\n+            try {\n+                g.drawString(nullStr, 20.0f, 80.0f);\n+                g.drawString(\"FAILURE: No NPE for null String, float\", 20, 80);\n+            } catch (NullPointerException e) {\n+                g.drawString(\"caught expected NPE for null String, float\", 20, 80);\n+            } \/*catch (Exception e) {\n@@ -153,3 +165,3 @@\n-        \/\/try {\n-             g.drawString(emptyStr, 20.0f, 100.0f);\n-             g.drawString(\"OK for empty String, float\", 20.0f, 100.f);\n+            \/\/try {\n+            g.drawString(emptyStr, 20.0f, 100.0f);\n+            g.drawString(\"OK for empty String, float\", 20.0f, 100.f);\n@@ -161,7 +173,7 @@\n-        \/\/ API 3: null & empty drawString(Iterator, int, int);\n-        try {\n-             g.drawString(nullIterator, 20, 120);\n-             g.drawString(\"FAILURE: No NPE for null iterator, float\", 20, 120);\n-        } catch (NullPointerException e) {\n-          g.drawString(\"caught expected NPE for null iterator, int\", 20, 120);\n-        } \/*catch (Exception e) {\n+            \/\/ API 3: null & empty drawString(Iterator, int, int);\n+            try {\n+                g.drawString(nullIterator, 20, 120);\n+                g.drawString(\"FAILURE: No NPE for null iterator, float\", 20, 120);\n+            } catch (NullPointerException e) {\n+                g.drawString(\"caught expected NPE for null iterator, int\", 20, 120);\n+            } \/*catch (Exception e) {\n@@ -171,6 +183,6 @@\n-        try {\n-             g.drawString(emptyIterator, 20, 140);\n-             g.drawString(\"FAILURE: No IAE for empty iterator, int\",\n-                           20, 140);\n-        } catch (IllegalArgumentException e) {\n-          g.drawString(\"caught expected IAE for empty iterator, int\",\n+            try {\n+                g.drawString(emptyIterator, 20, 140);\n+                g.drawString(\"FAILURE: No IAE for empty iterator, int\",\n+                        20, 140);\n+            } catch (IllegalArgumentException e) {\n+                g.drawString(\"caught expected IAE for empty iterator, int\",\n@@ -178,1 +190,1 @@\n-        } \/*catch (Exception e) {\n+            } \/*catch (Exception e) {\n@@ -183,8 +195,7 @@\n-\n-        \/\/ API 4: null & empty drawString(Iterator, float, int);\n-        try {\n-             g.drawString(nullIterator, 20.0f, 160.0f);\n-             g.drawString(\"FAILURE: No NPE for null iterator, float\", 20, 160);\n-        } catch (NullPointerException e) {\n-          g.drawString(\"caught expected NPE for null iterator, float\", 20, 160);\n-        } \/*catch (Exception e) {\n+            \/\/ API 4: null & empty drawString(Iterator, float, int);\n+            try {\n+                g.drawString(nullIterator, 20.0f, 160.0f);\n+                g.drawString(\"FAILURE: No NPE for null iterator, float\", 20, 160);\n+            } catch (NullPointerException e) {\n+                g.drawString(\"caught expected NPE for null iterator, float\", 20, 160);\n+            } \/*catch (Exception e) {\n@@ -195,6 +206,6 @@\n-        try {\n-             g.drawString(emptyIterator, 20, 180);\n-             g.drawString(\"FAILURE: No IAE for empty iterator, float\",\n-                           20, 180);\n-        } catch (IllegalArgumentException e) {\n-          g.drawString(\"caught expected IAE for empty iterator, float\",\n+            try {\n+                g.drawString(emptyIterator, 20, 180);\n+                g.drawString(\"FAILURE: No IAE for empty iterator, float\",\n+                        20, 180);\n+            } catch (IllegalArgumentException e) {\n+                g.drawString(\"caught expected IAE for empty iterator, float\",\n@@ -202,1 +213,1 @@\n-        } \/*catch (Exception e) {\n+            } \/*catch (Exception e) {\n@@ -206,1 +217,1 @@\n-    }\n+        }\n@@ -208,2 +219,3 @@\n-     public Dimension getPreferredSize() {\n-        return new Dimension(450, 250);\n+        public Dimension getPreferredSize() {\n+            return new Dimension(450, 250);\n+        }\n@@ -211,2 +223,0 @@\n- }\n-\n@@ -214,115 +224,0 @@\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintNullString.java","additions":140,"deletions":245,"binary":false,"changes":385,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,16 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +44,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,7 +50,0 @@\n-\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.text.*;\n-\n@@ -40,66 +52,26 @@\n- private TextCanvas c;\n-\n- public static void main(String args[]) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test should print a page which contains the same\",\n-         \"text message as in the test window on the screen\",\n-         \"You should also monitor the command line to see if any exceptions\",\n-         \"were thrown\",\n-         \"If an exception is thrown, or the page doesn't print properly\",\n-         \"then the test fails\",\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    PrintParenString f = new PrintParenString();\n-    f.show();\n- }\n-\n- public PrintParenString() {\n-    super(\"JDK 1.2 drawString Printing\");\n-\n-    c = new TextCanvas();\n-    add(\"Center\", c);\n-\n-    Button printButton = new Button(\"Print\");\n-    printButton.addActionListener(this);\n-    add(\"South\", printButton);\n-\n-    addWindowListener(new WindowAdapter() {\n-       public void windowClosing(WindowEvent e) {\n-             System.exit(0);\n-            }\n-    });\n-\n-    pack();\n- }\n-\n- public void actionPerformed(ActionEvent e) {\n-\n-   PrinterJob pj = PrinterJob.getPrinterJob();\n-\n-   if (pj != null && pj.printDialog()) {\n-\n-       pj.setPrintable(c);\n-       try {\n-            pj.print();\n-      } catch (PrinterException pe) {\n-      } finally {\n-         System.err.println(\"PRINT RETURNED\");\n-      }\n-   }\n- }\n-\n- class TextCanvas extends Panel implements Printable {\n-\n-    String nullStr = null;\n-    String emptyStr = new String();\n-    AttributedString nullAttStr = null;\n-    AttributedString emptyAttStr = new AttributedString(emptyStr);\n-    AttributedCharacterIterator nullIterator = null;\n-    AttributedCharacterIterator emptyIterator = emptyAttStr.getIterator();\n-\n-    public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n+    private final TextCanvas c;\n+\n+    private static final String INSTRUCTIONS =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test should print a page which contains the same\\n\" +\n+            \"text message as in the test window on the screen\\n\" +\n+            \"You should also monitor the command line to see if any exceptions\\n\" +\n+            \"were thrown\\n\" +\n+            \"If an exception is thrown, or the page doesn't print properly\\n\" +\n+            \"then the test fails\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testUI(PrintParenString::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -107,2 +79,2 @@\n-      if (pgIndex > 0)\n-         return Printable.NO_SUCH_PAGE;\n+    public PrintParenString() {\n+        super(\"JDK 1.2 drawString Printing\");\n@@ -110,2 +82,2 @@\n-      Graphics2D g2d = (Graphics2D)g;\n-      g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n+        c = new TextCanvas();\n+        add(\"Center\", c);\n@@ -113,1 +85,3 @@\n-      paint(g);\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(this);\n+        add(\"South\", printButton);\n@@ -115,1 +89,1 @@\n-      return Printable.PAGE_EXISTS;\n+        pack();\n@@ -118,2 +92,1 @@\n-    public void paint(Graphics g1) {\n-        Graphics2D g = (Graphics2D)g1;\n+    public void actionPerformed(ActionEvent e) {\n@@ -121,2 +94,1 @@\n-          String str = \"String containing unclosed parenthesis (.\";\n-          g.drawString(str, 20, 40);\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -124,1 +96,1 @@\n-    }\n+        if (pj != null && pj.printDialog()) {\n@@ -126,2 +98,9 @@\n-     public Dimension getPreferredSize() {\n-        return new Dimension(450, 250);\n+            pj.setPrintable(c);\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+                pe.printStackTrace();\n+            } finally {\n+                System.out.println(\"PRINT RETURNED\");\n+            }\n+        }\n@@ -129,1 +108,0 @@\n- }\n@@ -131,1 +109,1 @@\n-}\n+    class TextCanvas extends Panel implements Printable {\n@@ -133,3 +111,1 @@\n-class Sysout\n- {\n-   private static TestDialog dialog;\n+        public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n@@ -137,7 +113,2 @@\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+            if (pgIndex > 0)\n+                return Printable.NO_SUCH_PAGE;\n@@ -145,8 +116,2 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n@@ -154,0 +119,1 @@\n+            paint(g);\n@@ -155,4 +121,2 @@\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+            return Printable.PAGE_EXISTS;\n+        }\n@@ -160,0 +124,2 @@\n+        public void paint(Graphics g1) {\n+            Graphics2D g = (Graphics2D) g1;\n@@ -161,4 +127,2 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n+            String str = \"String containing unclosed parenthesis (.\";\n+            g.drawString(str, 20, 40);\n@@ -166,79 +130,1 @@\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n+        }\n@@ -246,1 +132,5 @@\n- }\/\/ TestDialog  class\n+        public Dimension getPreferredSize() {\n+            return new Dimension(450, 250);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintParenString.java","additions":86,"deletions":196,"binary":false,"changes":282,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,19 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.geom.AffineTransform;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -28,0 +46,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,8 +53,0 @@\n-\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.geom.*;\n-import java.awt.print.*;\n-import java.text.*;\n-\n@@ -41,70 +55,26 @@\n- private TextCanvas c;\n-\n- public static void main(String args[]) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test should print a page which contains the same\",\n-         \"content as the test window on the screen, in particular the lines\",\n-         \"should be immediately under the text\",\n-         \"You should also monitor the command line to see if any exceptions\",\n-         \"were thrown\",\n-         \"If an exception is thrown, or the page doesn't print properly\",\n-         \"then the test fails\",\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    PrintTranslatedFont f = new PrintTranslatedFont();\n-    f.show();\n- }\n-\n- public PrintTranslatedFont() {\n-    super(\"JDK 1.2 drawString Printing\");\n-\n-    c = new TextCanvas();\n-    add(\"Center\", c);\n-\n-    Button printButton = new Button(\"Print\");\n-    printButton.addActionListener(this);\n-    add(\"South\", printButton);\n-\n-    addWindowListener(new WindowAdapter() {\n-       public void windowClosing(WindowEvent e) {\n-             System.exit(0);\n-            }\n-    });\n-\n-    pack();\n- }\n-\n- public void actionPerformed(ActionEvent e) {\n-\n-   PrinterJob pj = PrinterJob.getPrinterJob();\n-\n-   if (pj != null && pj.printDialog()) {\n-\n-       pj.setPrintable(c);\n-       try {\n-            pj.print();\n-      } catch (PrinterException pe) {\n-      } finally {\n-         System.err.println(\"PRINT RETURNED\");\n-      }\n-   }\n- }\n-\n- class TextCanvas extends Panel implements Printable {\n-\n-    public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n-\n-      if (pgIndex > 0)\n-         return Printable.NO_SUCH_PAGE;\n-\n-      Graphics2D g2d = (Graphics2D)g;\n-      g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n-\n-      paint(g);\n-\n-      return Printable.PAGE_EXISTS;\n+    private final TextCanvas c;\n+\n+    private static final String INSTRUCTIONS =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test should print a page which contains the same\\n\" +\n+            \"content as the test window on the screen, in particular the lines\\n\" +\n+            \"should be immediately under the text\\n\" +\n+            \"You should also monitor the command line to see if any exceptions\\n\" +\n+            \"were thrown\\n\" +\n+            \"If an exception is thrown, or the page doesn't print properly\\n\" +\n+            \"then the test fails\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testUI(PrintTranslatedFont::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n@@ -113,9 +83,2 @@\n-    public void paint(Graphics g1) {\n-        Graphics2D g = (Graphics2D)g1;\n-\n-          Font f = new Font(\"Dialog\", Font.PLAIN, 20);\n-          int tx = 20;\n-          int ty = 20;\n-          AffineTransform at = AffineTransform.getTranslateInstance(tx, ty);\n-          f = f.deriveFont(at);\n-          g.setFont(f);\n+    public PrintTranslatedFont() {\n+        super(\"JDK 1.2 drawString Printing\");\n@@ -123,6 +86,2 @@\n-          FontMetrics fm = g.getFontMetrics();\n-          String str = \"Basic ascii string\";\n-          int sw = fm.stringWidth(str);\n-          int posx = 20, posy = 40;\n-          g.drawString(str, posx, posy);\n-          g.drawLine(posx+tx, posy+ty+2, posx+tx+sw, posy+ty+2);\n+        c = new TextCanvas();\n+        add(\"Center\", c);\n@@ -130,6 +89,3 @@\n-          posx = 20; posy = 70;\n-          str = \"Test string compound printing \\u2203\\u2200\";\n-          sw = fm.stringWidth(str);\n-          g.drawString(str, posx, posy);\n-          g.drawLine(posx+tx, posy+ty+2, posx+tx+sw, posy+ty+2);\n-    }\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(this);\n+        add(\"South\", printButton);\n@@ -137,2 +93,1 @@\n-     public Dimension getPreferredSize() {\n-        return new Dimension(450, 250);\n+        pack();\n@@ -140,1 +95,0 @@\n- }\n@@ -142,1 +96,1 @@\n-}\n+    public void actionPerformed(ActionEvent e) {\n@@ -144,3 +98,1 @@\n-class Sysout\n- {\n-   private static TestDialog dialog;\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -148,22 +100,1 @@\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+        if (pj != null && pj.printDialog()) {\n@@ -171,4 +102,9 @@\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n+            pj.setPrintable(c);\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+                pe.printStackTrace();\n+            } finally {\n+                System.out.println(\"PRINT RETURNED\");\n+            }\n+        }\n@@ -177,23 +113,1 @@\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n+    static class TextCanvas extends Panel implements Printable {\n@@ -201,2 +115,1 @@\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n+        public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n@@ -204,1 +117,2 @@\n-      pack();\n+            if (pgIndex > 0)\n+                return Printable.NO_SUCH_PAGE;\n@@ -206,2 +120,2 @@\n-      show();\n-    }\/\/ TestDialog()\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n@@ -209,5 +123,1 @@\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n+            paint(g);\n@@ -215,1 +125,2 @@\n-      \/\/Go down array of instruction strings\n+            return Printable.PAGE_EXISTS;\n+        }\n@@ -217,13 +128,2 @@\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n+        public void paint(Graphics g1) {\n+            Graphics2D g = (Graphics2D) g1;\n@@ -231,1 +131,6 @@\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n+            Font f = new Font(\"Dialog\", Font.PLAIN, 20);\n+            int tx = 20;\n+            int ty = 20;\n+            AffineTransform at = AffineTransform.getTranslateInstance(tx, ty);\n+            f = f.deriveFont(at);\n+            g.setFont(f);\n@@ -233,9 +138,6 @@\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n+            FontMetrics fm = g.getFontMetrics();\n+            String str = \"Basic ascii string\";\n+            int sw = fm.stringWidth(str);\n+            int posx = 20, posy = 40;\n+            g.drawString(str, posx, posy);\n+            g.drawLine(posx + tx, posy + ty + 2, posx + tx + sw, posy + ty + 2);\n@@ -243,1 +145,7 @@\n-            instructionsText.append( printStr + \"\\n\" );\n+            posx = 20;\n+            posy = 70;\n+            str = \"Test string compound printing \\u2203\\u2200\";\n+            sw = fm.stringWidth(str);\n+            g.drawString(str, posx, posy);\n+            g.drawLine(posx + tx, posy + ty + 2, posx + tx + sw, posy + ty + 2);\n+        }\n@@ -245,10 +153,3 @@\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+        public Dimension getPreferredSize() {\n+            return new Dimension(450, 250);\n+        }\n@@ -256,2 +157,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintTranslatedFont.java","additions":104,"deletions":204,"binary":false,"changes":308,"status":"modified"}]}