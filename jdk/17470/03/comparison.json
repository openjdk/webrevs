{"files":[{"patch":"@@ -74,0 +74,9 @@\n+#ifndef PRODUCT\n+bool AgeTable::is_clear() const {\n+  for (const size_t* p = sizes; p < sizes + table_size; ++p) {\n+    if (*p != 0) return false;\n+  }\n+  return true;\n+}\n+#endif \/\/ !PRODUCT\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/ageTable.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -39,1 +40,1 @@\n-class AgeTable {\n+class AgeTable: public CHeapObj<mtGC> {\n@@ -56,0 +57,5 @@\n+#ifndef PRODUCT\n+  \/\/ check whether it's clear\n+  bool is_clear() const;\n+#endif \/\/ !PRODUCT\n+\n@@ -60,1 +66,1 @@\n-    assert(age > 0 && age < table_size, \"invalid age of object\");\n+    assert(age < table_size, \"invalid age of object\");\n@@ -64,2 +70,1 @@\n-  \/\/ Merge another age table with the current one.  Used\n-  \/\/ for parallel young generation gc.\n+  \/\/ Merge another age table with the current one.\n","filename":"src\/hotspot\/share\/gc\/shared\/ageTable.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}