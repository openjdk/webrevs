{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1242,1 +1242,1 @@\n-         * List of types undergoing construction via explicit constructor chaining.\n+         * List of types undergoing construction, i.e., in an early construction context.\n@@ -1283,9 +1283,4 @@\n-            List<ClassSymbol> previousNascentTypes = typesUnderConstruction;\n-            try {\n-                Name methName = TreeInfo.name(tree.meth);\n-                if (methName == names._this || methName == names._super) {\n-                    typesUnderConstruction = typesUnderConstruction.prepend(currentClass());\n-                }\n-                super.visitApply(tree);\n-            } finally {\n-                typesUnderConstruction = previousNascentTypes;\n+            super.visitApply(tree);\n+            if (TreeInfo.isConstructorCall(tree)) {\n+                Assert.check(typesUnderConstruction.head == currentClass());\n+                typesUnderConstruction = typesUnderConstruction.tail;   \/\/ end of early construction context\n@@ -1442,0 +1437,1 @@\n+            List<ClassSymbol> prevTypesUnderConstruction = typesUnderConstruction;\n@@ -1444,0 +1440,2 @@\n+                if (TreeInfo.hasAnyConstructorCall(tree))   \/\/ start early construction context\n+                    typesUnderConstruction = typesUnderConstruction.prepend(currentClass());\n@@ -1446,2 +1444,1 @@\n-            }\n-            finally {\n+            } finally {\n@@ -1449,0 +1446,1 @@\n+                typesUnderConstruction = prevTypesUnderConstruction;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8194743\n+ * @summary Test lambda declared in early construction context\n+ * @enablePreview\n+ *\/\n+\n+public class LambdaOuterCapture {\n+\n+    public class Inner {\n+\n+        public Inner() {\n+            Runnable r = () -> System.out.println(LambdaOuterCapture.this);\n+            this(r);\n+        }\n+\n+        public Inner(Runnable r) {\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new LambdaOuterCapture().new Inner();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/LambdaOuterCapture.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}