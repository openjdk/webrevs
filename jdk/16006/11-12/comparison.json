{"files":[{"patch":"@@ -196,54 +196,0 @@\n-    static String scale2(long value) {\n-        long valueAbs = Math.abs(value);\n-        long highInt = valueAbs \/ 100;\n-        byte[] buf = new byte[Long.stringSize(highInt) + (value < 0 ? 4 : 3)];\n-        int p = buf.length - 2;\n-        writeDigitPair(buf, p, (int) (valueAbs % 100));\n-        buf[--p] = '.';\n-        getChars(highInt, p, buf);\n-        if (value < 0) {\n-            buf[0] = '-';\n-        }\n-        if (String.COMPACT_STRINGS) {\n-            return new String(buf, LATIN1);\n-        }\n-        return new String(inflate(buf, 0, buf.length), UTF16);\n-    }\n-\n-    static String scale(int value, int scale) {\n-        int valueAbs = Math.abs(value);\n-        int coeffLen = 1;\n-        int power = 10;\n-        for (int p = 10; p <= valueAbs && coeffLen < 10; p *= 10, coeffLen++) {\n-            if (coeffLen == scale) {\n-                power = p;\n-            }\n-        }\n-\n-        int fillZeros = scale - coeffLen; \/\/ Insert decimal point\n-        byte[] buf;\n-        if (fillZeros < 0) {              \/\/ Point goes inside intVal\n-            buf = new byte[coeffLen + (value < 0 ? 2 : 1)];\n-            int p = getChars(power + valueAbs % power, buf.length, buf);\n-            buf[p] = '.';\n-            getChars(valueAbs \/ power, p, buf);\n-        } else {\n-            \/\/ We must insert zeros between point and intVal\n-            buf = new byte[coeffLen + fillZeros + (value < 0 ? 3 : 2)];\n-            int p = getChars(valueAbs, buf.length, buf);\n-            for (int i = 0; i < fillZeros; i++) {\n-                buf[--p] = '0';\n-            }\n-            buf[p - 1] = '.';\n-            buf[p - 2] = '0';\n-        }\n-        if (value < 0) {\n-            buf[0] = '-';\n-        }\n-\n-        if (String.COMPACT_STRINGS) {\n-            return new String(buf, LATIN1);\n-        }\n-        return new String(inflate(buf, 0, buf.length), UTF16);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2506,8 +2506,0 @@\n-            public String scale(int i, int scale) {\n-                return StringLatin1.scale(i, scale);\n-            }\n-\n-            public String scale2(long i) {\n-                return StringLatin1.scale2(i);\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.invoke.*;\n@@ -42,2 +43,1 @@\n-import jdk.internal.access.JavaLangAccess;\n-import jdk.internal.access.SharedSecrets;\n+import jdk.internal.util.DecimalDigits;\n@@ -314,1 +314,0 @@\n-    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n@@ -3485,1 +3484,1 @@\n-            return JLA.scale2(intCompact);\n+            return ConcatHelper.scale2(intCompact);\n@@ -3514,6 +3513,0 @@\n-        if (intCompact != INFLATED\n-                && intCompact >= Integer.MIN_VALUE\n-                && intCompact <= Integer.MAX_VALUE\n-                && scale < 512)\n-            return JLA.scale((int) intCompact, scale);\n-\n@@ -4174,0 +4167,46 @@\n+    private static final class ConcatHelper {\n+        static final MethodHandle NEGATIVE_ZERO_CHAR_CHAR;\n+        static final MethodHandle LONG_DOT_CHAR_CHAR;\n+        static final MethodHandle INT_DOT_CHAR_CHAR;\n+        static {\n+            try {\n+                MethodHandles.Lookup lookup = MethodHandles.lookup();\n+                NEGATIVE_ZERO_CHAR_CHAR = StringConcatFactory.makeConcatWithConstants(\n+                        lookup,\n+                        \"neg_zero_scale2\",\n+                        MethodType.methodType(String.class, char.class, char.class),\n+                        \"-0.\\1\\1\").dynamicInvoker();\n+                LONG_DOT_CHAR_CHAR = StringConcatFactory.makeConcatWithConstants(\n+                        lookup,\n+                        \"scale2\",\n+                        MethodType.methodType(String.class, long.class, char.class, char.class),\n+                        \"\\1.\\1\\1\").dynamicInvoker();\n+                INT_DOT_CHAR_CHAR = StringConcatFactory.makeConcatWithConstants(\n+                        lookup,\n+                        \"scale2\",\n+                        MethodType.methodType(String.class, int.class, char.class, char.class),\n+                        \"\\1.\\1\\1\").dynamicInvoker();\n+            } catch (Exception e) {\n+                throw new Error(\"Bootstrap error\", e);\n+            }\n+        }\n+\n+        static String scale2(long intCompact) {\n+            long highInt = intCompact \/ 100;\n+            short pair = DecimalDigits.digitPair((int)(Math.abs(intCompact) % 100));\n+            char c0 = (char)(pair & 0xff);\n+            char c1 = (char)(pair >> 8);\n+            try {\n+                if (highInt == 0 && intCompact < 0)\n+                    return (String) NEGATIVE_ZERO_CHAR_CHAR.invokeExact(c0, c1);\n+\n+                if (highInt >= Integer.MIN_VALUE && highInt <= Integer.MAX_VALUE)\n+                    return (String) INT_DOT_CHAR_CHAR.invokeExact((int) highInt, c0, c1);\n+\n+                return (String) LONG_DOT_CHAR_CHAR.invokeExact(highInt, c0, c1);\n+            } catch (Throwable e) {\n+                throw new AssertionError(e);\n+            }\n+        }\n+    }\n+\n@@ -4188,8 +4227,3 @@\n-        if (intCompact != INFLATED) {\n-            \/\/ currency fast path\n-            if (scale == 2)\n-                return JLA.scale2(intCompact);\n-\n-            if (scale > 0 && scale <= 6 && intCompact >= Integer.MIN_VALUE && intCompact <= Integer.MAX_VALUE)\n-                return JLA.scale((int) intCompact, scale);\n-        }\n+        \/\/ currency fast path\n+        if (scale == 2 && intCompact != INFLATED)\n+            return ConcatHelper.scale2(intCompact);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":52,"deletions":18,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -394,4 +394,0 @@\n-    String scale(int i, int scale);\n-\n-    String scale2(long i);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}