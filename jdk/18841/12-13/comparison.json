{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import java.util.function.Predicate;\n@@ -270,2 +269,2 @@\n-                case \"--java\":  \/\/ keep this argument\n-                    return;\n+                case \"--java\":\n+                    return;  \/\/ keep this argument\n@@ -353,1 +352,1 @@\n-            indifyFile(f);\n+            indifyFile(f, dest);\n@@ -355,1 +354,1 @@\n-            indifyJar(); \/\/Not yet implemented\n+            indifyJar(f, dest); \/\/Not yet implemented\n@@ -357,1 +356,1 @@\n-            indifyTree(f);\n+            indifyTree(f, dest);\n@@ -367,1 +366,1 @@\n-    public void indifyFile(File f) throws IOException {\n+    public void indifyFile(File f, File dest) throws IOException {\n@@ -374,8 +373,3 @@\n-        writeNewClassFile(logic.classModel, changed, f);\n-    }\n-\n-    void writeNewClassFile(ClassModel newClassModel, Boolean changed, File sourceFile) throws IOException {\n-        byte[] new_bytes = transformToBytes(newClassModel);\n-        if(changed || all){\n-            File destFile;\n-            if(dest != null){\n+        if (changed || all) {\n+            File outfile;\n+            if (dest != null) {\n@@ -383,1 +377,1 @@\n-                destFile = classPathFile(dest, newClassModel.thisClass().name().stringValue());\n+                outfile = classPathFile(dest, model.thisClass().name().stringValue());\n@@ -385,1 +379,1 @@\n-                destFile = sourceFile;\n+                outfile = f;\n@@ -387,3 +381,2 @@\n-            if (verbose) System.err.println(\"writing \"+destFile);\n-            Files.write(destFile.toPath(), new_bytes);\n-            System.err.println(\"Wrote New ClassFile to: \"+destFile);\n+            Files.write(outfile.toPath(), transformToBytes(logic.classModel));\n+            if (!quiet) System.err.println(\"wrote \"+outfile);\n@@ -403,1 +396,1 @@\n-    public void indifyJar() {\n+    public void indifyJar(File f, Object dest) throws IOException {\n@@ -407,1 +400,1 @@\n-    public void indifyTree(File f) throws IOException {\n+    public void indifyTree(File f, File dest) throws IOException {\n@@ -416,1 +409,1 @@\n-                indifyFile(f2);\n+                indifyFile(f2, dest);\n@@ -418,1 +411,1 @@\n-                indifyTree(f2);\n+                indifyTree(f2, dest);\n@@ -478,1 +471,1 @@\n-            if (verbose && changed) System.err.println(\"(no change)\");\n+            if (verbose && !changed) System.err.println(\"(no change)\");\n@@ -480,1 +473,1 @@\n-            byte[] new_Bytes = transformToBytes(logic.classModel);\n+            byte[] newBytes = transformToBytes(logic.classModel);\n@@ -482,1 +475,1 @@\n-            return defineClass(null, new_Bytes, 0, new_Bytes.length);\n+            return defineClass(null, newBytes, 0, newBytes.length);\n@@ -501,1 +494,1 @@\n-            Stack<PoolEntry> pendingIndy = new Stack<>(); \/\/ stack to hold the pending invokedynamic constant to replace the invokeExact\n+            Deque<PoolEntry> pendingIndy = new ArrayDeque<>(); \/\/Holding the pending invokedynamic constant to replace the invokeExact\n@@ -536,1 +529,1 @@\n-                            System.err.println(\":::Transforming the Method Class for: \" + ((InvokeInstruction) e).method().name() +\n+                            System.err.println(\":::Transforming the Method Class for: \" + invokeInstruction.method().name() +\n@@ -545,1 +538,1 @@\n-                            System.err.println(\":::Transforming the Method Call of: \" + ((InvokeInstruction) e).method().name() +\n+                            System.err.println(\":::Transforming the Method Call of: \" + invokeInstruction.method().name() +\n@@ -582,2 +575,2 @@\n-            for(char mark : \"THI\".toCharArray()) {\n-                for(MethodModel m : classModel.methods()){\n+            for (char mark : \"THI\".toCharArray()) {\n+                for (MethodModel m : classModel.methods()) {\n@@ -586,1 +579,1 @@\n-                    if(nameAndTypeMark(m.methodName(), m.methodType()) == mark) {\n+                    if (nameAndTypeMark(m.methodName(), m.methodType()) == mark) {\n@@ -599,1 +592,1 @@\n-                System.err.println(\"pattern methods removed: \"+constants.keySet());\n+                System.err.println(\"pattern methods removed: \" + constants.keySet());\n@@ -603,1 +596,1 @@\n-                    String failure = \"method has a special name but fails to match pattern: \"+ m.methodName();\n+                    String failure = \"method has a special name but fails to match pattern: \" + m.methodName();\n@@ -607,1 +600,1 @@\n-                        System.err.println(\"warning: \"+failure);\n+                        System.err.println(\"warning: \" + failure);\n@@ -610,1 +603,1 @@\n-            if (!quiet)  System.err.flush();\n+            if (!quiet) System.err.flush();\n@@ -633,1 +626,1 @@\n-                    if(poolMarks[memberRefEntry.owner().index()] != 0){\n+                    if (poolMarks[memberRefEntry.owner().index()] != 0) {\n@@ -1108,11 +1101,2 @@\n-    private byte[] openInputIntoBytes(File f) throws IOException{\n-        try{\n-            return Files.readAllBytes(f.toPath());\n-        }\n-        catch(IOException e){\n-            throw new IOException(\"Error reading file: \"+f);\n-        }\n-    }\n-\n-    private ClassModel parseClassFile(File f) throws IOException{\n-        byte[] bytes = openInputIntoBytes(f);\n+    private ClassModel parseClassFile(File f) throws IOException {\n+        byte[] bytes = Files.readAllBytes(f.toPath());\n@@ -1137,1 +1121,1 @@\n-        assert(simpleType.matches(\"^\\\\([A-Z]*\\\\)[A-Z]$\"));\n+        assert (simpleType.matches(\"^\\\\([A-Z]*\\\\)[A-Z]$\"));\n@@ -1142,0 +1126,1 @@\n+\n@@ -1143,1 +1128,1 @@\n-        return simplifyType(type).length()-3;\n+        return simplifyType(type).length() - 3;\n@@ -1145,0 +1130,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/indify\/Indify.java","additions":37,"deletions":51,"binary":false,"changes":88,"status":"modified"}]}