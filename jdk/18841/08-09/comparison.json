{"files":[{"patch":"@@ -652,26 +652,22 @@\n-        \/**\n-         * Initializes the marks for the constant pool entries.\n-         * <p>\n-         * This method iterates through the constant pool and assigns marks to each entry\n-         * based on its type and value. These marks are used to identify specific types of\n-         * constant pool entries .\n-         * <p>\n-         * The method iterates until no changes are made to the pool marks array in a complete pass.\n-         * This ensures that all dependent entries are processed correctly.\n-         *\n-         * @return true if any marks were changed, false otherwise.\n-         *\/\n-        boolean initializeMarks() {\n-            boolean anyMarksChanged = false;\n-            for (;;) {\n-                boolean someMarksChangedInLoop = false;\n-                for (PoolEntry poolEntry : classModel.constantPool()) {\n-                    \/\/ Get the index directly from PoolEntry\n-                    if (poolEntry == null) {\n-                        continue; \/\/ Skip null entries\n-                    }\n-                    int cpIndex = poolEntry.index();\n-\n-                    char mark = poolMarks[cpIndex];\n-                    if (mark != 0) {\n-                        continue;\n+        boolean initializeMarks(){\n+            boolean anyMarkChanged = false;\n+            for(PoolEntry entry : classModel.constantPool()){\n+                char mark = 0;\n+                if(poolMarks[entry.index()] != 0) continue;\n+\n+                if(entry instanceof Utf8Entry utf8Entry){\n+                    mark = nameMark(utf8Entry.stringValue());\n+                }\n+                if(entry instanceof ClassEntry classEntry){\n+                    mark = nameMark(classEntry.asInternalName());\n+                }\n+                if(entry instanceof StringEntry stringEntry){\n+                    mark = nameMark(stringEntry.stringValue());\n+                }\n+                if(entry instanceof NameAndTypeEntry nameAndTypeEntry){\n+                    mark = nameAndTypeMark(nameAndTypeEntry.name(), nameAndTypeEntry.type());\n+                }\n+                if(entry instanceof MemberRefEntry memberRefEntry){\n+                    poolMarks[memberRefEntry.owner().index()] = nameMark(memberRefEntry.owner().asInternalName());\n+                    if(poolMarks[memberRefEntry.owner().index()] != 0){\n+                        mark = poolMarks[memberRefEntry.owner().index()];\n@@ -679,15 +675,3 @@\n-\n-                    mark = switch (poolEntry.tag()) {\n-                        case TAG_UTF8 -> nameMark(((Utf8Entry) poolEntry).stringValue());\n-                        case TAG_NAMEANDTYPE -> {\n-                            NameAndTypeEntry nameAndTypeEntry = (NameAndTypeEntry) poolEntry;\n-                            yield nameAndTypeMark(nameAndTypeEntry.name(), nameAndTypeEntry.type());\n-                        }\n-                        case TAG_CLASS -> {\n-                            int nameIndex = ((ClassEntry) poolEntry).name().index();\n-                            char nameMark = poolMarks[nameIndex];\n-                            if (\"DJ\".indexOf(nameMark) >= 0) {\n-                                yield nameMark;\n-                            } else {\n-                                yield mark;\n-                            }\n+                    else{\n+                        if(memberRefEntry.owner().equals(classModel.thisClass())){\n+                            mark = nameMark(memberRefEntry.name().stringValue());\n@@ -695,25 +679,0 @@\n-                        case TAG_FIELDREF, TAG_METHODREF -> {\n-                            MemberRefEntry memberRefEntry = (MemberRefEntry) poolEntry;\n-                            int classIndex = memberRefEntry.owner().index();\n-                            int nameAndTypeIndex = memberRefEntry.nameAndType().index();\n-                            char classMark = poolMarks[classIndex];\n-                            if (classMark != 0) {\n-                                yield classMark;  \/\/ java.lang.invoke.* or java.lang.* method\n-                            } else {\n-                                String cls = memberRefEntry.owner().name().stringValue();\n-                                if (cls.equals(classModel.thisClass().name().stringValue())) {\n-                                    yield switch (poolMarks[nameAndTypeIndex]) {\n-                                        case 'T', 'H', 'I' -> poolMarks[nameAndTypeIndex];\n-                                        default -> mark;\n-                                    };\n-                                } else {\n-                                    yield mark;\n-                                }\n-                            }\n-                        }\n-                        default -> mark;\n-                    };\n-\n-                    if (mark != 0) {\n-                        poolMarks[cpIndex] = mark;\n-                        someMarksChangedInLoop = true;\n@@ -722,4 +681,2 @@\n-                if (!someMarksChangedInLoop) {\n-                    break;\n-                }\n-                anyMarksChanged = true;\n+                poolMarks[entry.index()] = mark;\n+                anyMarkChanged = true;\n@@ -727,1 +684,1 @@\n-            return anyMarksChanged;\n+            return anyMarkChanged;\n@@ -729,10 +686,0 @@\n-\n-        char nameMark(String s) {\n-            if (s.startsWith(\"MT_\"))                return 'T';\n-            else if (s.startsWith(\"MH_\"))           return 'H';\n-            else if (s.startsWith(\"INDY_\"))         return 'I';\n-            else if (s.startsWith(\"java\/lang\/invoke\/\"))  return 'D';\n-            else if (s.startsWith(\"java\/lang\/\"))    return 'J';\n-            return 0;\n-        }\n-\n@@ -740,1 +687,1 @@\n-            char mark = poolMarks[name.index()];\n+            char mark = poolMarks[name.index()] = nameMark(name.stringValue());\n@@ -753,0 +700,9 @@\n+        char nameMark(String s) {\n+            if (s.startsWith(\"MT_\"))                return 'T';\n+            else if (s.startsWith(\"MH_\"))           return 'H';\n+            else if (s.startsWith(\"INDY_\"))         return 'I';\n+            else if (s.startsWith(\"java\/lang\/invoke\/\"))  return 'D';\n+            else if (s.startsWith(\"java\/lang\/\"))    return 'J';\n+            return 0;\n+        }\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/indify\/Indify.java","additions":38,"deletions":82,"binary":false,"changes":120,"status":"modified"}]}