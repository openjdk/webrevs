{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.reflect.Method;\n@@ -220,2 +221,2 @@\n-        java.lang.reflect.Method main = mainClass.getMethod(\"main\", String[].class);\n-        try { main.setAccessible(true); } catch (SecurityException ex) { }\n+        Method main = mainClass.getMethod(\"main\", String[].class);\n+        try { main.setAccessible(true); } catch (SecurityException ignored) { }\n@@ -282,5 +283,5 @@\n-        switch (s) {\n-        case \"true\":  case \"yes\": case \"on\":  case \"1\": return true;\n-        case \"false\": case \"no\":  case \"off\": case \"0\": return false;\n-        }\n-        throw new IllegalArgumentException(\"unrecognized boolean flag=\"+s);\n+        return switch (s) {\n+            case \"true\", \"yes\", \"on\", \"1\" -> true;\n+            case \"false\", \"no\", \"off\", \"0\" -> false;\n+            default -> throw new IllegalArgumentException(\"unrecognized boolean flag=\" + s);\n+        };\n@@ -344,1 +345,1 @@\n-        return ClassFile.of(StackMapsOption.GENERATE_STACK_MAPS).transform(classModel, ClassTransform.ACCEPT_ALL);\n+        return of(StackMapsOption.GENERATE_STACK_MAPS).transform(classModel, ClassTransform.ACCEPT_ALL);\n@@ -353,1 +354,1 @@\n-    public void indifyJar(File f, Object dest) throws IOException {\n+    public void indifyJar(File f, Object dest){\n@@ -359,7 +360,8 @@\n-        for (File f2 : f.listFiles(new FilenameFilter() {\n-                public boolean accept(File dir, String name) {\n-                    if (name.endsWith(\".class\"))  return true;\n-                    if (name.contains(\".\"))  return false;\n-                    \/\/ return true if it might be a package name:\n-                    return Character.isJavaIdentifierStart(name.charAt(0));\n-                }})) {\n+        for (File f2 : Objects.requireNonNull(f.listFiles(new FilenameFilter() {\n+            public boolean accept(File dir, String name) {\n+                if (name.endsWith(\".class\")) return true;\n+                if (name.contains(\".\")) return false;\n+                \/\/ return true if it might be a package name:\n+                return Character.isJavaIdentifierStart(name.charAt(0));\n+            }\n+        }))) {\n@@ -542,2 +544,2 @@\n-                        newClassModel = ClassFile.of(StackMapsOption.GENERATE_STACK_MAPS).parse(\n-                               ClassFile.of(StackMapsOption.GENERATE_STACK_MAPS).transform(newClassModel, classTransform)\n+                        newClassModel = of(StackMapsOption.GENERATE_STACK_MAPS).parse(\n+                               of(StackMapsOption.GENERATE_STACK_MAPS).transform(newClassModel, classTransform)\n@@ -552,1 +554,1 @@\n-                            String a1, a2 = null;\n+                            String a1 = null, a2 = null;\n@@ -557,1 +559,1 @@\n-                            if(e instanceof InvokeInstruction && Objects.equals(((InvokeInstruction) e).method().name().stringValue(), finalConm.methodName().stringValue())){\n+                            if(e instanceof InvokeInstruction && Objects.equals(a1, a2)){\n@@ -563,2 +565,2 @@\n-                        newClassModel = ClassFile.of(StackMapsOption.GENERATE_STACK_MAPS).parse(\n-                             ClassFile.of(StackMapsOption.GENERATE_STACK_MAPS).transform(newClassModel, classTransform));\n+                        newClassModel = of(StackMapsOption.GENERATE_STACK_MAPS).parse(\n+                             of(StackMapsOption.GENERATE_STACK_MAPS).transform(newClassModel, classTransform));\n@@ -576,2 +578,2 @@\n-            ClassModel newClassModel =ClassFile.of(StackMapsOption.GENERATE_STACK_MAPS).parse(\n-                    ClassFile.of(StackMapsOption.GENERATE_STACK_MAPS).transform(classModel, (b, e) ->\n+            ClassModel newClassModel = of(StackMapsOption.GENERATE_STACK_MAPS).parse(\n+                    of(StackMapsOption.GENERATE_STACK_MAPS).transform(classModel, (b, e) ->\n@@ -590,1 +592,1 @@\n-                List<VerifyError> errors = ClassFile.of(StackMapsOption.GENERATE_STACK_MAPS,ClassHierarchyResolverOption.of(classHierarchyResolver)).verify(newClassModel);\n+                List<VerifyError> errors = of(StackMapsOption.GENERATE_STACK_MAPS,ClassHierarchyResolverOption.of(classHierarchyResolver)).verify(newClassModel);\n@@ -672,1 +674,1 @@\n-            byte[] new_bytes = ClassFile.of(StackMapsOption.GENERATE_STACK_MAPS).transform(oldClassModel, ClassTransform.endHandler(clb -> {\n+            byte[] new_bytes = of(StackMapsOption.GENERATE_STACK_MAPS).transform(oldClassModel, ClassTransform.endHandler(clb -> {\n@@ -744,1 +746,1 @@\n-            return ClassFile.of(StackMapsOption.GENERATE_STACK_MAPS).parse(new_bytes);\n+            return of(StackMapsOption.GENERATE_STACK_MAPS).parse(new_bytes);\n@@ -1327,0 +1329,1 @@\n+                assert x instanceof LoadableConstantEntry;\n@@ -1330,1 +1333,1 @@\n-            List<Object[]> specs = bootstrap_MethodSpecifiers(true);\n+            List<Object[]> specs = bootstrap_MethodSpecifiers();\n@@ -1349,1 +1352,1 @@\n-        List<Object[]> bootstrap_MethodSpecifiers(boolean createIfNotFound) {\n+        List<Object[]> bootstrap_MethodSpecifiers() {\n@@ -1352,1 +1355,1 @@\n-            if (count == 0 && createIfNotFound ){\n+            if (count == 0){\n@@ -1396,1 +1399,1 @@\n-            e.printStackTrace();\n+            System.err.println(e.getMessage());\n","filename":"test\/jdk\/java\/lang\/invoke\/indify\/Indify.java","additions":34,"deletions":31,"binary":false,"changes":65,"status":"modified"}]}