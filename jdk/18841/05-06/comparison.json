{"files":[{"patch":"@@ -175,2 +175,2 @@\n-        if (\"--java\".equals(avl.get(0))) {\n-            avl.remove(0);\n+        if (\"--java\".equals(avl.getFirst())) {\n+            avl.removeFirst();\n@@ -216,1 +216,1 @@\n-        String mainClassName = avl.remove(0);\n+        String mainClassName = avl.removeFirst();\n@@ -226,1 +226,1 @@\n-            String a = av.get(0);\n+            String a = av.getFirst();\n@@ -250,1 +250,2 @@\n-                    verifySpecifierCount = Integer.valueOf(a2);\n+                        assert a2 != null;\n+                        verifySpecifierCount = Integer.parseInt(a2);\n@@ -274,2 +275,1 @@\n-            for (int i = 0; i < av.size(); i++)\n-                av.set(i, maybeExpandProperties(av.get(i)));\n+            av.replaceAll(this::maybeExpandProperties);\n@@ -309,1 +309,1 @@\n-            indifyFile(f, dest);\n+            indifyFile(f);\n@@ -311,1 +311,1 @@\n-            indifyJar(f, dest);\n+            indifyJar(); \/\/Not yet implemented\n@@ -313,1 +313,1 @@\n-            indifyTree(f, dest);\n+            indifyTree(f);\n@@ -323,1 +323,1 @@\n-    public void indifyFile(File f, File dest) throws IOException {\n+    public void indifyFile(File f) throws IOException {\n@@ -352,1 +352,1 @@\n-    public void indifyJar(File f, Object dest) {\n+    public void indifyJar() {\n@@ -356,1 +356,1 @@\n-    public void indifyTree(File f, File dest) throws IOException {\n+    public void indifyTree(File f) throws IOException {\n@@ -358,7 +358,5 @@\n-        for (File f2 : Objects.requireNonNull(f.listFiles(new FilenameFilter() {\n-            public boolean accept(File dir, String name) {\n-                if (name.endsWith(\".class\")) return true;\n-                if (name.contains(\".\")) return false;\n-                \/\/ return true if it might be a package name:\n-                return Character.isJavaIdentifierStart(name.charAt(0));\n-            }\n+        for (File f2 : Objects.requireNonNull(f.listFiles((dir, name) -> {\n+            if (name.endsWith(\".class\")) return true;\n+            if (name.contains(\".\")) return false;\n+            \/\/ return true if it might be a package name:\n+            return Character.isJavaIdentifierStart(name.charAt(0));\n@@ -367,1 +365,1 @@\n-                indifyFile(f2, dest);\n+                indifyFile(f2);\n@@ -369,1 +367,1 @@\n-                indifyTree(f2, dest);\n+                indifyTree(f2);\n@@ -392,3 +390,1 @@\n-                } catch (ClassNotFoundException ex) {\n-                    \/\/ fall through\n-                } catch (IOException ex) {\n+                } catch (ClassNotFoundException | IOException ex) {\n@@ -398,2 +394,1 @@\n-                    if (ex instanceof RuntimeException)  throw (RuntimeException) ex;\n-                    throw new RuntimeException(ex);\n+                    throw (RuntimeException) ex;\n@@ -558,1 +553,1 @@\n-                                System.err.println(\":::Transfmoring the Method: \"+ m.methodName() +\" instruction: invokestatic \" + ((InvokeInstruction) e).type() + \" to ldc: \" + ((LoadableConstantEntry) con).index() );\n+                                System.err.println(\":::Transfmoring the Method: \"+ m.methodName() +\" instruction: invokestatic \" + ((InvokeInstruction) e).type() + \" to ldc: \" +  con.index() );\n@@ -613,1 +608,1 @@\n-                if (jvm.stackMotion(i.opcode().bytecode()))  continue decode;\n+                if (jvm.stackMotion(i.opcode().bytecode()))  continue;\n@@ -619,8 +614,3 @@\n-                    switch (i.opcode().bytecode()){\n-                        case GETSTATIC:\n-                        case GETFIELD:\n-                        case PUTSTATIC:\n-                        case PUTFIELD:\n-                            pops = pops.replace(\"Q\", type);\n-                            break;\n-                        default:\n+                    pops = switch (i.opcode().bytecode()) {\n+                        case GETSTATIC, GETFIELD, PUTSTATIC, PUTFIELD -> pops.replace(\"Q\", type);\n+                        default -> {\n@@ -629,3 +619,3 @@\n-                            pops = pops.replace(\"Q$Q\", type.substring(1).replace(\")\",\"$\"));\n-                            break;\n-                    }\n+                            yield pops.replace(\"Q$Q\", type.substring(1).replace(\")\", \"$\"));\n+                        }\n+                    };\n@@ -645,1 +635,1 @@\n-                if (pops.charAt(k++) != '$')  break decode;\n+                if (pops.charAt(k++) != '$')  break;\n@@ -870,2 +860,1 @@\n-            if (descr.equals(requiredType))  return true;\n-            return false;\n+            return descr.equals(requiredType);\n@@ -941,0 +930,1 @@\n+                String UNKNOWN_CON = \"<unknown>\";\n@@ -967,4 +957,3 @@\n-                        switch (type) {\n-                            case \"java\/lang\/StringBuilder\":\n-                                jvm.push(\"StringBuilder\");\n-                                continue decode;\n+                        if (type.equals(\"java\/lang\/StringBuilder\")) {\n+                            jvm.push(\"StringBuilder\");\n+                            continue;\n@@ -1055,1 +1044,1 @@\n-                                con = makeMethodTypeCon(args.get(0));\n+                                con = makeMethodTypeCon(args.getFirst());\n@@ -1063,2 +1052,1 @@\n-                                    if (typeArg instanceof Class) {\n-                                        Class<?> argClass = (Class<?>) typeArg;\n+                                    if (typeArg instanceof Class<?> argClass) {\n@@ -1066,13 +1054,12 @@\n-                                            char tchar;\n-                                            switch (argClass.getName()) {\n-                                                case \"void\":    tchar = 'V'; break;\n-                                                case \"boolean\": tchar = 'Z'; break;\n-                                                case \"byte\":    tchar = 'B'; break;\n-                                                case \"char\":    tchar = 'C'; break;\n-                                                case \"short\":   tchar = 'S'; break;\n-                                                case \"int\":     tchar = 'I'; break;\n-                                                case \"long\":    tchar = 'J'; break;\n-                                                case \"float\":   tchar = 'F'; break;\n-                                                case \"double\":  tchar = 'D'; break;\n-                                                default:  throw new InternalError(argClass.toString());\n-                                            }\n+                                            char tchar = switch (argClass.getName()) {\n+                                                case \"void\" -> 'V';\n+                                                case \"boolean\" -> 'Z';\n+                                                case \"byte\" -> 'B';\n+                                                case \"char\" -> 'C';\n+                                                case \"short\" -> 'S';\n+                                                case \"int\" -> 'I';\n+                                                case \"long\" -> 'J';\n+                                                case \"float\" -> 'F';\n+                                                case \"double\" -> 'D';\n+                                                default -> throw new InternalError(argClass.toString());\n+                                            };\n@@ -1083,2 +1070,1 @@\n-                                    } else if (typeArg instanceof PoolEntry) {\n-                                        PoolEntry argCon = (PoolEntry) typeArg;\n+                                    } else if (typeArg instanceof PoolEntry argCon) {\n@@ -1105,1 +1091,1 @@\n-                                con = con = makeMethodTypeCon(buf.toString());\n+                                con = makeMethodTypeCon(buf.toString());\n@@ -1114,1 +1100,1 @@\n-                                if(args.equals(Arrays.asList(\"lookup\"))) {\n+                                if(args.equals(List.of(\"lookup\"))) {\n@@ -1134,1 +1120,1 @@\n-                                    arg = args.remove(0);\n+                                    arg = args.removeFirst();\n@@ -1149,1 +1135,1 @@\n-                        if(!hasReceiver && ownMethod != null && patternMark != 0) {\n+                        if(!hasReceiver && ownMethod != null) {\n@@ -1209,1 +1195,1 @@\n-                            continue decode;\n+                            continue;\n@@ -1217,1 +1203,0 @@\n-        private final String UNKNOWN_CON = \"<unknown>\";\n@@ -1258,1 +1243,1 @@\n-            if(((con = args.get(argi++)) instanceof MethodTypeEntry) || (con instanceof ClassEntry)){\n+            if(((con = args.get(argi)) instanceof MethodTypeEntry) || (con instanceof ClassEntry)){\n@@ -1302,1 +1287,1 @@\n-            List<Object> extraArgs = new ArrayList<Object>();\n+            List<Object> extraArgs = new ArrayList<>();\n@@ -1305,1 +1290,1 @@\n-                Object lastArg = args.get(args.size() - 1);\n+                Object lastArg = args.getLast();\n@@ -1448,1 +1433,0 @@\n-    private static final String[] INSTRUCTION_NAMES;\n@@ -1450,1 +1434,0 @@\n-    private static final int[] INSTRUCTION_INFO;\n@@ -1490,2 +1473,0 @@\n-        INSTRUCTION_INFO = info;\n-        INSTRUCTION_NAMES = names;\n","filename":"test\/jdk\/java\/lang\/invoke\/indify\/Indify.java","additions":59,"deletions":78,"binary":false,"changes":137,"status":"modified"}]}