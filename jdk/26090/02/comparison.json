{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.reflect.Constructor;\n@@ -32,0 +33,1 @@\n+import java.lang.reflect.Method;\n@@ -82,2 +84,8 @@\n-        \/\/ Make sure the class is initialized.\n-        UNSAFE.ensureClassInitialized(aClass);\n+        \/\/ Attempt to initialize the class. If initialization is not possible\n+        \/\/ due to NCDFE, accept this, and try compile anyway.\n+        try {\n+            UNSAFE.ensureClassInitialized(aClass);\n+        } catch (NoClassDefFoundError e) {\n+            CompileTheWorld.OUT.printf(\"[%d]\\t%s\\tNOTE unable to init class : %s%n\",\n+                id, aClass.getName(), e);\n+        }\n@@ -86,0 +94,21 @@\n+        \/\/ Getting constructor\/methods with unresolvable signatures would fail with NCDFE.\n+        \/\/ Try to get as much as possible, and compile everything else.\n+        \/\/ TODO: Would be good to have a Whitebox method that returns the subset of resolvable\n+        \/\/ constructors\/methods without throwing NCDFE. This would extend the testing scope.\n+        Constructor[] constructors = new Constructor[0];\n+        Method[] methods = new Method[0];\n+\n+        try {\n+            constructors = aClass.getDeclaredConstructors();\n+        } catch (NoClassDefFoundError e) {\n+            CompileTheWorld.OUT.printf(\"[%d]\\t%s\\tNOTE unable to get constructors : %s%n\",\n+                id, aClass.getName(), e);\n+        }\n+\n+        try {\n+            methods = aClass.getDeclaredMethods();\n+        } catch (NoClassDefFoundError e) {\n+            CompileTheWorld.OUT.printf(\"[%d]\\t%s\\tNOTE unable to get methods : %s%n\",\n+                id, aClass.getName(), e);\n+        }\n+\n@@ -88,1 +117,1 @@\n-        for (Executable e : aClass.getDeclaredConstructors()) {\n+        for (Executable e : constructors) {\n@@ -91,1 +120,1 @@\n-        for (Executable e : aClass.getDeclaredMethods()) {\n+        for (Executable e : methods) {\n@@ -97,1 +126,1 @@\n-        for (Executable e : aClass.getDeclaredConstructors()) {\n+        for (Executable e : constructors) {\n@@ -101,1 +130,1 @@\n-        for (Executable e : aClass.getDeclaredMethods()) {\n+        for (Executable e : methods) {\n@@ -130,0 +159,3 @@\n+            } catch (NoClassDefFoundError e) {\n+                CompileTheWorld.OUT.printf(\"[%d]\\t%s\\tNOTE unable to preload : %s%n\",\n+                    id, className, e);\n@@ -131,2 +163,2 @@\n-                CompileTheWorld.OUT.println(String.format(\"[%d]\\t%s\\tWARNING preloading failed : %s\",\n-                         id, className, t));\n+                CompileTheWorld.OUT.printf(\"[%d]\\t%s\\tWARNING preloading failed : %s%n\",\n+                    id, className, t);\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/Compiler.java","additions":40,"deletions":8,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -248,0 +248,3 @@\n+            } catch (NoClassDefFoundError e) {\n+                CompileTheWorld.OUT.printf(\"[%d]\\t%s\\tNOTE unable to load\/compile, skipped: %s%n\",\n+                    id, name, e);\n@@ -249,2 +252,2 @@\n-                CompileTheWorld.OUT.println(String.format(\"[%d]\\t%s\\tWARNING skipped: %s\",\n-                        id, name, e));\n+                CompileTheWorld.OUT.printf(\"[%d]\\t%s\\tWARNING skipped: %s%n\",\n+                    id, name, e);\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/PathHandler.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}