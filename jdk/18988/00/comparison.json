{"files":[{"patch":"@@ -309,0 +309,44 @@\n+    static CompletionException wrapInCompletionException(Throwable t) {\n+        if (t == null)\n+            return new CompletionException();\n+\n+        String message;\n+        Throwable suppressed;\n+        try {\n+            message = t.toString();\n+            suppressed = null;\n+        } catch (Throwable unknown) {\n+            message = \"\";\n+            suppressed = unknown;\n+        }\n+\n+        final CompletionException wrapping = new CompletionException(message, t);\n+\n+        if (suppressed != null)\n+            wrapping.addSuppressed(suppressed);\n+\n+        return wrapping;\n+    }\n+\n+    static ExecutionException wrapInExecutionException(Throwable t) {\n+        if (t == null)\n+            return new ExecutionException();\n+\n+        String message;\n+        Throwable suppressed;\n+        try {\n+            message = t.toString();\n+            suppressed = null;\n+        } catch (Throwable unknown) {\n+            message = \"\";\n+            suppressed = unknown;\n+        }\n+\n+        final ExecutionException wrapping = new ExecutionException(message, t);\n+\n+        if (suppressed != null)\n+            wrapping.addSuppressed(suppressed);\n+\n+        return wrapping;\n+    }\n+\n@@ -315,1 +359,1 @@\n-                             new CompletionException(x));\n+                wrapInCompletionException(x));\n@@ -332,1 +376,1 @@\n-            x = new CompletionException(x);\n+            x = wrapInCompletionException(x);\n@@ -368,1 +412,1 @@\n-            r = new AltResult(new CompletionException(x));\n+            r = new AltResult(wrapInCompletionException(x));\n@@ -396,1 +440,1 @@\n-            throw new ExecutionException(x);\n+            throw wrapInExecutionException(x);\n@@ -413,1 +457,1 @@\n-            throw new CompletionException(x);\n+            throw wrapInCompletionException(x);\n@@ -2608,2 +2652,2 @@\n-     * String {@code \"Completed Normally\"} or the String {@code\n-     * \"Completed Exceptionally\"}, or the String {@code \"Not\n+     * String {@code \"Completed normally\"} or the String {@code\n+     * \"Completed exceptionally\"}, or the String {@code \"Not\n@@ -2626,1 +2670,1 @@\n-                ? \"[Completed exceptionally: \" + ((AltResult)r).ex + \"]\"\n+                ? \"[Completed exceptionally: \" + ((AltResult)r).ex.getClass().getName() + \"]\"\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":52,"deletions":8,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -83,1 +83,8 @@\n-    static class CFException extends RuntimeException {}\n+    static class CFException extends RuntimeException {\n+        \/\/ This makes sure that CompletableFuture still behaves appropriately\n+        \/\/ even if thrown exceptions end up throwing exceptions from their String\n+        \/\/ representations.\n+        @Override public String getMessage() {\n+            throw new IllegalStateException(\"malformed\");\n+        }\n+    }\n@@ -262,1 +269,0 @@\n-        CFException ex = new CFException();\n@@ -264,0 +270,1 @@\n+        CFException ex = new CFException();\n@@ -5132,1 +5139,0 @@\n-\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/CompletableFutureTest.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}