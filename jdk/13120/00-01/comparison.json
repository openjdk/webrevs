{"files":[{"patch":"@@ -114,0 +114,6 @@\n+  \/\/ Initialize simple data used by reduction marking early.\n+  set_lpt(lpt);\n+  set_lp(cl);\n+  \/\/ For now, define one block which is the entire loop body.\n+  set_bb(cl);\n+\n@@ -115,1 +121,1 @@\n-    mark_reductions(lpt);\n+    mark_reductions();\n@@ -174,6 +180,0 @@\n-  set_lpt(lpt);\n-  set_lp(cl);\n-\n-  \/\/ For now, define one block which is the entire loop body\n-  set_bb(cl);\n-\n@@ -435,2 +435,1 @@\n-  return (opc != ReductionNode::opcode(opc, n->bottom_type()->basic_type())\n-          || opc == Op_MinD || opc == Op_MinF || opc == Op_MaxD || opc == Op_MaxF);\n+  return (opc != ReductionNode::opcode(opc, n->bottom_type()->basic_type()));\n@@ -468,1 +467,1 @@\n-void SuperWord::mark_reductions(IdealLoopTree* loop) {\n+void SuperWord::mark_reductions() {\n@@ -471,2 +470,0 @@\n-  const CountedLoopNode* loop_head = loop->_head->as_CountedLoop();\n-  const Node* trip_phi = loop_head->phi();\n@@ -475,3 +472,3 @@\n-  \/\/ reduction cycles of at most LoopMaxUnroll nodes.\n-  for (DUIterator_Fast imax, i = loop_head->fast_outs(imax); i < imax; i++) {\n-    const Node* phi = loop_head->fast_out(i);\n+  \/\/ reduction cycles in the basic block.\n+  for (DUIterator_Fast imax, i = lp()->fast_outs(imax); i < imax; i++) {\n+    const Node* phi = lp()->fast_out(i);\n@@ -484,1 +481,1 @@\n-    if (phi == trip_phi) {\n+    if (phi == iv()) {\n@@ -500,2 +497,1 @@\n-    \/\/ consist of nodes cloned by loop unrolling. To further bound the search,\n-    \/\/ constrain the size of reduction cycles to LoopMaxUnroll.\n+    \/\/ consist of nodes cloned by loop unrolling.\n@@ -505,2 +501,2 @@\n-      \/\/ Test whether there is a reduction path of at most LoopMaxUnroll nodes\n-      \/\/ from 'first' to the phi node following edge index 'input'.\n+      \/\/ Test whether there is a reduction path in the basic block from 'first'\n+      \/\/ to the phi node following edge index 'input'.\n@@ -509,6 +505,2 @@\n-          first, input, LoopMaxUnroll,\n-          [&](const Node* n) {\n-            Node* ctrl = _phase->get_ctrl(n);\n-            return (n->Opcode() == first->Opcode() && ctrl != nullptr &&\n-                    loop->is_member(_phase->get_loop(ctrl)));\n-          },\n+          first, input, lpt()->_body.size(),\n+          [&](const Node* n) { return n->Opcode() == first->Opcode() && in_bb(n); },\n@@ -533,1 +525,1 @@\n-        if (!loop->is_member(_phase->get_loop(_phase->ctrl_or_self(u)))) {\n+        if (!in_bb(u)) {\n@@ -4279,4 +4271,0 @@\n-  _lpt = nullptr;\n-  _lp = nullptr;\n-  _bb = nullptr;\n-  _iv = nullptr;\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":19,"deletions":31,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -417,1 +417,1 @@\n-  Node* ctrl(Node* n) const { return _phase->has_ctrl(n) ? _phase->get_ctrl(n) : n; }\n+  const Node* ctrl(const Node* n) const { return _phase->has_ctrl(n) ? _phase->get_ctrl(n) : n; }\n@@ -420,1 +420,1 @@\n-  bool in_bb(Node* n)      { return n != nullptr && n->outcnt() > 0 && ctrl(n) == _bb; }\n+  bool in_bb(const Node* n) { return n != nullptr && n->outcnt() > 0 && ctrl(n) == _bb; }\n@@ -511,1 +511,2 @@\n-  \/\/ Whether n is part of a reduction cycle via the 'input' edge index.\n+  \/\/ Whether n is part of a reduction cycle via the 'input' edge index. To bound\n+  \/\/ the search, constrain the size of reduction cycles to LoopMaxUnroll.\n@@ -516,2 +517,2 @@\n-  \/\/ Find and mark reductions in a loop. Running mark_reductions(loop) is\n-  \/\/ similar to querying is_reduction(n) for every n in loop, but stricter in\n+  \/\/ Find and mark reductions in a loop. Running mark_reductions() is similar to\n+  \/\/ querying is_reduction(n) for every n in the SuperWord loop, but stricter in\n@@ -520,1 +521,1 @@\n-  void mark_reductions(IdealLoopTree* loop);\n+  void mark_reductions();\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8283187 8287087\n+ * @bug 8287087\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.Asserts;\n@@ -43,1 +44,2 @@\n-        TestFramework.run();\n+        \/\/ Fix maximum number of unrolls for test stability.\n+        TestFramework.runWithFlags(\"-XX:LoopMaxUnroll=16\");\n@@ -48,0 +50,1 @@\n+                 \"testReductionOnLargePartiallyUnrolledLoop\",\n@@ -51,1 +54,1 @@\n-        long[] array = new long[100];\n+        long[] array = new long[128];\n@@ -53,0 +56,1 @@\n+\n@@ -55,3 +59,2 @@\n-        if (result != 4950) {\n-            throw new RuntimeException(\"unexpected result\");\n-        }\n+        Asserts.assertEQ(result, 8128L, \"unexpected result\");\n+\n@@ -60,3 +63,6 @@\n-        if (result != 4950) {\n-            throw new RuntimeException(\"unexpected result\");\n-        }\n+        Asserts.assertEQ(result, 8128L, \"unexpected result\");\n+\n+        initArray(array);\n+        result = testReductionOnLargePartiallyUnrolledLoop(array);\n+        Asserts.assertEQ(result, 8128L, \"unexpected result\");\n+\n@@ -65,3 +71,2 @@\n-        if (result != 4950) {\n-            throw new RuntimeException(\"unexpected result\");\n-        }\n+        Asserts.assertEQ(result, 8128L, \"unexpected result\");\n+\n@@ -70,3 +75,1 @@\n-        if (result != 316) {\n-            throw new RuntimeException(\"unexpected result\");\n-        }\n+        Asserts.assertEQ(result, 448L, \"unexpected result\");\n@@ -82,2 +85,1 @@\n-    @IR(applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"true\"},\n-        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+    @IR(applyIfCPUFeature = {\"avx2\", \"true\"}, applyIf = {\"SuperWordReductions\", \"true\"},\n@@ -94,2 +96,1 @@\n-    @IR(applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"true\"},\n-        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+    @IR(applyIfCPUFeature = {\"avx2\", \"true\"}, applyIf = {\"SuperWordReductions\", \"true\"},\n@@ -106,0 +107,18 @@\n+    @Test\n+    @IR(applyIfCPUFeature = {\"avx2\", \"true\"}, applyIf = {\"SuperWordReductions\", \"true\"},\n+        counts = {IRNode.ADD_REDUCTION_VI, \">= 1\"})\n+    private static long testReductionOnLargePartiallyUnrolledLoop(long[] array) {\n+        int sum = 0;\n+        for (int i = 0; i < array.length \/ 8; i++) {\n+            sum += array[8*i];\n+            sum += array[8*i + 1];\n+            sum += array[8*i + 2];\n+            sum += array[8*i + 3];\n+            sum += array[8*i + 4];\n+            sum += array[8*i + 5];\n+            sum += array[8*i + 6];\n+            sum += array[8*i + 7];\n+        }\n+        return sum;\n+    }\n+\n@@ -112,2 +131,1 @@\n-    @IR(applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"true\"},\n-        applyIfAnd = {\"SuperWordReductions\", \"true\", \"LoopMaxUnroll\", \">= 8\"},\n+    @IR(applyIfCPUFeature = {\"avx2\", \"true\"}, applyIf = {\"SuperWordReductions\", \"true\"},\n@@ -125,4 +143,2 @@\n-    @IR(applyIfCPUFeatureAnd = {\"sse4.1\", \"true\", \"avx2\", \"true\"},\n-        applyIfAnd = {\"SuperWordReductions\", \"true\",\n-                      \"UsePopCountInstruction\", \"true\",\n-                      \"LoopMaxUnroll\", \">= 8\"},\n+    @IR(applyIfCPUFeature = {\"avx2\", \"true\"},\n+        applyIfAnd = {\"SuperWordReductions\", \"true\",\"UsePopCountInstruction\", \"true\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestGeneralizedReductions.java","additions":41,"deletions":25,"binary":false,"changes":66,"status":"modified"}]}