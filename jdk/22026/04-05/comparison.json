{"files":[{"patch":"@@ -24,0 +24,3 @@\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n@@ -25,0 +28,1 @@\n+import java.awt.GridBagLayout;\n@@ -28,0 +32,1 @@\n+import java.util.concurrent.CountDownLatch;\n@@ -34,2 +39,0 @@\n- * @library \/java\/awt\/regtesthelpers\n- * @build PassFailJFrame\n@@ -40,16 +43,6 @@\n-    public static void main(String[] args) throws Exception {\n-        String INSTRUCTIONS = \"\"\"\n-                    1. Notice components in test window: main-panel, box-for-text,\n-                       2 scroll-sliders, and 4 scroll-buttons(Not applicable for macosx).\n-                    2. Hover mouse over box-for-text.\n-                       Make sure, that mouse cursor is TextCursor (a.k.a. \"beam\").\n-                    3. Hover mouse over each of components (see item 1), except for box-for-text.\n-                       Make sure, that cursor is DefaultCursor (arrow).\n-                    4. Drag mouse (using any mouse button) from box-for-text to every\n-                       component in item 1, and also outside application window.\n-                       Make sure, that cursor remains TextCursor while mouse button is pressed.\n-                    5. Repeat item 4 for each other component in item 1, except for box-for-text\n-                       _but_ now make sure that cursor is DefaultCursor.\n-                    6. If cursor behaves as described in items 2-3-4-5, then test passed;\n-                       otherwise it failed.\n-                \"\"\";\n+    static Frame frame;\n+    static Frame instructionsFrame;\n+    static CountDownLatch countDownLatch;\n+    public static CountDownLatch createCountDownLatch() {\n+        return new CountDownLatch(1);\n+    }\n@@ -57,7 +50,8 @@\n-        PassFailJFrame.builder()\n-                .title(\"Test Instructions\")\n-                .instructions(INSTRUCTIONS)\n-                .columns(40)\n-                .testUI(HoveringAndDraggingTest::initialize)\n-                .build()\n-                .awaitAndCheck();\n+    public static void main(String[] args) throws Exception {\n+        countDownLatch = createCountDownLatch();\n+        EventQueue.invokeAndWait(() -> {\n+            initialize();\n+            showInstructionFrame();\n+        });\n+        countDownLatch.await();\n+        System.out.println(\"Test Pass\");\n@@ -66,1 +60,1 @@\n-    public static Frame initialize() {\n+    public static void initialize() {\n@@ -73,1 +67,1 @@\n-                    panel.add(new TextArea(getLongString()));\n+                    panel.add(new TextArea(bigString()));\n@@ -80,1 +74,1 @@\n-        Frame frame = new Frame(\"TextArea cursor icon test\");\n+        frame = new Frame(\"TextArea cursor icon test\");\n@@ -82,0 +76,1 @@\n+        frame.setLocation(450, 350);\n@@ -83,1 +78,53 @@\n-        return frame;\n+        frame.setVisible(true);\n+    }\n+\n+    static void showInstructionFrame() {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Notice components in test window: main-panel,box-for-text,\n+                   2 scroll-sliders, and 4 scroll-buttons.\n+                2. Hover mouse over box-for-text.\n+                   Make sure, that mouse cursor is TextCursor(a.k.a. \\\"beam\\\").\n+                3. Hover mouse over each of components (see item 1),\n+                   except for box-for-text.\n+                   Make sure, that cursor is DefaultCursor (arrow).\n+                4. Drag mouse (using any mouse button) from box-for-text to every\"\n+                   component in item 1, and also outside application window.\"\n+                   Make sure, that cursor remains TextCursor\n+                   while mouse button is pressed.\n+                5. Repeat item 4 for each other component in item 1,\n+                   except for box-for-text\n+                   _but_ now make sure that cursor is DefaultCursor.\n+                6. If cursor behaves as described in items 2-3-4-5,\n+                   then test is PASS otherwise it FAILED.\n+                 \"\"\";\n+        TextArea textArea = new TextArea(INSTRUCTIONS);\n+        Button passBtn = new Button(\"PASS\");\n+        Button failBtn = new Button(\"FAIL\");\n+        Panel btnPanel = new Panel(new GridBagLayout());\n+        Panel panel = new Panel(new GridBagLayout());\n+        instructionsFrame = new Frame(\"Test Instructions\");\n+        passBtn.setMaximumSize(new Dimension(100, 30));\n+        failBtn.setMaximumSize(new Dimension(100, 30));\n+        btnPanel.add(passBtn);\n+        btnPanel.add(failBtn);\n+        passBtn.addActionListener(e -> disposeFrames());\n+        failBtn.addActionListener(e -> {\n+            disposeFrames();\n+            throw new RuntimeException(\"Test Failed\");\n+        });\n+        panel.add(textArea);\n+        panel.add(btnPanel);\n+        instructionsFrame.add(panel);\n+        instructionsFrame.pack();\n+        instructionsFrame.setLocation(300, 100);\n+        instructionsFrame.setVisible(true);\n+    }\n+\n+    static void disposeFrames() {\n+        countDownLatch.countDown();\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+        if (instructionsFrame != null) {\n+            instructionsFrame.dispose();\n+        }\n@@ -86,3 +133,3 @@\n-    static String getLongString() {\n-        StringBuilder s = new StringBuilder();\n-        for (int lines = 0; lines < 50; ++lines) {\n+    static String bigString() {\n+        String s = \"\";\n+        for (int lines = 0; ; ++lines) {\n@@ -90,1 +137,6 @@\n-                s.append(\"0\".repeat(100));\n+                s += \"0\";\n+            }\n+            if (lines < 50) {\n+                s += \"\\n\";\n+            } else {\n+                break;\n@@ -92,1 +144,0 @@\n-            s.append(\"\\n\");\n@@ -94,1 +145,1 @@\n-        return s.toString();\n+        return s;\n","filename":"test\/jdk\/java\/awt\/TextArea\/TextAreaCursorTest\/HoveringAndDraggingTest.java","additions":86,"deletions":35,"binary":false,"changes":121,"status":"modified"}]}