{"files":[{"patch":"@@ -1,43 +0,0 @@\n-<!--\n- Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--  \n-  @test\n-  @bug 6497109\n-  @summary Mouse cursor icons for TextArea should be correct in case of hovering or dragging mouse over different subcomponents.\n-  @author Konstantin Voloshin: area=awt.TextArea\n-  @run applet\/manual=yesno HoveringAndDraggingTest.html\n-  -->\n-<head>\n-<title> HoveringAndDraggingTest <\/title>\n-<\/head>\n-<body>\n-\n-<h1>HoveringAndDraggingTest<br>Bug ID: 6497109<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"HoveringAndDraggingTest.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/TextArea\/TextAreaCursorTest\/HoveringAndDraggingTest.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,15 +24,0 @@\n-\/*\n-  test\n-  @bug 6497109\n-  @summary Mouse cursor icons for TextArea should be correct in case of hovering or dragging mouse over different subcomponents.\n-  @author Konstantin Voloshin: area=awt.TextArea\n-  @run applet\/manual=yesno HoveringAndDraggingTest.html\n-*\/\n-\n-\/**\n- * HoveringAndDraggingTest.java\n- *\n- * summary: Mouse cursor icons for TextArea should be correct in case\n- *   of hovering or dragging mouse over different subcomponents.\n- *\/\n-\n@@ -43,1 +28,0 @@\n-import java.awt.Dialog;\n@@ -45,17 +29,37 @@\n-public class HoveringAndDraggingTest extends java.applet.Applet {\n-    public void start() {\n-        String[] instructions = new String[] {\n-            \"1. Notice components in test window: main-panel, box-for-text,\"\n-                +\" 2 scroll-sliders, and 4 scroll-buttons.\",\n-            \"2. Hover mouse over box-for-text.\"\n-                +\" Make sure, that mouse cursor is TextCursor (a.k.a. \\\"beam\\\").\",\n-            \"3. Hover mouse over each of components (see item 1), except for box-for-text.\"\n-                +\" Make sure, that cursor is DefaultCursor (arrow).\",\n-            \"4. Drag mouse (using any mouse button) from box-for-text to every\"\n-                +\" component in item 1, and also outside application window.\"\n-                +\" Make sure, that cursor remains TextCursor while mouse button is pressed.\",\n-            \"5. Repeat item 4 for each other component in item 1, except for box-for-text,\"\n-                +\" _but_ now make sure that cursor is DefaultCursor.\",\n-            \"6. If cursor behaves as described in items 2-3-4-5, then test passed; otherwise it failed.\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n+\/*\n+ * @test\n+ * @bug 6497109\n+ * @summary Mouse cursor icons for TextArea should be correct in case of\n+ *  hovering or dragging mouse over different subcomponents.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual HoveringAndDraggingTest\n+ *\/\n+\n+public class HoveringAndDraggingTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                    1. Notice components in test window: main-panel, box-for-text,\n+                       2 scroll-sliders, and 4 scroll-buttons(Not applicable for macosx).\n+                    2. Hover mouse over box-for-text.\n+                       Make sure, that mouse cursor is TextCursor (a.k.a. \\\"beam\\\").\n+                    3. Hover mouse over each of components (see item 1), except for box-for-text.\n+                       Make sure, that cursor is DefaultCursor (arrow).\n+                    4. Drag mouse (using any mouse button) from box-for-text to every\"\n+                       component in item 1, and also outside application window.\"\n+                       Make sure, that cursor remains TextCursor while mouse button is pressed.\n+                    5. Repeat item 4 for each other component in item 1, except for box-for-text\n+                       _but_ now make sure that cursor is DefaultCursor.\n+                    6. If cursor behaves as described in items 2-3-4-5, then test passed;\n+                       otherwise it failed.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -63,0 +67,1 @@\n+    public static Frame initialize() {\n@@ -64,1 +69,1 @@\n-        panel.setLayout( new GridLayout(3,3) );\n+        panel.setLayout(new GridLayout(3, 3));\n@@ -66,4 +71,4 @@\n-        for( int y=0; y<3; ++y ) {\n-            for( int x=0; x<3; ++x ) {\n-                if( x==1 && y==1 ) {\n-                    panel.add( new TextArea( bigString() ) );\n+        for (int y = 0; y < 3; ++y) {\n+            for (int x = 0; x < 3; ++x) {\n+                if (x == 1 && y == 1) {\n+                    panel.add(new TextArea(bigString()));\n@@ -71,1 +76,1 @@\n-                    panel.add( new Panel() );\n+                    panel.add(new Panel());\n@@ -76,4 +81,4 @@\n-        Frame frame = new Frame( \"TextArea cursor icon test\" );\n-        frame.setSize( 300, 300 );\n-        frame.add( panel );\n-        frame.setVisible( true );\n+        Frame frame = new Frame(\"TextArea cursor icon test\");\n+        frame.setSize(300, 300);\n+        frame.add(panel);\n+        return frame;\n@@ -84,2 +89,2 @@\n-        for( int lines=0; ; ++lines ) {\n-            for( int symbols=0; symbols<100; ++symbols ) {\n+        for (int lines = 0; ; ++lines) {\n+            for (int symbols = 0; symbols < 100; ++symbols) {\n@@ -88,1 +93,1 @@\n-            if( lines<50 ) {\n+            if (lines < 50) {\n@@ -97,138 +102,0 @@\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/TextArea\/TextAreaCursorTest\/HoveringAndDraggingTest.java","additions":52,"deletions":185,"binary":false,"changes":237,"status":"modified"}]}