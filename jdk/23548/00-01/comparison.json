{"files":[{"patch":"@@ -108,2 +108,2 @@\n-     * If only symbol equivalence is desired, {@link #equalsSymbol(ClassDesc)\n-     * equalsSymbol} should be used.  It requires reduced parsing and can\n+     * If only symbol equivalence is desired, {@link #matches(ClassDesc)\n+     * matches} should be used.  It requires reduced parsing and can\n@@ -124,1 +124,1 @@\n-    boolean equalsSymbol(ClassDesc desc);\n+    boolean matches(ClassDesc desc);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ClassEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-     * If only symbol equivalence is desired, {@link #equalsSymbol(MethodTypeDesc)\n-     * equalsSymbol} should be used.  It requires reduced parsing and can\n+     * If only symbol equivalence is desired, {@link #matches(MethodTypeDesc)\n+     * matches} should be used.  It requires reduced parsing and can\n@@ -87,1 +87,1 @@\n-    boolean equalsSymbol(MethodTypeDesc desc);\n+    boolean matches(MethodTypeDesc desc);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/MethodTypeEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-     * If only symbol equivalence is desired, {@link #equalsSymbol(ModuleDesc)\n-     * equalsSymbol} should be used.  It requires reduced parsing and can\n+     * If only symbol equivalence is desired, {@link #matches(ModuleDesc)\n+     * matches} should be used.  It requires reduced parsing and can\n@@ -72,1 +72,1 @@\n-    boolean equalsSymbol(ModuleDesc desc);\n+    boolean matches(ModuleDesc desc);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ModuleEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -63,2 +63,2 @@\n-     * If only symbol equivalence is desired, {@link #equalsSymbol(PackageDesc)\n-     * equalsSymbol} should be used.  It requires reduced parsing and can\n+     * If only symbol equivalence is desired, {@link #matches(PackageDesc)\n+     * matches} should be used.  It requires reduced parsing and can\n@@ -75,1 +75,1 @@\n-    boolean equalsSymbol(PackageDesc desc);\n+    boolean matches(PackageDesc desc);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/PackageEntry.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-    boolean equalsSymbol(ClassDesc desc);\n+    boolean isFieldType(ClassDesc desc);\n@@ -104,1 +104,1 @@\n-    boolean equalsSymbol(MethodTypeDesc desc);\n+    boolean isMethodType(MethodTypeDesc desc);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/Utf8Entry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -440,1 +440,1 @@\n-        public boolean equalsSymbol(ClassDesc desc) {\n+        public boolean isFieldType(ClassDesc desc) {\n@@ -482,1 +482,1 @@\n-        public boolean equalsSymbol(MethodTypeDesc desc) {\n+        public boolean isMethodType(MethodTypeDesc desc) {\n@@ -620,1 +620,1 @@\n-        public boolean equalsSymbol(ClassDesc desc) {\n+        public boolean matches(ClassDesc desc) {\n@@ -634,1 +634,1 @@\n-                return desc.isArray() && ref1.equalsSymbol(desc);\n+                return desc.isArray() && ref1.isFieldType(desc);\n@@ -692,1 +692,1 @@\n-        public boolean equalsSymbol(PackageDesc desc) {\n+        public boolean matches(PackageDesc desc) {\n@@ -728,1 +728,1 @@\n-        public boolean equalsSymbol(ModuleDesc desc) {\n+        public boolean matches(ModuleDesc desc) {\n@@ -1089,2 +1089,2 @@\n-        public boolean equalsSymbol(MethodTypeDesc desc) {\n-            return ref1.equalsSymbol(desc);\n+        public boolean matches(MethodTypeDesc desc) {\n+            return ref1.isMethodType(desc);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-            return new PoolEntryCase<>(\"+equalsSymbol(\" + msg + \")\", () -> {\n+            return new PoolEntryCase<>(\"+matches(\" + msg + \")\", () -> {\n@@ -239,4 +239,4 @@\n-    static final SymbolicTranslator<ClassDesc, Utf8Entry> UTF8_CLASS_TRANSLATOR = new SymbolicTranslator<>(\"FieldDescriptorUtf8\", ConstantPoolBuilder::utf8Entry, Utf8Entry::equalsSymbol, Util::fieldTypeSymbol);\n-    static final SymbolicTranslator<MethodTypeDesc, Utf8Entry> UTF8_METHOD_TYPE_TRANSLATOR = new SymbolicTranslator<>(\"MethodDescriptorUtf8\", ConstantPoolBuilder::utf8Entry, Utf8Entry::equalsSymbol, Util::methodTypeSymbol);\n-    static final SymbolicTranslator<ClassDesc, ClassEntry> CLASS_ENTRY_TRANSLATOR = new SymbolicTranslator<>(\"ClassEntry\", ConstantPoolBuilder::classEntry, ClassEntry::equalsSymbol, ClassEntry::asSymbol);\n-    static final SymbolicTranslator<MethodTypeDesc, MethodTypeEntry> METHOD_TYPE_ENTRY_TRANSLATOR = new SymbolicTranslator<>(\"MethodTypeEntry\", ConstantPoolBuilder::methodTypeEntry, MethodTypeEntry::equalsSymbol, MethodTypeEntry::asSymbol);\n+    static final SymbolicTranslator<ClassDesc, Utf8Entry> UTF8_CLASS_TRANSLATOR = new SymbolicTranslator<>(\"FieldDescriptorUtf8\", ConstantPoolBuilder::utf8Entry, Utf8Entry::isFieldType, Util::fieldTypeSymbol);\n+    static final SymbolicTranslator<MethodTypeDesc, Utf8Entry> UTF8_METHOD_TYPE_TRANSLATOR = new SymbolicTranslator<>(\"MethodDescriptorUtf8\", ConstantPoolBuilder::utf8Entry, Utf8Entry::isMethodType, Util::methodTypeSymbol);\n+    static final SymbolicTranslator<ClassDesc, ClassEntry> CLASS_ENTRY_TRANSLATOR = new SymbolicTranslator<>(\"ClassEntry\", ConstantPoolBuilder::classEntry, ClassEntry::matches, ClassEntry::asSymbol);\n+    static final SymbolicTranslator<MethodTypeDesc, MethodTypeEntry> METHOD_TYPE_ENTRY_TRANSLATOR = new SymbolicTranslator<>(\"MethodTypeEntry\", ConstantPoolBuilder::methodTypeEntry, MethodTypeEntry::matches, MethodTypeEntry::asSymbol);\n@@ -244,2 +244,2 @@\n-    static final SymbolicTranslator<PackageDesc, PackageEntry> PACKAGE_ENTRY_TRANSLATOR = new SymbolicTranslator<>(\"PackageEntry\", ConstantPoolBuilder::packageEntry, PackageEntry::equalsSymbol, PackageEntry::asSymbol);\n-    static final SymbolicTranslator<ModuleDesc, ModuleEntry> MODULE_ENTRY_TRANSLATOR = new SymbolicTranslator<>(\"ModuleEntry\", ConstantPoolBuilder::moduleEntry, ModuleEntry::equalsSymbol, ModuleEntry::asSymbol);\n+    static final SymbolicTranslator<PackageDesc, PackageEntry> PACKAGE_ENTRY_TRANSLATOR = new SymbolicTranslator<>(\"PackageEntry\", ConstantPoolBuilder::packageEntry, PackageEntry::matches, PackageEntry::asSymbol);\n+    static final SymbolicTranslator<ModuleDesc, ModuleEntry> MODULE_ENTRY_TRANSLATOR = new SymbolicTranslator<>(\"ModuleEntry\", ConstantPoolBuilder::moduleEntry, ModuleEntry::matches, ModuleEntry::asSymbol);\n","filename":"test\/jdk\/jdk\/classfile\/ConstantDescSymbolsTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}