{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,4 +107,0 @@\n-  static {\n-      Reflection.registerFieldsToFilter(ConstantPool.class, Set.of(\"constantPoolOop\"));\n-  }\n-\n@@ -112,0 +108,1 @@\n+  \/\/ Field is filtered in jdk.internal.reflect.Reflection\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ConstantPool.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,3 @@\n+        \/\/ 3 filter scenarios:\n+        \/\/ 1. Classes loaded before Reflection, may (System) or may not\n+        \/\/    (ConstantPool) be initialized before main call: below\n@@ -65,1 +68,2 @@\n-            System.class, Set.of(\"security\")\n+            System.class, Set.of(\"security\"),\n+            ConstantPool.class, Set.of(\"constantPoolOop\")\n@@ -68,0 +72,5 @@\n+        \/\/ 2. Classes loaded after Reflection, but always initialized\n+        \/\/    before main call (MethodHandles.Lookup): register in static {}\n+\n+        \/\/ 3. Classes not always loaded or initialized before main call\n+        \/\/    (jdk.unsupported): need alternative handling in the future\n@@ -278,0 +287,1 @@\n+    \/\/ Only works for filter scenario #2\n@@ -285,0 +295,1 @@\n+    \/\/ Only works for filter scenario #2\n@@ -305,4 +316,1 @@\n-        if (fieldFilterMap == null) {\n-            \/\/ Bootstrapping\n-            return fields;\n-        }\n+        \/\/ fail fast if map is null, result is cached by callers\n@@ -313,4 +321,1 @@\n-        if (methodFilterMap == null) {\n-            \/\/ Bootstrapping\n-            return methods;\n-        }\n+        \/\/ fail fast if map is null, result is cached by callers\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/Reflection.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -73,4 +73,0 @@\n-    static {\n-        Reflection.registerMethodsToFilter(Unsafe.class, Set.of(\"getUnsafe\"));\n-    }\n-\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -34,0 +34,3 @@\n+\n+import jdk.internal.reflect.ConstantPool;\n+import jdk.internal.reflect.Reflection;\n@@ -43,1 +46,1 @@\n-            { jdk.internal.reflect.Reflection.class, null },\n+            { Reflection.class, null },\n@@ -68,0 +71,1 @@\n+            { ConstantPool.class, \"constantPoolOop\" },\n","filename":"test\/jdk\/jdk\/internal\/reflect\/Reflection\/Filtering.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}