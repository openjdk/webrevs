{"files":[{"patch":"@@ -2020,132 +2020,0 @@\n-\/\/ JVMTI GetConstantPool support\n-\n-\/\/ For debugging of constant pool\n-const bool debug_cpool = false;\n-\n-#define DBG(code) do { if (debug_cpool) { (code); } } while(0)\n-\n-static void print_cpool_bytes(jint cnt, u1 *bytes) {\n-  const char* WARN_MSG = \"Must not be such entry!\";\n-  jint size = 0;\n-  u2   idx1, idx2;\n-\n-  for (jint idx = 1; idx < cnt; idx++) {\n-    jint ent_size = 0;\n-    u1   tag  = *bytes++;\n-    size++;                       \/\/ count tag\n-\n-    printf(\"const #%03d, tag: %02d \", idx, tag);\n-    switch(tag) {\n-      case JVM_CONSTANT_Invalid: {\n-        printf(\"Invalid\");\n-        break;\n-      }\n-      case JVM_CONSTANT_Unicode: {\n-        printf(\"Unicode      %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_Utf8: {\n-        u2 len = Bytes::get_Java_u2(bytes);\n-        char str[128];\n-        if (len > 127) {\n-           len = 127;\n-        }\n-        strncpy(str, (char *) (bytes+2), len);\n-        str[len] = '\\0';\n-        printf(\"Utf8          \\\"%s\\\"\", str);\n-        ent_size = 2 + len;\n-        break;\n-      }\n-      case JVM_CONSTANT_Integer: {\n-        u4 val = Bytes::get_Java_u4(bytes);\n-        printf(\"int          %d\", *(int *) &val);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_Float: {\n-        u4 val = Bytes::get_Java_u4(bytes);\n-        printf(\"float        %5.3ff\", *(float *) &val);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_Long: {\n-        u8 val = Bytes::get_Java_u8(bytes);\n-        printf(\"long         \" INT64_FORMAT, (int64_t) *(jlong *) &val);\n-        ent_size = 8;\n-        idx++; \/\/ Long takes two cpool slots\n-        break;\n-      }\n-      case JVM_CONSTANT_Double: {\n-        u8 val = Bytes::get_Java_u8(bytes);\n-        printf(\"double       %5.3fd\", *(jdouble *)&val);\n-        ent_size = 8;\n-        idx++; \/\/ Double takes two cpool slots\n-        break;\n-      }\n-      case JVM_CONSTANT_Class: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        printf(\"class        #%03d\", idx1);\n-        ent_size = 2;\n-        break;\n-      }\n-      case JVM_CONSTANT_String: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        printf(\"String       #%03d\", idx1);\n-        ent_size = 2;\n-        break;\n-      }\n-      case JVM_CONSTANT_Fieldref: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"Field        #%03d, #%03d\", (int) idx1, (int) idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_Methodref: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"Method       #%03d, #%03d\", idx1, idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_InterfaceMethodref: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"InterfMethod #%03d, #%03d\", idx1, idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_NameAndType: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"NameAndType  #%03d, #%03d\", idx1, idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_ClassIndex: {\n-        printf(\"ClassIndex  %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_UnresolvedClass: {\n-        printf(\"UnresolvedClass: %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_UnresolvedClassInError: {\n-        printf(\"UnresolvedClassInErr: %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_StringIndex: {\n-        printf(\"StringIndex: %s\", WARN_MSG);\n-        break;\n-      }\n-    }\n-    printf(\";\\n\");\n-    bytes += ent_size;\n-    size  += ent_size;\n-  }\n-  printf(\"Cpool size: %d\\n\", size);\n-  fflush(nullptr);\n-  return;\n-} \/* end print_cpool_bytes *\/\n-\n-\n@@ -2214,1 +2082,0 @@\n-        DBG(printf(\"adding symbol entry %s = %d\\n\", sym->as_utf8(), idx));\n@@ -2222,1 +2089,0 @@\n-        DBG(printf(\"adding class entry %s = %d\\n\", sym->as_utf8(), idx));\n@@ -2256,1 +2122,0 @@\n-    DBG(printf(\"#%03hd tag=%03hd, \", (short)idx, (short)tag));\n@@ -2259,1 +2124,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Invalid\"));\n@@ -2264,1 +2128,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Unicode\"));\n@@ -2276,1 +2139,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Utf8: %s \", str));\n@@ -2309,1 +2171,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Class: idx=#%03hd, %s\", idx1, sym->as_utf8()));\n@@ -2318,1 +2179,0 @@\n-        DBG(printf(\"JVM_CONSTANT_String: idx=#%03hd, %s\", idx1, sym->as_utf8()));\n@@ -2328,1 +2188,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Methodref: %hd %hd\", idx1, idx2));\n@@ -2336,1 +2195,0 @@\n-        DBG(printf(\"JVM_CONSTANT_NameAndType: %hd %hd\", idx1, idx2));\n@@ -2343,1 +2201,0 @@\n-        DBG(printf(\"JVM_CONSTANT_ClassIndex: %hd\", idx1));\n@@ -2350,1 +2207,0 @@\n-        DBG(printf(\"JVM_CONSTANT_StringIndex: %hd\", idx1));\n@@ -2360,1 +2216,0 @@\n-        DBG(printf(\"JVM_CONSTANT_MethodHandle: %d %hd\", kind, idx1));\n@@ -2368,1 +2223,0 @@\n-        DBG(printf(\"JVM_CONSTANT_MethodType: %hd\", idx1));\n@@ -2379,1 +2233,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Dynamic: %hd %hd\", idx1, idx2));\n@@ -2389,1 +2242,0 @@\n-        DBG(printf(\"JVM_CONSTANT_InvokeDynamic: %hd %hd\", idx1, idx2));\n@@ -2393,1 +2245,0 @@\n-    DBG(printf(\"\\n\"));\n@@ -2399,2 +2250,0 @@\n-  \/\/ Keep temporarily for debugging until it's stable.\n-  DBG(print_cpool_bytes(cnt, start_bytes));\n@@ -2404,2 +2253,0 @@\n-#undef DBG\n-\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":0,"deletions":153,"binary":false,"changes":153,"status":"modified"}]}