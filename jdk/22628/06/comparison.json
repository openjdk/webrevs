{"files":[{"patch":"@@ -30,0 +30,2 @@\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n@@ -31,1 +33,0 @@\n-import java.nio.file.Paths;\n@@ -50,2 +51,17 @@\n-    private static final Path BOOT_MODULES_JIMAGE =\n-        Paths.get(JAVA_HOME, \"lib\", \"modules\");\n+    private static final Path BOOT_MODULES_JIMAGE;\n+\n+    static {\n+        FileSystem fs;\n+        if (ImageReaderFactory.class.getClassLoader() == null) {\n+            try {\n+                fs = (FileSystem) Class.forName(\"sun.nio.fs.DefaultFileSystemProvider\")\n+                        .getMethod(\"theFileSystem\")\n+                        .invoke(null);\n+            } catch (Exception e) {\n+                throw new ExceptionInInitializerError(e);\n+            }\n+        } else {\n+            fs = FileSystems.getDefault();\n+        }\n+        BOOT_MODULES_JIMAGE = fs.getPath(JAVA_HOME, \"lib\", \"modules\");\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReaderFactory.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4313887 7006126 8142968 8178380 8183320 8210112 8266345 8263940\n+ * @bug 4313887 7006126 8142968 8178380 8183320 8210112 8266345 8263940 8331467\n@@ -29,1 +29,1 @@\n- * @build SetDefaultProvider TestProvider m\/* jdk.test.lib.process.ProcessTools\n+ * @build SetDefaultProvider TestProvider m\/* jdk.test.lib.process.ProcessTools jdk.test.lib.process.OutputAnalyzer foo\/*\n@@ -41,0 +41,1 @@\n+import java.util.Arrays;\n@@ -46,0 +47,1 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -61,0 +63,5 @@\n+    private static final ToolProvider JMOD_TOOL = ToolProvider.findFirst(\"jmod\")\n+            .orElseThrow(() -> new RuntimeException(\"jmod tool not found\"));\n+    private static final ToolProvider JLINK_TOOL = ToolProvider.findFirst(\"jlink\")\n+            .orElseThrow(() -> new RuntimeException(\"jlink tool not found\"));\n+\n@@ -200,0 +207,67 @@\n+\n+    \/**\n+     * Test CustomfsImage with --list-modules and main When the default FileSystemProvider was overridden within a custom image\n+     *\/\n+    public void testCustomfsImage() throws Exception {\n+        Path customfsImage = createCustomfsImage();\n+        Path javaBin = customfsImage.resolve(\"bin\",\"java\");\n+        if( !Files.exists(javaBin)) {\n+            javaBin = customfsImage.resolve(\"bin\",\"java.exe\");\n+        }\n+        String[] withListModules = {javaBin.toString(),\"--list-modules\"};\n+        String[] withMain = {javaBin.toString(),\"-m\",\"foo\/customfs.Main\"};\n+\n+        System.out.println(\"launch with --list-modules\");\n+        OutputAnalyzer oa = ProcessTools.executeCommand(withListModules);\n+        oa.shouldHaveExitValue(0);\n+\n+        System.out.println(\"launch with main\");\n+        oa = ProcessTools.executeCommand(withMain);\n+        oa.shouldHaveExitValue(0);\n+    }\n+\n+    \/**\n+     * creates an image which contains the custom implementation of a FileSystemProvider\n+     *\/\n+    private Path createCustomfsImage() throws Exception {\n+        String customFSProviderModule = createCustomFSProviderModule().toString();\n+        Path customfsImageDir = Path.of(\"8331467-image\");\n+        String[] cmd = {\"--module-path\",customFSProviderModule,\n+                \"--add-modules\",\"foo\",\n+                \"--add-options\",\"-Djava.nio.file.spi.DefaultFileSystemProvider=customfs.CustomFileSystemProvider\",\n+                \"--output\",customfsImageDir.toString()};\n+        System.out.println(\"create image with\" + Arrays.toString(cmd));\n+        int exitCode = JLINK_TOOL.run(System.out, System.err, cmd);\n+        if ( exitCode != 0 ) {\n+            throw new AssertionError(\"Unexpected exit code: \" + exitCode + \" from jlink command\");\n+        }\n+        return customfsImageDir;\n+    }\n+\n+    \/**\n+     * creates a module which contains the custom implementation of a FileSystemProvider\n+     *\/\n+    private Path createCustomFSProviderModule() throws Exception {\n+        Path compileDestDir = customfsModuleClasses();\n+        Path fsProviderJmod = createTempDirectory(\"8331467-custom-fs\").resolve(\"foo.jmod\");\n+        String[] cmd = {\"create\", \"--class-path\", compileDestDir.toString(),\n+                \"--main-class\", \"customfs.Main\",\n+                fsProviderJmod.toString()};\n+        System.out.println(\"creating module for custom FileSystemProvider: \"\n+                + Arrays.toString(cmd));\n+        int exitCode = JMOD_TOOL.run(System.out, System.err, cmd);\n+        if ( exitCode != 0 ) {\n+            throw new AssertionError(\"Unexpected exit code: \" + exitCode + \" from jmod command\");\n+        }\n+        return fsProviderJmod;\n+    }\n+\n+    private Path customfsModuleClasses() throws Exception {\n+        String mp = System.getProperty(\"jdk.module.path\");\n+        for (String dir : mp.split(File.pathSeparator)) {\n+            Path foo = Paths.get(dir, \"foo\");\n+            if (Files.exists(foo)) return foo;\n+        }\n+        throw new RuntimeException(\"foo dir not found\");\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/file\/spi\/SetDefaultProvider.java","additions":76,"deletions":2,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+package customfs;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileAttributeView;\n+import java.nio.file.spi.FileSystemProvider;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class CustomFileSystemProvider extends FileSystemProvider {\n+\n+    private final FileSystemProvider delegate;\n+\n+    public CustomFileSystemProvider(FileSystemProvider delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public String getScheme() {\n+        return delegate.getScheme();\n+    }\n+\n+    @Override\n+    public FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException {\n+        return delegate.newFileSystem(uri, env);\n+    }\n+\n+    @Override\n+    public FileSystem getFileSystem(URI uri) {\n+        return delegate.getFileSystem(uri);\n+    }\n+\n+    @Override\n+    public Path getPath(URI uri) {\n+        return delegate.getPath(uri);\n+    }\n+\n+    @Override\n+    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n+        return delegate.newByteChannel(path, options, attrs);\n+    }\n+\n+    @Override\n+    public DirectoryStream<Path> newDirectoryStream(Path dir, DirectoryStream.Filter<? super Path> filter) throws IOException {\n+        return delegate.newDirectoryStream(dir, filter);\n+    }\n+\n+    @Override\n+    public void createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException {\n+        delegate.createDirectory(dir, attrs);\n+    }\n+\n+    @Override\n+    public void delete(Path path) throws IOException {\n+        delegate.delete(path);\n+    }\n+\n+    @Override\n+    public void copy(Path source, Path target, CopyOption... options) throws IOException {\n+        delegate.copy(source, target, options);\n+    }\n+\n+    @Override\n+    public void move(Path source, Path target, CopyOption... options) throws IOException {\n+        delegate.move(source, target, options);\n+    }\n+\n+    @Override\n+    public boolean isSameFile(Path path, Path path2) throws IOException {\n+        return delegate.isSameFile(path, path2);\n+    }\n+\n+    @Override\n+    public boolean isHidden(Path path) throws IOException {\n+        return delegate.isHidden(path);\n+    }\n+\n+    @Override\n+    public FileStore getFileStore(Path path) throws IOException {\n+        return delegate.getFileStore(path);\n+    }\n+\n+    @Override\n+    public void checkAccess(Path path, AccessMode... modes) throws IOException {\n+        delegate.checkAccess(path, modes);\n+    }\n+\n+    @Override\n+    public <V extends FileAttributeView> V getFileAttributeView(Path path, Class<V> type, LinkOption... options) {\n+        return delegate.getFileAttributeView(path, type, options);\n+    }\n+\n+    @Override\n+    public <A extends BasicFileAttributes> A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException {\n+        return delegate.readAttributes(path, type, options);\n+    }\n+\n+    @Override\n+    public Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) throws IOException {\n+        return delegate.readAttributes(path, attributes, options);\n+    }\n+\n+    @Override\n+    public void setAttribute(Path path, String attribute, Object value, LinkOption... options) throws IOException {\n+        delegate.setAttribute(path, attribute, value, options);\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/spi\/foo\/customfs\/CustomFileSystemProvider.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+package customfs;\n+\n+import java.io.IOException;\n+\n+\/**\n+ * To test startup with the default file system provider overridden.\n+ *\/\n+public class Main {\n+    public static void main(String[] args) throws IOException {\n+        System.out.println(\"success\");\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/spi\/foo\/customfs\/Main.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+module foo{\n+    exports customfs;\n+}\n","filename":"test\/jdk\/java\/nio\/file\/spi\/foo\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}