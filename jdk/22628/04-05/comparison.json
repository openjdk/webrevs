{"files":[{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4313887 7006126 8142968 8178380 8183320 8210112 8266345 8263940\n+ * @bug 4313887 7006126 8142968 8178380 8183320 8210112 8266345 8263940 8331467\n@@ -29,1 +29,1 @@\n- * @build SetDefaultProvider TestProvider m\/* jdk.test.lib.process.ProcessTools\n+ * @build SetDefaultProvider TestProvider m\/* jdk.test.lib.process.ProcessTools jdk.test.lib.process.OutputAnalyzer foo\/*\n@@ -41,0 +41,1 @@\n+import java.util.Arrays;\n@@ -46,0 +47,1 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -61,0 +63,5 @@\n+    private static final ToolProvider JMOD_TOOL = ToolProvider.findFirst(\"jmod\")\n+            .orElseThrow(() -> new RuntimeException(\"jmod tool not found\"));\n+    private static final ToolProvider JLINK_TOOL = ToolProvider.findFirst(\"jlink\")\n+            .orElseThrow(() -> new RuntimeException(\"jlink tool not found\"));\n+\n@@ -200,0 +207,67 @@\n+\n+    \/**\n+     * Test CustomfsImage with --list-modules and main When the default FileSystemProvider was overridden within a custom image\n+     *\/\n+    public void testCustomfsImage() throws Exception {\n+        Path customfsImage = createCustomfsImage();\n+        Path javaBin = customfsImage.resolve(\"bin\",\"java\");\n+        if( !Files.exists(javaBin)) {\n+            javaBin = customfsImage.resolve(\"bin\",\"java.exe\");\n+        }\n+        String[] withListModules = {javaBin.toString(),\"--list-modules\"};\n+        String[] withMain = {javaBin.toString(),\"-m\",\"foo\/customfs.Main\"};\n+\n+        System.out.println(\"launch with --list-modules\");\n+        OutputAnalyzer oa = ProcessTools.executeCommand(withListModules);\n+        oa.shouldHaveExitValue(0);\n+\n+        System.out.println(\"launch with main\");\n+        oa = ProcessTools.executeCommand(withMain);\n+        oa.shouldHaveExitValue(0);\n+    }\n+\n+    \/**\n+     * creates an image which contains the custom implementation of a FileSystemProvider\n+     *\/\n+    private Path createCustomfsImage() throws Exception {\n+        String customFSProviderModule = createCustomFSProviderModule().toString();\n+        Path customfsImageDir = Path.of(\"8331467-image\");\n+        String[] cmd = {\"--module-path\",customFSProviderModule,\n+                \"--add-modules\",\"foo\",\n+                \"--add-options\",\"-Djava.nio.file.spi.DefaultFileSystemProvider=customfs.CustomFileSystemProvider\",\n+                \"--output\",customfsImageDir.toString()};\n+        System.out.println(\"create image with\" + Arrays.toString(cmd));\n+        int exitCode = JLINK_TOOL.run(System.out, System.err, cmd);\n+        if ( exitCode != 0 ) {\n+            throw new AssertionError(\"Unexpected exit code: \" + exitCode + \" from jlink command\");\n+        }\n+        return customfsImageDir;\n+    }\n+\n+    \/**\n+     * creates a module which contains the custom implementation of a FileSystemProvider\n+     *\/\n+    private Path createCustomFSProviderModule() throws Exception {\n+        Path compileDestDir = customfsModuleClasses();\n+        Path fsProviderJmod = createTempDirectory(\"8331467-custom-fs\").resolve(\"foo.jmod\");\n+        String[] cmd = {\"create\", \"--class-path\", compileDestDir.toString(),\n+                \"--main-class\", \"customfs.Main\",\n+                fsProviderJmod.toString()};\n+        System.out.println(\"creating module for custom FileSystemProvider: \"\n+                + Arrays.toString(cmd));\n+        int exitCode = JMOD_TOOL.run(System.out, System.err, cmd);\n+        if ( exitCode != 0 ) {\n+            throw new AssertionError(\"Unexpected exit code: \" + exitCode + \" from jmod command\");\n+        }\n+        return fsProviderJmod;\n+    }\n+\n+    private Path customfsModuleClasses() throws Exception {\n+        String mp = System.getProperty(\"jdk.module.path\");\n+        for (String dir : mp.split(File.pathSeparator)) {\n+            Path foo = Paths.get(dir, \"foo\");\n+            if (Files.exists(foo)) return foo;\n+        }\n+        throw new RuntimeException(\"foo dir not found\");\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/file\/spi\/SetDefaultProvider.java","additions":76,"deletions":2,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+package customfs;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileAttributeView;\n+import java.nio.file.spi.FileSystemProvider;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class CustomFileSystemProvider extends FileSystemProvider {\n+\n+    private final FileSystemProvider delegate;\n+\n+    public CustomFileSystemProvider(FileSystemProvider delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public String getScheme() {\n+        return delegate.getScheme();\n+    }\n+\n+    @Override\n+    public FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException {\n+        return delegate.newFileSystem(uri, env);\n+    }\n+\n+    @Override\n+    public FileSystem getFileSystem(URI uri) {\n+        return delegate.getFileSystem(uri);\n+    }\n+\n+    @Override\n+    public Path getPath(URI uri) {\n+        return delegate.getPath(uri);\n+    }\n+\n+    @Override\n+    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n+        return delegate.newByteChannel(path, options, attrs);\n+    }\n+\n+    @Override\n+    public DirectoryStream<Path> newDirectoryStream(Path dir, DirectoryStream.Filter<? super Path> filter) throws IOException {\n+        return delegate.newDirectoryStream(dir, filter);\n+    }\n+\n+    @Override\n+    public void createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException {\n+        delegate.createDirectory(dir, attrs);\n+    }\n+\n+    @Override\n+    public void delete(Path path) throws IOException {\n+        delegate.delete(path);\n+    }\n+\n+    @Override\n+    public void copy(Path source, Path target, CopyOption... options) throws IOException {\n+        delegate.copy(source, target, options);\n+    }\n+\n+    @Override\n+    public void move(Path source, Path target, CopyOption... options) throws IOException {\n+        delegate.move(source, target, options);\n+    }\n+\n+    @Override\n+    public boolean isSameFile(Path path, Path path2) throws IOException {\n+        return delegate.isSameFile(path, path2);\n+    }\n+\n+    @Override\n+    public boolean isHidden(Path path) throws IOException {\n+        return delegate.isHidden(path);\n+    }\n+\n+    @Override\n+    public FileStore getFileStore(Path path) throws IOException {\n+        return delegate.getFileStore(path);\n+    }\n+\n+    @Override\n+    public void checkAccess(Path path, AccessMode... modes) throws IOException {\n+        delegate.checkAccess(path, modes);\n+    }\n+\n+    @Override\n+    public <V extends FileAttributeView> V getFileAttributeView(Path path, Class<V> type, LinkOption... options) {\n+        return delegate.getFileAttributeView(path, type, options);\n+    }\n+\n+    @Override\n+    public <A extends BasicFileAttributes> A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException {\n+        return delegate.readAttributes(path, type, options);\n+    }\n+\n+    @Override\n+    public Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) throws IOException {\n+        return delegate.readAttributes(path, attributes, options);\n+    }\n+\n+    @Override\n+    public void setAttribute(Path path, String attribute, Object value, LinkOption... options) throws IOException {\n+        delegate.setAttribute(path, attribute, value, options);\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/spi\/foo\/customfs\/CustomFileSystemProvider.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+package customfs;\n+\n+import java.io.IOException;\n+\n+\/**\n+ * To test startup with the default file system provider overridden.\n+ *\/\n+public class Main {\n+    public static void main(String[] args) throws IOException {\n+        System.out.println(\"success\");\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/spi\/foo\/customfs\/Main.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+module foo{\n+    exports customfs;\n+}\n","filename":"test\/jdk\/java\/nio\/file\/spi\/foo\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -1,297 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8331467\n- * @summary verify that an application launches correctly when launched using an application\n- *          specific default file system provider that is packaged in a module\n- * @modules java.base\/jdk.internal.util\n- * @library \/test\/lib\n- * @build jdk.test.lib.process.ProcessTools jdk.test.lib.process.OutputAnalyzer\n- * @run main CustomFileSystemProviderTest\n- *\/\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Arrays;\n-import java.util.spi.ToolProvider;\n-\n-import jdk.internal.util.OperatingSystem;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class CustomFileSystemProviderTest {\n-\n-    private static final ToolProvider JAVAC_TOOL = ToolProvider.findFirst(\"javac\")\n-            .orElseThrow(() -> new RuntimeException(\"javac tool not found\"));\n-    private static final ToolProvider JMOD_TOOL = ToolProvider.findFirst(\"jmod\")\n-            .orElseThrow(() -> new RuntimeException(\"jmod tool not found\"));\n-    private static final ToolProvider JLINK_TOOL = ToolProvider.findFirst(\"jlink\")\n-            .orElseThrow(() -> new RuntimeException(\"jlink tool not found\"));\n-\n-    private static final String SYS_PROP_DEF_FS_PRV = \"java.nio.file.spi.DefaultFileSystemProvider\";\n-    private static final String CUSTOM_MODULE_NAME = \"foo\";\n-    private static final String FS_PROVIDER_CLASS_SRC = \"\"\"\n-            package foo;\n-            import java.io.IOException;\n-            import java.net.URI;\n-            import java.nio.channels.SeekableByteChannel;\n-            import java.nio.file.*;\n-            import java.nio.file.attribute.BasicFileAttributes;\n-            import java.nio.file.attribute.FileAttribute;\n-            import java.nio.file.attribute.FileAttributeView;\n-            import java.nio.file.spi.FileSystemProvider;\n-            import java.util.Map;\n-            import java.util.Set;\n-           \\s\n-            public class NoOpFSProvider extends FileSystemProvider {\n-          \\s\n-                private final FileSystemProvider fileSystemProvider;\n-          \\s\n-                public NoOpFSProvider(FileSystemProvider fileSystemProvider) {\n-                    this.fileSystemProvider = fileSystemProvider;\n-                }\n-          \\s\n-                @Override\n-                public String getScheme() {\n-                    return fileSystemProvider.getScheme();\n-                }\n-          \\s\n-                @Override\n-                public FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException {\n-                    return fileSystemProvider.newFileSystem(uri, env);\n-                }\n-          \\s\n-                @Override\n-                public FileSystem getFileSystem(URI uri) {\n-                    return fileSystemProvider.getFileSystem(uri);\n-                }\n-          \\s\n-                @Override\n-                public Path getPath(URI uri) {\n-                    return fileSystemProvider.getPath(uri);\n-                }\n-          \\s\n-                @Override\n-                public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n-                    return fileSystemProvider.newByteChannel(path, options, attrs);\n-                }\n-          \\s\n-                @Override\n-                public DirectoryStream<Path> newDirectoryStream(Path dir, DirectoryStream.Filter<? super Path> filter) throws IOException {\n-                    return fileSystemProvider.newDirectoryStream(dir, filter);\n-                }\n-          \\s\n-                @Override\n-                public void createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException {\n-                    fileSystemProvider.createDirectory(dir, attrs);\n-                }\n-          \\s\n-                @Override\n-                public void delete(Path path) throws IOException {\n-                    fileSystemProvider.delete(path);\n-                }\n-          \\s\n-                @Override\n-                public void copy(Path source, Path target, CopyOption... options) throws IOException {\n-                    fileSystemProvider.copy(source, target, options);\n-                }\n-          \\s\n-                @Override\n-                public void move(Path source, Path target, CopyOption... options) throws IOException {\n-                    fileSystemProvider.move(source, target, options);\n-                }\n-          \\s\n-                @Override\n-                public boolean isSameFile(Path path, Path path2) throws IOException {\n-                    return fileSystemProvider.isSameFile(path, path2);\n-                }\n-          \\s\n-                @Override\n-                public boolean isHidden(Path path) throws IOException {\n-                    return fileSystemProvider.isHidden(path);\n-                }\n-          \\s\n-                @Override\n-                public FileStore getFileStore(Path path) throws IOException {\n-                    return fileSystemProvider.getFileStore(path);\n-                }\n-          \\s\n-                @Override\n-                public void checkAccess(Path path, AccessMode... modes) throws IOException {\n-                    fileSystemProvider.checkAccess(path, modes);\n-                }\n-          \\s\n-                @Override\n-                public <V extends FileAttributeView> V getFileAttributeView(Path path, Class<V> type, LinkOption... options) {\n-                    return fileSystemProvider.getFileAttributeView(path, type, options);\n-                }\n-          \\s\n-                @Override\n-                public <A extends BasicFileAttributes> A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException {\n-                    return fileSystemProvider.readAttributes(path, type, options);\n-                }\n-          \\s\n-                @Override\n-                public Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) throws IOException {\n-                    return fileSystemProvider.readAttributes(path, attributes, options);\n-                }\n-          \\s\n-                @Override\n-                public void setAttribute(Path path, String attribute, Object value, LinkOption... options) throws IOException {\n-                    fileSystemProvider.setAttribute(path, attribute, value, options);\n-                }\n-            }\n-          \\s\"\"\";\n-    private static final String ACTUAL_TEST = \"\"\"\n-            package foo;\n-            import java.io.IOException;\n-            import java.lang.reflect.Field;\n-            import java.net.URI;\n-            import java.nio.file.FileSystem;\n-            import java.nio.file.FileSystems;\n-            import java.nio.file.Path;\n-            import java.util.Collections;\n-           \\s\n-            public class ActualTest {\n-                public static void main(String[] args) throws IOException,ClassNotFoundException, IllegalAccessException{\n-          \\s\n-                   \/\/get the 'BOOT_MODULES_JIMAGE' field of local ImageReaderFactory\n-                   Field local_boot_modules_jimage_field = jdk.internal.jimage.ImageReaderFactory.class.getDeclaredFields()[1];\n-                   local_boot_modules_jimage_field.setAccessible(true);\n-                   Path local_boot_modules_jimage = (Path) local_boot_modules_jimage_field.get(null);\n-                   if(sun.nio.fs.DefaultFileSystemProvider.theFileSystem() != local_boot_modules_jimage.getFileSystem()){\n-                          throw new AssertionError(\"Creating local_boot_modules_jimage field should use sun.nio.fs.DefaultFileSystemProvider.theFileSystem() when ImageReaderFactory is loaded by boot classloader\");\n-                   }\n-          \\s\n-                   String targetJDK = System.getProperty(\"test.jdk\",\".\");\n-                   System.out.println(\"test.jdk: \"+targetJDK);\n-                   \/\/ set target jdk\n-                   FileSystem jrtFs = FileSystems.newFileSystem(URI.create(\"jrt:\/\"), Collections.singletonMap(\"java.home\",targetJDK));\n-                   ClassLoader jrtFsLoader = jrtFs.getClass().getClassLoader();\n-                   \/\/ get the 'BOOT_MODULES_JIMAGE' field of target ImageReaderFactory and verify the fileSystem which created the BOOT_MODULES_JIMAGE\n-                   Field target_boot_modules_jimage_field = Class.forName(\"jdk.internal.jimage.ImageReaderFactory\", true, jrtFsLoader).getDeclaredFields()[1];\n-                   target_boot_modules_jimage_field.setAccessible(true);\n-                   Path target_boot_modules_jimage = (Path) target_boot_modules_jimage_field.get(null);\n-                   if(FileSystems.getDefault() != target_boot_modules_jimage.getFileSystem()){\n-                          throw new AssertionError(\"Creating target_boot_modules_jimage field should use FileSystems.getDefault() when ImageReaderFactory is loaded by custom classloader\");\n-                   }\n-                   jrtFs.close();\n-          \\s\n-                   \/\/If the -Djava.nio.file.spi.DefaultFileSystemProvider value was set and DefaultFileSystemProvider was loaded successfully within jimage\n-                   System.out.println(\"success\");\n-                }\n-            }\n-          \\s\"\"\";\n-\n-\n-    public static void main(String[] args) throws Exception {\n-        Path fsProviderJmod = createCustomFSProviderModule();\n-        System.out.println(\"jmod created at \" + fsProviderJmod);\n-        Path image = createImage(fsProviderJmod);\n-        System.out.println(\"image created at \" + image);\n-        Path javaBinary = OperatingSystem.isWindows()\n-                ? image.resolve(\"bin\", \"java.exe\")\n-                : image.resolve(\"bin\", \"java\");\n-        if ( Files.notExists(javaBinary) ) {\n-            throw new AssertionError(javaBinary + \" is missing\");\n-        }\n-        System.out.println(\"launching main class with system-default FileSystemProvider\");\n-        \/\/ launch with system-default FileSystemProvider\n-        System.out.println(\"test.jdk: \"+System.getProperty(\"test.jdk\", \".\"));\n-        OutputAnalyzer oa = ProcessTools.executeCommand(\n-                javaBinary.toString(),\n-                \"-Dtest.jdk=\" + System.getProperty(\"test.jdk\", \".\"),\n-                \"--add-exports\", \"java.base\/jdk.internal.jimage=foo\", \"--add-exports\", \"java.base\/sun.nio.fs=foo\",\n-                \"--add-opens\", \"java.base\/jdk.internal.jimage=foo\", \"--add-exports\", \"java.base\/sun.nio.fs=foo\",\n-                \"-m\", CUSTOM_MODULE_NAME);\n-        oa.shouldHaveExitValue(0);\n-        oa.shouldContain(\"success\");\n-        \/\/ now launch with custom default FileSystemProvider\n-        String sysProp = \"-D\" + SYS_PROP_DEF_FS_PRV + \"=foo.NoOpFSProvider\";\n-        System.out.println(\"launching main class with custom FileSystemProvider\");\n-        oa = ProcessTools.executeCommand(\n-                javaBinary.toString(),\n-                \"-Dtest.jdk=\" + System.getProperty(\"test.jdk\", \".\"),\n-                \"--add-exports\", \"java.base\/jdk.internal.jimage=foo\", \"--add-exports\", \"java.base\/sun.nio.fs=foo\",\n-                \"--add-opens\", \"java.base\/jdk.internal.jimage=foo\", \"--add-exports\", \"java.base\/sun.nio.fs=foo\",\n-                sysProp, \"-m\", CUSTOM_MODULE_NAME, \"--add-exports\", \"java.base\/jdk.internal.jimage=foo\", \"--add-exports\", \"java.base\/sun.nio.fs=foo\");\n-        oa.shouldHaveExitValue(0);\n-        oa.shouldContain(\"success\");\n-\n-    }\n-\n-    \/\/ creates a module which contains the custom implementation of a FileSystemProvider\n-    private static Path createCustomFSProviderModule() throws Exception {\n-        Path compileDestDir = compileModuleClasses();\n-        Path fsProviderJmod = Path.of(CUSTOM_MODULE_NAME + \".jmod\");\n-        String[] cmd = {\"create\", \"--class-path\", compileDestDir.toString(),\n-                \"--main-class\", \"foo.ActualTest\",\n-                fsProviderJmod.getFileName().toString()};\n-        System.out.println(\"creating module for custom FileSystemProvider: \"\n-                + Arrays.toString(cmd));\n-        int exitCode = JMOD_TOOL.run(System.out, System.err, cmd);\n-        if ( exitCode != 0 ) {\n-            throw new AssertionError(\"Unexpected exit code: \" + exitCode + \" from jmod command\");\n-        }\n-        return fsProviderJmod.toAbsolutePath();\n-    }\n-\n-    \/\/ compiles the classes that we will be used for creating an application specific module\n-    private static Path compileModuleClasses() throws Exception {\n-        Path tmpSrcDir = Files.createTempDirectory(Path.of(\".\"), \"8331467-src\");\n-        String pkgName = \"foo\";\n-        Files.createDirectories(tmpSrcDir.resolve(pkgName));\n-        Path fsProviderJavaFile = Files.writeString(\n-                tmpSrcDir.resolve(pkgName, \"NoOpFSProvider.java\"), FS_PROVIDER_CLASS_SRC);\n-        Path moduleInfoJava = Files.writeString(tmpSrcDir.resolve(\"module-info.java\"),\n-                \"module \" + CUSTOM_MODULE_NAME + \"{exports foo;}\");\n-        Path mainJavaFile = Files.writeString(tmpSrcDir.resolve(pkgName, \"ActualTest.java\"), ACTUAL_TEST);\n-        Path compileDestDir = Files.createTempDirectory(Path.of(\".\"), \"8331467-\");\n-        String[] cmd = {\"-d\", compileDestDir.toString(), \"--add-exports\", \"java.base\/jdk.internal.jimage=foo\", \"--add-exports\", \"java.base\/sun.nio.fs=foo\", fsProviderJavaFile.toString(),\n-                moduleInfoJava.toString(), mainJavaFile.toString()};\n-        System.out.println(\"compiling classes: \" + Arrays.toString(cmd));\n-        int exitCode = JAVAC_TOOL.run(System.out, System.err, cmd);\n-        if ( exitCode != 0 ) {\n-            throw new AssertionError(\"Unexpected exit code: \" + exitCode + \" from javac command\");\n-        }\n-        Path compiledClassFile = compileDestDir.resolve(\"foo\", \"NoOpFSProvider.class\");\n-        if ( !Files.isRegularFile(compiledClassFile) ) {\n-            throw new AssertionError(\"compiled class file is missing at \" + compiledClassFile);\n-        }\n-        return compileDestDir.toAbsolutePath();\n-    }\n-\n-    \/\/ create a image which includes the application specific module\n-    private static Path createImage(Path fsProviderJmod) {\n-        Path image = Path.of(\"8331467-image\");\n-        String[] cmd = {\"--output\", image.getFileName().toString(),\n-                \"--add-modules\", CUSTOM_MODULE_NAME,\n-                \"--module-path\", fsProviderJmod.toString()};\n-        int exitCode = JLINK_TOOL.run(System.out, System.err, cmd);\n-        if ( exitCode != 0 ) {\n-            throw new AssertionError(\"Unexpected exit code: \" + exitCode + \" from jlink command\");\n-        }\n-        return image.toAbsolutePath();\n-    }\n-}\n","filename":"test\/jdk\/tools\/jimage\/CustomFileSystemProviderTest.java","additions":0,"deletions":297,"binary":false,"changes":297,"status":"deleted"}]}