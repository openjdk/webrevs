{"files":[{"patch":"@@ -21,0 +21,3 @@\n+\/.project\n+\/.classpath\n+\/.cproject\n","filename":".gitignore","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -82,0 +82,38 @@\n+<h4 id=\"eclipse-cdt\">Eclipse CDT<\/h4>\n+<p>The make system can generate an Eclipse CDT Workspace that enables\n+Eclipse indexing for the C and C++ sources throughout the entire\n+codebase, as well as registering all common make targets to be runnable\n+from the Eclipse explorer. This can be done after configuring by\n+running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-native-env<\/code><\/pre>\n+<p>After this is run, simply open and import the workspace in Eclipse\n+through\n+<code>File -&gt; Import -&gt; Projects from Folder or Archive<\/code> and\n+at <code>Import source<\/code> click on the directory\n+<code>ide\\eclipse<\/code>, which can be found in the build output\n+folder.<\/p>\n+<p>Setting up an Eclipse Workspace is relatively lightweight compared to\n+other supported IDEs, but requires that your CDT installation has Cross\n+GCC support enabled at the moment, even if you aren't cross compiling.\n+The Visual C++ compiler is, at present, not supported as an indexer.<\/p>\n+<p>If desired, you can instead request make to only include indexing\n+support for just the Java Virtual Machine instead of the entire native\n+codebase, by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-hotspot-env<\/code><\/pre>\n+<p>A quick tip for development with Eclipse in general, which also\n+applies to indexing the Java sources in the JDK (see below), is to\n+enable dark mode before doing so. Trust us, it looks much better than\n+Eclipse's default look and feel. ;)<\/p>\n+<p>If you think your particular Eclipse installation can handle the\n+strain, the make system also supports generating a combined Java and\n+C\/C++ Workspace for Eclipse which can then conveniently switch between\n+Java and C\/C++ natures during development by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-mixed-env<\/code><\/pre>\n+<p>Do note that this generates all features that come with both Java and\n+C\/C++ natures.<\/p>\n+<p>By default, the Eclipse Workspace is located in the ide subdirectory\n+in the build output. To share the JDK's source directory with the\n+Eclipse Workspace, you can instead run:<\/p>\n+<pre class=\"shell\"><code>make eclipse-shared-&lt;ENV&gt;-env<\/code><\/pre>\n+<p>Eclipse support in the JDK is relatively new, so do keep in mind that\n+not everything may work at the moment.<\/p>\n@@ -108,0 +146,20 @@\n+<h4 id=\"eclipse\">Eclipse<\/h4>\n+<p>Eclipse JDT is a widely used Java IDE and has been for a very long\n+time, being a popular choice alongside IntelliJ IDEA for Java\n+development. Likewise, the JDK now includes support for developing its\n+Java sources with Eclipse, which can be achieved by setting up a Java\n+Workspace by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-java-env<\/code><\/pre>\n+<p>After the workspace has been generated you can import it in the same\n+way as you would with Eclipse CDT:<\/p>\n+<p>Follow\n+<code>File -&gt; Import -&gt; Projects from Folder or Archive<\/code> and\n+select the <code>ide\\eclipse<\/code> directory in the build output folder\n+to import the newly created Java Workspace.<\/p>\n+<p>Alternatively, if you want a Java Workspace inside the JDK's source\n+directory, you can instead run:<\/p>\n+<pre class=\"shell\"><code>make eclipse-shared-java-env<\/code><\/pre>\n+<p>As mentioned above for Eclipse CDT, you can create a combined Java\n+and C\/C++ Workspace which can conveniently switch between Java and C\/C++\n+natures during development by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-mixed-env<\/code><\/pre>\n","filename":"doc\/ide.html","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -59,0 +59,57 @@\n+#### Eclipse CDT\n+\n+The make system can generate an Eclipse CDT Workspace that enables Eclipse\n+indexing for the C and C++ sources throughout the entire codebase, as well as\n+registering all common make targets to be runnable from the Eclipse explorer.\n+This can be done after configuring by running:\n+\n+```shell\n+make eclipse-native-env\n+```\n+\n+After this is run, simply open and import the workspace in Eclipse through\n+`File -> Import -> Projects from Folder or Archive` and at\n+`Import source`\n+click on the directory `ide\\eclipse`, which can be found in the build output\n+folder.\n+\n+Setting up an Eclipse Workspace is relatively lightweight compared to other\n+supported IDEs, but requires that your CDT installation has Cross GCC support\n+enabled at the moment, even if you aren't cross compiling. The Visual C++\n+compiler is, at present, not supported as an indexer.\n+\n+If desired, you can instead request make to only include indexing support for\n+just the Java Virtual Machine instead of the entire native codebase, by running:\n+\n+```shell\n+make eclipse-hotspot-env\n+```\n+\n+A quick tip for development with Eclipse in general, which also applies to\n+indexing the Java sources in the JDK (see below), is to enable dark mode\n+before doing so. Trust us, it looks much better than Eclipse's default look\n+and feel. ;)\n+\n+If you think your particular Eclipse installation can handle the strain, the\n+make system also supports generating a combined Java and C\/C++ Workspace for\n+Eclipse which can then conveniently switch between Java and C\/C++ natures\n+during development by running:\n+\n+```shell\n+make eclipse-mixed-env\n+```\n+\n+Do note that this generates all features that come with both Java and C\/C++\n+natures.\n+\n+By default, the Eclipse Workspace is located in the ide subdirectory in the\n+build output. To share the JDK's source directory with the Eclipse Workspace,\n+you can instead run:\n+\n+```shell\n+make eclipse-shared-<ENV>-env\n+```\n+\n+Eclipse support in the JDK is relatively new, so do keep in mind that not\n+everything may work at the moment.\n+\n@@ -99,0 +156,33 @@\n+\n+#### Eclipse\n+\n+Eclipse JDT is a widely used Java IDE and has been for a very long time, being\n+a popular choice alongside IntelliJ IDEA for Java development. Likewise, the\n+JDK now includes support for developing its Java sources with Eclipse, which\n+can be achieved by setting up a Java Workspace by running:\n+\n+```shell\n+make eclipse-java-env\n+```\n+\n+After the workspace has been generated you can import it in the same way as\n+you would with Eclipse CDT:\n+\n+Follow `File -> Import -> Projects from Folder or Archive` and select the\n+`ide\\eclipse` directory in the build output folder to import the newly created\n+Java Workspace.\n+\n+Alternatively, if you want a Java Workspace inside the JDK's source directory,\n+you can instead run:\n+\n+```shell\n+make eclipse-shared-java-env\n+```\n+\n+As mentioned above for Eclipse CDT, you can create a combined Java and C\/C++\n+Workspace which can conveniently switch between Java and C\/C++ natures during\n+development by running:\n+\n+```shell\n+make eclipse-mixed-env\n+```\n","filename":"doc\/ide.md","additions":90,"deletions":0,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -260,0 +260,40 @@\n+$(eval $(call SetupTarget, eclipse-java-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    ARGS := --always-make WORKSPACE=java SHARED=false, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-hotspot-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    ARGS := --always-make WORKSPACE=hotspot SHARED=false, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-native-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    ARGS := --always-make WORKSPACE=native SHARED=false, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-mixed-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    ARGS := --always-make SHARED=false, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-shared-java-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    ARGS := --always-make WORKSPACE=java SHARED=true, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-shared-hotspot-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    ARGS := --always-make WORKSPACE=hotspot SHARED=true, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-shared-native-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    ARGS := --always-make WORKSPACE=native SHARED=true, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-shared-mixed-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    ARGS := --always-make SHARED=true, \\\n+))\n+\n","filename":"make\/Main.gmk","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,390 @@\n+#\n+# Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+default: all\n+\n+include $(SPEC)\n+include MakeBase.gmk\n+include TextFileProcessing.gmk\n+include Utils.gmk\n+include Modules.gmk\n+\n+JVM_VARIANT := $(JVM_VARIANT_MAIN)\n+include hotspot\/HotspotCommon.gmk\n+include hotspot\/lib\/JvmFeatures.gmk\n+include hotspot\/lib\/JvmOverrideFiles.gmk\n+include hotspot\/lib\/JvmFlags.gmk\n+\n+# Warning: This file does not have the best formatting!\n+\n+# Random number generation, with the amount of specified digits\n+# No need to check if the parameter passed is a valid number, the shell will\n+# be more than happy to complain if it isn't ;)\n+RandomDigits = \\\n+  $(shell od -An -N8 -d \/dev\/urandom | sed -e 's| ||g' -e 's|\\(.\\{$(strip $1)\\}\\).*|\\1|')\n+\n+# Modified version of utility from JdkNativeCompilation.gmk\n+# The full path could be omitted, but it was chosen not to so wildcard\n+# can work properly for existing directories. The pathsubst below that\n+# this necessitates is a relatively small price to pay.\n+FindModuleNativeDirs = \\\n+  $(call uniq, $(wildcard \\\n+      $(TOPDIR)\/src\/$(strip $1)\/$(OPENJDK_TARGET_OS)\/native \\\n+      $(TOPDIR)\/src\/$(strip $1)\/$(OPENJDK_TARGET_OS_TYPE)\/native \\\n+      $(TOPDIR)\/src\/$(strip $1)\/share\/native))\n+\n+# Taken from JdkNativeCompilation.gmk\n+FindJavaHeaderDir = \\\n+  $(if $(strip $1),$(wildcard $(SUPPORT_OUTPUTDIR)\/headers\/$(strip $1)))\n+\n+JAVA_DIRS := $(strip $(foreach module, $(call FindAllModules), \\\n+  $(patsubst $(TOPDIR)\/%,%,$(filter-out $(OUTPUTDIR)%, \\\n+  $(call FindModuleSrcDirs, $(module))))))\n+\n+NATIVE_DIRS := $(strip $(foreach module, $(call FindAllModules), \\\n+  $(patsubst $(TOPDIR)\/%,%,$(call FindModuleNativeDirs, $(module)))))\n+\n+# Emit the defines extracted from the list of options specified in the first parameter into\n+# the language settings file, in Eclipse format.\n+EmitExtractedDefines = \\\n+  $(shell echo $(1) | grep -o \"\\-D\\s\\?\")\n+\n+################################################################################\n+# Create an Eclipse Workspace with the specified nature\n+#\n+# Parameter 1 is the name of the rule. This name is used as variable prefix,\n+# and the targets generated are listed in a variable by that name.\n+#\n+# Remaining parameter(s) are named arguments:\n+#   NATURE - Which Eclipse Workspace nature to generate for the Workspace. Can\n+#       be one of JAVA, HOTSPOT, NATIVE, or MIXED.\n+#   SHARED - Workspace will share the same directory as the JDK if true. Can be\n+#       either true or false. Defaults to false if not specified.\n+SetupEclipseWorkspace = $(NamedParamsMacroTemplate)\n+define SetupEclipseWorkspaceBody\n+\n+  $1_NATURES :=\n+  $1_BUILD_MANAGERS :=\n+  $1_LINKED_RESOURCES :=\n+\n+  ifeq ($$($1_NATURE), )\n+    $$(error No nature specified for Eclipse Workspace, cannot continue)\n+  endif\n+\n+  ifeq ($$(findstring $$($1_NATURE), JAVA HOTSPOT NATIVE MIXED), )\n+    $$(error Unrecognised nature $$($1_NATURE) specified for Eclipse Workspace)\n+  endif\n+\n+  ifeq ($$($1_SHARED), )\n+    $$(info Workspace sharing option not given, assuming non-shared Eclipse Workspace)\n+    $1_SHARED := false\n+  else ifeq ($$(findstring $$($1_SHARED), true false), )\n+    $$(error $$($1_NATURE) is not a boolean word)\n+  endif\n+\n+  ifeq ($$($1_SHARED), true)\n+    $1_CLASSPATH_FILE := $(TOPDIR)\/.classpath\n+    $1_WORKSPACE_FILE := $(TOPDIR)\/.project\n+    $1_NATIVE_FILE := $(TOPDIR)\/.cproject\n+    $1_SETTINGS_FILE := $(TOPDIR)\/.settings\/language.settings.xml\n+  else\n+    $1_IDE_OUTPUTDIR := $(OUTPUTDIR)\/ide\/eclipse\n+    $1_CLASSPATH_FILE := $$($1_IDE_OUTPUTDIR)\/.classpath\n+    $1_WORKSPACE_FILE := $$($1_IDE_OUTPUTDIR)\/.project\n+    $1_NATIVE_FILE := $$($1_IDE_OUTPUTDIR)\/.cproject\n+    $1_SETTINGS_FILE := $$($1_IDE_OUTPUTDIR)\/.settings\/language.settings.xml\n+    $$(call MakeDir, $$($1_IDE_OUTPUTDIR))\n+  endif\n+\n+  # ifneq ($$(findstring $$($1_NATURE), HOTSPOT NATIVE MIXED), )\n+  #   ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+  #     $$(error Visual C++ is not yet supported as an indexer for native workspaces!)\n+  #   endif\n+  # endif\n+\n+  ifneq ($$(findstring $$($1_NATURE), JAVA MIXED), )\n+\n+    $1_CLASSPATH :=\n+\n+    # Eclipse crashes when processing multiple module-info.java files\n+    # This is an annoying bug that has not been fixed for some time now\n+    $1_CLASSPATH += $$(foreach src,$(JAVA_DIRS), \\\n+      <classpathentry excluding=\"module-info.java|module-info.java.extra\" kind=\"src\" path=\"$$(src)\"\/>$$(NEWLINE))\n+\n+    $$(eval $$(call SetupTextFileProcessing, $1_CREATE_CLASSPATH_FILE, \\\n+      SOURCE_FILES := $(TOPDIR)\/make\/ide\/eclipse\/classpath.template, \\\n+      OUTPUT_FILE := $$($1_CLASSPATH_FILE), \\\n+      REPLACEMENTS := \\\n+          @@CLASSPATH@@ => $$($1_CLASSPATH), \\\n+    ))\n+\n+    TARGETS += $$($1_CREATE_CLASSPATH_FILE)\n+\n+    $1_NATURES += <nature>org.eclipse.jdt.core.javanature<\/nature>$$(NEWLINE)\n+\n+  endif\n+\n+  ifneq ($$(findstring $$($1_NATURE), HOTSPOT NATIVE MIXED), )\n+\n+    $1_NATIVE_SRCS :=\n+\n+    $1_BUILD_MANAGERS += \\\n+      <buildCommand> \\\n+          <name>org.eclipse.cdt.managedbuilder.core.genmakebuilder<\/name> \\\n+          <triggers>clean$$(COMMA)full$$(COMMA)incremental$$(COMMA)<\/triggers> \\\n+          <arguments> \\\n+          <\/arguments> \\\n+      <\/buildCommand> \\\n+      <buildCommand> \\\n+          <name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder<\/name> \\\n+          <triggers>full$$(COMMA)incremental$$(COMMA)<\/triggers> \\\n+          <arguments> \\\n+          <\/arguments> \\\n+      <\/buildCommand>$$(NEWLINE)\n+\n+    $1_NATURES += \\\n+      <nature>org.eclipse.cdt.core.cnature<\/nature> \\\n+      <nature>org.eclipse.cdt.core.ccnature<\/nature> \\\n+      <nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature<\/nature> \\\n+      <nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature<\/nature>$$(NEWLINE)\n+\n+    # This is always emitted, no matter which of the 3 natures were selected\n+    $1_NATIVE_SRCS += \\\n+      <entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"src\/hotspot\"\/>$$(NEWLINE)\n+\n+    ifneq ($$(findstring $$($1_NATURE), NATIVE MIXED), )\n+      $1_NATIVE_SRCS += $$(foreach src,$(NATIVE_DIRS), \\\n+        <entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"$$(strip $$(src))\"\/>$$(NEWLINE))\n+    endif\n+\n+    $1_WORKSPACE_MAJOR := $$(call RandomDigits, 10)\n+    $1_WORKSPACE_MINOR := $$(call RandomDigits, 9)\n+\n+    # FixPath already removes $(FIXPATH) automatically, but if we rely on FixPath\n+    # to do it for us dir won't be able to handle the converted path (if on Windows).\n+    # Reversing the order causes dir to mangle the preceeding $(FIXPATH) which breaks\n+    # the ability of FixPath to remove it, so it has to be manually removed here.\n+    #\n+    # Note that the workspace setup system currently does not support Visual C++ when\n+    # extracting compiler and\/or system headers vital to the build!\n+    $1_ENV := $$(call FixPath, $$(dir $$(patsubst $(FIXPATH), , $(CC))))\n+\n+    # Sidestep annoying issue of WSL path conversion not working properly with true\n+    # Unix paths. Eclipse can't run the WSL make by itself anyway, even if we could\n+    # properly convert the path.\n+    ifeq ($$(call isBuildOsEnv, windows.wsl1 windows.wsl2), true)\n+      $1_MAKE := wsl.exe $(MAKE)\n+    else\n+      $1_MAKE := $$(call FixPath, $(MAKE))\n+    endif\n+\n+    $1_MATCHING_MAKE_TARGETS :=\n+    $1_PLAIN_MAKE_TARGETS := update-build-docs docs gensrc gendata \\\n+      copy java launchers libs hotspot jdk product-images all-images test-image clean\n+\n+    # make reconfigure omitted since it is sensitive to which make was used\n+    ifeq ($$($1_SHARED), true)\n+      $1_PLAIN_MAKE_TARGETS += dist-clean\n+    endif\n+\n+    $1_MATCHING_MAKE_TARGETS += $$(foreach name,$$($1_PLAIN_MAKE_TARGETS), \\\n+      <target name=\"$$(strip $$(name))\" path=\"\" targetID=\"org.eclipse.cdt.build.MakeTargetBuilder\"> \\\n+          <buildCommand>$$($1_MAKE)<\/buildCommand> \\\n+          <buildArguments>-C $$(call FixPath, $(TOPDIR))<\/buildArguments> \\\n+          <buildTarget>$$(strip $$(name))<\/buildTarget> \\\n+          <stopOnError>true<\/stopOnError> \\\n+          <useDefaultCommand>false<\/useDefaultCommand> \\\n+          <runAllBuilders>true<\/runAllBuilders> \\\n+      <\/target>$$(NEWLINE))\n+\n+    $$(eval $$(call SetupTextFileProcessing, $1_CREATE_NATIVE_FILE, \\\n+      SOURCE_FILES := $(TOPDIR)\/make\/ide\/eclipse\/native.template, \\\n+      OUTPUT_FILE := $$($1_NATIVE_FILE), \\\n+      REPLACEMENTS := \\\n+          @@DIR@@ => $$(call FixPath, $(TOPDIR)) ; \\\n+          @@ENV@@ => $$($1_ENV) ; \\\n+          @@WORKSPACE@@ => $$($1_WORKSPACE_MAJOR) ; \\\n+          @@MINOR@@ =>  $$($1_WORKSPACE_MINOR) ; \\\n+          @@MAKE@@ => $$($1_MAKE) ; \\\n+          @@SRC@@ => $$($1_NATIVE_SRCS) ; \\\n+          @@MAKE_TARGETS@@ => $$($1_MATCHING_MAKE_TARGETS), \\\n+    ))\n+\n+    TARGETS += $$($1_CREATE_NATIVE_FILE)\n+\n+    $$(call MakeDir, $$($1_SETTINGS_FILE))\n+\n+    # $$(foreach module, $$(call FindAllModules), $$(if $$(call FindJavaHeaderDir, $$(module)), ))\n+    $1_CSETTINGS :=\n+    $1_CXXSETTINGS :=\n+\n+    ifneq ($$(findstring $$($1_NATURE), NATIVE MIXED), )\n+      # $$(foreach dirs, $$(strip $$(patsubst $(TOPDIR)\/%,%,$$(call FindModuleNativeDirs, $$(module)))), \\\n+      #   <resource project-relative-path=\"$$(dirs)\"> \\\n+      #       <entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $$(call FindJavaHeaderDir, $$(module)))\"\/> \\\n+      #   <\/resource>$$(NEWLINE))\n+\n+      # jdk.sctp is a special (C only) case that needs several java.base headers\n+      $1_CSETTINGS += $$(foreach dirs, $$(strip $$(patsubst $(TOPDIR)\/%,%, $$(call FindModuleNativeDirs, jdk.sctp))), \\\n+        <resource project-relative-path=\"$$(dirs)\"> \\\n+            <entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $$(call FindJavaHeaderDir, java.base))\"\/> \\\n+        <\/resource>$$(NEWLINE))\n+\n+      # main.c source file used for generic launchers\n+      $1_CSETTINGS +=\n+        <resource project-relative-path=\"src\/java.base\/share\/native\/launcher\/main.c\"> \\\n+            <entry kind=\"macro\" name=\"LAUNCHER_NAME\" value=\"&quot;$(LAUNCHER_NAME)&quot;\"\/> \\\n+        <\/resource>$$(NEWLINE)\n+    endif\n+\n+    # HotSpot first\n+    $1_CXXSETTINGS += <resource project-relative-path=\"src\/hotspot\">$$(NEWLINE)\n+\n+    # If only the Java Virtual Machine sources were requested, headers from other parts of\n+    # the native source that it needs will not be available. Add them as include paths here\n+    # instead.\n+    ifeq ($$($1_NATURE), HOTSPOT)\n+      $1_CXXSETTINGS += $$(foreach src, $$(strip $$(patsubst %,%\/include,$$(call FindModuleNativeDirs, java.base))), \\\n+        $(X)    $(X)<entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $$(src))\"\/>$$(NEWLINE))\n+      $1_CXXSETTINGS += $(X)    $(X)<entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $(TOPDIR)\/src\/java.base\/share\/native\/libjimage)\"\/>$$(NEWLINE)\n+    endif\n+\n+    $1_CXXSETTINGS += $(X)    $(X)<entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $(JVM_VARIANT_OUTPUTDIR)\/gensrc)\"\/>$$(NEWLINE)\n+\n+    ifeq ($$(call check-jvm-feature, compiler2), true)\n+      $1_CXXSETTINGS += $(X)    $(X)<entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $(JVM_VARIANT_OUTPUTDIR)\/gensrc\/adfiles)\"\/>$$(NEWLINE)\n+    endif\n+\n+    $1_CXXSETTINGS += <\/resource>$$(NEWLINE)\n+\n+    $1_CXXSETTINGS += \\\n+      <resource project-relative-path=\"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp\"> \\\n+          <entry kind=\"macro\" name=\"HOTSPOT_VERSION_STRING\" value=\"&quot;$(VERSION_STRING)&quot;\"\/> \\\n+          <entry kind=\"macro\" name=\"DEBUG_LEVEL\" value=\"&quot;$(DEBUG_LEVEL)&quot;\"\/> \\\n+          <entry kind=\"macro\" name=\"HOTSPOT_BUILD_USER\" value=\"&quot;$(USERNAME)&quot;\"\/> \\\n+          <entry kind=\"macro\" name=\"HOTSPOT_VM_DISTRO\" value=\"&quot;$(HOTSPOT_VM_DISTRO)&quot;\"\/> \\\n+          <entry kind=\"macro\" name=\"CPU\" value=\"&quot;$(OPENJDK_TARGET_CPU_VM_VERSION)&quot;\"\/> \\\n+          <entry kind=\"macro\" name=\"HOTSPOT_BUILD_TIME\" value=\"&quot;$(if $(HOTSPOT_BUILD_TIME),$(HOTSPOT_BUILD_TIME),$(call EpochToISO8601,$(shell $(DATE) +\"%s\")))&quot;\"\/> \\\n+      <\/resource> \\\n+      <resource project-relative-path=\"src\/hotspot\/share\/runtime\/arguments.cpp\"> \\\n+          <entry kind=\"macro\" name=\"HOTSPOT_VERSION_STRING\" value=\"&quot;$(VERSION_STRING)&quot;\"\/> \\\n+          <entry kind=\"macro\" name=\"DEBUG_LEVEL\" value=\"&quot;$(DEBUG_LEVEL)&quot;\"\/> \\\n+          <entry kind=\"macro\" name=\"HOTSPOT_BUILD_USER\" value=\"&quot;$(USERNAME)&quot;\"\/> \\\n+          <entry kind=\"macro\" name=\"HOTSPOT_VM_DISTRO\" value=\"&quot;$(HOTSPOT_VM_DISTRO)&quot;\"\/> \\\n+          <entry kind=\"macro\" name=\"CPU\" value=\"&quot;$(OPENJDK_TARGET_CPU_VM_VERSION)&quot;\"\/> \\\n+          <entry kind=\"macro\" name=\"HOTSPOT_BUILD_TIME\" value=\"&quot;$(if $(HOTSPOT_BUILD_TIME),$(HOTSPOT_BUILD_TIME),$(call EpochToISO8601,$(shell $(DATE) +\"%s\")))&quot;\"\/> \\\n+      <\/resource>$$(NEWLINE)\n+\n+    # Now the rest of the C++ sources in the codebase\n+    ifneq ($$(findstring $$($1_NATURE), NATIVE MIXED), )\n+      # $$(foreach dirs, $$(strip $$(patsubst $(TOPDIR)\/%,%,$$(call FindModuleNativeDirs, $$(module)))), \\\n+      #   <resource project-relative-path=\"$$(dirs)\"> \\\n+      #       <entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $$(call FindJavaHeaderDir, $$(module)))\"\/> \\\n+      #   <\/resource>$$(NEWLINE))\n+    endif\n+\n+    $$(eval $$(call SetupTextFileProcessing, $1_CREATE_SETTINGS_FILE, \\\n+      SOURCE_FILES := $(TOPDIR)\/make\/ide\/eclipse\/settings.template, \\\n+      OUTPUT_FILE := $$($1_SETTINGS_FILE), \\\n+      REPLACEMENTS := \\\n+          @@WORKSPACE@@ => $$($1_WORKSPACE_MAJOR), \\\n+    ))\n+\n+    TARGETS += $$($1_CREATE_SETTINGS_FILE)\n+\n+  endif\n+\n+  ifeq ($$($1_SHARED), false)\n+    ifneq ($$(findstring $$($1_NATURE), JAVA MIXED), )\n+      $1_LINKED_RESOURCES += $$(foreach src,$(JAVA_DIRS), \\\n+        <link> \\\n+            <name>$$(strip $$(src))<\/name> \\\n+            <type>2<\/type> \\\n+            <location>$$(subst \\\\,\/,$$(call FixPath, $(TOPDIR)\/$$(src)))<\/location> \\\n+        <\/link>$$(NEWLINE))\n+    endif\n+\n+    ifneq ($$(findstring $$($1_NATURE), HOTSPOT NATIVE MIXED), )\n+      # CDT includes a Makefile editor, so if CDT support was indicated there's no harm in\n+      # including the make sources as well, since the cost of indexing them is miniscule\n+      $1_LINKED_RESOURCES += \\\n+        <link> \\\n+            <name>make<\/name> \\\n+            <type>2<\/type> \\\n+            <location>$$(subst \\\\,\/,$$(call FixPath, $(TOPDIR)\/make))<\/location> \\\n+        <\/link> \\\n+        <link> \\\n+            <name>src\/hotspot<\/name> \\\n+            <type>2<\/type> \\\n+            <location>$$(subst \\\\,\/,$$(call FixPath, $(TOPDIR)\/src\/hotspot))<\/location> \\\n+        <\/link>$$(NEWLINE)\n+    endif\n+\n+    ifneq ($$(findstring $$($1_NATURE), NATIVE MIXED), )\n+      $1_LINKED_RESOURCES += $$(foreach src,$(NATIVE_DIRS), \\\n+        <link> \\\n+            <name>$$(strip $$(src))<\/name> \\\n+            <type>2<\/type> \\\n+            <location>$$(subst \\\\,\/,$$(call FixPath, $(TOPDIR)\/$$(src)))<\/location> \\\n+        <\/link>$$(NEWLINE))\n+    endif\n+  endif\n+\n+  $$(eval $$(call SetupTextFileProcessing, $1_CREATE_WORKSPACE_FILE, \\\n+    SOURCE_FILES := $(TOPDIR)\/make\/ide\/eclipse\/workspace.template, \\\n+    OUTPUT_FILE := $$($1_WORKSPACE_FILE), \\\n+    REPLACEMENTS := \\\n+        @@BUILD_MANAGERS@@ => $$($1_BUILD_MANAGERS) ; \\\n+        @@NATURES@@ => $$($1_NATURES) ; \\\n+        @@LINKED_RESOURCES@@ => $$($1_LINKED_RESOURCES), \\\n+  ))\n+\n+  TARGETS += $$($1_CREATE_WORKSPACE_FILE)\n+\n+endef\n+\n+ifeq ($(WORKSPACE), java)\n+$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+  NATURE := JAVA, \\\n+  SHARED := $(SHARED), \\\n+))\n+else ifeq ($(WORKSPACE), hotspot)\n+$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+  NATURE := HOTSPOT, \\\n+  SHARED := $(SHARED), \\\n+))\n+else ifeq ($(WORKSPACE), native)\n+$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+  NATURE := NATIVE, \\\n+  SHARED := $(SHARED), \\\n+))\n+else\n+$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+  NATURE := MIXED, \\\n+  SHARED := $(SHARED), \\\n+))\n+endif\n+\n+all: $(TARGETS)\n","filename":"make\/ide\/eclipse\/CreateWorkspace.gmk","additions":390,"deletions":0,"binary":false,"changes":390,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+    @@CLASSPATH@@\n+<\/classpath>\n","filename":"make\/ide\/eclipse\/classpath.template","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<?fileVersion 4.0.0?><cproject storage_type_id=\"org.eclipse.cdt.core.XmlProjectDescriptionStorage\">\n+    <storageModule moduleId=\"org.eclipse.cdt.core.language.mapping\">\n+        <project-mappings>\n+            <content-type-mapping configuration=\"\" content-type=\"org.eclipse.cdt.core.cHeader\" language=\"org.eclipse.cdt.core.c\"\/>\n+            <content-type-mapping configuration=\"\" content-type=\"org.eclipse.cdt.core.cSource\" language=\"org.eclipse.cdt.core.c\"\/>\n+            <content-type-mapping configuration=\"\" content-type=\"org.eclipse.cdt.core.cxxHeader\" language=\"org.eclipse.cdt.core.c++\"\/>\n+            <content-type-mapping configuration=\"\" content-type=\"org.eclipse.cdt.core.cxxSource\" language=\"org.eclipse.cdt.core.c++\"\/>\n+        <\/project-mappings>\n+    <\/storageModule>\n+\n+    <storageModule moduleId=\"scannerConfiguration\">\n+        <autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"\/>\n+    <\/storageModule>\n+\n+    <storageModule moduleId=\"org.eclipse.cdt.core.LanguageSettingsProviders\"\/>\n+\n+    <storageModule moduleId=\"org.eclipse.cdt.core.settings\">\n+        <cconfiguration id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@WORKSPACE@@\">\n+            <storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"\/>\n+\n+            <storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@WORKSPACE@@\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"Java\">\n+                <externalSettings\/>\n+                <extensions>\n+                    <extension id=\"org.eclipse.cdt.core.ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"\/>\n+                    <extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>\n+                    <extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>\n+                    <extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>\n+                    <extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>\n+                    <extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>\n+                <\/extensions>\n+            <\/storageModule>\n+\n+            <storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n+                <configuration buildProperties=\"\" description=\"\" id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@WORKSPACE@@\" name=\"Java\" parent=\"org.eclipse.cdt.build.core.emptycfg\">\n+                    <folderInfo id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@WORKSPACE@@.@@MINOR@@\" name=\"\/\" resourcePath=\"\">\n+                        <toolChain id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@MINOR@@\" name=\"Cross GCC\" superClass=\"cdt.managedbuild.toolchain.gnu.cross.base\">\n+                            <option id=\"cdt.managedbuild.option.gnu.cross.path.@@MINOR@@\" name=\"Path\" superClass=\"cdt.managedbuild.option.gnu.cross.path\" value=\"@@ENV@@\" valueType=\"string\"\/>\n+                            <targetPlatform archList=\"all\" binaryParser=\"\" id=\"cdt.managedbuild.targetPlatform.gnu.cross.@@WORKSPACE@@\" isAbstract=\"false\" osList=\"all\" superClass=\"cdt.managedbuild.targetPlatform.gnu.cross\"\/>\n+                            <builder command=\"@@MAKE@@\" arguments=\"-C @@DIR@@\" id=\"cdt.managedbuild.builder.gnu.cross.@@MINOR@@\" incrementalBuildTarget=\"jdk\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"false\" name=\"Gnu Make Builder\" parallelBuildOn=\"false\" superClass=\"cdt.managedbuild.builder.gnu.cross\"\/>\n+                        <\/toolChain>\n+                    <\/folderInfo>\n+                    <sourceEntries>\n+                        @@SRC@@\n+                    <\/sourceEntries>\n+                <\/configuration>\n+            <\/storageModule>\n+        <\/cconfiguration>\n+    <\/storageModule>\n+\n+    <storageModule moduleId=\"org.eclipse.cdt.make.core.buildtargets\">\n+        <buildTargets>\n+            @@MAKE_TARGETS@@\n+        <\/buildTargets>\n+    <\/storageModule>\n+<\/cproject>\n","filename":"make\/ide\/eclipse\/native.template","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project>\n+    <configuration id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@WORKSPACE@@\" name=\"Java\">\n+        <extension point=\"org.eclipse.cdt.core.LanguageSettingsProvider\">\n+            <provider build-parser-id=\"\" cdb-modified-time=\"\" class=\"org.eclipse.cdt.managedbuilder.internal.language.settings.providers.CompilationDatabaseParser\" id=\"org.eclipse.cdt.managedbuilder.core.CompilationDatabaseParser\" name=\"Compilation Database Parser\" prefer-non-shared=\"true\" store-entries-with-project=\"true\"\/>\n+            <provider class=\"org.eclipse.cdt.managedbuilder.language.settings.providers.GCCBuildCommandParser\" id=\"org.eclipse.cdt.managedbuilder.core.GCCBuildCommandParser\" keep-relative-paths=\"false\" name=\"CDT GCC Build Output Parser\" parameter=\"([^\/\\\\\\\\]*)((g?cc)|([gc]\\+\\+)|(clang))\" prefer-non-shared=\"true\" store-entries-with-project=\"true\"\/>\n+            <provider class=\"org.eclipse.cdt.internal.build.crossgcc.CrossGCCBuiltinSpecsDetector\" console=\"true\" env-hash=\"\" id=\"org.eclipse.cdt.build.crossgcc.CrossGCCBuiltinSpecsDetector\" keep-relative-paths=\"false\" name=\"CDT Cross GCC Built-in Compiler Settings\" parameter=\"${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;\" prefer-non-shared=\"true\" store-entries-with-project=\"true\">\n+                <language-scope id=\"org.eclipse.cdt.core.c\"\/>\n+                <language-scope id=\"org.eclipse.cdt.core.c++\"\/>\n+            <\/provider>\n+            <provider class=\"org.eclipse.cdt.core.language.settings.providers.LanguageSettingsGenericProvider\" id=\"org.eclipse.cdt.ui.UserLanguageSettingsProvider\" name=\"CDT User Setting Entries\" prefer-non-shared=\"true\" store-entries-with-project=\"true\">\n+                <language id=\"org.eclipse.cdt.core.c\">\n+                    @@CSETTINGS@@\n+                <\/language>\n+\n+                <language id=\"org.eclipse.cdt.core.c++\">\n+                    @@CXXSETTINGS@@\n+                <\/language>\n+           <\/provider>\n+        <\/extension>\n+    <\/configuration>\n+<\/project>\n","filename":"make\/ide\/eclipse\/settings.template","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<projectDescription>\n+    <name>Java<\/name>\n+    <comment><\/comment>\n+    <projects>\n+    <\/projects>\n+    <buildSpec>\n+        @@BUILD_MANAGERS@@\n+    <\/buildSpec>\n+    <natures>\n+        @@NATURES@@\n+    <\/natures>\n+    <linkedResources>\n+        @@LINKED_RESOURCES@@\n+    <\/linkedResources>\n+<\/projectDescription>\n","filename":"make\/ide\/eclipse\/workspace.template","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -38,2 +38,2 @@\n-  # Use server as base for defines and includes\n-  JVM_VARIANT=server\n+  # Use primary variant for defines and includes\n+  JVM_VARIANT := $(JVM_VARIANT_MAIN)\n","filename":"make\/ide\/visualstudio\/hotspot\/CreateVSProject.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}