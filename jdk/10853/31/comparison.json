{"files":[{"patch":"@@ -21,0 +21,2 @@\n+\/.classpath\n+\/.cproject\n","filename":".gitignore","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,0 +82,32 @@\n+<h4 id=\"eclipse-cdt\">Eclipse CDT<\/h4>\n+<p>The make system can generate an Eclipse CDT Workspace that enables\n+Eclipse indexing for the C and C++ sources throughout the entire\n+codebase, as well as registering all common make targets to be runnable\n+from the Eclipse explorer. This can be done after configuring by\n+running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-native-env<\/code><\/pre>\n+<p>After this is run, simply open and import the workspace in Eclipse\n+through\n+<code>File -&gt; Import -&gt; Projects from Folder or Archive<\/code> and\n+at <code>Import source<\/code> click on the directory\n+<code>ide\\eclipse<\/code>, which can be found in the build output\n+folder.<\/p>\n+<p>Setting up an Eclipse Workspace is relatively lightweight compared to\n+other supported IDEs, but requires that your CDT installation has Cross\n+GCC support enabled at the moment, even if you aren't cross compiling.\n+The Visual C++ compiler is, at present, not supported as an indexer.<\/p>\n+<p>If desired, you can instead request make to only include indexing\n+support for just the Java Virtual Machine instead of the entire native\n+codebase, by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-hotspot-env<\/code><\/pre>\n+<p>A quick tip for development with Eclipse in general, which also\n+applies to indexing the Java sources in the JDK (see below), is to\n+enable dark mode before doing so. Trust us, it looks much better than\n+Eclipse's default look and feel. ;)<\/p>\n+<p>If you think your particular Eclipse installation can handle the\n+strain, the make system also supports generating a combined Java and\n+C\/C++ Workspace for Eclipse which can then conveniently switch between\n+Java and C\/C++ natures during development by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-full-env<\/code><\/pre>\n+<p>Do note that this generates all features that come with both Java and\n+C\/C++ natures.<\/p>\n@@ -108,0 +140,17 @@\n+<h4 id=\"eclipse\">Eclipse<\/h4>\n+<p>Eclipse JDT is a widely used Java IDE and has been for a very long\n+time, being a popular choice alongside IntelliJ IDEA for Java\n+development. Likewise, the JDK now includes support for developing its\n+Java sources with Eclipse, which can be achieved by setting up a Java\n+Workspace by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-java-env<\/code><\/pre>\n+<p>After the workspace has been generated you can import it in the same\n+way as you would with Eclipse CDT:<\/p>\n+<p>Follow\n+<code>File -&gt; Import -&gt; Projects from Folder or Archive<\/code> and\n+select the <code>ide\\eclipse<\/code> directory in the build output folder\n+to import the newly created Java Workspace.<\/p>\n+<p>As mentioned above for Eclipse CDT, you can create a combined Java\n+and C\/C++ Workspace which can conveniently switch between Java and C\/C++\n+natures during development by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-full-env<\/code><\/pre>\n","filename":"doc\/ide.html","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -59,0 +59,46 @@\n+#### Eclipse CDT\n+\n+The make system can generate an Eclipse CDT Workspace that enables Eclipse\n+indexing for the C and C++ sources throughout the entire codebase, as well as\n+registering all common make targets to be runnable from the Eclipse explorer.\n+This can be done after configuring by running:\n+\n+```shell\n+make eclipse-native-env\n+```\n+\n+After this is run, simply open and import the workspace in Eclipse through\n+`File -> Import -> Projects from Folder or Archive` and at\n+`Import source`\n+click on the directory `ide\\eclipse`, which can be found in the build output\n+folder.\n+\n+Setting up an Eclipse Workspace is relatively lightweight compared to other\n+supported IDEs, but requires that your CDT installation has Cross GCC support\n+enabled at the moment, even if you aren't cross compiling. The Visual C++\n+compiler is, at present, not supported as an indexer.\n+\n+If desired, you can instead request make to only include indexing support for\n+just the Java Virtual Machine instead of the entire native codebase, by running:\n+\n+```shell\n+make eclipse-hotspot-env\n+```\n+\n+A quick tip for development with Eclipse in general, which also applies to\n+indexing the Java sources in the JDK (see below), is to enable dark mode\n+before doing so. Trust us, it looks much better than Eclipse's default look\n+and feel. ;)\n+\n+If you think your particular Eclipse installation can handle the strain, the\n+make system also supports generating a combined Java and C\/C++ Workspace for\n+Eclipse which can then conveniently switch between Java and C\/C++ natures\n+during development by running:\n+\n+```shell\n+make eclipse-full-env\n+```\n+\n+Do note that this generates all features that come with both Java and C\/C++\n+natures.\n+\n@@ -99,0 +145,25 @@\n+\n+#### Eclipse\n+\n+Eclipse JDT is a widely used Java IDE and has been for a very long time, being\n+a popular choice alongside IntelliJ IDEA for Java development. Likewise, the\n+JDK now includes support for developing its Java sources with Eclipse, which\n+can be achieved by setting up a Java Workspace by running:\n+\n+```shell\n+make eclipse-java-env\n+```\n+\n+After the workspace has been generated you can import it in the same way as\n+you would with Eclipse CDT:\n+\n+Follow `File -> Import -> Projects from Folder or Archive` and select the\n+`ide\\eclipse` directory in the build output folder to import the newly created\n+Java Workspace.\n+\n+As mentioned above for Eclipse CDT, you can create a combined Java and C\/C++\n+Workspace which can conveniently switch between Java and C\/C++ natures during development by running:\n+\n+```shell\n+make eclipse-full-env\n+```\n","filename":"doc\/ide.md","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -260,0 +260,19 @@\n+$(eval $(call SetupTarget, eclipse-java-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    TARGET := workspace-java, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-hotspot-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    TARGET := workspace-hotspot, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-native-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    TARGET := workspace-native, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-full-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+))\n+\n","filename":"make\/Main.gmk","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,496 @@\n+#\n+# Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+default: all\n+\n+include $(SPEC)\n+include MakeBase.gmk\n+include Utils.gmk\n+include Modules.gmk\n+\n+JVM_VARIANT := $(JVM_VARIANT_MAIN)\n+include hotspot\/HotspotCommon.gmk\n+include hotspot\/lib\/JvmFeatures.gmk\n+include hotspot\/lib\/JvmOverrideFiles.gmk\n+include hotspot\/lib\/JvmFlags.gmk\n+\n+WORKSPACE_FILE := $(IDE_OUTPUTDIR)\/.project\n+NATIVE_FILE := $(IDE_OUTPUTDIR)\/.cproject\n+LANGUAGE_SETTINGS := $(IDE_OUTPUTDIR)\/.settings\/language.settings.xml\n+\n+# Warning: This file does not have the best formatting!\n+\n+# FixPath already removes $(FIXPATH) automatically, but if we rely on FixPath\n+# to do it for us dir won't be able to handle the converted path (if on Windows).\n+# Reversing the order causes dir to mangle the preceeding $(FIXPATH) which breaks\n+# the ability of FixPath to remove it, so it has to be manually removed here.\n+#\n+# Note that the workspace setup system currently does not support Visual C++ when\n+# extracting compiler and\/or system headers vital to the build!\n+COMPILER_PATH := $(call FixPath, $(dir $(patsubst $(FIXPATH), , $(CC))))\n+\n+# Sidestep annoying issue of WSL path conversion not working properly with true\n+# Unix paths. Eclipse can't run the WSL make by itself anyway, even if we could\n+# properly convert the path.\n+ifeq ($(call isBuildOsEnv, windows.wsl1 windows.wsl2), true)\n+  MAKE_EXE := wsl.exe $(MAKE)\n+else\n+  MAKE_EXE := $(call FixPath, $(MAKE))\n+endif\n+\n+# Random number generation, with the amount of specified digits\n+# No need to check if the parameter passed is a valid number, the shell will\n+# be more than happy to complain if it isn't ;)\n+RandomDigits = \\\n+  $(shell od -An -N8 -d \/dev\/urandom | sed -e 's| ||g' -e 's|\\(.\\{$(strip $1)\\}\\).*|\\1|')\n+\n+# Cache a 10 digit number as the workspace id where needed\n+# This needs to be the same everywhere it's used anyway, and doing this also avoids\n+# regenerating the number every time\n+WORKSPACE_ID := $(call RandomDigits, 10)\n+\n+# Modified version of utility from JdkNativeCompilation.gmk\n+# The full path could be omitted, but it was chosen not to so wildcard\n+# can work properly for existing directories. The pathsubst below that\n+# this necessitates is a relatively small price to pay.\n+FindModuleNativeDirs = \\\n+  $(call uniq, $(wildcard \\\n+      $(TOPDIR)\/src\/$(strip $1)\/$(OPENJDK_TARGET_OS)\/native \\\n+      $(TOPDIR)\/src\/$(strip $1)\/$(OPENJDK_TARGET_OS_TYPE)\/native \\\n+      $(TOPDIR)\/src\/$(strip $1)\/share\/native))\n+\n+# Taken from JdkNativeCompilation.gmk\n+FindJavaHeaderDir = \\\n+  $(if $(strip $1),$(wildcard $(SUPPORT_OUTPUTDIR)\/headers\/$(strip $1)))\n+\n+JAVA_DIRS := $(strip $(foreach module, $(call FindAllModules), \\\n+  $(patsubst $(TOPDIR)\/%,%,$(filter-out $(OUTPUTDIR)%, \\\n+  $(call FindModuleSrcDirs, $(module))))))\n+\n+NATIVE_DIRS := $(strip $(foreach module, $(call FindAllModules), \\\n+  $(patsubst $(TOPDIR)\/%,%,$(call FindModuleNativeDirs, $(module)))))\n+\n+EmitEmptyLine = $(call AppendFile,,$(1))\n+\n+# Important note: We only run strip on our own relative source directories\n+# Absolute paths should not be passed to strip!\n+\n+EmitLinkedDirectory = \\\n+  $(call AppendFile,        <link>, $(WORKSPACE_FILE)) \\\n+  $(call AppendFile,            <name>$(strip $(1))<\/name>, $(WORKSPACE_FILE)) \\\n+  $(call AppendFile,            <type>2<\/type>, $(WORKSPACE_FILE)) \\\n+  $(call AppendFile,            <location>$(subst \\\\,\/,$(call FixPath, $(2)))<\/location>, $(WORKSPACE_FILE)) \\\n+  $(call AppendFile,        <\/link>, $(WORKSPACE_FILE))\n+\n+EmitNativeDir = \\\n+  $(call AppendFile,                        <entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"$(strip $(1))\"\/>, $(NATIVE_FILE))\n+\n+# This is so named because Eclipse is able to create virtual make targets that call\n+# to the real target which can have a different name. For now we don't need to use\n+# this functionality that Eclipse provides.\n+EmitMatchingMakeTarget = \\\n+  $(call AppendFile,            <target name=\"$(strip $(1))\" path=\"\" targetID=\"org.eclipse.cdt.build.MakeTargetBuilder\">, $(NATIVE_FILE)) \\\n+  $(call AppendFile,                <buildCommand>$(MAKE_EXE)<\/buildCommand>, $(NATIVE_FILE)) \\\n+  $(call AppendFile,                <buildArguments>-C $(call FixPath, $(TOPDIR))<\/buildArguments>, $(NATIVE_FILE)) \\\n+  $(call AppendFile,                <buildTarget>$(strip $(1))<\/buildTarget>, $(NATIVE_FILE)) \\\n+  $(call AppendFile,                <stopOnError>true<\/stopOnError>, $(NATIVE_FILE)) \\\n+  $(call AppendFile,                <useDefaultCommand>false<\/useDefaultCommand>, $(NATIVE_FILE)) \\\n+  $(call AppendFile,                <runAllBuilders>true<\/runAllBuilders>, $(NATIVE_FILE)) \\\n+  $(call AppendFile,            <\/target>, $(NATIVE_FILE))\n+\n+# Emit the defines extracted from the list of options specified in the first parameter into\n+# the language settings file, in Eclipse format.\n+EmitExtractedDefines = \\\n+  $(shell echo $(1) | grep -o \"\\-D\\s\\?\")\n+\n+################################################################################\n+# Create an Eclipse Workspace with the specified nature\n+#\n+# Parameter 1 is the name of the rule. This name is used as variable prefix,\n+# and the targets generated are listed in a variable by that name.\n+#\n+# Remaining parameter(s) are named arguments:\n+#   NATURE - Which Eclipse Workspace nature to generate for the Workspace. Can\n+#       be one of JAVA, HOTSPOT, NATIVE, or FULL.\n+#   SHARED - Workspace will share the same directory as the JDK if true. Can be\n+#       either true or false. Defaults to false if not specified.\n+SetupEclipseWorkspace = $(NamedParamsMacroTemplate)\n+define SetupEclipseWorkspaceBody\n+\n+  ifeq ($$($1_NATURE), )\n+    $$(error No nature specified for Eclipse Workspace, cannot continue)\n+  endif\n+\n+  ifeq ($$(findstring $$($1_NATURE), JAVA HOTSPOT NATIVE FULL), )\n+    $$(error Unrecognised nature $$($1_NATURE) specified for Eclipse Workspace)\n+  endif\n+\n+  ifeq ($$($1_SHARED), )\n+    $$(info Workspace sharing option not given, assuming non-shared Eclipse Workspace)\n+    $1_SHARED := false\n+  else ifeq ($$(findstring $$($1_SHARED), true false), )\n+    $$(error $$($1_NATURE) is not a boolean word)\n+  endif\n+\n+  ifeq ($$($1_SHARED), true)\n+    CLASSPATH_FILE := $(TOPDIR)\/.classpath\n+  else\n+    IDE_OUTPUTDIR := $(OUTPUTDIR)\/ide\/eclipse\n+    CLASSPATH_FILE := $(IDE_OUTPUTDIR)\/.classpath\\\n+    $$(call MakeDir, $(IDE_OUTPUTDIR))\n+  endif\n+\n+  # ifneq ($$(findstring $$($1_NATURE), HOTSPOT NATIVE FULL), )\n+  #   ifeq ($(TOOLCHAIN_TYPE), microsoft)\n+  #     $$(error Visual C++ is not yet supported as an indexer for native workspaces!)\n+  #   endif\n+  # endif\n+\n+  # Start with the Workspace file first\n+  $$(call WriteFile,<?xml version=\"1.0\" encoding=\"UTF-8\"?>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,<projectDescription>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <name>Java<\/name>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <comment><\/comment>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <projects>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <\/projects>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <buildSpec>, $(WORKSPACE_FILE))\n+\n+  ifneq ($$(findstring $$($1_NATURE), HOTSPOT NATIVE FULL), )\n+    $$(call AppendFile,        <buildCommand>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <name>org.eclipse.cdt.managedbuilder.core.genmakebuilder<\/name>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <triggers>clean$$(COMMA)full$$(COMMA)incremental$$(COMMA)<\/triggers>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <arguments>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <\/arguments>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <\/buildCommand>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <buildCommand>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder<\/name>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <triggers>full$$(COMMA)incremental$$(COMMA)<\/triggers>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <arguments>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <\/arguments>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <\/buildCommand>, $(WORKSPACE_FILE))\n+  endif\n+\n+  $$(call AppendFile,    <\/buildSpec>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <natures>, $(WORKSPACE_FILE))\n+\n+  ifneq ($$(findstring $$($1_NATURE), JAVA FULL), )\n+\n+    $1_CLASSPATH :=\n+\n+    # Eclipse crashes when processing multiple module-info.java files\n+    # This is an annoying bug that has not been fixed for some time now\n+    $$(foreach src,$(JAVA_DIRS), \\\n+      $1_CLASSPATH += \\\n+          <classpathentry excluding=\"module-info.java|module-info.java.extra\" kind=\"src\" path=\"$$(src)\"\/>)\n+\n+    $$(eval $$(call SetupTextFileProcessing, $1_CLASSPATH_FILE, \\\n+      SOURCE_FILES := $(TOPDIR)\/make\/ide\/eclipse\/classpath.template, \\\n+      OUTPUT_FILE := $$(CLASSPATH_FILE), \\\n+      REPLACEMENTS := \\\n+          @@CLASSPATH@@ => $$($1_CLASSPATH), \\\n+    ))\n+\n+    $$(call AppendFile,        <nature>org.eclipse.jdt.core.javanature<\/nature>, $(WORKSPACE_FILE))\n+\n+  endif\n+\n+  ifneq ($$(findstring $$($1_NATURE), HOTSPOT NATIVE FULL), )\n+\n+    $$(call AppendFile,        <nature>org.eclipse.cdt.core.cnature<\/nature>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <nature>org.eclipse.cdt.core.ccnature<\/nature>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature<\/nature>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature<\/nature>, $(WORKSPACE_FILE))\n+\n+    # Now emit the native file\n+    $$(call WriteFile,<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>, $(NATIVE_FILE))\n+    $$(call AppendFile,<?fileVersion 4.0.0?><cproject storage_type_id=\"org.eclipse.cdt.core.XmlProjectDescriptionStorage\">, $(NATIVE_FILE))\n+    $$(call AppendFile,    <storageModule moduleId=\"scannerConfiguration\">, $(NATIVE_FILE))\n+    $$(call AppendFile,        <autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,    <\/storageModule>, $(NATIVE_FILE))\n+    $$(call EmitEmptyLine, $(NATIVE_FILE))\n+    $$(call AppendFile,    <storageModule moduleId=\"org.eclipse.cdt.core.LanguageSettingsProviders\"\/>, $(NATIVE_FILE))\n+    $$(call EmitEmptyLine, $(NATIVE_FILE))\n+    $$(call AppendFile,    <storageModule moduleId=\"org.eclipse.cdt.core.settings\">, $(NATIVE_FILE))\n+    $$(call AppendFile,        <cconfiguration id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(WORKSPACE_ID)\">, $(NATIVE_FILE))\n+    $$(call AppendFile,            <storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"\/>, $(NATIVE_FILE))\n+    $$(call EmitEmptyLine, $(NATIVE_FILE))\n+    $$(call AppendFile,            <storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(WORKSPACE_ID)\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"Java\">, $(NATIVE_FILE))\n+    $$(call AppendFile,                <externalSettings\/>, $(NATIVE_FILE))\n+\n+    # For some strange reason Eclipse requires that the binary parsers be listed for\n+    # the workspace to be recognised as a C\/C++ one\n+    $$(call AppendFile,                <extensions>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                <\/extensions>, $(NATIVE_FILE))\n+    $$(call AppendFile,            <\/storageModule>, $(NATIVE_FILE))\n+    $$(call EmitEmptyLine, $(NATIVE_FILE))\n+    $$(call AppendFile,            <storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">, $(NATIVE_FILE))\n+    $$(call AppendFile,                <configuration buildProperties=\"\" description=\"\" id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(WORKSPACE_ID)\" name=\"Java\" parent=\"org.eclipse.cdt.build.core.emptycfg\">, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <folderInfo id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(WORKSPACE_ID).$(call RandomDigits, 9)\" name=\"\/\" resourcePath=\"\">, $(NATIVE_FILE))\n+    # $$(call AppendFile,                        <toolChain id=\"org.eclipse.cdt.build.core.prefbase.toolchain.$(call RandomDigits, 9)\" name=\"C\/C++ Compiler\" superClass=\"org.eclipse.cdt.build.core.prefbase.toolchain\">, $(NATIVE_FILE))\n+    # $$(call AppendFile,                            <targetPlatform id=\"org.eclipse.cdt.build.core.prefbase.toolchain.$(call RandomDigits, 9).$(WORKSPACE_ID)\" name=\"\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                        <toolChain id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(call RandomDigits, 9)\" name=\"Cross GCC\" superClass=\"cdt.managedbuild.toolchain.gnu.cross.base\">, $(NATIVE_FILE))\n+    $$(call AppendFile,                            <option id=\"cdt.managedbuild.option.gnu.cross.path.$(call RandomDigits, 9)\" name=\"Path\" superClass=\"cdt.managedbuild.option.gnu.cross.path\" value=\"$(COMPILER_PATH)\" valueType=\"string\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                            <targetPlatform archList=\"all\" binaryParser=\"\" id=\"cdt.managedbuild.targetPlatform.gnu.cross.$(WORKSPACE_ID)\" isAbstract=\"false\" osList=\"all\" superClass=\"cdt.managedbuild.targetPlatform.gnu.cross\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                            <builder command=\"$(MAKE_EXE)\" arguments=\"-C $(call FixPath, $(TOPDIR))\" id=\"cdt.managedbuild.builder.gnu.cross.$(call RandomDigits, 9)\" incrementalBuildTarget=\"jdk\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"false\" name=\"Gnu Make Builder\" parallelBuildOn=\"false\" superClass=\"cdt.managedbuild.builder.gnu.cross\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                        <\/toolChain>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <\/folderInfo>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <sourceEntries>, $(NATIVE_FILE))\n+\n+    # This is always emitted, no matter which of the 3 natures were selected\n+    $$(call EmitNativeDir, src\/hotspot)\n+\n+    ifneq ($$(findstring $$($1_NATURE), NATIVE FULL), )\n+      $$(foreach src,$(NATIVE_DIRS),$$(call EmitNativeDir, $$(src)))\n+    endif\n+\n+    $$(call AppendFile,                    <\/sourceEntries>, $(NATIVE_FILE))\n+    $$(call AppendFile,                <\/configuration>, $(NATIVE_FILE))\n+    $$(call AppendFile,            <\/storageModule>, $(NATIVE_FILE))\n+    $$(call AppendFile,        <\/cconfiguration>, $(NATIVE_FILE))\n+    $$(call AppendFile,    <\/storageModule>, $(NATIVE_FILE))\n+    $$(call EmitEmptyLine, $(NATIVE_FILE))\n+    $$(call AppendFile,    <storageModule moduleId=\"org.eclipse.cdt.make.core.buildtargets\">, $(NATIVE_FILE))\n+    $$(call AppendFile,        <buildTargets>, $(NATIVE_FILE))\n+\n+    # Omitted: reconfigure and dist-clean\n+    # The former is sensitive to the make, shell and environment used\n+    # The latter would destroy the virtual workspace\n+    $$(call EmitMatchingMakeTarget, update-build-docs)\n+    $$(call EmitMatchingMakeTarget, docs)\n+    $$(call EmitMatchingMakeTarget, gensrc)\n+    $$(call EmitMatchingMakeTarget, gendata)\n+    $$(call EmitMatchingMakeTarget, copy)\n+    $$(call EmitMatchingMakeTarget, java)\n+    $$(call EmitMatchingMakeTarget, launchers)\n+    $$(call EmitMatchingMakeTarget, libs)\n+    $$(call EmitMatchingMakeTarget, hotspot)\n+    $$(call EmitMatchingMakeTarget, jdk)\n+    $$(call EmitMatchingMakeTarget, product-images)\n+    $$(call EmitMatchingMakeTarget, bootcycle-images)\n+    $$(call EmitMatchingMakeTarget, all-images)\n+    $$(call EmitMatchingMakeTarget, test-image)\n+    $$(call EmitMatchingMakeTarget, clean)\n+\n+    $$(call AppendFile,        <\/buildTargets>, $(NATIVE_FILE))\n+    $$(call AppendFile,    <\/storageModule>, $(NATIVE_FILE))\n+    $$(call AppendFile,<\/cproject>, $(NATIVE_FILE))\n+\n+    $$(call MakeDir, $(IDE_OUTPUTDIR)\/.settings)\n+\n+    $$(call WriteFile,<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,<project>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,    <configuration id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(WORKSPACE_ID)\" name=\"Java\">, $(LANGUAGE_SETTINGS))\n+\n+    $$(call AppendFile,        <extension point=\"org.eclipse.cdt.core.LanguageSettingsProvider\">, $(LANGUAGE_SETTINGS))\n+    $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+    # Doesn't hurt to include compilation database and build output parsing support\n+    $$(call AppendFile,            <provider build-parser-id=\"\" cdb-modified-time=\"\" class=\"org.eclipse.cdt.managedbuilder.internal.language.settings.providers.CompilationDatabaseParser\" id=\"org.eclipse.cdt.managedbuilder.core.CompilationDatabaseParser\" name=\"Compilation Database Parser\" prefer-non-shared=\"true\" store-entries-with-project=\"true\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,            <provider class=\"org.eclipse.cdt.managedbuilder.language.settings.providers.GCCBuildCommandParser\" id=\"org.eclipse.cdt.managedbuilder.core.GCCBuildCommandParser\" keep-relative-paths=\"false\" name=\"CDT GCC Build Output Parser\" parameter=\"$$(LEFT_PAREN)[^\/\\\\\\\\]*$$(RIGHT_PAREN)$$(LEFT_PAREN)$$(LEFT_PAREN)g?cc$$(RIGHT_PAREN)|$$(LEFT_PAREN)[gc]\\+\\+$$(RIGHT_PAREN)|$$(LEFT_PAREN)clang$$(RIGHT_PAREN)$$(RIGHT_PAREN)\" prefer-non-shared=\"true\" store-entries-with-project=\"true\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+    # Get the compiler environment settings out of the way\n+    # Note that the Managed Build Setting Entries are left out, this is intentional as\n+    # we don't want to mix the CDT Managed Builder with make if we don't need it\n+    $$(call AppendFile,            <provider class=\"org.eclipse.cdt.internal.build.crossgcc.CrossGCCBuiltinSpecsDetector\" console=\"true\" env-hash=\"\" id=\"org.eclipse.cdt.build.crossgcc.CrossGCCBuiltinSpecsDetector\" keep-relative-paths=\"false\" name=\"CDT Cross GCC Built-in Compiler Settings\" parameter=\"$$(DOLLAR){COMMAND} $$(DOLLAR){FLAGS} -E -P -v -dD &quot;$$(DOLLAR){INPUTS}&quot;\" prefer-non-shared=\"true\" store-entries-with-project=\"true\">, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                <language-scope id=\"org.eclipse.cdt.core.gcc\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                <language-scope id=\"org.eclipse.cdt.core.g++\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,            <\/provider>, $(LANGUAGE_SETTINGS))\n+    $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+    # Eclipse seems to work without this, but I'll leave this here in case we suddenly\n+    # need it if the way Language Settings Providers work suddenly change in the\n+    # future.\n+    # This would also be a helpful reference for when we eventually make this system\n+    # more flexible and able to work with Visual C++ too. (I say we, but I'm likely to\n+    # be the only one insane enough to be willing to go through the pain that such an\n+    # overhaul would put anyone through...)\n+    # $$(call AppendFile,            <provider class=\"org.eclipse.cdt.managedbuilder.language.settings.providers.GCCBuiltinSpecsDetector\" console=\"true\" env-hash=\"\" id=\"org.eclipse.cdt.managedbuilder.core.GCCBuiltinSpecsDetector\" keep-relative-paths=\"false\" name=\"CDT GCC Built-in Compiler Settings\" parameter=\"$$(DOLLAR){COMMAND} $$(DOLLAR){FLAGS} -E -P -v -dD &quot;$$(DOLLAR){INPUTS}&quot;\" prefer-non-shared=\"true\" store-entries-with-project=\"true\">, $(LANGUAGE_SETTINGS))\n+    # $$(call AppendFile,                <language-scope id=\"org.eclipse.cdt.core.gcc\"\/>, $(LANGUAGE_SETTINGS))\n+    # $$(call AppendFile,                <language-scope id=\"org.eclipse.cdt.core.g++\"\/>, $(LANGUAGE_SETTINGS))\n+    # $$(call AppendFile,            <\/provider>, $(LANGUAGE_SETTINGS))\n+    # $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+    # Now for the tricky part: Setting up the proper environment and macros that were\n+    # defined during configure...\n+    $$(call AppendFile,            <provider class=\"org.eclipse.cdt.core.language.settings.providers.LanguageSettingsGenericProvider\" id=\"org.eclipse.cdt.ui.UserLanguageSettingsProvider\" name=\"CDT User Setting Entries\" prefer-non-shared=\"true\" store-entries-with-project=\"true\">, $(LANGUAGE_SETTINGS))\n+    $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+    $$(call AppendFile,                <language id=\"org.eclipse.cdt.core.gcc\">, $(LANGUAGE_SETTINGS))\n+\n+    ifneq ($$(findstring $$($1_NATURE), NATIVE FULL), )\n+      $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+      $$(foreach module, $$(call FindAllModules), $$(if $$(call FindJavaHeaderDir, $$(module)), \\\n+        $$(foreach dirs, $$(strip $$(patsubst $(TOPDIR)\/%,%,$$(call FindModuleNativeDirs, $$(module)))), \\\n+        $$(call AppendFile,                    <resource project-relative-path=\"$$(dirs)\">, $(LANGUAGE_SETTINGS)) \\\n+        $$(call AppendFile,                        <entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $$(call FindJavaHeaderDir, $$(module)))\"\/>, $(LANGUAGE_SETTINGS)) \\\n+        $$(call AppendFile,                    <\/resource>, $(LANGUAGE_SETTINGS)))))\n+\n+      # jdk.sctp is a special (C only) case that needs several java.base headers\n+      $$(foreach dirs, $$(strip $$(patsubst $(TOPDIR)\/%,%, $$(call FindModuleNativeDirs, jdk.sctp))), \\\n+        $$(call AppendFile,                    <resource project-relative-path=\"$$(dirs)\">, $(LANGUAGE_SETTINGS)) \\\n+        $$(call AppendFile,                        <entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $$(call FindJavaHeaderDir, java.base))\"\/>, $(LANGUAGE_SETTINGS)) \\\n+        $$(call AppendFile,                    <\/resource>, $(LANGUAGE_SETTINGS)))\n+\n+      # main.c source file used for generic launchers\n+      $$(call AppendFile,                    <resource project-relative-path=\"src\/java.base\/share\/native\/launcher\/main.c\">, $(LANGUAGE_SETTINGS))\n+      $$(call AppendFile,                        <entry kind=\"macro\" name=\"LAUNCHER_NAME\" value=\"&quot;$(LAUNCHER_NAME)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+      $$(call AppendFile,                    <\/resource>, $(LANGUAGE_SETTINGS))\n+\n+      $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+    endif\n+\n+    $$(call AppendFile,                <\/language>, $(LANGUAGE_SETTINGS))\n+\n+    $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+    $$(call AppendFile,                <language id=\"org.eclipse.cdt.core.g++\">, $(LANGUAGE_SETTINGS))\n+\n+    $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+    # HotSpot first\n+    $$(call AppendFile,                    <resource project-relative-path=\"src\/hotspot\">, $(LANGUAGE_SETTINGS))\n+\n+    # If only the Java Virtual Machine sources were requested, headers from other parts of\n+    # the native source that it needs will not be available. Add them as include paths here\n+    # instead.\n+    ifeq ($$($1_NATURE), HOTSPOT)\n+      $$(foreach src, $$(strip $$(patsubst %,%\/include,$$(call FindModuleNativeDirs, java.base))), \\\n+        $$(call AppendFile,                        <entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $$(src))\"\/>, $(LANGUAGE_SETTINGS)))\n+      $$(call AppendFile,                        <entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $(TOPDIR)\/src\/java.base\/share\/native\/libjimage)\"\/>, $(LANGUAGE_SETTINGS))\n+    endif\n+\n+    $$(call AppendFile,                        <entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $(JVM_VARIANT_OUTPUTDIR)\/gensrc)\"\/>, $(LANGUAGE_SETTINGS))\n+\n+    ifeq ($$(call check-jvm-feature, compiler2), true)\n+      $$(call AppendFile,                        <entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $(JVM_VARIANT_OUTPUTDIR)\/gensrc\/adfiles)\"\/>, $(LANGUAGE_SETTINGS))\n+    endif\n+\n+    $$(call AppendFile,                    <\/resource>, $(LANGUAGE_SETTINGS))\n+\n+    $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+    $$(call AppendFile,                    <resource project-relative-path=\"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp\">, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"HOTSPOT_VERSION_STRING\" value=\"&quot;$(VERSION_STRING)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"DEBUG_LEVEL\" value=\"&quot;$(DEBUG_LEVEL)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"HOTSPOT_BUILD_USER\" value=\"&quot;$(USERNAME)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"HOTSPOT_VM_DISTRO\" value=\"&quot;$(HOTSPOT_VM_DISTRO)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"CPU\" value=\"&quot;$(OPENJDK_TARGET_CPU_VM_VERSION)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"HOTSPOT_BUILD_TIME\" value=\"&quot;$(if $(HOTSPOT_BUILD_TIME), $(HOTSPOT_BUILD_TIME), $(call EpochToISO8601, $(shell $(DATE) +\"%s\")))&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                    <\/resource>, $(LANGUAGE_SETTINGS))\n+\n+    $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+    $$(call AppendFile,                    <resource project-relative-path=\"src\/hotspot\/share\/runtime\/arguments.cpp\">, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"HOTSPOT_VERSION_STRING\" value=\"&quot;$(VERSION_STRING)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"DEBUG_LEVEL\" value=\"&quot;$(DEBUG_LEVEL)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"HOTSPOT_BUILD_USER\" value=\"&quot;$(USERNAME)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"HOTSPOT_VM_DISTRO\" value=\"&quot;$(HOTSPOT_VM_DISTRO)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"CPU\" value=\"&quot;$(OPENJDK_TARGET_CPU_VM_VERSION)&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                        <entry kind=\"macro\" name=\"HOTSPOT_BUILD_TIME\" value=\"&quot;$(if $(HOTSPOT_BUILD_TIME), $(HOTSPOT_BUILD_TIME), $(call EpochToISO8601, $(shell $(DATE) +\"%s\")))&quot;\"\/>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,                    <\/resource>, $(LANGUAGE_SETTINGS))\n+\n+    # Now the rest of the C++ sources in the codebase\n+    ifneq ($$(findstring $$($1_NATURE), NATIVE FULL), )\n+      $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+      $$(foreach module, $$(call FindAllModules), $$(if $$(call FindJavaHeaderDir, $$(module)), \\\n+        $$(foreach dirs, $$(strip $$(patsubst $(TOPDIR)\/%,%,$$(call FindModuleNativeDirs, $$(module)))), \\\n+        $$(call AppendFile,                    <resource project-relative-path=\"$$(dirs)\">, $(LANGUAGE_SETTINGS)) \\\n+        $$(call AppendFile,                        <entry flags=\"LOCAL\" kind=\"includePath\" name=\"$$(call FixPath, $$(call FindJavaHeaderDir, $$(module)))\"\/>, $(LANGUAGE_SETTINGS)) \\\n+        $$(call AppendFile,                    <\/resource>, $(LANGUAGE_SETTINGS)))))\n+    endif\n+\n+    $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+\n+    $$(call AppendFile,                <\/language>, $(LANGUAGE_SETTINGS))\n+\n+    $$(call EmitEmptyLine, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,           <\/provider>, $(LANGUAGE_SETTINGS))\n+\n+    $$(call AppendFile,        <\/extension>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,    <\/configuration>, $(LANGUAGE_SETTINGS))\n+    $$(call AppendFile,<\/project>, $(LANGUAGE_SETTINGS))\n+\n+  endif\n+\n+  $$(call AppendFile,    <\/natures>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <linkedResources>, $(WORKSPACE_FILE))\n+\n+  # Eclipse does have rudimentary support for these, so why not?\n+  # Their inclusion will not affect or slow indexing down in any way regardless\n+  $$(call EmitLinkedDirectory, bin,$(TOPDIR)\/bin)\n+  $$(call EmitLinkedDirectory, doc,$(TOPDIR)\/doc)\n+\n+  ifneq ($$(findstring $$($1_NATURE), JAVA FULL), )\n+    $$(foreach src,$(JAVA_DIRS),$$(call EmitLinkedDirectory, $$(src),$(TOPDIR)\/$$(src)))\n+  endif\n+\n+  ifneq ($$(findstring $$($1_NATURE), HOTSPOT NATIVE FULL), )\n+\n+    # CDT includes a Makefile editor, so if CDT support was indicated there's no harm in\n+    # including the make sources as well, since the cost of indexing them is miniscule\n+    $$(call EmitLinkedDirectory, make,$(TOPDIR)\/make)\n+    $$(call EmitLinkedDirectory, src\/hotspot,$(TOPDIR)\/src\/hotspot)\n+\n+  endif\n+\n+  ifneq ($$(findstring $$($1_NATURE), NATIVE FULL), )\n+    $$(foreach src,$(NATIVE_DIRS),$$(call EmitLinkedDirectory, $$(src),$(TOPDIR)\/$$(src)))\n+  endif\n+\n+  $$(call AppendFile,    <\/linkedResources>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,<\/projectDescription>, $(WORKSPACE_FILE))\n+\n+endef\n+\n+workspace-java:\n+\t$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+\t    NATURE := JAVA, \\\n+\t))\n+\n+workspace-hotspot:\n+\t$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+\t    NATURE := HOTSPOT, \\\n+\t))\n+\n+workspace-native:\n+\t$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+\t    NATURE := NATIVE, \\\n+\t))\n+\n+workspace-full:\n+\t$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+\t    NATURE := FULL, \\\n+\t))\n+\n+all: workspace-full\n\\ No newline at end of file\n","filename":"make\/ide\/eclipse\/CreateWorkspace.gmk","additions":496,"deletions":0,"binary":false,"changes":496,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<classpath>\r\n+    @@CLASSPATH@@\r\n+<\/classpath>\r\n","filename":"make\/ide\/eclipse\/classpath.template","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\r\n+<?fileVersion 4.0.0?><cproject storage_type_id=\"org.eclipse.cdt.core.XmlProjectDescriptionStorage\">\r\n+    <storageModule moduleId=\"org.eclipse.cdt.core.language.mapping\">\r\n+        <project-mappings>\r\n+            <content-type-mapping configuration=\"\" content-type=\"org.eclipse.cdt.core.cHeader\" language=\"org.eclipse.cdt.core.c\"\/>\r\n+            <content-type-mapping configuration=\"\" content-type=\"org.eclipse.cdt.core.cSource\" language=\"org.eclipse.cdt.core.c\"\/>\r\n+            <content-type-mapping configuration=\"\" content-type=\"org.eclipse.cdt.core.cxxHeader\" language=\"org.eclipse.cdt.core.c++\"\/>\r\n+            <content-type-mapping configuration=\"\" content-type=\"org.eclipse.cdt.core.cxxSource\" language=\"org.eclipse.cdt.core.c++\"\/>\r\n+        <\/project-mappings>\r\n+    <\/storageModule>\r\n+\r\n+    <storageModule moduleId=\"scannerConfiguration\">\r\n+        <autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"\/>\r\n+    <\/storageModule>\r\n+\r\n+    <storageModule moduleId=\"org.eclipse.cdt.core.LanguageSettingsProviders\"\/>\r\n+\r\n+    <storageModule moduleId=\"org.eclipse.cdt.core.settings\">\r\n+        <cconfiguration id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@WORKSPACE_ID@@\">\r\n+            <storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"\/>\r\n+\r\n+            <storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@WORKSPACE_ID@@\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"Java\">\r\n+                <externalSettings\/>\r\n+                <extensions>\r\n+                    <extension id=\"org.eclipse.cdt.core.ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"\/>\r\n+                    <extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>\r\n+                    <extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>\r\n+                    <extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>\r\n+                    <extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>\r\n+                    <extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>\r\n+                <\/extensions>\r\n+            <\/storageModule>\r\n+\r\n+            <storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\r\n+                <configuration buildProperties=\"\" description=\"\" id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@WORKSPACE_ID@@\" name=\"Java\" parent=\"org.eclipse.cdt.build.core.emptycfg\">\r\n+                    <folderInfo id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@WORKSPACE_ID@@.@@RANDOM@@\" name=\"\/\" resourcePath=\"\">\r\n+                        <toolChain id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@RANDOM@@\" name=\"Cross GCC\" superClass=\"cdt.managedbuild.toolchain.gnu.cross.base\">\r\n+                            <option id=\"cdt.managedbuild.option.gnu.cross.path.@@RANDOM@@\" name=\"Path\" superClass=\"cdt.managedbuild.option.gnu.cross.path\" value=\"@@ENVPATH@@\" valueType=\"string\"\/>\r\n+                            <targetPlatform archList=\"all\" binaryParser=\"\" id=\"cdt.managedbuild.targetPlatform.gnu.cross.@@WORKSPACE_ID@@\" isAbstract=\"false\" osList=\"all\" superClass=\"cdt.managedbuild.targetPlatform.gnu.cross\"\/>\r\n+                            <builder command=\"@@MAKE@@\" arguments=\"-C @@TOPDIR@@\" id=\"cdt.managedbuild.builder.gnu.cross.@@RANDOM@@\" incrementalBuildTarget=\"jdk\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"false\" name=\"Gnu Make Builder\" parallelBuildOn=\"false\" superClass=\"cdt.managedbuild.builder.gnu.cross\"\/>\r\n+                        <\/toolChain>\r\n+                    <\/folderInfo>\r\n+                    <sourceEntries>\r\n+                        @@SOURCES@@\r\n+                    <\/sourceEntries>\r\n+                <\/configuration>\r\n+            <\/storageModule>\r\n+        <\/cconfiguration>\r\n+    <\/storageModule>\r\n+\r\n+    <storageModule moduleId=\"org.eclipse.cdt.make.core.buildtargets\">\r\n+        <buildTargets>\r\n+            @@MAKE_TARGETS@@\r\n+        <\/buildTargets>\r\n+    <\/storageModule>\r\n+<\/cproject>\r\n","filename":"make\/ide\/eclipse\/native.template","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\r\n+<project>\r\n+    <configuration id=\"cdt.managedbuild.toolchain.gnu.cross.base.@@WORKSPACE_ID@@\" name=\"Java\">\r\n+        <extension point=\"org.eclipse.cdt.core.LanguageSettingsProvider\">\r\n+            <provider build-parser-id=\"\" cdb-modified-time=\"\" class=\"org.eclipse.cdt.managedbuilder.internal.language.settings.providers.CompilationDatabaseParser\" id=\"org.eclipse.cdt.managedbuilder.core.CompilationDatabaseParser\" name=\"Compilation Database Parser\" prefer-non-shared=\"true\" store-entries-with-project=\"true\"\/>\r\n+            <provider class=\"org.eclipse.cdt.managedbuilder.language.settings.providers.GCCBuildCommandParser\" id=\"org.eclipse.cdt.managedbuilder.core.GCCBuildCommandParser\" keep-relative-paths=\"false\" name=\"CDT GCC Build Output Parser\" parameter=\"([^\/\\\\\\\\]*)((g?cc)|([gc]\\+\\+)|(clang))\" prefer-non-shared=\"true\" store-entries-with-project=\"true\"\/>\r\n+            <provider class=\"org.eclipse.cdt.internal.build.crossgcc.CrossGCCBuiltinSpecsDetector\" console=\"true\" env-hash=\"\" id=\"org.eclipse.cdt.build.crossgcc.CrossGCCBuiltinSpecsDetector\" keep-relative-paths=\"false\" name=\"CDT Cross GCC Built-in Compiler Settings\" parameter=\"${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;\" prefer-non-shared=\"true\" store-entries-with-project=\"true\">\r\n+                <language-scope id=\"org.eclipse.cdt.core.c\"\/>\r\n+                <language-scope id=\"org.eclipse.cdt.core.c++\"\/>\r\n+            <\/provider>\r\n+            <provider class=\"org.eclipse.cdt.core.language.settings.providers.LanguageSettingsGenericProvider\" id=\"org.eclipse.cdt.ui.UserLanguageSettingsProvider\" name=\"CDT User Setting Entries\" prefer-non-shared=\"true\" store-entries-with-project=\"true\">\r\n+                <language id=\"org.eclipse.cdt.core.c\">\r\n+                    @@CSETTINGS@@\r\n+                <\/language>\r\n+\r\n+                <language id=\"org.eclipse.cdt.core.c++\">\r\n+                    @@CXXSETTINGS@@\r\n+                <\/language>\r\n+           <\/provider>\r\n+        <\/extension>\r\n+    <\/configuration>\r\n+<\/project>\r\n","filename":"make\/ide\/eclipse\/settings.template","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<projectDescription>\r\n+    <name>Java<\/name>\r\n+    <comment><\/comment>\r\n+    <projects>\r\n+    <\/projects>\r\n+    <buildSpec>\r\n+        @@BUILD_MANAGERS@@\r\n+    <\/buildSpec>\r\n+    <natures>\r\n+        @@NATURES@@\r\n+    <\/natures>\r\n+    <linkedResources>\r\n+        @@LINKED_RESOURCES@@\r\n+    <\/linkedResources>\r\n+<\/projectDescription>\r\n","filename":"make\/ide\/eclipse\/workspace.template","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -38,2 +38,2 @@\n-  # Use server as base for defines and includes\n-  JVM_VARIANT=server\n+  # Use primary variant for defines and includes\n+  JVM_VARIANT := $(JVM_VARIANT_MAIN)\n","filename":"make\/ide\/visualstudio\/hotspot\/CreateVSProject.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}