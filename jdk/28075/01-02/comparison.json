{"files":[{"patch":"@@ -113,0 +113,3 @@\n+# Kerberos native test library needs krb5 and com_err libraries\n+BUILD_JDK_JTREG_LIBRARIES_LDFLAGS_libNativeCredentialCacheHelper := -lkrb5 -lcom_err\n+\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n- * @run shell build.sh\n@@ -42,1 +41,1 @@\n- * @run main\/othervm\n+ * @run main\/othervm\/native\n@@ -55,1 +54,0 @@\n- *   -Djava.library.path=${test.src}:.:${test.jdk}\/lib\n","filename":"test\/jdk\/sun\/security\/krb5\/native\/NativeCacheTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-            System.loadLibrary(\"nativecredentialcachehelper\");\n+            System.loadLibrary(\"NativeCredentialCacheHelper\");\n@@ -35,1 +35,1 @@\n-            System.err.println(\"Failed to load nativecredentialcachehelper library: \" + e.getMessage());\n+            System.err.println(\"Failed to load NativeCredentialCacheHelper library: \" + e.getMessage());\n@@ -41,1 +41,1 @@\n-     * Create an in-memory credential cache using native krb5 calls.\n+     * Create an in-memory credential cache using native krb5 API.\n@@ -48,2 +48,2 @@\n-     * Copy real credentials from a source cache to the in-memory cache.\n-     * This preserves the proper Kerberos credential format for JAAS access.\n+     * Copy real Kerberos credentials from a source cache to an in-memory cache.\n+     * Used to move OneKDC-generated TGTs to an in-memory cache for testing.\n@@ -57,1 +57,1 @@\n-     * Set the default credential cache to the specified credential cache.\n+     * Set KRB5CCNAME so that the test will pick up the in-memory credential cache.\n","filename":"test\/jdk\/sun\/security\/krb5\/native\/NativeCredentialCacheHelper.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,89 +0,0 @@\n-#!\/bin\/bash\n-# Build script for NativeCacheTest\n-\n-set -e\n-\n-# Use jtreg environment variables when available\n-if [ -n \"$TESTJAVA\" ]; then\n-    # Running under jtreg\n-    BUILT_JDK=\"$TESTJAVA\"\n-    JDK_ROOT=\"$(dirname $(dirname $TESTROOT))\"\n-    LIB_DIR=\"$JDK_ROOT\/test\/lib\"\n-    TEST_DIR=\"$TESTSRC\"\n-else\n-    # Running manually\n-    TEST_DIR=$(pwd)\n-    JDK_ROOT=\"$(cd ..\/..\/..\/..\/..\/..\/ && pwd)\"\n-    LIB_DIR=\"$JDK_ROOT\/test\/lib\"\n-    BUILT_JDK=\"$JDK_ROOT\/build\/linux-x86_64-server-release\/jdk\"\n-fi\n-\n-export JAVA_HOME=\"$BUILT_JDK\"\n-export PATH=\"$BUILT_JDK\/bin:$PATH\"\n-\n-# Module exports required for Kerberos internal APIs\n-if [ -n \"$TESTCLASSPATH\" ]; then\n-    # Use the jtreg classpath\n-    JAVA_CP=\"$TESTCLASSPATH\"\n-else\n-    # Manual execution classpath\n-    JAVA_CP=\"$LIB_DIR:..\/auto:.\"\n-fi\n-MODULE_EXPORTS=\"--add-exports java.security.jgss\/sun.security.krb5=ALL-UNNAMED \\\n---add-exports java.security.jgss\/sun.security.krb5.internal=ALL-UNNAMED \\\n---add-exports java.security.jgss\/sun.security.krb5.internal.ccache=ALL-UNNAMED \\\n---add-exports java.security.jgss\/sun.security.krb5.internal.crypto=ALL-UNNAMED \\\n---add-exports java.security.jgss\/sun.security.krb5.internal.ktab=ALL-UNNAMED \\\n---add-exports java.security.jgss\/sun.security.jgss.krb5=ALL-UNNAMED \\\n---add-exports java.base\/sun.security.util=ALL-UNNAMED \\\n---add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\"\n-\n-cd \"$TEST_DIR\"\n-\n-# For jtreg, classes are already compiled by the harness\n-if [ -z \"$TESTJAVA\" ]; then\n-    # Manual execution\n-\n-    # Compile test library classes\n-    cd \"$LIB_DIR\"\n-    javac -cp . --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED jdk\/test\/lib\/Platform.java\n-\n-    # Compile OneKDC and test infrastructure\n-    cd \"$TEST_DIR\/..\/auto\"\n-    javac -cp \"$LIB_DIR:.\" $MODULE_EXPORTS -XDignore.symbol.file \\\n-        KDC.java OneKDC.java Context.java\n-\n-    cd \"$TEST_DIR\"\n-\n-    # Compile test classes\n-    javac -cp \"$JAVA_CP\" $MODULE_EXPORTS -XDignore.symbol.file \\\n-        NativeCredentialCacheHelper.java NativeCacheTest.java\n-fi\n-\n-# Generate JNI header\n-cd \"$TEST_DIR\"\n-if [ -n \"$TESTCLASSPATH\" ]; then\n-    javac -cp \"$TESTCLASSPATH\" -h . NativeCredentialCacheHelper.java\n-else\n-    javac -cp . -h . NativeCredentialCacheHelper.java\n-fi\n-\n-# Get the OS to determine the compiler and library extension\n-OS=$(uname -s | tr 'A-Z' 'a-z')\n-if [ \"$OS\" == \"linux\" ]; then\n-    COMPILER=gcc\n-    LIBEXT=so\n-elif [ \"$OS\" == \"darwin\" ]; then\n-    COMPILER=clang\n-    LIBEXT=dylib\n-else\n-    echo \"Unsupported os: ${OS}\"\n-    exit 1\n-fi\n-\n-# Compile native library\n-cd \"$TEST_DIR\"\n-${COMPILER} -shared -fPIC -I\"$JAVA_HOME\/include\" -I\"$JAVA_HOME\/include\/${OS}\" -lkrb5 \\\n-            -o libnativecredentialcachehelper.${LIBEXT} NativeCredentialCacheHelper.c\n-\n-echo \"Build completed successfully\"\n","filename":"test\/jdk\/sun\/security\/krb5\/native\/build.sh","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"","filename":"test\/jdk\/sun\/security\/krb5\/native\/libNativeCredentialCacheHelper.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/security\/krb5\/native\/NativeCredentialCacheHelper.c","status":"renamed"}]}