{"files":[{"patch":"@@ -0,0 +1,113 @@\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# Setup krb5 (Kerberos 5)\n+################################################################################\n+AC_DEFUN_ONCE([LIB_SETUP_KRB5],\n+[\n+  AC_ARG_WITH(krb5, [AS_HELP_STRING([--with-krb5],\n+      [enable krb5 support (default=yes), or \"no\" to disable])])\n+\n+  # Determine if krb5 should be disabled\n+  KRB5_DISABLED=no\n+  if test \"x${with_krb5}\" = xno; then\n+    AC_MSG_NOTICE([krb5 explicitly disabled])\n+    KRB5_DISABLED=yes\n+  elif test \"x$NEEDS_LIB_KRB5\" = xfalse; then\n+    if test \"x${with_krb5}\" != x && test \"x${with_krb5}\" != xno; then\n+      AC_MSG_WARN([[krb5 not used, so --with-krb5 is ignored]])\n+    fi\n+    KRB5_DISABLED=yes\n+  fi\n+\n+  if test \"x$KRB5_DISABLED\" = xyes; then\n+    KRB5_CFLAGS=\n+    KRB5_LIBS=\n+    ENABLE_LIBLINUXKRB5=false\n+  else\n+    # First try pkg-config (most modern approach)\n+    AC_PATH_TOOL([PKG_CONFIG], [pkg-config], [no])\n+    use_pkgconfig_for_krb5=no\n+\n+    if test \"x$PKG_CONFIG\" != \"xno\"; then\n+      AC_MSG_CHECKING([if pkg-config knows about krb5])\n+      if $PKG_CONFIG --exists krb5; then\n+        AC_MSG_RESULT([yes])\n+        use_pkgconfig_for_krb5=yes\n+      else\n+        AC_MSG_RESULT([no])\n+      fi\n+    fi\n+\n+    if test \"x$use_pkgconfig_for_krb5\" = \"xyes\"; then\n+      # Use pkg-config to get compiler and linker flags\n+      AC_MSG_CHECKING([for krb5 cflags via pkg-config])\n+      KRB5_CFLAGS=\"`$PKG_CONFIG --cflags krb5`\"\n+      AC_MSG_RESULT([$KRB5_CFLAGS])\n+\n+      AC_MSG_CHECKING([for krb5 libs via pkg-config])\n+      KRB5_LIBS=\"`$PKG_CONFIG --libs krb5`\"\n+      AC_MSG_RESULT([$KRB5_LIBS])\n+\n+      ENABLE_LIBLINUXKRB5=true\n+    else\n+      # Fallback: try krb5-config\n+      AC_PATH_TOOL([KRB5CONF], [krb5-config], [no])\n+\n+      if test \"x$KRB5CONF\" != \"xno\"; then\n+        # Use krb5-config to get compiler and linker flags\n+        AC_MSG_CHECKING([for krb5 cflags via krb5-config])\n+        KRB5_CFLAGS=\"`$KRB5CONF --cflags`\"\n+        AC_MSG_RESULT([$KRB5_CFLAGS])\n+\n+        AC_MSG_CHECKING([for krb5 libs via krb5-config])\n+        KRB5_LIBS=\"`$KRB5CONF --libs`\"\n+        AC_MSG_RESULT([$KRB5_LIBS])\n+\n+        ENABLE_LIBLINUXKRB5=true\n+      else\n+        # Final fallback: try manual detection in system locations\n+        AC_CHECK_HEADERS([krb5.h], [\n+          AC_CHECK_LIB([krb5], [krb5_init_context], [\n+            KRB5_CFLAGS=\"\"\n+            KRB5_LIBS=\"-lkrb5\"\n+            # Check for com_err header and library which are often required\n+            AC_CHECK_HEADERS([com_err.h], [\n+              AC_CHECK_LIB([com_err], [com_err], [\n+                KRB5_LIBS=\"$KRB5_LIBS -lcom_err\"\n+              ])\n+            ])\n+            ENABLE_LIBLINUXKRB5=true\n+          ], [ENABLE_LIBLINUXKRB5=false])\n+        ], [ENABLE_LIBLINUXKRB5=false])\n+      fi\n+    fi\n+  fi\n+\n+  AC_SUBST(KRB5_CFLAGS)\n+  AC_SUBST(KRB5_LIBS)\n+  AC_SUBST(ENABLE_LIBLINUXKRB5)\n+])\n","filename":"make\/autoconf\/lib-krb5.m4","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -34,0 +34,1 @@\n+m4_include([lib-krb5.m4])\n@@ -84,0 +85,7 @@\n+  # Check if krb5 is needed\n+  if test \"x$OPENJDK_TARGET_OS\" = xlinux -o \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n+    NEEDS_LIB_KRB5=true\n+  else\n+    NEEDS_LIB_KRB5=false\n+  fi\n+\n@@ -120,0 +128,1 @@\n+  LIB_SETUP_KRB5\n","filename":"make\/autoconf\/libraries.m4","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -438,0 +438,3 @@\n+KRB5_LIBS := @KRB5_LIBS@\n+KRB5_CFLAGS := @KRB5_CFLAGS@\n+ENABLE_LIBLINUXKRB5 := @ENABLE_LIBLINUXKRB5@\n","filename":"make\/autoconf\/spec.gmk.template","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+        EXTRA_SRC := $(TOPDIR)\/src\/java.security.jgss\/share\/native\/libkrb5shared, \\\n@@ -98,0 +99,17 @@\n+\n+  ifeq ($(call isTargetOs, linux), true)\n+    ifeq ($(ENABLE_LIBLINUXKRB5), true)\n+      $(eval $(call SetupJdkLibrary, BUILD_LIBLINUXKRB5, \\\n+          NAME := linuxkrb5, \\\n+          OPTIMIZATION := LOW, \\\n+          DISABLED_WARNINGS_clang_nativeccache.c := deprecated-declarations, \\\n+          EXTRA_HEADER_DIRS := java.base:libjava, \\\n+          EXTRA_SRC := $(TOPDIR)\/src\/java.security.jgss\/share\/native\/libkrb5shared, \\\n+          CFLAGS_linux := $(KRB5_CFLAGS) $(COM_ERR_CFLAGS), \\\n+          LIBS_linux := $(KRB5_LIBS) $(COM_ERR_LIBS), \\\n+      ))\n+\n+      TARGETS += $(BUILD_LIBLINUXKRB5)\n+    endif\n+  endif\n+\n","filename":"make\/modules\/java.security.jgss\/Lib.gmk","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -329,1 +329,4 @@\n-            \/\/ The default ticket cache on Windows and Mac is not a file.\n+            \/\/ On Windows\/MacOSX\/Linux, use native system library calls to acquire\n+            \/\/ credentials from any supported credential cache types on those\n+            \/\/ platforms (in particular, the default ticket cache on Windows and\n+            \/\/ Mac is not a file, so cannot use the pure Java code)\n@@ -331,1 +334,2 @@\n-                    OperatingSystem.isMacOS()) {\n+                    OperatingSystem.isMacOS() ||\n+                        OperatingSystem.isLinux()) {\n@@ -414,1 +418,1 @@\n-    \/\/ This method is only called on Windows and Mac OS X, the native\n+    \/\/ This method is only called on Windows, Mac OS X and Linux, the native\n@@ -531,0 +535,2 @@\n+        } else if (OperatingSystem.isLinux()) {\n+            System.loadLibrary(\"linuxkrb5\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Credentials.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,4 +26,22 @@\n-#import \"sun_security_krb5_Credentials.h\"\n-#import <Kerberos\/Kerberos.h>\n-#import <string.h>\n-#import <time.h>\n+\/*\n+ * Unified Kerberos native credential cache implementation for Mac OS X and Linux.\n+ * This implementation consolidates the previously separate platform-specific\n+ * implementations while maintaining platform-specific library names.\n+ *\n+ * Platform-specific differences are handled via conditional compilation.\n+ *\/\n+\n+#include \"sun_security_krb5_Credentials.h\"\n+#include <string.h>\n+#include <time.h>\n+#include <stdarg.h>\n+\n+#ifdef MACOSX\n+    \/\/ Mac OS X specific includes\n+    #import <Kerberos\/Kerberos.h>\n+#elif defined(LINUX)\n+    \/\/ Linux specific includes\n+    #include <krb5\/krb5.h>\n+    #include <arpa\/inet.h>\n+    #include <com_err.h>\n+#endif\n@@ -75,1 +93,1 @@\n-static jobject BuildAddressList(JNIEnv *env, krb5_address **kerbtime);\n+static jobject BuildAddressList(JNIEnv *env, krb5_address **addresses);\n@@ -449,3 +467,0 @@\n-\n-#pragma mark -\n-\n@@ -570,0 +585,4 @@\n+    if (addressCount == 0) {\n+        return NULL;\n+    }\n+\n@@ -610,2 +629,0 @@\n-#pragma mark - Utility methods -\n-\n","filename":"src\/java.security.jgss\/share\/native\/libkrb5shared\/nativeccache.c","additions":27,"deletions":10,"binary":false,"changes":37,"previous_filename":"src\/java.security.jgss\/macosx\/native\/libosxkrb5\/nativeccache.c","status":"renamed"},{"patch":"@@ -0,0 +1,212 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8123456\n+ * @summary Test JAAS access to in-memory credential caches\n+ * @library \/test\/lib ..\/auto\n+ * @requires os.family != \"windows\"\n+ * @compile -XDignore.symbol.file\n+ *   --add-exports java.security.jgss\/sun.security.krb5=ALL-UNNAMED\n+ *   --add-exports java.security.jgss\/sun.security.krb5.internal=ALL-UNNAMED\n+ *   --add-exports java.security.jgss\/sun.security.krb5.internal.ccache=ALL-UNNAMED\n+ *   --add-exports java.security.jgss\/sun.security.krb5.internal.crypto=ALL-UNNAMED\n+ *   --add-exports java.security.jgss\/sun.security.krb5.internal.ktab=ALL-UNNAMED\n+ *   --add-exports java.security.jgss\/sun.security.jgss.krb5=ALL-UNNAMED\n+ *   --add-exports java.base\/sun.security.util=ALL-UNNAMED\n+ *   --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n+ *   NativeCacheTest.java\n+ * @run shell build.sh\n+ * @run main jdk.test.lib.FileInstaller TestHosts TestHosts\n+ * @run main\/othervm\n+ *   --add-exports java.security.jgss\/sun.security.krb5=ALL-UNNAMED\n+ *   --add-exports java.security.jgss\/sun.security.krb5.internal=ALL-UNNAMED\n+ *   --add-exports java.security.jgss\/sun.security.krb5.internal.ccache=ALL-UNNAMED\n+ *   --add-exports java.security.jgss\/sun.security.krb5.internal.crypto=ALL-UNNAMED\n+ *   --add-exports java.security.jgss\/sun.security.krb5.internal.ktab=ALL-UNNAMED\n+ *   --add-exports java.security.jgss\/sun.security.jgss.krb5=ALL-UNNAMED\n+ *   --add-exports java.base\/sun.security.util=ALL-UNNAMED\n+ *   --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\n+ *   --add-opens java.security.jgss\/sun.security.krb5=ALL-UNNAMED\n+ *   --add-opens java.security.jgss\/sun.security.krb5.internal=ALL-UNNAMED\n+ *   --add-opens java.base\/sun.security.util=ALL-UNNAMED\n+ *   --enable-native-access=ALL-UNNAMED\n+ *   -Djava.library.path=${test.src}:.:${test.jdk}\/lib\n+ *   -Djdk.net.hosts.file=TestHosts\n+ *   NativeCacheTest\n+ *\/\n+\n+import sun.security.krb5.Credentials;\n+import javax.security.auth.login.LoginContext;\n+import javax.security.auth.Subject;\n+import javax.security.auth.kerberos.KerberosTicket;\n+import java.io.File;\n+\n+\/**\n+ * Test JAAS access to in-memory credential caches.\n+ *\n+ * This test validates that JAAS can access MEMORY: credential caches\n+ * on Linux through the native enhancement, using real TGTs from OneKDC.\n+ *\/\n+public class NativeCacheTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            \/\/ Create real TGT using OneKDC (in isolated cache)\n+            createRealTGTWithOneKDC();\n+\n+            \/\/ Copy real TGT to in-memory cache using JNI\n+            String inMemoryCacheName = copyTGTToInMemoryCache();\n+\n+            \/\/ Test JAAS access to in-memory cache\n+            testJAASAccessToInMemoryCache(inMemoryCacheName);\n+\n+        } catch (Exception e) {\n+            System.err.println(\"Test failed: \" + e.getMessage());\n+            throw e;\n+        }\n+    }\n+\n+    \/**\n+     * Use OneKDC to create a real TGT via the JAAS LoginModule\n+     *\/\n+    private static void createRealTGTWithOneKDC() throws Exception {\n+        System.out.println(\"Creating TGT via OneKDC\");\n+\n+        OneKDC kdc = new OneKDC(null);\n+        kdc.writeJAASConf();\n+\n+        \/\/ Force JAAS to save credentials to file cache for copying\n+        System.setProperty(\"test.kdc.save.ccache\", \"onekdc_cache.ccache\");\n+\n+        try {\n+            \/\/ Authenticate using the JAAS LoginModule\n+            LoginContext lc = new LoginContext(\"com.sun.security.jgss.krb5.initiate\",\n+                                               new OneKDC.CallbackForClient());\n+            lc.login();\n+\n+            \/\/ Verify authentication\n+            Subject subject = lc.getSubject();\n+            KerberosTicket ticket = subject.getPrivateCredentials(KerberosTicket.class).iterator().next();\n+\n+            System.out.println(\"JAAS authentication successful\");\n+            System.out.println(\"TGT: \" + ticket.getClient() + \" -> \" + ticket.getServer());\n+\n+        } catch (Exception e) {\n+            System.out.println(\"JAAS authentication failed: \" + e.getMessage());\n+        }\n+    }\n+\n+    \/**\n+     * Copy the real TGT to an in-memory cache using JNI\n+     *\/\n+    private static String copyTGTToInMemoryCache() throws Exception {\n+        System.out.println(\"Copying credentials to memory cache\");\n+\n+        String memoryCacheName = \"MEMORY:test_\" + System.currentTimeMillis();\n+\n+        \/\/ Create the in-memory cache\n+        if (!NativeCredentialCacheHelper.createInMemoryCache(memoryCacheName)) {\n+            throw new RuntimeException(\"Failed to create memory cache\");\n+        }\n+        System.out.println(\"Created memory cache: \" + memoryCacheName);\n+\n+        \/\/ Try to copy credentials from the saved cache file\n+        boolean copied = false;\n+        File savedCache = new File(\"onekdc_cache.ccache\");\n+        if (savedCache.exists()) {\n+            System.out.println(\"Copying from: \" + savedCache.getAbsolutePath());\n+            copied = NativeCredentialCacheHelper.copyCredentialsToInMemoryCache(\n+                memoryCacheName,\n+                \"FILE:\" + savedCache.getAbsolutePath()\n+            );\n+        }\n+\n+        \/\/ Fallback to the default cache if the file cache doesn't exist\n+        if (!copied) {\n+            copied = NativeCredentialCacheHelper.copyCredentialsToInMemoryCache(memoryCacheName, null);\n+        }\n+\n+        if (copied) {\n+            System.out.println(\"Credentials copied to memory cache\");\n+        } else {\n+            System.out.println(\"No credentials found to copy\");\n+        }\n+\n+        \/\/ Set as the default cache for JAAS testing\n+        NativeCredentialCacheHelper.setDefaultCache(memoryCacheName);\n+        System.setProperty(\"KRB5CCNAME\", memoryCacheName);\n+\n+        return memoryCacheName;\n+    }\n+\n+    \/**\n+     * Test JAAS access to an in-memory cache\n+     *\/\n+    private static void testJAASAccessToInMemoryCache(String inMemoryCacheName) throws Exception {\n+        System.out.println(\"Testing JAAS access to an in-memory cache\");\n+\n+        \/\/ Verify KRB5CCNAME points to our in-memory cache\n+        String krb5ccname = System.getProperty(\"KRB5CCNAME\");\n+        System.out.println(\"KRB5CCNAME is set to: \" + krb5ccname);\n+        System.out.println(\"Expected in-memory cache: \" + inMemoryCacheName);\n+\n+        if (!inMemoryCacheName.equals(krb5ccname)) {\n+            System.out.println(\"ERROR: KRB5CCNAME does not point to our in-memory cache\");\n+            throw new RuntimeException(\"test setup error - KRB5CCNAME not pointing to in-memory cache\");\n+        }\n+\n+        try {\n+            Credentials creds = Credentials.acquireDefaultCreds();\n+\n+            if (creds != null) {\n+                String client = creds.getClient().toString();\n+                String server = creds.getServer().toString();\n+\n+                System.out.println(\"SUCCESS: JAAS retrieved credentials from in-memory cache\");\n+                System.out.println(\"Client: \" + client);\n+                System.out.println(\"Server: \" + server);\n+\n+                \/\/ Verify these are the OneKDC test credentials\n+                if (client.contains(\"dummy\") && server.contains(\"RABBIT.HOLE\")) {\n+                    System.out.println(\"SUCCESS: Retrieved correct OneKDC test credentials from in-memory cache\");\n+                    if (server.contains(\"krbtgt\")) {\n+                        System.out.println(\"Retrieved TGT as expected\");\n+                    }\n+                } else {\n+                    System.out.println(\"ERROR: JAAS retrieved wrong credentials from in-memory cache\");\n+                    System.out.println(\"Expected: dummy@RABBIT.HOLE -> krbtgt\/RABBIT.HOLE@RABBIT.HOLE\");\n+                    System.out.println(\"Found: \" + client + \" -> \" + server);\n+                    throw new RuntimeException(\"in-memory cache test failed - wrong credentials retrieved\");\n+                }\n+\n+            } else {\n+                System.out.println(\"JAAS accessed in-memory cache but found no credentials\");\n+            }\n+\n+        } catch (Exception e) {\n+            System.out.println(\"JAAS error: \" + e.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/native\/NativeCacheTest.java","additions":212,"deletions":0,"binary":false,"changes":212,"status":"added"},{"patch":"@@ -0,0 +1,268 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+#include <krb5\/krb5.h>\n+#include <string.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+#include <limits.h>\n+\n+#include \"NativeCredentialCacheHelper.h\"\n+\n+\/\/ Global krb5 context\n+static krb5_context g_context = NULL;\n+\n+\/**\n+ * Initialize krb5 context with OneKDC config\n+ *\/\n+static krb5_error_code ensure_context() {\n+    \/\/ Check if OneKDC config file exists or needs to be created\n+    if (access(\"localkdc-krb5.conf\", F_OK) != -1) {\n+        char *current_path = realpath(\"localkdc-krb5.conf\", NULL);\n+        if (current_path != NULL) {\n+            setenv(\"KRB5_CONFIG\", current_path, 1);\n+            free(current_path);\n+\n+            \/\/ If context already exists, reinitialize it\n+            if (g_context != NULL) {\n+                krb5_free_context(g_context);\n+                g_context = NULL;\n+            }\n+        }\n+    }\n+\n+    if (g_context == NULL) {\n+        return krb5_init_context(&g_context);\n+    }\n+    return 0;\n+}\n+\n+\/**\n+ * Convert Java string to C string\n+ *\/\n+static char* jstring_to_cstring(JNIEnv *env, jstring jstr) {\n+    if (jstr == NULL) return NULL;\n+\n+    const char *utf_chars = (*env)->GetStringUTFChars(env, jstr, NULL);\n+    if (utf_chars == NULL) return NULL;\n+\n+    char *result = strdup(utf_chars);\n+    (*env)->ReleaseStringUTFChars(env, jstr, utf_chars);\n+    return result;\n+}\n+\n+\/**\n+ * Print error messages for krb5 errors\n+ *\/\n+static void print_krb5_error(const char *operation, krb5_error_code code) {\n+    if (code != 0) {\n+        printf(\"krb5 error in %s: %s\\n\", operation, error_message(code));\n+    }\n+}\n+\n+\/**\n+ * Create an in-memory credential cache using native krb5 API.\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_NativeCredentialCacheHelper_createInMemoryCache\n+  (JNIEnv *env, jclass cls, jstring cacheName)\n+{\n+    krb5_error_code ret;\n+    krb5_ccache ccache;\n+    char *cache_name = NULL;\n+\n+    ret = ensure_context();\n+    if (ret) {\n+        print_krb5_error(\"ensure_context\", ret);\n+        return JNI_FALSE;\n+    }\n+\n+    cache_name = jstring_to_cstring(env, cacheName);\n+    if (cache_name == NULL) {\n+        return JNI_FALSE;\n+    }\n+\n+    \/\/ Resolve the memory cache\n+    ret = krb5_cc_resolve(g_context, cache_name, &ccache);\n+    if (ret) {\n+        print_krb5_error(\"krb5_cc_resolve\", ret);\n+        free(cache_name);\n+        return JNI_FALSE;\n+    }\n+\n+    printf(\"Created memory cache: %s\\n\", cache_name);\n+\n+    krb5_cc_close(g_context, ccache);\n+    free(cache_name);\n+    return JNI_TRUE;\n+}\n+\n+\/**\n+ * Set KRB5CCNAME so that the test will pick up the in-memory credential cache.\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_NativeCredentialCacheHelper_setDefaultCache\n+  (JNIEnv *env, jclass cls, jstring cacheName)\n+{\n+    char *cache_name = jstring_to_cstring(env, cacheName);\n+    if (cache_name == NULL) {\n+        return JNI_FALSE;\n+    }\n+\n+    \/\/ Set KRB5CCNAME environment variable\n+    if (setenv(\"KRB5CCNAME\", cache_name, 1) != 0) {\n+        free(cache_name);\n+        return JNI_FALSE;\n+    }\n+\n+    printf(\"Set default cache to: %s\\n\", cache_name);\n+    free(cache_name);\n+    return JNI_TRUE;\n+}\n+\n+\n+\/**\n+ * Copy real Kerberos credentials from a source cache to an in-memory cache.\n+ * in-memory cache.  Used to move OneKDC-generated TGTs to an in-memory cache\n+ * for testing.\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_NativeCredentialCacheHelper_copyCredentialsToInMemoryCache\n+  (JNIEnv *env, jclass cls, jstring inMemoryCacheName, jstring sourceCacheName)\n+{\n+    krb5_error_code ret;\n+    krb5_ccache source_ccache = NULL;\n+    krb5_ccache in_memory_ccache = NULL;\n+    krb5_cc_cursor cursor;\n+    krb5_creds creds;\n+    char *in_memory_cache_name = NULL;\n+    char *source_cache_name = NULL;\n+    int copied_count = 0;\n+\n+    ret = ensure_context();\n+    if (ret) {\n+        print_krb5_error(\"ensure_context\", ret);\n+        return JNI_FALSE;\n+    }\n+\n+    \/\/ Convert Java strings\n+    in_memory_cache_name = jstring_to_cstring(env, inMemoryCacheName);\n+    if (sourceCacheName != NULL) {\n+        source_cache_name = jstring_to_cstring(env, sourceCacheName);\n+    }\n+\n+    if (!in_memory_cache_name) {\n+        printf(\"Failed to get in-memory cache name\\n\");\n+        goto cleanup;\n+    }\n+\n+    printf(\"Copying credentials to in-memory cache: %s from source: %s\\n\",\n+        in_memory_cache_name,\n+        source_cache_name ? source_cache_name : \"default cache\"\n+    );\n+\n+    \/\/ Open source cache (default if sourceCacheName is null)\n+    if (source_cache_name) {\n+        ret = krb5_cc_resolve(g_context, source_cache_name, &source_ccache);\n+        if (ret) {\n+            print_krb5_error(\"krb5_cc_resolve (source)\", ret);\n+            goto cleanup;\n+        }\n+    } else {\n+        ret = krb5_cc_default(g_context, &source_ccache);\n+        if (ret) {\n+            print_krb5_error(\"krb5_cc_default\", ret);\n+            goto cleanup;\n+        }\n+    }\n+\n+    \/\/ Open\/resolve memory cache\n+    ret = krb5_cc_resolve(g_context, in_memory_cache_name, &in_memory_ccache);\n+    if (ret) {\n+        print_krb5_error(\"krb5_cc_resolve (in-memory)\", ret);\n+        goto cleanup;\n+    }\n+\n+    \/\/ Get principal from source cache for initialization\n+    krb5_principal principal = NULL;\n+    ret = krb5_cc_get_principal(g_context, source_ccache, &principal);\n+    if (ret) {\n+        print_krb5_error(\"krb5_cc_get_principal\", ret);\n+        goto cleanup;\n+    }\n+\n+    \/\/ Initialize in-memory cache with the principal\n+    ret = krb5_cc_initialize(g_context, in_memory_ccache, principal);\n+    if (ret) {\n+        print_krb5_error(\"krb5_cc_initialize\", ret);\n+        krb5_free_principal(g_context, principal);\n+        goto cleanup;\n+    }\n+\n+    \/\/ Start credential cursor on source cache\n+    ret = krb5_cc_start_seq_get(g_context, source_ccache, &cursor);\n+    if (ret) {\n+        print_krb5_error(\"krb5_cc_start_seq_get\", ret);\n+        krb5_free_principal(g_context, principal);\n+        goto cleanup;\n+    }\n+\n+    \/\/ Copy each credential from source to memory cache\n+    while ((ret = krb5_cc_next_cred(g_context, source_ccache, &cursor, &creds)) == 0) {\n+        ret = krb5_cc_store_cred(g_context, in_memory_ccache, &creds);\n+        if (ret) {\n+            print_krb5_error(\"krb5_cc_store_cred\", ret);\n+            krb5_free_cred_contents(g_context, &creds);\n+            break;\n+        }\n+\n+        printf(\"Copied in-memory credential: %s -> %s\\n\",\n+               creds.client ? \"client\" : \"unknown\",\n+               creds.server ? \"server\" : \"unknown\");\n+\n+        copied_count++;\n+        krb5_free_cred_contents(g_context, &creds);\n+    }\n+\n+    \/\/ End the cursor (expected to return KRB5_CC_END)\n+    krb5_cc_end_seq_get(g_context, source_ccache, &cursor);\n+\n+    \/\/ Success if we copied at least one credential\n+    if (copied_count > 0) {\n+        printf(\"Successfully copied %d credentials to in-memory cache: %s\\n\",\n+               copied_count, in_memory_cache_name);\n+        ret = 0;\n+    } else {\n+        printf(\"No credentials found in source cache to copy to in-memory cache\\n\");\n+        ret = KRB5_CC_NOTFOUND;\n+    }\n+\n+    krb5_free_principal(g_context, principal);\n+\n+cleanup:\n+    if (source_ccache) krb5_cc_close(g_context, source_ccache);\n+    if (in_memory_ccache) krb5_cc_close(g_context, in_memory_ccache);\n+    if (in_memory_cache_name) free(in_memory_cache_name);\n+    if (source_cache_name) free(source_cache_name);\n+\n+    return (ret == 0) ? JNI_TRUE : JNI_FALSE;\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/native\/NativeCredentialCacheHelper.c","additions":268,"deletions":0,"binary":false,"changes":268,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * JNI wrapper for native Kerberos credential cache operations.\n+ * Provides native methods to create MEMORY: credential caches and copy\n+ * real Kerberos credentials to them for testing JAAS access.\n+ *\/\n+public class NativeCredentialCacheHelper {\n+\n+    static {\n+        try {\n+            System.loadLibrary(\"nativecredentialcachehelper\");\n+        } catch (UnsatisfiedLinkError e) {\n+            System.err.println(\"Failed to load nativecredentialcachehelper library: \" + e.getMessage());\n+            throw e;\n+        }\n+    }\n+\n+    \/**\n+     * Create an in-memory credential cache using native krb5 calls.\n+     * @param cacheName The name for the in-memory cache (e.g., \"MEMORY:test123\")\n+     * @return true if cache was created successfully, false otherwise\n+     *\/\n+    public static native boolean createInMemoryCache(String cacheName);\n+\n+    \/**\n+     * Copy real credentials from a source cache to the in-memory cache.\n+     * This preserves the proper Kerberos credential format for JAAS access.\n+     * @param inMemoryCacheName The target in-memory cache name (e.g., \"MEMORY:test123\")\n+     * @param sourceCacheName The source cache name (null for default cache)\n+     * @return true if credentials were copied successfully, false otherwise\n+     *\/\n+    public static native boolean copyCredentialsToInMemoryCache(String inMemoryCacheName, String sourceCacheName);\n+\n+    \/**\n+     * Set the default credential cache to the specified credential cache.\n+     * @param cacheName The credential cache name to set as default\n+     * @return true if set successfully, false otherwise\n+     *\/\n+    public static native boolean setDefaultCache(String cacheName);\n+}\n+\n+\n+\n","filename":"test\/jdk\/sun\/security\/krb5\/native\/NativeCredentialCacheHelper.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+127.0.0.1 localhost\n+127.0.0.1 host.rabbit.hole\n+127.0.0.1 kdc.rabbit.hole\n","filename":"test\/jdk\/sun\/security\/krb5\/native\/TestHosts","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+#!\/bin\/bash\n+# Build script for NativeCacheTest\n+\n+set -e\n+\n+# Use jtreg environment variables when available\n+if [ -n \"$TESTJAVA\" ]; then\n+    # Running under jtreg\n+    BUILT_JDK=\"$TESTJAVA\"\n+    JDK_ROOT=\"$(dirname $(dirname $TESTROOT))\"\n+    LIB_DIR=\"$JDK_ROOT\/test\/lib\"\n+    TEST_DIR=\"$TESTSRC\"\n+else\n+    # Running manually\n+    TEST_DIR=$(pwd)\n+    JDK_ROOT=\"$(cd ..\/..\/..\/..\/..\/..\/ && pwd)\"\n+    LIB_DIR=\"$JDK_ROOT\/test\/lib\"\n+    BUILT_JDK=\"$JDK_ROOT\/build\/linux-x86_64-server-release\/jdk\"\n+fi\n+\n+export JAVA_HOME=\"$BUILT_JDK\"\n+export PATH=\"$BUILT_JDK\/bin:$PATH\"\n+\n+# Module exports required for Kerberos internal APIs\n+if [ -n \"$TESTCLASSPATH\" ]; then\n+    # Use the jtreg classpath\n+    JAVA_CP=\"$TESTCLASSPATH\"\n+else\n+    # Manual execution classpath\n+    JAVA_CP=\"$LIB_DIR:..\/auto:.\"\n+fi\n+MODULE_EXPORTS=\"--add-exports java.security.jgss\/sun.security.krb5=ALL-UNNAMED \\\n+--add-exports java.security.jgss\/sun.security.krb5.internal=ALL-UNNAMED \\\n+--add-exports java.security.jgss\/sun.security.krb5.internal.ccache=ALL-UNNAMED \\\n+--add-exports java.security.jgss\/sun.security.krb5.internal.crypto=ALL-UNNAMED \\\n+--add-exports java.security.jgss\/sun.security.krb5.internal.ktab=ALL-UNNAMED \\\n+--add-exports java.security.jgss\/sun.security.jgss.krb5=ALL-UNNAMED \\\n+--add-exports java.base\/sun.security.util=ALL-UNNAMED \\\n+--add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\"\n+\n+cd \"$TEST_DIR\"\n+\n+# For jtreg, classes are already compiled by the harness\n+if [ -z \"$TESTJAVA\" ]; then\n+    # Manual execution\n+\n+    # Compile test library classes\n+    cd \"$LIB_DIR\"\n+    javac -cp . --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED jdk\/test\/lib\/Platform.java\n+\n+    # Compile OneKDC and test infrastructure\n+    cd \"$TEST_DIR\/..\/auto\"\n+    javac -cp \"$LIB_DIR:.\" $MODULE_EXPORTS -XDignore.symbol.file \\\n+        KDC.java OneKDC.java Context.java\n+\n+    cd \"$TEST_DIR\"\n+\n+    # Compile test classes\n+    javac -cp \"$JAVA_CP\" $MODULE_EXPORTS -XDignore.symbol.file \\\n+        NativeCredentialCacheHelper.java NativeCacheTest.java\n+fi\n+\n+# Generate JNI header\n+cd \"$TEST_DIR\"\n+if [ -n \"$TESTCLASSPATH\" ]; then\n+    javac -cp \"$TESTCLASSPATH\" -h . NativeCredentialCacheHelper.java\n+else\n+    javac -cp . -h . NativeCredentialCacheHelper.java\n+fi\n+\n+# Get the OS to determine the compiler and library extension\n+OS=$(uname -s | tr 'A-Z' 'a-z')\n+if [ \"$OS\" == \"linux\" ]; then\n+    COMPILER=gcc\n+    LIBEXT=so\n+elif [ \"$OS\" == \"darwin\" ]; then\n+    COMPILER=clang\n+    LIBEXT=dylib\n+else\n+    echo \"Unsupported os: ${OS}\"\n+    exit 1\n+fi\n+\n+# Compile native library\n+cd \"$TEST_DIR\"\n+${COMPILER} -shared -fPIC -I\"$JAVA_HOME\/include\" -I\"$JAVA_HOME\/include\/${OS}\" -lkrb5 \\\n+            -o libnativecredentialcachehelper.${LIBEXT} NativeCredentialCacheHelper.c\n+\n+echo \"Build completed successfully\"\n","filename":"test\/jdk\/sun\/security\/krb5\/native\/build.sh","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}