{"files":[{"patch":"@@ -37,1 +37,1 @@\n-  if (thread->is_Java_thread() && allow_block_for_safepoint) {\n+  if (allow_block_for_safepoint && thread->is_Java_thread()) {\n@@ -49,1 +49,1 @@\n-  \/\/ Apply TTAS to avoid more expenseive CAS calls if the lock is still held by other thread.\n+  \/\/ Apply TTAS to avoid more expensive CAS calls if the lock is still held by other thread.\n@@ -51,1 +51,1 @@\n-    Atomic::cmpxchg(&_state, unlocked, locked) != unlocked) {\n+         Atomic::cmpxchg(&_state, unlocked, locked) != unlocked) {\n@@ -71,1 +71,1 @@\n-            !SafepointMechanism::local_poll_armed(java_thread)) {\n+                 !SafepointMechanism::local_poll_armed(java_thread)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLock.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,3 +51,5 @@\n-    if (allow_block_for_safepoint && SafepointSynchronize::is_synchronizing()) {\n-      \/\/ Java thread, and there is a pending safepoint. Dive into contended locking\n-      \/\/ immediately without trying anything else, and block.\n+    if ((allow_block_for_safepoint && SafepointSynchronize::is_synchronizing()) ||\n+        Atomic::cmpxchg(&_state, unlocked, locked) != unlocked) {\n+      \/\/ 1. Java thread, and there is a pending safepoint. Dive into contended locking\n+      \/\/    immediately without trying anything else, and block.\n+      \/\/ 2. Fast lock fails, dive into contended lock handling.\n@@ -55,5 +57,0 @@\n-    } else {\n-      \/\/ Try to lock fast, or dive into contended lock handling.\n-      if (Atomic::cmpxchg(&_state, unlocked, locked) != unlocked) {\n-        contended_lock(allow_block_for_safepoint);\n-      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLock.hpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"}]}