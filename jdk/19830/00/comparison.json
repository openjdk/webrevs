{"files":[{"patch":"@@ -1919,0 +1919,2 @@\n+    case Op_ReverseBytesS:\n+    case Op_ReverseBytesUS:\n@@ -7869,29 +7871,0 @@\n-\/\/ ============================================================================\n-\/\/ BSWAP Instructions\n-\n-instruct bytes_reverse_unsigned_short(iRegINoSp dst, iRegIorL2I src) %{\n-  match(Set dst (ReverseBytesUS src));\n-\n-  ins_cost(ALU_COST * 5);\n-  format %{ \"revb_h_h_u  $dst, $src\\t#@bytes_reverse_unsigned_short\" %}\n-\n-  ins_encode %{\n-    __ revb_h_h_u(as_Register($dst$$reg), as_Register($src$$reg));\n-  %}\n-\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct bytes_reverse_short(iRegINoSp dst, iRegIorL2I src) %{\n-  match(Set dst (ReverseBytesS src));\n-\n-  ins_cost(ALU_COST * 5);\n-  format %{ \"revb_h_h  $dst, $src\\t#@bytes_reverse_short\" %}\n-\n-  ins_encode %{\n-    __ revb_h_h(as_Register($dst$$reg), as_Register($src$$reg));\n-  %}\n-\n-  ins_pipe(pipe_class_default);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":2,"deletions":29,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -209,1 +209,0 @@\n-  predicate(UseZbb);\n@@ -216,0 +215,1 @@\n+    assert(UseZbb, \"must be\");\n@@ -223,1 +223,0 @@\n-  predicate(UseZbb);\n@@ -230,0 +229,1 @@\n+    assert(UseZbb, \"must be\");\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Random;\n@@ -51,0 +52,23 @@\n+    @Param(\"500\")\n+    private int size;\n+\n+    private char[] chars;\n+    private char[] res;\n+\n+    @Setup\n+    public void setup() {\n+        Random r  = new Random(0);\n+        chars     = new char[size];\n+        res       = new char[size];\n+        for (int i = 0; i < size; i++) {\n+            chars[i] = (char)r.nextInt(Character.MAX_VALUE + 1);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void reverseBytes() {\n+        for (int i = 0; i < size; i++) {\n+            res[i] = Character.reverseBytes(chars[i]);\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Characters.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+public class Shorts {\n+\n+    @Param(\"500\")\n+    private int size;\n+\n+    private short[] shorts;\n+    private short[] res;\n+\n+    @Setup\n+    public void setup() {\n+        Random r  = new Random(0);\n+        shorts     = new short[size];\n+        res       = new short[size];\n+        for (int i = 0; i < size; i++) {\n+            shorts[i] = (short)(r.nextInt(Character.MAX_VALUE + 1) + Short.MIN_VALUE);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void reverseBytes() {\n+        for (int i = 0; i < size; i++) {\n+            res[i] = Short.reverseBytes(shorts[i]);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Shorts.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}