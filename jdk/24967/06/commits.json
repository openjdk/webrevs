[{"commit":{"message":"Add an assert to inflateToUTF16 method\nAdd doc of preconditions to appendChars... methods\nCorrect misc javadoc"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java"}],"sha":"1404fa9ebe9db61580124b619668bc6ae1160cb2"},{"commit":{"message":"Apply reviewer suggestions for typos, javadoc, and copyright dates."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/patches\/java.base\/java\/lang\/Helper.java"},{"filename":"test\/jdk\/java\/lang\/StringBuilder\/StressSBTest.java"}],"sha":"efd6fed1093794270af3b8d1cdd88a643ccde052"},{"commit":{"message":"Refactor to consistently use `isLatin1(coder)` within AbstractStringBuilder."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java"}],"sha":"80992a2084a8a345d041dfb7798e5948e1facde7"},{"commit":{"message":"Applied suggestion to use StringUTF16.compress in append() for copying char[].\nAdded similar improvement to putCharsAt."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java"}],"sha":"ff3d841fb16dc4fcfc654b2836d0ab289b63cc3a"},{"commit":{"message":"Optimize StringUTF16.putCharsAt a bit.\nFixup hotspot Helper of putCharsAt to remove return value to match StringUTF16.putCharsAt."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/patches\/java.base\/java\/lang\/Helper.java"}],"sha":"d2261cd6b7a8db8bcb6ab05b0600ccd329950ced"},{"commit":{"message":"Added missing bugid to tests\nApplied review suggestions.\nAdded convenience methods to StringLatin1 for 4 and 5 character literals to leverage optimizations for merged stores.\nUpdated missing copyright years."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"},{"filename":"test\/jdk\/java\/lang\/StringBuilder\/CompactStringBuilder.java"},{"filename":"test\/jdk\/java\/lang\/StringBuilder\/HugeCapacity.java"},{"filename":"test\/jdk\/java\/lang\/StringBuilder\/StringBuilderRepeat.java"}],"sha":"f50032444fd60e8ef3efbeab1d33cc92ae322939"},{"commit":{"message":"8351443: Refactor AbstractStringBuilder to maintain consistency between\ncount, coder, and value buffers while the buffer capacity is\nbeing expanded and\/or inflated from Latin1 to UTF16 representations.\nASB fields are only updated in the public methods.\nSupport methods are designed to pass all arguments in as locals\nand return any modified values.\nThe value buffer undergoes an inflation from LATIN1 to UTF16 when\nneeded to store UTF16 values.\n\nAdd SBStressTest, a randomized, multi-thread exerciser of unsynchronized StringBuilders.\nStressSBTest exercises most public instance methods of StringBuilder.\nA single StringBuilder is modified concurrently by a number of threads."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"},{"filename":"test\/jdk\/java\/lang\/StringBuilder\/CompactStringBuilder.java"},{"filename":"test\/jdk\/java\/lang\/StringBuilder\/HugeCapacity.java"},{"filename":"test\/jdk\/java\/lang\/StringBuilder\/StressSBTest.java"},{"filename":"test\/jdk\/java\/lang\/StringBuilder\/StringBuilderRepeat.java"}],"sha":"b59a2e9a1c47c0047ef16533a0c6b1002c2793a0"}]