{"files":[{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +43,1 @@\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -43,1 +45,0 @@\n-import jdk.test.lib.JDKToolFinder;\n@@ -47,1 +48,0 @@\n-    var pid = Long.toString(ProcessHandle.current().pid());\n@@ -50,1 +50,1 @@\n-    pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.classes\"});\n+    pb.command(new PidJcmdExecutor().getCommandLine(\"VM.classes\"));\n@@ -55,1 +55,1 @@\n-    pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.classes\", \"-verbose\"});\n+    pb.command(new PidJcmdExecutor().getCommandLine(\"VM.classes\", \"-verbose\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/PrintClasses.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -62,1 +62,0 @@\n-import jdk.test.lib.JDKToolFinder;\n@@ -71,2 +70,0 @@\n-    \/\/ Grab my own PID\n-    String pid = Long.toString(ProcessTools.getProcessId());\n@@ -74,1 +71,1 @@\n-    pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"detail\"});\n+    pb.command(new PidJcmdExecutor().getCommandLine(\"VM.native_memory\", \"detail\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/ElfDecoder\/TestElfDirectRead.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -27,1 +27,0 @@\n-import jdk.test.lib.JDKToolFinder;\n@@ -74,2 +73,0 @@\n-        \/\/ Grab my own PID\n-        String pid = Long.toString(ProcessTools.getProcessId());\n@@ -77,1 +74,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.metaspace\", \"basic\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.metaspace\", \"basic\"));\n@@ -86,2 +83,0 @@\n-        \/\/ Grab my own PID\n-        String pid = Long.toString(ProcessTools.getProcessId());\n@@ -89,1 +84,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.metaspace\", \"basic\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.metaspace\", \"basic\"));\n@@ -100,1 +95,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.metaspace\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.metaspace\"));\n@@ -112,1 +107,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.metaspace\", \"show-loaders\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.metaspace\", \"show-loaders\"));\n@@ -117,1 +112,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.metaspace\", \"by-chunktype\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.metaspace\", \"by-chunktype\"));\n@@ -134,1 +129,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.metaspace\", \"vslist\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.metaspace\", \"vslist\"));\n@@ -140,1 +135,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.metaspace\", \"chunkfreelist\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.metaspace\", \"chunkfreelist\"));\n@@ -164,1 +159,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.metaspace\", \"scale=G\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.metaspace\", \"scale=G\"));\n@@ -169,1 +164,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.metaspace\", \"scale=K\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.metaspace\", \"scale=K\"));\n@@ -174,1 +169,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.metaspace\", \"scale=1\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.metaspace\", \"scale=1\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/PrintMetaspaceDcmd.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -37,1 +37,0 @@\n-import jdk.test.lib.JDKToolFinder;\n@@ -52,1 +51,0 @@\n-        String pid = Long.toString(ProcessTools.getProcessId());\n@@ -55,1 +53,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"detail\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.native_memory\", \"detail\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/CommitOverlappingRegions.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import jdk.test.lib.process.ProcessTools;\n@@ -37,1 +36,0 @@\n-import jdk.test.lib.JDKToolFinder;\n@@ -46,1 +44,0 @@\n-        ProcessBuilder pb = new ProcessBuilder();\n@@ -48,2 +45,0 @@\n-        \/\/ Grab my own PID\n-        String pid = Long.toString(ProcessTools.getProcessId());\n@@ -56,3 +51,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"baseline=true\"});\n-\n-        output = new OutputAnalyzer(pb.start());\n+        output = NMTTestUtils.startJcmdVMNativeMemory(\"baseline=true\");\n@@ -62,3 +55,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"detail.diff\", \"scale=KB\"});\n-\n-        output = new OutputAnalyzer(pb.start());\n+        output = NMTTestUtils.startJcmdVMNativeMemory(\"detail.diff\", \"scale=KB\");\n@@ -68,3 +59,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"detail.diff\", \"scale=KB\"});\n-\n-        output = new OutputAnalyzer(pb.start());\n+        output = NMTTestUtils.startJcmdVMNativeMemory(\"detail.diff\", \"scale=KB\");\n@@ -74,3 +63,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"detail.diff\", \"scale=KB\"});\n-\n-        output = new OutputAnalyzer(pb.start());\n+        output = NMTTestUtils.startJcmdVMNativeMemory(\"detail.diff\", \"scale=KB\");\n@@ -80,3 +67,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"detail.diff\", \"scale=KB\"});\n-\n-        output = new OutputAnalyzer(pb.start());\n+        output = NMTTestUtils.startJcmdVMNativeMemory(\"detail.diff\", \"scale=KB\");\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/JcmdDetailDiff.java","additions":6,"deletions":21,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +36,0 @@\n-import jdk.test.lib.JDKToolFinder;\n-import jdk.test.lib.process.ProcessTools;\n@@ -45,4 +44,0 @@\n-        \/\/ Grab my own PID\n-        String pid = Long.toString(ProcessTools.getProcessId());\n-        ProcessBuilder pb = new ProcessBuilder();\n-\n@@ -53,2 +48,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"detail\"});\n-        output = new OutputAnalyzer(pb.start());\n+        output = NMTTestUtils.startJcmdVMNativeMemory(\"detail\");\n@@ -57,2 +51,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"baseline\"});\n-        output = new OutputAnalyzer(pb.start());\n+        output = NMTTestUtils.startJcmdVMNativeMemory(\"baseline\");\n@@ -63,2 +56,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"detail.diff\"});\n-        output = new OutputAnalyzer(pb.start());\n+        output = NMTTestUtils.startJcmdVMNativeMemory(\"detail.diff\");\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocSiteTypeChange.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,2 @@\n-import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.StringArrayUtils;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -27,1 +28,0 @@\n-import jdk.test.lib.process.ProcessTools;\n@@ -35,5 +35,1 @@\n-        String fullargs[] = new String[3 + additional_args.length];\n-        fullargs[0] = JDKToolFinder.getJDKTool(\"jcmd\");\n-        fullargs[1] = Long.toString(ProcessTools.getProcessId());\n-        fullargs[2] = \"VM.native_memory\";\n-        System.arraycopy(additional_args, 0, fullargs, 3, additional_args.length);\n+        String fullargs[] = StringArrayUtils.concat(\"VM.native_memory\", additional_args);\n@@ -41,1 +37,1 @@\n-        pb.command(fullargs);\n+        pb.command(new PidJcmdExecutor().getCommandLine(fullargs));\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/NMTTestUtils.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -38,1 +38,0 @@\n-import jdk.test.lib.JDKToolFinder;\n@@ -51,1 +50,0 @@\n-        String pid = Long.toString(ProcessTools.getProcessId());\n@@ -70,2 +68,1 @@\n-        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid,\n-                \"VM.native_memory\", \"detail\" });\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.native_memory\", \"detail\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/VirtualAllocAttemptReserveMemoryAt.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,2 @@\n+    \/\/ jstack output may be lengthy, disable streaming output to avoid deadlocks\n+    final static String DISABLE_STREAMING_OUTPUT = \"-J-Djdk.attach.allowStreamingOutput=false\";\n@@ -114,1 +116,1 @@\n-                ProcessBuilder pb = new ProcessBuilder(JSTACK, PID);\n+                ProcessBuilder pb = new ProcessBuilder(JSTACK, DISABLE_STREAMING_OUTPUT, PID);\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TestThreadDumpClassInitMonitor.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,2 @@\n+    \/\/ jstack output may be lengthy, disable streaming output to avoid deadlocks\n+    final static String DISABLE_STREAMING_OUTPUT = \"-J-Djdk.attach.allowStreamingOutput=false\";\n@@ -73,1 +75,1 @@\n-        ProcessBuilder pb = new ProcessBuilder(JSTACK, PID);\n+        ProcessBuilder pb = new ProcessBuilder(JSTACK, DISABLE_STREAMING_OUTPUT, PID);\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TestThreadDumpSMRInfo.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,2 @@\n+                \/\/ jstack output may be lengthy, disable streaming output to avoid deadlocks\n+                \"-J-Djdk.attach.allowStreamingOutput=false\",\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/ThreadPriorities.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -37,1 +37,0 @@\n-import jdk.test.lib.JDKToolFinder;\n@@ -58,3 +57,0 @@\n-            \/\/ Grab my own PID\n-            String pid = Long.toString(ProcessTools.getProcessId());\n-\n@@ -62,1 +58,1 @@\n-            pb.command(new String[] {JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.systemdictionary\"});\n+            pb.command(new PidJcmdExecutor().getCommandLine(\"VM.systemdictionary\"));\n@@ -73,1 +69,1 @@\n-            pb.command(new String[] {JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.systemdictionary\", \"-verbose\"});\n+            pb.command(new PidJcmdExecutor().getCommandLine(\"VM.systemdictionary\", \"-verbose\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/DumpSharedDictionary.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -37,1 +37,0 @@\n-import jdk.test.lib.JDKToolFinder;\n@@ -42,3 +41,0 @@\n-        \/\/ Grab my own PID\n-        String pid = Long.toString(ProcessTools.getProcessId());\n-\n@@ -49,1 +45,1 @@\n-        pb.command(new String[] {JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.symboltable\", \"-verbose\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.symboltable\", \"-verbose\"));\n@@ -62,1 +58,1 @@\n-        pb.command(new String[] {JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.stringtable\", \"-verbose\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.stringtable\", \"-verbose\"));\n@@ -77,1 +73,1 @@\n-        pb.command(new String[] {JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.systemdictionary\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.systemdictionary\"));\n@@ -88,1 +84,1 @@\n-        pb.command(new String[] {JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.systemdictionary\", \"-verbose\"});\n+        pb.command(new PidJcmdExecutor().getCommandLine(\"VM.systemdictionary\", \"-verbose\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/DumpSymbolAndStringTable.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,2 @@\n+    \/\/ jstack output may be lengthy, disable streaming output to avoid deadlocks\n+    launcher.addVMArg(\"-Djdk.attach.allowStreamingOutput=false\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/tmtools\/jstack\/JstackThreadTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,2 @@\n+        \/\/ Thread.print command output may be lengthy, disable streaming output to avoid deadlocks\n+        launcher.addVMArg(\"-Djdk.attach.allowStreamingOutput=false\");\n","filename":"test\/jdk\/sun\/tools\/jcmd\/JcmdOutputEncodingTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -293,0 +293,2 @@\n+        \/\/ jmap output may be lengthy, disable streaming output to avoid deadlocks\n+        launcher.addVMArg(\"-Djdk.attach.allowStreamingOutput=false\");\n","filename":"test\/jdk\/sun\/tools\/jmap\/BasicJMapTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,2 @@\n+        \/\/ jstack output may be lengthy, disable output streaming to avoid deadlocks\n+        launcher.addVMArg(\"-Djdk.attach.allowStreamingOutput=false\");\n","filename":"test\/jdk\/sun\/tools\/jstack\/BasicJStackTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+    \/\/ VM option to disable streaming output\n+    protected String jcmdDisableStreamingOption = \"-J-Djdk.attach.allowStreamingOutput=false\";\n@@ -44,0 +46,4 @@\n+    public List<String> getCommandLine(String... cmds) {\n+        return createCommandLine(String.join(\" \", cmds));\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/dcmd\/JcmdExecutor.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.ArrayList;\n@@ -36,0 +37,2 @@\n+    \/\/ jcmd output for many commands may be lengthy when command is executed against main test process\n+    protected boolean disableStreamingOutput = true;\n@@ -42,5 +45,1 @@\n-        try {\n-            pid = ProcessTools.getProcessId();\n-        } catch (Exception e) {\n-            throw new CommandExecutorException(\"Could not determine own pid\", e);\n-        }\n+        pid = getCurrentPid();\n@@ -57,0 +56,9 @@\n+        disableStreamingOutput = (pid == getCurrentPid());\n+    }\n+\n+    private static long getCurrentPid() {\n+        try {\n+            return ProcessTools.getProcessId();\n+        } catch (Exception e) {\n+            throw new CommandExecutorException(\"Could not determine own pid\", e);\n+        }\n@@ -60,1 +68,9 @@\n-        return Arrays.asList(jcmdBinary, Long.toString(pid), cmd);\n+        List<String> commandLine = new ArrayList<>();\n+        commandLine.add(jcmdBinary);\n+        if (disableStreamingOutput) {\n+            commandLine.add(jcmdDisableStreamingOption);\n+        }\n+        commandLine.add(Long.toString(pid));\n+        commandLine.add(cmd);\n+        return commandLine;\n+        \/\/return Arrays.asList(jcmdBinary, Long.toString(pid), cmd);\n","filename":"test\/lib\/jdk\/test\/lib\/dcmd\/PidJcmdExecutor.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"}]}