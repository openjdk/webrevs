{"files":[{"patch":"@@ -2090,1 +2090,1 @@\n-      _total_cpu_time = os::thread_cpu_time(t);\n+      _total_cpu_time += os::thread_cpu_time(t);\n@@ -2798,3 +2798,3 @@\n-    vtime too regularly, as it is quite expensive. So, once it was in\n-    place, it was natural to piggy-back all the other conditions on it\n-    too and not constantly check them throughout the code.\n+    cpu time gathering too regularly, as it is quite expensive. So,\n+    once it was in place, it was natural to piggy-back all the other\n+    conditions on it too and not constantly check them throughout the code.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -127,2 +127,2 @@\n-double G1ConcurrentRefineThread::cpu_time_s() {\n-  return (double)os::thread_cpu_time(this) \/ NANOSECS_PER_SEC;\n+jlong G1ConcurrentRefineThread::cpu_time() {\n+  return os::thread_cpu_time(this);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,2 +106,2 @@\n-  \/\/ Total cpu time spent in this thread in seconds so far.\n-  double cpu_time_s();\n+  \/\/ Total cpu time spent in this thread so far.\n+  jlong cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-      _summary->set_rs_thread_vtime(_counter, crt->cpu_time_s());\n+      _summary->set_refine_thread_cpu_time(_counter, crt->cpu_time());\n@@ -56,4 +56,4 @@\n-void G1RemSetSummary::set_rs_thread_vtime(uint thread, double value) {\n-  assert(_rs_threads_vtimes != nullptr, \"just checking\");\n-  assert(thread < _num_vtimes, \"just checking\");\n-  _rs_threads_vtimes[thread] = value;\n+void G1RemSetSummary::set_refine_thread_cpu_time(uint thread, jlong value) {\n+  assert(_refine_threads_cpu_times != nullptr, \"just checking\");\n+  assert(thread < _num_refine_threads, \"just checking\");\n+  _refine_threads_cpu_times[thread] = value;\n@@ -62,4 +62,4 @@\n-double G1RemSetSummary::rs_thread_vtime(uint thread) const {\n-  assert(_rs_threads_vtimes != nullptr, \"just checking\");\n-  assert(thread < _num_vtimes, \"just checking\");\n-  return _rs_threads_vtimes[thread];\n+jlong G1RemSetSummary::refine_thread_cpu_time(uint thread) const {\n+  assert(_refine_threads_cpu_times != nullptr, \"just checking\");\n+  assert(thread < _num_refine_threads, \"just checking\");\n+  return _refine_threads_cpu_times[thread];\n@@ -69,2 +69,2 @@\n-  _num_vtimes(G1ConcRefinementThreads),\n-  _rs_threads_vtimes(NEW_C_HEAP_ARRAY(double, _num_vtimes, mtGC)) {\n+  _num_refine_threads(G1ConcRefinementThreads),\n+  _refine_threads_cpu_times(NEW_C_HEAP_ARRAY(jlong, _num_refine_threads, mtGC)) {\n@@ -72,1 +72,1 @@\n-  memset(_rs_threads_vtimes, 0, sizeof(double) * _num_vtimes);\n+  memset(_refine_threads_cpu_times, 0, sizeof(jlong) * _num_refine_threads);\n@@ -80,1 +80,1 @@\n-  FREE_C_HEAP_ARRAY(double, _rs_threads_vtimes);\n+  FREE_C_HEAP_ARRAY(jlong, _refine_threads_cpu_times);\n@@ -85,1 +85,1 @@\n-  assert(_num_vtimes == other->_num_vtimes, \"just checking\");\n+  assert(_num_refine_threads == other->_num_refine_threads, \"just checking\");\n@@ -87,1 +87,1 @@\n-  memcpy(_rs_threads_vtimes, other->_rs_threads_vtimes, sizeof(double) * _num_vtimes);\n+  memcpy(_refine_threads_cpu_times, other->_refine_threads_cpu_times, sizeof(jlong) * _num_refine_threads);\n@@ -92,1 +92,1 @@\n-  assert(_num_vtimes == other->_num_vtimes, \"just checking\");\n+  assert(_num_refine_threads == other->_num_refine_threads, \"just checking\");\n@@ -94,2 +94,2 @@\n-  for (uint i = 0; i < _num_vtimes; i++) {\n-    set_rs_thread_vtime(i, other->rs_thread_vtime(i) - rs_thread_vtime(i));\n+  for (uint i = 0; i < _num_refine_threads; i++) {\n+    set_refine_thread_cpu_time(i, other->refine_thread_cpu_time(i) - refine_thread_cpu_time(i));\n@@ -386,2 +386,2 @@\n-    for (uint i = 0; i < _num_vtimes; i++) {\n-      out->print(\"    %5.2f\", rs_thread_vtime(i));\n+    for (uint i = 0; i < _num_refine_threads; i++) {\n+      out->print(\"    %5.2f\", (double)refine_thread_cpu_time(i) \/ NANOSECS_PER_SEC);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,1 @@\n-\/\/ A G1RemSetSummary manages statistical information about the G1RemSet\n-\n+\/\/ A G1RemSetSummary manages statistical information about the remembered set.\n@@ -37,2 +36,2 @@\n-  size_t _num_vtimes;\n-  double* _rs_threads_vtimes;\n+  size_t _num_refine_threads;\n+  jlong* _refine_threads_cpu_times;\n@@ -40,1 +39,1 @@\n-  void set_rs_thread_vtime(uint thread, double value);\n+  void set_refine_thread_cpu_time(uint thread, jlong value);\n@@ -42,1 +41,1 @@\n-  \/\/ update this summary with current data from various places\n+  \/\/ Update this summary with current data from various places.\n@@ -50,1 +49,1 @@\n-  \/\/ set the counters in this summary to the values of the others\n+  \/\/ Set the counters in this summary to the values of the others.\n@@ -52,1 +51,1 @@\n-  \/\/ subtract all counters from the other summary, and set them in the current\n+  \/\/ Subtract all counters from the other summary, and set them in the current.\n@@ -57,1 +56,1 @@\n-  double rs_thread_vtime(uint thread) const;\n+  jlong refine_thread_cpu_time(uint thread) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.hpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-  if (UsePerfData ) {\n+  if (UsePerfData) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}