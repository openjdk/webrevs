{"files":[{"patch":"@@ -717,2 +717,1 @@\n-JvmtiVTSuspender::register_vthread_suspend(oop vt) {\n-  int64_t id = java_lang_Thread::thread_id(vt);\n+JvmtiVTSuspender::register_vthread_suspend(int64_t id) {\n@@ -733,0 +732,6 @@\n+void\n+JvmtiVTSuspender::register_vthread_suspend(oop vt) {\n+  int64_t id = java_lang_Thread::thread_id(vt);\n+  register_vthread_suspend(id);\n+}\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -170,0 +170,1 @@\n+  static void register_vthread_suspend(int64_t id);\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -84,0 +84,15 @@\n+void SuspendResumeManager::self_suspend(bool register_vthread_SR, JavaThread *current) {\n+#if INCLUDE_JVMTI\n+  \/\/ All required data should be loaded before state is set to _thread_blocked.\n+  int64_t id = java_lang_Thread::thread_id(_target->vthread());\n+  ThreadBlockInVM tbivm(current);\n+  MutexLocker ml(_state_lock, Mutex::_no_safepoint_check_flag);\n+  if (register_vthread_SR) {\n+    assert(_target->is_vthread_mounted(), \"sanity check\");\n+      JvmtiVTSuspender::register_vthread_suspend(id);\n+  }\n+#endif\n+  AtomicAccess::store(&_suspended, true);\n+  do_owner_suspend();\n+}\n+\n@@ -90,4 +105,1 @@\n-    ThreadBlockInVM tbivm(self);\n-    MutexLocker ml(_state_lock, Mutex::_no_safepoint_check_flag);\n-    set_suspended(true, register_vthread_SR);\n-    do_owner_suspend();\n+    self_suspend(register_vthread_SR, self);\n@@ -95,4 +107,0 @@\n-  } else {\n-    SuspendThreadHandshakeClosure st(register_vthread_SR);\n-    Handshake::execute(&st, _target);\n-    return st.did_suspend();\n@@ -100,0 +108,3 @@\n+  SuspendThreadHandshakeClosure st(register_vthread_SR);\n+  Handshake::execute(&st, _target);\n+  return st.did_suspend();\n","filename":"src\/hotspot\/share\/runtime\/suspendResumeManager.cpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -61,0 +61,3 @@\n+  void self_suspend(bool register_vthread_SR, JavaThread *current);\n+\n+\n","filename":"src\/hotspot\/share\/runtime\/suspendResumeManager.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,5 @@\n-            while(!isSuspended(t1)) {\n+            selfSuspend();\n+        });\n+        Thread t3 = Thread.ofVirtual().factory().newThread(() -> {\n+            testJvmtiThreadState(Thread.currentThread(), RUNNABLE);\n+            while(!isSuspended(t1) && !isSuspended(t2)) {\n@@ -93,0 +97,1 @@\n+            resume(t2);\n@@ -99,0 +104,1 @@\n+        testJvmtiThreadState(t3, NEW);\n@@ -102,0 +108,1 @@\n+        t3.start();\n@@ -103,1 +110,1 @@\n-        while(!isSuspended(t2)) {\n+        while(!isSuspended(t3)) {\n@@ -107,1 +114,1 @@\n-        testJvmtiThreadState(t2, SUSPENDED);\n+        testJvmtiThreadState(t3, SUSPENDED);\n@@ -111,0 +118,1 @@\n+        t3.join();\n@@ -116,0 +124,1 @@\n+        testJvmtiThreadState(t3, TERMINATED);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SelfSuspendDisablerTest\/SelfSuspendDisablerTest.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"}]}