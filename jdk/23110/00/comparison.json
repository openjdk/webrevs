{"files":[{"patch":"@@ -33,1 +33,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -63,1 +62,1 @@\n-void odmWrapper::clean_data() { if (_data) { permit_forbidden_function::free(_data); _data = nullptr; } }\n+void odmWrapper::clean_data() { if (_data) { free(_data); _data = nullptr; } }\n","filename":"src\/hotspot\/os\/aix\/libodm_aix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -59,1 +58,1 @@\n-    char** l2 = (char**) permit_forbidden_function::realloc(_list, sizeof(char*) * cap2);\n+    char** l2 = (char**) ::realloc(_list, sizeof(char*) * cap2);\n@@ -77,1 +76,1 @@\n-    char* s2 = permit_forbidden_function::strdup(s);\n+    char* s2 = ::strdup(s);\n@@ -171,1 +170,1 @@\n-    permit_forbidden_function::free(lm);\n+    ::free(lm);\n@@ -194,1 +193,1 @@\n-    buffer = (uint8_t*) permit_forbidden_function::realloc(buffer, buflen);\n+    buffer = (uint8_t*) ::realloc(buffer, buflen);\n@@ -214,1 +213,1 @@\n-    loaded_module_t* lm = (loaded_module_t*) permit_forbidden_function::malloc(sizeof(loaded_module_t));\n+    loaded_module_t* lm = (loaded_module_t*) ::malloc(sizeof(loaded_module_t));\n@@ -230,1 +229,1 @@\n-      permit_forbidden_function::free(lm);\n+      free(lm);\n@@ -252,1 +251,1 @@\n-        permit_forbidden_function::free(lm);\n+        free(lm);\n@@ -300,1 +299,1 @@\n-  permit_forbidden_function::free(buffer);\n+  ::free(buffer);\n","filename":"src\/hotspot\/os\/aix\/loadlib_aix.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -368,1 +367,1 @@\n-    void* p = permit_forbidden_function::malloc(16*M);\n+    void* p = ::malloc(16*M);\n@@ -370,1 +369,1 @@\n-    permit_forbidden_function::free(p);\n+    ::free(p);\n@@ -1413,1 +1412,1 @@\n-  vmembk_t* p = (vmembk_t*) permit_forbidden_function::malloc(sizeof(vmembk_t));\n+  vmembk_t* p = (vmembk_t*) ::malloc(sizeof(vmembk_t));\n@@ -1442,1 +1441,1 @@\n-      permit_forbidden_function::free(p0);\n+      ::free(p0);\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -254,1 +253,1 @@\n-          permit_forbidden_function::free(demangled_name);\n+          ALLOW_C_FUNCTION(::free, ::free(demangled_name));\n@@ -1085,1 +1084,1 @@\n-        struct handletableentry* new_tab = (struct handletableentry*) permit_forbidden_function::realloc(p_handletable, new_max * sizeof(struct handletableentry));\n+        struct handletableentry* new_tab = (struct handletableentry*)::realloc(p_handletable, new_max * sizeof(struct handletableentry));\n","filename":"src\/hotspot\/os\/aix\/porting_aix.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -48,3 +46,3 @@\n-    \/\/ call c library's free\n-    permit_forbidden_function::free(result);\n-    return true;\n+      \/\/ call c library's free\n+      ::free(result);\n+      return true;\n","filename":"src\/hotspot\/os\/bsd\/decoder_machO.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -50,3 +49,3 @@\n-    \/\/ call c library's free\n-    permit_forbidden_function::free(result);\n-    return true;\n+      \/\/ call c library's free\n+      ALLOW_C_FUNCTION(::free, ::free(result);)\n+      return true;\n","filename":"src\/hotspot\/os\/linux\/decoder_linux.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -67,1 +66,1 @@\n-    permit_forbidden_function::free(line_mountpoint);\n+    ALLOW_C_FUNCTION(::free, ::free(line_mountpoint);)\n@@ -71,1 +70,1 @@\n-  permit_forbidden_function::free(line_filesystem);\n+  ALLOW_C_FUNCTION(::free, ::free(line_filesystem);)\n@@ -95,1 +94,1 @@\n-  permit_forbidden_function::free(line);\n+  ALLOW_C_FUNCTION(::free, ::free(line);)\n@@ -102,1 +101,1 @@\n-    permit_forbidden_function::free(mountpoint); \/\/ *not* os::free\n+    ALLOW_C_FUNCTION(::free, ::free(mountpoint);) \/\/ *not* os::free\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zMountPoint_linux.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -40,1 +39,1 @@\n-  FILE* stream = ::open_memstream(&buf, &size);\n+  ALLOW_C_FUNCTION(::open_memstream, FILE* stream = ::open_memstream(&buf, &size);)\n@@ -48,1 +47,1 @@\n-    fflush(stream);\n+    ALLOW_C_FUNCTION(::fflush, fflush(stream);)\n@@ -58,2 +57,2 @@\n-  ::fclose(stream);\n-  permit_forbidden_function::free(buf);\n+  ALLOW_C_FUNCTION(::fclose, ::fclose(stream);)\n+  ALLOW_C_FUNCTION(::free, ::free(buf);)\n","filename":"src\/hotspot\/os\/linux\/mallocInfoDcmd.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_POSIX_FORBIDDENFUNCTIONS_POSIX_HPP\n-#define OS_POSIX_FORBIDDENFUNCTIONS_POSIX_HPP\n-\n-#include \"utilities\/compilerWarnings.hpp\"\n-\n-#include <stddef.h> \/\/ for size_t\n-#include <unistd.h> \/\/ clang workaround for _exit - see FORBID macro.\n-\n-\/\/ If needed, add os::strndup and use that instead.\n-FORBID_C_FUNCTION(char* strndup(const char*, size_t), \"don't use\");\n-\n-\/\/ These are unimplementable for Windows, and they aren't useful for a\n-\/\/ POSIX implementation of NMT either.\n-\/\/ https:\/\/stackoverflow.com\/questions\/62962839\/stdaligned-alloc-missing-from-visual-studio-2019\n-FORBID_C_FUNCTION(int posix_memalign(void**, size_t, size_t), \"don't use\");\n-FORBID_C_FUNCTION(void* aligned_alloc(size_t, size_t), \"don't use\");\n-\n-\/\/ realpath with a null second argument mallocs a string for the result.\n-FORBID_C_FUNCTION(char* realpath(const char*, char*), \"use os::realpath\");\n-\n-\/\/ Returns a malloc'ed string.\n-FORBID_C_FUNCTION(char* get_current_dir_name(), \"use os::get_current_directory\");\n-\n-\/\/ Problematic API that should never be used.\n-FORBID_C_FUNCTION(char* getwd(char*), \"use os::get_current_directory\");\n-\n-\/\/ BSD utility that is subtly different from realloc.\n-FORBID_C_FUNCTION(void* reallocf(void*, size_t), \"use os::realloc\");\n-\n-#endif \/\/ OS_POSIX_FORBIDDENFUNCTIONS_POSIX_HPP\n","filename":"src\/hotspot\/os\/posix\/forbiddenFunctions_posix.hpp","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -934,1 +933,1 @@\n-  permit_forbidden_function::exit(num);\n+  ALLOW_C_FUNCTION(::exit, ::exit(num);)\n@@ -938,1 +937,1 @@\n-  permit_forbidden_function::_exit(num);\n+  ALLOW_C_FUNCTION(::_exit, ::_exit(num);)\n@@ -995,1 +994,1 @@\n-  char* p = permit_forbidden_function::realpath(filename, nullptr);\n+  ALLOW_C_FUNCTION(::realpath, char* p = ::realpath(filename, nullptr);)\n@@ -1003,1 +1002,1 @@\n-    permit_forbidden_function::free(p); \/\/ *not* os::free\n+    ALLOW_C_FUNCTION(::free, ::free(p);) \/\/ *not* os::free\n@@ -1012,1 +1011,1 @@\n-      p = permit_forbidden_function::realpath(filename, outbuf);\n+      ALLOW_C_FUNCTION(::realpath, p = ::realpath(filename, outbuf);)\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_POSIX_PERMITFORBIDDENFUNCTIONS_POSIX_HPP\n-#define OS_POSIX_PERMITFORBIDDENFUNCTIONS_POSIX_HPP\n-\n-#include \"utilities\/compilerWarnings.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-\/\/ Provide wrappers for some functions otherwise forbidden from use in HotSpot.\n-\/\/ See forbiddenFunctions.hpp for details.\n-\n-namespace permit_forbidden_function {\n-BEGIN_ALLOW_FORBIDDEN_FUNCTIONS\n-\n-\/\/ Used by the POSIX implementation of os::realpath.\n-inline char* realpath(const char* path, char* resolved_path) {\n-  return ::realpath(path, resolved_path);\n-}\n-\n-END_ALLOW_FORBIDDEN_FUNCTIONS\n-} \/\/ namespace permit_forbidden_function\n-\n-#endif \/\/ OS_POSIX_PERMITFORBIDDENFUNCTIONS_POSIX_HPP\n","filename":"src\/hotspot\/os\/posix\/permitForbiddenFunctions_posix.hpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_WINDOWS_FORBIDDENFUNCTIONS_WINDOWS_HPP\n-#define OS_WINDOWS_FORBIDDENFUNCTIONS_WINDOWS_HPP\n-\n-#include \"utilities\/compilerWarnings.hpp\"\n-\n-#include <stddef.h> \/\/ for size_t\n-\n-\/\/ _fullpath with a null first argument mallocs a string for the result.\n-FORBID_IMPORTED_C_FUNCTION(char* _fullpath(char*, const char*, size_t), \"use os::realpath\");\n-\n-\/\/ _snprintf does NOT null terminate if the output would exceed the buffer size.\n-FORBID_C_FUNCTION(int _snprintf(char*, size_t, const char*, ...), \"use os::snprintf\");\n-\n-#endif \/\/ OS_WINDOWS_FORBIDDENFUNCTIONS_WINDOWS_HPP\n","filename":"src\/hotspot\/os\/windows\/forbiddenFunctions_windows.hpp","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -4398,1 +4397,1 @@\n-    permit_forbidden_function::exit(exit_code);\n+    ALLOW_C_FUNCTION(::exit, ::exit(exit_code);)\n@@ -4400,1 +4399,1 @@\n-    permit_forbidden_function::_exit(exit_code);\n+    ALLOW_C_FUNCTION(::_exit, ::_exit(exit_code);)\n@@ -5163,1 +5162,1 @@\n-  char* p = permit_forbidden_function::_fullpath(nullptr, filename, 0);\n+  ALLOW_C_FUNCTION(::_fullpath, char* p = ::_fullpath(nullptr, filename, 0);)\n@@ -5171,1 +5170,1 @@\n-    permit_forbidden_function::free(p); \/\/ *not* os::free\n+    ALLOW_C_FUNCTION(::free, ::free(p);) \/\/ *not* os::free\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef OS_WINDOWS_PERMITFORBIDDENFUNCTIONS_WINDOWS_HPP\n-#define OS_WINDOWS_PERMITFORBIDDENFUNCTIONS_WINDOWS_HPP\n-\n-#include \"utilities\/compilerWarnings.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-\/\/ Provide wrappers for some functions otherwise forbidden from use in HotSpot.\n-\/\/ See forbiddenFunctions.hpp for details.\n-\n-namespace permit_forbidden_function {\n-BEGIN_ALLOW_FORBIDDEN_FUNCTIONS\n-\n-\/\/ Used by the Windows implementation of os::realpath.\n-inline char* _fullpath(char* absPath, const char* relPath, size_t maxLength) {\n-  return ::_fullpath(absPath, relPath, maxLength);\n-}\n-\n-END_ALLOW_FORBIDDEN_FUNCTIONS\n-} \/\/ namespace permit_forbidden_function\n-\n-#endif \/\/ OS_WINDOWS_PERMITFORBIDDENFUNCTIONS_WINDOWS_HPP\n","filename":"src\/hotspot\/os\/windows\/permitForbiddenFunctions_windows.hpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -107,1 +106,1 @@\n-    T* q = (T*) permit_forbidden_function::malloc(bytes);\n+    T* q = (T*) ::malloc(bytes);\n@@ -123,1 +122,1 @@\n-      permit_forbidden_function::free(_p);\n+      ::free(_p);\n","filename":"src\/hotspot\/os\/windows\/symbolengine.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -617,1 +616,1 @@\n-    permit_forbidden_function::free((void*)_init_error_msg);\n+    ALLOW_C_FUNCTION(::free, ::free((void*) _init_error_msg);)\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -153,1 +152,1 @@\n-    char* newbuf = (char*)permit_forbidden_function::malloc(newbuf_len * sizeof(char));\n+    ALLOW_C_FUNCTION(::malloc, char* newbuf = (char*)::malloc(newbuf_len * sizeof(char));)\n@@ -163,1 +162,1 @@\n-      permit_forbidden_function::free(newbuf);\n+      ALLOW_C_FUNCTION(::free, ::free(newbuf);)\n","filename":"src\/hotspot\/share\/logging\/logTagSet.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -46,1 +44,3 @@\n-  _table = (MallocSiteHashtableEntry**)permit_forbidden_function::calloc(table_size, sizeof(MallocSiteHashtableEntry*));\n+\n+  ALLOW_C_FUNCTION(::calloc,\n+                   _table = (MallocSiteHashtableEntry**)::calloc(table_size, sizeof(MallocSiteHashtableEntry*));)\n","filename":"src\/hotspot\/share\/nmt\/mallocSiteTable.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -101,2 +100,2 @@\n-    permit_forbidden_function::free(_ranges);\n-    permit_forbidden_function::free(_mem_tags);\n+    ALLOW_C_FUNCTION(free, ::free(_ranges);)\n+    ALLOW_C_FUNCTION(free, ::free(_mem_tags);)\n@@ -117,2 +116,2 @@\n-      _ranges = (Range*)permit_forbidden_function::realloc(_ranges, new_capacity * sizeof(Range));\n-      _mem_tags = (MemTag*)permit_forbidden_function::realloc(_mem_tags, new_capacity * sizeof(MemTag));\n+      ALLOW_C_FUNCTION(realloc, _ranges = (Range*)::realloc(_ranges, new_capacity * sizeof(Range));)\n+      ALLOW_C_FUNCTION(realloc, _mem_tags = (MemTag*)::realloc(_mem_tags, new_capacity * sizeof(MemTag));)\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -37,3 +36,3 @@\n-static void* raw_malloc(size_t s)               { return permit_forbidden_function::malloc(s); }\n-static void* raw_realloc(void* old, size_t s)   { return permit_forbidden_function::realloc(old, s); }\n-static void  raw_free(void* p)                  { permit_forbidden_function::free(p); }\n+static void* raw_malloc(size_t s)               { ALLOW_C_FUNCTION(::malloc, return ::malloc(s);) }\n+static void* raw_realloc(void* old, size_t s)   { ALLOW_C_FUNCTION(::realloc, return ::realloc(old, s);) }\n+static void  raw_free(void* p)                  { ALLOW_C_FUNCTION(::free, ::free(p);) }\n","filename":"src\/hotspot\/share\/nmt\/nmtPreInit.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -82,1 +81,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -123,1 +121,1 @@\n-  int result = permit_forbidden_function::vsnprintf(buf, len, fmt, args);\n+  ALLOW_C_FUNCTION(::vsnprintf, int result = ::vsnprintf(buf, len, fmt, args);)\n@@ -660,1 +658,1 @@\n-  void* const outer_ptr = permit_forbidden_function::malloc(outer_size);\n+  ALLOW_C_FUNCTION(::malloc, void* const outer_ptr = ::malloc(outer_size);)\n@@ -727,1 +725,1 @@\n-    void* const new_outer_ptr = permit_forbidden_function::realloc(header, new_outer_size);\n+    ALLOW_C_FUNCTION(::realloc, void* const new_outer_ptr = ::realloc(header, new_outer_size);)\n@@ -755,1 +753,1 @@\n-    rc = permit_forbidden_function::realloc(memblock, size);\n+    ALLOW_C_FUNCTION(::realloc, rc = ::realloc(memblock, size);)\n@@ -783,1 +781,1 @@\n-  permit_forbidden_function::free(old_outer_ptr);\n+  ALLOW_C_FUNCTION(::free, ::free(old_outer_ptr);)\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,7 +91,0 @@\n-\n-\/\/ FORBID_C_FUNCTION(Signature, Alternative)\n-\/\/ - Signature: the function that should not normally be used.\n-\/\/ - Alternative: a string literal that may be used in a warning about a use,\n-\/\/   often suggesting an alternative.\n-\/\/ Declares the C-linkage function designated by Signature to be deprecated,\n-\/\/ using the `deprecated` attribute with Alternative as an argument.\n@@ -99,5 +92,4 @@\n-\/\/ The variants with IMPORTED in the name are to deal with Windows\n-\/\/ requirements, using FORBIDDEN_FUNCTION_IMPORT_SPEC.  See the Visual\n-\/\/ Studio definition of that macro for more details.  The default has\n-\/\/ an empty expansion.  The potentially added spec must precede the\n-\/\/ base signature but follow all attributes.\n+\/\/ FORBID_C_FUNCTION(signature, alternative)\n+\/\/ - signature: the function that should not normally be used.\n+\/\/ - alternative: a string that may be used in a warning about a use, typically\n+\/\/   suggesting an alternative.\n@@ -105,5 +97,4 @@\n-\/\/ FORBID_NORETURN_C_FUNCTION deals with a clang issue.  See the clang\n-\/\/ definition of FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE for more\n-\/\/ details.  The default expands to `[[noreturn]]`.\n-#define FORBID_C_FUNCTION(Signature, Alternative) \\\n-  extern \"C\" { [[deprecated(Alternative)]] Signature; }\n+\/\/ ALLOW_C_FUNCTION(name, ... using statement ...)\n+\/\/ - name: the name of a forbidden function whose use is permitted in statement.\n+\/\/ - statement: a use of the otherwise forbidden function.  Using a variadic\n+\/\/   tail allows the statement to contain non-nested commas.\n@@ -111,2 +102,2 @@\n-#ifndef FORBIDDEN_FUNCTION_IMPORT_SPEC\n-#define FORBIDDEN_FUNCTION_IMPORT_SPEC\n+#ifndef FORBID_C_FUNCTION\n+#define FORBID_C_FUNCTION(signature, alternative)\n@@ -115,2 +106,2 @@\n-#ifndef FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE\n-#define FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE [[noreturn]]\n+#ifndef ALLOW_C_FUNCTION\n+#define ALLOW_C_FUNCTION(name, ...) __VA_ARGS__\n@@ -119,25 +110,0 @@\n-#define FORBID_IMPORTED_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_C_FUNCTION(FORBIDDEN_FUNCTION_IMPORT_SPEC Signature, Alternative)\n-\n-#define FORBID_NORETURN_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_C_FUNCTION(FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE Signature, Alternative)\n-\n-#define FORBID_IMPORTED_NORETURN_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_NORETURN_C_FUNCTION(FORBIDDEN_FUNCTION_IMPORT_SPEC Signature, Alternative)\n-\n-\/\/ A BEGIN\/END_ALLOW_FORBIDDEN_FUNCTIONS pair establishes a scope in which the\n-\/\/ deprecation warnings used to forbid the use of certain functions are\n-\/\/ suppressed.  These macros are not intended for warning suppression at\n-\/\/ individual call sites; see permitForbiddenFunctions.hpp for the approach\n-\/\/ taken for that where needed.  Rather, these are used to suppress warnings\n-\/\/ from 3rd-party code included by HotSpot, such as the gtest framework and\n-\/\/ C++ Standard Library headers, which may refer to functions that are\n-\/\/ disallowed in other parts of HotSpot.  They are also used in the\n-\/\/ implementation of the \"permit\" mechanism.\n-#define BEGIN_ALLOW_FORBIDDEN_FUNCTIONS         \\\n-  PRAGMA_DIAG_PUSH                              \\\n-  PRAGMA_DEPRECATED_IGNORED\n-\n-#define END_ALLOW_FORBIDDEN_FUNCTIONS           \\\n-  PRAGMA_DIAG_POP\n-\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":13,"deletions":47,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,2 +73,4 @@\n-#define PRAGMA_DEPRECATED_IGNORED \\\n-  PRAGMA_DISABLE_GCC_WARNING(\"-Wdeprecated-declarations\")\n+#if (__GNUC__ >= 10)\n+\/\/ TODO: Re-enable warning attribute for Clang once\n+\/\/ https:\/\/github.com\/llvm\/llvm-project\/issues\/56519 is fixed and released.\n+\/\/ || (defined(__clang_major__) && (__clang_major__ >= 14))\n@@ -76,1 +78,1 @@\n-\/\/ This macro is used by the NORETURN variants of FORBID_C_FUNCTION.\n+\/\/ Use \"warning\" attribute to detect uses of \"forbidden\" functions.\n@@ -78,8 +80,2 @@\n-\/\/ The [[noreturn]] attribute requires that the first declaration of a\n-\/\/ function has it if any have it.  clang does not treat an old-style noreturn\n-\/\/ attribute on the first declaration as meeting that requirement.  But some\n-\/\/ libraries use old-style noreturn attributes.  So if we use [[noreturn]] in\n-\/\/ the forbidding declaration, but the library header for the function has\n-\/\/ already been included, we get a compiler error.  Similarly, if we use an\n-\/\/ old-style noreturn attribute and the library header is included after the\n-\/\/ forbidding declaration.\n+\/\/ Note: The warning attribute is available since GCC 9, but disabling pragmas\n+\/\/ does not work reliably in ALLOW_C_FUNCTION. GCC 10+ and up work fine.\n@@ -87,26 +83,17 @@\n-\/\/ For now, we're only going to worry about the standard library, and not\n-\/\/ noreturn functions in some other library that we might want to forbid in\n-\/\/ the future.  If there's more than one library to be accounted for, then\n-\/\/ things may get more complicated.\n-\/\/\n-\/\/ There are several ways we could deal with this.\n-\/\/\n-\/\/ Probably the most robust is to use the same style of noreturn attribute as\n-\/\/ is used by the library providing the function.  That way it doesn't matter\n-\/\/ in which order the inclusion of the library header and the forbidding are\n-\/\/ performed.  We could use configure to determine which to use and provide a\n-\/\/ macro to select on here.\n-\/\/\n-\/\/ Another approach is to always use the old-style attribute in the forbidding\n-\/\/ declaration, but ensure the relevant library header has been included\n-\/\/ before the forbidding declaration.  Since there are currently only a couple\n-\/\/ of affected functions, this is easier to implement.  So this is the\n-\/\/ approach being taken for now.\n-\/\/\n-\/\/ And remember, all of this is because clang treats an old-style noreturn\n-\/\/ attribute as not counting toward the [[noreturn]] requirement that the\n-\/\/ first declaration must have a noreturn attribute.\n-\n-#ifdef __clang__\n-#define FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE __attribute__((__noreturn__))\n-#endif \/\/ __clang__\n+\/\/ Note: _FORTIFY_SOURCE transforms calls to certain functions into calls to\n+\/\/ associated \"checking\" functions, and that transformation seems to occur\n+\/\/ *before* the attribute check.  We use fortification in fastdebug builds,\n+\/\/ so uses of functions that are both forbidden and fortified won't cause\n+\/\/ forbidden warnings in such builds.\n+#define FORBID_C_FUNCTION(signature, alternative) \\\n+  extern \"C\" __attribute__((__warning__(alternative))) signature;\n+\n+\/\/ Disable warning attribute over the scope of the affected statement.\n+\/\/ The name serves only to document the intended function.\n+#define ALLOW_C_FUNCTION(name, ...)                     \\\n+  PRAGMA_DIAG_PUSH                                      \\\n+  PRAGMA_DISABLE_GCC_WARNING(\"-Wattribute-warning\")     \\\n+  __VA_ARGS__                                           \\\n+  PRAGMA_DIAG_POP\n+\n+#endif \/\/ gcc10+\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_gcc.hpp","additions":25,"deletions":38,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,16 @@\n-#define PRAGMA_DEPRECATED_IGNORED PRAGMA_DISABLE_MSVC_WARNING(4996)\n-\n-\/\/ This macro is used by the IMPORTED variants of FORBID_C_FUNCTION.\n+\/\/ The Visual Studio implementation of FORBID_C_FUNCTION explicitly does\n+\/\/ nothing, because there doesn't seem to be a way to implement it for Visual\n+\/\/ Studio.  What seems the most likely approach is to use deprecation warnings,\n+\/\/ but that runs into problems.\n+\/\/\n+\/\/ (1) Declaring the function deprecated (using either __declspec(deprecated)\n+\/\/ or the C++14 [[deprecated]] attribute) fails with warnings like this:\n+\/\/   warning C4273: 'exit': inconsistent dll linkage\n+\/\/ It seems attributes are not simply additive with this compiler.\n+\/\/\n+\/\/ (2) Additionally adding __declspec(dllimport) to deal with (1) fails with\n+\/\/ warnings like this:\n+\/\/   error C2375: 'vsnprintf': redefinition; different linkage\n+\/\/ It seems some functions in the set of interest have different linkage than\n+\/\/ others (\"exit\" is marked imported while \"vsnprintf\" is not, for example).\n+\/\/ That makes it difficult to provide a generic macro.\n@@ -37,6 +50,11 @@\n-\/\/ Some, but not all, functions we want to forbid using must include a\n-\/\/ `__declspec(dllimport)` in the declaration.  Failure to do so where needed\n-\/\/ leads to \"redefinition; different linkage\" errors for the forbidding\n-\/\/ declaration. But including a dllimport specifier if not present in the\n-\/\/ compiler's header leads to the same errors.  It seems one must just know\n-\/\/ which are imported and which are not, and use the specifier accordingly.\n+\/\/ (3) Using __pragma(deprecated(name)) fails with\n+\/\/   warning C4995: 'frobnicate': name was marked as #pragma deprecated\n+\/\/ for a *declaration* (not a use) of a 'frobnicate' function.\n+\/\/\n+\/\/ ALLOW_C_FUNCTIONS disables deprecation warnings over the statement scope.\n+\/\/ Some of the functions we're interested in allowing are conditionally\n+\/\/ deprecated on Windows, under the control of various preprocessor defines\n+\/\/ such as _CRT_SECURE_NO_WARNINGS.  Annotating vetted uses allows those\n+\/\/ warnings to catch unchecked uses.\n+\n+#define FORBID_C_FUNCTION(signature, alternative)\n@@ -44,1 +62,5 @@\n-#define FORBIDDEN_FUNCTION_IMPORT_SPEC __declspec(dllimport)\n+#define ALLOW_C_FUNCTION(name, ...)             \\\n+  PRAGMA_DIAG_PUSH                              \\\n+  PRAGMA_DISABLE_MSVC_WARNING(4996)             \\\n+  __VA_ARGS__                                   \\\n+  PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_visCPP.hpp","additions":33,"deletions":11,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_UTILITIES_FORBIDDENFUNCTIONS_HPP\n-#define SHARE_UTILITIES_FORBIDDENFUNCTIONS_HPP\n-\n-#include \"utilities\/compilerWarnings.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n-#include <stdarg.h> \/\/ for va_list\n-#include <stddef.h> \/\/ for size_t\n-#include <stdlib.h> \/\/ clang workaround for exit, _exit, _Exit - see FORBID macro.\n-\n-#ifdef _WINDOWS\n-#include \"forbiddenFunctions_windows.hpp\"\n-#else\n-#include \"forbiddenFunctions_posix.hpp\"\n-#endif\n-\n-\/\/ Forbid the use of various C library functions.  Some of these have os::\n-\/\/ replacements that should be used instead.  Others are considered obsolete\n-\/\/ or have security concerns, either with preferred alternatives, or to be\n-\/\/ avoided entirely.\n-\n-FORBID_IMPORTED_NORETURN_C_FUNCTION(void exit(int), \"use os::exit\")\n-FORBID_IMPORTED_NORETURN_C_FUNCTION(void _Exit(int), \"use os::exit\")\n-\n-\/\/ Windows puts _exit in <stdlib.h>, POSIX in <unistd.h>.\n-FORBID_IMPORTED_NORETURN_C_FUNCTION(void _exit(int), \"use os::exit\")\n-\n-FORBID_IMPORTED_C_FUNCTION(char* strerror(int), \"use os::strerror\");\n-FORBID_IMPORTED_C_FUNCTION(char* strtok(char*, const char*), \"use strtok_r\");\n-\n-FORBID_C_FUNCTION(int sprintf(char*, const char*, ...), \"use os::snprintf\");\n-FORBID_C_FUNCTION(int vsprintf(char*, const char*, va_list), \"use os::vsnprintf\");\n-FORBID_C_FUNCTION(int vsnprintf(char*, size_t, const char*, va_list), \"use os::vsnprintf\");\n-\n-\/\/ All of the following functions return raw C-heap pointers (sometimes as an\n-\/\/ option, e.g. realpath or getwd) or, in case of free(), take raw C-heap\n-\/\/ pointers.  We generally want allocation to be done through NMT.\n-FORBID_IMPORTED_C_FUNCTION(void* malloc(size_t size), \"use os::malloc\");\n-FORBID_IMPORTED_C_FUNCTION(void free(void *ptr), \"use os::free\");\n-FORBID_IMPORTED_C_FUNCTION(void* calloc(size_t nmemb, size_t size), \"use os::malloc and zero out manually\");\n-FORBID_IMPORTED_C_FUNCTION(void* realloc(void *ptr, size_t size), \"use os::realloc\");\n-FORBID_IMPORTED_C_FUNCTION(char* strdup(const char *s), \"use os::strdup\");\n-FORBID_IMPORTED_C_FUNCTION(wchar_t* wcsdup(const wchar_t *s), \"don't use\");\n-\n-#endif \/\/ SHARE_UTILITIES_FORBIDDENFUNCTIONS_HPP\n","filename":"src\/hotspot\/share\/utilities\/forbiddenFunctions.hpp","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"utilities\/forbiddenFunctions.hpp\"\n@@ -186,0 +185,29 @@\n+\/\/ Forbid the use of various C library functions.\n+\/\/ Some of these have os:: replacements that should normally be used instead.\n+\/\/ Others are considered security concerns, with preferred alternatives.\n+\n+FORBID_C_FUNCTION(void exit(int), \"use os::exit\");\n+FORBID_C_FUNCTION(void _exit(int), \"use os::exit\");\n+FORBID_C_FUNCTION(char* strerror(int), \"use os::strerror\");\n+FORBID_C_FUNCTION(char* strtok(char*, const char*), \"use strtok_r\");\n+FORBID_C_FUNCTION(int sprintf(char*, const char*, ...), \"use os::snprintf\");\n+FORBID_C_FUNCTION(int vsprintf(char*, const char*, va_list), \"use os::vsnprintf\");\n+FORBID_C_FUNCTION(int vsnprintf(char*, size_t, const char*, va_list), \"use os::vsnprintf\");\n+\n+\/\/ All of the following functions return raw C-heap pointers (sometimes as an option, e.g. realpath or getwd)\n+\/\/ or, in case of free(), take raw C-heap pointers. Don't use them unless you are really sure you must.\n+FORBID_C_FUNCTION(void* malloc(size_t size), \"use os::malloc\");\n+FORBID_C_FUNCTION(void* calloc(size_t nmemb, size_t size), \"use os::malloc and zero out manually\");\n+FORBID_C_FUNCTION(void free(void *ptr), \"use os::free\");\n+FORBID_C_FUNCTION(void* realloc(void *ptr, size_t size), \"use os::realloc\");\n+FORBID_C_FUNCTION(char* strdup(const char *s), \"use os::strdup\");\n+FORBID_C_FUNCTION(char* strndup(const char *s, size_t n), \"don't use\");\n+FORBID_C_FUNCTION(int posix_memalign(void **memptr, size_t alignment, size_t size), \"don't use\");\n+FORBID_C_FUNCTION(void* aligned_alloc(size_t alignment, size_t size), \"don't use\");\n+FORBID_C_FUNCTION(char* realpath(const char* path, char* resolved_path), \"use os::realpath\");\n+FORBID_C_FUNCTION(char* get_current_dir_name(void), \"use os::get_current_directory()\");\n+FORBID_C_FUNCTION(char* getwd(char *buf), \"use os::get_current_directory()\");\n+FORBID_C_FUNCTION(wchar_t* wcsdup(const wchar_t *s), \"don't use\");\n+FORBID_C_FUNCTION(void* reallocf(void *ptr, size_t size), \"don't use\");\n+\n+\/\/----------------------------------------------------------------------------------------------------\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_UTILITIES_PERMITFORBIDDENFUNCTIONS_HPP\n-#define SHARE_UTILITIES_PERMITFORBIDDENFUNCTIONS_HPP\n-\n-#include \"utilities\/compilerWarnings.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-#ifdef _WINDOWS\n-#include \"permitForbiddenFunctions_windows.hpp\"\n-#else\n-#include \"permitForbiddenFunctions_posix.hpp\"\n-#endif\n-\n-\/\/ Provide wrappers for some functions otherwise forbidden from use in HotSpot.\n-\/\/\n-\/\/ There may be special circumstances where an otherwise forbidden function\n-\/\/ really does need to be used.  One example is in the implementation of a\n-\/\/ corresponding os:: function.\n-\/\/\n-\/\/ Wrapper functions are provided for such forbidden functions.  These\n-\/\/ wrappers are defined in a context where the forbidding warnings are\n-\/\/ suppressed.  They are defined in a special namespace, to highlight uses as\n-\/\/ unusual and requiring increased scrutiny.\n-\/\/\n-\/\/ Note that there are several seemingly plausible shorter alternatives to\n-\/\/ these written-out wrapper functions.  All that have been tried don't work\n-\/\/ for one reason or another.\n-\n-namespace permit_forbidden_function {\n-BEGIN_ALLOW_FORBIDDEN_FUNCTIONS\n-\n-[[noreturn]] inline void exit(int status) { ::exit(status); }\n-[[noreturn]] inline void _exit(int status) { ::_exit(status); }\n-\n-ATTRIBUTE_PRINTF(3, 0)\n-inline int vsnprintf(char* str, size_t size, const char* format, va_list ap) {\n-  return ::vsnprintf(str, size, format, ap);\n-}\n-\n-inline void* malloc(size_t size) { return ::malloc(size); }\n-inline void free(void* ptr) { return ::free(ptr); }\n-inline void* calloc(size_t nmemb, size_t size) { return ::calloc(nmemb, size); }\n-inline void* realloc(void* ptr, size_t size) { return ::realloc(ptr, size); }\n-\n-inline char* strdup(const char* s) { return ::strdup(s); }\n-\n-END_ALLOW_FORBIDDEN_FUNCTIONS\n-} \/\/ namespace permit_forbidden_function\n-\n-#endif \/\/ SHARE_UTILITIES_PERMITFORBIDDENFUNCTIONS_HPP\n","filename":"src\/hotspot\/share\/utilities\/permitForbiddenFunctions.hpp","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -35,1 +34,0 @@\n-BEGIN_ALLOW_FORBIDDEN_FUNCTIONS\n@@ -37,1 +35,0 @@\n-END_ALLOW_FORBIDDEN_FUNCTIONS\n","filename":"test\/hotspot\/gtest\/code\/test_codestrings.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-BEGIN_ALLOW_FORBIDDEN_FUNCTIONS\n@@ -32,1 +31,0 @@\n-END_ALLOW_FORBIDDEN_FUNCTIONS\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahNumberSeq.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"utilities\/ostream.hpp\"\n@@ -29,2 +28,0 @@\n-#include \"utilities\/vmassert_uninstall.hpp\"\n-BEGIN_ALLOW_FORBIDDEN_FUNCTIONS\n@@ -32,1 +29,2 @@\n-END_ALLOW_FORBIDDEN_FUNCTIONS\n+#include \"utilities\/ostream.hpp\"\n+#include \"utilities\/vmassert_uninstall.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahSimpleBitMap.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"utilities\/permitForbiddenFunctions.hpp\"\n@@ -197,1 +196,1 @@\n-  char** new_argv = (char**)permit_forbidden_function::malloc(sizeof(char*) * argc);\n+  ALLOW_C_FUNCTION(::malloc, char** new_argv = (char**) malloc(sizeof(char*) * argc);)\n@@ -293,1 +292,1 @@\n-  permit_forbidden_function::free(argv);\n+  ALLOW_C_FUNCTION(::free, ::free(argv);)\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n@@ -54,1 +52,0 @@\n-BEGIN_ALLOW_FORBIDDEN_FUNCTIONS\n@@ -57,1 +54,0 @@\n-END_ALLOW_FORBIDDEN_FUNCTIONS\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}