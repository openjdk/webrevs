{"files":[{"patch":"@@ -3437,1 +3437,0 @@\n-            \/\/ If no significant digits (all zeros), the value is 0\n","filename":"src\/java.base\/share\/classes\/java\/net\/URI.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1790,2 +1790,2 @@\n-    \/\/ 8353013 - java.net.URI.create(String) may have low performance to scan the host\/domain name from\n-    \/\/           URI string when the hostname starts with number\n+    \/\/ 8353013 - Increase test coverage for cases where the authority component of a hierarchical\n+    \/\/ URI has a host component that starts with a number.\n@@ -1810,0 +1810,11 @@\n+\n+        testCreate(\"https:\/\/98765432101.example.com\").s(\"https\").h(\"98765432101.example.com\").p(\"\").z();\n+        testCreate(\"https:\/\/98765432101.www.example.com\/\").s(\"https\").h(\"98765432101.www.example.com\").p(\"\/\").z();\n+        testCreate(\"https:\/\/98765432101.www.example.com\").s(\"https\").h(\"98765432101.www.example.com\").p(\"\").z();\n+\n+        testCreate(\"https:\/\/9223372036854775808.example.com\").s(\"https\").h(\"9223372036854775808.example.com\").p(\"\").z();\n+        testCreate(\"https:\/\/9223372036854775808.www.example.com\").s(\"https\").h(\"9223372036854775808.www.example.com\").p(\"\").z();\n+        testCreate(\"https:\/\/9223372036854775808.xyz.abc.com\").s(\"https\").h(\"9223372036854775808.xyz.abc.com\").p(\"\").z();\n+        testCreate(\"https:\/\/9223372036854775808.xyz.abc.pqr.com\").s(\"https\").h(\"9223372036854775808.xyz.abc.pqr.com\").p(\"\").z();\n+\n+        testCreate(\"https:\/\/256.example.com\").s(\"https\").h(\"256.example.com\").p(\"\").z();\n","filename":"test\/jdk\/java\/net\/URI\/Test.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.net;\n+\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests Java.net.URI.create performance on various URI types.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class URIAuthorityParsingBenchmark {\n+\n+    private final String NUMERIC_HOST_URI = \"https:\/\/98765432101.abc.xyz.com\";\n+    private final String STANDARD_HOST_URI = \"https:\/\/xxxxx.abc.xyz.com\";\n+\n+    @Benchmark\n+    public void createUriWithNumericHostPrefix(Blackhole blackhole) {\n+        blackhole.consume(URI.create(NUMERIC_HOST_URI));\n+    }\n+\n+    @Benchmark\n+    public void createUriWithStandardHost(Blackhole blackhole) {\n+        blackhole.consume(URI.create(STANDARD_HOST_URI));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/URIAuthorityParsingBenchmark.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}