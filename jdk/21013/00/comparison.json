{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,12 @@\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.awt.Event.KEY_ACTION;\n+import static java.awt.Event.KEY_ACTION_RELEASE;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n@@ -42,2 +54,2 @@\n-public class FunctionKeyTest {\n-    private static FunctionKeyTester frame;\n+public final class FunctionKeyTest {\n+    private static Frame frame;\n@@ -46,2 +58,2 @@\n-    static volatile boolean keyPressReceived;\n-    static volatile boolean keyReleaseReceived;\n+    private static final CyclicBarrier keyPress = new CyclicBarrier(2);\n+    private static final CyclicBarrier keyRelease = new CyclicBarrier(2);\n@@ -49,1 +61,1 @@\n-    static final StringBuilder failures = new StringBuilder();\n+    private static final CountDownLatch frameActivated = new CountDownLatch(1);\n@@ -51,3 +63,2 @@\n-    private static void testKey(int keyCode, String keyText) {\n-        keyPressReceived = false;\n-        keyReleaseReceived = false;\n+    private static final List<Error> failures = new ArrayList<>(4);\n+    private static final AtomicReference<Exception> edtException = new AtomicReference<>();\n@@ -55,0 +66,1 @@\n+    private static void testKey(int keyCode, String keyText) throws Exception {\n@@ -56,3 +68,5 @@\n-\n-        if (!keyPressReceived) {\n-            failures.append(keyText).append(\" key press is not received\\n\");\n+        try {\n+            keyPress.await(2, SECONDS);\n+        } catch (TimeoutException e) {\n+            keyPress.reset();\n+            failures.add(new Error(keyText + \" key press is not received\", e));\n@@ -62,3 +76,5 @@\n-\n-        if (!keyReleaseReceived) {\n-            failures.append(keyText).append(\" key release is not received\\n\");\n+        try {\n+            keyRelease.await(2, SECONDS);\n+        } catch (TimeoutException e) {\n+            keyRelease.reset();\n+            failures.add(new Error(keyText + \" key release is not received\", e));\n@@ -70,1 +86,0 @@\n-        robot.setAutoWaitForIdle(true);\n@@ -78,0 +93,7 @@\n+                frame.addWindowListener(new WindowAdapter() {\n+                    @Override\n+                    public void windowActivated(WindowEvent e) {\n+                        System.out.println(\"frame.windowActivated\");\n+                        frameActivated.countDown();\n+                    }\n+                });\n@@ -81,2 +103,4 @@\n-            robot.waitForIdle();\n-            robot.delay(1000);\n+            if (!frameActivated.await(2, SECONDS)) {\n+                throw new Error(\"Frame wasn't activated\");\n+            }\n+            robot.delay(100);\n@@ -94,4 +118,10 @@\n-        if (failures.isEmpty()) {\n-            System.out.println(\"Passed\");\n-        } else {\n-            throw new RuntimeException(failures.toString());\n+        if (!failures.isEmpty()) {\n+            System.err.println(\"Failures detected:\");\n+            failures.forEach(System.err::println);\n+            if (edtException.get() != null) {\n+                System.err.println(\"\\nException on EDT:\");\n+                edtException.get().printStackTrace();\n+            }\n+            System.err.println();\n+            throw new RuntimeException(\"Test failed: \" + failures.get(0).getMessage(),\n+                                       failures.get(0));\n@@ -99,2 +129,0 @@\n-    }\n-}\n@@ -102,15 +130,4 @@\n-class FunctionKeyTester extends Frame {\n-    Label l = new Label (\"NULL\");\n-    Button b = new Button();\n-    TextArea log = new TextArea();\n-\n-    FunctionKeyTester() {\n-        super(\"Function Key Test\");\n-        this.setLayout(new BorderLayout());\n-        this.add(BorderLayout.NORTH, l);\n-        this.add(BorderLayout.SOUTH, b);\n-        this.add(BorderLayout.CENTER, log);\n-        log.setFocusable(false);\n-        log.setEditable(false);\n-        l.setBackground(Color.red);\n-        setSize(200, 200);\n+        if (edtException.get() != null) {\n+            throw new RuntimeException(\"Test failed because of exception on EDT\",\n+                                       edtException.get());\n+        }\n@@ -119,8 +136,15 @@\n-    public boolean handleEvent(Event e) {\n-        String message = \"e.id=\" + e.id + \"\\n\";\n-        System.out.print(message);\n-        log.append(message);\n-\n-        switch (e.id) {\n-            case 403 -> FunctionKeyTest.keyPressReceived = true;\n-            case 404 -> FunctionKeyTest.keyReleaseReceived = true;\n+    private static final class FunctionKeyTester extends Frame {\n+        Label l = new Label (\"NULL\");\n+        Button b = new Button(\"button\");\n+        TextArea log = new TextArea();\n+\n+        FunctionKeyTester() {\n+            super(\"Function Key Test\");\n+            this.setLayout(new BorderLayout());\n+            this.add(BorderLayout.NORTH, l);\n+            this.add(BorderLayout.SOUTH, b);\n+            this.add(BorderLayout.CENTER, log);\n+            log.setFocusable(false);\n+            log.setEditable(false);\n+            l.setBackground(Color.red);\n+            setSize(200, 200);\n@@ -129,2 +153,19 @@\n-        return super.handleEvent(e);\n-    }\n+        @Override\n+        @SuppressWarnings(\"deprecation\")\n+        public boolean handleEvent(Event e) {\n+            String message = \"e.id=\" + e.id + \"\\n\";\n+            System.out.print(message);\n+            log.append(message);\n+\n+            try {\n+                switch (e.id) {\n+                    case KEY_ACTION\n+                            -> keyPress.await();\n+                    case KEY_ACTION_RELEASE\n+                            -> keyRelease.await();\n+                }\n+            } catch (Exception ex) {\n+                if (!edtException.compareAndSet(null, ex)) {\n+                    edtException.get().addSuppressed(ex);\n+                }\n+            }\n@@ -132,3 +173,9 @@\n-    public boolean keyDown(Event e, int key) {\n-        l.setText(\"e.key=\" + Integer.valueOf(e.key).toString());\n-        return false;\n+            return super.handleEvent(e);\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"deprecation\")\n+        public boolean keyDown(Event e, int key) {\n+            l.setText(\"e.key=\" + e.key);\n+            return false;\n+        }\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/FunctionKeyTest.java","additions":99,"deletions":52,"binary":false,"changes":151,"status":"modified"}]}