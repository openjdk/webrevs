{"files":[{"patch":"@@ -51,5 +51,0 @@\n-\n-  \/\/ Final configuration checks\n-  \/\/ Passive mode does not instantiate the machinery to support the card table.\n-  \/\/ Exit if the flag has been explicitly set.\n-  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahCardBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -98,0 +98,6 @@\n+  \/\/ If it's passive mode with ShenandoahCardBarrier turned on: clean the write table\n+  \/\/ without swapping the tables since no scan happens in passive mode anyway\n+  if (ShenandoahCardBarrier && !heap->mode()->is_generational()) {\n+    heap->old_generation()->card_scan()->mark_write_table_as_clean();\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahAsserts.hpp\"\n@@ -47,1 +46,1 @@\n-    shenandoah_assert_generational();\n+    assert(ShenandoahCardBarrier, \"Should have card barrier to use genenrational heap\");\n@@ -53,1 +52,1 @@\n-    shenandoah_assert_generational();\n+    assert(ShenandoahCardBarrier, \"Should have card barrier to use genenrational heap\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -251,0 +251,7 @@\n+  \/\/ If ShenandoahCardBarrier is enabled but it's not generational mode\n+  \/\/ it means we're under passive mode and we have to initialize old gen\n+  \/\/ for the purpose of having card table.\n+  if (ShenandoahCardBarrier && !(mode()->is_generational())) {\n+    _old_generation = new ShenandoahOldGeneration(max_workers(), max_capacity());\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -533,1 +533,1 @@\n-    assert(mode()->is_generational(), \"Old generation requires generational mode\");\n+    assert(ShenandoahCardBarrier, \"Card mark barrier should be on\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,0 +126,12 @@\n+void ShenandoahDirectCardMarkRememberedSet::mark_write_table_as_clean() {\n+  CardValue* write_table = _card_table->write_byte_map();\n+  CardValue* bp = &(write_table)[0];\n+  CardValue* end_bp = &(write_table)[_card_table->last_valid_index()];\n+\n+  while (bp <= end_bp) {\n+    *bp++ = CardTable::clean_card_val();\n+  }\n+\n+  log_develop_debug(gc, barrier)(\"Cleaned write_table from \" PTR_FORMAT \" to \" PTR_FORMAT, p2i(&(write_table[0])), p2i(end_bp));\n+}\n+\n@@ -333,0 +345,4 @@\n+void ShenandoahScanRemembered::mark_write_table_as_clean() {\n+  _rs->mark_write_table_as_clean();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -247,0 +247,2 @@\n+  inline void mark_write_table_as_clean();\n+\n@@ -772,0 +774,2 @@\n+  void mark_write_table_as_clean();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test passive mode with card barrier with a gc heavy app. A simple hello world in TestSelectiveBarrierFlags\n+ * does not always surface crashes\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+UseShenandoahGC -Xmx128m -XX:ShenandoahGCMode=passive -XX:+ShenandoahCardBarrier TestPassiveModeWithCardBarrier\n+ *\/\n+\n+import java.util.*;\n+import java.util.concurrent.*;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestPassiveModeWithCardBarrier {\n+    public static void main(String[] args) throws Exception {\n+        List<byte[]> junk = new ArrayList<>();\n+        int junkLength = 1000;\n+        int totalRounds = 10;\n+        int round = 0;\n+\n+        while (round++ < totalRounds) {\n+            for (int i = 0; i < junkLength; i++) {\n+                junk.add(new byte[1024]);\n+            }\n+\n+            System.out.println(junk.hashCode());\n+        }\n+\n+        \/\/ trigger a full gc in case it was all degen\n+        System.gc();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestPassiveModeWithCardBarrier.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -40,1 +40,7 @@\n-        String[] concurrent = { \"ShenandoahSATBBarrier\" };\n+        String[] concurrent = {\n+                \"ShenandoahLoadRefBarrier\",\n+                \"ShenandoahSATBBarrier\",\n+                \"ShenandoahCASBarrier\",\n+                \"ShenandoahCloneBarrier\",\n+                \"ShenandoahStackWatermarkBarrier\",\n+        };\n@@ -42,1 +48,8 @@\n-        String[] all = { \"ShenandoahSATBBarrier\", \"ShenandoahCardBarrier\" };\n+        String[] all = {\n+                \"ShenandoahLoadRefBarrier\",\n+                \"ShenandoahSATBBarrier\",\n+                \"ShenandoahCASBarrier\",\n+                \"ShenandoahCloneBarrier\",\n+                \"ShenandoahStackWatermarkBarrier\",\n+                \"ShenandoahCardBarrier\"\n+        };\n@@ -48,1 +61,1 @@\n-        shouldPassAll(\"-XX:ShenandoahGCMode=passive\",          concurrent);\n+        shouldPassAll(\"-XX:ShenandoahGCMode=passive\",          all);\n@@ -51,1 +64,0 @@\n-        shouldFailAll(\"-XX:ShenandoahGCMode=passive\",          generational);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestWrongBarrierEnable.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"}]}