{"files":[{"patch":"@@ -773,3 +773,1 @@\n-            }\n-\n-            if (c instanceof AbstractButton && ((AbstractButton) c).getMnemonic() != '\\0') {\n+            } else if (c instanceof AbstractButton && ((AbstractButton) c).getMnemonic() != '\\0') {\n@@ -778,3 +776,1 @@\n-            }\n-\n-            if (c instanceof JLabel && ((JLabel) c).getDisplayedMnemonic() != '\\0') {\n+            } else if (c instanceof JLabel && ((JLabel) c).getDisplayedMnemonic() != '\\0') {\n@@ -783,3 +779,1 @@\n-            }\n-\n-            if (c instanceof Container) {\n+            } else if (c instanceof Container){\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthGraphicsUtils.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1055,1 +1055,0 @@\n-     * @since 23\n@@ -1057,1 +1056,1 @@\n-    public static void setMnemonicHidden(boolean hide) {\n+    protected static void setMnemonicHidden(boolean hide) {\n@@ -1071,2 +1070,0 @@\n-     * @see #setMnemonicHidden\n-     * @since 23\n@@ -1074,1 +1071,1 @@\n-    public static boolean isMnemonicHidden() {\n+    protected static boolean isMnemonicHidden() {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthLookAndFeel.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+    static boolean altProcessorInstalledFlag;\n@@ -79,1 +80,1 @@\n-        if (UIManager.getBoolean(\"RootPane.altPress\")) {\n+        if (altProcessorInstalledFlag || UIManager.getBoolean(\"RootPane.altPress\")) {\n@@ -82,0 +83,1 @@\n+            altProcessorInstalledFlag = false;\n@@ -112,1 +114,1 @@\n-        if (UIManager.getBoolean(\"RootPane.altPress\")) {\n+        if (!altProcessorInstalledFlag && UIManager.getBoolean(\"RootPane.altPress\")) {\n@@ -115,0 +117,1 @@\n+            altProcessorInstalledFlag = true;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthRootPaneUI.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build Util\n@@ -33,0 +35,2 @@\n+import java.awt.Point;\n+import java.awt.Rectangle;\n@@ -35,1 +39,4 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n@@ -47,5 +54,4 @@\n-\n-    private static final AtomicInteger mnemonicHideCount = new AtomicInteger(0);\n-    private static final AtomicInteger mnemonicShowCount = new AtomicInteger(0);\n-\n-    private static final int EXPECTED = 5;\n+    private static JMenu fileMenu;\n+    private static volatile Point pt;\n+    private static volatile int fileMenuWidth;\n+    private static volatile int fileMenuHeight;\n@@ -63,8 +69,8 @@\n-            for (int i = 0; i < EXPECTED; i++) {\n-                robot.keyPress(KeyEvent.VK_ALT);\n-                robot.waitForIdle();\n-                SwingUtilities.invokeAndWait(TestMenuMnemonicOnAltPress::verifyMnemonicsState);\n-                robot.keyRelease(KeyEvent.VK_ALT);\n-                robot.waitForIdle();\n-                SwingUtilities.invokeAndWait(TestMenuMnemonicOnAltPress::verifyMnemonicsState);\n-            }\n+            SwingUtilities.invokeAndWait(() -> {\n+                pt = fileMenu.getLocationOnScreen();\n+                fileMenuWidth = fileMenu.getWidth();\n+                fileMenuHeight = fileMenu.getHeight();\n+            });\n+\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n@@ -72,2 +78,14 @@\n-            if (mnemonicShowCount.get() != EXPECTED\n-                && mnemonicHideCount.get() != EXPECTED) {\n+            BufferedImage img1 = robot.createScreenCapture(new Rectangle(pt.x, pt.y,\n+                    fileMenuWidth, fileMenuHeight));\n+\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n+\n+            BufferedImage img2 = robot.createScreenCapture(new Rectangle(pt.x, pt.y,\n+                    fileMenuWidth, fileMenuHeight));\n+\n+            if (Util.compareBufferedImages(img1, img2)) {\n+                try {\n+                    ImageIO.write(img1, \"png\", new File(\"img1.png\"));\n+                    ImageIO.write(img2, \"png\", new File(\"img2.png\"));\n+                } catch (IOException ignored) {}\n@@ -85,8 +103,0 @@\n-    private static void verifyMnemonicsState() {\n-        if (SynthLookAndFeel.isMnemonicHidden()) {\n-            mnemonicHideCount.getAndIncrement();\n-        } else {\n-            mnemonicShowCount.getAndIncrement();\n-        }\n-    }\n-\n@@ -96,1 +106,1 @@\n-        JMenu fileMenu = new JMenu(\"File\");\n+        fileMenu = new JMenu(\"File\");\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/gtk\/TestMenuMnemonicOnAltPress.java","additions":35,"deletions":25,"binary":false,"changes":60,"status":"modified"}]}