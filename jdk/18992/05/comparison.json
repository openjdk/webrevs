{"files":[{"patch":"@@ -866,0 +866,1 @@\n+            \"RootPane.altPress\", true,\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKLookAndFeel.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.awt.Container;\n@@ -35,0 +36,1 @@\n+import java.awt.Window;\n@@ -36,0 +38,1 @@\n+import javax.swing.AbstractButton;\n@@ -39,0 +42,1 @@\n+import javax.swing.JLabel;\n@@ -41,0 +45,1 @@\n+import javax.swing.UIManager;\n@@ -668,0 +673,8 @@\n+\n+                int mnemIndex = lh.getMenuItem().getDisplayedMnemonicIndex();\n+                \/\/ Check to see if the Mnemonic should be rendered in GTK.\n+                if (UIManager.getBoolean(\"RootPane.altPress\")\n+                    && SynthLookAndFeel.isMnemonicHidden()) {\n+                    mnemIndex = -1;\n+                }\n+\n@@ -670,1 +683,1 @@\n-                        lh.getMenuItem().getDisplayedMnemonicIndex());\n+                        mnemIndex);\n@@ -734,0 +747,43 @@\n+\n+    \/*\n+     * Repaints all the components with the mnemonics in the given window and all its owned windows.\n+     *\/\n+    static void repaintMnemonicsInWindow(final Window w) {\n+        if (w == null || !w.isShowing()) {\n+            return;\n+        }\n+\n+        final Window[] ownedWindows = w.getOwnedWindows();\n+        for (final Window element : ownedWindows) {\n+            repaintMnemonicsInWindow(element);\n+        }\n+\n+        repaintMnemonicsInContainer(w);\n+    }\n+\n+    \/*\n+     * Repaints all the components with the mnemonics in container.\n+     * Recursively searches for all the subcomponents.\n+     *\/\n+    static void repaintMnemonicsInContainer(final Container cont) {\n+        final Component[] elements = cont.getComponents();\n+        for (final Component c : elements) {\n+            if (c == null || !c.isVisible()) {\n+                continue;\n+            }\n+\n+            if (c instanceof AbstractButton && ((AbstractButton) c).getMnemonic() != '\\0') {\n+                c.repaint();\n+                continue;\n+            }\n+\n+            if (c instanceof JLabel && ((JLabel) c).getDisplayedMnemonic() != '\\0') {\n+                c.repaint();\n+                continue;\n+            }\n+\n+            if (c instanceof Container) {\n+                repaintMnemonicsInContainer((Container) c);\n+            }\n+        }\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthGraphicsUtils.java","additions":58,"deletions":2,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1044,0 +1044,37 @@\n+\n+    \/\/ Toggle flag for drawing the mnemonic state\n+    private static boolean isMnemonicHidden = true;\n+\n+    \/**\n+     * Sets the state of the hide mnemonic flag. This flag is used by the\n+     * component UI delegates to determine if the mnemonic should be rendered.\n+     * This method is a non operation if the underlying operating system\n+     * does not support the mnemonic hiding feature.\n+     *\n+     * @param hide true if mnemonics should be hidden\n+     * @since 23\n+     *\/\n+    public static void setMnemonicHidden(boolean hide) {\n+        if (UIManager.getBoolean(\"Button.showMnemonics\")) {\n+            \/\/ Do not hide mnemonics if the UI defaults do not support this\n+            isMnemonicHidden = false;\n+        } else {\n+            isMnemonicHidden = hide;\n+        }\n+    }\n+\n+    \/**\n+     * Gets the state of the hide mnemonic flag. This only has meaning\n+     * if this feature is supported by the underlying OS.\n+     *\n+     * @return true if mnemonics are hidden, otherwise, false\n+     * @see #setMnemonicHidden\n+     * @since 23\n+     *\/\n+    public static boolean isMnemonicHidden() {\n+        if (UIManager.getBoolean(\"Button.showMnemonics\")) {\n+            \/\/ Do not hide mnemonics if the UI defaults do not support this\n+            isMnemonicHidden = false;\n+        }\n+        return isMnemonicHidden;\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthLookAndFeel.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.awt.event.KeyEvent;\n@@ -43,0 +44,1 @@\n+    static final AltProcessor altProcessor = new AltProcessor();\n@@ -77,0 +79,4 @@\n+        if (UIManager.getBoolean(\"RootPane.altPress\")) {\n+            KeyboardFocusManager.getCurrentKeyboardFocusManager().\n+                    removeKeyEventPostProcessor(altProcessor);\n+        }\n@@ -105,0 +111,5 @@\n+\n+        if (UIManager.getBoolean(\"RootPane.altPress\")) {\n+            KeyboardFocusManager.getCurrentKeyboardFocusManager().\n+                    addKeyEventPostProcessor(altProcessor);\n+        }\n@@ -176,0 +187,21 @@\n+\n+    static class AltProcessor implements KeyEventPostProcessor {\n+        public boolean postProcessKeyEvent(KeyEvent ev) {\n+            if (ev.getKeyCode() != KeyEvent.VK_ALT) {\n+                return false;\n+            }\n+            final JRootPane root = SwingUtilities.getRootPane(ev.getComponent());\n+            final Window winAncestor = (root == null ? null : SwingUtilities.getWindowAncestor(root));\n+            switch(ev.getID()) {\n+                case KeyEvent.KEY_PRESSED:\n+                    SynthLookAndFeel.setMnemonicHidden(false);\n+                    break;\n+\n+                case KeyEvent.KEY_RELEASED:\n+                    SynthLookAndFeel.setMnemonicHidden(true);\n+                    break;\n+            }\n+            SynthGraphicsUtils.repaintMnemonicsInWindow(winAncestor);\n+            return false;\n+        }\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthRootPaneUI.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8326458\n+ * @key headful\n+ * @requires (os.family == \"linux\")\n+ * @summary Verifies if menu mnemonic toggle on Alt press in GTK LAF\n+ * @run main TestMenuMnemonicOnAltPress\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.plaf.synth.SynthLookAndFeel;\n+\n+public class TestMenuMnemonicOnAltPress {\n+\n+    private static JFrame frame;\n+\n+    private static final AtomicInteger mnemonicHideCount = new AtomicInteger(0);\n+    private static final AtomicInteger mnemonicShowCount = new AtomicInteger(0);\n+\n+    private static final int EXPECTED = 5;\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(200);\n+\n+        try {\n+            SwingUtilities.invokeAndWait(TestMenuMnemonicOnAltPress::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            for (int i = 0; i < EXPECTED; i++) {\n+                robot.keyPress(KeyEvent.VK_ALT);\n+                robot.waitForIdle();\n+                SwingUtilities.invokeAndWait(TestMenuMnemonicOnAltPress::verifyMnemonicsState);\n+                robot.keyRelease(KeyEvent.VK_ALT);\n+                robot.waitForIdle();\n+                SwingUtilities.invokeAndWait(TestMenuMnemonicOnAltPress::verifyMnemonicsState);\n+            }\n+\n+            if (mnemonicShowCount.get() != EXPECTED\n+                && mnemonicHideCount.get() != EXPECTED) {\n+                throw new RuntimeException(\"Mismatch in mnemonic show\/hide on Alt press\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void verifyMnemonicsState() {\n+        if (SynthLookAndFeel.isMnemonicHidden()) {\n+            mnemonicHideCount.getAndIncrement();\n+        } else {\n+            mnemonicShowCount.getAndIncrement();\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new JFrame(\"Test Menu Mnemonic Show\/Hide\");\n+        JMenuBar menuBar  = new JMenuBar();\n+        JMenu fileMenu = new JMenu(\"File\");\n+        fileMenu.setMnemonic(KeyEvent.VK_F);\n+        JMenuItem item1 = new JMenuItem(\"Item-1\");\n+        JMenuItem item2 = new JMenuItem(\"Item-2\");\n+        fileMenu.add(item1);\n+        fileMenu.add(item2);\n+        menuBar.add(fileMenu);\n+        frame.setJMenuBar(menuBar);\n+        frame.setSize(250, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/gtk\/TestMenuMnemonicOnAltPress.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}