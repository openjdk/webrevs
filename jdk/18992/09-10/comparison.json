{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLabelUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLookAndFeel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaMenuPainter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.apple.laf;\n-\n-import java.awt.*;\n-import java.awt.event.KeyEvent;\n-\n-import javax.swing.*;\n-\n-import com.apple.laf.AquaUtils.RecyclableSingleton;\n-import com.apple.laf.AquaUtils.RecyclableSingletonFromDefaultConstructor;\n-\n-public class AquaMnemonicHandler {\n-    private static final RecyclableSingleton<AltProcessor> altProcessor = new RecyclableSingletonFromDefaultConstructor<AltProcessor>(AltProcessor.class);\n-    public static KeyEventPostProcessor getInstance() {\n-        return altProcessor.get();\n-    }\n-\n-    protected static boolean isMnemonicHidden = true; \/\/ true by default\n-\n-    public static void setMnemonicHidden(final boolean hide) {\n-        if (UIManager.getBoolean(\"Button.showMnemonics\")) {\n-            \/\/ Do not hide mnemonics if the UI defaults do not support this\n-            isMnemonicHidden = false;\n-        } else {\n-            isMnemonicHidden = hide;\n-        }\n-    }\n-\n-    \/**\n-     * Gets the state of the hide mnemonic flag. This only has meaning if this feature is supported by the underlying OS.\n-     *\n-     * @return true if mnemonics are hidden, otherwise, false\n-     * @see #setMnemonicHidden\n-     * @since 1.4\n-     *\/\n-    public static boolean isMnemonicHidden() {\n-        if (UIManager.getBoolean(\"Button.showMnemonics\")) {\n-            \/\/ Do not hide mnemonics if the UI defaults do not support this\n-            isMnemonicHidden = false;\n-        }\n-        return isMnemonicHidden;\n-    }\n-\n-    static class AltProcessor implements KeyEventPostProcessor {\n-        public boolean postProcessKeyEvent(final KeyEvent ev) {\n-            if (ev.getKeyCode() != KeyEvent.VK_ALT) {\n-                return false;\n-            }\n-\n-            final JRootPane root = SwingUtilities.getRootPane(ev.getComponent());\n-            final Window winAncestor = (root == null ? null : SwingUtilities.getWindowAncestor(root));\n-\n-            switch(ev.getID()) {\n-                case KeyEvent.KEY_PRESSED:\n-                    setMnemonicHidden(false);\n-                    break;\n-                case KeyEvent.KEY_RELEASED:\n-                    setMnemonicHidden(true);\n-                    break;\n-            }\n-\n-            repaintMnemonicsInWindow(winAncestor);\n-\n-            return false;\n-        }\n-    }\n-\n-    \/*\n-     * Repaints all the components with the mnemonics in the given window and all its owned windows.\n-     *\/\n-    static void repaintMnemonicsInWindow(final Window w) {\n-        if (w == null || !w.isShowing()) {\n-            return;\n-        }\n-\n-        final Window[] ownedWindows = w.getOwnedWindows();\n-        for (final Window element : ownedWindows) {\n-            repaintMnemonicsInWindow(element);\n-        }\n-\n-        repaintMnemonicsInContainer(w);\n-    }\n-\n-    \/*\n-     * Repaints all the components with the mnemonics in container.\n-     * Recursively searches for all the subcomponents.\n-     *\/\n-    static void repaintMnemonicsInContainer(final Container cont) {\n-        for (int i = 0; i < cont.getComponentCount(); i++) {\n-            final Component c = cont.getComponent(i);\n-            if (c == null || !c.isVisible()) {\n-                continue;\n-            }\n-\n-            if (c instanceof AbstractButton && ((AbstractButton)c).getMnemonic() != '\\0') {\n-                c.repaint();\n-                continue;\n-            }\n-\n-            if (c instanceof JLabel && ((JLabel)c).getDisplayedMnemonic() != '\\0') {\n-                c.repaint();\n-                continue;\n-            }\n-\n-            if (c instanceof Container) {\n-                repaintMnemonicsInContainer((Container)c);\n-            }\n-        }\n-    }\n-}\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaMnemonicHandler.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsGraphicsUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsLabelUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1913,4 +1913,0 @@\n-\n-    \/\/ Toggle flag for drawing the mnemonic state\n-    private static boolean isMnemonicHidden = true;\n-\n@@ -1921,34 +1917,0 @@\n-    \/**\n-     * Sets the state of the hide mnemonic flag. This flag is used by the\n-     * component UI delegates to determine if the mnemonic should be rendered.\n-     * This method is a non operation if the underlying operating system\n-     * does not support the mnemonic hiding feature.\n-     *\n-     * @param hide true if mnemonics should be hidden\n-     * @since 1.4\n-     *\/\n-    public static void setMnemonicHidden(boolean hide) {\n-        if (UIManager.getBoolean(\"Button.showMnemonics\") == true) {\n-            \/\/ Do not hide mnemonics if the UI defaults do not support this\n-            isMnemonicHidden = false;\n-        } else {\n-            isMnemonicHidden = hide;\n-        }\n-    }\n-\n-    \/**\n-     * Gets the state of the hide mnemonic flag. This only has meaning\n-     * if this feature is supported by the underlying OS.\n-     *\n-     * @return true if mnemonics are hidden, otherwise, false\n-     * @see #setMnemonicHidden\n-     * @since 1.4\n-     *\/\n-    public static boolean isMnemonicHidden() {\n-        if (UIManager.getBoolean(\"Button.showMnemonics\") == true) {\n-            \/\/ Do not hide mnemonics if the UI defaults do not support this\n-            isMnemonicHidden = false;\n-        }\n-        return isMnemonicHidden;\n-    }\n-\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsLookAndFeel.java","additions":1,"deletions":39,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuItemUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsPopupMenuUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsRootPaneUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}