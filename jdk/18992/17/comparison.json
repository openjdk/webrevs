{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,1 @@\n+import sun.swing.MnemonicHandler;\n@@ -490,2 +491,0 @@\n-        final Graphics2D g2d = g instanceof Graphics2D ? (Graphics2D)g : null;\n-\n@@ -495,1 +494,1 @@\n-        final int mnemonicIndex = AquaMnemonicHandler.isMnemonicHidden() ? -1 : b.getDisplayedMnemonicIndex();\n+        final int mnemonicIndex = MnemonicHandler.isMnemonicHidden() ? -1 : b.getDisplayedMnemonicIndex();\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonUI.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n-import java.awt.*;\n+import java.awt.Color;\n+import java.awt.Graphics;\n@@ -30,5 +31,5 @@\n-import javax.swing.*;\n-import javax.swing.plaf.*;\n-import javax.swing.plaf.basic.*;\n-\n-import sun.swing.SwingUtilities2;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.UIResource;\n+import javax.swing.plaf.basic.BasicLabelUI;\n@@ -38,0 +39,2 @@\n+import sun.swing.MnemonicHandler;\n+import sun.swing.SwingUtilities2;\n@@ -58,1 +61,1 @@\n-        if (AquaMnemonicHandler.isMnemonicHidden()) {\n+        if (MnemonicHandler.isMnemonicHidden()) {\n@@ -75,1 +78,1 @@\n-        if (AquaMnemonicHandler.isMnemonicHidden()) {\n+        if (MnemonicHandler.isMnemonicHidden()) {\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLabelUI.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,2 @@\n+import sun.swing.AltProcessor;\n+import sun.swing.MnemonicHandler;\n@@ -177,1 +179,3 @@\n-        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventPostProcessor(AquaMnemonicHandler.getInstance());\n+        KeyboardFocusManager.getCurrentKeyboardFocusManager()\n+                .addKeyEventPostProcessor(AltProcessor.getInstance());\n+        MnemonicHandler.setMnemonicHidden(true);\n@@ -188,1 +192,2 @@\n-        KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventPostProcessor(AquaMnemonicHandler.getInstance());\n+        KeyboardFocusManager.getCurrentKeyboardFocusManager()\n+                .removeKeyEventPostProcessor(AltProcessor.getInstance());\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLookAndFeel.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,22 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-\n-import javax.swing.*;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.ButtonModel;\n+import javax.swing.Icon;\n+import javax.swing.JComponent;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPopupMenu;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingConstants;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n@@ -36,4 +54,2 @@\n-import sun.swing.SwingUtilities2;\n-\n-import apple.laf.JRSUIConstants.*;\n-\n+import apple.laf.JRSUIConstants.State;\n+import apple.laf.JRSUIConstants.Widget;\n@@ -43,0 +59,2 @@\n+import sun.swing.MnemonicHandler;\n+import sun.swing.SwingUtilities2;\n@@ -290,1 +308,1 @@\n-                final int mnemonic = (AquaMnemonicHandler.isMnemonicHidden() ? -1 : model.getMnemonic());\n+                final int mnemonic = (MnemonicHandler.isMnemonicHidden() ? -1 : model.getMnemonic());\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaMenuPainter.java","additions":28,"deletions":10,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.apple.laf;\n-\n-import java.awt.*;\n-import java.awt.event.KeyEvent;\n-\n-import javax.swing.*;\n-\n-import com.apple.laf.AquaUtils.RecyclableSingleton;\n-import com.apple.laf.AquaUtils.RecyclableSingletonFromDefaultConstructor;\n-\n-public class AquaMnemonicHandler {\n-    private static final RecyclableSingleton<AltProcessor> altProcessor = new RecyclableSingletonFromDefaultConstructor<AltProcessor>(AltProcessor.class);\n-    public static KeyEventPostProcessor getInstance() {\n-        return altProcessor.get();\n-    }\n-\n-    protected static boolean isMnemonicHidden = true; \/\/ true by default\n-\n-    public static void setMnemonicHidden(final boolean hide) {\n-        if (UIManager.getBoolean(\"Button.showMnemonics\")) {\n-            \/\/ Do not hide mnemonics if the UI defaults do not support this\n-            isMnemonicHidden = false;\n-        } else {\n-            isMnemonicHidden = hide;\n-        }\n-    }\n-\n-    \/**\n-     * Gets the state of the hide mnemonic flag. This only has meaning if this feature is supported by the underlying OS.\n-     *\n-     * @return true if mnemonics are hidden, otherwise, false\n-     * @see #setMnemonicHidden\n-     * @since 1.4\n-     *\/\n-    public static boolean isMnemonicHidden() {\n-        if (UIManager.getBoolean(\"Button.showMnemonics\")) {\n-            \/\/ Do not hide mnemonics if the UI defaults do not support this\n-            isMnemonicHidden = false;\n-        }\n-        return isMnemonicHidden;\n-    }\n-\n-    static class AltProcessor implements KeyEventPostProcessor {\n-        public boolean postProcessKeyEvent(final KeyEvent ev) {\n-            if (ev.getKeyCode() != KeyEvent.VK_ALT) {\n-                return false;\n-            }\n-\n-            final JRootPane root = SwingUtilities.getRootPane(ev.getComponent());\n-            final Window winAncestor = (root == null ? null : SwingUtilities.getWindowAncestor(root));\n-\n-            switch(ev.getID()) {\n-                case KeyEvent.KEY_PRESSED:\n-                    setMnemonicHidden(false);\n-                    break;\n-                case KeyEvent.KEY_RELEASED:\n-                    setMnemonicHidden(true);\n-                    break;\n-            }\n-\n-            repaintMnemonicsInWindow(winAncestor);\n-\n-            return false;\n-        }\n-    }\n-\n-    \/*\n-     * Repaints all the components with the mnemonics in the given window and all its owned windows.\n-     *\/\n-    static void repaintMnemonicsInWindow(final Window w) {\n-        if (w == null || !w.isShowing()) {\n-            return;\n-        }\n-\n-        final Window[] ownedWindows = w.getOwnedWindows();\n-        for (final Window element : ownedWindows) {\n-            repaintMnemonicsInWindow(element);\n-        }\n-\n-        repaintMnemonicsInContainer(w);\n-    }\n-\n-    \/*\n-     * Repaints all the components with the mnemonics in container.\n-     * Recursively searches for all the subcomponents.\n-     *\/\n-    static void repaintMnemonicsInContainer(final Container cont) {\n-        for (int i = 0; i < cont.getComponentCount(); i++) {\n-            final Component c = cont.getComponent(i);\n-            if (c == null || !c.isVisible()) {\n-                continue;\n-            }\n-\n-            if (c instanceof AbstractButton && ((AbstractButton)c).getMnemonic() != '\\0') {\n-                c.repaint();\n-                continue;\n-            }\n-\n-            if (c instanceof JLabel && ((JLabel)c).getDisplayedMnemonic() != '\\0') {\n-                c.repaint();\n-                continue;\n-            }\n-\n-            if (c instanceof Container) {\n-                repaintMnemonicsInContainer((Container)c);\n-            }\n-        }\n-    }\n-}\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaMnemonicHandler.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import javax.swing.*;\n-import javax.swing.plaf.synth.*;\n@@ -33,0 +31,9 @@\n+import javax.swing.AbstractButton;\n+import javax.swing.JComponent;\n+import javax.swing.plaf.synth.Region;\n+import javax.swing.plaf.synth.SynthConstants;\n+import javax.swing.plaf.synth.SynthContext;\n+import javax.swing.plaf.synth.SynthGraphicsUtils;\n+\n+import sun.swing.MnemonicHandler;\n+\n@@ -52,0 +59,5 @@\n+\n+        if (MnemonicHandler.isMnemonicHidden()) {\n+            mnemonicIndex = -1;\n+        }\n+\n@@ -118,1 +130,2 @@\n-        super.paintText(context, g, text, bounds, mnemonicIndex);\n+        super.paintText(context, g, text, bounds,\n+                        MnemonicHandler.isMnemonicHidden() ? -1 : mnemonicIndex);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKGraphicsUtils.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,4 +28,13 @@\n-import java.awt.*;\n-import java.beans.*;\n-import java.io.File;\n-import java.lang.ref.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Insets;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n@@ -33,6 +42,20 @@\n-import java.security.PrivilegedAction;\n-import java.util.Locale;\n-import javax.swing.*;\n-import javax.swing.colorchooser.*;\n-import javax.swing.plaf.*;\n-import javax.swing.plaf.synth.*;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.swing.JComponent;\n+import javax.swing.JTextField;\n+import javax.swing.LayoutStyle;\n+import javax.swing.SwingConstants;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIDefaults;\n+import javax.swing.UIManager;\n+import javax.swing.colorchooser.AbstractColorChooserPanel;\n+import javax.swing.plaf.BorderUIResource;\n+import javax.swing.plaf.ColorUIResource;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.DimensionUIResource;\n+import javax.swing.plaf.InsetsUIResource;\n+import javax.swing.plaf.synth.Region;\n+import javax.swing.plaf.synth.SynthConstants;\n+import javax.swing.plaf.synth.SynthLookAndFeel;\n+import javax.swing.plaf.synth.SynthStyleFactory;\n@@ -43,2 +66,0 @@\n-import java.util.HashMap;\n-import java.util.Map;\n@@ -47,1 +68,0 @@\n-import sun.awt.OSInfo;\n@@ -49,0 +69,1 @@\n+import sun.swing.AltProcessor;\n@@ -50,0 +71,1 @@\n+import sun.swing.MnemonicHandler;\n@@ -869,1 +891,0 @@\n-\n@@ -1417,0 +1438,4 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n@@ -1459,0 +1484,17 @@\n+\n+        KeyboardFocusManager.getCurrentKeyboardFocusManager()\n+                .addKeyEventPostProcessor(AltProcessor.getInstance());\n+\n+        \/\/ By default mnemonics are hidden for GTK L&F\n+        MnemonicHandler.setMnemonicHidden(true);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public void uninitialize() {\n+        KeyboardFocusManager.getCurrentKeyboardFocusManager()\n+                .removeKeyEventPostProcessor(AltProcessor.getInstance());\n+        MnemonicHandler.setMnemonicHidden(false);\n+        super.uninitialize();\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKLookAndFeel.java","additions":56,"deletions":14,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.swing;\n+\n+import java.awt.KeyEventPostProcessor;\n+import java.awt.Window;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.JRootPane;\n+import javax.swing.SwingUtilities;\n+\n+public final class AltProcessor implements KeyEventPostProcessor {\n+\n+    private AltProcessor() {}\n+\n+    private static final AltProcessor altProcessor = new AltProcessor();\n+\n+    public static KeyEventPostProcessor getInstance() {\n+        return altProcessor;\n+    }\n+\n+    @Override\n+    public boolean postProcessKeyEvent(final KeyEvent ev) {\n+        if (ev.getKeyCode() != KeyEvent.VK_ALT) {\n+            return false;\n+        }\n+\n+        final JRootPane root = SwingUtilities.getRootPane(ev.getComponent());\n+        final Window winAncestor = (root == null ? null : SwingUtilities.getWindowAncestor(root));\n+\n+        switch (ev.getID()) {\n+            case KeyEvent.KEY_PRESSED:\n+                MnemonicHandler.setMnemonicHidden(false);\n+                break;\n+            case KeyEvent.KEY_RELEASED:\n+                MnemonicHandler.setMnemonicHidden(true);\n+                break;\n+        }\n+\n+        MnemonicHandler.repaintMnemonicsInWindow(winAncestor);\n+\n+        return false;\n+    }\n+}\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/AltProcessor.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.swing;\n+\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Window;\n+\n+import javax.swing.AbstractButton;\n+import javax.swing.JLabel;\n+import javax.swing.UIManager;\n+\n+public final class MnemonicHandler {\n+\n+    private static boolean isMnemonicHidden;\n+\n+    private MnemonicHandler() {}\n+\n+    \/**\n+     * Gets the state of the hide mnemonic flag.\n+     * This only has meaning if this feature is supported by the underlying OS.\n+     *\n+     * @return true if mnemonics are hidden, otherwise, false\n+     *\/\n+    public static boolean isMnemonicHidden() {\n+        if (UIManager.getBoolean(\"Button.showMnemonics\")) {\n+            \/\/ Do not hide mnemonics if the UI defaults do not support this\n+            isMnemonicHidden = false;\n+        }\n+        return isMnemonicHidden;\n+    }\n+\n+    \/**\n+     * Sets the state of the hide mnemonic flag. This flag is used by the\n+     * component UI delegates to determine if the mnemonic should be rendered.\n+     * This method is a non operation if the underlying operating system\n+     * does not support the mnemonic hiding feature.\n+     *\n+     * @param hide true if mnemonics should be hidden\n+     *\/\n+    public static void setMnemonicHidden(final boolean hide) {\n+        if (UIManager.getBoolean(\"Button.showMnemonics\")) {\n+            \/\/ Do not hide mnemonics if the UI defaults do not support this\n+            isMnemonicHidden = false;\n+        } else {\n+            isMnemonicHidden = hide;\n+        }\n+    }\n+\n+    \/**\n+     * Repaints all the components with the mnemonics in the given window and all its owned windows.\n+     *\/\n+    public static void repaintMnemonicsInWindow(final Window w) {\n+        if (w == null || !w.isShowing()) {\n+            return;\n+        }\n+\n+        final Window[] ownedWindows = w.getOwnedWindows();\n+        for (final Window element : ownedWindows) {\n+            repaintMnemonicsInWindow(element);\n+        }\n+\n+        repaintMnemonicsInContainer(w);\n+    }\n+\n+    \/**\n+     * Repaints all the components with the mnemonics in container.\n+     * Recursively searches for all the subcomponents.\n+     *\/\n+    private static void repaintMnemonicsInContainer(final Container cont) {\n+        final Component[] elements = cont.getComponents();\n+        for (final Component c : elements) {\n+            if (c == null || !c.isVisible()) {\n+                continue;\n+            }\n+\n+            if ((c instanceof AbstractButton b && b.getMnemonic() != '\\0')\n+                || (c instanceof JLabel l && l.getDisplayedMnemonic() != '\\0')) {\n+                c.repaint();\n+            } else if (c instanceof Container) {\n+                repaintMnemonicsInContainer((Container) c);\n+            }\n+        }\n+    }\n+}\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/MnemonicHandler.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,16 @@\n-import sun.swing.SwingUtilities2;\n-\n-import java.awt.*;\n-\n-import javax.swing.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+\n+import javax.swing.AbstractButton;\n+import javax.swing.ButtonModel;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import javax.swing.JRadioButton;\n+import javax.swing.JToggleButton;\n+import javax.swing.UIManager;\n@@ -35,1 +46,7 @@\n-import static com.sun.java.swing.plaf.windows.TMSchema.*;\n+import sun.swing.MnemonicHandler;\n+import sun.swing.SwingUtilities2;\n+\n+import static com.sun.java.swing.plaf.windows.TMSchema.Part;\n+import static com.sun.java.swing.plaf.windows.TMSchema.Prop;\n+import static com.sun.java.swing.plaf.windows.TMSchema.State;\n+import static com.sun.java.swing.plaf.windows.TMSchema.TypeEnum;\n@@ -63,1 +80,1 @@\n-        if (WindowsLookAndFeel.isMnemonicHidden() == true) {\n+        if (MnemonicHandler.isMnemonicHidden()) {\n@@ -194,42 +211,0 @@\n-    \/*\n-     * Repaints all the components with the mnemonics in the given window and\n-     * all its owned windows.\n-     *\/\n-    static void repaintMnemonicsInWindow(Window w) {\n-        if(w == null || !w.isShowing()) {\n-            return;\n-        }\n-\n-        Window[] ownedWindows = w.getOwnedWindows();\n-        for(int i=0;i<ownedWindows.length;i++) {\n-            repaintMnemonicsInWindow(ownedWindows[i]);\n-        }\n-\n-        repaintMnemonicsInContainer(w);\n-    }\n-\n-    \/*\n-     * Repaints all the components with the mnemonics in container.\n-     * Recursively searches for all the subcomponents.\n-     *\/\n-    static void repaintMnemonicsInContainer(Container cont) {\n-        Component c;\n-        for(int i=0; i<cont.getComponentCount(); i++) {\n-            c = cont.getComponent(i);\n-            if(c == null || !c.isVisible()) {\n-                continue;\n-            }\n-            if(c instanceof AbstractButton\n-               && ((AbstractButton)c).getMnemonic() != '\\0') {\n-                c.repaint();\n-                continue;\n-            } else if(c instanceof JLabel\n-                      && ((JLabel)c).getDisplayedMnemonic() != '\\0') {\n-                c.repaint();\n-                continue;\n-            }\n-            if(c instanceof Container) {\n-                repaintMnemonicsInContainer((Container)c);\n-            }\n-        }\n-    }\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsGraphicsUtils.java","additions":25,"deletions":50,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import sun.swing.MnemonicHandler;\n@@ -65,1 +66,1 @@\n-        if (WindowsLookAndFeel.isMnemonicHidden() == true) {\n+        if (MnemonicHandler.isMnemonicHidden()) {\n@@ -78,1 +79,1 @@\n-        if (WindowsLookAndFeel.isMnemonicHidden() == true) {\n+        if (MnemonicHandler.isMnemonicHidden()) {\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsLabelUI.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,0 +96,1 @@\n+import sun.swing.MnemonicHandler;\n@@ -199,0 +200,1 @@\n+        MnemonicHandler.setMnemonicHidden(true);\n@@ -1911,4 +1913,0 @@\n-\n-    \/\/ Toggle flag for drawing the mnemonic state\n-    private static boolean isMnemonicHidden = true;\n-\n@@ -1919,34 +1917,0 @@\n-    \/**\n-     * Sets the state of the hide mnemonic flag. This flag is used by the\n-     * component UI delegates to determine if the mnemonic should be rendered.\n-     * This method is a non operation if the underlying operating system\n-     * does not support the mnemonic hiding feature.\n-     *\n-     * @param hide true if mnemonics should be hidden\n-     * @since 1.4\n-     *\/\n-    public static void setMnemonicHidden(boolean hide) {\n-        if (UIManager.getBoolean(\"Button.showMnemonics\") == true) {\n-            \/\/ Do not hide mnemonics if the UI defaults do not support this\n-            isMnemonicHidden = false;\n-        } else {\n-            isMnemonicHidden = hide;\n-        }\n-    }\n-\n-    \/**\n-     * Gets the state of the hide mnemonic flag. This only has meaning\n-     * if this feature is supported by the underlying OS.\n-     *\n-     * @return true if mnemonics are hidden, otherwise, false\n-     * @see #setMnemonicHidden\n-     * @since 1.4\n-     *\/\n-    public static boolean isMnemonicHidden() {\n-        if (UIManager.getBoolean(\"Button.showMnemonics\") == true) {\n-            \/\/ Do not hide mnemonics if the UI defaults do not support this\n-            isMnemonicHidden = false;\n-        }\n-        return isMnemonicHidden;\n-    }\n-\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsLookAndFeel.java","additions":3,"deletions":39,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+import sun.swing.MnemonicHandler;\n+\n@@ -152,1 +154,1 @@\n-                    WindowsLookAndFeel.setMnemonicHidden(true);\n+                    MnemonicHandler.setMnemonicHidden(true);\n@@ -156,1 +158,1 @@\n-                    WindowsLookAndFeel.setMnemonicHidden(false);\n+                    MnemonicHandler.setMnemonicHidden(false);\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuBarUI.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+import sun.swing.MnemonicHandler;\n@@ -206,1 +207,1 @@\n-            if (WindowsLookAndFeel.isMnemonicHidden() == true) {\n+            if (MnemonicHandler.isMnemonicHidden()) {\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuItemUI.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import sun.swing.MnemonicHandler;\n@@ -102,1 +103,1 @@\n-                if(!WindowsLookAndFeel.isMnemonicHidden()) {\n+                if (!MnemonicHandler.isMnemonicHidden()) {\n@@ -104,1 +105,1 @@\n-                    WindowsLookAndFeel.setMnemonicHidden(true);\n+                    MnemonicHandler.setMnemonicHidden(true);\n@@ -108,1 +109,1 @@\n-                        WindowsGraphicsUtils.repaintMnemonicsInWindow(win);\n+                        MnemonicHandler.repaintMnemonicsInWindow(win);\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsPopupMenuUI.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,2 @@\n+import sun.swing.MnemonicHandler;\n+\n@@ -96,2 +98,2 @@\n-                WindowsLookAndFeel.setMnemonicHidden(false);\n-                WindowsGraphicsUtils.repaintMnemonicsInWindow(winAncestor);\n+                MnemonicHandler.setMnemonicHidden(false);\n+                MnemonicHandler.repaintMnemonicsInWindow(winAncestor);\n@@ -101,2 +103,2 @@\n-                WindowsLookAndFeel.setMnemonicHidden(false);\n-                WindowsGraphicsUtils.repaintMnemonicsInWindow(winAncestor);\n+                MnemonicHandler.setMnemonicHidden(false);\n+                MnemonicHandler.repaintMnemonicsInWindow(winAncestor);\n@@ -116,2 +118,2 @@\n-                WindowsLookAndFeel.setMnemonicHidden(true);\n-                WindowsGraphicsUtils.repaintMnemonicsInWindow(winAncestor);\n+                MnemonicHandler.setMnemonicHidden(true);\n+                MnemonicHandler.repaintMnemonicsInWindow(winAncestor);\n@@ -154,3 +156,3 @@\n-                } else if(!WindowsLookAndFeel.isMnemonicHidden()) {\n-                    WindowsLookAndFeel.setMnemonicHidden(true);\n-                    WindowsGraphicsUtils.repaintMnemonicsInWindow(winAncestor);\n+                } else if(!MnemonicHandler.isMnemonicHidden()) {\n+                    MnemonicHandler.setMnemonicHidden(true);\n+                    MnemonicHandler.repaintMnemonicsInWindow(winAncestor);\n@@ -160,2 +162,2 @@\n-                    WindowsLookAndFeel.setMnemonicHidden(true);\n-                    WindowsGraphicsUtils.repaintMnemonicsInWindow(winAncestor);\n+                    MnemonicHandler.setMnemonicHidden(true);\n+                    MnemonicHandler.repaintMnemonicsInWindow(winAncestor);\n@@ -196,2 +198,2 @@\n-                            WindowsLookAndFeel.setMnemonicHidden(true);\n-                            WindowsGraphicsUtils.repaintMnemonicsInWindow(winAncestor);\n+                            MnemonicHandler.setMnemonicHidden(true);\n+                            MnemonicHandler.repaintMnemonicsInWindow(winAncestor);\n@@ -205,3 +207,3 @@\n-                if (WindowsLookAndFeel.isMnemonicHidden() && ev.isAltDown()) {\n-                    WindowsLookAndFeel.setMnemonicHidden(false);\n-                    WindowsGraphicsUtils.repaintMnemonicsInWindow(winAncestor);\n+                if (MnemonicHandler.isMnemonicHidden() && ev.isAltDown()) {\n+                    MnemonicHandler.setMnemonicHidden(false);\n+                    MnemonicHandler.repaintMnemonicsInWindow(winAncestor);\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsRootPaneUI.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8326458\n+ * @bug 8326458 8155030\n@@ -29,1 +29,1 @@\n- * @modules java.desktop\/com.sun.java.swing.plaf.windows\n+ * @modules java.desktop\/sun.swing\n@@ -46,1 +46,1 @@\n-import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;\n+import sun.swing.MnemonicHandler;\n@@ -96,1 +96,1 @@\n-        if (WindowsLookAndFeel.isMnemonicHidden()) {\n+        if (MnemonicHandler.isMnemonicHidden()) {\n","filename":"test\/jdk\/javax\/swing\/JMenuBar\/TestMenuMnemonic.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 8155030\n+ * @key headful\n+ * @requires (os.family == \"linux\" | os.family == \"mac\")\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build Util\n+ * @summary Verifies if menu mnemonic toggle on Alt press in GTK and Aqua LAF\n+ * @run main TestMenuMnemonicLinuxAndMac\n+ *\/\n+\n+public class TestMenuMnemonicLinuxAndMac {\n+\n+    private static JFrame frame;\n+    private static JMenu fileMenu;\n+    private static volatile Rectangle fileMenuRect;\n+\n+    public static void main(String[] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo laf :\n+                UIManager.getInstalledLookAndFeels()) {\n+            if (laf.getName().contains(\"GTK\") || laf.getName().contains(\"Aqua\")) {\n+                System.out.println(\"Testing: \" + laf.getName());\n+                UIManager.setLookAndFeel(laf.getClassName());\n+                break;\n+            }\n+        }\n+\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(200);\n+\n+        try {\n+            SwingUtilities.invokeAndWait(TestMenuMnemonicLinuxAndMac::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                fileMenuRect = new Rectangle(fileMenu.getLocationOnScreen(),\n+                        fileMenu.getSize());\n+            });\n+\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n+\n+            BufferedImage img1 = robot.createScreenCapture(fileMenuRect);\n+\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n+\n+            BufferedImage img2 = robot.createScreenCapture(fileMenuRect);\n+\n+            if (Util.compareBufferedImages(img1, img2)) {\n+                try {\n+                    ImageIO.write(img1, \"png\", new File(\"Menu_With_Mnemonic.png\"));\n+                    ImageIO.write(img2, \"png\", new File(\"Menu_Without_Mnemonic.png\"));\n+                } catch (IOException ignored) {\n+                }\n+                throw new RuntimeException(\"Mismatch in mnemonic show\/hide on Alt press\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new JFrame(\"Test Menu Mnemonic Show\/Hide\");\n+        JMenuBar menuBar  = new JMenuBar();\n+        fileMenu = new JMenu(\"File\");\n+        fileMenu.setMnemonic(KeyEvent.VK_F);\n+        JMenuItem item1 = new JMenuItem(\"Item-1\");\n+        JMenuItem item2 = new JMenuItem(\"Item-2\");\n+        fileMenu.add(item1);\n+        fileMenu.add(item2);\n+        menuBar.add(fileMenu);\n+        frame.setJMenuBar(menuBar);\n+        frame.setSize(250, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuBar\/TestMenuMnemonicLinuxAndMac.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4736093\n+ * @bug 4736093 8155030\n@@ -29,1 +29,1 @@\n- * @modules java.desktop\/com.sun.java.swing.plaf.windows\n+ * @modules java.desktop\/sun.swing\n@@ -45,1 +45,1 @@\n-import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;\n+import sun.swing.MnemonicHandler;\n@@ -65,1 +65,1 @@\n-                if (winlaf && WindowsLookAndFeel.isMnemonicHidden()) {\n+                if (winlaf && MnemonicHandler.isMnemonicHidden()) {\n@@ -103,1 +103,1 @@\n-        if (expected != WindowsLookAndFeel.isMnemonicHidden()) {\n+        if (expected != MnemonicHandler.isMnemonicHidden()) {\n","filename":"test\/jdk\/javax\/swing\/LookAndFeel\/bug4736093.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 6921687 8079428\n+ * @bug 6921687 8079428 8155030\n@@ -30,1 +30,0 @@\n- * @author Semyon Sadetsky\n@@ -34,1 +33,1 @@\n- * @modules java.desktop\/com.sun.java.swing.plaf.windows\n+ * @modules java.desktop\/sun.swing\n@@ -48,0 +47,2 @@\n+import sun.swing.MnemonicHandler;\n+\n@@ -94,1 +95,1 @@\n-        if ((Boolean) lafClass.getMethod(\"isMnemonicHidden\").invoke(lafClass)) {\n+        if (MnemonicHandler.isMnemonicHidden()) {\n","filename":"test\/jdk\/javax\/swing\/plaf\/windows\/6921687\/bug6921687.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}