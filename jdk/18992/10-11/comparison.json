{"files":[{"patch":"@@ -78,1 +78,0 @@\n-import sun.swing.SwingUtilities2;\n@@ -80,0 +79,1 @@\n+import sun.swing.SwingUtilities2;\n@@ -491,2 +491,0 @@\n-        final Graphics2D g2d = g instanceof Graphics2D ? (Graphics2D)g : null;\n-\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonUI.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-import java.awt.*;\n+import java.awt.Color;\n+import java.awt.Graphics;\n@@ -30,3 +31,7 @@\n-import javax.swing.*;\n-import javax.swing.plaf.*;\n-import javax.swing.plaf.basic.*;\n+import javax.swing.JComponent;\n+import javax.swing.JLabel;\n+\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.UIResource;\n+\n+import javax.swing.plaf.basic.BasicLabelUI;\n@@ -34,1 +39,0 @@\n-import sun.swing.SwingUtilities2;\n@@ -36,0 +40,1 @@\n+import sun.swing.SwingUtilities2;\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLabelUI.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+\n+import sun.swing.AltProcessor;\n+import sun.swing.MnemonicHandler;\n@@ -60,2 +63,0 @@\n-import sun.swing.MnemonicHandler;\n-import sun.swing.AltProcessor;\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaLookAndFeel.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,2 +28,23 @@\n-import java.awt.*;\n-import java.awt.event.*;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.ButtonModel;\n+import javax.swing.Icon;\n+import javax.swing.JComponent;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JMenu;\n+import javax.swing.JPopupMenu;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingConstants;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n@@ -31,1 +52,0 @@\n-import javax.swing.*;\n@@ -36,1 +56,0 @@\n-import sun.swing.SwingUtilities2;\n@@ -38,0 +57,1 @@\n+import sun.swing.SwingUtilities2;\n@@ -39,1 +59,2 @@\n-import apple.laf.JRSUIConstants.*;\n+import apple.laf.JRSUIConstants.State;\n+import apple.laf.JRSUIConstants.Widget;\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaMenuPainter.java","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import sun.swing.AltProcessor;\n@@ -50,0 +51,1 @@\n+import sun.swing.MnemonicHandler;\n@@ -52,2 +54,0 @@\n-import sun.swing.MnemonicHandler;\n-import sun.swing.AltProcessor;\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKLookAndFeel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import sun.swing.MnemonicHandler;\n-\n@@ -47,0 +45,1 @@\n+    @Override\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/AltProcessor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,4 +28,6 @@\n-import sun.swing.SwingUtilities2;\n-import sun.swing.MnemonicHandler;\n-\n-import java.awt.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n@@ -33,1 +35,9 @@\n-import javax.swing.*;\n+import javax.swing.AbstractButton;\n+import javax.swing.ButtonModel;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JRadioButton;\n+import javax.swing.JToggleButton;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuItem;\n+import javax.swing.UIManager;\n@@ -36,1 +46,8 @@\n-import static com.sun.java.swing.plaf.windows.TMSchema.*;\n+import sun.swing.MnemonicHandler;\n+import sun.swing.SwingUtilities2;\n+\n+import com.sun.java.swing.plaf.windows.WindowsButtonUI;\n+import static com.sun.java.swing.plaf.windows.TMSchema.Part;\n+import static com.sun.java.swing.plaf.windows.TMSchema.Prop;\n+import static com.sun.java.swing.plaf.windows.TMSchema.State;\n+import static com.sun.java.swing.plaf.windows.TMSchema.TypeEnum;\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsGraphicsUtils.java","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import sun.swing.SwingUtilities2;\n@@ -40,0 +39,1 @@\n+import sun.swing.SwingUtilities2;\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsLabelUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+import sun.swing.MnemonicHandler;\n@@ -101,1 +102,0 @@\n-import sun.swing.MnemonicHandler;\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsLookAndFeel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import sun.swing.SwingUtilities2;\n@@ -51,0 +50,1 @@\n+import sun.swing.SwingUtilities2;\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuItemUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-import sun.swing.StringUIClientPropertyKey;\n@@ -52,0 +51,1 @@\n+import sun.swing.StringUIClientPropertyKey;\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsPopupMenuUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,125 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.Point;\n-import java.awt.Rectangle;\n-import java.awt.Robot;\n-import java.awt.event.KeyEvent;\n-import java.awt.image.BufferedImage;\n-import java.io.File;\n-import java.io.IOException;\n-import javax.imageio.ImageIO;\n-import javax.swing.JFrame;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenuItem;\n-import javax.swing.SwingUtilities;\n-import javax.swing.UIManager;\n-import javax.swing.plaf.synth.SynthLookAndFeel;\n-\n-\/*\n- * @test\n- * @bug 8155030\n- * @key headful\n- * @requires (os.family == \"linux\" | os.family == \"mac\")\n- * @library \/javax\/swing\/regtesthelpers\n- * @build Util\n- * @summary Verifies if menu mnemonic toggle on Alt press in GTK and Aqua LAF\n- * @run main TestMenuMnemonicOnAltPress\n- *\/\n-\n-public class TestMenuMnemonicOnAltPress {\n-\n-    private static JFrame frame;\n-    private static JMenu fileMenu;\n-    private static volatile Rectangle fileMenuRect;\n-\n-    public static void main(String[] args) throws Exception {\n-        for (UIManager.LookAndFeelInfo laf :\n-                UIManager.getInstalledLookAndFeels()) {\n-            if (laf.getName().contains(\"GTK\")) {\n-                UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n-            } else if (laf.getName().contains(\"Aqua\")) {\n-                UIManager.setLookAndFeel(\"com.apple.laf.AquaLookAndFeel\");\n-            } else {\n-                continue;\n-            }\n-\n-            Robot robot = new Robot();\n-            robot.setAutoDelay(200);\n-\n-            try {\n-                SwingUtilities.invokeAndWait(TestMenuMnemonicOnAltPress::createAndShowUI);\n-                robot.waitForIdle();\n-                robot.delay(1000);\n-\n-                SwingUtilities.invokeAndWait(() -> {\n-                    fileMenuRect = new Rectangle(fileMenu.getLocationOnScreen(),\n-                            fileMenu.getSize());\n-                });\n-\n-                robot.keyPress(KeyEvent.VK_ALT);\n-                robot.waitForIdle();\n-\n-                BufferedImage img1 = robot.createScreenCapture(fileMenuRect);\n-\n-                robot.keyRelease(KeyEvent.VK_ALT);\n-                robot.waitForIdle();\n-\n-                BufferedImage img2 = robot.createScreenCapture(fileMenuRect);\n-\n-                if (Util.compareBufferedImages(img1, img2)) {\n-                    try {\n-                        ImageIO.write(img1, \"png\", new File(\"Menu_With_Mnemonic.png\"));\n-                        ImageIO.write(img2, \"png\", new File(\"Menu_Without_Mnemonic.png\"));\n-                    } catch (IOException ignored) {\n-                    }\n-                    throw new RuntimeException(\"Mismatch in mnemonic show\/hide on Alt press\");\n-                }\n-            } finally {\n-                SwingUtilities.invokeAndWait(() -> {\n-                    if (frame != null) {\n-                        frame.dispose();\n-                    }\n-                });\n-            }\n-        }\n-    }\n-\n-    private static void createAndShowUI() {\n-        frame = new JFrame(\"Test Menu Mnemonic Show\/Hide\");\n-        JMenuBar menuBar  = new JMenuBar();\n-        fileMenu = new JMenu(\"File\");\n-        fileMenu.setMnemonic(KeyEvent.VK_F);\n-        JMenuItem item1 = new JMenuItem(\"Item-1\");\n-        JMenuItem item2 = new JMenuItem(\"Item-2\");\n-        fileMenu.add(item1);\n-        fileMenu.add(item2);\n-        menuBar.add(fileMenu);\n-        frame.setJMenuBar(menuBar);\n-        frame.setSize(250, 200);\n-        frame.setLocationRelativeTo(null);\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-        frame.setVisible(true);\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/gtk\/TestMenuMnemonicOnAltPress.java","additions":0,"deletions":125,"binary":false,"changes":125,"status":"deleted"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.plaf.synth.SynthLookAndFeel;\n+\n+\/*\n+ * @test\n+ * @bug 8155030\n+ * @key headful\n+ * @requires (os.family == \"linux\" | os.family == \"mac\")\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build Util\n+ * @summary Verifies if menu mnemonic toggle on Alt press in GTK and Aqua LAF\n+ * @run main TestMenuMnemonicLinuxAndMac\n+ *\/\n+\n+public class TestMenuMnemonicLinuxAndMac {\n+\n+    private static JFrame frame;\n+    private static JMenu fileMenu;\n+    private static volatile Rectangle fileMenuRect;\n+\n+    public static void main(String[] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo laf :\n+                UIManager.getInstalledLookAndFeels()) {\n+            if (laf.getName().contains(\"GTK\") || laf.getName().contains(\"Aqua\")) {\n+                System.out.println(\"Testing: \"+laf.getName());\n+                UIManager.setLookAndFeel(laf.getClassName());\n+            }\n+        }\n+\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(200);\n+\n+        try {\n+            SwingUtilities.invokeAndWait(TestMenuMnemonicLinuxAndMac::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                fileMenuRect = new Rectangle(fileMenu.getLocationOnScreen(),\n+                        fileMenu.getSize());\n+            });\n+\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n+\n+            BufferedImage img1 = robot.createScreenCapture(fileMenuRect);\n+\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n+\n+            BufferedImage img2 = robot.createScreenCapture(fileMenuRect);\n+\n+            if (Util.compareBufferedImages(img1, img2)) {\n+                try {\n+                    ImageIO.write(img1, \"png\", new File(\"Menu_With_Mnemonic.png\"));\n+                    ImageIO.write(img2, \"png\", new File(\"Menu_Without_Mnemonic.png\"));\n+                } catch (IOException ignored) {\n+                }\n+                throw new RuntimeException(\"Mismatch in mnemonic show\/hide on Alt press\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new JFrame(\"Test Menu Mnemonic Show\/Hide\");\n+        JMenuBar menuBar  = new JMenuBar();\n+        fileMenu = new JMenu(\"File\");\n+        fileMenu.setMnemonic(KeyEvent.VK_F);\n+        JMenuItem item1 = new JMenuItem(\"Item-1\");\n+        JMenuItem item2 = new JMenuItem(\"Item-2\");\n+        fileMenu.add(item1);\n+        fileMenu.add(item2);\n+        menuBar.add(fileMenu);\n+        frame.setJMenuBar(menuBar);\n+        frame.setSize(250, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuBar\/TestMenuMnemonicLinuxAndMac.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}