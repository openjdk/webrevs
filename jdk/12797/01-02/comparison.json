{"files":[{"patch":"@@ -55,0 +55,2 @@\n+import static org.junit.jupiter.api.Assertions.*;\n+\n@@ -83,1 +85,1 @@\n-    private static Stream<Arguments> slowParamProvider() {\n+    private static Stream<Arguments> readingByteChannelParamProvider() {\n@@ -97,2 +99,1 @@\n-    void fromFast(long initialPosition, int bufSize, long offset)\n-        throws IOException {\n+    void fromFast(long initialPosition, int bufSize, long offset) throws IOException {\n@@ -104,1 +105,7 @@\n-            src.write(ByteBuffer.wrap(bytes), 0);\n+            ByteBuffer buf = ByteBuffer.wrap(bytes);\n+            int total = 0;\n+            while (total < bufSize) {\n+                int n = src.write(ByteBuffer.wrap(bytes), 0);\n+                assertTrue(n >= 0, n + \" < \" + 0);\n+                total += n;\n+            }\n@@ -114,2 +121,2 @@\n-    @MethodSource(\"slowParamProvider\")\n-    void fromSlow(long initialPosition, int bufSize, long offset)\n+    @MethodSource(\"readingByteChannelParamProvider\")\n+    void fromReadingByteChannel(long initialPosition, int bufSize, long offset)\n@@ -133,3 +140,0 @@\n-     *\n-     * @throws RuntimeException if an unexpected number of bytes is transferred\n-     *                          or the transferred values are not as expected\n@@ -144,1 +148,1 @@\n-            target.write(ByteBuffer.wrap(new byte[] {(byte)42}));\n+            assertEquals(1, target.write(ByteBuffer.wrap(new byte[] {(byte)42})));\n@@ -148,3 +152,3 @@\n-            if (transferred != count)\n-                throw new RuntimeException(transferred + \" != \" + count);\n-            ByteBuffer buf = ByteBuffer.allocate((int)count);\n+            assertTrue(transferred >= 0, \"transferFrom returned negative\");\n+            assertFalse(transferred > count, transferred + \" > \" + count);\n+            ByteBuffer buf = ByteBuffer.allocate((int)transferred);\n@@ -152,2 +156,2 @@\n-            if (!Arrays.equals(buf.array(), bytes))\n-                throw new RuntimeException(\"arrays unequal\");\n+            assertArrayEquals(Arrays.copyOf(bytes, (int)transferred),\n+                              buf.array(), \"arrays unequal\");\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/TransferFromExtend.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"}]}