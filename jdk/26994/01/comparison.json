{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,1 +128,3 @@\n-        switch (image.getType()) {\n+        Raster raster = image.getRaster();\n+        int type = image.getType();\n+        switch (type) {\n@@ -167,1 +169,1 @@\n-                    return createImageLayout(image.getRaster(), cm);\n+                    return createImageLayout(raster, cm);\n@@ -175,1 +177,1 @@\n-        switch (image.getType()) {\n+        switch (type) {\n@@ -179,1 +181,3 @@\n-                var intRaster = (IntegerComponentRaster) image.getRaster();\n+                if (!(raster instanceof IntegerComponentRaster intRaster)) {\n+                    return null;\n+                }\n@@ -191,1 +195,3 @@\n-                var byteRaster = (ByteComponentRaster) image.getRaster();\n+                if (!(raster instanceof ByteComponentRaster byteRaster)) {\n+                    return null;\n+                }\n@@ -201,1 +207,3 @@\n-                var shortRaster = (ShortComponentRaster) image.getRaster();\n+                if (!(raster instanceof ShortComponentRaster shortRaster)) {\n+                    return null;\n+                }\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSImageLayout.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Point;\n+import java.awt.color.ColorSpace;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorConvertOp;\n+import java.awt.image.ColorModel;\n+import java.awt.image.SampleModel;\n+import java.awt.image.WritableRaster;\n+import java.io.File;\n+\n+import javax.imageio.ImageIO;\n+\n+import static java.awt.image.BufferedImage.TYPE_3BYTE_BGR;\n+import static java.awt.image.BufferedImage.TYPE_4BYTE_ABGR;\n+import static java.awt.image.BufferedImage.TYPE_4BYTE_ABGR_PRE;\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE;\n+import static java.awt.image.BufferedImage.TYPE_INT_BGR;\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n+import static java.awt.image.BufferedImage.TYPE_USHORT_GRAY;\n+\n+\/**\n+ * @test\n+ * @bug 8366208\n+ * @summary Verifies ColorConvertOp works correctly with BufferedImage and\n+ *          semi-custom raster\n+ *\/\n+public final class FilterSemiCustomImages {\n+\n+    private static final int W = 144;\n+    private static final int H = 123;\n+\n+    private static final int[] TYPES = {\n+            TYPE_INT_RGB, TYPE_INT_ARGB, TYPE_INT_ARGB_PRE, TYPE_INT_BGR,\n+            TYPE_3BYTE_BGR, TYPE_4BYTE_ABGR, TYPE_4BYTE_ABGR_PRE,\n+            TYPE_USHORT_GRAY\n+    };\n+\n+    private static final int[] CSS = {\n+            ColorSpace.CS_CIEXYZ, ColorSpace.CS_GRAY, ColorSpace.CS_LINEAR_RGB,\n+            ColorSpace.CS_PYCC, ColorSpace.CS_sRGB\n+    };\n+\n+    private static final class CustomRaster extends WritableRaster {\n+        CustomRaster(SampleModel sampleModel, Point origin) {\n+            super(sampleModel, origin);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        for (int fromIndex : CSS) {\n+            for (int toIndex : CSS) {\n+                if (fromIndex != toIndex) {\n+                    for (int type : TYPES) {\n+                        test(fromIndex, toIndex, type);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void test(int fromIndex, int toIndex, int type)\n+            throws Exception\n+    {\n+        ColorSpace fromCS = ColorSpace.getInstance(fromIndex);\n+        ColorSpace toCS = ColorSpace.getInstance(toIndex);\n+        ColorConvertOp op = new ColorConvertOp(fromCS, toCS, null);\n+\n+        \/\/ standard source -> standard dst\n+        BufferedImage srcGold = new BufferedImage(W, H, type);\n+        fill(srcGold);\n+        BufferedImage dstGold = new BufferedImage(W, H, type);\n+        op.filter(srcGold, dstGold);\n+\n+        \/\/ custom source -> standard dst\n+        BufferedImage srcCustom = makeCustomBI(srcGold);\n+        fill(srcCustom);\n+        BufferedImage dst = new BufferedImage(W, H, type);\n+        op.filter(srcCustom, dst);\n+        verify(dstGold, dst);\n+\n+        \/\/ standard source -> custom dst\n+        BufferedImage src = new BufferedImage(W, H, type);\n+        fill(src);\n+        BufferedImage dstCustom = makeCustomBI(dstGold);\n+        op.filter(src, dstCustom);\n+        verify(dstGold, dstCustom);\n+\n+        \/\/ custom source -> custom dst\n+        srcCustom = makeCustomBI(srcGold);\n+        fill(srcCustom);\n+        dstCustom = makeCustomBI(dstGold);\n+        op.filter(srcCustom, dstCustom);\n+        verify(dstGold, dstCustom);\n+    }\n+\n+    private static BufferedImage makeCustomBI(BufferedImage bi) {\n+        ColorModel cm = bi.getColorModel();\n+        SampleModel sm = bi.getSampleModel();\n+        CustomRaster cr = new CustomRaster(sm, new Point());\n+        return new BufferedImage(cm, cr, bi.isAlphaPremultiplied(), null) {\n+            @Override\n+            public int getType() {\n+                return bi.getType();\n+            }\n+        };\n+    }\n+\n+    private static void fill(BufferedImage image) {\n+        int width = image.getWidth();\n+        int height = image.getHeight();\n+        for (int x = 0; x < width; ++x) {\n+            for (int y = 0; y < height; ++y) {\n+                \/\/ alpha channel may be calculated slightly differently on\n+                \/\/ different code paths, so only check fully transparent and\n+                \/\/ fully opaque pixels\n+                Color c = new Color(y * 255 \/ (height - 1),\n+                                    x * 255 \/ (width - 1),\n+                                    x % 255, (x % 2 == 0) ? 0 : 255);\n+                image.setRGB(x, y, c.getRGB());\n+            }\n+        }\n+    }\n+\n+    private static void verify(BufferedImage dstGold, BufferedImage dst)\n+            throws Exception\n+    {\n+        for (int x = 0; x < W; ++x) {\n+            for (int y = 0; y < H; ++y) {\n+                if (dst.getRGB(x, y) != dstGold.getRGB(x, y)) {\n+                    ImageIO.write(dst, \"png\", new File(\"custom.png\"));\n+                    ImageIO.write(dstGold, \"png\", new File(\"gold.png\"));\n+                    throw new RuntimeException(\"Test failed.\");\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/cmm\/ColorConvertOp\/FilterSemiCustomImages.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"}]}