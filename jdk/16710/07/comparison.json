{"files":[{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.event;\n+\n+import java.nio.channels.Selector;\n+\n+\/**\n+ * A JFR event for operations on {@link Selector#select()} and it's variants.\n+ * This event is mirrored in\n+ * {@code jdk.jfr.events.SelectionEvent } where the metadata for the event is\n+ * provided with annotations.  Some of the methods are replaced by generated\n+ * methods when jfr is enabled.  Note that the order of the arguments of the\n+ * {@link #commit(long, long, int,long)} method\n+ * must be the same as the order of the fields.\n+ *\/\n+public class SelectorSelectEvent extends Event {\n+\n+    public int selectionKeyCount;\n+    public long timeout;\n+\n+    \/**\n+     * Actually commit a selection event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     * The order of the fields must be the same as the parameters in this method.\n+     * {@code commit(..., int)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @param count     number of SelectionKey selected\n+     * @param timeout   ms for select to block, or zero to block indefinitely\n+     *\/\n+    public static void commit(long start, long duration, int count, long timeout) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    \/**\n+     * Determine if an event should be emitted.  The duration of the operation\n+     * must exceed some threshold in order to commit the event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @return  true if the event should be commited\n+     *\/\n+    public static boolean shouldCommit(long duration) {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Determine if this kind of event is enabled.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return true if events are enabled, false otherwise\n+     *\/\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Fetch the current timestamp in nanoseconds.  This method is used\n+     * to determine the start and end of an operation.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return  the current timestamp value\n+     *\/\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0L;\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SelectorSelectEvent.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import jdk.internal.event.SelectorSelectEvent;\n@@ -120,1 +121,1 @@\n-    private int lockAndDoSelect(Consumer<SelectionKey> action, long timeout)\n+    private int implLockAndDoSelect(Consumer<SelectionKey> action, long timeout)\n@@ -138,0 +139,17 @@\n+    private int lockAndDoSelect(Consumer<SelectionKey> action, long timeout)\n+        throws IOException\n+    {\n+        \/\/ no JFR event for selectNow\n+        if ((timeout == 0) || (!SelectorSelectEvent.enabled())) {\n+            return implLockAndDoSelect(action, timeout);\n+        }\n+        long start = SelectorSelectEvent.timestamp();\n+        int n = implLockAndDoSelect(action, timeout);\n+        long duration = SelectorSelectEvent.timestamp() - start;\n+        if (SelectorSelectEvent.shouldCommit(duration)) {\n+            timeout = (timeout < 0) ? 0 : timeout;\n+            SelectorSelectEvent.commit(start, duration, n, timeout);\n+        }\n+        return n;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SelectorImpl.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.*;\n+import jdk.jfr.internal.MirrorEvent;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"SelectorSelect\")\n+@Label(\"Selector Select\")\n+@Category(\"Java Application\")\n+@MirrorEvent(className = \"jdk.internal.event.SelectorSelectEvent\")\n+public class SelectorSelectEvent extends AbstractJDKEvent {\n+\n+    @Label(\"SelectionKey Count\")\n+    @Description(\"The number of unique keys updated\")\n+    public int selectionKeyCount;\n+\n+    @Label(\"Timeout\")\n+    @Description(\"Time to block, or zero to block indefinitely\")\n+    @Timespan(Timespan.MILLISECONDS)\n+    public long timeout;\n+\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SelectorSelectEvent.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import jdk.jfr.events.SelectorSelectEvent;\n@@ -56,0 +57,1 @@\n+        SelectorSelectEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MirrorEvents.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,1 @@\n+        jdk.internal.event.SelectorSelectEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -747,0 +747,6 @@\n+    <event name=\"jdk.SelectorSelect\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\">20 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -747,0 +747,6 @@\n+    <event name=\"jdk.SelectorSelect\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"stackTrace\">true<\/setting>\n+      <setting name=\"threshold\">20 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.io;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.Selector;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.channels.SocketChannel;\n+import java.util.List;\n+\n+\/**\n+ * @test\n+ * @bug 8310994\n+ * @summary test selection events\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.event.io.TestSelectorSelectEvent\n+ *\/\n+public class TestSelectorSelectEvent {\n+\n+    private static String COUNT_FIELD = \"selectionKeyCount\";\n+    private static String TIMEOUT_FIELD = \"timeout\";\n+\n+    public static void main(String[] args) throws Throwable {\n+        var tests = new TestSelectorSelectEvent();\n+        tests.test1();\n+    }\n+\n+    public void test1() throws Throwable {\n+        try (Recording recording = new Recording()) {\n+            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n+                recording.enable(EventNames.SelectorSelect).withoutThreshold();\n+                recording.start();\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ssc.bind(new InetSocketAddress(lb, 0));\n+\n+                try (SocketChannel sc1 = SocketChannel.open(ssc.getLocalAddress());\n+                    SocketChannel sc2 = ssc.accept();\n+                    Selector sel = Selector.open()) {\n+\n+                    \/\/ register for read events, channel should not be selected\n+                    \/\/ no event should be generated for selectNow().\n+                    sc1.configureBlocking(false);\n+                    SelectionKey key = sc1.register(sel, SelectionKey.OP_READ);\n+                    int n = sel.selectNow();\n+                    Asserts.assertTrue(n == 0);\n+\n+                    \/\/ write bytes to other end of connection\n+                    ByteBuffer msg = ByteBuffer.wrap(\"hello\".getBytes(\"UTF-8\"));\n+                    int nwrote = sc2.write(msg);\n+                    Asserts.assertTrue(nwrote >= 0);\n+\n+                    \/\/ channel should be selected\n+                    n = sel.select();\n+                    Asserts.assertTrue(n == 1);\n+                }\n+                recording.stop();\n+\n+                List<RecordedEvent> events = Events.fromRecording(recording);\n+                Asserts.assertEquals(events.size(), 1);\n+                Asserts.assertTrue(events.get(0).getInt(COUNT_FIELD) == 1);\n+                Asserts.assertTrue(events.get(0).getLong(TIMEOUT_FIELD) == 0);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSelectorSelectEvent.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -198,0 +198,1 @@\n+    public static final String SelectorSelect = PREFIX + \"SelectorSelect\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}