{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import jdk.internal.event.SelectorSelectEvent;\n-\n@@ -49,0 +47,1 @@\n+import jdk.internal.event.SelectorSelectEvent;\n@@ -150,1 +149,1 @@\n-        if ((n == 0) || (SelectorSelectEvent.shouldCommit(duration))) {\n+        if (SelectorSelectEvent.shouldCommit(duration)) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SelectorImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.time.Duration;\n@@ -59,1 +58,0 @@\n-        tests.test2();\n@@ -100,39 +98,0 @@\n-    public void test2() throws Throwable {\n-        try (Recording recording = new Recording()) {\n-            try (ServerSocketChannel ssc = ServerSocketChannel.open()) {\n-                recording.enable(EventNames.SelectorSelect).withThreshold(Duration.ofMillis(100));\n-                recording.start();\n-\n-                InetAddress lb = InetAddress.getLoopbackAddress();\n-                ssc.bind(new InetSocketAddress(lb, 0));\n-\n-                try (SocketChannel sc1 = SocketChannel.open(ssc.getLocalAddress());\n-                     SocketChannel sc2 = ssc.accept();\n-                     Selector sel = Selector.open()) {\n-\n-                    \/\/ Register for read events, channel should not be selected\n-                    \/\/ and should time out.  An event should be generated.\n-                    sc1.configureBlocking(false);\n-                    SelectionKey key = sc1.register(sel, SelectionKey.OP_READ);\n-                    int n = sel.select(2);\n-                    Asserts.assertTrue(n == 0);\n-\n-                    \/\/ write bytes to other end of connection\n-                    ByteBuffer msg = ByteBuffer.wrap(\"hello\".getBytes(\"UTF-8\"));\n-                    int nwrote = sc2.write(msg);\n-                    Asserts.assertTrue(nwrote >= 0);\n-\n-                    \/\/ channel should be selected, but no events should be generated\n-                    \/\/ due to high threshold\n-                    n = sel.select();\n-                    Asserts.assertTrue(n == 1);\n-                }\n-                recording.stop();\n-\n-                List<RecordedEvent> events = Events.fromRecording(recording);\n-                Asserts.assertEquals(events.size(), 1);\n-                Asserts.assertTrue(events.get(0).getInt(COUNT_FIELD) == 0);\n-                Asserts.assertTrue(events.get(0).getLong(TIMEOUT_FIELD) == 2);\n-            }\n-        }\n-    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestSelectorSelectEvent.java","additions":1,"deletions":42,"binary":false,"changes":43,"status":"modified"}]}