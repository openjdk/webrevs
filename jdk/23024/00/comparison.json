{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2555,5 +2555,9 @@\n-    \/\/ The final value should be in integer range since the loop\n-    \/\/ is counted and the limit was checked for overflow.\n-    \/\/ Assert checks for overflow only if all input nodes are ConINodes, as during CCP\n-    \/\/ there might be a temporary overflow from PhiNodes see JDK-8309266\n-    assert((in(Init)->is_ConI() && in(Limit)->is_ConI() && in(Stride)->is_ConI()) ? final_con == (jlong)final_int : true, \"final value should be integer\");\n+    \/\/ The final value should be in integer range in almost all cases,\n+    \/\/ since the loop is counted and the limit was checked for overflow.\n+    \/\/ There some exceptions, for example:\n+    \/\/ - During CCP, there might be a temporary overflow from PhiNodes, see JDK-8309266.\n+    \/\/ - During PhaseIdealLoop::split_thru_phi, the LoopLimitNode floats possibly far above\n+    \/\/   the loop and its predicates, and we might get constants on one side of the phi that\n+    \/\/   would lead to overflows. Such a code path would never lead us to enter the loop\n+    \/\/   because of the loop limit overflow check that happens after the LoopLimitNode\n+    \/\/   computation with overflow, but before we enter the loop, see JDK-8335747.\n@@ -2582,3 +2586,0 @@\n-  if (in(Init)->is_Con() && in(Limit)->is_Con())\n-    return nullptr;  \/\/ Value\n-\n@@ -2588,0 +2589,1 @@\n+    phase->C->record_for_post_loop_opts_igvn(this);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8335747\n+ * @summary Integer overflow in LoopLimit::Value during PhaseIdealLoop::split_thru_phi\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=compileonly,TestLoopLimitOverflowDuringSplitThruPhi::test\n+ *                   compiler.loopopts.TestLoopLimitOverflowDuringSplitThruPhi\n+ * @run driver compiler.loopopts.TestLoopLimitOverflowDuringSplitThruPhi\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestLoopLimitOverflowDuringSplitThruPhi {\n+    public static void main(String[] args) {\n+        int[] a = new int[1005];\n+        for (int i = 0; i < 20_000; i++) {\n+            test(i % 2 == 0, a);\n+        }\n+    }\n+\n+    static void test(boolean flag, int[] a) {\n+        int x = flag ? 1000 : 2147483647;\n+        \/\/ Creates a Phi(1000, 2147483647)\n+\n+        \/\/ We do loop-predication, and add a\n+        \/\/   LoopLimitNode(init=0, limit=x, stride=4)\n+        \/\/\n+        \/\/ Later, we find try to PhaseIdealLoop::split_thru_phi\n+        \/\/ the LoopLimitNode, through the Phi(1000, 2147483647).\n+        \/\/\n+        \/\/ This creates a temporary\n+        \/\/   LoopLimitNode(init=0, limit=2147483647, stride=4)\n+        \/\/\n+        \/\/ And then we get this:\n+        \/\/   init_con 0\n+        \/\/   limit_con 2147483647\n+        \/\/   stride_con 4\n+        \/\/   trip_count 536870912\n+        \/\/   final_int -2147483648\n+        \/\/   final_con 2147483648\n+        \/\/\n+        for (int i = 0; i < x; i+=4 \/* works for at least 2..64 *\/) {\n+            \/\/ Break before going out of bounds\n+            \/\/ but with quadratic check to not affect limit.\n+            if (i * i > 1000_000) { return; }\n+            a[i] = 34;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLoopLimitOverflowDuringSplitThruPhi.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}