{"files":[{"patch":"@@ -195,1 +195,0 @@\n-  log_debug(nmt)(\"containing rgn: base=\" INTPTR_FORMAT, p2i(rmr.base()));\n@@ -216,2 +215,0 @@\n-    log_info(nmt)(\"region in walker vmem, base: \" INTPTR_FORMAT \" size: %zu , %s, committed: %zu\",\n-                  p2i(rgn.base()), rgn.size(), rgn.tag_name(), rgn.committed_size());\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-\/\/ VirtualMemoryTracker (VMT) is the internal class of NMT that only the MemTracker class uses it for performing the NMT operations.\n+\/\/ VirtualMemoryTracker (VMT) is an internal class of the MemTracker.\n@@ -41,1 +41,1 @@\n-\/\/ The memory operations of Reserve\/Commit\/Uncommit\/Release (RCUR) are tracked by updating\/inserting\/deleting the nodes in the tree. When an operation\n+\/\/ The memory operations of Reserve\/Commit\/Uncommit\/Release are tracked by updating\/inserting\/deleting the nodes in the tree. When an operation\n@@ -124,9 +124,0 @@\n-  inline void clean() {\n-\n-    for (int index = 0; index < mt_number_of_tags; index ++) {\n-      if (index != NMTUtil::tag_to_index(mtThreadStack)) {\n-        _virtual_memory[index] = VirtualMemory();\n-      }\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"}]}