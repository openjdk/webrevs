{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,1 +135,0 @@\n-        SRCZIP := $(SUPPORT_OUTPUTDIR)\/demos\/image\/$$($1_DEMO_SUBDIR)\/$1\/src.zip, \\\n@@ -141,0 +140,8 @@\n+\n+    $$(eval $$(call SetupZipArchive, ZIP_SRC_DEMO_$1, \\\n+        SRC := $$($1_MAIN_SRC) $$($1_EXTRA_SRC_DIR), \\\n+        ZIP := $(SUPPORT_OUTPUTDIR)\/demos\/image\/$$($1_DEMO_SUBDIR)\/$1\/src.zip, \\\n+        EXCLUDE_FILES := $$($1_EXCLUDE_FILES), \\\n+    ))\n+\n+    $1 += $$(ZIP_SRC_DEMO_$1)\n","filename":"make\/CompileDemos.gmk","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,7 @@\n+            ifneq ($$(word 2, $$(matching_confs)), )\n+              # Don't repeat this output on make restarts caused by including\n+              # generated files.\n+              ifeq ($$(MAKE_RESTARTS), )\n+                $$(info Using exact match for CONF=$$(CONF) (other matches are possible))\n+              endif\n+            endif\n@@ -216,5 +223,0 @@\n-            # Don't repeat this output on make restarts caused by including\n-            # generated files.\n-            ifeq ($$(MAKE_RESTARTS), )\n-              $$(info Using exact match for CONF=$$(CONF) (other matches are possible))\n-            endif\n","filename":"make\/InitSupport.gmk","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+  orig_topdir=\"$TOPDIR\"\n@@ -90,0 +91,5 @@\n+  if test \"x$TOPDIR\" != \"x$orig_topdir\"; then\n+    AC_MSG_WARN([Your top dir was originally represented as $orig_topdir,])\n+    AC_MSG_WARN([but after rewriting it became $TOPDIR.])\n+    AC_MSG_WARN([This typically means you have characters like space in the path, which can cause all kind of trouble.])\n+  fi\n","filename":"make\/autoconf\/basic.m4","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,1 +80,4 @@\n-      if test \"x$imported_path\" != \"x$path\"; then\n+      [ imported_path_lower=`$ECHO $imported_path | $TR '[:upper:]' '[:lower:]'` ]\n+      [ orig_path_lower=`$ECHO $path | $TR '[:upper:]' '[:lower:]'` ]\n+      # If only case differs, keep original path\n+      if test \"x$imported_path_lower\" != \"x$orig_path_lower\"; then\n@@ -360,0 +363,2 @@\n+        # Make sure we add fixpath if needed\n+        UTIL_FIXUP_EXECUTABLE($1)\n","filename":"make\/autoconf\/util_paths.m4","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,1 @@\n-# Java compilation needs SetupJarArchive and\/or SetupZipArchive, if we're\n-# generating a jar file or a source zip.\n+# Java compilation needs SetupJarArchive if we're generating a jar file\n@@ -38,1 +37,0 @@\n-include ZipArchive.gmk\n@@ -159,1 +157,0 @@\n-#   SRCZIP Create a src.zip based on the found sources and copied files.\n@@ -532,13 +529,0 @@\n-\n-    # Check if a srczip was specified, then setup the rules for the srczip.\n-    ifneq ($$($1_SRCZIP), )\n-      $$(eval $$(call SetupZipArchive, ZIP_ARCHIVE_$1, \\\n-          SRC := $$($1_SRC), \\\n-          ZIP := $$($1_SRCZIP), \\\n-          INCLUDES := $$($1_INCLUDES), \\\n-          EXCLUDES := $$($1_EXCLUDES), \\\n-          EXCLUDE_FILES := $$($1_EXCLUDE_FILES)))\n-\n-      # Add zip to target list\n-      $1 += $$($1_SRCZIP)\n-    endif\n","filename":"make\/common\/JavaCompilation.gmk","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,1 +256,2 @@\n-            EXTRA_CXXFLAGS := -Fp$$($1_PCH_FILE) -Yc$$(notdir $$($1_PRECOMPILED_HEADER)), \\\n+            EXTRA_CXXFLAGS := -I$$(dir $$($1_PRECOMPILED_HEADER)) -Fp$$($1_PCH_FILE) \\\n+                -Yc$$(notdir $$($1_PRECOMPILED_HEADER)), \\\n@@ -260,1 +261,2 @@\n-            -Fp$$($1_PCH_FILE) -Yu$$(notdir $$($1_PRECOMPILED_HEADER))\n+            -FI$$(notdir $$($1_PRECOMPILED_HEADER)) -Fp$$($1_PCH_FILE) \\\n+            -Yu$$(notdir $$($1_PRECOMPILED_HEADER))\n@@ -274,1 +276,2 @@\n-          $1_USE_PCH_FLAGS := -I$$($1_OBJECT_DIR)\/precompiled\n+          $1_USE_PCH_FLAGS := -I$$($1_OBJECT_DIR)\/precompiled \\\n+              -include $$(notdir $$($1_PRECOMPILED_HEADER))\n","filename":"make\/common\/native\/CompileFile.gmk","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,7 +40,2 @@\n-    ifeq ($(TOOLCHAIN_TYPE), clang)\n-      ADLC_LDFLAGS += -m64\n-      ADLC_CFLAGS := -fno-rtti -fexceptions -ffunction-sections -m64 -DAIX -mcpu=pwr8\n-    else\n-      ADLC_LDFLAGS += -q64\n-      ADLC_CFLAGS := -qnortti -qeh -q64 -DAIX\n-    endif\n+    ADLC_LDFLAGS += -m64\n+    ADLC_CFLAGS := -fno-rtti -fexceptions -ffunction-sections -m64 -DAIX -mcpu=pwr8\n","filename":"make\/hotspot\/gensrc\/GensrcAdlc.gmk","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-    -I$(TOPDIR)\/src\/hotspot\/share\/precompiled \\\n@@ -96,5 +95,0 @@\n-# -DDONT_USE_PRECOMPILED_HEADER will exclude all includes in precompiled.hpp.\n-ifeq ($(USE_PRECOMPILED_HEADER), false)\n-  JVM_CFLAGS += -DDONT_USE_PRECOMPILED_HEADER\n-endif\n-\n","filename":"make\/hotspot\/lib\/JvmFlags.gmk","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-      CFLAGS := $(SVE_CFLAGS), \\\n+      vector_math_sve.c_CFLAGS := $(SVE_CFLAGS), \\\n","filename":"make\/modules\/jdk.incubator.vector\/Lib.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,0 @@\n-    DISABLED_WARNINGS := try deprecation rawtypes unchecked serial cast removal preview restricted dangling-doc-comments, \\\n","filename":"make\/test\/BuildTestLib.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/abstractInterpreter_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/bytecodes_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_FpuStackSim_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_FrameMap_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIR_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2010, Oracle and\/or its affiliates. All rights reserved. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LinearScan_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_CodeStubs_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_init_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/compiledIC_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/downcallLinker_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/foreignGlobals_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetNMethod_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/cardTableBarrierSetAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/modRefBarrierSetAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zAddress_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zBarrierSetAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/icache_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/immediate_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/interpreterRT_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/jniFastGetField_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/jvmciCodeInstaller_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_aes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,0 @@\n-#include \"precompiled.hpp\"\n-\n-#include \"asm\/assembler.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_chacha.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-\/* Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/* Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_trig.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/methodHandles_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/registerMap_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/relocInfo_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/runtime_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/stubRoutines_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/upcallLinker_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/vmreg_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/vtableStubs_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/abstractInterpreter_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c1_CodeStubs_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c1_FrameMap_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIR_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c1_LinearScan_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c1_MacroAssembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c1_Runtime1_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/c2_MacroAssembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/compiledIC_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/downcallLinker_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/foreignGlobals_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/gc\/g1\/g1BarrierSetAssembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetAssembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetNMethod_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/cardTableBarrierSetAssembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/modRefBarrierSetAssembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/icache_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/interpreterRT_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/jniFastGetField_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/methodHandles_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/nativeInst_arm_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/register_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/relocInfo_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/runtime_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/stubGenerator_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/stubRoutines_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/upcallLinker_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/vmreg_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/vtableStubs_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/abstractInterpreter_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_CodeStubs_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_FrameMap_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIR_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LinearScan_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_Runtime1_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c2_CodeStubs_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c2_MacroAssembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c2_init_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/compiledIC_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/compressedKlass_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/downcallLinker_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/foreignGlobals_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetNMethod_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/cardTableBarrierSetAssembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/modRefBarrierSetAssembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zAddress_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zBarrierSetAssembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/icache_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/interpreterRT_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/jniFastGetField_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/methodHandles_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/register_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/relocInfo_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/runtime_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/stubRoutines_ppc_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/upcallLinker_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/vmreg_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/vtableStubs_ppc_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/abstractInterpreter_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -555,18 +555,0 @@\n-#define INSN(NAME, op, funct3)                                                                     \\\n-  void NAME(FloatRegister Rd, Register Rs, const int32_t offset) {                                 \\\n-    guarantee(is_simm12(offset), \"offset is invalid.\");                                            \\\n-    unsigned insn = 0;                                                                             \\\n-    uint32_t val = offset & 0xfff;                                                                 \\\n-    patch((address)&insn, 6, 0, op);                                                               \\\n-    patch((address)&insn, 14, 12, funct3);                                                         \\\n-    patch_reg((address)&insn, 15, Rs);                                                             \\\n-    patch_reg((address)&insn, 7, Rd);                                                              \\\n-    patch((address)&insn, 31, 20, val);                                                            \\\n-    emit(insn);                                                                                    \\\n-  }\n-\n-  INSN(flw,  0b0000111, 0b010);\n-  INSN(_fld, 0b0000111, 0b011);\n-\n-#undef INSN\n-\n@@ -816,20 +798,0 @@\n-#define INSN(NAME, op, funct5, funct7)                                                      \\\n-  void NAME(FloatRegister Rd, FloatRegister Rs1, RoundingMode rm = rne) {                   \\\n-    unsigned insn = 0;                                                                      \\\n-    patch((address)&insn, 6, 0, op);                                                        \\\n-    patch((address)&insn, 14, 12, rm);                                                      \\\n-    patch((address)&insn, 24, 20, funct5);                                                  \\\n-    patch((address)&insn, 31, 25, funct7);                                                  \\\n-    patch_reg((address)&insn, 7, Rd);                                                       \\\n-    patch_reg((address)&insn, 15, Rs1);                                                     \\\n-    emit(insn);                                                                             \\\n-  }\n-\n-  INSN(fsqrt_s,  0b1010011, 0b00000, 0b0101100);\n-  INSN(fsqrt_d,  0b1010011, 0b00000, 0b0101101);\n-  INSN(fcvt_s_h, 0b1010011, 0b00010, 0b0100000);\n-  INSN(fcvt_h_s, 0b1010011, 0b00000, 0b0100010);\n-  INSN(fcvt_s_d, 0b1010011, 0b00001, 0b0100000);\n-  INSN(fcvt_d_s, 0b1010011, 0b00000, 0b0100001);\n-#undef INSN\n-\n@@ -931,62 +893,30 @@\n-\/\/ Float and Double Rigster Instruction\n-#define INSN(NAME, op, funct2)                                                                                     \\\n-  void NAME(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, FloatRegister Rs3, RoundingMode rm = rne) {    \\\n-    unsigned insn = 0;                                                                                             \\\n-    patch((address)&insn, 6, 0, op);                                                                               \\\n-    patch((address)&insn, 14, 12, rm);                                                                             \\\n-    patch((address)&insn, 26, 25, funct2);                                                                         \\\n-    patch_reg((address)&insn, 7, Rd);                                                                              \\\n-    patch_reg((address)&insn, 15, Rs1);                                                                            \\\n-    patch_reg((address)&insn, 20, Rs2);                                                                            \\\n-    patch_reg((address)&insn, 27, Rs3);                                                                            \\\n-    emit(insn);                                                                                                    \\\n-  }\n-\n-  INSN(fmadd_s,   0b1000011,  0b00);\n-  INSN(fmsub_s,   0b1000111,  0b00);\n-  INSN(fnmsub_s,  0b1001011,  0b00);\n-  INSN(fnmadd_s,  0b1001111,  0b00);\n-  INSN(fmadd_d,   0b1000011,  0b01);\n-  INSN(fmsub_d,   0b1000111,  0b01);\n-  INSN(fnmsub_d,  0b1001011,  0b01);\n-  INSN(fnmadd_d,  0b1001111,  0b01);\n-\n-#undef INSN\n-\n-\/\/ Float and Double Rigster Instruction\n-#define INSN(NAME, op, funct3, funct7)                                        \\\n-  void NAME(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {         \\\n-    unsigned insn = 0;                                                        \\\n-    patch((address)&insn, 6, 0, op);                                          \\\n-    patch((address)&insn, 14, 12, funct3);                                    \\\n-    patch((address)&insn, 31, 25, funct7);                                    \\\n-    patch_reg((address)&insn, 7, Rd);                                         \\\n-    patch_reg((address)&insn, 15, Rs1);                                       \\\n-    patch_reg((address)&insn, 20, Rs2);                                       \\\n-    emit(insn);                                                               \\\n-  }\n-\n-  INSN(fsgnj_s,  0b1010011, 0b000, 0b0010000);\n-  INSN(fsgnjn_s, 0b1010011, 0b001, 0b0010000);\n-  INSN(fsgnjx_s, 0b1010011, 0b010, 0b0010000);\n-  INSN(fmin_s,   0b1010011, 0b000, 0b0010100);\n-  INSN(fmax_s,   0b1010011, 0b001, 0b0010100);\n-  INSN(fsgnj_d,  0b1010011, 0b000, 0b0010001);\n-  INSN(fsgnjn_d, 0b1010011, 0b001, 0b0010001);\n-  INSN(fsgnjx_d, 0b1010011, 0b010, 0b0010001);\n-  INSN(fmin_d,   0b1010011, 0b000, 0b0010101);\n-  INSN(fmax_d,   0b1010011, 0b001, 0b0010101);\n-\n-#undef INSN\n-\n-\/\/ Float and Double Rigster Arith Instruction\n-#define INSN(NAME, op, funct3, funct7)                                    \\\n-  void NAME(Register Rd, FloatRegister Rs1, FloatRegister Rs2) {          \\\n-    unsigned insn = 0;                                                    \\\n-    patch((address)&insn, 6, 0, op);                                      \\\n-    patch((address)&insn, 14, 12, funct3);                                \\\n-    patch((address)&insn, 31, 25, funct7);                                \\\n-    patch_reg((address)&insn, 7, Rd);                                     \\\n-    patch_reg((address)&insn, 15, Rs1);                                   \\\n-    patch_reg((address)&insn, 20, Rs2);                                   \\\n-    emit(insn);                                                           \\\n+\/\/ ==========================\n+\/\/ Floating Point Instructions\n+\/\/ ==========================\n+  static constexpr uint32_t OP_FP_MAJOR = 0b1010011;\n+\n+  enum FmtPrecision : uint8_t {\n+    S_32_sp  = 0b00,\n+    D_64_dp  = 0b01,\n+    H_16_hp  = 0b10,\n+    Q_128_qp = 0b11\n+  };\n+\n+ private:\n+\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(uint8_t Rd, uint8_t Rs1, uint8_t Rs2, RoundingMode rm) {\n+    assert(Fmt != H_16_hp || UseZfh || UseZfhmin, \"No half precision enabled\");\n+    assert_cond(Fmt != Q_128_qp);\n+    guarantee(is_uimm3(rm), \"Rounding mode is out of validity\");\n+    guarantee(is_uimm2(Fmt), \"FMT is out of validity\");\n+    guarantee(is_uimm5(funct5), \"Funct5 is out of validity\");\n+    uint32_t insn = 0;\n+    patch((address)&insn,   6, 0, OP_FP_MAJOR);\n+    patch((address)&insn, 11,  7, Rd);\n+    patch((address)&insn, 14, 12, rm);\n+    patch((address)&insn, 19, 15, Rs1);\n+    patch((address)&insn, 24, 20, Rs2);\n+    patch((address)&insn, 26, 25, Fmt);\n+    patch((address)&insn, 31, 27, funct5);\n+    emit(insn);\n@@ -995,7 +925,4 @@\n-  INSN(feq_s,    0b1010011, 0b010, 0b1010000);\n-  INSN(flt_s,    0b1010011, 0b001, 0b1010000);\n-  INSN(fle_s,    0b1010011, 0b000, 0b1010000);\n-  INSN(feq_d,    0b1010011, 0b010, 0b1010001);\n-  INSN(fle_d,    0b1010011, 0b000, 0b1010001);\n-  INSN(flt_d,    0b1010011, 0b001, 0b1010001);\n-#undef INSN\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, RoundingMode rm) {\n+    fp_base<Fmt, funct5>(Rd->raw_encoding(), Rs1->raw_encoding(), Rs2->raw_encoding(), rm);\n+  }\n@@ -1003,11 +930,3 @@\n-\/\/ Float and Double Arith Instruction\n-#define INSN(NAME, op, funct7)                                                                  \\\n-  void NAME(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, RoundingMode rm = rne) {    \\\n-    unsigned insn = 0;                                                                          \\\n-    patch((address)&insn, 6, 0, op);                                                            \\\n-    patch((address)&insn, 14, 12, rm);                                                          \\\n-    patch((address)&insn, 31, 25, funct7);                                                      \\\n-    patch_reg((address)&insn, 7, Rd);                                                           \\\n-    patch_reg((address)&insn, 15, Rs1);                                                         \\\n-    patch_reg((address)&insn, 20, Rs2);                                                         \\\n-    emit(insn);                                                                                 \\\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, int8_t rm) {\n+    fp_base<Fmt, funct5>(Rd->raw_encoding(), Rs1->raw_encoding(), Rs2->raw_encoding(), (RoundingMode)rm);\n@@ -1016,8 +935,4 @@\n-  INSN(fadd_s,   0b1010011, 0b0000000);\n-  INSN(fsub_s,   0b1010011, 0b0000100);\n-  INSN(fmul_s,   0b1010011, 0b0001000);\n-  INSN(fdiv_s,   0b1010011, 0b0001100);\n-  INSN(fadd_d,   0b1010011, 0b0000001);\n-  INSN(fsub_d,   0b1010011, 0b0000101);\n-  INSN(fmul_d,   0b1010011, 0b0001001);\n-  INSN(fdiv_d,   0b1010011, 0b0001101);\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(Register Rd, FloatRegister Rs1, FloatRegister Rs2, int8_t rm) {\n+    fp_base<Fmt, funct5>(Rd->raw_encoding(), Rs1->raw_encoding(), Rs2->raw_encoding(), (RoundingMode)rm);\n+  }\n@@ -1025,1 +940,5 @@\n-#undef INSN\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(FloatRegister Rd, FloatRegister Rs1, int8_t Rs2, int8_t rm) {\n+    guarantee(is_uimm5(Rs2), \"Rs2 is out of validity\");\n+    fp_base<Fmt, funct5>(Rd->raw_encoding(), Rs1->raw_encoding(), Rs2, (RoundingMode)rm);\n+  }\n@@ -1027,11 +946,3 @@\n-\/\/ Whole Float and Double Conversion Instruction\n-#define INSN(NAME, op, funct5, funct7)                                  \\\n-  void NAME(FloatRegister Rd, Register Rs1, RoundingMode rm = rne) {    \\\n-    unsigned insn = 0;                                                  \\\n-    patch((address)&insn, 6, 0, op);                                    \\\n-    patch((address)&insn, 14, 12, rm);                                  \\\n-    patch((address)&insn, 24, 20, funct5);                              \\\n-    patch((address)&insn, 31, 25, funct7);                              \\\n-    patch_reg((address)&insn, 7, Rd);                                   \\\n-    patch_reg((address)&insn, 15, Rs1);                                 \\\n-    emit(insn);                                                         \\\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(FloatRegister Rd, Register Rs1, FloatRegister Rs2, RoundingMode rm) {\n+    fp_base<Fmt, funct5>(Rd->raw_encoding(), Rs1->raw_encoding(), Rs2->raw_encoding(), rm);\n@@ -1040,8 +951,5 @@\n-  INSN(fcvt_s_w,   0b1010011, 0b00000, 0b1101000);\n-  INSN(fcvt_s_wu,  0b1010011, 0b00001, 0b1101000);\n-  INSN(fcvt_s_l,   0b1010011, 0b00010, 0b1101000);\n-  INSN(fcvt_s_lu,  0b1010011, 0b00011, 0b1101000);\n-  INSN(fcvt_d_w,   0b1010011, 0b00000, 0b1101001);\n-  INSN(fcvt_d_wu,  0b1010011, 0b00001, 0b1101001);\n-  INSN(fcvt_d_l,   0b1010011, 0b00010, 0b1101001);\n-  INSN(fcvt_d_lu,  0b1010011, 0b00011, 0b1101001);\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(Register Rd, FloatRegister Rs1, uint8_t Rs2, RoundingMode rm) {\n+    guarantee(is_uimm5(Rs2), \"Rs2 is out of validity\");\n+    fp_base<Fmt, funct5>(Rd->raw_encoding(), Rs1->raw_encoding(), Rs2, rm);\n+  }\n@@ -1049,1 +957,5 @@\n-#undef INSN\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(Register Rd, FloatRegister Rs1, uint8_t Rs2, uint8_t rm) {\n+    guarantee(is_uimm5(Rs2), \"Rs2 is out of validity\");\n+    fp_base<Fmt, funct5>(Rd->raw_encoding(), Rs1->raw_encoding(), Rs2, (RoundingMode)rm);\n+  }\n@@ -1051,11 +963,4 @@\n-\/\/ Float and Double Conversion Instruction\n-#define INSN(NAME, op, funct5, funct7)                                  \\\n-  void NAME(Register Rd, FloatRegister Rs1, RoundingMode rm = rtz) {    \\\n-    unsigned insn = 0;                                                  \\\n-    patch((address)&insn, 6, 0, op);                                    \\\n-    patch((address)&insn, 14, 12, rm);                                  \\\n-    patch((address)&insn, 24, 20, funct5);                              \\\n-    patch((address)&insn, 31, 25, funct7);                              \\\n-    patch_reg((address)&insn, 7, Rd);                                   \\\n-    patch_reg((address)&insn, 15, Rs1);                                 \\\n-    emit(insn);                                                         \\\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(FloatRegister Rd, Register Rs1, uint8_t Rs2, RoundingMode rm) {\n+    guarantee(is_uimm5(Rs2), \"Rs2 is out of validity\");\n+    fp_base<Fmt, funct5>(Rd->raw_encoding(), Rs1->raw_encoding(), Rs2, rm);\n@@ -1064,48 +969,7 @@\n-  INSN(fcvt_w_s,   0b1010011, 0b00000, 0b1100000);\n-  INSN(fcvt_l_s,   0b1010011, 0b00010, 0b1100000);\n-  INSN(fcvt_wu_s,  0b1010011, 0b00001, 0b1100000);\n-  INSN(fcvt_lu_s,  0b1010011, 0b00011, 0b1100000);\n-  INSN(fcvt_w_d,   0b1010011, 0b00000, 0b1100001);\n-  INSN(fcvt_wu_d,  0b1010011, 0b00001, 0b1100001);\n-  INSN(fcvt_l_d,   0b1010011, 0b00010, 0b1100001);\n-  INSN(fcvt_lu_d,  0b1010011, 0b00011, 0b1100001);\n-\n-#undef INSN\n-\n-\/\/ Float and Double Move Instruction\n-#define INSN(NAME, op, funct3, funct5, funct7)       \\\n-  void NAME(FloatRegister Rd, Register Rs1) {        \\\n-    unsigned insn = 0;                               \\\n-    patch((address)&insn, 6, 0, op);                 \\\n-    patch((address)&insn, 14, 12, funct3);           \\\n-    patch((address)&insn, 20, funct5);               \\\n-    patch((address)&insn, 31, 25, funct7);           \\\n-    patch_reg((address)&insn, 7, Rd);                \\\n-    patch_reg((address)&insn, 15, Rs1);              \\\n-    emit(insn);                                      \\\n-  }\n-\n-  INSN(fmv_h_x,  0b1010011, 0b000, 0b00000, 0b1111010);\n-  INSN(fmv_w_x,  0b1010011, 0b000, 0b00000, 0b1111000);\n-  INSN(fmv_d_x,  0b1010011, 0b000, 0b00000, 0b1111001);\n-\n-#undef INSN\n-\n-enum fclass_mask {\n-  minf       = 1 << 0,   \/\/ negative infinite\n-  mnorm      = 1 << 1,   \/\/ negative normal number\n-  msubnorm   = 1 << 2,   \/\/ negative subnormal number\n-  mzero      = 1 << 3,   \/\/ negative zero\n-  pzero      = 1 << 4,   \/\/ positive zero\n-  psubnorm   = 1 << 5,   \/\/ positive subnormal number\n-  pnorm      = 1 << 6,   \/\/ positive normal number\n-  pinf       = 1 << 7,   \/\/ positive infinite\n-  snan       = 1 << 8,   \/\/ signaling NaN\n-  qnan       = 1 << 9,   \/\/ quiet NaN\n-  zero       = mzero    | pzero,\n-  subnorm    = msubnorm | psubnorm,\n-  norm       = mnorm    | pnorm,\n-  inf        = minf     | pinf,\n-  nan        = snan     | qnan,\n-  finite     = zero     | subnorm   | norm,\n-};\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(FloatRegister Rd, Register Rs1, uint8_t Rs2, int8_t rm) {\n+    guarantee(is_uimm5(Rs2), \"Rs2 is out of validity\");\n+    fp_base<Fmt, funct5>(Rd->raw_encoding(), Rs1->raw_encoding(), Rs2, (RoundingMode)rm);\n+  }\n+\n+ public:\n@@ -1113,11 +977,21 @@\n-\/\/ Float and Double Conversion\/Classify Instruction\n-#define INSN(NAME, op, funct3, funct5, funct7)            \\\n-  void NAME(Register Rd, FloatRegister Rs1) {             \\\n-    unsigned insn = 0;                                    \\\n-    patch((address)&insn, 6, 0, op);                      \\\n-    patch((address)&insn, 14, 12, funct3);                \\\n-    patch((address)&insn, 20, funct5);                    \\\n-    patch((address)&insn, 31, 25, funct7);                \\\n-    patch_reg((address)&insn, 7, Rd);                     \\\n-    patch_reg((address)&insn, 15, Rs1);                   \\\n-    emit(insn);                                           \\\n+  enum FClassBits {\n+    minf       = 1 << 0,   \/\/ negative infinite\n+    mnorm      = 1 << 1,   \/\/ negative normal number\n+    msubnorm   = 1 << 2,   \/\/ negative subnormal number\n+    mzero      = 1 << 3,   \/\/ negative zero\n+    pzero      = 1 << 4,   \/\/ positive zero\n+    psubnorm   = 1 << 5,   \/\/ positive subnormal number\n+    pnorm      = 1 << 6,   \/\/ positive normal number\n+    pinf       = 1 << 7,   \/\/ positive infinite\n+    snan       = 1 << 8,   \/\/ signaling NaN\n+    qnan       = 1 << 9,   \/\/ quiet NaN\n+    zero       = mzero    | pzero,\n+    subnorm    = msubnorm | psubnorm,\n+    norm       = mnorm    | pnorm,\n+    inf        = minf     | pinf,\n+    nan        = snan     | qnan,\n+    finite     = zero     | subnorm   | norm,\n+  };\n+\n+  void fsqrt_s(FloatRegister Rd, FloatRegister Rs1, RoundingMode rm = rne) {\n+    fp_base<S_32_sp, 0b01011>(Rd, Rs1, 0b00000, rm);\n@@ -1126,6 +1000,3 @@\n-  INSN(fclass_h, 0b1010011, 0b001, 0b00000, 0b1110010);\n-  INSN(fclass_s, 0b1010011, 0b001, 0b00000, 0b1110000);\n-  INSN(fclass_d, 0b1010011, 0b001, 0b00000, 0b1110001);\n-  INSN(fmv_x_h,  0b1010011, 0b000, 0b00000, 0b1110010);\n-  INSN(fmv_x_w,  0b1010011, 0b000, 0b00000, 0b1110000);\n-  INSN(fmv_x_d,  0b1010011, 0b000, 0b00000, 0b1110001);\n+  void fsqrt_d(FloatRegister Rd, FloatRegister Rs1, RoundingMode rm = rne) {\n+    fp_base<D_64_dp, 0b01011>(Rd, Rs1, 0b00000, rm);\n+  }\n@@ -1133,1 +1004,291 @@\n-#undef INSN\n+  void fcvt_s_d(FloatRegister Rd, FloatRegister Rs1, RoundingMode rm = rne) {\n+    fp_base<S_32_sp, 0b01000>(Rd, Rs1, 0b00001, rm);\n+  }\n+\n+  void fcvt_d_s(FloatRegister Rd, FloatRegister Rs1, RoundingMode rm = rne) {\n+    fp_base<D_64_dp, 0b01000>(Rd, Rs1, 0b00000, rm);\n+  }\n+\n+  void fsgnj_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<S_32_sp, 0b00100>(Rd, Rs1, Rs2, 0b000);\n+  }\n+\n+  void fsgnjn_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<S_32_sp, 0b00100>(Rd, Rs1, Rs2, 0b001);\n+  }\n+\n+  void fsgnjx_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<S_32_sp, 0b00100>(Rd, Rs1, Rs2, 0b010);\n+  }\n+\n+  void fmin_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<S_32_sp, 0b00101>(Rd, Rs1, Rs2, 0b000);\n+  }\n+\n+  void fmax_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<S_32_sp, 0b00101>(Rd, Rs1, Rs2, 0b001);\n+  }\n+\n+  void fsgnj_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<D_64_dp, 0b00100>(Rd, Rs1, Rs2, 0b000);\n+  }\n+\n+  void fsgnjn_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<D_64_dp, 0b00100>(Rd, Rs1, Rs2, 0b001);\n+  }\n+\n+  void fsgnjx_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<D_64_dp, 0b00100>(Rd, Rs1, Rs2, 0b010);\n+  }\n+\n+  void fmin_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<D_64_dp, 0b00101>(Rd, Rs1, Rs2, 0b000);\n+  }\n+\n+  void fmax_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<D_64_dp, 0b00101>(Rd, Rs1, Rs2, 0b001);\n+  }\n+\n+  void feq_s(Register Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<S_32_sp, 0b10100>(Rd, Rs1, Rs2, 0b010);\n+  }\n+\n+  void flt_s(Register Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<S_32_sp, 0b10100>(Rd, Rs1, Rs2, 0b001);\n+  }\n+\n+  void fle_s(Register Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<S_32_sp, 0b10100>(Rd, Rs1, Rs2, 0b000);\n+  }\n+\n+  void feq_d(Register Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<D_64_dp, 0b10100>(Rd, Rs1, Rs2, 0b010);\n+  }\n+\n+  void fle_d(Register Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<D_64_dp, 0b10100>(Rd, Rs1, Rs2, 0b000);\n+  }\n+\n+  void flt_d(Register Rd, FloatRegister Rs1, FloatRegister Rs2) {\n+    fp_base<D_64_dp, 0b10100>(Rd, Rs1, Rs2, 0b001);\n+  }\n+\n+  void fadd_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, RoundingMode rm = rne) {\n+    fp_base<S_32_sp, 0b00000>(Rd, Rs1, Rs2, rm);\n+  }\n+\n+  void fsub_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, RoundingMode rm = rne) {\n+    fp_base<S_32_sp, 0b00001>(Rd, Rs1, Rs2, rm);\n+  }\n+\n+  void fmul_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, RoundingMode rm = rne) {\n+    fp_base<S_32_sp, 0b00010>(Rd, Rs1, Rs2, rm);\n+  }\n+\n+  void fdiv_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, RoundingMode rm = rne) {\n+    fp_base<S_32_sp, 0b00011>(Rd, Rs1, Rs2, rm);\n+  }\n+\n+  void fadd_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, RoundingMode rm = rne) {\n+    fp_base<D_64_dp, 0b00000>(Rd, Rs1, Rs2, rm);\n+  }\n+\n+  void fsub_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, RoundingMode rm = rne) {\n+    fp_base<D_64_dp, 0b00001>(Rd, Rs1, Rs2, rm);\n+  }\n+\n+  void fmul_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, RoundingMode rm = rne) {\n+    fp_base<D_64_dp, 0b00010>(Rd, Rs1, Rs2, rm);\n+  }\n+\n+  void fdiv_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, RoundingMode rm = rne) {\n+    fp_base<D_64_dp, 0b00011>(Rd, Rs1, Rs2, rm);\n+  }\n+\n+  void fcvt_s_w(FloatRegister Rd, Register Rs1, RoundingMode rm = rne) {\n+    fp_base<S_32_sp, 0b11010>(Rd, Rs1, 0b00000, rm);\n+  }\n+\n+  void fcvt_s_wu(FloatRegister Rd, Register Rs1, RoundingMode rm = rne) {\n+    fp_base<S_32_sp, 0b11010>(Rd, Rs1, 0b00001, rm);\n+  }\n+\n+  void fcvt_s_l(FloatRegister Rd, Register Rs1, RoundingMode rm = rne) {\n+    fp_base<S_32_sp, 0b11010>(Rd, Rs1, 0b00010, rm);\n+  }\n+\n+  void fcvt_s_lu(FloatRegister Rd, Register Rs1, RoundingMode rm = rne) {\n+    fp_base<S_32_sp, 0b11010>(Rd, Rs1, 0b00011, rm);\n+  }\n+\n+  void fcvt_d_w(FloatRegister Rd, Register Rs1, RoundingMode rm = rne) {\n+    fp_base<D_64_dp, 0b11010>(Rd, Rs1, 0b00000, rm);\n+  }\n+\n+  void fcvt_d_wu(FloatRegister Rd, Register Rs1, RoundingMode rm = rne) {\n+    fp_base<D_64_dp, 0b11010>(Rd, Rs1, 0b00001, rm);\n+  }\n+\n+  void fcvt_d_l(FloatRegister Rd, Register Rs1, RoundingMode rm = rne) {\n+    fp_base<D_64_dp, 0b11010>(Rd, Rs1, 0b00010, rm);\n+  }\n+\n+  void fcvt_d_lu(FloatRegister Rd, Register Rs1, RoundingMode rm = rne) {\n+    fp_base<D_64_dp, 0b11010>(Rd, Rs1, 0b00011, rm);\n+  }\n+\n+  void fcvt_w_s(Register Rd, FloatRegister Rs1, RoundingMode rm = rtz) {\n+    fp_base<S_32_sp, 0b11000>(Rd, Rs1, 0b00000, rm);\n+  }\n+\n+  void fcvt_l_s(Register Rd, FloatRegister Rs1, RoundingMode rm = rtz) {\n+    fp_base<S_32_sp, 0b11000>(Rd, Rs1, 0b00010, rm);\n+  }\n+\n+  void fcvt_wu_s(Register Rd, FloatRegister Rs1, RoundingMode rm = rtz) {\n+    fp_base<S_32_sp, 0b11000>(Rd, Rs1, 0b00001, rm);\n+  }\n+\n+  void fcvt_lu_s(Register Rd, FloatRegister Rs1, RoundingMode rm = rtz) {\n+    fp_base<S_32_sp, 0b11000>(Rd, Rs1, 0b00011, rm);\n+  }\n+\n+  void fcvt_w_d(Register Rd, FloatRegister Rs1, RoundingMode rm = rtz) {\n+    fp_base<D_64_dp, 0b11000>(Rd, Rs1, 0b00000, rm);\n+  }\n+\n+  void fcvt_wu_d(Register Rd, FloatRegister Rs1, RoundingMode rm = rtz) {\n+    fp_base<D_64_dp, 0b11000>(Rd, Rs1, 0b00001, rm);\n+  }\n+\n+  void fcvt_l_d(Register Rd, FloatRegister Rs1, RoundingMode rm = rtz) {\n+    fp_base<D_64_dp, 0b11000>(Rd, Rs1, 0b00010, rm);\n+  }\n+\n+  void fcvt_lu_d(Register Rd, FloatRegister Rs1, RoundingMode rm = rtz) {\n+    fp_base<D_64_dp, 0b11000>(Rd, Rs1, 0b00011, rm);\n+  }\n+\n+  void fmv_w_x(FloatRegister Rd, Register Rs1) {\n+    fp_base<S_32_sp, 0b11110>(Rd, Rs1, 0b00000, 0b000);\n+  }\n+\n+  void fmv_d_x(FloatRegister Rd, Register Rs1) {\n+    fp_base<D_64_dp, 0b11110>(Rd, Rs1, 0b00000, 0b000);\n+  }\n+\n+  void fclass_s(Register Rd, FloatRegister Rs1) {\n+    fp_base<S_32_sp, 0b11100>(Rd, Rs1, 0b00000, 0b001);\n+  }\n+\n+  void fclass_d(Register Rd, FloatRegister Rs1) {\n+    fp_base<D_64_dp, 0b11100>(Rd, Rs1, 0b00000, 0b001);\n+  }\n+\n+  void fmv_x_w(Register Rd, FloatRegister Rs1) {\n+    fp_base<S_32_sp, 0b11100>(Rd, Rs1, 0b00000, 0b000);\n+  }\n+\n+  void fmv_x_d(Register Rd, FloatRegister Rs1) {\n+    fp_base<D_64_dp, 0b11100>(Rd, Rs1, 0b00000, 0b000);\n+  }\n+\n+ private:\n+  static constexpr unsigned int OP_LOAD_FP = 0b0000111;\n+\n+  template <int8_t FpWidth>\n+  void fp_load(FloatRegister Rd, Register Rs, const int32_t offset) {\n+    guarantee(is_uimm3(FpWidth), \"Rounding mode is out of validity\");\n+    guarantee(is_simm12(offset), \"offset is invalid.\");\n+    unsigned insn = 0;\n+    uint32_t val = offset & 0xfff;\n+    patch((address)&insn,   6, 0, OP_LOAD_FP);\n+    patch_reg((address)&insn,  7, Rd);\n+    patch((address)&insn, 14, 12, FpWidth);\n+    patch_reg((address)&insn, 15, Rs);\n+    patch((address)&insn, 31, 20, val);\n+    emit(insn);\n+  }\n+\n+ public:\n+\n+  void  flw(FloatRegister Rd, Register Rs, const int32_t offset) { fp_load<0b010>(Rd, Rs, offset); }\n+  void _fld(FloatRegister Rd, Register Rs, const int32_t offset) { fp_load<0b011>(Rd, Rs, offset); }\n+\n+ private:\n+  template <FmtPrecision Fmt, uint8_t OpVal>\n+  void fp_fm(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, FloatRegister Rs3, RoundingMode rm) {\n+    assert_cond(Fmt != Q_128_qp);\n+    guarantee(is_uimm3(rm), \"Rounding mode is out of validity\");\n+    guarantee(is_uimm2(Fmt), \"FMT is out of validity\");\n+    unsigned insn = 0;\n+    patch((address)&insn,   6, 0, OpVal);\n+    patch_reg((address)&insn,  7, Rd);\n+    patch((address)&insn, 14, 12, rm);\n+    patch_reg((address)&insn, 15, Rs1);\n+    patch_reg((address)&insn, 20, Rs2);\n+    patch((address)&insn, 26, 25, Fmt);\n+    patch_reg((address)&insn, 27, Rs3);\n+    emit(insn);\n+  }\n+\n+ public:\n+  void fmadd_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, FloatRegister Rs3, RoundingMode rm = rne)  {\n+    fp_fm<S_32_sp, 0b1000011>(Rd, Rs1, Rs2, Rs3, rm);\n+  }\n+\n+  void fmsub_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, FloatRegister Rs3, RoundingMode rm = rne)  {\n+    fp_fm<S_32_sp, 0b1000111>(Rd, Rs1, Rs2, Rs3, rm);\n+  }\n+\n+  void fnmsub_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, FloatRegister Rs3, RoundingMode rm = rne) {\n+    fp_fm<S_32_sp, 0b1001011>(Rd, Rs1, Rs2, Rs3, rm);\n+  }\n+\n+  void fnmadd_s(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, FloatRegister Rs3, RoundingMode rm = rne) {\n+    fp_fm<S_32_sp, 0b1001111>(Rd, Rs1, Rs2, Rs3, rm);\n+  }\n+\n+  void fmadd_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, FloatRegister Rs3, RoundingMode rm = rne)  {\n+    fp_fm<D_64_dp, 0b1000011>(Rd, Rs1, Rs2, Rs3, rm);\n+  }\n+\n+  void fmsub_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, FloatRegister Rs3, RoundingMode rm = rne)  {\n+    fp_fm<D_64_dp, 0b1000111>(Rd, Rs1, Rs2, Rs3, rm);\n+  }\n+\n+  void fnmsub_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, FloatRegister Rs3, RoundingMode rm = rne) {\n+    fp_fm<D_64_dp, 0b1001011>(Rd, Rs1, Rs2, Rs3, rm);\n+  }\n+\n+  void fnmadd_d(FloatRegister Rd, FloatRegister Rs1, FloatRegister Rs2, FloatRegister Rs3, RoundingMode rm = rne) {\n+    fp_fm<D_64_dp, 0b1001111>(Rd, Rs1, Rs2, Rs3, rm);\n+  }\n+\n+\/\/ --------------  ZFH Instruction Definitions  --------------\n+\/\/ Zfh Standard Extensions for Half-Precision Floating-Point\n+  void fclass_h(Register Rd, FloatRegister Rs1) {\n+    assert_cond(UseZfh);\n+    fp_base<H_16_hp, 0b11100>(Rd, Rs1, 0b00000, 0b001);\n+  }\n+\n+\/\/ Zfh and Zfhmin Half-Precision Floating-Point\n+  void fcvt_s_h(FloatRegister Rd, FloatRegister Rs1, RoundingMode rm = rne) {\n+    assert_cond(UseZfh || UseZfhmin);\n+    fp_base<S_32_sp, 0b01000>(Rd, Rs1, 0b00010, rm);\n+  }\n+\n+  void fcvt_h_s(FloatRegister Rd, FloatRegister Rs1, RoundingMode rm = rne) {\n+    assert_cond(UseZfh || UseZfhmin);\n+    fp_base<H_16_hp, 0b01000>(Rd, Rs1, 0b00000, rm);\n+  }\n+\n+  void fmv_h_x(FloatRegister Rd, Register Rs1) {\n+    assert_cond(UseZfh || UseZfhmin);\n+    fp_base<H_16_hp, 0b11110>(Rd, Rs1, 0b00000, 0b000);\n+  }\n+\n+  void fmv_x_h(Register Rd, FloatRegister Rs1) {\n+    assert_cond(UseZfh || UseZfhmin);\n+    fp_base<H_16_hp, 0b11100>(Rd, Rs1, 0b00000, 0b000);\n+  }\n@@ -3073,8 +3234,18 @@\n-#define INSN(NAME, funct)                                                                    \\\n-  void NAME(Register Rs1) {                                                                  \\\n-    unsigned insn = 0;                                                                       \\\n-    patch((address)&insn, 6,  0, 0b0001111);                                                 \\\n-    patch((address)&insn, 14, 12, 0b010);                                                    \\\n-    patch_reg((address)&insn, 15, Rs1);                                                      \\\n-    patch((address)&insn, 31, 20, funct);                                                    \\\n-    emit(insn);                                                                              \\\n+\/\/ These instruction may be turned off for user space.\n+ private:\n+  enum CBO_FUNCT : unsigned int {\n+    CBO_INVAL = 0b0000000000000,\n+    CBO_CLEAN = 0b0000000000001,\n+    CBO_FLUSH = 0b0000000000010,\n+    CBO_ZERO  = 0b0000000000100\n+  };\n+\n+  template <CBO_FUNCT FUNCT>\n+  void cbo_base(Register Rs1) {\n+    assert((UseZicbom && FUNCT != CBO_ZERO) || UseZicboz, \"sanity\");\n+    unsigned insn = 0;\n+    patch((address)&insn, 6,  0, 0b0001111);\n+    patch((address)&insn, 14, 12, 0b010);\n+    patch_reg((address)&insn, 15, Rs1);\n+    patch((address)&insn, 31, 20, FUNCT);\n+    emit(insn);\n@@ -3083,4 +3254,9 @@\n-  INSN(cbo_inval, 0b0000000000000);\n-  INSN(cbo_clean, 0b0000000000001);\n-  INSN(cbo_flush, 0b0000000000010);\n-  INSN(cbo_zero,  0b0000000000100);\n+  \/\/ This instruction have some security implication.\n+  \/\/ At this time it's not likely to be enabled for user mode.\n+  void cbo_inval(Register Rs1) { cbo_base<CBO_INVAL>(Rs1); }\n+ public:\n+  \/\/ Zicbom\n+  void cbo_clean(Register Rs1) { cbo_base<CBO_CLEAN>(Rs1); }\n+  void cbo_flush(Register Rs1) { cbo_base<CBO_FLUSH>(Rs1); }\n+  \/\/ Zicboz\n+  void cbo_zero(Register Rs1)  { cbo_base<CBO_ZERO>(Rs1); }\n@@ -3088,1 +3264,6 @@\n-#undef INSN\n+ private:\n+  enum PREFETCH_FUNCT : unsigned int {\n+    PREFETCH_I = 0b0000000000000,\n+    PREFETCH_R = 0b0000000000001,\n+    PREFETCH_W = 0b0000000000011\n+  };\n@@ -3090,12 +3271,13 @@\n-#define INSN(NAME, funct)                                                                    \\\n-  void NAME(Register Rs1, int32_t offset) {                                                  \\\n-    guarantee((offset & 0x1f) == 0, \"offset lowest 5 bits must be zero\");                    \\\n-    int32_t upperOffset = offset >> 5;                                                       \\\n-    unsigned insn = 0;                                                                       \\\n-    patch((address)&insn, 6,  0, 0b0010011);                                                 \\\n-    patch((address)&insn, 14, 12, 0b110);                                                    \\\n-    patch_reg((address)&insn, 15, Rs1);                                                      \\\n-    patch((address)&insn, 24, 20, funct);                                                    \\\n-    upperOffset &= 0x7f;                                                                     \\\n-    patch((address)&insn, 31, 25, upperOffset);                                              \\\n-    emit(insn);                                                                              \\\n+  template <PREFETCH_FUNCT FUNCT>\n+  void prefetch_base(Register Rs1, int32_t offset) {\n+    assert_cond(UseZicbop);\n+    guarantee((offset & 0x1f) == 0, \"offset lowest 5 bits must be zero\");\n+    int32_t upperOffset = offset >> 5;\n+    unsigned insn = 0;\n+    patch((address)&insn, 6,  0, 0b0010011);\n+    patch((address)&insn, 14, 12, 0b110);\n+    patch_reg((address)&insn, 15, Rs1);\n+    patch((address)&insn, 24, 20, FUNCT);\n+    upperOffset &= 0x7f;\n+    patch((address)&insn, 31, 25, upperOffset);\n+    emit(insn);\n@@ -3104,5 +3286,5 @@\n-  INSN(prefetch_i, 0b0000000000000);\n-  INSN(prefetch_r, 0b0000000000001);\n-  INSN(prefetch_w, 0b0000000000011);\n-\n-#undef INSN\n+ public:\n+  \/\/ Zicbop\n+  void prefetch_i(Register Rs1, int32_t offset) { prefetch_base<PREFETCH_I>(Rs1, offset); }\n+  void prefetch_r(Register Rs1, int32_t offset) { prefetch_base<PREFETCH_R>(Rs1, offset); }\n+  void prefetch_w(Register Rs1, int32_t offset) { prefetch_base<PREFETCH_W>(Rs1, offset); }\n@@ -3384,0 +3566,1 @@\n+  static bool is_uimm2(uint64_t x);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":437,"deletions":254,"binary":false,"changes":691,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+inline bool Assembler::is_uimm2(uint64_t x) { return is_uimm(x, 2); }\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c1_FrameMap_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arith_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arraycopy_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRGenerator_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIR_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LinearScan_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c2_CodeStubs_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -2062,1 +2061,1 @@\n-  andi(t0, t0, fclass_mask::nan); \/\/ if src1 or src2 is quiet or signaling NaN then return NaN\n+  andi(t0, t0, FClassBits::nan); \/\/ if src1 or src2 is quiet or signaling NaN then return NaN\n@@ -2156,1 +2155,1 @@\n-  andi(t0, t0, fclass_mask::zero | fclass_mask::nan);\n+  andi(t0, t0, FClassBits::zero | FClassBits::nan);\n@@ -2372,1 +2371,1 @@\n-  mv(t0, fclass_mask::zero | fclass_mask::nan);\n+  mv(t0, FClassBits::zero | FClassBits::nan);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/c2_init_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/codeBuffer_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/compiledIC_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/compressedKlass_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/downcallLinker_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/foreignGlobals_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/g1\/g1BarrierSetAssembler_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetNMethod_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/cardTableBarrierSetAssembler_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/modRefBarrierSetAssembler_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zAddress_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zBarrierSetAssembler_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -107,0 +107,1 @@\n+  product(bool, UseZfhmin, false, DIAGNOSTIC, \"Use Zfhmin instructions\")         \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/icache_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/interpreterRT_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/jniFastGetField_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/jvmciCodeInstaller_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n@@ -1336,15 +1335,0 @@\n-\n-#define INSN(NAME, CSR)                       \\\n-  void MacroAssembler::NAME(Register Rd) {    \\\n-    csrr(Rd, CSR);                            \\\n-  }\n-\n-  INSN(rdinstret,  CSR_INSTRET);\n-  INSN(rdcycle,    CSR_CYCLE);\n-  INSN(rdtime,     CSR_TIME);\n-  INSN(frcsr,      CSR_FCSR);\n-  INSN(frrm,       CSR_FRM);\n-  INSN(frflags,    CSR_FFLAGS);\n-\n-#undef INSN\n-\n@@ -1352,0 +1336,4 @@\n+  \/\/ These three are specified in zicntr and are unused.\n+  \/\/ Before adding use-cases add the appropriate hwprobe and flag.\n+  assert(csr != CSR_INSTRET && csr != CSR_CYCLE && csr != CSR_TIME,\n+         \"Not intended for use without enabling zicntr.\");\n@@ -5901,1 +5889,1 @@\n-  andi(tmp, tmp, fclass_mask::nan);                                                       \\\n+  andi(tmp, tmp, FClassBits::nan);                                                        \\\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -629,3 +629,0 @@\n-  void rdinstret(Register Rd);                  \/\/ read instruction-retired counter\n-  void rdcycle(Register Rd);                    \/\/ read cycle counter\n-  void rdtime(Register Rd);                     \/\/ read time\n@@ -639,6 +636,6 @@\n-  void frcsr(Register Rd);                      \/\/ read float-point csr\n-  void fscsr(Register Rd, Register Rs);         \/\/ swap float-point csr\n-  void fscsr(Register Rs);                      \/\/ write float-point csr\n-  void frrm(Register Rd);                       \/\/ read float-point rounding mode\n-  void fsrm(Register Rd, Register Rs);          \/\/ swap float-point rounding mode\n-  void fsrm(Register Rs);                       \/\/ write float-point rounding mode\n+  void frcsr(Register Rd) { csrr(Rd, CSR_FCSR); }; \/\/ read float-point csr\n+  void fscsr(Register Rd, Register Rs);            \/\/ swap float-point csr\n+  void fscsr(Register Rs);                         \/\/ write float-point csr\n+  void frrm(Register Rd) { csrr(Rd, CSR_FRM); };   \/\/ read float-point rounding mode\n+  void fsrm(Register Rd, Register Rs);             \/\/ swap float-point rounding mode\n+  void fsrm(Register Rs);                          \/\/ write float-point rounding mode\n@@ -647,3 +644,3 @@\n-  void frflags(Register Rd);                    \/\/ read float-point exception flags\n-  void fsflags(Register Rd, Register Rs);       \/\/ swap float-point exception flags\n-  void fsflags(Register Rs);                    \/\/ write float-point exception flags\n+  void frflags(Register Rd) { csrr(Rd, CSR_FFLAGS); }; \/\/ read float-point exception flags\n+  void fsflags(Register Rd, Register Rs);              \/\/ swap float-point exception flags\n+  void fsflags(Register Rs);                           \/\/ write float-point exception flags\n@@ -652,0 +649,4 @@\n+  \/\/ Requires Zicntr\n+  void rdinstret(Register Rd) { csrr(Rd, CSR_INSTRET); }; \/\/ read instruction-retired counter\n+  void rdcycle(Register Rd)   { csrr(Rd, CSR_CYCLE); };   \/\/ read cycle counter\n+  void rdtime(Register Rd)    { csrr(Rd, CSR_TIME); };    \/\/ read time\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/methodHandles_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/registerMap_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/register_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/relocInfo_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1921,1 +1921,1 @@\n-      return UseZfh;\n+      return UseZfh || UseZfhmin;\n@@ -7351,1 +7351,1 @@\n-    __ andi(as_Register($dst$$reg), as_Register($dst$$reg), Assembler::fclass_mask::inf);\n+    __ andi(as_Register($dst$$reg), as_Register($dst$$reg), Assembler::FClassBits::inf);\n@@ -7366,1 +7366,1 @@\n-    __ andi(as_Register($dst$$reg), as_Register($dst$$reg), Assembler::fclass_mask::inf);\n+    __ andi(as_Register($dst$$reg), as_Register($dst$$reg), Assembler::FClassBits::inf);\n@@ -7381,1 +7381,1 @@\n-    __ andi(as_Register($dst$$reg), as_Register($dst$$reg), Assembler::fclass_mask::finite);\n+    __ andi(as_Register($dst$$reg), as_Register($dst$$reg), Assembler::FClassBits::finite);\n@@ -7396,1 +7396,1 @@\n-    __ andi(as_Register($dst$$reg), as_Register($dst$$reg), Assembler::fclass_mask::finite);\n+    __ andi(as_Register($dst$$reg), as_Register($dst$$reg), Assembler::FClassBits::finite);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -381,2 +380,0 @@\n-\n-\n","filename":"src\/hotspot\/cpu\/riscv\/runtime_riscv.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/stubRoutines_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/upcallLinker_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -118,0 +118,1 @@\n+  \/\/ Zfhmin Minimal Half-Precision Floating-Point instructions\n@@ -160,0 +161,1 @@\n+  decl(ext_Zfhmin      , \"Zfhmin\"      , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfhmin))      \\\n@@ -161,0 +163,1 @@\n+  decl(ext_Zicntr      , \"Zicntr\"      , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)              \\\n@@ -226,0 +229,1 @@\n+    RV_ENABLE_EXTENSION(UseZfhmin)                  \\\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/vmreg_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/vtableStubs_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/abstractInterpreter_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c1_CodeStubs_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c1_FrameMap_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIR_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c1_LinearScan_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c1_MacroAssembler_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c1_Runtime1_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c2_MacroAssembler_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/c2_init_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/compiledIC_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/compressedKlass_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/downcallLinker_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/foreignGlobals_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/gc\/g1\/g1BarrierSetAssembler_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetAssembler_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetNMethod_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/cardTableBarrierSetAssembler_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/modRefBarrierSetAssembler_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/interpreterRT_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/jniFastGetField_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/methodHandles_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/nativeInst_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/register_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/relocInfo_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/runtime_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/stubRoutines_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/templateTable_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/upcallLinker_s390.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/vmreg_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/vtableStubs_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/abstractInterpreter_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_FpuStackSim_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_FrameMap_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIR_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -652,1 +651,0 @@\n-      op1->set_fpu_stack_size(sim()->stack_size());\n","filename":"src\/hotspot\/cpu\/x86\/c1_LinearScan_x86.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c2_init_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c2_intelJccErratum_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c2_stubGenerator_x86_64_string.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/codeBuffer_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/compiledIC_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/cpu\/x86\/compressedKlass_x86.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/foreignGlobals_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/foreignGlobals_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetNMethod_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/cardTableBarrierSetAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/modRefBarrierSetAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zAddress_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/icache_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/interpreterRT_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/interpreterRT_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/jniFastGetField_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/jniFastGetField_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/jvmciCodeInstaller_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_constants.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_cos.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_exp.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_log.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_log10.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_pow.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_sin.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_tan.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_md5.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_sha.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/peephole_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/rdtsc_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/registerMap_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/relocInfo_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/runtime_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/runtime_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -3023,1 +3022,1 @@\n-  CodeBuffer buffer(name, 2348, 1024);\n+  CodeBuffer buffer(name, 2548, 1024);\n@@ -3089,1 +3088,1 @@\n-    Label no_prefix, not_special;\n+    Label no_prefix, not_special, check_rex_prefix;\n@@ -3093,1 +3092,1 @@\n-    __ jccb(Assembler::notEqual, no_adjust);\n+    __ jcc(Assembler::notEqual, no_adjust);\n@@ -3116,1 +3115,21 @@\n-\n+    \/\/\n+    \/\/ Notes:\n+    \/\/  Format of legacy MAP0 test instruction:-\n+    \/\/  [REX\/REX2] [OPCODE] [ModRM] [SIB] [DISP] [IMM32]\n+    \/\/  o  For safepoint polling instruction \"test %eax,(%rax)\", encoding of first register\n+    \/\/     operand and base register of memory operand is b\/w [0-8), hence we do not require\n+    \/\/     additional REX prefix where REX.B bit stores MSB bit of register encoding, which\n+    \/\/     is why two bytes encoding is sufficient here.\n+    \/\/  o  For safepoint polling instruction like \"test %eax,(%r8)\", register encoding of BASE\n+    \/\/     register of memory operand is 1000, thus we need additional REX prefix in this case,\n+    \/\/     there by adding additional byte to instruction encoding.\n+    \/\/  o  In case BASE register is one of the 32 extended GPR registers available only on targets\n+    \/\/     supporting Intel APX extension, then we need to emit two bytes REX2 prefix to hold\n+    \/\/     most significant two bits of 5 bit register encoding.\n+\n+    if (VM_Version::supports_apx_f()) {\n+      __ cmpb(Address(rbx, 0), Assembler::REX2);\n+      __ jccb(Assembler::notEqual, check_rex_prefix);\n+      __ addptr(rbx, 2);\n+      __ bind(check_rex_prefix);\n+    }\n@@ -3118,1 +3137,1 @@\n-    __ jcc(Assembler::notEqual, no_prefix);\n+    __ jccb(Assembler::notEqual, no_prefix);\n@@ -3131,1 +3150,1 @@\n-    __ jcc(Assembler::above, not_special);\n+    __ jccb(Assembler::above, not_special);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_adler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_aes.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_arraycopy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-#include \"precompiled.hpp\"\n-#include \"asm\/assembler.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_chacha.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_constants.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_cos.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_exp.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_fmod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-#include \"asm\/assembler.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_ghash.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_log.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_poly1305.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_poly_mont.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_pow.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_sha3.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_sin.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_tan.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_tanh.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86_64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/vmreg_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2446,16 +2446,0 @@\n-  enc_class Push_ModD_encoding(regD src0, regD src1) %{\n-    __ subptr(rsp, 8);\n-    __ movdbl(Address(rsp, 0), $src1$$XMMRegister);\n-    __ fld_d(Address(rsp, 0));\n-    __ movdbl(Address(rsp, 0), $src0$$XMMRegister);\n-    __ fld_d(Address(rsp, 0));\n-  %}\n-\n-  enc_class Push_ModF_encoding(regF src0, regF src1) %{\n-    __ subptr(rsp, 4);\n-    __ movflt(Address(rsp, 0), $src1$$XMMRegister);\n-    __ fld_s(Address(rsp, 0));\n-    __ movflt(Address(rsp, 0), $src0$$XMMRegister);\n-    __ fld_s(Address(rsp, 0));\n-  %}\n-\n@@ -2493,14 +2477,0 @@\n-  enc_class Push_Result_Mod_DPR( regDPR src) %{\n-    if ($src$$reg != FPR1L_enc) {\n-      \/\/ fincstp\n-      emit_opcode (masm, 0xD9);\n-      emit_opcode (masm, 0xF7);\n-      \/\/ FXCH FPR1 with src\n-      emit_opcode(masm, 0xD9);\n-      emit_d8(masm, 0xC8-1+$src$$reg );\n-      \/\/ fdecstp\n-      emit_opcode (masm, 0xD9);\n-      emit_opcode (masm, 0xF6);\n-    }\n-  %}\n-\n@@ -2518,22 +2488,0 @@\n-  enc_class emitModDPR() %{\n-    \/\/ fprem must be iterative\n-    \/\/ :: loop\n-    \/\/ fprem\n-    emit_opcode( masm, 0xD9 );\n-    emit_opcode( masm, 0xF8 );\n-    \/\/ wait\n-    emit_opcode( masm, 0x9b );\n-    \/\/ fnstsw ax\n-    emit_opcode( masm, 0xDF );\n-    emit_opcode( masm, 0xE0 );\n-    \/\/ sahf\n-    emit_opcode( masm, 0x9E );\n-    \/\/ jp  ::loop\n-    emit_opcode( masm, 0x0F );\n-    emit_opcode( masm, 0x8A );\n-    emit_opcode( masm, 0xF4 );\n-    emit_opcode( masm, 0xFF );\n-    emit_opcode( masm, 0xFF );\n-    emit_opcode( masm, 0xFF );\n-  %}\n-\n@@ -9804,39 +9752,0 @@\n-instruct modDPR_reg(regDPR dst, regDPR src, eAXRegI rax, eFlagsReg cr) %{\n-  predicate(UseSSE<=1);\n-  match(Set dst (ModD dst src));\n-  effect(KILL rax, KILL cr); \/\/ emitModDPR() uses EAX and EFLAGS\n-\n-  format %{ \"DMOD   $dst,$src\" %}\n-  ins_cost(250);\n-  ins_encode(Push_Reg_Mod_DPR(dst, src),\n-              emitModDPR(),\n-              Push_Result_Mod_DPR(src),\n-              Pop_Reg_DPR(dst));\n-  ins_pipe( pipe_slow );\n-%}\n-\n-instruct modD_reg(regD dst, regD src0, regD src1, eAXRegI rax, eFlagsReg cr) %{\n-  predicate(UseSSE>=2);\n-  match(Set dst (ModD src0 src1));\n-  effect(KILL rax, KILL cr);\n-\n-  format %{ \"SUB    ESP,8\\t # DMOD\\n\"\n-          \"\\tMOVSD  [ESP+0],$src1\\n\"\n-          \"\\tFLD_D  [ESP+0]\\n\"\n-          \"\\tMOVSD  [ESP+0],$src0\\n\"\n-          \"\\tFLD_D  [ESP+0]\\n\"\n-     \"loop:\\tFPREM\\n\"\n-          \"\\tFWAIT\\n\"\n-          \"\\tFNSTSW AX\\n\"\n-          \"\\tSAHF\\n\"\n-          \"\\tJP     loop\\n\"\n-          \"\\tFSTP_D [ESP+0]\\n\"\n-          \"\\tMOVSD  $dst,[ESP+0]\\n\"\n-          \"\\tADD    ESP,8\\n\"\n-          \"\\tFSTP   ST0\\t # Restore FPU Stack\"\n-    %}\n-  ins_cost(250);\n-  ins_encode( Push_ModD_encoding(src0, src1), emitModDPR(), Push_ResultD(dst), PopFPU);\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -10448,53 +10357,0 @@\n-\/\/ Spill to obtain 24-bit precision\n-instruct modFPR24_reg(stackSlotF dst, regFPR src1, regFPR src2, eAXRegI rax, eFlagsReg cr) %{\n-  predicate( UseSSE==0 && Compile::current()->select_24_bit_instr());\n-  match(Set dst (ModF src1 src2));\n-  effect(KILL rax, KILL cr); \/\/ emitModDPR() uses EAX and EFLAGS\n-\n-  format %{ \"FMOD   $dst,$src1,$src2\" %}\n-  ins_encode( Push_Reg_Mod_DPR(src1, src2),\n-              emitModDPR(),\n-              Push_Result_Mod_DPR(src2),\n-              Pop_Mem_FPR(dst));\n-  ins_pipe( pipe_slow );\n-%}\n-\/\/\n-\/\/ This instruction does not round to 24-bits\n-instruct modFPR_reg(regFPR dst, regFPR src, eAXRegI rax, eFlagsReg cr) %{\n-  predicate( UseSSE==0 && !Compile::current()->select_24_bit_instr());\n-  match(Set dst (ModF dst src));\n-  effect(KILL rax, KILL cr); \/\/ emitModDPR() uses EAX and EFLAGS\n-\n-  format %{ \"FMOD   $dst,$src\" %}\n-  ins_encode(Push_Reg_Mod_DPR(dst, src),\n-              emitModDPR(),\n-              Push_Result_Mod_DPR(src),\n-              Pop_Reg_FPR(dst));\n-  ins_pipe( pipe_slow );\n-%}\n-\n-instruct modF_reg(regF dst, regF src0, regF src1, eAXRegI rax, eFlagsReg cr) %{\n-  predicate(UseSSE>=1);\n-  match(Set dst (ModF src0 src1));\n-  effect(KILL rax, KILL cr);\n-  format %{ \"SUB    ESP,4\\t # FMOD\\n\"\n-          \"\\tMOVSS  [ESP+0],$src1\\n\"\n-          \"\\tFLD_S  [ESP+0]\\n\"\n-          \"\\tMOVSS  [ESP+0],$src0\\n\"\n-          \"\\tFLD_S  [ESP+0]\\n\"\n-     \"loop:\\tFPREM\\n\"\n-          \"\\tFWAIT\\n\"\n-          \"\\tFNSTSW AX\\n\"\n-          \"\\tSAHF\\n\"\n-          \"\\tJP     loop\\n\"\n-          \"\\tFSTP_S [ESP+0]\\n\"\n-          \"\\tMOVSS  $dst,[ESP+0]\\n\"\n-          \"\\tADD    ESP,4\\n\"\n-          \"\\tFSTP   ST0\\t # Restore FPU Stack\"\n-    %}\n-  ins_cost(250);\n-  ins_encode( Push_ModF_encoding(src0, src1), emitModDPR(), Push_ResultF(dst,0x4), PopFPU);\n-  ins_pipe( pipe_slow );\n-%}\n-\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":1,"deletions":145,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/abstractInterpreter_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/assembler_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/bytecodeInterpreter_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/compiledIC_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/disassembler_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/downcallLinker_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/foreignGlobals_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/gc\/shared\/barrierSetNMethod_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/icache_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/interpreterRT_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/jniFastGetField_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/methodHandles_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/nativeInst_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/register_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/relocInfo_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/sharedRuntime_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/stack_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/stubGenerator_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/stubRoutines_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/upcallLinker_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/vmreg_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/vtableStubs_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/aix\/attachListener_aix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/aix\/osThread_aix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/aix\/os_perf_aix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/aix\/safepointMechanism_aix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/bsd\/decoder_machO.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zLargePages_bsd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zNUMA_bsd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zPhysicalMemoryBacking_bsd.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-#include \"precompiled.hpp\"\n-\n@@ -383,1 +381,1 @@\n-#endif \/\/ __APPLE__\n\\ No newline at end of file\n+#endif \/\/ __APPLE__\n","filename":"src\/hotspot\/os\/bsd\/memMapPrinter_macosx.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/bsd\/osThread_bsd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/bsd\/os_perf_bsd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/bsd\/semaphore_bsd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zLargePages_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zMountPoint_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zPhysicalMemoryBacking_linux.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zSyscall_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -28,1 +27,0 @@\n-\n","filename":"src\/hotspot\/os\/linux\/hugepages.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/linux\/mallocInfoDcmd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/os\/linux\/memMapPrinter_linux.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/linux\/osThread_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/linux\/os_perf_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/os\/linux\/procMapsParser.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/linux\/systemMemoryBarrier_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/linux\/trimCHeapDCmd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/linux\/waitBarrier_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/attachListener_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/gc\/z\/zArguments_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/gc\/z\/zInitialize_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/gc\/z\/zVirtualMemory_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/jvm_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -1089,1 +1088,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/safefetch_sigjmp.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/safefetch_static_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/suspendResume_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/threadCrashProtection_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/threadCritical_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/posix\/vmError_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/attachListener_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/decoder_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zArguments_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zInitialize_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zLargePages_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zMapper_windows.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zNUMA_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zPhysicalMemoryBacking_windows.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zSyscall_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zVirtualMemory_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/iphlp_interface.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/jvm_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/memMapPrinter_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/osThread_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/os_perf_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-\/\/ no precompiled headers\n@@ -3642,2 +3641,0 @@\n-#ifdef ASSERT\n-      os::print_memory_mappings((char*)start, bytes, tty);\n@@ -3645,1 +3642,0 @@\n-#endif\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/pdh_interface.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1806,1 +1805,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/semaphore_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/sharedRuntimeRem.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/symbolengine.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/systemMemoryBarrier_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/threadCrashProtection_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/threadCritical_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/threadLocalStorage_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/vmError_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os\/windows\/windbghelp.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/javaThread_aix_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/javaThread_bsd_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/vm_version_bsd_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/assembler_bsd_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/javaThread_bsd_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/vm_version_bsd_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/javaThread_bsd_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/vm_version_bsd_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/javaThread_linux_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/vm_version_linux_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/javaThread_linux_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/macroAssembler_linux_arm_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/vm_version_linux_arm_32.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/javaThread_linux_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/javaThread_linux_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/riscv_flush_icache.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -181,0 +180,3 @@\n+  if (is_set(RISCV_HWPROBE_KEY_IMA_EXT_0, RISCV_HWPROBE_EXT_ZFHMIN)) {\n+    VM_Version::ext_Zfhmin.enable_feature();\n+  }\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/riscv_hwprobe.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vm_version_linux_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/javaThread_linux_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/assembler_linux_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/javaThread_linux_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/vm_version_linux_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/javaThread_linux_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/vm_version_linux_zero.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/assembler_windows_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/javaThread_windows_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/vm_version_windows_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/assembler_windows_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/javaThread_windows_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/vm_version_windows_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,1 +213,0 @@\n-  AD.addInclude(AD._CPP_file, \"precompiled.hpp\");\n@@ -248,1 +247,0 @@\n-  AD.addInclude(AD._CPP_CLONE_file, \"precompiled.hpp\");\n@@ -250,1 +248,0 @@\n-  AD.addInclude(AD._CPP_EXPAND_file, \"precompiled.hpp\");\n@@ -253,1 +250,0 @@\n-  AD.addInclude(AD._CPP_FORMAT_file, \"precompiled.hpp\");\n@@ -256,1 +252,0 @@\n-  AD.addInclude(AD._CPP_GEN_file, \"precompiled.hpp\");\n@@ -261,1 +256,0 @@\n-  AD.addInclude(AD._CPP_MISC_file, \"precompiled.hpp\");\n@@ -263,1 +257,0 @@\n-  AD.addInclude(AD._CPP_PEEPHOLE_file, \"precompiled.hpp\");\n@@ -265,1 +258,0 @@\n-  AD.addInclude(AD._CPP_PIPELINE_file, \"precompiled.hpp\");\n@@ -267,1 +259,0 @@\n-  AD.addInclude(AD._DFA_file, \"precompiled.hpp\");\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/asm\/assembler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -610,1 +610,0 @@\n-  void set_name(const char* name)           { _name = name; }\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/asm\/register.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_CFGPrinter.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_IR.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_InstructionPrinter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1019,1 +1019,1 @@\n-#ifdef INCLUDE_ZGC\n+#if INCLUDE_ZGC\n@@ -1602,2 +1602,0 @@\n-  int  _fpu_stack_size; \/\/ for sin\/cos implementation on Intel\n-\n@@ -1620,1 +1618,0 @@\n-    , _fpu_stack_size(0)\n@@ -1635,1 +1632,0 @@\n-    , _fpu_stack_size(0)\n@@ -1652,1 +1648,0 @@\n-    , _fpu_stack_size(0)\n@@ -1668,1 +1663,0 @@\n-    , _fpu_stack_size(0)\n@@ -1696,3 +1690,0 @@\n-  void set_fpu_stack_size(int size)              { _fpu_stack_size = size; }\n-  int  fpu_stack_size() const                    { return _fpu_stack_size; }\n-\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_ValueStack.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_ValueType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/aotArtifactFinder.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -349,1 +348,0 @@\n-\n","filename":"src\/hotspot\/share\/cds\/aotClassInitializer.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -316,1 +315,0 @@\n-\n","filename":"src\/hotspot\/share\/cds\/aotClassLinker.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/aotConstantPoolResolver.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -92,1 +91,1 @@\n-                   SIZE_FORMAT \"M\", MaxHeapSize\/M);\n+                   \"%zuM\", MaxHeapSize\/M);\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -315,1 +314,1 @@\n-    log_error(cds)(\"Failed to reserve \" SIZE_FORMAT \" bytes of output buffer.\", buffer_size);\n+    log_error(cds)(\"Failed to reserve %zu bytes of output buffer.\", buffer_size);\n@@ -322,1 +321,1 @@\n-  log_info(cds)(\"Reserved output buffer space at \" PTR_FORMAT \" [\" SIZE_FORMAT \" bytes]\",\n+  log_info(cds)(\"Reserved output buffer space at \" PTR_FORMAT \" [%zu bytes]\",\n@@ -1187,1 +1186,1 @@\n-      log_debug(cds, map)(PTR_FORMAT \": @@ Misc data \" SIZE_FORMAT \" bytes\",\n+      log_debug(cds, map)(PTR_FORMAT \": @@ Misc data %zu bytes\",\n@@ -1207,1 +1206,1 @@\n-    log_info(cds, map)(\"[%-18s \" PTR_FORMAT \" - \" PTR_FORMAT \" \" SIZE_FORMAT_W(9) \" bytes]\",\n+    log_info(cds, map)(\"[%-18s \" PTR_FORMAT \" - \" PTR_FORMAT \" %9zu bytes]\",\n@@ -1248,1 +1247,1 @@\n-        st.print_cr(\"filler \" SIZE_FORMAT \" bytes\", byte_size);\n+        st.print_cr(\"filler %zu bytes\", byte_size);\n@@ -1351,1 +1350,1 @@\n-        st.print_cr(\" - fields (\" SIZE_FORMAT \" words):\", source_oop->size());\n+        st.print_cr(\" - fields (%zu words):\", source_oop->size());\n@@ -1576,1 +1575,1 @@\n-  log_debug(cds)(\"total   : \" SIZE_FORMAT_W(9) \" [100.0%% of total] out of \" SIZE_FORMAT_W(9) \" bytes [%5.1f%% used]\",\n+  log_debug(cds)(\"total   : %9zu [100.0%% of total] out of %9zu bytes [%5.1f%% used]\",\n@@ -1581,1 +1580,1 @@\n-  log_debug(cds)(\"bm space: \" SIZE_FORMAT_W(9) \" [ %4.1f%% of total] out of \" SIZE_FORMAT_W(9) \" bytes [100.0%% used]\",\n+  log_debug(cds)(\"bm space: %9zu [ %4.1f%% of total] out of %9zu bytes [100.0%% used]\",\n@@ -1589,1 +1588,1 @@\n-  log_debug(cds)(\"hp space: \" SIZE_FORMAT_W(9) \" [ %4.1f%% of total] out of \" SIZE_FORMAT_W(9) \" bytes [100.0%% used] at \" INTPTR_FORMAT,\n+  log_debug(cds)(\"hp space: %9zu [ %4.1f%% of total] out of %9zu bytes [100.0%% used] at \" INTPTR_FORMAT,\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -311,1 +310,1 @@\n-                \" size \" SIZE_FORMAT_W(6) \" delta %zd\",\n+                \" size %6zu delta %zd\",\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -221,1 +220,1 @@\n-         \"Pre-condition: Roots start at aligned boundary: \" SIZE_FORMAT, _buffer_used);\n+         \"Pre-condition: Roots start at aligned boundary: %zu\", _buffer_used);\n@@ -242,1 +241,1 @@\n-           \"Roots segment \" SIZE_FORMAT \" start is not aligned: \" SIZE_FORMAT,\n+           \"Roots segment %zu start is not aligned: %zu\",\n@@ -250,1 +249,1 @@\n-    log_info(cds, heap)(\"archived obj root segment [%d] = \" SIZE_FORMAT \" bytes, obj = \" PTR_FORMAT,\n+    log_info(cds, heap)(\"archived obj root segment [%d] = %zu bytes, obj = \" PTR_FORMAT,\n@@ -333,1 +332,1 @@\n-  log_info(cds)(\"Size of heap region = \" SIZE_FORMAT \" bytes, %d objects, %d roots, %d native ptrs\",\n+  log_info(cds)(\"Size of heap region = %zu bytes, %d objects, %d roots, %d native ptrs\",\n@@ -399,1 +398,1 @@\n-    log_info(cds, heap)(\"Inserting filler obj array of %d elements (\" SIZE_FORMAT \" bytes total) @ buffer offset \" SIZE_FORMAT,\n+    log_info(cds, heap)(\"Inserting filler obj array of %d elements (%zu bytes total) @ buffer offset %zu\",\n@@ -630,1 +629,1 @@\n-  log_info(cds)(\"%s = \" SIZE_FORMAT_W(7) \" ... \" SIZE_FORMAT_W(7) \" (%3zu%% ... %3zu%% = %3zu%%)\", which,\n+  log_info(cds)(\"%s = %7zu ... %7zu (%3zu%% ... %3zu%% = %3zu%%)\", which,\n@@ -757,1 +756,1 @@\n-  log_info(cds, heap)(\"calculate_ptrmap: marked %d non-null native pointers for heap region (\" SIZE_FORMAT \" bits)\",\n+  log_info(cds, heap)(\"calculate_ptrmap: marked %d non-null native pointers for heap region (%zu bits)\",\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -127,1 +126,1 @@\n-      \/\/tty->print_cr(\"Marking pointer [\" PTR_FORMAT \"] -> \" PTR_FORMAT \" @ \" SIZE_FORMAT_W(5), p2i(ptr_loc), p2i(*ptr_loc), idx);\n+      \/\/tty->print_cr(\"Marking pointer [\" PTR_FORMAT \"] -> \" PTR_FORMAT \" @ %5zu\", p2i(ptr_loc), p2i(*ptr_loc), idx);\n@@ -141,1 +140,1 @@\n-  \/\/tty->print_cr(\"Clearing pointer [\" PTR_FORMAT \"] -> \" PTR_FORMAT \" @ \" SIZE_FORMAT_W(5), p2i(ptr_loc), p2i(*ptr_loc), idx);\n+  \/\/tty->print_cr(\"Clearing pointer [\" PTR_FORMAT \"] -> \" PTR_FORMAT \" @ %5zu\", p2i(ptr_loc), p2i(*ptr_loc), idx);\n@@ -166,1 +165,1 @@\n-      DEBUG_ONLY(log_trace(cds, reloc)(\"Clearing pointer [\" PTR_FORMAT  \"] -> null @ \" SIZE_FORMAT_W(9), p2i(ptr_loc), offset));\n+      DEBUG_ONLY(log_trace(cds, reloc)(\"Clearing pointer [\" PTR_FORMAT  \"] -> null @ %9zu\", p2i(ptr_loc), offset));\n@@ -231,1 +230,1 @@\n-    log_error(cds)(\"Failed to expand shared space to \" SIZE_FORMAT \" bytes\",\n+    log_error(cds)(\"Failed to expand shared space to %zu bytes\",\n@@ -242,1 +241,1 @@\n-  log_debug(cds)(\"Expanding %s spaces by \" SIZE_FORMAT_W(7) \" bytes [total \" SIZE_FORMAT_W(9)  \" bytes ending at %p]\",\n+  log_debug(cds)(\"Expanding %s spaces by %7zu bytes [total %9zu bytes ending at %p]\",\n@@ -268,1 +267,1 @@\n-  log_debug(cds)(\"%s space: \" SIZE_FORMAT_W(9) \" [ %4.1f%% of total] out of \" SIZE_FORMAT_W(9) \" bytes [%5.1f%% used] at \" INTPTR_FORMAT,\n+  log_debug(cds)(\"%s space: %9zu [ %4.1f%% of total] out of %9zu bytes [%5.1f%% used] at \" INTPTR_FORMAT,\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cdsConstants.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cdsEnumKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cdsHeapVerifier.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cdsProtectionDomain.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -46,0 +45,1 @@\n+#include \"memory\/oopFactory.hpp\"\n@@ -115,0 +115,6 @@\n+void ClassListParser::parse_classlist(const char* classlist_path, ParseMode parse_mode, TRAPS) {\n+  UnregisteredClasses::initialize(CHECK);\n+  ClassListParser parser(classlist_path, parse_mode);\n+  parser.parse(THREAD);\n+}\n+\n@@ -391,0 +397,13 @@\n+objArrayOop ClassListParser::get_specified_interfaces(TRAPS) {\n+  const int n = _interfaces->length();\n+  if (n == 0) {\n+    return nullptr;\n+  } else {\n+    objArrayOop array = oopFactory::new_objArray(vmClasses::Class_klass(), n, CHECK_NULL);\n+    for (int i = 0; i < n; i++) {\n+      array->obj_at_put(i, lookup_class_by_id(_interfaces->at(i))->java_mirror());\n+    }\n+    return array;\n+  }\n+}\n+\n@@ -518,1 +537,11 @@\n-  InstanceKlass* k = UnregisteredClasses::load_class(class_name, source_path, CHECK_NULL);\n+  InstanceKlass* specified_super = lookup_class_by_id(_super);\n+  Handle super_class(THREAD, specified_super->java_mirror());\n+  objArrayOop r = get_specified_interfaces(CHECK_NULL);\n+  objArrayHandle interfaces(THREAD, r);\n+  InstanceKlass* k = UnregisteredClasses::load_class(class_name, source_path,\n+                                                     super_class, interfaces, CHECK_NULL);\n+  if (k->java_super() != specified_super) {\n+    error(\"The specified super class %s (id %d) does not match actual super class %s\",\n+          specified_super->external_name(), _super,\n+          k->java_super()->external_name());\n+  }\n@@ -738,43 +767,0 @@\n-\n-InstanceKlass* ClassListParser::lookup_super_for_current_class(Symbol* super_name) {\n-  if (!is_loading_from_source()) {\n-    return nullptr;\n-  }\n-\n-  InstanceKlass* k = lookup_class_by_id(super());\n-  if (super_name != k->name()) {\n-    error(\"The specified super class %s (id %d) does not match actual super class %s\",\n-          k->name()->as_klass_external_name(), super(),\n-          super_name->as_klass_external_name());\n-  }\n-  return k;\n-}\n-\n-InstanceKlass* ClassListParser::lookup_interface_for_current_class(Symbol* interface_name) {\n-  if (!is_loading_from_source()) {\n-    return nullptr;\n-  }\n-\n-  const int n = _interfaces->length();\n-  if (n == 0) {\n-    error(\"Class %s implements the interface %s, but no interface has been specified in the input line\",\n-          _class_name, interface_name->as_klass_external_name());\n-    ShouldNotReachHere();\n-  }\n-\n-  int i;\n-  for (i=0; i<n; i++) {\n-    InstanceKlass* k = lookup_class_by_id(_interfaces->at(i));\n-    if (interface_name == k->name()) {\n-      return k;\n-    }\n-  }\n-\n-  \/\/ interface_name is not specified by the \"interfaces:\" keyword.\n-  print_specified_interfaces();\n-  error(\"The interface %s implemented by class %s does not match any of the specified interface IDs\",\n-        interface_name->as_klass_external_name(), _class_name);\n-  ShouldNotReachHere();\n-  return nullptr;\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":32,"deletions":46,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,0 +140,1 @@\n+  objArrayOop get_specified_interfaces(TRAPS);\n@@ -142,4 +143,1 @@\n-  static void parse_classlist(const char* classlist_path, ParseMode parse_mode, TRAPS) {\n-    ClassListParser parser(classlist_path, parse_mode);\n-    parser.parse(THREAD);\n-  }\n+  static void parse_classlist(const char* classlist_path, ParseMode parse_mode, TRAPS);\n@@ -204,6 +202,0 @@\n-\n-  \/\/ Look up the super or interface of the current class being loaded\n-  \/\/ (in this->load_current_class()).\n-  InstanceKlass* lookup_super_for_current_class(Symbol* super_name);\n-  InstanceKlass* lookup_interface_for_current_class(Symbol* interface_name);\n-\n","filename":"src\/hotspot\/share\/cds\/classListParser.hpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cppVtables.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/dumpAllocStats.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -355,1 +354,1 @@\n-                         \" [\" UINT32_FORMAT \" bytes header, \" SIZE_FORMAT \" bytes total]\",\n+                         \" [\" UINT32_FORMAT \" bytes header, %zu bytes total]\",\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -282,1 +281,1 @@\n-  st->print_cr(\"- core_region_alignment:          \" SIZE_FORMAT, _core_region_alignment);\n+  st->print_cr(\"- core_region_alignment:          %zu\", _core_region_alignment);\n@@ -294,3 +293,3 @@\n-  st->print_cr(\"- cloned_vtables_offset:          \" SIZE_FORMAT_X, _cloned_vtables_offset);\n-  st->print_cr(\"- early_serialized_data_offset:   \" SIZE_FORMAT_X, _early_serialized_data_offset);\n-  st->print_cr(\"- serialized_data_offset:         \" SIZE_FORMAT_X, _serialized_data_offset);\n+  st->print_cr(\"- cloned_vtables_offset:          0x%zx\", _cloned_vtables_offset);\n+  st->print_cr(\"- early_serialized_data_offset:   0x%zx\", _early_serialized_data_offset);\n+  st->print_cr(\"- serialized_data_offset:         0x%zx\", _serialized_data_offset);\n@@ -298,1 +297,1 @@\n-  st->print_cr(\"- shared_path_table_offset:       \" SIZE_FORMAT_X, _shared_path_table_offset);\n+  st->print_cr(\"- shared_path_table_offset:       0x%zx\", _shared_path_table_offset);\n@@ -310,2 +309,2 @@\n-  st->print_cr(\"- heap_root_segments.base_offset: \" SIZE_FORMAT_X, _heap_root_segments.base_offset());\n-  st->print_cr(\"- heap_root_segments.count:       \" SIZE_FORMAT, _heap_root_segments.count());\n+  st->print_cr(\"- heap_root_segments.base_offset: 0x%zx\", _heap_root_segments.base_offset());\n+  st->print_cr(\"- heap_root_segments.count:       %zu\", _heap_root_segments.count());\n@@ -314,4 +313,4 @@\n-  st->print_cr(\"- _heap_oopmap_start_pos:         \" SIZE_FORMAT, _heap_oopmap_start_pos);\n-  st->print_cr(\"- _heap_ptrmap_start_pos:         \" SIZE_FORMAT, _heap_ptrmap_start_pos);\n-  st->print_cr(\"- _rw_ptrmap_start_pos:           \" SIZE_FORMAT, _rw_ptrmap_start_pos);\n-  st->print_cr(\"- _ro_ptrmap_start_pos:           \" SIZE_FORMAT, _ro_ptrmap_start_pos);\n+  st->print_cr(\"- _heap_oopmap_start_pos:         %zu\", _heap_oopmap_start_pos);\n+  st->print_cr(\"- _heap_ptrmap_start_pos:         %zu\", _heap_ptrmap_start_pos);\n+  st->print_cr(\"- _rw_ptrmap_start_pos:           %zu\", _rw_ptrmap_start_pos);\n+  st->print_cr(\"- _ro_ptrmap_start_pos:           %zu\", _ro_ptrmap_start_pos);\n@@ -1423,1 +1422,1 @@\n-    log_error(cds)(\"Unable to seek to position \" SIZE_FORMAT, pos);\n+    log_error(cds)(\"Unable to seek to position %zu\", pos);\n@@ -1558,1 +1557,1 @@\n-  log_debug(cds, reloc)(\"mapped %s relocation %smap @ \" INTPTR_FORMAT \" (\" SIZE_FORMAT \" bits)\",\n+  log_debug(cds, reloc)(\"mapped %s relocation %smap @ \" INTPTR_FORMAT \" (%zu bits)\",\n@@ -1581,7 +1580,7 @@\n-  st->print_cr(\"- file_offset:                    \" SIZE_FORMAT_X, _file_offset);\n-  st->print_cr(\"- mapping_offset:                 \" SIZE_FORMAT_X, _mapping_offset);\n-  st->print_cr(\"- used:                           \" SIZE_FORMAT, _used);\n-  st->print_cr(\"- oopmap_offset:                  \" SIZE_FORMAT_X, _oopmap_offset);\n-  st->print_cr(\"- oopmap_size_in_bits:            \" SIZE_FORMAT, _oopmap_size_in_bits);\n-  st->print_cr(\"- ptrmap_offset:                  \" SIZE_FORMAT_X, _ptrmap_offset);\n-  st->print_cr(\"- ptrmap_size_in_bits:            \" SIZE_FORMAT, _ptrmap_size_in_bits);\n+  st->print_cr(\"- file_offset:                    0x%zx\", _file_offset);\n+  st->print_cr(\"- mapping_offset:                 0x%zx\", _mapping_offset);\n+  st->print_cr(\"- used:                           %zu\", _used);\n+  st->print_cr(\"- oopmap_offset:                  0x%zx\", _oopmap_offset);\n+  st->print_cr(\"- oopmap_size_in_bits:            %zu\", _oopmap_size_in_bits);\n+  st->print_cr(\"- ptrmap_offset:                  0x%zx\", _ptrmap_offset);\n+  st->print_cr(\"- ptrmap_size_in_bits:            %zu\", _ptrmap_size_in_bits);\n@@ -1626,1 +1625,1 @@\n-    log_info(cds)(\"Shared file region (%s) %d: \" SIZE_FORMAT_W(8)\n+    log_info(cds)(\"Shared file region (%s) %d: %8zu\"\n@@ -2112,1 +2111,1 @@\n-  log_info(cds)(\"Requested heap region [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] = \"  SIZE_FORMAT_W(8) \" bytes\",\n+  log_info(cds)(\"Requested heap region [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] = %8zu bytes\",\n@@ -2174,1 +2173,1 @@\n-  log_info(cds)(\"CDS archive was created with max heap size = \" SIZE_FORMAT \"M, and the following configuration:\",\n+  log_info(cds)(\"CDS archive was created with max heap size = %zuM, and the following configuration:\",\n@@ -2180,1 +2179,1 @@\n-  log_info(cds)(\"The current max heap size = \" SIZE_FORMAT \"M, G1HeapRegion::GrainBytes = \" SIZE_FORMAT,\n+  log_info(cds)(\"The current max heap size = %zuM, G1HeapRegion::GrainBytes = %zu\",\n@@ -2337,1 +2336,1 @@\n-                    INTPTR_FORMAT \", size = \" SIZE_FORMAT \" bytes\",\n+                    INTPTR_FORMAT \", size = %zu bytes\",\n@@ -2374,1 +2373,1 @@\n-  log_info(cds)(\"Heap data mapped at \" INTPTR_FORMAT \", size = \" SIZE_FORMAT_W(8) \" bytes\",\n+  log_info(cds)(\"Heap data mapped at \" INTPTR_FORMAT \", size = %8zu bytes\",\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":26,"deletions":27,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -305,1 +304,1 @@\n-    log_debug(cds, heap)(\"Cannot archive, object (\" PTR_FORMAT \") is too large: \" SIZE_FORMAT,\n+    log_debug(cds, heap)(\"Cannot archive, object (\" PTR_FORMAT \") is too large: %zu\",\n@@ -1391,1 +1390,1 @@\n-        log_debug(cds, heap)(\"(%d) %s[\" SIZE_FORMAT \"] ==> \" PTR_FORMAT \" size \" SIZE_FORMAT \" %s\", _level,\n+        log_debug(cds, heap)(\"(%d) %s[%zu] ==> \" PTR_FORMAT \" size %zu %s\", _level,\n@@ -1534,1 +1533,1 @@\n-        PTR_FORMAT \") size \" SIZE_FORMAT \", skipped.\",\n+        PTR_FORMAT \") size %zu, skipped.\",\n@@ -2122,2 +2121,2 @@\n-    log_info(cds, heap)(SIZE_FORMAT_W(8) \" objects are <= \" SIZE_FORMAT_W(-6)\n-                        \" bytes (total \" SIZE_FORMAT_W(8) \" bytes, avg %8.1f bytes)\",\n+    log_info(cds, heap)(\"%8zu objects are <= %-6zu\"\n+                        \" bytes (total %8zu bytes, avg %8.1f bytes)\",\n@@ -2129,1 +2128,1 @@\n-  log_info(cds, heap)(SIZE_FORMAT_W(8) \" huge  objects               (total \"  SIZE_FORMAT_W(8) \" bytes\"\n+  log_info(cds, heap)(\"%8zu huge  objects               (total %8zu bytes\"\n@@ -2133,1 +2132,1 @@\n-  log_info(cds, heap)(SIZE_FORMAT_W(8) \" total objects               (total \"  SIZE_FORMAT_W(8) \" bytes\"\n+  log_info(cds, heap)(\"%8zu total objects               (total %8zu bytes\"\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/lambdaProxyClassDictionary.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -268,1 +267,1 @@\n-  log_info(cds)(\"Core region alignment: \" SIZE_FORMAT, core_region_alignment());\n+  log_info(cds)(\"Core region alignment: %zu\", core_region_alignment());\n@@ -289,1 +288,1 @@\n-    log_error(cds)(\"Unable to reserve memory for symbols: \" SIZE_FORMAT \" bytes.\", symbol_rs_size);\n+    log_error(cds)(\"Unable to reserve memory for symbols: %zu bytes.\", symbol_rs_size);\n@@ -772,1 +771,1 @@\n-                     SIZE_FORMAT \"M\", MaxHeapSize\/M);\n+                     \"%zuM\", MaxHeapSize\/M);\n@@ -801,1 +800,1 @@\n-    log_debug(cds)(\"Setting MinHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", MinHeapSize\/M);\n+    log_debug(cds)(\"Setting MinHeapSize to 4G for CDS dumping, original size = %zuM\", MinHeapSize\/M);\n@@ -805,1 +804,1 @@\n-    log_debug(cds)(\"Setting InitialHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", InitialHeapSize\/M);\n+    log_debug(cds)(\"Setting InitialHeapSize to 4G for CDS dumping, original size = %zuM\", InitialHeapSize\/M);\n@@ -809,1 +808,1 @@\n-    log_debug(cds)(\"Setting MaxHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", MaxHeapSize\/M);\n+    log_debug(cds)(\"Setting MaxHeapSize to 4G for CDS dumping, original size = %zuM\", MaxHeapSize\/M);\n@@ -1085,1 +1084,1 @@\n-    log_info(cds)(\"Core region alignment: \" SIZE_FORMAT, static_mapinfo->core_region_alignment());\n+    log_info(cds)(\"Core region alignment: %zu\", static_mapinfo->core_region_alignment());\n@@ -1239,1 +1238,1 @@\n-    log_info(cds)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n+    log_info(cds)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (%zu) bytes\",\n@@ -1241,1 +1240,1 @@\n-    log_info(cds)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n+    log_info(cds)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (%zu) bytes\",\n@@ -1470,2 +1469,1 @@\n-         \"CompressedClassSpaceSize malformed: \"\n-         SIZE_FORMAT, CompressedClassSpaceSize);\n+         \"CompressedClassSpaceSize malformed: %zu\", CompressedClassSpaceSize);\n@@ -1481,1 +1479,1 @@\n-    log_info(metaspace)(\"CDS initialization: reducing class space size from \" SIZE_FORMAT \" to \" SIZE_FORMAT,\n+    log_info(metaspace)(\"CDS initialization: reducing class space size from %zu to %zu\",\n@@ -1603,2 +1601,2 @@\n-    log_info(cds)(\"Unable to map CDS archive -- core_region_alignment() expected: \" SIZE_FORMAT\n-                  \" actual: \" SIZE_FORMAT, mapinfo->core_region_alignment(), core_region_alignment());\n+    log_info(cds)(\"Unable to map CDS archive -- core_region_alignment() expected: %zu\"\n+                  \" actual: %zu\", mapinfo->core_region_alignment(), core_region_alignment());\n@@ -1773,1 +1771,1 @@\n-    st->print(\"size \" SIZE_FORMAT \", \", top - base);\n+    st->print(\"size %zu, \", top - base);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/regeneratedClasses.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/cds\/runTimeClassInfo.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -32,1 +31,1 @@\n-#include \"classfile\/systemDictionaryShared.hpp\"\n+#include \"classfile\/systemDictionary.hpp\"\n@@ -42,0 +41,11 @@\n+InstanceKlass* UnregisteredClasses::_UnregisteredClassLoader_klass = nullptr;\n+\n+void UnregisteredClasses::initialize(TRAPS) {\n+  if (_UnregisteredClassLoader_klass == nullptr) {\n+    \/\/ no need for synchronization as this function is called single-threaded.\n+    Symbol* klass_name = SymbolTable::new_symbol(\"jdk\/internal\/misc\/CDS$UnregisteredClassLoader\");\n+    Klass* k = SystemDictionary::resolve_or_fail(klass_name, true, CHECK);\n+    _UnregisteredClassLoader_klass = InstanceKlass::cast(k);\n+  }\n+}\n+\n@@ -45,1 +55,2 @@\n-InstanceKlass* UnregisteredClasses::load_class(Symbol* name, const char* path, TRAPS) {\n+InstanceKlass* UnregisteredClasses::load_class(Symbol* name, const char* path,\n+                                               Handle super_class, objArrayHandle interfaces, TRAPS) {\n@@ -53,0 +64,3 @@\n+  \/\/ Call CDS$UnregisteredClassLoader::load(String name, Class<?> superClass, Class<?>[] interfaces)\n+  Symbol* methodName = SymbolTable::new_symbol(\"load\");\n+  Symbol* methodSignature = SymbolTable::new_symbol(\"(Ljava\/lang\/String;Ljava\/lang\/Class;[Ljava\/lang\/Class;)Ljava\/lang\/Class;\");\n@@ -54,2 +68,1 @@\n-  Symbol* findClass = SymbolTable::new_symbol(\"findClass\");\n-  Handle url_classloader = get_url_classloader(path_symbol, CHECK_NULL);\n+  Handle classloader = get_classloader(path_symbol, CHECK_NULL);\n@@ -59,2 +72,2 @@\n-  JavaCallArguments args(2);\n-  args.set_receiver(url_classloader);\n+  JavaCallArguments args(3);\n+  args.set_receiver(classloader);\n@@ -62,0 +75,2 @@\n+  args.push_oop(super_class);\n+  args.push_oop(interfaces);\n@@ -63,3 +78,3 @@\n-                          vmClasses::URLClassLoader_klass(),\n-                          findClass,\n-                          vmSymbols::string_class_signature(),\n+                          UnregisteredClassLoader_klass(),\n+                          methodName,\n+                          methodSignature,\n@@ -73,1 +88,1 @@\n-class URLClassLoaderTable : public ResourceHashtable<\n+class UnregisteredClasses::ClassLoaderTable : public ResourceHashtable<\n@@ -78,1 +93,1 @@\n-static URLClassLoaderTable* _url_classloader_table = nullptr;\n+static UnregisteredClasses::ClassLoaderTable* _classloader_table = nullptr;\n@@ -80,1 +95,1 @@\n-Handle UnregisteredClasses::create_url_classloader(Symbol* path, TRAPS) {\n+Handle UnregisteredClasses::create_classloader(Symbol* path, TRAPS) {\n@@ -84,15 +99,5 @@\n-  JavaCalls::call_static(&result,\n-                         vmClasses::jdk_internal_loader_ClassLoaders_klass(),\n-                         vmSymbols::toFileURL_name(),\n-                         vmSymbols::toFileURL_signature(),\n-                         path_string, CHECK_NH);\n-  assert(result.get_type() == T_OBJECT, \"just checking\");\n-  oop url_h = result.get_oop();\n-  objArrayHandle urls = oopFactory::new_objArray_handle(vmClasses::URL_klass(), 1, CHECK_NH);\n-  urls->obj_at_put(0, url_h);\n-\n-  Handle url_classloader = JavaCalls::construct_new_instance(\n-                             vmClasses::URLClassLoader_klass(),\n-                             vmSymbols::url_array_classloader_void_signature(),\n-                             urls, Handle(), CHECK_NH);\n-  return url_classloader;\n+  Handle classloader = JavaCalls::construct_new_instance(\n+                           UnregisteredClassLoader_klass(),\n+                           vmSymbols::string_void_signature(),\n+                           path_string, CHECK_NH);\n+  return classloader;\n@@ -101,3 +106,3 @@\n-Handle UnregisteredClasses::get_url_classloader(Symbol* path, TRAPS) {\n-  if (_url_classloader_table == nullptr) {\n-    _url_classloader_table = new (mtClass)URLClassLoaderTable();\n+Handle UnregisteredClasses::get_classloader(Symbol* path, TRAPS) {\n+  if (_classloader_table == nullptr) {\n+    _classloader_table = new (mtClass)ClassLoaderTable();\n@@ -105,3 +110,3 @@\n-  OopHandle* url_classloader_ptr = _url_classloader_table->get(path);\n-  if (url_classloader_ptr != nullptr) {\n-    return Handle(THREAD, (*url_classloader_ptr).resolve());\n+  OopHandle* classloader_ptr = _classloader_table->get(path);\n+  if (classloader_ptr != nullptr) {\n+    return Handle(THREAD, (*classloader_ptr).resolve());\n@@ -109,2 +114,2 @@\n-    Handle url_classloader = create_url_classloader(path, CHECK_NH);\n-    _url_classloader_table->put(path, OopHandle(Universe::vm_global(), url_classloader()));\n+    Handle classloader = create_classloader(path, CHECK_NH);\n+    _classloader_table->put(path, OopHandle(Universe::vm_global(), classloader()));\n@@ -112,1 +117,1 @@\n-    return url_classloader;\n+    return classloader;\n","filename":"src\/hotspot\/share\/cds\/unregisteredClasses.cpp","additions":43,"deletions":38,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"memory\/allStatic.hpp\"\n@@ -30,0 +31,3 @@\n+class InstanceKlass;\n+class Symbol;\n+\n@@ -32,1 +36,9 @@\n-  static InstanceKlass* load_class(Symbol* h_name, const char* path, TRAPS);\n+  static InstanceKlass* load_class(Symbol* h_name, const char* path,\n+                                   Handle super_class, objArrayHandle interfaces,\n+                                   TRAPS);\n+  static void initialize(TRAPS);\n+  static InstanceKlass* UnregisteredClassLoader_klass() {\n+    return _UnregisteredClassLoader_klass;\n+  }\n+\n+  class ClassLoaderTable;\n@@ -35,2 +47,5 @@\n-  static Handle create_url_classloader(Symbol* path, TRAPS);\n-  static Handle get_url_classloader(Symbol* path, TRAPS);\n+  \/\/ Don't put this in vmClasses as it's used only with CDS dumping.\n+  static InstanceKlass* _UnregisteredClassLoader_klass;\n+\n+  static Handle create_classloader(Symbol* path, TRAPS);\n+  static Handle get_classloader(Symbol* path, TRAPS);\n","filename":"src\/hotspot\/share\/cds\/unregisteredClasses.hpp","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/bcEscapeAnalyzer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciArrayKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciBaseObject.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciCallSite.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciConstant.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciConstantPoolCache.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciExceptionHandler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciFlags.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInstance.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMemberName.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMetadata.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethodBlocks.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethodHandle.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethodType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciNullObject.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciObjArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciObjArrayKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciObject.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciSignature.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciStreams.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciSymbol.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciTypeArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciTypeArrayKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciUtilities.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/altHashing.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/bytecodeAssembler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classFileError.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -2130,1 +2129,1 @@\n-  int flags = cfs->get_u2_fast();\n+  u2 flags = cfs->get_u2_fast();\n@@ -5666,1 +5665,1 @@\n-    jio_snprintf(addr_buf, 20, SIZE_FORMAT_X, new_id);\n+    jio_snprintf(addr_buf, 20, \"0x%zx\", new_id);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataShared.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderHierarchyDCmd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -115,1 +114,1 @@\n-  _out->print(INTPTR_FORMAT \"  \" INTPTR_FORMAT \"  \" INTPTR_FORMAT \"  %6zu  \" SIZE_FORMAT_W(8) \"  \" SIZE_FORMAT_W(8) \"  \",\n+  _out->print(INTPTR_FORMAT \"  \" INTPTR_FORMAT \"  \" INTPTR_FORMAT \"  %6zu  %8zu  %8zu  \",\n@@ -126,1 +125,1 @@\n-    _out->print_cr(SPACE SPACE SPACE \"                                    %6zu  \" SIZE_FORMAT_W(8) \"  \" SIZE_FORMAT_W(8) \"   + hidden classes\",\n+    _out->print_cr(SPACE SPACE SPACE \"                                    %6zu  %8zu  %8zu   + hidden classes\",\n@@ -140,1 +139,1 @@\n-  _out->print_cr(\"%6zu  \" SIZE_FORMAT_W(8) \"  \" SIZE_FORMAT_W(8) \"  \",\n+  _out->print_cr(\"%6zu  %8zu  %8zu  \",\n","filename":"src\/hotspot\/share\/classfile\/classLoaderStats.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classPrinter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/defaultMethods.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -49,1 +48,1 @@\n-  log_info(class, loader, data)(\"Dictionary start size: \" SIZE_FORMAT \" (\" SIZE_FORMAT \")\",\n+  log_info(class, loader, data)(\"Dictionary start size: %zu (%zu)\",\n","filename":"src\/hotspot\/share\/classfile\/dictionary.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/javaAssertions.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1245,2 +1244,2 @@\n-  assert(size > 0, \"Oop size must be greater than zero, not \" SIZE_FORMAT, size);\n-  assert(size <= INT_MAX, \"Lossy conversion: \" SIZE_FORMAT, size);\n+  assert(size > 0, \"Oop size must be greater than zero, not %zu\", size);\n+  assert(size <= INT_MAX, \"Lossy conversion: %zu\", size);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/metadataOnStackMark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -613,0 +612,1 @@\n+  ResourceMark rm;\n@@ -619,0 +619,1 @@\n+\/\/ Caller needs ResourceMark\n@@ -626,0 +627,1 @@\n+    ResourceMark rm;\n@@ -634,0 +636,1 @@\n+  ResourceMark rm;\n@@ -640,0 +643,1 @@\n+\/\/ Caller needs ResourceMark\n@@ -647,0 +651,1 @@\n+    ResourceMark rm;\n@@ -654,0 +659,1 @@\n+\/\/ Caller needs ResourceMark\n@@ -655,1 +661,0 @@\n-  ResourceMark rm;\n@@ -708,1 +713,1 @@\n-  return (st.size() > 0) ? os::strdup(st.as_string()) : nullptr;  \/\/ Example: \"java.base,java.compiler\"\n+  return (st.size() > 0) ? st.as_string() : nullptr;  \/\/ Example: \"java.base,java.compiler\"\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/packageEntry.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/stackMapFrame.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/stackMapTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -314,1 +313,1 @@\n-  log_trace(stringtable)(\"Start size: \" SIZE_FORMAT \" (\" SIZE_FORMAT \")\",\n+  log_trace(stringtable)(\"Start size: %zu (%zu)\",\n@@ -585,1 +584,1 @@\n-  log_debug(stringtable)(\"Grown to size:\" SIZE_FORMAT, _current_size);\n+  log_debug(stringtable)(\"Grown to size:%zu\", _current_size);\n@@ -634,1 +633,1 @@\n-  log_trace(stringtable)(\"Uncleaned items:\" SIZE_FORMAT, num_dead);\n+  log_trace(stringtable)(\"Uncleaned items:%zu\", num_dead);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -217,1 +216,1 @@\n-  log_trace(symboltable)(\"Start size: \" SIZE_FORMAT \" (\" SIZE_FORMAT \")\",\n+  log_trace(symboltable)(\"Start size: %zu (%zu)\",\n@@ -752,1 +751,1 @@\n-  log_debug(symboltable)(\"Grown to size:\" SIZE_FORMAT, _current_size);\n+  log_debug(symboltable)(\"Grown to size:%zu\", _current_size);\n@@ -801,1 +800,1 @@\n-  log_debug(symboltable)(\"Cleaned \" SIZE_FORMAT \" of \" SIZE_FORMAT,\n+  log_debug(symboltable)(\"Cleaned %zu of %zu\",\n@@ -934,4 +933,4 @@\n-  tty->print_cr(\"  Total number of symbols  \" SIZE_FORMAT_W(7), hi.total_count);\n-  tty->print_cr(\"  Total size in memory     \" SIZE_FORMAT_W(7) \"K\", (hi.total_size * wordSize) \/ K);\n-  tty->print_cr(\"  Total counted            \" SIZE_FORMAT_W(7), _symbols_counted);\n-  tty->print_cr(\"  Total removed            \" SIZE_FORMAT_W(7), _symbols_removed);\n+  tty->print_cr(\"  Total number of symbols  %7zu\", hi.total_count);\n+  tty->print_cr(\"  Total size in memory     %7zuK\", (hi.total_size * wordSize) \/ K);\n+  tty->print_cr(\"  Total counted            %7zu\", _symbols_counted);\n+  tty->print_cr(\"  Total removed            %7zu\", _symbols_removed);\n@@ -942,5 +941,5 @@\n-  tty->print_cr(\"  Reference counts         \" SIZE_FORMAT_W(7), Symbol::_total_count);\n-  tty->print_cr(\"  Symbol arena used        \" SIZE_FORMAT_W(7) \"K\", arena()->used() \/ K);\n-  tty->print_cr(\"  Symbol arena size        \" SIZE_FORMAT_W(7) \"K\", arena()->size_in_bytes() \/ K);\n-  tty->print_cr(\"  Total symbol length      \" SIZE_FORMAT_W(7), hi.total_length);\n-  tty->print_cr(\"  Maximum symbol length    \" SIZE_FORMAT_W(7), hi.max_length);\n+  tty->print_cr(\"  Reference counts         %7zu\", Symbol::_total_count);\n+  tty->print_cr(\"  Symbol arena used        %7zuK\", arena()->used() \/ K);\n+  tty->print_cr(\"  Symbol arena size        %7zuK\", arena()->size_in_bytes() \/ K);\n+  tty->print_cr(\"  Total symbol length      %7zu\", hi.total_length);\n+  tty->print_cr(\"  Maximum symbol length    %7zu\", hi.max_length);\n@@ -952,1 +951,1 @@\n-      tty->print_cr(\"    \" SIZE_FORMAT_W(6) \" \" SIZE_FORMAT_W(10) \" \" SIZE_FORMAT_W(10) \"K\",\n+      tty->print_cr(\"    %6zu %10zu %10zuK\",\n@@ -956,1 +955,1 @@\n-  tty->print_cr(\"  >=\" SIZE_FORMAT_W(6) \" \" SIZE_FORMAT_W(10) \" \" SIZE_FORMAT_W(10) \"K\\n\",\n+  tty->print_cr(\"  >= %6zu %10zu %10zuK\\n\",\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -427,10 +426,0 @@\n-#if INCLUDE_CDS\n-  if (CDSConfig::is_dumping_static_archive()) {\n-    \/\/ Special processing for handling UNREGISTERED shared classes.\n-    InstanceKlass* k = SystemDictionaryShared::lookup_super_for_unregistered_class(class_name,\n-                           next_name, is_superclass);\n-    if (k) {\n-      return k;\n-    }\n-  }\n-#endif \/\/ INCLUDE_CDS\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -39,0 +38,1 @@\n+#include \"cds\/unregisteredClasses.hpp\"\n@@ -356,0 +356,6 @@\n+  if (k == UnregisteredClasses::UnregisteredClassLoader_klass()) {\n+    ResourceMark rm;\n+    log_info(cds)(\"Skipping %s: used only when dumping CDS archive\", k->name()->as_C_string());\n+    return true;\n+  }\n+\n@@ -474,39 +480,0 @@\n-\/\/ This function is called to lookup the super\/interfaces of shared classes for\n-\/\/ unregistered loaders. E.g., SharedClass in the below example\n-\/\/ where \"super:\" (and optionally \"interface:\") have been specified.\n-\/\/\n-\/\/ java\/lang\/Object id: 0\n-\/\/ Interface    id: 2 super: 0 source: cust.jar\n-\/\/ SharedClass  id: 4 super: 0 interfaces: 2 source: cust.jar\n-InstanceKlass* SystemDictionaryShared::lookup_super_for_unregistered_class(\n-    Symbol* class_name, Symbol* super_name, bool is_superclass) {\n-\n-  assert(CDSConfig::is_dumping_static_archive(), \"only when static dumping\");\n-\n-  if (!ClassListParser::is_parsing_thread()) {\n-    \/\/ Unregistered classes can be created only by ClassListParser::_parsing_thread.\n-\n-    return nullptr;\n-  }\n-\n-  ClassListParser* parser = ClassListParser::instance();\n-  if (parser == nullptr) {\n-    \/\/ We're still loading the well-known classes, before the ClassListParser is created.\n-    return nullptr;\n-  }\n-  if (class_name->equals(parser->current_class_name())) {\n-    \/\/ When this function is called, all the numbered super and interface types\n-    \/\/ must have already been loaded. Hence this function is never recursively called.\n-    if (is_superclass) {\n-      return parser->lookup_super_for_current_class(super_name);\n-    } else {\n-      return parser->lookup_interface_for_current_class(super_name);\n-    }\n-  } else {\n-    \/\/ The VM is not trying to resolve a super type of parser->current_class_name().\n-    \/\/ Instead, it's resolving an error class (because parser->current_class_name() has\n-    \/\/ failed parsing or verification). Don't do anything here.\n-    return nullptr;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":7,"deletions":40,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/verificationType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,1 +141,0 @@\n-  do_klass(URLClassLoader_klass,                        java_net_URLClassLoader                               ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,1 +127,0 @@\n-  template(java_net_URLClassLoader,                   \"java\/net\/URLClassLoader\")                  \\\n@@ -359,0 +358,2 @@\n+  template(jdk_internal_foreign_NativeMemorySegmentImpl,             \"jdk\/internal\/foreign\/NativeMemorySegmentImpl\") \\\n+                                                                                                  \\\n@@ -740,1 +741,0 @@\n-  template(url_array_classloader_void_signature,            \"([Ljava\/net\/URL;Ljava\/lang\/ClassLoader;)V\")          \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/codeBehaviours.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -100,1 +100,0 @@\n-  friend class CodeCacheDumper;\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -184,1 +183,1 @@\n-    err_msg message(SIZE_FORMAT \"K < %zuK\", size\/K, required_size\/K);\n+    err_msg message(\"%zuK < %zuK\", size\/K, required_size\/K);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n-  friend class CodeCacheLoader;\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -1045,8 +1044,8 @@\n-      ast->print_cr(\"freeSpace        = \" SIZE_FORMAT_W(8) \"k, nBlocks_free     = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", freeSpace\/(size_t)K,     nBlocks_free,     (100.0*freeSpace)\/size,     (100.0*freeSpace)\/res_size);\n-      ast->print_cr(\"usedSpace        = \" SIZE_FORMAT_W(8) \"k, nBlocks_used     = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", usedSpace\/(size_t)K,     nBlocks_used,     (100.0*usedSpace)\/size,     (100.0*usedSpace)\/res_size);\n-      ast->print_cr(\"  Tier1 Space    = \" SIZE_FORMAT_W(8) \"k, nBlocks_t1       = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", t1Space\/(size_t)K,       nBlocks_t1,       (100.0*t1Space)\/size,       (100.0*t1Space)\/res_size);\n-      ast->print_cr(\"  Tier2 Space    = \" SIZE_FORMAT_W(8) \"k, nBlocks_t2       = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", t2Space\/(size_t)K,       nBlocks_t2,       (100.0*t2Space)\/size,       (100.0*t2Space)\/res_size);\n-      ast->print_cr(\"  Alive Space    = \" SIZE_FORMAT_W(8) \"k, nBlocks_alive    = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", aliveSpace\/(size_t)K,    nBlocks_alive,    (100.0*aliveSpace)\/size,    (100.0*aliveSpace)\/res_size);\n-      ast->print_cr(\"    disconnected = \" SIZE_FORMAT_W(8) \"k, nBlocks_disconn  = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", disconnSpace\/(size_t)K,  nBlocks_disconn,  (100.0*disconnSpace)\/size,  (100.0*disconnSpace)\/res_size);\n-      ast->print_cr(\"    not entrant  = \" SIZE_FORMAT_W(8) \"k, nBlocks_notentr  = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", notentrSpace\/(size_t)K,  nBlocks_notentr,  (100.0*notentrSpace)\/size,  (100.0*notentrSpace)\/res_size);\n-      ast->print_cr(\"  stubSpace      = \" SIZE_FORMAT_W(8) \"k, nBlocks_stub     = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", stubSpace\/(size_t)K,     nBlocks_stub,     (100.0*stubSpace)\/size,     (100.0*stubSpace)\/res_size);\n+      ast->print_cr(\"freeSpace        = %8zuk, nBlocks_free     = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", freeSpace\/(size_t)K,     nBlocks_free,     (100.0*freeSpace)\/size,     (100.0*freeSpace)\/res_size);\n+      ast->print_cr(\"usedSpace        = %8zuk, nBlocks_used     = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", usedSpace\/(size_t)K,     nBlocks_used,     (100.0*usedSpace)\/size,     (100.0*usedSpace)\/res_size);\n+      ast->print_cr(\"  Tier1 Space    = %8zuk, nBlocks_t1       = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", t1Space\/(size_t)K,       nBlocks_t1,       (100.0*t1Space)\/size,       (100.0*t1Space)\/res_size);\n+      ast->print_cr(\"  Tier2 Space    = %8zuk, nBlocks_t2       = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", t2Space\/(size_t)K,       nBlocks_t2,       (100.0*t2Space)\/size,       (100.0*t2Space)\/res_size);\n+      ast->print_cr(\"  Alive Space    = %8zuk, nBlocks_alive    = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", aliveSpace\/(size_t)K,    nBlocks_alive,    (100.0*aliveSpace)\/size,    (100.0*aliveSpace)\/res_size);\n+      ast->print_cr(\"    disconnected = %8zuk, nBlocks_disconn  = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", disconnSpace\/(size_t)K,  nBlocks_disconn,  (100.0*disconnSpace)\/size,  (100.0*disconnSpace)\/res_size);\n+      ast->print_cr(\"    not entrant  = %8zuk, nBlocks_notentr  = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", notentrSpace\/(size_t)K,  nBlocks_notentr,  (100.0*notentrSpace)\/size,  (100.0*notentrSpace)\/res_size);\n+      ast->print_cr(\"  stubSpace      = %8zuk, nBlocks_stub     = %6d, %10.3f%% of capacity, %10.3f%% of max_capacity\", stubSpace\/(size_t)K,     nBlocks_stub,     (100.0*stubSpace)\/size,     (100.0*stubSpace)\/res_size);\n@@ -1055,3 +1054,3 @@\n-      ast->print_cr(\"Segment start          = \" INTPTR_FORMAT \", used space      = \" SIZE_FORMAT_W(8)\"k\", p2i(low_bound), size\/K);\n-      ast->print_cr(\"Segment end (used)     = \" INTPTR_FORMAT \", remaining space = \" SIZE_FORMAT_W(8)\"k\", p2i(low_bound) + size, (res_size - size)\/K);\n-      ast->print_cr(\"Segment end (reserved) = \" INTPTR_FORMAT \", reserved space  = \" SIZE_FORMAT_W(8)\"k\", p2i(low_bound) + res_size, res_size\/K);\n+      ast->print_cr(\"Segment start          = \" INTPTR_FORMAT \", used space      = %8zuk\", p2i(low_bound), size\/K);\n+      ast->print_cr(\"Segment end (used)     = \" INTPTR_FORMAT \", remaining space = %8zuk\", p2i(low_bound) + size, (res_size - size)\/K);\n+      ast->print_cr(\"Segment end (reserved) = \" INTPTR_FORMAT \", reserved space  = %8zuk\", p2i(low_bound) + res_size, res_size\/K);\n@@ -1306,1 +1305,1 @@\n-          ast->print(\"(\" SIZE_FORMAT_W(4) \"K)\", TopSizeArray[i].nm_size\/K);\n+          ast->print(\"(%4zuK)\", TopSizeArray[i].nm_size\/K);\n@@ -1318,1 +1317,1 @@\n-          ast->print(\"(\" SIZE_FORMAT_W(4) \"K)\", (TopSizeArray[i].len<<log2_seg_size)\/K);\n+          ast->print(\"(%4zuK)\", (TopSizeArray[i].len<<log2_seg_size)\/K);\n@@ -1365,1 +1364,1 @@\n-          ast->print(\"[\" SIZE_FORMAT_W(5) \" ..\" SIZE_FORMAT_W(5) \" ): \"\n+          ast->print(\"[%5zu ..%5zu ): \"\n@@ -1370,1 +1369,1 @@\n-          ast->print(\"[\" SIZE_FORMAT_W(5) \"K..\" SIZE_FORMAT_W(5) \"K): \"\n+          ast->print(\"[%5zuK..%5zuK): \"\n@@ -1375,1 +1374,1 @@\n-          ast->print(\"[\" SIZE_FORMAT_W(5) \"M..\" SIZE_FORMAT_W(5) \"M): \"\n+          ast->print(\"[%5zuM..%5zuM): \"\n@@ -1405,1 +1404,1 @@\n-          ast->print(\"[\" SIZE_FORMAT_W(5) \" ..\" SIZE_FORMAT_W(5) \" ): \"\n+          ast->print(\"[%5zu ..%5zu ): \"\n@@ -1410,1 +1409,1 @@\n-          ast->print(\"[\" SIZE_FORMAT_W(5) \"K..\" SIZE_FORMAT_W(5) \"K): \"\n+          ast->print(\"[%5zuK..%5zuK): \"\n@@ -1415,1 +1414,1 @@\n-          ast->print(\"[\" SIZE_FORMAT_W(5) \"M..\" SIZE_FORMAT_W(5) \"M): \"\n+          ast->print(\"[%5zuM..%5zuM): \"\n@@ -2173,1 +2172,1 @@\n-          ast->print(\"(\" SIZE_FORMAT_W(4) \"K)\", total_size\/K);\n+          ast->print(\"(%4zuK)\", total_size\/K);\n","filename":"src\/hotspot\/share\/code\/codeHeapState.cpp","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/compiledIC.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/compressedStream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/debugInfo.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/debugInfoRec.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/dependencyContext.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/exceptionHandlerTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/location.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/oopRecorder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/pcDesc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/relocInfo.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/scopeDesc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/stubs.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/vmreg.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/code\/vtableStubs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/abstractCompiler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/abstractDisassembler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/cHeapStringHolder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/compiler\/compilationFailureInfo.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationLog.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -2781,3 +2780,3 @@\n-  out->print_cr(\"         Reserved size : \" SIZE_FORMAT_W(7) \" KB\", CodeCache::max_capacity() \/ K);\n-  out->print_cr(\"        Committed size : \" SIZE_FORMAT_W(7) \" KB\", CodeCache::capacity() \/ K);\n-  out->print_cr(\"  Unallocated capacity : \" SIZE_FORMAT_W(7) \" KB\", CodeCache::unallocated_capacity() \/ K);\n+  out->print_cr(\"         Reserved size : %7zu KB\", CodeCache::max_capacity() \/ K);\n+  out->print_cr(\"        Committed size : %7zu KB\", CodeCache::capacity() \/ K);\n+  out->print_cr(\"  Unallocated capacity : %7zu KB\", CodeCache::unallocated_capacity() \/ K);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compileLog.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/directivesParser.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/disassembler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/methodLiveness.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/oopMap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonArguments.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonBarrierSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonInitLogger.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonMemoryPool.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonMonitoringSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSetRuntime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BatchedTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectorState.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CommittedRegionMap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkBitMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkObjArrayProcessor.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRebuildAndScrub.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineStats.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -31,0 +30,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThreadsNeeded.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacStats.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FreeIdSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FromCardCache.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarkTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCResetMetadataTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionEventSender.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionTracer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1IHOPControl.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1InitLogger.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MMUTracker.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MemoryPool.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArenaFreeMemoryTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArenaFreePool.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NMethodClosure.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMAStats.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OldGenAllocationTracker.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopStarChunkedList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParallelCleaning.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PeriodicGCTask.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionMarkStatsCache.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionsOnNodes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetTrackingPolicy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootClosures.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SATBMarkQueueSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1StringDedup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvRateGroup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvivorRegions.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCAllocationFailureInjector.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPreEvacuateTasks.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGenSizer.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/jvmFlagConstraintsG1.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/gcAdaptivePolicyCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/jvmFlagConstraintsParallel.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -54,0 +53,5 @@\n+  if (!rs.is_reserved()) {\n+    \/\/ Failed to reserve memory for the bitmap,\n+    return false;\n+  }\n+\n@@ -61,7 +65,0 @@\n-  if (_virtual_space != nullptr && _virtual_space->expand_by(_reserved_byte_size)) {\n-    _heap_start = covered_region.start();\n-    _heap_size = covered_region.word_size();\n-    BitMap::bm_word_t* map = (BitMap::bm_word_t*)_virtual_space->reserved_low_addr();\n-    _beg_bits = BitMapView(map, bits);\n-    return true;\n-  }\n@@ -69,3 +66,3 @@\n-  _heap_start = nullptr;\n-  _heap_size = 0;\n-  if (_virtual_space != nullptr) {\n+  if (!_virtual_space->expand_by(_reserved_byte_size)) {\n+    \/\/ Failed to commit memory for the bitmap.\n+\n@@ -73,1 +70,1 @@\n-    _virtual_space = nullptr;\n+\n@@ -75,3 +72,3 @@\n-    if (rs.is_reserved()) {\n-      MemoryReserver::release(rs);\n-    }\n+    MemoryReserver::release(rs);\n+\n+    return false;\n@@ -79,1 +76,7 @@\n-  return false;\n+\n+  _heap_start = covered_region.start();\n+  _heap_size = covered_region.word_size();\n+  BitMap::bm_word_t* map = (BitMap::bm_word_t*)_virtual_space->reserved_low_addr();\n+  _beg_bits = BitMapView(map, bits);\n+\n+  return true;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelArguments.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelInitLogger.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -950,2 +949,2 @@\n-  if (decr_tenuring_threshold && !(AlwaysTenure || NeverTenure)) {\n-    if (tenuring_threshold > 1) {\n+  if (!(AlwaysTenure || NeverTenure)) {\n+    if (decr_tenuring_threshold && tenuring_threshold > 1) {\n@@ -953,3 +952,1 @@\n-    }\n-  } else if (incr_tenuring_threshold && !(AlwaysTenure || NeverTenure)) {\n-    if (tenuring_threshold < MaxTenuringThreshold) {\n+    } else if (incr_tenuring_threshold && tenuring_threshold < MaxTenuringThreshold) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psAdaptiveSizePolicy.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psGCAdaptivePolicyCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psGenerationCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psMemoryPool.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -252,0 +251,5 @@\n+  if (!rs.is_reserved()) {\n+    \/\/ Failed to reserve memory.\n+    return nullptr;\n+  }\n+\n@@ -258,4 +262,4 @@\n-  if (vspace != nullptr) {\n-    if (vspace->expand_by(_reserved_byte_size)) {\n-      return vspace;\n-    }\n+\n+  if (!vspace->expand_by(_reserved_byte_size)) {\n+    \/\/ Failed to commit memory.\n+\n@@ -263,0 +267,1 @@\n+\n@@ -264,4 +269,3 @@\n-    if (rs.is_reserved()) {\n-      MemoryReserver::release(rs);\n-      rs = {};\n-    }\n+    MemoryReserver::release(rs);\n+\n+    return nullptr;\n@@ -270,1 +274,1 @@\n-  return nullptr;\n+  return vspace;\n@@ -2481,1 +2485,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionLAB.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVMOperations.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/spaceCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/cSpaceCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/cardTableRS.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/serialArguments.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -50,0 +49,1 @@\n+\n@@ -51,0 +51,1 @@\n+\n@@ -55,3 +56,4 @@\n-  if (!_vs.initialize(rs, 0)) {\n-    vm_exit_during_initialization(\"Could not reserve enough space for heap offset array\");\n-  }\n+  const bool initialized = _vs.initialize(rs, 0 \/* committed_size *\/);\n+\n+  assert(initialized, \"Should never fail when commmitted_size is 0\");\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/serialFullGC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -114,0 +114,3 @@\n+  void gc_prologue(bool full);\n+  void gc_epilogue(bool full);\n+\n@@ -229,4 +232,0 @@\n- protected:\n-  virtual void gc_prologue(bool full);\n-  virtual void gc_epilogue(bool full);\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/serialMemoryPools.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/serialStringDedup.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/serialVMOperations.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/accessBarrierSupport.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/adaptiveSizePolicy.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/ageTable.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/ageTableTracer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/allocTracer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetStackChunk.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -71,1 +70,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/bufferNode.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/bufferNodeList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/barrierSetC1.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/cardTableBarrierSetC1.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/modRefBarrierSetC1.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -53,2 +52,0 @@\n-                                         Node* ctl,\n-                                         Node* oop_store,\n@@ -57,1 +54,0 @@\n-                                         uint  adr_idx,\n@@ -59,1 +55,0 @@\n-                                         BasicType bt,\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-                            Node* ctl,\n-                            Node* store,\n@@ -37,1 +35,0 @@\n-                            uint adr_idx,\n@@ -39,1 +36,0 @@\n-                            BasicType bt,\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -29,1 +28,0 @@\n-#include \"opto\/narrowptrnode.hpp\"\n@@ -31,1 +29,0 @@\n-#include \"utilities\/macros.hpp\"\n@@ -36,1 +33,0 @@\n-  const TypePtr* adr_type = access.addr().type();\n@@ -51,1 +47,0 @@\n-  GraphKit* kit = parse_access.kit();\n@@ -53,5 +48,0 @@\n-  uint adr_idx = kit->C->get_alias_index(adr_type);\n-  assert(adr_idx != Compile::AliasIdxTop, \"use other store_to_memory factory\" );\n-\n-  pre_barrier(kit, true \/* do_load *\/, kit->control(), access.base(), adr, adr_idx, val.node(),\n-              static_cast<const TypeOopPtr*>(val.type()), nullptr \/* pre_val *\/, access.type());\n@@ -59,2 +49,1 @@\n-  post_barrier(kit, kit->control(), access.raw_access(), access.base(), adr, adr_idx, val.node(),\n-               access.type(), use_precise);\n+  post_barrier(parse_access.kit(), access.base(), adr, val.node(), use_precise);\n@@ -67,2 +56,0 @@\n-  GraphKit* kit = access.kit();\n-\n@@ -73,4 +60,0 @@\n-  pre_barrier(kit, false \/* do_load *\/,\n-              kit->control(), nullptr, nullptr, max_juint, nullptr, nullptr,\n-              expected_val \/* pre_val *\/, T_OBJECT);\n-\n@@ -79,2 +62,1 @@\n-  post_barrier(kit, kit->control(), access.raw_access(), access.base(),\n-               access.addr().node(), access.alias_idx(), new_val, T_OBJECT, true);\n+  post_barrier(access.kit(), access.base(), access.addr().node(), new_val, true);\n@@ -93,4 +75,0 @@\n-  pre_barrier(kit, false \/* do_load *\/,\n-              kit->control(), nullptr, nullptr, max_juint, nullptr, nullptr,\n-              expected_val \/* pre_val *\/, T_OBJECT);\n-\n@@ -112,2 +90,1 @@\n-    post_barrier(kit, ideal.ctrl(), access.raw_access(), access.base(),\n-                 access.addr().node(), access.alias_idx(), new_val, T_OBJECT, true);\n+    post_barrier(kit, access.base(), access.addr().node(), new_val, true);\n@@ -122,2 +99,0 @@\n-  GraphKit* kit = access.kit();\n-\n@@ -129,8 +104,1 @@\n-  \/\/ Don't need to load pre_val. The old value is returned by load_store.\n-  \/\/ The pre_barrier can execute after the xchg as long as no safepoint\n-  \/\/ gets inserted between them.\n-  pre_barrier(kit, false \/* do_load *\/,\n-              kit->control(), nullptr, nullptr, max_juint, nullptr, nullptr,\n-              result \/* pre_val *\/, T_OBJECT);\n-  post_barrier(kit, kit->control(), access.raw_access(), access.base(), access.addr().node(),\n-               access.alias_idx(), new_val, T_OBJECT, true);\n+  post_barrier(access.kit(), access.base(), access.addr().node(), new_val, true);\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/modRefBarrierSetC2.cpp","additions":5,"deletions":37,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,11 +34,0 @@\n-  virtual void pre_barrier(GraphKit* kit,\n-                           bool do_load,\n-                           Node* ctl,\n-                           Node* obj,\n-                           Node* adr,\n-                           uint adr_idx,\n-                           Node* val,\n-                           const TypeOopPtr* val_type,\n-                           Node* pre_val,\n-                           BasicType bt) const {}\n-\n@@ -46,2 +35,0 @@\n-                            Node* ctl,\n-                            Node* store,\n@@ -50,1 +37,0 @@\n-                            uint adr_idx,\n@@ -52,1 +38,0 @@\n-                            BasicType bt,\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/modRefBarrierSetC2.hpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -86,2 +85,0 @@\n-  os::trace_page_sizes(\"Card Table\", num_bytes, num_bytes,\n-                       rs.base(), rs.size(), _page_size);\n@@ -93,0 +90,5 @@\n+  MemTracker::record_virtual_memory_tag((address)rs.base(), rs.size(), mtGC);\n+\n+  os::trace_page_sizes(\"Card Table\", num_bytes, num_bytes,\n+                       rs.base(), rs.size(), _page_size);\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTableBarrierSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/classUnloadingContext.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/collectorCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/concurrentGCBreakpoints.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/concurrentGCThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/freeListAllocator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/fullGCForwarding.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcArguments.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcBehaviours.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcCause.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcConfig.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcConfiguration.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcId.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcInitLogger.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLocker.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLogPrecious.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcOverheadChecker.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcPolicyCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTimer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTrace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceSend.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceTime.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcUtil.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -143,2 +142,2 @@\n-  if (_full_gc && UseZGC) {\n-    \/\/ ZGC cannot perform a synchronous GC cycle from within the VM thread.\n+  if (_full_gc && (UseZGC || UseShenandoahGC)) {\n+    \/\/ ZGC and Shenandoah cannot perform a synchronous GC cycle from within the VM thread.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcVMOperations.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/genArguments.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/generationCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/hSpaceCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/isGCActiveMark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/jvmFlagConstraintsGC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/locationPrinter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/markBitMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/objectCountEventSender.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/parallelCleaning.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArraySplitter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayState.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayTaskStats.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayTaskStepper.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/plab.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/pretouchTask.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/referencePolicy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessorPhaseTimes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/scavengableNMethods.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/spaceDecorator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupConfig.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupStat.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupStorageUse.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/strongRootsScope.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/suspendibleThreadSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/threadLocalAllocBuffer.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessorTimes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/workerDataArray.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/workerPolicy.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/workerUtils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGlobalHeuristics.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n@@ -225,1 +223,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahGenerationalMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -54,1 +53,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahMode.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAgeCensus.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSetNMethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSetStackChunk.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBreakpoint.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardStats.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -83,4 +82,0 @@\n-  MemTracker::record_virtual_memory_tag((address)card_table.base(), card_table.size(), mtGC);\n-\n-  os::trace_page_sizes(\"Card Table\", _byte_map_size, _byte_map_size,\n-                       card_table.base(), card_table.size(), _page_size);\n@@ -90,0 +85,5 @@\n+\n+  MemTracker::record_virtual_memory_tag((address)card_table.base(), mtGC);\n+\n+  os::trace_page_sizes(\"Card Table\", _byte_map_size, _byte_map_size,\n+                       card_table.base(), card_table.size(), _page_size);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -113,1 +112,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahController.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacOOMHandler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacTracker.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationSizer.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalControlThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n@@ -327,1 +325,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n@@ -390,0 +389,3 @@\n+\n+      \/\/ Maybe Shenandoah wants to check the the memory got reserved here?\n+\n@@ -1501,0 +1503,12 @@\n+void ShenandoahHeap::collect_as_vm_thread(GCCause::Cause cause) {\n+  \/\/ These requests are ignored because we can't easily have Shenandoah jump into\n+  \/\/ a synchronous (degenerated or full) cycle while it is in the middle of a concurrent\n+  \/\/ cycle. We _could_ cancel the concurrent cycle and then try to run a cycle directly\n+  \/\/ on the VM thread, but this would confuse the control thread mightily and doesn't\n+  \/\/ seem worth the trouble. Instead, we will have the caller thread run (and wait for) a\n+  \/\/ concurrent cycle in the prologue of the heap inspect\/dump operation. This is how\n+  \/\/ other concurrent collectors in the JVM handle this scenario as well.\n+  assert(Thread::current()->is_VM_thread(), \"Should be the VM thread\");\n+  guarantee(cause == GCCause::_heap_dump || cause == GCCause::_heap_inspection, \"Invalid cause\");\n+}\n+\n@@ -1585,1 +1599,3 @@\n-  assert(gc_cause()  == GCCause::_no_gc, \"Over-writing cause\");\n+  const GCCause::Cause current = gc_cause();\n+  assert(current == GCCause::_no_gc, \"Over-writing cause: %s, with: %s\",\n+         GCCause::to_string(current), GCCause::to_string(cause));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -637,0 +637,1 @@\n+  void collect_as_vm_thread(GCCause::Cause cause) override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionClosures.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahJfrSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLock.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMemoryPool.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMonitoringSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNumberSeq.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGC.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPacer.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahParallelCleaning.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPhaseTimings.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRegulatorThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootVerifier.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRuntime.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSATBMarkQueueSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahStackWatermark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTrace.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUncommitThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUnload.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkGroup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkerPolicy.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/c1\/zBarrierSetC1.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/vmStructs_z.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zAbort.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zAddress.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zAddressSpaceLimit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zAllocator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -145,4 +144,0 @@\n-  if (FLAG_IS_DEFAULT(ZFragmentationLimit)) {\n-    FLAG_SET_DEFAULT(ZFragmentationLimit, 5.0);\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetAssembler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetNMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetRuntime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetStackChunk.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zBreakpoint.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zCPU.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zContinuation.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zDirector.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zDriver.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zDriverPort.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zErrno.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zForwardingAllocator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zGCIdPrinter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zGlobals.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zHeuristics.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zInitialize.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zJNICritical.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zLargePages.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zLiveMap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkCache.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStack.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zMemory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zMetronome.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMT.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethodData.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethodTable.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethodTableIteration.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNUMA.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zObjArrayAllocator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zPage.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zPageCache.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zPageTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zPhysicalMemory.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zReferenceProcessor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zRemembered.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zRememberedSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zResurrection.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zRootsIterator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zRuntimeWorkers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zServiceability.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zStackWatermark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zStoreBarrierBuffer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zThreadLocalAllocBuffer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zTracer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zUncoloredRoot.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zUncommitter.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zUnload.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zUnmapper.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zUtils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zVirtualMemory.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zWeakRootsProcessor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zWorkers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeHistogram.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeStream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/interpreter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-  friend class CodeCacheDumper; \/\/ possible extension [do not remove]\n","filename":"src\/hotspot\/share\/interpreter\/interpreter.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1434,32 +1433,0 @@\n-void SignatureHandlerLibrary::add(uint64_t fingerprint, address handler) {\n-  int handler_index = -1;\n-  \/\/ use customized signature handler\n-  MutexLocker mu(SignatureHandlerLibrary_lock);\n-  \/\/ make sure data structure is initialized\n-  initialize();\n-  fingerprint = InterpreterRuntime::normalize_fast_native_fingerprint(fingerprint);\n-  handler_index = _fingerprints->find(fingerprint);\n-  \/\/ create handler if necessary\n-  if (handler_index < 0) {\n-    if (PrintSignatureHandlers && (handler != Interpreter::slow_signature_handler())) {\n-      tty->cr();\n-      tty->print_cr(\"argument handler #%d at \" PTR_FORMAT \" for fingerprint \" UINT64_FORMAT,\n-                    _handlers->length(),\n-                    p2i(handler),\n-                    fingerprint);\n-    }\n-    _fingerprints->append(fingerprint);\n-    _handlers->append(handler);\n-  } else {\n-    if (PrintSignatureHandlers) {\n-      tty->cr();\n-      tty->print_cr(\"duplicate argument handler #%d for fingerprint \" UINT64_FORMAT \"(old: \" PTR_FORMAT \", new : \" PTR_FORMAT \")\",\n-                    _handlers->length(),\n-                    fingerprint,\n-                    p2i(_handlers->at(handler_index)),\n-                    p2i(handler));\n-    }\n-  }\n-}\n-\n-\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":34,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -195,1 +195,0 @@\n-  static void add(uint64_t fingerprint, address handler);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/invocationCounter.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -91,1 +91,0 @@\n-  friend class CodeCacheExtensions;\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreter.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -247,1 +246,0 @@\n-  \/\/ (ExcutableCodeManager calls not needed to copy the entries)\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/templateTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/zero\/zeroInterpreterGenerator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrJvmtiAgent.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/jfr.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaCall.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrUpcalls.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/bfsClosure.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/dfsClosure.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edge.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeQueue.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeStore.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeUtils.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/pathToGcRootsOperation.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/rootSetClosure.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/eventEmitter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleDescription.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleWriter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/rootResolver.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/leakProfiler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSample.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSampler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/sampleList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/samplePriorityQueue.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/utilities\/granularTimer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/utilities\/rootType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -91,1 +90,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrCompilerQueueUtilization.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrFinalizerStatisticsEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrModuleEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrNativeMemoryEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrNetworkUtilization.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrOSInterface.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrThreadCPULoadEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrThreadDumpEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCallTrace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointWriter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrMetadataEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadGroup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadState.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSetUtils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdEpoch.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdKlassQueue.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdLoadBarrier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrEventSetting.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunk.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkRotation.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkWriter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrRepository.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrEventThrottler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrMemorySizer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrPostBox.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderThreadLoop.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackFilter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackFilterRegistry.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrBuffer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrReferenceCountedStorage.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorage.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageControl.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPoolBuffer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPoolWriter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAdaptiveSampler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAllocationTracer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrDeprecationEventWriter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrDeprecationManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrFlush.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrIntrinsics.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrJdkJfrEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrKlassUnloading.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrMethodData.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrMethodLookup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrNativeLibraryLoadEvent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrObjectAllocationSample.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrResolution.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrStackTraceMark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrSymbolTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrAllocation.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrBlob.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrJavaLog.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrThreadIterator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrTime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrTimeConverter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrJavaEventWriter.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/metadataHandles.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/libadt\/dict.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/libadt\/vectset.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -111,1 +110,1 @@\n-  log_info(logging)(\"AsyncLogBuffer estimates memory use: \" SIZE_FORMAT \" bytes\", size * 2);\n+  log_info(logging)(\"AsyncLogBuffer estimates memory use: %zu bytes\", size * 2);\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -217,2 +216,2 @@\n-         \"idx must be in range 1 < idx < _n_outputs, but idx = \" SIZE_FORMAT\n-         \" and _n_outputs = \" SIZE_FORMAT, idx, _n_outputs);\n+         \"idx must be in range 1 < idx < _n_outputs, but idx = %zu\"\n+         \" and _n_outputs = %zu\", idx, _n_outputs);\n@@ -243,1 +242,1 @@\n-  assert(idx < _n_outputs, \"Invalid index, idx = \" SIZE_FORMAT \" and _n_outputs = \" SIZE_FORMAT, idx, _n_outputs);\n+  assert(idx < _n_outputs, \"Invalid index, idx = %zu and _n_outputs = %zu\", idx, _n_outputs);\n@@ -354,1 +353,1 @@\n-         \"Too many tags specified! Can only have up to \" SIZE_FORMAT \" tags in a tag set.\", LogTag::MaxTags);\n+         \"Too many tags specified! Can only have up to %zu tags in a tag set.\", LogTag::MaxTags);\n@@ -503,1 +502,1 @@\n-    int ret = sscanf(outputstr + 1, SIZE_FORMAT, &idx);\n+    int ret = sscanf(outputstr + 1, \"%zu\", &idx);\n@@ -569,1 +568,1 @@\n-    out->print(\" #\" SIZE_FORMAT \": \", i);\n+    out->print(\" #%zu: \", i);\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logDecorations.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logDecorators.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logDiagnosticCommand.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -188,1 +187,1 @@\n-                            SIZE_FORMAT \"]\", FileSizeOptionKey, (size_t)SIZE_MAX);\n+                            \"%zu]\", FileSizeOptionKey, (size_t)SIZE_MAX);\n@@ -218,1 +217,1 @@\n-                     \", filesize: \" SIZE_FORMAT \" KiB).\",\n+                     \", filesize: %zu KiB).\",\n@@ -464,1 +463,1 @@\n-  out->print(\",filecount=%u,filesize=\" SIZE_FORMAT \"%s,async=%s\", _file_count,\n+  out->print(\",filecount=%u,filesize=%zu%s,async=%s\", _file_count,\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logLevel.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logMessageBuffer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logOutput.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logOutputList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -148,1 +147,1 @@\n-        errstream->print_cr(\"Too many tags in log selection '%s' (can only have up to \" SIZE_FORMAT \" tags).\",\n+        errstream->print_cr(\"Too many tags in log selection '%s' (can only have up to %zu tags).\",\n","filename":"src\/hotspot\/share\/logging\/logSelection.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -75,1 +74,1 @@\n-        errstream->print_cr(\"Can not have more than \" SIZE_FORMAT \" log selections in a single configuration.\",\n+        errstream->print_cr(\"Can not have more than %zu log selections in a single configuration.\",\n","filename":"src\/hotspot\/share\/logging\/logSelectionList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logStream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logTag.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logTagSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logTagSetDescriptions.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/classLoaderMetaspace.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/guardedMemory.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/iterator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/memRegion.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -428,13 +427,11 @@\n-  const size_t attach_range = highest_start - lowest_start;\n-  \/\/ Cap num_attempts at possible number.\n-  \/\/ At least one is possible even for 0 sized attach range.\n-  const uint64_t num_attempts_possible = (attach_range \/ attach_point_alignment) + 1;\n-  const uint64_t num_attempts_to_try   = MIN2((uint64_t)HeapSearchSteps, num_attempts_possible);\n-\n-  const size_t stepsize = (attach_range == 0) ? \/\/ Only one try.\n-    (size_t) highest_start : align_up(attach_range \/ num_attempts_to_try, attach_point_alignment);\n-\n-  \/\/ Try attach points from top to bottom.\n-  for (char* attach_point = highest_start;\n-       attach_point >= lowest_start && attach_point <= highest_start;  \/\/ Avoid wrap around.\n-       attach_point -= stepsize) {\n+  assert(is_aligned(highest_start, attach_point_alignment), \"precondition\");\n+  assert(is_aligned(lowest_start, attach_point_alignment), \"precondition\");\n+\n+  const size_t attach_range = pointer_delta(highest_start, lowest_start, sizeof(char));\n+  const size_t num_attempts_possible = (attach_range \/ attach_point_alignment) + 1;\n+  const size_t num_attempts_to_try   = MIN2((size_t)HeapSearchSteps, num_attempts_possible);\n+  const size_t num_intervals = num_attempts_to_try - 1;\n+  const size_t stepsize = num_intervals == 0 ? 0 : align_down(attach_range \/ num_intervals, attach_point_alignment);\n+\n+  for (size_t i = 0; i < num_attempts_to_try; ++i) {\n+    char* const attach_point = highest_start - stepsize * i;\n","filename":"src\/hotspot\/share\/memory\/memoryReserver.cpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n@@ -220,1 +219,1 @@\n-                \"used \"      SIZE_FORMAT \"K, \"\n+                \"used %zuK, \"\n@@ -229,1 +228,1 @@\n-                  \"used \"      SIZE_FORMAT \"K, \"\n+                  \"used %zuK, \"\n@@ -569,1 +568,1 @@\n-  assert(rs.size() == CompressedClassSpaceSize, SIZE_FORMAT \" != %zu\",\n+  assert(rs.size() == CompressedClassSpaceSize, \"%zu != %zu\",\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkHeaderPool.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunklevel.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/commitLimiter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/commitMask.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/freeBlocks.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/freeChunkList.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/internalStats.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunk.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunkList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArenaGrowthPolicy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceCommon.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceContext.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceDCmd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceReporter.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceStatistics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/printCLDMetaspaceInfoClosure.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/printMetaspaceInfoKlassClosure.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/rootChunkArea.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/runningCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceList.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspaceCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspaceCriticalAllocation.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspaceTracer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/reservedSpace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/memory\/resourceArea.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -962,9 +961,5 @@\n-  if (rhs.is_reserved()) {\n-    assert(total_reserved == rhs.size(),    \"must be exactly of required size\");\n-    assert(is_aligned(rhs.base(),alignment),\"must be exactly of required alignment\");\n-\n-    assert(markWord::encode_pointer_as_mark(rhs.base()).decode_pointer() == rhs.base(),\n-           \"area must be distinguishable from marks for mark-sweep\");\n-    assert(markWord::encode_pointer_as_mark(&rhs.base()[rhs.size()]).decode_pointer() ==\n-           &rhs.base()[rhs.size()],\n-           \"area must be distinguishable from marks for mark-sweep\");\n+  if (!rhs.is_reserved()) {\n+    vm_exit_during_initialization(\n+      err_msg(\"Could not reserve enough space for %zu KB object heap\",\n+              total_reserved\/K));\n+  }\n@@ -972,1 +967,2 @@\n-    \/\/ We are good.\n+  assert(total_reserved == rhs.size(),    \"must be exactly of required size\");\n+  assert(is_aligned(rhs.base(),alignment),\"must be exactly of required alignment\");\n@@ -974,3 +970,5 @@\n-    if (AllocateHeapAt != nullptr) {\n-      log_info(gc,heap)(\"Successfully allocated Java heap at location %s\", AllocateHeapAt);\n-    }\n+  assert(markWord::encode_pointer_as_mark(rhs.base()).decode_pointer() == rhs.base(),\n+      \"area must be distinguishable from marks for mark-sweep\");\n+  assert(markWord::encode_pointer_as_mark(&rhs.base()[rhs.size()]).decode_pointer() ==\n+      &rhs.base()[rhs.size()],\n+      \"area must be distinguishable from marks for mark-sweep\");\n@@ -978,3 +976,1 @@\n-    if (UseCompressedOops) {\n-      CompressedOops::initialize(rhs);\n-    }\n+  \/\/ We are good.\n@@ -982,1 +978,3 @@\n-    Universe::calculate_verify_data((HeapWord*)rhs.base(), (HeapWord*)rhs.end());\n+  if (AllocateHeapAt != nullptr) {\n+    log_info(gc,heap)(\"Successfully allocated Java heap at location %s\", AllocateHeapAt);\n+  }\n@@ -984,1 +982,2 @@\n-    return rhs;\n+  if (UseCompressedOops) {\n+    CompressedOops::initialize(rhs);\n@@ -987,3 +986,1 @@\n-  vm_exit_during_initialization(\n-    err_msg(\"Could not reserve enough space for %zuKB object heap\",\n-            total_reserved\/K));\n+  Universe::calculate_verify_data((HeapWord*)rhs.base(), (HeapWord*)rhs.end());\n@@ -991,2 +988,1 @@\n-  \/\/ satisfy compiler\n-  ShouldNotReachHere();\n+  return rhs;\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":20,"deletions":24,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -61,1 +60,1 @@\n-  if(!rs.is_reserved()) return false;  \/\/ allocation failed.\n+  assert(rs.is_reserved(), \"ReservedSpace should have been initialized\");\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * If NMT is active (state >= minimal), we need to track allocations. A simple and cheap way to\n+ * If NMT is active (state >= summary), we need to track allocations. A simple and cheap way to\n","filename":"src\/hotspot\/share\/nmt\/mallocHeader.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -233,1 +232,0 @@\n-\n","filename":"src\/hotspot\/share\/nmt\/mallocLimit.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/mallocSiteTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-#include \"precompiled.hpp\"\n@@ -234,0 +233,4 @@\n+  if (p2u(addr) < MAX2(os::vm_min_address(), (size_t)16 * M)) {\n+    return false; \/\/ bail out\n+  }\n+\n@@ -242,2 +245,2 @@\n-    const uint8_t* here = align_down(addr, smallest_possible_alignment);\n-    const uint8_t* const end = here - (0x1000 + sizeof(MallocHeader)); \/\/ stop searching after 4k\n+    uintptr_t here = (uintptr_t)align_down(addr, smallest_possible_alignment);\n+    uintptr_t end = MAX2(smallest_possible_alignment, here - (0x1000 + sizeof(MallocHeader))); \/\/ stop searching after 4k\n@@ -246,3 +249,2 @@\n-      if (!os::is_readable_range(here, here + sizeof(MallocHeader))) {\n-        \/\/ Probably OOB, give up\n-        break;\n+      if (!os::is_readable_range((void*)here, (void*)(here + sizeof(MallocHeader)))) {\n+        break; \/\/ Probably OOB, give up\n@@ -295,1 +297,1 @@\n-    st->print_cr(PTR_FORMAT \" %s %s malloced block starting at \" PTR_FORMAT \", size \" SIZE_FORMAT \", tag %s\",\n+    st->print_cr(PTR_FORMAT \" %s %s malloced block starting at \" PTR_FORMAT \", size %zu, tag %s\",\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -144,1 +143,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -47,2 +46,2 @@\n-  assert(c1 <= SSIZE_MAX, \"counter out of range: \" SIZE_FORMAT \".\", c1);\n-  assert(c2 <= SSIZE_MAX, \"counter out of range: \" SIZE_FORMAT \".\", c2);\n+  assert(c1 <= SSIZE_MAX, \"counter out of range: %zu.\", c1);\n+  assert(c2 <= SSIZE_MAX, \"counter out of range: %zu.\", c2);\n@@ -68,1 +67,1 @@\n-  output()->print(\"reserved=\" SIZE_FORMAT \"%s, committed=\" SIZE_FORMAT \"%s\",\n+  output()->print(\"reserved=%zu%s, committed=%zu%s\",\n@@ -71,1 +70,1 @@\n-    output()->print(\", peak=\" SIZE_FORMAT \"%s\", amount_in_current_scale(peak), scale);\n+    output()->print(\", peak=%zu%s\", amount_in_current_scale(peak), scale);\n@@ -84,1 +83,1 @@\n-    out->print(\"(%s\" SIZE_FORMAT \"%s type=%s\", alloc_type,\n+    out->print(\"(%s%zu%s type=%s\", alloc_type,\n@@ -87,1 +86,1 @@\n-    out->print(\"(%s\" SIZE_FORMAT \"%s\", alloc_type,\n+    out->print(\"(%s%zu%s\", alloc_type,\n@@ -93,1 +92,1 @@\n-    out->print(\" #\" SIZE_FORMAT \"\", count);\n+    out->print(\" #%zu\", count);\n@@ -103,1 +102,1 @@\n-    out->print(\" (peak=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\",\n+    out->print(\" (peak=%zu%s #%zu)\",\n@@ -111,1 +110,1 @@\n-  out->print(\"(mmap: reserved=\" SIZE_FORMAT \"%s, committed=\" SIZE_FORMAT \"%s, \",\n+  out->print(\"(mmap: reserved=%zu%s, committed=%zu%s, \",\n@@ -116,1 +115,1 @@\n-    out->print(\"peak=\" SIZE_FORMAT \"%s)\", amount_in_current_scale(peak), scale);\n+    out->print(\"peak=%zu%s)\", amount_in_current_scale(peak), scale);\n@@ -127,1 +126,1 @@\n-  out->print(\"(arena=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\",\n+  out->print(\"(arena=%zu%s #%zu)\",\n@@ -135,1 +134,1 @@\n-    out->print(\" (peak=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\",\n+    out->print(\" (peak=%zu%s #%zu)\",\n@@ -142,1 +141,1 @@\n-  output()->print(\"[\" PTR_FORMAT \" - \" PTR_FORMAT \"] %s \" SIZE_FORMAT \"%s\",\n+  output()->print(\"[\" PTR_FORMAT \" - \" PTR_FORMAT \"] %s %zu%s\",\n@@ -170,1 +169,1 @@\n-    out->print_cr(\"malloc: \" SIZE_FORMAT \"%s #\" SIZE_FORMAT \", peak=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT,\n+    out->print_cr(\"malloc: %zu%s #%zu, peak=%zu%s #%zu\",\n@@ -229,1 +228,1 @@\n-    output()->print(\", readonly=\" SIZE_FORMAT \"%s\",\n+    output()->print(\", readonly=%zu%s\",\n@@ -239,2 +238,2 @@\n-    out->print_cr(\"(classes #\" SIZE_FORMAT \")\", (_instance_class_count + _array_class_count));\n-    out->print_cr(\"(  instance classes #\" SIZE_FORMAT \", array classes #\" SIZE_FORMAT \")\",\n+    out->print_cr(\"(classes #%zu)\", (_instance_class_count + _array_class_count));\n+    out->print_cr(\"(  instance classes #%zu, array classes #%zu)\",\n@@ -246,1 +245,1 @@\n-    out->print_cr(\"(threads #\" SIZE_FORMAT \")\", ThreadStackTracker::thread_count());\n+    out->print_cr(\"(threads #%zu)\", ThreadStackTracker::thread_count());\n@@ -270,1 +269,1 @@\n-    out->print_cr(\"(tracking overhead=\" SIZE_FORMAT \"%s)\",\n+    out->print_cr(\"(tracking overhead=%zu%s)\",\n@@ -306,2 +305,2 @@\n-  out->print_cr(\"(    used=\" SIZE_FORMAT \"%s)\", amount_in_current_scale(stats.used()), scale);\n-  out->print_cr(\"(    waste=\" SIZE_FORMAT \"%s =%2.2f%%)\", amount_in_current_scale(waste),\n+  out->print_cr(\"(    used=%zu%s)\", amount_in_current_scale(stats.used()), scale);\n+  out->print_cr(\"(    waste=%zu%s =%2.2f%%)\", amount_in_current_scale(waste),\n@@ -480,1 +479,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n@@ -555,1 +554,1 @@\n-  out->print(\"%s\" SIZE_FORMAT \"%s\", alloc_tag, amount_in_current_scale(current_amount), scale);\n+  out->print(\"%s%zu%s\", alloc_tag, amount_in_current_scale(current_amount), scale);\n@@ -566,1 +565,1 @@\n-    out->print(\" #\" SIZE_FORMAT \"\", current_count);\n+    out->print(\" #%zu\", current_count);\n@@ -578,1 +577,1 @@\n-  out->print(\"arena=\" SIZE_FORMAT \"%s\", amount_in_current_scale(current_amount), scale);\n+  out->print(\"arena=%zu%s\", amount_in_current_scale(current_amount), scale);\n@@ -584,1 +583,1 @@\n-  out->print(\" #\" SIZE_FORMAT \"\", current_count);\n+  out->print(\" #%zu\", current_count);\n@@ -595,1 +594,1 @@\n-  out->print(\"reserved=\" SIZE_FORMAT \"%s\", amount_in_current_scale(current_reserved), scale);\n+  out->print(\"reserved=%zu%s\", amount_in_current_scale(current_reserved), scale);\n@@ -601,1 +600,1 @@\n-  out->print(\", committed=\" SIZE_FORMAT \"%s\", amount_in_current_scale(current_committed), scale);\n+  out->print(\", committed=%zu%s\", amount_in_current_scale(current_committed), scale);\n@@ -661,1 +660,1 @@\n-      out->print(\"(classes #\" SIZE_FORMAT, _current_baseline.class_count());\n+      out->print(\"(classes #%zu\", _current_baseline.class_count());\n@@ -669,1 +668,1 @@\n-      out->print(\"(  instance classes #\" SIZE_FORMAT, _current_baseline.instance_class_count());\n+      out->print(\"(  instance classes #%zu\", _current_baseline.instance_class_count());\n@@ -675,1 +674,1 @@\n-      out->print(\", array classes #\" SIZE_FORMAT, _current_baseline.array_class_count());\n+      out->print(\", array classes #%zu\", _current_baseline.array_class_count());\n@@ -685,1 +684,1 @@\n-      out->print(\"(threads #\" SIZE_FORMAT, _current_baseline.thread_count());\n+      out->print(\"(threads #%zu\", _current_baseline.thread_count());\n@@ -739,1 +738,1 @@\n-      out->print(\"(tracking overhead=\" SIZE_FORMAT \"%s\",\n+      out->print(\"(tracking overhead=%zu%s\",\n@@ -785,1 +784,1 @@\n-  out->print(\"(    used=\" SIZE_FORMAT \"%s\",\n+  out->print(\"(    used=%zu%s\",\n@@ -795,1 +794,1 @@\n-  out->print(\"(    waste=\" SIZE_FORMAT \"%s =%2.2f%%\",\n+  out->print(\"(    waste=%zu%s =%2.2f%%\",\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":35,"deletions":36,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -55,0 +54,2 @@\n+bool MemTracker::NmtVirtualMemoryLocker::_safe_to_use;\n+\n","filename":"src\/hotspot\/share\/nmt\/memTracker.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -74,0 +73,6 @@\n+  \/\/ This may be called on a detached thread during VM init, so we should check that first.\n+  static inline void assert_locked() {\n+    assert(!NmtVirtualMemoryLocker::is_safe_to_use() || NmtVirtualMemory_lock->owned_by_self(),\n+           \"should have acquired NmtVirtualMemory_lock\");\n+  }\n+\n@@ -137,1 +142,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker nvml;\n@@ -163,1 +168,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker nvml;\n@@ -174,1 +179,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker nvml;\n@@ -182,1 +187,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker nvml;\n@@ -190,1 +195,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker nvml;\n@@ -199,1 +204,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker nvml;\n@@ -208,1 +213,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker nvml;\n@@ -222,1 +227,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker nvml;\n@@ -231,1 +236,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker nvml;\n@@ -281,0 +286,33 @@\n+  \/*\n+   * NmtVirtualMemoryLocker is similar to MutexLocker but can be used during VM init before mutexes are ready or\n+   * current thread has been assigned. Performs no action during VM init.\n+   *\n+   * Unlike malloc, NMT requires locking for virtual memory operations. This is because it must synchronize the usage\n+   * of global data structures used for modelling the effect of virtual memory operations.\n+   * It is important that locking is used such that the actual OS memory operations (mmap) are done atomically with the\n+   * corresponding NMT accounting (updating the internal model). Currently, this is not the case in all situations\n+   * (see JDK-8341491), but this should be changed in the future.\n+   *\n+   * An issue with using Mutex is that NMT is used early during VM initialization before mutexes are initialized\n+   * and current thread is attached. Mutexes do not work under those conditions, so we must use a flag to avoid\n+   * attempting to lock until initialization is finished. Lack of synchronization here should not be a problem since it\n+   * is single threaded at that point in time anyway.\n+   *\/\n+  class NmtVirtualMemoryLocker: StackObj {\n+    \/\/ Returns true if it is safe to start using this locker.\n+    static bool _safe_to_use;\n+    ConditionalMutexLocker _cml;\n+\n+  public:\n+    NmtVirtualMemoryLocker(): _cml(NmtVirtualMemory_lock, _safe_to_use, Mutex::_no_safepoint_check_flag){}\n+\n+    static inline bool is_safe_to_use()  {\n+      return _safe_to_use;\n+    }\n+\n+    \/\/ Set in Threads::create_vm once threads and mutexes have been initialized.\n+    static inline void set_safe_to_use()  {\n+      _safe_to_use = true;\n+    }\n+  };\n+\n@@ -289,2 +327,0 @@\n-  \/\/ Query lock\n-  static Mutex*           _query_lock;\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":48,"deletions":12,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -32,1 +31,0 @@\n-#include \"runtime\/mutex.hpp\"\n@@ -38,1 +36,0 @@\n-PlatformMutex* MemoryFileTracker::Instance::_mutex = nullptr;\n@@ -90,1 +87,1 @@\n-      stream->print_cr(\"[\" PTR_FORMAT \" - \" PTR_FORMAT \"] allocated \" SIZE_FORMAT \"%s\" \" for %s from\",\n+      stream->print_cr(\"[\" PTR_FORMAT \" - \" PTR_FORMAT \"] allocated %zu%s\" \" for %s from\",\n@@ -136,1 +133,0 @@\n-  _mutex = new PlatformMutex();\n@@ -197,8 +193,0 @@\n-\n-MemoryFileTracker::Instance::Locker::Locker() {\n-  MemoryFileTracker::Instance::_mutex->lock();\n-}\n-\n-MemoryFileTracker::Instance::Locker::~Locker() {\n-  MemoryFileTracker::Instance::_mutex->unlock();\n-}\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"nmt\/vmtCommon.hpp\"\n@@ -32,2 +33,0 @@\n-#include \"nmt\/vmtCommon.hpp\"\n-#include \"runtime\/mutex.hpp\"\n@@ -96,1 +95,0 @@\n-    static PlatformMutex* _mutex;\n@@ -99,5 +97,0 @@\n-    class Locker : public StackObj {\n-    public:\n-      Locker();\n-      ~Locker();\n-    };\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/nativeCallStackPrinter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-#include \"precompiled.hpp\"\n+\n","filename":"src\/hotspot\/share\/nmt\/nmtCommon.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/nmtDCmd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/nmtNativeCallStackStorage.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -135,1 +134,1 @@\n-  st->print(\"entries: %d (primary: %d, empties: %d), sum bytes: \" SIZE_FORMAT\n+  st->print(\"entries: %d (primary: %d, empties: %d), sum bytes: %zu\"\n@@ -146,1 +145,1 @@\n-      st->print( PTR_FORMAT \"(\" SIZE_FORMAT \") \", p2i(a->payload), a->size);\n+      st->print( PTR_FORMAT \"(%zu) \", p2i(a->payload), a->size);\n","filename":"src\/hotspot\/share\/nmt\/nmtPreInit.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+#include <type_traits>\n@@ -233,1 +234,3 @@\n-    _node_count(0) {}\n+    _node_count(0) {\n+    static_assert(std::is_trivially_destructible<K>::value, \"must be\");\n+  }\n@@ -271,0 +274,1 @@\n+      second_split.right->_value.~V();\n@@ -288,0 +292,1 @@\n+      head->_value.~V();\n","filename":"src\/hotspot\/share\/nmt\/nmtTreap.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -97,1 +96,1 @@\n-    MFT::Locker lock;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/regionsTree.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -32,1 +31,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -56,1 +54,0 @@\n-  ThreadCritical tc;\n@@ -66,1 +63,1 @@\n-  ThreadCritical tc;\n+  MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/share\/nmt\/threadStackTracker.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -27,1 +26,0 @@\n-#include \"nmt\/virtualMemoryTracker.hpp\"\n@@ -29,0 +27,3 @@\n+#include \"nmt\/virtualMemoryTracker.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"utilities\/ostream.hpp\"\n@@ -99,1 +100,1 @@\n-                    \" diff-reserved:  %ld \"\n+                    \" diff-reserved:  %ld\"\n@@ -101,2 +102,2 @@\n-                    \" vms-reserved: \"  SIZE_FORMAT\n-                    \" vms-committed: \" SIZE_FORMAT,\n+                    \" vms-reserved: %zu\"\n+                    \" vms-committed: %zu\",\n@@ -159,1 +160,1 @@\n-  ThreadCritical tc;\n+  MemTracker::assert_locked();\n@@ -213,1 +214,1 @@\n-  ThreadCritical tc;\n+  MemTracker::assert_locked();\n@@ -215,1 +216,1 @@\n-    log_info(nmt)(\"region in walker vmem, base: \" INTPTR_FORMAT \" size: \" SIZE_FORMAT \" , %s, committed: \" SIZE_FORMAT,\n+    log_info(nmt)(\"region in walker vmem, base: \" INTPTR_FORMAT \" size: %zu , %s, committed: %zu\",\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -225,1 +224,1 @@\n-    out->print(SIZE_FORMAT \" (%s) - %s - \", current->key(), NMTUtil::tag_to_name(out_state(current).mem_tag()),\n+    out->print(\"%zu (%s) - %s - \", current->key(), NMTUtil::tag_to_name(out_state(current).mem_tag()),\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-#include \"precompiled.hpp\"\n+\n","filename":"src\/hotspot\/share\/nmt\/vmtCommon.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/accessBackend.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/annotations.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-    assert(elements <= (size_t)INT_MAX, \"number of elements \" SIZE_FORMAT \"doesn't fit into an int.\", elements);\n+    assert(elements <= (size_t)INT_MAX, \"number of elements %zu doesn't fit into an int.\", elements);\n@@ -82,1 +82,1 @@\n-           \"Expected: \" SIZE_FORMAT \" got: \" SIZE_FORMAT,\n+           \"Expected: %zu got: %zu\",\n@@ -138,1 +138,1 @@\n-    assert(words <= INT_MAX, \"Overflow: \" SIZE_FORMAT, words);\n+    assert(words <= INT_MAX, \"Overflow: %zu\", words);\n","filename":"src\/hotspot\/share\/oops\/array.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -164,1 +163,1 @@\n-  st->print(\"Heap address: \" PTR_FORMAT \", size: \" SIZE_FORMAT \" MB\",\n+  st->print(\"Heap address: \" PTR_FORMAT \", size: %zu MB\",\n","filename":"src\/hotspot\/share\/oops\/compressedOops.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/constMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/constMethodFlags.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -2021,132 +2020,0 @@\n-\/\/ JVMTI GetConstantPool support\n-\n-\/\/ For debugging of constant pool\n-const bool debug_cpool = false;\n-\n-#define DBG(code) do { if (debug_cpool) { (code); } } while(0)\n-\n-static void print_cpool_bytes(jint cnt, u1 *bytes) {\n-  const char* WARN_MSG = \"Must not be such entry!\";\n-  jint size = 0;\n-  u2   idx1, idx2;\n-\n-  for (jint idx = 1; idx < cnt; idx++) {\n-    jint ent_size = 0;\n-    u1   tag  = *bytes++;\n-    size++;                       \/\/ count tag\n-\n-    printf(\"const #%03d, tag: %02d \", idx, tag);\n-    switch(tag) {\n-      case JVM_CONSTANT_Invalid: {\n-        printf(\"Invalid\");\n-        break;\n-      }\n-      case JVM_CONSTANT_Unicode: {\n-        printf(\"Unicode      %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_Utf8: {\n-        u2 len = Bytes::get_Java_u2(bytes);\n-        char str[128];\n-        if (len > 127) {\n-           len = 127;\n-        }\n-        strncpy(str, (char *) (bytes+2), len);\n-        str[len] = '\\0';\n-        printf(\"Utf8          \\\"%s\\\"\", str);\n-        ent_size = 2 + len;\n-        break;\n-      }\n-      case JVM_CONSTANT_Integer: {\n-        u4 val = Bytes::get_Java_u4(bytes);\n-        printf(\"int          %d\", *(int *) &val);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_Float: {\n-        u4 val = Bytes::get_Java_u4(bytes);\n-        printf(\"float        %5.3ff\", *(float *) &val);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_Long: {\n-        u8 val = Bytes::get_Java_u8(bytes);\n-        printf(\"long         \" INT64_FORMAT, (int64_t) *(jlong *) &val);\n-        ent_size = 8;\n-        idx++; \/\/ Long takes two cpool slots\n-        break;\n-      }\n-      case JVM_CONSTANT_Double: {\n-        u8 val = Bytes::get_Java_u8(bytes);\n-        printf(\"double       %5.3fd\", *(jdouble *)&val);\n-        ent_size = 8;\n-        idx++; \/\/ Double takes two cpool slots\n-        break;\n-      }\n-      case JVM_CONSTANT_Class: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        printf(\"class        #%03d\", idx1);\n-        ent_size = 2;\n-        break;\n-      }\n-      case JVM_CONSTANT_String: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        printf(\"String       #%03d\", idx1);\n-        ent_size = 2;\n-        break;\n-      }\n-      case JVM_CONSTANT_Fieldref: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"Field        #%03d, #%03d\", (int) idx1, (int) idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_Methodref: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"Method       #%03d, #%03d\", idx1, idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_InterfaceMethodref: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"InterfMethod #%03d, #%03d\", idx1, idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_NameAndType: {\n-        idx1 = Bytes::get_Java_u2(bytes);\n-        idx2 = Bytes::get_Java_u2(bytes+2);\n-        printf(\"NameAndType  #%03d, #%03d\", idx1, idx2);\n-        ent_size = 4;\n-        break;\n-      }\n-      case JVM_CONSTANT_ClassIndex: {\n-        printf(\"ClassIndex  %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_UnresolvedClass: {\n-        printf(\"UnresolvedClass: %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_UnresolvedClassInError: {\n-        printf(\"UnresolvedClassInErr: %s\", WARN_MSG);\n-        break;\n-      }\n-      case JVM_CONSTANT_StringIndex: {\n-        printf(\"StringIndex: %s\", WARN_MSG);\n-        break;\n-      }\n-    }\n-    printf(\";\\n\");\n-    bytes += ent_size;\n-    size  += ent_size;\n-  }\n-  printf(\"Cpool size: %d\\n\", size);\n-  fflush(nullptr);\n-  return;\n-} \/* end print_cpool_bytes *\/\n-\n-\n@@ -2215,1 +2082,0 @@\n-        DBG(printf(\"adding symbol entry %s = %d\\n\", sym->as_utf8(), idx));\n@@ -2223,1 +2089,0 @@\n-        DBG(printf(\"adding class entry %s = %d\\n\", sym->as_utf8(), idx));\n@@ -2257,1 +2122,0 @@\n-    DBG(printf(\"#%03hd tag=%03hd, \", (short)idx, (short)tag));\n@@ -2260,1 +2124,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Invalid\"));\n@@ -2265,1 +2128,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Unicode\"));\n@@ -2277,1 +2139,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Utf8: %s \", str));\n@@ -2310,1 +2171,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Class: idx=#%03hd, %s\", idx1, sym->as_utf8()));\n@@ -2319,1 +2179,0 @@\n-        DBG(printf(\"JVM_CONSTANT_String: idx=#%03hd, %s\", idx1, sym->as_utf8()));\n@@ -2329,1 +2188,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Methodref: %hd %hd\", idx1, idx2));\n@@ -2337,1 +2195,0 @@\n-        DBG(printf(\"JVM_CONSTANT_NameAndType: %hd %hd\", idx1, idx2));\n@@ -2344,1 +2201,0 @@\n-        DBG(printf(\"JVM_CONSTANT_ClassIndex: %hd\", idx1));\n@@ -2351,1 +2207,0 @@\n-        DBG(printf(\"JVM_CONSTANT_StringIndex: %hd\", idx1));\n@@ -2361,1 +2216,0 @@\n-        DBG(printf(\"JVM_CONSTANT_MethodHandle: %d %hd\", kind, idx1));\n@@ -2369,1 +2223,0 @@\n-        DBG(printf(\"JVM_CONSTANT_MethodType: %hd\", idx1));\n@@ -2380,1 +2233,0 @@\n-        DBG(printf(\"JVM_CONSTANT_Dynamic: %hd %hd\", idx1, idx2));\n@@ -2390,1 +2242,0 @@\n-        DBG(printf(\"JVM_CONSTANT_InvokeDynamic: %hd %hd\", idx1, idx2));\n@@ -2394,1 +2245,0 @@\n-    DBG(printf(\"\\n\"));\n@@ -2400,2 +2250,0 @@\n-  \/\/ Keep temporarily for debugging until it's stable.\n-  DBG(print_cpool_bytes(cnt, start_bytes));\n@@ -2405,2 +2253,0 @@\n-#undef DBG\n-\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":0,"deletions":154,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  fi._access_flags = AccessFlags(next_uint());\n+  fi._access_flags = AccessFlags(checked_cast<u2>(next_uint()));\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceClassLoaderKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -3809,1 +3808,1 @@\n-  st->print_cr(BULLET\"---- fields (total size \" SIZE_FORMAT \" words):\", oop_size(obj));\n+  st->print_cr(BULLET\"---- fields (total size %zu words):\", oop_size(obj));\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceKlassFlags.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -57,1 +56,1 @@\n-  assert(size > 0, \"total object size must be non-zero: \" SIZE_FORMAT, size);\n+  assert(size > 0, \"total object size must be non-zero: %zu\", size);\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceOop.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/klassFlags.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/markWord.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/metadata.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1438,1 +1437,1 @@\n-  int flags_bits = (JVM_ACC_NATIVE | JVM_ACC_SYNTHETIC | JVM_ACC_FINAL);\n+  u2 flags_bits = (JVM_ACC_NATIVE | JVM_ACC_SYNTHETIC | JVM_ACC_FINAL);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodFlags.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/objArrayOop.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/objLayout.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -223,2 +223,2 @@\n-  assert(s > 0, \"Oop size must be greater than zero, not \" SIZE_FORMAT, s);\n-  assert(is_object_aligned(s), \"Oop size is not properly aligned: \" SIZE_FORMAT, s);\n+  assert(s > 0, \"Oop size must be greater than zero, not %zu\", s);\n+  assert(is_object_aligned(s), \"Oop size is not properly aligned: %zu\", s);\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/oopsHierarchy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/recordComponent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/resolvedFieldEntry.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/resolvedIndyEntry.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/resolvedMethodEntry.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -500,1 +499,1 @@\n-      assert(_chunk->bitmap().at(index), \"Bit not set at index \" SIZE_FORMAT \" corresponding to \" PTR_FORMAT, index, p2i(p));\n+      assert(_chunk->bitmap().at(index), \"Bit not set at index %zu corresponding to \" PTR_FORMAT, index, p2i(p));\n@@ -585,1 +584,1 @@\n-           \"p: \" PTR_FORMAT \" obj: \" PTR_FORMAT \" index: \" SIZE_FORMAT,\n+           \"p: \" PTR_FORMAT \" obj: \" PTR_FORMAT \" index: %zu\",\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/symbol.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/symbolHandle.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/oops\/weakHandle.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/buildOopMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -721,1 +720,3 @@\n-  if (phase->type(in(0)) == Type::TOP)  return Type::TOP;\n+  if (in(0) == nullptr || phase->type(in(0)) == Type::TOP) {\n+    return Type::TOP;\n+  }\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/classes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/coalesce.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/connode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/constantTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/countbitsnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -38,0 +37,1 @@\n+#include \"opto\/runtime.hpp\"\n@@ -45,0 +45,17 @@\n+ModFloatingNode::ModFloatingNode(Compile* C, const TypeFunc* tf, const char* name) : CallLeafNode(tf, nullptr, name, TypeRawPtr::BOTTOM) {\n+  add_flag(Flag_is_macro);\n+  C->add_macro_node(this);\n+}\n+\n+ModDNode::ModDNode(Compile* C, Node* a, Node* b) : ModFloatingNode(C, OptoRuntime::Math_DD_D_Type(), \"drem\") {\n+  init_req(TypeFunc::Parms + 0, a);\n+  init_req(TypeFunc::Parms + 1, C->top());\n+  init_req(TypeFunc::Parms + 2, b);\n+  init_req(TypeFunc::Parms + 3, C->top());\n+}\n+\n+ModFNode::ModFNode(Compile* C, Node* a, Node* b) : ModFloatingNode(C, OptoRuntime::modf_Type(), \"frem\") {\n+  init_req(TypeFunc::Parms + 0, a);\n+  init_req(TypeFunc::Parms + 1, b);\n+}\n+\n@@ -1380,0 +1397,3 @@\n+Node *UModLNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+  return unsigned_mod_ideal<TypeLong, julong>(phase, can_reshape, this);\n+}\n@@ -1381,8 +1401,3 @@\n-\/\/=============================================================================\n-\/\/------------------------------Value------------------------------------------\n-const Type* ModFNode::Value(PhaseGVN* phase) const {\n-  \/\/ Either input is TOP ==> the result is TOP\n-  const Type *t1 = phase->type( in(1) );\n-  const Type *t2 = phase->type( in(2) );\n-  if( t1 == Type::TOP ) return Type::TOP;\n-  if( t2 == Type::TOP ) return Type::TOP;\n+const Type* UModLNode::Value(PhaseGVN* phase) const {\n+  return unsigned_mod_value<TypeLong, julong, jlong>(phase, this);\n+}\n@@ -1390,5 +1405,11 @@\n-  \/\/ Either input is BOTTOM ==> the result is the local BOTTOM\n-  const Type *bot = bottom_type();\n-  if( (t1 == bot) || (t2 == bot) ||\n-      (t1 == Type::BOTTOM) || (t2 == Type::BOTTOM) )\n-    return bot;\n+Node* ModFNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  if (!can_reshape) {\n+    return nullptr;\n+  }\n+\n+  \/\/ Either input is TOP ==> the result is TOP\n+  const Type* t1 = phase->type(dividend());\n+  const Type* t2 = phase->type(divisor());\n+  if (t1 == Type::TOP || t2 == Type::TOP) {\n+    return phase->C->top();\n+  }\n@@ -1398,1 +1419,1 @@\n-    return Type::FLOAT;         \/\/ note: x%x can be either NaN or 0\n+    return nullptr; \/\/ note: x%x can be either NaN or 0\n@@ -1403,2 +1424,2 @@\n-  jint  x1 = jint_cast(f1);     \/\/ note:  *(int*)&f1, not just (int)f1\n-  jint  x2 = jint_cast(f2);\n+  jint x1 = jint_cast(f1); \/\/ note:  *(int*)&f1, not just (int)f1\n+  jint x2 = jint_cast(f2);\n@@ -1407,2 +1428,6 @@\n-  if (g_isnan(f1))    return t1;\n-  if (g_isnan(f2))    return t2;\n+  if (g_isnan(f1)) {\n+    return replace_with_con(phase, t1);\n+  }\n+  if (g_isnan(f2)) {\n+    return replace_with_con(phase, t2);\n+  }\n@@ -1411,2 +1436,3 @@\n-  if (!g_isfinite(f1) || !g_isfinite(f2) || x2 == 0 || x2 == min_jint)\n-    return Type::FLOAT;\n+  if (!g_isfinite(f1) || !g_isfinite(f2) || x2 == 0 || x2 == min_jint) {\n+    return nullptr;\n+  }\n@@ -1421,7 +1447,1 @@\n-  return TypeF::make(jfloat_cast(xr));\n-}\n-\n-\/\/=============================================================================\n-\/\/------------------------------Idealize---------------------------------------\n-Node *UModLNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n-  return unsigned_mod_ideal<TypeLong, julong>(phase, can_reshape, this);\n+  return replace_with_con(phase, TypeF::make(jfloat_cast(xr)));\n@@ -1430,3 +1450,4 @@\n-const Type* UModLNode::Value(PhaseGVN* phase) const {\n-  return unsigned_mod_value<TypeLong, julong, jlong>(phase, this);\n-}\n+Node* ModDNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  if (!can_reshape) {\n+    return nullptr;\n+  }\n@@ -1434,3 +1455,0 @@\n-\/\/=============================================================================\n-\/\/------------------------------Value------------------------------------------\n-const Type* ModDNode::Value(PhaseGVN* phase) const {\n@@ -1438,10 +1456,5 @@\n-  const Type *t1 = phase->type( in(1) );\n-  const Type *t2 = phase->type( in(2) );\n-  if( t1 == Type::TOP ) return Type::TOP;\n-  if( t2 == Type::TOP ) return Type::TOP;\n-\n-  \/\/ Either input is BOTTOM ==> the result is the local BOTTOM\n-  const Type *bot = bottom_type();\n-  if( (t1 == bot) || (t2 == bot) ||\n-      (t1 == Type::BOTTOM) || (t2 == Type::BOTTOM) )\n-    return bot;\n+  const Type* t1 = phase->type(dividend());\n+  const Type* t2 = phase->type(divisor());\n+  if (t1 == Type::TOP || t2 == Type::TOP) {\n+    return nullptr;\n+  }\n@@ -1451,1 +1464,1 @@\n-    return Type::DOUBLE;        \/\/ note: x%x can be either NaN or 0\n+    return nullptr; \/\/ note: x%x can be either NaN or 0\n@@ -1456,2 +1469,2 @@\n-  jlong  x1 = jlong_cast(f1);   \/\/ note:  *(long*)&f1, not just (long)f1\n-  jlong  x2 = jlong_cast(f2);\n+  jlong x1 = jlong_cast(f1); \/\/ note:  *(long*)&f1, not just (long)f1\n+  jlong x2 = jlong_cast(f2);\n@@ -1460,2 +1473,6 @@\n-  if (g_isnan(f1))    return t1;\n-  if (g_isnan(f2))    return t2;\n+  if (g_isnan(f1)) {\n+    return replace_with_con(phase, t1);\n+  }\n+  if (g_isnan(f2)) {\n+    return replace_with_con(phase, t2);\n+  }\n@@ -1464,2 +1481,3 @@\n-  if (!g_isfinite(f1) || !g_isfinite(f2) || x2 == 0 || x2 == min_jlong)\n-    return Type::DOUBLE;\n+  if (!g_isfinite(f1) || !g_isfinite(f2) || x2 == 0 || x2 == min_jlong) {\n+    return nullptr;\n+  }\n@@ -1474,1 +1492,30 @@\n-  return TypeD::make(jdouble_cast(xr));\n+  return replace_with_con(phase, TypeD::make(jdouble_cast(xr)));\n+}\n+\n+Node* ModFloatingNode::replace_with_con(PhaseGVN* phase, const Type* con) {\n+  Compile* C = phase->C;\n+  Node* con_node = phase->makecon(con);\n+  CallProjections projs;\n+  extract_projections(&projs, false, false);\n+  C->gvn_replace_by(projs.fallthrough_proj, in(TypeFunc::Control));\n+  if (projs.fallthrough_catchproj != nullptr) {\n+    C->gvn_replace_by(projs.fallthrough_catchproj, in(TypeFunc::Control));\n+  }\n+  if (projs.fallthrough_memproj != nullptr) {\n+    C->gvn_replace_by(projs.fallthrough_memproj, in(TypeFunc::Memory));\n+  }\n+  if (projs.catchall_memproj != nullptr) {\n+    C->gvn_replace_by(projs.catchall_memproj, C->top());\n+  }\n+  if (projs.fallthrough_ioproj != nullptr) {\n+    C->gvn_replace_by(projs.fallthrough_ioproj, in(TypeFunc::I_O));\n+  }\n+  assert(projs.catchall_ioproj == nullptr, \"no exceptions from floating mod\");\n+  assert(projs.catchall_catchproj == nullptr, \"no exceptions from floating mod\");\n+  if (projs.resproj != nullptr) {\n+    C->gvn_replace_by(projs.resproj, con_node);\n+  }\n+  C->gvn_replace_by(this, C->top());\n+  C->remove_macro_node(this);\n+  disconnect_inputs(C);\n+  return nullptr;\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":100,"deletions":53,"binary":false,"changes":153,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"opto\/callnode.hpp\"\n@@ -143,1 +144,9 @@\n-\/\/------------------------------ModFNode---------------------------------------\n+\/\/ Base class for float and double modulus\n+class ModFloatingNode : public CallLeafNode {\n+protected:\n+  Node* replace_with_con(PhaseGVN* phase, const Type* con);\n+\n+public:\n+  ModFloatingNode(Compile* C, const TypeFunc* tf, const char *name);\n+};\n+\n@@ -145,1 +154,5 @@\n-class ModFNode : public Node {\n+class ModFNode : public ModFloatingNode {\n+private:\n+  Node* dividend() const { return in(TypeFunc::Parms + 0); }\n+  Node* divisor() const { return in(TypeFunc::Parms + 1); }\n+\n@@ -147,1 +160,1 @@\n-  ModFNode( Node *c, Node *in1, Node *in2 ) : Node(c,in1, in2) {}\n+  ModFNode(Compile* C, Node* a, Node* b);\n@@ -149,2 +162,0 @@\n-  virtual const Type* Value(PhaseGVN* phase) const;\n-  virtual const Type *bottom_type() const { return Type::FLOAT; }\n@@ -152,0 +163,2 @@\n+  virtual uint size_of() const { return sizeof(*this); }\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n@@ -154,1 +167,0 @@\n-\/\/------------------------------ModDNode---------------------------------------\n@@ -156,1 +168,5 @@\n-class ModDNode : public Node {\n+class ModDNode : public ModFloatingNode {\n+private:\n+  Node* dividend() const { return in(TypeFunc::Parms + 0); }\n+  Node* divisor() const { return in(TypeFunc::Parms + 2); }\n+\n@@ -158,1 +174,1 @@\n-  ModDNode( Node *c, Node *in1, Node *in2 ) : Node(c, in1, in2) {}\n+  ModDNode(Compile* C, Node* a, Node* b);\n@@ -160,2 +176,0 @@\n-  virtual const Type* Value(PhaseGVN* phase) const;\n-  virtual const Type *bottom_type() const { return Type::DOUBLE; }\n@@ -163,0 +177,2 @@\n+  virtual uint size_of() const { return sizeof(*this); }\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/divnode.hpp","additions":27,"deletions":11,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/domgraph.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/generateOptoStub.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/idealKit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/ifg.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/indexSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/live.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/locknode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1427,0 +1426,1 @@\n+  assert(post_head->in(1)->is_IfProj(), \"must be zero-trip guard If node projection of the post loop\");\n@@ -1432,0 +1432,1 @@\n+  const uint last_node_index_in_pre_loop_body = Compile::current()->unique() - 1;\n@@ -1444,0 +1445,1 @@\n+  DEBUG_ONLY(const uint last_node_index_from_backedge_goo = Compile::current()->unique() - 1);\n@@ -1445,11 +1447,0 @@\n-  \/\/ Nodes inside the loop may be control dependent on a predicate\n-  \/\/ that was moved before the preloop. If the back branch of the main\n-  \/\/ or post loops becomes dead, those nodes won't be dependent on the\n-  \/\/ test that guards that loop nest anymore which could lead to an\n-  \/\/ incorrect array access because it executes independently of the\n-  \/\/ test that was guarding the loop nest. We add a special CastII on\n-  \/\/ the if branch that enters the loop, between the input induction\n-  \/\/ variable value and the induction variable Phi to preserve correct\n-  \/\/ dependencies.\n-\n-  assert(post_head->in(1)->is_IfProj(), \"must be zero-trip guard If node projection of the post loop\");\n@@ -1458,1 +1449,3 @@\n-    initialize_assertion_predicates_for_main_loop(pre_head, main_head, first_node_index_in_pre_loop_body, old_new);\n+    initialize_assertion_predicates_for_main_loop(pre_head, main_head, first_node_index_in_pre_loop_body,\n+                                                  last_node_index_in_pre_loop_body,\n+                                                  DEBUG_ONLY(last_node_index_from_backedge_goo COMMA) old_new);\n@@ -1732,1 +1725,3 @@\n-                                                                   const uint first_node_index_in_cloned_loop_body,\n+                                                                   const uint first_node_index_in_pre_loop_body,\n+                                                                   const uint last_node_index_in_pre_loop_body,\n+                                                                   DEBUG_ONLY(const uint last_node_index_from_backedge_goo COMMA)\n@@ -1734,2 +1729,5 @@\n-  const NodeInOriginalLoopBody node_in_original_loop_body(first_node_index_in_cloned_loop_body, old_new);\n-  create_assertion_predicates_at_loop(pre_loop_head, main_loop_head, node_in_original_loop_body, true);\n+  assert(first_node_index_in_pre_loop_body < last_node_index_in_pre_loop_body, \"cloned some nodes\");\n+  const NodeInMainLoopBody node_in_main_loop_body(first_node_index_in_pre_loop_body,\n+                                                  last_node_index_in_pre_loop_body,\n+                                                  DEBUG_ONLY(last_node_index_from_backedge_goo COMMA) old_new);\n+  create_assertion_predicates_at_main_or_post_loop(pre_loop_head, main_loop_head, node_in_main_loop_body, true);\n@@ -1744,1 +1742,1 @@\n-  create_assertion_predicates_at_loop(main_loop_head, post_loop_head, node_in_cloned_loop_body, false);\n+  create_assertion_predicates_at_main_or_post_loop(main_loop_head, post_loop_head, node_in_cloned_loop_body, false);\n@@ -1757,0 +1755,41 @@\n+\n+void PhaseIdealLoop::create_assertion_predicates_at_main_or_post_loop(CountedLoopNode* source_loop_head,\n+                                                                      CountedLoopNode* target_loop_head,\n+                                                                      const NodeInLoopBody& _node_in_loop_body,\n+                                                                      bool clone_template) {\n+  Node* old_target_loop_head_entry = target_loop_head->skip_strip_mined()->in(LoopNode::EntryControl);\n+  const uint node_index_before_new_assertion_predicate_nodes = C->unique();\n+  const bool need_to_rewire_old_target_loop_entry_dependencies = old_target_loop_head_entry->outcnt() > 1;\n+  create_assertion_predicates_at_loop(source_loop_head, target_loop_head, _node_in_loop_body, clone_template);\n+  if (need_to_rewire_old_target_loop_entry_dependencies) {\n+    rewire_old_target_loop_entry_dependency_to_new_entry(target_loop_head, old_target_loop_head_entry,\n+                                                         node_index_before_new_assertion_predicate_nodes);\n+  }\n+}\n+\n+\/\/ Rewire any control dependent nodes on the old target loop entry before adding Assertion Predicate related nodes.\n+\/\/ These have been added by PhaseIdealLoop::clone_up_backedge_goo() and assume to be ending up at the target loop entry\n+\/\/ which is no longer the case when adding additional Assertion Predicates. Fix this by rewiring these nodes to the new\n+\/\/ target loop entry which corresponds to the tail of the last Assertion Predicate before the target loop. This is safe\n+\/\/ to do because these control dependent nodes on the old target loop entry created by clone_up_backedge_goo() were\n+\/\/ pinned on the loop backedge before. The Assertion Predicates are not control dependent on these nodes in any way.\n+void PhaseIdealLoop::rewire_old_target_loop_entry_dependency_to_new_entry(\n+    LoopNode* target_loop_head, const Node* old_target_loop_entry,\n+    const uint node_index_before_new_assertion_predicate_nodes) {\n+  Node* new_main_loop_entry = target_loop_head->skip_strip_mined()->in(LoopNode::EntryControl);\n+  if (new_main_loop_entry == old_target_loop_entry) {\n+    \/\/ No Assertion Predicates added.\n+    return;\n+  }\n+\n+  for (DUIterator_Fast imax, i = old_target_loop_entry->fast_outs(imax); i < imax; i++) {\n+    Node* out = old_target_loop_entry->fast_out(i);\n+    if (!out->is_CFG() && out->_idx < node_index_before_new_assertion_predicate_nodes) {\n+      _igvn.replace_input_of(out, 0, new_main_loop_entry);\n+      set_ctrl(out, new_main_loop_entry);\n+      --i;\n+      --imax;\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":57,"deletions":18,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/loopUnswitch.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -6436,2 +6435,0 @@\n-    case Op_ModF:\n-    case Op_ModD:\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -954,1 +954,3 @@\n-                                                     uint first_node_index_in_cloned_loop_body,\n+                                                     uint first_node_index_in_pre_loop_body,\n+                                                     uint last_node_index_in_pre_loop_body,\n+                                                     DEBUG_ONLY(uint last_node_index_from_backedge_goo COMMA)\n@@ -960,0 +962,6 @@\n+  void create_assertion_predicates_at_main_or_post_loop(CountedLoopNode* source_loop_head,\n+                                                        CountedLoopNode* target_loop_head,\n+                                                        const NodeInLoopBody& _node_in_loop_body, bool clone_template);\n+  void rewire_old_target_loop_entry_dependency_to_new_entry(LoopNode* target_loop_head,\n+                                                            const Node* old_target_loop_entry,\n+                                                            uint node_index_before_new_assertion_predicate_nodes);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/machnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -2228,1 +2227,1 @@\n-  CallNode *call = make_slow_call((CallNode *) lock, OptoRuntime::complete_monitor_enter_Type(),\n+  CallNode* call = make_slow_call(lock, OptoRuntime::complete_monitor_enter_Type(),\n@@ -2437,0 +2436,2 @@\n+               n->Opcode() == Op_ModD ||\n+               n->Opcode() == Op_ModF ||\n@@ -2588,1 +2589,24 @@\n-      assert(false, \"unknown node type in macro list\");\n+      switch (n->Opcode()) {\n+      case Op_ModD:\n+      case Op_ModF: {\n+        bool is_drem = n->Opcode() == Op_ModD;\n+        CallNode* mod_macro = n->as_Call();\n+        CallNode* call = new CallLeafNode(mod_macro->tf(),\n+                                          is_drem ? CAST_FROM_FN_PTR(address, SharedRuntime::drem)\n+                                                  : CAST_FROM_FN_PTR(address, SharedRuntime::frem),\n+                                          is_drem ? \"drem\" : \"frem\", TypeRawPtr::BOTTOM);\n+        call->init_req(TypeFunc::Control, mod_macro->in(TypeFunc::Control));\n+        call->init_req(TypeFunc::I_O, mod_macro->in(TypeFunc::I_O));\n+        call->init_req(TypeFunc::Memory, mod_macro->in(TypeFunc::Memory));\n+        call->init_req(TypeFunc::ReturnAdr, mod_macro->in(TypeFunc::ReturnAdr));\n+        call->init_req(TypeFunc::FramePtr, mod_macro->in(TypeFunc::FramePtr));\n+        for (unsigned int i = 0; i < mod_macro->tf()->domain()->cnt() - TypeFunc::Parms; i++) {\n+          call->init_req(TypeFunc::Parms + i, mod_macro->in(TypeFunc::Parms + i));\n+        }\n+        _igvn.replace_node(mod_macro, call);\n+        transform_later(call);\n+        break;\n+      }\n+      default:\n+        assert(false, \"unknown node type in macro list\");\n+      }\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/mathexactnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -2862,2 +2861,2 @@\n-  bool is_trace_pointer() const {\n-    return is_trace(TraceMergeStores::Tag::POINTER);\n+  bool is_trace_pointer_parsing() const {\n+    return is_trace(TraceMergeStores::Tag::POINTER_PARSING);\n@@ -2866,2 +2865,2 @@\n-  bool is_trace_aliasing() const {\n-    return is_trace(TraceMergeStores::Tag::ALIASING);\n+  bool is_trace_pointer_aliasing() const {\n+    return is_trace(TraceMergeStores::Tag::POINTER_ALIASING);\n@@ -2870,2 +2869,2 @@\n-  bool is_trace_adjacency() const {\n-    return is_trace(TraceMergeStores::Tag::ADJACENCY);\n+  bool is_trace_pointer_adjacency() const {\n+    return is_trace(TraceMergeStores::Tag::POINTER_ADJACENCY);\n@@ -2942,3 +2941,4 @@\n-  const TraceMemPointer trace(is_trace_pointer(),\n-                              is_trace_aliasing(),\n-                              is_trace_adjacency());\n+  const TraceMemPointer trace(is_trace_pointer_parsing(),\n+                              is_trace_pointer_aliasing(),\n+                              is_trace_pointer_adjacency(),\n+                              true);\n@@ -2946,2 +2946,2 @@\n-  const MemPointer pointer_use(use_store NOT_PRODUCT( COMMA trace ));\n-  const MemPointer pointer_def(def_store NOT_PRODUCT( COMMA trace ));\n+  const MemPointer pointer_use(use_store NOT_PRODUCT(COMMA trace));\n+  const MemPointer pointer_def(def_store NOT_PRODUCT(COMMA trace));\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"opto\/addnode.hpp\"\n@@ -28,0 +28,10 @@\n+#include \"classfile\/vmSymbols.hpp\"\n+\n+MemPointerParserCallback MemPointerParserCallback::_empty;\n+\n+MemPointer::MemPointer(const MemNode* mem,\n+                       MemPointerParserCallback& callback\n+                       NOT_PRODUCT(COMMA const TraceMemPointer& trace)) :\n+  MemPointer(MemPointerParser::parse(mem,\n+                                     callback\n+                                     NOT_PRODUCT(COMMA trace))) {}\n@@ -31,1 +41,2 @@\n-MemPointerDecomposedForm MemPointerDecomposedFormParser::parse_decomposed_form() {\n+MemPointer MemPointerParser::parse(MemPointerParserCallback& callback\n+                                   NOT_PRODUCT(COMMA const TraceMemPointer& trace)) {\n@@ -36,0 +47,1 @@\n+  const jint size = _mem->memory_size();\n@@ -45,2 +57,4 @@\n-    if (traversal_count++ > 1000) { return MemPointerDecomposedForm::make_trivial(pointer); }\n-    parse_sub_expression(_worklist.pop());\n+    if (traversal_count++ > 1000) {\n+      return MemPointer::make_trivial(pointer, size NOT_PRODUCT(COMMA trace));\n+    }\n+    parse_sub_expression(_worklist.pop(), callback);\n@@ -50,1 +64,3 @@\n-  if (_con.is_NaN()) { return MemPointerDecomposedForm::make_trivial(pointer); }\n+  if (_con.is_NaN()) {\n+    return MemPointer::make_trivial(pointer, size NOT_PRODUCT(COMMA trace));\n+  }\n@@ -70,1 +86,1 @@\n-      return MemPointerDecomposedForm::make_trivial(pointer);\n+      return MemPointer::make_trivial(pointer, size NOT_PRODUCT(COMMA trace));\n@@ -79,1 +95,1 @@\n-  return MemPointerDecomposedForm::make(pointer, _summands, _con);\n+  return MemPointer::make(pointer, _summands, _con, size NOT_PRODUCT(COMMA trace));\n@@ -85,1 +101,1 @@\n-void MemPointerDecomposedFormParser::parse_sub_expression(const MemPointerSummand& summand) {\n+void MemPointerParser::parse_sub_expression(const MemPointerSummand& summand, MemPointerParserCallback& callback) {\n@@ -111,0 +127,1 @@\n+        callback.callback(n);\n@@ -124,0 +141,1 @@\n+        callback.callback(n);\n@@ -158,0 +176,1 @@\n+        callback.callback(n);\n@@ -160,0 +179,10 @@\n+      case Op_CastX2P:\n+        \/\/ A CastX2P indicates that we are pointing to native memory, where some long is cast to\n+        \/\/ a pointer. In general, we have no guarantees about this long, and just take it as a\n+        \/\/ terminal summand. A CastX2P can also be a good candidate for a native-memory \"base\".\n+        if (!sub_expression_has_native_base_candidate(n->in(1))) {\n+          \/\/ General case: take CastX2P as a terminal summand, it is a candidate for the \"base\".\n+          break;\n+        }\n+        \/\/ Fall-through: we can find a more precise native-memory \"base\". We further decompose\n+        \/\/ the CastX2P to find this \"base\" and any other offsets from it.\n@@ -162,1 +191,0 @@\n-      case Op_CastX2P:\n@@ -164,14 +192,15 @@\n-      \/\/ On 32bit systems we can also look through ConvL2I, since the final result will always\n-      \/\/ be truncated back with ConvL2I. On 64bit systems we cannot decompose ConvL2I because\n-      \/\/ such int values will eventually be expanded to long with a ConvI2L:\n-      \/\/\n-      \/\/   valL = max_jint + 1\n-      \/\/   ConvI2L(ConvL2I(valL)) = ConvI2L(min_jint) = min_jint != max_jint + 1 = valL\n-      \/\/\n-      NOT_LP64( case Op_ConvL2I: )\n-      {\n-        \/\/ Decompose: look through.\n-        Node* a = n->in(1);\n-        _worklist.push(MemPointerSummand(a, scale));\n-        return;\n-      }\n+        \/\/ On 32bit systems we can also look through ConvL2I, since the final result will always\n+        \/\/ be truncated back with ConvL2I. On 64bit systems we cannot decompose ConvL2I because\n+        \/\/ such int values will eventually be expanded to long with a ConvI2L:\n+        \/\/\n+        \/\/   valL = max_jint + 1\n+        \/\/   ConvI2L(ConvL2I(valL)) = ConvI2L(min_jint) = min_jint != max_jint + 1 = valL\n+        \/\/\n+        NOT_LP64( case Op_ConvL2I: )\n+        {\n+          \/\/ Decompose: look through.\n+          Node* a = n->in(1);\n+          _worklist.push(MemPointerSummand(a, scale));\n+          callback.callback(n);\n+          return;\n+        }\n@@ -189,0 +218,58 @@\n+bool MemPointerParser::sub_expression_has_native_base_candidate(Node* start) {\n+  \/\/ BFS over the expression.\n+  \/\/ Allocate sufficient space in worklist for 100 limit below.\n+  ResourceMark rm;\n+  GrowableArray<Node*> worklist(102);\n+  worklist.append(start);\n+  for (int i = 0; i < worklist.length(); i++) {\n+    Node* n = worklist.at(i);\n+    switch (n->Opcode()) {\n+      case Op_AddL:\n+        \/\/ Traverse to both inputs.\n+        worklist.append(n->in(1));\n+        worklist.append(n->in(2));\n+        break;\n+      case Op_SubL:\n+      case Op_CastLL:\n+        \/\/ Traverse to the first input. The base cannot be on the rhs of a sub.\n+        worklist.append(n->in(1));\n+        break;\n+      default:\n+        if (is_native_memory_base_candidate(n)) { return true; }\n+        break;\n+    }\n+    \/\/ This is a heuristic, so we are allowed to bail out early if the graph\n+    \/\/ is too deep. The constant is chosen arbitrarily, not too large but big\n+    \/\/ enough for all normal cases.\n+    if (worklist.length() > 100) { return false; }\n+  }\n+  \/\/ Parsed over the whole expression, nothing found.\n+  return false;\n+}\n+\n+\/\/ Check if the node is a candidate to be a memory segment \"base\".\n+\/\/ (1) CastX2P: some arbitrary long that is cast to a pointer.\n+\/\/ (2) LoadL from field jdk.internal.foreign.NativeMemorySegmentImpl.min\n+\/\/     Holds the address() of a native memory segment.\n+bool MemPointerParser::is_native_memory_base_candidate(Node* n) {\n+  \/\/ (1) CastX2P\n+  if (n->Opcode() == Op_CastX2P) { return true; }\n+\n+  \/\/ (2) LoadL from field jdk.internal.foreign.NativeMemorySegmentImpl.min\n+  if (n->Opcode() != Op_LoadL) { return false; }\n+  LoadNode* load = n->as_Load();\n+\n+  const TypeInstPtr* inst_ptr = load->adr_type()->isa_instptr();\n+  if (inst_ptr == nullptr) { return false; }\n+\n+  ciInstanceKlass* klass = inst_ptr->instance_klass();\n+  int offset = inst_ptr->offset();\n+  ciField* field = klass->get_field_by_offset(offset, false);\n+  if (field == nullptr) { return false; }\n+\n+  Symbol* field_symbol = field->name()->get_symbol();\n+  Symbol* holder_symbol = field->holder()->name()->get_symbol();\n+  return holder_symbol == vmSymbols::jdk_internal_foreign_NativeMemorySegmentImpl() &&\n+         field_symbol == vmSymbols::min_name();\n+}\n+\n@@ -191,1 +278,1 @@\n-bool MemPointerDecomposedFormParser::is_safe_to_decompose_op(const int opc, const NoOverflowInt& scale) const {\n+bool MemPointerParser::is_safe_to_decompose_op(const int opc, const NoOverflowInt& scale) const {\n@@ -301,4 +388,43 @@\n-\/\/ Compute the aliasing between two MemPointerDecomposedForm. We use the \"MemPointer Lemma\" to\n-\/\/ prove that the computed aliasing also applies for the underlying pointers. Note that the\n-\/\/ condition (S0) is already given, because the MemPointerDecomposedForm is always constructed\n-\/\/ using only safe decompositions.\n+MemPointer::Base MemPointer::Base::make(Node* pointer, const GrowableArray<MemPointerSummand>& summands) {\n+  \/\/ Bad form -> unknown.\n+  AddPNode* adr = pointer->isa_AddP();\n+  if (adr == nullptr) { return Base(); }\n+\n+  \/\/ Non-TOP base -> object.\n+  Node* maybe_object_base = adr->in(AddPNode::Base);\n+  bool is_object_base = !maybe_object_base->is_top();\n+\n+  Node* base = find_base(is_object_base ? maybe_object_base : nullptr, summands);\n+\n+  if (base == nullptr) {\n+    \/\/ Not found -> unknown.\n+    return Base();\n+  } else if (is_object_base) {\n+    assert(base == maybe_object_base, \"we confirmed that it is in summands\");\n+    return Base(Object, base);\n+  } else {\n+    return Base(Native, base);\n+  }\n+}\n+\n+Node* MemPointer::Base::find_base(Node* object_base, const GrowableArray<MemPointerSummand>& summands) {\n+  for (int i = 0; i < summands.length(); i++) {\n+    const MemPointerSummand& s = summands.at(i);\n+    assert(s.variable() != nullptr, \"no empty summands\");\n+    \/\/ Object base.\n+    if (object_base != nullptr && s.variable() == object_base && s.scale().is_one()) {\n+      return object_base;\n+    }\n+    \/\/ Native base.\n+    if (object_base == nullptr &&\n+        s.scale().is_one() &&\n+        MemPointerParser::is_native_memory_base_candidate(s.variable())) {\n+      return s.variable();\n+    }\n+  }\n+  return nullptr;\n+}\n+\n+\/\/ Compute the aliasing between two MemPointer. We use the \"MemPointer Lemma\" to prove that the\n+\/\/ computed aliasing also applies for the underlying pointers. Note that the condition (S0) is\n+\/\/ already given, because the MemPointer is always constructed using only safe decompositions.\n@@ -310,2 +436,2 @@\n-MemPointerAliasing MemPointerDecomposedForm::get_aliasing_with(const MemPointerDecomposedForm& other\n-                                                               NOT_PRODUCT( COMMA const TraceMemPointer& trace) ) const {\n+MemPointerAliasing MemPointer::get_aliasing_with(const MemPointer& other\n+                                                 NOT_PRODUCT( COMMA const TraceMemPointer& trace) ) const {\n@@ -314,1 +440,1 @@\n-    tty->print_cr(\"MemPointerDecomposedForm::get_aliasing_with:\");\n+    tty->print_cr(\"MemPointer::get_aliasing_with:\");\n@@ -321,4 +447,10 @@\n-  for (uint i = 0; i < SUMMANDS_SIZE; i++) {\n-    const MemPointerSummand s1 = summands_at(i);\n-    const MemPointerSummand s2 = other.summands_at(i);\n-    if (s1 != s2) {\n+  bool has_same_base = false;\n+  if (has_different_object_base_but_otherwise_same_summands_as(other)) {\n+    \/\/ At runtime, the two object bases can be:\n+    \/\/   (1) different: we have no aliasing, pointers point to different memory objects.\n+    \/\/   (2) the same:  implies that all summands are the same, (S2) holds.\n+    has_same_base = false;\n+  } else if (has_same_summands_as(other)) {\n+    \/\/ (S2) holds. If all summands are the same, also the base must be the same.\n+    has_same_base = true;\n+  } else {\n@@ -326,5 +458,2 @@\n-      if (trace.is_trace_aliasing()) {\n-        tty->print_cr(\"  -> Aliasing unknown, differ on summand %d.\", i);\n-      }\n-#endif\n-      return MemPointerAliasing::make_unknown();\n+    if (trace.is_trace_aliasing()) {\n+      tty->print_cr(\"  -> Aliasing unknown, summands are not the same.\");\n@@ -332,0 +461,2 @@\n+#endif\n+    return MemPointerAliasing::make_unknown();\n@@ -349,9 +480,23 @@\n-  \/\/ \"MemPointer Lemma\" condition (S1):\n-  \/\/   Given that all summands are the same, we know that both pointers point into the\n-  \/\/   same memory object. With the Pre-Condition, we know that both pointers are in\n-  \/\/   bounds of that same memory object.\n-\n-  \/\/ Hence, all 4 conditions of the \"MemoryPointer Lemma\" are established, and hence\n-  \/\/ we know that the distance between the underlying pointers is equal to the distance\n-  \/\/ we computed for the MemPointers:\n-  \/\/   p_other - p_this = distance = other.con - this.con\n+  if (has_same_base) {\n+    \/\/ \"MemPointer Lemma\" condition (S1):\n+    \/\/   Given that all summands are the same, we know that both pointers point into the\n+    \/\/   same memory object. With the Pre-Condition, we know that both pointers are in\n+    \/\/   bounds of that same memory object.\n+    \/\/\n+    \/\/ Hence, all 4 conditions of the \"MemPointer Lemma\" are established, and hence\n+    \/\/ we know that the distance between the underlying pointers is equal to the distance\n+    \/\/ we computed for the MemPointers:\n+    \/\/   p_other - p_this = distance = other.con - this.con\n+#ifndef PRODUCT\n+    if (trace.is_trace_aliasing()) {\n+      tty->print_cr(\"  -> Aliasing always at distance = %d.\", distance.value());\n+    }\n+#endif\n+    return MemPointerAliasing::make_always_at_distance(distance.value());\n+  } else {\n+    \/\/ At runtime, the two object bases can be:\n+    \/\/   (1) different: pointers do not alias.\n+    \/\/   (2) the same:  implies that (S2) holds. The summands are all the same, and with\n+    \/\/                  the Pre-Condition, we know that both pointers are in bounds of the\n+    \/\/                  same memory object, i.e. (S1) holds. We have already proven (S0)\n+    \/\/                  and (S3), so all 4 conditions for \"MemPointer Lemma\" are given.\n@@ -360,1 +505,1 @@\n-      tty->print_cr(\"  -> Aliasing always, distance = %d.\", distance.value());\n+      tty->print_cr(\"  -> Aliasing not or at distance = %d.\", distance.value());\n@@ -363,1 +508,27 @@\n-  return MemPointerAliasing::make_always(distance.value());\n+    return MemPointerAliasing::make_not_or_at_distance(distance.value());\n+  }\n+}\n+\n+bool MemPointer::has_same_summands_as(const MemPointer& other, uint start) const {\n+  for (uint i = start; i < SUMMANDS_SIZE; i++) {\n+    if (summands_at(i) != other.summands_at(i)) { return false; }\n+  }\n+  return true;\n+}\n+\n+bool MemPointer::has_different_object_base_but_otherwise_same_summands_as(const MemPointer& other) const {\n+  if (!base().is_object() ||\n+      !other.base().is_object() ||\n+      base().object() == other.base().object()) {\n+    \/\/ The base is the same, or we do not know if the base is different.\n+    return false;\n+  }\n+\n+#ifdef ASSERT\n+  const MemPointerSummand base1(base().object(),       NoOverflowInt(1));\n+  const MemPointerSummand base2(other.base().object(), NoOverflowInt(1));\n+  assert(summands_at(0) == base1 && other.summands_at(0) == base2, \"bases in 0th element\");\n+#endif\n+\n+  \/\/ Check if all other summands are the same.\n+  return has_same_summands_as(other, 1);\n@@ -366,0 +537,15 @@\n+\/\/ Examples:\n+\/\/   p1 = MemPointer[size=1, base + i + 16]\n+\/\/   p2 = MemPointer[size=1, base + i + 17]\n+\/\/   -> Always at distance 1\n+\/\/   -> p1 always adjacent and before p2 -> return true\n+\/\/\n+\/\/   p1 = MemPointer[size=4, x + y + z + 4L * i + 16]\n+\/\/   p2 = MemPointer[size=4, x + y + z + 4L * i + 20]\n+\/\/   -> Always at distance 4\n+\/\/   -> p1 always adjacent and before p2 -> return true\n+\/\/\n+\/\/   p1 = MemPointer[size=4, base1 + 4L * i1 + 16]\n+\/\/   p2 = MemPointer[size=4, base2 + 4L * i2 + 20]\n+\/\/   -> Have differing summands, distance is unknown\n+\/\/   -> Unknown if adjacent at runtime -> return false\n@@ -367,5 +553,2 @@\n-  const MemPointerDecomposedForm& s1 = decomposed_form();\n-  const MemPointerDecomposedForm& s2 = other.decomposed_form();\n-  const MemPointerAliasing aliasing = s1.get_aliasing_with(s2 NOT_PRODUCT( COMMA _trace ));\n-  const jint size = mem()->memory_size();\n-  const bool is_adjacent = aliasing.is_always_at_distance(size);\n+  const MemPointerAliasing aliasing = get_aliasing_with(other NOT_PRODUCT( COMMA _trace ));\n+  const bool is_adjacent = aliasing.is_always_at_distance(_size);\n@@ -376,1 +559,1 @@\n-               is_adjacent ? \"true\" : \"false\", size);\n+               is_adjacent ? \"true\" : \"false\", _size);\n@@ -384,0 +567,54 @@\n+\n+\/\/ Examples:\n+\/\/   p1 = MemPointer[size=1, base + i + 16]\n+\/\/   p2 = MemPointer[size=1, base + i + 17]\n+\/\/   -> Always at distance 1\n+\/\/   -> Can never overlap -> return true\n+\/\/\n+\/\/   p1 = MemPointer[size=1, base + i + 16]\n+\/\/   p2 = MemPointer[size=1, base + i + 16]\n+\/\/   -> Always at distance 0\n+\/\/   -> Always have exact overlap -> return false\n+\/\/\n+\/\/   p1 = MemPointer[size=4, x + y + z + 4L * i + 16]\n+\/\/   p2 = MemPointer[size=4, x + y + z + 4L * i + 56]\n+\/\/   -> Always at distance 40\n+\/\/   -> Can never overlap -> return true\n+\/\/\n+\/\/   p1 = MemPointer[size=8, x + y + z + 4L * i + 16]\n+\/\/   p2 = MemPointer[size=8, x + y + z + 4L * i + 20]\n+\/\/   -> Always at distance 4\n+\/\/   -> Always have partial overlap -> return false\n+\/\/\n+\/\/   p1 = MemPointer[size=4, base1 + 4L * i1 + 16]\n+\/\/   p2 = MemPointer[size=4, base2 + 4L * i2 + 20]\n+\/\/   -> Have differing summands, distance is unknown\n+\/\/   -> Unknown if overlap at runtime -> return false\n+bool MemPointer::never_overlaps_with(const MemPointer& other) const {\n+  const MemPointerAliasing aliasing = get_aliasing_with(other NOT_PRODUCT( COMMA _trace ));\n+\n+  \/\/ The aliasing tries to compute:\n+  \/\/   distance = other - this\n+  \/\/\n+  \/\/ We know that we have no overlap if we can prove:\n+  \/\/   this >= other + other.size      ||  this + this.size <= other\n+  \/\/\n+  \/\/ Which we can restate as:\n+  \/\/   distance <= -other.size         ||  this.size <= distance\n+  \/\/\n+  const jint distance_lo = -other.size();\n+  const jint distance_hi = size();\n+  bool is_never_overlap = aliasing.is_never_in_distance_range(distance_lo, distance_hi);\n+\n+#ifndef PRODUCT\n+  if (_trace.is_trace_overlap()) {\n+    tty->print(\"Never Overlap: %s, distance_lo: %d, distance_hi: %d, aliasing: \",\n+               is_never_overlap ? \"true\" : \"false\", distance_lo, distance_hi);\n+    aliasing.print_on(tty);\n+    tty->cr();\n+  }\n+#endif\n+\n+  return is_never_overlap;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/mempointer.cpp","additions":295,"deletions":58,"binary":false,"changes":353,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,12 @@\n-\/\/ The MemPointer is a shared facility to parse pointers and check the aliasing of pointers,\n-\/\/ e.g. checking if two stores are adjacent.\n+\/\/ The MemPointer is a shared facility to parse pointers and check the aliasing of pointers.\n+\/\/\n+\/\/ A MemPointer points to a region in memory, starting at a \"pointer\", and extending for \"size\" bytes:\n+\/\/   [pointer, pointer + size)\n+\/\/\n+\/\/ We can check if two loads \/ two stores:\n+\/\/  - are adjacent               -> pack multiple memops into a single memop\n+\/\/  - never overlap              -> independent, can swap order\n+\/\/\n+\/\/ Other use-cases:\n+\/\/  - alignment                  -> find an alignment solution for all memops in a vectorized loop\n+\/\/  - detect partial overlap     -> indicates store-to-load-forwarding failures\n@@ -146,1 +156,1 @@\n-\/\/ MemPointerDecomposedForm:\n+\/\/ MemPointer:\n@@ -164,11 +174,0 @@\n-\/\/ MemPointerAliasing:\n-\/\/   The decomposed form allows us to determine the aliasing between two pointers easily. For\n-\/\/   example, if two pointers are identical, except for their constant:\n-\/\/\n-\/\/     pointer1 = SUM(summands) + con1\n-\/\/     pointer2 = SUM(summands) + con2\n-\/\/\n-\/\/   then we can easily compute the distance between the pointers (distance = con2 - con1),\n-\/\/   and determine if they are adjacent.\n-\/\/\n-\/\/ MemPointerDecomposedFormParser:\n@@ -197,5 +196,49 @@\n-\/\/   Hence, in MemPointerDecomposedFormParser::parse_decomposed_form, we start with the pointer as\n-\/\/   a trivial summand. A summand can either be decomposed further or it is terminal (cannot\n-\/\/   be decomposed further). We decompose the summands recursively until all remaining summands\n-\/\/   are terminal, see MemPointerDecomposedFormParser::parse_sub_expression. This effectively parses\n-\/\/   the pointer expression recursively.\n+\/\/   Hence, in MemPointerParser::parse, we start with the pointer as a trivial summand. A summand can either\n+\/\/   be decomposed further or it is terminal (cannot be decomposed further). We decompose the summands\n+\/\/   recursively until all remaining summands are terminal, see MemPointerParser::parse_sub_expression.\n+\/\/   This effectively parses the pointer expression recursively.\n+\/\/\n+\/\/ MemPointerAliasing:\n+\/\/   The decomposed form allows us to determine the aliasing between two pointers easily. For\n+\/\/   example, if two pointers are identical, except for their constant:\n+\/\/\n+\/\/     pointer1 = SUM(summands) + con1\n+\/\/     pointer2 = SUM(summands) + con2\n+\/\/\n+\/\/   then we can easily compute the distance between the pointers (distance = con2 - con1),\n+\/\/   and determine if they are adjacent.\n+\/\/\n+\/\/ MemPointer::Base\n+\/\/   The MemPointer is decomposed like this:\n+\/\/     pointer = SUM(summands) + con\n+\/\/\n+\/\/   This is sufficient for simple adjacency checks and we do not need to know if the pointer references\n+\/\/   native (off-heap) or object (heap) memory. However, in some cases it is necessary or useful to know\n+\/\/   the object base, or the native pointer's base.\n+\/\/\n+\/\/   - Object (heap) base (MemPointer::base().is_object()):\n+\/\/     Is the base of the Java object, which resides on the Java heap.\n+\/\/     Guarantees:\n+\/\/       - Always has an alignment of ObjectAlignmentInBytes.\n+\/\/       - A MemPointer with a given object base always must point into the memory of that object. Thus,\n+\/\/         if we have two pointers with two different bases at runtime, we know the two pointers do not\n+\/\/         alias.\n+\/\/\n+\/\/   - Native (off-heap) base (MemPointer::base().is_native()):\n+\/\/     When we decompose a pointer to native memory, it is at first not clear that there is a base address.\n+\/\/     Even if we could know that there is some base address to which we add index offsets, we cannot know\n+\/\/     if this reference address points to the beginning of a native memory allocation or into the middle,\n+\/\/     or outside it. We also have no guarantee for alignment with such a base address.\n+\/\/     Still: we would like to find such a base if possible, and if two pointers are similar (i.e. have the\n+\/\/     same summands), we would like to find the same base. Further, it is reasonable to speculatively\n+\/\/     assume that such base addresses are aligned (TODO: need to add this speculative check in JDK-8323582).\n+\/\/     A base pointer must have scale = 1, and be accepted byMemPointer::is_native_memory_base_candidate.\n+\/\/     It can thus be one of these:\n+\/\/      (1) CastX2P\n+\/\/          This is simply some arbitrary long cast to a pointer. It may be computed as an addition of\n+\/\/          multiple long and even int values. In some cases this means that we could have further\n+\/\/          decomposed the CastX2P, but at that point it is even harder to tell what should be a good\n+\/\/          candidate for a native memory base.\n+\/\/      (2) LoadL from field jdk.internal.foreign.NativeMemorySegmentImpl.min\n+\/\/          This would be preferable over CastX2P, because it holds the address() of a native\n+\/\/          MemorySegment, i.e. we know it points to the beginning of that MemorySegment.\n@@ -262,2 +305,2 @@\n-\/\/    Note: MemPointerDecomposedForm::get_aliasing_with relies on this MemPointer Lemma to\n-\/\/          prove the correctness of its aliasing computation between two MemPointers.\n+\/\/    Note: MemPointer::get_aliasing_with relies on this MemPointer Lemma to prove the correctness of its\n+\/\/          aliasing computation between two MemPointers.\n@@ -266,2 +309,1 @@\n-\/\/    Note: MemPointerDecomposedFormParser::is_safe_to_decompose_op checks that all\n-\/\/          decompositions we apply are safe.\n+\/\/    Note: MemPointerParser::is_safe_to_decompose_op checks that all decompositions we apply are safe.\n@@ -344,1 +386,0 @@\n-\n@@ -348,1 +389,1 @@\n-  const bool _is_trace_pointer;\n+  const bool _is_trace_parsing;\n@@ -351,0 +392,1 @@\n+  const bool _is_trace_overlap;\n@@ -353,1 +395,1 @@\n-  TraceMemPointer(const bool is_trace_pointer,\n+  TraceMemPointer(const bool is_trace_parsing,\n@@ -355,2 +397,3 @@\n-                  const bool is_trace_adjacency) :\n-    _is_trace_pointer(  is_trace_pointer),\n+                  const bool is_trace_adjacency,\n+                  const bool is_trace_overlap) :\n+    _is_trace_parsing(  is_trace_parsing),\n@@ -358,1 +401,2 @@\n-    _is_trace_adjacency(is_trace_adjacency)\n+    _is_trace_adjacency(is_trace_adjacency),\n+    _is_trace_overlap(is_trace_overlap)\n@@ -361,1 +405,1 @@\n-  bool is_trace_pointer()   const { return _is_trace_pointer; }\n+  bool is_trace_parsing()   const { return _is_trace_parsing; }\n@@ -364,0 +408,1 @@\n+  bool is_trace_overlap()   const { return _is_trace_overlap; }\n@@ -369,9 +414,0 @@\n-public:\n-  enum Aliasing {\n-    Unknown, \/\/ Distance unknown.\n-             \/\/   Example: two \"int[]\" with different variable index offsets.\n-             \/\/            e.g. \"array[i]  vs  array[j]\".\n-             \/\/            e.g. \"array1[i] vs  array2[j]\".\n-    Always}; \/\/ Constant distance = p1 - p2.\n-             \/\/   Example: The same address expression, except for a constant offset\n-             \/\/            e.g. \"array[i]  vs  array[i+1]\".\n@@ -379,0 +415,16 @@\n+  enum Aliasing {\n+    Unknown,          \/\/ Distance unknown.\n+                      \/\/   Example: two \"int[]\" (unknown if the same) with different variable index offsets:\n+                      \/\/            e.g. \"array[i]  vs  array[j]\".\n+                      \/\/            e.g. \"array1[i] vs  array2[j]\".\n+    AlwaysAtDistance, \/\/ Constant distance = p2 - p1.\n+                      \/\/   Example: The same address expression, except for a constant offset:\n+                      \/\/            e.g. \"array[i]  vs  array[i+1]\".\n+    NotOrAtDistance}; \/\/ At compile-time, we know that at run-time it is either of these:\n+                      \/\/   (1) Not: The pointers belong to different memory objects. Distance unknown.\n+                      \/\/   (2) AtConstDistance: distance = p2 - p1.\n+                      \/\/   Example: two \"int[]\" (unknown if the same) with indices that only differ by a\n+                      \/\/            constant offset:\n+                      \/\/            e.g. \"array1[i] vs array2[i+4]\":\n+                      \/\/                 if \"array1 == array2\": distance = 4.\n+                      \/\/                 if \"array1 != array2\": different memory objects.\n@@ -394,2 +446,6 @@\n-  static MemPointerAliasing make_always(const jint distance) {\n-    return MemPointerAliasing(Always, distance);\n+  static MemPointerAliasing make_always_at_distance(const jint distance) {\n+    return MemPointerAliasing(AlwaysAtDistance, distance);\n+  }\n+\n+  static MemPointerAliasing make_not_or_at_distance(const jint distance) {\n+    return MemPointerAliasing(NotOrAtDistance, distance);\n@@ -400,1 +456,8 @@\n-    return _aliasing == Always && _distance == distance;\n+    return _aliasing == AlwaysAtDistance && _distance == distance;\n+  }\n+\n+  \/\/ Use case: overlap.\n+  \/\/ Note: the bounds are exclusive: lo < element < hi\n+  bool is_never_in_distance_range(const jint distance_lo, const jint distance_hi) const {\n+    return (_aliasing == AlwaysAtDistance || _aliasing == NotOrAtDistance) &&\n+           (_distance <= distance_lo || distance_hi <= _distance);\n@@ -406,2 +469,3 @@\n-      case Unknown: st->print(\"Unknown\");               break;\n-      case Always:  st->print(\"Always(%d)\", _distance); break;\n+      case Unknown:           st->print(\"Unknown\");                         break;\n+      case AlwaysAtDistance:  st->print(\"AlwaysAtDistance(%d)\", _distance); break;\n+      case NotOrAtDistance:   st->print(\"NotOrAtDistance(%d)\",  _distance); break;\n@@ -414,1 +478,1 @@\n-\/\/ Summand of a MemPointerDecomposedForm:\n+\/\/ Summand of a MemPointer:\n@@ -440,3 +504,8 @@\n-    if (p1->variable() == nullptr) {\n-      return (p2->variable() == nullptr) ? 0 : 1;\n-    } else if (p2->variable() == nullptr) {\n+    return cmp_by_variable_idx(*p1, *p2);\n+  }\n+\n+  static int cmp_by_variable_idx(const MemPointerSummand& p1, const MemPointerSummand& p2) {\n+    if (p1.variable() == nullptr) {\n+      return (p2.variable() == nullptr) ? 0 : 1;\n+    }\n+    if (p2.variable() == nullptr) {\n@@ -445,0 +514,2 @@\n+    return p1.variable()->_idx - p2.variable()->_idx;\n+  }\n@@ -446,1 +517,5 @@\n-    return p1->variable()->_idx - p2->variable()->_idx;\n+  static int cmp(const MemPointerSummand& p1, const MemPointerSummand& p2) {\n+    int cmp = cmp_by_variable_idx(p1, p2);\n+    if (cmp != 0) { return cmp; }\n+\n+    return NoOverflowInt::cmp(p1.scale(), p2.scale());\n@@ -464,1 +539,0 @@\n-    st->print(\"Summand[\");\n@@ -466,1 +540,1 @@\n-    tty->print(\" * [%d %s]]\", _variable->_idx, _variable->Name());\n+    tty->print(\" * [%d %s]\", _variable->_idx, _variable->Name());\n@@ -471,1 +545,22 @@\n-\/\/ Decomposed form of the pointer sub-expression of \"pointer\".\n+\/\/ Parsing calls the callback on every decomposed node. These are all the\n+\/\/ nodes on the paths from the pointer to the summand variables, i.e. the\n+\/\/ \"inner\" nodes of the pointer expression. This callback is for example\n+\/\/ used in SuperWord::unrolling_analysis to collect all inner nodes of a\n+\/\/ pointer expression.\n+class MemPointerParserCallback : public StackObj {\n+private:\n+  static MemPointerParserCallback _empty;\n+\n+public:\n+  virtual void callback(Node* n) { \/* do nothing by default *\/ }\n+\n+  \/\/ Singleton for default arguments.\n+  static MemPointerParserCallback& empty() { return _empty; }\n+};\n+\n+\/\/ A MemPointer points to a region in memory, starting at a \"pointer\", and extending\n+\/\/ for \"size\" bytes:\n+\/\/\n+\/\/   [pointer, pointer + size)\n+\/\/\n+\/\/ Where the \"pointer\" is decomposed into the following form:\n@@ -474,0 +569,1 @@\n+\/\/   pointer = SUM(scale_i * variable_i) + con\n@@ -475,2 +571,11 @@\n-class MemPointerDecomposedForm : public StackObj {\n-private:\n+\/\/ Where SUM() adds all \"scale_i * variable_i\" for each i together.\n+\/\/\n+\/\/ Note: if the base is known, then it is in the 0th summand. A base can be:\n+\/\/       - on-heap  \/ object: base().object()\n+\/\/       - off-heap \/ native: base().native()\n+\/\/\n+\/\/   pointer = scale_0 * variable_0 + scale_1 * scale_1 + ... + con\n+\/\/   pointer =       1 * base       + scale_1 * scale_1 + ... + con\n+\/\/\n+class MemPointer : public StackObj {\n+public:\n@@ -483,1 +588,14 @@\n-  Node* _pointer; \/\/ pointer node associated with this (sub)pointer\n+  \/\/ A base can be:\n+  \/\/ - Known:\n+  \/\/   - On-heap: Object\n+  \/\/   - Off-heap: Native\n+  \/\/ - Unknown\n+  class Base : public StackObj {\n+  private:\n+    enum Kind { Unknown, Object, Native };\n+    Kind _kind;\n+    Node* _base;\n+\n+    Base(Kind kind, Node* base) : _kind(kind), _base(base) {\n+      assert((kind == Unknown) == (base == nullptr), \"known base\");\n+    }\n@@ -485,2 +603,3 @@\n-  MemPointerSummand _summands[SUMMANDS_SIZE];\n-  NoOverflowInt _con;\n+  public:\n+    Base() : Base(Unknown, nullptr) {}\n+    static Base make(Node* pointer, const GrowableArray<MemPointerSummand>& summands);\n@@ -488,3 +607,28 @@\n-public:\n-  \/\/ Empty\n-  MemPointerDecomposedForm() : _pointer(nullptr), _con(NoOverflowInt::make_NaN()) {}\n+    bool is_known()          const { return _kind != Unknown; }\n+    bool is_object()         const { return _kind == Object; }\n+    bool is_native()         const { return _kind == Native; }\n+    Node* object()           const { assert(is_object(), \"unexpected kind\"); return _base; }\n+    Node* native()           const { assert(is_native(), \"unexpected kind\"); return _base; }\n+    Node* object_or_native() const { assert(is_known(),  \"unexpected kind\"); return _base; }\n+    Node* object_or_native_or_null() const { return _base; }\n+\n+#ifndef PRODUCT\n+    void print_on(outputStream* st) const {\n+      switch (_kind) {\n+      case Object:\n+          st->print(\"object  \");\n+          st->print(\"%d %s\", _base->_idx, _base->Name());\n+          break;\n+      case Native:\n+          st->print(\"native  \");\n+          st->print(\"%d %s\", _base->_idx, _base->Name());\n+          break;\n+      default:\n+          st->print(\"unknown \");\n+      };\n+    }\n+#endif\n+\n+  private:\n+    static Node* find_base(Node* object_base, const GrowableArray<MemPointerSummand>& summands);\n+  };\n@@ -493,0 +637,6 @@\n+  MemPointerSummand _summands[SUMMANDS_SIZE];\n+  const NoOverflowInt _con;\n+  const Base _base;\n+  const jint _size;\n+  NOT_PRODUCT( const TraceMemPointer& _trace; )\n+\n@@ -494,1 +644,8 @@\n-  MemPointerDecomposedForm(Node* pointer) : _pointer(pointer), _con(NoOverflowInt(0)) {\n+  MemPointer(Node* pointer,\n+             const jint size\n+             NOT_PRODUCT(COMMA const TraceMemPointer& trace)) :\n+    _con(NoOverflowInt(0)),\n+    _base(Base()),\n+    _size(size)\n+    NOT_PRODUCT(COMMA _trace(trace))\n+  {\n@@ -497,0 +654,1 @@\n+    assert(1 <= _size && _size <= 2048 && is_power_of_2(_size), \"sanity: no vector is expected to be larger\");\n@@ -499,2 +657,11 @@\n-  MemPointerDecomposedForm(Node* pointer, const GrowableArray<MemPointerSummand>& summands, const NoOverflowInt& con)\n-    : _pointer(pointer), _con(con) {\n+  \/\/ pointer = SUM(SUMMANDS) + con\n+  MemPointer(Node* pointer,\n+             const GrowableArray<MemPointerSummand>& summands,\n+             const NoOverflowInt& con,\n+             const jint size\n+             NOT_PRODUCT(COMMA const TraceMemPointer& trace)) :\n+    _con(con),\n+    _base(Base::make(pointer, summands)),\n+    _size(size)\n+    NOT_PRODUCT(COMMA _trace(trace))\n+  {\n@@ -503,0 +670,1 @@\n+#ifdef ASSERT\n@@ -504,1 +672,1 @@\n-      MemPointerSummand s = summands.at(i);\n+      const MemPointerSummand& s = summands.at(i);\n@@ -507,1 +675,35 @@\n-      _summands[i] = s;\n+    }\n+#endif\n+\n+    \/\/ Put the base in the 0th summand.\n+    Node* base = _base.object_or_native_or_null();\n+    int pos = 0;\n+    if (base != nullptr) {\n+      MemPointerSummand b(base, NoOverflowInt(1));\n+      _summands[0] = b;\n+      pos++;\n+    }\n+    \/\/ Put all other summands afterward.\n+    for (int i = 0; i < summands.length(); i++) {\n+      const MemPointerSummand& s = summands.at(i);\n+      if (s.variable() == base && s.scale().is_one()) { continue; }\n+      _summands[pos++] = summands.at(i);\n+    }\n+    assert(pos == summands.length(), \"copied all summands\");\n+\n+    assert(1 <= _size && _size <= 2048 && is_power_of_2(_size), \"sanity: no vector is expected to be larger\");\n+  }\n+\n+  \/\/ Mutated copy.\n+  \/\/   The new MemPointer is identical, except it has a different size and con.\n+  MemPointer(const MemPointer& old,\n+             const NoOverflowInt new_con,\n+             const jint new_size) :\n+    _con(new_con),\n+    _base(old.base()),\n+    _size(new_size)\n+    NOT_PRODUCT(COMMA _trace(old._trace))\n+  {\n+    assert(!_con.is_NaN(), \"non-NaN constant\");\n+    for (int i = 0; i < SUMMANDS_SIZE; i++) {\n+      _summands[i] = old.summands_at(i);\n@@ -512,2 +714,16 @@\n-  static MemPointerDecomposedForm make_trivial(Node* pointer) {\n-    return MemPointerDecomposedForm(pointer);\n+  \/\/ Parse pointer of MemNode. Delegates to MemPointerParser::parse.\n+  \/\/ callback: receives a callback for every decomposed (inner) node\n+  \/\/           of the pointer expression.\n+  MemPointer(const MemNode* mem,\n+             MemPointerParserCallback& callback\n+             NOT_PRODUCT(COMMA const TraceMemPointer& trace));\n+\n+  \/\/ Parse pointer of MemNode. Delegates to MemPointerParser::parse.\n+  MemPointer(const MemNode* mem\n+             NOT_PRODUCT(COMMA const TraceMemPointer& trace)) :\n+    MemPointer(mem, MemPointerParserCallback::empty() NOT_PRODUCT(COMMA trace)) {}\n+\n+  static MemPointer make_trivial(Node* pointer,\n+                                 const jint size\n+                                 NOT_PRODUCT(COMMA const TraceMemPointer& trace)) {\n+    return MemPointer(pointer, size NOT_PRODUCT(COMMA trace));\n@@ -516,1 +732,5 @@\n-  static MemPointerDecomposedForm make(Node* pointer, const GrowableArray<MemPointerSummand>& summands, const NoOverflowInt& con) {\n+  static MemPointer make(Node* pointer,\n+                         const GrowableArray<MemPointerSummand>& summands,\n+                         const NoOverflowInt& con,\n+                         const jint size\n+                         NOT_PRODUCT(COMMA const TraceMemPointer& trace)) {\n@@ -518,1 +738,1 @@\n-      return MemPointerDecomposedForm(pointer, summands, con);\n+      return MemPointer(pointer, summands, con, size NOT_PRODUCT(COMMA trace));\n@@ -520,1 +740,1 @@\n-      return MemPointerDecomposedForm::make_trivial(pointer);\n+      return MemPointer::make_trivial(pointer, size NOT_PRODUCT(COMMA trace));\n@@ -524,2 +744,7 @@\n-  MemPointerAliasing get_aliasing_with(const MemPointerDecomposedForm& other\n-                                       NOT_PRODUCT( COMMA const TraceMemPointer& trace) ) const;\n+  MemPointer make_with_size(const jint new_size) const {\n+    return MemPointer(*this, this->con(), new_size);\n+  };\n+\n+  MemPointer make_with_con(const NoOverflowInt new_con) const {\n+    return MemPointer(*this, new_con, this->size());\n+  };\n@@ -527,1 +752,19 @@\n-  const MemPointerSummand summands_at(const uint i) const {\n+private:\n+  MemPointerAliasing get_aliasing_with(const MemPointer& other\n+                                       NOT_PRODUCT(COMMA const TraceMemPointer& trace)) const;\n+\n+  bool has_same_summands_as(const MemPointer& other, uint start) const;\n+  bool has_same_summands_as(const MemPointer& other) const { return has_same_summands_as(other, 0); }\n+  bool has_different_object_base_but_otherwise_same_summands_as(const MemPointer& other) const;\n+\n+public:\n+  bool has_same_non_base_summands_as(const MemPointer& other) const {\n+    if (!base().is_known() || !other.base().is_known()) {\n+      assert(false, \"unknown base case is not answered optimally\");\n+      return false;\n+    }\n+    \/\/ Known base at 0th summand: all other summands are non-base summands.\n+    return has_same_summands_as(other, 1);\n+  }\n+\n+  const MemPointerSummand& summands_at(const uint i) const {\n@@ -533,0 +776,25 @@\n+  const Base& base() const { return _base; }\n+  jint size() const { return _size; }\n+\n+  static int cmp_summands(const MemPointer& a, const MemPointer& b) {\n+    for (int i = 0; i < SUMMANDS_SIZE; i++) {\n+      const MemPointerSummand& s_a = a.summands_at(i);\n+      const MemPointerSummand& s_b = b.summands_at(i);\n+      int cmp = MemPointerSummand::cmp(s_a, s_b);\n+      if (cmp != 0) { return cmp;}\n+    }\n+    return 0;\n+  }\n+\n+  template<typename Callback>\n+  void for_each_non_empty_summand(Callback callback) const {\n+    for (int i = 0; i < SUMMANDS_SIZE; i++) {\n+      const MemPointerSummand& s = summands_at(i);\n+      if (s.variable() != nullptr) {\n+        callback(s);\n+      }\n+    }\n+  }\n+\n+  bool is_adjacent_to_and_before(const MemPointer& other) const;\n+  bool never_overlaps_with(const MemPointer& other) const;\n@@ -535,3 +803,3 @@\n-  void print_on(outputStream* st) const {\n-    if (_pointer == nullptr) {\n-      st->print_cr(\"MemPointerDecomposedForm empty.\");\n+  void print_form_on(outputStream* st) const {\n+    if (_con.is_NaN()) {\n+      st->print_cr(\"empty\");\n@@ -540,1 +808,0 @@\n-    st->print(\"MemPointerDecomposedForm[%d %s:  con = \", _pointer->_idx, _pointer->Name());\n@@ -545,1 +812,1 @@\n-        st->print(\", \");\n+        st->print(\" + \");\n@@ -549,1 +816,9 @@\n-    st->print_cr(\"]\");\n+  }\n+\n+  void print_on(outputStream* st, bool end_with_cr = true) const {\n+    st->print(\"MemPointer[size: %2d, base: \", size());\n+    _base.print_on(st);\n+    st->print(\", form: \");\n+    print_form_on(st);\n+    st->print(\"]\");\n+    if (end_with_cr) { st->cr(); }\n@@ -554,1 +829,6 @@\n-class MemPointerDecomposedFormParser : public StackObj {\n+\/\/ Utility class.\n+\/\/ MemPointerParser::parse takes a MemNode (load or store) and computes its MemPointer.\n+\/\/ It temporarily allocates dynamic data structures (GrowableArray) in the resource\n+\/\/ area. This way, the computed MemPointer does not have to have any dynamic data\n+\/\/ structures and can be copied freely by value.\n+class MemPointerParser : public StackObj {\n@@ -564,22 +844,1 @@\n-  MemPointerDecomposedForm _decomposed_form;\n-\n-public:\n-  MemPointerDecomposedFormParser(const MemNode* mem) : _mem(mem), _con(NoOverflowInt(0)) {\n-    _decomposed_form = parse_decomposed_form();\n-  }\n-\n-  const MemPointerDecomposedForm decomposed_form() const { return _decomposed_form; }\n-\n-private:\n-  MemPointerDecomposedForm parse_decomposed_form();\n-  void parse_sub_expression(const MemPointerSummand& summand);\n-\n-  bool is_safe_to_decompose_op(const int opc, const NoOverflowInt& scale) const;\n-};\n-\n-\/\/ Facility to parse the pointer of a Load or Store, so that aliasing between two such\n-\/\/ memory operations can be determined (e.g. adjacency).\n-class MemPointer : public StackObj {\n-private:\n-  const MemNode* _mem;\n-  const MemPointerDecomposedForm _decomposed_form;\n+  MemPointer _mem_pointer;\n@@ -587,1 +846,6 @@\n-  NOT_PRODUCT( const TraceMemPointer& _trace; )\n+  MemPointerParser(const MemNode* mem,\n+                   MemPointerParserCallback& callback\n+                   NOT_PRODUCT(COMMA const TraceMemPointer& trace)) :\n+    _mem(mem),\n+    _con(NoOverflowInt(0)),\n+    _mem_pointer(parse(callback NOT_PRODUCT(COMMA trace))) {}\n@@ -590,5 +854,7 @@\n-  MemPointer(const MemNode* mem NOT_PRODUCT( COMMA const TraceMemPointer& trace)) :\n-    _mem(mem),\n-    _decomposed_form(init_decomposed_form(_mem))\n-    NOT_PRODUCT( COMMA _trace(trace) )\n-  {\n+  static MemPointer parse(const MemNode* mem,\n+                          MemPointerParserCallback& callback\n+                          NOT_PRODUCT(COMMA const TraceMemPointer& trace)) {\n+    assert(mem->is_Store() || mem->is_Load(), \"only stores and loads are allowed\");\n+    ResourceMark rm;\n+    MemPointerParser parser(mem, callback NOT_PRODUCT(COMMA trace));\n+\n@@ -596,5 +862,5 @@\n-    if (_trace.is_trace_pointer()) {\n-      tty->print_cr(\"MemPointer::MemPointer:\");\n-      tty->print(\"mem: \"); mem->dump();\n-      _mem->in(MemNode::Address)->dump_bfs(5, nullptr, \"d\");\n-      _decomposed_form.print_on(tty);\n+    if (trace.is_trace_parsing()) {\n+      tty->print_cr(\"\\nMemPointerParser::parse:\");\n+      tty->print(\"  mem: \"); mem->dump();\n+      parser.mem_pointer().print_on(tty);\n+      mem->in(MemNode::Address)->dump_bfs(7, nullptr, \"d\");\n@@ -603,0 +869,2 @@\n+\n+    return parser.mem_pointer();\n@@ -605,3 +873,1 @@\n-  const MemNode* mem() const { return _mem; }\n-  const MemPointerDecomposedForm decomposed_form() const { return _decomposed_form; }\n-  bool is_adjacent_to_and_before(const MemPointer& other) const;\n+  static bool is_native_memory_base_candidate(Node* n);\n@@ -610,6 +876,9 @@\n-  static const MemPointerDecomposedForm init_decomposed_form(const MemNode* mem) {\n-    assert(mem->is_Store(), \"only stores are supported\");\n-    ResourceMark rm;\n-    MemPointerDecomposedFormParser parser(mem);\n-    return parser.decomposed_form();\n-  }\n+  const MemPointer& mem_pointer() const { return _mem_pointer; }\n+\n+  MemPointer parse(MemPointerParserCallback& callback\n+                   NOT_PRODUCT(COMMA const TraceMemPointer& trace));\n+\n+  void parse_sub_expression(const MemPointerSummand& summand, MemPointerParserCallback& callback);\n+  static bool sub_expression_has_native_base_candidate(Node* n);\n+\n+  bool is_safe_to_decompose_op(const int opc, const NoOverflowInt& scale) const;\n","filename":"src\/hotspot\/share\/opto\/mempointer.hpp","additions":392,"deletions":123,"binary":false,"changes":515,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/multnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/narrowptrnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+  bool is_one() const { return !is_NaN() && value() == 1; }\n@@ -103,0 +104,17 @@\n+  \/\/ This \"cmp\" is used for sort only.\n+  \/\/ Note: the NaN semantics are different from floating arithmetic NaNs!\n+  \/\/ - Smaller non-NaN are before larger non-NaN.\n+  \/\/ - Any non-NaN are before NaN.\n+  \/\/ - NaN is equal to NaN.\n+  \/\/ Note: NaN indicate overflow, uninitialized, etc.\n+  static int cmp(const NoOverflowInt& a, const NoOverflowInt& b) {\n+    if (a.is_NaN()) {\n+      return b.is_NaN() ? 0 : 1;\n+    } else if (b.is_NaN()) {\n+      return -1;\n+    }\n+    if (a.value() < b.value()) { return -1; }\n+    if (a.value() > b.value()) { return  1; }\n+    return 0;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/noOverflowInt.hpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/opaquenode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\/\/ no precompiled headers\n","filename":"src\/hotspot\/share\/opto\/opcodes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -533,2 +533,1 @@\n-  void modf();\n-  void modd();\n+  Node* floating_point_mod(Node* a, Node* b, BasicType type);\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1099,11 +1098,3 @@\n-void Parse::modf() {\n-  Node *f2 = pop();\n-  Node *f1 = pop();\n-  Node* c = make_runtime_call(RC_LEAF, OptoRuntime::modf_Type(),\n-                              CAST_FROM_FN_PTR(address, SharedRuntime::frem),\n-                              \"frem\", nullptr, \/\/no memory effects\n-                              f1, f2);\n-  Node* res = _gvn.transform(new ProjNode(c, TypeFunc::Parms + 0));\n-\n-  push(res);\n-}\n+Node* Parse::floating_point_mod(Node* a, Node* b, BasicType type) {\n+  assert(type == BasicType::T_FLOAT || type == BasicType::T_DOUBLE, \"only float and double are floating points\");\n+  CallNode* mod = type == BasicType::T_DOUBLE ? static_cast<CallNode*>(new ModDNode(C, a, b)) : new ModFNode(C, a, b);\n@@ -1111,15 +1102,6 @@\n-void Parse::modd() {\n-  Node *d2 = pop_pair();\n-  Node *d1 = pop_pair();\n-  Node* c = make_runtime_call(RC_LEAF, OptoRuntime::Math_DD_D_Type(),\n-                              CAST_FROM_FN_PTR(address, SharedRuntime::drem),\n-                              \"drem\", nullptr, \/\/no memory effects\n-                              d1, top(), d2, top());\n-  Node* res_d   = _gvn.transform(new ProjNode(c, TypeFunc::Parms + 0));\n-\n-#ifdef ASSERT\n-  Node* res_top = _gvn.transform(new ProjNode(c, TypeFunc::Parms + 1));\n-  assert(res_top == top(), \"second value must be top\");\n-#endif\n-\n-  push_pair(res_d);\n+  Node* prev_mem = set_predefined_input_for_runtime_call(mod);\n+  mod = _gvn.transform(mod)->as_Call();\n+  set_predefined_output_for_runtime_call(mod, prev_mem, TypeRawPtr::BOTTOM);\n+  Node* result = _gvn.transform(new ProjNode(mod, TypeFunc::Parms + 0));\n+  record_for_igvn(mod);\n+  return result;\n@@ -2306,12 +2288,4 @@\n-    if (Matcher::has_match_rule(Op_ModF)) {\n-      \/\/ Generate a ModF node.\n-      b = pop();\n-      a = pop();\n-      c = _gvn.transform( new ModFNode(nullptr,a,b) );\n-      d = precision_rounding(c);\n-      push( d );\n-    }\n-    else {\n-      \/\/ Generate a call.\n-      modf();\n-    }\n+    \/\/ Generate a ModF node.\n+    b = pop();\n+    a = pop();\n+    push(floating_point_mod(a, b, BasicType::T_FLOAT));\n@@ -2439,14 +2413,4 @@\n-    if (Matcher::has_match_rule(Op_ModD)) {\n-      \/\/ Generate a ModD node.\n-      b = pop_pair();\n-      a = pop_pair();\n-      \/\/ a % b\n-\n-      c = _gvn.transform( new ModDNode(nullptr,a,b) );\n-      d = dprecision_rounding(c);\n-      push_pair( d );\n-    }\n-    else {\n-      \/\/ Generate a call.\n-      modd();\n-    }\n+    \/\/ Generate a ModD node.\n+    b = pop_pair();\n+    a = pop_pair();\n+    push_pair(floating_point_mod(a, b, BasicType::T_DOUBLE));\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":18,"deletions":54,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/phase.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/postaloc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -157,1 +156,1 @@\n-    if (!output->is_CFG() && data_in_loop_body.check(output)) {\n+    if (!output->is_CFG() && data_in_loop_body.check_node_in_loop_body(output)) {\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,1 +251,1 @@\n-  virtual bool check(Node* node) const = 0;\n+  virtual bool check_node_in_loop_body(Node* node) const = 0;\n@@ -966,1 +966,1 @@\n-  bool check(Node* node) const override {\n+  bool check_node_in_loop_body(Node* node) const override {\n@@ -969,0 +969,1 @@\n+      \/\/ Check that the clone is actually part of the cloned loop body and not from some earlier cloning.\n@@ -970,2 +971,0 @@\n-    } else {\n-      return false;\n@@ -973,0 +972,40 @@\n+    return false;\n+  }\n+};\n+\n+\/\/ This class checks whether a node is in the main loop body and not the pre loop body. We cannot use the\n+\/\/ NodeInOriginalLoopBody class because PhaseIdealLoop::clone_up_backedge_goo() could clone additional nodes that\n+\/\/ should be pinned at the main loop body entry. The check in NodeInOriginalLoopBody will ignore these.\n+class NodeInMainLoopBody : public NodeInLoopBody {\n+  const uint _first_node_index_in_pre_loop_body;\n+  const uint _last_node_index_in_pre_loop_body;\n+  DEBUG_ONLY(const uint _last_node_index_from_backedge_goo;)\n+  const Node_List& _old_new;\n+\n+  public:\n+  NodeInMainLoopBody(const uint first_node_index_in_pre_loop_body, const uint last_node_index_in_pre_loop_body,\n+                     DEBUG_ONLY(const uint last_node_index_from_backedge_goo COMMA) const Node_List& old_new)\n+      : _first_node_index_in_pre_loop_body(first_node_index_in_pre_loop_body),\n+        _last_node_index_in_pre_loop_body(last_node_index_in_pre_loop_body),\n+        DEBUG_ONLY(_last_node_index_from_backedge_goo(last_node_index_from_backedge_goo) COMMA)\n+        _old_new(old_new) {}\n+  NONCOPYABLE(NodeInMainLoopBody);\n+\n+  \/\/ Check if 'node' is not a cloned node (i.e. \"< _first_node_index_in_cloned_loop_body\") and if we've created a\n+  \/\/ clone from 'node' (i.e. _old_new entry is non-null). Then we know that 'node' belongs to the original loop body.\n+  \/\/ Additionally check if a node was cloned after the pre loop was created. This indicates that it was created by\n+  \/\/ PhaseIdealLoop::clone_up_backedge_goo(). These nodes should also be pinned at the main loop entry.\n+  bool check_node_in_loop_body(Node* node) const override {\n+    if (node->_idx < _first_node_index_in_pre_loop_body) {\n+      Node* cloned_node = _old_new[node->_idx];\n+      \/\/ Check that the clone is actually part of the cloned loop body and not from some earlier cloning.\n+      bool cloned_node_in_pre_loop_body = cloned_node != nullptr && cloned_node->_idx >= _first_node_index_in_pre_loop_body;\n+      assert(!cloned_node_in_pre_loop_body || cloned_node->_idx <= _last_node_index_in_pre_loop_body,\n+             \"clone must be part of pre loop body\");\n+      return cloned_node_in_pre_loop_body;\n+    }\n+    \/\/ Created in PhaseIdealLoop::clone_up_backedge_goo()?\n+    bool node_created_by_backedge_goo = node->_idx > _last_node_index_in_pre_loop_body;\n+    assert(!node_created_by_backedge_goo || node->_idx <= _last_node_index_from_backedge_goo,\n+           \"cloned node must have been created in PhaseIdealLoop::clone_up_backedge_goo()\");\n+    return node_created_by_backedge_goo;\n@@ -987,1 +1026,1 @@\n-  bool check(Node* node) const override {\n+  bool check_node_in_loop_body(Node* node) const override {\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":45,"deletions":6,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/regalloc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/regmask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/replacednodes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/rootnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -253,1 +252,1 @@\n-#ifdef INCLUDE_JFR\n+#if INCLUDE_JFR\n@@ -256,1 +255,1 @@\n-#ifdef INCLUDE_JVMTI\n+#if INCLUDE_JVMTI\n@@ -2005,1 +2004,1 @@\n-#ifdef INCLUDE_JVMTI\n+#if INCLUDE_JVMTI\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-#ifdef INCLUDE_JFR\n+#if INCLUDE_JFR\n@@ -196,1 +196,1 @@\n-#ifdef INCLUDE_JVMTI\n+#if INCLUDE_JVMTI\n@@ -648,1 +648,1 @@\n-#ifdef INCLUDE_JFR\n+#if INCLUDE_JFR\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/split_if.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -177,0 +176,3 @@\n+  bool has_control(Node* ctrl) {\n+    return _control.contains(ctrl);\n+  }\n@@ -411,1 +413,60 @@\n-\/\/ Recognize a fluent-chain of StringBuilder\/Buffer. They are either explicit usages\n+PhaseStringOpts::ProcessAppendResult PhaseStringOpts::process_append_candidate(CallStaticJavaNode* cnode,\n+                                                                               StringConcat* sc,\n+                                                                               ciMethod* m,\n+                                                                               ciSymbol* string_sig,\n+                                                                               ciSymbol* int_sig,\n+                                                                               ciSymbol* char_sig) {\n+  if (cnode->method() != nullptr && !cnode->method()->is_static() &&\n+      cnode->method()->holder() == m->holder() &&\n+      cnode->method()->name() == ciSymbols::append_name() &&\n+      (cnode->method()->signature()->as_symbol() == string_sig ||\n+       cnode->method()->signature()->as_symbol() == char_sig ||\n+       cnode->method()->signature()->as_symbol() == int_sig)) {\n+    if (sc->has_control(cnode)) {\n+      return ProcessAppendResult::AppendWasAdded;\n+    }\n+    sc->add_control(cnode);\n+    Node* arg = cnode->in(TypeFunc::Parms + 1);\n+    if (arg == nullptr || arg->is_top()) {\n+#ifndef PRODUCT\n+      if (PrintOptimizeStringConcat) {\n+        tty->print(\"giving up because the call is effectively dead\");\n+        cnode->jvms()->dump_spec(tty);\n+        tty->cr();\n+      }\n+#endif\n+      return ProcessAppendResult::AbortOptimization;\n+    }\n+\n+    if (cnode->method()->signature()->as_symbol() == int_sig) {\n+      sc->push_int(arg);\n+    } else if (cnode->method()->signature()->as_symbol() == char_sig) {\n+      sc->push_char(arg);\n+    } else if (arg->is_Proj() && arg->in(0)->is_CallStaticJava()) {\n+      CallStaticJavaNode* csj = arg->in(0)->as_CallStaticJava();\n+      if (csj->method() != nullptr &&\n+          csj->method()->intrinsic_id() == vmIntrinsics::_Integer_toString &&\n+          arg->outcnt() == 1) {\n+        \/\/ _control is the list of StringBuilder calls nodes which\n+        \/\/ will be replaced by new String code after this optimization.\n+        \/\/ Integer::toString() call is not part of StringBuilder calls\n+        \/\/ chain. It could be eliminated only if its result is used\n+        \/\/ only by this SB calls chain.\n+        \/\/ Another limitation: it should be used only once because\n+        \/\/ it is unknown that it is used only by this SB calls chain\n+        \/\/ until all related SB calls nodes are collected.\n+        assert(arg->unique_out() == cnode, \"sanity\");\n+        sc->add_control(csj);\n+        sc->push_int(csj->in(TypeFunc::Parms));\n+      } else {\n+        sc->push_string(arg);\n+      }\n+    } else {\n+      sc->push_string(arg);\n+    }\n+    return ProcessAppendResult::AppendWasAdded;\n+  }\n+  return ProcessAppendResult::CandidateIsNotAppend;\n+}\n+\n+\/\/ Recognize fluent-chain and non-fluent uses of StringBuilder\/Buffer. They are either explicit usages\n@@ -420,3 +481,3 @@\n-\/\/ PS: Only a certain subset of constructor and append methods are acceptable.\n-\/\/ The criterion is that the length of argument is easy to work out in this phrase.\n-\/\/ It will drop complex cases such as Object.\n+\/\/ Fluent-chains are recognized by walking upwards along the receivers, starting from toString().\n+\/\/ Once the allocation of the StringBuilder has been reached, DU pairs are examined to find the\n+\/\/ constructor and non-fluent uses of the StringBuilder such as in this example:\n@@ -424,2 +485,0 @@\n-\/\/ Since it walks along the receivers of fluent-chain, it will give up if the codeshape is\n-\/\/ not \"fluent\" enough. eg.\n@@ -430,2 +489,3 @@\n-\/\/ The receiver of toString method is the result of Allocation Node(CheckCastPP).\n-\/\/ The append method is overlooked. It will fail at validate_control_flow() test.\n+\/\/ PS: Only a certain subset of constructor and append methods are acceptable.\n+\/\/ The criterion is that the length of argument is easy to work out in this phrase.\n+\/\/ It will drop complex cases such as Object.\n@@ -470,1 +530,1 @@\n-        break;\n+        return nullptr;\n@@ -482,1 +542,1 @@\n-        break;\n+        return nullptr;\n@@ -493,0 +553,4 @@\n+          if (constructor != nullptr) {\n+            \/\/ The constructor again. We must only process it once.\n+            continue;\n+          }\n@@ -546,1 +610,10 @@\n-          break;\n+        } else if (use != nullptr) {\n+          if (process_append_candidate(use, sc, m, string_sig, int_sig, char_sig) == ProcessAppendResult::AbortOptimization) {\n+            \/\/ We must abort if process_append_candidate tells us to...\n+            return nullptr;\n+          }\n+          \/\/ ...but we do not care if we really found an append or not:\n+          \/\/ - If we found an append, that's perfect. Nothing further to do.\n+          \/\/ - If this is a call to an unrelated method, validate_mem_flow() (and validate_control_flow())\n+          \/\/   will later check if this call prevents the optimization. So nothing to do here.\n+          \/\/ We will continue to look for the constructor (if not found already) and appends.\n@@ -557,1 +630,1 @@\n-        break;\n+        return nullptr;\n@@ -572,11 +645,7 @@\n-    } else if (cnode->method() == nullptr) {\n-      break;\n-    } else if (!cnode->method()->is_static() &&\n-               cnode->method()->holder() == m->holder() &&\n-               cnode->method()->name() == ciSymbols::append_name() &&\n-               (cnode->method()->signature()->as_symbol() == string_sig ||\n-                cnode->method()->signature()->as_symbol() == char_sig ||\n-                cnode->method()->signature()->as_symbol() == int_sig)) {\n-      sc->add_control(cnode);\n-      Node* arg = cnode->in(TypeFunc::Parms + 1);\n-      if (arg == nullptr || arg->is_top()) {\n+    } else {\n+      ProcessAppendResult result = process_append_candidate(cnode, sc, m, string_sig, int_sig, char_sig);\n+\n+      if (result == ProcessAppendResult::AbortOptimization) {\n+        return nullptr;\n+      } else if (result == ProcessAppendResult::CandidateIsNotAppend) {\n+        \/\/ some unhandled signature\n@@ -585,2 +654,4 @@\n-          tty->print(\"giving up because the call is effectively dead\");\n-          cnode->jvms()->dump_spec(tty); tty->cr();\n+          tty->print(\"giving up because encountered unexpected signature \");\n+          cnode->tf()->dump();\n+          tty->cr();\n+          cnode->in(TypeFunc::Parms + 1)->dump();\n@@ -589,36 +660,1 @@\n-        break;\n-      }\n-      if (cnode->method()->signature()->as_symbol() == int_sig) {\n-        sc->push_int(arg);\n-      } else if (cnode->method()->signature()->as_symbol() == char_sig) {\n-        sc->push_char(arg);\n-      } else {\n-        if (arg->is_Proj() && arg->in(0)->is_CallStaticJava()) {\n-          CallStaticJavaNode* csj = arg->in(0)->as_CallStaticJava();\n-          if (csj->method() != nullptr &&\n-              csj->method()->intrinsic_id() == vmIntrinsics::_Integer_toString &&\n-              arg->outcnt() == 1) {\n-            \/\/ _control is the list of StringBuilder calls nodes which\n-            \/\/ will be replaced by new String code after this optimization.\n-            \/\/ Integer::toString() call is not part of StringBuilder calls\n-            \/\/ chain. It could be eliminated only if its result is used\n-            \/\/ only by this SB calls chain.\n-            \/\/ Another limitation: it should be used only once because\n-            \/\/ it is unknown that it is used only by this SB calls chain\n-            \/\/ until all related SB calls nodes are collected.\n-            assert(arg->unique_out() == cnode, \"sanity\");\n-            sc->add_control(csj);\n-            sc->push_int(csj->in(TypeFunc::Parms));\n-            continue;\n-          }\n-        }\n-        sc->push_string(arg);\n-      }\n-      continue;\n-    } else {\n-      \/\/ some unhandled signature\n-#ifndef PRODUCT\n-      if (PrintOptimizeStringConcat) {\n-        tty->print(\"giving up because encountered unexpected signature \");\n-        cnode->tf()->dump(); tty->cr();\n-        cnode->in(TypeFunc::Parms + 1)->dump();\n+        return nullptr;\n@@ -626,2 +662,0 @@\n-#endif\n-      break;\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":99,"deletions":65,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- private:\n+private:\n@@ -56,0 +56,17 @@\n+  enum class ProcessAppendResult {\n+    \/\/ Indicates that the candidate was indeed an append and process_append_candidate processed it\n+    \/\/ accordingly (added it to the StringConcat etc.)\n+    AppendWasAdded,\n+    \/\/ The candidate turned out not to be an append call. process_append_candidate did not do anything.\n+    CandidateIsNotAppend,\n+    \/\/ The candidate is an append call, but circumstances completely preventing string concat\n+    \/\/ optimization were detected and the optimization must abort.\n+    AbortOptimization\n+  };\n+\n+  \/\/ Called from build_candidate. Looks at an \"append candidate\", a call that might be a call\n+  \/\/ to StringBuilder::append. If so, adds it to the StringConcat.\n+  ProcessAppendResult process_append_candidate(CallStaticJavaNode* cnode, StringConcat* sc,\n+                                               ciMethod* m, ciSymbol* string_sig, ciSymbol* int_sig,\n+                                               ciSymbol* char_sig);\n+\n@@ -108,1 +125,1 @@\n- public:\n+public:\n@@ -113,1 +130,2 @@\n- private:\n+\n+private:\n","filename":"src\/hotspot\/share\/opto\/stringopts.hpp","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1624,21 +1623,11 @@\n-  \/\/ Change ((x & (m - 1)) u< m) into (m > 0)\n-  \/\/ This is the off-by-one variant of ((x & m) u<= m)\n-  if (cop == Op_CmpU &&\n-      _test._test == BoolTest::lt &&\n-      cmp1_op == Op_AndI) {\n-    Node* l = cmp1->in(1);\n-    Node* r = cmp1->in(2);\n-    for (int repeat = 0; repeat < 2; repeat++) {\n-      bool match = r->Opcode() == Op_AddI && r->in(2)->find_int_con(0) == -1 &&\n-                   r->in(1) == cmp2;\n-      if (match) {\n-        \/\/ arraylength known to be non-negative, so a (arraylength != 0) is sufficient,\n-        \/\/ but to be compatible with the array range check pattern, use (arraylength u> 0)\n-        Node* ncmp = cmp2->Opcode() == Op_LoadRange\n-                     ? phase->transform(new CmpUNode(cmp2, phase->intcon(0)))\n-                     : phase->transform(new CmpINode(cmp2, phase->intcon(0)));\n-        return new BoolNode(ncmp, BoolTest::gt);\n-      } else {\n-        \/\/ commute and try again\n-        l = cmp1->in(2);\n-        r = cmp1->in(1);\n+  \/\/ Transform: \"((x & (m - 1)) <u m)\" or \"(((m - 1) & x) <u m)\" into \"(m >u 0)\"\n+  \/\/ This is case [CMPU_MASK] which is further described at the method comment of BoolNode::Value_cmpu_and_mask().\n+  if (cop == Op_CmpU && _test._test == BoolTest::lt && cmp1_op == Op_AndI) {\n+    Node* m = cmp2; \/\/ RHS: m\n+    for (int add_idx = 1; add_idx <= 2; add_idx++) { \/\/ LHS: \"(m + (-1)) & x\" or \"x & (m + (-1))\"?\n+      Node* maybe_m_minus_1 = cmp1->in(add_idx);\n+      if (maybe_m_minus_1->Opcode() == Op_AddI &&\n+          maybe_m_minus_1->in(2)->find_int_con(0) == -1 &&\n+          maybe_m_minus_1->in(1) == m) {\n+        Node* m_cmpu_0 = phase->transform(new CmpUNode(m, phase->intcon(0)));\n+        return new BoolNode(m_cmpu_0, BoolTest::gt);\n@@ -1810,3 +1799,51 @@\n-\/\/------------------------------Value------------------------------------------\n-\/\/ Change ((x & m) u<= m) or ((m & x) u<= m) to always true\n-\/\/ Same with ((x & m) u< m+1) and ((m & x) u< m+1)\n+\/\/ We use the following Lemmas\/insights for the following two transformations (1) and (2):\n+\/\/   x & y <=u y, for any x and y           (Lemma 1, masking always results in a smaller unsigned number)\n+\/\/   y <u y + 1 is always true if y != -1   (Lemma 2, (uint)(-1 + 1) == (uint)(UINT_MAX + 1) which overflows)\n+\/\/   y <u 0 is always false for any y       (Lemma 3, 0 == UINT_MIN and nothing can be smaller than that)\n+\/\/\n+\/\/ (1a) Always:     Change ((x & m) <=u m  ) or ((m & x) <=u m  ) to always true   (true by Lemma 1)\n+\/\/ (1b) If m != -1: Change ((x & m) <u  m + 1) or ((m & x) <u  m + 1) to always true:\n+\/\/    x & m <=u m          is always true   \/\/ (Lemma 1)\n+\/\/    x & m <=u m <u m + 1 is always true   \/\/ (Lemma 2: m <u m + 1, if m != -1)\n+\/\/\n+\/\/ A counter example for (1b), if we allowed m == -1:\n+\/\/     (x & m)  <u m + 1\n+\/\/     (x & -1) <u 0\n+\/\/      x       <u 0\n+\/\/   which is false for any x (Lemma 3)\n+\/\/\n+\/\/ (2) Change ((x & (m - 1)) <u m) or (((m - 1) & x) <u m) to (m >u 0)\n+\/\/ This is the off-by-one variant of the above.\n+\/\/\n+\/\/ We now prove that this replacement is correct. This is the same as proving\n+\/\/   \"m >u 0\" if and only if \"x & (m - 1) <u m\", i.e. \"m >u 0 <=> x & (m - 1) <u m\"\n+\/\/\n+\/\/ We use (Lemma 1) and (Lemma 3) from above.\n+\/\/\n+\/\/ Case \"x & (m - 1) <u m => m >u 0\":\n+\/\/   We prove this by contradiction:\n+\/\/     Assume m <=u 0 which is equivalent to m == 0:\n+\/\/   and thus\n+\/\/     x & (m - 1) <u m = 0               \/\/ m == 0\n+\/\/     y           <u     0               \/\/ y = x & (m - 1)\n+\/\/   by Lemma 3, this is always false, i.e. a contradiction to our assumption.\n+\/\/\n+\/\/ Case \"m >u 0 => x & (m - 1) <u m\":\n+\/\/   x & (m - 1) <=u (m - 1)              \/\/ (Lemma 1)\n+\/\/   x & (m - 1) <=u (m - 1) <u m         \/\/ Using assumption m >u 0, no underflow of \"m - 1\"\n+\/\/\n+\/\/\n+\/\/ Note that the signed version of \"m > 0\":\n+\/\/   m > 0 <=> x & (m - 1) <u m\n+\/\/ does not hold:\n+\/\/   Assume m == -1 and x == -1:\n+\/\/     x  & (m - 1) <u m\n+\/\/     -1 & -2      <u -1\n+\/\/     -2           <u -1\n+\/\/     UINT_MAX - 1 <u UINT_MAX           \/\/ Signed to unsigned numbers\n+\/\/ which is true while\n+\/\/   m > 0\n+\/\/ is false which is a contradiction.\n+\/\/\n+\/\/ (1a) and (1b) is covered by this method since we can directly return a true value as type while (2) is covered\n+\/\/ in BoolNode::Ideal since we create a new non-constant node (see [CMPU_MASK]).\n@@ -1820,1 +1857,1 @@\n-      Node* bound = nullptr;\n+      Node* m = nullptr;\n@@ -1822,1 +1859,2 @@\n-        bound = cmp2;\n+        \/\/ (1a) \"((x & m) <=u m)\", cmp2 = m\n+        m = cmp2;\n@@ -1824,1 +1862,7 @@\n-        bound = cmp2->in(1);\n+        \/\/ (1b) \"(x & m) <u m + 1\" and \"(m & x) <u m + 1\", cmp2 = m + 1\n+        Node* rhs_m = cmp2->in(1);\n+        const TypeInt* rhs_m_type = phase->type(rhs_m)->isa_int();\n+        if (rhs_m_type->_lo > -1 || rhs_m_type->_hi < -1) {\n+          \/\/ Exclude any case where m == -1 is possible.\n+          m = rhs_m;\n+        }\n@@ -1827,1 +1871,1 @@\n-      if (cmp1->in(2) == bound || cmp1->in(1) == bound) {\n+      if (cmp1->in(2) == m || cmp1->in(1) == m) {\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":73,"deletions":29,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/subtypenode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"opto\/memnode.hpp\"\n@@ -51,0 +51,49 @@\n+\/\/ Collect ignored loop nodes during VPointer parsing.\n+class SuperWordUnrollingAnalysisIgnoredNodes : public MemPointerParserCallback {\n+private:\n+  const VLoop&     _vloop;\n+  const Node_List& _body;\n+  bool*            _ignored;\n+\n+public:\n+  SuperWordUnrollingAnalysisIgnoredNodes(const VLoop& vloop) :\n+    _vloop(vloop),\n+    _body(_vloop.lpt()->_body),\n+    _ignored(NEW_RESOURCE_ARRAY(bool, _body.size()))\n+  {\n+    for (uint i = 0; i < _body.size(); i++) {\n+      _ignored[i] = false;\n+    }\n+  }\n+\n+  virtual void callback(Node* n) override { set_ignored(n); }\n+\n+  void set_ignored(uint i) {\n+    assert(i < _body.size(), \"must be in bounds\");\n+    _ignored[i] = true;\n+  }\n+\n+  void set_ignored(Node* n) {\n+    \/\/ Only consider nodes in the loop.\n+    Node* ctrl = _vloop.phase()->get_ctrl(n);\n+    if (_vloop.lpt()->is_member(_vloop.phase()->get_loop(ctrl))) {\n+      \/\/ Find the index in the loop.\n+      for (uint j = 0; j < _body.size(); j++) {\n+        if (n == _body.at(j)) {\n+          set_ignored(j);\n+          return;\n+        }\n+      }\n+      assert(false, \"must find\");\n+    }\n+  }\n+\n+  bool is_ignored(uint i) const {\n+    assert(i < _vloop.lpt()->_body.size(), \"must be in bounds\");\n+    return _ignored[i];\n+  }\n+};\n+\n+\/\/ SuperWord unrolling analysis does:\n+\/\/ - Determine if the loop is a candidate for auto vectorization (SuperWord).\n+\/\/ - Find a good unrolling factor, to ensure full vector width utilization once we vectorize.\n@@ -57,0 +106,1 @@\n+  SuperWordUnrollingAnalysisIgnoredNodes ignored_nodes(vloop);\n@@ -58,8 +108,0 @@\n-  size_t ignored_size = lpt->_body.size();\n-  int *ignored_loop_nodes = NEW_RESOURCE_ARRAY(int, ignored_size);\n-  Node_Stack nstack((int)ignored_size);\n-\n-  \/\/ First clear the entries\n-  for (uint i = 0; i < lpt->_body.size(); i++) {\n-    ignored_loop_nodes[i] = -1;\n-  }\n@@ -80,1 +122,1 @@\n-      ignored_loop_nodes[i] = n->_idx;\n+      ignored_nodes.set_ignored(i);\n@@ -88,1 +130,1 @@\n-          ignored_loop_nodes[i] = n->_idx;\n+          ignored_nodes.set_ignored(i);\n@@ -106,1 +148,1 @@\n-      ignored_loop_nodes[i] = n->_idx;\n+      ignored_nodes.set_ignored(i);\n@@ -124,1 +166,1 @@\n-      ignored_loop_nodes[i] = n->_idx;\n+      ignored_nodes.set_ignored(i);\n@@ -135,24 +177,3 @@\n-        \/\/ Process the memory expression\n-        int stack_idx = 0;\n-        bool have_side_effects = true;\n-        if (adr->is_AddP() == false) {\n-          nstack.push(adr, stack_idx++);\n-        } else {\n-          \/\/ Mark the components of the memory operation in nstack\n-          VPointer p1(current, vloop, &nstack);\n-          have_side_effects = p1.node_stack()->is_nonempty();\n-        }\n-\n-        \/\/ Process the pointer stack\n-        while (have_side_effects) {\n-          Node* pointer_node = nstack.node();\n-          for (uint j = 0; j < lpt->_body.size(); j++) {\n-            Node* cur_node = lpt->_body.at(j);\n-            if (cur_node == pointer_node) {\n-              ignored_loop_nodes[j] = cur_node->_idx;\n-              break;\n-            }\n-          }\n-          nstack.pop();\n-          have_side_effects = nstack.is_nonempty();\n-        }\n+        \/\/ Parse the address expression with VPointer, and mark the internal\n+        \/\/ nodes of the address expression in ignore_nodes.\n+        VPointer p(current, vloop, ignored_nodes);\n@@ -168,1 +189,1 @@\n-      if (ignored_loop_nodes[i] != -1) continue;\n+      if (ignored_nodes.is_ignored(i)) continue;\n@@ -480,0 +501,24 @@\n+int SuperWord::MemOp::cmp_by_group(MemOp* a, MemOp* b) {\n+  \/\/ Opcode\n+  int c_Opcode = cmp_code(a->mem()->Opcode(), b->mem()->Opcode());\n+  if (c_Opcode != 0) { return c_Opcode; }\n+\n+  \/\/ VPointer summands\n+  return MemPointer::cmp_summands(a->vpointer().mem_pointer(),\n+                                  b->vpointer().mem_pointer());\n+}\n+\n+int SuperWord::MemOp::cmp_by_group_and_con_and_original_index(MemOp* a, MemOp* b) {\n+  \/\/ Group\n+  int cmp_group = cmp_by_group(a, b);\n+  if (cmp_group != 0) { return cmp_group; }\n+\n+  \/\/ VPointer con\n+  jint a_con = a->vpointer().mem_pointer().con().value();\n+  jint b_con = b->vpointer().mem_pointer().con().value();\n+  int c_con = cmp_code(a_con, b_con);\n+  if (c_con != 0) { return c_con; }\n+\n+  return cmp_code(a->original_index(), b->original_index());\n+}\n+\n@@ -483,12 +528,15 @@\n-  GrowableArray<const VPointer*> vpointers;\n-\n-  collect_valid_vpointers(vpointers);\n-\n-  \/\/ Sort the VPointers. This does 2 things:\n-  \/\/  - Separate the VPointer into groups: all memops that have the same opcode and the same\n-  \/\/    VPointer, except for the offset. Adjacent memops must have the same opcode and the\n-  \/\/    same VPointer, except for a shift in the offset. Thus, two memops can only be adjacent\n-  \/\/    if they are in the same group. This decreases the work.\n-  \/\/  - Sort by offset inside the groups. This decreases the work needed to determine adjacent\n-  \/\/    memops inside a group.\n-  vpointers.sort(VPointer::cmp_for_sort);\n+  GrowableArray<MemOp> memops;\n+\n+  collect_valid_memops(memops);\n+\n+  \/\/ Sort the MemOps by group, and inside a group by VPointer con:\n+  \/\/  - Group: all memops with the same opcode, and the same VPointer summands. Adjacent memops\n+  \/\/           have the same opcode and the same VPointer summands, only the VPointer con is\n+  \/\/           different. Thus, two memops can only be adjacent if they are in the same group.\n+  \/\/           This decreases the work.\n+  \/\/  - VPointer con: Sorting by VPointer con inside the group allows us to perform a sliding\n+  \/\/                  window algorithm, to determine adjacent memops efficiently.\n+  \/\/ Since GrowableArray::sort relies on qsort, the sort is not stable on its own. This can lead\n+  \/\/ to worse packing in some cases. To make the sort stable, our last cmp criterion is the\n+  \/\/ original index, i.e. the position in the memops array before sorting.\n+  memops.sort(MemOp::cmp_by_group_and_con_and_original_index);\n@@ -502,1 +550,1 @@\n-  create_adjacent_memop_pairs_in_all_groups(vpointers);\n+  create_adjacent_memop_pairs_in_all_groups(memops);\n@@ -512,3 +560,4 @@\n-\/\/ Collect all memops vpointers that could potentially be vectorized.\n-void SuperWord::collect_valid_vpointers(GrowableArray<const VPointer*>& vpointers) {\n-  for_each_mem([&] (const MemNode* mem, int bb_idx) {\n+\/\/ Collect all memops that could potentially be vectorized.\n+void SuperWord::collect_valid_memops(GrowableArray<MemOp>& memops) const {\n+  int original_index = 0;\n+  for_each_mem([&] (MemNode* mem, int bb_idx) {\n@@ -516,1 +565,1 @@\n-    if (p.valid() &&\n+    if (p.is_valid() &&\n@@ -519,1 +568,1 @@\n-      vpointers.append(&p);\n+      memops.append(MemOp(mem, &p, original_index++));\n@@ -525,1 +574,1 @@\n-void SuperWord::create_adjacent_memop_pairs_in_all_groups(const GrowableArray<const VPointer*> &vpointers) {\n+void SuperWord::create_adjacent_memop_pairs_in_all_groups(const GrowableArray<MemOp>& memops) {\n@@ -527,3 +576,3 @@\n-  while (group_start < vpointers.length()) {\n-    int group_end = find_group_end(vpointers, group_start);\n-    create_adjacent_memop_pairs_in_one_group(vpointers, group_start, group_end);\n+  while (group_start < memops.length()) {\n+    int group_end = find_group_end(memops, group_start);\n+    create_adjacent_memop_pairs_in_one_group(memops, group_start, group_end);\n@@ -534,2 +583,2 @@\n-\/\/ Step forward until we find a VPointer of another group, or we reach the end of the array.\n-int SuperWord::find_group_end(const GrowableArray<const VPointer*>& vpointers, int group_start) {\n+\/\/ Step forward until we find a MemOp of another group, or we reach the end of the array.\n+int SuperWord::find_group_end(const GrowableArray<MemOp>& memops, int group_start) {\n@@ -537,4 +586,4 @@\n-  while (group_end < vpointers.length() &&\n-         VPointer::cmp_for_sort_by_group(\n-           vpointers.adr_at(group_start),\n-           vpointers.adr_at(group_end)\n+  while (group_end < memops.length() &&\n+         MemOp::cmp_by_group(\n+           memops.adr_at(group_start),\n+           memops.adr_at(group_end)\n@@ -549,1 +598,1 @@\n-void SuperWord::create_adjacent_memop_pairs_in_one_group(const GrowableArray<const VPointer*>& vpointers, const int group_start, const int group_end) {\n+void SuperWord::create_adjacent_memop_pairs_in_one_group(const GrowableArray<MemOp>& memops, const int group_start, const int group_end) {\n@@ -554,1 +603,3 @@\n-      const VPointer* p = vpointers.at(i);\n+      const MemOp& memop = memops.at(i);\n+      tty->print(\"  \");\n+      memop.mem()->dump();\n@@ -556,1 +607,1 @@\n-      p->print();\n+      memop.vpointer().print_on(tty);\n@@ -561,2 +612,2 @@\n-  MemNode* first = vpointers.at(group_start)->mem();\n-  int element_size = data_size(first);\n+  MemNode* first = memops.at(group_start).mem();\n+  const int element_size = data_size(first);\n@@ -566,2 +617,2 @@\n-    const VPointer* p1 = vpointers.at(i);\n-    MemNode* mem1 = p1->mem();\n+    const VPointer& p1  = memops.at(i).vpointer();\n+    MemNode* mem1 = memops.at(i).mem();\n@@ -572,2 +623,2 @@\n-      const VPointer* p2 = vpointers.at(j);\n-      MemNode* mem2 = p2->mem();\n+      const VPointer& p2  = memops.at(j).vpointer();\n+      MemNode* mem2 = memops.at(j).mem();\n@@ -579,3 +630,3 @@\n-      assert(p1->offset_in_bytes() <= p2->offset_in_bytes(), \"must be sorted by offset\");\n-      if (p1->offset_in_bytes() + element_size > p2->offset_in_bytes()) { continue; }\n-      if (p1->offset_in_bytes() + element_size < p2->offset_in_bytes()) { break; }\n+      assert(p1.con() <= p2.con(), \"must be sorted by offset\");\n+      if (p1.con() + element_size > p2.con()) { continue; }\n+      if (p1.con() + element_size < p2.con()) { break; }\n@@ -596,1 +647,1 @@\n-        p1->print();\n+        p1.print_on(tty);\n@@ -598,1 +649,1 @@\n-        p2->print();\n+        p2.print_on(tty);\n@@ -726,2 +777,0 @@\n-  \/\/ Adjacent memory references must have the same base, be comparable\n-  \/\/ and have the correct distance between them.\n@@ -730,3 +779,1 @@\n-  if (p1.base() != p2.base() || !p1.comparable(p2)) return false;\n-  int diff = p2.offset_in_bytes() - p1.offset_in_bytes();\n-  return diff == data_size(s1);\n+  return p1.is_adjacent_to_and_before(p2);\n@@ -1435,1 +1482,2 @@\n-  AlignmentSolver solver(pack->at(0)->as_Mem(),\n+  AlignmentSolver solver(mem_ref_p,\n+                         pack->at(0)->as_Mem(),\n@@ -1437,5 +1485,0 @@\n-                         mem_ref_p.base(),\n-                         mem_ref_p.offset_in_bytes(),\n-                         mem_ref_p.invar(),\n-                         mem_ref_p.invar_factor(),\n-                         mem_ref_p.scale_in_bytes(),\n@@ -2614,1 +2657,1 @@\n-    VTransformVectorNode* vtn = vtnodes.at(i)->isa_Vector();\n+    VTransformMemVectorNode* vtn = vtnodes.at(i)->isa_MemVector();\n@@ -2616,2 +2659,1 @@\n-    MemNode* p0 = vtn->nodes().at(0)->isa_Mem();\n-    if (p0 == nullptr) { continue; }\n+    MemNode* p0 = vtn->nodes().at(0)->as_Mem();\n@@ -2663,2 +2705,2 @@\n-  const VPointer& align_to_ref_p = vpointer(align_to_ref);\n-  assert(align_to_ref_p.valid(), \"sanity\");\n+  const VPointer& p = vpointer(align_to_ref);\n+  assert(p.is_valid(), \"sanity\");\n@@ -2672,1 +2714,1 @@\n-  \/\/   adr = base + offset + invar + scale * iv                               (1)\n+  \/\/   adr = base + invar + iv_scale * iv + con                               (1)\n@@ -2689,2 +2731,2 @@\n-  \/\/   iv = new_limit = old_limit + adjust_pre_iter                           (3a, stride > 0)\n-  \/\/   iv = new_limit = old_limit - adjust_pre_iter                           (3b, stride < 0)\n+  \/\/   iv = new_limit = old_limit + adjust_pre_iter                           (3a, iv_stride > 0)\n+  \/\/   iv = new_limit = old_limit - adjust_pre_iter                           (3b, iv_stride < 0)\n@@ -2692,1 +2734,1 @@\n-  \/\/ We define boi as:\n+  \/\/ We define bic as:\n@@ -2694,1 +2736,1 @@\n-  \/\/   boi = base + offset + invar                                            (4)\n+  \/\/   bic = base + invar + con                                               (4)\n@@ -2698,3 +2740,3 @@\n-  \/\/   adr = boi + scale * new_limit\n-  \/\/   adr = boi + scale * (old_limit + adjust_pre_iter)                      (5a, stride > 0)\n-  \/\/   adr = boi + scale * (old_limit - adjust_pre_iter)                      (5b, stride < 0)\n+  \/\/   adr = bic + iv_scale * new_limit\n+  \/\/   adr = bic + iv_scale * (old_limit + adjust_pre_iter)                   (5a, iv_stride > 0)\n+  \/\/   adr = bic + iv_scale * (old_limit - adjust_pre_iter)                   (5b, iv_stride < 0)\n@@ -2704,2 +2746,2 @@\n-  \/\/   (boi + scale * (old_limit + adjust_pre_iter) % aw = 0                  (6a, stride > 0)\n-  \/\/   (boi + scale * (old_limit - adjust_pre_iter) % aw = 0                  (6b, stride < 0)\n+  \/\/   (bic + iv_scale * (old_limit + adjust_pre_iter) % aw = 0               (6a, iv_stride > 0)\n+  \/\/   (bic + iv_scale * (old_limit - adjust_pre_iter) % aw = 0               (6b, iv_stride < 0)\n@@ -2707,1 +2749,1 @@\n-  \/\/ In most cases, scale is the element size, for example:\n+  \/\/ In most cases, iv_scale is the element size, for example:\n@@ -2711,1 +2753,1 @@\n-  \/\/ It is thus reasonable to assume that both abs(scale) and abs(stride) are\n+  \/\/ It is thus reasonable to assume that both abs(iv_scale) and abs(iv_stride) are\n@@ -2716,2 +2758,2 @@\n-  \/\/ Further, if abs(scale) >= aw, then adjust_pre_iter has no effect on alignment, and\n-  \/\/ we are not able to affect the alignment at all. Hence, we require abs(scale) < aw.\n+  \/\/ Further, if abs(iv_scale) >= aw, then adjust_pre_iter has no effect on alignment, and\n+  \/\/ we are not able to affect the alignment at all. Hence, we require abs(iv_scale) < aw.\n@@ -2719,1 +2761,1 @@\n-  \/\/ Moreover, for alignment to be achievable, boi must be a multiple of scale. If strict\n+  \/\/ Moreover, for alignment to be achievable, bic must be a multiple of iv_scale. If strict\n@@ -2723,1 +2765,1 @@\n-  \/\/ In many cases boi will be a multiple of scale, but if it is not, then the adjustment\n+  \/\/ In many cases bic will be a multiple of iv_scale, but if it is not, then the adjustment\n@@ -2726,2 +2768,2 @@\n-  \/\/ Hence, in what follows we assume that boi is a multiple of scale, and in fact all\n-  \/\/ terms in (6) are multiples of scale. Therefore we divide all terms by scale:\n+  \/\/ Hence, in what follows we assume that bic is a multiple of iv_scale, and in fact all\n+  \/\/ terms in (6) are multiples of iv_scale. Therefore we divide all terms by iv_scale:\n@@ -2729,2 +2771,2 @@\n-  \/\/   AW = aw \/ abs(scale)            (power of 2)                           (7)\n-  \/\/   BOI = boi \/ abs(scale)                                                 (8)\n+  \/\/   AW = aw \/ abs(iv_scale)            (power of 2)                        (7)\n+  \/\/   BIC = bic \/ abs(iv_scale)                                              (8)\n@@ -2732,1 +2774,1 @@\n-  \/\/ and restate (6), using (7) and (8), i.e. we divide (6) by abs(scale):\n+  \/\/ and restate (6), using (7) and (8), i.e. we divide (6) by abs(iv_scale):\n@@ -2734,2 +2776,2 @@\n-  \/\/   (BOI + sign(scale) * (old_limit + adjust_pre_iter) % AW = 0           (9a, stride > 0)\n-  \/\/   (BOI + sign(scale) * (old_limit - adjust_pre_iter) % AW = 0           (9b, stride < 0)\n+  \/\/   (BIC + sign(iv_scale) * (old_limit + adjust_pre_iter) % AW = 0         (9a, iv_stride > 0)\n+  \/\/   (BIC + sign(iv_scale) * (old_limit - adjust_pre_iter) % AW = 0         (9b, iv_stride < 0)\n@@ -2737,1 +2779,1 @@\n-  \/\/   where: sign(scale) = scale \/ abs(scale) = (scale > 0 ? 1 : -1)\n+  \/\/   where: sign(iv_scale) = iv_scale \/ abs(iv_scale) = (iv_scale > 0 ? 1 : -1)\n@@ -2747,3 +2789,3 @@\n-  \/\/ Case A: scale > 0 && stride > 0 (i.e. sign(scale) =  1)\n-  \/\/   (BOI + old_limit + adjust_pre_iter) % AW = 0\n-  \/\/   adjust_pre_iter = (-BOI - old_limit) % AW                              (11a)\n+  \/\/ Case A: iv_scale > 0 && iv_stride > 0 (i.e. sign(iv_scale) =  1)\n+  \/\/   (BIC + old_limit + adjust_pre_iter) % AW = 0\n+  \/\/   adjust_pre_iter = (-BIC - old_limit) % AW                              (11a)\n@@ -2751,3 +2793,3 @@\n-  \/\/ Case B: scale < 0 && stride > 0 (i.e. sign(scale) = -1)\n-  \/\/   (BOI - old_limit - adjust_pre_iter) % AW = 0\n-  \/\/   adjust_pre_iter = (BOI - old_limit) % AW                               (11b)\n+  \/\/ Case B: iv_scale < 0 && iv_stride > 0 (i.e. sign(iv_scale) = -1)\n+  \/\/   (BIC - old_limit - adjust_pre_iter) % AW = 0\n+  \/\/   adjust_pre_iter = (BIC - old_limit) % AW                               (11b)\n@@ -2755,3 +2797,3 @@\n-  \/\/ Case C: scale > 0 && stride < 0 (i.e. sign(scale) =  1)\n-  \/\/   (BOI + old_limit - adjust_pre_iter) % AW = 0\n-  \/\/   adjust_pre_iter = (BOI + old_limit) % AW                               (11c)\n+  \/\/ Case C: iv_scale > 0 && iv_stride < 0 (i.e. sign(iv_scale) =  1)\n+  \/\/   (BIC + old_limit - adjust_pre_iter) % AW = 0\n+  \/\/   adjust_pre_iter = (BIC + old_limit) % AW                               (11c)\n@@ -2759,3 +2801,3 @@\n-  \/\/ Case D: scale < 0 && stride < 0 (i.e. sign(scale) = -1)\n-  \/\/   (BOI - old_limit + adjust_pre_iter) % AW = 0\n-  \/\/   adjust_pre_iter = (-BOI + old_limit) % AW                              (11d)\n+  \/\/ Case D: iv_scale < 0 && iv_stride < 0 (i.e. sign(iv_scale) = -1)\n+  \/\/   (BIC - old_limit + adjust_pre_iter) % AW = 0\n+  \/\/   adjust_pre_iter = (-BIC + old_limit) % AW                              (11d)\n@@ -2765,2 +2807,2 @@\n-  \/\/   OP:   (stride         > 0) ? SUB   : ADD\n-  \/\/   XBOI: (stride * scale > 0) ? -BOI  : BOI\n+  \/\/   OP:   (iv_stride            > 0) ?  SUB  : ADD\n+  \/\/   XBIC: (iv_stride * iv_scale > 0) ? -BIC  : BIC\n@@ -2770,1 +2812,1 @@\n-  \/\/   adjust_pre_iter = (XBOI OP old_limit) % AW                             (12)\n+  \/\/   adjust_pre_iter = (XBIC OP old_limit) % AW                             (12)\n@@ -2772,1 +2814,1 @@\n-  \/\/ We can construct XBOI by additionally defining:\n+  \/\/ We can construct XBIC by additionally defining:\n@@ -2774,1 +2816,1 @@\n-  \/\/   xboi = (stride * scale > 0) ? -boi              : boi                  (13)\n+  \/\/   xbic = (iv_stride * iv_scale > 0) ? -bic                 : bic         (13)\n@@ -2778,3 +2820,3 @@\n-  \/\/   XBOI = (stride * scale > 0) ? -BOI              : BOI\n-  \/\/        = (stride * scale > 0) ? -boi \/ abs(scale) : boi \/ abs(scale)\n-  \/\/        = xboi \/ abs(scale)                                               (14)\n+  \/\/   XBIC = (iv_stride * iv_scale > 0) ? -BIC                 : BIC\n+  \/\/        = (iv_stride * iv_scale > 0) ? -bic \/ abs(iv_scale) : bic \/ abs(iv_scale)\n+  \/\/        = xbic \/ abs(iv_scale)                                            (14)\n@@ -2789,1 +2831,1 @@\n-  \/\/                   = MIN(new_limit,                   orig_limit)         (15a, stride > 0)\n+  \/\/                   = MIN(new_limit,                   orig_limit)         (15a, iv_stride > 0)\n@@ -2791,1 +2833,1 @@\n-  \/\/                   = MAX(new_limit,                   orig_limit)         (15a, stride < 0)\n+  \/\/                   = MAX(new_limit,                   orig_limit)         (15a, iv_stride < 0)\n@@ -2793,5 +2835,4 @@\n-  const int stride   = iv_stride();\n-  const int scale    = align_to_ref_p.scale_in_bytes();\n-  const int offset   = align_to_ref_p.offset_in_bytes();\n-  Node* base         = align_to_ref_p.adr();\n-  Node* invar        = align_to_ref_p.invar();\n+  const int iv_stride = this->iv_stride();\n+  const int iv_scale  = p.iv_scale();\n+  const int con       = p.con();\n+  Node* base          = p.mem_pointer().base().object_or_native();\n@@ -2804,4 +2845,6 @@\n-    tty->print_cr(\"  aw:       %d\", aw);\n-    tty->print_cr(\"  stride:   %d\", stride);\n-    tty->print_cr(\"  scale:    %d\", scale);\n-    tty->print_cr(\"  offset:   %d\", offset);\n+    tty->print(\"  \");\n+    p.print_on(tty);\n+    tty->print_cr(\"  aw:        %d\", aw);\n+    tty->print_cr(\"  iv_stride: %d\", iv_stride);\n+    tty->print_cr(\"  iv_scale:  %d\", iv_scale);\n+    tty->print_cr(\"  con:       %d\", con);\n@@ -2810,2 +2853,2 @@\n-    if (invar == nullptr) {\n-      tty->print_cr(\"  invar:     null\");\n+    if (!p.has_invar_summands()) {\n+      tty->print_cr(\"  invar:     none\");\n@@ -2813,2 +2856,6 @@\n-      tty->print(\"  invar:\");\n-      invar->dump();\n+      tty->print_cr(\"  invar_summands:\");\n+      p.for_each_invar_summand([&] (const MemPointerSummand& s) {\n+        tty->print(\"   -> \");\n+        s.print_on(tty);\n+      });\n+      tty->cr();\n@@ -2823,3 +2870,3 @@\n-  if (stride == 0 || !is_power_of_2(abs(stride)) ||\n-      scale  == 0 || !is_power_of_2(abs(scale))  ||\n-      abs(scale) >= aw) {\n+  if (iv_stride == 0 || !is_power_of_2(abs(iv_stride)) ||\n+      iv_scale  == 0 || !is_power_of_2(abs(iv_scale))  ||\n+      abs(iv_scale) >= aw) {\n@@ -2829,1 +2876,1 @@\n-      tty->print_cr(\" stride or scale are not power of 2, or abs(scale) >= aw.\");\n+      tty->print_cr(\" iv_stride or iv_scale are not power of 2, or abs(iv_scale) >= aw.\");\n@@ -2836,3 +2883,3 @@\n-  assert(stride != 0 && is_power_of_2(abs(stride)) &&\n-         scale  != 0 && is_power_of_2(abs(scale))  &&\n-         abs(scale) < aw, \"otherwise we cannot affect alignment with pre-loop\");\n+  assert(iv_stride != 0 && is_power_of_2(abs(iv_stride)) &&\n+         iv_scale  != 0 && is_power_of_2(abs(iv_scale))  &&\n+         abs(iv_scale) < aw, \"otherwise we cannot affect alignment with pre-loop\");\n@@ -2840,1 +2887,1 @@\n-  const int AW = aw \/ abs(scale);\n+  const int AW = aw \/ abs(iv_scale);\n@@ -2844,1 +2891,1 @@\n-    tty->print_cr(\"  AW = aw(%d) \/ abs(scale(%d)) = %d\", aw, scale, AW);\n+    tty->print_cr(\"  AW = aw(%d) \/ abs(iv_scale(%d)) = %d\", aw, iv_scale, AW);\n@@ -2849,11 +2896,14 @@\n-  \/\/    xboi = -boi = (-base - offset - invar)         (stride * scale > 0)\n-  \/\/    xboi = +boi = (+base + offset + invar)         (stride * scale < 0)\n-  const bool is_sub = scale * stride > 0;\n-\n-  \/\/ 1.1: offset\n-  Node* xboi = igvn().intcon(is_sub ? -offset : offset);\n-  TRACE_ALIGN_VECTOR_NODE(xboi);\n-\n-  \/\/ 1.2: invar (if it exists)\n-  if (invar != nullptr) {\n-    if (igvn().type(invar)->isa_long()) {\n+  \/\/    xbic = -bic = (-base - invar - con)         (iv_stride * iv_scale > 0)\n+  \/\/    xbic = +bic = (+base + invar + con)         (iv_stride * iv_scale < 0)\n+  const bool is_sub = iv_scale * iv_stride > 0;\n+\n+  \/\/ 1.1: con\n+  Node* xbic = igvn().intcon(is_sub ? -con : con);\n+  TRACE_ALIGN_VECTOR_NODE(xbic);\n+\n+  \/\/ 1.2: invar = SUM(invar_summands)\n+  \/\/      We iteratively add \/ subtract all invar_summands, if there are any.\n+  p.for_each_invar_summand([&] (const MemPointerSummand& s) {\n+    Node* invar_variable = s.variable();\n+    jint  invar_scale    = s.scale().value();\n+    if (igvn().type(invar_variable)->isa_long()) {\n@@ -2863,4 +2913,8 @@\n-      invar = new ConvL2INode(invar);\n-      phase()->register_new_node(invar, pre_ctrl);\n-      TRACE_ALIGN_VECTOR_NODE(invar);\n-   }\n+      invar_variable = new ConvL2INode(invar_variable);\n+      phase()->register_new_node(invar_variable, pre_ctrl);\n+      TRACE_ALIGN_VECTOR_NODE(invar_variable);\n+    }\n+    Node* invar_scale_con = igvn().intcon(invar_scale);\n+    Node* invar_summand = new MulINode(invar_variable, invar_scale_con);\n+    phase()->register_new_node(invar_summand, pre_ctrl);\n+    TRACE_ALIGN_VECTOR_NODE(invar_summand);\n@@ -2868,1 +2922,1 @@\n-      xboi = new SubINode(xboi, invar);\n+      xbic = new SubINode(xbic, invar_summand);\n@@ -2870,1 +2924,1 @@\n-      xboi = new AddINode(xboi, invar);\n+      xbic = new AddINode(xbic, invar_summand);\n@@ -2872,3 +2926,3 @@\n-    phase()->register_new_node(xboi, pre_ctrl);\n-    TRACE_ALIGN_VECTOR_NODE(xboi);\n-  }\n+    phase()->register_new_node(xbic, pre_ctrl);\n+    TRACE_ALIGN_VECTOR_NODE(xbic);\n+  });\n@@ -2877,12 +2931,25 @@\n-  if (aw > ObjectAlignmentInBytes || align_to_ref_p.base()->is_top()) {\n-    \/\/ The base is only aligned with ObjectAlignmentInBytes with arrays.\n-    \/\/ When the base() is top, we have no alignment guarantee at all.\n-    \/\/ Hence, we must now take the base into account for the calculation.\n-    Node* xbase = new CastP2XNode(nullptr, base);\n-    phase()->register_new_node(xbase, pre_ctrl);\n-    TRACE_ALIGN_VECTOR_NODE(xbase);\n-#ifdef _LP64\n-    xbase  = new ConvL2INode(xbase);\n-    phase()->register_new_node(xbase, pre_ctrl);\n-    TRACE_ALIGN_VECTOR_NODE(xbase);\n-#endif\n+  bool is_base_native = p.mem_pointer().base().is_native();\n+  if (aw > ObjectAlignmentInBytes || is_base_native) {\n+    \/\/ For objects, the base is ObjectAlignmentInBytes aligned.\n+    \/\/ For native memory, we simply have a long that was cast to\n+    \/\/ a pointer via CastX2P, or if we parsed through the CastX2P\n+    \/\/ we only have a long. There is no alignment guarantee, and\n+    \/\/ we must always take the base into account for the calculation.\n+    \/\/\n+    \/\/ Computations are done % (vector width\/element size) so it's\n+    \/\/ safe to simply convert invar to an int and loose the upper 32\n+    \/\/ bit half. The base could be ptr, long or int. We cast all\n+    \/\/ to int.\n+    Node* xbase = base;\n+    if (igvn().type(xbase)->isa_ptr()) {\n+      \/\/ ptr -> int\/long\n+      xbase = new CastP2XNode(nullptr, xbase);\n+      phase()->register_new_node(xbase, pre_ctrl);\n+      TRACE_ALIGN_VECTOR_NODE(xbase);\n+    }\n+    if (igvn().type(xbase)->isa_long()) {\n+      \/\/ long -> int\n+      xbase  = new ConvL2INode(xbase);\n+      phase()->register_new_node(xbase, pre_ctrl);\n+      TRACE_ALIGN_VECTOR_NODE(xbase);\n+    }\n@@ -2890,1 +2957,1 @@\n-      xboi = new SubINode(xboi, xbase);\n+      xbic = new SubINode(xbic, xbase);\n@@ -2892,1 +2959,1 @@\n-      xboi = new AddINode(xboi, xbase);\n+      xbic = new AddINode(xbic, xbase);\n@@ -2894,2 +2961,2 @@\n-    phase()->register_new_node(xboi, pre_ctrl);\n-    TRACE_ALIGN_VECTOR_NODE(xboi);\n+    phase()->register_new_node(xbic, pre_ctrl);\n+    TRACE_ALIGN_VECTOR_NODE(xbic);\n@@ -2899,1 +2966,1 @@\n-  \/\/    XBOI = xboi \/ abs(scale)\n+  \/\/    XBIC = xbic \/ abs(iv_scale)\n@@ -2901,5 +2968,5 @@\n-  Node* log2_abs_scale = igvn().intcon(exact_log2(abs(scale)));\n-  Node* XBOI = new URShiftINode(xboi, log2_abs_scale);\n-  phase()->register_new_node(XBOI, pre_ctrl);\n-  TRACE_ALIGN_VECTOR_NODE(log2_abs_scale);\n-  TRACE_ALIGN_VECTOR_NODE(XBOI);\n+  Node* log2_abs_iv_scale = igvn().intcon(exact_log2(abs(iv_scale)));\n+  Node* XBIC = new URShiftINode(xbic, log2_abs_iv_scale);\n+  phase()->register_new_node(XBIC, pre_ctrl);\n+  TRACE_ALIGN_VECTOR_NODE(log2_abs_iv_scale);\n+  TRACE_ALIGN_VECTOR_NODE(XBIC);\n@@ -2908,1 +2975,1 @@\n-  \/\/    adjust_pre_iter = (XBOI OP old_limit) % AW\n+  \/\/    adjust_pre_iter = (XBIC OP old_limit) % AW\n@@ -2910,4 +2977,4 @@\n-  \/\/ 3.1: XBOI_OP_old_limit = XBOI OP old_limit\n-  Node* XBOI_OP_old_limit = nullptr;\n-  if (stride > 0) {\n-    XBOI_OP_old_limit = new SubINode(XBOI, old_limit);\n+  \/\/ 3.1: XBIC_OP_old_limit = XBIC OP old_limit\n+  Node* XBIC_OP_old_limit = nullptr;\n+  if (iv_stride > 0) {\n+    XBIC_OP_old_limit = new SubINode(XBIC, old_limit);\n@@ -2915,1 +2982,1 @@\n-    XBOI_OP_old_limit = new AddINode(XBOI, old_limit);\n+    XBIC_OP_old_limit = new AddINode(XBIC, old_limit);\n@@ -2917,2 +2984,2 @@\n-  phase()->register_new_node(XBOI_OP_old_limit, pre_ctrl);\n-  TRACE_ALIGN_VECTOR_NODE(XBOI_OP_old_limit);\n+  phase()->register_new_node(XBIC_OP_old_limit, pre_ctrl);\n+  TRACE_ALIGN_VECTOR_NODE(XBIC_OP_old_limit);\n@@ -2921,3 +2988,3 @@\n-  \/\/    adjust_pre_iter = (XBOI OP old_limit) % AW\n-  \/\/                    = XBOI_OP_old_limit % AW\n-  \/\/                    = XBOI_OP_old_limit AND (AW - 1)\n+  \/\/    adjust_pre_iter = (XBIC OP old_limit) % AW\n+  \/\/                    = XBIC_OP_old_limit % AW\n+  \/\/                    = XBIC_OP_old_limit AND (AW - 1)\n@@ -2927,1 +2994,1 @@\n-  Node* adjust_pre_iter = new AndINode(XBOI_OP_old_limit, mask_AW);\n+  Node* adjust_pre_iter = new AndINode(XBIC_OP_old_limit, mask_AW);\n@@ -2940,2 +3007,2 @@\n-  \/\/    pre-loop limit can only be increased (for stride > 0), but an add\n-  \/\/    overflow might decrease it, or decreased (for stride < 0), but a sub\n+  \/\/    pre-loop limit can only be increased (for iv_stride > 0), but an add\n+  \/\/    overflow might decrease it, or decreased (for iv_stride < 0), but a sub\n@@ -2955,2 +3022,2 @@\n-  \/\/    new_limit = old_limit + adjust_pre_iter     (stride > 0)\n-  \/\/    new_limit = old_limit - adjust_pre_iter     (stride < 0)\n+  \/\/    new_limit = old_limit + adjust_pre_iter     (iv_stride > 0)\n+  \/\/    new_limit = old_limit - adjust_pre_iter     (iv_stride < 0)\n@@ -2959,1 +3026,1 @@\n-  if (stride < 0) {\n+  if (iv_stride < 0) {\n@@ -2970,2 +3037,2 @@\n-    (stride > 0) ? (Node*) new MinLNode(phase()->C, new_limit, orig_limit)\n-                 : (Node*) new MaxLNode(phase()->C, new_limit, orig_limit);\n+    (iv_stride > 0) ? (Node*) new MinLNode(phase()->C, new_limit, orig_limit)\n+                    : (Node*) new MaxLNode(phase()->C, new_limit, orig_limit);\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":293,"deletions":226,"binary":false,"changes":519,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,0 @@\n-class VPointer;\n-\n@@ -477,1 +475,1 @@\n-  int data_size(Node* n) const {\n+  int data_size(const Node* n) const {\n@@ -566,0 +564,32 @@\n+  class MemOp : public StackObj {\n+  private:\n+    MemNode* _mem;\n+    const VPointer* _vpointer;\n+    int _original_index;\n+\n+  public:\n+    \/\/ Empty, for GrowableArray\n+    MemOp() :\n+      _mem(nullptr),\n+      _vpointer(nullptr),\n+      _original_index(-1) {}\n+    MemOp(MemNode* mem, const VPointer* vpointer, int original_index) :\n+      _mem(mem),\n+      _vpointer(vpointer),\n+      _original_index(original_index) {}\n+\n+    MemNode* mem() const { return _mem; }\n+    const VPointer& vpointer() const { return *_vpointer; }\n+    int original_index() const { return _original_index; }\n+\n+    static int cmp_by_group(MemOp* a, MemOp* b);\n+    static int cmp_by_group_and_con_and_original_index(MemOp* a, MemOp* b);\n+\n+    \/\/ We use two comparisons, because a subtraction could underflow.\n+    template <typename T>\n+    static int cmp_code(T a, T b) {\n+      if (a < b) { return -1; }\n+      if (a > b) { return  1; }\n+      return 0;\n+    }\n+  };\n@@ -567,4 +597,4 @@\n-  void collect_valid_vpointers(GrowableArray<const VPointer*>& vpointers);\n-  void create_adjacent_memop_pairs_in_all_groups(const GrowableArray<const VPointer*>& vpointers);\n-  static int find_group_end(const GrowableArray<const VPointer*>& vpointers, int group_start);\n-  void create_adjacent_memop_pairs_in_one_group(const GrowableArray<const VPointer*>& vpointers, const int group_start, int group_end);\n+  void collect_valid_memops(GrowableArray<MemOp>& memops) const;\n+  void create_adjacent_memop_pairs_in_all_groups(const GrowableArray<MemOp>& memops);\n+  static int find_group_end(const GrowableArray<MemOp>& memops, int group_start);\n+  void create_adjacent_memop_pairs_in_one_group(const GrowableArray<MemOp>& memops, const int group_start, int group_end);\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":38,"deletions":8,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -142,1 +141,3 @@\n-    vtn = new (_vtransform.arena()) VTransformLoadVectorNode(_vtransform, pack_size);\n+    const VPointer& scalar_p = _vloop_analyzer.vpointers().vpointer(p0->as_Load());\n+    const VPointer vector_p(scalar_p.make_with_size(scalar_p.size() * pack_size));\n+    vtn = new (_vtransform.arena()) VTransformLoadVectorNode(_vtransform, pack_size, vector_p);\n@@ -144,1 +145,3 @@\n-    vtn = new (_vtransform.arena()) VTransformStoreVectorNode(_vtransform, pack_size);\n+    const VPointer& scalar_p = _vloop_analyzer.vpointers().vpointer(p0->as_Store());\n+    const VPointer vector_p(scalar_p.make_with_size(scalar_p.size() * pack_size));\n+    vtn = new (_vtransform.arena()) VTransformStoreVectorNode(_vtransform, pack_size, vector_p);\n@@ -314,1 +317,0 @@\n-\n","filename":"src\/hotspot\/share\/opto\/superwordVTransformBuilder.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,4 @@\n-  flags(POINTER_ANALYSIS,     \"Trace VPointer (verbose)\") \\\n+  flags(POINTER_PARSING,      \"Trace VPointer\/MemPointer parsing\") \\\n+  flags(POINTER_ALIASING,     \"Trace VPointer\/MemPointer aliasing\") \\\n+  flags(POINTER_ADJACENCY,    \"Trace VPointer\/MemPointer adjacency\") \\\n+  flags(POINTER_OVERLAP,      \"Trace VPointer\/MemPointer overlap\") \\\n","filename":"src\/hotspot\/share\/opto\/traceAutoVectorizationTag.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,3 @@\n-    flags(POINTER,              \"Trace pointer IR\") \\\n-    flags(ALIASING,             \"Trace MemPointerSimpleForm::get_aliasing_with\") \\\n-    flags(ADJACENCY,            \"Trace adjacency\") \\\n+    flags(POINTER_PARSING,      \"Trace pointer IR\") \\\n+    flags(POINTER_ALIASING,     \"Trace MemPointerSimpleForm::get_aliasing_with\") \\\n+    flags(POINTER_ADJACENCY,    \"Trace adjacency\") \\\n","filename":"src\/hotspot\/share\/opto\/traceMergeStoresTag.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -33,13 +32,0 @@\n-#ifndef PRODUCT\n-void VPointer::print_con_or_idx(const Node* n) {\n-  if (n == nullptr) {\n-    tty->print(\"(   0)\");\n-  } else if (n->is_ConI()) {\n-    jint val = n->as_ConI()->get_int();\n-    tty->print(\"(%4d)\", val);\n-  } else {\n-    tty->print(\"[%4d]\", n->_idx);\n-  }\n-}\n-#endif\n-\n@@ -227,1 +213,1 @@\n-    p.print();\n+    p.print_on(tty);\n@@ -268,1 +254,1 @@\n-        if (!VPointer::not_equal(p1.cmp(p2))) {\n+        if (!p1.never_overlaps_with(p2)) {\n@@ -409,951 +395,2 @@\n-int VPointer::Tracer::_depth = 0;\n-#endif\n-\n-VPointer::VPointer(MemNode* const mem, const VLoop& vloop,\n-                   Node_Stack* nstack, bool analyze_only) :\n-  _mem(mem), _vloop(vloop),\n-  _base(nullptr), _adr(nullptr), _scale(0), _offset(0), _invar(nullptr),\n-#ifdef ASSERT\n-  _debug_invar(nullptr), _debug_negate_invar(false), _debug_invar_scale(nullptr),\n-#endif\n-  _has_int_index_after_convI2L(false),\n-  _int_index_after_convI2L_offset(0),\n-  _int_index_after_convI2L_invar(nullptr),\n-  _int_index_after_convI2L_scale(0),\n-  _nstack(nstack), _analyze_only(analyze_only), _stack_idx(0)\n-#ifndef PRODUCT\n-  , _tracer(vloop.is_trace_pointer_analysis())\n-#endif\n-{\n-  NOT_PRODUCT(_tracer.ctor_1(mem);)\n-\n-  Node* adr = mem->in(MemNode::Address);\n-  if (!adr->is_AddP()) {\n-    assert(!valid(), \"too complex\");\n-    return;\n-  }\n-  \/\/ Match AddP(base, AddP(ptr, k*iv [+ invariant]), constant)\n-  Node* base = adr->in(AddPNode::Base);\n-  \/\/ The base address should be loop invariant\n-  if (is_loop_member(base)) {\n-    assert(!valid(), \"base address is loop variant\");\n-    return;\n-  }\n-  \/\/ unsafe references require misaligned vector access support\n-  if (base->is_top() && !Matcher::misaligned_vectors_ok()) {\n-    assert(!valid(), \"unsafe access\");\n-    return;\n-  }\n-\n-  NOT_PRODUCT(if(_tracer._is_trace_alignment) _tracer.store_depth();)\n-  NOT_PRODUCT(_tracer.ctor_2(adr);)\n-\n-  int i;\n-  for (i = 0; ; i++) {\n-    NOT_PRODUCT(_tracer.ctor_3(adr, i);)\n-\n-    if (!scaled_iv_plus_offset(adr->in(AddPNode::Offset))) {\n-      assert(!valid(), \"too complex\");\n-      return;\n-    }\n-    adr = adr->in(AddPNode::Address);\n-    NOT_PRODUCT(_tracer.ctor_4(adr, i);)\n-\n-    if (base == adr || !adr->is_AddP()) {\n-      NOT_PRODUCT(_tracer.ctor_5(adr, base, i);)\n-      break; \/\/ stop looking at addp's\n-    }\n-  }\n-  if (!invariant(adr)) {\n-    \/\/ The address must be invariant for the current loop. But if we are in a main-loop,\n-    \/\/ it must also be invariant of the pre-loop, otherwise we cannot use this address\n-    \/\/ for the pre-loop limit adjustment required for main-loop alignment.\n-    assert(!valid(), \"adr is loop variant\");\n-    return;\n-  }\n-\n-  if (!base->is_top() && adr != base) {\n-    assert(!valid(), \"adr and base differ\");\n-    return;\n-  }\n-\n-  NOT_PRODUCT(if(_tracer._is_trace_alignment) _tracer.restore_depth();)\n-  NOT_PRODUCT(_tracer.ctor_6(mem);)\n-\n-  \/\/ In the pointer analysis, and especially the AlignVector, analysis we assume that\n-  \/\/ stride and scale are not too large. For example, we multiply \"scale * stride\",\n-  \/\/ and assume that this does not overflow the int range. We also take \"abs(scale)\"\n-  \/\/ and \"abs(stride)\", which would overflow for min_int = -(2^31). Still, we want\n-  \/\/ to at least allow small and moderately large stride and scale. Therefore, we\n-  \/\/ allow values up to 2^30, which is only a factor 2 smaller than the max\/min int.\n-  \/\/ Normal performance relevant code will have much lower values. And the restriction\n-  \/\/ allows us to keep the rest of the autovectorization code much simpler, since we\n-  \/\/ do not have to deal with overflows.\n-  jlong long_scale  = _scale;\n-  jlong long_stride = _vloop.iv_stride();\n-  jlong max_val = 1 << 30;\n-  if (abs(long_scale) >= max_val ||\n-      abs(long_stride) >= max_val ||\n-      abs(long_scale * long_stride) >= max_val) {\n-    assert(!valid(), \"adr stride*scale is too large\");\n-    return;\n-  }\n-\n-  if (!is_safe_to_use_as_simple_form(base, adr)) {\n-    assert(!valid(), \"does not have simple form\");\n-    return;\n-  }\n-\n-  _base = base;\n-  _adr  = adr;\n-  assert(valid(), \"Usable\");\n-}\n-\n-\/\/ Following is used to create a temporary object during\n-\/\/ the pattern match of an address expression.\n-VPointer::VPointer(VPointer* p) :\n-  _mem(p->_mem), _vloop(p->_vloop),\n-  _base(nullptr), _adr(nullptr), _scale(0), _offset(0), _invar(nullptr),\n-#ifdef ASSERT\n-  _debug_invar(nullptr), _debug_negate_invar(false), _debug_invar_scale(nullptr),\n-#endif\n-  _has_int_index_after_convI2L(false),\n-  _int_index_after_convI2L_offset(0),\n-  _int_index_after_convI2L_invar(nullptr),\n-  _int_index_after_convI2L_scale(0),\n-  _nstack(p->_nstack), _analyze_only(p->_analyze_only), _stack_idx(p->_stack_idx)\n-#ifndef PRODUCT\n-  , _tracer(p->_tracer._is_trace_alignment)\n-#endif\n-{}\n-\n-\/\/ Biggest detectable factor of the invariant.\n-int VPointer::invar_factor() const {\n-  Node* n = invar();\n-  if (n == nullptr) {\n-    return 0;\n-  }\n-  int opc = n->Opcode();\n-  if (opc == Op_LShiftI && n->in(2)->is_Con()) {\n-    return 1 << n->in(2)->get_int();\n-  } else if (opc == Op_LShiftL && n->in(2)->is_Con()) {\n-    return 1 << n->in(2)->get_int();\n-  }\n-  \/\/ All our best-effort has failed.\n-  return 1;\n-}\n-\n-\/\/ We would like to make decisions about aliasing (i.e. removing memory edges) and adjacency\n-\/\/ (i.e. which loads\/stores can be packed) based on the simple form:\n-\/\/\n-\/\/   s_pointer = adr + offset + invar + scale * ConvI2L(iv)\n-\/\/\n-\/\/ However, we parse the compound-long-int form:\n-\/\/\n-\/\/   c_pointer = adr + long_offset + long_invar + long_scale * ConvI2L(int_index)\n-\/\/   int_index =       int_offset  + int_invar  + int_scale  * iv\n-\/\/\n-\/\/ In general, the simple and the compound-long-int form do not always compute the same pointer\n-\/\/ at runtime. For example, the simple form would give a different result due to an overflow\n-\/\/ in the int_index.\n-\/\/\n-\/\/ Example:\n-\/\/   For both forms, we have:\n-\/\/     iv = 0\n-\/\/     scale = 1\n-\/\/\n-\/\/   We now account the offset and invar once to the long part and once to the int part:\n-\/\/     Pointer 1 (long offset and long invar):\n-\/\/       long_offset = min_int\n-\/\/       long_invar  = min_int\n-\/\/       int_offset  = 0\n-\/\/       int_invar   = 0\n-\/\/\n-\/\/     Pointer 2 (int offset and int invar):\n-\/\/       long_offset = 0\n-\/\/       long_invar  = 0\n-\/\/       int_offset  = min_int\n-\/\/       int_invar   = min_int\n-\/\/\n-\/\/   This gives us the following pointers:\n-\/\/     Compound-long-int form pointers:\n-\/\/       Form:\n-\/\/         c_pointer   = adr + long_offset + long_invar + long_scale * ConvI2L(int_offset + int_invar + int_scale * iv)\n-\/\/\n-\/\/       Pointers:\n-\/\/         c_pointer1  = adr + min_int     + min_int    + 1          * ConvI2L(0          + 0         + 1         * 0)\n-\/\/                     = adr + min_int + min_int\n-\/\/                     = adr - 2^32\n-\/\/\n-\/\/         c_pointer2  = adr + 0           + 0          + 1          * ConvI2L(min_int    + min_int   + 1         * 0)\n-\/\/                     = adr + ConvI2L(min_int + min_int)\n-\/\/                     = adr + 0\n-\/\/                     = adr\n-\/\/\n-\/\/     Simple form pointers:\n-\/\/       Form:\n-\/\/         s_pointer  = adr + offset                     + invar                     + scale                    * ConvI2L(iv)\n-\/\/         s_pointer  = adr + (long_offset + int_offset) + (long_invar  + int_invar) + (long_scale * int_scale) * ConvI2L(iv)\n-\/\/\n-\/\/       Pointers:\n-\/\/         s_pointer1 = adr + (min_int     + 0         ) + (min_int     + 0        ) + 1                        * 0\n-\/\/                    = adr + min_int + min_int\n-\/\/                    = adr - 2^32\n-\/\/         s_pointer2 = adr + (0           + min_int   ) + (0           + min_int  ) + 1                        * 0\n-\/\/                    = adr + min_int + min_int\n-\/\/                    = adr - 2^32\n-\/\/\n-\/\/   We see that the two addresses are actually 2^32 bytes apart (derived from the c_pointers), but their simple form look identical.\n-\/\/\n-\/\/ Hence, we need to determine in which cases it is safe to make decisions based on the simple\n-\/\/ form, rather than the compound-long-int form. If we cannot prove that using the simple form\n-\/\/ is safe (i.e. equivalent to the compound-long-int form), then we do not get a valid VPointer,\n-\/\/ and the associated memop cannot be vectorized.\n-bool VPointer::is_safe_to_use_as_simple_form(Node* base, Node* adr) const {\n-#ifndef _LP64\n-  \/\/ On 32-bit platforms, there is never an explicit int_index with ConvI2L for the iv. Thus, the\n-  \/\/ parsed pointer form is always the simple form, with int operations:\n-  \/\/\n-  \/\/   pointer = adr + offset + invar + scale * iv\n-  \/\/\n-  assert(!_has_int_index_after_convI2L, \"32-bit never has an int_index with ConvI2L for the iv\");\n-  return true;\n-#else\n-\n-  \/\/ Array accesses that are not Unsafe always have a RangeCheck which ensures that there is no\n-  \/\/ int_index overflow. This implies that the conversion to long can be done separately:\n-  \/\/\n-  \/\/   ConvI2L(int_index) = ConvI2L(int_offset) + ConvI2L(int_invar) + ConvI2L(scale) * ConvI2L(iv)\n-  \/\/\n-  \/\/ And hence, the simple form is guaranteed to be identical to the compound-long-int form at\n-  \/\/ runtime and the VPointer is safe\/valid to be used.\n-  const TypeAryPtr* ary_ptr_t = _mem->adr_type()->isa_aryptr();\n-  if (ary_ptr_t != nullptr) {\n-    if (!_mem->is_unsafe_access()) {\n-      return true;\n-    }\n-  }\n-\n-  \/\/ We did not find the int_index. Just to be safe, reject this VPointer.\n-  if (!_has_int_index_after_convI2L) {\n-    return false;\n-  }\n-\n-  int int_offset  = _int_index_after_convI2L_offset;\n-  Node* int_invar = _int_index_after_convI2L_invar;\n-  int int_scale   = _int_index_after_convI2L_scale;\n-  int long_scale  = _scale \/ int_scale;\n-\n-  \/\/ If \"int_index = iv\", then the simple form is identical to the compound-long-int form.\n-  \/\/\n-  \/\/   int_index = int_offset + int_invar + int_scale * iv\n-  \/\/             = 0            0           1         * iv\n-  \/\/             =                                      iv\n-  if (int_offset == 0 && int_invar == nullptr && int_scale == 1) {\n-    return true;\n-  }\n-\n-  \/\/ Intuition: What happens if the int_index overflows? Let us look at two pointers on the \"overflow edge\":\n-  \/\/\n-  \/\/              pointer1 = adr + ConvI2L(int_index1)\n-  \/\/              pointer2 = adr + ConvI2L(int_index2)\n-  \/\/\n-  \/\/              int_index1 = max_int + 0 = max_int  -> very close to but before the overflow\n-  \/\/              int_index2 = max_int + 1 = min_int  -> just enough to get the overflow\n-  \/\/\n-  \/\/            When looking at the difference of pointer1 and pointer2, we notice that it is very large\n-  \/\/            (almost 2^32). Since arrays have at most 2^31 elements, chances are high that pointer2 is\n-  \/\/            an actual out-of-bounds access at runtime. These would normally be prevented by range checks\n-  \/\/            at runtime. However, if the access was done by using Unsafe, where range checks are omitted,\n-  \/\/            then an out-of-bounds access constitutes undefined behavior. This means that we are allowed to\n-  \/\/            do anything, including changing the behavior.\n-  \/\/\n-  \/\/            If we can set the right conditions, we have a guarantee that an overflow is either impossible\n-  \/\/            (no overflow or range checks preventing that) or undefined behavior. In both cases, we are\n-  \/\/            safe to do a vectorization.\n-  \/\/\n-  \/\/ Approach:  We want to prove a lower bound for the distance between these two pointers, and an\n-  \/\/            upper bound for the size of a memory object. We can derive such an upper bound for\n-  \/\/            arrays. We know they have at most 2^31 elements. If we know the size of the elements\n-  \/\/            in bytes, we have:\n-  \/\/\n-  \/\/              array_element_size_in_bytes * 2^31 >= max_possible_array_size_in_bytes\n-  \/\/                                                 >= array_size_in_bytes                      (ARR)\n-  \/\/\n-  \/\/            If some small difference \"delta\" leads to an int_index overflow, we know that the\n-  \/\/            int_index1 before overflow must have been close to max_int, and the int_index2 after\n-  \/\/            the overflow must be close to min_int:\n-  \/\/\n-  \/\/              pointer1 =        adr + long_offset + long_invar + long_scale * ConvI2L(int_index1)\n-  \/\/                       =approx  adr + long_offset + long_invar + long_scale * max_int\n-  \/\/\n-  \/\/              pointer2 =        adr + long_offset + long_invar + long_scale * ConvI2L(int_index2)\n-  \/\/                       =approx  adr + long_offset + long_invar + long_scale * min_int\n-  \/\/\n-  \/\/            We realize that the pointer difference is very large:\n-  \/\/\n-  \/\/              difference =approx  long_scale * 2^32\n-  \/\/\n-  \/\/            Hence, if we set the right condition for long_scale and array_element_size_in_bytes,\n-  \/\/            we can prove that an overflow is impossible (or would imply undefined behaviour).\n-  \/\/\n-  \/\/ We must now take this intuition, and develop a rigorous proof. We start by stating the problem\n-  \/\/ more precisely, with the help of some definitions and the Statement we are going to prove.\n-  \/\/\n-  \/\/ Definition:\n-  \/\/   Two VPointers are \"comparable\" (i.e. VPointer::comparable is true, set with VPointer::cmp()),\n-  \/\/   iff all of these conditions apply for the simple form:\n-  \/\/     1) Both VPointers are valid.\n-  \/\/     2) The adr are identical, or both are array bases of different arrays.\n-  \/\/     3) They have identical scale.\n-  \/\/     4) They have identical invar.\n-  \/\/     5) The difference in offsets is limited: abs(offset1 - offset2) < 2^31.                 (DIFF)\n-  \/\/\n-  \/\/ For the Vectorization Optimization, we pair-wise compare VPointers and determine if they are:\n-  \/\/   1) \"not comparable\":\n-  \/\/        We do not optimize them (assume they alias, not assume adjacency).\n-  \/\/\n-  \/\/        Whenever we chose this option based on the simple form, it is also correct based on the\n-  \/\/        compound-long-int form, since we make no optimizations based on it.\n-  \/\/\n-  \/\/   2) \"comparable\" with different array bases at runtime:\n-  \/\/        We assume they do not alias (remove memory edges), but not assume adjacency.\n-  \/\/\n-  \/\/        Whenever we have two different array bases for the simple form, we also have different\n-  \/\/        array bases for the compound-long-form. Since VPointers provably point to different\n-  \/\/        memory objects, they can never alias.\n-  \/\/\n-  \/\/   3) \"comparable\" with the same base address:\n-  \/\/        We compute the relative pointer difference, and based on the load\/store size we can\n-  \/\/        compute aliasing and adjacency.\n-  \/\/\n-  \/\/        We must find a condition under which the pointer difference of the simple form is\n-  \/\/        identical to the pointer difference of the compound-long-form. We do this with the\n-  \/\/        Statement below, which we then proceed to prove.\n-  \/\/\n-  \/\/ Statement:\n-  \/\/   If two VPointers satisfy these 3 conditions:\n-  \/\/     1) They are \"comparable\".\n-  \/\/     2) They have the same base address.\n-  \/\/     3) Their long_scale is a multiple of the array element size in bytes:\n-  \/\/\n-  \/\/          abs(long_scale) % array_element_size_in_bytes = 0                                     (A)\n-  \/\/\n-  \/\/   Then their pointer difference of the simple form is identical to the pointer difference\n-  \/\/   of the compound-long-int form.\n-  \/\/\n-  \/\/   More precisely:\n-  \/\/     Such two VPointers by definition have identical adr, invar, and scale.\n-  \/\/     Their simple form is:\n-  \/\/\n-  \/\/       s_pointer1 = adr + offset1 + invar + scale * ConvI2L(iv)                                 (B1)\n-  \/\/       s_pointer2 = adr + offset2 + invar + scale * ConvI2L(iv)                                 (B2)\n-  \/\/\n-  \/\/     Thus, the pointer difference of the simple forms collapses to the difference in offsets:\n-  \/\/\n-  \/\/       s_difference = s_pointer1 - s_pointer2 = offset1 - offset2                               (C)\n-  \/\/\n-  \/\/     Their compound-long-int form for these VPointer is:\n-  \/\/\n-  \/\/       c_pointer1 = adr + long_offset1 + long_invar1 + long_scale1 * ConvI2L(int_index1)        (D1)\n-  \/\/       int_index1 = int_offset1 + int_invar1 + int_scale1 * iv                                  (D2)\n-  \/\/\n-  \/\/       c_pointer2 = adr + long_offset2 + long_invar2 + long_scale2 * ConvI2L(int_index2)        (D3)\n-  \/\/       int_index2 = int_offset2 + int_invar2 + int_scale2 * iv                                  (D4)\n-  \/\/\n-  \/\/     And these are the offset1, offset2, invar and scale from the simple form (B1) and (B2):\n-  \/\/\n-  \/\/       offset1 = long_offset1 + long_scale1 * ConvI2L(int_offset1)                              (D5)\n-  \/\/       offset2 = long_offset2 + long_scale2 * ConvI2L(int_offset2)                              (D6)\n-  \/\/\n-  \/\/       invar   = long_invar1 + long_scale1 * ConvI2L(int_invar1)\n-  \/\/               = long_invar2 + long_scale2 * ConvI2L(int_invar2)                                (D7)\n-  \/\/\n-  \/\/       scale   = long_scale1 * ConvI2L(int_scale1)\n-  \/\/               = long_scale2 * ConvI2L(int_scale2)                                              (D8)\n-  \/\/\n-  \/\/     The pointer difference of the compound-long-int form is defined as:\n-  \/\/\n-  \/\/       c_difference = c_pointer1 - c_pointer2\n-  \/\/\n-  \/\/   Thus, the statement claims that for the two VPointer we have:\n-  \/\/\n-  \/\/     s_difference = c_difference                                                                (Statement)\n-  \/\/\n-  \/\/ We prove the Statement with the help of a Lemma:\n-  \/\/\n-  \/\/ Lemma:\n-  \/\/   There is some integer x, such that:\n-  \/\/\n-  \/\/     c_difference = s_difference + array_element_size_in_bytes * x * 2^32                       (Lemma)\n-  \/\/\n-  \/\/ From condition (DIFF), we can derive:\n-  \/\/\n-  \/\/   abs(s_difference) < 2^31                                                                     (E)\n-  \/\/\n-  \/\/ Assuming the Lemma, we prove the Statement:\n-  \/\/   If \"x = 0\" (intuitively: the int_index does not overflow), then:\n-  \/\/     c_difference = s_difference\n-  \/\/     and hence the simple form computes the same pointer difference as the compound-long-int form.\n-  \/\/   If \"x != 0\" (intuitively: the int_index overflows), then:\n-  \/\/     abs(c_difference) >= abs(s_difference + array_element_size_in_bytes * x * 2^32)\n-  \/\/                       >= array_element_size_in_bytes * 2^32 - abs(s_difference)\n-  \/\/                                                               --  apply (E)  --\n-  \/\/                       >  array_element_size_in_bytes * 2^32 - 2^31\n-  \/\/                       >= array_element_size_in_bytes * 2^31\n-  \/\/                              --  apply (ARR)  --\n-  \/\/                       >= max_possible_array_size_in_bytes\n-  \/\/                       >= array_size_in_bytes\n-  \/\/\n-  \/\/     This shows that c_pointer1 and c_pointer2 have a distance that exceeds the maximum array size.\n-  \/\/     Thus, at least one of the two pointers must be outside of the array bounds. But we can assume\n-  \/\/     that out-of-bounds accesses do not happen. If they still do, it is undefined behavior. Hence,\n-  \/\/     we are allowed to do anything. We can also \"safely\" use the simple form in this case even though\n-  \/\/     it might not match the compound-long-int form at runtime.\n-  \/\/ QED Statement.\n-  \/\/\n-  \/\/ We must now prove the Lemma.\n-  \/\/\n-  \/\/ ConvI2L always truncates by some power of 2^32, i.e. there is some integer y such that:\n-  \/\/\n-  \/\/   ConvI2L(y1 + y2) = ConvI2L(y1) + ConvI2L(y2) + 2^32 * y                                  (F)\n-  \/\/\n-  \/\/ It follows, that there is an integer y1 such that:\n-  \/\/\n-  \/\/   ConvI2L(int_index1) =  ConvI2L(int_offset1 + int_invar1 + int_scale1 * iv)\n-  \/\/                          -- apply (F) --\n-  \/\/                       =  ConvI2L(int_offset1)\n-  \/\/                        + ConvI2L(int_invar1)\n-  \/\/                        + ConvI2L(int_scale1) * ConvI2L(iv)\n-  \/\/                        + y1 * 2^32                                                         (G)\n-  \/\/\n-  \/\/ Thus, we can write the compound-long-int form (D1) as:\n-  \/\/\n-  \/\/   c_pointer1 =   adr + long_offset1 + long_invar1 + long_scale1 * ConvI2L(int_index1)\n-  \/\/                  -- apply (G) --\n-  \/\/              =   adr\n-  \/\/                + long_offset1\n-  \/\/                + long_invar1\n-  \/\/                + long_scale1 * ConvI2L(int_offset1)\n-  \/\/                + long_scale1 * ConvI2L(int_invar1)\n-  \/\/                + long_scale1 * ConvI2L(int_scale1) * ConvI2L(iv)\n-  \/\/                + long_scale1 * y1 * 2^32                                                    (H)\n-  \/\/\n-  \/\/ And we can write the simple form as:\n-  \/\/\n-  \/\/   s_pointer1 =   adr + offset1 + invar + scale * ConvI2L(iv)\n-  \/\/                  -- apply (D5, D7, D8) --\n-  \/\/              =   adr\n-  \/\/                + long_offset1\n-  \/\/                + long_scale1 * ConvI2L(int_offset1)\n-  \/\/                + long_invar1\n-  \/\/                + long_scale1 * ConvI2L(int_invar1)\n-  \/\/                + long_scale1 * ConvI2L(int_scale1) * ConvI2L(iv)                            (K)\n-  \/\/\n-  \/\/ We now compute the pointer difference between the simple (K) and compound-long-int form (H).\n-  \/\/ Most terms cancel out immediately:\n-  \/\/\n-  \/\/   sc_difference1 = c_pointer1 - s_pointer1 = long_scale1 * y1 * 2^32                        (L)\n-  \/\/\n-  \/\/ Rearranging the equation (L), we get:\n-  \/\/\n-  \/\/   c_pointer1 = s_pointer1 + long_scale1 * y1 * 2^32                                         (M)\n-  \/\/\n-  \/\/ And since long_scale1 is a multiple of array_element_size_in_bytes, there is some integer\n-  \/\/ x1, such that (M) implies:\n-  \/\/\n-  \/\/   c_pointer1 = s_pointer1 + array_element_size_in_bytes * x1 * 2^32                         (N)\n-  \/\/\n-  \/\/ With an analogue equation for c_pointer2, we can now compute the pointer difference for\n-  \/\/ the compound-long-int form:\n-  \/\/\n-  \/\/   c_difference =  c_pointer1 - c_pointer2\n-  \/\/                   -- apply (N) --\n-  \/\/                =  s_pointer1 + array_element_size_in_bytes * x1 * 2^32\n-  \/\/                 -(s_pointer2 + array_element_size_in_bytes * x2 * 2^32)\n-  \/\/                   -- where \"x = x1 - x2\" --\n-  \/\/                =  s_pointer1 - s_pointer2 + array_element_size_in_bytes * x * 2^32\n-  \/\/                   -- apply (C) --\n-  \/\/                =  s_difference            + array_element_size_in_bytes * x * 2^32\n-  \/\/ QED Lemma.\n-  if (ary_ptr_t != nullptr) {\n-    BasicType array_element_bt = ary_ptr_t->elem()->array_element_basic_type();\n-    if (is_java_primitive(array_element_bt)) {\n-      int array_element_size_in_bytes = type2aelembytes(array_element_bt);\n-      if (abs(long_scale) % array_element_size_in_bytes == 0) {\n-        return true;\n-      }\n-    }\n-  }\n-\n-  \/\/ General case: we do not know if it is safe to use the simple form.\n-  return false;\n-#endif\n-}\n-\n-bool VPointer::is_loop_member(Node* n) const {\n-  Node* n_c = phase()->get_ctrl(n);\n-  return lpt()->is_member(phase()->get_loop(n_c));\n-}\n-\n-bool VPointer::invariant(Node* n) const {\n-  NOT_PRODUCT(Tracer::Depth dd;)\n-  bool is_not_member = !is_loop_member(n);\n-  if (is_not_member) {\n-    CountedLoopNode* cl = lpt()->_head->as_CountedLoop();\n-    if (cl->is_main_loop()) {\n-      \/\/ Check that n_c dominates the pre loop head node. If it does not, then\n-      \/\/ we cannot use n as invariant for the pre loop CountedLoopEndNode check\n-      \/\/ because n_c is either part of the pre loop or between the pre and the\n-      \/\/ main loop (Illegal invariant happens when n_c is a CastII node that\n-      \/\/ prevents data nodes to flow above the main loop).\n-      Node* n_c = phase()->get_ctrl(n);\n-      return phase()->is_dominator(n_c, _vloop.pre_loop_head());\n-    }\n-  }\n-  return is_not_member;\n-}\n-\n-\/\/ Match: k*iv + offset\n-\/\/ where: k is a constant that maybe zero, and\n-\/\/        offset is (k2 [+\/- invariant]) where k2 maybe zero and invariant is optional\n-bool VPointer::scaled_iv_plus_offset(Node* n) {\n-  NOT_PRODUCT(Tracer::Depth ddd;)\n-  NOT_PRODUCT(_tracer.scaled_iv_plus_offset_1(n);)\n-\n-  if (scaled_iv(n)) {\n-    NOT_PRODUCT(_tracer.scaled_iv_plus_offset_2(n);)\n-    return true;\n-  }\n-\n-  if (offset_plus_k(n)) {\n-    NOT_PRODUCT(_tracer.scaled_iv_plus_offset_3(n);)\n-    return true;\n-  }\n-\n-  int opc = n->Opcode();\n-  if (opc == Op_AddI) {\n-    if (offset_plus_k(n->in(2)) && scaled_iv_plus_offset(n->in(1))) {\n-      NOT_PRODUCT(_tracer.scaled_iv_plus_offset_4(n);)\n-      return true;\n-    }\n-    if (offset_plus_k(n->in(1)) && scaled_iv_plus_offset(n->in(2))) {\n-      NOT_PRODUCT(_tracer.scaled_iv_plus_offset_5(n);)\n-      return true;\n-    }\n-  } else if (opc == Op_SubI || opc == Op_SubL) {\n-    if (offset_plus_k(n->in(2), true) && scaled_iv_plus_offset(n->in(1))) {\n-      \/\/ (offset1 + invar1 + scale * iv) - (offset2 + invar2)\n-      \/\/ Subtraction handled via \"negate\" flag of \"offset_plus_k\".\n-      NOT_PRODUCT(_tracer.scaled_iv_plus_offset_6(n);)\n-      return true;\n-    }\n-    VPointer tmp(this);\n-    if (offset_plus_k(n->in(1)) && tmp.scaled_iv_plus_offset(n->in(2))) {\n-      \/\/ (offset1 + invar1) - (offset2 + invar2 + scale * iv)\n-      \/\/ Subtraction handled explicitly below.\n-      assert(_scale == 0, \"shouldn't be set yet\");\n-      \/\/ _scale = -tmp._scale\n-      if (!try_MulI_no_overflow(-1, tmp._scale, _scale)) {\n-        return false; \/\/ mul overflow.\n-      }\n-      \/\/ _offset -= tmp._offset\n-      if (!try_SubI_no_overflow(_offset, tmp._offset, _offset)) {\n-        return false; \/\/ sub overflow.\n-      }\n-      \/\/ _invar -= tmp._invar\n-      if (tmp._invar != nullptr) {\n-        maybe_add_to_invar(tmp._invar, true);\n-#ifdef ASSERT\n-        _debug_invar_scale = tmp._debug_invar_scale;\n-        _debug_negate_invar = !tmp._debug_negate_invar;\n-#endif\n-      }\n-\n-      \/\/ Forward info about the int_index:\n-      assert(!_has_int_index_after_convI2L, \"no previous int_index discovered\");\n-      _has_int_index_after_convI2L = tmp._has_int_index_after_convI2L;\n-      _int_index_after_convI2L_offset = tmp._int_index_after_convI2L_offset;\n-      _int_index_after_convI2L_invar  = tmp._int_index_after_convI2L_invar;\n-      _int_index_after_convI2L_scale  = tmp._int_index_after_convI2L_scale;\n-\n-      NOT_PRODUCT(_tracer.scaled_iv_plus_offset_7(n);)\n-      return true;\n-    }\n-  }\n-\n-  NOT_PRODUCT(_tracer.scaled_iv_plus_offset_8(n);)\n-  return false;\n-}\n-\n-\/\/ Match: k*iv where k is a constant that's not zero\n-bool VPointer::scaled_iv(Node* n) {\n-  NOT_PRODUCT(Tracer::Depth ddd;)\n-  NOT_PRODUCT(_tracer.scaled_iv_1(n);)\n-\n-  if (_scale != 0) { \/\/ already found a scale\n-    NOT_PRODUCT(_tracer.scaled_iv_2(n, _scale);)\n-    return false;\n-  }\n-\n-  if (n == iv()) {\n-    _scale = 1;\n-    NOT_PRODUCT(_tracer.scaled_iv_3(n, _scale);)\n-    return true;\n-  }\n-  if (_analyze_only && (is_loop_member(n))) {\n-    _nstack->push(n, _stack_idx++);\n-  }\n-\n-  int opc = n->Opcode();\n-  if (opc == Op_MulI) {\n-    if (n->in(1) == iv() && n->in(2)->is_Con()) {\n-      _scale = n->in(2)->get_int();\n-      NOT_PRODUCT(_tracer.scaled_iv_4(n, _scale);)\n-      return true;\n-    } else if (n->in(2) == iv() && n->in(1)->is_Con()) {\n-      _scale = n->in(1)->get_int();\n-      NOT_PRODUCT(_tracer.scaled_iv_5(n, _scale);)\n-      return true;\n-    }\n-  } else if (opc == Op_LShiftI) {\n-    if (n->in(1) == iv() && n->in(2)->is_Con()) {\n-      if (!try_LShiftI_no_overflow(1, n->in(2)->get_int(), _scale)) {\n-        return false; \/\/ shift overflow.\n-      }\n-      NOT_PRODUCT(_tracer.scaled_iv_6(n, _scale);)\n-      return true;\n-    }\n-  } else if (opc == Op_ConvI2L && !has_iv()) {\n-    \/\/ So far we have not found the iv yet, and are about to enter a ConvI2L subgraph,\n-    \/\/ which may be the int index (that might overflow) for the memory access, of the form:\n-    \/\/\n-    \/\/   int_index = int_offset + int_invar + int_scale * iv\n-    \/\/\n-    \/\/ If we simply continue parsing with the current VPointer, then the int_offset and\n-    \/\/ int_invar simply get added to the long offset and invar. But for the checks in\n-    \/\/ VPointer::is_safe_to_use_as_simple_form() we need to have explicit access to the\n-    \/\/ int_index. Thus, we must parse it explicitly here. For this, we use a temporary\n-    \/\/ VPointer, to pattern match the int_index sub-expression of the address.\n-\n-    NOT_PRODUCT(Tracer::Depth dddd;)\n-    VPointer tmp(this);\n-    NOT_PRODUCT(_tracer.scaled_iv_8(n, &tmp);)\n-\n-    if (tmp.scaled_iv_plus_offset(n->in(1)) && tmp.has_iv()) {\n-      \/\/ We successfully matched an integer index, of the form:\n-      \/\/   int_index = int_offset + int_invar + int_scale * iv\n-      \/\/ Forward scale.\n-      assert(_scale == 0 && tmp._scale != 0, \"iv only found just now\");\n-      _scale = tmp._scale;\n-      \/\/ Accumulate offset.\n-      if (!try_AddI_no_overflow(_offset, tmp._offset, _offset)) {\n-        return false; \/\/ add overflow.\n-      }\n-      \/\/ Accumulate invar.\n-      if (tmp._invar != nullptr) {\n-        maybe_add_to_invar(tmp._invar, false);\n-      }\n-      \/\/ Set info about the int_index:\n-      assert(!_has_int_index_after_convI2L, \"no previous int_index discovered\");\n-      _has_int_index_after_convI2L = true;\n-      _int_index_after_convI2L_offset = tmp._offset;\n-      _int_index_after_convI2L_invar  = tmp._invar;\n-      _int_index_after_convI2L_scale  = tmp._scale;\n-\n-      NOT_PRODUCT(_tracer.scaled_iv_7(n);)\n-      return true;\n-    }\n-  } else if (opc == Op_ConvI2L || opc == Op_CastII) {\n-    if (scaled_iv_plus_offset(n->in(1))) {\n-      NOT_PRODUCT(_tracer.scaled_iv_7(n);)\n-      return true;\n-    }\n-  } else if (opc == Op_LShiftL && n->in(2)->is_Con()) {\n-    if (!has_iv()) {\n-      \/\/ Need to preserve the current _offset value, so\n-      \/\/ create a temporary object for this expression subtree.\n-      \/\/ Hacky, so should re-engineer the address pattern match.\n-      NOT_PRODUCT(Tracer::Depth dddd;)\n-      VPointer tmp(this);\n-      NOT_PRODUCT(_tracer.scaled_iv_8(n, &tmp);)\n-\n-      if (tmp.scaled_iv_plus_offset(n->in(1))) {\n-        int shift = n->in(2)->get_int();\n-        \/\/ Accumulate scale.\n-        if (!try_LShiftI_no_overflow(tmp._scale, shift, _scale)) {\n-          return false; \/\/ shift overflow.\n-        }\n-        \/\/ Accumulate offset.\n-        int shifted_offset = 0;\n-        if (!try_LShiftI_no_overflow(tmp._offset, shift, shifted_offset)) {\n-          return false; \/\/ shift overflow.\n-        }\n-        if (!try_AddI_no_overflow(_offset, shifted_offset, _offset)) {\n-          return false; \/\/ add overflow.\n-        }\n-        \/\/ Accumulate invar.\n-        if (tmp._invar != nullptr) {\n-          BasicType bt = tmp._invar->bottom_type()->basic_type();\n-          assert(bt == T_INT || bt == T_LONG, \"\");\n-          maybe_add_to_invar(register_if_new(LShiftNode::make(tmp._invar, n->in(2), bt)), false);\n-#ifdef ASSERT\n-          _debug_invar_scale = n->in(2);\n-#endif\n-        }\n-\n-        \/\/ Forward info about the int_index:\n-        assert(!_has_int_index_after_convI2L, \"no previous int_index discovered\");\n-        _has_int_index_after_convI2L = tmp._has_int_index_after_convI2L;\n-        _int_index_after_convI2L_offset = tmp._int_index_after_convI2L_offset;\n-        _int_index_after_convI2L_invar  = tmp._int_index_after_convI2L_invar;\n-        _int_index_after_convI2L_scale  = tmp._int_index_after_convI2L_scale;\n-\n-        NOT_PRODUCT(_tracer.scaled_iv_9(n, _scale, _offset, _invar);)\n-        return true;\n-      }\n-    }\n-  }\n-  NOT_PRODUCT(_tracer.scaled_iv_10(n);)\n-  return false;\n-}\n-\n-\/\/ Match: offset is (k [+\/- invariant])\n-\/\/ where k maybe zero and invariant is optional, but not both.\n-bool VPointer::offset_plus_k(Node* n, bool negate) {\n-  NOT_PRODUCT(Tracer::Depth ddd;)\n-  NOT_PRODUCT(_tracer.offset_plus_k_1(n);)\n-\n-  int opc = n->Opcode();\n-  if (opc == Op_ConI) {\n-    if (!try_AddSubI_no_overflow(_offset, n->get_int(), negate, _offset)) {\n-      return false; \/\/ add\/sub overflow.\n-    }\n-    NOT_PRODUCT(_tracer.offset_plus_k_2(n, _offset);)\n-    return true;\n-  } else if (opc == Op_ConL) {\n-    \/\/ Okay if value fits into an int\n-    const TypeLong* t = n->find_long_type();\n-    if (t->higher_equal(TypeLong::INT)) {\n-      jlong loff = n->get_long();\n-      jint  off  = (jint)loff;\n-      if (!try_AddSubI_no_overflow(_offset, off, negate, _offset)) {\n-        return false; \/\/ add\/sub overflow.\n-      }\n-      NOT_PRODUCT(_tracer.offset_plus_k_3(n, _offset);)\n-      return true;\n-    }\n-    NOT_PRODUCT(_tracer.offset_plus_k_4(n);)\n-    return false;\n-  }\n-  assert((_debug_invar == nullptr) == (_invar == nullptr), \"\");\n-\n-  if (_analyze_only && is_loop_member(n)) {\n-    _nstack->push(n, _stack_idx++);\n-  }\n-  if (opc == Op_AddI) {\n-    if (n->in(2)->is_Con() && invariant(n->in(1))) {\n-      maybe_add_to_invar(n->in(1), negate);\n-      if (!try_AddSubI_no_overflow(_offset, n->in(2)->get_int(), negate, _offset)) {\n-        return false; \/\/ add\/sub overflow.\n-      }\n-      NOT_PRODUCT(_tracer.offset_plus_k_6(n, _invar, negate, _offset);)\n-      return true;\n-    } else if (n->in(1)->is_Con() && invariant(n->in(2))) {\n-      if (!try_AddSubI_no_overflow(_offset, n->in(1)->get_int(), negate, _offset)) {\n-        return false; \/\/ add\/sub overflow.\n-      }\n-      maybe_add_to_invar(n->in(2), negate);\n-      NOT_PRODUCT(_tracer.offset_plus_k_7(n, _invar, negate, _offset);)\n-      return true;\n-    }\n-  }\n-  if (opc == Op_SubI) {\n-    if (n->in(2)->is_Con() && invariant(n->in(1))) {\n-      maybe_add_to_invar(n->in(1), negate);\n-      if (!try_AddSubI_no_overflow(_offset, n->in(2)->get_int(), !negate, _offset)) {\n-        return false; \/\/ add\/sub overflow.\n-      }\n-      NOT_PRODUCT(_tracer.offset_plus_k_8(n, _invar, negate, _offset);)\n-      return true;\n-    } else if (n->in(1)->is_Con() && invariant(n->in(2))) {\n-      if (!try_AddSubI_no_overflow(_offset, n->in(1)->get_int(), negate, _offset)) {\n-        return false; \/\/ add\/sub overflow.\n-      }\n-      maybe_add_to_invar(n->in(2), !negate);\n-      NOT_PRODUCT(_tracer.offset_plus_k_9(n, _invar, !negate, _offset);)\n-      return true;\n-    }\n-  }\n-\n-  if (!is_loop_member(n)) {\n-    \/\/ 'n' is loop invariant. Skip ConvI2L and CastII nodes before checking if 'n' is dominating the pre loop.\n-    if (opc == Op_ConvI2L) {\n-      n = n->in(1);\n-    }\n-    if (n->Opcode() == Op_CastII) {\n-      \/\/ Skip CastII nodes\n-      assert(!is_loop_member(n), \"sanity\");\n-      n = n->in(1);\n-    }\n-    \/\/ Check if 'n' can really be used as invariant (not in main loop and dominating the pre loop).\n-    if (invariant(n)) {\n-      maybe_add_to_invar(n, negate);\n-      NOT_PRODUCT(_tracer.offset_plus_k_10(n, _invar, negate, _offset);)\n-      return true;\n-    }\n-  }\n-\n-  NOT_PRODUCT(_tracer.offset_plus_k_11(n);)\n-  return false;\n-}\n-\n-Node* VPointer::maybe_negate_invar(bool negate, Node* invar) {\n-#ifdef ASSERT\n-  _debug_negate_invar = negate;\n-#endif\n-  if (negate) {\n-    BasicType bt = invar->bottom_type()->basic_type();\n-    assert(bt == T_INT || bt == T_LONG, \"\");\n-    Node* zero = phase()->zerocon(bt);\n-    Node* sub = SubNode::make(zero, invar, bt);\n-    invar = register_if_new(sub);\n-  }\n-  return invar;\n-}\n-\n-Node* VPointer::register_if_new(Node* n) const {\n-  PhaseIterGVN& igvn = phase()->igvn();\n-  Node* prev = igvn.hash_find_insert(n);\n-  if (prev != nullptr) {\n-    n->destruct(&igvn);\n-    n = prev;\n-  } else {\n-    Node* c = phase()->get_early_ctrl(n);\n-    phase()->register_new_node(n, c);\n-  }\n-  return n;\n-}\n-\n-void VPointer::maybe_add_to_invar(Node* new_invar, bool negate) {\n-  new_invar = maybe_negate_invar(negate, new_invar);\n-  if (_invar == nullptr) {\n-    _invar = new_invar;\n-#ifdef ASSERT\n-    _debug_invar = new_invar;\n-#endif\n-    return;\n-  }\n-#ifdef ASSERT\n-  _debug_invar = NodeSentinel;\n-#endif\n-  BasicType new_invar_bt = new_invar->bottom_type()->basic_type();\n-  assert(new_invar_bt == T_INT || new_invar_bt == T_LONG, \"\");\n-  BasicType invar_bt = _invar->bottom_type()->basic_type();\n-  assert(invar_bt == T_INT || invar_bt == T_LONG, \"\");\n-\n-  BasicType bt = (new_invar_bt == T_LONG || invar_bt == T_LONG) ? T_LONG : T_INT;\n-  Node* current_invar = _invar;\n-  if (invar_bt != bt) {\n-    assert(bt == T_LONG && invar_bt == T_INT, \"\");\n-    assert(new_invar_bt == bt, \"\");\n-    current_invar = register_if_new(new ConvI2LNode(current_invar));\n-  } else if (new_invar_bt != bt) {\n-    assert(bt == T_LONG && new_invar_bt == T_INT, \"\");\n-    assert(invar_bt == bt, \"\");\n-    new_invar = register_if_new(new ConvI2LNode(new_invar));\n-  }\n-  Node* add = AddNode::make(current_invar, new_invar, bt);\n-  _invar = register_if_new(add);\n-}\n-\n-bool VPointer::try_AddI_no_overflow(int offset1, int offset2, int& result) {\n-  jlong long_offset = java_add((jlong)(offset1), (jlong)(offset2));\n-  jint  int_offset  = java_add(        offset1,          offset2);\n-  if (long_offset != int_offset) {\n-    return false;\n-  }\n-  result = int_offset;\n-  return true;\n-}\n-\n-bool VPointer::try_SubI_no_overflow(int offset1, int offset2, int& result) {\n-  jlong long_offset = java_subtract((jlong)(offset1), (jlong)(offset2));\n-  jint  int_offset  = java_subtract(        offset1,          offset2);\n-  if (long_offset != int_offset) {\n-    return false;\n-  }\n-  result = int_offset;\n-  return true;\n-}\n-\n-bool VPointer::try_AddSubI_no_overflow(int offset1, int offset2, bool is_sub, int& result) {\n-  if (is_sub) {\n-    return try_SubI_no_overflow(offset1, offset2, result);\n-  } else {\n-    return try_AddI_no_overflow(offset1, offset2, result);\n-  }\n-}\n-\n-bool VPointer::try_LShiftI_no_overflow(int offset, int shift, int& result) {\n-  if (shift < 0 || shift > 31) {\n-    return false;\n-  }\n-  jlong long_offset = java_shift_left((jlong)(offset), shift);\n-  jint  int_offset  = java_shift_left(        offset,  shift);\n-  if (long_offset != int_offset) {\n-    return false;\n-  }\n-  result = int_offset;\n-  return true;\n-}\n-\n-bool VPointer::try_MulI_no_overflow(int offset1, int offset2, int& result) {\n-  jlong long_offset = java_multiply((jlong)(offset1), (jlong)(offset2));\n-  jint  int_offset  = java_multiply(        offset1,          offset2);\n-  if (long_offset != int_offset) {\n-    return false;\n-  }\n-  result = int_offset;\n-  return true;\n-}\n-\n-\/\/ We use two comparisons, because a subtraction could underflow.\n-#define RETURN_CMP_VALUE_IF_NOT_EQUAL(a, b) \\\n-  if (a < b) { return -1; }                 \\\n-  if (a > b) { return  1; }\n-\n-\/\/ To be in the same group, two VPointers must be the same,\n-\/\/ except for the offset.\n-int VPointer::cmp_for_sort_by_group(const VPointer** p1, const VPointer** p2) {\n-  const VPointer* a = *p1;\n-  const VPointer* b = *p2;\n-\n-  RETURN_CMP_VALUE_IF_NOT_EQUAL(a->base()->_idx,     b->base()->_idx);\n-  RETURN_CMP_VALUE_IF_NOT_EQUAL(a->mem()->Opcode(),  b->mem()->Opcode());\n-  RETURN_CMP_VALUE_IF_NOT_EQUAL(a->scale_in_bytes(), b->scale_in_bytes());\n-\n-  int a_inva_idx = a->invar() == nullptr ? 0 : a->invar()->_idx;\n-  int b_inva_idx = b->invar() == nullptr ? 0 : b->invar()->_idx;\n-  RETURN_CMP_VALUE_IF_NOT_EQUAL(a_inva_idx,          b_inva_idx);\n-\n-  return 0; \/\/ equal\n-}\n-\n-\/\/ We compare by group, then by offset, and finally by node idx.\n-int VPointer::cmp_for_sort(const VPointer** p1, const VPointer** p2) {\n-  int cmp_group = cmp_for_sort_by_group(p1, p2);\n-  if (cmp_group != 0) { return cmp_group; }\n-\n-  const VPointer* a = *p1;\n-  const VPointer* b = *p2;\n-\n-  RETURN_CMP_VALUE_IF_NOT_EQUAL(a->offset_in_bytes(), b->offset_in_bytes());\n-  RETURN_CMP_VALUE_IF_NOT_EQUAL(a->mem()->_idx,       b->mem()->_idx);\n-  return 0; \/\/ equal\n-}\n-\n-#ifndef PRODUCT\n-\/\/ Function for printing the fields of a VPointer\n-void VPointer::print() const {\n-  tty->print(\"VPointer[mem: %4d %10s, \", _mem->_idx, _mem->Name());\n+void VPointer::print_on(outputStream* st, bool end_with_cr) const {\n+  st->print(\"VPointer[\");\n@@ -1361,2 +398,2 @@\n-  if (!valid()) {\n-    tty->print_cr(\"invalid]\");\n+  if (!is_valid()) {\n+    st->print_cr(\"invalid]\");\n@@ -1366,28 +403,2 @@\n-  tty->print(\"base: %4d, \", _base != nullptr ? _base->_idx : 0);\n-  tty->print(\"adr: %4d, \", _adr != nullptr ? _adr->_idx : 0);\n-\n-  tty->print(\" base\");\n-  VPointer::print_con_or_idx(_base);\n-\n-  tty->print(\" + offset(%4d)\", _offset);\n-\n-  tty->print(\" + invar\");\n-  VPointer::print_con_or_idx(_invar);\n-\n-  tty->print_cr(\" + scale(%4d) * iv]\", _scale);\n-}\n-#endif\n-\n-\/\/ Following are functions for tracing VPointer match\n-#ifndef PRODUCT\n-void VPointer::Tracer::print_depth() const {\n-  for (int ii = 0; ii < _depth; ++ii) {\n-    tty->print(\"  \");\n-  }\n-}\n-\n-void VPointer::Tracer::ctor_1(const Node* mem) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print(\" %d VPointer::VPointer: start alignment analysis\", mem->_idx); mem->dump();\n-  }\n-}\n+  st->print(\"size: %2d, %s, \", size(),\n+            _mem_pointer.base().is_object() ? \"object\" : \"native\");\n@@ -1395,9 +406,5 @@\n-void VPointer::Tracer::ctor_2(Node* adr) {\n-  if (_is_trace_alignment) {\n-    \/\/store_depth();\n-    inc_depth();\n-    print_depth(); tty->print(\" %d (adr) VPointer::VPointer: \", adr->_idx); adr->dump();\n-    inc_depth();\n-    print_depth(); tty->print(\" %d (base) VPointer::VPointer: \", adr->in(AddPNode::Base)->_idx); adr->in(AddPNode::Base)->dump();\n-  }\n-}\n+  Node* base = _mem_pointer.base().object_or_native();\n+  tty->print(\"base(%d %s) + con(%3d) + iv_scale(%3d) * iv + invar(\",\n+             base->_idx, base->Name(),\n+             _mem_pointer.con().value(),\n+             _iv_scale);\n@@ -1405,22 +412,4 @@\n-void VPointer::Tracer::ctor_3(Node* adr, int i) {\n-  if (_is_trace_alignment) {\n-    inc_depth();\n-    Node* offset = adr->in(AddPNode::Offset);\n-    print_depth(); tty->print(\" %d (offset) VPointer::VPointer: i = %d: \", offset->_idx, i); offset->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::ctor_4(Node* adr, int i) {\n-  if (_is_trace_alignment) {\n-    inc_depth();\n-    print_depth(); tty->print(\" %d (adr) VPointer::VPointer: i = %d: \", adr->_idx, i); adr->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::ctor_5(Node* adr, Node* base, int i) {\n-  if (_is_trace_alignment) {\n-    inc_depth();\n-    if (base == adr) {\n-      print_depth(); tty->print_cr(\"  \\\\ %d (adr) == %d (base) VPointer::VPointer: breaking analysis at i = %d\", adr->_idx, base->_idx, i);\n-    } else if (!adr->is_AddP()) {\n-      print_depth(); tty->print_cr(\"  \\\\ %d (adr) is NOT Addp VPointer::VPointer: breaking analysis at i = %d\", adr->_idx, i);\n+  int count = 0;\n+  for_each_invar_summand([&] (const MemPointerSummand& s) {\n+    if (count > 0) {\n+      st->print(\" + \");\n@@ -1428,0 +417,5 @@\n+    s.print_on(tty);\n+    count++;\n+  });\n+  if (count == 0) {\n+    st->print(\"0\");\n@@ -1429,227 +423,2 @@\n-}\n-\n-void VPointer::Tracer::ctor_6(const Node* mem) {\n-  if (_is_trace_alignment) {\n-    \/\/restore_depth();\n-    print_depth(); tty->print_cr(\" %d (adr) VPointer::VPointer: stop analysis\", mem->_idx);\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_plus_offset_1(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print(\" %d VPointer::scaled_iv_plus_offset testing node: \", n->_idx);\n-    n->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_plus_offset_2(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv_plus_offset: PASSED\", n->_idx);\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_plus_offset_3(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv_plus_offset: PASSED\", n->_idx);\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_plus_offset_4(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv_plus_offset: Op_AddI PASSED\", n->_idx);\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv_plus_offset: in(1) is scaled_iv: \", n->in(1)->_idx); n->in(1)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv_plus_offset: in(2) is offset_plus_k: \", n->in(2)->_idx); n->in(2)->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_plus_offset_5(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv_plus_offset: Op_AddI PASSED\", n->_idx);\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv_plus_offset: in(2) is scaled_iv: \", n->in(2)->_idx); n->in(2)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv_plus_offset: in(1) is offset_plus_k: \", n->in(1)->_idx); n->in(1)->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_plus_offset_6(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv_plus_offset: Op_%s PASSED\", n->_idx, n->Name());\n-    print_depth(); tty->print(\"  \\\\  %d VPointer::scaled_iv_plus_offset: in(1) is scaled_iv: \", n->in(1)->_idx); n->in(1)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv_plus_offset: in(2) is offset_plus_k: \", n->in(2)->_idx); n->in(2)->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_plus_offset_7(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv_plus_offset: Op_%s PASSED\", n->_idx, n->Name());\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv_plus_offset: in(2) is scaled_iv: \", n->in(2)->_idx); n->in(2)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv_plus_offset: in(1) is offset_plus_k: \", n->in(1)->_idx); n->in(1)->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_plus_offset_8(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv_plus_offset: FAILED\", n->_idx);\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_1(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print(\" %d VPointer::scaled_iv: testing node: \", n->_idx); n->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_2(Node* n, int scale) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv: FAILED since another _scale has been detected before\", n->_idx);\n-    print_depth(); tty->print_cr(\"  \\\\ VPointer::scaled_iv: _scale (%d) != 0\", scale);\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_3(Node* n, int scale) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv: is iv, setting _scale = %d\", n->_idx, scale);\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_4(Node* n, int scale) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv: Op_MulI PASSED, setting _scale = %d\", n->_idx, scale);\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv: in(1) is iv: \", n->in(1)->_idx); n->in(1)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv: in(2) is Con: \", n->in(2)->_idx); n->in(2)->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_5(Node* n, int scale) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv: Op_MulI PASSED, setting _scale = %d\", n->_idx, scale);\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv: in(2) is iv: \", n->in(2)->_idx); n->in(2)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv: in(1) is Con: \", n->in(1)->_idx); n->in(1)->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_6(Node* n, int scale) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv: Op_LShiftI PASSED, setting _scale = %d\", n->_idx, scale);\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv: in(1) is iv: \", n->in(1)->_idx); n->in(1)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::scaled_iv: in(2) is Con: \", n->in(2)->_idx); n->in(2)->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_7(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv: Op_ConvI2L PASSED\", n->_idx);\n-    print_depth(); tty->print_cr(\"  \\\\ VPointer::scaled_iv: in(1) %d is scaled_iv_plus_offset: \", n->in(1)->_idx);\n-    inc_depth(); inc_depth();\n-    print_depth(); n->in(1)->dump();\n-    dec_depth(); dec_depth();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_8(Node* n, VPointer* tmp) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print(\" %d VPointer::scaled_iv: Op_LShiftL, creating tmp VPointer: \", n->_idx); tmp->print();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_9(Node* n, int scale, int offset, Node* invar) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv: Op_LShiftL PASSED, setting _scale = %d, _offset = %d\", n->_idx, scale, offset);\n-    print_depth(); tty->print_cr(\"  \\\\ VPointer::scaled_iv: in(1) [%d] is scaled_iv_plus_offset, in(2) [%d] used to scale: _scale = %d, _offset = %d\",\n-    n->in(1)->_idx, n->in(2)->_idx, scale, offset);\n-    if (invar != nullptr) {\n-      print_depth(); tty->print_cr(\"  \\\\ VPointer::scaled_iv: scaled invariant: [%d]\", invar->_idx);\n-    }\n-    inc_depth(); inc_depth();\n-    print_depth(); n->in(1)->dump();\n-    print_depth(); n->in(2)->dump();\n-    if (invar != nullptr) {\n-      print_depth(); invar->dump();\n-    }\n-    dec_depth(); dec_depth();\n-  }\n-}\n-\n-void VPointer::Tracer::scaled_iv_10(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::scaled_iv: FAILED\", n->_idx);\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_1(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print(\" %d VPointer::offset_plus_k: testing node: \", n->_idx); n->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_2(Node* n, int _offset) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::offset_plus_k: Op_ConI PASSED, setting _offset = %d\", n->_idx, _offset);\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_3(Node* n, int _offset) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::offset_plus_k: Op_ConL PASSED, setting _offset = %d\", n->_idx, _offset);\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_4(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::offset_plus_k: FAILED\", n->_idx);\n-    print_depth(); tty->print_cr(\"  \\\\ \" JLONG_FORMAT \" VPointer::offset_plus_k: Op_ConL FAILED, k is too big\", n->get_long());\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_5(Node* n, Node* _invar) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::offset_plus_k: FAILED since another invariant has been detected before\", n->_idx);\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::offset_plus_k: _invar is not null: \", _invar->_idx); _invar->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_6(Node* n, Node* _invar, bool _negate_invar, int _offset) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::offset_plus_k: Op_AddI PASSED, setting _debug_negate_invar = %d, _invar = %d, _offset = %d\",\n-    n->_idx, _negate_invar, _invar->_idx, _offset);\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::offset_plus_k: in(2) is Con: \", n->in(2)->_idx); n->in(2)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::offset_plus_k: in(1) is invariant: \", _invar->_idx); _invar->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_7(Node* n, Node* _invar, bool _negate_invar, int _offset) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::offset_plus_k: Op_AddI PASSED, setting _debug_negate_invar = %d, _invar = %d, _offset = %d\",\n-    n->_idx, _negate_invar, _invar->_idx, _offset);\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::offset_plus_k: in(1) is Con: \", n->in(1)->_idx); n->in(1)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::offset_plus_k: in(2) is invariant: \", _invar->_idx); _invar->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_8(Node* n, Node* _invar, bool _negate_invar, int _offset) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::offset_plus_k: Op_SubI is PASSED, setting _debug_negate_invar = %d, _invar = %d, _offset = %d\",\n-    n->_idx, _negate_invar, _invar->_idx, _offset);\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::offset_plus_k: in(2) is Con: \", n->in(2)->_idx); n->in(2)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::offset_plus_k: in(1) is invariant: \", _invar->_idx); _invar->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_9(Node* n, Node* _invar, bool _negate_invar, int _offset) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::offset_plus_k: Op_SubI PASSED, setting _debug_negate_invar = %d, _invar = %d, _offset = %d\", n->_idx, _negate_invar, _invar->_idx, _offset);\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::offset_plus_k: in(1) is Con: \", n->in(1)->_idx); n->in(1)->dump();\n-    print_depth(); tty->print(\"  \\\\ %d VPointer::offset_plus_k: in(2) is invariant: \", _invar->_idx); _invar->dump();\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_10(Node* n, Node* _invar, bool _negate_invar, int _offset) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::offset_plus_k: PASSED, setting _debug_negate_invar = %d, _invar = %d, _offset = %d\", n->_idx, _negate_invar, _invar->_idx, _offset);\n-    print_depth(); tty->print_cr(\"  \\\\ %d VPointer::offset_plus_k: is invariant\", n->_idx);\n-  }\n-}\n-\n-void VPointer::Tracer::offset_plus_k_11(Node* n) {\n-  if (_is_trace_alignment) {\n-    print_depth(); tty->print_cr(\" %d VPointer::offset_plus_k: FAILED\", n->_idx);\n-  }\n+  st->print(\")]\");\n+  if (end_with_cr) { st->cr(); }\n@@ -1659,1 +428,0 @@\n-\n@@ -1670,3 +438,3 @@\n-  \/\/ Out of simplicity: non power-of-2 scale not supported.\n-  if (abs(_scale) == 0 || !is_power_of_2(abs(_scale))) {\n-    return new EmptyAlignmentSolution(\"non power-of-2 scale not supported\");\n+  \/\/ Out of simplicity: non power-of-2 iv_scale not supported.\n+  if (abs(iv_scale()) == 0 || !is_power_of_2(abs(iv_scale()))) {\n+    return new EmptyAlignmentSolution(\"non power-of-2 iv_scale not supported\");\n@@ -1681,1 +449,1 @@\n-  \/\/   adr = base + offset + invar + scale * iv\n+  \/\/   adr = base + invar + iv_scale * iv + con\n@@ -1697,8 +465,8 @@\n-  \/\/          Simple form           Expansion of iv variable                  Reshaped with constants   Comments for terms\n-  \/\/          -----------           ------------------------                  -----------------------   ------------------\n-  \/\/   adr =  base               =  base                                   =  base                      (base % aw = 0)\n-  \/\/        + offset              + offset                                  + C_const                   (sum of constant terms)\n-  \/\/        + invar               + invar_factor * var_invar                + C_invar * var_invar       (term for invariant)\n-  \/\/                          \/   + scale * init                            + C_init  * var_init        (term for variable init)\n-  \/\/        + scale * iv   -> |   + scale * pre_stride * pre_iter           + C_pre   * pre_iter        (adjustable pre-loop term)\n-  \/\/                          \\   + scale * main_stride * main_iter         + C_main  * main_iter       (main-loop term)\n+  \/\/          Simple form             Expansion of iv variable                  Reshaped with constants   Comments for terms\n+  \/\/          -----------             ------------------------                  -----------------------   ------------------\n+  \/\/   adr =  base                 =  base                                   =  base                      (assume: base % aw = 0)\n+  \/\/        + invar                 + invar_factor * var_invar                + C_invar * var_invar       (term for invariant)\n+  \/\/                            \/   + iv_scale * init                         + C_init  * var_init        (term for variable init)\n+  \/\/        + iv_scale * iv  -> |   + iv_scale * pre_stride * pre_iter        + C_pre   * pre_iter        (adjustable pre-loop term)\n+  \/\/                            \\   + iv_scale * main_stride * main_iter      + C_main  * main_iter       (main-loop term)\n+  \/\/        + con                   + con                                     + C_const                   (sum of constant terms)\n@@ -1714,2 +482,5 @@\n-  \/\/   2) The \"C_const\" term is the sum of all constant terms. This is \"offset\",\n-  \/\/      plus \"scale * init\" if it is constant.\n+  \/\/      TODO: Note: we have been assuming that this also holds for native memory base\n+  \/\/                  addresses. This is incorrect, see JDK-8323582.\n+  \/\/\n+  \/\/   2) The \"C_const\" term is the sum of all constant terms. This is \"con\",\n+  \/\/      plus \"iv_scale * init\" if it is constant.\n@@ -1721,1 +492,1 @@\n-  \/\/   4) The \"C_init * var_init\" is the factorization of \"scale * init\" into a\n+  \/\/   4) The \"C_init * var_init\" is the factorization of \"iv_scale * init\" into a\n@@ -1725,2 +496,2 @@\n-  \/\/        scale * init = C_init * var_init + scale * C_const_init                 (FAC_INIT)\n-  \/\/        C_init       = (init is constant) ? 0    : scale\n+  \/\/        iv_scale * init = C_init * var_init + iv_scale * C_const_init           (FAC_INIT)\n+  \/\/        C_init       = (init is constant) ? 0    : iv_scale\n@@ -1739,1 +510,1 @@\n-  const int C_const =      _offset + C_const_init * _scale;\n+  const int C_const =      _vpointer.con() + C_const_init * iv_scale();\n@@ -1742,1 +513,1 @@\n-  const int C_invar = (_invar == nullptr) ? 0 : abs(_invar_factor);\n+  const int C_invar = _vpointer.compute_invar_factor();\n@@ -1744,3 +515,3 @@\n-  const int C_init = _init_node->is_ConI() ? 0 : _scale;\n-  const int C_pre =  _scale * _pre_stride;\n-  const int C_main = _scale * _main_stride;\n+  const int C_init = _init_node->is_ConI() ? 0 : iv_scale();\n+  const int C_pre =  iv_scale() * _pre_stride;\n+  const int C_main = iv_scale() * _main_stride;\n@@ -1753,0 +524,1 @@\n+  \/\/ TODO: Note: the following assumption is incorrect for native memory bases, see JDK-8323582.\n@@ -2031,1 +803,1 @@\n-  \/\/                    = mx2 * q - C_const \/ (scale * pre_stride)                                  (11a)\n+  \/\/                    = mx2 * q - C_const \/ (iv_scale * pre_stride)                               (11a)\n@@ -2039,1 +811,1 @@\n-  \/\/                    = my2 * q - invar \/ (scale * pre_stride)                                    (11b, with invar)\n+  \/\/                    = my2 * q - invar \/ (iv_scale * pre_stride)                                 (11b, with invar)\n@@ -2045,1 +817,1 @@\n-  \/\/ If init is variable (i.e. C_init = scale, init = var_init):\n+  \/\/ If init is variable (i.e. C_init = iv_scale, init = var_init):\n@@ -2047,5 +819,5 @@\n-  \/\/   pre_iter_C_init  = mz2 * q - sign(C_pre) * Z       * var_init\n-  \/\/                    = mz2 * q - sign(C_pre) * C_init  * var_init  \/ abs(C_pre)\n-  \/\/                    = mz2 * q - sign(C_pre) * scale   * init      \/ abs(C_pre)\n-  \/\/                    = mz2 * q - scale * init \/ C_pre\n-  \/\/                    = mz2 * q - scale * init \/ (scale * pre_stride)\n+  \/\/   pre_iter_C_init  = mz2 * q - sign(C_pre) * Z          * var_init\n+  \/\/                    = mz2 * q - sign(C_pre) * C_init     * var_init  \/ abs(C_pre)\n+  \/\/                    = mz2 * q - sign(C_pre) * iv_scale   * init      \/ abs(C_pre)\n+  \/\/                    = mz2 * q - iv_scale * init \/ C_pre\n+  \/\/                    = mz2 * q - iv_scale * init \/ (iv_scale * pre_stride)\n@@ -2062,3 +834,3 @@\n-  \/\/            =   mx2 * q  - C_const \/ (scale * pre_stride)\n-  \/\/              + my2 * q [- invar \/ (scale * pre_stride) ]\n-  \/\/              + mz2 * q [- init \/ pre_stride            ]\n+  \/\/            =   mx2 * q  - C_const \/ (iv_scale * pre_stride)\n+  \/\/              + my2 * q [- invar \/ (iv_scale * pre_stride) ]\n+  \/\/              + mz2 * q [- init \/ pre_stride               ]\n@@ -2067,3 +839,3 @@\n-  \/\/              - C_const \/ (scale * pre_stride)        (align constant term)\n-  \/\/             [- invar \/ (scale * pre_stride)   ]      (align invariant term, if present)\n-  \/\/             [- init \/ pre_stride              ]      (align variable init term, if present)    (12)\n+  \/\/              - C_const \/ (iv_scale * pre_stride)        (align constant term)\n+  \/\/             [- invar \/ (iv_scale * pre_stride)   ]      (align invariant term, if present)\n+  \/\/             [- init \/ pre_stride                 ]      (align variable init term, if present)    (12)\n@@ -2073,1 +845,1 @@\n-  \/\/   r = (-C_const \/ (scale * pre_stride)) % q                                                    (13)\n+  \/\/   r = (-C_const \/ (iv_scale * pre_stride)) % q                                                    (13)\n@@ -2075,1 +847,1 @@\n-  const int r = AlignmentSolution::mod(-C_const \/ (_scale * _pre_stride), q);\n+  const int r = AlignmentSolution::mod(-C_const \/ (iv_scale() * _pre_stride), q);\n@@ -2078,2 +850,2 @@\n-  \/\/                   [- invar \/ (scale * pre_stride)  ]\n-  \/\/                   [- init \/ pre_stride             ]                                           (14)\n+  \/\/                   [- invar \/ (iv_scale * pre_stride)  ]\n+  \/\/                   [- init \/ pre_stride                ]                                           (14)\n@@ -2083,1 +855,1 @@\n-  \/\/   q (periodicity), r (constant alignment), invar, scale, pre_stride, init\n+  \/\/   q (periodicity), r (constant alignment), invar, iv_scale, pre_stride, init\n@@ -2090,1 +862,1 @@\n-  return new ConstrainedAlignmentSolution(_mem_ref, q, r, _invar, _scale);\n+  return new ConstrainedAlignmentSolution(_mem_ref, q, r, _vpointer \/* holds invar and iv_scale *\/);\n@@ -2098,1 +870,1 @@\n-  \/\/   (base + offset + invar + scale * iv) % aw =\n+  \/\/   (base + invar + iv_scale * iv + con) % aw =\n@@ -2101,1 +873,1 @@\n-  \/\/   (base + offset + invar + scale * (init + pre_stride * pre_iter + main_stride * main_iter)) % aw =\n+  \/\/   (base + con + invar + iv_scale * (init + pre_stride * pre_iter + main_stride * main_iter)) % aw =\n@@ -2104,4 +876,4 @@\n-  \/\/   (base + offset + invar\n-  \/\/         + scale * init\n-  \/\/         + scale * pre_stride * pre_iter\n-  \/\/         + scale * main_stride * main_iter)) % aw =\n+  \/\/   (base + con + invar\n+  \/\/         + iv_scale * init\n+  \/\/         + iv_scale * pre_stride * pre_iter\n+  \/\/         + iv_scale * main_stride * main_iter)) % aw =\n@@ -2110,2 +882,3 @@\n-  \/\/   -> main-loop iterations aligned (2): C_main % aw = (scale * main_stride) % aw = 0\n-  \/\/   (offset + invar + scale * init + scale * pre_stride * pre_iter) % aw =\n+  \/\/        TODO: Note: this assumption is incorrect for native memory bases, see JDK-8323582.\n+  \/\/   -> main-loop iterations aligned (2): C_main % aw = (iv_scale * main_stride) % aw = 0\n+  \/\/   (con + invar + iv_scale * init + iv_scale * pre_stride * pre_iter) % aw =\n@@ -2114,4 +887,4 @@\n-  \/\/   (offset + invar + scale * init\n-  \/\/           + scale * pre_stride * (m * q - C_const \/ (scale * pre_stride)\n-  \/\/                                        [- invar \/ (scale * pre_stride) ]\n-  \/\/                                        [- init \/ pre_stride            ]\n+  \/\/   (con + invar + iv_scale * init\n+  \/\/        + iv_scale * pre_stride * (m * q - C_const \/ (iv_scale * pre_stride)\n+  \/\/                                        [- invar \/ (iv_scale * pre_stride) ]\n+  \/\/                                        [- init \/ pre_stride               ]\n@@ -2121,6 +894,6 @@\n-  \/\/   -> expand C_const = offset [+ init * scale]  (if init const)\n-  \/\/   (offset + invar + scale * init\n-  \/\/           + scale * pre_stride * (m * q - offset \/ (scale * pre_stride)\n-  \/\/                                        [- init \/ pre_stride            ]             (if init constant)\n-  \/\/                                        [- invar \/ (scale * pre_stride) ]             (if invar present)\n-  \/\/                                        [- init \/ pre_stride            ]             (if init variable)\n+  \/\/   -> expand C_const = con [+ init * iv_scale]  (if init const)\n+  \/\/   (con + invar + iv_scale * init\n+  \/\/        + iv_scale * pre_stride * (m * q - con \/ (iv_scale * pre_stride)\n+  \/\/                                        [- init \/ pre_stride               ]          (if init constant)\n+  \/\/                                        [- invar \/ (iv_scale * pre_stride) ]          (if invar present)\n+  \/\/                                        [- init \/ pre_stride               ]          (if init variable)\n@@ -2132,2 +905,2 @@\n-  \/\/   -> apply (8): q = aw \/ (abs(C_pre)) = aw \/ abs(scale * pre_stride)\n-  \/\/   -> and hence: (scale * pre_stride * q) % aw = 0\n+  \/\/   -> apply (8): q = aw \/ (abs(C_pre)) = aw \/ abs(iv_scale * pre_stride)\n+  \/\/   -> and hence: (iv_scale * pre_stride * q) % aw = 0\n@@ -2135,5 +908,5 @@\n-  \/\/   (offset + invar + scale * init\n-  \/\/           + scale * pre_stride * m * q                             -> aw aligned\n-  \/\/           - scale * pre_stride * offset \/ (scale * pre_stride)     -> = offset\n-  \/\/           - scale * pre_stride * init \/ pre_stride                 -> = scale * init\n-  \/\/           - scale * pre_stride * invar \/ (scale * pre_stride)      -> = invar\n+  \/\/   (con + invar + iv_scale * init\n+  \/\/        + iv_scale * pre_stride * m * q                              -> aw aligned\n+  \/\/        - iv_scale * pre_stride * con   \/ (iv_scale * pre_stride)    -> = con\n+  \/\/        - iv_scale * pre_stride * init  \/ pre_stride                 -> = iv_scale * init\n+  \/\/        - iv_scale * pre_stride * invar \/ (iv_scale * pre_stride)    -> = invar\n@@ -2150,2 +923,3 @@\n-    tty->print_cr(\"  vector_width = vector_length(%d) * element_size(%d) = %d\",\n-                  _vector_length, _element_size, _vector_width);\n+    tty->print(\"  VPointer: \");\n+    _vpointer.print_on(tty);\n+    tty->print_cr(\"  vector_width = %d\", _vector_width);\n@@ -2160,3 +934,11 @@\n-    if (_invar != nullptr) {\n-      tty->print(\"  invar:\");\n-      _invar->dump();\n+    tty->print_cr(\"  invar = SUM(invar_summands), invar_summands:\");\n+    int invar_count = 0;\n+    _vpointer.for_each_invar_summand([&] (const MemPointerSummand& s) {\n+      tty->print(\"   \");\n+      s.print_on(tty);\n+      tty->print(\" -> \");\n+      s.variable()->dump();\n+      invar_count++;\n+    });\n+    if (invar_count == 0) {\n+      tty->print_cr(\"   No invar_summands.\");\n@@ -2165,1 +947,2 @@\n-    tty->print_cr(\"  invar_factor = %d\", _invar_factor);\n+    const jint invar_factor = _vpointer.compute_invar_factor();\n+    tty->print_cr(\"  invar_factor = %d\", invar_factor);\n@@ -2169,1 +952,5 @@\n-    VPointer::print_con_or_idx(_init_node);\n+    if (_init_node->is_ConI()) {\n+      tty->print(\"(%4d)\", _init_node->as_ConI()->get_int());\n+    } else {\n+      tty->print(\"[%4d]\", _init_node->_idx);\n+    }\n@@ -2172,7 +959,3 @@\n-\n-    \/\/ adr = base + offset + invar + scale * iv\n-    tty->print(\"  adr = base\");\n-    VPointer::print_con_or_idx(_base);\n-    tty->print(\" + offset(%d) + invar\", _offset);\n-    VPointer::print_con_or_idx(_invar);\n-    tty->print_cr(\" + scale(%d) * iv\", _scale);\n+    \/\/ adr = base + con + invar + iv_scale * iv\n+    tty->print(\"  adr = base[%d]\", base().object_or_native()->_idx);\n+    tty->print(\" + invar + iv_scale(%d) * iv + con(%d)\", iv_scale(), _vpointer.con());\n@@ -2190,1 +973,1 @@\n-    tty->print(\"      = base[%d] + \", _base->_idx);\n+    tty->print(\"      = base[%d] + \", base().object_or_native()->_idx);\n@@ -2200,1 +983,1 @@\n-      tty->print_cr(\"    C_init = abs(scale)= %d\", C_init);\n+      tty->print_cr(\"    C_init = abs(iv_scale)= %d\", C_init);\n@@ -2202,1 +985,1 @@\n-    if (_invar != nullptr) {\n+    if (C_invar != 0) {\n@@ -2204,1 +987,1 @@\n-      tty->print_cr(\"    C_invar = abs(invar_factor) = %d\", C_invar);\n+      tty->print_cr(\"    C_invar = invar_factor = %d\", C_invar);\n@@ -2209,6 +992,6 @@\n-    tty->print_cr(\"  C_const = offset(%d) + scale(%d) * C_const_init(%d) = %d\",\n-                  _offset, _scale, C_const_init, C_const);\n-    tty->print_cr(\"  C_pre   = scale(%d) * pre_stride(%d) = %d\",\n-                  _scale, _pre_stride, C_pre);\n-    tty->print_cr(\"  C_main  = scale(%d) * main_stride(%d) = %d\",\n-                  _scale, _main_stride, C_main);\n+    tty->print_cr(\"  C_const = con(%d) + iv_scale(%d) * C_const_init(%d) = %d\",\n+                  _vpointer.con(), iv_scale(), C_const_init, C_const);\n+    tty->print_cr(\"  C_pre   = iv_scale(%d) * pre_stride(%d) = %d\",\n+                  iv_scale(), _pre_stride, C_pre);\n+    tty->print_cr(\"  C_main  = iv_scale(%d) * main_stride(%d) = %d\",\n+                  iv_scale(), _main_stride, C_main);\n@@ -2283,2 +1066,2 @@\n-    tty->print_cr(\"  r = (-C_const(%d) \/ (scale(%d) * pre_stride(%d)) %% q(%d) = %d\",\n-                  C_const, _scale, _pre_stride, q, r);\n+    tty->print_cr(\"  r = (-C_const(%d) \/ (iv_scale(%d) * pre_stride(%d)) %% q(%d) = %d\",\n+                  C_const, iv_scale(), _pre_stride, q, r);\n@@ -2287,3 +1070,3 @@\n-    if (_invar != nullptr) {\n-      tty->print_cr(\"                                 - invar \/ (scale(%d) * pre_stride(%d))\",\n-                    _scale, _pre_stride);\n+    if (C_invar != 0) {\n+      tty->print_cr(\"                                 - invar \/ (iv_scale(%d) * pre_stride(%d))\",\n+                    iv_scale(), _pre_stride);\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":136,"deletions":1353,"binary":false,"changes":1489,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"opto\/mempointer.hpp\"\n@@ -88,0 +89,1 @@\n+  NOT_PRODUCT(TraceMemPointer _mptrace;)\n@@ -105,1 +107,12 @@\n-    _pre_loop_end (nullptr) {}\n+    _pre_loop_end (nullptr)\n+#ifndef PRODUCT\n+    COMMA\n+    _mptrace(TraceMemPointer(\n+      _vtrace.is_trace(TraceAutoVectorizationTag::POINTER_PARSING),\n+      _vtrace.is_trace(TraceAutoVectorizationTag::POINTER_ALIASING),\n+      _vtrace.is_trace(TraceAutoVectorizationTag::POINTER_ADJACENCY),\n+      _vtrace.is_trace(TraceAutoVectorizationTag::POINTER_OVERLAP)\n+    ))\n+#endif\n+    {}\n+\n@@ -136,1 +149,2 @@\n-  const VTrace& vtrace()      const { return _vtrace; }\n+  const VTrace& vtrace()           const { return _vtrace; }\n+  const TraceMemPointer& mptrace() const { return _mptrace; }\n@@ -165,4 +179,0 @@\n-\n-  bool is_trace_pointer_analysis() const {\n-    return _vtrace.is_trace(TraceAutoVectorizationTag::POINTER_ANALYSIS);\n-  }\n@@ -178,0 +188,21 @@\n+  \/\/ Some nodes must be pre-loop invariant, so that they can be used for conditions\n+  \/\/ before or inside the pre-loop. For example, alignment of main-loop vector\n+  \/\/ memops must be achieved in the pre-loop, via the exit check in the pre-loop.\n+  bool is_pre_loop_invariant(Node* n) const {\n+    \/\/ Must be in the main-loop, otherwise we can't access the pre-loop.\n+    \/\/ This fails during SuperWord::unrolling_analysis, but that is ok.\n+    if (!cl()->is_main_loop()) {\n+      return false;\n+    }\n+\n+    Node* ctrl = phase()->get_ctrl(n);\n+\n+    \/\/ Quick test: is it in the main-loop?\n+    if (lpt()->is_member(phase()->get_loop(ctrl))) {\n+      return false;\n+    }\n+\n+    \/\/ Is it before the pre-loop?\n+    return phase()->is_dominator(ctrl, pre_loop_head());\n+  }\n+\n@@ -430,1 +461,1 @@\n-  int data_size(Node* s) const {\n+  int data_size(const Node* s) const {\n@@ -670,3 +701,1 @@\n-\/\/ A vectorization pointer (VPointer) has information about an address for\n-\/\/ dependence checking and vector alignment. It's usually bound to a memory\n-\/\/ operation in a counted loop for vectorizable analysis.\n+\/\/ Reminder: MemPointer have the form:\n@@ -674,1 +703,1 @@\n-\/\/ We parse and represent pointers of the simple form:\n+\/\/   pointer = SUM(summands) + con\n@@ -676,1 +705,1 @@\n-\/\/   pointer   = adr + offset + invar + scale * ConvI2L(iv)\n+\/\/ Where every summand in summands has the form:\n@@ -678,10 +707,1 @@\n-\/\/ Where:\n-\/\/\n-\/\/   adr: the base address of an array (base = adr)\n-\/\/        OR\n-\/\/        some address to off-heap memory (base = TOP)\n-\/\/\n-\/\/   offset: a constant offset\n-\/\/   invar:  a runtime variable, which is invariant during the loop\n-\/\/   scale:  scaling factor\n-\/\/   iv:     loop induction variable\n+\/\/   summand = scale * variable\n@@ -689,1 +709,2 @@\n-\/\/ But more precisely, we parse the composite-long-int form:\n+\/\/ The VPointer wraps a MemPointer for the use in loops. A \"valid\" VPointer has\n+\/\/ the form:\n@@ -691,1 +712,4 @@\n-\/\/   pointer   = adr + long_offset + long_invar + long_scale * ConvI2L(int_offset + inv_invar + int_scale * iv)\n+\/\/   pointer = base + invar + iv_summand + con\n+\/\/ with\n+\/\/   invar = SUM(invar_summands)\n+\/\/   iv_summand = iv_scale * iv\n@@ -693,10 +717,13 @@\n-\/\/   pointer   = adr + long_offset + long_invar + long_scale * ConvI2L(int_index)\n-\/\/   int_index =       int_offset  + int_invar  + int_scale  * iv\n-\/\/\n-\/\/ However, for aliasing and adjacency checks (e.g. VPointer::cmp()) we always use the simple form to make\n-\/\/ decisions. Hence, we must make sure to only create a \"valid\" VPointer if the optimisations based on the\n-\/\/ simple form produce the same result as the compound-long-int form would. Intuitively, this depends on\n-\/\/ if the int_index overflows, but the precise conditions are given in VPointer::is_safe_to_use_as_simple_form().\n-\/\/\n-\/\/   ConvI2L(int_index) = ConvI2L(int_offset  + int_invar  + int_scale  * iv)\n-\/\/                      = Convi2L(int_offset) + ConvI2L(int_invar) + ConvI2L(int_scale) * ConvI2L(iv)\n+\/\/ Where:\n+\/\/   - base: is the known base of the MemPointer.\n+\/\/       on-heap (object base) or off-heap (native base address)\n+\/\/   - iv and iv_scale: i.e. the iv_summand = iv * iv_scale.\n+\/\/       If we find a summand where the variable is the iv, we set iv_scale to the\n+\/\/       corresponding scale. If there is no such summand, then we know that the\n+\/\/       pointer does not depend on the iv, since otherwise there would have to be\n+\/\/       a summand where its variable is main-loop variant. Note: MemPointer already\n+\/\/       ensures that there is at most one summand per variable, so there is at\n+\/\/       most one summand with iv.\n+\/\/   - invar_summands: all other summands except base and iv_summand.\n+\/\/       All variables must be pre-loop invariant. This is important when we need\n+\/\/       to memory align a pointer using the pre-loop limit.\n@@ -704,3 +731,8 @@\n-\/\/   scale  = long_scale * ConvI2L(int_scale)\n-\/\/   offset = long_offset + long_scale * ConvI2L(int_offset)\n-\/\/   invar  = long_invar  + long_scale * ConvI2L(int_invar)\n+\/\/ These are examples where a VPointer becomes \"invalid\":\n+\/\/    - If the MemPointer does not have the required form for VPointer,\n+\/\/      i.e. if one of these conditions is not met (see init_is_valid):\n+\/\/      - Base must be known.\n+\/\/      - All summands except the iv-summand must be pre-loop invariant.\n+\/\/      - Some restrictions on iv_scale and iv_stride, to avoid overflow in\n+\/\/        alignment computations.\n+\/\/    - If the new con computed in make_with_iv_offset overflows.\n@@ -708,1 +740,9 @@\n-\/\/   pointer   = adr + offset + invar + scale * ConvI2L(iv)\n+\/\/ If a VPointer is marked \"invalid\", it always returns conservative answers to\n+\/\/ aliasing queries, which means that we do not optimize in these cases.\n+\/\/ For example:\n+\/\/    - is_adjacent_to_and_before: returning true would allow optimizations such as\n+\/\/                                 packing into vectors. So for \"invalid\" VPointers,\n+\/\/                                 we always return false (i.e. unknown).\n+\/\/    - never_overlaps_with: returning true would allow optimizations such as\n+\/\/                           swapping the order of memops. So for \"invalid\" VPointers,\n+\/\/                           we always return false (i.e. unknown).\n@@ -711,16 +751,3 @@\n- protected:\n-  MemNode* const  _mem;      \/\/ My memory reference node\n-  const VLoop&    _vloop;\n-\n-  \/\/ Components of the simple form:\n-  Node* _base;               \/\/ Base address of an array OR null if some off-heap memory.\n-  Node* _adr;                \/\/ Same as _base if an array pointer OR some off-heap memory pointer.\n-  int   _scale;              \/\/ multiplier for iv (in bytes), 0 if no loop iv\n-  int   _offset;             \/\/ constant offset (in bytes)\n-\n-  Node* _invar;              \/\/ invariant offset (in bytes), null if none\n-#ifdef ASSERT\n-  Node* _debug_invar;\n-  bool  _debug_negate_invar; \/\/ if true then use: (0 - _invar)\n-  Node* _debug_invar_scale;  \/\/ multiplier for invariant\n-#endif\n+private:\n+  const VLoop& _vloop;\n+  const MemPointer _mem_pointer;\n@@ -728,33 +755,4 @@\n-  \/\/ The int_index components of the compound-long-int form. Used to decide if it is safe to use the\n-  \/\/ simple form rather than the compound-long-int form that was parsed.\n-  bool  _has_int_index_after_convI2L;\n-  int   _int_index_after_convI2L_offset;\n-  Node* _int_index_after_convI2L_invar;\n-  int   _int_index_after_convI2L_scale;\n-\n-  Node_Stack* _nstack;       \/\/ stack used to record a vpointer trace of variants\n-  bool        _analyze_only; \/\/ Used in loop unrolling only for vpointer trace\n-  uint        _stack_idx;    \/\/ Used in loop unrolling only for vpointer trace\n-\n-  PhaseIdealLoop* phase() const { return _vloop.phase(); }\n-  IdealLoopTree*  lpt() const   { return _vloop.lpt(); }\n-  PhiNode*        iv() const    { return _vloop.iv(); }\n-\n-  bool is_loop_member(Node* n) const;\n-  bool invariant(Node* n) const;\n-\n-  \/\/ Match: k*iv + offset\n-  bool scaled_iv_plus_offset(Node* n);\n-  \/\/ Match: k*iv where k is a constant that's not zero\n-  bool scaled_iv(Node* n);\n-  \/\/ Match: offset is (k [+\/- invariant])\n-  bool offset_plus_k(Node* n, bool negate = false);\n-\n- public:\n-  enum CMP {\n-    Less          = 1,\n-    Greater       = 2,\n-    Equal         = 4,\n-    NotEqual      = (Less | Greater),\n-    NotComparable = (Less | Greater | Equal)\n-  };\n+  \/\/ Derived, for quicker use.\n+  const jint  _iv_scale;\n+\n+  const bool _is_valid;\n@@ -762,37 +760,10 @@\n-  VPointer(MemNode* const mem, const VLoop& vloop) :\n-    VPointer(mem, vloop, nullptr, false) {}\n-  VPointer(MemNode* const mem, const VLoop& vloop, Node_Stack* nstack) :\n-    VPointer(mem, vloop, nstack, true) {}\n- private:\n-  VPointer(MemNode* const mem, const VLoop& vloop,\n-           Node_Stack* nstack, bool analyze_only);\n-  \/\/ Following is used to create a temporary object during\n-  \/\/ the pattern match of an address expression.\n-  VPointer(VPointer* p);\n-  NONCOPYABLE(VPointer);\n-\n-  bool is_safe_to_use_as_simple_form(Node* base, Node* adr) const;\n-\n- public:\n-  bool valid()             const { return _adr != nullptr; }\n-  bool has_iv()            const { return _scale != 0; }\n-\n-  Node* base()             const { return _base; }\n-  Node* adr()              const { return _adr; }\n-  MemNode* mem()           const { return _mem; }\n-  int   scale_in_bytes()   const { return _scale; }\n-  Node* invar()            const { return _invar; }\n-  int   offset_in_bytes()  const { return _offset; }\n-  int   memory_size()      const { return _mem->memory_size(); }\n-  Node_Stack* node_stack() const { return _nstack; }\n-\n-  \/\/ Biggest detectable factor of the invariant.\n-  int   invar_factor() const;\n-\n-  \/\/ Comparable?\n-  bool invar_equals(const VPointer& q) const {\n-    assert(_debug_invar == NodeSentinel || q._debug_invar == NodeSentinel ||\n-           (_invar == q._invar) == (_debug_invar == q._debug_invar &&\n-                                    _debug_invar_scale == q._debug_invar_scale &&\n-                                    _debug_negate_invar == q._debug_negate_invar), \"\");\n-    return _invar == q._invar;\n+  VPointer(const VLoop& vloop,\n+           const MemPointer& mem_pointer,\n+           const bool must_be_invalid = false) :\n+    _vloop(vloop),\n+    _mem_pointer(mem_pointer),\n+    _iv_scale(init_iv_scale()),\n+    _is_valid(!must_be_invalid && init_is_valid()) {}\n+\n+  VPointer make_invalid() const {\n+    return VPointer(_vloop, mem_pointer(), true \/* must be invalid*\/);\n@@ -801,42 +772,14 @@\n-  \/\/ We compute if and how two VPointers can alias at runtime, i.e. if the two addressed regions of memory can\n-  \/\/ ever overlap. There are essentially 3 relevant return states:\n-  \/\/  - NotComparable:  Synonymous to \"unknown aliasing\".\n-  \/\/                    We have no information about how the two VPointers can alias. They could overlap, refer\n-  \/\/                    to another location in the same memory object, or point to a completely different object.\n-  \/\/                    -> Memory edge required. Aliasing unlikely but possible.\n-  \/\/\n-  \/\/  - Less \/ Greater: Synonymous to \"never aliasing\".\n-  \/\/                    The two VPointers may point into the same memory object, but be non-aliasing (i.e. we\n-  \/\/                    know both address regions inside the same memory object, but these regions are non-\n-  \/\/                    overlapping), or the VPointers point to entirely different objects.\n-  \/\/                    -> No memory edge required. Aliasing impossible.\n-  \/\/\n-  \/\/  - Equal:          Synonymous to \"overlap, or point to different memory objects\".\n-  \/\/                    The two VPointers either overlap on the same memory object, or point to two different\n-  \/\/                    memory objects.\n-  \/\/                    -> Memory edge required. Aliasing likely.\n-  \/\/\n-  \/\/ In a future refactoring, we can simplify to two states:\n-  \/\/  - NeverAlias:     instead of Less \/ Greater\n-  \/\/  - MayAlias:       instead of Equal \/ NotComparable\n-  \/\/\n-  \/\/ Two VPointer are \"comparable\" (Less \/ Greater \/ Equal), iff all of these conditions apply:\n-  \/\/   1) Both are valid, i.e. expressible in the compound-long-int or simple form.\n-  \/\/   2) The adr are identical, or both are array bases of different arrays.\n-  \/\/   3) They have identical scale.\n-  \/\/   4) They have identical invar.\n-  \/\/   5) The difference in offsets is limited: abs(offset0 - offset1) < 2^31.\n-  int cmp(const VPointer& q) const {\n-    if (valid() && q.valid() &&\n-        (_adr == q._adr || (_base == _adr && q._base == q._adr)) &&\n-        _scale == q._scale   && invar_equals(q)) {\n-      jlong difference = abs(java_subtract((jlong)_offset, (jlong)q._offset));\n-      jlong max_diff = (jlong)1 << 31;\n-      if (difference >= max_diff) {\n-        return NotComparable;\n-      }\n-      bool overlap = q._offset <   _offset +   memory_size() &&\n-                       _offset < q._offset + q.memory_size();\n-      return overlap ? Equal : (_offset < q._offset ? Less : Greater);\n-    } else {\n-      return NotComparable;\n+public:\n+  VPointer(const MemNode* mem,\n+           const VLoop& vloop,\n+           MemPointerParserCallback& callback = MemPointerParserCallback::empty()) :\n+    VPointer(vloop,\n+             MemPointer(mem,\n+                        callback\n+                        NOT_PRODUCT(COMMA vloop.mptrace())))\n+  {\n+#ifndef PRODUCT\n+    if (vloop.mptrace().is_trace_parsing()) {\n+      tty->print_cr(\"VPointer::VPointer:\");\n+      tty->print(\"mem: \"); mem->dump();\n+      print_on(tty);\n@@ -844,0 +787,1 @@\n+#endif\n@@ -846,10 +790,7 @@\n-  bool overlap_possible_with_any_in(const GrowableArray<Node*>& nodes) const {\n-    for (int i = 0; i < nodes.length(); i++) {\n-      MemNode* mem = nodes.at(i)->as_Mem();\n-      VPointer p_mem(mem, _vloop);\n-      \/\/ Only if we know that we have Less or Greater can we\n-      \/\/ be sure that there can never be an overlap between\n-      \/\/ the two memory regions.\n-      if (!not_equal(p_mem)) {\n-        return true;\n-      }\n+  VPointer make_with_size(const jint new_size) const {\n+    const VPointer p(_vloop, mem_pointer().make_with_size(new_size));\n+#ifndef PRODUCT\n+    if (_vloop.mptrace().is_trace_parsing()) {\n+      tty->print_cr(\"VPointer::make_with_size:\");\n+      tty->print(\"  old: \"); print_on(tty);\n+      tty->print(\"  new: \"); p.print_on(tty);\n@@ -857,1 +798,2 @@\n-    return false;\n+#endif\n+    return p;\n@@ -860,15 +802,16 @@\n-  bool not_equal(const VPointer& q)  const { return not_equal(cmp(q)); }\n-  bool equal(const VPointer& q)      const { return equal(cmp(q)); }\n-  bool comparable(const VPointer& q) const { return comparable(cmp(q)); }\n-  static bool not_equal(int cmp)  { return cmp <= NotEqual; }\n-  static bool equal(int cmp)      { return cmp == Equal; }\n-  static bool comparable(int cmp) { return cmp < NotComparable; }\n-\n-  \/\/ We need to be able to sort the VPointer to efficiently group the\n-  \/\/ memops into groups, and to find adjacent memops.\n-  static int cmp_for_sort_by_group(const VPointer** p1, const VPointer** p2);\n-  static int cmp_for_sort(const VPointer** p1, const VPointer** p2);\n-\n-  NOT_PRODUCT( void print() const; )\n-  NOT_PRODUCT( static void print_con_or_idx(const Node* n); )\n-\n+  \/\/ old_pointer = base + invar + iv_scale *  iv              + con\n+  \/\/ new_pointer = base + invar + iv_scale * (iv + iv_offset) + con\n+  \/\/             = base + invar + iv_scale * iv               + (con + iv_scale * iv_offset)\n+  VPointer make_with_iv_offset(const jint iv_offset) const {\n+    NoOverflowInt new_con = NoOverflowInt(con()) + NoOverflowInt(iv_scale()) * NoOverflowInt(iv_offset);\n+    if (new_con.is_NaN()) {\n+#ifndef PRODUCT\n+      if (_vloop.mptrace().is_trace_parsing()) {\n+        tty->print_cr(\"VPointer::make_with_iv_offset:\");\n+        tty->print(\"  old: \"); print_on(tty);\n+        tty->print_cr(\"  new con overflow (iv_offset: %d) -> invalid VPointer.\", iv_offset);\n+      }\n+#endif\n+      return make_invalid();\n+    }\n+    const VPointer p(_vloop, mem_pointer().make_with_con(new_con));\n@@ -876,61 +819,5 @@\n-  class Tracer {\n-    friend class VPointer;\n-    bool _is_trace_alignment;\n-    static int _depth;\n-    int _depth_save;\n-    void print_depth() const;\n-    int  depth() const    { return _depth; }\n-    void set_depth(int d) { _depth = d; }\n-    void inc_depth()      { _depth++; }\n-    void dec_depth()      { if (_depth > 0) _depth--; }\n-    void store_depth()    { _depth_save = _depth; }\n-    void restore_depth()  { _depth = _depth_save; }\n-\n-    class Depth {\n-      friend class VPointer;\n-      Depth()      { ++_depth; }\n-      Depth(int x) { _depth = 0; }\n-      ~Depth()     { if (_depth > 0) --_depth; }\n-    };\n-    Tracer(bool is_trace_alignment) : _is_trace_alignment(is_trace_alignment) {}\n-\n-    \/\/ tracing functions\n-    void ctor_1(const Node* mem);\n-    void ctor_2(Node* adr);\n-    void ctor_3(Node* adr, int i);\n-    void ctor_4(Node* adr, int i);\n-    void ctor_5(Node* adr, Node* base,  int i);\n-    void ctor_6(const Node* mem);\n-\n-    void scaled_iv_plus_offset_1(Node* n);\n-    void scaled_iv_plus_offset_2(Node* n);\n-    void scaled_iv_plus_offset_3(Node* n);\n-    void scaled_iv_plus_offset_4(Node* n);\n-    void scaled_iv_plus_offset_5(Node* n);\n-    void scaled_iv_plus_offset_6(Node* n);\n-    void scaled_iv_plus_offset_7(Node* n);\n-    void scaled_iv_plus_offset_8(Node* n);\n-\n-    void scaled_iv_1(Node* n);\n-    void scaled_iv_2(Node* n, int scale);\n-    void scaled_iv_3(Node* n, int scale);\n-    void scaled_iv_4(Node* n, int scale);\n-    void scaled_iv_5(Node* n, int scale);\n-    void scaled_iv_6(Node* n, int scale);\n-    void scaled_iv_7(Node* n);\n-    void scaled_iv_8(Node* n, VPointer* tmp);\n-    void scaled_iv_9(Node* n, int _scale, int _offset, Node* _invar);\n-    void scaled_iv_10(Node* n);\n-\n-    void offset_plus_k_1(Node* n);\n-    void offset_plus_k_2(Node* n, int _offset);\n-    void offset_plus_k_3(Node* n, int _offset);\n-    void offset_plus_k_4(Node* n);\n-    void offset_plus_k_5(Node* n, Node* _invar);\n-    void offset_plus_k_6(Node* n, Node* _invar, bool _negate_invar, int _offset);\n-    void offset_plus_k_7(Node* n, Node* _invar, bool _negate_invar, int _offset);\n-    void offset_plus_k_8(Node* n, Node* _invar, bool _negate_invar, int _offset);\n-    void offset_plus_k_9(Node* n, Node* _invar, bool _negate_invar, int _offset);\n-    void offset_plus_k_10(Node* n, Node* _invar, bool _negate_invar, int _offset);\n-    void offset_plus_k_11(Node* n);\n-  } _tracer; \/\/ Tracer\n+    if (_vloop.mptrace().is_trace_parsing()) {\n+      tty->print_cr(\"VPointer::make_with_iv_offset:\");\n+      tty->print(\"  old: \"); print_on(tty);\n+      tty->print(\"  new: \"); p.print_on(tty);\n+    }\n@@ -938,0 +825,2 @@\n+    return p;\n+  }\n@@ -939,1 +828,6 @@\n-  Node* maybe_negate_invar(bool negate, Node* invar);\n+  \/\/ Accessors\n+  bool is_valid()                 const { return _is_valid; }\n+  const MemPointer& mem_pointer() const { assert(_is_valid, \"must be valid\"); return _mem_pointer; }\n+  jint size()                     const { assert(_is_valid, \"must be valid\"); return mem_pointer().size(); }\n+  jint iv_scale()                 const { assert(_is_valid, \"must be valid\"); return _iv_scale; }\n+  jint con()                      const { return mem_pointer().con().value(); }\n@@ -941,1 +835,10 @@\n-  void maybe_add_to_invar(Node* new_invar, bool negate);\n+  template<typename Callback>\n+  void for_each_invar_summand(Callback callback) const {\n+    mem_pointer().for_each_non_empty_summand([&] (const MemPointerSummand& s) {\n+      Node* variable = s.variable();\n+      if (variable != mem_pointer().base().object_or_native() &&\n+          _vloop.is_pre_loop_invariant(variable)) {\n+        callback(s);\n+      }\n+    });\n+  }\n@@ -943,5 +846,15 @@\n-  static bool try_AddI_no_overflow(int offset1, int offset2, int& result);\n-  static bool try_SubI_no_overflow(int offset1, int offset2, int& result);\n-  static bool try_AddSubI_no_overflow(int offset1, int offset2, bool is_sub, int& result);\n-  static bool try_LShiftI_no_overflow(int offset1, int offset2, int& result);\n-  static bool try_MulI_no_overflow(int offset1, int offset2, int& result);\n+  \/\/ Greatest common factor among the scales of the invar_summands.\n+  \/\/ Out of simplicity, we only factor out positive powers-of-2,\n+  \/\/ between (inclusive) 1 and ObjectAlignmentInBytes. If the invar\n+  \/\/ is empty, i.e. there is no summand in invar_summands, we return 0.\n+  jint compute_invar_factor() const {\n+    jint factor = ObjectAlignmentInBytes;\n+    int invar_count = 0;\n+    for_each_invar_summand([&] (const MemPointerSummand& s) {\n+      invar_count++;\n+      while (!s.scale().is_multiple_of(NoOverflowInt(factor))) {\n+        factor = factor \/ 2;\n+      }\n+    });\n+    return invar_count > 0 ? factor : 0;\n+  }\n@@ -949,2 +862,7 @@\n-  Node* register_if_new(Node* n) const;\n-};\n+  bool has_invar_summands() const {\n+    int invar_count = 0;\n+    for_each_invar_summand([&] (const MemPointerSummand& s) {\n+      invar_count++;\n+    });\n+    return invar_count > 0;\n+  }\n@@ -952,0 +870,5 @@\n+  \/\/ If we have the same invar_summands, and the same iv summand with the same iv_scale,\n+  \/\/ then all summands except the base must be the same.\n+  bool has_same_invar_summands_and_iv_scale_as(const VPointer& other) const {\n+    return mem_pointer().has_same_non_base_summands_as(other.mem_pointer());\n+  }\n@@ -953,6 +876,0 @@\n-\/\/ Vector element size statistics for loop vectorization with vector masks\n-class VectorElementSizeStats {\n- private:\n-  static const int NO_SIZE = -1;\n-  static const int MIXED_SIZE = -2;\n-  int* _stats;\n@@ -960,3 +877,12 @@\n- public:\n-  VectorElementSizeStats(Arena* a) : _stats(NEW_ARENA_ARRAY(a, int, 4)) {\n-    clear();\n+  \/\/ Delegate to MemPointer::is_adjacent_to_and_before, but guard for invalid cases\n+  \/\/ where we must return a conservative answer: unknown adjacency, return false.\n+  bool is_adjacent_to_and_before(const VPointer& other) const {\n+    if (!is_valid() || !other.is_valid()) {\n+#ifndef PRODUCT\n+      if (_vloop.mptrace().is_trace_overlap()) {\n+        tty->print_cr(\"VPointer::is_adjacent_to_and_before: invalid VPointer, adjacency unknown.\");\n+      }\n+#endif\n+      return false;\n+    }\n+    return mem_pointer().is_adjacent_to_and_before(other.mem_pointer());\n@@ -965,1 +891,15 @@\n-  void clear() { memset(_stats, 0, sizeof(int) * 4); }\n+  \/\/ Delegate to MemPointer::never_overlaps_with, but guard for invalid cases\n+  \/\/ where we must return a conservative answer: unknown overlap, return false.\n+  bool never_overlaps_with(const VPointer& other) const {\n+    if (!is_valid() || !other.is_valid()) {\n+#ifndef PRODUCT\n+      if (_vloop.mptrace().is_trace_overlap()) {\n+        tty->print_cr(\"VPointer::never_overlaps_with: invalid VPointer, overlap unknown.\");\n+      }\n+#endif\n+      return false;\n+    }\n+    return mem_pointer().never_overlaps_with(other.mem_pointer());\n+  }\n+\n+  NOT_PRODUCT( void print_on(outputStream* st, bool end_with_cr = true) const; )\n@@ -967,3 +907,11 @@\n-  void record_size(int size) {\n-    assert(1 <= size && size <= 8 && is_power_of_2(size), \"Illegal size\");\n-    _stats[exact_log2(size)]++;\n+private:\n+  jint init_iv_scale() const {\n+    for (uint i = 0; i < MemPointer::SUMMANDS_SIZE; i++) {\n+      const MemPointerSummand& summand = _mem_pointer.summands_at(i);\n+      Node* variable = summand.variable();\n+      if (variable == _vloop.iv()) {\n+        return summand.scale().value();\n+      }\n+    }\n+    \/\/ No summand with variable == iv.\n+    return 0;\n@@ -972,3 +920,5 @@\n-  int count_size(int size) {\n-    assert(1 <= size && size <= 8 && is_power_of_2(size), \"Illegal size\");\n-    return _stats[exact_log2(size)];\n+  \/\/ Check the conditions for a \"valid\" VPointer.\n+  bool init_is_valid() const {\n+    return init_is_base_known() &&\n+           init_are_non_iv_summands_pre_loop_invariant() &&\n+           init_are_scale_and_stride_not_too_large();\n@@ -977,3 +927,9 @@\n-  int smallest_size() {\n-    for (int i = 0; i <= 3; i++) {\n-      if (_stats[i] > 0) return (1 << i);\n+  \/\/ VPointer needs to know if it is native (off-heap) or object (on-heap).\n+  \/\/ We may, for example, have failed to fully decompose the MemPointer,\n+  \/\/ possibly because such a decomposition is not considered safe.\n+  bool init_is_base_known() const {\n+    if (_mem_pointer.base().is_known()) { return true; }\n+\n+#ifndef PRODUCT\n+    if (_vloop.mptrace().is_trace_parsing()) {\n+      tty->print_cr(\"VPointer::init_is_valid: base not known.\");\n@@ -981,1 +937,2 @@\n-    return NO_SIZE;\n+#endif\n+    return false;\n@@ -984,3 +941,17 @@\n-  int largest_size() {\n-    for (int i = 3; i >= 0; i--) {\n-      if (_stats[i] > 0) return (1 << i);\n+  \/\/ All summands, except the iv-summand, must be pre-loop invariant. This is necessary\n+  \/\/ so that we can use the variables in checks inside or before the pre-loop, e.g. for\n+  \/\/ alignment.\n+  bool init_are_non_iv_summands_pre_loop_invariant() const {\n+    for (uint i = 0; i < MemPointer::SUMMANDS_SIZE; i++) {\n+      const MemPointerSummand& summand = _mem_pointer.summands_at(i);\n+      Node* variable = summand.variable();\n+      if (variable != nullptr && variable != _vloop.iv() && !_vloop.is_pre_loop_invariant(variable)) {\n+#ifndef PRODUCT\n+        if (_vloop.mptrace().is_trace_parsing()) {\n+          tty->print(\"VPointer::init_is_valid: summand is not pre-loop invariant: \");\n+          summand.print_on(tty);\n+          tty->cr();\n+        }\n+#endif\n+        return false;\n+      }\n@@ -988,1 +959,1 @@\n-    return NO_SIZE;\n+    return true;\n@@ -991,4 +962,24 @@\n-  int unique_size() {\n-    int small = smallest_size();\n-    int large = largest_size();\n-    return (small == large) ? small : MIXED_SIZE;\n+  \/\/ In the pointer analysis, and especially the AlignVector analysis, we assume that\n+  \/\/ stride and scale are not too large. For example, we multiply \"iv_scale * iv_stride\",\n+  \/\/ and assume that this does not overflow the int range. We also take \"abs(iv_scale)\"\n+  \/\/ and \"abs(iv_stride)\", which would overflow for min_int = -(2^31). Still, we want\n+  \/\/ to at least allow small and moderately large stride and scale. Therefore, we\n+  \/\/ allow values up to 2^30, which is only a factor 2 smaller than the max\/min int.\n+  \/\/ Normal performance relevant code will have much lower values. And the restriction\n+  \/\/ allows us to keep the rest of the autovectorization code much simpler, since we\n+  \/\/ do not have to deal with overflows.\n+  bool init_are_scale_and_stride_not_too_large() const {\n+    jlong long_iv_scale  = _iv_scale;\n+    jlong long_iv_stride = _vloop.iv_stride();\n+    jlong max_val = 1 << 30;\n+    if (abs(long_iv_scale) >= max_val ||\n+        abs(long_iv_stride) >= max_val ||\n+        abs(long_iv_scale * long_iv_stride) >= max_val) {\n+#ifndef PRODUCT\n+      if (_vloop.mptrace().is_trace_parsing()) {\n+        tty->print_cr(\"VPointer::init_is_valid: scale or stride too large.\");\n+      }\n+#endif\n+      return false;\n+    }\n+    return true;\n@@ -1001,3 +992,3 @@\n-\/\/   adr = base + offset + invar + scale * init\n-\/\/                               + scale * pre_stride * pre_iter\n-\/\/                               + scale * main_stride * main_iter\n+\/\/   adr = base + invar + iv_scale * init                      + con\n+\/\/                      + iv_scale * pre_stride * pre_iter\n+\/\/                      + iv_scale * main_stride * main_iter\n@@ -1012,3 +1003,3 @@\n-\/\/   pre_iter = m * q + r                                    (for any integer m)\n-\/\/                   [- invar \/ (scale * pre_stride)  ]      (if there is an invariant)\n-\/\/                   [- init \/ pre_stride             ]      (if init is variable)\n+\/\/   pre_iter = m * q + r                                       (for any integer m)\n+\/\/                   [- invar \/ (iv_scale * pre_stride)  ]      (if there is an invariant)\n+\/\/                   [- init \/ pre_stride                ]      (if init is variable)\n@@ -1040,1 +1031,1 @@\n-  virtual void print() const = 0;\n+  NOT_PRODUCT( virtual void print() const = 0; )\n@@ -1074,0 +1065,1 @@\n+#ifndef PRODUCT\n@@ -1077,0 +1069,1 @@\n+#endif\n@@ -1097,0 +1090,1 @@\n+#ifndef PRODUCT\n@@ -1100,0 +1094,1 @@\n+#endif\n@@ -1107,2 +1102,2 @@\n-  const Node* _invar;\n-  const int _scale;\n+  \/\/ Use VPointer for invar and iv_scale\n+  const VPointer& _vpointer;\n@@ -1113,2 +1108,1 @@\n-                               const Node* invar,\n-                               int scale) :\n+                               const VPointer& vpointer) :\n@@ -1118,2 +1112,2 @@\n-      _invar(invar),\n-      _scale(scale) {\n+      _vpointer(vpointer)\n+  {\n@@ -1130,0 +1124,1 @@\n+  const VPointer& vpointer() const { return _vpointer; }\n@@ -1153,2 +1148,2 @@\n-    \/\/                     [- invar1 \/ (scale1 * pre_stride)  ]\n-    \/\/                     [- init \/ pre_stride               ]\n+    \/\/                     [- invar1 \/ (iv_scale1 * pre_stride)  ]\n+    \/\/                     [- init \/ pre_stride                  ]\n@@ -1157,2 +1152,2 @@\n-    \/\/                     [- invar2 \/ (scale2 * pre_stride)  ]\n-    \/\/                     [- init \/ pre_stride               ]\n+    \/\/                     [- invar2 \/ (iv_scale2 * pre_stride)  ]\n+    \/\/                     [- init \/ pre_stride                  ]\n@@ -1167,1 +1162,1 @@\n-    \/\/   - both mem_refs have the same invariant and the same scale.\n+    \/\/   - both mem_refs have the same invariant and the same iv_scale.\n@@ -1169,5 +1164,7 @@\n-    if (s1->_invar != s2->_invar) {\n-      return new EmptyAlignmentSolution(\"invar not identical\");\n-    }\n-    if (s1->_invar != nullptr && s1->_scale != s2->_scale) {\n-      return new EmptyAlignmentSolution(\"has invar with different scale\");\n+    \/\/ Use VPointer to do checks on invar and iv_scale:\n+    const VPointer& p1 = s1->vpointer();\n+    const VPointer& p2 = s2->vpointer();\n+    bool both_no_invar = !p1.has_invar_summands() &&\n+                         !p2.has_invar_summands();\n+    if(!both_no_invar && !p1.has_same_invar_summands_and_iv_scale_as(p2)) {\n+      return new EmptyAlignmentSolution(\"invar alignment term not identical\");\n@@ -1212,0 +1209,1 @@\n+#ifndef PRODUCT\n@@ -1214,2 +1212,11 @@\n-    if (_invar != nullptr) {\n-      tty->print(\" - invar[%d] \/ (scale(%d) * pre_stride)\", _invar->_idx, _scale);\n+    if (_vpointer.has_invar_summands()) {\n+      tty->print(\" - invar(\");\n+      int count = 0;\n+      _vpointer.for_each_invar_summand([&] (const MemPointerSummand& s) {\n+        if (count > 0) {\n+          tty->print(\" + \");\n+        }\n+        s.print_on(tty);\n+        count++;\n+      });\n+      tty->print(\") \/ (iv_scale(%d) * pre_stride)\", _vpointer.iv_scale());\n@@ -1219,0 +1226,1 @@\n+#endif\n@@ -1233,2 +1241,2 @@\n-\/\/   adr = base + offset + invar + scale * iv\n-\/\/   adr = base + offset + invar + scale * (init + i * pre_stride)\n+\/\/   adr = base + invar + iv_scale * iv                      + con\n+\/\/   adr = base + invar + iv_scale * (init + i * pre_stride) + con\n@@ -1248,1 +1256,1 @@\n-\/\/   adr = base + offset + invar + scale * iv \/\/ must be aligned\n+\/\/   adr = base + invar + iv_scale * iv + con \/\/ must be aligned\n@@ -1260,0 +1268,2 @@\n+  const VPointer& _vpointer;\n+\n@@ -1261,2 +1271,0 @@\n-  const uint     _vector_length; \/\/ number of elements in vector\n-  const int      _element_size;\n@@ -1268,1 +1276,1 @@\n-  \/\/ aligned. For example, the relative offset between two arrays is only guaranteed to\n+  \/\/ aligned. For example, the relative distance between two arrays is only guaranteed to\n@@ -1278,1 +1286,1 @@\n-  \/\/   adr = base + offset + invar + scale * iv\n+  \/\/   adr = base + invar + iv_scale * iv + con\n@@ -1287,5 +1295,0 @@\n-  const Node*    _base;           \/\/ base of address (e.g. Java array object, aw-aligned)\n-  const int      _offset;\n-  const Node*    _invar;\n-  const int      _invar_factor;   \/\/ known constant factor of invar\n-  const int      _scale;\n@@ -1304,1 +1307,2 @@\n-  AlignmentSolver(const MemNode* mem_ref,\n+  AlignmentSolver(const VPointer& vpointer,\n+                  const MemNode* mem_ref,\n@@ -1306,5 +1310,0 @@\n-                  const Node* base,\n-                  const int offset,\n-                  const Node* invar,\n-                  const int invar_factor,\n-                  const int scale,\n@@ -1316,0 +1315,1 @@\n+      _vpointer(          vpointer),\n@@ -1317,3 +1317,1 @@\n-      _vector_length(     vector_length),\n-      _element_size(      _mem_ref->memory_size()),\n-      _vector_width(      _vector_length * _element_size),\n+      _vector_width(      vector_length * vpointer.size()),\n@@ -1321,5 +1319,0 @@\n-      _base(              base),\n-      _offset(            offset),\n-      _invar(             invar),\n-      _invar_factor(      invar_factor),\n-      _scale(             scale),\n@@ -1339,0 +1332,3 @@\n+  MemPointer::Base base() const { return _vpointer.mem_pointer().base();}\n+  jint iv_scale() const { return _vpointer.iv_scale(); }\n+\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":338,"deletions":342,"binary":false,"changes":680,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -147,5 +146,0 @@\n-\/\/ We use two comparisons, because a subtraction could underflow.\n-#define RETURN_CMP_VALUE_IF_NOT_EQUAL(a, b) \\\n-  if (a < b) { return -1; }                 \\\n-  if (a > b) { return  1; }\n-\n@@ -153,2 +147,5 @@\n-\/\/ It represents a memory region: [ptr, ptr + memory_size)\n-class VMemoryRegion : public StackObj {\n+\/\/ It wraps a VPointer. The VPointer has an iv_offset applied, which\n+\/\/ simulates a virtual unrolling. They represent the memory region:\n+\/\/   [adr, adr + size)\n+\/\/   adr = base + invar + iv_scale * (iv + iv_offset) + con\n+class VMemoryRegion : public ResourceObj {\n@@ -156,5 +153,5 @@\n-  Node* _base;        \/\/ ptr = base + offset + invar + scale * iv\n-  int _scale;\n-  Node* _invar;\n-  int _offset;\n-  uint _memory_size;\n+  \/\/ Note: VPointer has no default constructor, so we cannot use VMemoryRegion\n+  \/\/       in-place in a GrowableArray. Hence, we make VMemoryRegion a resource\n+  \/\/       allocated object, so the GrowableArray of VMemoryRegion* has a default\n+  \/\/       nullptr element.\n+  const VPointer _vpointer;\n@@ -165,8 +162,3 @@\n-  VMemoryRegion() {} \/\/ empty constructor for GrowableArray\n-  VMemoryRegion(const VPointer& vpointer, int iv_offset, int vector_length, uint schedule_order) :\n-    _base(vpointer.base()),\n-    _scale(vpointer.scale_in_bytes()),\n-    _invar(vpointer.invar()),\n-    _offset(vpointer.offset_in_bytes() + _scale * iv_offset),\n-    _memory_size(vpointer.memory_size() * vector_length),\n-    _is_load(vpointer.mem()->is_Load()),\n+  VMemoryRegion(const VPointer& vpointer, bool is_load, uint schedule_order) :\n+    _vpointer(vpointer),\n+    _is_load(is_load),\n@@ -175,5 +167,1 @@\n-    Node* base()          const { return _base; }\n-    int scale()           const { return _scale; }\n-    Node* invar()         const { return _invar; }\n-    int offset()          const { return _offset; }\n-    uint memory_size()    const { return _memory_size; }\n+    const VPointer& vpointer() const { return _vpointer; }\n@@ -184,6 +172,3 @@\n-      RETURN_CMP_VALUE_IF_NOT_EQUAL(r1->base()->_idx, r2->base()->_idx);\n-      RETURN_CMP_VALUE_IF_NOT_EQUAL(r1->scale(),      r2->scale());\n-      int r1_invar_idx = r1->invar() == nullptr ? 0 : r1->invar()->_idx;\n-      int r2_invar_idx = r2->invar() == nullptr ? 0 : r2->invar()->_idx;\n-      RETURN_CMP_VALUE_IF_NOT_EQUAL(r1_invar_idx,      r2_invar_idx);\n-      return 0; \/\/ equal\n+      \/\/ Sort by mem_pointer (base, invar, iv_scale), except for the con.\n+      return MemPointer::cmp_summands(r1->vpointer().mem_pointer(),\n+                                      r2->vpointer().mem_pointer());\n@@ -192,2 +177,2 @@\n-    static int cmp_for_sort(VMemoryRegion* r1, VMemoryRegion* r2) {\n-      int cmp_group = cmp_for_sort_by_group(r1, r2);\n+    static int cmp_for_sort(VMemoryRegion** r1, VMemoryRegion** r2) {\n+      int cmp_group = cmp_for_sort_by_group(*r1, *r2);\n@@ -196,2 +181,6 @@\n-      RETURN_CMP_VALUE_IF_NOT_EQUAL(r1->offset(),     r2->offset());\n-      return 0; \/\/ equal\n+      \/\/ We use two comparisons, because a subtraction could underflow.\n+      jint con1 = (*r1)->vpointer().con();\n+      jint con2 = (*r2)->vpointer().con();\n+      if (con1 < con2) { return -1; }\n+      if (con1 > con2) { return  1; }\n+      return 0;\n@@ -207,4 +196,4 @@\n-      jlong offset1 = p1->offset();\n-      jlong offset2 = p2->offset();\n-      jlong memory_size1 = p1->memory_size();\n-      jlong memory_size2 = p2->memory_size();\n+      jlong con1 = p1->vpointer().con();\n+      jlong con2 = p2->vpointer().con();\n+      jlong size1 = p1->vpointer().size();\n+      jlong size2 = p2->vpointer().size();\n@@ -212,3 +201,3 @@\n-      if (offset1 >= offset2 + memory_size2) { return AFTER; }\n-      if (offset2 >= offset1 + memory_size1) { return BEFORE; }\n-      if (offset1 == offset2 && memory_size1 == memory_size2) { return EXACT_OVERLAP; }\n+      if (con1 >= con2 + size2) { return AFTER; }\n+      if (con2 >= con1 + size1) { return BEFORE; }\n+      if (con1 == con2 && size1 == size2) { return EXACT_OVERLAP; }\n@@ -220,7 +209,4 @@\n-    tty->print(\"VMemoryRegion[%s %dbytes, schedule_order(%4d), base\",\n-               _is_load ? \"load \" : \"store\", _memory_size, _schedule_order);\n-    VPointer::print_con_or_idx(_base);\n-    tty->print(\" + offset(%4d)\", _offset);\n-    tty->print(\" + invar\");\n-    VPointer::print_con_or_idx(_invar);\n-    tty->print_cr(\" + scale(%4d) * iv]\", _scale);\n+    tty->print(\"VMemoryRegion[%s schedule_order(%4d), \",\n+               _is_load ? \"load, \" : \"store,\", _schedule_order);\n+    vpointer().print_on(tty, false);\n+    tty->print_cr(\"]\");\n@@ -332,1 +318,2 @@\n-  GrowableArray<VMemoryRegion> memory_regions;\n+  \/\/ Use pointers because no default constructor for elements available.\n+  GrowableArray<VMemoryRegion*> memory_regions;\n@@ -354,1 +341,1 @@\n-        if (p.valid()) {\n+        if (p.is_valid()) {\n@@ -356,2 +343,7 @@\n-          uint vector_length = vector != nullptr ? vector->nodes().length() : 1;\n-          memory_regions.push(VMemoryRegion(p, iv_offset, vector_length, schedule_order++));\n+          bool is_load = vtn->is_load_in_loop();\n+          const VPointer iv_offset_p(p.make_with_iv_offset(iv_offset));\n+          if (iv_offset_p.is_valid()) {\n+            \/\/ The iv_offset may lead to overflows. This is a heuristic, so we do not\n+            \/\/ care too much about those edge cases.\n+            memory_regions.push(new VMemoryRegion(iv_offset_p, is_load, schedule_order++));\n+          }\n@@ -372,1 +364,1 @@\n-      VMemoryRegion& region = memory_regions.at(i);\n+      VMemoryRegion& region = *memory_regions.at(i);\n@@ -380,1 +372,1 @@\n-    VMemoryRegion& region1 = memory_regions.at(i);\n+    VMemoryRegion& region1 = *memory_regions.at(i);\n@@ -383,1 +375,1 @@\n-      VMemoryRegion& region2 = memory_regions.at(j);\n+      VMemoryRegion& region2 = *memory_regions.at(j);\n@@ -578,0 +570,1 @@\n+  const VPointer& load_p = vpointer(vloop_analyzer);\n@@ -579,4 +572,2 @@\n-    VPointer p_store(mem->as_Mem(), vloop_analyzer.vloop());\n-    if (p_store.overlap_possible_with_any_in(nodes())) {\n-      break;\n-    } else {\n+    VPointer store_p(mem->as_Mem(), vloop_analyzer.vloop());\n+    if (store_p.never_overlaps_with(load_p)) {\n@@ -584,0 +575,2 @@\n+    } else {\n+      break;\n","filename":"src\/hotspot\/share\/opto\/vtransform.cpp","additions":55,"deletions":62,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,0 +69,1 @@\n+class VTransformMemVectorNode;\n@@ -317,0 +318,1 @@\n+  virtual VTransformMemVectorNode* isa_MemVector() { return nullptr; }\n@@ -320,0 +322,1 @@\n+  virtual bool is_load_in_loop() const { return false; }\n@@ -345,0 +348,1 @@\n+  virtual bool is_load_in_loop() const override { return _node->is_Load(); }\n@@ -361,0 +365,1 @@\n+  virtual bool is_load_in_loop() const override { return false; }\n@@ -481,1 +486,15 @@\n-class VTransformLoadVectorNode : public VTransformVectorNode {\n+class VTransformMemVectorNode : public VTransformVectorNode {\n+private:\n+  const VPointer _vpointer; \/\/ with size of the vector\n+\n+public:\n+  VTransformMemVectorNode(VTransform& vtransform, const uint req, uint number_of_nodes, const VPointer& vpointer) :\n+    VTransformVectorNode(vtransform, req, number_of_nodes),\n+    _vpointer(vpointer) {}\n+\n+  virtual VTransformMemVectorNode* isa_MemVector() override { return this; }\n+  virtual bool is_load_or_store_in_loop() const override { return true; }\n+  virtual const VPointer& vpointer(const VLoopAnalyzer& vloop_analyzer) const override { return _vpointer; }\n+};\n+\n+class VTransformLoadVectorNode : public VTransformMemVectorNode {\n@@ -484,2 +503,2 @@\n-  VTransformLoadVectorNode(VTransform& vtransform, uint number_of_nodes) :\n-    VTransformVectorNode(vtransform, 3, number_of_nodes) {}\n+  VTransformLoadVectorNode(VTransform& vtransform, uint number_of_nodes, const VPointer& vpointer) :\n+    VTransformMemVectorNode(vtransform, 3, number_of_nodes, vpointer) {}\n@@ -488,2 +507,1 @@\n-  virtual bool is_load_or_store_in_loop() const override { return true; }\n-  virtual const VPointer& vpointer(const VLoopAnalyzer& vloop_analyzer) const override { return vloop_analyzer.vpointers().vpointer(nodes().at(0)->as_Mem()); }\n+  virtual bool is_load_in_loop() const override { return true; }\n@@ -495,1 +513,1 @@\n-class VTransformStoreVectorNode : public VTransformVectorNode {\n+class VTransformStoreVectorNode : public VTransformMemVectorNode {\n@@ -498,2 +516,2 @@\n-  VTransformStoreVectorNode(VTransform& vtransform, uint number_of_nodes) :\n-    VTransformVectorNode(vtransform, 4, number_of_nodes) {}\n+  VTransformStoreVectorNode(VTransform& vtransform, uint number_of_nodes, const VPointer& vpointer) :\n+    VTransformMemVectorNode(vtransform, 4, number_of_nodes, vpointer) {}\n@@ -501,2 +519,1 @@\n-  virtual bool is_load_or_store_in_loop() const override { return true; }\n-  virtual const VPointer& vpointer(const VLoopAnalyzer& vloop_analyzer) const override { return vloop_analyzer.vpointers().vpointer(nodes().at(0)->as_Mem()); }\n+  virtual bool is_load_in_loop() const override { return false; }\n","filename":"src\/hotspot\/share\/opto\/vtransform.hpp","additions":28,"deletions":11,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-#ifndef DONT_USE_PRECOMPILED_HEADER\n-\n@@ -80,2 +78,0 @@\n-\n-#endif \/\/ !DONT_USE_PRECOMPILED_HEADER\n","filename":"src\/hotspot\/share\/precompiled\/precompiled.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/downcallLinker.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/foreignGlobals.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n@@ -3793,1 +3792,0 @@\n-  thread->register_thread_stack_with_NMT();\n@@ -3795,0 +3793,1 @@\n+  thread->register_thread_stack_with_NMT();\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jniFastGetField.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,0 @@\n-#include \"precompiled.hpp\"\n-#include \"prims\/jvmtiAgent.hpp\"\n-\n@@ -32,0 +29,2 @@\n+#include \"prims\/jvmtiAgent.hpp\"\n+#include \"prims\/jvmtiAgentList.hpp\"\n@@ -34,1 +33,0 @@\n-#include \"prims\/jvmtiAgentList.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgent.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -26,1 +25,0 @@\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgentList.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiCodeBlobEvents.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiDeferredUpdates.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-# include \"precompiled.hpp\"\n@@ -1247,1 +1246,1 @@\n-  <xsl:text>=\" SIZE_FORMAT_X \"<\/xsl:text>\n+  <xsl:text>=0x%zx<\/xsl:text>\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiExtensions.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiGetLoadedClasses.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiManageCapabilities.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMapTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiTrace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiUtil.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/methodComparator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/nativeEntryPoint.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/perf.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -105,1 +104,1 @@\n-  log_trace(membername, table)(\"Start size: \" SIZE_FORMAT \" (\" SIZE_FORMAT \")\",\n+  log_trace(membername, table)(\"Start size: %zu (%zu)\",\n@@ -234,1 +233,1 @@\n-  log_trace(membername, table)(\"Uncleaned items:\" SIZE_FORMAT, num_dead);\n+  log_trace(membername, table)(\"Uncleaned items:%zu\", num_dead);\n@@ -294,1 +293,1 @@\n-  log_info(membername, table)(\"Grown to size:\" SIZE_FORMAT, _current_size);\n+  log_info(membername, table)(\"Grown to size:%zu\", _current_size);\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/upcallLinker.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/upcallStubs.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/vmstorage.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -291,2 +290,2 @@\n-  tty->print_cr(\"Minimum heap \" SIZE_FORMAT \" Initial heap \" SIZE_FORMAT \" \"\n-                \"Maximum heap \" SIZE_FORMAT \" Space alignment \" SIZE_FORMAT \" Heap alignment \" SIZE_FORMAT,\n+  tty->print_cr(\"Minimum heap %zu Initial heap %zu \"\n+                \"Maximum heap %zu Space alignment %zu Heap alignment %zu\",\n@@ -304,2 +303,0 @@\n-  VirtualSpace vs;\n-  vs.initialize(rhs, 50 * granularity);\n@@ -308,1 +305,1 @@\n-  if (!( UseCompressedOops && rhs.base() != nullptr &&\n+  if (!( UseCompressedOops && rhs.is_reserved() &&\n@@ -322,0 +319,4 @@\n+\n+  VirtualSpace vs;\n+  vs.initialize(rhs, 50 * granularity);\n+\n@@ -331,0 +332,5 @@\n+  if (!rhs.is_reserved()) {\n+    tty->print_cr(\"Failed to initialize ReservedSpace. Can't proceed.\");\n+    return 3;\n+  }\n+\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1535,2 +1534,2 @@\n-          log_debug(gc, heap, coops)(\"HeapBaseMinAddress must be at least \" SIZE_FORMAT\n-                                     \" (\" SIZE_FORMAT \"G) which is greater than value given \" SIZE_FORMAT,\n+          log_debug(gc, heap, coops)(\"HeapBaseMinAddress must be at least %zu\"\n+                                     \" (%zuG) which is greater than value given %zu\",\n@@ -1561,1 +1560,1 @@\n-            \" max heap \" SIZE_FORMAT \" > compressed oop heap \" SIZE_FORMAT \". \"\n+            \" max heap %zu > compressed oop heap %zu. \"\n@@ -1572,1 +1571,1 @@\n-    log_trace(gc, heap)(\"  Maximum heap size \" SIZE_FORMAT, (size_t) reasonable_max);\n+    log_trace(gc, heap)(\"  Maximum heap size %zu\", (size_t) reasonable_max);\n@@ -1593,1 +1592,1 @@\n-      log_trace(gc, heap)(\"  Initial heap size \" SIZE_FORMAT, InitialHeapSize);\n+      log_trace(gc, heap)(\"  Initial heap size %zu\", InitialHeapSize);\n@@ -1599,1 +1598,1 @@\n-      log_trace(gc, heap)(\"  Minimum heap size \" SIZE_FORMAT, MinHeapSize);\n+      log_trace(gc, heap)(\"  Minimum heap size %zu\", MinHeapSize);\n@@ -1788,1 +1787,1 @@\n-                \"not \" SIZE_FORMAT \"\\n\",\n+                \"not %zu\\n\",\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -154,1 +154,0 @@\n-  friend class CodeCacheExtensions;\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/basicLock.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/continuationJavaClasses.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/continuationWrapper.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -130,2 +129,0 @@\n-\n-\n","filename":"src\/hotspot\/share\/runtime\/cpuTimeCounters.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -323,1 +322,1 @@\n-    st.print_cr(\" allocated (\" SIZE_FORMAT \" bytes)\", obj->size() * HeapWordSize);\n+    st.print_cr(\" allocated (%zu bytes)\", obj->size() * HeapWordSize);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/escapeBarrier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -218,1 +217,1 @@\n-      st->print(SIZE_FORMAT, get_size_t());\n+      st->print(\"%zu\", get_size_t());\n@@ -420,1 +419,1 @@\n-    st->print(\"-XX:%s=\" SIZE_FORMAT, _name, get_size_t());\n+    st->print(\"-XX:%s=%zu\", _name, get_size_t());\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -247,2 +246,2 @@\n-                        \"size_t %s=\" SIZE_FORMAT \" is outside the allowed range \"\n-                        \"[ \" SIZE_FORMAT \" ... \" SIZE_FORMAT \" ]\\n\",\n+                        \"size_t %s=%zu is outside the allowed range \"\n+                        \"[ %zu ... %zu ]\\n\",\n@@ -255,1 +254,1 @@\n-    st->print(\"[ \" SIZE_FORMAT_W(-25) \" ... \" SIZE_FORMAT_W(25) \" ]\", min, max);\n+    st->print(\"[ %-25zu ... %25zu ]\", min, max);\n@@ -258,1 +257,1 @@\n-    st->print(\"[ \" SIZE_FORMAT_W(-25) \" ... \" SIZE_FORMAT_W(25) \" ]\", size_t(0), size_t(SIZE_MAX));\n+    st->print(\"[ %-25zu ... %25zu ]\", size_t(0), size_t(SIZE_MAX));\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -172,1 +171,1 @@\n-                        \"at least \" SIZE_FORMAT \" to align constants\\n\",\n+                        \"at least %zu to align constants\\n\",\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -62,1 +61,1 @@\n-                        \"less than page size (\" SIZE_FORMAT \")\\n\",\n+                        \"less than page size (%zu)\\n\",\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLimit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagLookup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/globals.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/handles.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/icache.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -522,1 +521,1 @@\n-      tty->print_cr(\"ERROR: fail_cnt=\" SIZE_FORMAT, fail_cnt);\n+      tty->print_cr(\"ERROR: fail_cnt=%zu\", fail_cnt);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -254,1 +253,1 @@\n-  st->print_cr(\"JNI global refs: \" SIZE_FORMAT \", weak refs: \" SIZE_FORMAT,\n+  st->print_cr(\"JNI global refs: %zu, weak refs: %zu\",\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/jniPeriodicChecker.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/keepStackGCProcessed.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/linkType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/monitorChunk.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/monitorDeflationThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -55,1 +54,1 @@\n-#ifdef INCLUDE_PARALLELGC\n+#if INCLUDE_PARALLELGC\n@@ -138,0 +137,1 @@\n+Mutex*   NmtVirtualMemory_lock          = nullptr;\n@@ -287,1 +287,0 @@\n-  MUTEX_DEFN(SharedDecoder_lock              , PaddedMutex  , tty-1);\n@@ -291,0 +290,1 @@\n+  MUTEX_DEFN(NmtVirtualMemory_lock           , PaddedMutex  , service-4); \/\/ Must be lower than G1Mapper_lock used from G1RegionsSmallerThanCommitSizeMapper::commit_regions\n@@ -335,1 +335,1 @@\n-#ifdef INCLUDE_PARALLELGC\n+#if INCLUDE_PARALLELGC\n@@ -348,0 +348,1 @@\n+  MUTEX_DEFL(SharedDecoder_lock             , PaddedMutex  , NmtVirtualMemory_lock); \/\/ Must be lower than NmtVirtualMemory_lock due to MemTracker::print_containing_region\n@@ -378,1 +379,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-#ifdef INCLUDE_PARALLELGC\n+#if INCLUDE_PARALLELGC\n@@ -120,0 +120,1 @@\n+extern Mutex*   NmtVirtualMemory_lock;           \/\/ guards NMT virtual memory updates\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/nonJavaThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/notificationThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -476,0 +475,15 @@\n+void ObjectMonitor::notify_contended_enter(JavaThread *current) {\n+  current->set_current_pending_monitor(this);\n+\n+  DTRACE_MONITOR_PROBE(contended__enter, this, object(), current);\n+  if (JvmtiExport::should_post_monitor_contended_enter()) {\n+    JvmtiExport::post_monitor_contended_enter(current, this);\n+\n+    \/\/ The current thread does not yet own the monitor and does not\n+    \/\/ yet appear on any queues that would get it made the successor.\n+    \/\/ This means that the JVMTI_EVENT_MONITOR_CONTENDED_ENTER event\n+    \/\/ handler cannot accidentally consume an unpark() meant for the\n+    \/\/ ParkEvent associated with this ObjectMonitor.\n+  }\n+}\n+\n@@ -495,32 +509,18 @@\n-  { \/\/ Change java thread status to indicate blocked on monitor enter.\n-    JavaThreadBlockedOnMonitorEnterState jtbmes(current, this);\n-\n-    assert(current->current_pending_monitor() == nullptr, \"invariant\");\n-    current->set_current_pending_monitor(this);\n-\n-    DTRACE_MONITOR_PROBE(contended__enter, this, object(), current);\n-    if (JvmtiExport::should_post_monitor_contended_enter()) {\n-      JvmtiExport::post_monitor_contended_enter(current, this);\n-\n-      \/\/ The current thread does not yet own the monitor and does not\n-      \/\/ yet appear on any queues that would get it made the successor.\n-      \/\/ This means that the JVMTI_EVENT_MONITOR_CONTENDED_ENTER event\n-      \/\/ handler cannot accidentally consume an unpark() meant for the\n-      \/\/ ParkEvent associated with this ObjectMonitor.\n-    }\n-\n-    ContinuationEntry* ce = current->last_continuation();\n-    if (ce != nullptr && ce->is_virtual_thread()) {\n-      result = Continuation::try_preempt(current, ce->cont_oop(current));\n-      if (result == freeze_ok) {\n-        bool acquired = VThreadMonitorEnter(current);\n-        if (acquired) {\n-          \/\/ We actually acquired the monitor while trying to add the vthread to the\n-          \/\/ _cxq so cancel preemption. We will still go through the preempt stub\n-          \/\/ but instead of unmounting we will call thaw to continue execution.\n-          current->set_preemption_cancelled(true);\n-          if (JvmtiExport::should_post_monitor_contended_entered()) {\n-            \/\/ We are going to call thaw again after this and finish the VMTS\n-            \/\/ transition so no need to do it here. We will post the event there.\n-            current->set_contended_entered_monitor(this);\n-          }\n+  assert(current->current_pending_monitor() == nullptr, \"invariant\");\n+\n+  ContinuationEntry* ce = current->last_continuation();\n+  bool is_virtual = ce != nullptr && ce->is_virtual_thread();\n+  if (is_virtual) {\n+    notify_contended_enter(current);\n+    result = Continuation::try_preempt(current, ce->cont_oop(current));\n+    if (result == freeze_ok) {\n+      bool acquired = VThreadMonitorEnter(current);\n+      if (acquired) {\n+        \/\/ We actually acquired the monitor while trying to add the vthread to the\n+        \/\/ _cxq so cancel preemption. We will still go through the preempt stub\n+        \/\/ but instead of unmounting we will call thaw to continue execution.\n+        current->set_preemption_cancelled(true);\n+        if (JvmtiExport::should_post_monitor_contended_entered()) {\n+          \/\/ We are going to call thaw again after this and finish the VMTS\n+          \/\/ transition so no need to do it here. We will post the event there.\n+          current->set_contended_entered_monitor(this);\n@@ -528,5 +528,0 @@\n-        current->set_current_pending_monitor(nullptr);\n-        DEBUG_ONLY(int state = java_lang_VirtualThread::state(current->vthread()));\n-        assert((acquired && current->preemption_cancelled() && state == java_lang_VirtualThread::RUNNING) ||\n-               (!acquired && !current->preemption_cancelled() && state == java_lang_VirtualThread::BLOCKING), \"invariant\");\n-        return;\n@@ -534,0 +529,5 @@\n+      current->set_current_pending_monitor(nullptr);\n+      DEBUG_ONLY(int state = java_lang_VirtualThread::state(current->vthread()));\n+      assert((acquired && current->preemption_cancelled() && state == java_lang_VirtualThread::RUNNING) ||\n+             (!acquired && !current->preemption_cancelled() && state == java_lang_VirtualThread::BLOCKING), \"invariant\");\n+      return;\n@@ -535,0 +535,1 @@\n+  }\n@@ -536,0 +537,7 @@\n+  {\n+    \/\/ Change java thread status to indicate blocked on monitor enter.\n+    JavaThreadBlockedOnMonitorEnterState jtbmes(current, this);\n+\n+    if (!is_virtual) { \/\/ already notified contended_enter for virtual\n+      notify_contended_enter(current);\n+    }\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":46,"deletions":38,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -380,0 +380,1 @@\n+  void      notify_contended_enter(JavaThread *current);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/orderAccess.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1188,1 +1187,1 @@\n-    st->print(\"%d cores, \" SIZE_FORMAT \"M, \", processor_count(), mem);\n+    st->print(\"%d cores, %zuM, \", processor_count(), mem);\n@@ -1190,1 +1189,1 @@\n-    st->print(\"%d cores, \" SIZE_FORMAT \"G, \", processor_count(), mem);\n+    st->print(\"%d cores, %zuG, \", processor_count(), mem);\n@@ -1825,2 +1824,2 @@\n-                     \" min=\" SIZE_FORMAT \"%s\"\n-                     \" max=\" SIZE_FORMAT \"%s\"\n+                     \" min=%zu%s\"\n+                     \" max=%zu%s\"\n@@ -1828,2 +1827,2 @@\n-                     \" size=\" SIZE_FORMAT \"%s\"\n-                     \" page_size=\" SIZE_FORMAT \"%s\",\n+                     \" size=%zu%s\"\n+                     \" page_size=%zu%s\",\n@@ -1846,2 +1845,2 @@\n-                     \" req_size=\" SIZE_FORMAT \"%s\"\n-                     \" req_page_size=\" SIZE_FORMAT \"%s\"\n+                     \" req_size=%zu%s\"\n+                     \" req_page_size=%zu%s\"\n@@ -1849,2 +1848,2 @@\n-                     \" size=\" SIZE_FORMAT \"%s\"\n-                     \" page_size=\" SIZE_FORMAT \"%s\",\n+                     \" size=%zu%s\"\n+                     \" page_size=%zu%s\",\n@@ -1992,1 +1991,1 @@\n-#define ARGSFMT \"range [\" PTR_FORMAT \"-\" PTR_FORMAT \"), size \" SIZE_FORMAT_X \", alignment \" SIZE_FORMAT_X \", randomize: %d\"\n+#define ARGSFMT \"range [\" PTR_FORMAT \"-\" PTR_FORMAT \"), size 0x%zx, alignment 0x%zx, randomize: %d\"\n@@ -2206,1 +2205,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n@@ -2228,0 +2227,1 @@\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n@@ -2230,1 +2230,0 @@\n-      ThreadCritical tc;\n@@ -2313,1 +2312,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n@@ -2352,1 +2351,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n@@ -2379,1 +2378,1 @@\n-  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_X, page_size);\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: 0x%zx\", page_size);\n@@ -2384,1 +2383,1 @@\n-  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_X, page_size);\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: 0x%zx\", page_size);\n@@ -2389,1 +2388,1 @@\n-  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_X, page_size);\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: 0x%zx\", page_size);\n@@ -2398,1 +2397,1 @@\n-  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_X, page_size);\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: 0x%zx\", page_size);\n@@ -2433,1 +2432,1 @@\n-      st->print(SIZE_FORMAT \"k\", sz \/ K);\n+      st->print(\"%zuk\", sz \/ K);\n@@ -2435,1 +2434,1 @@\n-      st->print(SIZE_FORMAT \"M\", sz \/ M);\n+      st->print(\"%zuM\", sz \/ M);\n@@ -2437,1 +2436,1 @@\n-      st->print(SIZE_FORMAT \"G\", sz \/ G);\n+      st->print(\"%zuG\", sz \/ G);\n@@ -2471,1 +2470,1 @@\n-                  \"Specify at least \" SIZE_FORMAT \"k\",\n+                  \"Specify at least %zuk\",\n@@ -2492,1 +2491,1 @@\n-                  \"Specify at least \" SIZE_FORMAT \"k\",\n+                  \"Specify at least %zuk\",\n@@ -2504,1 +2503,1 @@\n-                  \"Specify at least \" SIZE_FORMAT \"k\",\n+                  \"Specify at least %zuk\",\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":25,"deletions":26,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/osInfo.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/osThreadBase.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/park.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -174,2 +173,2 @@\n-                                \" units = %d, dsize = \" SIZE_FORMAT \", vlen = \" SIZE_FORMAT \",\"\n-                                \" pad_length = \" SIZE_FORMAT \", size = \" SIZE_FORMAT \", on_c_heap = %s,\"\n+                                \" units = %d, dsize = %zu, vlen = %zu,\"\n+                                \" pad_length = %zu, size = %zu, on_c_heap = %s,\"\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -100,2 +99,2 @@\n-                          \" os::vm_allocation_granularity = \" SIZE_FORMAT\n-                          \", adjusted size = \" SIZE_FORMAT,\n+                          \" os::vm_allocation_granularity = %zu\"\n+                          \", adjusted size = %zu\",\n@@ -130,1 +129,1 @@\n-                            \" size = \" SIZE_FORMAT,\n+                            \" size = %zu\",\n@@ -181,2 +180,2 @@\n-              \"\\tCapacity = \" SIZE_FORMAT \" bytes\"\n-              \"  Used = \" SIZE_FORMAT \" bytes\"\n+              \"\\tCapacity = %zu bytes\"\n+              \"  Used = %zu bytes\"\n","filename":"src\/hotspot\/share\/runtime\/perfMemory.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -552,1 +551,1 @@\n-          \"class %s (in module %s) cannot access class %s (in unnamed module @\" SIZE_FORMAT_X \") because module %s does not read unnamed module @\" SIZE_FORMAT_X,\n+          \"class %s (in module %s) cannot access class %s (in unnamed module @0x%zx) because module %s does not read unnamed module @0x%zx\",\n@@ -579,1 +578,1 @@\n-          \"class %s (in unnamed module @\" SIZE_FORMAT_X \") cannot access class %s (in module %s) because module %s does not export %s to unnamed module @\" SIZE_FORMAT_X,\n+          \"class %s (in unnamed module @0x%zx) cannot access class %s (in module %s) because module %s does not export %s to unnamed module @0x%zx\",\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/reflectionUtils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/relocator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/safepointVerifiers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntimeTrans.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntimeTrig.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackChunkFrameStream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackFrameStream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -94,1 +93,1 @@\n-  \/\/ warning(\"Guarding at \" PTR_FORMAT \" for len \" SIZE_FORMAT \"\\n\", low_addr, len);\n+  \/\/ warning(\"Guarding at \" PTR_FORMAT \" for len %zu\\n\", low_addr, len);\n","filename":"src\/hotspot\/share\/runtime\/stackOverflow.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackValue.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackValueCollection.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackWatermarkSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/statSampler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stubCodeGenerator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/suspendedThreadTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1297,2 +1296,2 @@\n-                                 \"bumping in_use_list_ceiling from \" SIZE_FORMAT\n-                                 \" to \" SIZE_FORMAT, old_ceiling, new_ceiling);\n+                                 \"bumping in_use_list_ceiling from %zu\"\n+                                 \" to %zu\", old_ceiling, new_ceiling);\n@@ -1306,2 +1305,2 @@\n-    log_info(monitorinflation)(\"monitors_used=\" SIZE_FORMAT \", ceiling=\" SIZE_FORMAT\n-                               \", monitor_usage=\" SIZE_FORMAT \", threshold=%d\",\n+    log_info(monitorinflation)(\"monitors_used=%zu, ceiling=%zu\"\n+                               \", monitor_usage=%zu, threshold=%d\",\n@@ -1728,1 +1727,1 @@\n-      _stream->print_cr(\"begin deflating: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+      _stream->print_cr(\"begin deflating: in_use_list stats: ceiling=%zu, count=%zu, max=%zu\",\n@@ -1737,3 +1736,3 @@\n-      _stream->print_cr(\"before handshaking: unlinked_count=\" SIZE_FORMAT\n-                        \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n-                        SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+      _stream->print_cr(\"before handshaking: unlinked_count=%zu\"\n+                        \", in_use_list stats: ceiling=%zu, count=\"\n+                        \"%zu, max=%zu\",\n@@ -1747,1 +1746,1 @@\n-                        SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                        \"%zu, count=%zu, max=%zu\",\n@@ -1757,1 +1756,1 @@\n-        _stream->print_cr(\"deflated_count=\" SIZE_FORMAT \", {unlinked,deleted}_count=\" SIZE_FORMAT \" monitors in %3.7f secs\",\n+        _stream->print_cr(\"deflated_count=%zu, {unlinked,deleted}_count=%zu monitors in %3.7f secs\",\n@@ -1760,1 +1759,1 @@\n-      _stream->print_cr(\"end deflating: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+      _stream->print_cr(\"end deflating: in_use_list stats: ceiling=%zu, count=%zu, max=%zu\",\n@@ -1768,2 +1767,2 @@\n-      _stream->print_cr(\"pausing %s: %s=\" SIZE_FORMAT \", in_use_list stats: ceiling=\"\n-                        SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+      _stream->print_cr(\"pausing %s: %s=%zu, in_use_list stats: ceiling=\"\n+                        \"%zu, count=%zu, max=%zu\",\n@@ -1776,2 +1775,2 @@\n-      _stream->print_cr(\"resuming %s: in_use_list stats: ceiling=\" SIZE_FORMAT\n-                        \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT, op_name,\n+      _stream->print_cr(\"resuming %s: in_use_list stats: ceiling=%zu\"\n+                        \", count=%zu, max=%zu\", op_name,\n@@ -2004,1 +2003,1 @@\n-  out->print_cr(\"count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT, l_in_use_count,\n+  out->print_cr(\"count=%zu, max=%zu\", l_in_use_count,\n@@ -2016,2 +2015,2 @@\n-    out->print_cr(\"in_use_count=\" SIZE_FORMAT \" equals ck_in_use_count=\"\n-                  SIZE_FORMAT, l_in_use_count, ck_in_use_count);\n+    out->print_cr(\"in_use_count=%zu equals ck_in_use_count=%zu\",\n+                  l_in_use_count, ck_in_use_count);\n@@ -2019,2 +2018,2 @@\n-    out->print_cr(\"WARNING: in_use_count=\" SIZE_FORMAT \" is not equal to \"\n-                  \"ck_in_use_count=\" SIZE_FORMAT, l_in_use_count,\n+    out->print_cr(\"WARNING: in_use_count=%zu is not equal to \"\n+                  \"ck_in_use_count=%zu\", l_in_use_count,\n@@ -2026,2 +2025,2 @@\n-    out->print_cr(\"in_use_max=\" SIZE_FORMAT \" equals ck_in_use_max=\"\n-                  SIZE_FORMAT, l_in_use_max, ck_in_use_max);\n+    out->print_cr(\"in_use_max=%zu equals ck_in_use_max=%zu\",\n+                  l_in_use_max, ck_in_use_max);\n@@ -2029,2 +2028,2 @@\n-    out->print_cr(\"WARNING: in_use_max=\" SIZE_FORMAT \" is not equal to \"\n-                  \"ck_in_use_max=\" SIZE_FORMAT, l_in_use_max, ck_in_use_max);\n+    out->print_cr(\"WARNING: in_use_max=%zu is not equal to \"\n+                  \"ck_in_use_max=%zu\", l_in_use_max, ck_in_use_max);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":24,"deletions":25,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/task.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -222,1 +221,1 @@\n-    PTR_FORMAT \"-\" PTR_FORMAT \" (\" SIZE_FORMAT \"k).\",\n+    PTR_FORMAT \"-\" PTR_FORMAT \" (%zuk).\",\n@@ -478,1 +477,1 @@\n-      st->print(\"allocated=\" SIZE_FORMAT \"%s \",\n+      st->print(\"allocated=%zu%s \",\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/threadHeapSampler.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/threadIdentifier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+\n@@ -26,1 +27,0 @@\n-#include \"precompiled.hpp\"\n@@ -545,0 +545,2 @@\n+  \/\/ Once mutexes and main_thread are ready, we can use NmtVirtualMemoryLocker.\n+  MemTracker::NmtVirtualMemoryLocker::set_safe_to_use();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/timer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/timerTrace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/trimNativeHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/unhandledOops.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vframe_hp.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -404,11 +403,11 @@\n-  EventMarkVMOperation em(\"Executing %sVM operation: %s%s%s%s\",\n-      prev_vm_operation != nullptr ? \"nested \" : \"\",\n-      op->name(),\n-      cause != nullptr ? \" (\" : \"\",\n-      cause != nullptr ? cause : \"\",\n-      cause != nullptr ? \")\" : \"\");\n-\n-  log_debug(vmthread)(\"Evaluating %s %s VM operation: %s\",\n-                       prev_vm_operation != nullptr ? \"nested\" : \"\",\n-                      _cur_vm_operation->evaluate_at_safepoint() ? \"safepoint\" : \"non-safepoint\",\n-                      _cur_vm_operation->name());\n+  stringStream ss;\n+  ss.print(\"Executing%s%s VM operation: %s\",\n+           prev_vm_operation != nullptr ? \" nested\" : \"\",\n+           op->evaluate_at_safepoint() ? \" safepoint\" : \" non-safepoint\",\n+           op->name());\n+  if (cause != nullptr) {\n+    ss.print(\" (%s)\", cause);\n+  }\n+\n+  EventMarkVMOperation em(\"%s\", ss.freeze());\n+  log_debug(vmthread)(\"%s\", ss.freeze());\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vm_version.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/classLoadingService.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -320,1 +319,1 @@\n-                           \"Could not allocate \" SIZE_FORMAT \" bytes for argument.\",\n+                           \"Could not allocate %zu bytes for argument.\",\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/finalizerService.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/gcNotifier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -1710,0 +1709,6 @@\n+  ~ThreadDumper() {\n+    for (int index = 0; index < _frames->length(); index++) {\n+      delete _frames->at(index);\n+    }\n+    delete _frames;\n+  }\n@@ -2352,5 +2357,4 @@\n-  if (_gc_before_heap_dump && UseZGC) {\n-    \/\/ ZGC cannot perform a synchronous GC cycle from within the VM thread.\n-    \/\/ So ZCollectedHeap::collect_as_vm_thread() is a noop. To respect the\n-    \/\/ _gc_before_heap_dump flag a synchronous GC cycle is performed from\n-    \/\/ the caller thread in the prologue.\n+  if (_gc_before_heap_dump && (UseZGC || UseShenandoahGC)) {\n+    \/\/ ZGC and Shenandoah cannot perform a synchronous GC cycle from within the VM thread.\n+    \/\/ So collect_as_vm_thread() is a noop. To respect the _gc_before_heap_dump flag a\n+    \/\/ synchronous GC cycle is performed from the caller thread in the prologue.\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -80,1 +79,1 @@\n-    jio_snprintf(buf, sizeof(buf), \"HPROF BLOCKSIZE=\" SIZE_FORMAT, _block_size);\n+    jio_snprintf(buf, sizeof(buf), \"HPROF BLOCKSIZE=%zu\", _block_size);\n","filename":"src\/hotspot\/share\/services\/heapDumperCompression.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -382,1 +381,1 @@\n-  tty->print_cr(\"%s count = \" SIZE_FORMAT \" pending_triggers = %d pending_clears = %d\",\n+  tty->print_cr(\"%s count = %zu pending_triggers = %d pending_clears = %d\",\n","filename":"src\/hotspot\/share\/services\/lowMemoryDetector.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/memoryManager.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/memoryPool.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/memoryService.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/runtimeService.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-* Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -177,1 +176,1 @@\n-  log_info(thread, table)(\"Grown to size:\" SIZE_FORMAT, _current_size);\n+  log_info(thread, table)(\"Grown to size:%zu\", _current_size);\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -178,1 +177,1 @@\n-  if (sscanf(arg, SIZE_FORMAT, &value) == 1) {\n+  if (sscanf(arg, \"%zu\", &value) == 1) {\n","filename":"src\/hotspot\/share\/services\/writeableFlags.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -202,1 +201,1 @@\n-         \"BitMap index out of bounds: \" SIZE_FORMAT \" >= \" SIZE_FORMAT,\n+         \"BitMap index out of bounds: %zu >= %zu\",\n@@ -208,1 +207,1 @@\n-         \"BitMap limit out of bounds: \" SIZE_FORMAT \" > \" SIZE_FORMAT,\n+         \"BitMap limit out of bounds: %zu > %zu\",\n@@ -214,1 +213,1 @@\n-         \"BitMap range error: \" SIZE_FORMAT \" > \" SIZE_FORMAT, beg, end);\n+         \"BitMap range error: %zu > %zu\", beg, end);\n@@ -709,1 +708,1 @@\n-  st->print(\"Bitmap (\" SIZE_FORMAT \" bits):\", size());\n+  st->print(\"Bitmap (%zu bits):\", size());\n@@ -713,1 +712,1 @@\n-      st->print(SIZE_FORMAT_W(5) \":\", index);\n+      st->print(\"%5zu:\", index);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -263,1 +263,1 @@\n-           \"out of bounds: \" SIZE_FORMAT, size_in_bits);\n+           \"out of bounds: %zu\", size_in_bits);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-    assert(i < size(), \"IOOBE i: \" SIZE_FORMAT \" size(): \" SIZE_FORMAT, i, size());\n+    assert(i < size(), \"IOOBE i: %zu size(): %zu\", i, size());\n","filename":"src\/hotspot\/share\/utilities\/chunkedList.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/classpathStream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -683,1 +683,1 @@\n-        DEBUG_ONLY(fatal(\"%s Node hash code changed from \" SIZE_FORMAT \" to \" SIZE_FORMAT, msg, aux->saved_hash(), aux_hash);)\n+        DEBUG_ONLY(fatal(\"%s Node hash code changed from %zu to %zu\", msg, aux->saved_hash(), aux_hash);)\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/constantTag.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -74,1 +73,1 @@\n-           \"incorrect element size: \" SIZE_FORMAT, elem_size);\n+           \"incorrect element size: %zu\", elem_size);\n@@ -76,1 +75,1 @@\n-           \"byte_count \" SIZE_FORMAT \" must be multiple of element size \" SIZE_FORMAT, byte_count, elem_size);\n+           \"byte_count %zu must be multiple of element size %zu\", byte_count, elem_size);\n@@ -199,1 +198,1 @@\n-    default: guarantee(false, \"do_conjoint_swap: Invalid elem_size \" SIZE_FORMAT \"\\n\", elem_size);\n+    default: guarantee(false, \"do_conjoint_swap: Invalid elem_size %zu\\n\", elem_size);\n","filename":"src\/hotspot\/share\/utilities\/copy.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/decoder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/decoder_elf.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -1865,1 +1864,1 @@\n-        DWARF_LOG_ERROR(\"Tried to read \" SIZE_FORMAT \" bytes but exceeded buffer size of \" SIZE_FORMAT \". Truncating string.\",\n+        DWARF_LOG_ERROR(\"Tried to read %zu bytes but exceeded buffer size of %zu. Truncating string.\",\n","filename":"src\/hotspot\/share\/utilities\/elfFile.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/elfFuncDescTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/elfStringTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/elfSymbolTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/events.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/formatBuffer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/globalCounter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -137,10 +137,0 @@\n-\/\/ Format integers which change size between 32- and 64-bit.\n-#define SIZE_FORMAT              \"%\"          PRIuPTR\n-#define SIZE_FORMAT_X            \"0x%\"        PRIxPTR\n-#ifdef _LP64\n-#define SIZE_FORMAT_X_0          \"0x%016\"     PRIxPTR\n-#else\n-#define SIZE_FORMAT_X_0          \"0x%08\"      PRIxPTR\n-#endif\n-#define SIZE_FORMAT_W(width)     \"%\"   #width PRIuPTR\n-\n@@ -166,0 +156,1 @@\n+#define SIZE_FORMAT_X_0          \"0x%016\"     PRIxPTR\n@@ -170,0 +161,1 @@\n+#define SIZE_FORMAT_X_0          \"0x%08\"      PRIxPTR\n@@ -378,1 +370,1 @@\n-#define PROPERFMT             SIZE_FORMAT \"%s\"\n+#define PROPERFMT             \"%zu%s\"\n@@ -382,1 +374,1 @@\n-#define RANGEFMT              \"[\" PTR_FORMAT \" - \" PTR_FORMAT \"), (\" SIZE_FORMAT \" bytes)\"\n+#define RANGEFMT              \"[\" PTR_FORMAT \" - \" PTR_FORMAT \"), (%zu bytes)\"\n@@ -386,1 +378,1 @@\n-#define RANGE2FMT             \"[\" PTR_FORMAT \" - \" PTR_FORMAT \"), (\" SIZE_FORMAT \" bytes)\"\n+#define RANGE2FMT             \"[\" PTR_FORMAT \" - \" PTR_FORMAT \"), (%zu bytes)\"\n@@ -419,1 +411,1 @@\n-#define EXACTFMT            SIZE_FORMAT \"%s\"\n+#define EXACTFMT            \"%zu%s\"\n@@ -424,1 +416,1 @@\n-#define HEAP_CHANGE_FORMAT \"%s: \" SIZE_FORMAT \"K(\" SIZE_FORMAT \"K)->\" SIZE_FORMAT \"K(\" SIZE_FORMAT \"K)\"\n+#define HEAP_CHANGE_FORMAT \"%s: %zuK(%zuK)->%zuK(%zuK)\"\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/growableArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/istream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/json.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/nativeCallStack.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/nativeStackPrinter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/numberSeq.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -133,2 +132,2 @@\n-    warning(\"outputStream::do_vsnprintf output truncated -- buffer length is \" SIZE_FORMAT\n-            \" bytes but \" SIZE_FORMAT \" bytes are needed.\",\n+    warning(\"outputStream::do_vsnprintf output truncated -- buffer length is %zu\"\n+            \" bytes but %zu bytes are needed.\",\n@@ -390,1 +389,1 @@\n-    assert(false, \"bad length? (\" SIZE_FORMAT \")\", len);\n+    assert(false, \"bad length? (%zu)\", len);\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/preserveException.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/singleWriterSynchronizer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/spinYield.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/stringUtils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -137,1 +136,1 @@\n-               \" bytes, each \" SIZE_FORMAT,\n+               \" bytes, each %zu\",\n@@ -140,1 +139,1 @@\n-               \" bytes, each \" SIZE_FORMAT,\n+               \" bytes, each %zu\",\n","filename":"src\/hotspot\/share\/utilities\/tableStatistics.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/ticks.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/unsigned5.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/utf8.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/virtualizationSupport.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2023, Red Hat, Inc. and\/or its affiliates.\n+ * Copyright (c) 2023, 2025, Red Hat, Inc. and\/or its affiliates.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n@@ -219,2 +218,2 @@\n-    st->print_cr(\"Current Stack Pointer: \" PTR_FORMAT \" alloca \" SIZE_FORMAT\n-                 \" of \" SIZE_FORMAT \" bytes available unguarded stack space\",\n+    st->print_cr(\"Current Stack Pointer: \" PTR_FORMAT \" alloca %zu\"\n+                 \" of %zu bytes available unguarded stack space\",\n@@ -652,0 +651,6 @@\n+  if (MemTracker::enabled() &&\n+      NmtVirtualMemory_lock != nullptr &&\n+      NmtVirtualMemory_lock->owned_by_self()) {\n+    \/\/ Manually unlock to avoid reentrancy due to mallocs in detailed mode.\n+    NmtVirtualMemory_lock->unlock();\n+  }\n@@ -771,1 +776,1 @@\n-          jio_snprintf(buf, sizeof(buf), SIZE_FORMAT, _size);\n+          jio_snprintf(buf, sizeof(buf), \"%zu\", _size);\n@@ -937,1 +942,1 @@\n-      st->print(\",  free space=\" SIZE_FORMAT \"k\", free_stack_size);\n+      st->print(\",  free space=%zuk\", free_stack_size);\n@@ -1548,0 +1553,6 @@\n+  if (ExecutingUnitTests) {\n+    \/\/ See TEST_VM_CRASH_SIGNAL gtest macro\n+    char tmp[64];\n+    fprintf(stderr, \"signaled: %s\", os::exception_name(sig, tmp, sizeof(tmp)));\n+  }\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/waitBarrier_generic.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/xmlstream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/zipLibrary.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-package java.lang.classfile.components.snippets;\n+package jdk.internal.classfile.components.snippet;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/snippet-files\/PackageSnippets.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,4 @@\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n@@ -340,0 +344,108 @@\n+\n+    \/**\n+     * This class is used only by native JVM code at CDS dump time for loading\n+     * \"unregistered classes\", which are archived classes that are intended to\n+     * be loaded by custom class loaders during runtime.\n+     * See src\/hotspot\/share\/cds\/unregisteredClasses.cpp.\n+     *\/\n+    private static class UnregisteredClassLoader extends URLClassLoader {\n+        private String currentClassName;\n+        private Class<?> currentSuperClass;\n+        private Class<?>[] currentInterfaces;\n+\n+        \/**\n+         * Used only by native code. Construct an UnregisteredClassLoader for loading\n+         * unregistered classes from the specified file. If the file doesn't exist,\n+         * the exception will be caughted by native code which will print a warning message and continue.\n+         *\n+         * @param fileName path of the the JAR file to load unregistered classes from.\n+         *\/\n+        private UnregisteredClassLoader(String fileName) throws InvalidPathException, IOException {\n+            super(toURLArray(fileName), \/*parent*\/null);\n+            currentClassName = null;\n+            currentSuperClass = null;\n+            currentInterfaces = null;\n+        }\n+\n+        private static URL[] toURLArray(String fileName) throws InvalidPathException, IOException {\n+            if (!((new File(fileName)).exists())) {\n+                throw new IOException(\"No such file: \" + fileName);\n+            }\n+            return new URL[] {\n+                \/\/ Use an intermediate File object to construct a URI\/URL without\n+                \/\/ authority component as URLClassPath can't handle URLs with a UNC\n+                \/\/ server name in the authority component.\n+                Path.of(fileName).toRealPath().toFile().toURI().toURL()\n+            };\n+        }\n+\n+\n+        \/**\n+         * Load the class of the given <code>\/name<code> from the JAR file that was given to\n+         * the constructor of the current UnregisteredClassLoader instance. This class must be\n+         * a direct subclass of <code>superClass<\/code>. This class must be declared to implement\n+         * the specified <code>interfaces<\/code>.\n+         * <p>\n+         * This method must be called in a single threaded context. It will never be recursed (thus\n+         * the asserts)\n+         *\n+         * @param name the name of the class to be loaded.\n+         * @param superClass must not be null. The named class must have a super class.\n+         * @param interfaces could be null if the named class does not implement any interfaces.\n+         *\/\n+        private Class<?> load(String name, Class<?> superClass, Class<?>[] interfaces)\n+            throws ClassNotFoundException\n+        {\n+            assert currentClassName == null;\n+            assert currentSuperClass == null;\n+            assert currentInterfaces == null;\n+\n+            try {\n+                currentClassName = name;\n+                currentSuperClass = superClass;\n+                currentInterfaces = interfaces;\n+\n+                return findClass(name);\n+            } finally {\n+                currentClassName = null;\n+                currentSuperClass = null;\n+                currentInterfaces = null;\n+            }\n+        }\n+\n+        \/**\n+         * This method must be called from inside the <code>load()<\/code> method. The <code>\/name<code>\n+         * can be only:\n+         * <ul>\n+         * <li> the <code>name<\/code> parameter for <code>load()<\/code>\n+         * <li> the name of the <code>superClass<\/code> parameter for <code>load()<\/code>\n+         * <li> the name of one of the interfaces in <code>interfaces<\/code> parameter for <code>load()<\/code>\n+         * <ul>\n+         *\n+         * For all other cases, a <code>ClassNotFoundException<\/code> will be thrown.\n+         *\/\n+        protected Class<?> findClass(final String name)\n+            throws ClassNotFoundException\n+        {\n+            Objects.requireNonNull(currentClassName);\n+            Objects.requireNonNull(currentSuperClass);\n+\n+            if (name.equals(currentClassName)) {\n+                \/\/ Note: the following call will call back to <code>this.findClass(name)<\/code> to\n+                \/\/ resolve the super types of the named class.\n+                return super.findClass(name);\n+            }\n+            if (name.equals(currentSuperClass.getName())) {\n+                return currentSuperClass;\n+            }\n+            if (currentInterfaces != null) {\n+                for (Class<?> c : currentInterfaces) {\n+                    if (name.equals(c.getName())) {\n+                        return c;\n+                    }\n+                }\n+            }\n+\n+            throw new ClassNotFoundException(name);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":113,"deletions":1,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-tzdata2024b\n+tzdata2025a\n","filename":"src\/java.base\/share\/data\/tzdata\/VERSION","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -200,0 +200,2 @@\n+# https:\/\/en.wikipedia.org\/wiki\/Concordia_Station\n+# Can use Asia\/Singapore, which it has agreed with since inception.\n","filename":"src\/java.base\/share\/data\/tzdata\/antarctica","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3691,15 +3691,64 @@\n-# The rest of the data entries are from Shanks & Pottenger.\n-\n-# From Jesper Nørgaard Welen (2006-04-26):\n-# ... claims that Philippines had DST last time in 1990:\n-# http:\/\/story.philippinetimes.com\/p.x\/ct\/9\/id\/145be20cc6b121c0\/cid\/3e5bbccc730d258c\/\n-# [a story dated 2006-04-25 by Cris Larano of Dow Jones Newswires,\n-# but no details]\n-\n-# From Paul Eggert (2014-08-14):\n-# The following source says DST may be instituted November-January and again\n-# March-June, but this is not definite.  It also says DST was last proclaimed\n-# during the Ramos administration (1992-1998); but again, no details.\n-# Carcamo D. PNoy urged to declare use of daylight saving time.\n-# Philippine Star 2014-08-05\n-# http:\/\/www.philstar.com\/headlines\/2014\/08\/05\/1354152\/pnoy-urged-declare-use-daylight-saving-time\n+\n+# From P Chan (2021-05-10):\n+# Here's a fairly comprehensive article in Japanese:\n+#\thttps:\/\/wiki.suikawiki.org\/n\/Philippine%20Time\n+# (2021-05-16):\n+# According to the references listed in the article,\n+# the periods that the Philippines (Manila) observed DST or used +9 are:\n+#\n+# 1936-10-31 24:00 to 1937-01-15 24:00\n+#\t(Proclamation No. 104, Proclamation No. 126)\n+# 1941-12-15 24:00 to 1945-11-30 24:00\n+#\t(Proclamation No. 789, Proclamation No. 20)\n+# 1954-04-11 24:00 to 1954-06-04 24:00\n+#\t(Proclamation No. 13, Proclamation No. 33)\n+# 1977-03-27 24:00 to 1977-09-21 24:00\n+#\t(Proclamation No. 1629, Proclamation No. 1641)\n+# 1990-05-21 00:00 to 1990-07-28 24:00\n+#\t(National Emergency Memorandum Order No. 17, Executive Order No. 415)\n+#\n+# Proclamation No. 104 ... October 30, 1936\n+#  https:\/\/www.officialgazette.gov.ph\/1936\/10\/30\/proclamation-no-104-s-1936\/\n+# Proclamation No. 126 ... January 15, 1937\n+#  https:\/\/www.officialgazette.gov.ph\/1937\/01\/15\/proclamation-no-126-s-1937\/\n+# Proclamation No. 789 ... December 13, 1941\n+#  https:\/\/www.officialgazette.gov.ph\/1941\/12\/13\/proclamation-no-789-s-1941\/\n+# Proclamation No. 20 ... November 11, 1945\n+#  https:\/\/www.officialgazette.gov.ph\/1945\/11\/11\/proclamation-no-20-s-1945\/\n+# Proclamation No. 13 ... April 6, 1954\n+#  https:\/\/www.officialgazette.gov.ph\/1954\/04\/06\/proclamation-no-13-s-1954\/\n+# Proclamation No. 33 ... June 3, 1954\n+#  https:\/\/www.officialgazette.gov.ph\/1954\/06\/03\/proclamation-no-33-s-1954\/\n+# Proclamation No. 1629 ... March 25, 1977\n+#  https:\/\/www.officialgazette.gov.ph\/1977\/03\/25\/proclamation-no-1629-s-1977\/\n+# Proclamation No. 1641 ...May 26, 1977\n+#  https:\/\/www.officialgazette.gov.ph\/1977\/05\/26\/proclamation-no-1641-s-1977\/\n+# National Emergency Memorandum Order No. 17 ... May 2, 1990\n+#  https:\/\/www.officialgazette.gov.ph\/1990\/05\/02\/national-emergency-memorandum-order-no-17-s-1990\/\n+# Executive Order No. 415 ... July 20, 1990\n+#  https:\/\/www.officialgazette.gov.ph\/1990\/07\/20\/executive-order-no-415-s-1990\/\n+#\n+# During WWII, Proclamation No. 789 fixed two periods of DST. The first period\n+# was set to continue only until January 31, 1942. But Manila was occupied by\n+# the Japanese earlier in the month....\n+#\n+# For the date of the adoption of standard time, Shank[s] gives 1899-05-11.\n+# The article is not able to state the basis of that. I guess it was based on\n+# a US War Department Circular issued on that date.\n+#\thttps:\/\/books.google.com\/books?id=JZ1PAAAAYAAJ&pg=RA3-PA8\n+#\n+# However, according to other sources, standard time was adopted on\n+# 1899-09-06.  Also, the LMT was GMT+8:03:52\n+#\thttps:\/\/books.google.com\/books?id=MOYIAQAAIAAJ&pg=PA521\n+#\thttps:\/\/books.google.com\/books?id=lSnqqatpYikC&pg=PA21\n+#\n+# From Paul Eggert (2024-09-05):\n+# The penultimate URL in P Chan's email refers to page 521 of\n+# Selga M, The Time Service in the Philippines.\n+# Proc Pan-Pacific Science Congress. Vol. 1 (1923), 519-532.\n+# It says, \"The change from the meridian 120° 58' 04\" to the 120th implied a\n+# change of 3 min. 52s.26 in time; consequently on 6th September, 1899,\n+# Manila Observatory gave the noon signal 3 min. 52s.26 later than before\".\n+#\n+# Wikipedia says the US declared Manila liberated on March 4, 1945;\n+# this doesn't affect clocks, just our time zone abbreviation and DST flag.\n@@ -3723,6 +3772,0 @@\n-# From P Chan (2021-05-10):\n-# Here's a fairly comprehensive article in Japanese:\n-# https:\/\/wiki.suikawiki.org\/n\/Philippine%20Time\n-# From Paul Eggert (2021-05-10):\n-# The info in the Japanese table has not been absorbed (yet) below.\n-\n@@ -3730,6 +3773,14 @@\n-Rule\tPhil\t1936\tonly\t-\tNov\t1\t0:00\t1:00\tD\n-Rule\tPhil\t1937\tonly\t-\tFeb\t1\t0:00\t0\tS\n-Rule\tPhil\t1954\tonly\t-\tApr\t12\t0:00\t1:00\tD\n-Rule\tPhil\t1954\tonly\t-\tJul\t1\t0:00\t0\tS\n-Rule\tPhil\t1978\tonly\t-\tMar\t22\t0:00\t1:00\tD\n-Rule\tPhil\t1978\tonly\t-\tSep\t21\t0:00\t0\tS\n+Rule\tPhil\t1936\tonly\t-\tOct\t31\t24:00\t1:00\tD\n+Rule\tPhil\t1937\tonly\t-\tJan\t15\t24:00\t0\tS\n+Rule\tPhil\t1941\tonly\t-\tDec\t15\t24:00\t1:00\tD\n+# The following three rules were canceled by Japan:\n+#Rule\tPhil\t1942\tonly\t-\tJan\t31\t24:00\t0\tS\n+#Rule\tPhil\t1942\tonly\t-\tMar\t 1\t 0:00\t1:00\tD\n+#Rule\tPhil\t1942\tonly\t-\tJun\t30\t24:00\t0\tS\n+Rule\tPhil\t1945\tonly\t-\tNov\t30\t24:00\t0\tS\n+Rule\tPhil\t1954\tonly\t-\tApr\t11\t24:00\t1:00\tD\n+Rule\tPhil\t1954\tonly\t-\tJun\t 4\t24:00\t0\tS\n+Rule\tPhil\t1977\tonly\t-\tMar\t27\t24:00\t1:00\tD\n+Rule\tPhil\t1977\tonly\t-\tSep\t21\t24:00\t0\tS\n+Rule\tPhil\t1990\tonly\t-\tMay\t21\t 0:00\t1:00\tD\n+Rule\tPhil\t1990\tonly\t-\tJul\t28\t24:00\t0\tS\n@@ -3737,4 +3788,4 @@\n-Zone\tAsia\/Manila\t-15:56:00 -\tLMT\t1844 Dec 31\n-\t\t\t8:04:00 -\tLMT\t1899 May 11\n-\t\t\t8:00\tPhil\tP%sT\t1942 May\n-\t\t\t9:00\t-\tJST\t1944 Nov\n+Zone\tAsia\/Manila\t-15:56:08 -\tLMT\t1844 Dec 31\n+\t\t\t8:03:52 -\tLMT\t1899 Sep  6  4:00u\n+\t\t\t8:00\tPhil\tP%sT\t1942 Feb 11 24:00\n+\t\t\t9:00\t-\tJST\t1945 Mar  4\n","filename":"src\/java.base\/share\/data\/tzdata\/asia","additions":82,"deletions":31,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -1265,4 +1265,4 @@\n-# The Australian Bureau of Meteorology FAQ\n-# http:\/\/www.bom.gov.au\/faq\/faqgen.htm\n-# (1999-09-27) writes that Giles Meteorological Station uses\n-# South Australian time even though it's located in Western Australia.\n+# From Christopher Hunt (2006-11-21), after an advance warning\n+# from Jesper Nørgaard Welen (2006-11-01):\n+# WA are trialing DST for three years.\n+# http:\/\/www.parliament.wa.gov.au\/parliament\/bills.nsf\/9A1B183144403DA54825721200088DF1\/$File\/Bill175-1B.pdf\n@@ -1280,48 +1280,4 @@\n-# Queensland\n-\n-# From Paul Eggert (2018-02-26):\n-# I lack access to the following source for Queensland DST:\n-# Pearce C. History of daylight saving time in Queensland.\n-# Queensland Hist J. 2017 Aug;23(6):389-403\n-# https:\/\/search.informit.com.au\/documentSummary;dn=994682348436426;res=IELHSS\n-\n-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):\n-# #   The state of QUEENSLAND.. [ Courtesy Qld. Dept Premier Econ&Trade Devel ]\n-# #\t\t\t\t\t\t[ Dec 1990 ]\n-# ...\n-# Zone\tAustralia\/Queensland\t10:00\tAQ\t%sST\n-# ...\n-# Rule\tAQ\t1971\tonly\t-\tOct\tlastSun\t2:00\t1:00\tD\n-# Rule\tAQ\t1972\tonly\t-\tFeb\tlastSun\t3:00\t0\tE\n-# Rule\tAQ\t1989\tmax\t-\tOct\tlastSun\t2:00\t1:00\tD\n-# Rule\tAQ\t1990\tmax\t-\tMar\tSun>=1\t3:00\t0\tE\n-\n-# From Bradley White (1989-12-24):\n-# \"Australia\/Queensland\" now observes daylight time (i.e. from\n-# October 1989).\n-\n-# From Bradley White (1991-03-04):\n-# A recent excerpt from an Australian newspaper...\n-# ...Queensland...[has] agreed to end daylight saving\n-# at 3am tomorrow (March 3)...\n-\n-# From John Mackin (1991-03-06):\n-# I can certainly confirm for my part that Daylight Saving in NSW did in fact\n-# end on Sunday, 3 March.  I don't know at what hour, though.  (It surprised\n-# me.)\n-\n-# From Bradley White (1992-03-08):\n-# ...there was recently a referendum in Queensland which resulted\n-# in the experimental daylight saving system being abandoned. So, ...\n-# ...\n-# Rule\tQLD\t1989\t1991\t-\tOct\tlastSun\t2:00\t1:00\tD\n-# Rule\tQLD\t1990\t1992\t-\tMar\tSun>=1\t3:00\t0\tS\n-# ...\n-\n-# From Arthur David Olson (1992-03-08):\n-# The chosen rules the union of the 1971\/1972 change and the 1989-1992 changes.\n-\n-# From Christopher Hunt (2006-11-21), after an advance warning\n-# from Jesper Nørgaard Welen (2006-11-01):\n-# WA are trialing DST for three years.\n-# http:\/\/www.parliament.wa.gov.au\/parliament\/bills.nsf\/9A1B183144403DA54825721200088DF1\/$File\/Bill175-1B.pdf\n+# The Australian Bureau of Meteorology FAQ\n+# http:\/\/www.bom.gov.au\/faq\/faqgen.htm\n+# (1999-09-27) writes that Giles Meteorological Station uses\n+# South Australian time even though it's located in Western Australia.\n@@ -1385,0 +1341,53 @@\n+# From Stuart Bishop (2024-11-12):\n+# An article discussing the in-use but technically unofficial timezones\n+# in the Western Australian portion of the Nullarbor Plain.\n+# https:\/\/www.abc.net.au\/news\/2024-11-22\/outback-wa-properties-strange-time-zones\/104542494\n+# From Paul Eggert (2024-11-12):\n+# As the article says, the Eyre Bird Observatory and nearby sheep stations\n+# can use Tokyo time.  Other possibilities include Asia\/Chita, Asia\/Seoul,\n+# and Asia\/Jayapura.\n+\n+# Queensland\n+\n+# From Paul Eggert (2018-02-26):\n+# I lack access to the following source for Queensland DST:\n+# Pearce C. History of daylight saving time in Queensland.\n+# Queensland Hist J. 2017 Aug;23(6):389-403\n+# https:\/\/search.informit.com.au\/documentSummary;dn=994682348436426;res=IELHSS\n+\n+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):\n+# #   The state of QUEENSLAND.. [ Courtesy Qld. Dept Premier Econ&Trade Devel ]\n+# #\t\t\t\t\t\t[ Dec 1990 ]\n+# ...\n+# Zone\tAustralia\/Queensland\t10:00\tAQ\t%sST\n+# ...\n+# Rule\tAQ\t1971\tonly\t-\tOct\tlastSun\t2:00\t1:00\tD\n+# Rule\tAQ\t1972\tonly\t-\tFeb\tlastSun\t3:00\t0\tE\n+# Rule\tAQ\t1989\tmax\t-\tOct\tlastSun\t2:00\t1:00\tD\n+# Rule\tAQ\t1990\tmax\t-\tMar\tSun>=1\t3:00\t0\tE\n+\n+# From Bradley White (1989-12-24):\n+# \"Australia\/Queensland\" now observes daylight time (i.e. from\n+# October 1989).\n+\n+# From Bradley White (1991-03-04):\n+# A recent excerpt from an Australian newspaper...\n+# ...Queensland...[has] agreed to end daylight saving\n+# at 3am tomorrow (March 3)...\n+\n+# From John Mackin (1991-03-06):\n+# I can certainly confirm for my part that Daylight Saving in NSW did in fact\n+# end on Sunday, 3 March.  I don't know at what hour, though.  (It surprised\n+# me.)\n+\n+# From Bradley White (1992-03-08):\n+# ...there was recently a referendum in Queensland which resulted\n+# in the experimental daylight saving system being abandoned. So, ...\n+# ...\n+# Rule\tQLD\t1989\t1991\t-\tOct\tlastSun\t2:00\t1:00\tD\n+# Rule\tQLD\t1990\t1992\t-\tMar\tSun>=1\t3:00\t0\tS\n+# ...\n+\n+# From Arthur David Olson (1992-03-08):\n+# The chosen rules the union of the 1971\/1972 change and the 1989-1992 changes.\n+\n","filename":"src\/java.base\/share\/data\/tzdata\/australasia","additions":61,"deletions":52,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -77,0 +77,4 @@\n+# There is no \"Etc\/Unknown\" entry, as CLDR says that \"Etc\/Unknown\"\n+# corresponds to an unknown or invalid time zone, and things would get\n+# confusing if Etc\/Unknown were made valid here.\n+\n","filename":"src\/java.base\/share\/data\/tzdata\/etcetera","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1173,1 +1173,1 @@\n-# From a contributor who wishes to remain anonymous for now (2023-10-29):\n+# From Jule Dabars (2023-10-29):\n","filename":"src\/java.base\/share\/data\/tzdata\/europe","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,10 @@\n+# TZ=\"Factory\" was added to TZDB in 1989, and in 2016 its abbreviation\n+# was changed to \"-00\" from a longish English-language error message.\n+# Around 2010, CLDR added \"Etc\/Unknown\" for use with TZDB, to stand\n+# for an unknown or invalid time zone.  These two notions differ:\n+# TZ=\"Factory\" is a valid timezone, so tzalloc(\"Factory\") succeeds, whereas\n+# TZ=\"Etc\/Unknown\" is invalid and tzalloc(\"Etc\/Unknown\") fails.\n+# Also, a downstream distributor could modify Factory to be a\n+# default timezone suitable for the devices it manufactures,\n+# whereas that cannot happen for Etc\/Unknown.\n+\n","filename":"src\/java.base\/share\/data\/tzdata\/factory","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-#Expires 2025\tJun\t28\t00:00:00\n+#Expires 2025\tDec\t28\t00:00:00\n@@ -98,2 +98,2 @@\n-#updated 1720104763 (2024-07-04 14:52:43 UTC)\n-#expires 1751068800 (2025-06-28 00:00:00 UTC)\n+#updated 1736208000 (2025-01-07 00:00:00 UTC)\n+#expires 1766880000 (2025-12-28 00:00:00 UTC)\n@@ -102,1 +102,1 @@\n-#\tFile expires on 28 June 2025\n+#\tFile expires on 28 December 2025\n","filename":"src\/java.base\/share\/data\/tzdata\/leapseconds","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-# From Paul Eggert (2018-03-20):\n+# From Paul Eggert (2024-11-18):\n@@ -55,1 +55,4 @@\n-# lines between time zones.  The key individual who made time zones\n+# lines between time zones.  Sandford Fleming of the Canadian Pacific Railway\n+# argued for Dowd's proposal in 1876, and Cleveland Abbe of the American\n+# Meteorology Society published a report in 1879 recommending four US time\n+# zones based on GMT.  However, the key individual who made time zones\n@@ -2657,1 +2660,1 @@\n-Rule\tMexico\t1931\tonly\t-\tApril\t30\t0:00\t1:00\tD\n+Rule\tMexico\t1931\tonly\t-\tApr\t30\t0:00\t1:00\tD\n","filename":"src\/java.base\/share\/data\/tzdata\/northamerica","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1713,1 +1713,1 @@\n-Rule\tPara\t2010\tmax\t-\tOct\tSun>=1\t0:00\t1:00\t-\n+Rule\tPara\t2010\t2024\t-\tOct\tSun>=1\t0:00\t1:00\t-\n@@ -1732,1 +1732,21 @@\n-Rule\tPara\t2013\tmax\t-\tMar\tSun>=22\t0:00\t0\t-\n+Rule\tPara\t2013\t2024\t-\tMar\tSun>=22\t0:00\t0\t-\n+#\n+# From Heitor David Pinto (2024-09-24):\n+# Today the Congress of Paraguay passed a bill to observe UTC-3 permanently....\n+# The text of the bill says that it would enter into force on the first\n+# Sunday in October 2024, the same date currently scheduled to start DST....\n+# https:\/\/silpy.congreso.gov.py\/web\/expediente\/132531\n+# (2024-10-14):\n+# The president approved the law on 11 October 2024,\n+# and it was officially published on 14 October 2024.\n+# https:\/\/www.gacetaoficial.gov.py\/index\/detalle_publicacion\/89723\n+# The text of the law says that it enters into force on the first\n+# Sunday in October 2024 (6 October 2024).  But the constitution\n+# prohibits retroactive effect, and the civil code says that laws\n+# enter into force on the day after their publication or on the day\n+# that they specify, and it also says that they don't have retroactive\n+# effect.  So I think that the time change on 6 October 2024 should\n+# still be considered as DST according to the previous law, and\n+# permanently UTC-3 from 15 October 2024 according to the new law....\n+# https:\/\/www.constituteproject.org\/constitution\/Paraguay_2011\n+# https:\/\/www.oas.org\/dil\/esp\/codigo_civil_paraguay.pdf\n@@ -1739,1 +1759,2 @@\n-\t\t\t-4:00\tPara\t%z\n+\t\t\t-4:00\tPara\t%z\t2024 Oct 15\n+\t\t\t-3:00\t-\t%z\n","filename":"src\/java.base\/share\/data\/tzdata\/southamerica","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -3972,5 +3972,34 @@\n--   If any of the VM options `--upgrade-module-path`, `--patch-module` or\n-    `--limit-modules` are specified, CDS is disabled. This means that the\n-    JVM will execute without loading any CDS archives. In addition, if\n-    you try to create a CDS archive with any of these 3 options specified,\n-    the JVM will report an error.\n+### Module related options\n+\n+The following module related options are supported by CDS: `--module-path`, `--module`,\n+`--add-modules`, and `--enable-native-access`.\n+\n+The values for these options (if specified), should be identical when creating and using the\n+CDS archive. Otherwise, if there is a mismatch of any of these options, the CDS archive may be\n+partially or completely disabled, leading to lower performance.\n+\n+- If the -XX:+AOTClassLinking options *was* used during CDS archive creation, the CDS archive\n+  cannot be used, and the following error message is printed:\n+\n+  `CDS archive has aot-linked classes. It cannot be used when archived full module graph is not used`\n+\n+- If the -XX:+AOTClassLinking options *was not* used during CDS archive creation, the CDS archive\n+  can be used, but the \"archived module graph\" feature will be disabled. This can lead to increased\n+  start-up time.\n+\n+To diagnose problems with the above options, you can add `-Xlog:cds` to the application's VM\n+arguments. For example, if `--add-modules jdk.jconcole` was specified during archive creation\n+and `--add-modules jdk.incubator.vector` is specified during runtime, the following messages will\n+be logged:\n+\n+ `Mismatched values for property jdk.module.addmods`\n+\n+ `runtime jdk.incubator.vector dump time jdk.jconsole`\n+\n+ `subgraph jdk.internal.module.ArchivedBootLayer cannot be used because full module graph is disabled`\n+\n+If any of the VM options `--upgrade-module-path`, `--patch-module` or\n+`--limit-modules` are specified, CDS is disabled. This means that the\n+JVM will execute without loading any CDS archives. In addition, if\n+you try to create a CDS archive with any of these 3 options specified,\n+the JVM will report an error.\n","filename":"src\/java.base\/share\/man\/java.md","additions":35,"deletions":6,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-    private static final char ESCAPE_VERIFICATION[][] = {\n+    private static final String ESCAPE_VERIFICATION[] = {\n@@ -210,4 +210,5 @@\n-        {' ', '\\t', '\\\"', '<', '>', '&', '|', '^'},\n-        {' ', '\\t', '\\\"', '<', '>'},\n-        {' ', '\\t', '\\\"', '<', '>'},\n-        {' ', '\\t'}\n+        \/\/ All space characters require quoting are checked in needsEscaping().\n+        \"\\\"<>&|^\",\n+        \"\\\"<>\",\n+        \"\\\"<>\",\n+        \"\"\n@@ -328,3 +329,8 @@\n-            char testEscape[] = ESCAPE_VERIFICATION[verificationType];\n-            for (int i = 0; i < testEscape.length; ++i) {\n-                if (arg.indexOf(testEscape[i]) >= 0) {\n+            for (int i = 0; i < arg.length(); i++) {\n+                char ch = arg.charAt(i);\n+                if (Character.isLetterOrDigit(ch))\n+                    continue;   \/\/ skip over common characters\n+                \/\/ All space chars require quotes and other mode specific characters\n+                if (Character.isSpaceChar(ch) ||\n+                        Character.isWhitespace(ch) ||\n+                        ESCAPE_VERIFICATION[verificationType].indexOf(ch) >= 0) {\n","filename":"src\/java.base\/windows\/classes\/java\/lang\/ProcessImpl.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,7 @@\n- *\n- * This package has been deprecated and may be removed in a future version of the Java Platform\n- * There is no replacement.\n- *\n+ * <p>\n+ * These APIs are now both obsolete and express an <em>anti-pattern<\/em> of component\n+ * assembly and interaction.\n+ * <p>\n+ * This package has been deprecated and may be removed in a future version of\n+ * the Java Platform. There is no replacement.\n+ * <p>\n@@ -38,1 +41,1 @@\n- *\n+ * <p>\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/beancontext\/package-info.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import javax.swing.*;\n+import javax.swing.ListSelectionModel;\n@@ -33,1 +33,1 @@\n- * An event that characterizes a change in selection. The change is limited to a\n+ * An event that characterizes a change in selection. The change is limited to\n@@ -56,3 +56,3 @@\n-    private int firstIndex;\n-    private int lastIndex;\n-    private boolean isAdjusting;\n+    private final int firstIndex;\n+    private final int lastIndex;\n+    private final boolean isAdjusting;\n@@ -67,2 +67,2 @@\n-     * @param firstIndex the first index in the range, &lt;= lastIndex\n-     * @param lastIndex the last index in the range, &gt;= firstIndex\n+     * @param firstIndex the first index in the range, &lt;= {@code lastIndex}\n+     * @param lastIndex the last index in the range, &gt;= {@code firstIndex}\n@@ -114,1 +114,1 @@\n-     * @return a String representation of this object\n+     * @return a string representation of this object\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/event\/ListSelectionEvent.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3091,10 +3091,1 @@\n-            Hashtable<String, Float> mapping = (w3cLengthUnits) ? w3cLengthMapping : lengthMapping;\n-            float scale = 1;\n-            if (units != null) {\n-                Float scaleFloat = mapping.get(units);\n-                if (scaleFloat != null) {\n-                    scale = scaleFloat.floatValue();\n-                }\n-            }\n-            return this.value * scale;\n-\n+            return getValue(value, units, w3cLengthUnits);\n@@ -3103,8 +3094,3 @@\n-        static float getValue(float value, String units, Boolean w3cLengthUnits) {\n-            Hashtable<String, Float> mapping = (w3cLengthUnits) ? w3cLengthMapping : lengthMapping;\n-            float scale = 1;\n-            if (units != null) {\n-                Float scaleFloat = mapping.get(units);\n-                if (scaleFloat != null) {\n-                    scale = scaleFloat.floatValue();\n-                }\n+        static float getValue(float value, String units, boolean w3cLengthUnits) {\n+            if (units == null) {\n+                return value;\n@@ -3112,0 +3098,2 @@\n+            Hashtable<String, Float> mapping = (w3cLengthUnits) ? w3cLengthMapping : lengthMapping;\n+            float scale = mapping.getOrDefault(units, 1f);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-     ((b < 0) && (a >= 0) && (-b > (INT_MAX - a)))) \\\n+     ((b < 0) && (a >= 0) && (a > (INT_MAX + b)))) \\\n","filename":"src\/java.desktop\/share\/native\/libawt\/java2d\/SurfaceData.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,0 +105,15 @@\n+\/* Return a handle to the module containing this method, either a DLL in case\n+ * of a dynamic library build, or the .EXE in case of a static build.\n+ *\/\n+static HMODULE GetAwtModuleHandle() {\n+    HMODULE hModule = NULL;\n+    GetModuleHandleEx(\n+        GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,\n+        (LPCTSTR) &GetAwtModuleHandle,\n+        &hModule\n+    );\n+    return hModule;\n+}\n+\n+extern \"C\" {\n+\n@@ -110,0 +125,2 @@\n+    AwtToolkit::GetInstance().SetModuleHandle(GetAwtModuleHandle());\n+\n@@ -116,0 +133,2 @@\n+}\n+\n@@ -249,26 +268,0 @@\n-\/************************************************************************\n- * Exported functions\n- *\/\n-\n-extern \"C\" BOOL APIENTRY DllMain(HANDLE hInstance, DWORD ul_reason_for_call,\n-                                 LPVOID)\n-{\n-    \/\/ Don't use the TRY and CATCH_BAD_ALLOC_RET macros if we're detaching\n-    \/\/ the library. Doing so causes awt.dll to call back into the VM during\n-    \/\/ shutdown. This crashes the HotSpot VM.\n-    switch (ul_reason_for_call) {\n-    case DLL_PROCESS_ATTACH:\n-        TRY;\n-        AwtToolkit::GetInstance().SetModuleHandle((HMODULE)hInstance);\n-        CATCH_BAD_ALLOC_RET(FALSE);\n-        break;\n-    case DLL_PROCESS_DETACH:\n-#ifdef DEBUG\n-        DTrace_DisableMutex();\n-        DMem_DisableMutex();\n-#endif \/\/ DEBUG\n-        break;\n-    }\n-    return TRUE;\n-}\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Toolkit.cpp","additions":20,"deletions":27,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2113,0 +2113,32 @@\n+    HICON hNewIcon = NULL;\n+    HICON hNewIconSm = NULL;\n+\n+    try {\n+        hNewIcon = CreateIconFromRaster(env, iconRaster, w, h);\n+        if (env->ExceptionCheck()) {\n+            if (hNewIcon != NULL) {\n+                DestroyIcon(hNewIcon);\n+            }\n+            return;\n+        }\n+\n+        hNewIconSm = CreateIconFromRaster(env, smallIconRaster, smw, smh);\n+        if (env->ExceptionCheck()) {\n+            if (hNewIcon != NULL) {\n+                DestroyIcon(hNewIcon);\n+            }\n+            if (hNewIconSm != NULL) {\n+                DestroyIcon(hNewIconSm);\n+            }\n+            return;\n+        }\n+    } catch (...) {\n+        if (hNewIcon != NULL) {\n+            DestroyIcon(hNewIcon);\n+        }\n+        if (hNewIconSm != NULL) {\n+            DestroyIcon(hNewIconSm);\n+        }\n+        return;\n+    }\n+\n@@ -2115,1 +2147,0 @@\n-    \/\/Destroy previous icon if it isn't inherited\n@@ -2119,1 +2150,0 @@\n-    m_hIcon = NULL;\n@@ -2123,4 +2153,3 @@\n-    m_hIconSm = NULL;\n-    m_hIcon = CreateIconFromRaster(env, iconRaster, w, h);\n-    JNU_CHECK_EXCEPTION(env);\n-    m_hIconSm = CreateIconFromRaster(env, smallIconRaster, smw, smh);\n+\n+    m_hIcon = hNewIcon;\n+    m_hIconSm = hNewIconSm;\n@@ -2139,0 +2168,1 @@\n+\n@@ -2141,0 +2171,2 @@\n+\n+    \/\/ Destroy previous icons if they were not inherited\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.cpp","additions":39,"deletions":7,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.security.PrivilegedActionException;\n@@ -126,1 +125,1 @@\n-        \/\/ We should call reqIncomming() here... shouldn't we?\n+        \/\/ reqIncoming()\/rspOutgoing() could be here, but never have been.\n@@ -193,1 +192,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -197,2 +196,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -211,1 +209,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -240,1 +240,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -244,2 +244,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -260,1 +259,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -303,1 +304,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -307,2 +308,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -321,1 +321,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -369,1 +371,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -373,2 +375,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -389,1 +390,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -406,1 +409,1 @@\n-            doPrivilegedOperation(\n+            doOperation(\n@@ -410,2 +413,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -418,1 +420,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -439,1 +443,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -443,2 +447,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -449,1 +452,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -477,1 +482,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -481,2 +486,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -485,1 +489,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -513,1 +519,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -517,2 +523,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -521,1 +526,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -531,1 +538,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -535,2 +542,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -539,1 +545,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -553,1 +561,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -557,2 +565,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -561,1 +568,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -583,1 +592,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -587,2 +596,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -599,1 +607,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -620,1 +630,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -624,2 +634,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -632,1 +641,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -668,1 +679,1 @@\n-            doPrivilegedOperation(\n+            doOperation(\n@@ -672,2 +683,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -686,1 +696,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -721,1 +733,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -725,2 +737,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -733,1 +744,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -777,1 +790,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -781,2 +794,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -791,1 +803,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -805,1 +819,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -809,2 +823,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -813,1 +826,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -826,1 +841,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -830,2 +845,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -834,1 +848,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -856,1 +872,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -860,2 +876,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -870,1 +885,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -891,1 +908,1 @@\n-                doPrivilegedOperation(\n+                doOperation(\n@@ -895,2 +912,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -901,1 +917,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -963,1 +981,1 @@\n-                    doPrivilegedOperation(ADD_NOTIFICATION_LISTENERS,\n+                    doOperation(ADD_NOTIFICATION_LISTENERS,\n@@ -981,4 +999,0 @@\n-            if (e instanceof PrivilegedActionException) {\n-                e = extractException(e);\n-            }\n-\n@@ -994,1 +1008,1 @@\n-                throw newIOException(\"Got unexpected server exception: \"+e,e);\n+                throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -1045,1 +1059,1 @@\n-            doPrivilegedOperation(\n+            doOperation(\n@@ -1049,2 +1063,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -1055,1 +1068,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -1085,1 +1100,1 @@\n-            doPrivilegedOperation(\n+            doOperation(\n@@ -1089,2 +1104,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -1097,1 +1111,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -1122,1 +1138,1 @@\n-            doPrivilegedOperation(\n+            doOperation(\n@@ -1126,2 +1142,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -1134,1 +1149,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -1187,1 +1204,1 @@\n-            doPrivilegedOperation(\n+            doOperation(\n@@ -1191,2 +1208,1 @@\n-        } catch (PrivilegedActionException pe) {\n-            Exception e = extractException(pe);\n+        } catch (Exception e) {\n@@ -1199,1 +1215,3 @@\n-            throw newIOException(\"Got unexpected server exception: \" + e, e);\n+            if (e instanceof RuntimeException)\n+                throw (RuntimeException) e;\n+            throw new IOException(\"Got unexpected server exception: \" + e, e);\n@@ -1296,4 +1314,4 @@\n-    private Object doPrivilegedOperation(final int operation,\n-                                         final Object[] params,\n-                                         final Subject delegationSubject)\n-        throws PrivilegedActionException, IOException {\n+    private Object doOperation(final int operation,\n+                               final Object[] params,\n+                               final Subject delegationSubject)\n+        throws Exception {\n@@ -1309,9 +1327,1 @@\n-                try {\n-                    return doOperation(operation, params);\n-                } catch (Exception e) {\n-                    if (e instanceof RuntimeException) {\n-                        throw (RuntimeException) e;\n-                    } else {\n-                        throw new PrivilegedActionException(e);\n-                    }\n-                }\n+                return doOperationInner(operation, params);\n@@ -1320,1 +1330,1 @@\n-                    return Subject.callAs(subject, () -> doOperation(operation, params));\n+                    return Subject.callAs(subject, () -> doOperationInner(operation, params));\n@@ -1323,6 +1333,2 @@\n-                    if (thr instanceof SecurityException se) {\n-                        throw se;\n-                    } else if (thr instanceof IOException ioe) {\n-                        throw ioe;\n-                    } else if (thr instanceof Exception e1) {\n-                        throw new PrivilegedActionException(e1);\n+                    if (thr instanceof Exception e) {\n+                        throw e;\n@@ -1341,1 +1347,1 @@\n-    private Object doOperation(int operation, Object[] params)\n+    private Object doOperationInner(int operation, Object[] params)\n@@ -1344,0 +1350,3 @@\n+        \/\/ Renamed this method to ensure nothing accidentally calls it.\n+        \/\/ All calls are to the 3-argument doOperation(), except those from that method.\n+\n@@ -1489,14 +1498,1 @@\n-                if (subject != null) {\n-                    try {\n-                        return Subject.callAs(subject, () -> wrappedClass.cast(mo.get()));\n-                    } catch (CompletionException ce) {\n-                        Throwable thr = ce.getCause();\n-                        if (thr instanceof Exception e) {\n-                            throw e;\n-                        } else {\n-                            throw new RuntimeException(thr);\n-                        }\n-                    }\n-                } else {\n-                    return wrappedClass.cast(mo.get());\n-                }\n+                return wrappedClass.cast(mo.get());\n@@ -1542,20 +1538,0 @@\n-    \/**\n-     * Construct a new IOException with a nested exception.\n-     * The nested exception is set only if JDK {@literal >= 1.4}\n-     *\/\n-    private static IOException newIOException(String message,\n-                                              Throwable cause) {\n-        return new IOException(message, cause);\n-    }\n-\n-    \/**\n-     * Iterate until we extract the real exception\n-     * from a stack of PrivilegedActionExceptions.\n-     *\/\n-    private static Exception extractException(Exception e) {\n-        while (e instanceof PrivilegedActionException) {\n-            e = ((PrivilegedActionException)e).getException();\n-        }\n-        return e;\n-    }\n-\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnectionImpl.java","additions":132,"deletions":156,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,0 @@\n-    public static final boolean ALLOW_NONPUBLIC_MBEAN = Boolean.parseBoolean(System.getProperty(\"jdk.jmx.mbeans.allowNonPublic\"));\n@@ -520,2 +519,1 @@\n-                (Modifier.isPublic(interfaces[i].getModifiers()) ||\n-                 ALLOW_NONPUBLIC_MBEAN)) {\n+                Modifier.isPublic(interfaces[i].getModifiers())) {\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/Introspector.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,2 +110,1 @@\n-        } else if (!Modifier.isPublic(mbeanType.getModifiers()) &&\n-                   !Introspector.ALLOW_NONPUBLIC_MBEAN) {\n+        } else if (!Modifier.isPublic(mbeanType.getModifiers())) {\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/MBeanAnalyzer.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -147,3 +147,1 @@\n-            String multiname = System.getProperty(\"jmx.mxbean.multiname\");\n-            if (!\"true\".equalsIgnoreCase(multiname)) {\n-                throw new InstanceAlreadyExistsException(\n+            throw new InstanceAlreadyExistsException(\n@@ -151,1 +149,0 @@\n-            }\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/MXBeanLookup.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -265,5 +265,0 @@\n-        \/\/ keep it for the compatibility for the fix:\n-        \/\/ 6174229: Environment parameter should be notification.buffer.size\n-        \/\/ instead of buffer.size\n-        final String oldP = \"jmx.remote.x.buffer.size\";\n-\n@@ -275,5 +270,0 @@\n-            } else { \/\/ try the old one\n-                s = System.getProperty(oldP);\n-                if (s != null) {\n-                    defaultQueueSize = Integer.parseInt(s);\n-                }\n@@ -295,4 +285,0 @@\n-            } else { \/\/ try the old one\n-                queueSize = (int)EnvHelp.getIntegerAttribute(env,oldP,\n-                                            defaultQueueSize,0,\n-                                            Integer.MAX_VALUE);\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/remote\/util\/EnvHelp.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -378,2 +378,1 @@\n-        if (!Modifier.isPublic(interfaceClass.getModifiers()) &&\n-            !Introspector.ALLOW_NONPUBLIC_MBEAN) {\n+        if (!Modifier.isPublic(interfaceClass.getModifiers())) {\n","filename":"src\/java.management\/share\/classes\/javax\/management\/JMX.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,4 +197,1 @@\n-            if (System.getProperty(\"jmx.extend.open.types\") == null) {\n-                throw new SecurityException(\"Cannot override getClassName() \" +\n-                        \"unless -Djmx.extend.open.types\");\n-            }\n+            throw new SecurityException(\"Cannot override getClassName()\");\n","filename":"src\/java.management\/share\/classes\/javax\/management\/openmbean\/OpenType.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,5 +146,0 @@\n-        \/\/ Since LinkedHashMap was introduced in SE 1.4, it's conceivable even\n-        \/\/ if very unlikely that we might be the server of a 1.3 client.  In\n-        \/\/ that case you'll need to set this property.  See CR 6334663.\n-        boolean useHashMap = Boolean.getBoolean(\"jmx.tabular.data.hash.map\");\n-\n@@ -153,3 +148,1 @@\n-        this.dataMap = useHashMap ?\n-            new HashMap<>(initialCapacity, loadFactor) :\n-            new LinkedHashMap<>(initialCapacity, loadFactor);\n+        this.dataMap = new LinkedHashMap<>(initialCapacity, loadFactor);\n","filename":"src\/java.management\/share\/classes\/javax\/management\/openmbean\/TabularDataSupport.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -540,2 +540,8 @@\n-            if (cancelled || publisher == null && bodies.isEmpty()) {\n-                return;\n+            synchronized (this) {\n+                \/\/ We are finished when publisher is null and bodies\n+                \/\/ is empty. This means that the data from the last\n+                \/\/ publisher in the list has been consumed.\n+                \/\/ If we are finished or cancelled, do nothing.\n+                if (cancelled || (publisher == null && bodies.isEmpty())) {\n+                    return;\n+                }\n@@ -546,0 +552,2 @@\n+                \/\/ request() should not throw - the scheduler will\n+                \/\/ invoke onError on the subscriber.\n@@ -557,2 +565,1 @@\n-        private boolean cancelSubscription() {\n-            Flow.Subscription subscription = this.subscription;\n+        private boolean cancelSubscription(Flow.Subscription subscription) {\n@@ -560,2 +567,6 @@\n-                this.subscription = null;\n-                this.publisher = null;\n+                synchronized (this) {\n+                    if (this.subscription == subscription) {\n+                        this.subscription = null;\n+                        this.publisher = null;\n+                    }\n+                }\n@@ -564,0 +575,2 @@\n+            \/\/ This method is called when cancel is true, so\n+            \/\/ we should always stop the scheduler here\n@@ -570,0 +583,2 @@\n+                BodyPublisher publisher;\n+                Flow.Subscription subscription = null;\n@@ -572,1 +587,1 @@\n-                        || (publisher == null && !bodies.isEmpty()))) {\n+                        || (this.publisher == null && !bodies.isEmpty()))) {\n@@ -574,2 +589,5 @@\n-                    BodyPublisher publisher = this.publisher;\n-                    Flow.Subscription subscription = this.subscription;\n+                    \/\/ make sure we see a consistent state.\n+                    synchronized (this) {\n+                        publisher = this.publisher;\n+                        subscription = this.subscription;\n+                    }\n@@ -579,1 +597,1 @@\n-                        cancelSubscription();\n+                        cancelSubscription(subscription);\n@@ -583,1 +601,7 @@\n-                        this.publisher = publisher = bodies.poll();\n+                        \/\/ synchronize here to avoid race condition with\n+                        \/\/ request(long) which could otherwise observe a\n+                        \/\/ null publisher and an empty bodies list when\n+                        \/\/ polling the last publisher.\n+                        synchronized (this) {\n+                            this.publisher = publisher = bodies.poll();\n+                        }\n@@ -585,1 +609,0 @@\n-                        subscription = this.subscription;\n@@ -593,4 +616,11 @@\n-                    if (subscription == null) return;\n-                    if (!demand.isFulfilled()) {\n-                        long n = demand.decreaseAndGet(demand.get());\n-                        demanded.increase(n);\n+                    long n = 0;\n+                    \/\/ synchronize to avoid race condition with\n+                    \/\/ publisherDone()\n+                    synchronized (this) {\n+                        if ((subscription = this.subscription) == null) return;\n+                        if (!demand.isFulfilled()) {\n+                            n = demand.decreaseAndGet(demand.get());\n+                            demanded.increase(n);\n+                        }\n+                    }\n+                    if (n > 0 && !cancelled) {\n@@ -605,0 +635,8 @@\n+        \/\/ It is important to synchronize when setting\n+        \/\/ publisher to null to avoid race conditions\n+        \/\/ with request(long)\n+        private synchronized void publisherDone() {\n+            publisher = null;\n+            subscription = null;\n+        }\n+\n@@ -608,1 +646,8 @@\n-            this.subscription = subscription;\n+            \/\/ synchronize for asserting in a consistent state.\n+            synchronized (this) {\n+                \/\/ we shouldn't be able to observe a null publisher\n+                \/\/ when onSubscribe is called, unless - possibly - if\n+                \/\/ there was some error...\n+                assert publisher != null || error.get() != null;\n+                this.subscription = subscription;\n+            }\n@@ -614,2 +659,2 @@\n-            \/\/ make sure to cancel the subscription if we receive\n-            \/\/ an item after the subscription was cancelled or\n+            \/\/ make sure to cancel the downstream subscription if we receive\n+            \/\/ an item after the aggregate subscription was cancelled or\n@@ -618,1 +663,1 @@\n-                cancelSubscription();\n+                cancelSubscription(this.subscription);\n@@ -628,2 +673,1 @@\n-                publisher = null;\n-                subscription = null;\n+                publisherDone();\n@@ -635,2 +679,1 @@\n-        @Override\n-        public void onComplete() {\n+        private synchronized boolean completeAndContinue() {\n@@ -641,2 +684,11 @@\n-                publisher = null;\n-                subscription = null;\n+                publisherDone();\n+                return true; \/\/ continue\n+            } else {\n+                publisherDone();\n+                return false; \/\/ stop\n+            }\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            if (completeAndContinue()) {\n@@ -645,2 +697,0 @@\n-                publisher = null;\n-                subscription = null;\n@@ -654,0 +704,1 @@\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/RequestPublishers.java","additions":80,"deletions":29,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,1 @@\n- * <a\n- * href=\"https:\/\/www.oasis-open.org\/committees\/download.php\/14809\/xml-catalogs.html\">\n+ * <a href=\"https:\/\/groups.oasis-open.org\/higherlogic\/ws\/public\/download\/14810\/xml-catalogs.pdf\">\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/Catalog.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,4 +140,3 @@\n- * <b>[3]<\/b> The Catalog specification defined complex rules on\n- * <a href=\"https:\/\/www.oasis-open.org\/committees\/download.php\/14809\/xml-catalogs.html#attrib.prefer\">\n- * the prefer attribute<\/a>. Although the prefer can be public or system, the\n- * specification actually made system the preferred option, that is, no matter\n+ * <b>[3]<\/b> The <a href=\"https:\/\/groups.oasis-open.org\/higherlogic\/ws\/public\/download\/14810\/xml-catalogs.pdf\">Catalog specification<\/a>\n+ * defined complex rules on the prefer attribute. Although it can be public or system,\n+ * the specification made {@code system} the preferred option, that is, no matter\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogFeatures.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-     * <a href=\"https:\/\/www.oasis-open.org\/committees\/download.php\/14809\/xml-catalogs.html#s.res.fail\">\n+     * <a href=\"https:\/\/groups.oasis-open.org\/higherlogic\/ws\/public\/download\/14810\/xml-catalogs.pdf\">\n@@ -129,1 +129,1 @@\n-     * <a href=\"https:\/\/www.oasis-open.org\/committees\/download.php\/14809\/xml-catalogs.html#s.res.fail\">\n+     * <a href=\"https:\/\/groups.oasis-open.org\/higherlogic\/ws\/public\/download\/14810\/xml-catalogs.pdf\">\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogManager.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n- * The <a href=\"https:\/\/www.oasis-open.org\/committees\/download.php\/14809\/xml-catalogs.html\">\n+ * The <a href=\"https:\/\/groups.oasis-open.org\/higherlogic\/ws\/public\/download\/14810\/xml-catalogs.pdf\">\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogResolver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,1 @@\n- *  * <a\n- * href=\"https:\/\/www.oasis-open.org\/committees\/download.php\/14809\/xml-catalogs.html\">\n+ * <a href=\"https:\/\/groups.oasis-open.org\/higherlogic\/ws\/public\/download\/14810\/xml-catalogs.pdf\">\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/Normalizer.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * <a href=\"https:\/\/www.oasis-open.org\/committees\/download.php\/14809\/xml-catalogs.html\">\n- *     XML Catalogs OASIS Standard V1.1, 7 October 2005<\/a>.\n+ * <a href=\"https:\/\/groups.oasis-open.org\/higherlogic\/ws\/public\/download\/14810\/xml-catalogs.pdf\">\n+ * XML Catalogs OASIS Standard V1.1, 7 October 2005<\/a>.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/package-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n- * javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI}.\n+ * XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI}.\n@@ -55,1 +55,1 @@\n- * javax.xml.XMLConstants#DEFAULT_NS_PREFIX\n+ * XMLConstants#DEFAULT_NS_PREFIX\n@@ -92,1 +92,1 @@\n-     * {@link javax.xml.XMLConstants#NULL_NS_URI\n+     * {@link XMLConstants#NULL_NS_URI\n@@ -98,1 +98,1 @@\n-     * javax.xml.XMLConstants#NULL_NS_URI\n+     * XMLConstants#NULL_NS_URI\n@@ -108,1 +108,1 @@\n-     * javax.xml.XMLConstants#DEFAULT_NS_PREFIX\n+     * XMLConstants#DEFAULT_NS_PREFIX\n@@ -112,1 +112,1 @@\n-     * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2396.txt\">URI reference<\/a>.\n+     * <a href=\"https:\/\/www.ietf.org\/rfc\/rfc2396.txt\">URI reference<\/a>.\n@@ -137,1 +137,1 @@\n-     * {@link javax.xml.XMLConstants#NULL_NS_URI\n+     * {@link XMLConstants#NULL_NS_URI\n@@ -143,1 +143,1 @@\n-     * javax.xml.XMLConstants#NULL_NS_URI\n+     * XMLConstants#NULL_NS_URI\n@@ -154,1 +154,1 @@\n-     * javax.xml.XMLConstants#DEFAULT_NS_PREFIX\n+     * XMLConstants#DEFAULT_NS_PREFIX\n@@ -159,1 +159,1 @@\n-     * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2396.txt\">URI reference<\/a>.\n+     * <a href=\"https:\/\/www.ietf.org\/rfc\/rfc2396.txt\">URI reference<\/a>.\n@@ -207,1 +207,1 @@\n-     * {@link javax.xml.XMLConstants#NULL_NS_URI\n+     * {@link XMLConstants#NULL_NS_URI\n@@ -209,1 +209,1 @@\n-     * javax.xml.XMLConstants#DEFAULT_NS_PREFIX\n+     * XMLConstants#DEFAULT_NS_PREFIX\n@@ -332,22 +332,8 @@\n-     * <p><code>String<\/code> representation of this\n-     * <code>QName<\/code>.<\/p>\n-     *\n-     * <p>The commonly accepted way of representing a <code>QName<\/code>\n-     * as a <code>String<\/code> was\n-     * <a href=\"http:\/\/jclark.com\/xml\/xmlns.htm\">defined<\/a>\n-     * by James Clark.  Although this is not a <em>standard<\/em>\n-     * specification, it is in common use, e.g. {@link\n-     * javax.xml.transform.Transformer#setParameter(String name, Object value)}.\n-     * This implementation represents a <code>QName<\/code> as:\n-     * \"{\" + Namespace URI + \"}\" + local part.  If the Namespace URI\n-     * <code>.equals(XMLConstants.NULL_NS_URI)<\/code>, only the\n-     * local part is returned.  An appropriate use of this method is\n-     * for debugging or logging for human consumption.<\/p>\n-     *\n-     * <p>Note the prefix value is <strong><em>NOT<\/em><\/strong>\n-     * returned as part of the <code>String<\/code> representation.<\/p>\n-     *\n-     * <p>This method satisfies the general contract of {@link\n-     * java.lang.Object#toString() Object.toString()}.<\/p>\n-     *\n-     *  @return <code>String<\/code> representation of this <code>QName<\/code>\n+     * {@return the string representation of this {@code QName}}\n+     * The format is:\n+     * <pre> {@code\n+     *     {NamespaceURI}LocalPart\n+     * }<\/pre>\n+     * If {@code NamespaceURI} is {@code null}, only {@code LocalPart} is returned.\n+     *\n+     * @apiNote The {@code Prefix} is not returned in the string representation.\n@@ -364,31 +350,12 @@\n-     * <p><code>QName<\/code> derived from parsing the formatted\n-     * <code>String<\/code>.<\/p>\n-     *\n-     * <p>If the <code>String<\/code> is <code>null<\/code> or does not conform to\n-     * {@link #toString() QName.toString()} formatting, an\n-     * <code>IllegalArgumentException<\/code> is thrown.<\/p>\n-     *\n-     * <p><em>The <code>String<\/code> <strong>MUST<\/strong> be in the\n-     * form returned by {@link #toString() QName.toString()}.<\/em><\/p>\n-     *\n-     * <p>The commonly accepted way of representing a <code>QName<\/code>\n-     * as a <code>String<\/code> was\n-     * <a href=\"http:\/\/jclark.com\/xml\/xmlns.htm\">defined<\/a>\n-     * by James Clark.  Although this is not a <em>standard<\/em>\n-     * specification, it is in common use, e.g. {@link\n-     * javax.xml.transform.Transformer#setParameter(String name, Object value)}.\n-     * This implementation parses a <code>String<\/code> formatted\n-     * as: \"{\" + Namespace URI + \"}\" + local part.  If the Namespace\n-     * URI <code>.equals(XMLConstants.NULL_NS_URI)<\/code>, only the\n-     * local part should be provided.<\/p>\n-     *\n-     * <p>The prefix value <strong><em>CANNOT<\/em><\/strong> be\n-     * represented in the <code>String<\/code> and will be set to\n-     * {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX\n-     * XMLConstants.DEFAULT_NS_PREFIX}.<\/p>\n-     *\n-     * <p>This method does not do full validation of the resulting\n-     * <code>QName<\/code>.\n-     * <p>The Namespace URI is not validated as a\n-     * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2396.txt\">URI reference<\/a>.\n-     * The local part is not validated as a\n+     * {@return a {@code QName} from its string representation}\n+     * The string representation must be in the format returned by {@link #toString()}:\n+     * <pre> {@code\n+     *     {NamespaceURI}LocalPart\n+     * }<\/pre>\n+     * Since the {@code Prefix} is not represented in the string form, it will be\n+     * set to {@link XMLConstants#DEFAULT_NS_PREFIX XMLConstants.DEFAULT_NS_PREFIX}.\n+     *\n+     * @apiNote This method does not perform full validation of the resulting\n+     * {@code QName}. The {@code NamespaceURI} is not validated as a\n+     * <a href=\"https:\/\/www.ietf.org\/rfc\/rfc2396.txt\">URI reference<\/a>.\n+     * The {@code LocalPart} is not validated as a\n@@ -397,7 +364,1 @@\n-     * <a href=\"http:\/\/www.w3.org\/TR\/REC-xml-names\/\">Namespaces in XML<\/a>.<\/p>\n-     *\n-     * @param qNameAsString <code>String<\/code> representation\n-     * of the <code>QName<\/code>\n-     *\n-     * @throws IllegalArgumentException When <code>qNameAsString<\/code> is\n-     *   <code>null<\/code> or malformed\n+     * <a href=\"http:\/\/www.w3.org\/TR\/REC-xml-names\/\">Namespaces in XML<\/a>.\n@@ -405,1 +366,3 @@\n-     * @return <code>QName<\/code> corresponding to the given <code>String<\/code>\n+     * @param qNameAsString the string representation of the {@code QName}\n+     * @throws IllegalArgumentException if {@code qNameAsString} is {@code null}\n+     * or malformed\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/namespace\/QName.java","additions":37,"deletions":74,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -402,0 +402,5 @@\n+    \/**\n+     * Flag to indicate type annotations have been queued for field initializers.\n+     *\/\n+    public static final long FIELD_INIT_TYPE_ANNOTATIONS_QUEUED = 1L<<53; \/\/ VarSymbols\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+    private final Options options;\n@@ -117,2 +118,2 @@\n-    private final EnumSet<LintCategory> values;\n-    private final EnumSet<LintCategory> suppressedValues;\n+    private EnumSet<LintCategory> values;\n+    private EnumSet<LintCategory> suppressedValues;\n@@ -124,2 +125,18 @@\n-        \/\/ initialize values according to the lint options\n-        Options options = Options.instance(context);\n+        this.context = context;\n+        context.put(lintKey, this);\n+        options = Options.instance(context);\n+    }\n+\n+    \/\/ Instantiate a non-root (\"symbol scoped\") instance\n+    protected Lint(Lint other) {\n+        other.initializeRootIfNeeded();\n+        this.context = other.context;\n+        this.options = other.options;\n+        this.syms = other.syms;\n+        this.names = other.names;\n+        this.values = other.values.clone();\n+        this.suppressedValues = other.suppressedValues.clone();\n+    }\n+\n+    \/\/ Process command line options on demand to allow use of root Lint early during startup\n+    private void initializeRootIfNeeded() {\n@@ -127,0 +144,5 @@\n+        \/\/ Already initialized?\n+        if (values != null)\n+            return;\n+\n+        \/\/ Initialize enabled categories based on \"-Xlint\" flags\n@@ -165,11 +187,0 @@\n-\n-        this.context = context;\n-        context.put(lintKey, this);\n-    }\n-\n-    protected Lint(Lint other) {\n-        this.context = other.context;\n-        this.syms = other.syms;\n-        this.names = other.names;\n-        this.values = other.values.clone();\n-        this.suppressedValues = other.suppressedValues.clone();\n@@ -180,0 +191,1 @@\n+        initializeRootIfNeeded();\n@@ -407,0 +419,1 @@\n+        initializeRootIfNeeded();\n@@ -417,0 +430,1 @@\n+        initializeRootIfNeeded();\n@@ -422,0 +436,14 @@\n+     *\n+     * @param log warning destination\n+     * @param warning key for the localized warning message\n+     *\/\n+    public void logIfEnabled(Log log, LintWarning warning) {\n+        logIfEnabled(log, null, warning);\n+    }\n+\n+    \/**\n+     * Helper method. Log a lint warning if its lint category is enabled.\n+     *\n+     * @param log warning destination\n+     * @param pos source position at which to report the warning\n+     * @param warning key for the localized warning message\n@@ -453,1 +481,1 @@\n-        initializeIfNeeded();\n+        initializeSymbolsIfNeeded();\n@@ -462,1 +490,1 @@\n-        initializeIfNeeded();\n+        initializeSymbolsIfNeeded();\n@@ -483,1 +511,1 @@\n-    private void initializeIfNeeded() {\n+    private void initializeSymbolsIfNeeded() {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":46,"deletions":18,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,3 @@\n+    \/** flag: is the \"preview\" lint category enabled? *\/\n+    private final boolean verbose;\n+\n@@ -83,1 +86,0 @@\n-    private final Lint lint;\n@@ -104,1 +106,0 @@\n-        lint = Lint.instance(context);\n@@ -106,2 +107,2 @@\n-        this.previewHandler =\n-                new MandatoryWarningHandler(log, source, lint.isEnabled(LintCategory.PREVIEW), true, \"preview\", LintCategory.PREVIEW);\n+        verbose = Lint.instance(context).isEnabled(LintCategory.PREVIEW);\n+        previewHandler = new MandatoryWarningHandler(log, source, verbose, true, \"preview\", LintCategory.PREVIEW);\n@@ -179,6 +180,4 @@\n-        if (!lint.isSuppressed(LintCategory.PREVIEW)) {\n-            sourcesWithPreviewFeatures.add(log.currentSourceFile());\n-            previewHandler.report(pos, feature.isPlural() ?\n-                    LintWarnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n-                    LintWarnings.PreviewFeatureUse(feature.nameFragment()));\n-        }\n+        markUsesPreview(pos);\n+        previewHandler.report(pos, feature.isPlural() ?\n+                LintWarnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n+                LintWarnings.PreviewFeatureUse(feature.nameFragment()));\n@@ -194,1 +193,1 @@\n-        if (lint.isEnabled(LintCategory.PREVIEW)) {\n+        if (verbose) {\n@@ -200,0 +199,5 @@\n+    \/**\n+     * Mark the current source file as using a preview feature. The corresponding classfile\n+     * will be generated with minor version {@link ClassFile#PREVIEW_MINOR_VERSION}.\n+     * @param pos the position at which the preview feature was used.\n+     *\/\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1791,0 +1791,1 @@\n+                                      final Env<AttrContext> enclosingEnv,\n@@ -1794,1 +1795,1 @@\n-            setData((Callable<Object>)() -> attr.attribLazyConstantValue(env, variable, type));\n+            setData((Callable<Object>)() -> attr.attribLazyConstantValue(env, enclosingEnv, variable, type));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -854,0 +854,1 @@\n+                                      Env<AttrContext> enclosingEnv,\n@@ -862,0 +863,1 @@\n+            doQueueScanTreeAndTypeAnnotateForVarInit(variable, enclosingEnv);\n@@ -1285,5 +1287,1 @@\n-            if (tree.init != null) {\n-                \/\/ Field initializer expression need to be entered.\n-                annotate.queueScanTreeAndTypeAnnotate(tree.init, env, tree.sym, tree.pos());\n-                annotate.flush();\n-            }\n+            doQueueScanTreeAndTypeAnnotateForVarInit(tree, env);\n@@ -1342,0 +1340,11 @@\n+    private void doQueueScanTreeAndTypeAnnotateForVarInit(JCVariableDecl tree, Env<AttrContext> env) {\n+        if (tree.init != null &&\n+            (tree.mods.flags & Flags.FIELD_INIT_TYPE_ANNOTATIONS_QUEUED) == 0 &&\n+            env.info.scope.owner.kind != MTH && env.info.scope.owner.kind != VAR) {\n+            tree.mods.flags |= Flags.FIELD_INIT_TYPE_ANNOTATIONS_QUEUED;\n+            \/\/ Field initializer expression need to be entered.\n+            annotate.queueScanTreeAndTypeAnnotate(tree.init, env, tree.sym, tree.pos());\n+            annotate.flush();\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -304,1 +304,1 @@\n-                v.setLazyConstValue(initEnv(tree, initEnv), attr, tree);\n+                v.setLazyConstValue(initEnv(tree, initEnv), env, attr, tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import com.sun.tools.javac.code.Lint;\n@@ -90,0 +91,1 @@\n+        lint = Lint.instance(context);\n@@ -91,1 +93,0 @@\n-        classLoaderClass = options.get(\"procloader\");\n@@ -93,4 +94,2 @@\n-        \/\/ Detect Lint options, but use Options.isLintSet() to avoid initializing the Lint class\n-        boolean warn = options.isLintSet(LintCategory.PATH.option);\n-        boolean fileClashOption = options.isLintSet(LintCategory.OUTPUT_FILE_CLASH.option);\n-        locations.update(log, warn, FSInfo.instance(context));\n+        \/\/ Initialize locations\n+        locations.update(log, lint, FSInfo.instance(context));\n@@ -98,4 +97,5 @@\n-        \/\/ Only track file clashes if enabled\n-        synchronized (this) {\n-            outputFilesWritten = fileClashOption ? new HashSet<>() : null;\n-        }\n+        \/\/ Apply options\n+        options.whenReady(this::applyOptions);\n+    }\n+\n+    protected void applyOptions(Options options) {\n@@ -141,1 +141,1 @@\n-    protected String classLoaderClass;\n+    protected Lint lint;\n@@ -145,2 +145,1 @@\n-    \/\/ This is non-null when output file clash detection is enabled\n-    private HashSet<Path> outputFilesWritten;\n+    private final HashSet<Path> outputFilesWritten = new HashSet<>();\n@@ -201,0 +200,1 @@\n+        String classLoaderClass = options.get(\"procloader\");\n@@ -246,0 +246,5 @@\n+\n+            @Override\n+            public void initialize() {\n+                options.initialize();\n+            }\n@@ -460,2 +465,1 @@\n-        if (outputFilesWritten != null)\n-            outputFilesWritten.clear();\n+        outputFilesWritten.clear();\n@@ -518,1 +522,1 @@\n-        if (outputFilesWritten == null)\n+        if (!lint.isEnabled(LintCategory.OUTPUT_FILE_CLASH))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/BaseFileManager.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+import com.sun.tools.javac.util.Options;\n@@ -112,1 +113,1 @@\n-    protected boolean symbolFileEnabled;\n+    protected boolean symbolFileEnabled = true;\n@@ -172,1 +173,0 @@\n-\n@@ -174,0 +174,5 @@\n+    }\n+\n+    @Override\n+    protected void applyOptions(Options options) {\n+        super.applyOptions(options);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/JavacFileManager.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,0 +84,2 @@\n+import com.sun.tools.javac.code.Lint;\n+import com.sun.tools.javac.code.Lint.LintCategory;\n@@ -129,1 +131,1 @@\n-     * Whether to warn about non-existent path elements\n+     * The root {@link Lint} instance.\n@@ -131,1 +133,1 @@\n-    private boolean warn;\n+    private Lint lint;\n@@ -173,1 +175,1 @@\n-    void update(Log log, boolean warn, FSInfo fsInfo) {\n+    void update(Log log, Lint lint, FSInfo fsInfo) {\n@@ -175,1 +177,1 @@\n-        this.warn = warn;\n+        this.lint = lint;\n@@ -226,3 +228,1 @@\n-                    if (warn) {\n-                        log.warning(LintWarnings.InvalidPath(s));\n-                    }\n+                    lint.logIfEnabled(log, LintWarnings.InvalidPath(s));\n@@ -316,1 +316,1 @@\n-            return addDirectories(dirs, warn);\n+            return addDirectories(dirs, true);\n@@ -322,2 +322,1 @@\n-                    log.warning(\n-                            LintWarnings.DirPathElementNotFound(dir));\n+                    lint.logIfEnabled(log, LintWarnings.DirPathElementNotFound(dir));\n@@ -343,1 +342,1 @@\n-            return addFiles(files, warn);\n+            return addFiles(files, true);\n@@ -356,1 +355,1 @@\n-            return addFiles(files, warn);\n+            return addFiles(files, true);\n@@ -368,2 +367,1 @@\n-                    log.warning(\n-                            LintWarnings.PathElementNotFound(file));\n+                    lint.logIfEnabled(log, LintWarnings.PathElementNotFound(file));\n@@ -391,2 +389,1 @@\n-                                log.warning(\n-                                        LintWarnings.UnexpectedArchiveFile(file));\n+                                lint.logIfEnabled(log, LintWarnings.UnexpectedArchiveFile(file));\n@@ -397,2 +394,1 @@\n-                                log.warning(\n-                                        LintWarnings.InvalidArchiveFile(file));\n+                                lint.logIfEnabled(log, LintWarnings.InvalidArchiveFile(file));\n@@ -1492,2 +1488,2 @@\n-                if (warn && false) {  \/\/ temp disable, when enabled, massage examples.not-yet.txt suitably.\n-                    log.warning(Warnings.LocnUnknownFileOnModulePath(p));\n+                if (false) {  \/\/ temp disable, when enabled, massage examples.not-yet.txt suitably.\n+                    log.warning(LintWarnings.LocnUnknownFileOnModulePath(p));\n@@ -1661,6 +1657,3 @@\n-                if (warn) {\n-                    Warning key = Files.exists(prefix)\n-                            ? LintWarnings.DirPathElementNotDirectory(prefix)\n-                            : LintWarnings.DirPathElementNotFound(prefix);\n-                    log.warning(key);\n-                }\n+                lint.logIfEnabled(log, Files.exists(prefix) ?\n+                    LintWarnings.DirPathElementNotDirectory(prefix) :\n+                    LintWarnings.DirPathElementNotFound(prefix));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/Locations.java","additions":20,"deletions":27,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,0 @@\n-import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;\n@@ -123,4 +122,0 @@\n-   \/** Lint option: warn about classfile issues\n-     *\/\n-    boolean lintClassfile;\n-\n@@ -147,0 +142,3 @@\n+    \/** The root Lint config. *\/\n+    Lint lint;\n+\n@@ -308,1 +306,1 @@\n-        lintClassfile = Lint.instance(context).isEnabled(LintCategory.CLASSFILE);\n+        lint = Lint.instance(context);\n@@ -856,1 +854,1 @@\n-                if (lintClassfile && !warnedAttrs.contains(name)) {\n+                if (!warnedAttrs.contains(name)) {\n@@ -859,1 +857,1 @@\n-                        log.warning((DiagnosticPosition) null,\n+                        lint.logIfEnabled(log,\n@@ -1613,3 +1611,1 @@\n-            if (lintClassfile) {\n-                log.warning(LintWarnings.RuntimeVisibleInvisibleParamAnnotationsMismatch(currentClassFile));\n-            }\n+            lint.logIfEnabled(log, LintWarnings.RuntimeVisibleInvisibleParamAnnotationsMismatch(currentClassFile));\n@@ -2080,5 +2076,4 @@\n-                if (lintClassfile) {\n-                    if (failure == null) {\n-                        log.warning(LintWarnings.AnnotationMethodNotFound(container, name));\n-                    } else {\n-                        log.warning(LintWarnings.AnnotationMethodNotFoundReason(container,\n+                if (failure == null) {\n+                    lint.logIfEnabled(log, LintWarnings.AnnotationMethodNotFound(container, name));\n+                } else {\n+                    lint.logIfEnabled(log, LintWarnings.AnnotationMethodNotFoundReason(container,\n@@ -2087,1 +2082,0 @@\n-                    }\n@@ -2963,3 +2957,1 @@\n-        if (lintClassfile) {\n-            log.warning(LintWarnings.RuntimeInvisibleParameterAnnotations(currentClassFile));\n-        }\n+        lint.logIfEnabled(log, LintWarnings.RuntimeInvisibleParameterAnnotations(currentClassFile));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":13,"deletions":21,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,0 +168,5 @@\n+        @Override\n+        public void initialize() {\n+            options.initialize();\n+        }\n+\n@@ -223,0 +228,5 @@\n+\n+        @Override\n+        public void initialize() {\n+            options.initialize();\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Arguments.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1158,0 +1158,1 @@\n+        helper.initialize();\n@@ -1211,0 +1212,1 @@\n+        helper.initialize();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,5 @@\n+    \/**\n+     * Initialize this instance, as needed, if not already initialized.\n+     *\/\n+    public abstract void initialize();\n+\n@@ -142,0 +147,4 @@\n+        @Override\n+        public void initialize() {\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/OptionHelper.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -341,0 +341,1 @@\n+    Lint lint;\n@@ -347,2 +348,0 @@\n-    private final boolean lint;\n-\n@@ -425,1 +424,1 @@\n-        lint = (Lint.instance(context)).isEnabled(PROCESSING);\n+        lint = Lint.instance(context);\n@@ -490,1 +489,1 @@\n-        if (lint) {\n+        if (lint.isEnabled(PROCESSING)) {\n@@ -711,2 +710,1 @@\n-            if (lint)\n-                log.warning(LintWarnings.ProcIllegalFileName(name));\n+            lint.logIfEnabled(log, LintWarnings.ProcIllegalFileName(name));\n@@ -740,2 +738,1 @@\n-            if (lint)\n-                log.warning(LintWarnings.ProcTypeRecreate(typename));\n+            lint.logIfEnabled(log, LintWarnings.ProcTypeRecreate(typename));\n@@ -744,2 +741,2 @@\n-        if (lint && existing != null) {\n-            log.warning(LintWarnings.ProcTypeAlreadyExists(typename));\n+        if (existing != null) {\n+            lint.logIfEnabled(log, LintWarnings.ProcTypeAlreadyExists(typename));\n@@ -774,2 +771,1 @@\n-            if (lint)\n-                log.warning(LintWarnings.ProcFileReopening(fileObject.getName()));\n+            lint.logIfEnabled(log, LintWarnings.ProcFileReopening(fileObject.getName()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacFiler.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,0 @@\n-    private final boolean lint;\n@@ -126,0 +125,1 @@\n+    private final Lint lint;\n@@ -208,1 +208,1 @@\n-        lint = Lint.instance(context).isEnabled(PROCESSING);\n+        lint = Lint.instance(context);\n@@ -628,1 +628,1 @@\n-                       boolean allowModules, ProcessingEnvironment env, boolean lint) {\n+                       boolean allowModules, ProcessingEnvironment env, Lint lint) {\n@@ -651,2 +651,2 @@\n-                    if (lint && !patternAdded) {\n-                        log.warning(LintWarnings.ProcDuplicateSupportedAnnotation(annotationPattern,\n+                    if (!patternAdded) {\n+                        lint.logIfEnabled(log, LintWarnings.ProcDuplicateSupportedAnnotation(annotationPattern,\n@@ -663,2 +663,1 @@\n-                if (lint &&\n-                    supportedAnnotationPatterns.contains(MatchingUtils.validImportStringToPattern(\"*\")) &&\n+                if (supportedAnnotationPatterns.contains(MatchingUtils.validImportStringToPattern(\"*\")) &&\n@@ -666,1 +665,1 @@\n-                    log.warning(LintWarnings.ProcRedundantTypesWithWildcard(p.getClass().getName()));\n+                    lint.logIfEnabled(log, LintWarnings.ProcRedundantTypesWithWildcard(p.getClass().getName()));\n@@ -673,2 +672,2 @@\n-                        if (lint && !optionAdded) {\n-                            log.warning(LintWarnings.ProcDuplicateOptionName(optionName,\n+                        if (!optionAdded) {\n+                            lint.logIfEnabled(log, LintWarnings.ProcDuplicateOptionName(optionName,\n@@ -891,1 +890,1 @@\n-        if (lint && unmatchedAnnotations.size() > 0) {\n+        if (lint.isEnabled(PROCESSING) && unmatchedAnnotations.size() > 0) {\n@@ -1664,1 +1663,1 @@\n-    private static Pattern importStringToPattern(boolean allowModules, String s, Processor p, Log log, boolean lint) {\n+    private static Pattern importStringToPattern(boolean allowModules, String s, Processor p, Log log, Lint lint) {\n@@ -1690,4 +1689,2 @@\n-    private static Pattern warnAndNoMatches(String s, Processor p, Log log, boolean lint) {\n-        if (lint) {\n-            log.warning(LintWarnings.ProcMalformedSupportedString(s, p.getClass().getName()));\n-        }\n+    private static Pattern warnAndNoMatches(String s, Processor p, Log log, Lint lint) {\n+        lint.logIfEnabled(log, LintWarnings.ProcMalformedSupportedString(s, p.getClass().getName()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1573,0 +1573,1 @@\n+# lint: path\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,4 +76,1 @@\n-\n-            final Options options = Options.instance(context);\n-            initOptions(options);\n-            options.addListener(() -> initOptions(options));\n+            Options.instance(context).whenReady(this::initOptions);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,9 @@\n-        Options options = Options.instance(context);\n+\n+        \/\/ Initialize fields configured by Options that we may need before it is ready\n+        diagFormatter = new BasicDiagnosticFormatter(this);\n+\n+        \/\/ Once Options is ready, complete the initialization\n+        Options.instance(context).whenReady(this::initOptions);\n+    }\n+\n+    private void initOptions(Options options) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JavacMessages.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -348,0 +348,7 @@\n+        \/\/ Initialize fields configured by Options that we may need before it is ready\n+        this.emitWarnings = true;\n+        this.MaxErrors = getDefaultMaxErrors();\n+        this.MaxWarnings = getDefaultMaxWarnings();\n+        this.diagFormatter = new BasicDiagnosticFormatter(messages);\n+\n+        \/\/ Once Options is ready, complete the initialization\n@@ -349,2 +356,1 @@\n-        initOptions(options);\n-        options.addListener(() -> initOptions(options));\n+        options.whenReady(this::initOptions);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n@@ -37,0 +39,12 @@\n+ * <p>\n+ * Instances start in an uninitialized\/empty state. They transition to the initialized state once they start\n+ * being populated from the flags and arguments provided to the compiler, or manually via {@link #initialize}.\n+ *\n+ * <p>\n+ * Because {@link Options} singletons are used to configure many other compiler singletons, depending on how\n+ * the compiler is invoked, it's possible for some of these singletons to query options before they have been\n+ * populated. If this happens, null\/false is returned, and then if\/when listeners are notified (indicating that\n+ * the population process is complete), if it turns out that the actual option value is different from what was\n+ * previously returned, then an assertion error is generated (as this would indicate a startup ordering bug).\n+ * To fix, change the initialization order or have the singleton initialize itself using {@link #whenReady}.\n+ *\n@@ -48,1 +62,2 @@\n-    private LinkedHashMap<String,String> values;\n+    private final LinkedHashMap<String,String> values;\n+    private boolean initialized;\n@@ -65,0 +80,7 @@\n+    \/**\n+     * Mark this instance as ready to accept queries.\n+     *\/\n+    public void initialize() {\n+        initialized = true;\n+    }\n+\n@@ -67,0 +89,2 @@\n+     *\n+     * @param name option name\n@@ -69,1 +93,1 @@\n-        return values.get(name);\n+        return computeIfReady(() -> values.get(name), null, Option.XD.primaryName + name);\n@@ -74,0 +98,2 @@\n+     *\n+     * @param option option to get\n@@ -76,1 +102,1 @@\n-        return values.get(option.primaryName);\n+        return computeIfReady(() -> values.get(option.primaryName), null, option.primaryName);\n@@ -80,1 +106,1 @@\n-     * Get the boolean value for an option, patterned after Boolean.getBoolean,\n+     * Get the boolean value for an undocumented option, patterned after Boolean.getBoolean,\n@@ -82,0 +108,2 @@\n+     *\n+     * @param name option name\n@@ -88,1 +116,4 @@\n-     * Get the boolean with a default value if the option is not set.\n+     * Get the undocumented boolean with a default value if the option is not set.\n+     *\n+     * @param name option name\n+     * @param defaultValue return value if option is not set\n@@ -91,2 +122,7 @@\n-        String value = get(name);\n-        return (value == null) ? defaultValue : Boolean.parseBoolean(value);\n+        return computeIfReady(\n+            () -> Optional.of(name)\n+                  .map(values::get)\n+                  .map(Boolean::parseBoolean)\n+                  .orElse(defaultValue),\n+            defaultValue,\n+            Option.XD.primaryName + name);\n@@ -99,1 +135,1 @@\n-        return (values.get(name) != null);\n+        return computeIfReady(() -> values.get(name) != null, false, Option.XD.primaryName + name);\n@@ -106,1 +142,1 @@\n-        return (values.get(option.primaryName) != null);\n+        return computeIfReady(() -> values.get(option.primaryName) != null, false, option.primaryName);\n@@ -113,13 +149,1 @@\n-        return (values.get(option.primaryName + value) != null);\n-    }\n-\n-    \/** Check if the value for a lint option has been explicitly set, either with -Xlint:opt\n-     *  or if all lint options have enabled and this one not disabled with -Xlint:-opt.\n-     *\/\n-    public boolean isLintSet(String s) {\n-        \/\/ return true if either the specific option is enabled, or\n-        \/\/ they are all enabled without the specific one being\n-        \/\/ disabled\n-        return\n-            isSet(XLINT_CUSTOM, s) ||\n-            (isSet(XLINT) || isSet(XLINT_CUSTOM, \"all\")) && isUnset(XLINT_CUSTOM, \"-\" + s);\n+        return computeIfReady(() -> values.get(option.primaryName + value) != null, false, option.primaryName + value);\n@@ -132,1 +156,1 @@\n-        return (values.get(name) == null);\n+        return !isSet(name);\n@@ -139,1 +163,1 @@\n-        return (values.get(option.primaryName) == null);\n+        return !isSet(option);\n@@ -146,1 +170,1 @@\n-        return (values.get(option.primaryName + value) == null);\n+        return !isSet(option, value);\n@@ -151,0 +175,1 @@\n+        initialized = true;\n@@ -155,0 +180,1 @@\n+        initialized = true;\n@@ -159,0 +185,1 @@\n+        initialized = true;\n@@ -163,0 +190,1 @@\n+        initialized = true;\n@@ -182,0 +210,1 @@\n+        initialized = true;\n@@ -184,0 +213,1 @@\n+        listeners = List.nil();\n@@ -189,0 +219,26 @@\n+        initialized = false;\n+    }\n+\n+    \/**\n+     * Perform the given action once this instance is ready for queries,\n+     * or immediately if it is ready now.\n+     *\n+     * @param action action to take; will be given this instance\n+     *\/\n+    public void whenReady(Consumer<? super Options> action) {\n+        if (initialized)\n+            action.accept(this);\n+        else\n+            addListener(() -> action.accept(this));\n+    }\n+\n+    \/**\n+     * Return the computed value if initialized, otherwise return the given default value\n+     * and add a notify listener that asserts that our assumption was correct.\n+     *\/\n+    private <T> T computeIfReady(Supplier<T> ifReady, T ifNotReady, String flag) {\n+        \/\/System.out.println(\"computeIfReady(\"+initialized+\"): \\\"\"+flag+\"\\\" -> \" + ifReady.get());\n+        if (initialized)\n+            return ifReady.get();\n+        addListener(() -> Assert.check(Objects.equals(ifReady.get(), ifNotReady), () -> \"ignored flag: \" + flag));\n+        return ifNotReady;          \/\/ hopefully this is correct...\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Options.java","additions":82,"deletions":26,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+@SuppressWarnings(\"restricted\")\n","filename":"test\/failure_handler\/src\/share\/classes\/jdk\/test\/failurehandler\/jtreg\/GatherProcessInfoTimeoutHandler.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-  net.netstat.anv net.netstat.av net.netstat.aL net.netstat.m net.netstat.s \\\n+  net.netstat.anv net.netstat.av net.netstat.aL net.netstat.m net.netstat.s net.netstat.g net.netstat.r \\\n@@ -94,0 +94,1 @@\n+  fw.up \\\n@@ -135,0 +136,2 @@\n+net.netstat.g.args=-gs\n+net.netstat.r.args=-rn\n@@ -147,0 +150,3 @@\n+\n+fw.app=\/usr\/libexec\/ApplicationFirewall\/socketfilterfw\n+fw.up.args=--getglobalstate\n","filename":"test\/failure_handler\/src\/share\/conf\/mac.properties","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/aarch64\/test_assembler_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -69,1 +68,0 @@\n-\n","filename":"test\/hotspot\/gtest\/cds\/test_archiveWorkers.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/classfile\/test_AltHashing.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/classfile\/test_placeholders.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/classfile\/test_stringConversion.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/classfile\/test_stringIntern.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/classfile\/test_symbolTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/code\/test_codestrings.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/code\/test_vtableStub.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/compiler\/test_directivesParser.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1Analytics.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1BatchedGangTask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1BiasedArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CardSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CardSetContainers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CodeRootSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -116,1 +115,1 @@\n-    tty->print_cr(\"%u allocations: \" SIZE_FORMAT, _thread_number, _allocations);\n+    tty->print_cr(\"%u allocations: %zu\", _thread_number, _allocations);\n@@ -154,1 +153,1 @@\n-  tty->print_cr(\"total allocations: \" SIZE_FORMAT, total_allocations);\n+  tty->print_cr(\"total allocations: %zu\", total_allocations);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1FreeIdSet.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1HeapVerifier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1Predictions.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1RegionMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1ServiceThread.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_heapRegion.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_stressCommitUncommit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/parallel\/test_psAdaptiveSizePolicy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -145,1 +144,1 @@\n-    tty->print_cr(\"allocations: \" SIZE_FORMAT, _allocations);\n+    tty->print_cr(\"allocations: %zu\", _allocations);\n@@ -237,2 +236,2 @@\n-  tty->print_cr(\"total allocations: \" SIZE_FORMAT, total_allocations);\n-  tty->print_cr(\"allocator free count: \" SIZE_FORMAT, allocator->free_count());\n+  tty->print_cr(\"total allocations: %zu\", total_allocations);\n+  tty->print_cr(\"allocator free count: %zu\", allocator->free_count());\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_bufferNodeAllocator.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_collectedHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_collectorPolicy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_gcTimer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -1139,3 +1138,3 @@\n-    expected_st.print(\"Test Storage: \" SIZE_FORMAT\n-                      \" entries in \" SIZE_FORMAT\n-                      \" blocks (%.F%%), \" SIZE_FORMAT \" bytes\",\n+    expected_st.print(\"Test Storage: %zu\"\n+                      \" entries in %zu\"\n+                      \" blocks (%.F%%), %zu bytes\",\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorageSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage_parperf.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_partialArrayTaskStepper.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_preservedMarks.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -92,4 +91,4 @@\n-  out.print(\" Min: \" SIZE_FORMAT\n-            \", Avg: %4.1lf, Max: \" SIZE_FORMAT\n-            \", Diff: \" SIZE_FORMAT \", Sum: \" SIZE_FORMAT\n-            \", Workers: \" SIZE_FORMAT \"\\n\",\n+  out.print(\" Min: %zu\"\n+            \", Avg: %4.1lf, Max: %zu\"\n+            \", Diff: %zu, Sum: %zu\"\n+            \", Workers: %zu\\n\",\n@@ -108,1 +107,1 @@\n-            \", Workers: \" SIZE_FORMAT \"\\n\",\n+            \", Workers: %zu\\n\",\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_workerDataArray.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahNumberSeq.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahOldGeneration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahOldHeuristic.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahSimpleBitMap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zAddress.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zBitField.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zBitMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zIndexDistributor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zLiveMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zMapper_windows.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zMemory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zPhysicalMemory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zVirtualMemory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -87,6 +86,0 @@\n-  \/\/ Reincluding source files in the anonymous namespace unfortunately seems to\n-  \/\/ behave strangely with precompiled headers (only when using gcc though)\n-#ifndef DONT_USE_PRECOMPILED_HEADER\n-#define DONT_USE_PRECOMPILED_HEADER\n-#endif\n-\n","filename":"test\/hotspot\/gtest\/jfr\/test_adaptiveSampler.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -209,6 +208,0 @@\n-\/\/ Reincluding source files in the anonymous namespace unfortunately seems to\n-\/\/ behave strangely with precompiled headers (only when using gcc though)\n-#ifndef DONT_USE_PRECOMPILED_HEADER\n-#define DONT_USE_PRECOMPILED_HEADER\n-#endif\n-\n","filename":"test\/hotspot\/gtest\/jfr\/test_networkUtilization.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -96,6 +95,0 @@\n-\/\/ Reincluding source files in the anonymous namespace unfortunately seems to\n-\/\/ behave strangely with precompiled headers (only when using gcc though)\n-#ifndef DONT_USE_PRECOMPILED_HEADER\n-#define DONT_USE_PRECOMPILED_HEADER\n-#endif\n-\n","filename":"test\/hotspot\/gtest\/jfr\/test_threadCpuLoad.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/logTestFixture.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_gcTraceTime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_log.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logConfiguration.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logDecorations.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logDecorators.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logDefaultDecorators.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -93,1 +92,1 @@\n-  int ret = jio_snprintf(buf, sizeof(buf), \"filesize=\" SIZE_FORMAT \"K\", SIZE_MAX);\n+  int ret = jio_snprintf(buf, sizeof(buf), \"filesize=%zuK\", SIZE_MAX);\n@@ -111,1 +110,1 @@\n-    int ret = jio_snprintf(rotated_file[i], len, \"%s.\" SIZE_FORMAT, filename, i);\n+    int ret = jio_snprintf(rotated_file[i], len, \"%s.%zu\", filename, i);\n","filename":"test\/hotspot\/gtest\/logging\/test_logFileOutput.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logLevel.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -171,1 +170,1 @@\n-    msg.info(\"Line #\" SIZE_FORMAT, i);\n+    msg.info(\"Line #%zu\", i);\n@@ -178,1 +177,1 @@\n-    jio_snprintf(&expected_lines_data[i][0], line_length, \"Line #\" SIZE_FORMAT, i);\n+    jio_snprintf(&expected_lines_data[i][0], line_length, \"Line #%zu\", i);\n","filename":"test\/hotspot\/gtest\/logging\/test_logMessageTest.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logOutputList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logSelection.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logSelectionList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logStream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logTag.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logTagSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_logTagSetDescriptions.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -252,1 +251,1 @@\n-    LOG((\"[%d]: \" PTR_FORMAT \", size \" SIZE_FORMAT \", aligned \" SIZE_FORMAT,\n+    LOG((\"[%d]: \" PTR_FORMAT \", size %zu, aligned %zu\",\n@@ -283,1 +282,1 @@\n-    LOG((\"[%d]: realloc \" PTR_FORMAT \", size \" SIZE_FORMAT \", aligned \" SIZE_FORMAT,\n+    LOG((\"[%d]: realloc \" PTR_FORMAT \", size %zu, aligned %zu\",\n","filename":"test\/hotspot\/gtest\/memory\/test_arena.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/memory\/test_arrayAllocator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/memory\/test_guardedMemory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -548,1 +547,1 @@\n-    EXPECT_TRUE(reserved.is_reserved());\n+    ASSERT_TRUE(reserved.is_reserved());\n@@ -568,3 +567,1 @@\n-    if (reserved.is_reserved()) {\n-      MemoryReserver::release(reserved);\n-    }\n+    MemoryReserver::release(reserved);\n@@ -584,1 +581,1 @@\n-    EXPECT_TRUE(reserved.is_reserved());\n+    ASSERT_TRUE(reserved.is_reserved());\n@@ -594,3 +591,1 @@\n-    if (reserved.is_reserved()) {\n-      MemoryReserver::release(reserved);\n-    }\n+    MemoryReserver::release(reserved);\n","filename":"test\/hotspot\/gtest\/memory\/test_virtualspace.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_enableIf.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_logical.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_primitiveConversions.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/metaspaceGtestCommon.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/metaspaceGtestContexts.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_arenagrowthpolicy.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_binlist.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -147,1 +146,1 @@\n-  LOG(SIZE_FORMAT \": \" SIZE_FORMAT \".\", request_size, real_size);\n+  LOG(SIZE_FORMAT \": %zu.\", request_size, real_size);\n@@ -401,1 +400,1 @@\n-    LOG(\"Blocks in circulation: bt1=%d:\" SIZE_FORMAT \", bt2=%d:\" SIZE_FORMAT \".\",\n+    LOG(\"Blocks in circulation: bt1=%d:%zu, bt2=%d:%zu.\",\n@@ -407,1 +406,1 @@\n-    LOG(\"After Pingpong: bt1=%d:\" SIZE_FORMAT \", bt2=%d:\" SIZE_FORMAT \".\",\n+    LOG(\"After Pingpong: bt1=%d:%zu, bt2=%d:%zu.\",\n","filename":"test\/hotspot\/gtest\/metaspace\/test_blocktree.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_chunkManager_stress.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -49,1 +48,1 @@\n-    LOG(\"attempt_free_at \" SIZE_FORMAT \".\", index);\n+    LOG(\"attempt_free_at %zu.\", index);\n@@ -67,1 +66,1 @@\n-    LOG(\"attempt_allocate_at \" SIZE_FORMAT \".\", index);\n+    LOG(\"attempt_allocate_at %zu.\", index);\n","filename":"test\/hotspot\/gtest\/metaspace\/test_chunkheaderpool.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_clms.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -255,1 +254,1 @@\n-         \" (\" SIZE_FORMAT \" words).\",\n+         \" (%zu words).\",\n","filename":"test\/hotspot\/gtest\/metaspace\/test_commitmask.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_freeblocks.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_internstats.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_is_metaspace_obj.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metablock.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -85,1 +84,1 @@\n-          \/\/ printf(\"commit_limit: \" SIZE_FORMAT \", min_committed_words: \" SIZE_FORMAT\n+          \/\/ printf(\"commit_limit: %zu, min_committed_words: %zu\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metachunk.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metachunklist.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspaceUtils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspace_misc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n@@ -643,1 +642,1 @@\n-      LOG(\">\" SIZE_FORMAT \"->\" SIZE_FORMAT \"(+\" SIZE_FORMAT \")\", capacity, capacity2, capacity_jump)\n+      LOG(\">%zu->%zu(+%zu)\", capacity, capacity2, capacity_jump)\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena_stress.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n@@ -379,1 +378,1 @@\n-        \/\/LOG(\"c \" SIZE_FORMAT \",\" SIZE_FORMAT, r.start(), r.end());\n+        \/\/LOG(\"c %zu,%zu\", r.start(), r.end());\n@@ -399,1 +398,1 @@\n-        \/\/LOG(\"u \" SIZE_FORMAT \",\" SIZE_FORMAT, r.start(), r.end());\n+        \/\/LOG(\"u %zu,%zu\", r.start(), r.end());\n","filename":"test\/hotspot\/gtest\/metaspace\/test_virtualspacenode.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/nmt\/test_arrayWithFreeList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_buffer_overflow_detection.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -141,1 +140,1 @@\n-    \/\/ LOG_HERE(\"reallocating \" SIZE_FORMAT \"->\" SIZE_FORMAT, size, new_size);\n+    \/\/ LOG_HERE(\"reallocating %zu->%zu\", size, new_size);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_cornercases.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -53,1 +52,1 @@\n-  LOG_HERE(\"C-block starts \" PTR_FORMAT \", size \" SIZE_FORMAT \".\", p2i(c), sz);\n+  LOG_HERE(\"C-block starts \" PTR_FORMAT \", size %zu.\", p2i(c), sz);\n@@ -76,1 +75,1 @@\n-  LOG_HERE(\"C-block starts \" PTR_FORMAT \", size \" SIZE_FORMAT \".\", p2i(c), sz);\n+  LOG_HERE(\"C-block starts \" PTR_FORMAT \", size %zu.\", p2i(c), sz);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_locationprinting.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_malloclimit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_memoryfiletracker.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_nativecallstackstorage.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -84,1 +83,1 @@\n-  LOG(\"t1: \" SIZE_FORMAT \" - \" SIZE_FORMAT \" - \" SIZE_FORMAT, t1.n, t1.s, t1.ovrh);\n+  LOG(\"t1: %zu - %zu - %zu\", t1.n, t1.s, t1.ovrh);\n@@ -97,1 +96,1 @@\n-  LOG(\"t2: \" SIZE_FORMAT \" - \" SIZE_FORMAT \" - \" SIZE_FORMAT, t2.n, t2.s, t2.ovrh);\n+  LOG(\"t2: %zu - %zu - %zu\", t2.n, t2.s, t2.ovrh);\n@@ -104,1 +103,1 @@\n-  LOG(\"t2 expected: \" SIZE_FORMAT \" - \" SIZE_FORMAT \" - \" SIZE_FORMAT, t2_expected.n, t2_expected.s, t2_expected.ovrh);\n+  LOG(\"t2 expected: %zu - %zu - %zu\", t2_expected.n, t2_expected.s, t2_expected.ovrh);\n@@ -113,1 +112,1 @@\n-  LOG(\"t3: \" SIZE_FORMAT \" - \" SIZE_FORMAT \" - \" SIZE_FORMAT, t3.n, t3.s, t3.ovrh);\n+  LOG(\"t3: %zu - %zu - %zu\", t3.n, t3.s, t3.ovrh);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_totals.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -437,0 +436,23 @@\n+struct NTD {\n+  static bool has_run_destructor;\n+  ~NTD() {\n+    has_run_destructor = true;\n+  }\n+};\n+\n+bool NTD::has_run_destructor = false;\n+\n+TEST_VM_F(NMTTreapTest, ValueDestructorsAreRun) {\n+  TreapCHeap<int, NTD, Cmp> treap;\n+  NTD ntd;\n+  treap.upsert(0, ntd);\n+  treap.remove(0);\n+  EXPECT_TRUE(NTD::has_run_destructor);\n+  NTD::has_run_destructor = false;\n+  {\n+    TreapCHeap<int, NTD, Cmp> treap;\n+    NTD ntd;\n+    treap.upsert(0, ntd);\n+  }\n+  EXPECT_TRUE(NTD::has_run_destructor);\n+}\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_treap.cpp","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmtpreinit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmtpreinitmap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/nmt\/test_regions_tree.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -839,1 +838,1 @@\n-    tty->print_cr(SIZE_FORMAT \",in.type: %d, in.tag: %s, out.type: %d, out.tag: %s\" ,\n+    tty->print_cr(\"%zu,in.type: %d, in.tag: %s, out.type: %d, out.tag: %s\" ,\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/oops\/test_arrayOop.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/oops\/test_compressedKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,1 @@\n-#include \"precompiled.hpp\"\n+\n","filename":"test\/hotspot\/gtest\/oops\/test_cpCache_output.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/oops\/test_instanceKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/oops\/test_markWord.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/oops\/test_objArrayOop.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/oops\/test_oop.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/oops\/test_typeArrayOop.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/opto\/test_compress_expand_bits.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/opto\/test_mathexact.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -175,1 +174,0 @@\n-\n","filename":"test\/hotspot\/gtest\/opto\/test_no_overflow_int.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/opto\/test_regmask.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"test\/hotspot\/gtest\/riscv\/test_assembler_riscv.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_ThreadsListHandle.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_arguments.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_atomic.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"test\/hotspot\/gtest\/runtime\/test_cgroupSubsystem_linux.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_classLoader.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_classPrinter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_committed_virtualmemory.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_globals.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_lockStack.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_mutex.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_objectMonitor.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-#include \"precompiled.hpp\"\n@@ -331,1 +330,1 @@\n-    s.print(\"test_size: \" SIZE_FORMAT, test_size);\n+    s.print(\"test_size: %zu\", test_size);\n@@ -1034,1 +1033,1 @@\n-  tty->print_cr(SIZE_FORMAT \"->\" SIZE_FORMAT, sc.before, sc.after);\n+  tty->print_cr(\"%zu->%zu\", sc.before, sc.after);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,0 @@\n-#include \"precompiled.hpp\"\n-\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_aix.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_reserve_between.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_windows.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_perfdata.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_safefetch.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_semaphore.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_signals.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_signatureStream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,1 @@\n-#include \"precompiled.hpp\"\n+\n","filename":"test\/hotspot\/gtest\/runtime\/test_special_flags.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_stackoverflow.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_stubRoutines.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_synchronizer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_threads.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,2 +3,2 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_trim_native.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_vmStructs.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/testutils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/unittest.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,0 +162,18 @@\n+#define TEST_VM_CRASH_SIGNAL(category, name, signame)               \\\n+  static void test_  ## category ## _ ## name ## _();               \\\n+                                                                    \\\n+  static void child_ ## category ## _ ## name ## _() {              \\\n+    ::testing::GTEST_FLAG(throw_on_failure) = true;                 \\\n+    test_ ## category ## _ ## name ## _();                          \\\n+    gtest_exit_from_child_vm(0);                                    \\\n+  }                                                                 \\\n+                                                                    \\\n+  TEST(category, CONCAT(name, _vm_assert)) {                        \\\n+    ASSERT_EXIT(child_ ## category ## _ ## name ## _(),             \\\n+                ::testing::ExitedWithCode(1),                       \\\n+                \"signaled: \" signame);                              \\\n+  }                                                                 \\\n+                                                                    \\\n+  void test_ ## category ## _ ## name ## _()\n+\n+\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_abs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -107,1 +106,1 @@\n-  log(\"### Test: %c\" SIZE_FORMAT \" \" UINT64_FORMAT \" : %c\" SIZE_FORMAT \" \" UINT64_FORMAT \" ###\\n\",\n+  log(\"### Test: %c%zu \" UINT64_FORMAT \" : %c%zu \" UINT64_FORMAT \" ###\\n\",\n","filename":"test\/hotspot\/gtest\/utilities\/test_align.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap_iterate.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap_large.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap_popcnt.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap_search.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap_setops.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_byteswap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_chunkedList.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_concurrentHashtable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_count_leading_zeros.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_count_trailing_zeros.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_enumIterator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_filterQueue.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalCounter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalCounter_nested.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -274,2 +273,4 @@\n-  check_format(SIZE_FORMAT,            (size_t)123u,      \"123\");\n-  check_format(SIZE_FORMAT_X,          (size_t)0x123u,    \"0x123\");\n+  check_format(\"%zu\",                  (size_t)123u,      \"123\");\n+  check_format(\"0x%zx\",                (size_t)0x123u,    \"0x123\");\n+  check_format(\"%5zu\",                 (size_t)123u,      \"  123\");\n+  check_format(\"%-5zu\",                (size_t)123u,      \"123  \");\n@@ -277,2 +278,0 @@\n-  check_format(SIZE_FORMAT_W(5),       (size_t)123u,      \"  123\");\n-  check_format(SIZE_FORMAT_W(-5),      (size_t)123u,      \"123  \");\n","filename":"test\/hotspot\/gtest\/utilities\/test_globalDefinitions.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_istream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_java_arithmetic.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_json.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_linkedlist.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -237,1 +236,1 @@\n-        tty->print_cr(\"thread %u processed \" SIZE_FORMAT, _id, _local_processed);\n+        tty->print_cr(\"thread %u processed %zu\", _id, _local_processed);\n","filename":"test\/hotspot\/gtest\/utilities\/test_lockFreeStack.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_metaspaceClosure.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -214,1 +213,1 @@\n-        tty->print_cr(\"thread %u processed \" SIZE_FORMAT, _id, _local_processed);\n+        tty->print_cr(\"thread %u processed %zu\", _id, _local_processed);\n","filename":"test\/hotspot\/gtest\/utilities\/test_nonblockingQueue.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_objectBitSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_ostream.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_parse_memory_size.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_population_count.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_powerOfTwo.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_quicksort.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_reverse_bits.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n@@ -78,1 +77,1 @@\n-    tty->print_cr(\"reader iterations: \" SIZE_FORMAT \", changes: \" SIZE_FORMAT,\n+    tty->print_cr(\"reader iterations: %zu, changes: %zu\",\n","filename":"test\/hotspot\/gtest\/utilities\/test_singleWriterSynchronizer.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_sizes.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_spinYield.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_stringUtils.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_tribool.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_unsigned5.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_utf8.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_valueObjArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n@@ -52,1 +51,1 @@\n-           \"num=\" SIZE_FORMAT \" str=\\\"%s\\\"\", num, str);\n+           \"num=%zu str=\\\"%s\\\"\", num, str);\n@@ -61,1 +60,1 @@\n-            \"num=\" SIZE_FORMAT \" str=\\\"%s\\\"\", num, str);\n+            \"num=%zu str=\\\"%s\\\"\", num, str);\n@@ -69,1 +68,1 @@\n-  fatal(\"num=\" SIZE_FORMAT \" str=\\\"%s\\\"\", num, str);\n+  fatal(\"num=%zu str=\\\"%s\\\"\", num, str);\n","filename":"test\/hotspot\/gtest\/utilities\/test_vmerror.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-#include \"precompiled.hpp\"\n","filename":"test\/hotspot\/gtest\/utilities\/test_waitBarrier.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,0 @@\n-#include \"precompiled.hpp\"\n-\n@@ -89,1 +87,1 @@\n-#endif \/\/ X86\n\\ No newline at end of file\n+#endif \/\/ X86\n","filename":"test\/hotspot\/gtest\/x86\/test_assemblerx86.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-runtime\/classFileParserBug\/TestEmptyBootstrapMethodsAttr.java JDK-8346442 generic-all\n+runtime\/classFileParserBug\/TestEmptyBootstrapMethodsAttr.java 8346442 generic-all\n@@ -109,1 +109,1 @@\n-runtime\/logging\/LoaderConstraintsTest.java JDK-8346442 generic-all\n+runtime\/logging\/LoaderConstraintsTest.java 8346442 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-Virtual.txt","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,0 @@\n-runtime\/cds\/appcds\/customLoader\/HelloCustom_JFR.java 8241075 linux-all,windows-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,4 @@\n-    -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI \\\n+    -XX:+UnlockDiagnosticVMOptions \\\n+    -XX:+LogVMOutput -XX:-DisplayVMOutput -XX:LogFile=vmprops.flags.final.vm.log \\\n+    -XX:+PrintFlagsFinal \\\n+    -XX:+WhiteBoxAPI \\\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-            phase = CompilePhase.AFTER_PARSING,\n-            applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n+        phase = CompilePhase.AFTER_PARSING,\n+        applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n@@ -66,1 +66,1 @@\n-    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n+    @Arguments(values = {Argument.DEFAULT, Argument.RANDOM_EACH})\n@@ -68,2 +68,2 @@\n-            phase = CompilePhase.AFTER_PARSING,\n-            applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n+        phase = CompilePhase.AFTER_PARSING,\n+        applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n@@ -71,0 +71,1 @@\n+        m = Math.max(0, m);\n@@ -75,1 +76,1 @@\n-    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n+    @Arguments(values = {Argument.DEFAULT, Argument.RANDOM_EACH})\n@@ -77,2 +78,2 @@\n-            phase = CompilePhase.AFTER_PARSING,\n-            applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n+        phase = CompilePhase.AFTER_PARSING,\n+        applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n@@ -80,0 +81,19 @@\n+        m = Math.max(0, m);\n+        return Integer.compareUnsigned((m & x), m + 1) < 0;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n+    @IR(counts = {IRNode.CMP_U, \"1\"}, \/\/ m could be -1 and thus optimization cannot be applied\n+        phase = CompilePhase.AFTER_PARSING,\n+        applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n+    public static boolean testShouldNotReplaceCpmUCase1(int x, int m) {\n+        return Integer.compareUnsigned((x & m), m + 1) < 0;\n+    }\n+\n+    @Test\n+    @Arguments(values = {Argument.DEFAULT, Argument.DEFAULT})\n+    @IR(counts = {IRNode.CMP_U, \"1\"}, \/\/ m could be -1 and thus optimization cannot be applied\n+        phase = CompilePhase.AFTER_PARSING,\n+        applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n+    public static boolean testShouldNotReplaceCpmUCase2(int x, int m) {\n@@ -95,2 +115,2 @@\n-            phase = CompilePhase.AFTER_PARSING,\n-            applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n+        phase = CompilePhase.AFTER_PARSING,\n+        applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n@@ -104,2 +124,2 @@\n-            phase = CompilePhase.AFTER_PARSING,\n-            applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n+        phase = CompilePhase.AFTER_PARSING,\n+        applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n@@ -113,2 +133,2 @@\n-            phase = CompilePhase.AFTER_PARSING,\n-            applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n+        phase = CompilePhase.AFTER_PARSING,\n+        applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"})\n@@ -121,1 +141,2 @@\n-                0, 1, 5, 8, 16, 42, 100, new Random().nextInt(0, Integer.MAX_VALUE), Integer.MAX_VALUE\n+                -100, -42, -16, -8, -5, -1, 0, 1, 5, 8, 16, 42, 100,\n+                new Random().nextInt(), Integer.MAX_VALUE, Integer.MIN_VALUE\n@@ -126,3 +147,3 @@\n-                if (!testShouldReplaceCpmUCase1(x, m) |\n-                    !testShouldReplaceCpmUCase2(x, m) |\n-                    !testShouldReplaceCpmUCase3(x, m) |\n+                if (!testShouldReplaceCpmUCase1(x, m) ||\n+                    !testShouldReplaceCpmUCase2(x, m) ||\n+                    !testShouldReplaceCpmUCase3(x, m) ||\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestBoolNodeGVN.java","additions":39,"deletions":18,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8345766\n+ * @summary Test that Ideal transformations of ModDNode are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.ModDNodeTests\n+ *\/\n+public class ModDNodeTests {\n+    public static final double q = Utils.getRandomInstance().nextDouble() * 100.0d;\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"constant\", \"notConstant\", \"veryNotConstant\"})\n+    public void runMethod() {\n+        Asserts.assertEQ(constant(), q % 72.0d % 30.0d);\n+        Asserts.assertEQ(alsoConstant(), q % 31.432d);\n+        Asserts.assertTrue(Double.isNaN(nanLeftConstant()));\n+        Asserts.assertTrue(Double.isNaN(nanRightConstant()));\n+        Asserts.assertEQ(notConstant(37.5d), 37.5d % 32.0d);\n+        Asserts.assertEQ(veryNotConstant(531.25d, 14.5d), 531.25d % 32.0d % 14.5d);\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"drem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_D, \"1\"})\n+    public double constant() {\n+        \/\/ All constants available during parsing\n+        return q % 72.0d % 30.0d;\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"drem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_D, \"1\"})\n+    public double alsoConstant() {\n+        \/\/ Make sure value is only available after second loop opts round\n+        double val = 0;\n+        for (int i = 0; i < 4; i++) {\n+            if ((i % 2) == 0) {\n+                val = q;\n+            }\n+        }\n+        return val % 31.432d;\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"drem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_D, \"1\"})\n+    public double nanLeftConstant() {\n+        \/\/ Make sure value is only available after second loop opts round\n+        double val = 134.18d;\n+        for (int i = 0; i < 4; i++) {\n+            if ((i % 2) == 0) {\n+                val = Double.NaN;\n+            }\n+        }\n+        return 56.234d % (val % 31.432d);\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"drem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_D, \"1\"})\n+    public double nanRightConstant() {\n+        \/\/ Make sure value is only available after second loop opts round\n+        double val = 134.18d;\n+        for (int i = 0; i < 4; i++) {\n+            if ((i % 2) == 0) {\n+                val = Double.NaN;\n+            }\n+        }\n+        return 56.234d % (31.432d % val);\n+    }\n+\n+    @Test\n+    @IR(counts = {\"drem\", \"1\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_D, \"1\"})\n+    public double notConstant(double x) {\n+        return x % 32.0d;\n+    }\n+\n+    @Test\n+    @IR(counts = {\"drem\", \"2\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_D, \"1\"})\n+    public double veryNotConstant(double x, double y) {\n+        return x % 32.0d % y;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModDNodeTests.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8345766\n+ * @summary Test that Ideal transformations of ModFNode are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.ModFNodeTests\n+ *\/\n+public class ModFNodeTests {\n+    public static final float q = Utils.getRandomInstance().nextFloat() * 100.0f;\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"constant\", \"notConstant\", \"veryNotConstant\"})\n+    public void runMethod() {\n+        Asserts.assertEQ(constant(), q % 72.0f % 30.0f);\n+        Asserts.assertEQ(alsoConstant(), q % 31.432f);\n+        Asserts.assertTrue(Float.isNaN(nanLeftConstant()));\n+        Asserts.assertTrue(Float.isNaN(nanRightConstant()));\n+        Asserts.assertEQ(notConstant(37.5f), 37.5f % 32.0f);\n+        Asserts.assertEQ(veryNotConstant(531.25f, 14.5f), 531.25f % 32.0f % 14.5f);\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"frem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_F, \"1\"})\n+    public float constant() {\n+        \/\/ All constants available during parsing\n+        return q % 72.0f % 30.0f;\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"frem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_F, \"1\"})\n+    public float alsoConstant() {\n+        \/\/ Make sure value is only available after second loop opts round\n+        float val = 0;\n+        for (int i = 0; i < 4; i++) {\n+            if ((i % 2) == 0) {\n+                val = q;\n+            }\n+        }\n+        return val % 31.432f;\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"frem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_F, \"1\"})\n+    public float nanLeftConstant() {\n+        \/\/ Make sure value is only available after second loop opts round\n+        float val = 134.18f;\n+        for (int i = 0; i < 4; i++) {\n+            if ((i % 2) == 0) {\n+                val = Float.NaN;\n+            }\n+        }\n+        return 56.234f % (val % 31.432f);\n+    }\n+\n+    @Test\n+    @IR(failOn = {\"frem\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_F, \"1\"})\n+    public float nanRightConstant() {\n+        \/\/ Make sure value is only available after second loop opts round\n+        float val = 134.18f;\n+        for (int i = 0; i < 4; i++) {\n+            if ((i % 2) == 0) {\n+                val = Float.NaN;\n+            }\n+        }\n+        return 56.234f % (31.432f % val);\n+    }\n+\n+    @Test\n+    @IR(counts = {\"frem\", \"1\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_F, \"1\"})\n+    public float notConstant(float x) {\n+        return x % 32.0f;\n+    }\n+\n+    @Test\n+    @IR(counts = {\"frem\", \"2\"}, phase = CompilePhase.BEFORE_MATCHING)\n+    @IR(counts = {IRNode.CON_F, \"1\"})\n+    public float veryNotConstant(float x, float y) {\n+        return x % 32.0f % y;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ModFNodeTests.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -551,0 +551,10 @@\n+    public static final String CON_D = PREFIX + \"CON_D\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CON_D, \"ConD\");\n+    }\n+\n+    public static final String CON_F = PREFIX + \"CON_F\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(CON_F, \"ConF\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1042,3 +1042,3 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR_B, \"= 0\",\n-                  IRNode.AND_VB, \"= 0\",\n-                  IRNode.STORE_VECTOR, \"= 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, IRNode.VECTOR_SIZE + \"min(max_byte, 4)\", \"> 0\",\n+                  IRNode.AND_VB,        IRNode.VECTOR_SIZE + \"min(max_byte, 4)\", \"> 0\",\n+                  IRNode.STORE_VECTOR,                                           \"> 0\"},\n@@ -1046,0 +1046,1 @@\n+        applyIf = {\"AlignVector\", \"false\"},\n@@ -1049,1 +1050,1 @@\n-            \/\/ Currently does not vectorize at all\n+            \/\/ Non-power-of-2 stride. Vectorization of 4 bytes, then 2-bytes gap.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestAlignVector.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,951 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Utils;\n+import jdk.internal.misc.Unsafe;\n+import java.lang.reflect.Array;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.Random;\n+import java.lang.foreign.*;\n+\n+\/*\n+ * @test\n+ * @bug 8343685 8331659\n+ * @summary Test vectorization with various invariants that are equivalent, but not trivially so,\n+ *          i.e. where the invariants have the same summands, but in a different order.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestEquivalentInvariants\n+ *\/\n+\n+public class TestEquivalentInvariants {\n+    static int RANGE = 1024*64;\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    \/\/ Inputs\n+    byte[] aB;\n+    byte[] bB;\n+    int[] aI;\n+    int[] bI;\n+    long[] aL;\n+    long[] bL;\n+\n+    \/\/ List of tests\n+    Map<String,TestFunction> tests = new HashMap<String,TestFunction>();\n+\n+    \/\/ List of gold, the results from the first run before compilation\n+    Map<String,Object[]> golds = new HashMap<String,Object[]>();\n+\n+    interface TestFunction {\n+        Object[] run();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--add-modules\", \"java.base\", \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                   \"-XX:-AlignVector\");\n+        TestFramework.runWithFlags(\"--add-modules\", \"java.base\", \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                   \"-XX:+AlignVector\");\n+    }\n+\n+    public TestEquivalentInvariants() {\n+        \/\/ Generate input once\n+        aB = generateB();\n+        bB = generateB();\n+        aI = generateI();\n+        bI = generateI();\n+        aL = generateL();\n+        bL = generateL();\n+\n+        \/\/ Add all tests to list\n+        tests.put(\"testArrayBB\", () -> {\n+          return testArrayBB(aB.clone(), bB.clone());\n+        });\n+        tests.put(\"testArrayBBInvar3\", () -> {\n+          return testArrayBBInvar3(aB.clone(), bB.clone(), 0, 0, 0);\n+        });\n+        tests.put(\"testMemorySegmentB\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentB(data);\n+        });\n+        tests.put(\"testMemorySegmentBInvarI\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarI(data, 101, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarL\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarL(data, 101, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarIAdr\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarIAdr(data, 101, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarLAdr\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarLAdr(data, 101, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarI3a\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarI3a(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarI3b\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarI3b(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarI3c\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarI3c(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarI3d\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarI3d(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarI3e\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarI3e(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarI3f\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarI3f(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarL3g\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarL3g(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarL3h\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarL3h(data, -1, -2, -3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentBInvarL3k\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aB.clone());\n+          return testMemorySegmentBInvarL3k(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentIInvarL3a\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aI.clone());\n+          return testMemorySegmentIInvarL3a(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentIInvarL3b\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aI.clone());\n+          return testMemorySegmentIInvarL3b(data, -1, -2, -3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentIInvarL3c\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aI.clone());\n+          return testMemorySegmentIInvarL3c(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentIInvarL3d\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aI.clone());\n+          return testMemorySegmentIInvarL3d(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentIInvarL3d2\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aI.clone());\n+          return testMemorySegmentIInvarL3d2(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentIInvarL3d3\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aI.clone());\n+          return testMemorySegmentIInvarL3d3(data, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentIInvarL3e\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aI.clone());\n+          return testMemorySegmentIInvarL3e(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentIInvarL3f\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aI.clone());\n+          return testMemorySegmentIInvarL3f(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentLInvarL3a\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aL.clone());\n+          return testMemorySegmentLInvarL3a(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentLInvarL3b\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aL.clone());\n+          return testMemorySegmentLInvarL3b(data, -1, -2, -3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentLInvarL3c\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aL.clone());\n+          return testMemorySegmentLInvarL3c(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentLInvarL3d\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aL.clone());\n+          return testMemorySegmentLInvarL3d(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentLInvarL3d2\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aL.clone());\n+          return testMemorySegmentLInvarL3d2(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentLInvarL3d3\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aL.clone());\n+          return testMemorySegmentLInvarL3d3(data, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentLInvarL3e\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aL.clone());\n+          return testMemorySegmentLInvarL3e(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testMemorySegmentLInvarL3f\", () -> {\n+          MemorySegment data = MemorySegment.ofArray(aL.clone());\n+          return testMemorySegmentLInvarL3f(data, 1, 2, 3, RANGE-200);\n+        });\n+        tests.put(\"testLargeInvariantSum\", () -> {\n+          return testLargeInvariantSum(aB.clone(), 0, 0, 0, RANGE-200);\n+        });\n+\n+        \/\/ Compute gold value for all test methods before compilation\n+        for (Map.Entry<String,TestFunction> entry : tests.entrySet()) {\n+            String name = entry.getKey();\n+            TestFunction test = entry.getValue();\n+            Object[] gold = test.run();\n+            golds.put(name, gold);\n+        }\n+    }\n+\n+    @Warmup(100)\n+    @Run(test = {\"testArrayBB\",\n+                 \"testArrayBBInvar3\",\n+                 \"testMemorySegmentB\",\n+                 \"testMemorySegmentBInvarI\",\n+                 \"testMemorySegmentBInvarL\",\n+                 \"testMemorySegmentBInvarIAdr\",\n+                 \"testMemorySegmentBInvarLAdr\",\n+                 \"testMemorySegmentBInvarI3a\",\n+                 \"testMemorySegmentBInvarI3b\",\n+                 \"testMemorySegmentBInvarI3c\",\n+                 \"testMemorySegmentBInvarI3d\",\n+                 \"testMemorySegmentBInvarI3e\",\n+                 \"testMemorySegmentBInvarI3f\",\n+                 \"testMemorySegmentBInvarL3g\",\n+                 \"testMemorySegmentBInvarL3h\",\n+                 \"testMemorySegmentBInvarL3k\",\n+                 \"testMemorySegmentIInvarL3a\",\n+                 \"testMemorySegmentIInvarL3b\",\n+                 \"testMemorySegmentIInvarL3c\",\n+                 \"testMemorySegmentIInvarL3d\",\n+                 \"testMemorySegmentIInvarL3d2\",\n+                 \"testMemorySegmentIInvarL3d3\",\n+                 \"testMemorySegmentIInvarL3e\",\n+                 \"testMemorySegmentIInvarL3f\",\n+                 \"testMemorySegmentLInvarL3a\",\n+                 \"testMemorySegmentLInvarL3b\",\n+                 \"testMemorySegmentLInvarL3c\",\n+                 \"testMemorySegmentLInvarL3d\",\n+                 \"testMemorySegmentLInvarL3d2\",\n+                 \"testMemorySegmentLInvarL3d3\",\n+                 \"testMemorySegmentLInvarL3e\",\n+                 \"testMemorySegmentLInvarL3f\",\n+                 \"testLargeInvariantSum\"})\n+    public void runTests() {\n+        for (Map.Entry<String,TestFunction> entry : tests.entrySet()) {\n+            String name = entry.getKey();\n+            TestFunction test = entry.getValue();\n+            \/\/ Recall gold value from before compilation\n+            Object[] gold = golds.get(name);\n+            \/\/ Compute new result\n+            Object[] result = test.run();\n+            \/\/ Compare gold and new result\n+            verify(name, gold, result);\n+        }\n+    }\n+\n+    static byte[] generateB() {\n+        byte[] a = new byte[RANGE];\n+        for (int i = 0; i < a.length; i++) {\n+            a[i] = (byte)RANDOM.nextInt();\n+        }\n+        return a;\n+    }\n+\n+    static short[] generateS() {\n+        short[] a = new short[RANGE];\n+        for (int i = 0; i < a.length; i++) {\n+            a[i] = (short)RANDOM.nextInt();\n+        }\n+        return a;\n+    }\n+\n+    static int[] generateI() {\n+        int[] a = new int[RANGE];\n+        for (int i = 0; i < a.length; i++) {\n+            a[i] = RANDOM.nextInt();\n+        }\n+        return a;\n+    }\n+\n+    static long[] generateL() {\n+        long[] a = new long[RANGE];\n+        for (int i = 0; i < a.length; i++) {\n+            a[i] = RANDOM.nextLong();\n+        }\n+        return a;\n+    }\n+\n+    static void verify(String name, Object[] gold, Object[] result) {\n+        if (gold.length != result.length) {\n+            throw new RuntimeException(\"verify \" + name + \": not the same number of outputs: gold.length = \" +\n+                                       gold.length + \", result.length = \" + result.length);\n+        }\n+        for (int i = 0; i < gold.length; i++) {\n+            Object g = gold[i];\n+            Object r = result[i];\n+            if (g == r) {\n+                throw new RuntimeException(\"verify \" + name + \": should be two separate objects (with identical content):\" +\n+                                           \" gold[\" + i + \"] == result[\" + i + \"]\");\n+            }\n+\n+            \/\/ Wrap everything in MemorySegments, this allows simple value verification of Array as well as MemorySegment.\n+            MemorySegment mg = null;\n+            MemorySegment mr = null;\n+            if (g.getClass().isArray()) {\n+                if (g.getClass() != r.getClass() || !g.getClass().isArray() || !r.getClass().isArray()) {\n+                    throw new RuntimeException(\"verify \" + name + \": must both be array of same type:\" +\n+                                               \" gold[\" + i + \"].getClass() = \" + g.getClass().getSimpleName() +\n+                                               \" result[\" + i + \"].getClass() = \" + r.getClass().getSimpleName());\n+                }\n+                if (Array.getLength(g) != Array.getLength(r)) {\n+                    throw new RuntimeException(\"verify \" + name + \": arrays must have same length:\" +\n+                                           \" gold[\" + i + \"].length = \" + Array.getLength(g) +\n+                                           \" result[\" + i + \"].length = \" + Array.getLength(r));\n+                }\n+                Class c = g.getClass().getComponentType();\n+                if (c == byte.class) {\n+                    mg = MemorySegment.ofArray((byte[])g);\n+                    mr = MemorySegment.ofArray((byte[])r);\n+                } else if (c == int.class) {\n+                    mg = MemorySegment.ofArray((int[])g);\n+                    mr = MemorySegment.ofArray((int[])r);\n+                } else if (c == long.class) {\n+                    mg = MemorySegment.ofArray((long[])g);\n+                    mr = MemorySegment.ofArray((long[])r);\n+                } else {\n+                    throw new RuntimeException(\"verify \" + name + \": array type not supported for verify:\" +\n+                                           \" gold[\" + i + \"].getClass() = \" + g.getClass().getSimpleName() +\n+                                           \" result[\" + i + \"].getClass() = \" + r.getClass().getSimpleName());\n+                }\n+            } else if (g instanceof MemorySegment) {\n+                mg = (MemorySegment)g;\n+                if (!(r instanceof MemorySegment)) {\n+                    throw new RuntimeException(\"verify \" + name + \": was not both MemorySegment:\" +\n+                                           \" gold[\" + i + \"].getClass() = \" + g.getClass().getSimpleName() +\n+                                           \" result[\" + i + \"].getClass() = \" + r.getClass().getSimpleName());\n+                }\n+                mr = (MemorySegment)r;\n+            }\n+\n+            if (mg.byteSize() != mr.byteSize()) {\n+                throw new RuntimeException(\"verify \" + name + \": memory segment must have same length:\" +\n+                                       \" gold[\" + i + \"].length = \" + mg.byteSize() +\n+                                       \" result[\" + i + \"].length = \" + mr.byteSize());\n+            }\n+            verifyMS(name, i, mg, mr);\n+        }\n+    }\n+\n+    static void verifyMS(String name, int i, MemorySegment g, MemorySegment r) {\n+        for (long j = 0; j < g.byteSize(); j++) {\n+            byte vg = g.get(ValueLayout.JAVA_BYTE, j);\n+            byte vr = r.get(ValueLayout.JAVA_BYTE, j);\n+            if (vg != vr) {\n+                throw new RuntimeException(\"verify \" + name + \": arrays must have same content:\" +\n+                                           \" gold[\" + i + \"][\" + j + \"] = \" + vg +\n+                                           \" result[\" + i + \"][\" + j + \"] = \" + vr);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testArrayBB(byte[] a, byte[] b) {\n+        for (int i = 0; i < a.length; i++) {\n+            b[i+0] = (byte)(a[i] + 1);\n+        }\n+        return new Object[]{ a, b };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Same int invariant summands, but added in a different order.\n+    static Object[] testArrayBBInvar3(byte[] a, byte[] b, int invar1, int invar2, int invar3) {\n+        int i1 = invar1 + invar2 + invar3;\n+        int i2 = invar2 + invar3 + invar1;\n+        for (int i = 0; i < a.length; i++) {\n+            b[i + i1] = (byte)(a[i + i2] + 1);\n+        }\n+        return new Object[]{ a, b };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Just a simple pattern, without any (explicit) invariant.\n+    static Object[] testMemorySegmentB(MemorySegment m) {\n+        for (int i = 0; i < (int)m.byteSize(); i++) {\n+            byte v = m.get(ValueLayout.JAVA_BYTE, i);\n+            m.set(ValueLayout.JAVA_BYTE, i, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"= 0\",\n+                  IRNode.STORE_VECTOR,  \"= 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Does not vectorize: RangeChecks are not eliminated.\n+    \/\/ Filed RFE: JDK-8327209\n+    static Object[] testMemorySegmentBInvarI(MemorySegment m, int invar, int size) {\n+        for (int i = 0; i < size; i++) {\n+            byte v = m.get(ValueLayout.JAVA_BYTE, i + invar);\n+            m.set(ValueLayout.JAVA_BYTE, i + invar, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Has different invariants, before sorting:\n+    \/\/\n+    \/\/   3125 AddL = ((CastLL(Param 11) + ConvI2L(1460  Phi)) + 530  LoadL)\n+    \/\/   3127 AddL = (ConvI2L(1460  Phi) + (11 Param + 530  LoadL))\n+    \/\/\n+    static Object[] testMemorySegmentBInvarL(MemorySegment m, long invar, int size) {\n+        for (int i = 0; i < size; i++) {\n+            byte v = m.get(ValueLayout.JAVA_BYTE, i + invar);\n+            m.set(ValueLayout.JAVA_BYTE, i + invar, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"= 0\",\n+                  IRNode.STORE_VECTOR,  \"= 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Does not vectorize: RangeChecks are not eliminated.\n+    \/\/ Filed RFE: JDK-8327209\n+    static Object[] testMemorySegmentBInvarIAdr(MemorySegment m, int invar, int size) {\n+        for (int i = 0; i < size; i++) {\n+            long adr = i + invar;\n+            byte v = m.get(ValueLayout.JAVA_BYTE, adr);\n+            m.set(ValueLayout.JAVA_BYTE, adr, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Since we add \"i + invar\", the invariant is already equivalent without sorting.\n+    static Object[] testMemorySegmentBInvarLAdr(MemorySegment m, long invar, int size) {\n+        for (int i = 0; i < size; i++) {\n+            long adr = i + invar;\n+            byte v = m.get(ValueLayout.JAVA_BYTE, adr);\n+            m.set(ValueLayout.JAVA_BYTE, adr, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentBInvarI3a(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(invar1 + invar2 + invar3);\n+        long i2 = (long)(invar2 + invar3 + invar1); \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            byte v = m.get(ValueLayout.JAVA_BYTE, i + i1);\n+            m.set(ValueLayout.JAVA_BYTE, i + i2, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentBInvarI3b(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(invar1 + invar2 + invar3);\n+        long i2 = (long)(invar2 + invar3 + invar1); \/\/ equivalent\n+        for (int i = 0; i < size; i+=2) {\n+            byte v0 = m.get(ValueLayout.JAVA_BYTE, i + i1 + 0);\n+            byte v1 = m.get(ValueLayout.JAVA_BYTE, i + i2 + 1);\n+            m.set(ValueLayout.JAVA_BYTE, i + i1 + 0, (byte)(v0 + 1));\n+            m.set(ValueLayout.JAVA_BYTE, i + i2 + 1, (byte)(v1 + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    \/\/ Currently, we don't vectorize. But we may vectorize this, once we implement something like aliasing analysis,\n+    \/\/ though in this particular case we know that the values at runtime will alias.\n+    static Object[] testMemorySegmentBInvarI3c(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(invar1 + invar2 + invar3);\n+        long i2 = (long)(invar2 + invar3) + (long)(invar1); \/\/ not equivalent!\n+        for (int i = 0; i < size; i++) {\n+            byte v = m.get(ValueLayout.JAVA_BYTE, i + i1);\n+            m.set(ValueLayout.JAVA_BYTE, i + i2, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentBInvarI3d(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(invar1 + invar2 + invar3);\n+        long i2 = (long)(invar2 + invar3) + (long)(invar1);\n+        for (int i = 0; i < size; i+=2) {\n+            byte v0 = m.get(ValueLayout.JAVA_BYTE, i + i1 + 0);\n+            byte v1 = m.get(ValueLayout.JAVA_BYTE, i + i2 + 1);\n+            m.set(ValueLayout.JAVA_BYTE, i + i1 + 0, (byte)(v0 + 1));\n+            m.set(ValueLayout.JAVA_BYTE, i + i2 + 1, (byte)(v1 + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentBInvarI3e(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(invar1 + invar2 - invar3);\n+        long i2 = (long)(invar2 - invar3 + invar1); \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            byte v = m.get(ValueLayout.JAVA_BYTE, i + i1);\n+            m.set(ValueLayout.JAVA_BYTE, i + i2, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentBInvarI3f(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(invar1 - (invar2 - invar3));\n+        long i2 = (long)(-invar2 + invar3 + invar1); \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            byte v = m.get(ValueLayout.JAVA_BYTE, i + i1);\n+            m.set(ValueLayout.JAVA_BYTE, i + i2, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentBInvarL3g(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = invar1 - (invar2 - invar3);\n+        long i2 = -invar2 + invar3 + invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            byte v = m.get(ValueLayout.JAVA_BYTE, i + i1);\n+            m.set(ValueLayout.JAVA_BYTE, i + i2, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentBInvarL3h(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = -invar1 - invar2 - invar3;\n+        long i2 = -invar2 - invar3 - invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            byte v = m.get(ValueLayout.JAVA_BYTE, i + i1);\n+            m.set(ValueLayout.JAVA_BYTE, i + i2, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentBInvarL3k(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = -invar1 + invar2 + invar3;\n+        long i2 = invar2 + invar3 - invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            byte v = m.get(ValueLayout.JAVA_BYTE, i + i1);\n+            m.set(ValueLayout.JAVA_BYTE, i + i2, (byte)(v + 1));\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n+                  IRNode.ADD_VI,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentIInvarL3a(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = invar1 + invar2 + invar3;\n+        long i2 = invar2 + invar3 + invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            int v = m.getAtIndex(ValueLayout.JAVA_INT, i + i1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + i2, v + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n+                  IRNode.ADD_VI,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentIInvarL3b(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = -invar1 - invar2 - invar3;\n+        long i2 = -invar2 - invar3 - invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            int v = m.getAtIndex(ValueLayout.JAVA_INT, i + i1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + i2, v + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n+                  IRNode.ADD_VI,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentIInvarL3c(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = -invar1 + invar2 + invar3;\n+        long i2 = invar2 + invar3 - invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            int v = m.getAtIndex(ValueLayout.JAVA_INT, i + i1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + i2, v + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"= 0\",\n+                  IRNode.STORE_VECTOR,  \"= 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Would be nice if it vectorized.\n+    \/\/ Fails because of control flow. Somehow the \"offsetPlain\" check (checks for alignment) is not folded away.\n+    static Object[] testMemorySegmentIInvarL3d(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(-invar1 + invar2 + invar3);\n+        long i2 = (long)(invar2 + invar3 - invar1); \/\/ equivalent\n+        for (int i = 0; i < size; i+=2) {\n+            int v0 = m.getAtIndex(ValueLayout.JAVA_INT, i + i1 + 0);\n+            int v1 = m.getAtIndex(ValueLayout.JAVA_INT, i + i2 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + i1 + 0, v0 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + i2 + 1, v1 + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"= 0\",\n+                  IRNode.STORE_VECTOR,  \"= 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Would be nice if it vectorized.\n+    \/\/ Fails because of control flow. Somehow the \"offsetPlain\" check (checks for alignment) is not folded away.\n+    static Object[] testMemorySegmentIInvarL3d2(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(-invar1 + invar2 + invar3);\n+        for (int i = 0; i < size; i+=2) {\n+            int v0 = m.getAtIndex(ValueLayout.JAVA_INT, i + i1 + 0);\n+            int v1 = m.getAtIndex(ValueLayout.JAVA_INT, i + i1 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + i1 + 0, v0 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + i1 + 1, v1 + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n+                  IRNode.ADD_VI,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ But here the \"offsetPlain\" is folded away\n+    static Object[] testMemorySegmentIInvarL3d3(MemorySegment m, int size) {\n+        for (int i = 0; i < size; i+=2) {\n+            int v0 = m.getAtIndex(ValueLayout.JAVA_INT, i + 0);\n+            int v1 = m.getAtIndex(ValueLayout.JAVA_INT, i + 1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + 0, v0 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + 1, v1 + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"= 0\",\n+                  IRNode.STORE_VECTOR,  \"= 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Should never vectorize, since i1 and i2 are not guaranteed to be adjacent\n+    \/\/ invar2 + invar3 could overflow, and the address be valid with and without overflow.\n+    \/\/ So both addresses are valid, and not adjacent.\n+    static Object[] testMemorySegmentIInvarL3e(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(-invar1 + invar2 + invar3);\n+        long i2 = (long)(invar2 + invar3) - (long)(invar1); \/\/ not equivalent\n+        for (int i = 0; i < size; i+=2) {\n+            int v0 = m.getAtIndex(ValueLayout.JAVA_INT, i + i1 + 0);\n+            int v1 = m.getAtIndex(ValueLayout.JAVA_INT, i + i2 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + i1 + 0, v0 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_INT, i + i2 + 1, v1 + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n+                  IRNode.ADD_VI,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentIInvarL3f(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = -invar1 + invar2 + invar3;\n+        long i2 = invar2 + invar3 - invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            \/\/ Scale the index manually\n+            int v = m.get(ValueLayout.JAVA_INT, 4 * (i + i1));\n+            m.set(ValueLayout.JAVA_INT, 4 * (i + i2), v + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\",\n+                  IRNode.ADD_VL,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentLInvarL3a(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = invar1 + invar2 + invar3;\n+        long i2 = invar2 + invar3 + invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            long v = m.getAtIndex(ValueLayout.JAVA_LONG, i + i1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + i2, v + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\",\n+                  IRNode.ADD_VL,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentLInvarL3b(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = -invar1 - invar2 - invar3;\n+        long i2 = -invar2 - invar3 - invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            long v = m.getAtIndex(ValueLayout.JAVA_LONG, i + i1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + i2, v + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\",\n+                  IRNode.ADD_VL,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentLInvarL3c(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = -invar1 + invar2 + invar3;\n+        long i2 = invar2 + invar3 - invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            long v = m.getAtIndex(ValueLayout.JAVA_LONG, i + i1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + i2, v + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"= 0\",\n+                  IRNode.STORE_VECTOR,  \"= 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Would be nice if it vectorized.\n+    \/\/ Fails because of control flow. Somehow the \"offsetPlain\" check (checks for alignment) is not folded away.\n+    static Object[] testMemorySegmentLInvarL3d(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(-invar1 + invar2 + invar3);\n+        long i2 = (long)(invar2 + invar3 - invar1); \/\/ equivalent\n+        for (int i = 0; i < size; i+=2) {\n+            long v0 = m.getAtIndex(ValueLayout.JAVA_LONG, i + i1 + 0);\n+            long v1 = m.getAtIndex(ValueLayout.JAVA_LONG, i + i2 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + i1 + 0, v0 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + i2 + 1, v1 + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"= 0\",\n+                  IRNode.STORE_VECTOR,  \"= 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ Would be nice if it vectorized.\n+    \/\/ Fails because of control flow. Somehow the \"offsetPlain\" check (checks for alignment) is not folded away.\n+    static Object[] testMemorySegmentLInvarL3d2(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(-invar1 + invar2 + invar3);\n+        for (int i = 0; i < size; i+=2) {\n+            long v0 = m.getAtIndex(ValueLayout.JAVA_LONG, i + i1 + 0);\n+            long v1 = m.getAtIndex(ValueLayout.JAVA_LONG, i + i1 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + i1 + 0, v0 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + i1 + 1, v1 + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\",\n+                  IRNode.ADD_VL,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ But here the \"offsetPlain\" is folded away\n+    static Object[] testMemorySegmentLInvarL3d3(MemorySegment m, int size) {\n+        for (int i = 0; i < size; i+=2) {\n+            long v0 = m.getAtIndex(ValueLayout.JAVA_LONG, i + 0);\n+            long v1 = m.getAtIndex(ValueLayout.JAVA_LONG, i + 1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + 0, v0 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + 1, v1 + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"= 0\",\n+                  IRNode.STORE_VECTOR,  \"= 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    \/\/ FAILS: should be ok to vectorize, but does not. Investigate in JDK-8331659.\n+    static Object[] testMemorySegmentLInvarL3e(MemorySegment m, int invar1, int invar2, int invar3, int size) {\n+        long i1 = (long)(-invar1 + invar2 + invar3);\n+        long i2 = (long)(invar2 + invar3) - (long)(invar1); \/\/ not equivalent\n+        for (int i = 0; i < size; i+=2) {\n+            long v0 = m.getAtIndex(ValueLayout.JAVA_LONG, i + i1 + 0);\n+            long v1 = m.getAtIndex(ValueLayout.JAVA_LONG, i + i2 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + i1 + 0, v0 + 1);\n+            m.setAtIndex(ValueLayout.JAVA_LONG, i + i2 + 1, v1 + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\",\n+                  IRNode.ADD_VL,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n+    static Object[] testMemorySegmentLInvarL3f(MemorySegment m, long invar1, long invar2, long invar3, int size) {\n+        long i1 = -invar1 + invar2 + invar3;\n+        long i2 = invar2 + invar3 - invar1; \/\/ equivalent\n+        for (int i = 0; i < size; i++) {\n+            \/\/ Scale the index manually\n+            long v = m.get(ValueLayout.JAVA_LONG, 8 * (i + i1));\n+            m.set(ValueLayout.JAVA_LONG, 8 * (i + i2), v + 1);\n+        }\n+        return new Object[]{ m };\n+    }\n+\n+    @Test\n+    \/\/ Traversal through AddI would explode in exponentially many paths, exhausing the node limit.\n+    \/\/ For this, we have a traversal size limit.\n+    static Object[] testLargeInvariantSum(byte[] a, int invar1, int invar2, int invar3, int size) {\n+        int e = invar1;\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        e = ((e + invar2) + (e + invar3));\n+        for (int i = 0; i < size; i++) {\n+            a[i + e] += 1;\n+        }\n+        return new Object[]{ a };\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestEquivalentInvariants.java","additions":951,"deletions":0,"binary":false,"changes":951,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,8 @@\n+\/*\n+ * @test id=StoreToLoadForwardingFailureDetection\n+ * @bug 8328938\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:SuperWordStoreToLoadForwardingFailureDetection=4096 compiler.loopopts.superword.TestLargeScaleAndStride\n+ *\/\n+\n@@ -51,0 +59,1 @@\n+        byte[] b = new byte[RANGE];\n@@ -60,0 +69,1 @@\n+        byte[] gold4  = b.clone();\n@@ -67,0 +77,1 @@\n+        test4(gold4);\n@@ -109,0 +120,6 @@\n+\n+        for (int i = 0; i < 100; i++) {\n+            byte[] c = b.clone();\n+            test4(c);\n+            verify(c, gold4);\n+        }\n@@ -252,0 +269,13 @@\n+\n+    \/\/ VPointer con overflow possible with large SuperWordStoreToLoadForwardingFailureDetection\n+    static final int test4_BIG = (1 << 31)-1000;\n+    static       int test4_big = (1 << 31)-1000;\n+    static void test4(byte[] a) {\n+        long zero = test4_BIG - test4_big;\n+        for (int i = 0; i < RANGE; i++) {\n+            long base = UNSAFE.ARRAY_INT_BASE_OFFSET;\n+            long adr = base + zero + i;\n+            byte v0 = UNSAFE.getByte(a, adr);\n+            UNSAFE.putByte(a, adr, (byte)(v0 + 1));\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestLargeScaleAndStride.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,8 @@\n+\/*\n+ * @test id=byte-array-AlignVector\n+ * @bug 8329273 8348263\n+ * @summary Test vectorization of loops over MemorySegment\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestMemorySegment ByteArray AlignVector\n+ *\/\n+\n@@ -66,0 +74,8 @@\n+\/*\n+ * @test id=int-array-AlignVector\n+ * @bug 8329273 8348263\n+ * @summary Test vectorization of loops over MemorySegment\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestMemorySegment IntArray AlignVector\n+ *\/\n+\n@@ -74,0 +90,8 @@\n+\/*\n+ * @test id=long-array-AlignVector\n+ * @bug 8329273 8348263\n+ * @summary Test vectorization of loops over MemorySegment\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestMemorySegment LongArray AlignVector\n+ *\/\n+\n@@ -114,0 +138,8 @@\n+\/*\n+ * @test id=native-AlignVector\n+ * @bug 8329273 8348263\n+ * @summary Test vectorization of loops over MemorySegment\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.superword.TestMemorySegment Native AlignVector\n+ *\/\n+\n@@ -143,0 +175,3 @@\n+        if (args.length > 1 && args[1].equals(\"AlignVector\")) {\n+            framework.addFlags(\"-XX:+AlignVector\");\n+        }\n@@ -459,3 +494,3 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR_B, \"= 0\",\n-                  IRNode.ADD_VB,        \"= 0\",\n-                  IRNode.STORE_VECTOR,  \"= 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n@@ -464,2 +499,0 @@\n-    \/\/ FAILS: invariants are sorted differently, because of differently inserted Cast.\n-    \/\/ See: JDK-8330274\n@@ -477,3 +510,3 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR_B, \"= 0\",\n-                  IRNode.ADD_VB,        \"= 0\",\n-                  IRNode.STORE_VECTOR,  \"= 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\",\n+                  IRNode.ADD_VB,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n@@ -482,2 +515,0 @@\n-    \/\/ FAILS: invariants are sorted differently, because of differently inserted Cast.\n-    \/\/ See: JDK-8330274\n@@ -559,3 +590,3 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR_I, \"= 0\",\n-                  IRNode.ADD_VI,        \"= 0\",\n-                  IRNode.STORE_VECTOR,  \"= 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n+                  IRNode.ADD_VI,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n@@ -563,0 +594,1 @@\n+        applyIf = {\"AlignVector\", \"false\"},\n@@ -564,2 +596,0 @@\n-    \/\/ FAILS: invariants are sorted differently, because of differently inserted Cast.\n-    \/\/ See: JDK-8330274\n@@ -577,3 +607,3 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR_I, \"= 0\",\n-                  IRNode.ADD_VI,        \"= 0\",\n-                  IRNode.STORE_VECTOR,  \"= 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n+                  IRNode.ADD_VI,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n@@ -581,0 +611,1 @@\n+        applyIf = {\"AlignVector\", \"false\"},\n@@ -582,2 +613,0 @@\n-    \/\/ FAILS: invariants are sorted differently, because of differently inserted Cast.\n-    \/\/ See: JDK-8330274\n@@ -656,5 +685,0 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR_B, \"= 0\",\n-                  IRNode.ADD_VB,        \"= 0\",\n-                  IRNode.STORE_VECTOR,  \"= 0\"},\n-        applyIfPlatform = {\"64-bit\", \"true\"},\n-        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n@@ -662,1 +686,2 @@\n-    \/\/ See: JDK-8330274\n+    \/\/ See: JDK-8331659\n+    \/\/ Interestingly, it now vectorizes for native, but not for arrays.\n@@ -674,5 +699,0 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR_B, \"= 0\",\n-                  IRNode.ADD_VB,        \"= 0\",\n-                  IRNode.STORE_VECTOR,  \"= 0\"},\n-        applyIfPlatform = {\"64-bit\", \"true\"},\n-        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n@@ -680,1 +700,2 @@\n-    \/\/ See: JDK-8330274\n+    \/\/ See: JDK-8331659\n+    \/\/ Interestingly, it now vectorizes for native, but not for arrays.\n@@ -724,8 +745,6 @@\n-    \/\/@IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n-    \/\/              IRNode.ADD_VI,        \"> 0\",\n-    \/\/              IRNode.STORE_VECTOR,  \"> 0\"},\n-    \/\/    applyIfPlatform = {\"64-bit\", \"true\"},\n-    \/\/    applyIf = {\"AlignVector\", \"false\"},\n-    \/\/    applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n-    \/\/ FAILS: for native memory. I think it is because of invariants, but need investigation.\n-    \/\/        The long -> int loop conversion introduces extra invariants.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n+                  IRNode.ADD_VI,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n@@ -742,8 +761,6 @@\n-    \/\/@IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n-    \/\/              IRNode.ADD_VI,        \"> 0\",\n-    \/\/              IRNode.STORE_VECTOR,  \"> 0\"},\n-    \/\/    applyIfPlatform = {\"64-bit\", \"true\"},\n-    \/\/    applyIf = {\"AlignVector\", \"false\"},\n-    \/\/    applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n-    \/\/ FAILS: for native memory. I think it is because of invariants, but need investigation.\n-    \/\/        The long -> int loop conversion introduces extra invariants.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\",\n+                  IRNode.ADD_VI,        \"> 0\",\n+                  IRNode.STORE_VECTOR,  \"> 0\"},\n+        applyIfPlatform = {\"64-bit\", \"true\"},\n+        applyIf = {\"AlignVector\", \"false\"},\n+        applyIfCPUFeatureOr = {\"sse4.1\", \"true\", \"asimd\", \"true\"})\n@@ -766,1 +783,1 @@\n-    \/\/ See: JDK-8330274\n+    \/\/ See: JDK-8331659\n@@ -784,1 +801,1 @@\n-    \/\/ See: JDK-8330274\n+    \/\/ See: JDK-8331659\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMemorySegment.java","additions":68,"deletions":51,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347018\n+ * @summary Test that stores cloned with clone_up_backedge_goo() are not pinned above Assertion Predicates on which a\n+ *          load node is pinned at which will later fail in scheduling.\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=compileonly,*TestLoadPinnedAboveAssertionPredicatesAndUsingStore::test\n+ *                   compiler.predicates.assertion.TestLoadPinnedAboveAssertionPredicatesAndUsingStore\n+ *\/\n+\n+package compiler.predicates.assertion;\n+\n+public class TestLoadPinnedAboveAssertionPredicatesAndUsingStore {\n+    static int iFld;\n+    static int iArr[] = new int[100];\n+\n+    static void test() {\n+        int i = 63;\n+        do {\n+            iArr[1] = 34;\n+            iArr[i] += iFld;\n+            for (int j = i; j < 1; j++) {\n+            }\n+        } while (--i > 0);\n+    }\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10000; i++) {\n+            test();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/assertion\/TestLoadPinnedAboveAssertionPredicatesAndUsingStore.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @bug 8341696\n+ * @summary Allow C2 to also optimize non-fluid string builder calls.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.stringopts.TestFluidAndNonFluid\n+ *\/\n+package compiler.c2.irTests.stringopts;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+public class TestFluidAndNonFluid {\n+\n+    public static int unknown = 1;\n+\n+    public static void main(String[] args) {\n+        \/\/ Dont inline any StringBuilder methods for this IR test to check if string opts are applied or not.\n+        TestFramework.runWithFlags(\"-XX:CompileCommand=dontinline,java.lang.StringBuilder::*\");\n+    }\n+\n+    @DontInline\n+    public static void opaque(StringBuilder builder) {\n+        builder.append(\"Z\");\n+    }\n+\n+    @Run(test = {\"fluid\", \"nonFluid\", \"nonFinal\", \"nonFluidExtraneousVariable\", \"nonFluidConditional\",\n+        \"nonFluidOpaqueCall\"})\n+    public void runMethod() {\n+        Asserts.assertEQ(\"0ac\", fluidNoParam());\n+        Asserts.assertEQ(\"ac\", nonFluidNoParam());\n+        Asserts.assertEQ(\"ac\", fluid(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFluid(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFinal(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFluidExtraneousVariable(\"c\"));\n+        Asserts.assertEQ(\"ac\", nonFluidConditional(\"c\"));\n+        Asserts.assertEQ(\"aZ\", nonFluidOpaqueCall());\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\", IRNode.INTRINSIC_TRAP})\n+    public static String fluidNoParam() {\n+        return new StringBuilder(\"0\").append(\"a\").append(\"c\").toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\", IRNode.INTRINSIC_TRAP})\n+    public static String nonFluidNoParam() {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        sb.append(\"c\");\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String fluid(String a) {\n+        return new StringBuilder().append(\"a\").append(a).toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String nonFluid(String a) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        sb.append(a);\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String nonFinal(String a) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        sb.append(a);\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_OF, \"StringBuilder\", IRNode.CALL_OF_METHOD, \"toString\"})\n+    public static String nonFluidExtraneousVariable(String a) {\n+        final StringBuilder sb = new StringBuilder();\n+        final StringBuilder x = sb;\n+        sb.append(\"a\");\n+        x.append(a);\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ALLOC_OF, \"StringBuilder\", \"1\", IRNode.CALL_OF_METHOD, \"toString\", \"1\"})\n+    @IR(failOn = IRNode.INTRINSIC_TRAP)\n+    static String nonFluidConditional(String a) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        if (unknown == 1) {\n+            sb.append(a);\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ALLOC_OF, \"StringBuilder\", \"1\", IRNode.CALL_OF_METHOD, \"toString\", \"1\"})\n+    @IR(failOn = IRNode.INTRINSIC_TRAP)\n+    static String nonFluidOpaqueCall() {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"a\");\n+        opaque(sb);\n+        return sb.toString();\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/stringopts\/TestFluidAndNonFluid.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        dumpShouldFail(\n+        dumpShouldPass(\n@@ -59,1 +59,2 @@\n-            \"Class CustomLoadee2 implements the interface CustomInterface2_ia, but no interface has been specified in the input line\");\n+            \"java.lang.NoClassDefFoundError: CustomInterface2_ia\",\n+            \"Cannot find CustomLoadee2\");\n@@ -70,1 +71,1 @@\n-            \"The interface CustomInterface2_ib implemented by class CustomLoadee2 does not match any of the specified interface IDs\");\n+            \"The number of interfaces (1) specified in class list does not match the class file (2)\");\n@@ -104,0 +105,10 @@\n+\n+        dumpShouldPass(\n+            \"TESTCASE E6: JAR file doesn't exist\",\n+            appJar, classlist(\n+                \"Hello\",\n+                \"java\/lang\/Object id: 1\",\n+                \"NoSuchClass id: 2 super: 1 source: no_such_file.jar\"\n+            ),\n+            \"Cannot find NoSuchClass\",\n+            \"java.io.IOException: No such file: no_such_file.jar\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/ClassListFormatE.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-        static final String macprivate_or_shared = \"(pvt|tsh)\";\n+        static final String macprivate_or_shared = \"(pvt|tsh|cow|p\/a)\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/SystemMapTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+static jrawMonitorID monitor; \/\/ a monitor to serialize event callbacks and checkCpuTime calls\n@@ -153,0 +154,1 @@\n+        RawMonitorLocker rml(jvmti, jni, monitor);\n@@ -176,0 +178,1 @@\n+            RawMonitorLocker rml(jvmti, jni, monitor);\n@@ -186,0 +189,1 @@\n+                RawMonitorLocker rml(jvmti, jni, monitor);\n@@ -227,0 +231,1 @@\n+    RawMonitorLocker rml(jvmti, jni, monitor);\n@@ -242,0 +247,2 @@\n+    RawMonitorLocker rml(jvmti, jni, monitor);\n+\n@@ -264,0 +271,1 @@\n+    RawMonitorLocker rml(jvmti, jni, monitor);\n@@ -299,0 +307,1 @@\n+    RawMonitorLocker rml(jvmti, jni, monitor);\n@@ -392,0 +401,1 @@\n+    monitor = create_raw_monitor(jvmti, \"Raw monitor for synchronization\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetThreadCpuTime\/thrcputime002\/thrcputime002.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -639,2 +639,0 @@\n-sun\/security\/provider\/PolicyFile\/GrantAllPermToExtWhenNoPolicy.java 8039280 generic-all\n-sun\/security\/provider\/PolicyParser\/PrincipalExpansionError.java 8039280 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+#\n+# Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n@@ -3,1 +7,1 @@\n-\n+#\n@@ -75,1 +79,4 @@\n-    -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI \\\n+    -XX:+UnlockDiagnosticVMOptions \\\n+    -XX:+LogVMOutput -XX:-DisplayVMOutput -XX:LogFile=vmprops.flags.final.vm.log \\\n+    -XX:+PrintFlagsFinal \\\n+    -XX:+WhiteBoxAPI \\\n","filename":"test\/jdk\/TEST.ROOT","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,3 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @run main ItemEventTest\n@@ -32,0 +35,2 @@\n+\/\/ Pass -save to the test to enable screenshots at each select\/deselect\n+\n@@ -40,1 +45,0 @@\n-import java.awt.event.KeyEvent;\n@@ -42,18 +46,23 @@\n-import java.awt.event.ItemEvent;\n-import java.awt.event.ItemListener;\n-\n-public class ItemEventTest extends Frame\n-{\n-    List list;\n-    final String expectedSelectionOrder;\n-    StringBuilder actualSelectionOrder;\n-    Robot robot;\n-\n-    public ItemEventTest()\n-    {\n-        try {\n-            robot = new Robot();\n-        } catch(AWTException e) {\n-            throw new RuntimeException(e.getMessage());\n-        }\n-        expectedSelectionOrder = \"01230123\";\n+import java.awt.event.KeyEvent;\n+import java.awt.image.RenderedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+\n+import jdk.test.lib.Platform;\n+\n+public final class ItemEventTest extends Frame {\n+    private static final String expectedSelectionOrder = \"01230123\";\n+\n+    private static boolean saveScreenshots;\n+\n+    private final StringBuffer actualSelectionOrder\n+            = new StringBuffer(expectedSelectionOrder.length());\n+\n+    private final List list;\n+    private final Robot robot;\n+\n+    private ItemEventTest() throws AWTException {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n@@ -68,0 +77,1 @@\n+\n@@ -71,0 +81,1 @@\n+        setLocationRelativeTo(null);\n@@ -76,0 +87,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -77,4 +89,4 @@\n-        if (e.target instanceof List) {\n-            if (e.id == Event.LIST_DESELECT || e.id == Event.LIST_SELECT) {\n-                actualSelectionOrder.append(e.arg);\n-            }\n+        if ((e.target instanceof List)\n+            && (e.id == Event.LIST_DESELECT\n+                || e.id == Event.LIST_SELECT)) {\n+            logEvent(\"handleEvent: \", e.arg);\n@@ -85,1 +97,6 @@\n-    void testHandleEvent() {\n+    private void logEvent(String method, Object listItem) {\n+        actualSelectionOrder.append(listItem);\n+        System.out.println(method + listItem);\n+    }\n+\n+    private void testHandleEvent() {\n@@ -91,7 +108,3 @@\n-    void testItemListener() {\n-        list.addItemListener(new ItemListener() {\n-            @Override\n-            public void itemStateChanged(ItemEvent ie) {\n-                actualSelectionOrder.append(ie.getItem());\n-            }\n-        });\n+    private void testItemListener() {\n+        list.addItemListener(ie\n+                -> logEvent(\"testItemListener: \", ie.getItem()));\n@@ -101,6 +114,7 @@\n-    void performTest() {\n-        actualSelectionOrder = new StringBuilder();\n-        Point loc = list.getLocationOnScreen();\n-        Rectangle rect = list.getBounds();\n-        int dY = rect.height \/ list.getItemCount();\n-        loc = new Point(loc.x + 10, loc.y + 5);\n+    private void performTest() {\n+        actualSelectionOrder.setLength(0);\n+\n+        final Rectangle rect = getListBoundsOnScreen();\n+        final int dY = rect.height \/ list.getItemCount();\n+        final Point loc = new Point(rect.x + rect.width \/ 2,\n+                                    rect.y + dY \/ 2);\n@@ -108,3 +122,1 @@\n-        String osName = System.getProperty(\"os.name\");\n-        boolean isMac = osName.contains(\"Mac\") || osName.contains(\"mac\");\n-        if(isMac) {\n+        if (Platform.isOSX()) {\n@@ -112,1 +124,0 @@\n-            robot.waitForIdle();\n@@ -119,0 +130,2 @@\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -120,4 +133,4 @@\n-                robot.mousePress(InputEvent.BUTTON1_MASK);\n-                robot.waitForIdle();\n-                robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-                robot.waitForIdle();\n+\n+                if (saveScreenshots) {\n+                    saveImage(robot.createScreenCapture(rect));\n+                }\n@@ -127,1 +140,1 @@\n-        if(isMac) {\n+        if (Platform.isOSX()) {\n@@ -131,2 +144,3 @@\n-        if (!expectedSelectionOrder.equals(actualSelectionOrder.toString())) {\n-            dispose();\n+        if (!expectedSelectionOrder.contentEquals(actualSelectionOrder)) {\n+            saveImage(robot.createScreenCapture(rect));\n+\n@@ -140,5 +154,27 @@\n-    public static void main(String args[]) {\n-       ItemEventTest test = new ItemEventTest();\n-       test.testHandleEvent();\n-       test.testItemListener();\n-       test.dispose();\n+    private Rectangle getListBoundsOnScreen() {\n+        return new Rectangle(list.getLocationOnScreen(),\n+                             list.getSize());\n+    }\n+\n+    private static int imageNo = 0;\n+\n+    private static void saveImage(RenderedImage image) {\n+        try {\n+            ImageIO.write(image,\n+                          \"png\",\n+                          new File(String.format(\"image-%02d.png\",\n+                                                 ++imageNo)));\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    public static void main(String[] args) throws AWTException {\n+        saveScreenshots = args.length > 0 && \"-save\".equals(args[0]);\n+\n+        ItemEventTest test = new ItemEventTest();\n+        try {\n+            test.testHandleEvent();\n+            test.testItemListener();\n+        } finally {\n+            test.dispose();\n+        }\n","filename":"test\/jdk\/java\/awt\/List\/ItemEventTest\/ItemEventTest.java","additions":90,"deletions":54,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -362,1 +362,1 @@\n-     * See {@link #PassFailJFrame(String,String,long,int,int,boolean)} for\n+     * See {@link #PassFailJFrame(String,String,long,int,int)} for\n@@ -385,1 +385,1 @@\n-     * See {@link #PassFailJFrame(String,String,long,int,int,boolean)} for\n+     * See {@link #PassFailJFrame(String,String,long,int,int)} for\n@@ -407,1 +407,0 @@\n-     * The screenshot feature is not enabled, if you use this constructor.\n@@ -409,1 +408,1 @@\n-     * See {@link #PassFailJFrame(String,String,long,int,int,boolean)} for\n+     * See {@link #PassFailJFrame(String,String,long,int,int)} for\n@@ -427,29 +426,0 @@\n-    \/**\n-     * Constructs a frame which displays test instructions and\n-     * the <i>Pass<\/i> \/ <i>Fail<\/i> buttons\n-     * with the given title, instructions, timeout, number of rows and columns.\n-     * The screenshot feature is not enabled, if you use this constructor.\n-     * <p>\n-     * See {@link #PassFailJFrame(String,String,long,int,int,boolean)} for\n-     * more details.\n-     *\n-     * @param title        the title of the instruction frame\n-     * @param instructions the instructions for the tester\n-     * @param testTimeOut  the test timeout in minutes\n-     * @param rows         the number of rows for the text component\n-     *                     which displays test instructions\n-     * @param columns      the number of columns for the text component\n-     *                     which displays test instructions\n-     *\n-     * @throws InterruptedException if the current thread is interrupted\n-     *              while waiting for EDT to finish creating UI components\n-     * @throws InvocationTargetException if an exception is thrown while\n-     *              creating UI components on EDT\n-     *\/\n-    public PassFailJFrame(String title, String instructions,\n-                          long testTimeOut,\n-                          int rows, int columns)\n-            throws InterruptedException, InvocationTargetException {\n-        this(title, instructions, testTimeOut, rows, columns, false);\n-    }\n-\n@@ -460,2 +430,1 @@\n-     * timeout, number of rows and columns,\n-     * and screen capture functionality.\n+     * timeout, number of rows and columns.\n@@ -486,6 +455,0 @@\n-     * <p>\n-     * If you enable screenshots by setting the {@code screenCapture}\n-     * parameter to {@code true}, a <i>Screenshot<\/i> button is added.\n-     * Clicking the <i>Screenshot<\/i> button takes screenshots of\n-     * all the monitors or all the windows registered with\n-     * {@code PassFailJFrame}.\n@@ -500,2 +463,0 @@\n-     * @param screenCapture if set to {@code true}, enables screen capture\n-     *                      functionality\n@@ -513,2 +474,1 @@\n-                          int rows, int columns,\n-                          boolean screenCapture)\n+                          int rows, int columns)\n@@ -518,2 +478,1 @@\n-                                   rows, columns,\n-                                   screenCapture));\n+                                   rows, columns));\n@@ -616,2 +575,1 @@\n-                                 long testTimeOut, int rows, int columns,\n-                                 boolean enableScreenCapture) {\n+                                 long testTimeOut, int rows, int columns) {\n@@ -626,1 +584,1 @@\n-                                           enableScreenCapture,\n+                                           false,\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":9,"deletions":51,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6212869\n+ * @bug 6212869 8347841\n@@ -32,1 +32,1 @@\n-import java.util.Date;\n+import java.time.ZoneId;\n@@ -34,1 +34,0 @@\n-import java.text.SimpleDateFormat;\n@@ -43,0 +42,3 @@\n+            if (ZoneId.SHORT_IDS.containsKey(timeZoneID)) {\n+                continue;\n+            }\n","filename":"test\/jdk\/java\/io\/File\/TimeZoneLastModified.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,0 +42,4 @@\n+    \/\/\n+    \/\/ If exceptionExpected == null, then any IOException thrown by\n+    \/\/ File.createTempFile is ignored.\n+    \/\/\n@@ -43,1 +47,1 @@\n-                             boolean exceptionExpected) throws IOException\n+                             Boolean exceptionExpected) throws IOException\n@@ -70,8 +74,13 @@\n-                    if (exceptionExpected) {\n-                        if (e.getMessage().startsWith(exceptionMsg))\n-                            exceptionThrown = true;\n-                        else\n-                            System.out.println(\"Wrong error message:\" +\n-                                               e.getMessage());\n-                    } else {\n-                        throw e;\n+                    if (exceptionExpected != null) {\n+                        if (exceptionExpected) {\n+                            if (e.getMessage().startsWith(exceptionMsg))\n+                                exceptionThrown = true;\n+                            else\n+                                System.out.println(\"Wrong error message:\" +\n+                                                   e.getMessage());\n+                        } else {\n+                            throw e;\n+                        }\n+\n+                        if (exceptionExpected && (!exceptionThrown || f != null))\n+                            throw new RuntimeException(\"IOException expected\");\n@@ -80,3 +89,0 @@\n-\n-                if (exceptionExpected && (!exceptionThrown || f != null))\n-                    throw new RuntimeException(\"IOException is expected\");\n@@ -111,4 +117,7 @@\n-        boolean exceptionExpected =\n-            !(StaticProperty.osName().matches(\"^.*[11|2025]$\") ||\n-              new OSVersion(10, 0).compareTo(OSVersion.current()) > 0);\n-        test(\"ReservedName\", resvPre, resvSuf, exceptionExpected);\n+\n+        System.out.println(\"OS name:    \" + StaticProperty.osName() + \"\\n\" +\n+                           \"OS version: \" + OSVersion.current());\n+\n+        \/\/ Here the test is for whether File.createTempFile hangs, so whether\n+        \/\/ an exception is thrown is ignored: expectedException == null\n+        test(\"ReservedName\", resvPre, resvSuf, null);\n","filename":"test\/jdk\/java\/io\/File\/createTempFile\/SpecialTempFile.java","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import jdk.test.whitebox.WhiteBox;\n+\n@@ -33,0 +35,3 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -34,2 +39,4 @@\n- * @run main\/othervm -Xmx8M -Xms8M -Xverify:all HiddenClassUnloading\n- * @run main\/othervm -Xmx8M -Xms8M -Xverify:all -XX:-CompactStrings HiddenClassUnloading\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -Xverify:all HiddenClassUnloading\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\n+ *                   -Xverify:all -XX:-CompactStrings HiddenClassUnloading\n@@ -46,1 +53,1 @@\n-        for (int i = 0; i < 12000; i++) {\n+        for (int i = 0; i < 2000; i++) {\n@@ -64,0 +71,3 @@\n+        \/\/ Request GC which performs class unloading\n+        WhiteBox.getWhiteBox().fullGC();\n+\n","filename":"test\/jdk\/java\/lang\/String\/concat\/HiddenClassUnloading.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,2 @@\n+\n+import jdk.test.lib.net.URIBuilder;\n@@ -50,1 +52,0 @@\n-import static java.lang.String.format;\n@@ -59,1 +60,1 @@\n-public abstract class AbstractConnectTimeoutHandshake {\n+abstract class AbstractConnectTimeoutHandshake {\n@@ -200,5 +201,0 @@\n-    static String serverAuthority(Server server) {\n-        return InetAddress.getLoopbackAddress().getHostName() + \":\"\n-                + server.getPort();\n-    }\n-\n@@ -208,1 +204,6 @@\n-        httpsURI = URI.create(\"https:\/\/\" + serverAuthority(server) + \"\/foo\");\n+        httpsURI = URIBuilder.newBuilder()\n+                .scheme(\"https\")\n+                .loopback()\n+                .port(server.getPort())\n+                .path(\"\/foo\")\n+                .build();\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractConnectTimeoutHandshake.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n@@ -60,0 +58,1 @@\n+import java.util.concurrent.Semaphore;\n@@ -70,1 +69,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -73,3 +71,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -422,3 +417,5 @@\n-        CompletableFuture<Subscription> subscriptionCF = new CompletableFuture<>();\n-        ConcurrentLinkedDeque<ByteBuffer> items = new ConcurrentLinkedDeque<>();\n-        CompletableFuture<List<ByteBuffer>> resultCF = new CompletableFuture<>();\n+        final CompletableFuture<Subscription> subscriptionCF = new CompletableFuture<>();\n+        final ConcurrentLinkedDeque<ByteBuffer> items = new ConcurrentLinkedDeque<>();\n+        final CompletableFuture<List<ByteBuffer>> resultCF = new CompletableFuture<>();\n+\n+        final Semaphore semaphore = new Semaphore(0);\n@@ -434,0 +431,5 @@\n+            int available = semaphore.availablePermits();\n+            if (available > Integer.MAX_VALUE - 8) {\n+                onError(new IllegalStateException(\"too many buffers in queue: \" + available));\n+            }\n+            semaphore.release();\n@@ -446,0 +448,12 @@\n+        public ByteBuffer take() {\n+            \/\/ it is not guaranteed that the buffer will be added to\n+            \/\/ the queue in the same thread that calls request(1).\n+            try {\n+                semaphore.acquire();\n+            } catch (InterruptedException x) {\n+                Thread.currentThread().interrupt();\n+                throw new CompletionException(x);\n+            }\n+            return items.pop();\n+        }\n+\n@@ -631,1 +645,1 @@\n-        assertTrue(requestSubscriber1.resultCF().isDone());\n+        \/\/ onNext() may not be called in the same thread than request()\n@@ -633,0 +647,1 @@\n+        assertTrue(requestSubscriber1.resultCF().isDone());\n@@ -649,1 +664,0 @@\n-        assertTrue(requestSubscriber2.resultCF().isDone());\n@@ -651,0 +665,1 @@\n+        assertTrue(requestSubscriber2.resultCF().isDone());\n@@ -692,1 +707,1 @@\n-                ByteBuffer buffer = subscriber.items.pop();\n+                ByteBuffer buffer = subscriber.take();\n@@ -792,1 +807,2 @@\n-        System.out.println(\"Request to \" + uri);\n+        System.out.printf(\"Request to %s (sameClient: %s)%n\", uri, sameClient);\n+        System.err.printf(\"Request to %s (sameClient: %s)%n\", uri, sameClient);\n@@ -805,1 +821,2 @@\n-            System.out.println(\"Iteration: \" + i);\n+            System.out.println(uri + \": Iteration: \" + i);\n+            System.err.println(uri + \": Iteration: \" + i);\n","filename":"test\/jdk\/java\/net\/httpclient\/AggregateRequestBodyTest.java","additions":32,"deletions":15,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+ * @library \/test\/lib\n+ * @build AbstractConnectTimeoutHandshake\n","filename":"test\/jdk\/java\/net\/httpclient\/ConnectTimeoutHandshakeAsync.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+ * @library \/test\/lib\n+ * @build AbstractConnectTimeoutHandshake\n","filename":"test\/jdk\/java\/net\/httpclient\/ConnectTimeoutHandshakeSync.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import org.junit.jupiter.api.BeforeAll;\n@@ -73,2 +72,0 @@\n-    private static SSLContext sslContext;\n-\n@@ -88,6 +85,0 @@\n-    @BeforeAll\n-    static void beforeAll() throws Exception {\n-        sslContext = new SimpleSSLContext().get();\n-        assertNotNull(sslContext, \"could not create a SSLContext\");\n-    }\n-\n@@ -107,0 +98,2 @@\n+        final SSLContext sslContext = new SimpleSSLContext().get();\n+        assertNotNull(sslContext, \"could not create a SSLContext\");\n@@ -109,1 +102,1 @@\n-        final HttpTestServer server = createServer(matcher);\n+        final HttpTestServer server = createServer(matcher, sslContext);\n@@ -159,0 +152,2 @@\n+        final SSLContext sslContext = new SimpleSSLContext().get();\n+        assertNotNull(sslContext, \"could not create a SSLContext\");\n@@ -162,1 +157,1 @@\n-        final HttpTestServer server = createServer(matcher);\n+        final HttpTestServer server = createServer(matcher, sslContext);\n@@ -193,1 +188,2 @@\n-    private static HttpTestServer createServer(final SNIMatcher matcher) throws Exception {\n+    private static HttpTestServer createServer(final SNIMatcher matcher,\n+                                               final SSLContext sslContext) throws Exception {\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientSNITest.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,0 +111,1 @@\n+        HttpServerAdapters.enableServerLogging();\n@@ -146,1 +147,1 @@\n-        var ps = proxySelector = ProxySelector.of(proxy.getProxyAddress());\n+        proxySelector = ProxySelector.of(proxy.getProxyAddress());\n@@ -148,2 +149,0 @@\n-        \/\/ Creates a client that uses the above proxy selector\n-        client = newHttpClient(ps);\n@@ -180,3 +179,5 @@\n-            \/\/ tests proxy and server authentication through:\n-            \/\/ - plain proxy connection to plain HTTP\/1.1 server,\n-            test.test(Version.HTTP_1_1, \"http\", \"\/foo\/http1\");\n+            try (HttpClient client = test.newHttpClient(test.proxySelector)) {\n+                \/\/ tests proxy and server authentication through:\n+                \/\/ - plain proxy connection to plain HTTP\/1.1 server,\n+                test.test(client, Version.HTTP_1_1, \"http\", \"\/foo\/http1\");\n+            }\n@@ -189,2 +190,2 @@\n-            test.client = test.newHttpClient(test.proxySelector);\n-            test.test(Version.HTTP_2, \"http\", \"\/foo\/http2\");\n+            try (HttpClient client = test.newHttpClient(test.proxySelector)) {\n+                test.test(client, Version.HTTP_2, \"http\", \"\/foo\/http2\");\n@@ -192,2 +193,2 @@\n-            \/\/ - proxy tunnel SSL connection to HTTP\/1.1 server\n-            test.test(Version.HTTP_1_1, \"https\", \"\/foo\/https1\");\n+                \/\/ - proxy tunnel SSL connection to HTTP\/1.1 server\n+                test.test(client, Version.HTTP_1_1, \"https\", \"\/foo\/https1\");\n@@ -195,2 +196,3 @@\n-            \/\/ - proxy tunnel SSl connection to HTTP\/2 server\n-            test.test(Version.HTTP_2, \"https\", \"\/foo\/https2\");\n+                \/\/ - proxy tunnel SSl connection to HTTP\/2 server\n+                test.test(client, Version.HTTP_2, \"https\", \"\/foo\/https2\");\n+            }\n@@ -230,1 +232,1 @@\n-    public void test(Version version, String scheme, String path) throws Exception {\n+    public void test(HttpClient client, Version version, String scheme, String path) throws Exception {\n@@ -237,1 +239,1 @@\n-                    .host(\"localhost\")\n+                    .loopback()\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpsTunnelAuthTest.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -212,0 +212,3 @@\n+            \/\/ wait for our subscriber to be completed and get the\n+            \/\/ list of ByteBuffers it received.\n+            var buffers = subscriber.getBuffers().join();\n@@ -213,1 +216,1 @@\n-                responseBody = subscriber.buffers;\n+                responseBody = buffers;\n@@ -249,0 +252,7 @@\n+        \/\/ A CompletableFuture that will be completed with a list of ByteBuffers that the\n+        \/\/ ConsumingSubscriber has consumed.\n+        final CompletableFuture<List<ByteBuffer>> consumed = new CompletableFuture<>();\n+\n+        public final CompletableFuture<List<ByteBuffer>> getBuffers() {\n+            return consumed;\n+        }\n@@ -259,1 +269,1 @@\n-        @Override public void onError(Throwable throwable) { assert false : \"Unexpected\"; }\n+        @Override public void onError(Throwable throwable) { consumed.completeExceptionally(throwable); }\n@@ -261,1 +271,1 @@\n-        @Override public void onComplete() { \/* do nothing *\/ }\n+        @Override public void onComplete() { consumed.complete(buffers.stream().toList()); }\n","filename":"test\/jdk\/java\/net\/httpclient\/offline\/FixedResponseHttpClient.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * 4213086 4250359 4253490 4266432 4406615 4413980 8008577 8305853 8174269\n+ * 4213086 4250359 4253490 4266432 4406615 4413980 8008577 8305853 8174269 8347841\n@@ -277,1 +277,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"EST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Panama\"));\n@@ -456,1 +456,1 @@\n-            String[] IDs = new String[] {\"Undefined\", \"PST\", \"US\/Pacific\",\n+            String[] IDs = new String[] {\"Undefined\", \"America\/Los_Angeles\", \"US\/Pacific\",\n@@ -546,1 +546,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"CST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Chicago\"));\n@@ -797,1 +797,1 @@\n-      TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+      TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -1099,1 +1099,1 @@\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/DateFormatRegression.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- *      8190748 8216969 8174269\n+ *      8190748 8216969 8174269 8347841\n@@ -33,1 +33,1 @@\n-import java.util.*;\n+import java.time.ZoneId;\n@@ -35,0 +35,2 @@\n+import java.util.*;\n+import java.util.function.Predicate;\n@@ -92,1 +94,3 @@\n-        String[] ids = TimeZone.getAvailableIDs();\n+        String[] ids = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n@@ -186,1 +190,1 @@\n-        TimeZone PST  = TimeZone.getTimeZone(\"PST\");\n+        TimeZone PST = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -278,1 +282,1 @@\n-        TimeZone PST = TimeZone.getTimeZone(\"PST\");\n+        TimeZone PST = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/DateFormatTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8218948\n+ * @bug 8218948 8347841\n@@ -32,0 +32,1 @@\n+import java.time.ZoneId;\n@@ -328,0 +329,3 @@\n+            if (ZoneId.SHORT_IDS.containsKey(tz[0])) {\n+                continue;\n+            }\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/SDFTCKZoneNamesTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @bug 4358730\n+ * @bug 4358730 8347841\n@@ -59,1 +59,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/bug4358730.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * 4973919 4980088 4965624 5013094 5006864 8152077\n+ * 4973919 4980088 4965624 5013094 5006864 8152077 8347841\n@@ -45,0 +45,2 @@\n+import java.time.ZoneId;\n+import java.util.Arrays;\n@@ -53,0 +55,1 @@\n+import java.util.function.Predicate;\n@@ -78,1 +81,3 @@\n-        String[] ids = TimeZone.getAvailableIDs();\n+        String[] ids = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n@@ -492,1 +497,1 @@\n-        TimeZone PST = TimeZone.getTimeZone(\"PST\");\n+        TimeZone PST = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -841,1 +846,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -1166,2 +1171,2 @@\n-            TimeZone.getTimeZone(\"PST\"),\n-            TimeZone.getTimeZone(\"EAT\")};\n+            TimeZone.getTimeZone(\"America\/Los_Angeles\"),\n+            TimeZone.getTimeZone(\"Africa\/Addis_Ababa\")};\n@@ -1200,1 +1205,1 @@\n-        TimeZone tz = TimeZone.getTimeZone(\"PST\");\n+        TimeZone tz = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -1514,2 +1519,2 @@\n-        TimeZone PST = TimeZone.getTimeZone(\"PST\");\n-        TimeZone EST = TimeZone.getTimeZone(\"EST\");\n+        TimeZone PST = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n+        TimeZone EST = TimeZone.getTimeZone(\"America\/Panama\");\n@@ -1773,1 +1778,1 @@\n-            String[] IDs = new String[]{\"Undefined\", \"PST\", \"US\/Pacific\",\n+            String[] IDs = new String[]{\"Undefined\", \"America\/Los_Angeles\", \"US\/Pacific\",\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarRegression.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- *@bug 8007520 8008254\n+ *@bug 8007520 8008254 8347841\n@@ -110,1 +110,4 @@\n-            \/\/ TBD: tzdt intergration\n+            if (ZoneId.SHORT_IDS.containsKey(zidStr)) {\n+                continue;\n+            }\n+            \/\/ TBD: tzdt integration\n@@ -113,4 +116,1 @@\n-                    || zidStr.equals(\"US\/Pacific-New\")\n-                    || zidStr.equals(\"EST\")\n-                    || zidStr.equals(\"HST\")\n-                    || zidStr.equals(\"MST\")) {\n+                    || zidStr.equals(\"US\/Pacific-New\")) {\n@@ -119,1 +119,1 @@\n-            ZoneId zid = ZoneId.of(zidStr, ZoneId.SHORT_IDS);\n+            ZoneId zid = ZoneId.of(zidStr);\n@@ -126,1 +126,0 @@\n-                    && !ZoneId.SHORT_IDS.containsKey(zidStr)\n","filename":"test\/jdk\/java\/util\/Calendar\/JavatimeTest.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4316678\n+ * @bug 4316678 8347841\n@@ -56,1 +56,1 @@\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4316678.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4372743\n+ * @bug 4372743 8347841\n@@ -70,1 +70,1 @@\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/Calendar\/bug4372743.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4955000\n+ * @bug 4955000 8347841\n@@ -45,1 +45,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"NST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"Pacific\/Auckland\"));\n","filename":"test\/jdk\/java\/util\/Date\/Bug4955000.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,2 @@\n- * @bug 4023247 4027685 4032037 4072029 4073003 4118010 4120606 4133833 4136916 6274757 6314387\n+ * @bug 4023247 4027685 4032037 4072029 4073003 4118010 4120606 4133833\n+ *      4136916 6274757 6314387 8347841\n@@ -109,1 +110,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/Date\/DateRegression.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4143459\n+ * @bug 4143459 8347841\n@@ -59,1 +59,1 @@\n-            TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -82,1 +82,1 @@\n-            TimeZone PST = TimeZone.getTimeZone(\"PST\");\n+            TimeZone PST = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -210,1 +210,1 @@\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"PST\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/Date\/DateTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4052440 8003267 8062588 8210406 8174269 8327434\n+ * @bug 4052440 8003267 8062588 8210406 8174269 8327434 8347841\n@@ -40,0 +40,1 @@\n+import java.time.ZoneId;\n@@ -48,0 +49,1 @@\n+import java.util.function.Predicate;\n@@ -75,1 +77,3 @@\n-        String[] ids = TimeZone.getAvailableIDs();\n+        String[] ids = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n@@ -179,1 +183,1 @@\n-            throw new RuntimeException(\"parse error occured\" + pe);\n+            throw new RuntimeException(\"parse error occurred\" + pe);\n@@ -189,2 +193,2 @@\n-            LATIME, PST, PST8PDT, US_PACIFIC,\n-            TOKYOTIME, JST, JAPAN,\n+            LATIME, PST8PDT, US_PACIFIC,\n+            TOKYOTIME, JAPAN,\n@@ -211,1 +215,0 @@\n-    final String PST = \"PST\";\n@@ -218,1 +221,0 @@\n-    final String JST = \"JST\";\n@@ -220,2 +222,0 @@\n-    final String JST_IN_OSAKA =\n-        tznp.getDisplayName(JST, false, TimeZone.LONG, OSAKA);\n@@ -231,5 +231,0 @@\n-        String pst = TimeZone.getTimeZone(PST).getDisplayName(OSAKA);\n-        if (!LATIME_IN_OSAKA.equals(pst)) {\n-            throw new RuntimeException(\"Provider's localized name is not available for an alias ID: \"+PST+\".  result: \"+pst+\" expected: \"+LATIME_IN_OSAKA);\n-        }\n-\n@@ -240,17 +235,0 @@\n-\n-        \/\/ Check that provider's name for an alias id (JST) is\n-        \/\/ propagated to its standard id and alias ids.\n-        String jstime = TimeZone.getTimeZone(JST).getDisplayName(OSAKA);\n-        if (!JST_IN_OSAKA.equals(jstime)) {\n-            throw new RuntimeException(\"Could not get provider's localized name.  result: \"+jstime+\" expected: \"+JST_IN_OSAKA);\n-        }\n-\n-        String tokyotime = TimeZone.getTimeZone(TOKYOTIME).getDisplayName(OSAKA);\n-        if (!JST_IN_OSAKA.equals(tokyotime)) {\n-            throw new RuntimeException(\"Provider's localized name is not available for a standard ID: \"+TOKYOTIME+\".  result: \"+tokyotime+\" expected: \"+JST_IN_OSAKA);\n-        }\n-\n-        String japan = TimeZone.getTimeZone(JAPAN).getDisplayName(OSAKA);\n-        if (!JST_IN_OSAKA.equals(japan)) {\n-            throw new RuntimeException(\"Provider's localized name is not available for an alias ID: \"+JAPAN+\".  result: \"+japan+\" expected: \"+JST_IN_OSAKA);\n-        }\n","filename":"test\/jdk\/java\/util\/PluggableLocale\/TimeZoneNameProviderTest.java","additions":10,"deletions":32,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6199320\n+ * @bug 6199320 8347841\n@@ -62,1 +62,1 @@\n-            System.out.println(\"tz=\" + TimeZone.getTimeZone(\"PST\"));\n+            System.out.println(\"tz=\" + TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/Properties\/StoreDeadlock.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 5097350\n+ * @bug 5097350 8347841\n@@ -30,0 +30,1 @@\n+import java.time.ZoneId;\n@@ -31,1 +32,1 @@\n-import java.text.*;\n+import java.util.function.Predicate;\n@@ -35,1 +36,3 @@\n-        String[] tzids = TimeZone.getAvailableIDs();\n+        String[] tzids = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug5097350.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- *      8077685 8151876 8166875 8169191 8170316 8176044 8174269\n+ *      8077685 8151876 8166875 8169191 8170316 8176044 8174269 8347841\n@@ -34,0 +34,1 @@\n+import java.time.ZoneId;\n@@ -35,0 +36,1 @@\n+import java.util.function.Predicate;\n@@ -47,1 +49,3 @@\n-    static String[] timezones = TimeZone.getAvailableIDs();\n+    static String[] timezones = Arrays.stream(TimeZone.getAvailableIDs())\n+            .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+            .toArray(String[]::new);\n@@ -104,0 +108,3 @@\n+                    if (ZoneId.SHORT_IDS.containsKey(tzs[j])) {\n+                        continue;\n+                    }\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug6329116.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6772689\n+ * @bug 6772689 8347841\n@@ -31,0 +31,2 @@\n+import java.time.ZoneId;\n+import java.util.Arrays;\n@@ -35,0 +37,1 @@\n+import java.util.function.Predicate;\n@@ -46,1 +49,3 @@\n-        String[] tzids = TimeZone.getAvailableIDs();\n+        String[] tzids = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n","filename":"test\/jdk\/java\/util\/TimeZone\/Bug6772689.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-            System.err.printf(\"Wrong display name for timezone Etc\/GMT-5 : expected GMT+05:00,  Actual \" + displayName);\n+            System.err.println(\"Wrong display name for timezone Etc\/GMT-5 : expected GMT+05:00,  Actual \" + displayName);\n","filename":"test\/jdk\/java\/util\/TimeZone\/CLDRDisplayNamesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6936350\n+ * @bug 6936350 8347841\n@@ -30,0 +30,1 @@\n+import java.time.ZoneId;\n@@ -31,0 +32,1 @@\n+import java.util.function.Predicate;\n@@ -36,1 +38,3 @@\n-    private static final String[] ZONES = TimeZone.getAvailableIDs();\n+    private static final String[] ZONES = Arrays.stream(TimeZone.getAvailableIDs())\n+            .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+            .toArray(String[]::new);\n","filename":"test\/jdk\/java\/util\/TimeZone\/DaylightTimeTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4509255 5055567 6176318 7090844\n+ * @bug 4509255 5055567 6176318 7090844 8347841\n@@ -30,0 +30,1 @@\n+import java.time.ZoneId;\n@@ -36,0 +37,1 @@\n+import java.util.function.Predicate;\n@@ -42,2 +44,6 @@\n-        String[] tzs = TimeZone.getAvailableIDs();\n-        String[] tzs2 = TimeZone.getAvailableIDs();\n+        String[] tzs = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n+        String[] tzs2 = Arrays.stream(TimeZone.getAvailableIDs())\n+                .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                .toArray(String[]::new);\n@@ -86,2 +92,6 @@\n-            tzs = TimeZone.getAvailableIDs(offset);\n-            tzs2 = TimeZone.getAvailableIDs(offset);\n+            tzs = Arrays.stream(TimeZone.getAvailableIDs(offset))\n+                    .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                    .toArray(String[]::new);\n+            tzs2 = Arrays.stream(TimeZone.getAvailableIDs(offset))\n+                    .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                    .toArray(String[]::new);\n","filename":"test\/jdk\/java\/util\/TimeZone\/IDTest.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6851214\n+ * @bug 6851214 8347841\n@@ -31,0 +31,1 @@\n+import java.time.ZoneId;\n@@ -32,0 +33,1 @@\n+import java.util.function.Predicate;\n@@ -36,1 +38,3 @@\n-    String TimeZoneIds[] = TimeZone.getAvailableIDs();\n+    String[] TimeZoneIds = Arrays.stream(TimeZone.getAvailableIDs())\n+            .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+            .toArray(String[]::new);\n","filename":"test\/jdk\/java\/util\/TimeZone\/ListTimeZones.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8347841\n@@ -254,1 +255,1 @@\n-        TimeZone pst = TimeZone.getTimeZone(\"PST\");\n+        TimeZone pst = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -413,5 +414,2 @@\n-        findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"ACT\"), 0);\n-        \/\/ \"EST\" is disabled because its behavior depends on the mapping property. (6466476).\n-        \/\/findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"EST\"), 2);\n-        findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"HST\"), 0);\n-        findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"PST\"), 2);\n+        findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"Australia\/Darwin\"), 0);\n+        findBoundariesStepwise(1997, ONE_DAY, TimeZone.getTimeZone(\"Pacific\/Honolulu\"), 0);\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneBoundaryTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-tzdata2024b\n+tzdata2025a\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneData\/VERSION","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,3 +0,0 @@\n-Link\tAsia\/Riyadh87\tMideast\/Riyadh87\n-Link\tAsia\/Riyadh88\tMideast\/Riyadh88\n-Link\tAsia\/Riyadh89\tMideast\/Riyadh89\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneData\/aliases.txt","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * 4966229 6433179 6851214 8007520 8008577 8174269\n+ * 4966229 6433179 6851214 8007520 8008577 8174269 8347841\n@@ -45,2 +45,2 @@\n-        TimeZone z1 = TimeZone.getTimeZone(\"PST\");\n-        TimeZone z2 = TimeZone.getTimeZone(\"PST\");\n+        TimeZone z1 = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n+        TimeZone z2 = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -84,1 +84,1 @@\n-        sub4084933(TimeZone.getTimeZone(\"PST\"));\n+        sub4084933(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -125,1 +125,1 @@\n-        String[] ZONES = { \"GMT\", \"MET\", \"IST\" };\n+        String[] ZONES = { \"GMT\", \"MET\", \"Asia\/Kolkata\" };\n@@ -175,1 +175,1 @@\n-        sub4109314(TimeZone.getTimeZone(\"PST\"));\n+        sub4109314(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -306,1 +306,1 @@\n-        sub4126678(TimeZone.getTimeZone(\"PST\"));\n+        sub4126678(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -758,1 +758,1 @@\n-        sub4173604(TimeZone.getTimeZone(\"PST\"));\n+        sub4173604(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n@@ -918,1 +918,1 @@\n-        sub4208960(TimeZone.getTimeZone(\"PST\"));\n+        sub4208960(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/java\/util\/TimeZone\/TimeZoneRegression.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4096952\n+ * @bug 4096952 8347841\n@@ -41,1 +41,1 @@\n-        String[] ZONES = { \"GMT\", \"MET\", \"IST\" };\n+        String[] ZONES = { \"GMT\", \"MET\", \"Asia\/Kolkata\" };\n","filename":"test\/jdk\/java\/util\/TimeZone\/bug4096952.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerFactory;\n-import javax.management.NotCompliantMBeanException;\n-import javax.management.ObjectName;\n-\n-\/*\n- * @test\n- * @bug 8010285\n- * @summary Test fallback for private MBean interfaces.\n- *          It needs to be a separate class because the \"jdk.jmx.mbeans.allowNonPublic\"\n- *          system property must be set before c.s.j.m.MBeanAnalyzer has been loaded.\n- * @author Jaroslav Bachorik\n- *\n- * @run clean MBeanFallbackTest\n- * @run build MBeanFallbackTest\n- * @run main\/othervm -Djdk.jmx.mbeans.allowNonPublic=true MBeanFallbackTest\n- *\/\n-public class MBeanFallbackTest {\n-    private static interface PrivateMBean {\n-        public int[] getInts();\n-    }\n-\n-    public static class Private implements PrivateMBean {\n-        public int[] getInts() {\n-            return new int[]{1,2,3};\n-        }\n-    }\n-\n-    private static int failures = 0;\n-\n-    public static void main(String[] args) throws Exception {\n-        testPrivate(PrivateMBean.class, new Private());\n-\n-        if (failures == 0)\n-            System.out.println(\"Test passed\");\n-        else\n-            throw new Exception(\"TEST FAILURES: \" + failures);\n-    }\n-\n-    private static void fail(String msg) {\n-        failures++;\n-        System.out.println(\"FAIL: \" + msg);\n-    }\n-\n-    private static void success(String msg) {\n-        System.out.println(\"OK: \" + msg);\n-    }\n-\n-    private static void testPrivate(Class<?> iface, Object bean) throws Exception {\n-        try {\n-            System.out.println(\"Registering a private MBean \" +\n-                                iface.getName() + \" ...\");\n-\n-            MBeanServer mbs = MBeanServerFactory.newMBeanServer();\n-            ObjectName on = new ObjectName(\"test:type=Compliant\");\n-\n-            mbs.registerMBean(bean, on);\n-            success(\"Registered a private MBean - \" + iface.getName());\n-        } catch (Exception e) {\n-            Throwable t = e;\n-            while (t != null && !(t instanceof NotCompliantMBeanException)) {\n-                t = t.getCause();\n-            }\n-            if (t != null) {\n-                fail(\"MBean not registered\");\n-            } else {\n-                throw e;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/MBeanServer\/MBeanFallbackTest.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8010285\n- * @summary Test for the private MXBean interface fallback.\n- *          It needs to be a separate class because the \"jdk.jmx.mbeans.allowNonPublic\"\n- *          system property must be set before c.s.j.m.MBeanAnalyzer has been loaded.\n- * @author Jaroslav Bachorik\n- *\n- * @run clean MXBeanFallbackTest\n- * @run build MXBeanFallbackTest\n- * @run main\/othervm -Djdk.jmx.mbeans.allowNonPublic=true MXBeanFallbackTest\n- *\/\n-\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerFactory;\n-import javax.management.NotCompliantMBeanException;\n-import javax.management.ObjectName;\n-\n-public class MXBeanFallbackTest {\n-    public static void main(String[] args) throws Exception {\n-        testPrivateMXBean(\"Private\", new Private());\n-\n-        if (failures == 0)\n-            System.out.println(\"Test passed\");\n-        else\n-            throw new Exception(\"TEST FAILURES: \" + failures);\n-    }\n-\n-    private static int failures = 0;\n-\n-    private static interface PrivateMXBean {\n-        public int[] getInts();\n-    }\n-\n-    public static class Private implements PrivateMXBean {\n-        public int[] getInts() {\n-            return new int[]{1,2,3};\n-        }\n-    }\n-\n-    private static void testPrivateMXBean(String type, Object bean) throws Exception {\n-        System.out.println(type + \" MXBean test...\");\n-        MBeanServer mbs = MBeanServerFactory.newMBeanServer();\n-        ObjectName on = new ObjectName(\"test:type=\" + type);\n-        try {\n-            mbs.registerMBean(bean, on);\n-            success(\"Private MXBean registered\");\n-        } catch (NotCompliantMBeanException e) {\n-            failure(\"Failed to register the private MXBean - \" +\n-                     bean.getClass().getInterfaces()[0].getName());\n-        }\n-    }\n-\n-    private static void success(String what) {\n-        System.out.println(\"OK: \" + what);\n-    }\n-\n-    private static void failure(String what) {\n-        System.out.println(\"FAILED: \" + what);\n-        failures++;\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/mxbean\/MXBeanFallbackTest.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @run main\/othervm -Djmx.mxbean.multiname=true SameObjectTwoNamesTest\n@@ -44,2 +43,0 @@\n-        boolean expectException =\n-                (System.getProperty(\"jmx.mxbean.multiname\") == null);\n@@ -56,5 +53,1 @@\n-            if (expectException) {\n-                throw new Exception(\"TEST FAILED: \" +\n-                        \"InstanceAlreadyExistsException was not thrown\");\n-            } else\n-                System.out.println(\"Correctly got no exception with compat property\");\n+            throw new Exception(\"TEST FAILED: InstanceAlreadyExistsException was not thrown\");\n@@ -62,7 +55,2 @@\n-            if (expectException) {\n-                System.out.println(\"Got expected InstanceAlreadyExistsException:\");\n-                e.printStackTrace(System.out);\n-            } else {\n-                throw new Exception(\n-                        \"TEST FAILED: Got exception even though compat property set\", e);\n-            }\n+            System.out.println(\"Got expected InstanceAlreadyExistsException:\");\n+            e.printStackTrace(System.out);\n","filename":"test\/jdk\/javax\/management\/mxbean\/SameObjectTwoNamesTest.java","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,2 +60,0 @@\n-    private static final String COMPAT_PROP_NAME = \"jmx.tabular.data.hash.map\";\n-\n@@ -132,38 +130,0 @@\n-        \/\/ Now test the undocumented property that causes HashMap to be used\n-        \/\/ instead of LinkedHashMap, in case serializing to a 1.3 client.\n-        \/\/ We serialize and deserialize in case the implementation handles\n-        \/\/ this at serialization time.  Then we look at object fields; that's\n-        \/\/ not guaranteed to work but at worst it will fail spuriously and\n-        \/\/ we'll have to update the test.\n-        System.out.println(\"Testing compatible behaviour\");\n-        System.setProperty(COMPAT_PROP_NAME, \"true\");\n-        td = makeTable();\n-        System.out.println(td);\n-        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n-        ObjectOutputStream oout = new ObjectOutputStream(bout);\n-        oout.writeObject(td);\n-        oout.close();\n-        byte[] bytes = bout.toByteArray();\n-        ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n-        ObjectInputStream oin = new ObjectInputStream(bin);\n-        td = (TabularData) oin.readObject();\n-        boolean found = false;\n-        for (Field f : td.getClass().getDeclaredFields()) {\n-            if (Modifier.isStatic(f.getModifiers()))\n-                continue;\n-            f.setAccessible(true);\n-            Object x = f.get(td);\n-            if (x != null && x.getClass() == HashMap.class) {\n-                found = true;\n-                System.out.println(\n-                        x.getClass().getName() + \" TabularDataSupport.\" +\n-                        f.getName() + \" = \" + x);\n-                break;\n-            }\n-        }\n-        if (!found) {\n-            fail(\"TabularDataSupport does not contain HashMap though \" +\n-                    COMPAT_PROP_NAME + \"=true\");\n-        }\n-        System.clearProperty(COMPAT_PROP_NAME);\n-\n","filename":"test\/jdk\/javax\/management\/openmbean\/TabularDataOrderTest.java","additions":1,"deletions":41,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.management.JMX;\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerFactory;\n-import javax.management.NotCompliantMBeanException;\n-import javax.management.ObjectName;\n-\n-\/*\n- * @test\n- * @bug 8010285\n- * @summary Tests the fallback for creating JMX proxies for private interfaces\n- *          It needs to be a separate class because the \"jdk.jmx.mbeans.allowNonPublic\"\n- *          system property must be set before c.s.j.m.MBeanAnalyzer has been loaded.\n- * @author Jaroslav Bachorik\n- *\n- * @run clean JMXProxyFallbackTest\n- * @run build JMXProxyFallbackTest\n- * @run main\/othervm -Djdk.jmx.mbeans.allowNonPublic=true JMXProxyFallbackTest\n- *\/\n-public class JMXProxyFallbackTest {\n-    private static interface PrivateMBean {\n-        public int[] getInts();\n-    }\n-\n-    private static interface PrivateMXBean {\n-        public int[] getInts();\n-    }\n-\n-    public static class Private implements PrivateMXBean, PrivateMBean {\n-        public int[] getInts() {\n-            return new int[]{1,2,3};\n-        }\n-    }\n-\n-    private static int failures = 0;\n-\n-    public static void main(String[] args) throws Exception {\n-        testPrivate(PrivateMBean.class);\n-        testPrivate(PrivateMXBean.class);\n-\n-        if (failures == 0)\n-            System.out.println(\"Test passed\");\n-        else\n-            throw new Exception(\"TEST FAILURES: \" + failures);\n-    }\n-\n-    private static void fail(String msg) {\n-        failures++;\n-        System.out.println(\"FAIL: \" + msg);\n-    }\n-\n-    private static void success(String msg) {\n-        System.out.println(\"OK: \" + msg);\n-    }\n-\n-    private static void testPrivate(Class<?> iface) throws Exception {\n-        try {\n-            System.out.println(\"Creating a proxy for private M(X)Bean \" +\n-                                iface.getName() + \" ...\");\n-\n-            MBeanServer mbs = MBeanServerFactory.newMBeanServer();\n-            ObjectName on = new ObjectName(\"test:type=Proxy\");\n-\n-            JMX.newMBeanProxy(mbs, on, iface);\n-            success(\"Created a proxy for private M(X)Bean - \" + iface.getName());\n-        } catch (Exception e) {\n-            Throwable t = e;\n-            while (t != null && !(t instanceof NotCompliantMBeanException)) {\n-                t = t.getCause();\n-            }\n-            if (t != null) {\n-                fail(\"Proxy not created\");\n-            } else {\n-                throw e;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/management\/proxy\/JMXProxyFallbackTest.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6174229\n+ * @bug 6174229 8345045\n@@ -55,2 +55,1 @@\n-        System.out.println(\n-           \"Verify the property name specifying the server notification buffer size.\");\n+        System.out.println(\"Verify the property name specifying the server notification buffer size.\");\n@@ -62,1 +61,1 @@\n-        System.out.println(\"Test the new property name.\");\n+        System.out.println(\"Test the property name.\");\n@@ -66,5 +65,2 @@\n-        System.out.println(\"Test the old property name.\");\n-        env.remove(\"jmx.remote.x.notification.buffer.size\");\n-        env.put(\"jmx.remote.x.buffer.size\", String.valueOf(bufferSize));\n-        test(env);\n-\n+        \/\/ Recognition of the old, incorrect property \"jmx.remote.x.buffer.size\" has been dropped.\n+        \/\/ Do not test old name is recognised, but do test it does not interfere with correct name:\n@@ -76,8 +72,2 @@\n-        System.out.println(\"Test the old property name on system.\");\n-        System.setProperty(\"jmx.remote.x.buffer.size\", String.valueOf(bufferSize));\n-        test(null);\n-\n-        System.out.println(\n-             \"Test that the new property name overwrite the old one on system.\");\n-        System.setProperty(\"jmx.remote.x.notification.buffer.size\",\n-                           String.valueOf(bufferSize));\n+        System.out.println(\"Test that the new property name overwrite the old one on system.\");\n+        System.setProperty(\"jmx.remote.x.notification.buffer.size\", String.valueOf(bufferSize));\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/notif\/NotifBufferSizePropertyNameTest.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,5 +24,6 @@\n- \/*\n-* @test\n-* @bug 8152419\n-* @summary To Verify JColorChooser tab selection\n-* @run main\/manual Test8152419\n+\/*\n+ * @test\n+ * @bug 8152419\n+ * @library \/test\/lib\n+ * @summary To Verify JColorChooser tab selection\n+ * @run main\/manual Test8152419\n@@ -46,0 +47,2 @@\n+import jtreg.SkippedException;\n+\n@@ -49,0 +52,6 @@\n+        \/\/ ColorChooser UI design is different for GTK L&F.\n+        \/\/ There are no tabs available for GTK L&F, skip the testing.\n+        if (UIManager.getLookAndFeel().getName().contains(\"GTK\")) {\n+            throw new SkippedException(\"Test not applicable for GTK L&F\");\n+        }\n+\n","filename":"test\/jdk\/javax\/swing\/JColorChooser\/Test8152419.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- *          java.base\/java.lang.ref:open\n@@ -136,1 +135,0 @@\n-     *   java.lang.ref.Reference.waitForReferenceProcessing\n@@ -140,1 +138,0 @@\n-        private static final Method waitForReferenceProcessingMethod;\n@@ -152,4 +149,0 @@\n-                waitForReferenceProcessingMethod =\n-                    Reference.class.getDeclaredMethod(\"waitForReferenceProcessing\");\n-                waitForReferenceProcessingMethod.setAccessible(true);\n-\n@@ -183,19 +176,0 @@\n-        static boolean Reference_waitForReferenceProcessing() {\n-            try {\n-                return (boolean) waitForReferenceProcessingMethod.invoke(null);\n-            } catch (InvocationTargetException e) {\n-                Throwable te = e.getTargetException();\n-                if (te instanceof InterruptedException) {\n-                    return true;\n-                } else if (te instanceof RuntimeException) {\n-                    throw (RuntimeException) te;\n-                } else if (te instanceof Error) {\n-                    throw (Error) te;\n-                } else {\n-                    throw new UndeclaredThrowableException(te);\n-                }\n-            } catch (IllegalAccessException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/provider\/FileInputStreamPool\/FileInputStreamPoolTest.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8049237 8242151\n+ * @bug 8049237 8242151 8347841\n@@ -117,1 +117,1 @@\n-        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"PST\"));\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n","filename":"test\/jdk\/sun\/security\/x509\/X509CertImpl\/V3Certificate.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4640234 4946057 4938151 4873691 5023181\n+ * @bug 4640234 4946057 4938151 4873691 5023181 8347841\n@@ -45,0 +45,2 @@\n+import java.time.ZoneId;\n+import java.util.Arrays;\n@@ -52,0 +54,1 @@\n+import java.util.function.Predicate;\n@@ -86,1 +89,3 @@\n-            String[] timezones = TimeZone.getAvailableIDs();\n+            String[] timezones = Arrays.stream(TimeZone.getAvailableIDs())\n+                    .filter(Predicate.not(ZoneId.SHORT_IDS::containsKey))\n+                    .toArray(String[]::new);\n","filename":"test\/jdk\/sun\/util\/resources\/TimeZone\/Bug4640234.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8134384 8234347 8236548\n+ * @bug 8134384 8234347 8236548 8347841\n@@ -41,0 +41,3 @@\n+                if (ZoneId.SHORT_IDS.containsKey(tz)) {\n+                    continue;\n+                }\n","filename":"test\/jdk\/sun\/util\/resources\/cldr\/Bug8134384.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8202764\n+ * @bug 8202764 8347841\n@@ -52,0 +52,1 @@\n+            .filter(zone -> !ZoneId.SHORT_IDS.containsKey(zone[0]))\n","filename":"test\/jdk\/sun\/util\/resources\/cldr\/Bug8202764.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8346751\n+ * @summary Verify type annotations inside constant expression field initializers\n+            are handled correctly\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.compiler\/com.sun.tools.javac.code\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main TypeAnnotationsInConstantInit\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import toolbox.JavacTask;\n+import toolbox.ToolBox;\n+\n+public class TypeAnnotationsInConstantInit {\n+\n+    public static void main(String... args) throws Exception {\n+        new TypeAnnotationsInConstantInit().run();\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    void run() throws Exception {\n+        typeAnnotationInConstantExpressionFieldInit(Paths.get(\".\"));\n+    }\n+\n+    void typeAnnotationInConstantExpressionFieldInit(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          import java.lang.annotation.*;\n+\n+                          @SuppressWarnings(Decl.VALUE)\n+                          public class Decl {\n+                              public static final @Nullable String VALUE = (@Nullable String) \"\";\n+                          }\n+\n+                          @Retention(RetentionPolicy.RUNTIME)\n+                          @Target({ ElementType.TYPE_USE })\n+                          @interface Nullable {}\n+                          \"\"\");\n+        Files.createDirectories(classes);\n+        new JavacTask(tb)\n+                .options(\"-d\", classes.toString())\n+                .files(tb.findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnotationsInConstantInit.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8348038\n+ * @summary Verify use of \"-XDignore.symbol.file=true\" doesn't cause assertion failure\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ *\/\n+\n+import java.io.File;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+public class JavadocIgnoreSymbolFile {\n+\n+    public static void main(String[] args) {\n+        String[] javadocArgs = new String[] {\n+            \"-XDignore.symbol.file=true\"\n+        };\n+        StringWriter buf = new StringWriter();\n+        try (PrintWriter pw = new PrintWriter(buf)) {\n+            jdk.javadoc.internal.tool.Main.execute(javadocArgs, pw);\n+        }\n+        String expected = \"error: No modules, packages or classes specified. 1 error\";\n+        String actual = buf.toString().trim().replaceAll(\"\\\\s+\", \" \");\n+        if (!actual.equals(expected))\n+            throw new AssertionError(\"unexpected output:\\n\" + actual);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/options\/JavadocIgnoreSymbolFile.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347474\n+ * @summary Verify -XDrawDiagnostics flag is picked up by JavacMessages singleton\n+ * @library \/tools\/lib\n+ * @modules\n+ *  jdk.compiler\/com.sun.tools.javac.api\n+ *  jdk.compiler\/com.sun.tools.javac.file\n+ *  jdk.compiler\/com.sun.tools.javac.main\n+ *  jdk.compiler\/com.sun.tools.javac.util:+open\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import com.sun.tools.javac.file.JavacFileManager;\n+import com.sun.tools.javac.main.Main;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.JavacMessages;\n+import com.sun.tools.javac.util.RawDiagnosticFormatter;\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class OptionsOrderingTest extends TestRunner {\n+\n+    protected final ToolBox tb;\n+\n+    public OptionsOrderingTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void testJavacMessagesDiagFormatter() throws Exception {\n+\n+        \/\/ Write source file\n+        Path dir = Paths.get(getClass().getSimpleName());\n+        tb.writeJavaFiles(dir, \"class Test { }\");\n+\n+        \/\/ Run the compiler where we supply the Context\n+        Context context = new Context();\n+        JavacFileManager.preRegister(context);\n+        Main compiler = new Main(\"javac\", new PrintWriter(Writer.nullWriter()));\n+        String[] args = new String[] {\n+          \"-XDrawDiagnostics\",\n+          tb.findJavaFiles(dir)[0].toString()\n+        };\n+        Main.Result result = compiler.compile(args, context);\n+\n+        \/\/ Verify field JavacMessages.diagFormatter is a RawDiagnosticFormatter\n+        JavacMessages messages = JavacMessages.instance(context);\n+        Field diagFormatterField = messages.getClass().getDeclaredField(\"diagFormatter\");\n+        diagFormatterField.setAccessible(true);\n+        Class<?> diagFormatterClass = diagFormatterField.get(messages).getClass();\n+        if (!Objects.equals(diagFormatterClass, RawDiagnosticFormatter.class)) {\n+            throw new AssertionError(String.format(\n+              \"diagFormatter: expected %s but found %s\",\n+              RawDiagnosticFormatter.class, diagFormatterClass));\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new OptionsOrderingTest().testJavacMessagesDiagFormatter();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/options\/OptionsOrderingTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -641,1 +641,1 @@\n-                return (T) exc;\n+                return expected.cast(exc);\n","filename":"test\/lib\/jdk\/test\/lib\/Asserts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -432,1 +432,1 @@\n-    \/**\n+    \/*\n@@ -602,0 +602,1 @@\n+    @SuppressWarnings(\"restricted\")\n","filename":"test\/lib\/jdk\/test\/lib\/apps\/LingeredApp.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-                manager = (ArtifactManager) Class.forName(managerName).newInstance();\n+                manager = (ArtifactManager) Class.forName(managerName).getDeclaredConstructor().newInstance();\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/ArtifactResolver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import java.io.Serial;\n+\n@@ -30,0 +32,2 @@\n+    @Serial\n+    private static final long serialVersionUID = 8341884506180926911L;\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/ArtifactResolverException.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-            Class jibServiceFactory = classLoader.loadClass(JIB_SERVICE_FACTORY);\n+            Class<?> jibServiceFactory = classLoader.loadClass(JIB_SERVICE_FACTORY);\n","filename":"test\/lib\/jdk\/test\/lib\/artifacts\/JibArtifactManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.io.Serial;\n@@ -48,0 +49,3 @@\n+        @Serial\n+        private static final long serialVersionUID = -8108935949624559549L;\n+\n","filename":"test\/lib\/jdk\/test\/lib\/classloader\/ClassUnloadCommon.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    public synchronized Class loadClass(String name) throws ClassNotFoundException {\n+    public synchronized Class<?> loadClass(String name) throws ClassNotFoundException {\n@@ -45,1 +45,1 @@\n-    public synchronized Class loadClass(String name, boolean resolve)\n+    public synchronized Class<?> loadClass(String name, boolean resolve)\n@@ -47,1 +47,1 @@\n-        Class c = findLoadedClass(name);\n+        Class<?> c = findLoadedClass(name);\n@@ -132,1 +132,1 @@\n-        return (byte[]) bytecode.clone();\n+        return bytecode.clone();\n","filename":"test\/lib\/jdk\/test\/lib\/classloader\/GeneratingClassLoader.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -205,1 +205,1 @@\n-        Class<?>[] classes = new Class[numClasses];\n+        Class<?>[] classes = new Class<?>[numClasses];\n","filename":"test\/lib\/jdk\/test\/lib\/classloader\/GeneratingCompilingClassLoader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,1 @@\n-    @SuppressWarnings(\"rawtypes\")\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n","filename":"test\/lib\/jdk\/test\/lib\/format\/ArrayDiff.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,6 +38,0 @@\n-\n-\/**\n- *\n- * @author      Bill Foote\n- *\/\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaHeapObject.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,5 +33,0 @@\n-\/**\n- *\n- * @author      Bill Foote\n- *\/\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaStatic.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,6 +33,0 @@\n-\/**\n- *\n- * @author      Bill Foote\n- *\/\n-\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaThing.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,6 +35,0 @@\n-\/**\n- *\n- * @author      Bill Foote\n- *\/\n-\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Root.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.io.IOException;\n@@ -39,5 +40,0 @@\n-\/**\n- *\n- * @author      Bill Foote\n- *\/\n-\n@@ -640,1 +636,1 @@\n-    public void close() throws Exception {\n+    public void close() throws IOException {\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Snapshot.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,6 +33,0 @@\n-\/**\n- *\n- * @author      Bill Foote\n- *\/\n-\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/StackFrame.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,6 +33,0 @@\n-\/**\n- *\n- * @author      Bill Foote\n- *\/\n-\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/StackTrace.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-    public void close() throws Exception {\n+    public void close() throws IOException {\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/FileReadBuffer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,1 @@\n-    public void close() throws Exception {\n+    public void close() throws IOException {\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/MappedReadBuffer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+    public void  close() throws IOException;\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/ReadBuffer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -139,0 +140,1 @@\n+    @SuppressWarnings(\"try\")\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/Reader.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -236,1 +236,1 @@\n-        assertEquals(eventThread.getJavaThreadId(), thread.getId(), \"Wrong thread id\");\n+        assertEquals(eventThread.getJavaThreadId(), thread.threadId(), \"Wrong thread id\");\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/Events.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import java.io.Serial;\n+\n@@ -52,0 +54,1 @@\n+    @SuppressWarnings(\"restricted\")\n@@ -73,0 +76,3 @@\n+        @Serial\n+        private static final long serialVersionUID = -4069390356498980839L;\n+\n","filename":"test\/lib\/jdk\/test\/lib\/jvmti\/DebugeeClass.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-            ThreadInfo ti = tmx.getThreadInfo(thread.getId());\n+            ThreadInfo ti = tmx.getThreadInfo(thread.threadId());\n@@ -63,1 +63,1 @@\n-            ThreadInfo ti = tmx.getThreadInfo(thread.getId());\n+            ThreadInfo ti = tmx.getThreadInfo(thread.threadId());\n","filename":"test\/lib\/jdk\/test\/lib\/management\/ThreadMXBeanTool.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,1 @@\n+    @SuppressWarnings(\"try\")\n","filename":"test\/lib\/jdk\/test\/lib\/net\/IPSupport.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,1 +163,0 @@\n-                    scanner.close();\n","filename":"test\/lib\/jdk\/test\/lib\/os\/linux\/HugePageConfiguration.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -984,1 +984,1 @@\n-        Method mainMethod = c.getMethod(\"main\", new Class[] { String[].class });\n+        Method mainMethod = c.getMethod(\"main\", new Class<?>[] { String[].class });\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,3 @@\n-            throw (X) ex;\n+            @SuppressWarnings(\"unchecked\")\n+            var x = (X) ex;\n+            throw x;\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadPinner.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,3 @@\n-            throw (X) ex;\n+            @SuppressWarnings(\"unchecked\")\n+            var x = (X) ex;\n+            throw x;\n","filename":"test\/lib\/jdk\/test\/lib\/thread\/VThreadRunner.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -269,1 +269,1 @@\n-                    Set mountPoints = new HashSet();\n+                    Set<String> mountPoints = new HashSet<>();\n@@ -302,2 +302,2 @@\n-        final AtomicReference throwableReference =\n-            new AtomicReference<Throwable>();\n+        final AtomicReference<Throwable> throwableReference =\n+            new AtomicReference<>();\n@@ -318,1 +318,1 @@\n-        Throwable uncaughtException = (Throwable)throwableReference.get();\n+        Throwable uncaughtException = throwableReference.get();\n@@ -368,0 +368,1 @@\n+    @SuppressWarnings(\"restricted\")\n","filename":"test\/lib\/jdk\/test\/lib\/util\/FileUtils.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,7 @@\n+# Unset these variables to avoid having the current environment interfere with\n+# the idea generation script. SPEC needs to remain as idea.sh will call back to\n+# make and that call needs to have SPEC defined.\n+unexport HAS_SPEC\n+unexport CONF\n+unexport CONF_NAME\n+\n@@ -36,3 +43,3 @@\n-\tcd $(WORKSPACE_ROOT) && HAS_SPEC= MAKEFLAGS= MFLAGS= $(BASH) $(TOPDIR)\/bin\/idea.sh -o $(IDEA_OUTPUT_DIR)\/idea1\n-\tcd $(WORKSPACE_ROOT) && HAS_SPEC= MAKEFLAGS= MFLAGS= $(BASH) $(TOPDIR)\/bin\/idea.sh -o $(IDEA_OUTPUT_DIR)\/idea2 java.base\n-\tcd $(WORKSPACE_ROOT) && HAS_SPEC= MAKEFLAGS= MFLAGS= $(BASH) $(TOPDIR)\/bin\/idea.sh -o $(IDEA_OUTPUT_DIR)\/idea3 java.base jdk.compiler\n+\tcd $(WORKSPACE_ROOT) && MAKEFLAGS= MFLAGS= $(BASH) $(TOPDIR)\/bin\/idea.sh -o $(IDEA_OUTPUT_DIR)\/idea1\n+\tcd $(WORKSPACE_ROOT) && MAKEFLAGS= MFLAGS= $(BASH) $(TOPDIR)\/bin\/idea.sh -o $(IDEA_OUTPUT_DIR)\/idea2 java.base\n+\tcd $(WORKSPACE_ROOT) && MAKEFLAGS= MFLAGS= $(BASH) $(TOPDIR)\/bin\/idea.sh -o $(IDEA_OUTPUT_DIR)\/idea3 java.base jdk.compiler\n","filename":"test\/make\/TestIdea.gmk","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Scope;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 3, time = 300, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 1, jvmArgsAppend = {\"-XX:+UseParallelGC\", \"-Xmx1g\", \"-Xms1g\"})\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class FluidSBBench {\n+    static final String PREFIX = \"a\";\n+    String foo = \"aaaaa aaaaa aaaaa aaaaa aaaaa\";\n+\n+    @Benchmark\n+    public String fluid() {\n+        return new StringBuilder().append(PREFIX).append(foo).toString();\n+    }\n+\n+    @Benchmark\n+    public String nonFluid() {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(PREFIX);\n+        sb.append(foo);\n+        return sb.toString();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/FluidSBBench.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}