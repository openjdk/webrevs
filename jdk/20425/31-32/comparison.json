{"files":[{"patch":"@@ -163,1 +163,1 @@\n-  if (!MemTracker::walk_virtual_memory(&virtual_memory_walker)) {\n+  if (!VirtualMemoryTracker::Instance::walk_virtual_memory(&virtual_memory_walker)) {\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-    return MemTracker::walk_virtual_memory(this);\n+    return VirtualMemoryTracker::Instance::walk_virtual_memory(this);\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"nmt\/regionsTree.inline.hpp\"\n@@ -440,1 +441,1 @@\n-      if (committed_rgn.size() == reserved_rgn->size() && committed_rgn.call_stack()->equals(*stack)) {\n+      if (committed_rgn.equals(*reserved_rgn)) {\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,8 +54,0 @@\n-  static void snapshot_thread_stacks() {\n-    VirtualMemoryTracker::Instance::snapshot_thread_stacks();\n-  }\n-\n-  static bool walk_virtual_memory(VirtualMemoryWalker* walker) {\n-    return VirtualMemoryTracker::Instance::walk_virtual_memory(walker);\n-  }\n-\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-      if (!f(head))\n+      if (!f(head)) {\n@@ -389,0 +389,1 @@\n+      }\n@@ -415,1 +416,1 @@\n-        if (!f(head))\n+        if (!f(head)) {\n@@ -417,0 +418,1 @@\n+        }\n","filename":"src\/hotspot\/share\/nmt\/nmtTreap.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  MemTracker::snapshot_thread_stacks();\n+  VirtualMemoryTracker::Instance::snapshot_thread_stacks();\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,13 +26,0 @@\n-ReservedMemoryRegion RegionsTree::find_reserved_region(address addr) {\n-    ReservedMemoryRegion rmr;\n-    auto contain_region = [&](ReservedMemoryRegion& region_in_tree) {\n-      if (region_in_tree.contain_address(addr)) {\n-        rmr = region_in_tree;\n-        return false;\n-      }\n-      return true;\n-    };\n-    visit_reserved_regions(contain_region);\n-    return rmr;\n-}\n-\n@@ -46,0 +33,25 @@\n+\n+#ifdef ASSERT\n+void RegionsTree::NodeHelper::print_on(outputStream* st) {\n+  auto st_str = [&](VMATree::StateType s){\n+    return s == VMATree::StateType::Released ? \"Rl\" :\n+           s == VMATree::StateType::Reserved ? \"Rv\" : \"Cm\";\n+  };\n+  st->print_cr(\"pos: \" INTPTR_FORMAT \" \"\n+                \"%s, %s <|> %s, %s\",\n+                p2i((address)position()),\n+                st_str(in_state()),\n+                NMTUtil::tag_to_name(in_tag()),\n+                st_str(out_state()),\n+                NMTUtil::tag_to_name(out_tag())\n+                );\n+}\n+\n+void RegionsTree::print_on(outputStream* st) {\n+  visit_in_order([&](Node* node) {\n+    NodeHelper curr(node);\n+    curr.print_on(st);\n+    return true;\n+  });\n+}\n+#endif\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/nmt\/regionsTree.cpp","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"nmt\/virtualMemoryTracker.hpp\"\n@@ -32,0 +31,3 @@\n+\n+class ReservedMemoryRegion;\n+class CommittedMemoryRegion;\n@@ -56,10 +58,13 @@\n-      inline VMATree::position position() { return _node->key(); }\n-      inline bool is_committed_begin() { return ((uint8_t)out_state() & (uint8_t)VMATree::StateType::Committed) >= 2; }\n-      inline bool is_released_begin() { return out_state() == VMATree::StateType::Released; }\n-      inline bool is_reserved_begin() { return ((uint8_t)out_state() & (uint8_t)VMATree::StateType::Reserved) == 1; }\n-      inline VMATree::StateType in_state() { return _node->val().in.type(); }\n-      inline VMATree::StateType out_state() { return _node->val().out.type(); }\n-      inline size_t distance_from(NodeHelper& other) { return position() - other.position(); }\n-      inline NativeCallStackStorage::StackIndex out_stack_index() { return _node->val().out.stack(); }\n-      inline MemTag in_tag() { return _node->val().in.mem_tag(); }\n-      inline MemTag out_tag() { return _node->val().out.mem_tag(); }\n+      inline VMATree::position position() const { return _node->key(); }\n+      inline bool is_committed_begin() const { return ((uint8_t)out_state() & (uint8_t)VMATree::StateType::Committed) >= 2; }\n+      inline bool is_released_begin() const { return out_state() == VMATree::StateType::Released; }\n+      inline bool is_reserved_begin() const { return ((uint8_t)out_state() & (uint8_t)VMATree::StateType::Reserved) == 1; }\n+      inline VMATree::StateType in_state() const { return _node->val().in.type(); }\n+      inline VMATree::StateType out_state() const { return _node->val().out.type(); }\n+      inline size_t distance_from(const NodeHelper& other) const {\n+        assert (position() > other.position(), \"negative distance\");\n+        return position() - other.position();\n+      }\n+      inline NativeCallStackStorage::StackIndex out_stack_index() const { return _node->val().out.stack(); }\n+      inline MemTag in_tag() const { return _node->val().in.mem_tag(); }\n+      inline MemTag out_tag() const { return _node->val().out.mem_tag(); }\n@@ -68,14 +73,1 @@\n-      inline void print_on(outputStream* st) {\n-        auto st_str = [&](int s){\n-          return s == (int)VMATree::StateType::Released ? \"Rl\" :\n-                 s ==  (int)VMATree::StateType::Reserved ? \"Rv\" : \"Cm\";\n-        };\n-        st->print_cr(\"pos: \" INTPTR_FORMAT \" \"\n-                     \"%s, %s <|> %s, %s\",\n-                     p2i((address)position()),\n-                     st_str((int)in_state()),\n-                     NMTUtil::tag_to_name(in_tag()),\n-                     st_str((int)out_state()),\n-                     NMTUtil::tag_to_name(out_tag())\n-                     );\n-      }\n+      DEBUG_ONLY(void print_on(outputStream* st);)\n@@ -84,7 +76,1 @@\n-  void print_on(outputStream* st) {\n-    visit_in_order([&](Node* node) {\n-      NodeHelper curr(node);\n-      curr.print_on(st);\n-      return true;\n-    });\n-  }\n+  DEBUG_ONLY(void print_on(outputStream* st);)\n@@ -93,17 +79,1 @@\n-  void visit_committed_regions(const ReservedMemoryRegion& rgn, F func) {\n-    position start = (position)rgn.base();\n-    size_t end = (size_t)rgn.end() + 1;\n-    size_t comm_size = 0;\n-\n-    NodeHelper prev;\n-    visit_range_in_order(start, end, [&](Node* node) {\n-      NodeHelper curr(node);\n-      if (prev.is_valid() && prev.is_committed_begin()) {\n-        CommittedMemoryRegion cmr((address)prev.position(), curr.distance_from(prev), stack(curr));\n-        if (!func(cmr))\n-          return false;\n-      }\n-      prev = curr;\n-      return true;\n-    });\n-  }\n+  void visit_committed_regions(const ReservedMemoryRegion& rgn, F func);\n@@ -112,34 +82,1 @@\n-  void visit_reserved_regions(F func) {\n-    NodeHelper begin_node, prev;\n-    size_t rgn_size = 0;\n-\n-    visit_in_order([&](Node* node) {\n-      NodeHelper curr(node);\n-      if (prev.is_valid()) {\n-        rgn_size += curr.distance_from(prev);\n-      } else {\n-        begin_node = curr;\n-        rgn_size = 0;\n-      }\n-      prev = curr;\n-      if (curr.is_released_begin() || begin_node.out_tag() != curr.out_tag()) {\n-        auto st = stack(curr);\n-        if (rgn_size == 0) {\n-          prev.clear_node();\n-          return true;\n-        }\n-        ReservedMemoryRegion rmr((address)begin_node.position(), rgn_size, st, begin_node.out_tag());\n-        if (!func(rmr))\n-          return false;\n-        rgn_size = 0;\n-        if (!curr.is_released_begin())\n-          begin_node = curr;\n-        else {\n-          begin_node.clear_node();\n-          prev.clear_node();\n-        }\n-      }\n-\n-      return true;\n-    });\n-  }\n+  void visit_reserved_regions(F func);\n","filename":"src\/hotspot\/share\/nmt\/regionsTree.hpp","additions":20,"deletions":83,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+#ifndef SHARE_NMT_REGIONSTREE_INLINE_HPP\n+#define SHARE_NMT_REGIONSTREE_INLINE_HPP\n+\n+#include \"nmt\/regionsTree.hpp\"\n+#include \"nmt\/virtualMemoryTracker.hpp\"\n+\n+template<typename F>\n+void RegionsTree::visit_committed_regions(const ReservedMemoryRegion& rgn, F func) {\n+  position start = (position)rgn.base();\n+  size_t end = (size_t)rgn.end() + 1;\n+  size_t comm_size = 0;\n+\n+  NodeHelper prev;\n+  visit_range_in_order(start, end, [&](Node* node) {\n+    NodeHelper curr(node);\n+    if (prev.is_valid() && prev.is_committed_begin()) {\n+      CommittedMemoryRegion cmr((address)prev.position(), curr.distance_from(prev), stack(curr));\n+      if (!func(cmr)) {\n+        return false;\n+      }\n+    }\n+    prev = curr;\n+    return true;\n+  });\n+}\n+\n+template<typename F>\n+void RegionsTree::visit_reserved_regions(F func) {\n+  NodeHelper begin_node, prev;\n+  size_t rgn_size = 0;\n+\n+  visit_in_order([&](Node* node) {\n+    NodeHelper curr(node);\n+    if (prev.is_valid()) {\n+      rgn_size += curr.distance_from(prev);\n+    } else {\n+      begin_node = curr;\n+      rgn_size = 0;\n+    }\n+    prev = curr;\n+    if (curr.is_released_begin() || begin_node.out_tag() != curr.out_tag()) {\n+      auto st = stack(curr);\n+      if (rgn_size == 0) {\n+        prev.clear_node();\n+        return true;\n+      }\n+      ReservedMemoryRegion rmr((address)begin_node.position(), rgn_size, st, begin_node.out_tag());\n+      if (!func(rmr)) {\n+        return false;\n+      }\n+      rgn_size = 0;\n+      if (!curr.is_released_begin()) {\n+        begin_node = curr;\n+      } else {\n+        begin_node.clear_node();\n+        prev.clear_node();\n+      }\n+    }\n+\n+    return true;\n+  });\n+}\n+\n+#endif \/\/SHARE_NMT_REGIONSTREE_INLINE_HPP\n","filename":"src\/hotspot\/share\/nmt\/regionsTree.inline.hpp","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"nmt\/regionsTree.inline.hpp\"\n@@ -56,3 +57,3 @@\n-    _tracker = static_cast<VirtualMemoryTracker*>(os::malloc(sizeof(VirtualMemoryTracker), mtNMT));\n-    if (_tracker == nullptr) return false;\n-    new (_tracker) VirtualMemoryTracker(level == NMT_detail);\n+    void* tracker = os::malloc(sizeof(VirtualMemoryTracker), mtNMT);\n+    if (tracker == nullptr) return false;\n+    _tracker = new (tracker) VirtualMemoryTracker(level == NMT_detail);\n@@ -99,0 +100,1 @@\n+    \/\/ Will be commented out after 8350567. The error outputs corrupt the jdk-image.\n@@ -114,1 +116,1 @@\n-      if (reserve_delta > 0)\n+      if (reserve_delta > 0) {\n@@ -116,2 +118,2 @@\n-      else {\n-        if ((size_t)-reserve_delta <= reserved)\n+      } else {\n+        if ((size_t)-reserve_delta <= reserved) {\n@@ -119,1 +121,1 @@\n-        else\n+        } else {\n@@ -121,0 +123,1 @@\n+        }\n@@ -128,1 +131,1 @@\n-        else\n+        else {\n@@ -130,0 +133,1 @@\n+        }\n@@ -132,1 +136,1 @@\n-        if ((size_t)-commit_delta <= committed)\n+        if ((size_t)-commit_delta <= committed) {\n@@ -134,1 +138,1 @@\n-        else\n+        } else {\n@@ -136,0 +140,1 @@\n+        }\n@@ -192,1 +197,1 @@\n-  if (!rmr.contain_address((address)p))\n+  if (!rmr.contain_address((address)p)) {\n@@ -194,0 +199,1 @@\n+  }\n@@ -212,2 +218,2 @@\n-     p2i(rgn.base()), rgn.size(), rgn.tag_name(), rgn.committed_size());\n-    if (!walker->do_allocation_site(&rgn))\n+                  p2i(rgn.base()), rgn.size(), rgn.tag_name(), rgn.committed_size());\n+    if (!walker->do_allocation_site(&rgn)) {\n@@ -215,0 +221,1 @@\n+    }\n@@ -220,8 +227,0 @@\n-int compare_committed_region(const CommittedMemoryRegion& r1, const CommittedMemoryRegion& r2) {\n-  return r1.compare(r2);\n-}\n-\n-int compare_reserved_region_base(const ReservedMemoryRegion& r1, const ReservedMemoryRegion& r2) {\n-  return r1.compare(r2);\n-}\n-\n@@ -319,1 +318,0 @@\n-        \/\/log_warning(cds)(\"st start: \" INTPTR_FORMAT \" size: \" SIZE_FORMAT, p2i(committed_start), committed_size);\n@@ -337,4 +335,16 @@\n-  VirtualMemoryTracker::VirtualMemoryTracker(bool is_detailed_mode) {\n-    _tree = static_cast<RegionsTree*>(os::malloc(sizeof(RegionsTree), mtNMT));\n-    new(_tree) RegionsTree(is_detailed_mode);\n-  }\n+ReservedMemoryRegion RegionsTree::find_reserved_region(address addr) {\n+    ReservedMemoryRegion rmr;\n+    auto contain_region = [&](ReservedMemoryRegion& region_in_tree) {\n+      if (region_in_tree.contain_address(addr)) {\n+        rmr = region_in_tree;\n+        return false;\n+      }\n+      return true;\n+    };\n+    visit_reserved_regions(contain_region);\n+    return rmr;\n+}\n+\n+bool CommittedMemoryRegion::equals(const ReservedMemoryRegion& rmr) const {\n+  return size() == rmr.size() && call_stack()->equals(*(rmr.call_stack()));\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":36,"deletions":26,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"nmt\/regionsTree.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"utilities\/linkedlist.hpp\"\n@@ -45,1 +45,1 @@\n-\/\/ Not all operations are valid in VMT. The following predicates are checked before the operation is applied to the tree nad\/or VirtualMemorySummary:\n+\/\/ Not all operations are valid in VMT. The following predicates are checked before the operation is applied to the tree and\/or VirtualMemorySummary:\n@@ -127,1 +127,1 @@\n-      if (index != NMTUtil::tag_to_index(mtThreadStack))\n+      if (index != NMTUtil::tag_to_index(mtThreadStack)) {\n@@ -129,0 +129,1 @@\n+      }\n@@ -300,2 +301,2 @@\n-  CommittedMemoryRegion() :\n-    VirtualMemoryRegion((address)1, 1), _stack(NativeCallStack::empty_stack()) { }\n+  CommittedMemoryRegion()\n+    : VirtualMemoryRegion((address)1, 1), _stack(NativeCallStack::empty_stack()) { }\n@@ -303,2 +304,2 @@\n-  CommittedMemoryRegion(address addr, size_t size, const NativeCallStack& stack) :\n-    VirtualMemoryRegion(addr, size), _stack(stack) { }\n+  CommittedMemoryRegion(address addr, size_t size, const NativeCallStack& stack)\n+    : VirtualMemoryRegion(addr, size), _stack(stack) { }\n@@ -308,0 +309,1 @@\n+  bool equals(const ReservedMemoryRegion& other) const;\n@@ -310,4 +312,0 @@\n-\n-typedef LinkedListIterator<CommittedMemoryRegion> CommittedRegionIterator;\n-\n-int compare_committed_region(const CommittedMemoryRegion&, const CommittedMemoryRegion&);\n@@ -321,2 +319,3 @@\n-  ReservedMemoryRegion() :\n-    VirtualMemoryRegion((address)1, 1), _stack(NativeCallStack::empty_stack()), _mem_tag(mtNone) { }\n+\n+  ReservedMemoryRegion()\n+    : VirtualMemoryRegion((address)1, 1), _stack(NativeCallStack::empty_stack()), _mem_tag(mtNone) { }\n@@ -325,2 +324,2 @@\n-    MemTag mem_tag = mtNone) :\n-    VirtualMemoryRegion(base, size), _stack(stack), _mem_tag(mem_tag) { }\n+    MemTag mem_tag = mtNone)\n+    : VirtualMemoryRegion(base, size), _stack(stack), _mem_tag(mem_tag) { }\n@@ -329,2 +328,2 @@\n-  ReservedMemoryRegion(address base, size_t size) :\n-    VirtualMemoryRegion(base, size), _stack(NativeCallStack::empty_stack()), _mem_tag(mtNone) { }\n+  ReservedMemoryRegion(address base, size_t size)\n+    : VirtualMemoryRegion(base, size), _stack(NativeCallStack::empty_stack()), _mem_tag(mtNone) { }\n@@ -333,2 +332,2 @@\n-  ReservedMemoryRegion(const ReservedMemoryRegion& rr) :\n-    VirtualMemoryRegion(rr.base(), rr.size()) {\n+  ReservedMemoryRegion(const ReservedMemoryRegion& rr)\n+    : VirtualMemoryRegion(rr.base(), rr.size()) {\n@@ -362,2 +361,0 @@\n-int compare_reserved_region_base(const ReservedMemoryRegion& r1, const ReservedMemoryRegion& r2);\n-\n@@ -369,1 +366,1 @@\n-class RegionsTree;\n+\n@@ -371,2 +368,1 @@\n- private:\n-  RegionsTree *_tree;\n+  RegionsTree _tree;\n@@ -375,1 +371,1 @@\n-  VirtualMemoryTracker(bool is_detailed_mode);\n+  VirtualMemoryTracker(bool is_detailed_mode) : _tree(is_detailed_mode) { }\n@@ -398,1 +394,1 @@\n-  RegionsTree* tree() { return _tree; }\n+  RegionsTree* tree() { return &_tree; }\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":22,"deletions":26,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  enum class StateType : uint8_t { Reserved = 1, Committed = 3, Released = 0, COUNT = 4 };\n+  enum class StateType : uint8_t { Reserved = 1, Committed = 3, Released = 0, st_number_of_states = 4 };\n@@ -65,1 +65,1 @@\n-  static const char* statetype_strings[static_cast<uint8_t>(StateType::COUNT)];\n+  static const char* statetype_strings[static_cast<uint8_t>(StateType::st_number_of_states)];\n@@ -71,1 +71,1 @@\n-    assert(type < StateType::COUNT, \"must be\");\n+    assert(type < StateType::st_number_of_states, \"must be\");\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#include \"utilities\/linkedlist.hpp\"\n-\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_treap.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-#include \"nmt\/regionsTree.hpp\"\n+#include \"nmt\/regionsTree.inline.hpp\"\n+#include \"nmt\/virtualMemoryTracker.hpp\"\n","filename":"test\/hotspot\/gtest\/nmt\/test_regions_tree.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"nmt\/regionsTree.inline.hpp\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_committed_virtualmemory.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"nmt\/regionsTree.hpp\"\n+#include \"nmt\/regionsTree.inline.hpp\"\n@@ -66,5 +66,0 @@\n-  \/\/ CommittedRegionIterator iter = rmr->iterate_committed_regions();\n-  \/\/ LOG(\"In reserved region \" PTR_FORMAT \", size \" SIZE_FORMAT_HEX \":\", p2i(rmr.base()), rmr.size());\n-  \/\/ for (const CommittedMemoryRegion* region = iter.next(); region != nullptr; region = iter.next()) {\n-  \/\/   LOG(\"   committed region: \" PTR_FORMAT \", size \" SIZE_FORMAT_HEX, p2i(region->base()), region->size());\n-  \/\/ }\n@@ -91,9 +86,0 @@\n-\n-  \/\/ for (const CommittedMemoryRegion* region = iter.next(); region != nullptr; region = iter.next()) {\n-  \/\/   EXPECT_LT(i, regions_size) << WHERE;\n-  \/\/   EXPECT_EQ(region->base(), regions[i]._addr) << WHERE;\n-  \/\/   EXPECT_EQ(region->size(), regions[i]._size) << WHERE;\n-  \/\/   size += region->size();\n-  \/\/   i++;\n-  \/\/ }\n-\n","filename":"test\/hotspot\/gtest\/runtime\/test_virtualMemoryTracker.cpp","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"}]}