{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+#include \"precompiled.hpp\"\n@@ -176,3 +177,0 @@\n-  bool has_control(Node* ctrl) {\n-    return _control.contains(ctrl);\n-  }\n@@ -413,60 +411,1 @@\n-PhaseStringOpts::ProcessAppendResult PhaseStringOpts::process_append_candidate(CallStaticJavaNode* cnode,\n-                                                                               StringConcat* sc,\n-                                                                               ciMethod* m,\n-                                                                               ciSymbol* string_sig,\n-                                                                               ciSymbol* int_sig,\n-                                                                               ciSymbol* char_sig) {\n-  if (cnode->method() != nullptr && !cnode->method()->is_static() &&\n-      cnode->method()->holder() == m->holder() &&\n-      cnode->method()->name() == ciSymbols::append_name() &&\n-      (cnode->method()->signature()->as_symbol() == string_sig ||\n-       cnode->method()->signature()->as_symbol() == char_sig ||\n-       cnode->method()->signature()->as_symbol() == int_sig)) {\n-    if (sc->has_control(cnode)) {\n-      return ProcessAppendResult::AppendWasAdded;\n-    }\n-    sc->add_control(cnode);\n-    Node* arg = cnode->in(TypeFunc::Parms + 1);\n-    if (arg == nullptr || arg->is_top()) {\n-#ifndef PRODUCT\n-      if (PrintOptimizeStringConcat) {\n-        tty->print(\"giving up because the call is effectively dead\");\n-        cnode->jvms()->dump_spec(tty);\n-        tty->cr();\n-      }\n-#endif\n-      return ProcessAppendResult::AbortOptimization;\n-    }\n-\n-    if (cnode->method()->signature()->as_symbol() == int_sig) {\n-      sc->push_int(arg);\n-    } else if (cnode->method()->signature()->as_symbol() == char_sig) {\n-      sc->push_char(arg);\n-    } else if (arg->is_Proj() && arg->in(0)->is_CallStaticJava()) {\n-      CallStaticJavaNode* csj = arg->in(0)->as_CallStaticJava();\n-      if (csj->method() != nullptr &&\n-          csj->method()->intrinsic_id() == vmIntrinsics::_Integer_toString &&\n-          arg->outcnt() == 1) {\n-        \/\/ _control is the list of StringBuilder calls nodes which\n-        \/\/ will be replaced by new String code after this optimization.\n-        \/\/ Integer::toString() call is not part of StringBuilder calls\n-        \/\/ chain. It could be eliminated only if its result is used\n-        \/\/ only by this SB calls chain.\n-        \/\/ Another limitation: it should be used only once because\n-        \/\/ it is unknown that it is used only by this SB calls chain\n-        \/\/ until all related SB calls nodes are collected.\n-        assert(arg->unique_out() == cnode, \"sanity\");\n-        sc->add_control(csj);\n-        sc->push_int(csj->in(TypeFunc::Parms));\n-      } else {\n-        sc->push_string(arg);\n-      }\n-    } else {\n-      sc->push_string(arg);\n-    }\n-    return ProcessAppendResult::AppendWasAdded;\n-  }\n-  return ProcessAppendResult::CandidateIsNotAppend;\n-}\n-\n-\/\/ Recognize fluent-chain and non-fluent uses of StringBuilder\/Buffer. They are either explicit usages\n+\/\/ Recognize a fluent-chain of StringBuilder\/Buffer. They are either explicit usages\n@@ -481,3 +420,3 @@\n-\/\/ Fluent-chains are recognized by walking upwards along the receivers, starting from toString().\n-\/\/ Once the allocation of the StringBuilder has been reached, DU pairs are examined to find the\n-\/\/ constructor and non-fluent uses of the StringBuilder such as in this example:\n+\/\/ PS: Only a certain subset of constructor and append methods are acceptable.\n+\/\/ The criterion is that the length of argument is easy to work out in this phrase.\n+\/\/ It will drop complex cases such as Object.\n@@ -485,0 +424,2 @@\n+\/\/ Since it walks along the receivers of fluent-chain, it will give up if the codeshape is\n+\/\/ not \"fluent\" enough. eg.\n@@ -489,3 +430,2 @@\n-\/\/ PS: Only a certain subset of constructor and append methods are acceptable.\n-\/\/ The criterion is that the length of argument is easy to work out in this phrase.\n-\/\/ It will drop complex cases such as Object.\n+\/\/ The receiver of toString method is the result of Allocation Node(CheckCastPP).\n+\/\/ The append method is overlooked. It will fail at validate_control_flow() test.\n@@ -530,1 +470,1 @@\n-        return nullptr;\n+        break;\n@@ -542,1 +482,1 @@\n-        return nullptr;\n+        break;\n@@ -553,4 +493,0 @@\n-          if (constructor != nullptr) {\n-            \/\/ The constructor again. We must only process it once.\n-            continue;\n-          }\n@@ -610,10 +546,1 @@\n-        } else if (use != nullptr) {\n-          if (process_append_candidate(use, sc, m, string_sig, int_sig, char_sig) == ProcessAppendResult::AbortOptimization) {\n-            \/\/ We must abort if process_append_candidate tells us to...\n-            return nullptr;\n-          }\n-          \/\/ ...but we do not care if we really found an append or not:\n-          \/\/ - If we found an append, that's perfect. Nothing further to do.\n-          \/\/ - If this is a call to an unrelated method, validate_mem_flow() (and validate_control_flow())\n-          \/\/   will later check if this call prevents the optimization. So nothing to do here.\n-          \/\/ We will continue to look for the constructor (if not found already) and appends.\n+          break;\n@@ -630,1 +557,1 @@\n-        return nullptr;\n+        break;\n@@ -645,7 +572,11 @@\n-    } else {\n-      ProcessAppendResult result = process_append_candidate(cnode, sc, m, string_sig, int_sig, char_sig);\n-\n-      if (result == ProcessAppendResult::AbortOptimization) {\n-        return nullptr;\n-      } else if (result == ProcessAppendResult::CandidateIsNotAppend) {\n-        \/\/ some unhandled signature\n+    } else if (cnode->method() == nullptr) {\n+      break;\n+    } else if (!cnode->method()->is_static() &&\n+               cnode->method()->holder() == m->holder() &&\n+               cnode->method()->name() == ciSymbols::append_name() &&\n+               (cnode->method()->signature()->as_symbol() == string_sig ||\n+                cnode->method()->signature()->as_symbol() == char_sig ||\n+                cnode->method()->signature()->as_symbol() == int_sig)) {\n+      sc->add_control(cnode);\n+      Node* arg = cnode->in(TypeFunc::Parms + 1);\n+      if (arg == nullptr || arg->is_top()) {\n@@ -654,4 +585,2 @@\n-          tty->print(\"giving up because encountered unexpected signature \");\n-          cnode->tf()->dump();\n-          tty->cr();\n-          cnode->in(TypeFunc::Parms + 1)->dump();\n+          tty->print(\"giving up because the call is effectively dead\");\n+          cnode->jvms()->dump_spec(tty); tty->cr();\n@@ -660,1 +589,1 @@\n-        return nullptr;\n+        break;\n@@ -662,0 +591,37 @@\n+      if (cnode->method()->signature()->as_symbol() == int_sig) {\n+        sc->push_int(arg);\n+      } else if (cnode->method()->signature()->as_symbol() == char_sig) {\n+        sc->push_char(arg);\n+      } else {\n+        if (arg->is_Proj() && arg->in(0)->is_CallStaticJava()) {\n+          CallStaticJavaNode* csj = arg->in(0)->as_CallStaticJava();\n+          if (csj->method() != nullptr &&\n+              csj->method()->intrinsic_id() == vmIntrinsics::_Integer_toString &&\n+              arg->outcnt() == 1) {\n+            \/\/ _control is the list of StringBuilder calls nodes which\n+            \/\/ will be replaced by new String code after this optimization.\n+            \/\/ Integer::toString() call is not part of StringBuilder calls\n+            \/\/ chain. It could be eliminated only if its result is used\n+            \/\/ only by this SB calls chain.\n+            \/\/ Another limitation: it should be used only once because\n+            \/\/ it is unknown that it is used only by this SB calls chain\n+            \/\/ until all related SB calls nodes are collected.\n+            assert(arg->unique_out() == cnode, \"sanity\");\n+            sc->add_control(csj);\n+            sc->push_int(csj->in(TypeFunc::Parms));\n+            continue;\n+          }\n+        }\n+        sc->push_string(arg);\n+      }\n+      continue;\n+    } else {\n+      \/\/ some unhandled signature\n+#ifndef PRODUCT\n+      if (PrintOptimizeStringConcat) {\n+        tty->print(\"giving up because encountered unexpected signature \");\n+        cnode->tf()->dump(); tty->cr();\n+        cnode->in(TypeFunc::Parms + 1)->dump();\n+      }\n+#endif\n+      break;\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":65,"deletions":99,"binary":false,"changes":164,"status":"modified"}]}