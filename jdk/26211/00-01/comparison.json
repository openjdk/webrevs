{"files":[{"patch":"@@ -46,0 +46,1 @@\n+              \"sun.nio.ch.ChannelInputStream\",\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/FileReadEvent.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+              \"java.io.OutputStream\",\n@@ -45,0 +46,1 @@\n+              \"sun.nio.ch.ChannelOutputStream\",\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/FileWriteEvent.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.nio.channels.SeekableByteChannel;\n@@ -46,0 +47,2 @@\n+import java.nio.file.OpenOption;\n+import java.nio.file.StandardOpenOption;\n@@ -89,1 +92,1 @@\n-        printTestDescription(EVENT_FILE_READ, \"RandomAccessFile and FileInputStream\");\n+        printTestDescription(EVENT_FILE_READ, \"RandomAccessFile, FileInputStream, Files.newInputStream and Files.newByteChannel\");\n@@ -93,1 +96,3 @@\n-        writeStream(f2);\n+        writeFileStream(f2);\n+        Path p = Path.of(\"testFileRead-3.bin\");\n+        writeFilesNew(p);\n@@ -98,1 +103,2 @@\n-            readStream(f2);\n+            readFileStream(f2);\n+            readFilesNew(p);\n@@ -100,1 +106,23 @@\n-            assertTopFrames(r, \"readRAF\", 20, \"readStream\", 8);\n+            assertTopFrames(r, \"readFilesNew\", 1, \"readRAF\", 20, \"readStream\", 15);\n+        }\n+    }\n+\n+    private static void readFileStream(File f) throws Exception {\n+        try (FileInputStream fis = new FileInputStream(f)) {\n+            readStream(fis);\n+        }\n+    }\n+\n+    private static void writeFileStream(File f) throws Exception {\n+        try (FileOutputStream fos = new FileOutputStream(f)) {\n+            writeStream(fos);\n+        }\n+    }\n+\n+    private static void readFilesNew(Path p) throws Exception {\n+        ByteBuffer b = ByteBuffer.allocateDirect(1000);\n+        try (SeekableByteChannel channel = Files.newByteChannel(p)) {\n+            channel.read(b); \/\/ 1\n+        }\n+        try (InputStream is = Files.newInputStream(p)) {\n+            readStream(is);\n@@ -105,1 +133,1 @@\n-        printTestDescription(EVENT_FILE_WRITE + \", \" + EVENT_FILE_FORCE, \"RandomAccessFile and FileInputStream\");\n+        printTestDescription(EVENT_FILE_WRITE + \", \" + EVENT_FILE_FORCE, \"RandomAccessFile, FileInputStream, Files.newOutputStream and Files.newByteChanneland\");\n@@ -112,1 +140,1 @@\n-            writeStream(f);\n+            writeFileStream(f);\n@@ -114,0 +142,1 @@\n+            writeFilesNew(f.toPath());\n@@ -115,1 +144,12 @@\n-            assertTopFrames(r, \"writeRAF\", 17, \"writeStream\", 3, \"writeAsync\", 1);\n+            assertTopFrames(r, \"writeFilesNew\", 1, \"writeRAF\", 17, \"writeStream\", 6, \"writeAsync\", 1);\n+        }\n+    }\n+\n+    private static void writeFilesNew(Path p) throws Exception {\n+        ByteBuffer b = ByteBuffer.allocateDirect(1000);\n+        OpenOption[] options = { StandardOpenOption.CREATE, StandardOpenOption.WRITE };\n+        try (SeekableByteChannel channel = Files.newByteChannel(p, options)) {\n+            channel.write(b); \/\/ 1\n+        }\n+        try (OutputStream os = Files.newOutputStream(p, options)) {\n+            writeStream(os);\n@@ -125,1 +165,1 @@\n-    private static void writeStream(File f) throws Exception {\n+    private static void writeStream(OutputStream os) throws Exception {\n@@ -127,5 +167,3 @@\n-        try (FileOutputStream fos = new FileOutputStream(f)) {\n-            fos.write(67); \/\/ 1\n-            fos.write(bytes); \/\/ 2\n-            fos.write(bytes, 0, 1); \/\/ 3\n-        }\n+        os.write(67); \/\/ 1\n+        os.write(bytes); \/\/ 2\n+        os.write(bytes, 0, 1); \/\/ 3\n@@ -159,1 +197,1 @@\n-    private static void readStream(File f) throws Exception {\n+    private static void readStream(InputStream is) throws Exception {\n@@ -161,10 +199,8 @@\n-        try (FileInputStream fis = new FileInputStream(f)) {\n-            fis.read(); \/\/ 1\n-            fis.read(bytes); \/\/ 2\n-            fis.read(bytes, 0, 3); \/\/ 3\n-            fis.readNBytes(2); \/\/ 4\n-            fis.readNBytes(bytes, 0, 1); \/\/ 5\n-            byte[] leftOver = fis.readAllBytes(); \/\/ 6, 7, 8\n-            if (leftOver.length < 1) {\n-                throw new Exception(\"Expected some bytes to be read\");\n-            }\n+        is.read(); \/\/ 1\n+        is.read(bytes); \/\/ 2\n+        is.read(bytes, 0, 3); \/\/ 3\n+        is.readNBytes(2); \/\/ 4\n+        is.readNBytes(bytes, 0, 1); \/\/ 5\n+        byte[] leftOver = is.readAllBytes(); \/\/ 6, 7, 8 or 6, 7 for Files.newInputStream\n+        if (leftOver.length < 1) {\n+            throw new Exception(\"Expected some bytes to be read\");\n@@ -200,1 +236,1 @@\n-                throw new Exception(\"Expected som bytes to be read\");\n+                throw new Exception(\"Expected some bytes to be read\");\n@@ -227,1 +263,1 @@\n-            try (InputStream is = sc.socket().getInputStream();) {\n+            try (InputStream is = sc.socket().getInputStream()) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestIOTopFrame.java","additions":62,"deletions":26,"binary":false,"changes":88,"status":"modified"}]}