{"files":[{"patch":"@@ -146,0 +146,1 @@\n+java\/awt\/Graphics\/SmallPrimitives.java 8047070 macosx-all,linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4191297\n+ * @summary Tests that unreferenced GDI resources are correctly\n+ *          destroyed when no longer needed.\n+ * @key headful\n+ * @run main GDIResourceExhaustionTest\n+ *\/\n+\n+public class GDIResourceExhaustionTest extends Frame {\n+    public void initUI() {\n+        setSize(200, 200);\n+        setUndecorated(true);\n+        setLocationRelativeTo(null);\n+        Panel labelPanel = new Panel();\n+        Label label = new Label(\"Red label\");\n+        label.setBackground(Color.red);\n+        labelPanel.add(label);\n+        labelPanel.setLocation(20, 50);\n+        add(labelPanel);\n+        setVisible(true);\n+    }\n+\n+    public void paint(Graphics graphics) {\n+        super.paint(graphics);\n+        for (int rgb = 0; rgb <= 0xfff; rgb++) {\n+            graphics.setColor(new Color(rgb));\n+            graphics.fillRect(0, 0, 5, 5);\n+        }\n+    }\n+\n+    public void requestCoordinates(Rectangle r) {\n+        Insets insets = getInsets();\n+        Point location = getLocationOnScreen();\n+        Dimension size = getSize();\n+        r.x = location.x + insets.left;\n+        r.y = location.y + insets.top;\n+        r.width = size.width - (insets.left + insets.right);\n+        r.height = size.height - (insets.top + insets.bottom);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException, IOException {\n+        GDIResourceExhaustionTest test = new GDIResourceExhaustionTest();\n+        try {\n+            EventQueue.invokeAndWait(test::initUI);\n+            Robot robot = new Robot();\n+            robot.delay(2000);\n+            Rectangle coords = new Rectangle();\n+            EventQueue.invokeAndWait(() -> {\n+                test.requestCoordinates(coords);\n+            });\n+            robot.mouseMove(coords.x - 50, coords.y - 50);\n+            robot.waitForIdle();\n+            robot.delay(5000);\n+            BufferedImage capture = robot.createScreenCapture(coords);\n+            robot.delay(500);\n+            boolean redFound = false;\n+            int redRGB = Color.red.getRGB();\n+            for (int y = 0; y < capture.getHeight(); y++) {\n+                for (int x = 0; x < capture.getWidth(); x++) {\n+                    if (capture.getRGB(x, y) == redRGB) {\n+                        redFound = true;\n+                        break;\n+                    }\n+                    if (redFound) {\n+                        break;\n+                    }\n+                }\n+            }\n+            if (!redFound) {\n+                File errorImage = new File(\"screenshot.png\");\n+                ImageIO.write(capture, \"png\", errorImage);\n+                throw new RuntimeException(\"Red label is not detected, possibly GDI resources exhausted\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/GDIResourceExhaustionTest.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4081126 4129709\n+ * @summary Test for proper repainting on multiprocessor systems.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RepeatedRepaintTest\n+ *\/\n+public class RepeatedRepaintTest extends Frame {\n+    private Font font = null;\n+    private Image background;\n+\n+    static String INSTRUCTIONS = \"\"\"\n+            The frame next to this window called \"AWT Draw Test\" has\n+            some elements drawn on it. Move this window partially outside of the\n+            screen bounds and then drag it back. Repeat it couple of times.\n+            Drag the instructions window over the frame partially obscuring it.\n+            If after number of attempts the frame content stops repainting\n+            press \"Fail\", otherwise press \"Pass\".\n+            \"\"\";\n+\n+    public RepeatedRepaintTest() {\n+        setTitle(\"AWT Draw Test\");\n+        setSize(300, 300);\n+        background = new BufferedImage(300, 300, BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = background.getGraphics();\n+        g.setColor(Color.black);\n+        g.fillRect(0, 0, 300, 300);\n+        g.dispose();\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension dim = this.getSize();\n+        super.paint(g);\n+        g.drawImage(background, 0, 0, dim.width, dim.height, null);\n+        g.setColor(Color.white);\n+        if (font == null) {\n+            font = new Font(\"SansSerif\", Font.PLAIN, 24);\n+        }\n+        g.setFont(font);\n+        FontMetrics metrics = g.getFontMetrics();\n+        String message = \"Draw Test\";\n+        g.drawString(message, (dim.width \/ 2) - (metrics.stringWidth(message) \/ 2),\n+                (dim.height \/ 2) + (metrics.getHeight() \/ 2));\n+\n+        int counter = 50;\n+        for (int i = 0; i < 50; i++) {\n+            counter += 4;\n+            g.drawOval(counter, 50, i, i);\n+        }\n+\n+        counter = 20;\n+        for (int i = 0; i < 100; i++) {\n+            counter += 4;\n+            g.drawOval(counter, 150, i, i);\n+        }\n+        g.setColor(Color.black);\n+        g.drawLine(0, dim.height - 25, dim.width, dim.height - 25);\n+        g.setColor(Color.gray);\n+        g.drawLine(0, dim.height - 24, dim.width, dim.height - 24);\n+        g.setColor(Color.lightGray);\n+        g.drawLine(0, dim.height - 23, dim.width, dim.height - 23);\n+        g.fillRect(0, dim.height - 22, dim.width, dim.height);\n+\n+\n+        g.setXORMode(Color.blue);\n+        g.fillRect(0, 0, 25, dim.height - 26);\n+        g.setColor(Color.red);\n+        g.fillRect(0, 0, 25, dim.height - 26);\n+        g.setColor(Color.green);\n+        g.fillRect(0, 0, 25, dim.height - 26);\n+        g.setPaintMode();\n+\n+        Image img = createImage(50, 50);\n+        Graphics imgGraphics = img.getGraphics();\n+        imgGraphics.setColor(Color.magenta);\n+        imgGraphics.fillRect(0, 0, 50, 50);\n+        imgGraphics.setColor(Color.yellow);\n+        imgGraphics.drawString(\"offscreen\", 0, 20);\n+        imgGraphics.drawString(\"image\", 0, 30);\n+\n+        g.drawImage(img, dim.width - 100, dim.height - 100, Color.blue, null);\n+\n+        g.setXORMode(Color.white);\n+        drawAt(g, 100, 100, 50, 50);\n+        drawAt(g, 105, 105, 50, 50);\n+        drawAt(g, 110, 110, 50, 50);\n+    }\n+\n+    public void drawAt(Graphics g, int x, int y, int width, int height) {\n+        g.setColor(Color.magenta);\n+        g.fillRect(x, y, width, height);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Repeated Repaint Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(RepeatedRepaintTest::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/RepeatedRepaintTest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,224 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.Polygon;\n+import java.awt.geom.GeneralPath;\n+import java.awt.geom.Line2D;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4411814 4298688 4205762 4524760 4067534\n+ * @summary Check that Graphics rendering primitives function\n+ *          correctly when fed small and degenerate shapes\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SmallPrimitives\n+ *\/\n+\n+\n+public class SmallPrimitives extends Panel {\n+\n+    static String INSTRUCTIONS = \"\"\"\n+            In the borderless frame next to this window there should be a\n+            set of tiny narrow blue polygons painted next to the green rectangles.\n+            If rectangle is vertical the corresponding polygon is painted to the right of it,\n+            if rectangle is horizontal the polygon is painted below it.\n+            The length of the polygon should be roughly the same as the length of the\n+            green rectangle next to it. If size is significantly different or any of the\n+            polygons is not painted press \"Fail\" otherwise press \"Pass\".\n+            Note: one may consider using screen magnifier to compare sizes.\n+            \"\"\";\n+\n+    public void paint(Graphics g) {\n+        Dimension d = getSize();\n+        Polygon p;\n+        GeneralPath gp;\n+\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, d.width, d.height);\n+\n+        \/\/ Reposition for horizontal tests (below)\n+        g.translate(0, 20);\n+\n+        \/\/ Reference shapes\n+        g.setColor(Color.green);\n+        g.fillRect(10, 7, 11, 1);\n+        g.fillRect(10, 17, 11, 2);\n+        g.fillRect(10, 27, 11, 1);\n+        g.fillRect(10, 37, 11, 1);\n+        g.fillRect(10, 47, 11, 2);\n+        g.fillRect(10, 57, 11, 2);\n+        g.fillRect(10, 67, 11, 1);\n+        g.fillRect(10, 77, 11, 2);\n+        g.fillRect(10, 87, 11, 1);\n+        g.fillRect(10, 97, 11, 1);\n+        g.fillRect(10, 107, 11, 1);\n+        g.fillRect(10, 117, 6, 1); g.fillRect(20, 117, 6, 1);\n+\n+        \/\/ Potentially problematic test shapes\n+        g.setColor(Color.blue);\n+        g.drawRect(10, 10, 10, 0);\n+        g.drawRect(10, 20, 10, 1);\n+        g.drawRoundRect(10, 30, 10, 0, 0, 0);\n+        g.drawRoundRect(10, 40, 10, 0, 4, 4);\n+        g.drawRoundRect(10, 50, 10, 1, 0, 0);\n+        g.drawRoundRect(10, 60, 10, 1, 4, 4);\n+        g.drawOval(10, 70, 10, 0);\n+        g.drawOval(10, 80, 10, 1);\n+        p = new Polygon();\n+        p.addPoint(10, 90);\n+        p.addPoint(20, 90);\n+        g.drawPolyline(p.xpoints, p.ypoints, p.npoints);\n+        p = new Polygon();\n+        p.addPoint(10, 100);\n+        p.addPoint(20, 100);\n+        g.drawPolygon(p.xpoints, p.ypoints, p.npoints);\n+        ((Graphics2D) g).draw(new Line2D.Double(10, 110, 20, 110));\n+        gp = new GeneralPath();\n+        gp.moveTo(10, 120);\n+        gp.lineTo(15, 120);\n+        gp.moveTo(20, 120);\n+        gp.lineTo(25, 120);\n+        ((Graphics2D) g).draw(gp);\n+\n+        \/\/ Polygon limit tests\n+        p = new Polygon();\n+        trypoly(g, p);\n+        p.addPoint(10, 120);\n+        trypoly(g, p);\n+\n+        \/\/ Reposition for vertical tests (below)\n+        g.translate(20, -20);\n+\n+        \/\/ Reference shapes\n+        g.setColor(Color.green);\n+        g.fillRect(7, 10, 1, 11);\n+        g.fillRect(17, 10, 2, 11);\n+        g.fillRect(27, 10, 1, 11);\n+        g.fillRect(37, 10, 1, 11);\n+        g.fillRect(47, 10, 2, 11);\n+        g.fillRect(57, 10, 2, 11);\n+        g.fillRect(67, 10, 1, 11);\n+        g.fillRect(77, 10, 2, 11);\n+        g.fillRect(87, 10, 1, 11);\n+        g.fillRect(97, 10, 1, 11);\n+        g.fillRect(107, 10, 1, 11);\n+        g.fillRect(117, 10, 1, 6); g.fillRect(117, 20, 1, 6);\n+\n+        \/\/ Potentially problematic test shapes\n+        g.setColor(Color.blue);\n+        g.drawRect(10, 10, 0, 10);\n+        g.drawRect(20, 10, 1, 10);\n+        g.drawRoundRect(30, 10, 0, 10, 0, 0);\n+        g.drawRoundRect(40, 10, 0, 10, 4, 4);\n+        g.drawRoundRect(50, 10, 1, 10, 0, 0);\n+        g.drawRoundRect(60, 10, 1, 10, 4, 4);\n+        g.drawOval(70, 10, 0, 10);\n+        g.drawOval(80, 10, 1, 10);\n+        p = new Polygon();\n+        p.addPoint(90, 10);\n+        p.addPoint(90, 20);\n+        g.drawPolyline(p.xpoints, p.ypoints, p.npoints);\n+        p = new Polygon();\n+        p.addPoint(100, 10);\n+        p.addPoint(100, 20);\n+        g.drawPolygon(p.xpoints, p.ypoints, p.npoints);\n+        ((Graphics2D) g).draw(new Line2D.Double(110, 10, 110, 20));\n+        gp = new GeneralPath();\n+        gp.moveTo(120, 10);\n+        gp.lineTo(120, 15);\n+        gp.moveTo(120, 20);\n+        gp.lineTo(120, 25);\n+        ((Graphics2D) g).draw(gp);\n+\n+        \/\/ Polygon limit tests\n+        p = new Polygon();\n+        trypoly(g, p);\n+        p.addPoint(110, 10);\n+        trypoly(g, p);\n+\n+        \/\/ Reposition for oval tests\n+        g.translate(0, 20);\n+\n+        for (int i = 0, xy = 8; i < 11; i++) {\n+            g.setColor(Color.green);\n+            g.fillRect(xy, 5, i, 1);\n+            g.fillRect(5, xy, 1, i);\n+            g.setColor(Color.blue);\n+            g.fillOval(xy, 8, i, 1);\n+            g.fillOval(8, xy, 1, i);\n+            xy += i + 2;\n+        }\n+\n+        g.translate(10, 10);\n+        for (int i = 0, xy = 9; i < 6; i++) {\n+            g.setColor(Color.green);\n+            g.fillRect(xy, 5, i, 2);\n+            g.fillRect(5, xy, 2, i);\n+            g.setColor(Color.blue);\n+            g.fillOval(xy, 8, i, 2);\n+            g.fillOval(8, xy, 2, i);\n+            xy += i + 2;\n+        }\n+    }\n+\n+    public static void trypoly(Graphics g, Polygon p) {\n+        g.drawPolygon(p);\n+        g.drawPolygon(p.xpoints, p.ypoints, p.npoints);\n+        g.drawPolyline(p.xpoints, p.ypoints, p.npoints);\n+        g.fillPolygon(p);\n+        g.fillPolygon(p.xpoints, p.ypoints, p.npoints);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(150, 150);\n+    }\n+\n+    public static Frame createFrame() {\n+        Frame f = new Frame();\n+        SmallPrimitives sp = new SmallPrimitives();\n+        sp.setLocation(0, 0);\n+        f.add(sp);\n+        f.setUndecorated(true);\n+        f.pack();\n+        return f;\n+    }\n+\n+    public static void main(String argv[]) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Small Primitives Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(60)\n+                .testUI(SmallPrimitives::createFrame)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/SmallPrimitives.java","additions":224,"deletions":0,"binary":false,"changes":224,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.RenderingHints;\n+import java.awt.image.VolatileImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4505650\n+ * @summary Check that you can render solid text after doing XOR mode\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TextAfterXor\n+ *\/\n+\n+public class TextAfterXor extends Panel {\n+    public static final int TESTW = 300;\n+    public static final int TESTH = 100;\n+    static String INSTRUCTIONS = \"\"\"\n+            In the window called \"Text After XOR Test\" there should be two\n+            composite components, at the bottom of each component the green text\n+            \"Test passes if this is green!\" should be visible.\n+\n+            On the top component this text should be green on all platforms.\n+            On the bottom component it is possible that on non-Windows\n+            platforms text can be of other color or not visible at all.\n+            That does not constitute a problem.\n+\n+            So if platform is Windows and green text appears twice or on any\n+            other platform green text appears at least once press \"Pass\",\n+            otherwise press \"Fail\".\n+            \"\"\";\n+\n+    VolatileImage vimg;\n+\n+    public void paint(Graphics g) {\n+        render(g);\n+        g.drawString(\"(Drawing to screen)\", 10, 60);\n+        if (vimg == null) {\n+            vimg = createVolatileImage(TESTW, TESTH);\n+        }\n+        do {\n+            vimg.validate(null);\n+            Graphics g2 = vimg.getGraphics();\n+            render(g2);\n+            String not = vimg.getCapabilities().isAccelerated() ? \"\" : \"not \";\n+            g2.drawString(\"Image was \" + not + \"accelerated\", 10, 55);\n+            g2.drawString(\"(only matters on Windows)\", 10, 65);\n+            g2.dispose();\n+            g.drawImage(vimg, 0, TESTH, null);\n+        } while (vimg.contentsLost());\n+    }\n+\n+    public void render(Graphics g) {\n+        g.setColor(Color.black);\n+        g.fillRect(0, 0, TESTW, TESTH);\n+        g.setColor(Color.white);\n+        g.fillRect(5, 5, TESTW-10, TESTH-10);\n+\n+        g.setColor(Color.black);\n+        g.drawString(\"Test only passes if green string appears\", 10, 20);\n+\n+        g.setColor(Color.white);\n+        g.setXORMode(Color.blue);\n+        g.drawRect(30, 30, 10, 10);\n+        g.setPaintMode();\n+        g.setColor(Color.green);\n+\n+        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                                          RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+        g.drawString(\"Test passes if this is green!\", 10, 80);\n+\n+        g.setColor(Color.black);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(TESTW, TESTH*2);\n+    }\n+\n+    public static Frame createFrame() {\n+        Frame f = new Frame(\"Text After XOR Test\");\n+        f.add(new TextAfterXor());\n+        f.pack();\n+        return f;\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame.builder()\n+                .title(\"Text After XOR Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testUI(TextAfterXor::createFrame)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/TextAfterXor.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"}]}