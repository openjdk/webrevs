{"files":[{"patch":"@@ -1243,0 +1243,1 @@\n+  DEBUG_ONLY(verify_loop_nodes_of_useless_templates_assertion_predicates_are_dead();)\n@@ -1245,0 +1246,37 @@\n+#ifdef ASSERT\n+\/\/ All now useless Template Assertion Predicates should not refer to any CountedLoopNode that can still be found in the\n+\/\/ graph (otherwise, they would have been marked useful instead). This is verified in this method.\n+void EliminateUselessPredicates::verify_loop_nodes_of_useless_templates_assertion_predicates_are_dead() const {\n+  ResourceMark rm;\n+  Unique_Node_List loop_nodes_of_useless_template_assertion_predicates =\n+       collect_loop_nodes_of_useless_template_assertion_predicates();\n+  verify_associated_loop_nodes_are_dead(loop_nodes_of_useless_template_assertion_predicates);\n+}\n+\n+Unique_Node_List EliminateUselessPredicates::collect_loop_nodes_of_useless_template_assertion_predicates() const {\n+  Unique_Node_List loop_nodes_of_useless_template_assertion_predicates;\n+  for (int i = 0; i < _template_assertion_predicate_opaques.length(); i++) {\n+    OpaqueTemplateAssertionPredicateNode* opaque_node = _template_assertion_predicate_opaques.at(i);\n+    if (opaque_node->is_useless()) {\n+      loop_nodes_of_useless_template_assertion_predicates.push(opaque_node->loop_node());\n+    }\n+  }\n+  return loop_nodes_of_useless_template_assertion_predicates;\n+}\n+\n+void EliminateUselessPredicates::verify_associated_loop_nodes_are_dead(\n+    const Unique_Node_List& loop_nodes_of_useless_template_assertion_predicates) const {\n+  if (loop_nodes_of_useless_template_assertion_predicates.size() == 0) {\n+    return;\n+  }\n+  for (LoopTreeIterator iterator(_ltree_root); !iterator.done(); iterator.next()) {\n+    IdealLoopTree* loop = iterator.current();\n+    Node* loop_head = loop->head();\n+    if (loop_head->is_CountedLoop()) {\n+      assert(!loop_nodes_of_useless_template_assertion_predicates.member(loop_head),\n+             \"CountedLoopNode should be dead when found in OpaqueTemplateAssertionPredicateNode being marked useless\");\n+    }\n+  }\n+}\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1257,0 +1257,5 @@\n+#ifdef ASSERT\n+  void verify_loop_nodes_of_useless_templates_assertion_predicates_are_dead() const;\n+  Unique_Node_List collect_loop_nodes_of_useless_template_assertion_predicates() const;\n+  void verify_associated_loop_nodes_are_dead(const Unique_Node_List& loop_nodes_of_useless_template_assertion_predicates) const;\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}