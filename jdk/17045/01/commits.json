[{"commit":{"message":"updated the javadoc"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/PriorityQueue.java"}],"sha":"1cce713d15c90bb7015805d3086b408aa6709806"},{"commit":{"message":"fix styling"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/PriorityQueue.java"}],"sha":"8f35fe911a06e34878b96931a851e43169458fe4"},{"commit":{"message":"Introduce constructor for PriorityQueue with existing collection and custom comparator\n\nThis commit addresses the current limitation in the `PriorityQueue` implementation, which lacks a constructor to efficiently create a priority queue with a custom comparator and an existing collection. In order to create such a queue, we currently need to initialize a new queue with custom comparator, and after that populate the queue using `addAll()` method, which in the background calls `add()` method (which takes `O(logn)` time) for each element of the collection (`n` times).  This is resulting in an overall time complexity of `O(nlogn)`. \r\n\r\n```Java\r\nPriorityQueue<String> pq = new PriorityQueue<>(customComparator);\r\npq.addAll(existingCollection);\r\n```\r\n\r\nThe pull request introduces a new constructor to streamline this process and reduce the time complexity to `O(n)`.  If you create the queue above using the new constructor, the contents of the collection will be copied (which takes `O(n)` time) and then later  `heapify()` operation (Floyd's algorithm) will be called once (another `O(n)` time). Overall the operation will be reduced from `O(nlogn)` to `O(2n)` -> `O(n)` time.\r\n\r\n```\r\nPriorityQueue<String> pq = new PriorityQueue<>(existingCollection, customComparator);\r\n```"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/util\/PriorityQueue.java"}],"sha":"e9f20e6d07ed4682c69dc70e02a92db3cdb8f494"}]