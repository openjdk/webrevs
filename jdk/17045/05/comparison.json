{"files":[{"patch":"@@ -212,0 +212,20 @@\n+    \/**\n+     * Creates a {@code PriorityQueue} containing the elements in the\n+     * specified collection. The elements of the new {@code PriorityQueue}\n+     * will be ordered according to the specified comparator.\n+     *\n+     * @param  c the collection whose elements are to be placed\n+     *         into this priority queue\n+     * @param  comparator the comparator that will be used to order this\n+     *         priority queue.  If {@code null}, the {@linkplain Comparable\n+     *         natural ordering} of the elements will be used.\n+     * @throws NullPointerException if the specified collection or any\n+     *         of its elements are null\n+     * @since 23\n+     *\/\n+    public PriorityQueue(Collection<? extends E> c,\n+                         Comparator<? super E> comparator) {\n+        this.comparator = comparator;\n+        initFromCollection(c);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/PriorityQueue.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * Pat Fisher, Mike Judd.\n+ * Pat Fisher, Mike Judd, Valeh Hajiyev.\n@@ -171,0 +171,31 @@\n+    \/**\n+     * Queue contains all elements of collection used to initialize and\n+     * uses the custom comparator provided to order its elements\n+     *\/\n+    public void testConstructor8() {\n+        Item[] items = seqItems(SIZE);\n+        MyReverseComparator cmp = new MyReverseComparator();\n+        @SuppressWarnings(\"unchecked\")\n+        PriorityQueue<Item> q = new PriorityQueue<>(Arrays.asList(items), cmp);\n+        assertEquals(cmp, q.comparator());\n+        for (int i = SIZE - 1; i >= 0; --i)\n+            mustEqual(items[i], q.poll());\n+    }\n+\n+    \/**\n+     * Initializing from Collection with a comparator has the order\n+     * of its elements the same as the queue initialized with a comparator\n+     * and populated with Collection after initialization\n+     *\/\n+    public void testConstructor9() {\n+        Item[] items = seqItems(SIZE);\n+        MyReverseComparator cmp = new MyReverseComparator();\n+        @SuppressWarnings(\"unchecked\")\n+        PriorityQueue<Item> q1 = new PriorityQueue<>(Arrays.asList(items), cmp);\n+        @SuppressWarnings(\"unchecked\")\n+        PriorityQueue<Item> q2 = new PriorityQueue<>(SIZE, cmp);\n+        q2.addAll(Arrays.asList(items));\n+        for (int i = 0; i < SIZE; ++i)\n+            mustEqual(q1.poll(), q2.poll());\n+    }\n+\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/PriorityQueueTest.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"}]}