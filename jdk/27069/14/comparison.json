{"files":[{"patch":"@@ -217,1 +217,4 @@\n-        \/* check for response type that is not allowed to send a body *\/\n+        boolean informational = rCode >= 100 && rCode < 200 ;\n+\n+        \/* informational codes *\/\n+        if (informational) {\n@@ -219,4 +222,8 @@\n-        if ((rCode>=100 && rCode <200) \/* informational *\/\n-            ||(rCode == 204)           \/* no content *\/\n-            ||(rCode == 304))          \/* not modified *\/\n-        {\n+            if (contentLen != 0) {\n+                logger.log(\n+                    Level.WARNING,\n+                    () -> \"sendResponseHeaders: rCode = \" + rCode + \": forcing contentLen = 0\");\n+            }\n+            contentLen = 0;\n+        \/* check for response type that is not allowed to send a body *\/\n+        } else if (rCode == 204 || rCode == 304) {\n@@ -244,9 +251,6 @@\n-        } else { \/* not a HEAD request or 304 response *\/\n-            if (contentLen == 0) {\n-                if (http10) {\n-                    o.setWrappedStream (new UndefLengthOutputStream (this, ros));\n-                    close = true;\n-                } else {\n-                    rspHdrs.set (\"Transfer-encoding\", \"chunked\");\n-                    o.setWrappedStream (new ChunkedOutputStream (this, ros));\n-                }\n+        } else if (contentLen == 0) {\n+            if (http10) {\n+                o.setWrappedStream(new UndefLengthOutputStream (this, ros));\n+                close = true;\n+            } else if (informational) {\n+                \/\/ no body for informational responses\n@@ -254,8 +258,2 @@\n-                if (contentLen == -1) {\n-                    noContentToSend = true;\n-                    contentLen = 0;\n-                }\n-                if (!noContentLengthHeader) {\n-                    rspHdrs.set(\"Content-length\", Long.toString(contentLen));\n-                }\n-                o.setWrappedStream (new FixedLengthOutputStream (this, ros, contentLen));\n+                rspHdrs.set (\"Transfer-encoding\", \"chunked\");\n+                o.setWrappedStream (new ChunkedOutputStream (this, ros));\n@@ -263,0 +261,9 @@\n+        } else {\n+            if (contentLen == -1) {\n+                noContentToSend = true;\n+                contentLen = 0;\n+            }\n+            if (!noContentLengthHeader) {\n+                rspHdrs.set(\"Content-length\", Long.toString(contentLen));\n+            }\n+            o.setWrappedStream (new FixedLengthOutputStream (this, ros, contentLen));\n@@ -282,1 +289,6 @@\n-        sentHeaders = true;\n+        \/**\n+         * we don't want to set sentHeaders true if this is an\n+         * informational response, as the real response is yet\n+         * to be sent.\n+         *\/\n+        sentHeaders = !informational;\n@@ -287,0 +299,2 @@\n+        } else if (informational) {\n+            ros.flush();\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ExchangeImpl.java","additions":37,"deletions":23,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,216 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test id=default\n+ * @bug 8349670\n+ * @summary Test 100 continue response handling\n+ * @run junit\/othervm InputRead100Test\n+ *\/\n+\/**\n+ * @test id=preferIPv6\n+ * @bug 8349670\n+ * @summary Test 100 continue response handling ipv6\n+ * @run junit\/othervm -Djava.net.preferIPv6Addresses=true Send1xxResponsesTest\n+ *\/\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.sun.net.httpserver.HttpServer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static java.nio.charset.StandardCharsets.*;\n+\n+public class Send1xxResponsesTest {\n+    private static final String someContext = \"\/context\";\n+    static {\n+        Logger.getLogger(\"\").setLevel(Level.ALL);\n+        Logger.getLogger(\"\").getHandlers()[0].setLevel(Level.ALL);\n+    }\n+\n+    @Test\n+    public void testAutoContinue() throws Exception {\n+        System.out.println(\"testContinue()\");\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        HttpServer server = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n+        try {\n+            server.createContext(\n+                someContext,\n+                msg -> {\n+                    System.err.println(\"Handling request: \" + msg.getRequestURI());\n+                    byte[] reply = \"Here is my reply!\".getBytes(UTF_8);\n+                    try {\n+                        msg.getRequestBody().readAllBytes();\n+                        msg.sendResponseHeaders(100, -1);\n+                        msg.sendResponseHeaders(100, -1);\n+                        msg.sendResponseHeaders(200, reply.length);\n+                        msg.getResponseBody().write(reply);\n+                        msg.getResponseBody().close();\n+                    } finally {\n+                        System.err.println(\"Request handled: \" + msg.getRequestURI());\n+                    }\n+                });\n+            server.start();\n+            System.out.println(\"Server started at port \" + server.getAddress().getPort());\n+\n+            runRawSocketHttpClient(loopback, server.getAddress().getPort(), 0);\n+        } finally {\n+            System.out.println(\"shutting server down\");\n+            server.stop(0);\n+        }\n+        System.out.println(\"Server finished.\");\n+    }\n+\n+    @Test\n+    public void testManualContinue() throws Exception {\n+        System.out.println(\"testAutoContinue()\");\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        HttpServer server = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n+        try {\n+            server.createContext(\n+                someContext,\n+                msg -> {\n+                    System.err.println(\"Handling request: \" + msg.getRequestURI());\n+                    byte[] reply = \"Here is my reply!\".getBytes(UTF_8);\n+                    try {\n+                        msg.sendResponseHeaders(100, -1);\n+                        msg.sendResponseHeaders(100, -1);\n+                        msg.sendResponseHeaders(100, -1);\n+                        msg.getRequestBody().readAllBytes();\n+                        msg.sendResponseHeaders(200, reply.length);\n+                        msg.getResponseBody().write(reply);\n+                        msg.getResponseBody().close();\n+                    } finally {\n+                        System.err.println(\"Request handled: \" + msg.getRequestURI());\n+                    }\n+                });\n+            server.start();\n+            System.out.println(\"Server started at port \" + server.getAddress().getPort());\n+\n+            runRawSocketHttpClient(loopback, server.getAddress().getPort(), 0);\n+        } finally {\n+            System.out.println(\"shutting server down\");\n+            server.stop(0);\n+        }\n+        System.out.println(\"Server finished.\");\n+    }\n+\n+    static void runRawSocketHttpClient(InetAddress address, int port, int contentLength)\n+        throws Exception {\n+        Socket socket = null;\n+        PrintWriter writer = null;\n+        BufferedReader reader = null;\n+        boolean foundContinue = false;\n+        boolean foundSecondContinue = false;\n+        boolean foundThirdContinue = false;\n+\n+        final String CRLF = \"\\r\\n\";\n+        try {\n+            socket = new Socket(address, port);\n+            writer = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()));\n+            System.out.println(\"Client connected by socket: \" + socket);\n+            String body = \"I will send all the data.\";\n+            if (contentLength <= 0) contentLength = body.getBytes(UTF_8).length;\n+\n+            writer.print(\"GET \" + someContext + \"\/ HTTP\/1.1\" + CRLF);\n+            writer.print(\"User-Agent: Java\/\" + System.getProperty(\"java.version\") + CRLF);\n+            writer.print(\"Host: \" + address.getHostName() + CRLF);\n+            writer.print(\"Accept: *\/*\" + CRLF);\n+            writer.print(\"Content-Length: \" + contentLength + CRLF);\n+            writer.print(\"Connection: keep-alive\" + CRLF);\n+            writer.print(\"Expect: 100-continue\" + CRLF);\n+            writer.print(CRLF); \/\/ Important, else the server will expect that\n+            \/\/ there's more into the request.\n+            writer.flush();\n+            System.out.println(\"Client wrote request to socket: \" + socket);\n+            System.out.println(\"Client read 100 Continue response from server and headers\");\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+            String line = reader.readLine();\n+            for (; line != null; line = reader.readLine()) {\n+                if (line.isEmpty() && foundThirdContinue) {\n+                    break;\n+                }\n+                System.out.println(\"interim response \\\"\" + line + \"\\\"\");\n+                if (foundSecondContinue && line.startsWith(\"HTTP\/1.1 100\")) {\n+                    foundThirdContinue = true;\n+                }\n+                else if (foundContinue && line.startsWith(\"HTTP\/1.1 100\")) {\n+                    foundSecondContinue = true;\n+                }\n+                else if (line.startsWith(\"HTTP\/1.1 100\")) {\n+                    foundContinue = true;\n+                }\n+            }\n+            if (!foundThirdContinue) {\n+                throw new IOException(\"Did not receive two 100 continue from server\");\n+            }\n+            writer.print(body);\n+            writer.flush();\n+            System.out.println(\"Client wrote body to socket: \" + socket);\n+\n+            System.out.println(\"Client start reading from server:\");\n+            line = reader.readLine();\n+            for (; line != null; line = reader.readLine()) {\n+                if (line.isEmpty()) {\n+                    break;\n+                }\n+                System.out.println(\"final response \\\"\" + line + \"\\\"\");\n+            }\n+            System.out.println(\"Client finished reading from server\");\n+        } finally {\n+            \/\/ give time to the server to try & drain its input stream\n+            Thread.sleep(500);\n+            \/\/ closes the client outputstream while the server is draining\n+            \/\/ it\n+            if (writer != null) {\n+                writer.close();\n+            }\n+            \/\/ give time to the server to trigger its assertion\n+            \/\/ error before closing the connection\n+            Thread.sleep(500);\n+            if (reader != null)\n+                try {\n+                    reader.close();\n+                } catch (IOException logOrIgnore) {\n+                    logOrIgnore.printStackTrace();\n+                }\n+            if (socket != null) {\n+                try {\n+                    socket.close();\n+                } catch (IOException logOrIgnore) {\n+                    logOrIgnore.printStackTrace();\n+                }\n+            }\n+        }\n+        System.out.println(\"Client finished.\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Send1xxResponsesTest.java","additions":216,"deletions":0,"binary":false,"changes":216,"status":"added"}]}