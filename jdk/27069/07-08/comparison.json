{"files":[{"patch":"@@ -44,4 +44,0 @@\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.atomic.AtomicLong;\n@@ -51,2 +47,0 @@\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n@@ -62,11 +56,0 @@\n-    static class ServerThreadFactory implements ThreadFactory {\n-        static final AtomicLong tokens = new AtomicLong();\n-\n-        @Override\n-        public Thread newThread(Runnable r) {\n-            var thread = new Thread(r, \"Server-\" + tokens.incrementAndGet());\n-            thread.setDaemon(true);\n-            return thread;\n-        }\n-    }\n-\n@@ -79,1 +62,1 @@\n-    public void testContinue() throws Exception {\n+    public static void testContinue() throws Exception {\n@@ -83,2 +66,0 @@\n-        ExecutorService executor = Executors.newCachedThreadPool(new ServerThreadFactory());\n-        server.setExecutor(executor);\n@@ -92,12 +73,4 @@\n-                        try {\n-                            msg.getResponseHeaders().add(\"Header\", \"BeforeContinue\");\n-                            msg.sendResponseHeaders(100, -1);\n-                            BufferedReader r = new BufferedReader(new InputStreamReader(msg.getRequestBody()));\n-                            r.read();\n-                            msg.sendResponseHeaders(200, reply.length);\n-                            msg.getResponseBody().write(reply);\n-                            msg.getResponseBody().close();\n-                            Thread.sleep(50);\n-                        } catch (IOException | InterruptedException ie) {\n-                            ie.printStackTrace();\n-                        }\n+                        msg.getRequestBody().readAllBytes();\n+                        msg.sendResponseHeaders(200, reply.length);\n+                        msg.getResponseBody().write(reply);\n+                        msg.getResponseBody().close();\n@@ -111,1 +84,1 @@\n-            runRawSocketHttpClient(loopback, server.getAddress().getPort(), 64 * 1024 + 16);\n+            runRawSocketHttpClient(loopback, server.getAddress().getPort(), 0);\n@@ -114,1 +87,0 @@\n-            executor.shutdown();\n@@ -125,0 +97,2 @@\n+        boolean foundContinue = false;\n+\n@@ -144,1 +118,15 @@\n-\n+            System.out.println(\"Client read 100 Continue response from server and headers\");\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+            String line = reader.readLine();\n+            for (; line != null; line = reader.readLine()) {\n+                if (line.isEmpty()) {\n+                    break;\n+                }\n+                System.out.println(\"interim response \\\"\" + line + \"\\\"\");\n+                if (line.startsWith(\"HTTP\/1.1 100\")) {\n+                    foundContinue = true;\n+                }\n+            }\n+            if (!foundContinue) {\n+                throw new IOException(\"Did not receive 100 continue from server\");\n+            }\n@@ -149,1 +137,0 @@\n-            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n@@ -151,1 +138,1 @@\n-            String line = reader.readLine();\n+            line = reader.readLine();\n@@ -156,1 +143,1 @@\n-                System.out.println(\"\\\"\" + line + \"\\\"\");\n+                System.out.println(\"final response \\\"\" + line + \"\\\"\");\n@@ -186,1 +173,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/InputRead100Test.java","additions":26,"deletions":39,"binary":false,"changes":65,"status":"modified"}]}