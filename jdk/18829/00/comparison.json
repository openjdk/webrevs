{"files":[{"patch":"@@ -38,0 +38,1 @@\n+#include \"compiler\/compilerOracle.hpp\"\n@@ -3219,1 +3220,1 @@\n-    if (_method->has_option_value(CompileCommand::CompileThresholdScaling, scale)) {\n+    if (_method->has_option_value(CompileCommandEnum::CompileThresholdScaling, scale)) {\n@@ -3260,1 +3261,1 @@\n-  if (_method->has_option_value(CompileCommand::CompileThresholdScaling, scale)) {\n+  if (_method->has_option_value(CompileCommandEnum::CompileThresholdScaling, scale)) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"compiler\/compilerOracle.hpp\"\n@@ -1065,1 +1066,1 @@\n-bool ciMethod::has_option(enum CompileCommand option) {\n+bool ciMethod::has_option(CompileCommandEnum option) {\n@@ -1075,1 +1076,1 @@\n-bool ciMethod::has_option_value(enum CompileCommand option, double& value) {\n+bool ciMethod::has_option_value(CompileCommandEnum option, double& value) {\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-#include \"compiler\/compilerOracle.hpp\"\n@@ -38,0 +37,1 @@\n+#include \"utilities\/vmEnums.hpp\"\n@@ -306,2 +306,2 @@\n-  bool has_option(enum CompileCommand option);\n-  bool has_option_value(enum CompileCommand option, double& value);\n+  bool has_option(CompileCommandEnum option);\n+  bool has_option_value(CompileCommandEnum option, double& value);\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"compiler\/compilerOracle.hpp\"\n@@ -1616,1 +1617,1 @@\n-    if (printmethod || PrintDebugInfo || CompilerOracle::has_option(mh, CompileCommand::PrintDebugInfo)) {\n+    if (printmethod || PrintDebugInfo || CompilerOracle::has_option(mh, CompileCommandEnum::PrintDebugInfo)) {\n@@ -1620,1 +1621,1 @@\n-    if (printmethod || PrintRelocations || CompilerOracle::has_option(mh, CompileCommand::PrintRelocations)) {\n+    if (printmethod || PrintRelocations || CompilerOracle::has_option(mh, CompileCommandEnum::PrintRelocations)) {\n@@ -1624,1 +1625,1 @@\n-    if (printmethod || PrintDependencies || CompilerOracle::has_option(mh, CompileCommand::PrintDependencies)) {\n+    if (printmethod || PrintDependencies || CompilerOracle::has_option(mh, CompileCommandEnum::PrintDependencies)) {\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-    if (CompilerOracle::has_option_value(method, CompileCommand::CompileThresholdScaling, threshold_scaling)) {\n+    if (CompilerOracle::has_option_value(method, CompileCommandEnum::CompileThresholdScaling, threshold_scaling)) {\n@@ -270,1 +270,1 @@\n-    if (CompilerOracle::has_option_value(method, CompileCommand::CompileThresholdScaling, threshold_scaling)) {\n+    if (CompilerOracle::has_option_value(method, CompileCommandEnum::CompileThresholdScaling, threshold_scaling)) {\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1552,1 +1552,1 @@\n-  if (excluded || (CompilerOracle::has_option_value(method, CompileCommand::CompileThresholdScaling, scale) && scale == 0)) {\n+  if (excluded || (CompilerOracle::has_option_value(method, CompileCommandEnum::CompileThresholdScaling, scale) && scale == 0)) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -429,1 +429,1 @@\n-#define init_default_cc(name, type, dvalue, cc_flag) { type v; if (!_modified[name##Index] && CompileCommand::cc_flag != CompileCommand::Unknown && CompilerOracle::has_option_value(method, CompileCommand::cc_flag, v) && v != this->name##Option) { set.cloned()->name##Option = v; } }\n+#define init_default_cc(name, type, dvalue, cc_flag) { type v; if (!_modified[name##Index] && CompileCommandEnum::cc_flag != CompileCommandEnum::Unknown && CompilerOracle::has_option_value(method, CompileCommandEnum::cc_flag, v) && v != this->name##Option) { set.cloned()->name##Option = v; } }\n@@ -441,1 +441,1 @@\n-      if (CompilerOracle::has_option_value(method, CompileCommand::TraceAutoVectorization, option)) {\n+      if (CompilerOracle::has_option_value(method, CompileCommandEnum::TraceAutoVectorization, option)) {\n@@ -451,1 +451,1 @@\n-      if (CompilerOracle::has_option_value(method, CompileCommand::PrintIdealPhase, option)) {\n+      if (CompilerOracle::has_option_value(method, CompileCommandEnum::PrintIdealPhase, option)) {\n@@ -467,1 +467,1 @@\n-        CompilerOracle::has_option_value(method, CompileCommand::ControlIntrinsic, option_value)) {\n+        CompilerOracle::has_option_value(method, CompileCommandEnum::ControlIntrinsic, option_value)) {\n@@ -487,1 +487,1 @@\n-        CompilerOracle::has_option_value(method, CompileCommand::DisableIntrinsic, option_value)) {\n+        CompilerOracle::has_option_value(method, CompileCommandEnum::DisableIntrinsic, option_value)) {\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"compiler\/compilerOracle.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-static enum OptionType option2type(enum CompileCommand option) {\n+static enum OptionType option2type(CompileCommandEnum option) {\n@@ -71,1 +71,1 @@\n-static const char* option2name(enum CompileCommand option) {\n+static const char* option2name(CompileCommandEnum option) {\n@@ -109,1 +109,1 @@\n-static bool option_filter[static_cast<int>(CompileCommand::Unknown) + 1] = { 0 };\n+static bool option_filter[static_cast<int>(CompileCommandEnum::Unknown) + 1] = { 0 };\n@@ -111,2 +111,2 @@\n-static void command_set_in_filter(enum CompileCommand option) {\n-  assert(option != CompileCommand::Unknown, \"sanity\");\n+static void command_set_in_filter(CompileCommandEnum option) {\n+  assert(option != CompileCommandEnum::Unknown, \"sanity\");\n@@ -115,3 +115,3 @@\n-  if ((option != CompileCommand::DontInline) &&\n-      (option != CompileCommand::Inline) &&\n-      (option != CompileCommand::Log)) {\n+  if ((option != CompileCommandEnum::DontInline) &&\n+      (option != CompileCommandEnum::Inline) &&\n+      (option != CompileCommandEnum::Log)) {\n@@ -123,1 +123,1 @@\n-static bool has_command(enum CompileCommand option) {\n+static bool has_command(CompileCommandEnum option) {\n@@ -130,1 +130,1 @@\n-  enum CompileCommand _option;\n+  CompileCommandEnum _option;\n@@ -143,1 +143,1 @@\n-    _option(CompileCommand::Unknown) {\n+    _option(CompileCommandEnum::Unknown) {\n@@ -149,1 +149,1 @@\n-  TypedMethodOptionMatcher* match(const methodHandle &method, enum CompileCommand option);\n+  TypedMethodOptionMatcher* match(const methodHandle &method, CompileCommandEnum option);\n@@ -151,1 +151,1 @@\n-  void init(enum CompileCommand option, TypedMethodOptionMatcher* next) {\n+  void init(CompileCommandEnum option, TypedMethodOptionMatcher* next) {\n@@ -164,1 +164,1 @@\n-  enum CompileCommand option() { return _option; }\n+  CompileCommandEnum option() { return _option; }\n@@ -289,1 +289,1 @@\n-TypedMethodOptionMatcher* TypedMethodOptionMatcher::match(const methodHandle& method, enum CompileCommand option) {\n+TypedMethodOptionMatcher* TypedMethodOptionMatcher::match(const methodHandle& method, CompileCommandEnum option) {\n@@ -304,1 +304,1 @@\n-                             enum CompileCommand option,\n+                             CompileCommandEnum option,\n@@ -307,1 +307,1 @@\n-  if (option == CompileCommand::Log && !LogCompilation) {\n+  if (option == CompileCommandEnum::Log && !LogCompilation) {\n@@ -313,1 +313,1 @@\n-  if (option == CompileCommand::Blackhole && !UnlockExperimentalVMOptions) {\n+  if (option == CompileCommandEnum::Blackhole && !UnlockExperimentalVMOptions) {\n@@ -336,1 +336,1 @@\n-bool CompilerOracle::has_option_value(const methodHandle& method, enum CompileCommand option, T& value) {\n+bool CompilerOracle::has_option_value(const methodHandle& method, CompileCommandEnum option, T& value) {\n@@ -351,2 +351,2 @@\n-static bool resolve_inlining_predicate(enum CompileCommand option, const methodHandle& method) {\n-  assert(option == CompileCommand::Inline || option == CompileCommand::DontInline, \"Sanity\");\n+static bool resolve_inlining_predicate(CompileCommandEnum option, const methodHandle& method) {\n+  assert(option == CompileCommandEnum::Inline || option == CompileCommandEnum::DontInline, \"Sanity\");\n@@ -355,2 +355,2 @@\n-  bool has_inline = CompilerOracle::has_option_value(method, CompileCommand::Inline, v1);\n-  bool has_dnotinline = CompilerOracle::has_option_value(method, CompileCommand::DontInline, v2);\n+  bool has_inline = CompilerOracle::has_option_value(method, CompileCommandEnum::Inline, v1);\n+  bool has_dnotinline = CompilerOracle::has_option_value(method, CompileCommandEnum::DontInline, v2);\n@@ -362,1 +362,1 @@\n-      enum CompileCommand last_one = CompileCommand::Unknown;\n+      CompileCommandEnum last_one = CompileCommandEnum::Unknown;\n@@ -366,1 +366,1 @@\n-        if (last_one == CompileCommand::Inline || last_one == CompileCommand::DontInline) {\n+        if (last_one == CompileCommandEnum::Inline || last_one == CompileCommandEnum::DontInline) {\n@@ -377,1 +377,1 @@\n-      return option == CompileCommand::Inline ? v1 : v2;\n+      return option == CompileCommandEnum::Inline ? v1 : v2;\n@@ -380,1 +380,1 @@\n-    if (option == CompileCommand::Inline) {\n+    if (option == CompileCommandEnum::Inline) {\n@@ -388,1 +388,1 @@\n-static bool check_predicate(enum CompileCommand option, const methodHandle& method) {\n+static bool check_predicate(CompileCommandEnum option, const methodHandle& method) {\n@@ -390,1 +390,1 @@\n-  if (option == CompileCommand::Inline || option == CompileCommand::DontInline) {\n+  if (option == CompileCommandEnum::Inline || option == CompileCommandEnum::DontInline) {\n@@ -406,5 +406,5 @@\n-template bool CompilerOracle::has_option_value<intx>(const methodHandle& method, enum CompileCommand option, intx& value);\n-template bool CompilerOracle::has_option_value<uintx>(const methodHandle& method, enum CompileCommand option, uintx& value);\n-template bool CompilerOracle::has_option_value<bool>(const methodHandle& method, enum CompileCommand option, bool& value);\n-template bool CompilerOracle::has_option_value<ccstr>(const methodHandle& method, enum CompileCommand option, ccstr& value);\n-template bool CompilerOracle::has_option_value<double>(const methodHandle& method, enum CompileCommand option, double& value);\n+template bool CompilerOracle::has_option_value<intx>(const methodHandle& method, CompileCommandEnum option, intx& value);\n+template bool CompilerOracle::has_option_value<uintx>(const methodHandle& method, CompileCommandEnum option, uintx& value);\n+template bool CompilerOracle::has_option_value<bool>(const methodHandle& method, CompileCommandEnum option, bool& value);\n+template bool CompilerOracle::has_option_value<ccstr>(const methodHandle& method, CompileCommandEnum option, ccstr& value);\n+template bool CompilerOracle::has_option_value<double>(const methodHandle& method, CompileCommandEnum option, double& value);\n@@ -413,1 +413,1 @@\n-bool CompilerOracle::option_matches_type(enum CompileCommand option, T& value) {\n+bool CompilerOracle::option_matches_type(CompileCommandEnum option, T& value) {\n@@ -424,5 +424,5 @@\n-template bool CompilerOracle::option_matches_type<intx>(enum CompileCommand option, intx& value);\n-template bool CompilerOracle::option_matches_type<uintx>(enum CompileCommand option, uintx& value);\n-template bool CompilerOracle::option_matches_type<bool>(enum CompileCommand option, bool& value);\n-template bool CompilerOracle::option_matches_type<ccstr>(enum CompileCommand option, ccstr& value);\n-template bool CompilerOracle::option_matches_type<double>(enum CompileCommand option, double& value);\n+template bool CompilerOracle::option_matches_type<intx>(CompileCommandEnum option, intx& value);\n+template bool CompilerOracle::option_matches_type<uintx>(CompileCommandEnum option, uintx& value);\n+template bool CompilerOracle::option_matches_type<bool>(CompileCommandEnum option, bool& value);\n+template bool CompilerOracle::option_matches_type<ccstr>(CompileCommandEnum option, ccstr& value);\n+template bool CompilerOracle::option_matches_type<double>(CompileCommandEnum option, double& value);\n@@ -430,1 +430,1 @@\n-bool CompilerOracle::has_option(const methodHandle& method, enum CompileCommand option) {\n+bool CompilerOracle::has_option(const methodHandle& method, CompileCommandEnum option) {\n@@ -437,1 +437,1 @@\n-  if (check_predicate(CompileCommand::Exclude, method)) {\n+  if (check_predicate(CompileCommandEnum::Exclude, method)) {\n@@ -440,2 +440,2 @@\n-  if (has_command(CompileCommand::CompileOnly)) {\n-    return !check_predicate(CompileCommand::CompileOnly, method);\n+  if (has_command(CompileCommandEnum::CompileOnly)) {\n+    return !check_predicate(CompileCommandEnum::CompileOnly, method);\n@@ -447,1 +447,1 @@\n-  return (check_predicate(CompileCommand::Inline, method));\n+  return (check_predicate(CompileCommandEnum::Inline, method));\n@@ -451,1 +451,1 @@\n-  return check_predicate(CompileCommand::DontInline, method) || check_predicate(CompileCommand::Exclude, method);\n+  return check_predicate(CompileCommandEnum::DontInline, method) || check_predicate(CompileCommandEnum::Exclude, method);\n@@ -455,1 +455,1 @@\n-  return check_predicate(CompileCommand::Print, method);\n+  return check_predicate(CompileCommandEnum::Print, method);\n@@ -459,1 +459,1 @@\n-  return has_command(CompileCommand::Print);\n+  return has_command(CompileCommandEnum::Print);\n@@ -464,1 +464,1 @@\n-  return has_command(CompileCommand::MemStat) || has_command(CompileCommand::MemLimit);\n+  return has_command(CompileCommandEnum::MemStat) || has_command(CompileCommandEnum::MemLimit);\n@@ -473,1 +473,1 @@\n-  if (!has_command(CompileCommand::Log)) {\n+  if (!has_command(CompileCommandEnum::Log)) {\n@@ -476,1 +476,1 @@\n-  return (check_predicate(CompileCommand::Log, method));\n+  return (check_predicate(CompileCommandEnum::Log, method));\n@@ -480,1 +480,1 @@\n-  return check_predicate(CompileCommand::Break, method);\n+  return check_predicate(CompileCommandEnum::Break, method);\n@@ -484,1 +484,1 @@\n-  if (!check_predicate(CompileCommand::Blackhole, method)) {\n+  if (!check_predicate(CompileCommandEnum::Blackhole, method)) {\n@@ -514,2 +514,2 @@\n-static enum CompileCommand match_option_name(const char* line, int* bytes_read, char* errorbuf, int bufsize) {\n-  assert(ARRAY_SIZE(option_names) == static_cast<int>(CompileCommand::Count), \"option_names size mismatch\");\n+static CompileCommandEnum match_option_name(const char* line, int* bytes_read, char* errorbuf, int bufsize) {\n+  assert(ARRAY_SIZE(option_names) == static_cast<int>(CompileCommandEnum::Count), \"option_names size mismatch\");\n@@ -523,1 +523,1 @@\n-        return static_cast<enum CompileCommand>(i);\n+        return static_cast<CompileCommandEnum>(i);\n@@ -528,1 +528,1 @@\n-  return CompileCommand::Unknown;\n+  return CompileCommandEnum::Unknown;\n@@ -532,1 +532,1 @@\n-enum CompileCommand CompilerOracle::parse_option_name(const char* line) {\n+CompileCommandEnum CompilerOracle::parse_option_name(const char* line) {\n@@ -535,1 +535,1 @@\n-      return static_cast<enum CompileCommand>(i);\n+      return static_cast<CompileCommandEnum>(i);\n@@ -538,1 +538,1 @@\n-  return CompileCommand::Unknown;\n+  return CompileCommandEnum::Unknown;\n@@ -558,1 +558,1 @@\n-static void print_option(enum CompileCommand option, const char* name, enum OptionType type) {\n+static void print_option(CompileCommandEnum option, const char* name, enum OptionType type) {\n@@ -567,1 +567,1 @@\n-#define enum_of_options(option, name, ctype) print_option(CompileCommand::option, name, OptionType::ctype);\n+#define enum_of_options(option, name, ctype) print_option(CompileCommandEnum::option, name, OptionType::ctype);\n@@ -702,1 +702,1 @@\n-        TypedMethodOptionMatcher* matcher, enum CompileCommand option, char* errorbuf, const int buf_size) {\n+        TypedMethodOptionMatcher* matcher, CompileCommandEnum option, char* errorbuf, const int buf_size) {\n@@ -711,1 +711,1 @@\n-    if (option == CompileCommand::MemLimit) {\n+    if (option == CompileCommandEnum::MemLimit) {\n@@ -729,1 +729,1 @@\n-    if (option == CompileCommand::MemStat) {\n+    if (option == CompileCommandEnum::MemStat) {\n@@ -772,2 +772,2 @@\n-      if (option == CompileCommand::ControlIntrinsic || option == CompileCommand::DisableIntrinsic) {\n-        ControlIntrinsicValidator validator(value, (option == CompileCommand::DisableIntrinsic));\n+      if (option == CompileCommandEnum::ControlIntrinsic || option == CompileCommandEnum::DisableIntrinsic) {\n+        ControlIntrinsicValidator validator(value, (option == CompileCommandEnum::DisableIntrinsic));\n@@ -780,1 +780,1 @@\n-      else if (option == CompileCommand::TraceAutoVectorization) {\n+      else if (option == CompileCommandEnum::TraceAutoVectorization) {\n@@ -786,1 +786,1 @@\n-      } else if (option == CompileCommand::PrintIdealPhase) {\n+      } else if (option == CompileCommandEnum::PrintIdealPhase) {\n@@ -792,1 +792,1 @@\n-      } else if (option == CompileCommand::TestOptionList) {\n+      } else if (option == CompileCommandEnum::TestOptionList) {\n@@ -865,2 +865,2 @@\n-    enum CompileCommand option = match_option_name(option_buf, &bytes_read2, errorbuf, buf_size);\n-    if (option == CompileCommand::Unknown) {\n+    CompileCommandEnum option = match_option_name(option_buf, &bytes_read2, errorbuf, buf_size);\n+    if (option == CompileCommandEnum::Unknown) {\n@@ -917,1 +917,1 @@\n-  enum CompileCommand option = match_option_name(line, &bytes_read, error_buf, sizeof(error_buf));\n+  CompileCommandEnum option = match_option_name(line, &bytes_read, error_buf, sizeof(error_buf));\n@@ -921,1 +921,1 @@\n-  if (option == CompileCommand::Unknown) {\n+  if (option == CompileCommandEnum::Unknown) {\n@@ -926,1 +926,1 @@\n-  if (option == CompileCommand::Quiet) {\n+  if (option == CompileCommandEnum::Quiet) {\n@@ -931,1 +931,1 @@\n-  if (option == CompileCommand::Help) {\n+  if (option == CompileCommandEnum::Help) {\n@@ -936,1 +936,1 @@\n-  if (option == CompileCommand::Option) {\n+  if (option == CompileCommandEnum::Option) {\n@@ -978,2 +978,2 @@\n-        enum CompileCommand option = match_option_name(option_type, &bytes_read, error_buf, sizeof(error_buf));\n-        if (option == CompileCommand::Unknown) {\n+        CompileCommandEnum option = match_option_name(option_type, &bytes_read, error_buf, sizeof(error_buf));\n+        if (option == CompileCommandEnum::Unknown) {\n@@ -1016,1 +1016,1 @@\n-      } else if (option == CompileCommand::MemStat) {\n+      } else if (option == CompileCommandEnum::MemStat) {\n@@ -1128,1 +1128,1 @@\n-  if (has_command(CompileCommand::Print)) {\n+  if (has_command(CompileCommandEnum::Print)) {\n@@ -1152,1 +1152,1 @@\n-        register_command(matcher, CompileCommand::CompileOnly, true);\n+        register_command(matcher, CompileCommandEnum::CompileOnly, true);\n@@ -1167,1 +1167,1 @@\n-enum CompileCommand CompilerOracle::string_to_option(const char* name) {\n+CompileCommandEnum CompilerOracle::string_to_option(const char* name) {\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":83,"deletions":83,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-enum class CompileCommand {\n+enum class CompileCommandEnum : int {\n@@ -126,1 +126,1 @@\n-  static void print_command(enum CompileCommand option, const char* name, enum OptionType type);\n+  static void print_command(CompileCommandEnum option, const char* name, enum OptionType type);\n@@ -168,1 +168,1 @@\n-  static bool has_option(const methodHandle& method, enum CompileCommand option);\n+  static bool has_option(const methodHandle& method, CompileCommandEnum option);\n@@ -173,1 +173,1 @@\n-  static bool has_option_value(const methodHandle& method, enum CompileCommand option, T& value);\n+  static bool has_option_value(const methodHandle& method, CompileCommandEnum option, T& value);\n@@ -177,1 +177,1 @@\n-  static bool option_matches_type(enum CompileCommand option, T& value);\n+  static bool option_matches_type(CompileCommandEnum option, T& value);\n@@ -188,2 +188,2 @@\n-  \/\/ returns CompileCommand::Unknown on names not matching an option.\n-  static enum CompileCommand string_to_option(const char* name);\n+  \/\/ returns CompileCommandEnum::Unknown on names not matching an option.\n+  static CompileCommandEnum string_to_option(const char* name);\n@@ -192,2 +192,2 @@\n-  \/\/ returns CompileCommand::Unknown if name is not an option.\n-  static enum CompileCommand parse_option_name(const char* name);\n+  \/\/ returns CompileCommandEnum::Unknown if name is not an option.\n+  static CompileCommandEnum parse_option_name(const char* name);\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-        CompileCommand::Unknown != CompilerOracle::parse_option_name(method_name)) &&\n+        CompileCommandEnum::Unknown != CompilerOracle::parse_option_name(method_name)) &&\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"compiler\/compilerOracle.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+\n@@ -26,0 +27,1 @@\n+#include \"compiler\/compilerOracle.hpp\"\n@@ -43,1 +45,1 @@\n-  CompilerOracle::has_option_value(mh, CompileCommand::CompileThresholdScaling, scale);\n+  CompilerOracle::has_option_value(mh, CompileCommandEnum::CompileThresholdScaling, scale);\n","filename":"src\/hotspot\/share\/oops\/methodCounters.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"compiler\/compilerOracle.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodCounters.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1322,1 +1322,1 @@\n-  CompilerOracle::has_option_value(mh, CompileCommand::CompileThresholdScaling, scale);\n+  CompilerOracle::has_option_value(mh, CompileCommandEnum::CompileThresholdScaling, scale);\n@@ -1339,2 +1339,2 @@\n-      !CompilerOracle::has_option(mh, CompileCommand::NoRTMLockEliding)) {\n-    if (CompilerOracle::has_option(mh, CompileCommand::UseRTMLockEliding) || !UseRTMDeopt) {\n+      !CompilerOracle::has_option(mh, CompileCommandEnum::NoRTMLockEliding)) {\n+    if (CompilerOracle::has_option(mh, CompileCommandEnum::UseRTMLockEliding) || !UseRTMDeopt) {\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"compiler\/compilerOracle.hpp\"\n@@ -1085,1 +1086,1 @@\n-    if (method_has_option(CompileCommand::NoRTMLockEliding) || ((rtm_state & NoRTM) != 0)) {\n+    if (method_has_option(CompileCommandEnum::NoRTMLockEliding) || ((rtm_state & NoRTM) != 0)) {\n@@ -1088,1 +1089,1 @@\n-    } else if (method_has_option(CompileCommand::UseRTMLockEliding) || ((rtm_state & UseRTM) != 0) || !UseRTMDeopt) {\n+    } else if (method_has_option(CompileCommandEnum::UseRTMLockEliding) || ((rtm_state & UseRTM) != 0) || !UseRTMDeopt) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"compiler\/compilerOracle.hpp\"\n@@ -49,0 +48,1 @@\n+#include \"utilities\/vmEnums.hpp\"\n@@ -681,1 +681,1 @@\n-  bool          method_has_option(enum CompileCommand option) {\n+  bool          method_has_option(CompileCommandEnum option) {\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"compiler\/compilerOracle.hpp\"\n@@ -1991,1 +1992,1 @@\n-  enum CompileCommand option = CompilerOracle::string_to_option(flag_name);\n+  CompileCommandEnum option = CompilerOracle::string_to_option(flag_name);\n@@ -1993,1 +1994,1 @@\n-  if (option == CompileCommand::Unknown) {\n+  if (option == CompileCommandEnum::Unknown) {\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+enum class CompileCommandEnum : int;\n","filename":"src\/hotspot\/share\/utilities\/vmEnums.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}