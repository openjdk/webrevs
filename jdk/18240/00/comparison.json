{"files":[{"patch":"@@ -58,0 +58,1 @@\n+#include \"runtime\/vmOperations.hpp\"\n@@ -311,0 +312,7 @@\n+void StringTable::update_needs_rehash(bool rehash) {\n+  if (rehash) {\n+    _needs_rehashing = true;\n+    trigger_concurrent_work();\n+  }\n+}\n+\n@@ -506,0 +514,4 @@\n+bool StringTable::should_grow() {\n+  return get_load_factor() > PREF_AVG_LIST_LEN && !_local_table->is_max_size_reached();\n+}\n+\n@@ -507,2 +519,7 @@\n-  double load_factor = get_load_factor();\n-  log_debug(stringtable, perf)(\"Concurrent work, live factor: %g\", load_factor);\n+  \/\/ Rehash if needed.  Rehashing goes to a safepoint but the rest of this\n+  \/\/ work is concurrent.\n+  if (needs_rehashing() && maybe_rehash_table()) {\n+    Atomic::release_store(&_has_work, false);\n+    return; \/\/ done, else grow\n+  }\n+  log_debug(stringtable, perf)(\"Concurrent work, live factor: %g\", get_load_factor());\n@@ -510,1 +527,1 @@\n-  if (load_factor > PREF_AVG_LIST_LEN && !_local_table->is_max_size_reached()) {\n+  if (should_grow()) {\n@@ -539,0 +556,1 @@\n+  _needs_rehashing = false;\n@@ -542,29 +560,1 @@\n-bool StringTable::should_grow() {\n-  return get_load_factor() > PREF_AVG_LIST_LEN && !_local_table->is_max_size_reached();\n-}\n-\n-bool StringTable::rehash_table_expects_safepoint_rehashing() {\n-  \/\/ No rehashing required\n-  if (!needs_rehashing()) {\n-    return false;\n-  }\n-\n-  \/\/ Grow instead of rehash\n-  if (should_grow()) {\n-    return false;\n-  }\n-\n-  \/\/ Already rehashed\n-  if (_rehashed) {\n-    return false;\n-  }\n-\n-  \/\/ Resizing in progress\n-  if (!_local_table->is_safepoint_safe()) {\n-    return false;\n-  }\n-\n-  return true;\n-}\n-\n-void StringTable::rehash_table() {\n+bool StringTable::maybe_rehash_table() {\n@@ -576,1 +566,0 @@\n-    trigger_concurrent_work();\n@@ -578,1 +567,1 @@\n-    return;\n+    return false;\n@@ -583,1 +572,0 @@\n-    trigger_concurrent_work();\n@@ -585,1 +573,1 @@\n-    return;\n+    return false;\n@@ -588,0 +576,8 @@\n+  VM_RehashStringTable op;\n+  VMThread::execute(&op);\n+  return true;  \/\/ return true because we tried.\n+}\n+\n+void StringTable::rehash_table() {\n+  assert(SafepointSynchronize::is_at_safepoint(), \"must be called at safepoint\");\n+\n@@ -589,6 +585,4 @@\n-  {\n-    if (do_rehash()) {\n-      _rehashed = true;\n-    } else {\n-      log_info(stringtable)(\"Resizes in progress rehashing skipped.\");\n-    }\n+  if (do_rehash()) {\n+    _rehashed = true;\n+  } else {\n+    log_info(stringtable)(\"Resizes in progress rehashing skipped.\");\n@@ -596,1 +590,0 @@\n-  _needs_rehashing = false;\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":36,"deletions":43,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,1 @@\n-\n+  static bool maybe_rehash_table();\n@@ -99,1 +99,0 @@\n-  static bool rehash_table_expects_safepoint_rehashing();\n@@ -102,5 +101,1 @@\n-  static inline void update_needs_rehash(bool rehash) {\n-    if (rehash) {\n-      _needs_rehashing = true;\n-    }\n-  }\n+  static inline void update_needs_rehash(bool rehash);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -416,0 +416,7 @@\n+void SymbolTable::update_needs_rehash(bool rehash) {\n+  if (rehash) {\n+    _needs_rehashing = true;\n+    trigger_cleanup();\n+  }\n+}\n+\n@@ -788,0 +795,4 @@\n+bool SymbolTable::should_grow() {\n+  return get_load_factor() > PREF_AVG_LIST_LEN && !_local_table->is_max_size_reached();\n+}\n+\n@@ -789,2 +800,7 @@\n-  double load_factor = get_load_factor();\n-  log_debug(symboltable, perf)(\"Concurrent work, live factor: %g\", load_factor);\n+  \/\/ Rehash if needed.  Rehashing goes to a safepoint but the rest of this\n+  \/\/ work is concurrent.\n+  if (needs_rehashing() && maybe_rehash_table()) {\n+    Atomic::release_store(&_has_work, false);\n+    return; \/\/ done, else grow\n+  }\n+  log_debug(symboltable, perf)(\"Concurrent work, live factor: %g\", get_load_factor());\n@@ -792,1 +808,1 @@\n-  if (load_factor > PREF_AVG_LIST_LEN && !_local_table->is_max_size_reached()) {\n+  if (should_grow()) {\n@@ -797,1 +813,1 @@\n-  _has_work = false;\n+  Atomic::release_store(&_has_work, false);\n@@ -824,29 +840,1 @@\n-bool SymbolTable::should_grow() {\n-  return get_load_factor() > PREF_AVG_LIST_LEN && !_local_table->is_max_size_reached();\n-}\n-\n-bool SymbolTable::rehash_table_expects_safepoint_rehashing() {\n-  \/\/ No rehashing required\n-  if (!needs_rehashing()) {\n-    return false;\n-  }\n-\n-  \/\/ Grow instead of rehash\n-  if (should_grow()) {\n-    return false;\n-  }\n-\n-  \/\/ Already rehashed\n-  if (_rehashed) {\n-    return false;\n-  }\n-\n-  \/\/ Resizing in progress\n-  if (!_local_table->is_safepoint_safe()) {\n-    return false;\n-  }\n-\n-  return true;\n-}\n-\n-void SymbolTable::rehash_table() {\n+bool SymbolTable::maybe_rehash_table() {\n@@ -858,1 +846,0 @@\n-    trigger_cleanup();\n@@ -860,1 +847,1 @@\n-    return;\n+    return false;\n@@ -866,1 +853,0 @@\n-    trigger_cleanup();\n@@ -868,1 +854,1 @@\n-    return;\n+    return false;\n@@ -871,0 +857,9 @@\n+  VM_RehashSymbolTable op;\n+  VMThread::execute(&op);\n+  return true;\n+}\n+\n+\n+\/\/ Called at VM_Operation safepoint\n+void SymbolTable::rehash_table() {\n+  assert(SafepointSynchronize::is_at_safepoint(), \"must be called at safepoint\");\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":33,"deletions":38,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,0 +149,1 @@\n+  static bool maybe_rehash_table();\n@@ -151,1 +152,0 @@\n-  static bool rehash_table_expects_safepoint_rehashing();\n@@ -154,5 +154,1 @@\n-  static inline void update_needs_rehash(bool rehash) {\n-    if (rehash) {\n-      _needs_rehashing = true;\n-    }\n-  }\n+  static inline void update_needs_rehash(bool rehash);\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-#include \"classfile\/classLoaderDataGraph.hpp\"\n-#include \"classfile\/stringTable.hpp\"\n-#include \"classfile\/symbolTable.hpp\"\n@@ -513,7 +510,0 @@\n-bool SafepointSynchronize::is_cleanup_needed() {\n-  \/\/ Need a safepoint if some inline cache buffers is non-empty\n-  if (StringTable::needs_rehashing()) return true;\n-  if (SymbolTable::needs_rehashing()) return true;\n-  return false;\n-}\n-\n@@ -551,8 +541,0 @@\n-    if (SymbolTable::rehash_table_expects_safepoint_rehashing()) {\n-      workers++;\n-    }\n-\n-    if (StringTable::rehash_table_expects_safepoint_rehashing()) {\n-      workers++;\n-    }\n-\n@@ -567,15 +549,0 @@\n-    \/\/ These tasks are ordered by relative length of time to execute so that potentially longer tasks start first.\n-    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_SYMBOL_TABLE_REHASH)) {\n-      if (SymbolTable::needs_rehashing()) {\n-        Tracer t(\"rehashing symbol table\");\n-        SymbolTable::rehash_table();\n-      }\n-    }\n-\n-    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_STRING_TABLE_REHASH)) {\n-      if (StringTable::needs_rehashing()) {\n-        Tracer t(\"rehashing string table\");\n-        StringTable::rehash_table();\n-      }\n-    }\n-\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":34,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,2 +74,0 @@\n-    SAFEPOINT_CLEANUP_SYMBOL_TABLE_REHASH,\n-    SAFEPOINT_CLEANUP_STRING_TABLE_REHASH,\n@@ -161,1 +159,0 @@\n-  static bool is_cleanup_needed();\n","filename":"src\/hotspot\/share\/runtime\/safepoint.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-  template(Cleanup)                               \\\n@@ -109,0 +108,2 @@\n+  template(RehashStringTable)                     \\\n+  template(RehashSymbolTable)                     \\\n","filename":"src\/hotspot\/share\/runtime\/vmOperation.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+#include \"classfile\/stringTable.hpp\"\n+#include \"classfile\/symbolTable.hpp\"\n@@ -106,0 +108,8 @@\n+void VM_RehashStringTable::doit() {\n+  StringTable::rehash_table();\n+}\n+\n+void VM_RehashSymbolTable::doit() {\n+  SymbolTable::rehash_table();\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,5 +57,0 @@\n-class VM_Cleanup: public VM_EmptyOperation {\n- public:\n-  VMOp_Type type() const { return VMOp_Cleanup; }\n-};\n-\n@@ -101,0 +96,14 @@\n+class VM_RehashStringTable : public VM_Operation {\n+ public:\n+  VM_RehashStringTable() {}\n+  VMOp_Type type() const                         { return VMOp_RehashStringTable; }\n+  void doit();\n+};\n+\n+class VM_RehashSymbolTable : public VM_Operation {\n+ public:\n+  VM_RehashSymbolTable() {}\n+  VMOp_Type type() const                         { return VMOp_RehashSymbolTable; }\n+  void doit();\n+};\n+\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.hpp","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-static VM_Cleanup       cleanup_op;\n+static VM_ForceSafepoint no_op;\n@@ -108,1 +108,1 @@\n-VM_Operation*     VMThread::_next_vm_operation  = &cleanup_op; \/\/ Prevent any thread from setting an operation until VM thread is ready.\n+VM_Operation*     VMThread::_next_vm_operation  = &no_op; \/\/ Prevent any thread from setting an operation until VM thread is ready.\n@@ -340,3 +340,1 @@\n-  if (SafepointSynchronize::is_cleanup_needed()) {\n-    _next_vm_operation = &cleanup_op;\n-  } else if (SafepointALot) {\n+  if (SafepointALot) {\n@@ -502,1 +500,1 @@\n-  cleanup_op.set_calling_thread(_vm_thread);\n+  no_op.set_calling_thread(_vm_thread);\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}