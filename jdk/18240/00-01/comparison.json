{"files":[{"patch":"@@ -271,0 +271,4 @@\n+bool StringTable::has_work() {\n+  return Atomic::load_acquire(&_has_work);\n+}\n+\n@@ -272,3 +276,6 @@\n-  MutexLocker ml(Service_lock, Mutex::_no_safepoint_check_flag);\n-  Atomic::store(&_has_work, true);\n-  Service_lock->notify_all();\n+  \/\/ Avoid churn on ServiceThread\n+  if (!has_work()) {\n+    MutexLocker ml(Service_lock, Mutex::_no_safepoint_check_flag);\n+    Atomic::store(&_has_work, true);\n+    Service_lock->notify_all();\n+  }\n@@ -510,4 +517,0 @@\n-bool StringTable::has_work() {\n-  return Atomic::load_acquire(&_has_work);\n-}\n-\n@@ -535,5 +538,7 @@\n-\/\/ Rehash\n-bool StringTable::do_rehash() {\n-  if (!_local_table->is_safepoint_safe()) {\n-    return false;\n-  }\n+\/\/ Called at VM_Operation safepoint\n+void StringTable::rehash_table() {\n+  assert(SafepointSynchronize::is_at_safepoint(), \"must be called at safepoint\");\n+  \/\/ The ServiceThread initiates the rehashing so it is not resizing.\n+  assert (_local_table->is_safepoint_safe(), \"Should not be resizing now\");\n+\n+  _alt_hash_seed = AltHashing::compute_seed();\n@@ -546,5 +551,1 @@\n-  if (!_local_table->try_move_nodes_to(Thread::current(), new_table)) {\n-    _alt_hash = false;\n-    delete new_table;\n-    return false;\n-  }\n+  _local_table->rehash_nodes_to(Thread::current(), new_table);\n@@ -556,0 +557,1 @@\n+  _rehashed = true;\n@@ -557,1 +559,0 @@\n-  return true;\n@@ -581,11 +582,0 @@\n-void StringTable::rehash_table() {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"must be called at safepoint\");\n-\n-  _alt_hash_seed = AltHashing::compute_seed();\n-  if (do_rehash()) {\n-    _rehashed = true;\n-  } else {\n-    log_info(stringtable)(\"Resizes in progress rehashing skipped.\");\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":19,"deletions":29,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -74,2 +74,0 @@\n-  static bool do_rehash();\n-\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -249,0 +249,2 @@\n+bool SymbolTable::has_work() { return Atomic::load_acquire(&_has_work); }\n+\n@@ -250,3 +252,6 @@\n-  MutexLocker ml(Service_lock, Mutex::_no_safepoint_check_flag);\n-  _has_work = true;\n-  Service_lock->notify_all();\n+  \/\/ Avoid churn on ServiceThread\n+  if (!has_work()) {\n+    MutexLocker ml(Service_lock, Mutex::_no_safepoint_check_flag);\n+    _has_work = true;\n+    Service_lock->notify_all();\n+  }\n@@ -782,1 +787,1 @@\n-  if (_has_work) {\n+  if (has_work()) {\n@@ -816,5 +821,7 @@\n-\/\/ Rehash\n-bool SymbolTable::do_rehash() {\n-  if (!_local_table->is_safepoint_safe()) {\n-    return false;\n-  }\n+\/\/ Called at VM_Operation safepoint\n+void SymbolTable::rehash_table() {\n+  assert(SafepointSynchronize::is_at_safepoint(), \"must be called at safepoint\");\n+  \/\/ The ServiceThread initiates the rehashing so it is not resizing.\n+  assert (_local_table->is_safepoint_safe(), \"Should not be resizing now\");\n+\n+  _alt_hash_seed = AltHashing::compute_seed();\n@@ -827,5 +834,1 @@\n-  if (!_local_table->try_move_nodes_to(Thread::current(), new_table)) {\n-    _alt_hash = false;\n-    delete new_table;\n-    return false;\n-  }\n+  _local_table->rehash_nodes_to(Thread::current(), new_table);\n@@ -837,1 +840,2 @@\n-  return true;\n+  _rehashed = true;\n+  _needs_rehashing = false;\n@@ -862,15 +866,0 @@\n-\n-\/\/ Called at VM_Operation safepoint\n-void SymbolTable::rehash_table() {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"must be called at safepoint\");\n-  _alt_hash_seed = AltHashing::compute_seed();\n-\n-  if (do_rehash()) {\n-    _rehashed = true;\n-  } else {\n-    log_info(symboltable)(\"Resizes in progress rehashing skipped.\");\n-  }\n-\n-  _needs_rehashing = false;\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":19,"deletions":30,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -101,1 +101,0 @@\n-  static bool do_rehash();\n@@ -117,1 +116,1 @@\n-  static bool has_work() { return _has_work; }\n+  static bool has_work();\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -527,2 +527,3 @@\n-  \/\/ Moves all nodes from this table to to_cht\n-  bool try_move_nodes_to(Thread* thread, ConcurrentHashTable<CONFIG, F>* to_cht);\n+  \/\/ Moves all nodes from this table to to_cht with new hash code.\n+  \/\/ Must be done at a safepoint.\n+  void rehash_nodes_to(Thread* thread, ConcurrentHashTable<CONFIG, F>* to_cht);\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1291,2 +1291,2 @@\n-inline bool ConcurrentHashTable<CONFIG, F>::\n-  try_move_nodes_to(Thread* thread, ConcurrentHashTable<CONFIG, F>* to_cht)\n+inline void ConcurrentHashTable<CONFIG, F>::\n+  rehash_nodes_to(Thread* thread, ConcurrentHashTable<CONFIG, F>* to_cht)\n@@ -1294,3 +1294,1 @@\n-  if (!try_resize_lock(thread)) {\n-    return false;\n-  }\n+  assert(is_safepoint_safe(), \"rehashing is at a safepoint - cannot be resizing\");\n@@ -1316,2 +1314,0 @@\n-  unlock_resize_lock(thread);\n-  return true;\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -402,1 +402,2 @@\n-  EXPECT_TRUE(from_cht->try_move_nodes_to(thr, to_cht)) << \"Moving nodes to new table failed\";\n+  \/\/ This is single threaded and not shared\n+  from_cht->rehash_nodes_to(thr, to_cht);\n","filename":"test\/hotspot\/gtest\/utilities\/test_concurrentHashtable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}