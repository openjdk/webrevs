{"files":[{"patch":"@@ -626,1 +626,4 @@\n-  call->extract_projections(&callprojs, true);\n+  \/\/ Similar to incremental inlining, don't assert that all call\n+  \/\/ projections are still there for post-parse call devirtualization.\n+  bool do_asserts = !is_mh_late_inline() && !is_virtual_late_inline();\n+  call->extract_projections(&callprojs, true, do_asserts);\n@@ -650,1 +653,1 @@\n-    kit.replace_call(call, C->top(), true);\n+    kit.replace_call(call, C->top(), true, do_asserts);\n@@ -732,1 +735,1 @@\n-    kit.replace_call(call, result, true);\n+    kit.replace_call(call, result, true, do_asserts);\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1933,1 +1933,1 @@\n-void GraphKit::replace_call(CallNode* call, Node* result, bool do_replaced_nodes) {\n+void GraphKit::replace_call(CallNode* call, Node* result, bool do_replaced_nodes, bool do_asserts) {\n@@ -1947,1 +1947,1 @@\n-  call->extract_projections(&callprojs, true);\n+  call->extract_projections(&callprojs, true, do_asserts);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -734,1 +734,1 @@\n-  void replace_call(CallNode* call, Node* result, bool do_replaced_nodes = false);\n+  void replace_call(CallNode* call, Node* result, bool do_replaced_nodes = false, bool do_asserts = true);\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8336726\n+ * @summary Test that post-parse call devirtualization works when call does not have an IO projection.\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:CompileCommand=compileonly,TestCallDevirtualizationWithInfiniteLoop::test\n+ *                   TestCallDevirtualizationWithInfiniteLoop\n+ *\/\n+\n+public class TestCallDevirtualizationWithInfiniteLoop {\n+\n+    static interface I {\n+        public void method();\n+    }\n+\n+    static final class A implements I {\n+        @Override\n+        public void method() { };\n+    }\n+\n+    static final class B implements I {\n+        @Override\n+        public void method() { };\n+    }\n+\n+    static final A a = new A();\n+    static final B b = new B();\n+\n+    public static void test(boolean flag) {\n+        \/\/ Avoid executing endless loop\n+        if (flag) {\n+            return;\n+        }\n+\n+        \/\/ We only know after loop opts that the receiver type is B.\n+        I recv = a;\n+        for (int i = 0; i < 3; ++i) {\n+            if (i > 1) {\n+                recv = b;\n+            }\n+        }\n+        \/\/ Post-parse call devirtualization will then convert below\n+        \/\/ virtual call to a static call.\n+        recv.method();\n+\n+        \/\/ Endless loop which does not use IO. As a result the IO\n+        \/\/ projection of the call is removed unexpectedly.\n+        while (true) { }\n+    }\n+\n+    public static void main(String[] args) {\n+        test(true);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestCallDevirtualizationWithInfiniteLoop.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}