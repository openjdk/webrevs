{"files":[{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import jdk.test.lib.json.JSONValue;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.Provider;\n+import java.security.Security;\n+\n+\/*\n+ * @test\n+ * @bug 8342442\n+ * @library \/test\/lib\n+ *\/\n+public class Launcher {\n+\n+    private static final String ONLY_ALG\n+            = System.getProperty(\"test.acvp.alg\");\n+\n+    private static final Provider PROVIDER;\n+\n+    static {\n+        var provProp = System.getProperty(\"test.acvp.provider\");\n+        PROVIDER = provProp != null\n+                ? Security.getProvider(provProp)\n+                : null;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ This test runs on \"internalProjection.json\"-style files generated\n+        \/\/ by NIST's ACVP Server. See https:\/\/github.com\/usnistgov\/ACVP-Server.\n+        \/\/\n+        \/\/ The files are either put into the \"data\" directory or another\n+        \/\/ directory specified by the \"test.acvp.data\" test property.\n+        \/\/ The test walks through the directory recursively and looks for\n+        \/\/ file names equals to or ending with \"internalProjection.json\" and\n+        \/\/ runs test on them.\n+        \/\/\n+        \/\/ Set the \"test.acvp.alg\" test property to only test this algorithm.\n+        \/\/\n+        \/\/ Sample files can be downloaded from\n+        \/\/ https:\/\/github.com\/usnistgov\/ACVP-Server\/tree\/master\/gen-val\/json-files.\n+        \/\/\n+        \/\/ By default, the test uses system-preferred implementations.\n+        \/\/ If you want to test on a specific provider, set the\n+        \/\/ \"test.acvp.provider\" test property. The provider must be\n+        \/\/ registered.\n+        \/\/\n+        \/\/ Tests for each algorithm must be compliant to its specification linked from\n+        \/\/ https:\/\/github.com\/usnistgov\/ACVP?tab=readme-ov-file#supported-algorithms.\n+        \/\/\n+        \/\/ Example:\n+        \/\/\n+        \/\/ jtreg -Dtest.acvp.provider=SunJCE \\\n+        \/\/       -Dtest.acvp.alg=ML-KEM \\\n+        \/\/       -Dtest.acvp.data=\/path\/to\/json-files\/ \\\n+        \/\/       -jdk:\/path\/to\/jdk Launcher.java\n+\n+        var testDataProp = System.getProperty(\"test.acvp.data\");\n+        Path dataPath = testDataProp != null\n+                ? Path.of(testDataProp)\n+                : Path.of(System.getProperty(\"test.src\"), \"data\");\n+        System.out.println(\"Data path: \" + dataPath);\n+\n+        if (PROVIDER != null) {\n+            System.out.println(\"Provider: \" + PROVIDER.getName());\n+        }\n+        if (ONLY_ALG != null) {\n+            System.out.println(\"Algorithm: \" + ONLY_ALG);\n+        }\n+\n+        try (var stream = Files.walk(dataPath)) {\n+            stream.filter(Files::isRegularFile)\n+                    .filter(p -> p.getFileName().toString()\n+                            .endsWith(\"internalProjection.json\"))\n+                    .forEach(Launcher::run);\n+        }\n+    }\n+\n+    static void run(Path test) {\n+        try {\n+            JSONValue kat;\n+            try {\n+                kat = JSONValue.parse(Files.readString(test));\n+            } catch (Exception e) {\n+                System.out.println(\"Warning: cannot parse \" + test + \". Skipped\");\n+                return;\n+            }\n+            var alg = kat.get(\"algorithm\").asString();\n+            if (ONLY_ALG != null && !alg.equals(ONLY_ALG)) {\n+                return;\n+            }\n+            System.out.println(\">>> Testing \" + test + \"...\");\n+            switch (alg) {\n+                case \"ML-DSA\" -> ML_DSA_Test.run(kat, PROVIDER);\n+                case \"ML-KEM\" -> ML_KEM_Test.run(kat, PROVIDER);\n+                case \"SHA2-256\", \"SHA2-224\", \"SHA3-256\", \"SHA3-224\"\n+                    -> SHA_Test.run(kat, PROVIDER);\n+                default -> System.out.println(\"Skipped unsupported algorithm: \" + alg);\n+            }\n+        } catch (RuntimeException re) {\n+            throw re;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/Launcher.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.json.JSONValue;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.security.*;\n+import java.security.spec.EncodedKeySpec;\n+import java.security.spec.NamedParameterSpec;\n+import java.util.HexFormat;\n+\n+\/\/ JSON spec at https:\/\/pages.nist.gov\/ACVP\/draft-celi-acvp-ml-dsa.html\n+public class ML_DSA_Test {\n+\n+    public static void run(JSONValue kat, Provider provider) throws Exception {\n+        switch (kat.get(\"mode\").asString()) {\n+            case \"keyGen\" -> mldsaGen(kat, provider);\n+            case \"sigGen\" -> mldsaSign(kat, provider);\n+            case \"sigVer\" -> mldsaVerify(kat, provider);\n+            default -> throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    static void mldsaGen(JSONValue kat, Provider p) throws Exception {\n+        var g = p == null\n+                ? KeyPairGenerator.getInstance(\"ML-DSA\")\n+                : KeyPairGenerator.getInstance(\"ML-DSA\", p);\n+        var f = p == null\n+                ? KeyFactory.getInstance(\"ML-DSA\")\n+                : KeyFactory.getInstance(\"ML-DSA\", p);\n+        for (var t : kat.get(\"testGroups\").asArray()) {\n+            var pname = t.get(\"parameterSet\").asString();\n+            var np = new NamedParameterSpec(pname);\n+            System.out.println(\">> \" + pname);\n+            for (var c : t.get(\"tests\").asArray()) {\n+                System.out.print(c.get(\"tcId\").asString() + \" \");\n+                g.initialize(np, new RandomSource(xeh(c.get(\"seed\").asString())));\n+                var kp = g.generateKeyPair();\n+                var pk = f.getKeySpec(kp.getPublic(), EncodedKeySpec.class).getEncoded();\n+                var sk = f.getKeySpec(kp.getPrivate(), EncodedKeySpec.class).getEncoded();\n+                Asserts.assertEqualsByteArray(pk, xeh(c.get(\"pk\").asString()));\n+                Asserts.assertEqualsByteArray(sk, xeh(c.get(\"sk\").asString()));\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    static void mldsaSign(JSONValue kat, Provider p) throws Exception {\n+        var s = p == null\n+                ? Signature.getInstance(\"ML-DSA\")\n+                : Signature.getInstance(\"ML-DSA\", p);\n+        for (var t : kat.get(\"testGroups\").asArray()) {\n+            var pname = t.get(\"parameterSet\").asString();\n+            var det = Boolean.parseBoolean(t.get(\"deterministic\").asString());\n+            System.out.println(\">> \" + pname + \" sign\");\n+            for (var c : t.get(\"tests\").asArray()) {\n+                System.out.print(Integer.parseInt(c.get(\"tcId\").asString()) + \" \");\n+                var sk = new PrivateKey() {\n+                    public String getAlgorithm() { return pname; }\n+                    public String getFormat() { return \"RAW\"; }\n+                    public byte[] getEncoded() { return xeh(c.get(\"sk\").asString()); }\n+                };\n+                var sr = new RandomSource(det ? new byte[32] : xeh(c.get(\"rnd\").asString()));\n+                s.initSign(sk, sr);\n+                s.update(xeh(c.get(\"message\").asString()));\n+                var sig = s.sign();\n+                Asserts.assertEqualsByteArray(sig, xeh(c.get(\"signature\").asString()));\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    static void mldsaVerify(JSONValue kat, Provider p) throws Exception {\n+        var s = p == null\n+                ? Signature.getInstance(\"ML-DSA\")\n+                : Signature.getInstance(\"ML-DSA\", p);\n+        for (var t : kat.get(\"testGroups\").asArray()) {\n+            var pname = t.get(\"parameterSet\").asString();\n+            var pk = new PublicKey() {\n+                public String getAlgorithm() { return pname; }\n+                public String getFormat() { return \"RAW\"; }\n+                public byte[] getEncoded() { return xeh(t.get(\"pk\").asString()); }\n+            };\n+            System.out.println(\">> \" + pname + \" verify\");\n+            for (var c : t.get(\"tests\").asArray()) {\n+                System.out.print(c.get(\"tcId\").asString() + \" \");\n+                s.initVerify(pk);\n+                s.update(xeh(c.get(\"message\").asString()));\n+                var out = s.verify(xeh(c.get(\"signature\").asString()))\n+                        == Boolean.parseBoolean(c.get(\"testPassed\").asString());\n+                Asserts.assertTrue(out);\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    static byte[] xeh(String s) {\n+        return HexFormat.of().parseHex(s);\n+    }\n+\n+    static class RandomSource extends SecureRandom {\n+        private byte[] buffer;\n+        private int offset;\n+        public RandomSource(byte[]... data) {\n+            var os = new ByteArrayOutputStream();\n+            for (byte[] b : data) {\n+                os.writeBytes(b);\n+            }\n+            buffer = os.toByteArray();\n+            offset = 0;\n+        }\n+\n+        @Override\n+        public void nextBytes(byte[] bytes) {\n+            if (bytes.length > buffer.length - offset) {\n+                throw new IllegalStateException(\"Not enough bytes\");\n+            }\n+            System.arraycopy(buffer, offset, bytes, 0, bytes.length);\n+            offset += bytes.length;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/ML_DSA_Test.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.json.JSONValue;\n+\n+import javax.crypto.KEM;\n+import java.io.ByteArrayOutputStream;\n+import java.security.*;\n+import java.security.spec.EncodedKeySpec;\n+import java.security.spec.NamedParameterSpec;\n+import java.util.HexFormat;\n+\n+\/\/ JSON spec at https:\/\/pages.nist.gov\/ACVP\/draft-celi-acvp-ml-kem.html\n+public class ML_KEM_Test {\n+\n+    public static void run(JSONValue kat, Provider provider) throws Exception {\n+        switch (kat.get(\"mode\").asString()) {\n+            case \"keyGen\" -> mlkemGen(kat, provider);\n+            case \"encapDecap\" -> mlkemEnc(kat, provider);\n+            default -> throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    static void mlkemGen(JSONValue kat, Provider p) throws Exception {\n+        var g = p == null\n+                ? KeyPairGenerator.getInstance(\"ML-KEM\")\n+                : KeyPairGenerator.getInstance(\"ML-KEM\", p);\n+        var f = p == null\n+                ? KeyFactory.getInstance(\"ML-KEM\")\n+                : KeyFactory.getInstance(\"ML-KEM\", p);\n+        for (var t : kat.get(\"testGroups\").asArray()) {\n+            var pname = t.get(\"parameterSet\").asString();\n+            var np = new NamedParameterSpec(pname);\n+            System.out.println(\">> \" + pname);\n+            for (var c : t.get(\"tests\").asArray()) {\n+                System.out.print(c.get(\"tcId\").asString() + \" \");\n+                g.initialize(np, new RandomSource(\n+                        xeh(c.get(\"d\").asString()), xeh(c.get(\"z\").asString())));\n+                var kp = g.generateKeyPair();\n+                var pk = f.getKeySpec(kp.getPublic(), EncodedKeySpec.class).getEncoded();\n+                var sk = f.getKeySpec(kp.getPrivate(), EncodedKeySpec.class).getEncoded();\n+                Asserts.assertEqualsByteArray(pk, xeh(c.get(\"ek\").asString()));\n+                Asserts.assertEqualsByteArray(sk, xeh(c.get(\"dk\").asString()));\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    static void mlkemEnc(JSONValue kat, Provider p) throws Exception {\n+        var g = p == null\n+                ? KEM.getInstance(\"ML-KEM\")\n+                : KEM.getInstance(\"ML-KEM\", p);\n+        for (var t : kat.get(\"testGroups\").asArray()) {\n+            var pname = t.get(\"parameterSet\").asString();\n+            var function = t.get(\"function\").asString();\n+            System.out.println(\">> \" + pname + \" \" + function);\n+            if (function.equals(\"encapsulation\")) {\n+                for (var c : t.get(\"tests\").asArray()) {\n+                    System.out.print(c.get(\"tcId\").asString() + \" \");\n+                    var ek = new PublicKey() {\n+                        public String getAlgorithm() { return pname; }\n+                        public String getFormat() { return \"RAW\"; }\n+                        public byte[] getEncoded() { return xeh(c.get(\"ek\").asString()); }\n+                    };\n+                    var e = g.newEncapsulator(\n+                            ek, new RandomSource(xeh(c.get(\"m\").asString())));\n+                    var enc = e.encapsulate();\n+                    Asserts.assertEqualsByteArray(enc.encapsulation(), xeh(c.get(\"c\").asString()));\n+                    Asserts.assertEqualsByteArray(\n+                            enc.key().getEncoded(), xeh(c.get(\"k\").asString()));\n+                }\n+                System.out.println();\n+            } else if (function.equals(\"decapsulation\")) {\n+                var dk = new PrivateKey() {\n+                    public String getAlgorithm() { return pname; }\n+                    public String getFormat() { return \"RAW\"; }\n+                    public byte[] getEncoded() { return xeh(t.get(\"dk\").asString()); }\n+                };\n+                for (var c : t.get(\"tests\").asArray()) {\n+                    System.out.print(c.get(\"tcId\").asString() + \" \");\n+                    var d = g.newDecapsulator(dk);\n+                    var k = d.decapsulate(xeh(c.get(\"c\").asString()));\n+                    Asserts.assertEqualsByteArray(k.getEncoded(), xeh(c.get(\"k\").asString()));\n+                }\n+                System.out.println();\n+            }\n+        }\n+    }\n+\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    static byte[] xeh(String s) {\n+        return HexFormat.of().parseHex(s);\n+    }\n+\n+    static class RandomSource extends SecureRandom {\n+        private byte[] buffer;\n+        private int offset;\n+        public RandomSource(byte[]... data) {\n+            var os = new ByteArrayOutputStream();\n+            for (byte[] b : data) {\n+                os.writeBytes(b);\n+            }\n+            buffer = os.toByteArray();\n+            offset = 0;\n+        }\n+\n+        @Override\n+        public void nextBytes(byte[] bytes) {\n+            if (bytes.length > buffer.length - offset) {\n+                throw new IllegalStateException(\"Not enough bytes\");\n+            }\n+            System.arraycopy(buffer, offset, bytes, 0, bytes.length);\n+            offset += bytes.length;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/ML_KEM_Test.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.json.JSONValue;\n+\n+import java.security.*;\n+import java.util.Arrays;\n+import java.util.HexFormat;\n+\n+\/\/ JSON spec at https:\/\/pages.nist.gov\/ACVP\/draft-celi-acvp-sha.html\n+\/\/ and https:\/\/pages.nist.gov\/ACVP\/draft-celi-acvp-sha3.html\n+public class SHA_Test {\n+\n+    public static void run(JSONValue kat, Provider provider) throws Exception {\n+        var alg = kat.get(\"algorithm\").asString();\n+        if (alg.startsWith(\"SHA2-\")) alg = \"SHA-\" + alg.substring(5);\n+        var md = provider == null ? MessageDigest.getInstance(alg)\n+                : MessageDigest.getInstance(alg, provider);\n+        for (var t : kat.get(\"testGroups\").asArray()) {\n+            switch (t.get(\"testType\").asString()) {\n+                case \"AFT\" -> {\n+                    for (var c : t.get(\"tests\").asArray()) {\n+                        System.out.print(c.get(\"tcId\").asString() + \" \");\n+                        var msg = xeh(c.get(\"msg\").asString());\n+                        var len = Integer.parseInt(c.get(\"len\").asString());\n+                        if (msg.length * 8 == len) {\n+                            Asserts.assertEqualsByteArray(md.digest(msg),\n+                                    xeh(c.get(\"md\").asString()));\n+                        } else {\n+                            System.out.print(\"bits \");\n+                        }\n+                    }\n+                }\n+                case \"MCT\" -> {\n+                    var mctVersion = t.get(\"mctVersion\").asString();\n+                    var trunc = mctVersion.equals(\"alternate\");\n+                    for (var c : t.get(\"tests\").asArray()) {\n+                        System.out.print(c.get(\"tcId\").asString() + \" \");\n+                        var SEED = xeh(c.get(\"msg\").asString());\n+                        var INITIAL_SEED_LENGTH = Integer.parseInt(c.get(\"len\").asString());\n+                        if (SEED.length * 8 == INITIAL_SEED_LENGTH) {\n+                            for (var r : c.get(\"resultsArray\").asArray()) {\n+                                if (alg.startsWith(\"SHA3-\")) {\n+                                    var MD = SEED;\n+                                    for (var i = 0; i < 1000; i++) {\n+                                        if (trunc) {\n+                                            MD = Arrays.copyOf(MD, INITIAL_SEED_LENGTH \/ 8);\n+                                        }\n+                                        MD = md.digest(MD);\n+                                    }\n+                                    Asserts.assertEqualsByteArray(MD,\n+                                            xeh(r.get(\"md\").asString()));\n+                                    SEED = MD;\n+                                } else {\n+                                    var A = SEED;\n+                                    var B = SEED;\n+                                    var C = SEED;\n+                                    byte[] MD = null;\n+                                    for (var i = 0; i < 1000; i++) {\n+                                        var MSG = concat(A, B, C);\n+                                        if (trunc) {\n+                                            MSG = Arrays.copyOf(MSG, INITIAL_SEED_LENGTH \/ 8);\n+                                        }\n+                                        MD = md.digest(MSG);\n+                                        A = B;\n+                                        B = C;\n+                                        C = MD;\n+                                    }\n+                                    Asserts.assertEqualsByteArray(MD,\n+                                            xeh(r.get(\"md\").asString()));\n+                                    SEED = MD;\n+                                }\n+                            }\n+                        } else {\n+                            System.out.print(\"bits \");\n+                        }\n+                    }\n+                }\n+                case \"LDT\" -> {\n+                    for (var c : t.get(\"tests\").asArray()) {\n+                        System.out.print(c.get(\"tcId\").asString() + \" \");\n+                        var lm = c.get(\"largeMsg\");\n+                        var ct = xeh(lm.get(\"content\").asString());\n+                        var flen = Long.parseLong(lm.get(\"fullLength\").asString());\n+                        var clen = Long.parseLong(lm.get(\"contentLength\").asString());\n+                        var cc = 0L;\n+                        while (cc < flen) {\n+                            md.update(ct);\n+                            cc += clen;\n+                        }\n+                        Asserts.assertEqualsByteArray(md.digest(),\n+                                xeh(c.get(\"md\").asString()));\n+                    }\n+                }\n+                default -> throw new UnsupportedOperationException(\"Unknown testType\");\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    static byte[] concat(byte[]... input) {\n+        var sum = 0;\n+        for (var i : input) {\n+            sum += i.length;\n+        }\n+        var out = new byte[sum];\n+        sum = 0;\n+        for (var i : input) {\n+            System.arraycopy(i, 0, out, sum, i.length);\n+            sum += i.length;\n+        }\n+        return out;\n+    }\n+\n+    static byte[] xeh(String s) {\n+        return HexFormat.of().parseHex(s);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/SHA_Test.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+Put JSON files here.\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/data\/README","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,9 @@\n+# Automated Cryptographic Validation Test System Sample JSON files v1.1.0.36\n+\n+## License\n+\n+NIST-developed software is provided by NIST as a public service. You may use, copy, and distribute copies of the software in any medium, provided that you keep intact this entire notice. You may improve, modify, and create derivative works of the software or any portion of the software, and you may copy and distribute such modifications or works. Modified works should carry a notice stating that you changed the software and should note the date and nature of any such change. Please explicitly acknowledge the National Institute of Standards and Technology as the source of the software.\n+\n+NIST-developed software is expressly provided \"AS IS.\" NIST MAKES NO WARRANTY OF ANY KIND, EXPRESS, IMPLIED, IN FACT, OR ARISING BY OPERATION OF LAW, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND DATA ACCURACY. NIST NEITHER REPRESENTS NOR WARRANTS THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, OR THAT ANY DEFECTS WILL BE CORRECTED. NIST DOES NOT WARRANT OR MAKE ANY REPRESENTATIONS REGARDING THE USE OF THE SOFTWARE OR THE RESULTS THEREOF, INCLUDING BUT NOT LIMITED TO THE CORRECTNESS, ACCURACY, RELIABILITY, OR USEFULNESS OF THE SOFTWARE.\n+\n+You are solely responsible for determining the appropriateness of using and distributing the software and you assume all risks associated with its use, including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and the unavailability or interruption of operation. This software is not intended to be used in any situation where a failure could cause risk of injury or damage to property. The software developed by NIST employees is not subject to copyright protection within the United States.\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/data\/acvp.md","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"}]}