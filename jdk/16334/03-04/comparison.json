{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,0 +256,16 @@\n+bool AddNode::is_not(PhaseGVN* phase, Node* n, BasicType bt) {\n+  return n->Opcode() == Op_Xor(bt) && phase->type(n->in(2)) == TypeInteger::minus_1(bt);\n+}\n+\n+AddNode* AddNode::make_not(PhaseGVN* phase, Node*n, BasicType bt) {\n+  switch (bt) {\n+    case T_INT:\n+      return new XorINode(n, phase->intcon(-1));\n+    case T_LONG:\n+      return new XorLNode(n, phase->longcon(-1L));\n+    default:\n+      fatal(\"Not implemented for %s\", type2name(bt));\n+  }\n+  return nullptr;\n+}\n+\n@@ -771,18 +787,0 @@\n-\/\/ Check if the given node is a NOT operation, i.e., n == m ^ (-1).\n-static bool is_not(PhaseGVN* phase, Node* n, BasicType bt) {\n-  return n->Opcode() == Op_Xor(bt) && phase->type(n->in(2)) == TypeInteger::minus_1(bt);\n-}\n-\n-\/\/ Make a NOT operation, i.e., returning n ^ (-1).\n-static Node* make_not(PhaseGVN* phase, Node* n, BasicType bt) {\n-  switch (bt) {\n-    case T_INT:\n-      return new XorINode(n, phase->intcon(-1));\n-    case T_LONG:\n-      return new XorLNode(n, phase->longcon(-1L));\n-    default:\n-      fatal(\"Not implemented for %s\", type2name(bt));\n-  }\n-  return nullptr;\n-}\n-\n@@ -813,4 +811,4 @@\n-  if (is_not(phase, in(1), T_INT) && is_not(phase, in(2), T_INT)) {\n-    return make_not(phase,\n-                    phase->transform(new AndINode(in(1)->in(1), in(2)->in(1))),\n-                    T_INT);\n+  if (AddNode::is_not(phase, in(1), T_INT) && AddNode::is_not(phase, in(2), T_INT)) {\n+    Node* and_a_b = new AndINode(in(1)->in(1), in(2)->in(1));\n+    Node* tn = phase->transform(and_a_b);\n+    return AddNode::make_not(phase, tn, T_INT);\n@@ -886,4 +884,4 @@\n-  if (is_not(phase, in(1), T_LONG) && is_not(phase, in(2), T_LONG)) {\n-    return make_not(phase,\n-                    phase->transform(new AndLNode(in(1)->in(1), in(2)->in(1))),\n-                    T_LONG);\n+  if (AddNode::is_not(phase, in(1), T_LONG) && AddNode::is_not(phase, in(2), T_LONG)) {\n+    Node* and_a_b = new AndLNode(in(1)->in(1), in(2)->in(1));\n+    Node* tn = phase->transform(and_a_b);\n+    return AddNode::make_not(phase, tn, T_LONG);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":25,"deletions":27,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,7 @@\n+\n+  \/\/ Utility function to check if the given node is a NOT operation,\n+  \/\/ i.e., n == m ^ (-1).\n+  static bool is_not(PhaseGVN* phase, Node* n, BasicType bt);\n+\n+  \/\/ Utility function to make a NOT operation, i.e., returning n ^ (-1).\n+  static AddNode* make_not(PhaseGVN* phase, Node* n, BasicType bt);\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/OrINodeIdealizationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/OrLNodeIdealizationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}