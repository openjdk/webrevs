{"files":[{"patch":"@@ -809,0 +809,7 @@\n+\n+  \/\/ Convert \"~a | ~b\" into \"~(a & b)\"\n+  if (AddNode::is_not(phase, in(1), T_INT) && AddNode::is_not(phase, in(2), T_INT)) {\n+    Node* and_a_b = new AndINode(in(1)->in(1), in(2)->in(1));\n+    Node* tn = phase->transform(and_a_b);\n+    return AddNode::make_not(phase, tn, T_INT);\n+  }\n@@ -875,0 +882,8 @@\n+\n+  \/\/ Convert \"~a | ~b\" into \"~(a & b)\"\n+  if (AddNode::is_not(phase, in(1), T_LONG) && AddNode::is_not(phase, in(2), T_LONG)) {\n+    Node* and_a_b = new AndLNode(in(1)->in(1), in(2)->in(1));\n+    Node* tn = phase->transform(and_a_b);\n+    return AddNode::make_not(phase, tn, T_LONG);\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8322077\n+ * @summary Test that Ideal transformations on the De Morgan's Law performe\n+            as expected for int.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.DeMorganLawIntTests\n+ *\/\n+public class DeMorganLawIntTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\", \"test2\", \"test3\", \"test4\" })\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+        int b = RunInfo.getRandom().nextInt();\n+        int c = RunInfo.getRandom().nextInt();\n+        int d = RunInfo.getRandom().nextInt();\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0, 0, 0, 0);\n+        assertResult(a, b, c, d);\n+        assertResult(min, min, min, min);\n+        assertResult(max, max, max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a, int b, int c, int d) {\n+        Asserts.assertEQ((~a | ~b) & (~c | ~d), test1(a, b, c, d));\n+        Asserts.assertEQ((~a & ~b) | (~c & ~d), test2(a, b, c, d));\n+        Asserts.assertEQ((~a | ~b) | (~c | ~d), test3(a, b, c, d));\n+        Asserts.assertEQ((~a & ~b) & (~c & ~d), test4(a, b, c, d));\n+    }\n+\n+    \/\/ Checks (~a | ~b) & (~c | ~d)\n+    \/\/     => ~(a & b) & ~(c & d)\n+    \/\/     => ~((a & b) | (c & d))\n+    @Test\n+    @IR(counts = { IRNode.AND , \"2\",\n+                   IRNode.OR , \"1\",\n+                   IRNode.XOR, \"1\", })\n+    public int test1(int a, int b, int c, int d) {\n+        return (~a | ~b) & (~c | ~d);\n+    }\n+\n+    \/\/ Checks (~a & ~b) | (~c & ~d)\n+    \/\/     => ~(a | b) | ~(c | d)\n+    \/\/     => ~((a | b) & (c | d))\n+    @Test\n+    @IR(counts = { IRNode.AND , \"1\",\n+                   IRNode.OR , \"2\",\n+                   IRNode.XOR, \"1\", })\n+    public int test2(int a, int b, int c, int d) {\n+        return (~a & ~b) | (~c & ~d);\n+    }\n+\n+    \/\/ Checks (~a | ~b) | (~c | ~d)\n+    \/\/     => ~(a & b) | ~(c & d)\n+    \/\/     => ~((a & b) & (c & d))\n+    @Test\n+    @IR(failOn = { IRNode.OR })\n+    @IR(counts = { IRNode.AND , \"3\",\n+                   IRNode.XOR, \"1\", })\n+    public int test3(int a, int b, int c, int d) {\n+        return (~a | ~b) | (~c | ~d);\n+    }\n+\n+    \/\/ Checks (~a & ~b) & (~c & ~d)\n+    \/\/     => ~(a | b) & ~(c | d)\n+    \/\/     => ~((a | b) | (c | d))\n+    @Test\n+    @IR(failOn = { IRNode.AND })\n+    @IR(counts = { IRNode.OR , \"3\",\n+                   IRNode.XOR, \"1\", })\n+    public int test4(int a, int b, int c, int d) {\n+        return (~a & ~b) & (~c & ~d);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/DeMorganLawIntTests.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8322077\n+ * @summary Test that Ideal transformations on the De Morgan's Law performe\n+            as expected for long.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.DeMorganLawLongTests\n+ *\/\n+public class DeMorganLawLongTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\", \"test2\", \"test3\", \"test4\" })\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextLong();\n+        long b = RunInfo.getRandom().nextLong();\n+        long c = RunInfo.getRandom().nextLong();\n+        long d = RunInfo.getRandom().nextLong();\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(0, 0, 0, 0);\n+        assertResult(a, b, c, d);\n+        assertResult(min, min, min, min);\n+        assertResult(max, max, max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long a, long b, long c, long d) {\n+        Asserts.assertEQ((~a | ~b) & (~c | ~d), test1(a, b, c, d));\n+        Asserts.assertEQ((~a & ~b) | (~c & ~d), test2(a, b, c, d));\n+        Asserts.assertEQ((~a | ~b) | (~c | ~d), test3(a, b, c, d));\n+        Asserts.assertEQ((~a & ~b) & (~c & ~d), test4(a, b, c, d));\n+    }\n+\n+    \/\/ Checks (~a | ~b) & (~c | ~d)\n+    \/\/     => ~(a & b) & ~(c & d)\n+    \/\/     => ~((a & b) | (c & d))\n+    @Test\n+    @IR(counts = { IRNode.AND , \"2\",\n+                   IRNode.OR , \"1\",\n+                   IRNode.XOR, \"1\", })\n+    public long test1(long a, long b, long c, long d) {\n+        return (~a | ~b) & (~c | ~d);\n+    }\n+\n+    \/\/ Checks (~a & ~b) | (~c & ~d)\n+    \/\/     => ~(a | b) | ~(c | d)\n+    \/\/     => ~((a | b) & (c | d))\n+    @Test\n+    @IR(counts = { IRNode.AND , \"1\",\n+                   IRNode.OR , \"2\",\n+                   IRNode.XOR, \"1\", })\n+    public long test2(long a, long b, long c, long d) {\n+        return (~a & ~b) | (~c & ~d);\n+    }\n+\n+    \/\/ Checks (~a | ~b) | (~c | ~d)\n+    \/\/     => ~(a & b) | ~(c & d)\n+    \/\/     => ~((a & b) & (c & d))\n+    @Test\n+    @IR(failOn = { IRNode.OR })\n+    @IR(counts = { IRNode.AND , \"3\",\n+                   IRNode.XOR, \"1\", })\n+    public long test3(long a, long b, long c, long d) {\n+        return (~a | ~b) | (~c | ~d);\n+    }\n+\n+    \/\/ Checks (~a & ~b) & (~c & ~d)\n+    \/\/     => ~(a | b) & ~(c | d)\n+    \/\/     => ~((a | b) | (c | d))\n+    @Test\n+    @IR(failOn = { IRNode.AND })\n+    @IR(counts = { IRNode.OR , \"3\",\n+                   IRNode.XOR, \"1\", })\n+    public long test4(long a, long b, long c, long d) {\n+        return (~a & ~b) & (~c & ~d);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/DeMorganLawLongTests.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8322077\n+ * @summary Test that Ideal transformations of OrINode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.OrINodeIdealizationTests\n+ *\/\n+public class OrINodeIdealizationTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\" })\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+        int b = RunInfo.getRandom().nextInt();\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0, 0);\n+        assertResult(a, b);\n+        assertResult(min, min);\n+        assertResult(max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a, int b) {\n+        Asserts.assertEQ((~a) | (~b), test1(a, b));\n+    }\n+\n+    \/\/ Checks (~a) | (~b) => ~(a & b)\n+    @Test\n+    @IR(failOn = { IRNode.OR })\n+    @IR(counts = { IRNode.AND, \"1\",\n+                   IRNode.XOR, \"1\" })\n+    public int test1(int a, int b) {\n+        return (~a) | (~b);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/OrINodeIdealizationTests.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8322077\n+ * @summary Test that Ideal transformations of OrLNode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.OrLNodeIdealizationTests\n+ *\/\n+public class OrLNodeIdealizationTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\" })\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextLong();\n+        long b = RunInfo.getRandom().nextLong();\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(0, 0);\n+        assertResult(a, b);\n+        assertResult(min, min);\n+        assertResult(max, max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long a, long b) {\n+        Asserts.assertEQ((~a) | (~b), test1(a, b));\n+    }\n+\n+    \/\/ Checks (~a) | (~b) => ~(a & b)\n+    @Test\n+    @IR(failOn = { IRNode.OR })\n+    @IR(counts = { IRNode.AND, \"1\",\n+                   IRNode.XOR, \"1\" })\n+    public long test1(long a, long b) {\n+        return (~a) | (~b);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/OrLNodeIdealizationTests.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}