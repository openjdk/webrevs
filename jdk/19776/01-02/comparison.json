{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -403,3 +403,5 @@\n-      \/\/ Allow for \"<cmd> help\" to enable help diagnostic command\n-      \/\/ if the only argument provided is \"help\"\n-      if (strcmp(line.args_addr(), \" help\") == 0) {\n+      \/\/ Allow for \"<cmd> -help\" or \"<cmd> --help\" to enable\n+      \/\/ the help diagnostic command. Ignores any additional\n+      \/\/ arguments.\n+      const char *args = line.args_addr();\n+      if (strncmp(args, \" -help\", 6) == 0 || strncmp(args, \" --help\", 7) == 0) {\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Test to verify jcmd accepts the \"help\" suboption as a command argument\n+ * @summary Test to verify jcmd accepts the \"-help\" and \"--help\" suboptions as a command argument\n@@ -41,1 +41,2 @@\n-    private static final String HELP = \"help\";\n+    private static final String HELP_ONE_DASH = \"-help\";\n+    private static final String HELP_TWO_DASH = \"--help\";\n@@ -51,1 +52,1 @@\n-        output = JcmdBase.jcmd(HELP, CMD);\n+        output = JcmdBase.jcmd(\"help\", CMD);\n@@ -55,4 +56,2 @@\n-        \/\/ Check help as a suboption to the command is accepted i.e. \"<cmd> help\"\n-        output = JcmdBase.jcmd(CMD, HELP);\n-        String issuedOutput = output.getOutput();\n-        output.shouldNotContain(\"Unknown diagnostic command\");\n+        testExpectedUsage(HELP_ONE_DASH, expectedOutput);\n+        testExpectedUsage(HELP_TWO_DASH, expectedOutput);\n@@ -60,5 +59,2 @@\n-        if (!expectedOutput.equals(output.getOutput())) {\n-            printDifferingOutputs(expectedOutput, issuedOutput);\n-            throw new Exception(\"Expected jcmd to accept 'help' suboption as a command argument\" +\n-                                \" and issue the same help output.\");\n-        }\n+        testIgnoreAdditionalArgs(HELP_ONE_DASH, expectedOutput);\n+        testIgnoreAdditionalArgs(HELP_TWO_DASH, expectedOutput);\n@@ -66,4 +62,3 @@\n-        \/\/ Issue incorrect suboption to command argument containing 'help'\n-        String incorrectOpt = \"helpln;n\";\n-        output = JcmdBase.jcmd(CMD, incorrectOpt);\n-        output.shouldContain(\"Unknown argument \\'\" + incorrectOpt + \"\\' in diagnostic command.\");\n+        testIgnoreTrailingSpaces(HELP_ONE_DASH, expectedOutput);\n+        testIgnoreTrailingSpaces(HELP_TWO_DASH, expectedOutput);\n+    }\n@@ -71,3 +66,4 @@\n-        \/\/ Issue multiple suboptions along with 'help'\n-        output = JcmdBase.jcmd(CMD, HELP, \"basic\");\n-        output.shouldContain(\"Unknown argument \\'\" + HELP + \"\\' in diagnostic command.\");\n+    private static void testExpectedUsage(String helpOption, String expectedOutput) throws Exception {\n+        verifyOutput(new String[] {CMD, helpOption}, expectedOutput,\n+                \"Expected jcmd to accept '%s' suboption as a command argument and issue the same help output.\".formatted(helpOption));\n+    }\n@@ -75,7 +71,8 @@\n-        \/\/ Issue \"help\" suboption with trailing spaces\n-        output = JcmdBase.jcmd(CMD, \"help        \");\n-        issuedOutput = output.getOutput();\n-        if (!expectedOutput.equals(issuedOutput)) {\n-            printDifferingOutputs(expectedOutput, issuedOutput);\n-            throw new Exception(\"Expected jcmd to accept 'help' suboption with trailing spaces\");\n-        }\n+    private static void testIgnoreAdditionalArgs(String helpOption, String expectedOutput) throws Exception {\n+        verifyOutput(new String[] {CMD, helpOption, \"basic\"}, expectedOutput,\n+                \"Expected jcmd to accept '%s' suboption with additional arguments after help.\".formatted(helpOption));\n+    }\n+\n+    private static void testIgnoreTrailingSpaces(String helpOption, String expectedOutput) throws Exception {\n+        verifyOutput(new String[] {CMD, \"%s    \".formatted(helpOption)}, expectedOutput,\n+                \"Expected jcmd to accept '%s' suboption with trailing spaces\".formatted(helpOption));\n@@ -84,5 +81,10 @@\n-    private static void printDifferingOutputs(String expected, String issued) {\n-        System.out.println(\"Expected output: \");\n-        System.out.println(expected);\n-        System.out.println(\"Issued output: \");\n-        System.out.println(issued);\n+    private static void verifyOutput(String[] args, String expectedOutput, String errorMessage) throws Exception {\n+        OutputAnalyzer output = JcmdBase.jcmd(args);\n+        String issuedOutput = output.getOutput();\n+        if (!expectedOutput.equals(issuedOutput)) {\n+            System.out.println(\"Expected output: \");\n+            System.out.println(expectedOutput);\n+            System.out.println(\"Issued output: \");\n+            System.out.println(issuedOutput);\n+            throw new Exception(errorMessage);\n+        }\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestJcmdSubcommandHelp.java","additions":33,"deletions":31,"binary":false,"changes":64,"status":"modified"}]}