{"files":[{"patch":"@@ -64,2 +64,2 @@\n-  GCMode default_mode = concurrent_normal;\n-  GCCause::Cause default_cause = GCCause::_shenandoah_concurrent_gc;\n+  const GCMode default_mode = concurrent_normal;\n+  const GCCause::Cause default_cause = GCCause::_shenandoah_concurrent_gc;\n@@ -75,1 +75,1 @@\n-  double shrink_period = (double)ShenandoahUncommitDelay \/ 1000 \/ 10;\n+  const double shrink_period = (double)ShenandoahUncommitDelay \/ 1000 \/ 10;\n@@ -77,1 +77,1 @@\n-  ShenandoahCollectorPolicy* policy = heap->shenandoah_policy();\n+  ShenandoahCollectorPolicy* const policy = heap->shenandoah_policy();\n@@ -81,2 +81,3 @@\n-    bool alloc_failure_pending = _alloc_failure_gc.is_set();\n-    bool is_gc_requested = _gc_requested.is_set();\n+    const bool alloc_failure_pending = _alloc_failure_gc.is_set();\n+    const bool humongous_alloc_failure_pending = _humongous_alloc_failure_gc.is_set();\n+    const bool is_gc_requested = _gc_requested.is_set();\n@@ -84,2 +85,2 @@\n-    bool explicit_gc_requested = is_gc_requested && is_explicit_gc(requested_gc_cause);\n-    bool implicit_gc_requested = is_gc_requested && !is_explicit_gc(requested_gc_cause);\n+    const bool explicit_gc_requested = is_gc_requested && is_explicit_gc(requested_gc_cause);\n+    const bool implicit_gc_requested = is_gc_requested && !is_explicit_gc(requested_gc_cause);\n@@ -88,1 +89,1 @@\n-    size_t allocs_seen = Atomic::xchg(&_allocs_seen, (size_t)0, memory_order_relaxed);\n+    const size_t allocs_seen = Atomic::xchg(&_allocs_seen, (size_t)0, memory_order_relaxed);\n@@ -91,1 +92,1 @@\n-    bool soft_max_changed = heap->check_soft_max_changed();\n+    const bool soft_max_changed = heap->check_soft_max_changed();\n@@ -108,1 +109,3 @@\n-      if (ShenandoahDegeneratedGC && heuristics->should_degenerate_cycle()) {\n+      \/\/ If a humongous allocation has failed, then the heap is likely in need of compaction, so run\n+      \/\/ a full gc (which compacts regions) instead of a degenerated gc (which does not compatct regions).\n+      if (ShenandoahDegeneratedGC && heuristics->should_degenerate_cycle() && !humongous_alloc_failure_pending) {\n@@ -462,0 +465,1 @@\n+  bool is_humongous = req.size() > ShenandoahHeapRegion::humongous_threshold_words();\n@@ -463,1 +467,1 @@\n-  if (try_set_alloc_failure_gc()) {\n+  if (try_set_alloc_failure_gc(is_humongous)) {\n@@ -484,0 +488,1 @@\n+  bool is_humongous = words > ShenandoahHeapRegion::humongous_threshold_words();\n@@ -485,1 +490,1 @@\n-  if (try_set_alloc_failure_gc()) {\n+  if (try_set_alloc_failure_gc(is_humongous)) {\n@@ -497,0 +502,1 @@\n+  _humongous_alloc_failure_gc.unset();\n@@ -501,1 +507,4 @@\n-bool ShenandoahControlThread::try_set_alloc_failure_gc() {\n+bool ShenandoahControlThread::try_set_alloc_failure_gc(bool is_humongous) {\n+  if (is_humongous) {\n+    _humongous_alloc_failure_gc.try_set();\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":23,"deletions":14,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+  ShenandoahSharedFlag _humongous_alloc_failure_gc;\n@@ -71,0 +72,1 @@\n+  \/\/ Returns true if the cycle has been cancelled or degenerated.\n@@ -76,1 +78,4 @@\n-  bool try_set_alloc_failure_gc();\n+  \/\/ Return true if setting the flag which indicates allocation failure succeeds.\n+  bool try_set_alloc_failure_gc(bool is_humongous);\n+\n+  \/\/ Notify threads waiting for GC to complete.\n@@ -78,0 +83,2 @@\n+\n+  \/\/ True if allocation failure flag has been set.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}