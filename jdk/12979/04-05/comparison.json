{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -37,0 +38,1 @@\n+import java.util.HashSet;\n@@ -38,0 +40,2 @@\n+import java.util.Set;\n+import java.util.stream.Collectors;\n@@ -114,0 +118,2 @@\n+        Set<String> entries = new HashSet<>();\n+\n@@ -121,0 +127,1 @@\n+                        entries.add(file.getFileName().toString());\n@@ -128,0 +135,2 @@\n+        \/\/ Sanity check that ZIP file had the expected entries\n+        assertEquals(entries, Set.of(\"entry\", \"entry2\", \"entry3\"));\n@@ -139,0 +148,4 @@\n+\n+            \/\/ Sanity check that ZIP file had the expected entries\n+            assertEquals(zip.stream().map(ZipEntry::getName).collect(Collectors.toSet()),\n+                    Set.of(\"entry\", \"entry2\", \"entry3\"));\n@@ -178,0 +191,6 @@\n+            \/\/ For good measure, add a third, DEFLATED entry with some content\n+            ZipEntry e3 = new ZipEntry(\"entry3\");\n+            e3.setMethod(ZipEntry.DEFLATED);\n+            zo.putNextEntry(e3);\n+            zo.write(\"Hello\".getBytes(StandardCharsets.UTF_8));\n+\n@@ -225,3 +244,2 @@\n-        \/\/ Skip past two Local Headers to find the offset of the first CEN\n-        int secondLoc = skipLoc(buffer, 0);\n-        int cenOff = skipLoc(buffer, secondLoc);\n+        \/\/ Look up CEN offset from the End of central directory header\n+        int cenOff = getCenOffet(buffer);\n@@ -250,1 +268,1 @@\n-     * Return the offset of the header following the Local Header starting at off\n+     * Look up the CEN offset field from the End of central directory header\n@@ -252,8 +270,2 @@\n-    private static int skipLoc(ByteBuffer buffer, int off) {\n-        \/\/ Local header name length\n-        short nlenLoc = buffer.getShort(off + ZipFile.LOCNAM);\n-        \/\/ Local header extra field length\n-        short elenLoc = buffer.getShort(off + ZipFile.LOCEXT);\n-\n-        \/\/ Offset of the next header\n-        return off + ZipFile.LOCHDR + nlenLoc + elenLoc;\n+    private static int getCenOffet(ByteBuffer buffer) {\n+        return buffer.getInt(buffer.capacity() - ZipFile.ENDHDR + ZipFile.ENDOFF);\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestLocOffsetFromZip64EF.java","additions":24,"deletions":12,"binary":false,"changes":36,"status":"modified"}]}