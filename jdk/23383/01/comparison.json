{"files":[{"patch":"@@ -242,1 +242,1 @@\n-            return ParseUtil.fileToEncodedURL(f);\n+            return f.toPath().toUri().toURL();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -232,16 +232,0 @@\n-    public static URL fileToEncodedURL(File file)\n-        throws MalformedURLException\n-    {\n-        String path = file.getAbsolutePath();\n-        path = ParseUtil.encodePath(path);\n-        if (!path.startsWith(\"\/\")) {\n-            path = \"\/\" + path;\n-        }\n-        if (!path.endsWith(\"\/\") && file.isDirectory()) {\n-            path = path + \"\/\";\n-        }\n-        @SuppressWarnings(\"deprecation\")\n-        var result = new URL(\"file\", \"\", path);\n-        return result;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/ParseUtil.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,197 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+\n+import jdk.internal.loader.Resource;\n+import jdk.internal.loader.URLClassPath;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assumptions.abort;\n+\n+\/*\n+ * @test\n+ * @bug 8258246\n+ * @summary verify that when locating resources, the URLClassPath can function properly\n+ *          when classpath elements contain Unicode characters with two, three or four\n+ *          byte UTF-8 encodings\n+ * @modules java.base\/jdk.internal.loader\n+ * @run junit ClassPathUnicodeChars\n+ *\/\n+public class ClassPathUnicodeChars {\n+\n+    private static final Path SCRATCH_DIR = Path.of(\".\").normalize();\n+    private static final String RESOURCE_NAME = \"foo.txt\";\n+    private static final String TWO_BYTE_CHAR = \"\\u00C4\";\n+    private static final String THREE_BYTE_CHAR = \"\\u20AC\";\n+    private static final String FOUR_BYTE_CHAR = \"\\uD83D\\uDE00\";\n+\n+    private static Path TWO_BYTE_CHAR_DIR;\n+    private static Path THREE_BYTE_CHAR_DIR;\n+    private static Path FOUR_BYTE_CHAR_DIR;\n+    private static Path JAR_FILE_IN_TWO_BYTE_CHAR_DIR;\n+    private static Path JAR_FILE_IN_THREE_BYTE_CHAR_DIR;\n+    private static Path JAR_FILE_IN_FOUR_BYTE_CHAR_DIR;\n+    private static int NUM_EXPECTED_LOCATED_RESOURCES;\n+\n+    @BeforeAll\n+    static void beforeAll() throws Exception {\n+        try {\n+            TWO_BYTE_CHAR_DIR = Files.createTempDirectory(SCRATCH_DIR, TWO_BYTE_CHAR);\n+            THREE_BYTE_CHAR_DIR = Files.createTempDirectory(SCRATCH_DIR, THREE_BYTE_CHAR);\n+            FOUR_BYTE_CHAR_DIR = Files.createTempDirectory(SCRATCH_DIR, FOUR_BYTE_CHAR);\n+        } catch (IllegalArgumentException iae) {\n+            iae.printStackTrace(); \/\/ for debug purpose\n+            \/\/ if we can't create a directory with these characters in their\n+            \/\/ path name then skip the entire test\n+            abort(\"Skipping test since directory couldn't be created: \" + iae);\n+        }\n+        \/\/ successful creation of the dir, continue with the test\n+        Files.createFile(TWO_BYTE_CHAR_DIR.resolve(RESOURCE_NAME));\n+        Files.createFile(THREE_BYTE_CHAR_DIR.resolve(RESOURCE_NAME));\n+        Files.createFile(FOUR_BYTE_CHAR_DIR.resolve(RESOURCE_NAME));\n+\n+        \/\/ create jar files containing the resource\n+        JAR_FILE_IN_TWO_BYTE_CHAR_DIR = Files.createTempDirectory(SCRATCH_DIR, TWO_BYTE_CHAR)\n+                .resolve(\"foo.jar\");\n+        JAR_FILE_IN_THREE_BYTE_CHAR_DIR = Files.createTempDirectory(SCRATCH_DIR, THREE_BYTE_CHAR)\n+                .resolve(\"foo.jar\");\n+        JAR_FILE_IN_FOUR_BYTE_CHAR_DIR = Files.createTempDirectory(SCRATCH_DIR, FOUR_BYTE_CHAR)\n+                .resolve(\"foo.jar\");\n+        for (Path jarFile : Arrays.asList(\n+                JAR_FILE_IN_TWO_BYTE_CHAR_DIR,\n+                JAR_FILE_IN_THREE_BYTE_CHAR_DIR,\n+                JAR_FILE_IN_FOUR_BYTE_CHAR_DIR)) {\n+            final Manifest manifest = new Manifest();\n+            manifest.getMainAttributes().putValue(\"Manifest-Version\", \"1.0\");\n+            try (OutputStream fos = Files.newOutputStream(jarFile);\n+                    JarOutputStream jos = new JarOutputStream(fos, manifest)) {\n+\n+                final JarEntry jarEntry = new JarEntry(RESOURCE_NAME);\n+                jos.putNextEntry(jarEntry);\n+                jos.write(\"hello\".getBytes(US_ASCII));\n+                jos.closeEntry();\n+            }\n+        }\n+        \/\/ We expect to find the resource in all classpath elements.\n+        NUM_EXPECTED_LOCATED_RESOURCES = 6;\n+    }\n+\n+    \/**\n+     * Constructs a URLClassPath and then exercises the URLClassPath.findResource()\n+     * and URLClassPath.findResources() methods and expects them to return the\n+     * expected\n+     * resources.\n+     *\/\n+    @Test\n+    void testFindResource() {\n+        \/\/ start an empty URL classpath\n+        final URLClassPath urlc = new URLClassPath(new URL[0]);\n+        final String[] classpathElements = getClassPathElements();\n+        try {\n+            \/\/ use addFile() to construct classpath\n+            for (final String path : classpathElements) {\n+                urlc.addFile(path);\n+            }\n+            \/\/ findResource()\n+            assertNotNull(urlc.findResource(RESOURCE_NAME), \"findResource() failed to locate\"\n+                    + \" resource: \" + RESOURCE_NAME + \" in classpath: \"\n+                    + Arrays.toString(classpathElements));\n+            \/\/ findResources()\n+            final Enumeration<URL> locatedResources = urlc.findResources(RESOURCE_NAME);\n+            assertNotNull(locatedResources, \"findResources() failed to\"\n+                    + \" locate resource: \" + RESOURCE_NAME + \" in classpath: \"\n+                    + Arrays.toString(classpathElements));\n+            int numFound = 0;\n+            while (locatedResources.hasMoreElements()) {\n+                System.out.println(\"located \" + locatedResources.nextElement()\n+                        + \" for resource \" + RESOURCE_NAME);\n+                numFound++;\n+            }\n+            assertEquals(NUM_EXPECTED_LOCATED_RESOURCES, numFound,\n+                    \"unexpected number of resources located for \" + RESOURCE_NAME);\n+        } finally {\n+            urlc.closeLoaders();\n+        }\n+    }\n+\n+    \/**\n+     * Constructs a URLClassPath and then exercises the URLClassPath.getResource()\n+     * and URLClassPath.getResources() methods and expects them to return the\n+     * expected\n+     * resources.\n+     *\/\n+    @Test\n+    void testGetResource() {\n+        \/\/ start an empty URL classpath\n+        final URLClassPath urlc = new URLClassPath(new URL[0]);\n+        final String[] classpathElements = getClassPathElements();\n+        try {\n+            \/\/ use addFile() to construct classpath\n+            for (final String path : classpathElements) {\n+                urlc.addFile(path);\n+            }\n+            \/\/ getResource()\n+            assertNotNull(urlc.getResource(RESOURCE_NAME), \"getResource() failed to locate\"\n+                    + \" resource: \" + RESOURCE_NAME + \" in classpath: \"\n+                    + Arrays.toString(classpathElements));\n+            \/\/ getResources()\n+            final Enumeration<Resource> locatedResources = urlc.getResources(RESOURCE_NAME);\n+            assertNotNull(locatedResources, \"getResources() failed to\"\n+                    + \" locate resource: \" + RESOURCE_NAME + \" in classpath: \"\n+                    + Arrays.toString(classpathElements));\n+            int numFound = 0;\n+            while (locatedResources.hasMoreElements()) {\n+                System.out.println(\"located \" + locatedResources.nextElement().getURL()\n+                        + \" for resource \" + RESOURCE_NAME);\n+                numFound++;\n+            }\n+            assertEquals(NUM_EXPECTED_LOCATED_RESOURCES, numFound,\n+                    \"unexpected number of resources located for \" + RESOURCE_NAME);\n+        } finally {\n+            urlc.closeLoaders();\n+        }\n+    }\n+\n+    private static String[] getClassPathElements() {\n+        return new String[] {\n+                TWO_BYTE_CHAR_DIR.toString(),\n+                THREE_BYTE_CHAR_DIR.toString(),\n+                FOUR_BYTE_CHAR_DIR.toString(),\n+                JAR_FILE_IN_TWO_BYTE_CHAR_DIR.toString(),\n+                JAR_FILE_IN_THREE_BYTE_CHAR_DIR.toString(),\n+                JAR_FILE_IN_FOUR_BYTE_CHAR_DIR.toString()\n+        };\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/ClassPathUnicodeChars.java","additions":197,"deletions":0,"binary":false,"changes":197,"status":"added"},{"patch":"@@ -92,5 +92,3 @@\n-        \/\/ Even if the resource is present in more than one classpath element,\n-        \/\/ we expect it to be found by the URLClassPath only in the path which has just ascii\n-        \/\/ characters. URLClassPath currently doesn't have the ability to serve resources\n-        \/\/ from paths containing emoji character(s).\n-        NUM_EXPECTED_LOCATED_RESOURCES = 1;\n+        \/\/ We expect to find the resource in all but the first (non-existent)\n+        \/\/ classpath element.\n+        NUM_EXPECTED_LOCATED_RESOURCES = 3;\n@@ -174,3 +172,3 @@\n-        \/\/ Maintain the order - in context of this test, paths with emojis\n-        \/\/ or those which can't serve the resource should come before the\n-        \/\/ path that can serve the resource.\n+        \/\/ Maintain the order - in context of this test, the path that can't\n+        \/\/ serve the resource should come before the paths that can serve the\n+        \/\/ resource.\n","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/ClassPathUnusableURLs.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"}]}