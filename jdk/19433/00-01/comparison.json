{"files":[{"patch":"@@ -39,2 +39,3 @@\n- * Benchmark measuring the speed of Method\/Method.getExceptionTypes() and\n- * getParameterTypes(), in cases where the result array is length zero.\n+ * Benchmark measuring the speed of Method\/Method.getExceptionTypes(),\n+ * getParameterTypes() in cases where the result array is length zero,\n+ * and hashCode().\n@@ -53,0 +54,1 @@\n+    Method hashCodeMethod;\n@@ -61,0 +63,2 @@\n+\n+            hashCodeMethod = String.class.getDeclaredMethod(\"toString\");\n@@ -85,0 +89,5 @@\n+\n+    @Benchmark\n+    public int getMethodHashCode() {\n+        return hashCodeMethod.hashCode();\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/MethodBenchmark.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.lang.reflect;\n-\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.infra.Blackhole;\n-\n-import java.lang.reflect.Method;\n-import java.util.concurrent.TimeUnit;\n-\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@State(Scope.Thread)\n-@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n-@Fork(3)\n-public class MethodHashCode {\n-    Method method;\n-\n-    @Setup\n-    public void setup() throws NoSuchMethodException {\n-        method = String.class.getDeclaredMethod(\"toString\");\n-    }\n-\n-    @Benchmark\n-    public void benchmarkHashCode(Blackhole bh) {\n-        bh.consume(method.hashCode());\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/MethodHashCode.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"}]}