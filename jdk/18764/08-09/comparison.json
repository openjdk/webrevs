{"files":[{"patch":"@@ -65,1 +65,1 @@\n-    public static final boolean sslOn;\n+    static EnumSet<ComponentToken> activeComponents = EnumSet.noneOf(ComponentToken.class);\n@@ -75,1 +75,1 @@\n-                if (property.equals(\"help\")) {\n+                if (property.contains(\"help\")) {\n@@ -79,0 +79,21 @@\n+                String tmpProperty = property;\n+                for (ComponentToken o : ComponentToken.values()) {\n+                    if (tmpProperty.contains(o.component)) {\n+                        activeComponents.add(o);\n+                        \/\/ remove the pattern to avoid it being reused\n+                        \/\/ e.g. \"ssl,sslctx\" parsing\n+                        tmpProperty = tmpProperty.replaceFirst(o.component, \"\");\n+                    }\n+                }\n+                \/\/ some rules to check\n+                if ((activeComponents.contains(ComponentToken.PLAINTEXT)\n+                        || activeComponents.contains(ComponentToken.PACKET))\n+                        && !activeComponents.contains(ComponentToken.RECORD)) {\n+                    activeComponents.remove(ComponentToken.PLAINTEXT);\n+                    activeComponents.remove(ComponentToken.PACKET);\n+                }\n+\n+                if (activeComponents.contains(ComponentToken.VERBOSE)\n+                        && !activeComponents.contains(ComponentToken.HANDSHAKE)) {\n+                    activeComponents.remove(ComponentToken.VERBOSE);\n+                }\n@@ -80,11 +101,2 @@\n-            isOn = true;\n-            \/\/ log almost everything for the \"ssl\" value.\n-            \/\/ anything else specified with \"ssl\" value implies\n-            \/\/ a subset of ssl debugging statements. The separator value\n-            \/\/ for subset values has never been specified.\n-            \/\/ Allow the expand operator here also (e.g. ssl:expand)\n-            sslOn = property.equals(\"ssl\") ||\n-                    (property.startsWith(\"ssl\")\n-                            && property.length() == 10\n-                            && !Character.isLetterOrDigit(property.charAt(3))\n-                            && property.endsWith(\"expand\"));\n+            isOn = (property.isEmpty() || property.equals(\"all\"))\n+                    || activeComponents.contains(ComponentToken.SSL);\n@@ -95,1 +107,0 @@\n-            sslOn = false;\n@@ -138,2 +149,2 @@\n-        if (property == null) {\n-            \/\/ debugging is turned off\n+\n+        if (!isOn) {\n@@ -141,1 +152,3 @@\n-        } else if (property.isEmpty() || property.equals(\"all\")) {\n+        }\n+\n+        if (property.isEmpty() || property.equals(\"all\")) {\n@@ -144,6 +157,8 @@\n-        } else if (checkPoints.equals(\"ssl\") && !sslOn) {\n-            \/\/ this helps prevent cases where property might have\n-            \/\/ been specified as \"ssltypo\" -- shouldn't log.\n-            return false;\n-        } else if (sslOn && !containsWidenOption(checkPoints)) {\n-            \/\/ fast path - in sslOn mode, we always log except for widen options\n+        }\n+\n+        if (checkPoints.equals(\"ssl\")) {\n+            return !ComponentToken.isSslFilteringEnabled();\n+        }\n+\n+        if (activeComponents.size() == 1 && !containsWidenOption(checkPoints)) {\n+            \/\/ in ssl mode, we always log except for widen options\n@@ -166,1 +181,2 @@\n-                || options.contains(\"packet\");\n+                || options.contains(\"packet\")\n+                || options.contains(\"expand\");\n@@ -224,0 +240,33 @@\n+    enum ComponentToken {\n+        DEFAULTCTX,\n+        HANDSHAKE,\n+        KEYMANAGER,\n+        RECORD,\n+        RESPMGR,\n+        SESSION,\n+        SSLCTX,\n+        TRUSTMANAGER,\n+        VERBOSE,\n+        PLAINTEXT,\n+        PACKET,\n+        SSL; \/\/ define ssl last, helps with sslctx matching later.\n+\n+        final String component;\n+\n+        ComponentToken() {\n+            this.component = this.toString().toLowerCase(Locale.ROOT);\n+        }\n+\n+        static boolean isSslFilteringEnabled() {\n+            return activeComponents.contains(DEFAULTCTX)\n+                    || activeComponents.contains(HANDSHAKE)\n+                    || activeComponents.contains(KEYMANAGER)\n+                    || activeComponents.contains(RECORD)\n+                    || activeComponents.contains(RESPMGR)\n+                    || activeComponents.contains(SESSION)\n+                    || activeComponents.contains(SSLCTX)\n+                    || activeComponents.contains(TRUSTMANAGER);\n+        }\n+    }\n+\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLLogger.java","additions":73,"deletions":24,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -87,1 +87,2 @@\n-                 Arguments.of(List.of(\"-Djavax.net.debug=ssl:record,expand\"),\n+                \/\/ filtering on record option, with expand\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:record,expand\"),\n@@ -93,0 +94,1 @@\n+                \/\/ plaintext gets ignored. treat like \"ssl\"\n@@ -94,3 +96,1 @@\n-                        null,\n-                        List.of(\"Plaintext before ENCRYPTION\",\n-                                \"jdk.tls.keyLimits:\",\n+                        List.of(\"adding as trusted certificates\",\n@@ -98,1 +98,2 @@\n-                                \"length =\")),\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n@@ -108,1 +109,1 @@\n-                \/\/ nothing should be printed, typo is invalid\n+                \/\/ ignore bad sub-option. treat like \"ssl\"\n@@ -110,5 +111,11 @@\n-                        null,\n-                        List.of(\"trigger seeding of SecureRandom\",\n-                                \"jdk.tls.keyLimits:\",\n-                                \"matching alias:\",\n-                                \"Plaintext before ENCRYPTION\")),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ ssltypo contains \"ssl\". Treat like \"ssl\"\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssltypo\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ plaintext is valid for record option\n@@ -127,6 +134,0 @@\n-                \/\/ ssltypo contains \"ssl\" but it's an invalid option\n-                Arguments.of(List.of(\"-Djavax.net.debug=ssltypo\"),\n-                        null,\n-                        List.of(\"Plaintext before ENCRYPTION\",\n-                                \"adding as trusted certificates\",\n-                                \"length =\")),\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/DebugPropertyValues.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"}]}