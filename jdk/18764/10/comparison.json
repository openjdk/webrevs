{"files":[{"patch":"@@ -504,1 +504,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"handshake\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n@@ -514,1 +514,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"handshake\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateMessage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -153,1 +153,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -165,1 +165,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -184,1 +184,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -244,1 +245,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -276,1 +278,2 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -299,1 +302,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -751,1 +754,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -837,1 +841,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -861,1 +865,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -897,1 +901,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -1029,1 +1033,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1075,1 +1080,2 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1088,1 +1094,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1126,1 +1133,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1147,1 +1155,2 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                        if (SSLLogger.isOn &&\n+                                SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1159,1 +1168,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1244,1 +1254,2 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1256,1 +1267,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1273,1 +1285,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1295,1 +1308,2 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                        if (SSLLogger.isOn &&\n+                                SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1446,1 +1460,2 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1454,1 +1469,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1467,1 +1483,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1481,1 +1498,2 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1493,1 +1511,2 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1507,1 +1526,2 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1519,1 +1539,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1542,1 +1563,2 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1556,1 +1578,2 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                        if (SSLLogger.isOn &&\n+                                SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1567,1 +1590,2 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1580,1 +1604,2 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1594,1 +1619,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSInputRecord.java","additions":58,"deletions":33,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -272,1 +272,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -285,1 +285,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -500,1 +500,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -514,1 +514,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSOutputRecord.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -286,1 +286,2 @@\n-                } else if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                } else if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -293,1 +294,2 @@\n-            if (!found && (SSLLogger.isOn) && SSLLogger.isOn(\"handshake\")) {\n+            if (!found && (SSLLogger.isOn) &&\n+                    SSLLogger.isOn(\"ssl,handshake\")) {\n@@ -337,1 +339,2 @@\n-                        SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                        SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -558,1 +561,2 @@\n-                                SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                                SSLLogger.isOn &&\n+                                SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -572,1 +576,2 @@\n-            if (!retval && SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+            if (!retval && SSLLogger.isOn &&\n+                    SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -578,1 +583,1 @@\n-        } else if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+        } else if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HandshakeContext.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -711,1 +711,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"handshake\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/KeyShareExtension.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"sslctx\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,sslctx\")) {\n@@ -265,1 +265,1 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"sslctx\")) {\n+                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,sslctx\")) {\n@@ -282,1 +282,1 @@\n-            } else if (SSLLogger.isOn && SSLLogger.isOn(\"sslctx\")) {\n+            } else if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,sslctx\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PredefinedDHParameterSpecs.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -863,1 +863,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -933,1 +933,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1053,1 +1053,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1185,1 +1185,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1329,1 +1329,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1481,1 +1481,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1653,1 +1653,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1740,1 +1740,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1935,1 +1935,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -2029,1 +2029,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -2185,1 +2185,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -2276,1 +2276,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -2454,1 +2454,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -2545,1 +2545,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLCipher.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -386,1 +386,1 @@\n-                            SSLLogger.isOn(\"ssl,sslctx,verbose\")) {\n+                            SSLLogger.isOn(\"ssl,handshake\")) {\n@@ -395,1 +395,1 @@\n-                        SSLLogger.isOn(\"ssl,sslctx,verbose\")) {\n+                        SSLLogger.isOn(\"ssl,handshake\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLContextImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,verbose\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -615,1 +615,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -212,1 +212,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -391,1 +391,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -413,1 +413,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineInputRecord.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -278,1 +278,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -291,1 +291,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -320,1 +320,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -335,1 +335,1 @@\n-                if (SSLLogger.isOn(\"record\")) {\n+                if (SSLLogger.isOn(\"ssl,record\")) {\n@@ -341,1 +341,1 @@\n-                if (SSLLogger.isOn(\"packet\")) {\n+                if (SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -528,1 +528,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -546,1 +546,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineOutputRecord.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+    static EnumSet<ComponentToken> activeComponents = EnumSet.noneOf(ComponentToken.class);\n@@ -71,0 +72,1 @@\n+                activeComponents.add(ComponentToken.EMPTYALL);\n@@ -73,1 +75,1 @@\n-                if (property.equals(\"help\")) {\n+                if (property.contains(\"help\")) {\n@@ -76,1 +78,0 @@\n-\n@@ -78,0 +79,25 @@\n+                if (property.contains(\"all\")) {\n+                    activeComponents.add(ComponentToken.EMPTYALL);\n+                } else {\n+                    String tmpProperty = property;\n+                    for (ComponentToken o : ComponentToken.values()) {\n+                        if (tmpProperty.contains(o.component)) {\n+                            activeComponents.add(o);\n+                            \/\/ remove the pattern to avoid it being reused\n+                            \/\/ e.g. \"ssl,sslctx\" parsing\n+                            tmpProperty = tmpProperty.replaceFirst(o.component, \"\");\n+                        }\n+                    }\n+                    \/\/ some rules to check\n+                    if ((activeComponents.contains(ComponentToken.PLAINTEXT)\n+                            || activeComponents.contains(ComponentToken.PACKET))\n+                            && !activeComponents.contains(ComponentToken.RECORD)) {\n+                        activeComponents.remove(ComponentToken.PLAINTEXT);\n+                        activeComponents.remove(ComponentToken.PACKET);\n+                    }\n+\n+                    if (activeComponents.contains(ComponentToken.VERBOSE)\n+                            && !activeComponents.contains(ComponentToken.HANDSHAKE)) {\n+                        activeComponents.remove(ComponentToken.VERBOSE);\n+                    }\n+                }\n@@ -79,1 +105,2 @@\n-            isOn = true;\n+            isOn = activeComponents.contains(ComponentToken.EMPTYALL)\n+                    || activeComponents.contains(ComponentToken.SSL);\n@@ -89,2 +116,2 @@\n-        System.err.println(\"help           print the help messages\");\n-        System.err.println(\"expand         expand debugging information\");\n+        System.err.println(\"help           print this help message and exit\");\n+        System.err.println(\"expand         expanded (less compact) output format\");\n@@ -96,1 +123,1 @@\n-        System.err.println(\"\\trecord       enable per-record tracing\");\n+        System.err.println(\"\\tdefaultctx   print default SSL initialization\");\n@@ -98,1 +125,3 @@\n-        System.err.println(\"\\tkeygen       print key generation data\");\n+        System.err.println(\"\\tkeymanager   print key manager tracing\");\n+        System.err.println(\"\\trecord       enable per-record tracing\");\n+        System.err.println(\"\\trespmgr      print OCSP response tracing\");\n@@ -100,1 +129,0 @@\n-        System.err.println(\"\\tdefaultctx   print default SSL initialization\");\n@@ -102,2 +130,0 @@\n-        System.err.println(\"\\tsessioncache print session cache tracing\");\n-        System.err.println(\"\\tkeymanager   print key manager tracing\");\n@@ -105,1 +131,0 @@\n-        System.err.println(\"\\tpluggability print pluggability tracing\");\n@@ -108,2 +133,1 @@\n-        System.err.println(\"\\tdata         hex dump of each handshake message\");\n-        System.err.println(\"\\tverbose      verbose handshake message printing\");\n+        System.err.println(\"\\tverbose   verbose handshake message printing\");\n@@ -120,1 +144,7 @@\n-     * debug check points, or System.Logger is used.\n+     * debug check points, \"all\" or if the System.Logger is used.\n+     *\n+     * Specify all string tokens required when calling this method.\n+     * E.g. since \"plaintext\" is a widened option of the \"record\" option,\n+     * the call needs to be isOn(\"ssl,record,plaintext\") to ensure\n+     * correct use. It also ensures that the user specifies the correct\n+     * system property value syntax as per help menu.\n@@ -123,1 +153,1 @@\n-        if (property == null) {              \/\/ debugging is turned off\n+        if (!isOn) {\n@@ -125,1 +155,4 @@\n-        } else if (property.isEmpty()) {     \/\/ use System.Logger\n+        }\n+\n+        if (activeComponents.contains(ComponentToken.EMPTYALL)) {\n+            \/\/ System.Logger in use or property = \"all\"\n@@ -127,1 +160,10 @@\n-        }                                   \/\/ use provider logger\n+        }\n+\n+        if (checkPoints.equals(\"ssl\")) {\n+            return !ComponentToken.isSslFilteringEnabled();\n+        }\n+\n+        if (activeComponents.size() == 1 && !containsWidenOption(checkPoints)) {\n+            \/\/ in ssl mode, we always log except for widen options\n+            return true;\n+        }\n@@ -131,2 +173,2 @@\n-            option = option.trim();\n-            if (!SSLLogger.hasOption(option)) {\n+            option = option.trim().toLowerCase(Locale.ROOT);\n+            if (!property.contains(option)) {\n@@ -136,1 +178,0 @@\n-\n@@ -140,17 +181,5 @@\n-    private static boolean hasOption(String option) {\n-        option = option.toLowerCase(Locale.ENGLISH);\n-        if (property.contains(\"all\")) {\n-            return true;\n-        } else {\n-            int offset = property.indexOf(\"ssl\");\n-            if (offset != -1 && property.indexOf(\"sslctx\", offset) != -1) {\n-                \/\/ don't enable data and plaintext options by default\n-                if (!(option.equals(\"data\")\n-                        || option.equals(\"packet\")\n-                        || option.equals(\"plaintext\"))) {\n-                    return true;\n-                }\n-            }\n-        }\n-\n-        return property.contains(option);\n+    private static boolean containsWidenOption(String options) {\n+        return options.contains(\"verbose\")\n+                || options.contains(\"plaintext\")\n+                || options.contains(\"packet\")\n+                || options.contains(\"expand\");\n@@ -189,3 +218,1 @@\n-                    String formatted =\n-                            SSLSimpleFormatter.formatParameters(params);\n-                    logger.log(level, msg, formatted);\n+                     logger.log(level, () -> msg + \":\\n\" + SSLSimpleFormatter.formatParameters(params));\n@@ -216,0 +243,34 @@\n+    enum ComponentToken {\n+        EMPTYALL,\n+        DEFAULTCTX,\n+        HANDSHAKE,\n+        KEYMANAGER,\n+        RECORD,\n+        RESPMGR,\n+        SESSION,\n+        SSLCTX,\n+        TRUSTMANAGER,\n+        VERBOSE,\n+        PLAINTEXT,\n+        PACKET,\n+        SSL; \/\/ define ssl last, helps with sslctx matching later.\n+\n+        final String component;\n+\n+        ComponentToken() {\n+            this.component = this.toString().toLowerCase(Locale.ROOT);\n+        }\n+\n+        static boolean isSslFilteringEnabled() {\n+            return activeComponents.contains(DEFAULTCTX)\n+                    || activeComponents.contains(HANDSHAKE)\n+                    || activeComponents.contains(KEYMANAGER)\n+                    || activeComponents.contains(RECORD)\n+                    || activeComponents.contains(RESPMGR)\n+                    || activeComponents.contains(SESSION)\n+                    || activeComponents.contains(SSLCTX)\n+                    || activeComponents.contains(TRUSTMANAGER);\n+        }\n+    }\n+\n+\n@@ -283,1 +344,1 @@\n-        private static final MessageFormat extendedCertFormart =\n+        private static final MessageFormat extendedCertFormat =\n@@ -300,9 +361,0 @@\n-        \/\/\n-        \/\/ private static MessageFormat certExtFormat = new MessageFormat(\n-        \/\/         \"{0} [{1}] '{'\\n\" +\n-        \/\/         \"  critical: {2}\\n\" +\n-        \/\/         \"  value: {3}\\n\" +\n-        \/\/         \"'}'\",\n-        \/\/         Locale.ENGLISH);\n-        \/\/\n-\n@@ -522,1 +574,1 @@\n-                            extendedCertFormart.format(certFields)));\n+                            extendedCertFormat.format(certFields)));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLLogger.java","additions":103,"deletions":51,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,1 +157,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"handshake\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLMasterKeyDerivation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"session\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,session\")) {\n@@ -253,1 +253,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"session\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,session\")) {\n@@ -939,1 +939,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"session\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,session\")) {\n@@ -1209,1 +1209,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"session\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,session\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSessionImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -373,1 +373,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"handshake\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,1 +213,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -246,1 +246,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -410,1 +410,1 @@\n-                    if (SSLLogger.isOn(\"record\")) {\n+                    if (SSLLogger.isOn(\"ssl,record\")) {\n@@ -415,1 +415,1 @@\n-                    if (SSLLogger.isOn(\"packet\")) {\n+                    if (SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -448,1 +448,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -491,1 +491,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -497,1 +497,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketInputRecord.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -84,1 +84,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -130,1 +130,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -144,1 +144,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -180,1 +180,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -194,1 +194,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -234,1 +234,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -260,1 +260,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -274,1 +274,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -333,1 +333,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -348,1 +348,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketOutputRecord.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n@@ -184,1 +184,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLTransport.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -128,1 +128,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -168,1 +168,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -195,1 +195,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -222,1 +222,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -229,1 +229,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -260,1 +260,2 @@\n-                            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                            if (SSLLogger.isOn &&\n+                                    SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -270,1 +271,1 @@\n-                                SSLLogger.isOn(\"respmgr\")) {\n+                                SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -275,1 +276,1 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -283,1 +284,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -311,1 +312,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -326,1 +327,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -333,1 +334,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -496,1 +497,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -508,1 +509,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -514,1 +515,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -544,1 +545,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -557,1 +558,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -576,1 +577,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -581,1 +582,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/StatusResponseManager.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,1 +159,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -387,1 +387,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -396,1 +396,2 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                        if (SSLLogger.isOn &&\n+                                SSLLogger.isOn(\"ssl,keymanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SunX509KeyManagerImpl.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -56,1 +56,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -62,1 +62,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -68,1 +68,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TrustManagerFactoryImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -155,1 +155,1 @@\n-                            SSLLogger.isOn(\"trustmanager\")) {\n+                            SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -270,1 +270,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -324,1 +324,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -332,1 +332,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -337,1 +337,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -358,1 +358,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -384,1 +384,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TrustStoreManager.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -382,1 +382,2 @@\n-                            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                            if (SSLLogger.isOn &&\n+                                    SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -398,1 +399,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -404,1 +405,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -443,1 +444,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -449,1 +450,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -638,1 +639,1 @@\n-                                        SSLLogger.isOn(\"keymanager\")) {\n+                                        SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -654,1 +655,1 @@\n-                                    SSLLogger.isOn(\"keymanager\")) {\n+                                    SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -765,1 +766,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -782,1 +783,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -796,1 +797,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -839,1 +840,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -854,1 +855,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -223,2 +223,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl\") &&\n-                        SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DomainName.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,1 +115,1 @@\n-                            \" -Djavax.net.debug=ssl,handshake\" +\n+                            \" -Djavax.net.debug=ssl\" +\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/SSLEngineKeyLimit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,186 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8044609\n+ * @library \/test\/lib \/javax\/net\/ssl\/templates ..\/..\/\n+ * @summary javax.net.debug \"ssl\" options are not working and documented as expected.\n+ * @run junit DebugPropertyValues\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class DebugPropertyValues extends SSLSocketTemplate {\n+\n+    static Path LOG_FILE;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        LOG_FILE = Path.of(System.getProperty(\"test.classes\"), \"logging.conf\");\n+        Files.writeString(LOG_FILE, \".level = ALL\\n\" +\n+                \"handlers= java.util.logging.ConsoleHandler\\n\" +\n+                \"java.util.logging.ConsoleHandler.level = ALL\\n\");\n+    }\n+\n+    private static Stream<Arguments> patternMatches() {\n+        \/\/ \"Plaintext before ENCRYPTION\" comes from \"ssl:record:plaintext\" option\n+        \/\/ \"handshake, length =\" comes from \"ssl:record\" option\n+        \/\/ \"matching alias:\" comes from ssl:keymanager option\n+        \/\/ \"trigger seeding of SecureRandom\" comes from ssl:sslctx option\n+        \/\/ \"jdk.tls.keyLimits:\" comes from the plain \"ssl\" option\n+        return Stream.of(\n+                \/\/ all should print everything\n+                Arguments.of(List.of(\"-Djavax.net.debug=all\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"adding as trusted certificates\",\n+                                \"supported_versions\"),\n+                        null),\n+                \/\/ ssl should print most details expect verbose details\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ allow expand option for more verbose output\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,expand\"),\n+                        List.of(\"\\\"logger\\\".*: \\\"javax.net.ssl\\\",\",\n+                                \"\\\"message\\\".*: \\\"Produced ClientHello handshake message:\",\n+                                \"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ filtering on record option, with expand\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:record,expand\"),\n+                        List.of(\"\\\"logger\\\".*: \\\"javax.net.ssl\\\",\",\n+                                \"\\\"message\\\".*: \\\"READ: TLSv1.2 application_data\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"\\\"message\\\".*: \\\"Produced ClientHello handshake message:\")),\n+                \/\/ ssl:plaintext isn't valid. \"plaintext\" is sub-option for \"record\"\n+                \/\/ plaintext gets ignored. treat like \"ssl\"\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:plaintext\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ \"all ssl\" mode only true if \"ssl\" is javax.net.debug value\n+                \/\/ this test is equivalent to ssl:record mode\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,record\"),\n+                        List.of(\"handshake, length =\",\n+                                \"WRITE:\"),\n+                        List.of(\"trigger seeding of SecureRandom\",\n+                                \"jdk.tls.keyLimits:\",\n+                                \"matching alias:\",\n+                                \"Plaintext before ENCRYPTION\")),\n+                \/\/ ignore bad sub-option. treat like \"ssl\"\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,typo\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ ssltypo contains \"ssl\". Treat like \"ssl\"\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssltypo\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ plaintext is valid for record option\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:record:plaintext\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"length =\"),\n+                        List.of(\"matching alias:\")),\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:trustmanager\"),\n+                        List.of(\"adding as trusted certificates\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"length =\")),\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:sslctx\"),\n+                        List.of(\"trigger seeding of SecureRandom\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"length =\")),\n+                \/\/ help message test. Should exit without running test\n+                Arguments.of(List.of(\"-Djavax.net.debug=help\"),\n+                        List.of(\"print this help message and exit\",\n+                                \"debugging can be widened with:\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"adding as trusted certificates\",\n+                                \"hex dump of each handshake message\")),\n+                \/\/ add in javax.net.debug sanity test\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:trustmanager\",\n+                                \"-Djava.security.debug=all\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"properties: Initial security property:\",\n+                                \"certpath: Cert path validation succeeded\",\n+                                \"Found trusted certificate:\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"length =\")),\n+                \/\/ empty invokes System.Logger use\n+                Arguments.of(List.of(\"-Djavax.net.debug\",\n+                        \"-Djava.util.logging.config.file=\" + LOG_FILE),\n+                        List.of(\"FINE: adding as trusted certificates\",\n+                        \"FINE: WRITE: TLSv1.3 application_data\",\n+                        \"supported_versions\"),\n+                        null)\n+                );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"patternMatches\")\n+    public void checkDebugOutput(List<String> params, List<String> expected,\n+                                 List<String> notExpected) throws Exception {\n+\n+        List<String> args = new ArrayList<>(params);\n+        args.add(\"DebugPropertyValues\");\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(args);\n+        outputAnalyzer.shouldHaveExitValue(0);\n+        if (expected != null) {\n+            for (String s : expected) {\n+                outputAnalyzer.shouldMatch(s);\n+            }\n+        }\n+        if (notExpected != null) {\n+            for (String s : notExpected) {\n+                outputAnalyzer.shouldNotMatch(s);\n+            }\n+        } else {\n+            outputAnalyzer.stderrShouldNotBeEmpty();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new DebugPropertyValues().run();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/DebugPropertyValues.java","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"},{"patch":"@@ -58,1 +58,1 @@\n-                    \" -Djavax.net.debug=ssl,handshake \" + params);\n+                    \" -Djavax.net.debug=ssl \" + params);\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/MultiNSTNoSessionCreation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-                            \" -Djavax.net.debug=ssl,handshake\");\n+                            \" -Djavax.net.debug=ssl\");\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/ResumptionUpdateBoundValues.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,1 +131,1 @@\n-                            \" -Djavax.net.debug=ssl,handshake\" +\n+                            \" -Djavax.net.debug=ssl\" +\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketKeyLimit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}