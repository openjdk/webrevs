{"files":[{"patch":"@@ -114,2 +114,9 @@\n-                    if (Opt.SSL.on && !Opt.isAnySubComponentEnabled()) {\n-                        Opt.enableAllSubComponents();\n+                    if (Opt.SSL.on &&\n+                            EnumSet.allOf(Opt.class)\n+                                    .stream()\n+                                    .noneMatch(o -> o.on && o.isSubComponent)) {\n+                        for (Opt opt : Opt.values()) {\n+                            if (opt.isSubComponent) {\n+                                opt.on = true;\n+                            }\n+                        }\n@@ -166,1 +173,2 @@\n-                     logger.log(level, () -> msg + \":\\n\" + SSLSimpleFormatter.formatParameters(params));\n+                     logger.log(level, () -> msg + \":\\n\" +\n+                             SSLSimpleFormatter.formatParameters(params));\n@@ -199,1 +207,1 @@\n-        System.err.println(\"The following can be used with ssl:\");\n+        System.err.println(\"The following filters can be used with ssl:\");\n@@ -202,0 +210,2 @@\n+        System.err.println(\"\\t    verbose   verbose handshake\" +\n+                                \" message printing (widens handshake)\");\n@@ -204,0 +214,4 @@\n+        System.err.println(\"\\t    plaintext    hex dump of record\" +\n+                                \" plaintext (widens record)\");\n+        System.err.println(\"\\t    packet       print raw SSL\/TLS\" +\n+                                \" packets (widens record)\");\n@@ -206,2 +220,0 @@\n-        System.err.println(\"\\tdefaultctx   print default SSL initialization\");\n-        System.err.println(\"\\tsslctx       print SSLContext tracing\");\n@@ -209,1 +221,1 @@\n-        System.err.println(\"\\tkeymanager   print key manager tracing\");\n+        System.err.println(\"\\tsslctx       print SSLContext tracing\");\n@@ -211,8 +223,0 @@\n-        System.err.println(\"\\tpluggability print pluggability tracing\");\n-        System.err.println();\n-        System.err.println(\"\\thandshake debugging can be widened with:\");\n-        System.err.println(\"\\tverbose   verbose handshake message printing\");\n-        System.err.println();\n-        System.err.println(\"\\trecord debugging can be widened with:\");\n-        System.err.println(\"\\tplaintext    hex dump of record plaintext\");\n-        System.err.println(\"\\tpacket       print raw SSL\/TLS packets\");\n@@ -223,0 +227,15 @@\n+    \/**\n+     * Enum representing possible debug options for JSSE debugging.\n+     *\n+     * ALL and SSL are considered master components. Entries without an\n+     * underscore (\"_\"), and not ALL or SSL, are subcomponents. Entries\n+     * with an underscore (\"_\") denote options specific to subcomponents.\n+     *\n+     * Fields:\n+     * - 'component': Lowercase name of the option.\n+     * - 'isSubComponent': True for subcomponents.\n+     * - 'on': Indicates whether the option is enabled. Some rule based logic\n+     *         is used to determine value of this field.\n+     *\n+     * Enabling subcomponents fine-tunes (filters) debug output.\n+     *\/\n@@ -234,0 +253,1 @@\n+        SESSIONCACHE, \/\/ placeholder for 8344685\n@@ -239,0 +259,1 @@\n+        final boolean isSubComponent;\n@@ -242,28 +263,4 @@\n-            this.component = this.toString().toLowerCase(Locale.ROOT);\n-        }\n-\n-        public static boolean isAnySubComponentEnabled() {\n-            for (Opt option : subComponentList()) {\n-                if (option.on) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n-\n-        public static void enableAllSubComponents() {\n-            for (Opt option: subComponentList()) {\n-                option.on = true;\n-            }\n-        }\n-\n-        public static List<Opt> subComponentList() {\n-            List<Opt> subComponents = new ArrayList<>();\n-            for (Opt option : values()) {\n-                if (option.component.contains(\"_\")\n-                        || option.equals(ALL) || option.equals(SSL)) {\n-                    continue;\n-                }\n-                subComponents.add(option);\n-            }\n-            return subComponents;\n+            this.component = this.toString().toLowerCase(Locale.ENGLISH);\n+            this.isSubComponent = !(component.contains(\"_\") ||\n+                    component.equals(\"all\") ||\n+                    component.equals(\"ssl\"));\n@@ -324,2 +321,3 @@\n-        private static final DateTimeFormatter dateTimeFormat = DateTimeFormatter.ofPattern(PATTERN, Locale.ENGLISH)\n-                                                                                 .withZone(ZoneId.systemDefault());\n+        private static final DateTimeFormatter dateTimeFormat =\n+                DateTimeFormatter.ofPattern(PATTERN, Locale.ENGLISH)\n+                        .withZone(ZoneId.systemDefault());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLLogger.java","additions":43,"deletions":45,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-                        \"debugging can be widened with:\"));\n+                        \"verbose handshake message printing\"));\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/DebugPropertyValuesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}