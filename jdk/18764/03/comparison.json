{"files":[{"patch":"@@ -504,1 +504,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"handshake\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n@@ -514,1 +514,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"handshake\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateMessage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -142,1 +142,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -154,1 +154,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -173,1 +173,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -233,1 +233,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -265,1 +265,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -288,1 +288,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -712,1 +712,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -896,1 +896,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -942,1 +942,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -955,1 +955,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -993,1 +993,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1014,1 +1014,1 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1026,1 +1026,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1111,1 +1111,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1123,1 +1123,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1140,1 +1140,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1162,1 +1162,1 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1313,1 +1313,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1321,1 +1321,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1334,1 +1334,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1348,1 +1348,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1360,1 +1360,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1374,1 +1374,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1386,1 +1386,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1409,1 +1409,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1423,1 +1423,1 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1434,1 +1434,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1447,1 +1447,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -1461,1 +1461,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSInputRecord.java","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -272,1 +272,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -285,1 +285,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -500,1 +500,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -514,1 +514,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSOutputRecord.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -286,1 +286,1 @@\n-                } else if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                } else if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -293,1 +293,1 @@\n-            if (!found && (SSLLogger.isOn) && SSLLogger.isOn(\"handshake\")) {\n+            if (!found && (SSLLogger.isOn) && SSLLogger.isOn(\"ssl,handshake\")) {\n@@ -337,1 +337,1 @@\n-                        SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                        SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -558,1 +558,1 @@\n-                                SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+                                SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -572,1 +572,1 @@\n-            if (!retval && SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+            if (!retval && SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n@@ -578,1 +578,1 @@\n-        } else if (SSLLogger.isOn && SSLLogger.isOn(\"verbose\")) {\n+        } else if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HandshakeContext.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -711,1 +711,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"handshake\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/KeyShareExtension.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,1 +255,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"sslctx\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,sslctx\")) {\n@@ -271,1 +271,1 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"sslctx\")) {\n+                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,sslctx\")) {\n@@ -288,1 +288,1 @@\n-            } else if (SSLLogger.isOn && SSLLogger.isOn(\"sslctx\")) {\n+            } else if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,sslctx\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PredefinedDHParameterSpecs.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -872,1 +872,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -942,1 +942,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1062,1 +1062,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1194,1 +1194,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1338,1 +1338,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1490,1 +1490,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1662,1 +1662,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1749,1 +1749,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -1934,1 +1934,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -2028,1 +2028,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -2184,1 +2184,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -2275,1 +2275,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -2453,1 +2453,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n@@ -2544,1 +2544,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"plaintext\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,plaintext\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLCipher.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -212,1 +212,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -391,1 +391,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -413,1 +413,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineInputRecord.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -278,1 +278,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -291,1 +291,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -320,1 +320,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -335,1 +335,1 @@\n-                if (SSLLogger.isOn(\"record\")) {\n+                if (SSLLogger.isOn(\"ssl,record\")) {\n@@ -341,1 +341,1 @@\n-                if (SSLLogger.isOn(\"packet\")) {\n+                if (SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -528,1 +528,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -546,1 +546,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineOutputRecord.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+    public static final boolean sslOn;\n@@ -77,1 +78,0 @@\n-\n@@ -81,0 +81,4 @@\n+            \/\/ log almost everything for the \"ssl\" value.\n+            \/\/ anything else specified with \"ssl\" in the property value implies\n+            \/\/ a subcomponent value is to be logged.\n+            sslOn = property.equals(\"ssl\");\n@@ -85,0 +89,1 @@\n+            sslOn = false;\n@@ -90,2 +95,1 @@\n-        System.err.println(\"help           print the help messages\");\n-        System.err.println(\"expand         expand debugging information\");\n+        System.err.println(\"help           print this help message and exit\");\n@@ -97,1 +101,1 @@\n-        System.err.println(\"\\trecord       enable per-record tracing\");\n+        System.err.println(\"\\tdefaultctx   print default SSL initialization\");\n@@ -99,1 +103,4 @@\n-        System.err.println(\"\\tkeygen       print key generation data\");\n+        System.err.println(\"\\tkeymanager   print key manager tracing\");\n+        System.err.println(\"\\tpluggability print pluggability tracing\");\n+        System.err.println(\"\\trecord       enable per-record tracing\");\n+        System.err.println(\"\\trespmgr      print OCSP response tracing\");\n@@ -101,1 +108,0 @@\n-        System.err.println(\"\\tdefaultctx   print default SSL initialization\");\n@@ -103,2 +109,0 @@\n-        System.err.println(\"\\tsessioncache print session cache tracing\");\n-        System.err.println(\"\\tkeymanager   print key manager tracing\");\n@@ -106,1 +110,0 @@\n-        System.err.println(\"\\tpluggability print pluggability tracing\");\n@@ -109,2 +112,1 @@\n-        System.err.println(\"\\tdata         hex dump of each handshake message\");\n-        System.err.println(\"\\tverbose      verbose handshake message printing\");\n+        System.err.println(\"\\tverbose   verbose handshake message printing\");\n@@ -121,1 +123,7 @@\n-     * debug check points, or System.Logger is used.\n+     * debug check points, \"all\" or if the System.Logger is used.\n+     *\n+     * Specify all string tokens required when calling this method.\n+     * E.g. since \"plaintext\" is a widened option of the \"record\" option,\n+     * the call needs to be isOn(\"ssl,record,plaintext\") to ensure\n+     * correct use. It also ensures that the user specifies the correct\n+     * system property value syntax as per help menu.\n@@ -124,1 +132,9 @@\n-        if (property == null) {              \/\/ debugging is turned off\n+        if (property == null) {\n+            \/\/ debugging is turned off\n+            return false;\n+        } else if (property.isEmpty() || property.equals(\"all\")) {\n+            \/\/ System.Logger in use or property = \"all\"\n+            return true;\n+        } else if (checkPoints.equals(\"ssl\") && !sslOn) {\n+            \/\/ this helps prevent cases where property might have\n+            \/\/ been specified as \"ssltypo\" -- shouldn't log.\n@@ -126,1 +142,2 @@\n-        } else if (property.isEmpty()) {     \/\/ use System.Logger\n+        } else if (sslOn && !containsWidenOption(checkPoints)) {\n+            \/\/ fast path - in sslOn mode, we always log except for widen options\n@@ -128,1 +145,1 @@\n-        }                                   \/\/ use provider logger\n+        }\n@@ -132,2 +149,2 @@\n-            option = option.trim();\n-            if (!SSLLogger.hasOption(option)) {\n+            option = option.trim().toLowerCase(Locale.ROOT);\n+            if (!property.contains(option)) {\n@@ -137,1 +154,0 @@\n-\n@@ -141,17 +157,4 @@\n-    private static boolean hasOption(String option) {\n-        option = option.toLowerCase(Locale.ENGLISH);\n-        if (property.contains(\"all\")) {\n-            return true;\n-        } else {\n-            int offset = property.indexOf(\"ssl\");\n-            if (offset != -1 && property.indexOf(\"sslctx\", offset) != -1) {\n-                \/\/ don't enable data and plaintext options by default\n-                if (!(option.equals(\"data\")\n-                        || option.equals(\"packet\")\n-                        || option.equals(\"plaintext\"))) {\n-                    return true;\n-                }\n-            }\n-        }\n-\n-        return property.contains(option);\n+    private static boolean containsWidenOption(String options) {\n+        return options.contains(\"verbose\")\n+                || options.contains(\"plaintext\")\n+                || options.contains(\"packet\");\n@@ -190,3 +193,1 @@\n-                    String formatted =\n-                            SSLSimpleFormatter.formatParameters(params);\n-                    logger.log(level, msg, formatted);\n+                     logger.log(level, () -> msg + \":\\n\" + SSLSimpleFormatter.formatParameters(params));\n@@ -284,1 +285,1 @@\n-        private static final MessageFormat extendedCertFormart =\n+        private static final MessageFormat extendedCertFormat =\n@@ -301,9 +302,0 @@\n-        \/\/\n-        \/\/ private static MessageFormat certExtFormat = new MessageFormat(\n-        \/\/         \"{0} [{1}] '{'\\n\" +\n-        \/\/         \"  critical: {2}\\n\" +\n-        \/\/         \"  value: {3}\\n\" +\n-        \/\/         \"'}'\",\n-        \/\/         Locale.ENGLISH);\n-        \/\/\n-\n@@ -523,1 +515,1 @@\n-                            extendedCertFormart.format(certFields)));\n+                            extendedCertFormat.format(certFields)));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLLogger.java","additions":42,"deletions":50,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,1 +157,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"handshake\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLMasterKeyDerivation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,1 +218,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"session\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,session\")) {\n@@ -251,1 +251,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"session\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,session\")) {\n@@ -946,1 +946,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"session\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,session\")) {\n@@ -1216,1 +1216,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"session\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,session\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSessionImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -373,1 +373,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"handshake\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,1 +213,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -246,1 +246,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -410,1 +410,1 @@\n-                    if (SSLLogger.isOn(\"record\")) {\n+                    if (SSLLogger.isOn(\"ssl,record\")) {\n@@ -415,1 +415,1 @@\n-                    if (SSLLogger.isOn(\"packet\")) {\n+                    if (SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -448,1 +448,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -491,1 +491,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -497,1 +497,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketInputRecord.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -84,1 +84,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -130,1 +130,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -144,1 +144,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -180,1 +180,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -194,1 +194,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -234,1 +234,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -260,1 +260,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -274,1 +274,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n@@ -333,1 +333,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"record\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record\")) {\n@@ -348,1 +348,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"packet\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,record,packet\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketOutputRecord.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -136,1 +136,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -176,1 +176,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -203,1 +203,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -230,1 +230,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -237,1 +237,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -265,1 +265,1 @@\n-                                SSLLogger.isOn(\"respmgr\")) {\n+                                SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -270,1 +270,1 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -277,1 +277,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -304,1 +304,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -319,1 +319,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -326,1 +326,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -489,1 +489,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -501,1 +501,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -507,1 +507,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -537,1 +537,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -550,1 +550,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -569,1 +569,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n@@ -574,1 +574,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"respmgr\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,respmgr\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/StatusResponseManager.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,1 +159,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -387,1 +387,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -396,1 +396,1 @@\n-                        if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SunX509KeyManagerImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -56,1 +56,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -62,1 +62,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -68,1 +68,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TrustManagerFactoryImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -161,1 +161,1 @@\n-                                    SSLLogger.isOn(\"trustmanager\")) {\n+                                    SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -278,1 +278,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -332,1 +332,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -340,1 +340,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -345,1 +345,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -366,1 +366,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n@@ -392,1 +392,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"trustmanager\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TrustStoreManager.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -382,1 +382,1 @@\n-                            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -398,1 +398,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -404,1 +404,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -443,1 +443,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -449,1 +449,1 @@\n-        if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -638,1 +638,1 @@\n-                                        SSLLogger.isOn(\"keymanager\")) {\n+                                        SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -654,1 +654,1 @@\n-                                    SSLLogger.isOn(\"keymanager\")) {\n+                                    SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -765,1 +765,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -782,1 +782,1 @@\n-                    if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -796,1 +796,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -839,1 +839,1 @@\n-            if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n@@ -854,1 +854,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"keymanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,keymanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -223,2 +223,1 @@\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl\") &&\n-                        SSLLogger.isOn(\"trustmanager\")) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,trustmanager\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DomainName.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-                            \" -Djavax.net.debug=ssl,handshake\" +\n+                            \" -Djavax.net.debug=ssl\" +\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/SSLEngineKeyLimit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8044609\n+ * @library \/test\/lib \/javax\/net\/ssl\/templates ..\/..\/\n+ * @summary javax.net.debug \"ssl\" options are not working and documented as expected.\n+ * @run junit DebugPropertyValues\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class DebugPropertyValues extends SSLSocketTemplate {\n+\n+    static Path LOG_FILE;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        LOG_FILE = Path.of(System.getProperty(\"test.classes\"), \"logging.conf\");\n+        Files.writeString(LOG_FILE, \".level = ALL\\n\" +\n+                \"handlers= java.util.logging.ConsoleHandler\\n\" +\n+                \"java.util.logging.ConsoleHandler.level = ALL\\n\");\n+    }\n+\n+    private static Stream<Arguments> patternMatches() {\n+        \/\/ \"Plaintext before ENCRYPTION\" comes from \"ssl:record:plaintext\" option\n+        \/\/ \"handshake, length =\" comes from \"ssl:record\" option\n+        \/\/ \"matching alias:\" comes from ssl:keymanager option\n+        \/\/ \"trigger seeding of SecureRandom\" comes from ssl:sslctx option\n+        \/\/ \"jdk.tls.keyLimits:\" comes from the plain \"ssl\" option\n+        return Stream.of(\n+                \/\/ all should print everything\n+                Arguments.of(List.of(\"-Djavax.net.debug=all\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"adding as trusted certificates\",\n+                                \"supported_versions\"),\n+                        null),\n+                \/\/ ssl should print most details expect verbose details\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ ssl:plaintext isn't valid. \"plaintext\" is sub-option for \"record\"\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:plaintext\"),\n+                        null,\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"jdk.tls.keyLimits:\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"length =\")),\n+                \/\/ \"all ssl\" mode only true if \"ssl\" is javax.net.debug value\n+                \/\/ this test is equivalent to ssl:record mode\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,record\"),\n+                        List.of(\"handshake, length =\",\n+                                \"WRITE:\"),\n+                        List.of(\"trigger seeding of SecureRandom\",\n+                                \"jdk.tls.keyLimits:\",\n+                                \"matching alias:\",\n+                                \"Plaintext before ENCRYPTION\")),\n+                \/\/ nothing should be printed, typo is invalid\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,typo\"),\n+                        null,\n+                        List.of(\"trigger seeding of SecureRandom\",\n+                                \"jdk.tls.keyLimits:\",\n+                                \"matching alias:\",\n+                                \"Plaintext before ENCRYPTION\")),\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:record:plaintext\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"length =\"),\n+                        List.of(\"matching alias:\")),\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:trustmanager\"),\n+                        List.of(\"adding as trusted certificates\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"length =\")),\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:sslctx\"),\n+                        List.of(\"trigger seeding of SecureRandom\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"length =\")),\n+                \/\/ ssltypo contains \"ssl\" but it's an invalid option\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssltypo\"),\n+                        null,\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"adding as trusted certificates\",\n+                                \"length =\")),\n+                \/\/ help message test. Should exit without running test\n+                Arguments.of(List.of(\"-Djavax.net.debug=help\"),\n+                        List.of(\"print this help message and exit\",\n+                                \"debugging can be widened with:\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"adding as trusted certificates\",\n+                                \"hex dump of each handshake message\")),\n+                \/\/ add in javax.net.debug sanity test\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:trustmanager\",\n+                                \"-Djava.security.debug=all\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"properties: Initial security property:\",\n+                                \"certpath: Cert path validation succeeded\",\n+                                \"Found trusted certificate:\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"length =\")),\n+                \/\/ empty invokes System.Logger use\n+                Arguments.of(List.of(\"-Djavax.net.debug\",\n+                        \"-Djava.util.logging.config.file=\" + LOG_FILE),\n+                        List.of(\"FINE: adding as trusted certificates\",\n+                        \"FINE: WRITE: TLSv1.3 application_data\",\n+                        \"supported_versions\"),\n+                        null)\n+                );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"patternMatches\")\n+    public void checkDebugOutput(List<String> params, List<String> expected,\n+                                 List<String> notExpected) throws Exception {\n+\n+        List<String> args = new ArrayList<>(params);\n+        args.add(\"DebugPropertyValues\");\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(args);\n+        outputAnalyzer.shouldHaveExitValue(0);\n+        if (expected != null) {\n+            for (String s : expected) {\n+                outputAnalyzer.shouldMatch(s);\n+            }\n+        }\n+        if (notExpected != null) {\n+            for (String s : notExpected) {\n+                outputAnalyzer.shouldNotMatch(s);\n+            }\n+        } else {\n+            outputAnalyzer.stderrShouldNotBeEmpty();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new DebugPropertyValues().run();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/DebugPropertyValues.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -185,1 +185,1 @@\n-                            \" -Djavax.net.debug=ssl,handshake\");\n+                            \" -Djavax.net.debug=ssl\");\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/ResumptionUpdateBoundValues.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-                            \" -Djavax.net.debug=ssl,handshake\" +\n+                            \" -Djavax.net.debug=ssl\" +\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketKeyLimit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}