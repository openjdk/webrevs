{"files":[{"patch":"@@ -55,0 +55,3 @@\n+  template <class OopClosureType>\n+  inline void do_metadata(oop obj, OopClosureType* closure);\n+\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,0 +49,24 @@\n+template <class OopClosureType>\n+void InstanceMirrorKlass::do_metadata(oop obj, OopClosureType* closure) {\n+  Klass* klass = java_lang_Class::as_Klass(obj);\n+  if (klass != nullptr) {\n+    if (klass->class_loader_data() == nullptr) {\n+      \/\/ This is a mirror that belongs to a shared class that has not been loaded yet.\n+      assert(klass->is_shared(), \"Must be\");\n+    } else if (klass->is_instance_klass() && klass->class_loader_data()->has_class_mirror_holder()) {\n+      \/\/ A non-strong hidden class doesn't have its own class loader,\n+      \/\/ so when handling the java mirror for the class we need to make sure its class\n+      \/\/ loader data is claimed, this is done by calling do_cld explicitly.\n+      \/\/ For non-strong hidden classes the call to do_cld is made when the class\n+      \/\/ loader itself is handled.\n+      Devirtualizer::do_cld(closure, klass->class_loader_data());\n+    } else {\n+      Devirtualizer::do_klass(closure, klass);\n+    }\n+  } else {\n+    \/\/ Klass is null means this has been a mirror for a primitive type\n+    \/\/ that we do not need to follow as they are always strong roots.\n+    assert(java_lang_Class::is_primitive(obj), \"Sanity\");\n+  }\n+}\n+\n@@ -54,27 +78,1 @@\n-    Klass* klass = java_lang_Class::as_Klass(obj);\n-    \/\/ We'll get null for primitive mirrors.\n-    if (klass != nullptr) {\n-      if (klass->class_loader_data() == nullptr) {\n-        \/\/ This is a mirror that belongs to a shared class that has not be loaded yet.\n-        assert(klass->is_shared(), \"must be\");\n-      } else if (klass->is_instance_klass() && klass->class_loader_data()->has_class_mirror_holder()) {\n-        \/\/ A non-strong hidden class doesn't have its own class loader,\n-        \/\/ so when handling the java mirror for the class we need to make sure its class\n-        \/\/ loader data is claimed, this is done by calling do_cld explicitly.\n-        \/\/ For non-strong hidden classes the call to do_cld is made when the class\n-        \/\/ loader itself is handled.\n-        Devirtualizer::do_cld(closure, klass->class_loader_data());\n-      } else {\n-        Devirtualizer::do_klass(closure, klass);\n-      }\n-    } else {\n-      \/\/ We would like to assert here (as below) that if klass has been null, then\n-      \/\/ this has been a mirror for a primitive type that we do not need to follow\n-      \/\/ as they are always strong roots.\n-      \/\/ However, we might get across a klass that just changed during CMS concurrent\n-      \/\/ marking if allocation occurred in the old generation.\n-      \/\/ This is benign here, as we keep alive all CLDs that were loaded during the\n-      \/\/ CMS concurrent phase in the class loading, i.e. they will be iterated over\n-      \/\/ and kept alive during remark.\n-      \/\/ assert(java_lang_Class::is_primitive(obj), \"Sanity check\");\n-    }\n+    do_metadata<OopClosureType>(obj, closure);\n@@ -124,5 +122,1 @@\n-      Klass* klass = java_lang_Class::as_Klass(obj);\n-      \/\/ We'll get null for primitive mirrors.\n-      if (klass != nullptr) {\n-        Devirtualizer::do_klass(closure, klass);\n-      }\n+      do_metadata<OopClosureType>(obj, closure);\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.inline.hpp","additions":26,"deletions":32,"binary":false,"changes":58,"status":"modified"}]}